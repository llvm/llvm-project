Check that /winsysroot results in the correct machine-specific subdirectory
being searched for the defaultlibs, for a 32-bit .obj.
# RUN: yaml2obj %p/Inputs/hello32.yaml -o %t.obj
# RUN: mkdir -p %t.dir/sysroot/VC/Tools/MSVC/1.1.1.1/lib/x86
# RUN: mkdir -p %t.dir/sysroot/VC/Tools/MSVC/1.1.1.1/lib/x64
# RUN: cp %p/Inputs/std32.lib %t.dir/sysroot/VC/Tools/MSVC/1.1.1.1/lib/x86
# RUN: cp %p/Inputs/std64.lib %t.dir/sysroot/VC/Tools/MSVC/1.1.1.1/lib/x64
# RUN: lld-link %t.obj /winsysroot:%t.dir/sysroot \
# RUN:          /defaultlib:std32 /entry:main@0

Check the same for a 64-bit input .obj.
# RUN: lld-link %p/Inputs/hello64.obj /winsysroot:%t.dir/sysroot \
# RUN:          /defaultlib:std64 /entry:main

Check directly passed lib with /machine:
# RUN: lld-link %p/Inputs/hello64.obj /winsysroot:%t.dir/sysroot /machine:x64 \
# RUN:          std64.lib /entry:main

# RUN: lld-link %t.obj /winsysroot:%t.dir/sysroot /machine:x86 \
# RUN:          std32.lib /entry:main

Check directly passed lib without /machine: (should infer from obj arch)
# RUN: lld-link %p/Inputs/hello64.obj /winsysroot:%t.dir/sysroot \
# RUN:          std64.lib /entry:main

# RUN: lld-link %t.obj /winsysroot:%t.dir/sysroot \
# RUN:          std32.lib /entry:main

If winsysroot lib appears before we can detect arch we don't find it
# RUN: not lld-link std64.lib %p/Inputs/hello64.obj /winsysroot:%t.dir/sysroot \
# RUN:          /entry:main

Check we don't choose the wrong arch
# RUN: not lld-link %t.obj /winsysroot:%t.dir/sysroot \
# RUN:          std64.lib /entry:main

# RUN: not lld-link %p/Inputs/hello64.obj /winsysroot:%t.dir/sysroot \
# RUN:          std32.lib /entry:main

Check that when /winsysroot is specified, %LIB% is ignored.
# RUN: env LIB=foo.dir/sysroot/VC/Tools/MSVC/1.1.1.1/lib/x86 not lld-link %t.obj /winsysroot:%t.dir/doesnotexist /defaultlib:std32 2>&1 | FileCheck -check-prefix=LIBIGNORED %s
LIBIGNORED: could not open 'std32.lib'
