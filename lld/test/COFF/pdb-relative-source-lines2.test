REQUIRES: system-windows

Test the linker line tables on roughly the following example:

==> foo.h <==
void bar(void);
inline void foo(void) {
  bar();
}
==> pdb_lines_1.c <==
#include "foo.h"
int main(void) {
  foo();
  return 42;
}
==> pdb_lines_2.c <==
void bar(void) {
}

$ clang-cl -fdebug-compilation-dir . -no-canonical-prefixes -c -Z7 pdb_lines*.c
$ obj2yaml pdb_lines_1.obj > pdb_lines_1_relative.yaml
$ obj2yaml pdb_lines_2.obj > pdb_lines_2_relative.yaml

/pdbsourcepath: only sets the directory that relative paths are considered
relative to, so this test needs to pass relative paths to lld-link for:
1. The input obj files
2. The /pdb: switch
3. The lld-link invocation itself
To achieve this, put all inputs of the lld-link invocation (including lld-link
itself) in a temp directory that's cwd and then make sure to only use relative
arguments when calling ./lld-link below.
RUN: rm -rf %t
RUN: mkdir %t
RUN: cp lld-link %t/lld-link
RUN: cd %t

Test the convoluted case at the end of remapBuildInfo() in lld/COFF/PDB.cpp
The only drawback right now is that this edge case will create LF_BUILDINFO
records with front references in the IPI stream. However the Visual Studio
debugger takes the .PDB thusly created without any problems.
Tested on VS2015, 2017 and 2019.

RUN: yaml2obj %S/Inputs/pdb_lines_1_relative.yaml -o %t/pdb_lines_1_relative.obj
RUN: sed -e "s|String:          \.|String:          "c:\\\src"|" < %S/Inputs/pdb_lines_2_relative.yaml > %t/pdb_lines_2_relative.yaml
RUN: yaml2obj pdb_lines_2_relative.yaml -o %t/pdb_lines_2_relative.obj
RUN: ./lld-link -debug "-pdbsourcepath:c:\src" -entry:main -nodefaultlib -out:out.exe -pdb:out.pdb pdb_lines_1_relative.obj pdb_lines_2_relative.obj
RUN: llvm-pdbutil pdb2yaml -ipi-stream -modules -module-files -module-syms -subsections=lines,fc %t/out.pdb | FileCheck --check-prefix=EXISTING %s

EXISTING-LABEL: IpiStream:

EXISTING:     - Kind:            LF_STRING_ID
EXISTING-NEXT:      StringId:
EXISTING-NEXT:        Id:              0
EXISTING-NEXT:        String:          .
EXISTING-NEXT:    - Kind:            LF_STRING_ID
EXISTING-NEXT:      StringId:
EXISTING-NEXT:        Id:              0
EXISTING-NEXT:        String:          pdb_lines_1.c
EXISTING:    - Kind:            LF_STRING_ID
EXISTING-NEXT:      StringId:
EXISTING-NEXT:        Id:              0
EXISTING-LABEL:        String:          'c:\src'
EXISTING-NEXT:     - Kind:            LF_STRING_ID
EXISTING-NEXT:       StringId:
EXISTING-NEXT:         Id:              0
EXISTING-NEXT:         String:          pdb_lines_2.c
