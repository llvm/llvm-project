REQUIRES: aarch64, x86
RUN: split-file %s %t.dir && cd %t.dir

RUN: llvm-mc -filetype=obj -triple=arm64-windows arm64-func-sym.s -o arm64-func-sym.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-func-sym.s -o arm64ec-func-sym.obj
RUN: llvm-mc -filetype=obj -triple=x86_64-windows x86_64-func-sym.s -o x86_64-func-sym.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows codemap.s -o codemap.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows codemap2.s -o codemap2.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows codemap3.s -o codemap3.obj
RUN: llvm-mc -filetype=obj -triple=arm64ec-windows %S/Inputs/loadconfig-arm64ec.s -o loadconfig-arm64ec.obj

Link ARM64EC DLL and verify that the code is arranged as expected.

RUN: lld-link -out:test.dll -machine:arm64ec arm64ec-func-sym.obj x86_64-func-sym.obj \
RUN:          codemap.obj loadconfig-arm64ec.obj -dll -noentry

RUN: llvm-readobj --coff-load-config test.dll | FileCheck -check-prefix=CODEMAP %s
CODEMAP:       CodeMap [
CODEMAP-NEXT:    0x1000 - 0x1008  ARM64EC
CODEMAP-NEXT:    0x2000 - 0x2006  X64
CODEMAP-NEXT:    0x5000 - 0x5008  ARM64EC
CODEMAP-NEXT:    0x6000 - 0x6006  X64
CODEMAP-NEXT:  ]

RUN: llvm-objdump -d test.dll | FileCheck -check-prefix=DISASM %s
DISASM:      Disassembly of section .text:
DISASM-EMPTY:
DISASM-NEXT: 0000000180001000 <.text>:
DISASM-NEXT: 180001000: 52800040     mov     w0, #0x2
DISASM-NEXT: 180001004: d65f03c0     ret
DISASM-NEXT:                 ...
DISASM-NEXT: 180002000: b8 03 00 00 00               movl    $0x3, %eax
DISASM-NEXT: 180002005: c3                           retq
DISASM-EMPTY:
DISASM-NEXT: Disassembly of section test:
DISASM-EMPTY:
DISASM-NEXT: 0000000180005000 <test>:
DISASM-NEXT: 180005000: 528000a0     mov     w0, #0x5
DISASM-NEXT: 180005004: d65f03c0     ret
DISASM-NEXT:                 ...
DISASM-NEXT: 180006000: b8 06 00 00 00               movl    $0x6, %eax
DISASM-NEXT: 180006005: c3                           retq

Order of arguments doesn't matter in this case, chunks are sorted by target type anyway.

RUN: lld-link -out:test2.dll -machine:arm64ec x86_64-func-sym.obj arm64ec-func-sym.obj \
RUN:          codemap.obj loadconfig-arm64ec.obj -dll -noentry
RUN: llvm-readobj --coff-load-config test2.dll | FileCheck -check-prefix=CODEMAP %s
RUN: llvm-objdump -d test2.dll | FileCheck -check-prefix=DISASM %s

RUN: lld-link -out:testx.dll -machine:arm64x arm64-func-sym.obj arm64ec-func-sym.obj \
RUN:          x86_64-func-sym.obj codemap2.obj loadconfig-arm64ec.obj -dll -noentry

Do the same with ARM64X target.

RUN: llvm-readobj --coff-load-config testx.dll | FileCheck -check-prefix=CODEMAPX %s
CODEMAPX:       CodeMap [
CODEMAPX-NEXT:    0x1000 - 0x1008  ARM64
CODEMAPX-NEXT:    0x2000 - 0x2008  ARM64EC
CODEMAPX-NEXT:    0x3000 - 0x3006  X64
CODEMAPX-NEXT:    0x6000 - 0x6008  ARM64EC
CODEMAPX-NEXT:    0x7000 - 0x7006  X64
CODEMAPX-NEXT:  ]

RUN: llvm-objdump -d testx.dll | FileCheck -check-prefix=DISASMX %s
DISASMX:      Disassembly of section .text:
DISASMX-EMPTY:
DISASMX-NEXT: 0000000180001000 <.text>:
DISASMX-NEXT: 180001000: 528000e0     mov     w0, #0x7
DISASMX-NEXT: 180001004: d65f03c0     ret
DISASMX-NEXT:                 ...
DISASMX-NEXT: 180002000: 52800040     mov     w0, #0x2
DISASMX-NEXT: 180002004: d65f03c0     ret
DISASMX-NEXT:                 ...
DISASMX-NEXT: 180003000: b8 03 00 00 00               movl    $0x3, %eax
DISASMX-NEXT: 180003005: c3                           retq
DISASMX-EMPTY:
DISASMX-NEXT: Disassembly of section test:
DISASMX-EMPTY:
DISASMX-NEXT: 0000000180006000 <test>:
DISASMX-NEXT: 180006000: 528000a0     mov     w0, #0x5
DISASMX-NEXT: 180006004: d65f03c0     ret
DISASMX-NEXT:                 ...
DISASMX-NEXT: 180007000: b8 06 00 00 00               movl    $0x6, %eax
DISASMX-NEXT: 180007005: c3                           retq

Test merged sections.

RUN: lld-link -out:testm.dll -machine:arm64ec arm64ec-func-sym.obj x86_64-func-sym.obj \
RUN:          codemap3.obj loadconfig-arm64ec.obj -dll -noentry -merge:test=.text

RUN: llvm-readobj --coff-load-config testm.dll | FileCheck -check-prefix=CODEMAPM %s
CODEMAPM:      CodeMap [
CODEMAPM-NEXT:   0x1000 - 0x1010  ARM64EC
CODEMAPM-NEXT:   0x2000 - 0x3004  X64
CODEMAPM-NEXT: ]

RUN: llvm-objdump -d testm.dll | FileCheck -check-prefix=DISASMM %s
DISASMM:      Disassembly of section .text:
DISASMM-EMPTY:
DISASMM-NEXT: 0000000180001000 <.text>:
DISASMM-NEXT: 180001000: 52800040     mov     w0, #0x2
DISASMM-NEXT: 180001004: d65f03c0     ret
DISASMM-NEXT: 180001008: 528000a0     mov     w0, #0x5
DISASMM-NEXT: 18000100c: d65f03c0     ret
DISASMM-NEXT:                 ...
DISASMM-NEXT: 180002000: b8 03 00 00 00               movl    $0x3, %eax
DISASMM-NEXT: 180002005: c3                           retq
DISASMM-NEXT:                 ...
DISASMM-NEXT: 180002ffe: 00 00                        addb    %al, (%rax)
DISASMM-NEXT: 180003000: b8 06 00 00 00               movl    $0x6, %eax

#--- arm64-func-sym.s
    .text
    .globl arm64_func_sym
    .p2align 2, 0x0
arm64_func_sym:
    mov w0, #7
    ret

#--- arm64ec-func-sym.s
    .text
    .globl arm64ec_func_sym
    .p2align 12, 0x0
arm64ec_func_sym:
    mov w0, #2
    ret

    .section test, "xr"
    .globl arm64ec_func_sym2
    .p2align 2, 0x0
arm64ec_func_sym2:
    mov w0, #5
    ret

#--- x86_64-func-sym.s
    .text
    .globl x86_64_func_sym
    .p2align 12, 0x0
x86_64_func_sym:
    movl $3, %eax
    retq

    .section test, "xr"
    .globl x86_64_func_sym2
    .p2align 12, 0x0
x86_64_func_sym2:
    movl $6, %eax
    retq

#--- codemap.s
    .section .rdata,"dr"
    .globl code_map
code_map:
    .rva arm64ec_func_sym + 1
    .word 8
    .rva x86_64_func_sym + 2
    .word 6
    .rva arm64ec_func_sym2 + 1
    .word 8
    .rva x86_64_func_sym2 + 2
    .word 6

    .globl code_map_count
code_map_count = 4

#--- codemap2.s
    .section .rdata,"dr"
    .globl code_map
code_map:
    .rva arm64_func_sym
    .word 8
    .rva arm64ec_func_sym + 1
    .word 8
    .rva x86_64_func_sym + 2
    .word 6
    .rva arm64ec_func_sym2 + 1
    .word 8
    .rva x86_64_func_sym2 + 2
    .word 6

    .globl code_map_count
code_map_count = 5

#--- codemap3.s
    .section .rdata,"dr"
    .globl code_map
code_map:
    .rva arm64ec_func_sym + 1
    .word 16
    .rva x86_64_func_sym + 2
    .word 0x1004

    .globl code_map_count
code_map_count = 2
