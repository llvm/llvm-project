REQUIRES: x86, shell

RUN: rm -f %t.dir/* && split-file %s %t.dir/ && cd %t.dir

RUN: llc rtdll.ll -o rtdll.o --filetype=obj
RUN: ld.lld -m i386pep -shared -o rtdll.dll rtdll.o --entry= --out-implib rtdll.dll.a --dynamicbase

RUN: llvm-mc -filetype=obj -triple=x86_64-mingw crt0-x86_64-mingw.s    -o crt0.o
RUN: llvm-mc -filetype=obj -triple=x86_64-mingw dllcrt0-x86_64-mingw.s -o dllcrt0.o
RUN: llc crt1.ll -o crt1.o --filetype=obj

RUN: llc overrider.ll -o overrider.o --filetype=obj
RUN: llvm-ar rc somelib.a overrider.o
RUN: llvm-as overrider.ll -o overrider.bc

RUN: llc somedll.ll -o somedll.o --filetype=obj
RUN: ld.lld -m i386pep --dynamicbase --entry _start --wrap theweak \
RUN:   -shared -o somedll.dll somedll.o dllcrt0.o crt1.o rtdll.dll.a --out-implib somedll.dll.a

RUN: env NAME=noref         DEPS=              sh run.sh CHECK
RUN: env NAME=use           DEPS=              sh run.sh CHECK,CHECK-IMP
RUN: env NAME=override-only DEPS=overrider.o   sh run.sh CHECK,CHECK-IMP-LLD,CHECK-REL
RUN: env NAME=override-use  DEPS=overrider.o   sh run.sh CHECK,CHECK-IMP,CHECK-REL
RUN: env NAME=linklib-noref DEPS=somelib.a     sh run.sh CHECK,CHECK-IMP-LLD,CHECK-REL
RUN: env NAME=linklib-use   DEPS=somelib.a     sh run.sh CHECK,CHECK-IMP,CHECK-REL
RUN: env NAME=linkdll-noref DEPS=somedll.dll.a sh run.sh CHECK,CHECK-IMP-LLD,SOMEDLL
RUN: env NAME=linkdll-use   DEPS=somedll.dll.a sh run.sh CHECK,CHECK-IMP,CHECK-REL-LLD,SOMEDLL,SOMEDLL-IMP-LLD

#--- check-lld.txt
CHECK: 0200[[#%x,ADDR:]] D ref_theweak
CHECK: File
SOMEDLL:          Import {
SOMEDLL-NEXT:       Name: somedll.dll
SOMEDLL-IMP:        Symbol: theweak
SOMEDLL-IMP-LLD:    Symbol: theweak
SOMEDLL:          }
CHECK:            Import {
CHECK-NEXT:         Name: rtdll.dll
CHECK-IMP:          Symbol: __wrap_theweak
CHECK-IMP-LLD:      Symbol: __wrap_theweak
CHECK:            }
CHECK:            BaseReloc [
CHECK-REL:          Type: DIR64
CHECK-REL-NEXT:     Address: 0x[[#%X,ADDR]]
CHECK-REL-LLD:      Type: DIR64
CHECK-REL-LLD-NEXT: Address: 0x[[#%X,ADDR]]
CHECK:            ]

#--- check-bfd.txt
CHECK: 0200[[#%x,ADDR:]] D ref_theweak
CHECK: File
CHECK:            Import {
CHECK-NEXT:         Name: rtdll.dll
CHECK-IMP:          Symbol: __wrap_theweak
CHECK-IMP-BFD:      Symbol: __wrap_theweak
CHECK:            }
SOMEDLL:          Import {
SOMEDLL-NEXT:       Name: somedll.dll
SOMEDLL-IMP:        Symbol: theweak
SOMEDLL-IMP-BFD:    Symbol: theweak
SOMEDLL:          }
CHECK:            BaseReloc [
CHECK-REL:          Type: DIR64
CHECK-REL-NEXT:     Address: 0x[[#%X,ADDR]]
CHECK-REL-BFD:      Type: DIR64
CHECK-REL-BFD-NEXT: Address: 0x[[#%X,ADDR]]
CHECK:            ]

#--- run.sh
set -ex
RUNBIN=true
LINKER=lld
run() {
  if [ "$ASLR" = ON ]; then
    dynamicbase=--dynamicbase
    ASLR=.aslr
  else
    dynamicbase=
    ASLR=
  fi
  ld.$LINKER -m i386pep $dynamicbase --entry _start --subsystem console --wrap theweak --image-base 0x02000000 \
    -o $NAME$LTO$ASLR.exe crt0.o crt1.o $NAME.o $DEPS rtdll.dll.a
  llvm-nm $NAME$LTO$ASLR.exe > $NAME$LTO$ASLR.dump
  llvm-readobj --hex-dump=.data --coff-basereloc --coff-imports $NAME$LTO$ASLR.exe >> $NAME$LTO$ASLR.dump
  FileCheck --input-file=$NAME$LTO$ASLR.dump check-$LINKER.txt --allow-unused-prefixes --check-prefixes=$1 \
    --implicit-check-not=.dll --implicit-check-not="Symbol: {{[a-z_]*}}theweak" --implicit-check-not=DIR64
  [ -z "$RUNBIN" ] || ./$NAME$LTO$ASLR.exe
}
if ! uname -a | grep -E -iq 'cygwin|mingw|msys|wsl'; then
  RUNBIN=
fi
llc $NAME.ll -o $NAME.o --filetype=obj
run "$@"
[ -z "$RUNBIN" ] || ASLR=ON run "$@"
if [ $LINKER = lld ]; then
  llvm-as $NAME.ll -o $NAME.bc
  LTO=.lto run "$@"
  [ -z "$RUNBIN" ] || LTO=.lto ASLR=ON run "$@"
fi

#--- noref.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %3 = icmp ne i32 %1, u0x00
  %4 = zext i1 %3 to i32
  ; return success if not overridden
  ret i32 %4
}

#--- use.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %2 = call i32 @theweak(i32 %1)
  %3 = icmp ne i32 %2, u0x02
  %4 = zext i1 %3 to i32
  ; return success if not overridden and used fallback
  ret i32 %4
}

#--- overrider.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

define dso_local i32 @theweak(i32 %i) nounwind {
  %1 = or i32 %i, u0x04
  ret i32 %1
}
define i32 @anchor(i32 %i) nounwind {
  ret i32 %i
}

#--- override-only.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %3 = icmp ne i32 %1, u0x01
  %4 = zext i1 %3 to i32
  ; return success if overridden
  ret i32 %4
}

#--- override-use.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %2 = call i32 @theweak(i32 %1)
  %3 = icmp ne i32 %2, u0x5
  %4 = zext i1 %3 to i32
  ; return success if overridden and used local obj
  ret i32 %4
}

#--- linklib-noref.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind
declare i32 @anchor(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %3 = icmp ne i32 %1, u0x01
  %4 = zext i1 %3 to i32
  %5 = call i32 @anchor(i32 %4)
  ; return success if overridden
  ret i32 %4
}

#--- linklib-use.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind
declare i32 @anchor(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %2 = call i32 @theweak(i32 %1)
  %3 = icmp ne i32 %2, u0x5
  %4 = zext i1 %3 to i32
  %5 = call i32 @anchor(i32 %4)
  ; return success if overridden and used local obj
  ret i32 %4
}

#--- linkdll-noref.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind
declare i32 @anchor(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %3 = icmp ne i32 %1, u0x01
  %4 = zext i1 %3 to i32
  %5 = call i32 @anchor(i32 %4)
  ; return success if overridden
  ret i32 %4
}

#--- linkdll-use.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

declare i32 @theweak(i32) nounwind
declare i32 @anchor(i32) nounwind

declare dllimport i32 @is_overridden() nounwind
define dso_local i32 @main() nounwind {
  %1 = call i32 @is_overridden()
  %2 = call i32 @theweak(i32 %1)
  %3 = icmp ne i32 %2, u0x9
  %4 = zext i1 %3 to i32
  %5 = call i32 @anchor(i32 %4)
  ; return success if overridden and used from dll
  ret i32 %4
}

#--- crt0-x86_64-mingw.s
  .text
  .globl _start
  .p2align 4
_start:
  call premain
  sub $64, %rsp
  xor %r8, %r8
  movq %r8, 40(%rsp)
  lea 40(%rsp), %rdx
  mov %rdx, 48(%rsp)
  movq %r8, 56(%rsp)
  addq $8, %rdx
  mov $1, %ecx
  call main // ret = main(1, { "", nullptr });
  cmp $127, %eax
  mov $1, %edx
  cmovbe %eax, %edx // ret = (unsigned)ret >= 128 ? 1 : ret
  mov $-1, %rcx
  mov %rcx, %r10
  mov $0x2C, %eax
  syscall   // ExitProcess(-1, ret)
  jmp .

  .section .data,"rw"
  .globl _dummy_data
_dummy_data:
  .quad 0x1122334455667788

  .section .rdata,"r"
  .globl _dummy_rdata
_dummy_rdata:
  .quad 0x1122334455667788

#--- crt1.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

@ref_theweak = dso_local global ptr @__real_theweak
declare extern_weak i32 @__real_theweak(i32) nounwind

declare dllimport void @do_override(ptr %fn) nounwind

define dso_local void @premain() nounwind {
  %1 = load ptr, ptr @ref_theweak
  call void @do_override(ptr %1)
  ret void
}

@__RUNTIME_PSEUDO_RELOC_LIST__ = external dso_local constant ptr
@__RUNTIME_PSEUDO_RELOC_LIST_END__ = external dso_local constant ptr

define dso_local i32 @_pei386_runtime_relocator() {
  ret i32 trunc(i64 sub(i64 ptrtoint(ptr @__RUNTIME_PSEUDO_RELOC_LIST_END__ to i64),
    i64 ptrtoint(ptr @__RUNTIME_PSEUDO_RELOC_LIST__ to i64)) to i32)
}

#--- rtdll.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

@fn_ptr = dso_local global ptr null
define dllexport void @__main() nounwind {
  ret void
}
define dllexport void @do_override(ptr %fn) nounwind {
  %n = icmp eq ptr %fn, null
  br i1 %n, label %fin, label %do
do:
  store ptr %fn, ptr @fn_ptr
  br label %fin
fin:
  ret void
}
define dllexport i32 @is_overridden() nounwind {
  %fn = load ptr, ptr @fn_ptr
  %ne = icmp ne ptr %fn, null
  %r = zext i1 %ne to i32
  ret i32 %r
}
define dllexport i32 @__wrap_theweak(i32 %i) nounwind {
  %fn = load ptr, ptr @fn_ptr
  %n = icmp eq ptr %fn, null
  br i1 %n, label %eq, label %ne
eq:
  %1 = tail call i32 @fallback(i32 %i)
  ret i32 %1
ne:
  %2 = tail call i32 %fn(i32 %i)
  ret i32 %2
}
define dso_local i32 @fallback(i32 %i) nounwind {
  %1 = or i32 %i, u0x02
  ret i32 %1
}

#--- dllcrt0-x86_64-mingw.s
  .text
  .globl _start
  .p2align 4
_start:
  call premain
  jmp dllmain

#--- somedll.ll
target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-windows-gnu"

define dso_local void @dllmain() nounwind {
  ret void
}
define dllexport i32 @theweak(i32 %i) nounwind {
  %1 = or i32 %i, u0x08
  ret i32 %1
}
define dllexport i32 @anchor(i32 %i) nounwind {
  ret i32 %i
}
