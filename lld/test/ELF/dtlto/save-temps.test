# REQUIRES: x86

## Check that DTLTO responds to --save-temps.

RUN: rm -rf %t && split-file %s %t && cd %t

## Generate ThinLTO bitcode.
RUN: opt -thinlto-bc t1.ll -o t1.bc

## Generate object files for mock.py to return.
RUN: llc t1.ll --filetype=obj -o t1.o

## Use a response file for common command-line arguments.
## Note that mock.py does not perform any compilation; instead, it simply writes
## the contents of the object files supplied on the command line into the output
## object files in job order.
RUN: echo "t1.bc -o my.elf \
RUN:   --thinlto-distributor=%python \
RUN:   --thinlto-distributor-arg=%llvm_src_root/utils/dtlto/mock.py \
RUN:   --thinlto-distributor-arg=t1.o" > l.rsp

## Check that DTLTO temporary files are removed by default.
RUN: ld.lld @l.rsp
RUN: ls | FileCheck %s --check-prefix=REMOVED
REMOVED-NOT: .json

## Check that DTLTO temporary files are retained with --save-temps. Note that
## DTLTO temporary object files include a PID component.
RUN: ld.lld @l.rsp --save-temps
RUN: ls | FileCheck %s --check-prefix=RETAINED
RETAINED: my.[[#]].dist-file.json

#--- t1.ll
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define void @t1() {
  ret void
}
