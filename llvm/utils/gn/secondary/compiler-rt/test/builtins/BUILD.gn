import("//compiler-rt/lib/builtins/sources.gni")
import("//compiler-rt/target.gni")
import("//compiler-rt/test/test.gni")
import("//llvm/lib/Target/targets.gni")
import("//llvm/utils/gn/build/toolchain/compiler.gni")
import("//llvm/utils/gn/build/write_cmake_config.gni")
import("//llvm/version.gni")

write_cmake_config("builtins_mode_cfg") {
  input = "Unit/lit.site.cfg.py.in"
  output =
      "$target_gen_dir/${crt_current_target_arch}BuiltinsConfig/lit.site.cfg.py"
  values = [
    "BUILTINS_TEST_CONFIG_SUFFIX=$crt_current_target_suffix",
    "BUILTINS_LIT_SOURCE_DIR=" + rebase_path("."),
    "BUILTINS_TEST_TARGET_ARCH=$crt_current_target_arch",
    "SANITIZER_TEST_CXX_LIBNAME=libc++",
    "COMPILER_RT_BUILD_CRT_PYBOOL=False",
    "MSVC_PYBOOL=False",
    "BUILTINS_IS_MSVC_PYBOOL=False",

    "COMPILER_RT_BINARY_DIR=" + rebase_path("$root_gen_dir/compiler-rt"),
    "LIT_SITE_CFG_IN_HEADER=## Autogenerated from $input, do not edit",
  ]

  features = ""
  foreach(source, builtins_sources) {
    if (features != "") {
      features += ";"
    }
    features += "librt_has_" + get_path_info(source, "name")
  }
  values += [ "BUILTINS_LIT_SOURCE_FEATURES=$features" ]

  cflags = ""
  foreach(define, builtins_defines) {
    cflags += " -D$define"
  }
  values += [ "BUILTINS_TEST_TARGET_CFLAGS=$cflags" ]
}

if (current_toolchain != host_toolchain) {
  group("builtins_toolchain") {
    deps = [
      ":builtins_mode_cfg",
      "//compiler-rt/include($host_toolchain)",
      "//compiler-rt/lib/builtins",
      "//compiler-rt/test:lit_common_configured",
    ]
  }
}

supported_toolchains = []
if (host_os == "linux") {
  supported_toolchains += [ "//llvm/utils/gn/build/toolchain:stage2_unix" ]
}

group("builtins") {
  deps = []
  foreach(toolchain, supported_toolchains) {
    deps += [ ":builtins_toolchain($toolchain)" ]
  }
}

if (supported_toolchains != []) {
  action("check-builtins") {
    script = "$root_build_dir/bin/llvm-lit"
    args = [ "-sv" ]
    foreach(toolchain, supported_toolchains) {
      test_dir = rebase_path(
              get_label_info(":lit_site_cfg($toolchain)", "target_gen_dir"),
              root_build_dir)
      args += [ test_dir + "/${crt_current_target_arch}BuiltinsConfig" ]
    }
    outputs = [ "$target_gen_dir/run-lit" ]  # Non-existing, so that ninja runs
                                             # it each time.

    # Since check-builtins is always dirty, //:default doesn't depend on it so
    # that it's not part of the default ninja target.  Hence, check-builtins
    # shouldn't have any deps except :builtins. so that the default target is
    # sure to build all the deps.
    deps = [ ":builtins" ]
    testonly = true

    pool = "//:console"
  }
}
