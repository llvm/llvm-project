saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "NoOp"
      }
      op {
        name: "PartitionedCall"
        input_arg {
          name: "args"
          type_list_attr: "Tin"
        }
        output_arg {
          name: "output"
          type_list_attr: "Tout"
        }
        attr {
          name: "Tin"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "Tout"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "f"
          type: "func"
        }
        attr {
          name: "config"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "config_proto"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "executor_type"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "ReadVariableOp"
        input_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        output_arg {
          name: "value"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "StatefulPartitionedCall"
        input_arg {
          name: "args"
          type_list_attr: "Tin"
        }
        output_arg {
          name: "output"
          type_list_attr: "Tout"
        }
        attr {
          name: "Tin"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "Tout"
          type: "list(type)"
          has_minimum: true
        }
        attr {
          name: "f"
          type: "func"
        }
        attr {
          name: "config"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "config_proto"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "executor_type"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "VarHandleOp"
        output_arg {
          name: "resource"
          type: DT_RESOURCE
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "allowed_devices"
          type: "list(string)"
          default_value {
            list {
            }
          }
        }
        is_stateful: true
      }
    }
    tags: "serve"
    tensorflow_version: "1.15.0"
    tensorflow_git_version: "unknown"
    stripped_default_attrs: true
  }
  graph_def {
    node {
      name: "train_step"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "train_step"
        }
      }
    }
    node {
      name: "train_step/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "train_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense/kernel"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 34
            }
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "QNetwork/EncodingNetwork/dense/kernel"
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense/kernel/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 34
              }
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense/bias"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "QNetwork/EncodingNetwork/dense/bias"
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense/bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense_1/kernel"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 100
            }
            dim {
              size: 40
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "QNetwork/EncodingNetwork/dense_1/kernel"
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense_1/kernel/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense_1/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 100
              }
              dim {
                size: 40
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense_1/bias"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 40
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "QNetwork/EncodingNetwork/dense_1/bias"
        }
      }
    }
    node {
      name: "QNetwork/EncodingNetwork/dense_1/bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense_1/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 40
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "QNetwork/dense_2/kernel"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 40
            }
            dim {
              size: 2
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "QNetwork/dense_2/kernel"
        }
      }
    }
    node {
      name: "QNetwork/dense_2/kernel/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "QNetwork/dense_2/kernel"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 40
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "QNetwork/dense_2/bias"
      op: "VarHandleOp"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: "QNetwork/dense_2/bias"
        }
      }
    }
    node {
      name: "QNetwork/dense_2/bias/Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "QNetwork/dense_2/bias"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
    }
    node {
      name: "NoOp"
      op: "NoOp"
    }
    node {
      name: "Const"
      op: "Const"
      device: "/device:CPU:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\nu\n\023\010\001\022\017_time_step_spec\n\024\010\002\022\020_trajectory_spec\n\023\010\003\022\017_wrapped_policy\n\016\010\004\022\ntrain_step\n\023\010\005\022\017model_variables\n\016\010\006\022\nsignatures\n\030\n\017\010\007\022\013observation\n\005\010\007\022\0013\n\030\n\017\010\007\022\013observation\n\005\010\007\022\0011\n;\n\016\010\010\022\n_q_network\n\023\010\001\022\017_time_step_spec\n\024\010\t\022\020_trajectory_spec\nE\022C\n\016VARIABLE_VALUE\022\ntrain_step\032%train_step/.ATTRIBUTES/VARIABLE_VALUE\n*\n\005\010\n\022\0010\n\005\010\013\022\0011\n\005\010\014\022\0012\n\005\010\r\022\0013\n\005\010\016\022\0014\n\005\010\017\022\0015\n\000\n\000\n\214\001\n\026\010\020\022\022_input_tensor_spec\n\014\010\021\022\010_encoder\n\022\010\022\022\016_q_value_layer\n\r\010\023\022\tvariables\n\031\010\024\022\025regularization_losses\n\027\010\025\022\023trainable_variables\n\r\010\026\022\tkeras_api\n\030\n\017\010\007\022\013observation\n\005\010\007\022\0011\ng\022e\n\016VARIABLE_VALUE\022%QNetwork/EncodingNetwork/dense/kernel\032,model_variables/0/.ATTRIBUTES/VARIABLE_VALUE\ne\022c\n\016VARIABLE_VALUE\022#QNetwork/EncodingNetwork/dense/bias\032,model_variables/1/.ATTRIBUTES/VARIABLE_VALUE\ni\022g\n\016VARIABLE_VALUE\022\'QNetwork/EncodingNetwork/dense_1/kernel\032,model_variables/2/.ATTRIBUTES/VARIABLE_VALUE\ng\022e\n\016VARIABLE_VALUE\022%QNetwork/EncodingNetwork/dense_1/bias\032,model_variables/3/.ATTRIBUTES/VARIABLE_VALUE\nY\022W\n\016VARIABLE_VALUE\022\027QNetwork/dense_2/kernel\032,model_variables/4/.ATTRIBUTES/VARIABLE_VALUE\nW\022U\n\016VARIABLE_VALUE\022\025QNetwork/dense_2/bias\032,model_variables/5/.ATTRIBUTES/VARIABLE_VALUE\n\000\n\334\001\n\026\010\027\022\022_input_tensor_spec\n\027\010\030\022\023_preprocessing_nest\n\036\010\031\022\032_flat_preprocessing_layers\n\033\010\032\022\027_preprocessing_combiner\n\032\010\033\022\026_postprocessing_layers\n\r\010\034\022\tvariables\n\031\010\035\022\025regularization_losses\n\027\010\036\022\023trainable_variables\n\r\010\037\022\tkeras_api\nh\n\n\010\016\022\006kernel\n\010\010\017\022\004bias\n\r\010 \022\tvariables\n\031\010!\022\025regularization_losses\n\027\010\"\022\023trainable_variables\n\r\010#\022\tkeras_api\n*\n\005\010\n\022\0010\n\005\010\013\022\0011\n\005\010\014\022\0012\n\005\010\r\022\0013\n\005\010\016\022\0014\n\005\010\017\022\0015\n\000\n*\n\005\010\n\022\0010\n\005\010\013\022\0011\n\005\010\014\022\0012\n\005\010\r\022\0013\n\005\010\016\022\0014\n\005\010\017\022\0015\n\255\001\n\021\010$\022\rlayer_metrics\n\r\010\023\022\tvariables\n\037\010%\022\033layer_regularization_losses\n\013\010&\022\007metrics\n\n\010\'\022\006layers\n\031\010\024\022\025regularization_losses\n\033\010(\022\027non_trainable_variables\n\027\010\025\022\023trainable_variables\n\000\n\000\nV\n\005\010)\022\0010\n\005\010*\022\0011\n\005\010+\022\0012\n\005\010,\022\0013\n\005\010-\022\0014\n\005\010.\022\0015\n\005\010/\022\0016\n\005\0100\022\0017\n\005\0101\022\0018\n\005\0102\022\0019\n\006\0103\022\00210\n\006\0104\022\00211\nR\n\r\0105\022\tvariables\n\031\0106\022\025regularization_losses\n\027\0107\022\023trainable_variables\n\r\0108\022\tkeras_api\n\025\n\005\0109\022\0010\n\005\010:\022\0011\n\005\010;\022\0012\n\034\n\005\010\n\022\0010\n\005\010\013\022\0011\n\005\010\014\022\0012\n\005\010\r\022\0013\n\000\n\034\n\005\010\n\022\0010\n\005\010\013\022\0011\n\005\010\014\022\0012\n\005\010\r\022\0013\n\255\001\n\021\010<\022\rlayer_metrics\n\r\010\034\022\tvariables\n\037\010=\022\033layer_regularization_losses\n\013\010>\022\007metrics\n\n\010?\022\006layers\n\031\010\035\022\025regularization_losses\n\033\010@\022\027non_trainable_variables\n\027\010\036\022\023trainable_variables\n\016\n\005\010\016\022\0010\n\005\010\017\022\0011\n\000\n\016\n\005\010\016\022\0010\n\005\010\017\022\0011\n\255\001\n\021\010A\022\rlayer_metrics\n\r\010 \022\tvariables\n\037\010B\022\033layer_regularization_losses\n\013\010C\022\007metrics\n\n\010D\022\006layers\n\031\010!\022\025regularization_losses\n\033\010E\022\027non_trainable_variables\n\027\010\"\022\023trainable_variables\n\000\n\000\n\000\n\016\n\005\010\021\022\0010\n\005\010\022\022\0011\n\000\nR\n\r\010F\022\tvariables\n\031\010G\022\025regularization_losses\n\027\010H\022\023trainable_variables\n\r\010I\022\tkeras_api\nR\n\r\010J\022\tvariables\n\031\010K\022\025regularization_losses\n\027\010L\022\023trainable_variables\n\r\010M\022\tkeras_api\nR\n\r\010N\022\tvariables\n\031\010O\022\025regularization_losses\n\027\010P\022\023trainable_variables\n\r\010Q\022\tkeras_api\nR\n\r\010R\022\tvariables\n\031\010S\022\025regularization_losses\n\027\010T\022\023trainable_variables\n\r\010U\022\tkeras_api\nR\n\r\010V\022\tvariables\n\031\010W\022\025regularization_losses\n\027\010X\022\023trainable_variables\n\r\010Y\022\tkeras_api\nR\n\r\010Z\022\tvariables\n\031\010[\022\025regularization_losses\n\027\010\\\022\023trainable_variables\n\r\010]\022\tkeras_api\nR\n\r\010^\022\tvariables\n\031\010_\022\025regularization_losses\n\027\010`\022\023trainable_variables\n\r\010a\022\tkeras_api\nR\n\r\010b\022\tvariables\n\031\010c\022\025regularization_losses\n\027\010d\022\023trainable_variables\n\r\010e\022\tkeras_api\nR\n\r\010f\022\tvariables\n\031\010g\022\025regularization_losses\n\027\010h\022\023trainable_variables\n\r\010i\022\tkeras_api\nR\n\r\010j\022\tvariables\n\031\010k\022\025regularization_losses\n\027\010l\022\023trainable_variables\n\r\010m\022\tkeras_api\nR\n\r\010n\022\tvariables\n\031\010o\022\025regularization_losses\n\027\010p\022\023trainable_variables\n\r\010q\022\tkeras_api\nR\n\r\010r\022\tvariables\n\031\010s\022\025regularization_losses\n\027\010t\022\023trainable_variables\n\r\010u\022\tkeras_api\n\000\n\000\n\000\n\255\001\n\021\010v\022\rlayer_metrics\n\r\0105\022\tvariables\n\037\010w\022\033layer_regularization_losses\n\013\010x\022\007metrics\n\n\010y\022\006layers\n\031\0106\022\025regularization_losses\n\033\010z\022\027non_trainable_variables\n\027\0107\022\023trainable_variables\nR\n\r\010{\022\tvariables\n\031\010|\022\025regularization_losses\n\027\010}\022\023trainable_variables\n\r\010~\022\tkeras_api\nk\n\n\010\n\022\006kernel\n\010\010\013\022\004bias\n\r\010\177\022\tvariables\n\032\010\200\001\022\025regularization_losses\n\030\010\201\001\022\023trainable_variables\n\016\010\202\001\022\tkeras_api\nl\n\n\010\014\022\006kernel\n\010\010\r\022\004bias\n\016\010\203\001\022\tvariables\n\032\010\204\001\022\025regularization_losses\n\030\010\205\001\022\023trainable_variables\n\016\010\206\001\022\tkeras_api\n\000\n\000\n\000\nv\n\005\010)\022\0010\n\005\010*\022\0011\n\005\010+\022\0012\n\005\010,\022\0013\n\005\010-\022\0014\n\005\010.\022\0015\n\005\010/\022\0016\n\005\0100\022\0017\n\005\0101\022\0018\n\005\0102\022\0019\n\006\0103\022\00210\n\006\0104\022\00211\n\006\010\032\022\00212\n\006\0109\022\00213\n\006\010:\022\00214\n\006\010;\022\00215\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\262\001\n\022\010\207\001\022\rlayer_metrics\n\r\010F\022\tvariables\n \010\210\001\022\033layer_regularization_losses\n\014\010\211\001\022\007metrics\n\013\010\212\001\022\006layers\n\031\010G\022\025regularization_losses\n\034\010\213\001\022\027non_trainable_variables\n\027\010H\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\214\001\022\rlayer_metrics\n\r\010J\022\tvariables\n \010\215\001\022\033layer_regularization_losses\n\014\010\216\001\022\007metrics\n\013\010\217\001\022\006layers\n\031\010K\022\025regularization_losses\n\034\010\220\001\022\027non_trainable_variables\n\027\010L\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\221\001\022\rlayer_metrics\n\r\010N\022\tvariables\n \010\222\001\022\033layer_regularization_losses\n\014\010\223\001\022\007metrics\n\013\010\224\001\022\006layers\n\031\010O\022\025regularization_losses\n\034\010\225\001\022\027non_trainable_variables\n\027\010P\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\226\001\022\rlayer_metrics\n\r\010R\022\tvariables\n \010\227\001\022\033layer_regularization_losses\n\014\010\230\001\022\007metrics\n\013\010\231\001\022\006layers\n\031\010S\022\025regularization_losses\n\034\010\232\001\022\027non_trainable_variables\n\027\010T\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\233\001\022\rlayer_metrics\n\r\010V\022\tvariables\n \010\234\001\022\033layer_regularization_losses\n\014\010\235\001\022\007metrics\n\013\010\236\001\022\006layers\n\031\010W\022\025regularization_losses\n\034\010\237\001\022\027non_trainable_variables\n\027\010X\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\240\001\022\rlayer_metrics\n\r\010Z\022\tvariables\n \010\241\001\022\033layer_regularization_losses\n\014\010\242\001\022\007metrics\n\013\010\243\001\022\006layers\n\031\010[\022\025regularization_losses\n\034\010\244\001\022\027non_trainable_variables\n\027\010\\\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\245\001\022\rlayer_metrics\n\r\010^\022\tvariables\n \010\246\001\022\033layer_regularization_losses\n\014\010\247\001\022\007metrics\n\013\010\250\001\022\006layers\n\031\010_\022\025regularization_losses\n\034\010\251\001\022\027non_trainable_variables\n\027\010`\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\252\001\022\rlayer_metrics\n\r\010b\022\tvariables\n \010\253\001\022\033layer_regularization_losses\n\014\010\254\001\022\007metrics\n\013\010\255\001\022\006layers\n\031\010c\022\025regularization_losses\n\034\010\256\001\022\027non_trainable_variables\n\027\010d\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\257\001\022\rlayer_metrics\n\r\010f\022\tvariables\n \010\260\001\022\033layer_regularization_losses\n\014\010\261\001\022\007metrics\n\013\010\262\001\022\006layers\n\031\010g\022\025regularization_losses\n\034\010\263\001\022\027non_trainable_variables\n\027\010h\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\264\001\022\rlayer_metrics\n\r\010j\022\tvariables\n \010\265\001\022\033layer_regularization_losses\n\014\010\266\001\022\007metrics\n\013\010\267\001\022\006layers\n\031\010k\022\025regularization_losses\n\034\010\270\001\022\027non_trainable_variables\n\027\010l\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\271\001\022\rlayer_metrics\n\r\010n\022\tvariables\n \010\272\001\022\033layer_regularization_losses\n\014\010\273\001\022\007metrics\n\013\010\274\001\022\006layers\n\031\010o\022\025regularization_losses\n\034\010\275\001\022\027non_trainable_variables\n\027\010p\022\023trainable_variables\n\000\n\000\n\000\n\262\001\n\022\010\276\001\022\rlayer_metrics\n\r\010r\022\tvariables\n \010\277\001\022\033layer_regularization_losses\n\014\010\300\001\022\007metrics\n\013\010\301\001\022\006layers\n\031\010s\022\025regularization_losses\n\034\010\302\001\022\027non_trainable_variables\n\027\010t\022\023trainable_variables\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\262\001\n\022\010\303\001\022\rlayer_metrics\n\r\010{\022\tvariables\n \010\304\001\022\033layer_regularization_losses\n\014\010\305\001\022\007metrics\n\013\010\306\001\022\006layers\n\031\010|\022\025regularization_losses\n\034\010\307\001\022\027non_trainable_variables\n\027\010}\022\023trainable_variables\n\016\n\005\010\n\022\0010\n\005\010\013\022\0011\n\000\n\016\n\005\010\n\022\0010\n\005\010\013\022\0011\n\264\001\n\022\010\310\001\022\rlayer_metrics\n\r\010\177\022\tvariables\n \010\311\001\022\033layer_regularization_losses\n\014\010\312\001\022\007metrics\n\013\010\313\001\022\006layers\n\032\010\200\001\022\025regularization_losses\n\034\010\314\001\022\027non_trainable_variables\n\030\010\201\001\022\023trainable_variables\n\016\n\005\010\014\022\0010\n\005\010\r\022\0011\n\000\n\016\n\005\010\014\022\0010\n\005\010\r\022\0011\n\265\001\n\022\010\315\001\022\rlayer_metrics\n\016\010\203\001\022\tvariables\n \010\316\001\022\033layer_regularization_losses\n\014\010\317\001\022\007metrics\n\013\010\320\001\022\006layers\n\032\010\204\001\022\025regularization_losses\n\034\010\321\001\022\027non_trainable_variables\n\030\010\205\001\022\023trainable_variables\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000\n\000"
          }
        }
      }
    }
    node {
      name: "action_callee_basic_block_count"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_callee_conditionally_executed_blocks"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_callee_users"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_caller_basic_block_count"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_caller_conditionally_executed_blocks"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_caller_users"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_callsite_height"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_cost_estimate"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_discount"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_edge_count"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_inlining_default"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_node_count"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_nr_ctant_params"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_reward"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "action_step_type"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 1
            }
          }
        }
      }
    }
    node {
      name: "StatefulPartitionedCall"
      op: "StatefulPartitionedCall"
      input: "action_callee_basic_block_count"
      input: "action_callee_conditionally_executed_blocks"
      input: "action_callee_users"
      input: "action_caller_basic_block_count"
      input: "action_caller_conditionally_executed_blocks"
      input: "action_caller_users"
      input: "action_callsite_height"
      input: "action_cost_estimate"
      input: "action_discount"
      input: "action_edge_count"
      input: "action_inlining_default"
      input: "action_node_count"
      input: "action_nr_ctant_params"
      input: "action_reward"
      input: "action_step_type"
      input: "QNetwork/EncodingNetwork/dense/kernel"
      input: "QNetwork/EncodingNetwork/dense/bias"
      input: "QNetwork/EncodingNetwork/dense_1/kernel"
      input: "QNetwork/EncodingNetwork/dense_1/bias"
      input: "QNetwork/dense_2/kernel"
      input: "QNetwork/dense_2/bias"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_INT64
            type: DT_FLOAT
            type: DT_INT32
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 15
            i: 16
            i: 17
            i: 18
            i: 19
            i: 20
          }
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_signature_wrapper_4619026"
          }
        }
      }
    }
    node {
      name: "PartitionedCall"
      op: "PartitionedCall"
      attr {
        key: "Tin"
        value {
          list {
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_signature_wrapper_4619033"
          }
        }
      }
    }
    node {
      name: "StatefulPartitionedCall_1"
      op: "StatefulPartitionedCall"
      input: "train_step"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
            i: 0
          }
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_signature_wrapper_4619048"
          }
        }
      }
    }
    node {
      name: "saver_filename"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "shape"
        value {
          shape {
          }
        }
      }
    }
    node {
      name: "StatefulPartitionedCall_2"
      op: "StatefulPartitionedCall"
      input: "saver_filename"
      input: "train_step/Read/ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense/kernel/Read/ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense/bias/Read/ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense_1/kernel/Read/ReadVariableOp"
      input: "QNetwork/EncodingNetwork/dense_1/bias/Read/ReadVariableOp"
      input: "QNetwork/dense_2/kernel/Read/ReadVariableOp"
      input: "QNetwork/dense_2/bias/Read/ReadVariableOp"
      input: "Const"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_FLOAT
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__traced_save_4619143"
          }
        }
      }
    }
    node {
      name: "StatefulPartitionedCall_3"
      op: "StatefulPartitionedCall"
      input: "saver_filename"
      input: "train_step"
      input: "QNetwork/EncodingNetwork/dense/kernel"
      input: "QNetwork/EncodingNetwork/dense/bias"
      input: "QNetwork/EncodingNetwork/dense_1/kernel"
      input: "QNetwork/EncodingNetwork/dense_1/bias"
      input: "QNetwork/dense_2/kernel"
      input: "QNetwork/dense_2/bias"
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
            type: DT_RESOURCE
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_collective_manager_ids"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "config_proto"
        value {
          s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference__traced_restore_4619176"
          }
        }
      }
    }
    library {
      function {
        signature {
          name: "__inference_signature_wrapper_4619048"
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "unknown"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 0
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_function_with_signature_4619040"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_function_with_signature_4619029"
        }
        node_def {
          name: "PartitionedCall"
          op: "PartitionedCall"
          attr {
            key: "Tin"
            value {
              list {
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_function_722"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "PartitionedCall"
          }
        }
        attr {
          key: "_input_shapes"
          value {
          }
        }
      }
      function {
        signature {
          name: "__inference_action_931"
          input_arg {
            name: "time_step"
            type: DT_INT32
          }
          input_arg {
            name: "time_step_1"
            type: DT_FLOAT
          }
          input_arg {
            name: "time_step_2"
            type: DT_FLOAT
          }
          input_arg {
            name: "time_step_3"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_4"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_5"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_6"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_7"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_8"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_9"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_10"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_11"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_12"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_13"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_14"
            type: DT_INT64
          }
          input_arg {
            name: "qnetwork_encodingnetwork_dense_matmul_readvariableop_resource"
            type: DT_RESOURCE
          }
          input_arg {
            name: "qnetwork_encodingnetwork_dense_biasadd_readvariableop_resource"
            type: DT_RESOURCE
          }
          input_arg {
            name: "qnetwork_encodingnetwork_dense_1_matmul_readvariableop_resource"
            type: DT_RESOURCE
          }
          input_arg {
            name: "qnetwork_encodingnetwork_dense_1_biasadd_readvariableop_resource"
            type: DT_RESOURCE
          }
          input_arg {
            name: "qnetwork_dense_2_matmul_readvariableop_resource"
            type: DT_RESOURCE
          }
          input_arg {
            name: "qnetwork_dense_2_biasadd_readvariableop_resource"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_3"
          input: "QNetwork/EncodingNetwork/lambda/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 9
                f: 9
                f: 9
                f: 9
                f: 10
                f: 10
                f: 11
                f: 12
                f: 13
                f: 14
                f: 14
                f: 14
                f: 16
                f: 17
                f: 19
                f: 23
                f: 27
                f: 39
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_4"
          input: "QNetwork/EncodingNetwork/lambda_1/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_1/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 3
                f: 3
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 9
                f: 10
                f: 10
                f: 10
                f: 12
                f: 12
                f: 12
                f: 14
                f: 14
                f: 18
                f: 20
                f: 23
                f: 30
                f: 41
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_1/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_1/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_1/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_1/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_1/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_1/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_1/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_1/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_1/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_1/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_1/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_1/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_5"
          input: "QNetwork/EncodingNetwork/lambda_2/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_2/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 22
                f: 22
                f: 22
                f: 22
                f: 23
                f: 23
                f: 23
                f: 24
                f: 24
                f: 24
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 26
                f: 26
                f: 26
                f: 27
                f: 27
                f: 27
                f: 27
                f: 28
                f: 28
                f: 29
                f: 29
                f: 29
                f: 29
                f: 30
                f: 30
                f: 31
                f: 31
                f: 31
                f: 31
                f: 32
                f: 32
                f: 33
                f: 33
                f: 33
                f: 34
                f: 34
                f: 34
                f: 34
                f: 35
                f: 35
                f: 36
                f: 36
                f: 37
                f: 37
                f: 37
                f: 38
                f: 38
                f: 39
                f: 39
                f: 40
                f: 40
                f: 41
                f: 41
                f: 41
                f: 42
                f: 43
                f: 43
                f: 44
                f: 44
                f: 45
                f: 45
                f: 46
                f: 46
                f: 46
                f: 47
                f: 47
                f: 48
                f: 49
                f: 49
                f: 50
                f: 50
                f: 51
                f: 52
                f: 53
                f: 53
                f: 54
                f: 55
                f: 56
                f: 57
                f: 57
                f: 58
                f: 59
                f: 60
                f: 61
                f: 61
                f: 63
                f: 63
                f: 64
                f: 65
                f: 66
                f: 67
                f: 67
                f: 69
                f: 70
                f: 71
                f: 72
                f: 73
                f: 74
                f: 75
                f: 77
                f: 78
                f: 79
                f: 80
                f: 81
                f: 82
                f: 83
                f: 85
                f: 86
                f: 88
                f: 89
                f: 91
                f: 92
                f: 94
                f: 96
                f: 97
                f: 99
                f: 100
                f: 101
                f: 103
                f: 105
                f: 107
                f: 109
                f: 111
                f: 113
                f: 115
                f: 118
                f: 121
                f: 123
                f: 126
                f: 128
                f: 130
                f: 133
                f: 135
                f: 137
                f: 140
                f: 143
                f: 146
                f: 148
                f: 151
                f: 154
                f: 157
                f: 161
                f: 163
                f: 166
                f: 169
                f: 173
                f: 178
                f: 183
                f: 189
                f: 193
                f: 197
                f: 202
                f: 208
                f: 213
                f: 218
                f: 223
                f: 228
                f: 233
                f: 239
                f: 245
                f: 250
                f: 257
                f: 262
                f: 269
                f: 277
                f: 284
                f: 292
                f: 300
                f: 308
                f: 319
                f: 329
                f: 340
                f: 349
                f: 359
                f: 371
                f: 382
                f: 394
                f: 410
                f: 423
                f: 435
                f: 445
                f: 462
                f: 480
                f: 492
                f: 506
                f: 519
                f: 536
                f: 557
                f: 577
                f: 598
                f: 622
                f: 655
                f: 679
                f: 707
                f: 733
                f: 751
                f: 787
                f: 814
                f: 847
                f: 897
                f: 934
                f: 997
                f: 1062
                f: 1111
                f: 1181
                f: 1275
                f: 1385
                f: 1465
                f: 1603
                f: 1769
                f: 2057
                f: 2257
                f: 2803
                f: 3468
                f: 4417
                f: 6538
                f: 16126
                f: 23446
                f: 33536
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_2/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_2/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_2/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_2/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_2/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_2/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_2/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_2/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_2/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_2/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_2/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_2/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_6"
          input: "QNetwork/EncodingNetwork/lambda_3/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_3/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 23
                f: 23
                f: 23
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 26
                f: 26
                f: 26
                f: 26
                f: 27
                f: 27
                f: 27
                f: 27
                f: 27
                f: 28
                f: 28
                f: 28
                f: 29
                f: 29
                f: 29
                f: 29
                f: 30
                f: 30
                f: 30
                f: 31
                f: 31
                f: 31
                f: 32
                f: 32
                f: 32
                f: 33
                f: 33
                f: 33
                f: 34
                f: 34
                f: 34
                f: 34
                f: 35
                f: 35
                f: 35
                f: 36
                f: 36
                f: 36
                f: 37
                f: 37
                f: 37
                f: 38
                f: 38
                f: 38
                f: 38
                f: 39
                f: 39
                f: 40
                f: 40
                f: 41
                f: 41
                f: 42
                f: 43
                f: 43
                f: 44
                f: 45
                f: 45
                f: 46
                f: 47
                f: 47
                f: 48
                f: 49
                f: 49
                f: 50
                f: 50
                f: 52
                f: 52
                f: 53
                f: 54
                f: 55
                f: 55
                f: 57
                f: 58
                f: 59
                f: 60
                f: 62
                f: 64
                f: 65
                f: 66
                f: 68
                f: 70
                f: 70
                f: 70
                f: 70
                f: 70
                f: 71
                f: 73
                f: 75
                f: 76
                f: 78
                f: 81
                f: 84
                f: 86
                f: 90
                f: 94
                f: 98
                f: 101
                f: 106
                f: 111
                f: 117
                f: 123
                f: 130
                f: 138
                f: 146
                f: 157
                f: 163
                f: 176
                f: 187
                f: 198
                f: 214
                f: 227
                f: 252
                f: 280
                f: 327
                f: 395
                f: 506
                f: 671
                f: 1025
                f: 1971
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_3/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_3/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_3/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_3/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_3/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_3/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_3/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_3/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_3/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_3/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_3/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_3/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_7"
          input: "QNetwork/EncodingNetwork/lambda_4/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_4/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 5
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 11
                f: 11
                f: 11
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 13
                f: 13
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 19
                f: 19
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 21
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 25
                f: 26
                f: 26
                f: 26
                f: 26
                f: 26
                f: 26
                f: 26
                f: 26
                f: 26
                f: 26
                f: 27
                f: 28
                f: 28
                f: 28
                f: 28
                f: 28
                f: 29
                f: 30
                f: 30
                f: 30
                f: 30
                f: 30
                f: 30
                f: 31
                f: 32
                f: 32
                f: 32
                f: 32
                f: 32
                f: 34
                f: 34
                f: 34
                f: 34
                f: 34
                f: 34
                f: 35
                f: 36
                f: 36
                f: 36
                f: 37
                f: 38
                f: 38
                f: 38
                f: 39
                f: 40
                f: 40
                f: 41
                f: 42
                f: 42
                f: 43
                f: 44
                f: 44
                f: 46
                f: 46
                f: 47
                f: 48
                f: 48
                f: 50
                f: 50
                f: 52
                f: 52
                f: 54
                f: 55
                f: 55
                f: 56
                f: 57
                f: 58
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 62
                f: 62
                f: 64
                f: 65
                f: 66
                f: 68
                f: 70
                f: 72
                f: 74
                f: 77
                f: 80
                f: 82
                f: 86
                f: 89
                f: 92
                f: 96
                f: 99
                f: 104
                f: 108
                f: 114
                f: 119
                f: 125
                f: 131
                f: 139
                f: 146
                f: 157
                f: 167
                f: 176
                f: 188
                f: 198
                f: 215
                f: 236
                f: 262
                f: 306
                f: 376
                f: 462
                f: 596
                f: 942
                f: 1428
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_4/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_4/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_4/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_4/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_4/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_4/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_4/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_4/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_4/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_4/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_4/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_4/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_8"
          input: "QNetwork/EncodingNetwork/lambda_5/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_5/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 10
                f: 10
                f: 11
                f: 11
                f: 12
                f: 13
                f: 14
                f: 15
                f: 16
                f: 18
                f: 20
                f: 23
                f: 29
                f: 38
                f: 60
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_5/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_5/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_5/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_5/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_5/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_5/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_5/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_5/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_5/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_5/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_5/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_5/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_9"
          input: "QNetwork/EncodingNetwork/lambda_6/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_6/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 3
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 4
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 6
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 7
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 8
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 9
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 11
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 12
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 13
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 14
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 16
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 17
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 18
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 19
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 21
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 22
                f: 23
                f: 23
                f: 23
                f: 23
                f: 23
                f: 23
                f: 23
                f: 24
                f: 24
                f: 24
                f: 24
                f: 24
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 26
                f: 26
                f: 26
                f: 26
                f: 27
                f: 27
                f: 27
                f: 28
                f: 28
                f: 28
                f: 29
                f: 29
                f: 30
                f: 30
                f: 30
                f: 31
                f: 31
                f: 32
                f: 32
                f: 33
                f: 33
                f: 34
                f: 35
                f: 37
                f: 38
                f: 40
                f: 46
                f: 51
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_6/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_6/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_6/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_6/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_6/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_6/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_6/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_6/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_6/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_6/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_6/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_6/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_10"
          input: "QNetwork/EncodingNetwork/lambda_7/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_7/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: -15035
                f: -15030
                f: -15025
                f: -15000
                f: -14985
                f: -14945
                f: -14745
                f: -70
                f: -55
                f: -55
                f: -50
                f: -50
                f: -50
                f: -45
                f: -45
                f: -45
                f: -45
                f: -45
                f: -45
                f: -45
                f: -45
                f: -45
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -40
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -35
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -30
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -25
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -20
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -15
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -10
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: -5
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 5
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 10
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 15
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 20
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 25
                f: 30
                f: 30
                f: 30
                f: 30
                f: 30
                f: 30
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 35
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 40
                f: 45
                f: 45
                f: 45
                f: 45
                f: 45
                f: 45
                f: 45
                f: 45
                f: 45
                f: 45
                f: 50
                f: 50
                f: 50
                f: 50
                f: 50
                f: 50
                f: 50
                f: 50
                f: 50
                f: 55
                f: 55
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 60
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 65
                f: 70
                f: 70
                f: 70
                f: 70
                f: 70
                f: 70
                f: 70
                f: 75
                f: 75
                f: 80
                f: 80
                f: 80
                f: 85
                f: 85
                f: 85
                f: 90
                f: 90
                f: 90
                f: 90
                f: 95
                f: 95
                f: 100
                f: 100
                f: 105
                f: 110
                f: 115
                f: 120
                f: 125
                f: 125
                f: 130
                f: 140
                f: 140
                f: 145
                f: 150
                f: 155
                f: 160
                f: 160
                f: 165
                f: 170
                f: 175
                f: 180
                f: 190
                f: 200
                f: 210
                f: 215
                f: 220
                f: 220
                f: 230
                f: 235
                f: 245
                f: 250
                f: 260
                f: 275
                f: 290
                f: 305
                f: 325
                f: 350
                f: 370
                f: 390
                f: 425
                f: 460
                f: 500
                f: 560
                f: 650
                f: 790
                f: 1025
                f: 1600
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_7/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_7/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_7/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_7/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_7/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_7/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_7/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_7/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_7/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_7/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_7/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_7/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_11"
          input: "QNetwork/EncodingNetwork/lambda_8/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_8/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 18
                f: 29
                f: 39
                f: 48
                f: 57
                f: 64
                f: 70
                f: 76
                f: 82
                f: 87
                f: 92
                f: 97
                f: 101
                f: 105
                f: 109
                f: 113
                f: 116
                f: 120
                f: 123
                f: 127
                f: 130
                f: 134
                f: 137
                f: 140
                f: 143
                f: 146
                f: 149
                f: 152
                f: 156
                f: 159
                f: 162
                f: 165
                f: 168
                f: 171
                f: 174
                f: 177
                f: 180
                f: 183
                f: 186
                f: 188
                f: 191
                f: 194
                f: 197
                f: 200
                f: 203
                f: 205
                f: 208
                f: 211
                f: 214
                f: 217
                f: 219
                f: 222
                f: 225
                f: 228
                f: 231
                f: 233
                f: 236
                f: 239
                f: 242
                f: 244
                f: 247
                f: 250
                f: 253
                f: 255
                f: 258
                f: 261
                f: 264
                f: 266
                f: 269
                f: 272
                f: 275
                f: 278
                f: 280
                f: 283
                f: 286
                f: 289
                f: 292
                f: 294
                f: 297
                f: 300
                f: 303
                f: 305
                f: 308
                f: 311
                f: 314
                f: 317
                f: 319
                f: 322
                f: 325
                f: 327
                f: 330
                f: 333
                f: 336
                f: 339
                f: 341
                f: 344
                f: 347
                f: 350
                f: 353
                f: 355
                f: 358
                f: 361
                f: 364
                f: 367
                f: 370
                f: 373
                f: 375
                f: 378
                f: 381
                f: 384
                f: 387
                f: 390
                f: 393
                f: 396
                f: 399
                f: 401
                f: 404
                f: 407
                f: 410
                f: 413
                f: 416
                f: 419
                f: 422
                f: 425
                f: 428
                f: 431
                f: 434
                f: 437
                f: 440
                f: 443
                f: 446
                f: 449
                f: 452
                f: 455
                f: 458
                f: 461
                f: 464
                f: 467
                f: 470
                f: 473
                f: 476
                f: 479
                f: 483
                f: 486
                f: 489
                f: 492
                f: 495
                f: 498
                f: 501
                f: 504
                f: 507
                f: 511
                f: 514
                f: 517
                f: 520
                f: 523
                f: 526
                f: 530
                f: 533
                f: 536
                f: 539
                f: 542
                f: 545
                f: 549
                f: 552
                f: 555
                f: 558
                f: 562
                f: 565
                f: 569
                f: 572
                f: 575
                f: 579
                f: 582
                f: 585
                f: 589
                f: 592
                f: 595
                f: 599
                f: 602
                f: 605
                f: 609
                f: 612
                f: 616
                f: 620
                f: 623
                f: 626
                f: 630
                f: 634
                f: 637
                f: 641
                f: 644
                f: 648
                f: 651
                f: 655
                f: 658
                f: 662
                f: 665
                f: 669
                f: 672
                f: 676
                f: 680
                f: 683
                f: 687
                f: 691
                f: 694
                f: 698
                f: 702
                f: 705
                f: 709
                f: 712
                f: 716
                f: 720
                f: 724
                f: 727
                f: 731
                f: 735
                f: 739
                f: 742
                f: 746
                f: 750
                f: 754
                f: 758
                f: 761
                f: 765
                f: 769
                f: 773
                f: 777
                f: 780
                f: 784
                f: 788
                f: 792
                f: 796
                f: 800
                f: 804
                f: 808
                f: 812
                f: 816
                f: 820
                f: 823
                f: 828
                f: 832
                f: 836
                f: 840
                f: 844
                f: 848
                f: 852
                f: 856
                f: 860
                f: 864
                f: 868
                f: 873
                f: 877
                f: 881
                f: 885
                f: 889
                f: 893
                f: 897
                f: 902
                f: 906
                f: 910
                f: 914
                f: 919
                f: 923
                f: 927
                f: 931
                f: 935
                f: 940
                f: 944
                f: 948
                f: 953
                f: 957
                f: 962
                f: 966
                f: 970
                f: 975
                f: 979
                f: 984
                f: 988
                f: 993
                f: 997
                f: 1002
                f: 1006
                f: 1011
                f: 1015
                f: 1020
                f: 1024
                f: 1029
                f: 1034
                f: 1038
                f: 1043
                f: 1047
                f: 1052
                f: 1057
                f: 1062
                f: 1066
                f: 1071
                f: 1076
                f: 1081
                f: 1086
                f: 1090
                f: 1095
                f: 1100
                f: 1105
                f: 1110
                f: 1114
                f: 1119
                f: 1124
                f: 1129
                f: 1134
                f: 1139
                f: 1144
                f: 1149
                f: 1154
                f: 1159
                f: 1164
                f: 1169
                f: 1174
                f: 1179
                f: 1184
                f: 1189
                f: 1194
                f: 1199
                f: 1204
                f: 1209
                f: 1215
                f: 1220
                f: 1225
                f: 1230
                f: 1235
                f: 1241
                f: 1246
                f: 1251
                f: 1257
                f: 1262
                f: 1267
                f: 1273
                f: 1278
                f: 1284
                f: 1289
                f: 1294
                f: 1300
                f: 1305
                f: 1311
                f: 1316
                f: 1322
                f: 1327
                f: 1333
                f: 1338
                f: 1344
                f: 1350
                f: 1355
                f: 1361
                f: 1367
                f: 1372
                f: 1378
                f: 1383
                f: 1389
                f: 1395
                f: 1401
                f: 1407
                f: 1413
                f: 1418
                f: 1424
                f: 1430
                f: 1436
                f: 1442
                f: 1448
                f: 1454
                f: 1459
                f: 1465
                f: 1472
                f: 1477
                f: 1483
                f: 1489
                f: 1495
                f: 1501
                f: 1507
                f: 1514
                f: 1520
                f: 1526
                f: 1532
                f: 1538
                f: 1545
                f: 1551
                f: 1557
                f: 1564
                f: 1570
                f: 1576
                f: 1583
                f: 1589
                f: 1596
                f: 1602
                f: 1608
                f: 1615
                f: 1621
                f: 1628
                f: 1634
                f: 1641
                f: 1647
                f: 1654
                f: 1661
                f: 1667
                f: 1674
                f: 1681
                f: 1687
                f: 1694
                f: 1701
                f: 1708
                f: 1715
                f: 1722
                f: 1729
                f: 1735
                f: 1742
                f: 1749
                f: 1756
                f: 1763
                f: 1770
                f: 1777
                f: 1784
                f: 1791
                f: 1798
                f: 1806
                f: 1812
                f: 1820
                f: 1827
                f: 1835
                f: 1841
                f: 1849
                f: 1856
                f: 1863
                f: 1871
                f: 1878
                f: 1885
                f: 1893
                f: 1901
                f: 1908
                f: 1915
                f: 1923
                f: 1930
                f: 1938
                f: 1946
                f: 1953
                f: 1961
                f: 1969
                f: 1976
                f: 1984
                f: 1992
                f: 2000
                f: 2007
                f: 2015
                f: 2023
                f: 2031
                f: 2039
                f: 2047
                f: 2055
                f: 2063
                f: 2071
                f: 2079
                f: 2087
                f: 2095
                f: 2104
                f: 2112
                f: 2120
                f: 2128
                f: 2137
                f: 2146
                f: 2154
                f: 2162
                f: 2171
                f: 2179
                f: 2188
                f: 2197
                f: 2205
                f: 2214
                f: 2223
                f: 2232
                f: 2241
                f: 2250
                f: 2258
                f: 2268
                f: 2277
                f: 2285
                f: 2294
                f: 2304
                f: 2313
                f: 2322
                f: 2331
                f: 2340
                f: 2350
                f: 2359
                f: 2368
                f: 2378
                f: 2388
                f: 2397
                f: 2407
                f: 2416
                f: 2426
                f: 2436
                f: 2446
                f: 2455
                f: 2465
                f: 2475
                f: 2485
                f: 2495
                f: 2505
                f: 2515
                f: 2525
                f: 2535
                f: 2545
                f: 2556
                f: 2566
                f: 2577
                f: 2587
                f: 2598
                f: 2609
                f: 2620
                f: 2631
                f: 2641
                f: 2652
                f: 2663
                f: 2674
                f: 2685
                f: 2696
                f: 2708
                f: 2719
                f: 2730
                f: 2742
                f: 2753
                f: 2764
                f: 2776
                f: 2788
                f: 2799
                f: 2811
                f: 2823
                f: 2835
                f: 2847
                f: 2858
                f: 2870
                f: 2882
                f: 2894
                f: 2906
                f: 2919
                f: 2931
                f: 2943
                f: 2956
                f: 2968
                f: 2981
                f: 2994
                f: 3006
                f: 3019
                f: 3032
                f: 3045
                f: 3058
                f: 3070
                f: 3083
                f: 3096
                f: 3109
                f: 3121
                f: 3134
                f: 3148
                f: 3161
                f: 3174
                f: 3187
                f: 3200
                f: 3214
                f: 3228
                f: 3242
                f: 3255
                f: 3268
                f: 3283
                f: 3297
                f: 3310
                f: 3325
                f: 3340
                f: 3353
                f: 3368
                f: 3383
                f: 3398
                f: 3412
                f: 3427
                f: 3442
                f: 3457
                f: 3471
                f: 3487
                f: 3502
                f: 3516
                f: 3531
                f: 3546
                f: 3561
                f: 3577
                f: 3593
                f: 3608
                f: 3625
                f: 3641
                f: 3657
                f: 3673
                f: 3690
                f: 3706
                f: 3722
                f: 3738
                f: 3755
                f: 3772
                f: 3789
                f: 3805
                f: 3823
                f: 3839
                f: 3856
                f: 3873
                f: 3891
                f: 3908
                f: 3926
                f: 3944
                f: 3960
                f: 3977
                f: 3995
                f: 4013
                f: 4031
                f: 4048
                f: 4067
                f: 4085
                f: 4104
                f: 4122
                f: 4140
                f: 4159
                f: 4177
                f: 4196
                f: 4215
                f: 4234
                f: 4253
                f: 4272
                f: 4291
                f: 4311
                f: 4332
                f: 4351
                f: 4371
                f: 4391
                f: 4412
                f: 4433
                f: 4454
                f: 4474
                f: 4496
                f: 4518
                f: 4538
                f: 4558
                f: 4579
                f: 4601
                f: 4619
                f: 4640
                f: 4662
                f: 4684
                f: 4706
                f: 4728
                f: 4751
                f: 4771
                f: 4794
                f: 4818
                f: 4840
                f: 4863
                f: 4887
                f: 4910
                f: 4933
                f: 4956
                f: 4980
                f: 5004
                f: 5028
                f: 5052
                f: 5076
                f: 5100
                f: 5125
                f: 5152
                f: 5175
                f: 5200
                f: 5226
                f: 5251
                f: 5278
                f: 5304
                f: 5329
                f: 5354
                f: 5381
                f: 5407
                f: 5433
                f: 5460
                f: 5488
                f: 5516
                f: 5544
                f: 5573
                f: 5600
                f: 5628
                f: 5656
                f: 5684
                f: 5713
                f: 5741
                f: 5771
                f: 5799
                f: 5830
                f: 5860
                f: 5891
                f: 5921
                f: 5951
                f: 5980
                f: 6010
                f: 6041
                f: 6073
                f: 6105
                f: 6133
                f: 6163
                f: 6195
                f: 6227
                f: 6258
                f: 6291
                f: 6322
                f: 6356
                f: 6390
                f: 6424
                f: 6457
                f: 6491
                f: 6527
                f: 6561
                f: 6596
                f: 6631
                f: 6665
                f: 6701
                f: 6736
                f: 6771
                f: 6805
                f: 6840
                f: 6877
                f: 6911
                f: 6947
                f: 6985
                f: 7022
                f: 7059
                f: 7097
                f: 7135
                f: 7174
                f: 7212
                f: 7251
                f: 7289
                f: 7327
                f: 7366
                f: 7406
                f: 7447
                f: 7486
                f: 7525
                f: 7566
                f: 7606
                f: 7646
                f: 7688
                f: 7728
                f: 7771
                f: 7814
                f: 7859
                f: 7901
                f: 7949
                f: 7992
                f: 8036
                f: 8082
                f: 8127
                f: 8173
                f: 8218
                f: 8262
                f: 8309
                f: 8353
                f: 8397
                f: 8444
                f: 8489
                f: 8539
                f: 8585
                f: 8632
                f: 8682
                f: 8727
                f: 8777
                f: 8828
                f: 8879
                f: 8929
                f: 8982
                f: 9037
                f: 9087
                f: 9140
                f: 9193
                f: 9250
                f: 9305
                f: 9361
                f: 9418
                f: 9475
                f: 9532
                f: 9589
                f: 9644
                f: 9699
                f: 9758
                f: 9818
                f: 9875
                f: 9935
                f: 9997
                f: 10057
                f: 10117
                f: 10174
                f: 10232
                f: 10296
                f: 10356
                f: 10419
                f: 10482
                f: 10546
                f: 10608
                f: 10670
                f: 10729
                f: 10790
                f: 10855
                f: 10920
                f: 10990
                f: 11054
                f: 11118
                f: 11181
                f: 11248
                f: 11316
                f: 11385
                f: 11454
                f: 11526
                f: 11597
                f: 11667
                f: 11740
                f: 11820
                f: 11897
                f: 11973
                f: 12046
                f: 12126
                f: 12204
                f: 12287
                f: 12370
                f: 12456
                f: 12538
                f: 12627
                f: 12714
                f: 12799
                f: 12883
                f: 12971
                f: 13062
                f: 13154
                f: 13233
                f: 13328
                f: 13418
                f: 13511
                f: 13607
                f: 13709
                f: 13806
                f: 13903
                f: 14002
                f: 14104
                f: 14200
                f: 14288
                f: 14391
                f: 14488
                f: 14590
                f: 14698
                f: 14808
                f: 14910
                f: 15020
                f: 15126
                f: 15238
                f: 15347
                f: 15456
                f: 15574
                f: 15692
                f: 15786
                f: 15896
                f: 16016
                f: 16136
                f: 16250
                f: 16352
                f: 16474
                f: 16575
                f: 16702
                f: 16835
                f: 16965
                f: 17096
                f: 17232
                f: 17370
                f: 17443
                f: 17581
                f: 17719
                f: 17864
                f: 17976
                f: 18116
                f: 18250
                f: 18396
                f: 18540
                f: 18690
                f: 18840
                f: 18989
                f: 19136
                f: 19294
                f: 19445
                f: 19589
                f: 19750
                f: 19905
                f: 20064
                f: 20191
                f: 20325
                f: 20497
                f: 20662
                f: 20833
                f: 20981
                f: 21152
                f: 21334
                f: 21510
                f: 21642
                f: 21821
                f: 22001
                f: 22186
                f: 22379
                f: 22568
                f: 22770
                f: 22958
                f: 23162
                f: 23360
                f: 23524
                f: 23737
                f: 23960
                f: 24175
                f: 24395
                f: 24631
                f: 24865
                f: 25091
                f: 25327
                f: 25580
                f: 25833
                f: 26089
                f: 26361
                f: 26636
                f: 26889
                f: 27155
                f: 27436
                f: 27715
                f: 28003
                f: 28303
                f: 28600
                f: 28916
                f: 29223
                f: 29553
                f: 29884
                f: 30200
                f: 30538
                f: 30868
                f: 31211
                f: 31548
                f: 31881
                f: 32253
                f: 32605
                f: 32980
                f: 33385
                f: 33805
                f: 34254
                f: 34723
                f: 35167
                f: 35666
                f: 36125
                f: 36652
                f: 37177
                f: 37739
                f: 38321
                f: 38932
                f: 39640
                f: 40337
                f: 41000
                f: 41626
                f: 42385
                f: 43122
                f: 43890
                f: 44687
                f: 45609
                f: 46520
                f: 47489
                f: 48432
                f: 49458
                f: 50511
                f: 51561
                f: 52568
                f: 53676
                f: 54936
                f: 56071
                f: 57302
                f: 58513
                f: 59800
                f: 61192
                f: 62702
                f: 64205
                f: 65868
                f: 67780
                f: 69960
                f: 72330
                f: 74918
                f: 77540
                f: 80344
                f: 83727
                f: 87662
                f: 93589
                f: 101441
                f: 110544
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_8/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_8/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_8/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_8/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_8/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_8/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_8/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_8/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_8/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_8/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_8/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_8/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_9/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_9/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_9/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_12"
          input: "QNetwork/EncodingNetwork/lambda_9/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_9/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_9/zeros_like"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
                float_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_9/zeros_like"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_13"
          input: "QNetwork/EncodingNetwork/lambda_10/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_10/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 13
                f: 38
                f: 56
                f: 70
                f: 82
                f: 94
                f: 104
                f: 114
                f: 123
                f: 131
                f: 139
                f: 148
                f: 152
                f: 153
                f: 158
                f: 163
                f: 170
                f: 174
                f: 178
                f: 180
                f: 183
                f: 186
                f: 188
                f: 190
                f: 192
                f: 196
                f: 198
                f: 201
                f: 205
                f: 208
                f: 212
                f: 215
                f: 219
                f: 221
                f: 225
                f: 227
                f: 229
                f: 232
                f: 233
                f: 236
                f: 239
                f: 242
                f: 245
                f: 248
                f: 250
                f: 252
                f: 254
                f: 256
                f: 259
                f: 261
                f: 264
                f: 267
                f: 270
                f: 272
                f: 275
                f: 278
                f: 280
                f: 283
                f: 285
                f: 287
                f: 290
                f: 293
                f: 295
                f: 297
                f: 300
                f: 303
                f: 305
                f: 308
                f: 311
                f: 313
                f: 316
                f: 319
                f: 322
                f: 325
                f: 329
                f: 331
                f: 333
                f: 336
                f: 338
                f: 340
                f: 343
                f: 345
                f: 347
                f: 347
                f: 349
                f: 351
                f: 353
                f: 355
                f: 357
                f: 359
                f: 361
                f: 363
                f: 365
                f: 368
                f: 369
                f: 371
                f: 373
                f: 375
                f: 377
                f: 380
                f: 382
                f: 385
                f: 387
                f: 389
                f: 391
                f: 394
                f: 396
                f: 398
                f: 400
                f: 403
                f: 405
                f: 408
                f: 410
                f: 412
                f: 415
                f: 417
                f: 420
                f: 422
                f: 425
                f: 427
                f: 429
                f: 432
                f: 434
                f: 437
                f: 439
                f: 442
                f: 444
                f: 446
                f: 449
                f: 451
                f: 454
                f: 456
                f: 458
                f: 461
                f: 463
                f: 466
                f: 469
                f: 472
                f: 474
                f: 476
                f: 479
                f: 482
                f: 483
                f: 486
                f: 489
                f: 492
                f: 495
                f: 498
                f: 500
                f: 503
                f: 505
                f: 508
                f: 510
                f: 513
                f: 516
                f: 519
                f: 522
                f: 524
                f: 528
                f: 530
                f: 533
                f: 536
                f: 539
                f: 541
                f: 544
                f: 547
                f: 550
                f: 553
                f: 556
                f: 559
                f: 561
                f: 563
                f: 567
                f: 570
                f: 572
                f: 575
                f: 577
                f: 580
                f: 584
                f: 586
                f: 589
                f: 592
                f: 595
                f: 598
                f: 601
                f: 605
                f: 607
                f: 611
                f: 613
                f: 617
                f: 620
                f: 623
                f: 626
                f: 629
                f: 632
                f: 635
                f: 639
                f: 642
                f: 645
                f: 648
                f: 651
                f: 654
                f: 657
                f: 660
                f: 662
                f: 666
                f: 669
                f: 672
                f: 676
                f: 679
                f: 682
                f: 685
                f: 688
                f: 690
                f: 693
                f: 696
                f: 699
                f: 702
                f: 705
                f: 709
                f: 712
                f: 714
                f: 718
                f: 721
                f: 724
                f: 726
                f: 728
                f: 729
                f: 731
                f: 734
                f: 737
                f: 741
                f: 745
                f: 748
                f: 750
                f: 753
                f: 756
                f: 760
                f: 763
                f: 766
                f: 770
                f: 773
                f: 776
                f: 779
                f: 782
                f: 786
                f: 788
                f: 793
                f: 796
                f: 798
                f: 802
                f: 805
                f: 808
                f: 811
                f: 815
                f: 818
                f: 820
                f: 824
                f: 827
                f: 829
                f: 832
                f: 835
                f: 838
                f: 842
                f: 846
                f: 849
                f: 854
                f: 857
                f: 860
                f: 864
                f: 867
                f: 871
                f: 875
                f: 879
                f: 882
                f: 887
                f: 890
                f: 893
                f: 897
                f: 901
                f: 905
                f: 908
                f: 911
                f: 915
                f: 918
                f: 921
                f: 925
                f: 929
                f: 932
                f: 934
                f: 937
                f: 940
                f: 943
                f: 946
                f: 950
                f: 953
                f: 956
                f: 961
                f: 965
                f: 969
                f: 973
                f: 976
                f: 980
                f: 982
                f: 985
                f: 990
                f: 994
                f: 997
                f: 1001
                f: 1005
                f: 1007
                f: 1010
                f: 1014
                f: 1018
                f: 1022
                f: 1025
                f: 1028
                f: 1033
                f: 1035
                f: 1038
                f: 1042
                f: 1047
                f: 1052
                f: 1056
                f: 1060
                f: 1063
                f: 1067
                f: 1071
                f: 1075
                f: 1079
                f: 1083
                f: 1086
                f: 1088
                f: 1092
                f: 1097
                f: 1102
                f: 1106
                f: 1109
                f: 1113
                f: 1117
                f: 1120
                f: 1125
                f: 1129
                f: 1134
                f: 1137
                f: 1142
                f: 1146
                f: 1150
                f: 1151
                f: 1155
                f: 1159
                f: 1162
                f: 1166
                f: 1170
                f: 1174
                f: 1177
                f: 1181
                f: 1185
                f: 1188
                f: 1193
                f: 1196
                f: 1203
                f: 1207
                f: 1212
                f: 1214
                f: 1217
                f: 1220
                f: 1222
                f: 1222
                f: 1226
                f: 1229
                f: 1233
                f: 1237
                f: 1241
                f: 1246
                f: 1250
                f: 1253
                f: 1257
                f: 1262
                f: 1267
                f: 1272
                f: 1278
                f: 1283
                f: 1287
                f: 1293
                f: 1297
                f: 1301
                f: 1304
                f: 1309
                f: 1315
                f: 1320
                f: 1325
                f: 1329
                f: 1333
                f: 1336
                f: 1341
                f: 1344
                f: 1348
                f: 1351
                f: 1357
                f: 1363
                f: 1368
                f: 1374
                f: 1379
                f: 1383
                f: 1386
                f: 1391
                f: 1395
                f: 1399
                f: 1403
                f: 1407
                f: 1410
                f: 1415
                f: 1418
                f: 1423
                f: 1428
                f: 1432
                f: 1436
                f: 1438
                f: 1442
                f: 1446
                f: 1450
                f: 1454
                f: 1462
                f: 1467
                f: 1472
                f: 1477
                f: 1483
                f: 1488
                f: 1492
                f: 1496
                f: 1503
                f: 1508
                f: 1513
                f: 1518
                f: 1520
                f: 1526
                f: 1531
                f: 1534
                f: 1538
                f: 1542
                f: 1546
                f: 1552
                f: 1558
                f: 1564
                f: 1568
                f: 1573
                f: 1578
                f: 1581
                f: 1590
                f: 1596
                f: 1601
                f: 1606
                f: 1611
                f: 1616
                f: 1622
                f: 1629
                f: 1634
                f: 1640
                f: 1647
                f: 1651
                f: 1657
                f: 1660
                f: 1665
                f: 1672
                f: 1678
                f: 1686
                f: 1692
                f: 1698
                f: 1704
                f: 1709
                f: 1714
                f: 1719
                f: 1724
                f: 1730
                f: 1737
                f: 1744
                f: 1751
                f: 1755
                f: 1761
                f: 1764
                f: 1772
                f: 1778
                f: 1784
                f: 1789
                f: 1799
                f: 1804
                f: 1811
                f: 1819
                f: 1825
                f: 1830
                f: 1838
                f: 1849
                f: 1858
                f: 1862
                f: 1868
                f: 1872
                f: 1878
                f: 1885
                f: 1888
                f: 1892
                f: 1897
                f: 1902
                f: 1907
                f: 1919
                f: 1926
                f: 1932
                f: 1936
                f: 1941
                f: 1946
                f: 1952
                f: 1960
                f: 1968
                f: 1977
                f: 1985
                f: 1992
                f: 1997
                f: 2006
                f: 2012
                f: 2018
                f: 2026
                f: 2034
                f: 2044
                f: 2050
                f: 2057
                f: 2064
                f: 2069
                f: 2075
                f: 2082
                f: 2091
                f: 2098
                f: 2107
                f: 2122
                f: 2126
                f: 2135
                f: 2146
                f: 2149
                f: 2157
                f: 2163
                f: 2172
                f: 2178
                f: 2184
                f: 2191
                f: 2198
                f: 2208
                f: 2216
                f: 2223
                f: 2235
                f: 2242
                f: 2252
                f: 2263
                f: 2272
                f: 2277
                f: 2288
                f: 2296
                f: 2306
                f: 2311
                f: 2318
                f: 2323
                f: 2334
                f: 2341
                f: 2356
                f: 2366
                f: 2373
                f: 2379
                f: 2386
                f: 2407
                f: 2416
                f: 2423
                f: 2432
                f: 2438
                f: 2448
                f: 2453
                f: 2464
                f: 2473
                f: 2473
                f: 2481
                f: 2492
                f: 2504
                f: 2511
                f: 2523
                f: 2529
                f: 2537
                f: 2545
                f: 2556
                f: 2566
                f: 2575
                f: 2584
                f: 2592
                f: 2602
                f: 2613
                f: 2624
                f: 2636
                f: 2643
                f: 2647
                f: 2652
                f: 2664
                f: 2675
                f: 2688
                f: 2693
                f: 2702
                f: 2709
                f: 2722
                f: 2739
                f: 2754
                f: 2766
                f: 2776
                f: 2786
                f: 2799
                f: 2810
                f: 2832
                f: 2840
                f: 2849
                f: 2860
                f: 2873
                f: 2889
                f: 2908
                f: 2914
                f: 2926
                f: 2939
                f: 2950
                f: 2961
                f: 2969
                f: 2978
                f: 2990
                f: 2999
                f: 3023
                f: 3032
                f: 3049
                f: 3066
                f: 3085
                f: 3101
                f: 3107
                f: 3117
                f: 3129
                f: 3144
                f: 3167
                f: 3190
                f: 3212
                f: 3229
                f: 3238
                f: 3264
                f: 3293
                f: 3302
                f: 3309
                f: 3314
                f: 3323
                f: 3344
                f: 3352
                f: 3362
                f: 3390
                f: 3400
                f: 3411
                f: 3435
                f: 3456
                f: 3470
                f: 3485
                f: 3498
                f: 3505
                f: 3519
                f: 3539
                f: 3545
                f: 3545
                f: 3560
                f: 3576
                f: 3597
                f: 3607
                f: 3621
                f: 3641
                f: 3665
                f: 3679
                f: 3701
                f: 3714
                f: 3733
                f: 3741
                f: 3745
                f: 3757
                f: 3773
                f: 3787
                f: 3795
                f: 3805
                f: 3822
                f: 3835
                f: 3844
                f: 3861
                f: 3872
                f: 3878
                f: 3897
                f: 3919
                f: 3941
                f: 3971
                f: 4004
                f: 4014
                f: 4019
                f: 4061
                f: 4068
                f: 4089
                f: 4108
                f: 4117
                f: 4125
                f: 4146
                f: 4165
                f: 4194
                f: 4204
                f: 4224
                f: 4236
                f: 4263
                f: 4290
                f: 4301
                f: 4319
                f: 4326
                f: 4347
                f: 4369
                f: 4386
                f: 4413
                f: 4435
                f: 4451
                f: 4451
                f: 4451
                f: 4476
                f: 4500
                f: 4539
                f: 4579
                f: 4592
                f: 4600
                f: 4622
                f: 4650
                f: 4683
                f: 4714
                f: 4742
                f: 4755
                f: 4771
                f: 4788
                f: 4816
                f: 4828
                f: 4831
                f: 4831
                f: 4831
                f: 4843
                f: 4852
                f: 4865
                f: 4896
                f: 4915
                f: 4931
                f: 4952
                f: 4965
                f: 4983
                f: 5007
                f: 5043
                f: 5061
                f: 5081
                f: 5095
                f: 5122
                f: 5143
                f: 5171
                f: 5204
                f: 5226
                f: 5233
                f: 5250
                f: 5281
                f: 5320
                f: 5323
                f: 5328
                f: 5345
                f: 5374
                f: 5413
                f: 5466
                f: 5492
                f: 5524
                f: 5555
                f: 5567
                f: 5610
                f: 5676
                f: 5701
                f: 5716
                f: 5744
                f: 5768
                f: 5795
                f: 5818
                f: 5854
                f: 5906
                f: 5934
                f: 5960
                f: 5975
                f: 5993
                f: 6025
                f: 6034
                f: 6051
                f: 6082
                f: 6106
                f: 6125
                f: 6159
                f: 6187
                f: 6242
                f: 6287
                f: 6311
                f: 6332
                f: 6348
                f: 6358
                f: 6368
                f: 6377
                f: 6402
                f: 6407
                f: 6428
                f: 6450
                f: 6475
                f: 6498
                f: 6505
                f: 6533
                f: 6565
                f: 6580
                f: 6595
                f: 6611
                f: 6654
                f: 6658
                f: 6705
                f: 6751
                f: 6786
                f: 6828
                f: 6876
                f: 6896
                f: 6948
                f: 6964
                f: 7065
                f: 7082
                f: 7118
                f: 7184
                f: 7214
                f: 7271
                f: 7310
                f: 7357
                f: 7405
                f: 7506
                f: 7613
                f: 7641
                f: 7675
                f: 7720
                f: 7781
                f: 7833
                f: 7860
                f: 7898
                f: 7929
                f: 8044
                f: 8104
                f: 8148
                f: 8236
                f: 8273
                f: 8313
                f: 8349
                f: 8381
                f: 8409
                f: 8498
                f: 8507
                f: 8524
                f: 8570
                f: 8607
                f: 8630
                f: 8637
                f: 8675
                f: 8700
                f: 8714
                f: 8734
                f: 8776
                f: 8836
                f: 8854
                f: 8867
                f: 8868
                f: 9065
                f: 9113
                f: 9121
                f: 9241
                f: 9357
                f: 9360
                f: 9585
                f: 9613
                f: 9684
                f: 9727
                f: 9751
                f: 9777
                f: 9802
                f: 9889
                f: 9903
                f: 9914
                f: 9978
                f: 10061
                f: 10192
                f: 10213
                f: 10345
                f: 10369
                f: 10404
                f: 10430
                f: 10471
                f: 10481
                f: 10489
                f: 10492
                f: 10494
                f: 10524
                f: 10554
                f: 10557
                f: 10560
                f: 10562
                f: 10641
                f: 10716
                f: 10842
                f: 10897
                f: 10967
                f: 11053
                f: 11128
                f: 11137
                f: 11328
                f: 11336
                f: 11401
                f: 11532
                f: 11573
                f: 11860
                f: 11880
                f: 12013
                f: 12305
                f: 12358
                f: 12386
                f: 12404
                f: 12456
                f: 12456
                f: 12476
                f: 12615
                f: 12677
                f: 12981
                f: 13094
                f: 13197
                f: 13708
                f: 13717
                f: 13788
                f: 14049
                f: 14112
                f: 14224
                f: 14257
                f: 14681
                f: 14901
                f: 15006
                f: 15071
                f: 15100
                f: 15248
                f: 15669
                f: 15877
                f: 15953
                f: 15953
                f: 16066
                f: 16072
                f: 16271
                f: 16292
                f: 16386
                f: 16490
                f: 16633
                f: 16670
                f: 16834
                f: 16896
                f: 17543
                f: 17693
                f: 17800
                f: 17859
                f: 18397
                f: 18811
                f: 18826
                f: 18971
                f: 19304
                f: 19319
                f: 19695
                f: 20378
                f: 20865
                f: 21313
                f: 21330
                f: 22321
                f: 22760
                f: 22770
                f: 23783
                f: 23785
                f: 24525
                f: 24844
                f: 24848
                f: 24964
                f: 24966
                f: 27468
                f: 27478
                f: 27555
                f: 27555
                f: 28215
                f: 28219
                f: 28336
                f: 28490
                f: 30213
                f: 30228
                f: 30242
                f: 34116
                f: 43518
                f: 43518
                f: 43518
                f: 43852
                f: 43852
                f: 43852
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_10/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_10/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_10/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_10/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_10/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_10/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_10/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_10/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_10/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_10/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_10/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_10/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/expand_dims/ExpandDims/dim"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/expand_dims/ExpandDims/dim"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/expand_dims/ExpandDims"
          op: "ExpandDims"
          input: "time_step_14"
          input: "QNetwork/EncodingNetwork/lambda_11/expand_dims/ExpandDims/dim:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/expand_dims/ExpandDims"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/Bucketize"
          op: "Bucketize"
          input: "QNetwork/EncodingNetwork/lambda_11/expand_dims/ExpandDims:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "boundaries"
            value {
              list {
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 0
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 1
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 2
                f: 3
                f: 4
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/Bucketize"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/Cast"
          op: "Cast"
          input: "QNetwork/EncodingNetwork/lambda_11/Bucketize:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/Cast"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/truediv/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                }
                float_val: 999
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/truediv/y"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/truediv"
          op: "RealDiv"
          input: "QNetwork/EncodingNetwork/lambda_11/Cast:y:0"
          input: "QNetwork/EncodingNetwork/lambda_11/truediv/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/truediv"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/Sqrt"
          op: "Sqrt"
          input: "QNetwork/EncodingNetwork/lambda_11/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/Sqrt"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/mul"
          op: "Mul"
          input: "QNetwork/EncodingNetwork/lambda_11/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_11/truediv:z:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/mul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/lambda_11/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda_11/truediv:z:0"
          input: "QNetwork/EncodingNetwork/lambda_11/Sqrt:y:0"
          input: "QNetwork/EncodingNetwork/lambda_11/mul:z:0"
          input: "QNetwork/EncodingNetwork/lambda_11/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 3
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/lambda_11/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/concatenate/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/concatenate/concat/axis"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/concatenate/concat"
          op: "ConcatV2"
          input: "QNetwork/EncodingNetwork/lambda/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_1/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_2/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_3/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_4/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_5/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_6/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_7/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_8/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_9/zeros_like:output:0"
          input: "QNetwork/EncodingNetwork/lambda_10/concat:output:0"
          input: "QNetwork/EncodingNetwork/lambda_11/concat:output:0"
          input: "QNetwork/EncodingNetwork/concatenate/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 12
            }
          }
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 34
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/concatenate/concat"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/flatten/Const"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 2
                  }
                }
                tensor_content: "\377\377\377\377\"\000\000\000"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/flatten/Const"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/flatten/Reshape"
          op: "Reshape"
          input: "QNetwork/EncodingNetwork/concatenate/concat:output:0"
          input: "QNetwork/EncodingNetwork/flatten/Const:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 34
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/flatten/Reshape"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense/MatMul/ReadVariableOp"
          op: "ReadVariableOp"
          input: "qnetwork_encodingnetwork_dense_matmul_readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 34
                  }
                  dim {
                    size: 100
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense/MatMul/ReadVariableOp"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense/MatMul"
          op: "MatMul"
          input: "QNetwork/EncodingNetwork/flatten/Reshape:output:0"
          input: "QNetwork/EncodingNetwork/dense/MatMul/ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 100
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense/MatMul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense/BiasAdd/ReadVariableOp"
          op: "ReadVariableOp"
          input: "qnetwork_encodingnetwork_dense_biasadd_readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 100
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense/BiasAdd/ReadVariableOp"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense/BiasAdd"
          op: "BiasAdd"
          input: "QNetwork/EncodingNetwork/dense/MatMul:product:0"
          input: "QNetwork/EncodingNetwork/dense/BiasAdd/ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 100
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense/BiasAdd"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense/Relu"
          op: "Relu"
          input: "QNetwork/EncodingNetwork/dense/BiasAdd:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 100
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense/Relu"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense_1/MatMul/ReadVariableOp"
          op: "ReadVariableOp"
          input: "qnetwork_encodingnetwork_dense_1_matmul_readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 100
                  }
                  dim {
                    size: 40
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense_1/MatMul/ReadVariableOp"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense_1/MatMul"
          op: "MatMul"
          input: "QNetwork/EncodingNetwork/dense/Relu:activations:0"
          input: "QNetwork/EncodingNetwork/dense_1/MatMul/ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 40
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense_1/MatMul"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense_1/BiasAdd/ReadVariableOp"
          op: "ReadVariableOp"
          input: "qnetwork_encodingnetwork_dense_1_biasadd_readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 40
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense_1/BiasAdd/ReadVariableOp"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense_1/BiasAdd"
          op: "BiasAdd"
          input: "QNetwork/EncodingNetwork/dense_1/MatMul:product:0"
          input: "QNetwork/EncodingNetwork/dense_1/BiasAdd/ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 40
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense_1/BiasAdd"
          }
        }
        node_def {
          name: "QNetwork/EncodingNetwork/dense_1/Relu"
          op: "Relu"
          input: "QNetwork/EncodingNetwork/dense_1/BiasAdd:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 40
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/EncodingNetwork/dense_1/Relu"
          }
        }
        node_def {
          name: "QNetwork/dense_2/MatMul/ReadVariableOp"
          op: "ReadVariableOp"
          input: "qnetwork_dense_2_matmul_readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 40
                  }
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/dense_2/MatMul/ReadVariableOp"
          }
        }
        node_def {
          name: "QNetwork/dense_2/MatMul"
          op: "MatMul"
          input: "QNetwork/EncodingNetwork/dense_1/Relu:activations:0"
          input: "QNetwork/dense_2/MatMul/ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/dense_2/MatMul"
          }
        }
        node_def {
          name: "QNetwork/dense_2/BiasAdd/ReadVariableOp"
          op: "ReadVariableOp"
          input: "qnetwork_dense_2_biasadd_readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/dense_2/BiasAdd/ReadVariableOp"
          }
        }
        node_def {
          name: "QNetwork/dense_2/BiasAdd"
          op: "BiasAdd"
          input: "QNetwork/dense_2/MatMul:product:0"
          input: "QNetwork/dense_2/BiasAdd/ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "QNetwork/dense_2/BiasAdd"
          }
        }
        node_def {
          name: "ShiftedCategorical_1/mode/ArgMax/dimension"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: -1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "ShiftedCategorical_1/mode/ArgMax/dimension"
          }
        }
        node_def {
          name: "ShiftedCategorical_1/mode/ArgMax"
          op: "ArgMax"
          input: "QNetwork/dense_2/BiasAdd:output:0"
          input: "ShiftedCategorical_1/mode/ArgMax/dimension:output:0"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "ShiftedCategorical_1/mode/ArgMax"
          }
        }
        node_def {
          name: "add/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "add/y"
          }
        }
        node_def {
          name: "add"
          op: "AddV2"
          input: "ShiftedCategorical_1/mode/ArgMax:output:0"
          input: "add/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "add"
          }
        }
        node_def {
          name: "Deterministic/atol"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic/atol"
          }
        }
        node_def {
          name: "Deterministic/rtol"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic/rtol"
          }
        }
        node_def {
          name: "Deterministic_1/sample/sample_shape/x"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_FLOAT
                tensor_shape {
                  dim {
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/sample_shape/x"
          }
        }
        node_def {
          name: "Deterministic_1/sample/sample_shape"
          op: "Cast"
          input: "Deterministic_1/sample/sample_shape/x:output:0"
          attr {
            key: "DstT"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "SrcT"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/sample_shape"
          }
        }
        node_def {
          name: "Deterministic_1/sample/Shape"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/Shape"
          }
        }
        node_def {
          name: "Deterministic_1/sample/Shape_1"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/Shape_1"
          }
        }
        node_def {
          name: "Deterministic_1/sample/Shape_2"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/Shape_2"
          }
        }
        node_def {
          name: "Deterministic_1/sample/BroadcastArgs"
          op: "BroadcastArgs"
          input: "Deterministic_1/sample/Shape_1:output:0"
          input: "Deterministic_1/sample/Shape_2:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/BroadcastArgs"
          }
        }
        node_def {
          name: "Deterministic_1/sample/BroadcastArgs_1"
          op: "BroadcastArgs"
          input: "Deterministic_1/sample/Shape:output:0"
          input: "Deterministic_1/sample/BroadcastArgs:r0:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/BroadcastArgs_1"
          }
        }
        node_def {
          name: "Deterministic_1/sample/Const"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/Const"
          }
        }
        node_def {
          name: "Deterministic_1/sample/concat/values_0"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/concat/values_0"
          }
        }
        node_def {
          name: "Deterministic_1/sample/concat/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/concat/axis"
          }
        }
        node_def {
          name: "Deterministic_1/sample/concat"
          op: "ConcatV2"
          input: "Deterministic_1/sample/concat/values_0:output:0"
          input: "Deterministic_1/sample/BroadcastArgs_1:r0:0"
          input: "Deterministic_1/sample/Const:output:0"
          input: "Deterministic_1/sample/concat/axis:output:0"
          attr {
            key: "N"
            value {
              i: 3
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/concat"
          }
        }
        node_def {
          name: "Deterministic_1/sample/BroadcastTo"
          op: "BroadcastTo"
          input: "add:z:0"
          input: "Deterministic_1/sample/concat:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/BroadcastTo"
          }
        }
        node_def {
          name: "Deterministic_1/sample/Shape_3"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 2
                  }
                }
                tensor_content: "\001\000\000\000\001\000\000\000"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/Shape_3"
          }
        }
        node_def {
          name: "Deterministic_1/sample/strided_slice/stack"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/strided_slice/stack"
          }
        }
        node_def {
          name: "Deterministic_1/sample/strided_slice/stack_1"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/strided_slice/stack_1"
          }
        }
        node_def {
          name: "Deterministic_1/sample/strided_slice/stack_2"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                int_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/strided_slice/stack_2"
          }
        }
        node_def {
          name: "Deterministic_1/sample/strided_slice"
          op: "StridedSlice"
          input: "Deterministic_1/sample/Shape_3:output:0"
          input: "Deterministic_1/sample/strided_slice/stack:output:0"
          input: "Deterministic_1/sample/strided_slice/stack_1:output:0"
          input: "Deterministic_1/sample/strided_slice/stack_2:output:0"
          attr {
            key: "Index"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "end_mask"
            value {
              i: 1
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/strided_slice"
          }
        }
        node_def {
          name: "Deterministic_1/sample/concat_1/axis"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/concat_1/axis"
          }
        }
        node_def {
          name: "Deterministic_1/sample/concat_1"
          op: "ConcatV2"
          input: "Deterministic_1/sample/sample_shape:y:0"
          input: "Deterministic_1/sample/strided_slice:output:0"
          input: "Deterministic_1/sample/concat_1/axis:output:0"
          attr {
            key: "N"
            value {
              i: 2
            }
          }
          attr {
            key: "T"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/concat_1"
          }
        }
        node_def {
          name: "Deterministic_1/sample/Reshape"
          op: "Reshape"
          input: "Deterministic_1/sample/BroadcastTo:output:0"
          input: "Deterministic_1/sample/concat_1:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Deterministic_1/sample/Reshape"
          }
        }
        node_def {
          name: "clip_by_value/Minimum/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "clip_by_value/Minimum/y"
          }
        }
        node_def {
          name: "clip_by_value/Minimum"
          op: "Minimum"
          input: "Deterministic_1/sample/Reshape:output:0"
          input: "clip_by_value/Minimum/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "clip_by_value/Minimum"
          }
        }
        node_def {
          name: "clip_by_value/y"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT64
                tensor_shape {
                }
                int64_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "clip_by_value/y"
          }
        }
        node_def {
          name: "clip_by_value"
          op: "Maximum"
          input: "clip_by_value/Minimum:z:0"
          input: "clip_by_value/y:output:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "clip_by_value"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "clip_by_value:z:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 9
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 10
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 11
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 12
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 13
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 14
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 15
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 16
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 17
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 18
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 19
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 20
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_signature_wrapper_4619033"
        }
        node_def {
          name: "PartitionedCall"
          op: "PartitionedCall"
          attr {
            key: "Tin"
            value {
              list {
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_function_with_signature_4619029"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "PartitionedCall"
          }
        }
        attr {
          key: "_input_shapes"
          value {
          }
        }
      }
      function {
        signature {
          name: "__inference__traced_save_4619143"
          input_arg {
            name: "file_prefix"
            type: DT_STRING
          }
          input_arg {
            name: "savev2_train_step_read_readvariableop"
            type: DT_INT64
          }
          input_arg {
            name: "savev2_qnetwork_encodingnetwork_dense_kernel_read_readvariableop"
            type: DT_FLOAT
          }
          input_arg {
            name: "savev2_qnetwork_encodingnetwork_dense_bias_read_readvariableop"
            type: DT_FLOAT
          }
          input_arg {
            name: "savev2_qnetwork_encodingnetwork_dense_1_kernel_read_readvariableop"
            type: DT_FLOAT
          }
          input_arg {
            name: "savev2_qnetwork_encodingnetwork_dense_1_bias_read_readvariableop"
            type: DT_FLOAT
          }
          input_arg {
            name: "savev2_qnetwork_dense_2_kernel_read_readvariableop"
            type: DT_FLOAT
          }
          input_arg {
            name: "savev2_qnetwork_dense_2_bias_read_readvariableop"
            type: DT_FLOAT
          }
          input_arg {
            name: "savev2_1_const"
            type: DT_STRING
          }
          output_arg {
            name: "identity_1"
            type: DT_STRING
          }
          is_stateful: true
          control_output: "MergeV2Checkpoints"
          control_output: "SaveV2"
          control_output: "SaveV2_1"
        }
        node_def {
          name: "StaticRegexFullMatch"
          op: "StaticRegexFullMatch"
          input: "file_prefix"
          device: "/device:CPU:*"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "pattern"
            value {
              s: "^s3://.*"
            }
          }
          experimental_debug_info {
            original_node_names: "StaticRegexFullMatch"
          }
        }
        node_def {
          name: "Const"
          op: "Const"
          device: "/device:CPU:*"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                }
                string_val: ".part"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Const"
          }
        }
        node_def {
          name: "Const_1"
          op: "Const"
          device: "/device:CPU:*"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                }
                string_val: "_temp_f4c8d2e64931472295be68a11e57e937/part"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Const_1"
          }
        }
        node_def {
          name: "Select"
          op: "Select"
          input: "StaticRegexFullMatch:output:0"
          input: "Const:output:0"
          input: "Const_1:output:0"
          device: "/device:CPU:*"
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Select"
          }
        }
        node_def {
          name: "StringJoin"
          op: "StringJoin"
          input: "file_prefix"
          input: "Select:output:0"
          device: "/device:CPU:*"
          attr {
            key: "N"
            value {
              i: 2
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StringJoin"
          }
        }
        node_def {
          name: "num_shards"
          op: "Const"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 2
              }
            }
          }
          experimental_debug_info {
            original_node_names: "num_shards"
          }
        }
        node_def {
          name: "ShardedFilename/shard"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 0
              }
            }
          }
          experimental_debug_info {
            original_node_names: "ShardedFilename/shard"
          }
        }
        node_def {
          name: "ShardedFilename"
          op: "ShardedFilename"
          input: "StringJoin:output:0"
          input: "ShardedFilename/shard:output:0"
          input: "num_shards:output:0"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "ShardedFilename"
          }
        }
        node_def {
          name: "SaveV2/tensor_names"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 7
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 7
                  }
                }
                string_val: "train_step/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/0/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/1/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/2/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/3/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/4/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/5/.ATTRIBUTES/VARIABLE_VALUE"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "SaveV2/tensor_names"
          }
        }
        node_def {
          name: "SaveV2/shape_and_slices"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 7
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 7
                  }
                }
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
              }
            }
          }
          experimental_debug_info {
            original_node_names: "SaveV2/shape_and_slices"
          }
        }
        node_def {
          name: "SaveV2"
          op: "SaveV2"
          input: "ShardedFilename:filename:0"
          input: "SaveV2/tensor_names:output:0"
          input: "SaveV2/shape_and_slices:output:0"
          input: "savev2_train_step_read_readvariableop"
          input: "savev2_qnetwork_encodingnetwork_dense_kernel_read_readvariableop"
          input: "savev2_qnetwork_encodingnetwork_dense_bias_read_readvariableop"
          input: "savev2_qnetwork_encodingnetwork_dense_1_kernel_read_readvariableop"
          input: "savev2_qnetwork_encodingnetwork_dense_1_bias_read_readvariableop"
          input: "savev2_qnetwork_dense_2_kernel_read_readvariableop"
          input: "savev2_qnetwork_dense_2_bias_read_readvariableop"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtypes"
            value {
              list {
                type: DT_INT64
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
              }
            }
          }
          experimental_debug_info {
            original_node_names: "SaveV2"
          }
        }
        node_def {
          name: "ShardedFilename_1/shard"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT32
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_INT32
                tensor_shape {
                }
                int_val: 1
              }
            }
          }
          experimental_debug_info {
            original_node_names: "ShardedFilename_1/shard"
          }
        }
        node_def {
          name: "ShardedFilename_1"
          op: "ShardedFilename"
          input: "StringJoin:output:0"
          input: "ShardedFilename_1/shard:output:0"
          input: "num_shards:output:0"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "ShardedFilename_1"
          }
        }
        node_def {
          name: "SaveV2_1/tensor_names"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "SaveV2_1/tensor_names"
          }
        }
        node_def {
          name: "SaveV2_1/shape_and_slices"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                string_val: ""
              }
            }
          }
          experimental_debug_info {
            original_node_names: "SaveV2_1/shape_and_slices"
          }
        }
        node_def {
          name: "SaveV2_1"
          op: "SaveV2"
          input: "ShardedFilename_1:filename:0"
          input: "SaveV2_1/tensor_names:output:0"
          input: "SaveV2_1/shape_and_slices:output:0"
          input: "savev2_1_const"
          input: "^SaveV2"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtypes"
            value {
              list {
                type: DT_STRING
              }
            }
          }
          experimental_debug_info {
            original_node_names: "SaveV2_1"
          }
        }
        node_def {
          name: "MergeV2Checkpoints/checkpoint_prefixes"
          op: "Pack"
          input: "ShardedFilename:filename:0"
          input: "ShardedFilename_1:filename:0"
          input: "^SaveV2"
          input: "^SaveV2_1"
          device: "/device:CPU:0"
          attr {
            key: "N"
            value {
              i: 2
            }
          }
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 2
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "MergeV2Checkpoints/checkpoint_prefixes"
          }
        }
        node_def {
          name: "MergeV2Checkpoints"
          op: "MergeV2Checkpoints"
          input: "MergeV2Checkpoints/checkpoint_prefixes:output:0"
          input: "file_prefix"
          input: "^SaveV2_1"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          experimental_debug_info {
            original_node_names: "MergeV2Checkpoints"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "file_prefix"
          input: "^MergeV2Checkpoints"
          device: "/device:CPU:0"
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        node_def {
          name: "Identity_1"
          op: "Identity"
          input: "Identity:output:0"
          input: "^MergeV2Checkpoints"
          input: "^SaveV2"
          input: "^SaveV2_1"
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_1"
          }
        }
        ret {
          key: "identity_1"
          value: "Identity_1:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
              }
              shape {
              }
              shape {
                dim {
                  size: 34
                }
                dim {
                  size: 100
                }
              }
              shape {
                dim {
                  size: 100
                }
              }
              shape {
                dim {
                  size: 100
                }
                dim {
                  size: 40
                }
              }
              shape {
                dim {
                  size: 40
                }
              }
              shape {
                dim {
                  size: 40
                }
                dim {
                  size: 2
                }
              }
              shape {
                dim {
                  size: 2
                }
              }
              shape {
              }
            }
          }
        }
        control_ret {
          key: "MergeV2Checkpoints"
          value: "MergeV2Checkpoints"
        }
        control_ret {
          key: "SaveV2"
          value: "SaveV2"
        }
        control_ret {
          key: "SaveV2_1"
          value: "SaveV2_1"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "file_prefix"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 34
                    }
                    dim {
                      size: 100
                    }
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 100
                    }
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 100
                    }
                    dim {
                      size: 40
                    }
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 40
                    }
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 40
                    }
                    dim {
                      size: 2
                    }
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 2
                    }
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_function_722"
        }
        attr {
          key: "_input_shapes"
          value {
          }
        }
      }
      function {
        signature {
          name: "__inference_signature_wrapper_4619026"
          input_arg {
            name: "callee_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "callee_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "callee_users"
            type: DT_INT64
          }
          input_arg {
            name: "caller_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "caller_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "caller_users"
            type: DT_INT64
          }
          input_arg {
            name: "callsite_height"
            type: DT_INT64
          }
          input_arg {
            name: "cost_estimate"
            type: DT_INT64
          }
          input_arg {
            name: "discount"
            type: DT_FLOAT
          }
          input_arg {
            name: "edge_count"
            type: DT_INT64
          }
          input_arg {
            name: "inlining_default"
            type: DT_INT64
          }
          input_arg {
            name: "node_count"
            type: DT_INT64
          }
          input_arg {
            name: "nr_ctant_params"
            type: DT_INT64
          }
          input_arg {
            name: "reward"
            type: DT_FLOAT
          }
          input_arg {
            name: "step_type"
            type: DT_INT32
          }
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_0"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_1"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_2"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_3"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_4"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "step_type"
          input: "reward"
          input: "discount"
          input: "callee_basic_block_count"
          input: "callee_conditionally_executed_blocks"
          input: "callee_users"
          input: "caller_basic_block_count"
          input: "caller_conditionally_executed_blocks"
          input: "caller_users"
          input: "callsite_height"
          input: "cost_estimate"
          input: "edge_count"
          input: "inlining_default"
          input: "node_count"
          input: "nr_ctant_params"
          input: "unknown"
          input: "unknown_0"
          input: "unknown_1"
          input: "unknown_2"
          input: "unknown_3"
          input: "unknown_4"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_INT32
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 15
                i: 16
                i: 17
                i: 18
                i: 19
                i: 20
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_function_with_signature_4618993"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_users"
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_users"
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callsite_height"
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "cost_estimate"
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "discount"
              }
            }
          }
        }
        arg_attr {
          key: 9
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "edge_count"
              }
            }
          }
        }
        arg_attr {
          key: 10
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "inlining_default"
              }
            }
          }
        }
        arg_attr {
          key: 11
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "node_count"
              }
            }
          }
        }
        arg_attr {
          key: 12
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "nr_ctant_params"
              }
            }
          }
        }
        arg_attr {
          key: 13
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "reward"
              }
            }
          }
        }
        arg_attr {
          key: 14
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "step_type"
              }
            }
          }
        }
        arg_attr {
          key: 15
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 16
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 17
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 18
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 19
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 20
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_function_with_signature_4618993"
          input_arg {
            name: "step_type"
            type: DT_INT32
          }
          input_arg {
            name: "reward"
            type: DT_FLOAT
          }
          input_arg {
            name: "discount"
            type: DT_FLOAT
          }
          input_arg {
            name: "callee_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "callee_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "callee_users"
            type: DT_INT64
          }
          input_arg {
            name: "caller_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "caller_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "caller_users"
            type: DT_INT64
          }
          input_arg {
            name: "callsite_height"
            type: DT_INT64
          }
          input_arg {
            name: "cost_estimate"
            type: DT_INT64
          }
          input_arg {
            name: "edge_count"
            type: DT_INT64
          }
          input_arg {
            name: "inlining_default"
            type: DT_INT64
          }
          input_arg {
            name: "node_count"
            type: DT_INT64
          }
          input_arg {
            name: "nr_ctant_params"
            type: DT_INT64
          }
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_0"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_1"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_2"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_3"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_4"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "step_type"
          input: "reward"
          input: "discount"
          input: "callee_basic_block_count"
          input: "callee_conditionally_executed_blocks"
          input: "callee_users"
          input: "caller_basic_block_count"
          input: "caller_conditionally_executed_blocks"
          input: "caller_users"
          input: "callsite_height"
          input: "cost_estimate"
          input: "edge_count"
          input: "inlining_default"
          input: "node_count"
          input: "nr_ctant_params"
          input: "unknown"
          input: "unknown_0"
          input: "unknown_1"
          input: "unknown_2"
          input: "unknown_3"
          input: "unknown_4"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_INT32
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 15
                i: 16
                i: 17
                i: 18
                i: 19
                i: 20
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_polymorphic_action_fn_4618978"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "step_type"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "reward"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "discount"
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_users"
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_users"
              }
            }
          }
        }
        arg_attr {
          key: 9
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callsite_height"
              }
            }
          }
        }
        arg_attr {
          key: 10
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "cost_estimate"
              }
            }
          }
        }
        arg_attr {
          key: 11
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "edge_count"
              }
            }
          }
        }
        arg_attr {
          key: 12
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "inlining_default"
              }
            }
          }
        }
        arg_attr {
          key: 13
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "node_count"
              }
            }
          }
        }
        arg_attr {
          key: 14
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "nr_ctant_params"
              }
            }
          }
        }
        arg_attr {
          key: 15
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 16
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 17
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 18
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 19
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 20
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_polymorphic_action_fn_4619080"
          input_arg {
            name: "time_step_step_type"
            type: DT_INT32
          }
          input_arg {
            name: "time_step_reward"
            type: DT_FLOAT
          }
          input_arg {
            name: "time_step_discount"
            type: DT_FLOAT
          }
          input_arg {
            name: "time_step_observation_callee_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_callee_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_callee_users"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_caller_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_caller_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_caller_users"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_callsite_height"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_cost_estimate"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_edge_count"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_inlining_default"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_node_count"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_observation_nr_ctant_params"
            type: DT_INT64
          }
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_0"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_1"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_2"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_3"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_4"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "time_step_step_type"
          input: "time_step_reward"
          input: "time_step_discount"
          input: "time_step_observation_callee_basic_block_count"
          input: "time_step_observation_callee_conditionally_executed_blocks"
          input: "time_step_observation_callee_users"
          input: "time_step_observation_caller_basic_block_count"
          input: "time_step_observation_caller_conditionally_executed_blocks"
          input: "time_step_observation_caller_users"
          input: "time_step_observation_callsite_height"
          input: "time_step_observation_cost_estimate"
          input: "time_step_observation_edge_count"
          input: "time_step_observation_inlining_default"
          input: "time_step_observation_node_count"
          input: "time_step_observation_nr_ctant_params"
          input: "unknown"
          input: "unknown_0"
          input: "unknown_1"
          input: "unknown_2"
          input: "unknown_3"
          input: "unknown_4"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_INT32
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 15
                i: 16
                i: 17
                i: 18
                i: 19
                i: 20
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_action_931"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/step_type"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/reward"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/discount"
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/callee_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/callee_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/callee_users"
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/caller_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/caller_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/caller_users"
              }
            }
          }
        }
        arg_attr {
          key: 9
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/callsite_height"
              }
            }
          }
        }
        arg_attr {
          key: 10
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/cost_estimate"
              }
            }
          }
        }
        arg_attr {
          key: 11
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/edge_count"
              }
            }
          }
        }
        arg_attr {
          key: 12
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/inlining_default"
              }
            }
          }
        }
        arg_attr {
          key: 13
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/node_count"
              }
            }
          }
        }
        arg_attr {
          key: 14
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step/observation/nr_ctant_params"
              }
            }
          }
        }
        arg_attr {
          key: 15
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 16
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 17
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 18
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 19
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 20
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_function_with_signature_4619040"
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "unknown"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 0
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_<lambda>_728"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_polymorphic_action_fn_4618978"
          input_arg {
            name: "time_step"
            type: DT_INT32
          }
          input_arg {
            name: "time_step_1"
            type: DT_FLOAT
          }
          input_arg {
            name: "time_step_2"
            type: DT_FLOAT
          }
          input_arg {
            name: "time_step_3"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_4"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_5"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_6"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_7"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_8"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_9"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_10"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_11"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_12"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_13"
            type: DT_INT64
          }
          input_arg {
            name: "time_step_14"
            type: DT_INT64
          }
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_0"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_1"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_2"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_3"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_4"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "time_step"
          input: "time_step_1"
          input: "time_step_2"
          input: "time_step_3"
          input: "time_step_4"
          input: "time_step_5"
          input: "time_step_6"
          input: "time_step_7"
          input: "time_step_8"
          input: "time_step_9"
          input: "time_step_10"
          input: "time_step_11"
          input: "time_step_12"
          input: "time_step_13"
          input: "time_step_14"
          input: "unknown"
          input: "unknown_0"
          input: "unknown_1"
          input: "unknown_2"
          input: "unknown_3"
          input: "unknown_4"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_INT32
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 15
                i: 16
                i: 17
                i: 18
                i: 19
                i: 20
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_action_931"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 9
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 10
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 11
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 12
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 13
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 14
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "time_step"
              }
            }
          }
        }
        arg_attr {
          key: 15
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 16
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 17
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 18
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 19
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 20
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_polymorphic_action_fn_946"
          input_arg {
            name: "step_type"
            type: DT_INT32
          }
          input_arg {
            name: "reward"
            type: DT_FLOAT
          }
          input_arg {
            name: "discount"
            type: DT_FLOAT
          }
          input_arg {
            name: "callee_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "callee_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "callee_users"
            type: DT_INT64
          }
          input_arg {
            name: "caller_basic_block_count"
            type: DT_INT64
          }
          input_arg {
            name: "caller_conditionally_executed_blocks"
            type: DT_INT64
          }
          input_arg {
            name: "caller_users"
            type: DT_INT64
          }
          input_arg {
            name: "callsite_height"
            type: DT_INT64
          }
          input_arg {
            name: "cost_estimate"
            type: DT_INT64
          }
          input_arg {
            name: "edge_count"
            type: DT_INT64
          }
          input_arg {
            name: "inlining_default"
            type: DT_INT64
          }
          input_arg {
            name: "node_count"
            type: DT_INT64
          }
          input_arg {
            name: "nr_ctant_params"
            type: DT_INT64
          }
          input_arg {
            name: "unknown"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_0"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_1"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_2"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_3"
            type: DT_RESOURCE
          }
          input_arg {
            name: "unknown_4"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
          control_output: "StatefulPartitionedCall"
        }
        node_def {
          name: "StatefulPartitionedCall"
          op: "StatefulPartitionedCall"
          input: "step_type"
          input: "reward"
          input: "discount"
          input: "callee_basic_block_count"
          input: "callee_conditionally_executed_blocks"
          input: "callee_users"
          input: "caller_basic_block_count"
          input: "caller_conditionally_executed_blocks"
          input: "caller_users"
          input: "callsite_height"
          input: "cost_estimate"
          input: "edge_count"
          input: "inlining_default"
          input: "node_count"
          input: "nr_ctant_params"
          input: "unknown"
          input: "unknown_0"
          input: "unknown_1"
          input: "unknown_2"
          input: "unknown_3"
          input: "unknown_4"
          attr {
            key: "Tin"
            value {
              list {
                type: DT_INT32
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_INT64
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
                type: DT_RESOURCE
              }
            }
          }
          attr {
            key: "Tout"
            value {
              list {
                type: DT_INT64
              }
            }
          }
          attr {
            key: "_collective_manager_ids"
            value {
              list {
              }
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "_read_only_resource_inputs"
            value {
              list {
                i: 15
                i: 16
                i: 17
                i: 18
                i: 19
                i: 20
              }
            }
          }
          attr {
            key: "config_proto"
            value {
              s: "\n\007\n\003CPU\020\001\n\007\n\003GPU\020\0012\005*\0010J\0008\001"
            }
          }
          attr {
            key: "f"
            value {
              func {
                name: "__inference_action_931"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "StatefulPartitionedCall"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "StatefulPartitionedCall:output:0"
          input: "^StatefulPartitionedCall"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                dim {
                  size: 1
                }
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "StatefulPartitionedCall"
          value: "StatefulPartitionedCall"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "step_type"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "reward"
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "discount"
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callee_users"
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_basic_block_count"
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_conditionally_executed_blocks"
              }
            }
          }
        }
        arg_attr {
          key: 8
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "caller_users"
              }
            }
          }
        }
        arg_attr {
          key: 9
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "callsite_height"
              }
            }
          }
        }
        arg_attr {
          key: 10
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "cost_estimate"
              }
            }
          }
        }
        arg_attr {
          key: 11
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "edge_count"
              }
            }
          }
        }
        arg_attr {
          key: 12
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "inlining_default"
              }
            }
          }
        }
        arg_attr {
          key: 13
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "node_count"
              }
            }
          }
        }
        arg_attr {
          key: 14
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                    dim {
                      size: 1
                    }
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "nr_ctant_params"
              }
            }
          }
        }
        arg_attr {
          key: 15
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 16
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 17
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 18
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 19
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 20
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference__traced_restore_4619176"
          input_arg {
            name: "file_prefix"
            type: DT_STRING
          }
          input_arg {
            name: "assignvariableop_train_step"
            type: DT_RESOURCE
          }
          input_arg {
            name: "assignvariableop_1_qnetwork_encodingnetwork_dense_kernel"
            type: DT_RESOURCE
          }
          input_arg {
            name: "assignvariableop_2_qnetwork_encodingnetwork_dense_bias"
            type: DT_RESOURCE
          }
          input_arg {
            name: "assignvariableop_3_qnetwork_encodingnetwork_dense_1_kernel"
            type: DT_RESOURCE
          }
          input_arg {
            name: "assignvariableop_4_qnetwork_encodingnetwork_dense_1_bias"
            type: DT_RESOURCE
          }
          input_arg {
            name: "assignvariableop_5_qnetwork_dense_2_kernel"
            type: DT_RESOURCE
          }
          input_arg {
            name: "assignvariableop_6_qnetwork_dense_2_bias"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity_8"
            type: DT_STRING
          }
          is_stateful: true
          control_output: "AssignVariableOp"
          control_output: "AssignVariableOp_1"
          control_output: "AssignVariableOp_2"
          control_output: "AssignVariableOp_3"
          control_output: "AssignVariableOp_4"
          control_output: "AssignVariableOp_5"
          control_output: "AssignVariableOp_6"
          control_output: "RestoreV2"
          control_output: "RestoreV2_1"
        }
        node_def {
          name: "RestoreV2/tensor_names"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 7
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 7
                  }
                }
                string_val: "train_step/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/0/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/1/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/2/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/3/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/4/.ATTRIBUTES/VARIABLE_VALUE"
                string_val: "model_variables/5/.ATTRIBUTES/VARIABLE_VALUE"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "RestoreV2/tensor_names"
          }
        }
        node_def {
          name: "RestoreV2/shape_and_slices"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 7
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 7
                  }
                }
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
                string_val: ""
              }
            }
          }
          experimental_debug_info {
            original_node_names: "RestoreV2/shape_and_slices"
          }
        }
        node_def {
          name: "RestoreV2"
          op: "RestoreV2"
          input: "file_prefix"
          input: "RestoreV2/tensor_names:output:0"
          input: "RestoreV2/shape_and_slices:output:0"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
                shape {
                  unknown_rank: true
                }
                shape {
                  unknown_rank: true
                }
                shape {
                  unknown_rank: true
                }
                shape {
                  unknown_rank: true
                }
                shape {
                  unknown_rank: true
                }
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          attr {
            key: "dtypes"
            value {
              list {
                type: DT_INT64
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
                type: DT_FLOAT
              }
            }
          }
          experimental_debug_info {
            original_node_names: "RestoreV2"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "RestoreV2:tensors:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        node_def {
          name: "AssignVariableOp"
          op: "AssignVariableOp"
          input: "assignvariableop_train_step"
          input: "Identity:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp"
          }
        }
        node_def {
          name: "Identity_1"
          op: "Identity"
          input: "RestoreV2:tensors:1"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_1"
          }
        }
        node_def {
          name: "AssignVariableOp_1"
          op: "AssignVariableOp"
          input: "assignvariableop_1_qnetwork_encodingnetwork_dense_kernel"
          input: "Identity_1:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp_1"
          }
        }
        node_def {
          name: "Identity_2"
          op: "Identity"
          input: "RestoreV2:tensors:2"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_2"
          }
        }
        node_def {
          name: "AssignVariableOp_2"
          op: "AssignVariableOp"
          input: "assignvariableop_2_qnetwork_encodingnetwork_dense_bias"
          input: "Identity_2:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp_2"
          }
        }
        node_def {
          name: "Identity_3"
          op: "Identity"
          input: "RestoreV2:tensors:3"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_3"
          }
        }
        node_def {
          name: "AssignVariableOp_3"
          op: "AssignVariableOp"
          input: "assignvariableop_3_qnetwork_encodingnetwork_dense_1_kernel"
          input: "Identity_3:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp_3"
          }
        }
        node_def {
          name: "Identity_4"
          op: "Identity"
          input: "RestoreV2:tensors:4"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_4"
          }
        }
        node_def {
          name: "AssignVariableOp_4"
          op: "AssignVariableOp"
          input: "assignvariableop_4_qnetwork_encodingnetwork_dense_1_bias"
          input: "Identity_4:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp_4"
          }
        }
        node_def {
          name: "Identity_5"
          op: "Identity"
          input: "RestoreV2:tensors:5"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_5"
          }
        }
        node_def {
          name: "AssignVariableOp_5"
          op: "AssignVariableOp"
          input: "assignvariableop_5_qnetwork_dense_2_kernel"
          input: "Identity_5:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp_5"
          }
        }
        node_def {
          name: "Identity_6"
          op: "Identity"
          input: "RestoreV2:tensors:6"
          attr {
            key: "T"
            value {
              type: DT_FLOAT
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_6"
          }
        }
        node_def {
          name: "AssignVariableOp_6"
          op: "AssignVariableOp"
          input: "assignvariableop_6_qnetwork_dense_2_bias"
          input: "Identity_6:output:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_FLOAT
            }
          }
          experimental_debug_info {
            original_node_names: "AssignVariableOp_6"
          }
        }
        node_def {
          name: "RestoreV2_1/tensor_names"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                string_val: "_CHECKPOINTABLE_OBJECT_GRAPH"
              }
            }
          }
          experimental_debug_info {
            original_node_names: "RestoreV2_1/tensor_names"
          }
        }
        node_def {
          name: "RestoreV2_1/shape_and_slices"
          op: "Const"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  dim {
                    size: 1
                  }
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "value"
            value {
              tensor {
                dtype: DT_STRING
                tensor_shape {
                  dim {
                    size: 1
                  }
                }
                string_val: ""
              }
            }
          }
          experimental_debug_info {
            original_node_names: "RestoreV2_1/shape_and_slices"
          }
        }
        node_def {
          name: "RestoreV2_1"
          op: "RestoreV2"
          input: "file_prefix"
          input: "RestoreV2_1/tensor_names:output:0"
          input: "RestoreV2_1/shape_and_slices:output:0"
          input: "^RestoreV2"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                  unknown_rank: true
                }
              }
            }
          }
          attr {
            key: "dtypes"
            value {
              list {
                type: DT_STRING
              }
            }
          }
          experimental_debug_info {
            original_node_names: "RestoreV2_1"
          }
        }
        node_def {
          name: "NoOp"
          op: "NoOp"
          device: "/device:CPU:0"
          attr {
            key: "_output_shapes"
            value {
              list {
              }
            }
          }
          experimental_debug_info {
            original_node_names: "NoOp"
          }
        }
        node_def {
          name: "Identity_7"
          op: "Identity"
          input: "file_prefix"
          input: "^AssignVariableOp"
          input: "^AssignVariableOp_1"
          input: "^AssignVariableOp_2"
          input: "^AssignVariableOp_3"
          input: "^AssignVariableOp_4"
          input: "^AssignVariableOp_5"
          input: "^AssignVariableOp_6"
          input: "^NoOp"
          device: "/device:CPU:0"
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_7"
          }
        }
        node_def {
          name: "Identity_8"
          op: "Identity"
          input: "Identity_7:output:0"
          input: "^AssignVariableOp"
          input: "^AssignVariableOp_1"
          input: "^AssignVariableOp_2"
          input: "^AssignVariableOp_3"
          input: "^AssignVariableOp_4"
          input: "^AssignVariableOp_5"
          input: "^AssignVariableOp_6"
          input: "^RestoreV2"
          input: "^RestoreV2_1"
          attr {
            key: "T"
            value {
              type: DT_STRING
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity_8"
          }
        }
        ret {
          key: "identity_8"
          value: "Identity_8:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
              shape {
                unknown_rank: true
              }
            }
          }
        }
        control_ret {
          key: "AssignVariableOp"
          value: "AssignVariableOp"
        }
        control_ret {
          key: "AssignVariableOp_1"
          value: "AssignVariableOp_1"
        }
        control_ret {
          key: "AssignVariableOp_2"
          value: "AssignVariableOp_2"
        }
        control_ret {
          key: "AssignVariableOp_3"
          value: "AssignVariableOp_3"
        }
        control_ret {
          key: "AssignVariableOp_4"
          value: "AssignVariableOp_4"
        }
        control_ret {
          key: "AssignVariableOp_5"
          value: "AssignVariableOp_5"
        }
        control_ret {
          key: "AssignVariableOp_6"
          value: "AssignVariableOp_6"
        }
        control_ret {
          key: "RestoreV2"
          value: "RestoreV2"
        }
        control_ret {
          key: "RestoreV2_1"
          value: "RestoreV2_1"
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
            attr {
              key: "_user_specified_name"
              value {
                s: "file_prefix"
              }
            }
          }
        }
        arg_attr {
          key: 1
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 2
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 3
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 4
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 5
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 6
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
        arg_attr {
          key: 7
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
      function {
        signature {
          name: "__inference_<lambda>_728"
          input_arg {
            name: "readvariableop_resource"
            type: DT_RESOURCE
          }
          output_arg {
            name: "identity"
            type: DT_INT64
          }
          is_stateful: true
        }
        node_def {
          name: "ReadVariableOp"
          op: "ReadVariableOp"
          input: "readvariableop_resource"
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          attr {
            key: "dtype"
            value {
              type: DT_INT64
            }
          }
          experimental_debug_info {
            original_node_names: "ReadVariableOp"
          }
        }
        node_def {
          name: "Identity"
          op: "Identity"
          input: "ReadVariableOp:value:0"
          attr {
            key: "T"
            value {
              type: DT_INT64
            }
          }
          attr {
            key: "_output_shapes"
            value {
              list {
                shape {
                }
              }
            }
          }
          experimental_debug_info {
            original_node_names: "Identity"
          }
        }
        ret {
          key: "identity"
          value: "Identity:output:0"
        }
        attr {
          key: "_input_shapes"
          value {
            list {
              shape {
                unknown_rank: true
              }
            }
          }
        }
        arg_attr {
          key: 0
          value {
            attr {
              key: "_output_shapes"
              value {
                list {
                  shape {
                  }
                }
              }
            }
          }
        }
      }
    }
    versions {
      producer: 357
      min_consumer: 12
    }
  }
  saver_def {
    filename_tensor_name: "saver_filename:0"
    save_tensor_name: "StatefulPartitionedCall_2:0"
    restore_op_name: "StatefulPartitionedCall_3"
    version: V2
  }
  collection_def {
    key: "saved_model_main_op"
    value {
      node_list {
        value: "NoOp"
      }
    }
  }
  signature_def {
    key: "__saved_model_init_op"
    value {
      outputs {
        key: "__saved_model_init_op"
        value {
          name: "NoOp"
          tensor_shape {
            unknown_rank: true
          }
        }
      }
    }
  }
  signature_def {
    key: "action"
    value {
      inputs {
        key: "callee_basic_block_count"
        value {
          name: "action_callee_basic_block_count:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "callee_conditionally_executed_blocks"
        value {
          name: "action_callee_conditionally_executed_blocks:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "callee_users"
        value {
          name: "action_callee_users:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "caller_basic_block_count"
        value {
          name: "action_caller_basic_block_count:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "caller_conditionally_executed_blocks"
        value {
          name: "action_caller_conditionally_executed_blocks:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "caller_users"
        value {
          name: "action_caller_users:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "callsite_height"
        value {
          name: "action_callsite_height:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "cost_estimate"
        value {
          name: "action_cost_estimate:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "discount"
        value {
          name: "action_discount:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "edge_count"
        value {
          name: "action_edge_count:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "inlining_default"
        value {
          name: "action_inlining_default:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "node_count"
        value {
          name: "action_node_count:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "nr_ctant_params"
        value {
          name: "action_nr_ctant_params:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "reward"
        value {
          name: "action_reward:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      inputs {
        key: "step_type"
        value {
          name: "action_step_type:0"
          dtype: DT_INT32
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      outputs {
        key: "inlining_decision"
        value {
          name: "StatefulPartitionedCall:0"
          dtype: DT_INT64
          tensor_shape {
            dim {
              size: 1
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
  signature_def {
    key: "get_initial_state"
    value {
      method_name: "tensorflow/serving/predict"
    }
  }
  signature_def {
    key: "get_train_step"
    value {
      outputs {
        key: "int64"
        value {
          name: "StatefulPartitionedCall_1:0"
          dtype: DT_INT64
          tensor_shape {
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
  object_graph_def {
    nodes {
      children {
        node_id: 1
        local_name: "_time_step_spec"
      }
      children {
        node_id: 2
        local_name: "_trajectory_spec"
      }
      children {
        node_id: 3
        local_name: "_wrapped_policy"
      }
      children {
        node_id: 4
        local_name: "train_step"
      }
      children {
        node_id: 5
        local_name: "model_variables"
      }
      children {
        node_id: 6
        local_name: "signatures"
      }
      children {
        node_id: 210
        local_name: "action"
      }
      children {
        node_id: 211
        local_name: "get_initial_state"
      }
      children {
        node_id: 212
        local_name: "get_train_step"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 7
        local_name: "observation"
      }
      children {
        node_id: 7
        local_name: "3"
      }
      user_object {
        identifier: "trackable_tuple_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 7
        local_name: "observation"
      }
      children {
        node_id: 7
        local_name: "1"
      }
      user_object {
        identifier: "trackable_tuple_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 8
        local_name: "_q_network"
      }
      children {
        node_id: 1
        local_name: "_time_step_spec"
      }
      children {
        node_id: 9
        local_name: "_trajectory_spec"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      variable {
        dtype: DT_INT64
        shape {
        }
        name: "train_step"
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      children {
        node_id: 12
        local_name: "2"
      }
      children {
        node_id: 13
        local_name: "3"
      }
      children {
        node_id: 14
        local_name: "4"
      }
      children {
        node_id: 15
        local_name: "5"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 213
        local_name: "action"
      }
      children {
        node_id: 214
        local_name: "get_initial_state"
      }
      children {
        node_id: 215
        local_name: "get_train_step"
      }
      user_object {
        identifier: "signature_map"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 16
        local_name: "_input_tensor_spec"
      }
      children {
        node_id: 17
        local_name: "_encoder"
      }
      children {
        node_id: 18
        local_name: "_q_value_layer"
      }
      children {
        node_id: 19
        local_name: "variables"
      }
      children {
        node_id: 20
        local_name: "regularization_losses"
      }
      children {
        node_id: 21
        local_name: "trainable_variables"
      }
      children {
        node_id: 22
        local_name: "keras_api"
      }
      children {
        node_id: 216
        local_name: "__call__"
      }
      children {
        node_id: 217
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_network"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"QNetwork\", \"name\": \"QNetwork\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"config\": {\"layer was saved without config\": true}, \"is_graph_network\": false}"
      }
    }
    nodes {
      children {
        node_id: 7
        local_name: "observation"
      }
      children {
        node_id: 7
        local_name: "1"
      }
      user_object {
        identifier: "trackable_tuple_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      variable {
        dtype: DT_FLOAT
        shape {
          dim {
            size: 34
          }
          dim {
            size: 100
          }
        }
        trainable: true
        name: "QNetwork/EncodingNetwork/dense/kernel"
      }
    }
    nodes {
      variable {
        dtype: DT_FLOAT
        shape {
          dim {
            size: 100
          }
        }
        trainable: true
        name: "QNetwork/EncodingNetwork/dense/bias"
      }
    }
    nodes {
      variable {
        dtype: DT_FLOAT
        shape {
          dim {
            size: 100
          }
          dim {
            size: 40
          }
        }
        trainable: true
        name: "QNetwork/EncodingNetwork/dense_1/kernel"
      }
    }
    nodes {
      variable {
        dtype: DT_FLOAT
        shape {
          dim {
            size: 40
          }
        }
        trainable: true
        name: "QNetwork/EncodingNetwork/dense_1/bias"
      }
    }
    nodes {
      variable {
        dtype: DT_FLOAT
        shape {
          dim {
            size: 40
          }
          dim {
            size: 2
          }
        }
        trainable: true
        name: "QNetwork/dense_2/kernel"
      }
    }
    nodes {
      variable {
        dtype: DT_FLOAT
        shape {
          dim {
            size: 2
          }
        }
        trainable: true
        name: "QNetwork/dense_2/bias"
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 23
        local_name: "_input_tensor_spec"
      }
      children {
        node_id: 24
        local_name: "_preprocessing_nest"
      }
      children {
        node_id: 25
        local_name: "_flat_preprocessing_layers"
      }
      children {
        node_id: 26
        local_name: "_preprocessing_combiner"
      }
      children {
        node_id: 27
        local_name: "_postprocessing_layers"
      }
      children {
        node_id: 28
        local_name: "variables"
      }
      children {
        node_id: 29
        local_name: "regularization_losses"
      }
      children {
        node_id: 30
        local_name: "trainable_variables"
      }
      children {
        node_id: 31
        local_name: "keras_api"
      }
      children {
        node_id: 218
        local_name: "__call__"
      }
      children {
        node_id: 219
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_network"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"EncodingNetwork\", \"name\": \"EncodingNetwork\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"config\": {\"layer was saved without config\": true}, \"is_graph_network\": false}"
      }
    }
    nodes {
      children {
        node_id: 14
        local_name: "kernel"
      }
      children {
        node_id: 15
        local_name: "bias"
      }
      children {
        node_id: 32
        local_name: "variables"
      }
      children {
        node_id: 33
        local_name: "regularization_losses"
      }
      children {
        node_id: 34
        local_name: "trainable_variables"
      }
      children {
        node_id: 35
        local_name: "keras_api"
      }
      children {
        node_id: 220
        local_name: "__call__"
      }
      children {
        node_id: 221
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Dense\", \"name\": \"dense_2\", \"trainable\": true, \"expects_training_arg\": false, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"dense_2\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 2, \"activation\": \"linear\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"RandomUniform\", \"config\": {\"minval\": -0.03, \"maxval\": 0.03, \"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Constant\", \"config\": {\"value\": -0.2, \"dtype\": \"float32\"}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"input_spec\": {\"class_name\": \"InputSpec\", \"config\": {\"dtype\": null, \"shape\": null, \"ndim\": null, \"max_ndim\": null, \"min_ndim\": 2, \"axes\": {\"-1\": 40}}}, \"build_input_shape\": {\"class_name\": \"TensorShape\", \"items\": [0, 40]}}"
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      children {
        node_id: 12
        local_name: "2"
      }
      children {
        node_id: 13
        local_name: "3"
      }
      children {
        node_id: 14
        local_name: "4"
      }
      children {
        node_id: 15
        local_name: "5"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      children {
        node_id: 12
        local_name: "2"
      }
      children {
        node_id: 13
        local_name: "3"
      }
      children {
        node_id: 14
        local_name: "4"
      }
      children {
        node_id: 15
        local_name: "5"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 36
        local_name: "layer_metrics"
      }
      children {
        node_id: 19
        local_name: "variables"
      }
      children {
        node_id: 37
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 38
        local_name: "metrics"
      }
      children {
        node_id: 39
        local_name: "layers"
      }
      children {
        node_id: 20
        local_name: "regularization_losses"
      }
      children {
        node_id: 40
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 21
        local_name: "trainable_variables"
      }
      children {
        node_id: 216
        local_name: "__call__"
      }
      children {
        node_id: 217
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 217
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 41
        local_name: "0"
      }
      children {
        node_id: 42
        local_name: "1"
      }
      children {
        node_id: 43
        local_name: "2"
      }
      children {
        node_id: 44
        local_name: "3"
      }
      children {
        node_id: 45
        local_name: "4"
      }
      children {
        node_id: 46
        local_name: "5"
      }
      children {
        node_id: 47
        local_name: "6"
      }
      children {
        node_id: 48
        local_name: "7"
      }
      children {
        node_id: 49
        local_name: "8"
      }
      children {
        node_id: 50
        local_name: "9"
      }
      children {
        node_id: 51
        local_name: "10"
      }
      children {
        node_id: 52
        local_name: "11"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 53
        local_name: "variables"
      }
      children {
        node_id: 54
        local_name: "regularization_losses"
      }
      children {
        node_id: 55
        local_name: "trainable_variables"
      }
      children {
        node_id: 56
        local_name: "keras_api"
      }
      children {
        node_id: 222
        local_name: "__call__"
      }
      children {
        node_id: 223
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Concatenate\", \"name\": \"concatenate\", \"trainable\": true, \"expects_training_arg\": false, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"concatenate\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}, \"build_input_shape\": [{\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 1]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}, {\"class_name\": \"TensorShape\", \"items\": [0, 3]}]}"
      }
    }
    nodes {
      children {
        node_id: 57
        local_name: "0"
      }
      children {
        node_id: 58
        local_name: "1"
      }
      children {
        node_id: 59
        local_name: "2"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      children {
        node_id: 12
        local_name: "2"
      }
      children {
        node_id: 13
        local_name: "3"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      children {
        node_id: 12
        local_name: "2"
      }
      children {
        node_id: 13
        local_name: "3"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 60
        local_name: "layer_metrics"
      }
      children {
        node_id: 28
        local_name: "variables"
      }
      children {
        node_id: 61
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 62
        local_name: "metrics"
      }
      children {
        node_id: 63
        local_name: "layers"
      }
      children {
        node_id: 29
        local_name: "regularization_losses"
      }
      children {
        node_id: 64
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 30
        local_name: "trainable_variables"
      }
      children {
        node_id: 218
        local_name: "__call__"
      }
      children {
        node_id: 219
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 219
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 14
        local_name: "0"
      }
      children {
        node_id: 15
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 14
        local_name: "0"
      }
      children {
        node_id: 15
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 65
        local_name: "layer_metrics"
      }
      children {
        node_id: 32
        local_name: "variables"
      }
      children {
        node_id: 66
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 67
        local_name: "metrics"
      }
      children {
        node_id: 68
        local_name: "layers"
      }
      children {
        node_id: 33
        local_name: "regularization_losses"
      }
      children {
        node_id: 69
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 34
        local_name: "trainable_variables"
      }
      children {
        node_id: 220
        local_name: "__call__"
      }
      children {
        node_id: 221
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 221
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 17
        local_name: "0"
      }
      children {
        node_id: 18
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 70
        local_name: "variables"
      }
      children {
        node_id: 71
        local_name: "regularization_losses"
      }
      children {
        node_id: 72
        local_name: "trainable_variables"
      }
      children {
        node_id: 73
        local_name: "keras_api"
      }
      children {
        node_id: 224
        local_name: "__call__"
      }
      children {
        node_id: 225
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 11.0, 12.0, 13.0, 14.0, 14.0, 14.0, 16.0, 17.0, 19.0, 23.0, 27.0, 39.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 74
        local_name: "variables"
      }
      children {
        node_id: 75
        local_name: "regularization_losses"
      }
      children {
        node_id: 76
        local_name: "trainable_variables"
      }
      children {
        node_id: 77
        local_name: "keras_api"
      }
      children {
        node_id: 226
        local_name: "__call__"
      }
      children {
        node_id: 227
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_1\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_1\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.0, 9.0, 10.0, 10.0, 10.0, 12.0, 12.0, 12.0, 14.0, 14.0, 18.0, 20.0, 23.0, 30.0, 41.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 78
        local_name: "variables"
      }
      children {
        node_id: 79
        local_name: "regularization_losses"
      }
      children {
        node_id: 80
        local_name: "trainable_variables"
      }
      children {
        node_id: 81
        local_name: "keras_api"
      }
      children {
        node_id: 228
        local_name: "__call__"
      }
      children {
        node_id: 229
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_2\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_2\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 18.0, 19.0, 19.0, 19.0, 19.0, 19.0, 20.0, 20.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 36.0, 36.0, 37.0, 37.0, 37.0, 38.0, 38.0, 39.0, 39.0, 40.0, 40.0, 41.0, 41.0, 41.0, 42.0, 43.0, 43.0, 44.0, 44.0, 45.0, 45.0, 46.0, 46.0, 46.0, 47.0, 47.0, 48.0, 49.0, 49.0, 50.0, 50.0, 51.0, 52.0, 53.0, 53.0, 54.0, 55.0, 56.0, 57.0, 57.0, 58.0, 59.0, 60.0, 61.0, 61.0, 63.0, 63.0, 64.0, 65.0, 66.0, 67.0, 67.0, 69.0, 70.0, 71.0, 72.0, 73.0, 74.0, 75.0, 77.0, 78.0, 79.0, 80.0, 81.0, 82.0, 83.0, 85.0, 86.0, 88.0, 89.0, 91.0, 92.0, 94.0, 96.0, 97.0, 99.0, 100.0, 101.0, 103.0, 105.0, 107.0, 109.0, 111.0, 113.0, 115.0, 118.0, 121.0, 123.0, 126.0, 128.0, 130.0, 133.0, 135.0, 137.0, 140.0, 143.0, 146.0, 148.0, 151.0, 154.0, 157.0, 161.0, 163.0, 166.0, 169.0, 173.0, 178.0, 183.0, 189.0, 193.0, 197.0, 202.0, 208.0, 213.0, 218.0, 223.0, 228.0, 233.0, 239.0, 245.0, 250.0, 257.0, 262.0, 269.0, 277.0, 284.0, 292.0, 300.0, 308.0, 319.0, 329.0, 340.0, 349.0, 359.0, 371.0, 382.0, 394.0, 410.0, 423.0, 435.0, 445.0, 462.0, 480.0, 492.0, 506.0, 519.0, 536.0, 557.0, 577.0, 598.0, 622.0, 655.0, 679.0, 707.0, 733.0, 751.0, 787.0, 814.0, 847.0, 897.0, 934.0, 997.0, 1062.0, 1111.0, 1181.0, 1275.0, 1385.0, 1465.0, 1603.0, 1769.0, 2057.0, 2257.0, 2803.0, 3468.0, 4417.0, 6538.0, 16126.0, 23446.0, 33536.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 82
        local_name: "variables"
      }
      children {
        node_id: 83
        local_name: "regularization_losses"
      }
      children {
        node_id: 84
        local_name: "trainable_variables"
      }
      children {
        node_id: 85
        local_name: "keras_api"
      }
      children {
        node_id: 230
        local_name: "__call__"
      }
      children {
        node_id: 231
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_3\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_3\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 20.0, 20.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 37.0, 37.0, 37.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 40.0, 40.0, 41.0, 41.0, 42.0, 43.0, 43.0, 44.0, 45.0, 45.0, 46.0, 47.0, 47.0, 48.0, 49.0, 49.0, 50.0, 50.0, 52.0, 52.0, 53.0, 54.0, 55.0, 55.0, 57.0, 58.0, 59.0, 60.0, 62.0, 64.0, 65.0, 66.0, 68.0, 70.0, 70.0, 70.0, 70.0, 70.0, 71.0, 73.0, 75.0, 76.0, 78.0, 81.0, 84.0, 86.0, 90.0, 94.0, 98.0, 101.0, 106.0, 111.0, 117.0, 123.0, 130.0, 138.0, 146.0, 157.0, 163.0, 176.0, 187.0, 198.0, 214.0, 227.0, 252.0, 280.0, 327.0, 395.0, 506.0, 671.0, 1025.0, 1971.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 86
        local_name: "variables"
      }
      children {
        node_id: 87
        local_name: "regularization_losses"
      }
      children {
        node_id: 88
        local_name: "trainable_variables"
      }
      children {
        node_id: 89
        local_name: "keras_api"
      }
      children {
        node_id: 232
        local_name: "__call__"
      }
      children {
        node_id: 233
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_4\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_4\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 19.0, 19.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 25.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 27.0, 28.0, 28.0, 28.0, 28.0, 28.0, 29.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 35.0, 36.0, 36.0, 36.0, 37.0, 38.0, 38.0, 38.0, 39.0, 40.0, 40.0, 41.0, 42.0, 42.0, 43.0, 44.0, 44.0, 46.0, 46.0, 47.0, 48.0, 48.0, 50.0, 50.0, 52.0, 52.0, 54.0, 55.0, 55.0, 56.0, 57.0, 58.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 62.0, 62.0, 64.0, 65.0, 66.0, 68.0, 70.0, 72.0, 74.0, 77.0, 80.0, 82.0, 86.0, 89.0, 92.0, 96.0, 99.0, 104.0, 108.0, 114.0, 119.0, 125.0, 131.0, 139.0, 146.0, 157.0, 167.0, 176.0, 188.0, 198.0, 215.0, 236.0, 262.0, 306.0, 376.0, 462.0, 596.0, 942.0, 1428.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 90
        local_name: "variables"
      }
      children {
        node_id: 91
        local_name: "regularization_losses"
      }
      children {
        node_id: 92
        local_name: "trainable_variables"
      }
      children {
        node_id: 93
        local_name: "keras_api"
      }
      children {
        node_id: 234
        local_name: "__call__"
      }
      children {
        node_id: 235
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_5\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_5\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 11.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 18.0, 20.0, 23.0, 29.0, 38.0, 60.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 94
        local_name: "variables"
      }
      children {
        node_id: 95
        local_name: "regularization_losses"
      }
      children {
        node_id: 96
        local_name: "trainable_variables"
      }
      children {
        node_id: 97
        local_name: "keras_api"
      }
      children {
        node_id: 236
        local_name: "__call__"
      }
      children {
        node_id: 237
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_6\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_6\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 29.0, 29.0, 30.0, 30.0, 30.0, 31.0, 31.0, 32.0, 32.0, 33.0, 33.0, 34.0, 35.0, 37.0, 38.0, 40.0, 46.0, 51.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 98
        local_name: "variables"
      }
      children {
        node_id: 99
        local_name: "regularization_losses"
      }
      children {
        node_id: 100
        local_name: "trainable_variables"
      }
      children {
        node_id: 101
        local_name: "keras_api"
      }
      children {
        node_id: 238
        local_name: "__call__"
      }
      children {
        node_id: 239
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_7\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_7\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [-15035.0, -15030.0, -15025.0, -15000.0, -14985.0, -14945.0, -14745.0, -70.0, -55.0, -55.0, -50.0, -50.0, -50.0, -45.0, -45.0, -45.0, -45.0, -45.0, -45.0, -45.0, -45.0, -45.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -40.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -35.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -30.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -25.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -20.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -15.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -10.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, -5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 55.0, 55.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 75.0, 75.0, 80.0, 80.0, 80.0, 85.0, 85.0, 85.0, 90.0, 90.0, 90.0, 90.0, 95.0, 95.0, 100.0, 100.0, 105.0, 110.0, 115.0, 120.0, 125.0, 125.0, 130.0, 140.0, 140.0, 145.0, 150.0, 155.0, 160.0, 160.0, 165.0, 170.0, 175.0, 180.0, 190.0, 200.0, 210.0, 215.0, 220.0, 220.0, 230.0, 235.0, 245.0, 250.0, 260.0, 275.0, 290.0, 305.0, 325.0, 350.0, 370.0, 390.0, 425.0, 460.0, 500.0, 560.0, 650.0, 790.0, 1025.0, 1600.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 102
        local_name: "variables"
      }
      children {
        node_id: 103
        local_name: "regularization_losses"
      }
      children {
        node_id: 104
        local_name: "trainable_variables"
      }
      children {
        node_id: 105
        local_name: "keras_api"
      }
      children {
        node_id: 240
        local_name: "__call__"
      }
      children {
        node_id: 241
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_8\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_8\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [18.0, 29.0, 39.0, 48.0, 57.0, 64.0, 70.0, 76.0, 82.0, 87.0, 92.0, 97.0, 101.0, 105.0, 109.0, 113.0, 116.0, 120.0, 123.0, 127.0, 130.0, 134.0, 137.0, 140.0, 143.0, 146.0, 149.0, 152.0, 156.0, 159.0, 162.0, 165.0, 168.0, 171.0, 174.0, 177.0, 180.0, 183.0, 186.0, 188.0, 191.0, 194.0, 197.0, 200.0, 203.0, 205.0, 208.0, 211.0, 214.0, 217.0, 219.0, 222.0, 225.0, 228.0, 231.0, 233.0, 236.0, 239.0, 242.0, 244.0, 247.0, 250.0, 253.0, 255.0, 258.0, 261.0, 264.0, 266.0, 269.0, 272.0, 275.0, 278.0, 280.0, 283.0, 286.0, 289.0, 292.0, 294.0, 297.0, 300.0, 303.0, 305.0, 308.0, 311.0, 314.0, 317.0, 319.0, 322.0, 325.0, 327.0, 330.0, 333.0, 336.0, 339.0, 341.0, 344.0, 347.0, 350.0, 353.0, 355.0, 358.0, 361.0, 364.0, 367.0, 370.0, 373.0, 375.0, 378.0, 381.0, 384.0, 387.0, 390.0, 393.0, 396.0, 399.0, 401.0, 404.0, 407.0, 410.0, 413.0, 416.0, 419.0, 422.0, 425.0, 428.0, 431.0, 434.0, 437.0, 440.0, 443.0, 446.0, 449.0, 452.0, 455.0, 458.0, 461.0, 464.0, 467.0, 470.0, 473.0, 476.0, 479.0, 483.0, 486.0, 489.0, 492.0, 495.0, 498.0, 501.0, 504.0, 507.0, 511.0, 514.0, 517.0, 520.0, 523.0, 526.0, 530.0, 533.0, 536.0, 539.0, 542.0, 545.0, 549.0, 552.0, 555.0, 558.0, 562.0, 565.0, 569.0, 572.0, 575.0, 579.0, 582.0, 585.0, 589.0, 592.0, 595.0, 599.0, 602.0, 605.0, 609.0, 612.0, 616.0, 620.0, 623.0, 626.0, 630.0, 634.0, 637.0, 641.0, 644.0, 648.0, 651.0, 655.0, 658.0, 662.0, 665.0, 669.0, 672.0, 676.0, 680.0, 683.0, 687.0, 691.0, 694.0, 698.0, 702.0, 705.0, 709.0, 712.0, 716.0, 720.0, 724.0, 727.0, 731.0, 735.0, 739.0, 742.0, 746.0, 750.0, 754.0, 758.0, 761.0, 765.0, 769.0, 773.0, 777.0, 780.0, 784.0, 788.0, 792.0, 796.0, 800.0, 804.0, 808.0, 812.0, 816.0, 820.0, 823.0, 828.0, 832.0, 836.0, 840.0, 844.0, 848.0, 852.0, 856.0, 860.0, 864.0, 868.0, 873.0, 877.0, 881.0, 885.0, 889.0, 893.0, 897.0, 902.0, 906.0, 910.0, 914.0, 919.0, 923.0, 927.0, 931.0, 935.0, 940.0, 944.0, 948.0, 953.0, 957.0, 962.0, 966.0, 970.0, 975.0, 979.0, 984.0, 988.0, 993.0, 997.0, 1002.0, 1006.0, 1011.0, 1015.0, 1020.0, 1024.0, 1029.0, 1034.0, 1038.0, 1043.0, 1047.0, 1052.0, 1057.0, 1062.0, 1066.0, 1071.0, 1076.0, 1081.0, 1086.0, 1090.0, 1095.0, 1100.0, 1105.0, 1110.0, 1114.0, 1119.0, 1124.0, 1129.0, 1134.0, 1139.0, 1144.0, 1149.0, 1154.0, 1159.0, 1164.0, 1169.0, 1174.0, 1179.0, 1184.0, 1189.0, 1194.0, 1199.0, 1204.0, 1209.0, 1215.0, 1220.0, 1225.0, 1230.0, 1235.0, 1241.0, 1246.0, 1251.0, 1257.0, 1262.0, 1267.0, 1273.0, 1278.0, 1284.0, 1289.0, 1294.0, 1300.0, 1305.0, 1311.0, 1316.0, 1322.0, 1327.0, 1333.0, 1338.0, 1344.0, 1350.0, 1355.0, 1361.0, 1367.0, 1372.0, 1378.0, 1383.0, 1389.0, 1395.0, 1401.0, 1407.0, 1413.0, 1418.0, 1424.0, 1430.0, 1436.0, 1442.0, 1448.0, 1454.0, 1459.0, 1465.0, 1472.0, 1477.0, 1483.0, 1489.0, 1495.0, 1501.0, 1507.0, 1514.0, 1520.0, 1526.0, 1532.0, 1538.0, 1545.0, 1551.0, 1557.0, 1564.0, 1570.0, 1576.0, 1583.0, 1589.0, 1596.0, 1602.0, 1608.0, 1615.0, 1621.0, 1628.0, 1634.0, 1641.0, 1647.0, 1654.0, 1661.0, 1667.0, 1674.0, 1681.0, 1687.0, 1694.0, 1701.0, 1708.0, 1715.0, 1722.0, 1729.0, 1735.0, 1742.0, 1749.0, 1756.0, 1763.0, 1770.0, 1777.0, 1784.0, 1791.0, 1798.0, 1806.0, 1812.0, 1820.0, 1827.0, 1835.0, 1841.0, 1849.0, 1856.0, 1863.0, 1871.0, 1878.0, 1885.0, 1893.0, 1901.0, 1908.0, 1915.0, 1923.0, 1930.0, 1938.0, 1946.0, 1953.0, 1961.0, 1969.0, 1976.0, 1984.0, 1992.0, 2000.0, 2007.0, 2015.0, 2023.0, 2031.0, 2039.0, 2047.0, 2055.0, 2063.0, 2071.0, 2079.0, 2087.0, 2095.0, 2104.0, 2112.0, 2120.0, 2128.0, 2137.0, 2146.0, 2154.0, 2162.0, 2171.0, 2179.0, 2188.0, 2197.0, 2205.0, 2214.0, 2223.0, 2232.0, 2241.0, 2250.0, 2258.0, 2268.0, 2277.0, 2285.0, 2294.0, 2304.0, 2313.0, 2322.0, 2331.0, 2340.0, 2350.0, 2359.0, 2368.0, 2378.0, 2388.0, 2397.0, 2407.0, 2416.0, 2426.0, 2436.0, 2446.0, 2455.0, 2465.0, 2475.0, 2485.0, 2495.0, 2505.0, 2515.0, 2525.0, 2535.0, 2545.0, 2556.0, 2566.0, 2577.0, 2587.0, 2598.0, 2609.0, 2620.0, 2631.0, 2641.0, 2652.0, 2663.0, 2674.0, 2685.0, 2696.0, 2708.0, 2719.0, 2730.0, 2742.0, 2753.0, 2764.0, 2776.0, 2788.0, 2799.0, 2811.0, 2823.0, 2835.0, 2847.0, 2858.0, 2870.0, 2882.0, 2894.0, 2906.0, 2919.0, 2931.0, 2943.0, 2956.0, 2968.0, 2981.0, 2994.0, 3006.0, 3019.0, 3032.0, 3045.0, 3058.0, 3070.0, 3083.0, 3096.0, 3109.0, 3121.0, 3134.0, 3148.0, 3161.0, 3174.0, 3187.0, 3200.0, 3214.0, 3228.0, 3242.0, 3255.0, 3268.0, 3283.0, 3297.0, 3310.0, 3325.0, 3340.0, 3353.0, 3368.0, 3383.0, 3398.0, 3412.0, 3427.0, 3442.0, 3457.0, 3471.0, 3487.0, 3502.0, 3516.0, 3531.0, 3546.0, 3561.0, 3577.0, 3593.0, 3608.0, 3625.0, 3641.0, 3657.0, 3673.0, 3690.0, 3706.0, 3722.0, 3738.0, 3755.0, 3772.0, 3789.0, 3805.0, 3823.0, 3839.0, 3856.0, 3873.0, 3891.0, 3908.0, 3926.0, 3944.0, 3960.0, 3977.0, 3995.0, 4013.0, 4031.0, 4048.0, 4067.0, 4085.0, 4104.0, 4122.0, 4140.0, 4159.0, 4177.0, 4196.0, 4215.0, 4234.0, 4253.0, 4272.0, 4291.0, 4311.0, 4332.0, 4351.0, 4371.0, 4391.0, 4412.0, 4433.0, 4454.0, 4474.0, 4496.0, 4518.0, 4538.0, 4558.0, 4579.0, 4601.0, 4619.0, 4640.0, 4662.0, 4684.0, 4706.0, 4728.0, 4751.0, 4771.0, 4794.0, 4818.0, 4840.0, 4863.0, 4887.0, 4910.0, 4933.0, 4956.0, 4980.0, 5004.0, 5028.0, 5052.0, 5076.0, 5100.0, 5125.0, 5152.0, 5175.0, 5200.0, 5226.0, 5251.0, 5278.0, 5304.0, 5329.0, 5354.0, 5381.0, 5407.0, 5433.0, 5460.0, 5488.0, 5516.0, 5544.0, 5573.0, 5600.0, 5628.0, 5656.0, 5684.0, 5713.0, 5741.0, 5771.0, 5799.0, 5830.0, 5860.0, 5891.0, 5921.0, 5951.0, 5980.0, 6010.0, 6041.0, 6073.0, 6105.0, 6133.0, 6163.0, 6195.0, 6227.0, 6258.0, 6291.0, 6322.0, 6356.0, 6390.0, 6424.0, 6457.0, 6491.0, 6527.0, 6561.0, 6596.0, 6631.0, 6665.0, 6701.0, 6736.0, 6771.0, 6805.0, 6840.0, 6877.0, 6911.0, 6947.0, 6985.0, 7022.0, 7059.0, 7097.0, 7135.0, 7174.0, 7212.0, 7251.0, 7289.0, 7327.0, 7366.0, 7406.0, 7447.0, 7486.0, 7525.0, 7566.0, 7606.0, 7646.0, 7688.0, 7728.0, 7771.0, 7814.0, 7859.0, 7901.0, 7949.0, 7992.0, 8036.0, 8082.0, 8127.0, 8173.0, 8218.0, 8262.0, 8309.0, 8353.0, 8397.0, 8444.0, 8489.0, 8539.0, 8585.0, 8632.0, 8682.0, 8727.0, 8777.0, 8828.0, 8879.0, 8929.0, 8982.0, 9037.0, 9087.0, 9140.0, 9193.0, 9250.0, 9305.0, 9361.0, 9418.0, 9475.0, 9532.0, 9589.0, 9644.0, 9699.0, 9758.0, 9818.0, 9875.0, 9935.0, 9997.0, 10057.0, 10117.0, 10174.0, 10232.0, 10296.0, 10356.0, 10419.0, 10482.0, 10546.0, 10608.0, 10670.0, 10729.0, 10790.0, 10855.0, 10920.0, 10990.0, 11054.0, 11118.0, 11181.0, 11248.0, 11316.0, 11385.0, 11454.0, 11526.0, 11597.0, 11667.0, 11740.0, 11820.0, 11897.0, 11973.0, 12046.0, 12126.0, 12204.0, 12287.0, 12370.0, 12456.0, 12538.0, 12627.0, 12714.0, 12799.0, 12883.0, 12971.0, 13062.0, 13154.0, 13233.0, 13328.0, 13418.0, 13511.0, 13607.0, 13709.0, 13806.0, 13903.0, 14002.0, 14104.0, 14200.0, 14288.0, 14391.0, 14488.0, 14590.0, 14698.0, 14808.0, 14910.0, 15020.0, 15126.0, 15238.0, 15347.0, 15456.0, 15574.0, 15692.0, 15786.0, 15896.0, 16016.0, 16136.0, 16250.0, 16352.0, 16474.0, 16575.0, 16702.0, 16835.0, 16965.0, 17096.0, 17232.0, 17370.0, 17443.0, 17581.0, 17719.0, 17864.0, 17976.0, 18116.0, 18250.0, 18396.0, 18540.0, 18690.0, 18840.0, 18989.0, 19136.0, 19294.0, 19445.0, 19589.0, 19750.0, 19905.0, 20064.0, 20191.0, 20325.0, 20497.0, 20662.0, 20833.0, 20981.0, 21152.0, 21334.0, 21510.0, 21642.0, 21821.0, 22001.0, 22186.0, 22379.0, 22568.0, 22770.0, 22958.0, 23162.0, 23360.0, 23524.0, 23737.0, 23960.0, 24175.0, 24395.0, 24631.0, 24865.0, 25091.0, 25327.0, 25580.0, 25833.0, 26089.0, 26361.0, 26636.0, 26889.0, 27155.0, 27436.0, 27715.0, 28003.0, 28303.0, 28600.0, 28916.0, 29223.0, 29553.0, 29884.0, 30200.0, 30538.0, 30868.0, 31211.0, 31548.0, 31881.0, 32253.0, 32605.0, 32980.0, 33385.0, 33805.0, 34254.0, 34723.0, 35167.0, 35666.0, 36125.0, 36652.0, 37177.0, 37739.0, 38321.0, 38932.0, 39640.0, 40337.0, 41000.0, 41626.0, 42385.0, 43122.0, 43890.0, 44687.0, 45609.0, 46520.0, 47489.0, 48432.0, 49458.0, 50511.0, 51561.0, 52568.0, 53676.0, 54936.0, 56071.0, 57302.0, 58513.0, 59800.0, 61192.0, 62702.0, 64205.0, 65868.0, 67780.0, 69960.0, 72330.0, 74918.0, 77540.0, 80344.0, 83727.0, 87662.0, 93589.0, 101441.0, 110544.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 106
        local_name: "variables"
      }
      children {
        node_id: 107
        local_name: "regularization_losses"
      }
      children {
        node_id: 108
        local_name: "trainable_variables"
      }
      children {
        node_id: 109
        local_name: "keras_api"
      }
      children {
        node_id: 242
        local_name: "__call__"
      }
      children {
        node_id: 243
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_9\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_9\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAgAAAAQAAAATAAAAcxgAAACIAHwAgwF9AXQAagF8AXQAagJkAY0CUwApAk4pAdoF\\nZHR5cGUpA9oCdGbaCnplcm9zX2xpa2XaB2Zsb2F0MzIpAtoDb2Jz2gxleHBhbmRlZF9vYnMpAdoO\\nZXhwYW5kX2RpbXNfb3CpAPr0L2V4cG9ydC9oZGEzL2JvcmdsZXQvbG9jYWxfcmFtX2ZzX2RpcnMv\\nMC55dW5kaV9tdXBwZXRfMF8xMjI3MDgzMy4xMy55dW5kaS4xOTQ3MzE0MTc5NjEuOGY0ZjlmOThj\\nYjdhMzA1NS9idWlsZF90YXJnZXRfdHJhaW5fcGFyX2Q5NzU3NTM3MDE2YTJlYjgvdHJhaW4ucGFy\\nL2dvb2dsZTMvbGVhcm5pbmcvc21hcnRjaG9pY2VzL3Jlc2VhcmNoL2NsaWVudHMvY29tcGlsZXJf\\nb3B0L3BvbGljeV90cmFpbmluZy9mZWF0dXJlX29wcy5wedoPZGlzY2FyZF9mZWF0dXJlJwAAAHME\\nAAAAAAEIAQ==\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 110
        local_name: "variables"
      }
      children {
        node_id: 111
        local_name: "regularization_losses"
      }
      children {
        node_id: 112
        local_name: "trainable_variables"
      }
      children {
        node_id: 113
        local_name: "keras_api"
      }
      children {
        node_id: 244
        local_name: "__call__"
      }
      children {
        node_id: 245
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_10\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_10\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [13.0, 38.0, 56.0, 70.0, 82.0, 94.0, 104.0, 114.0, 123.0, 131.0, 139.0, 148.0, 152.0, 153.0, 158.0, 163.0, 170.0, 174.0, 178.0, 180.0, 183.0, 186.0, 188.0, 190.0, 192.0, 196.0, 198.0, 201.0, 205.0, 208.0, 212.0, 215.0, 219.0, 221.0, 225.0, 227.0, 229.0, 232.0, 233.0, 236.0, 239.0, 242.0, 245.0, 248.0, 250.0, 252.0, 254.0, 256.0, 259.0, 261.0, 264.0, 267.0, 270.0, 272.0, 275.0, 278.0, 280.0, 283.0, 285.0, 287.0, 290.0, 293.0, 295.0, 297.0, 300.0, 303.0, 305.0, 308.0, 311.0, 313.0, 316.0, 319.0, 322.0, 325.0, 329.0, 331.0, 333.0, 336.0, 338.0, 340.0, 343.0, 345.0, 347.0, 347.0, 349.0, 351.0, 353.0, 355.0, 357.0, 359.0, 361.0, 363.0, 365.0, 368.0, 369.0, 371.0, 373.0, 375.0, 377.0, 380.0, 382.0, 385.0, 387.0, 389.0, 391.0, 394.0, 396.0, 398.0, 400.0, 403.0, 405.0, 408.0, 410.0, 412.0, 415.0, 417.0, 420.0, 422.0, 425.0, 427.0, 429.0, 432.0, 434.0, 437.0, 439.0, 442.0, 444.0, 446.0, 449.0, 451.0, 454.0, 456.0, 458.0, 461.0, 463.0, 466.0, 469.0, 472.0, 474.0, 476.0, 479.0, 482.0, 483.0, 486.0, 489.0, 492.0, 495.0, 498.0, 500.0, 503.0, 505.0, 508.0, 510.0, 513.0, 516.0, 519.0, 522.0, 524.0, 528.0, 530.0, 533.0, 536.0, 539.0, 541.0, 544.0, 547.0, 550.0, 553.0, 556.0, 559.0, 561.0, 563.0, 567.0, 570.0, 572.0, 575.0, 577.0, 580.0, 584.0, 586.0, 589.0, 592.0, 595.0, 598.0, 601.0, 605.0, 607.0, 611.0, 613.0, 617.0, 620.0, 623.0, 626.0, 629.0, 632.0, 635.0, 639.0, 642.0, 645.0, 648.0, 651.0, 654.0, 657.0, 660.0, 662.0, 666.0, 669.0, 672.0, 676.0, 679.0, 682.0, 685.0, 688.0, 690.0, 693.0, 696.0, 699.0, 702.0, 705.0, 709.0, 712.0, 714.0, 718.0, 721.0, 724.0, 726.0, 728.0, 729.0, 731.0, 734.0, 737.0, 741.0, 745.0, 748.0, 750.0, 753.0, 756.0, 760.0, 763.0, 766.0, 770.0, 773.0, 776.0, 779.0, 782.0, 786.0, 788.0, 793.0, 796.0, 798.0, 802.0, 805.0, 808.0, 811.0, 815.0, 818.0, 820.0, 824.0, 827.0, 829.0, 832.0, 835.0, 838.0, 842.0, 846.0, 849.0, 854.0, 857.0, 860.0, 864.0, 867.0, 871.0, 875.0, 879.0, 882.0, 887.0, 890.0, 893.0, 897.0, 901.0, 905.0, 908.0, 911.0, 915.0, 918.0, 921.0, 925.0, 929.0, 932.0, 934.0, 937.0, 940.0, 943.0, 946.0, 950.0, 953.0, 956.0, 961.0, 965.0, 969.0, 973.0, 976.0, 980.0, 982.0, 985.0, 990.0, 994.0, 997.0, 1001.0, 1005.0, 1007.0, 1010.0, 1014.0, 1018.0, 1022.0, 1025.0, 1028.0, 1033.0, 1035.0, 1038.0, 1042.0, 1047.0, 1052.0, 1056.0, 1060.0, 1063.0, 1067.0, 1071.0, 1075.0, 1079.0, 1083.0, 1086.0, 1088.0, 1092.0, 1097.0, 1102.0, 1106.0, 1109.0, 1113.0, 1117.0, 1120.0, 1125.0, 1129.0, 1134.0, 1137.0, 1142.0, 1146.0, 1150.0, 1151.0, 1155.0, 1159.0, 1162.0, 1166.0, 1170.0, 1174.0, 1177.0, 1181.0, 1185.0, 1188.0, 1193.0, 1196.0, 1203.0, 1207.0, 1212.0, 1214.0, 1217.0, 1220.0, 1222.0, 1222.0, 1226.0, 1229.0, 1233.0, 1237.0, 1241.0, 1246.0, 1250.0, 1253.0, 1257.0, 1262.0, 1267.0, 1272.0, 1278.0, 1283.0, 1287.0, 1293.0, 1297.0, 1301.0, 1304.0, 1309.0, 1315.0, 1320.0, 1325.0, 1329.0, 1333.0, 1336.0, 1341.0, 1344.0, 1348.0, 1351.0, 1357.0, 1363.0, 1368.0, 1374.0, 1379.0, 1383.0, 1386.0, 1391.0, 1395.0, 1399.0, 1403.0, 1407.0, 1410.0, 1415.0, 1418.0, 1423.0, 1428.0, 1432.0, 1436.0, 1438.0, 1442.0, 1446.0, 1450.0, 1454.0, 1462.0, 1467.0, 1472.0, 1477.0, 1483.0, 1488.0, 1492.0, 1496.0, 1503.0, 1508.0, 1513.0, 1518.0, 1520.0, 1526.0, 1531.0, 1534.0, 1538.0, 1542.0, 1546.0, 1552.0, 1558.0, 1564.0, 1568.0, 1573.0, 1578.0, 1581.0, 1590.0, 1596.0, 1601.0, 1606.0, 1611.0, 1616.0, 1622.0, 1629.0, 1634.0, 1640.0, 1647.0, 1651.0, 1657.0, 1660.0, 1665.0, 1672.0, 1678.0, 1686.0, 1692.0, 1698.0, 1704.0, 1709.0, 1714.0, 1719.0, 1724.0, 1730.0, 1737.0, 1744.0, 1751.0, 1755.0, 1761.0, 1764.0, 1772.0, 1778.0, 1784.0, 1789.0, 1799.0, 1804.0, 1811.0, 1819.0, 1825.0, 1830.0, 1838.0, 1849.0, 1858.0, 1862.0, 1868.0, 1872.0, 1878.0, 1885.0, 1888.0, 1892.0, 1897.0, 1902.0, 1907.0, 1919.0, 1926.0, 1932.0, 1936.0, 1941.0, 1946.0, 1952.0, 1960.0, 1968.0, 1977.0, 1985.0, 1992.0, 1997.0, 2006.0, 2012.0, 2018.0, 2026.0, 2034.0, 2044.0, 2050.0, 2057.0, 2064.0, 2069.0, 2075.0, 2082.0, 2091.0, 2098.0, 2107.0, 2122.0, 2126.0, 2135.0, 2146.0, 2149.0, 2157.0, 2163.0, 2172.0, 2178.0, 2184.0, 2191.0, 2198.0, 2208.0, 2216.0, 2223.0, 2235.0, 2242.0, 2252.0, 2263.0, 2272.0, 2277.0, 2288.0, 2296.0, 2306.0, 2311.0, 2318.0, 2323.0, 2334.0, 2341.0, 2356.0, 2366.0, 2373.0, 2379.0, 2386.0, 2407.0, 2416.0, 2423.0, 2432.0, 2438.0, 2448.0, 2453.0, 2464.0, 2473.0, 2473.0, 2481.0, 2492.0, 2504.0, 2511.0, 2523.0, 2529.0, 2537.0, 2545.0, 2556.0, 2566.0, 2575.0, 2584.0, 2592.0, 2602.0, 2613.0, 2624.0, 2636.0, 2643.0, 2647.0, 2652.0, 2664.0, 2675.0, 2688.0, 2693.0, 2702.0, 2709.0, 2722.0, 2739.0, 2754.0, 2766.0, 2776.0, 2786.0, 2799.0, 2810.0, 2832.0, 2840.0, 2849.0, 2860.0, 2873.0, 2889.0, 2908.0, 2914.0, 2926.0, 2939.0, 2950.0, 2961.0, 2969.0, 2978.0, 2990.0, 2999.0, 3023.0, 3032.0, 3049.0, 3066.0, 3085.0, 3101.0, 3107.0, 3117.0, 3129.0, 3144.0, 3167.0, 3190.0, 3212.0, 3229.0, 3238.0, 3264.0, 3293.0, 3302.0, 3309.0, 3314.0, 3323.0, 3344.0, 3352.0, 3362.0, 3390.0, 3400.0, 3411.0, 3435.0, 3456.0, 3470.0, 3485.0, 3498.0, 3505.0, 3519.0, 3539.0, 3545.0, 3545.0, 3560.0, 3576.0, 3597.0, 3607.0, 3621.0, 3641.0, 3665.0, 3679.0, 3701.0, 3714.0, 3733.0, 3741.0, 3745.0, 3757.0, 3773.0, 3787.0, 3795.0, 3805.0, 3822.0, 3835.0, 3844.0, 3861.0, 3872.0, 3878.0, 3897.0, 3919.0, 3941.0, 3971.0, 4004.0, 4014.0, 4019.0, 4061.0, 4068.0, 4089.0, 4108.0, 4117.0, 4125.0, 4146.0, 4165.0, 4194.0, 4204.0, 4224.0, 4236.0, 4263.0, 4290.0, 4301.0, 4319.0, 4326.0, 4347.0, 4369.0, 4386.0, 4413.0, 4435.0, 4451.0, 4451.0, 4451.0, 4476.0, 4500.0, 4539.0, 4579.0, 4592.0, 4600.0, 4622.0, 4650.0, 4683.0, 4714.0, 4742.0, 4755.0, 4771.0, 4788.0, 4816.0, 4828.0, 4831.0, 4831.0, 4831.0, 4843.0, 4852.0, 4865.0, 4896.0, 4915.0, 4931.0, 4952.0, 4965.0, 4983.0, 5007.0, 5043.0, 5061.0, 5081.0, 5095.0, 5122.0, 5143.0, 5171.0, 5204.0, 5226.0, 5233.0, 5250.0, 5281.0, 5320.0, 5323.0, 5328.0, 5345.0, 5374.0, 5413.0, 5466.0, 5492.0, 5524.0, 5555.0, 5567.0, 5610.0, 5676.0, 5701.0, 5716.0, 5744.0, 5768.0, 5795.0, 5818.0, 5854.0, 5906.0, 5934.0, 5960.0, 5975.0, 5993.0, 6025.0, 6034.0, 6051.0, 6082.0, 6106.0, 6125.0, 6159.0, 6187.0, 6242.0, 6287.0, 6311.0, 6332.0, 6348.0, 6358.0, 6368.0, 6377.0, 6402.0, 6407.0, 6428.0, 6450.0, 6475.0, 6498.0, 6505.0, 6533.0, 6565.0, 6580.0, 6595.0, 6611.0, 6654.0, 6658.0, 6705.0, 6751.0, 6786.0, 6828.0, 6876.0, 6896.0, 6948.0, 6964.0, 7065.0, 7082.0, 7118.0, 7184.0, 7214.0, 7271.0, 7310.0, 7357.0, 7405.0, 7506.0, 7613.0, 7641.0, 7675.0, 7720.0, 7781.0, 7833.0, 7860.0, 7898.0, 7929.0, 8044.0, 8104.0, 8148.0, 8236.0, 8273.0, 8313.0, 8349.0, 8381.0, 8409.0, 8498.0, 8507.0, 8524.0, 8570.0, 8607.0, 8630.0, 8637.0, 8675.0, 8700.0, 8714.0, 8734.0, 8776.0, 8836.0, 8854.0, 8867.0, 8868.0, 9065.0, 9113.0, 9121.0, 9241.0, 9357.0, 9360.0, 9585.0, 9613.0, 9684.0, 9727.0, 9751.0, 9777.0, 9802.0, 9889.0, 9903.0, 9914.0, 9978.0, 10061.0, 10192.0, 10213.0, 10345.0, 10369.0, 10404.0, 10430.0, 10471.0, 10481.0, 10489.0, 10492.0, 10494.0, 10524.0, 10554.0, 10557.0, 10560.0, 10562.0, 10641.0, 10716.0, 10842.0, 10897.0, 10967.0, 11053.0, 11128.0, 11137.0, 11328.0, 11336.0, 11401.0, 11532.0, 11573.0, 11860.0, 11880.0, 12013.0, 12305.0, 12358.0, 12386.0, 12404.0, 12456.0, 12456.0, 12476.0, 12615.0, 12677.0, 12981.0, 13094.0, 13197.0, 13708.0, 13717.0, 13788.0, 14049.0, 14112.0, 14224.0, 14257.0, 14681.0, 14901.0, 15006.0, 15071.0, 15100.0, 15248.0, 15669.0, 15877.0, 15953.0, 15953.0, 16066.0, 16072.0, 16271.0, 16292.0, 16386.0, 16490.0, 16633.0, 16670.0, 16834.0, 16896.0, 17543.0, 17693.0, 17800.0, 17859.0, 18397.0, 18811.0, 18826.0, 18971.0, 19304.0, 19319.0, 19695.0, 20378.0, 20865.0, 21313.0, 21330.0, 22321.0, 22760.0, 22770.0, 23783.0, 23785.0, 24525.0, 24844.0, 24848.0, 24964.0, 24966.0, 27468.0, 27478.0, 27555.0, 27555.0, 28215.0, 28219.0, 28336.0, 28490.0, 30213.0, 30228.0, 30242.0, 34116.0, 43518.0, 43518.0, 43518.0, 43852.0, 43852.0, 43852.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      children {
        node_id: 114
        local_name: "variables"
      }
      children {
        node_id: 115
        local_name: "regularization_losses"
      }
      children {
        node_id: 116
        local_name: "trainable_variables"
      }
      children {
        node_id: 117
        local_name: "keras_api"
      }
      children {
        node_id: 246
        local_name: "__call__"
      }
      children {
        node_id: 247
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Lambda\", \"name\": \"lambda_11\", \"trainable\": true, \"expects_training_arg\": true, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"lambda_11\", \"trainable\": true, \"dtype\": \"float32\", \"function\": {\"class_name\": \"__tuple__\", \"items\": [\"4wEAAAAAAAAAAwAAAAUAAAATAAAAc0QAAACIAHwAgwF9AXQAagF0AmoDfAGIAYMCdABqBIMCdAWI\\nAYMBGwB9AnQAagZ8AnQAagd8AoMBfAJ8AhQAZwNkA2QCjQJTACkETukBAAAAKQHaBGF4aXPp////\\n/ykI2gJ0ZtoEY2FzdNoOY29udHJpYl9sYXllcnPaCWJ1Y2tldGl6ZdoHZmxvYXQzMtoDbGVu2gZj\\nb25jYXTaBHNxcnQpA9oDb2Jz2gxleHBhbmRlZF9vYnPaAXgpAtoOZXhwYW5kX2RpbXNfb3DaCHF1\\nYW50aWxlqQD69C9leHBvcnQvaGRhMy9ib3JnbGV0L2xvY2FsX3JhbV9mc19kaXJzLzAueXVuZGlf\\nbXVwcGV0XzBfMTIyNzA4MzMuMTMueXVuZGkuMTk0NzMxNDE3OTYxLjhmNGY5Zjk4Y2I3YTMwNTUv\\nYnVpbGRfdGFyZ2V0X3RyYWluX3Bhcl9kOTc1NzUzNzAxNmEyZWI4L3RyYWluLnBhci9nb29nbGUz\\nL2xlYXJuaW5nL3NtYXJ0Y2hvaWNlcy9yZXNlYXJjaC9jbGllbnRzL2NvbXBpbGVyX29wdC9wb2xp\\nY3lfdHJhaW5pbmcvZmVhdHVyZV9vcHMucHnaDW5vcm1hbGl6YXRpb24wAAAAcwoAAAAAAQgBBAEK\\nARAB\\n\", null, {\"class_name\": \"__tuple__\", \"items\": [{\"class_name\": \"ExpandDims\", \"config\": {\"name\": \"expand_dims\", \"trainable\": true, \"dtype\": \"float32\", \"axis\": -1}}, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 4.0]]}]}, \"function_type\": \"lambda\", \"module\": \"google3.learning.smartchoices.research.clients.compiler_opt.policy_training.feature_ops\", \"output_shape\": null, \"output_shape_type\": \"raw\", \"output_shape_module\": null, \"arguments\": {}}}"
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 118
        local_name: "layer_metrics"
      }
      children {
        node_id: 53
        local_name: "variables"
      }
      children {
        node_id: 119
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 120
        local_name: "metrics"
      }
      children {
        node_id: 121
        local_name: "layers"
      }
      children {
        node_id: 54
        local_name: "regularization_losses"
      }
      children {
        node_id: 122
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 55
        local_name: "trainable_variables"
      }
      children {
        node_id: 222
        local_name: "__call__"
      }
      children {
        node_id: 223
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 223
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 123
        local_name: "variables"
      }
      children {
        node_id: 124
        local_name: "regularization_losses"
      }
      children {
        node_id: 125
        local_name: "trainable_variables"
      }
      children {
        node_id: 126
        local_name: "keras_api"
      }
      children {
        node_id: 248
        local_name: "__call__"
      }
      children {
        node_id: 249
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Flatten\", \"name\": \"flatten\", \"trainable\": true, \"expects_training_arg\": false, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"flatten\", \"trainable\": true, \"dtype\": \"float32\", \"data_format\": \"channels_last\"}, \"input_spec\": {\"class_name\": \"InputSpec\", \"config\": {\"dtype\": null, \"shape\": null, \"ndim\": null, \"max_ndim\": null, \"min_ndim\": 1, \"axes\": {}}}}"
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "kernel"
      }
      children {
        node_id: 11
        local_name: "bias"
      }
      children {
        node_id: 127
        local_name: "variables"
      }
      children {
        node_id: 128
        local_name: "regularization_losses"
      }
      children {
        node_id: 129
        local_name: "trainable_variables"
      }
      children {
        node_id: 130
        local_name: "keras_api"
      }
      children {
        node_id: 250
        local_name: "__call__"
      }
      children {
        node_id: 251
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Dense\", \"name\": \"dense\", \"trainable\": true, \"expects_training_arg\": false, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"dense\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 100, \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"VarianceScaling\", \"config\": {\"scale\": 2.0, \"mode\": \"fan_in\", \"distribution\": \"truncated_normal\", \"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"input_spec\": {\"class_name\": \"InputSpec\", \"config\": {\"dtype\": null, \"shape\": null, \"ndim\": null, \"max_ndim\": null, \"min_ndim\": 2, \"axes\": {\"-1\": 34}}}, \"build_input_shape\": {\"class_name\": \"TensorShape\", \"items\": [0, 34]}}"
      }
    }
    nodes {
      children {
        node_id: 12
        local_name: "kernel"
      }
      children {
        node_id: 13
        local_name: "bias"
      }
      children {
        node_id: 131
        local_name: "variables"
      }
      children {
        node_id: 132
        local_name: "regularization_losses"
      }
      children {
        node_id: 133
        local_name: "trainable_variables"
      }
      children {
        node_id: 134
        local_name: "keras_api"
      }
      children {
        node_id: 252
        local_name: "__call__"
      }
      children {
        node_id: 253
        local_name: "call_and_return_all_conditional_losses"
      }
      user_object {
        identifier: "_tf_keras_layer"
        version {
          producer: 1
          min_consumer: 1
        }
        metadata: "{\"class_name\": \"Dense\", \"name\": \"dense_1\", \"trainable\": true, \"expects_training_arg\": false, \"dtype\": \"float32\", \"batch_input_shape\": null, \"stateful\": false, \"config\": {\"name\": \"dense_1\", \"trainable\": true, \"dtype\": \"float32\", \"units\": 40, \"activation\": \"relu\", \"use_bias\": true, \"kernel_initializer\": {\"class_name\": \"VarianceScaling\", \"config\": {\"scale\": 2.0, \"mode\": \"fan_in\", \"distribution\": \"truncated_normal\", \"seed\": null, \"dtype\": \"float32\"}}, \"bias_initializer\": {\"class_name\": \"Zeros\", \"config\": {}}, \"kernel_regularizer\": null, \"bias_regularizer\": null, \"activity_regularizer\": null, \"kernel_constraint\": null, \"bias_constraint\": null}, \"input_spec\": {\"class_name\": \"InputSpec\", \"config\": {\"dtype\": null, \"shape\": null, \"ndim\": null, \"max_ndim\": null, \"min_ndim\": 2, \"axes\": {\"-1\": 100}}}, \"build_input_shape\": {\"class_name\": \"TensorShape\", \"items\": [0, 100]}}"
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 41
        local_name: "0"
      }
      children {
        node_id: 42
        local_name: "1"
      }
      children {
        node_id: 43
        local_name: "2"
      }
      children {
        node_id: 44
        local_name: "3"
      }
      children {
        node_id: 45
        local_name: "4"
      }
      children {
        node_id: 46
        local_name: "5"
      }
      children {
        node_id: 47
        local_name: "6"
      }
      children {
        node_id: 48
        local_name: "7"
      }
      children {
        node_id: 49
        local_name: "8"
      }
      children {
        node_id: 50
        local_name: "9"
      }
      children {
        node_id: 51
        local_name: "10"
      }
      children {
        node_id: 52
        local_name: "11"
      }
      children {
        node_id: 26
        local_name: "12"
      }
      children {
        node_id: 57
        local_name: "13"
      }
      children {
        node_id: 58
        local_name: "14"
      }
      children {
        node_id: 59
        local_name: "15"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 135
        local_name: "layer_metrics"
      }
      children {
        node_id: 70
        local_name: "variables"
      }
      children {
        node_id: 136
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 137
        local_name: "metrics"
      }
      children {
        node_id: 138
        local_name: "layers"
      }
      children {
        node_id: 71
        local_name: "regularization_losses"
      }
      children {
        node_id: 139
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 72
        local_name: "trainable_variables"
      }
      children {
        node_id: 224
        local_name: "__call__"
      }
      children {
        node_id: 225
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 225
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 140
        local_name: "layer_metrics"
      }
      children {
        node_id: 74
        local_name: "variables"
      }
      children {
        node_id: 141
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 142
        local_name: "metrics"
      }
      children {
        node_id: 143
        local_name: "layers"
      }
      children {
        node_id: 75
        local_name: "regularization_losses"
      }
      children {
        node_id: 144
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 76
        local_name: "trainable_variables"
      }
      children {
        node_id: 226
        local_name: "__call__"
      }
      children {
        node_id: 227
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 227
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 145
        local_name: "layer_metrics"
      }
      children {
        node_id: 78
        local_name: "variables"
      }
      children {
        node_id: 146
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 147
        local_name: "metrics"
      }
      children {
        node_id: 148
        local_name: "layers"
      }
      children {
        node_id: 79
        local_name: "regularization_losses"
      }
      children {
        node_id: 149
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 80
        local_name: "trainable_variables"
      }
      children {
        node_id: 228
        local_name: "__call__"
      }
      children {
        node_id: 229
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 229
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 150
        local_name: "layer_metrics"
      }
      children {
        node_id: 82
        local_name: "variables"
      }
      children {
        node_id: 151
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 152
        local_name: "metrics"
      }
      children {
        node_id: 153
        local_name: "layers"
      }
      children {
        node_id: 83
        local_name: "regularization_losses"
      }
      children {
        node_id: 154
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 84
        local_name: "trainable_variables"
      }
      children {
        node_id: 230
        local_name: "__call__"
      }
      children {
        node_id: 231
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 231
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 155
        local_name: "layer_metrics"
      }
      children {
        node_id: 86
        local_name: "variables"
      }
      children {
        node_id: 156
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 157
        local_name: "metrics"
      }
      children {
        node_id: 158
        local_name: "layers"
      }
      children {
        node_id: 87
        local_name: "regularization_losses"
      }
      children {
        node_id: 159
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 88
        local_name: "trainable_variables"
      }
      children {
        node_id: 232
        local_name: "__call__"
      }
      children {
        node_id: 233
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 233
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 160
        local_name: "layer_metrics"
      }
      children {
        node_id: 90
        local_name: "variables"
      }
      children {
        node_id: 161
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 162
        local_name: "metrics"
      }
      children {
        node_id: 163
        local_name: "layers"
      }
      children {
        node_id: 91
        local_name: "regularization_losses"
      }
      children {
        node_id: 164
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 92
        local_name: "trainable_variables"
      }
      children {
        node_id: 234
        local_name: "__call__"
      }
      children {
        node_id: 235
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 235
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 165
        local_name: "layer_metrics"
      }
      children {
        node_id: 94
        local_name: "variables"
      }
      children {
        node_id: 166
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 167
        local_name: "metrics"
      }
      children {
        node_id: 168
        local_name: "layers"
      }
      children {
        node_id: 95
        local_name: "regularization_losses"
      }
      children {
        node_id: 169
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 96
        local_name: "trainable_variables"
      }
      children {
        node_id: 236
        local_name: "__call__"
      }
      children {
        node_id: 237
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 237
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 170
        local_name: "layer_metrics"
      }
      children {
        node_id: 98
        local_name: "variables"
      }
      children {
        node_id: 171
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 172
        local_name: "metrics"
      }
      children {
        node_id: 173
        local_name: "layers"
      }
      children {
        node_id: 99
        local_name: "regularization_losses"
      }
      children {
        node_id: 174
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 100
        local_name: "trainable_variables"
      }
      children {
        node_id: 238
        local_name: "__call__"
      }
      children {
        node_id: 239
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 239
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 175
        local_name: "layer_metrics"
      }
      children {
        node_id: 102
        local_name: "variables"
      }
      children {
        node_id: 176
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 177
        local_name: "metrics"
      }
      children {
        node_id: 178
        local_name: "layers"
      }
      children {
        node_id: 103
        local_name: "regularization_losses"
      }
      children {
        node_id: 179
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 104
        local_name: "trainable_variables"
      }
      children {
        node_id: 240
        local_name: "__call__"
      }
      children {
        node_id: 241
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 241
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 180
        local_name: "layer_metrics"
      }
      children {
        node_id: 106
        local_name: "variables"
      }
      children {
        node_id: 181
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 182
        local_name: "metrics"
      }
      children {
        node_id: 183
        local_name: "layers"
      }
      children {
        node_id: 107
        local_name: "regularization_losses"
      }
      children {
        node_id: 184
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 108
        local_name: "trainable_variables"
      }
      children {
        node_id: 242
        local_name: "__call__"
      }
      children {
        node_id: 243
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 243
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 185
        local_name: "layer_metrics"
      }
      children {
        node_id: 110
        local_name: "variables"
      }
      children {
        node_id: 186
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 187
        local_name: "metrics"
      }
      children {
        node_id: 188
        local_name: "layers"
      }
      children {
        node_id: 111
        local_name: "regularization_losses"
      }
      children {
        node_id: 189
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 112
        local_name: "trainable_variables"
      }
      children {
        node_id: 244
        local_name: "__call__"
      }
      children {
        node_id: 245
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 245
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 190
        local_name: "layer_metrics"
      }
      children {
        node_id: 114
        local_name: "variables"
      }
      children {
        node_id: 191
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 192
        local_name: "metrics"
      }
      children {
        node_id: 193
        local_name: "layers"
      }
      children {
        node_id: 115
        local_name: "regularization_losses"
      }
      children {
        node_id: 194
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 116
        local_name: "trainable_variables"
      }
      children {
        node_id: 246
        local_name: "__call__"
      }
      children {
        node_id: 247
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 247
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 195
        local_name: "layer_metrics"
      }
      children {
        node_id: 123
        local_name: "variables"
      }
      children {
        node_id: 196
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 197
        local_name: "metrics"
      }
      children {
        node_id: 198
        local_name: "layers"
      }
      children {
        node_id: 124
        local_name: "regularization_losses"
      }
      children {
        node_id: 199
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 125
        local_name: "trainable_variables"
      }
      children {
        node_id: 248
        local_name: "__call__"
      }
      children {
        node_id: 249
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 249
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 10
        local_name: "0"
      }
      children {
        node_id: 11
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 200
        local_name: "layer_metrics"
      }
      children {
        node_id: 127
        local_name: "variables"
      }
      children {
        node_id: 201
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 202
        local_name: "metrics"
      }
      children {
        node_id: 203
        local_name: "layers"
      }
      children {
        node_id: 128
        local_name: "regularization_losses"
      }
      children {
        node_id: 204
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 129
        local_name: "trainable_variables"
      }
      children {
        node_id: 250
        local_name: "__call__"
      }
      children {
        node_id: 251
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 251
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 12
        local_name: "0"
      }
      children {
        node_id: 13
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 12
        local_name: "0"
      }
      children {
        node_id: 13
        local_name: "1"
      }
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      children {
        node_id: 205
        local_name: "layer_metrics"
      }
      children {
        node_id: 131
        local_name: "variables"
      }
      children {
        node_id: 206
        local_name: "layer_regularization_losses"
      }
      children {
        node_id: 207
        local_name: "metrics"
      }
      children {
        node_id: 208
        local_name: "layers"
      }
      children {
        node_id: 132
        local_name: "regularization_losses"
      }
      children {
        node_id: 209
        local_name: "non_trainable_variables"
      }
      children {
        node_id: 133
        local_name: "trainable_variables"
      }
      children {
        node_id: 252
        local_name: "__call__"
      }
      children {
        node_id: 253
        local_name: "call_and_return_all_conditional_losses"
      }
      children {
        node_id: 253
        local_name: "call_and_return_conditional_losses"
      }
      user_object {
        identifier: "_generic_user_object"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_dict_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      user_object {
        identifier: "trackable_list_wrapper"
        version {
          producer: 1
          min_consumer: 1
        }
      }
    }
    nodes {
      function {
        concrete_functions: "__inference_polymorphic_action_fn_4619080"
        concrete_functions: "__inference_polymorphic_action_fn_946"
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "time_step"
                    }
                    values {
                      string_value: "policy_state"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  tuple_value {
                    values {
                      tuple_value {
                      }
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        concrete_functions: "__inference_function_722"
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      bare_concrete_function {
        concrete_function_name: "__inference_<lambda>_728"
      }
    }
    nodes {
      bare_concrete_function {
        concrete_function_name: "__inference_signature_wrapper_4619026"
        argument_keywords: "callee_basic_block_count"
        argument_keywords: "callee_conditionally_executed_blocks"
        argument_keywords: "callee_users"
        argument_keywords: "caller_basic_block_count"
        argument_keywords: "caller_conditionally_executed_blocks"
        argument_keywords: "caller_users"
        argument_keywords: "callsite_height"
        argument_keywords: "cost_estimate"
        argument_keywords: "discount"
        argument_keywords: "edge_count"
        argument_keywords: "inlining_default"
        argument_keywords: "node_count"
        argument_keywords: "nr_ctant_params"
        argument_keywords: "reward"
        argument_keywords: "step_type"
      }
    }
    nodes {
      bare_concrete_function {
        concrete_function_name: "__inference_signature_wrapper_4619033"
      }
    }
    nodes {
      bare_concrete_function {
        concrete_function_name: "__inference_signature_wrapper_4619048"
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "observation"
                    }
                    values {
                      string_value: "step_type"
                    }
                    values {
                      string_value: "network_state"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      tuple_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "observation"
                    }
                    values {
                      string_value: "step_type"
                    }
                    values {
                      string_value: "network_state"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      tuple_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "observation"
                    }
                    values {
                      string_value: "step_type"
                    }
                    values {
                      string_value: "network_state"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      tuple_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "observation"
                    }
                    values {
                      string_value: "step_type"
                    }
                    values {
                      string_value: "network_state"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      tuple_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                    values {
                      string_value: "mask"
                    }
                    values {
                      string_value: "training"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  list_value {
                    values {
                      none_value {
                      }
                    }
                    values {
                      bool_value: false
                    }
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  dict_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    nodes {
      function {
        function_spec {
          fullargspec {
            named_tuple_value {
              name: "FullArgSpec"
              values {
                key: "args"
                value {
                  list_value {
                    values {
                      string_value: "self"
                    }
                    values {
                      string_value: "inputs"
                    }
                  }
                }
              }
              values {
                key: "varargs"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "varkw"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "defaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "kwonlyargs"
                value {
                  list_value {
                  }
                }
              }
              values {
                key: "kwonlydefaults"
                value {
                  none_value {
                  }
                }
              }
              values {
                key: "annotations"
                value {
                  dict_value {
                  }
                }
              }
            }
          }
          is_method: true
          input_signature {
            none_value {
            }
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_<lambda>_728"
      value {
        bound_inputs: 4
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
              }
            }
            values {
              dict_value {
              }
            }
          }
        }
        output_signature {
          tensor_spec_value {
            shape {
            }
            dtype: DT_INT64
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_function_722"
      value {
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
              }
            }
            values {
              dict_value {
              }
            }
          }
        }
        output_signature {
          tuple_value {
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_polymorphic_action_fn_4619080"
      value {
        bound_inputs: 10
        bound_inputs: 11
        bound_inputs: 12
        bound_inputs: 13
        bound_inputs: 14
        bound_inputs: 15
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
                values {
                  named_tuple_value {
                    name: "TimeStep"
                    values {
                      key: "step_type"
                      value {
                        tensor_spec_value {
                          name: "time_step/step_type"
                          shape {
                            dim {
                              size: 1
                            }
                          }
                          dtype: DT_INT32
                        }
                      }
                    }
                    values {
                      key: "reward"
                      value {
                        tensor_spec_value {
                          name: "time_step/reward"
                          shape {
                            dim {
                              size: 1
                            }
                          }
                          dtype: DT_FLOAT
                        }
                      }
                    }
                    values {
                      key: "discount"
                      value {
                        tensor_spec_value {
                          name: "time_step/discount"
                          shape {
                            dim {
                              size: 1
                            }
                          }
                          dtype: DT_FLOAT
                        }
                      }
                    }
                    values {
                      key: "observation"
                      value {
                        dict_value {
                          fields {
                            key: "callee_basic_block_count"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/callee_basic_block_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "callee_conditionally_executed_blocks"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/callee_conditionally_executed_blocks"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "callee_users"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/callee_users"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "caller_basic_block_count"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/caller_basic_block_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "caller_conditionally_executed_blocks"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/caller_conditionally_executed_blocks"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "caller_users"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/caller_users"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "callsite_height"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/callsite_height"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "cost_estimate"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/cost_estimate"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "edge_count"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/edge_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "inlining_default"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/inlining_default"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "node_count"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/node_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "nr_ctant_params"
                            value {
                              tensor_spec_value {
                                name: "time_step/observation/nr_ctant_params"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                values {
                  tuple_value {
                  }
                }
              }
            }
            values {
              dict_value {
              }
            }
          }
        }
        output_signature {
          named_tuple_value {
            name: "PolicyStep"
            values {
              key: "action"
              value {
                tensor_spec_value {
                  name: "action"
                  shape {
                    dim {
                      size: 1
                    }
                  }
                  dtype: DT_INT64
                }
              }
            }
            values {
              key: "state"
              value {
                tuple_value {
                }
              }
            }
            values {
              key: "info"
              value {
                tuple_value {
                }
              }
            }
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_polymorphic_action_fn_946"
      value {
        bound_inputs: 10
        bound_inputs: 11
        bound_inputs: 12
        bound_inputs: 13
        bound_inputs: 14
        bound_inputs: 15
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
                values {
                  named_tuple_value {
                    name: "TimeStep"
                    values {
                      key: "step_type"
                      value {
                        tensor_spec_value {
                          name: "step_type"
                          shape {
                            dim {
                              size: 1
                            }
                          }
                          dtype: DT_INT32
                        }
                      }
                    }
                    values {
                      key: "reward"
                      value {
                        tensor_spec_value {
                          name: "reward"
                          shape {
                            dim {
                              size: 1
                            }
                          }
                          dtype: DT_FLOAT
                        }
                      }
                    }
                    values {
                      key: "discount"
                      value {
                        tensor_spec_value {
                          name: "discount"
                          shape {
                            dim {
                              size: 1
                            }
                          }
                          dtype: DT_FLOAT
                        }
                      }
                    }
                    values {
                      key: "observation"
                      value {
                        dict_value {
                          fields {
                            key: "callee_basic_block_count"
                            value {
                              tensor_spec_value {
                                name: "callee_basic_block_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "callee_conditionally_executed_blocks"
                            value {
                              tensor_spec_value {
                                name: "callee_conditionally_executed_blocks"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "callee_users"
                            value {
                              tensor_spec_value {
                                name: "callee_users"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "caller_basic_block_count"
                            value {
                              tensor_spec_value {
                                name: "caller_basic_block_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "caller_conditionally_executed_blocks"
                            value {
                              tensor_spec_value {
                                name: "caller_conditionally_executed_blocks"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "caller_users"
                            value {
                              tensor_spec_value {
                                name: "caller_users"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "callsite_height"
                            value {
                              tensor_spec_value {
                                name: "callsite_height"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "cost_estimate"
                            value {
                              tensor_spec_value {
                                name: "cost_estimate"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "edge_count"
                            value {
                              tensor_spec_value {
                                name: "edge_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "inlining_default"
                            value {
                              tensor_spec_value {
                                name: "inlining_default"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "node_count"
                            value {
                              tensor_spec_value {
                                name: "node_count"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                          fields {
                            key: "nr_ctant_params"
                            value {
                              tensor_spec_value {
                                name: "nr_ctant_params"
                                shape {
                                  dim {
                                    size: 1
                                  }
                                }
                                dtype: DT_INT64
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                values {
                  tuple_value {
                  }
                }
              }
            }
            values {
              dict_value {
              }
            }
          }
        }
        output_signature {
          named_tuple_value {
            name: "PolicyStep"
            values {
              key: "action"
              value {
                tensor_spec_value {
                  name: "action"
                  shape {
                    dim {
                      size: 1
                    }
                  }
                  dtype: DT_INT64
                }
              }
            }
            values {
              key: "state"
              value {
                tuple_value {
                }
              }
            }
            values {
              key: "info"
              value {
                tuple_value {
                }
              }
            }
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_signature_wrapper_4619026"
      value {
        bound_inputs: 10
        bound_inputs: 11
        bound_inputs: 12
        bound_inputs: 13
        bound_inputs: 14
        bound_inputs: 15
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
              }
            }
            values {
              dict_value {
                fields {
                  key: "callee_basic_block_count"
                  value {
                    tensor_spec_value {
                      name: "callee_basic_block_count"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "callee_conditionally_executed_blocks"
                  value {
                    tensor_spec_value {
                      name: "callee_conditionally_executed_blocks"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "callee_users"
                  value {
                    tensor_spec_value {
                      name: "callee_users"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "caller_basic_block_count"
                  value {
                    tensor_spec_value {
                      name: "caller_basic_block_count"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "caller_conditionally_executed_blocks"
                  value {
                    tensor_spec_value {
                      name: "caller_conditionally_executed_blocks"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "caller_users"
                  value {
                    tensor_spec_value {
                      name: "caller_users"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "callsite_height"
                  value {
                    tensor_spec_value {
                      name: "callsite_height"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "cost_estimate"
                  value {
                    tensor_spec_value {
                      name: "cost_estimate"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "discount"
                  value {
                    tensor_spec_value {
                      name: "discount"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_FLOAT
                    }
                  }
                }
                fields {
                  key: "edge_count"
                  value {
                    tensor_spec_value {
                      name: "edge_count"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "inlining_default"
                  value {
                    tensor_spec_value {
                      name: "inlining_default"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "node_count"
                  value {
                    tensor_spec_value {
                      name: "node_count"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "nr_ctant_params"
                  value {
                    tensor_spec_value {
                      name: "nr_ctant_params"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT64
                    }
                  }
                }
                fields {
                  key: "reward"
                  value {
                    tensor_spec_value {
                      name: "reward"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_FLOAT
                    }
                  }
                }
                fields {
                  key: "step_type"
                  value {
                    tensor_spec_value {
                      name: "step_type"
                      shape {
                        dim {
                          size: 1
                        }
                      }
                      dtype: DT_INT32
                    }
                  }
                }
              }
            }
          }
        }
        output_signature {
          dict_value {
            fields {
              key: "inlining_decision"
              value {
                tensor_spec_value {
                  name: "inlining_decision"
                  shape {
                    dim {
                      size: 1
                    }
                  }
                  dtype: DT_INT64
                }
              }
            }
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_signature_wrapper_4619033"
      value {
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
              }
            }
            values {
              dict_value {
              }
            }
          }
        }
        output_signature {
          dict_value {
          }
        }
      }
    }
    concrete_functions {
      key: "__inference_signature_wrapper_4619048"
      value {
        bound_inputs: 4
        canonicalized_input_signature {
          tuple_value {
            values {
              tuple_value {
              }
            }
            values {
              dict_value {
              }
            }
          }
        }
        output_signature {
          dict_value {
            fields {
              key: "int64"
              value {
                tensor_spec_value {
                  name: "int64"
                  shape {
                  }
                  dtype: DT_INT64
                }
              }
            }
          }
        }
      }
    }
  }
}

