//===-- LoongArchInstructionSelector.cpp -------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// LoongArch.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "LoongArchRegisterBankInfo.h"
#include "LoongArchSubtarget.h"
#include "LoongArchTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/GIMatchTableExecutorImpl.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/IR/IntrinsicsLoongArch.h"
#include "llvm/Support/Debug.h"

#define DEBUG_TYPE "loongarch-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "LoongArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class LoongArchInstructionSelector : public InstructionSelector {
public:
  LoongArchInstructionSelector(const LoongArchTargetMachine &TM,
                               const LoongArchSubtarget &STI,
                               const LoongArchRegisterBankInfo &RBI);

  bool select(MachineInstr &MI) override;

  static const char *getName() { return DEBUG_TYPE; }

private:
  // tblgen-erated 'select' implementation, used as the initial selector for
  // the patterns that don't require complex C++.
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const LoongArchSubtarget &STI;
  const LoongArchInstrInfo &TII;
  const LoongArchRegisterInfo &TRI;
  const LoongArchRegisterBankInfo &RBI;
  const LoongArchTargetMachine &TM;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "LoongArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "LoongArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "LoongArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

LoongArchInstructionSelector::LoongArchInstructionSelector(
    const LoongArchTargetMachine &TM, const LoongArchSubtarget &STI,
    const LoongArchRegisterBankInfo &RBI)
    : STI(STI), TII(*STI.getInstrInfo()), TRI(*STI.getRegisterInfo()), RBI(RBI),
      TM(TM),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "LoongArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "LoongArchGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool LoongArchInstructionSelector::select(MachineInstr &MI) {
  if (!isPreISelGenericOpcode(MI.getOpcode())) {
    // Certain non-generic instructions also need some special handling.
    return true;
  }

  if (selectImpl(MI, *CoverageInfo))
    return true;

  return false;
}

namespace llvm {
InstructionSelector *
createLoongArchInstructionSelector(const LoongArchTargetMachine &TM,
                                   const LoongArchSubtarget &Subtarget,
                                   const LoongArchRegisterBankInfo &RBI) {
  return new LoongArchInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm
