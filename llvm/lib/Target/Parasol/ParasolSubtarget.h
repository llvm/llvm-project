//===-- ParasolSubtarget.h - Define Subtarget for the Parasol -------------===//
//
// Modified by Sunscreen under the AGPLv3 license; see the README at the
// repository root for more information
//
//===----------------------------------------------------------------------===//
//
// This file declares the Parasol specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_PARASOL_PARASOLSUBTARGET_H
#define LLVM_LIB_TARGET_PARASOL_PARASOLSUBTARGET_H

#include "ParasolFrameLowering.h"
#include "ParasolISelLowering.h"
#include "ParasolInstrInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/MC/MCInstrItineraries.h"

#include "llvm/CodeGen/GlobalISel/CallLowering.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/LegalizerInfo.h"
#include "llvm/CodeGen/RegisterBankInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "ParasolGenSubtargetInfo.inc"

namespace llvm {
class ParasolSubtarget : public ParasolGenSubtargetInfo {
protected:
  SelectionDAGTargetInfo TSInfo;
  ParasolInstrInfo InstrInfo;
  ParasolFrameLowering FrameLowering;
  ParasolTargetLowering TLInfo;
  ParasolRegisterInfo RegInfo;

  std::unique_ptr<CallLowering> CallLoweringInfo;
  std::unique_ptr<InstructionSelector> InstSelector;
  std::unique_ptr<LegalizerInfo> Legalizer;
  std::unique_ptr<RegisterBankInfo> RegBankInfo;

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ParasolSubtarget(const Triple &TT, StringRef CPU, StringRef FS,
                   const TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  ParasolSubtarget &initializeSubtargetDependencies(const Triple &TT,
                                                    StringRef CPU, StringRef FS,
                                                    const TargetMachine &TM);

  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  const ParasolInstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const ParasolRegisterInfo *getRegisterInfo() const override {
    return &RegInfo;
  }

  const ParasolTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }

  /// getMaxInlineSizeThreshold - Returns the maximum memset / memcpy size
  /// that still makes it profitable to inline the call.
  unsigned getMaxInlineSizeThreshold() const { return 64; }

  const CallLowering *getCallLowering() const override;
  InstructionSelector *getInstructionSelector() const override;
  const LegalizerInfo *getLegalizerInfo() const override;
  const RegisterBankInfo *getRegBankInfo() const override;
};
} // namespace llvm

#endif // end LLVM_LIB_TARGET_PARASOL_PARASOLSUBTARGET_H
