//===- ParasolGenRegisterBankInfo.def -----------------------------*- C++
//
// Modified by Sunscreen under the AGPLv3 license; see the README at the
// repository root for more information
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines all the static objects used by ParasolRegisterBankInfo.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//
#include <cmath>

namespace llvm {
namespace Parasol {

enum PartialMappingIdx {
  None = -1,
  PM_IR1 = 1,
  PM_IR8 = 4,
  PM_IR16 = 5,
  PM_IR32 = 6,
  PM_PR32 = 7,
  PM_GPR32 = 8,
};

const RegisterBankInfo::PartialMapping PartMappings[]{
    // StartIdx, Length, RegBank
    {0, 32, GPRRegBank},

    {0, 1, IRRegBank}, // IR begin
    {0, 8, IRRegBank},   {0, 16, IRRegBank}, {0, 32, IRRegBank},

    {0, 32, PRRegBank}, // PR begin

    {0, 32, GPRRegBank}, // GPR begin
};

const RegisterBankInfo::ValueMapping ValMappings[]{
    // None pointer
    {nullptr, 0},

    // IRs
    {&PartMappings[1], 1}, // 1
    {nullptr, 0},          // Illegal power of 2 sizes
    {nullptr, 0},
    {&PartMappings[2], 1}, // 8
    {&PartMappings[3], 1}, // 16
    {&PartMappings[4], 1}, // 32

    // PRs
    {&PartMappings[5], 1}, // 32

    // GPRs
    {&PartMappings[6], 1}, // 32
};

enum ValueMappingIdx { IRStartIdx = 1, PRStartIdx = 7, GPRStartIdx = 8 };

const RegisterBankInfo::ValueMapping *getValueMapping(unsigned BankID,
                                                      unsigned Size) {
  unsigned Idx;

  // Set the offset to the ValueMappingIdx based on the BankID.
  switch (BankID) {
  case Parasol::IRRegBankID:
    // Get the size offset based off of log2 of Size
    Idx = IRStartIdx + Log2_32_Ceil(Size);
    break;
  case Parasol::PRRegBankID:
    Idx = PRStartIdx;
    break;
  case Parasol::GPRRegBankID:
    Idx = GPRStartIdx;
    break;
  default:
    return &ValMappings[0];
  }

  return &ValMappings[Idx];
}

} // namespace Parasol
} // namespace llvm
