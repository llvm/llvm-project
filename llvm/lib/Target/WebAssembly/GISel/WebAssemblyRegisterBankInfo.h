//===- WebAssemblyRegisterBankInfo.h ----------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file declares the targeting of the RegisterBankInfo class for WASM.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_WEBASSEMBLY_WEBASSEMBLYREGISTERBANKINFO_H
#define LLVM_LIB_TARGET_WEBASSEMBLY_WEBASSEMBLYREGISTERBANKINFO_H

#include "WebAssemblyRegisterInfo.h"
#include "llvm/CodeGen/RegisterBankInfo.h"

#define GET_REGBANK_DECLARATIONS
#include "WebAssemblyGenRegisterBank.inc"

namespace llvm {

class TargetRegisterInfo;

class WebAssemblyGenRegisterBankInfo : public RegisterBankInfo {
#define GET_TARGET_REGBANK_CLASS
#include "WebAssemblyGenRegisterBank.inc"
};

/// This class provides the information for the target register banks.
class WebAssemblyRegisterBankInfo final
    : public WebAssemblyGenRegisterBankInfo {
public:
  WebAssemblyRegisterBankInfo(const TargetRegisterInfo &TRI);

  const InstructionMapping &
  getInstrMapping(const MachineInstr &MI) const override;

  /// Maximum recursion depth for hasFPConstraints.
  const unsigned MaxFPRSearchDepth = 2;

  /// \returns true if \p MI is a PHI that its def is used by
  /// any instruction that onlyUsesFP.
  bool isPHIWithFPConstraints(const MachineInstr &MI,
                              const MachineRegisterInfo &MRI,
                              const WebAssemblyRegisterInfo &TRI,
                              unsigned Depth = 0) const;

  /// \returns true if \p MI only uses and defines FPRs.
  bool hasFPConstraints(const MachineInstr &MI, const MachineRegisterInfo &MRI,
                        const WebAssemblyRegisterInfo &TRI,
                        unsigned Depth = 0) const;

  /// \returns true if \p MI only uses FPRs.
  bool onlyUsesFP(const MachineInstr &MI, const MachineRegisterInfo &MRI,
                  const WebAssemblyRegisterInfo &TRI, unsigned Depth = 0) const;

  /// \returns true if \p MI only defines FPRs.
  bool onlyDefinesFP(const MachineInstr &MI, const MachineRegisterInfo &MRI,
                     const WebAssemblyRegisterInfo &TRI, unsigned Depth = 0) const;

  /// \returns true if \p MI can take both fpr and gpr uses, but prefers fp.
  bool prefersFPUse(const MachineInstr &MI, const MachineRegisterInfo &MRI,
                    const WebAssemblyRegisterInfo &TRI, unsigned Depth = 0) const;
};
} // end namespace llvm
#endif
