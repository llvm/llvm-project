//===-- M88kISelDAGToDAG.cpp - A dag to dag inst selector for M88k --------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the M88k target.
//
//===----------------------------------------------------------------------===//

#include "M88kTargetMachine.h"
//#include "M88kISelLowering.h"
#include "M88k.h"
#include "llvm/Analysis/AliasAnalysis.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/KnownBits.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "m88k-isel"

namespace {

class M88kDAGToDAGISel : public SelectionDAGISel {
  const M88kSubtarget *Subtarget;

  const M88kTargetMachine &getTargetMachine() const {
    return static_cast<const M88kTargetMachine &>(TM);
  }

  //  const M88kInstrInfo *getInstrInfo() const {
  //    return Subtarget->getInstrInfo();
  //  }

public:
  M88kDAGToDAGISel(M88kTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

/*
  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<M88kSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }
*/
  // Override MachineFunctionPass.
  StringRef getPassName() const override {
    return "M88k DAG->DAG Pattern Instruction Selection";
  }

  // Override SelectionDAGISel.
  void Select(SDNode *Node) override;
/*
bool SelectInlineAsmMemoryOperand(const SDValue &Op, unsigned ConstraintID,
                                  std::vector<SDValue> &OutOps) override;
bool IsProfitableToFold(SDValue N, SDNode *U, SDNode *Root) const override;
void PreprocessISelDAG() override;
*/

// Include the pieces autogenerated from the target description.
#include "M88kGenDAGISel.inc"
};
} // end anonymous namespace

FunctionPass *llvm::createM88kISelDag(M88kTargetMachine &TM,
                                      CodeGenOpt::Level OptLevel) {
  return new M88kDAGToDAGISel(TM, OptLevel);
}

void M88kDAGToDAGISel::Select(SDNode *Node) {
  // Instruction Selection not handled by the auto-generated tablegen selection
  // should be handled here.

  // Select the default instruction.
  SelectCode(Node);
}
