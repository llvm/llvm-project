//==- M88kInstPrinter.h - Convert M88k MCInst to assembly --------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints a M88k MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_M88K_MCTARGETDESC_M88KINSTPRINTER_H
#define LLVM_LIB_TARGET_M88K_MCTARGETDESC_M88KINSTPRINTER_H

#include "llvm/MC/MCInstPrinter.h"
#include <cstdint>

namespace llvm {

class MCAsmInfo;
class MCOperand;

class M88kInstPrinter : public MCInstPrinter {
public:
  M88kInstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  // Automatically generated by tblgen.
  std::pair<const char *, uint64_t> getMnemonic(const MCInst *MI) override;
  void printInstruction(const MCInst *MI, uint64_t Address,
                        const MCSubtargetInfo &STI, raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo);

  // Print the given operand.
  void printOperand(const MCInst *MI, int OpNum, const MCSubtargetInfo &STI,
                    raw_ostream &O);
  static void printOperand(const MCOperand &MO, const MCAsmInfo *MAI,
                           raw_ostream &O);

  void printScaledRegister(const MCInst *MI, int OpNum,
                           const MCSubtargetInfo &STI, raw_ostream &O);
  void printU5ImmOperand(const MCInst *MI, int OpNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printU5ImmOOperand(const MCInst *MI, int OpNum,
                          const MCSubtargetInfo &STI, raw_ostream &O);
  void printU16ImmOperand(const MCInst *MI, int OpNum,
                          const MCSubtargetInfo &STI, raw_ostream &O);
  void printVec9Operand(const MCInst *MI, int OpNum, const MCSubtargetInfo &STI,
                        raw_ostream &O);
  void printBitFieldOperand(const MCInst *MI, int OpNum,
                            const MCSubtargetInfo &STI, raw_ostream &O);
  void printBFWidthOperand(const MCInst *MI, int OpNum,
                           const MCSubtargetInfo &STI, raw_ostream &O);
  void printBFOffsetOperand(const MCInst *MI, int OpNum,
                            const MCSubtargetInfo &STI, raw_ostream &O);
  void printPixelRotOperand(const MCInst *MI, int OpNum,
                            const MCSubtargetInfo &STI, raw_ostream &O);
  void printCCodeOperand(const MCInst *MI, int OpNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printPCRelOperand(const MCInst *MI, uint64_t Address, int OpNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);

  // Override MCInstPrinter.
  // void printRegName(raw_ostream &O, unsigned RegNo) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;
};

} // end namespace llvm

#endif // LLVM_LIB_TARGET_M88K_MCTARGETDESC_M88KINSTPRINTER_H
