//===- M88kGenRegisterBankInfo.def -------------------------------*- C++ -*-==//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file defines all the static objects used by M88kRegisterBankInfo.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

namespace llvm {
RegisterBankInfo::PartialMapping M88kGenRegisterBankInfo::PartMappings[]{
    /* StartIdx, Length, RegBank */
    // 0: FPR 32-bit value.
    {0, 32, M88k::GRRegBank},
    // 1: FPR 64-bit value.
    {0, 32, M88k::GRRegBank},
    // 2: FPR 80-bit value.
    {0, 32, M88k::XRRegBank},
    // 3: GPR 32-bit value.
    {0, 32, M88k::GRRegBank},
};

// ValueMappings.
RegisterBankInfo::ValueMapping M88kGenRegisterBankInfo::ValMappings[]{
    /* BreakDown, NumBreakDowns */
    // 0: invalid
    {nullptr, 0},
    // 3-operands instructions (all binary operations should end up with one of
    // those mapping).
    // 1: FPR 32-bit value.
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR32 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR32 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR32 - PMI_Min], 1},
    // 4: FPR 64-bit value.
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR64 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR64 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR64 - PMI_Min], 1},
    // 7: FPR 80-bit value.
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR80 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR80 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR80 - PMI_Min], 1},
    // 10: GPR 32-bit value.
    {&M88kGenRegisterBankInfo::PartMappings[PMI_GPR32 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_GPR32 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_GPR32 - PMI_Min], 1},
    // 13: GPR -> XPR copy.
    {&M88kGenRegisterBankInfo::PartMappings[PMI_GPR32 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR80 - PMI_Min], 1},
    // 15: XPR -> GPR copy.
    {&M88kGenRegisterBankInfo::PartMappings[PMI_FPR80 - PMI_Min], 1},
    {&M88kGenRegisterBankInfo::PartMappings[PMI_GPR32 - PMI_Min], 1},
};

// TODO Too simple!
const RegisterBankInfo::ValueMapping *
M88kGenRegisterBankInfo::getValueMapping(PartialMappingIdx RBIdx) {
  assert(RBIdx != PartialMappingIdx::PMI_None && "No mapping needed for that");

  unsigned ValMappingIdx = RBIdx - PMI_Min;

  return &ValMappings[1 + 3*ValMappingIdx];
}

M88kGenRegisterBankInfo::PartialMappingIdx
    M88kGenRegisterBankInfo::BankIDToCopyMapIdx[]{
        PMI_GPR32, // GRRegBank
        PMI_FPR80, // XRRegBank
    };


// TODO Too simple!
const RegisterBankInfo::ValueMapping *
M88kGenRegisterBankInfo::getCopyMapping(unsigned DstBankID,
                                           unsigned SrcBankID, unsigned Size) {
  assert(DstBankID < M88k::NumRegisterBanks && "Invalid bank ID");
  assert(SrcBankID < M88k::NumRegisterBanks && "Invalid bank ID");
  PartialMappingIdx DstRBIdx = BankIDToCopyMapIdx[DstBankID];
  PartialMappingIdx SrcRBIdx = BankIDToCopyMapIdx[SrcBankID];
  assert(DstRBIdx != PMI_None && "No such mapping");
  assert(SrcRBIdx != PMI_None && "No such mapping");

  if (DstRBIdx == SrcRBIdx)
    return getValueMapping(DstRBIdx);

  assert(Size <= 64 && "GPR cannot handle that size");
  if (DstRBIdx == M88k::GRRegBankID)
    return &ValMappings[13];
  return &ValMappings[15];
}

} // End llvm namespace.
