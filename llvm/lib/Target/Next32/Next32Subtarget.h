//===-- Next32Subtarget.h - Define Subtarget for the Next32 ---------------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Next32 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_Next32_Next32SUBTARGET_H
#define LLVM_LIB_TARGET_Next32_Next32SUBTARGET_H

#include "Next32FrameLowering.h"
#include "Next32ISelLowering.h"
#include "Next32InstrInfo.h"
#include "Next32SelectionDAGInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"

#define GET_SUBTARGETINFO_HEADER
#include "Next32GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class Next32Subtarget : public Next32GenSubtargetInfo {
  virtual void anchor();
  bool HasLongShift;
  bool HasLEA;
  bool HasPrefetch;
  bool HasAtomicFAddFSub;
  bool IsGen1;
  bool IsGen2;
  bool HasVectorInst;
  Next32InstrInfo InstrInfo;
  Next32FrameLowering FrameLowering;
  Next32TargetLowering TLInfo;
  Next32SelectionDAGInfo TSInfo;

private:
  void initializeEnvironment();
  void initSubtargetFeatures(StringRef CPU, StringRef FS);

public:
  // This constructor initializes the data members to match that
  // of the specified triple.
  Next32Subtarget(const Triple &TT, StringRef CPU, StringRef FS,
                  const TargetMachine &TM);

  Next32Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const Next32InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const Next32FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const Next32TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const Next32SelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }
  const TargetRegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  bool enablePostRAScheduler() const override { return false; }

  bool isXRaySupported() const override { return true; }
  bool useAA() const override { return true; }
  bool hasLongShift() const { return HasLongShift; }
  bool hasLEA() const { return HasLEA; }
  bool hasPrefetch() const { return HasPrefetch; }
  bool hasAtomicFAddFSub() const { return HasAtomicFAddFSub; }
  bool isGen1() const { return IsGen1; }
  bool isGen2() const { return IsGen2; }
  bool hasVectorInst() const { return HasVectorInst; }
  unsigned maxLoadStoreSizeBits() const { return isGen1() ? 128 : 512; }
};
} // namespace llvm

#endif
