; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: not llc --mtriple=loongarch32 < %s 2>&1 | FileCheck %s
; RUN: not llc --mtriple=loongarch64 < %s 2>&1 | FileCheck %s

declare void @llvm.loongarch.dbar(i32)
declare void @llvm.loongarch.ibar(i32)
declare void @llvm.loongarch.break(i32)
declare void @llvm.loongarch.syscall(i32)
declare i32 @llvm.loongarch.csrrd.w(i32 immarg)
declare i32 @llvm.loongarch.csrwr.w(i32, i32 immarg)
declare i32 @llvm.loongarch.csrxchg.w(i32, i32, i32 immarg)

define void @dbar_imm_out_of_hi_range() nounwind {
; CHECK: argument to 'llvm.loongarch.dbar' out of range
entry:
  call void @llvm.loongarch.dbar(i32 32769)
  ret void
}

define void @dbar_imm_out_of_lo_range() nounwind {
; CHECK: argument to 'llvm.loongarch.dbar' out of range
entry:
  call void @llvm.loongarch.dbar(i32 -1)
  ret void
}

define void @ibar_imm_out_of_hi_range() nounwind {
; CHECK: argument to 'llvm.loongarch.ibar' out of range
entry:
  call void @llvm.loongarch.ibar(i32 32769)
  ret void
}

define void @ibar_imm_out_of_lo_range() nounwind {
; CHECK: argument to 'llvm.loongarch.ibar' out of range
entry:
  call void @llvm.loongarch.ibar(i32 -1)
  ret void
}

define void @break_imm_out_of_hi_range() nounwind {
; CHECK: argument to 'llvm.loongarch.break' out of range
entry:
  call void @llvm.loongarch.break(i32 32769)
  ret void
}

define void @break_imm_out_of_lo_range() nounwind {
; CHECK: argument to 'llvm.loongarch.break' out of range
entry:
  call void @llvm.loongarch.break(i32 -1)
  ret void
}

define void @syscall_imm_out_of_hi_range() nounwind {
; CHECK: argument to 'llvm.loongarch.syscall' out of range
entry:
  call void @llvm.loongarch.syscall(i32 32769)
  ret void
}

define void @syscall_imm_out_of_lo_range() nounwind {
; CHECK: argument to 'llvm.loongarch.syscall' out of range
entry:
  call void @llvm.loongarch.syscall(i32 -1)
  ret void
}

define i32 @csrrd_w_imm_out_of_hi_range() nounwind {
; CHECK: argument to 'llvm.loongarch.csrrd.w' out of range
entry:
  %0 = call i32 @llvm.loongarch.csrrd.w(i32 16384)
  ret i32 %0
}

define i32 @csrrd_w_imm_out_of_lo_range() nounwind {
; CHECK: argument to 'llvm.loongarch.csrrd.w' out of range
entry:
  %0 = call i32 @llvm.loongarch.csrrd.w(i32 -1)
  ret i32 %0
}

define i32 @csrwr_w_imm_out_of_hi_range(i32 %a) nounwind {
; CHECK: argument to 'llvm.loongarch.csrwr.w' out of range
entry:
  %0 = call i32 @llvm.loongarch.csrwr.w(i32 %a, i32 16384)
  ret i32 %0
}

define i32 @csrwr_w_imm_out_of_lo_range(i32 %a) nounwind {
; CHECK: argument to 'llvm.loongarch.csrwr.w' out of range
entry:
  %0 = call i32 @llvm.loongarch.csrwr.w(i32 %a, i32 -1)
  ret i32 %0
}

define i32 @csrxchg_w_imm_out_of_hi_range(i32 %a, i32 %b) nounwind {
; CHECK: argument to 'llvm.loongarch.csrxchg.w' out of range
entry:
  %0 = call i32 @llvm.loongarch.csrxchg.w(i32 %a, i32 %b, i32 16384)
  ret i32 %0
}

define i32 @csrxchg_w_imm_out_of_lo_range(i32 %a, i32 %b) nounwind {
; CHECK: argument to 'llvm.loongarch.csrxchg.w' out of range
entry:
  %0 = call i32 @llvm.loongarch.csrxchg.w(i32 %a, i32 %b, i32 -1)
  ret i32 %0
}
