; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 --mattr=+lsx < %s | FileCheck %s

define void @bswap_v8i16(ptr %src, ptr %dst) nounwind {
; CHECK-LABEL: bswap_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    vsrli.h $vr1, $vr0, 8
; CHECK-NEXT:    vslli.h $vr0, $vr0, 8
; CHECK-NEXT:    vor.v $vr0, $vr0, $vr1
; CHECK-NEXT:    vst $vr0, $a1, 0
; CHECK-NEXT:    ret
  %v = load <8 x i16>, ptr %src
  %res = call <8 x i16> @llvm.bswap.v8i16(<8 x i16> %v)
  store <8 x i16> %res, ptr %dst
  ret void
}

define void @bswap_v4i32(ptr %src, ptr %dst) nounwind {
; CHECK-LABEL: bswap_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    lu12i.w $a0, 15
; CHECK-NEXT:    ori $a0, $a0, 3840
; CHECK-NEXT:    vreplgr2vr.w $vr1, $a0
; CHECK-NEXT:    vsrli.w $vr2, $vr0, 8
; CHECK-NEXT:    vand.v $vr2, $vr2, $vr1
; CHECK-NEXT:    vsrli.w $vr3, $vr0, 24
; CHECK-NEXT:    vor.v $vr2, $vr2, $vr3
; CHECK-NEXT:    vand.v $vr1, $vr0, $vr1
; CHECK-NEXT:    vslli.w $vr1, $vr1, 8
; CHECK-NEXT:    vslli.w $vr0, $vr0, 24
; CHECK-NEXT:    vor.v $vr0, $vr0, $vr1
; CHECK-NEXT:    vor.v $vr0, $vr0, $vr2
; CHECK-NEXT:    vst $vr0, $a1, 0
; CHECK-NEXT:    ret
  %v = load <4 x i32>, ptr %src
  %res = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %v)
  store <4 x i32> %res, ptr %dst
  ret void
}

define void @bswap_v2i64(ptr %src, ptr %dst) nounwind {
; CHECK-LABEL: bswap_v2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vld $vr0, $a0, 0
; CHECK-NEXT:    lu12i.w $a0, 4080
; CHECK-NEXT:    vreplgr2vr.d $vr1, $a0
; CHECK-NEXT:    vsrli.d $vr2, $vr0, 24
; CHECK-NEXT:    vand.v $vr2, $vr2, $vr1
; CHECK-NEXT:    lu12i.w $a0, -4096
; CHECK-NEXT:    lu32i.d $a0, 0
; CHECK-NEXT:    vreplgr2vr.d $vr3, $a0
; CHECK-NEXT:    vsrli.d $vr4, $vr0, 8
; CHECK-NEXT:    vand.v $vr4, $vr4, $vr3
; CHECK-NEXT:    vor.v $vr2, $vr4, $vr2
; CHECK-NEXT:    lu12i.w $a0, 15
; CHECK-NEXT:    ori $a0, $a0, 3840
; CHECK-NEXT:    vreplgr2vr.d $vr4, $a0
; CHECK-NEXT:    vsrli.d $vr5, $vr0, 40
; CHECK-NEXT:    vand.v $vr5, $vr5, $vr4
; CHECK-NEXT:    vsrli.d $vr6, $vr0, 56
; CHECK-NEXT:    vor.v $vr5, $vr5, $vr6
; CHECK-NEXT:    vor.v $vr2, $vr2, $vr5
; CHECK-NEXT:    vand.v $vr1, $vr0, $vr1
; CHECK-NEXT:    vslli.d $vr1, $vr1, 24
; CHECK-NEXT:    vand.v $vr3, $vr0, $vr3
; CHECK-NEXT:    vslli.d $vr3, $vr3, 8
; CHECK-NEXT:    vor.v $vr1, $vr1, $vr3
; CHECK-NEXT:    vand.v $vr3, $vr0, $vr4
; CHECK-NEXT:    vslli.d $vr3, $vr3, 40
; CHECK-NEXT:    vslli.d $vr0, $vr0, 56
; CHECK-NEXT:    vor.v $vr0, $vr0, $vr3
; CHECK-NEXT:    vor.v $vr0, $vr0, $vr1
; CHECK-NEXT:    vor.v $vr0, $vr0, $vr2
; CHECK-NEXT:    vst $vr0, $a1, 0
; CHECK-NEXT:    ret
  %v = load <2 x i64>, ptr %src
  %res = call <2 x i64> @llvm.bswap.v2i64(<2 x i64> %v)
  store <2 x i64> %res, ptr %dst
  ret void
}

declare <8 x i16> @llvm.bswap.v8i16(<8 x i16>)
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>)
declare <2 x i64> @llvm.bswap.v2i64(<2 x i64>)
