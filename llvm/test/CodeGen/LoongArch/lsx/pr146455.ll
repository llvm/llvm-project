; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 -mattr=+d -mattr=+lsx < %s | FileCheck %s

define void @foo(ptr %0, ptr %1, ptr %2, ptr %3, ptr %4, ptr %5, ptr %6, ptr %7, ptr %8, ptr %9, ptr %10, float %11, ptr %_QMmodule_ra_rrtmEabsa12, <8 x float> %12, <8 x float> %13, <8 x float> %14) {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %.lr.ph.preheader
; CHECK-NEXT:    addi.d $sp, $sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    fst.d $fs0, $sp, 8 # 8-byte Folded Spill
; CHECK-NEXT:    fst.d $fs1, $sp, 0 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 56, -8
; CHECK-NEXT:    .cfi_offset 57, -16
; CHECK-NEXT:    ld.d $t0, $sp, 40
; CHECK-NEXT:    ld.d $t1, $sp, 32
; CHECK-NEXT:    ld.d $t2, $sp, 24
; CHECK-NEXT:    ld.d $t3, $sp, 16
; CHECK-NEXT:    movgr2fr.w $fa2, $zero
; CHECK-NEXT:    fmul.s $fa0, $fa0, $fa2
; CHECK-NEXT:    lu12i.w $t4, 523264
; CHECK-NEXT:    vreplgr2vr.w $vr3, $t4
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_0)
; CHECK-NEXT:    vld $vr4, $t4, %pc_lo12(.LCPI0_0)
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_1)
; CHECK-NEXT:    vld $vr7, $t4, %pc_lo12(.LCPI0_1)
; CHECK-NEXT:    lu12i.w $t4, 260096
; CHECK-NEXT:    vreplgr2vr.w $vr8, $t4
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_2)
; CHECK-NEXT:    vld $vr9, $t4, %pc_lo12(.LCPI0_2)
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_3)
; CHECK-NEXT:    vld $vr10, $t4, %pc_lo12(.LCPI0_3)
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_4)
; CHECK-NEXT:    vld $vr11, $t4, %pc_lo12(.LCPI0_4)
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_6)
; CHECK-NEXT:    vld $vr12, $t4, %pc_lo12(.LCPI0_6)
; CHECK-NEXT:    pcalau12i $t4, %pc_hi20(.LCPI0_5)
; CHECK-NEXT:    vld $vr13, $t4, %pc_lo12(.LCPI0_5)
; CHECK-NEXT:    vrepli.b $vr14, 0
; CHECK-NEXT:    vpackev.w $vr6, $vr8, $vr6
; CHECK-NEXT:    vshuf.w $vr12, $vr6, $vr14
; CHECK-NEXT:    .p2align 4, , 16
; CHECK-NEXT:  .LBB0_1: # %.lr.ph
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.d $t4, $t1, 0
; CHECK-NEXT:    ld.d $t5, $a6, 0
; CHECK-NEXT:    ld.d $t6, $t3, 0
; CHECK-NEXT:    vinsgr2vr.d $vr6, $t4, 0
; CHECK-NEXT:    vinsgr2vr.d $vr15, $t5, 0
; CHECK-NEXT:    vinsgr2vr.d $vr16, $t6, 0
; CHECK-NEXT:    ld.d $t4, $t2, 0
; CHECK-NEXT:    ld.d $t5, $a5, 0
; CHECK-NEXT:    ld.d $t6, $a2, 0
; CHECK-NEXT:    ld.d $t7, $a7, 0
; CHECK-NEXT:    vinsgr2vr.d $vr17, $t4, 0
; CHECK-NEXT:    vinsgr2vr.d $vr18, $t5, 0
; CHECK-NEXT:    vinsgr2vr.d $vr19, $t6, 0
; CHECK-NEXT:    vinsgr2vr.d $vr20, $t7, 0
; CHECK-NEXT:    ld.d $t4, $t0, 0
; CHECK-NEXT:    ld.d $t5, $a3, 0
; CHECK-NEXT:    ld.d $t6, $a4, 0
; CHECK-NEXT:    ld.d $t7, $a0, 0
; CHECK-NEXT:    vinsgr2vr.d $vr21, $t4, 0
; CHECK-NEXT:    vinsgr2vr.d $vr22, $t5, 0
; CHECK-NEXT:    vinsgr2vr.d $vr23, $t6, 0
; CHECK-NEXT:    vinsgr2vr.d $vr24, $t7, 0
; CHECK-NEXT:    vori.b $vr25, $vr4, 0
; CHECK-NEXT:    vshuf.w $vr25, $vr17, $vr6
; CHECK-NEXT:    vfadd.s $vr6, $vr25, $vr3
; CHECK-NEXT:    vori.b $vr17, $vr7, 0
; CHECK-NEXT:    vshuf.w $vr17, $vr2, $vr0
; CHECK-NEXT:    vfmul.s $vr17, $vr17, $vr1
; CHECK-NEXT:    vfadd.s $vr6, $vr6, $vr17
; CHECK-NEXT:    vfadd.s $vr6, $vr6, $vr14
; CHECK-NEXT:    vpackod.w $vr15, $vr18, $vr15
; CHECK-NEXT:    vori.b $vr17, $vr9, 0
; CHECK-NEXT:    vshuf.w $vr17, $vr15, $vr14
; CHECK-NEXT:    vfadd.s $vr6, $vr6, $vr17
; CHECK-NEXT:    vpackev.w $vr15, $vr19, $vr16
; CHECK-NEXT:    vpackev.d $vr15, $vr21, $vr15
; CHECK-NEXT:    vori.b $vr16, $vr10, 0
; CHECK-NEXT:    vshuf.w $vr16, $vr15, $vr14
; CHECK-NEXT:    vfadd.s $vr6, $vr6, $vr16
; CHECK-NEXT:    vori.b $vr15, $vr4, 0
; CHECK-NEXT:    vshuf.w $vr15, $vr22, $vr14
; CHECK-NEXT:    vori.b $vr16, $vr11, 0
; CHECK-NEXT:    vshuf.w $vr16, $vr24, $vr15
; CHECK-NEXT:    vfadd.s $vr6, $vr6, $vr14
; CHECK-NEXT:    vfadd.s $vr15, $vr16, $vr3
; CHECK-NEXT:    vpackod.w $vr16, $vr20, $vr14
; CHECK-NEXT:    vori.b $vr17, $vr9, 0
; CHECK-NEXT:    vshuf.w $vr17, $vr16, $vr8
; CHECK-NEXT:    vori.b $vr16, $vr13, 0
; CHECK-NEXT:    vshuf.w $vr16, $vr17, $vr14
; CHECK-NEXT:    vori.b $vr17, $vr4, 0
; CHECK-NEXT:    vshuf.w $vr17, $vr23, $vr14
; CHECK-NEXT:    vori.b $vr18, $vr9, 0
; CHECK-NEXT:    vshuf.w $vr18, $vr17, $vr8
; CHECK-NEXT:    vfsub.s $vr17, $vr18, $vr12
; CHECK-NEXT:    vfsub.s $vr16, $vr16, $vr5
; CHECK-NEXT:    vfadd.s $vr6, $vr6, $vr16
; CHECK-NEXT:    vfadd.s $vr15, $vr15, $vr17
; CHECK-NEXT:    vst $vr15, $a1, 16
; CHECK-NEXT:    vst $vr6, $a1, 0
; CHECK-NEXT:    b .LBB0_1
.lr.ph.preheader:
  br label %.lr.ph

.lr.ph:                                           ; preds = %.lr.ph, %.lr.ph.preheader
  %15 = fmul float 0.000000e+00, %11
  %16 = load <2 x float>, ptr %10, align 4
  %17 = load <2 x float>, ptr %6, align 4
  %18 = load <2 x float>, ptr %8, align 4
  %19 = load <2 x float>, ptr %9, align 4
  %20 = load <2 x float>, ptr %5, align 4
  %21 = load <2 x float>, ptr %2, align 4
  %22 = load <2 x float>, ptr %7, align 4
  %23 = load <2 x float>, ptr %_QMmodule_ra_rrtmEabsa12, align 4
  %24 = load <2 x float>, ptr %3, align 4
  %25 = load <2 x float>, ptr %4, align 4
  %26 = load <2 x float>, ptr %0, align 4
  %27 = shufflevector <8 x float> splat (float 0x7FF8000000000000), <8 x float> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>
  %28 = shufflevector <8 x float> %27, <8 x float> %12, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  %29 = fmul <8 x float> zeroinitializer, %28
  %30 = shufflevector <2 x float> %16, <2 x float> %19, <8 x i32> <i32 0, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %31 = fadd <8 x float> %29, %30
  %32 = insertelement <8 x float> zeroinitializer, float %15, i64 0
  %33 = shufflevector <8 x float> %12, <8 x float> %13, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %34 = shufflevector <8 x float> %33, <8 x float> splat (float 1.000000e+00), <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %35 = shufflevector <8 x float> %34, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  %36 = fmul <8 x float> %32, %35
  %37 = fadd <8 x float> %31, %36
  %38 = shufflevector <8 x float> zeroinitializer, <8 x float> splat (float 0x7FF8000000000000), <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 9>
  %39 = fadd <8 x float> %37, %38
  %40 = shufflevector <2 x float> %17, <2 x float> %20, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %41 = shufflevector <8 x float> %40, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %42 = fadd <8 x float> %39, %41
  %43 = shufflevector <2 x float> %18, <2 x float> %21, <8 x i32> <i32 0, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %44 = shufflevector <2 x float> %23, <2 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %45 = shufflevector <8 x float> %43, <8 x float> %44, <8 x i32> <i32 0, i32 1, i32 8, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %46 = shufflevector <8 x float> %45, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 8, i32 poison, i32 poison, i32 poison, i32 poison>
  %47 = shufflevector <8 x float> %46, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 poison, i32 poison, i32 poison>
  %48 = shufflevector <2 x float> %24, <2 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %49 = shufflevector <8 x float> %47, <8 x float> splat (float 1.000000e+00), <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %50 = shufflevector <2 x float> %26, <2 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %51 = shufflevector <8 x float> %49, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 poison>
  %52 = shufflevector <8 x float> %51, <8 x float> splat (float 0x7FF8000000000000), <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  %53 = fadd <8 x float> %42, %52
  %54 = shufflevector <8 x float> zeroinitializer, <8 x float> %48, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>
  %55 = shufflevector <8 x float> %54, <8 x float> %50, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>
  %56 = fadd <8 x float> %53, %55
  %57 = shufflevector <2 x float> zeroinitializer, <2 x float> %22, <8 x i32> <i32 1, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %58 = shufflevector <8 x float> %57, <8 x float> splat (float 1.000000e+00), <8 x i32> <i32 0, i32 1, i32 9, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %59 = shufflevector <8 x float> %58, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 9, i32 poison, i32 poison, i32 poison, i32 poison>
  %60 = shufflevector <8 x float> %59, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 9, i32 poison, i32 poison, i32 poison>
  %61 = shufflevector <2 x float> %25, <2 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %62 = shufflevector <8 x float> %60, <8 x float> %61, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 9, i32 poison, i32 poison>
  %63 = shufflevector <8 x float> %62, <8 x float> splat (float 1.000000e+00), <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 9, i32 poison>
  %64 = shufflevector <8 x float> %14, <8 x float> splat (float 1.000000e+00), <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 8, i32 poison, i32 poison>
  %65 = shufflevector <8 x float> %64, <8 x float> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 8>
  %66 = fsub <8 x float> %63, %65
  %67 = fadd <8 x float> %56, %66
  store <8 x float> %67, ptr %1, align 4
  br label %.lr.ph
}
