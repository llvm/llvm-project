; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc --mtriple=loongarch32 --mattr=+32s,+lsx < %s | FileCheck %s
; RUN: llc --mtriple=loongarch64 --mattr=+lsx < %s | FileCheck %s

define void @shufflevector_halves_b(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_halves_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vreplvei.w $vr1, $vr0, 2
; CHECK-NEXT:    vpackev.b $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 0, i32 8, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_halves_b_1(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_halves_b_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.h $vr0, $vr0, 177
; CHECK-NEXT:    vreplvei.w $vr1, $vr0, 2
; CHECK-NEXT:    vpackod.b $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 3, i32 11, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_halves_b_2(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_halves_b_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.w $vr0, $vr0, 177
; CHECK-NEXT:    vreplvei.w $vr1, $vr0, 2
; CHECK-NEXT:    vpackod.b $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 5, i32 13, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_halves_b_3(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_halves_b_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.h $vr0, $vr0, 27
; CHECK-NEXT:    vreplvei.w $vr1, $vr0, 2
; CHECK-NEXT:    vpackev.b $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 6, i32 14, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_halves_h(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_halves_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vreplvei.w $vr1, $vr0, 2
; CHECK-NEXT:    vpackev.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <8 x i16>, ptr %a
  %vb = load <8 x i16>, ptr %b
  %c = shufflevector <8 x i16> %va, <8 x i16> poison, <8 x i32> <i32 0, i32 4, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  store <8 x i16> %c, ptr %res
  ret void
}

define void @shufflevector_halves_h_1(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_halves_h_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.w $vr0, $vr0, 177
; CHECK-NEXT:    vreplvei.w $vr1, $vr0, 2
; CHECK-NEXT:    vpackod.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <8 x i16>, ptr %a
  %vb = load <8 x i16>, ptr %b
  %c = shufflevector <8 x i16> %va, <8 x i16> poison, <8 x i32> <i32 3, i32 7, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8>
  store <8 x i16> %c, ptr %res
  ret void
}

define void @shufflevector_quarters_b(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_quarters_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.h $vr0, $vr0, 216
; CHECK-NEXT:    vshuf4i.b $vr0, $vr0, 216
; CHECK-NEXT:    vreplvei.h $vr1, $vr0, 4
; CHECK-NEXT:    vpackev.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_quarters_b_1(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_quarters_b_1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.h $vr0, $vr0, 216
; CHECK-NEXT:    vshuf4i.b $vr0, $vr0, 141
; CHECK-NEXT:    vreplvei.h $vr1, $vr0, 4
; CHECK-NEXT:    vpackod.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 1, i32 5, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_quarters_b_2(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_quarters_b_2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.h $vr0, $vr0, 141
; CHECK-NEXT:    vshuf4i.b $vr0, $vr0, 216
; CHECK-NEXT:    vreplvei.h $vr1, $vr0, 4
; CHECK-NEXT:    vpackev.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 16, i32 6, i32 10, i32 14, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}

define void @shufflevector_quarters_b_3(ptr %res, ptr %a, ptr %b) nounwind {
; CHECK-LABEL: shufflevector_quarters_b_3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.h $vr0, $vr0, 141
; CHECK-NEXT:    vshuf4i.b $vr0, $vr0, 141
; CHECK-NEXT:    vreplvei.h $vr1, $vr0, 4
; CHECK-NEXT:    vpackod.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %va = load <16 x i8>, ptr %a
  %vb = load <16 x i8>, ptr %b
  %c = shufflevector <16 x i8> %va, <16 x i8> poison, <16 x i32> <i32 3, i32 7, i32 11, i32 15, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  store <16 x i8> %c, ptr %res
  ret void
}
