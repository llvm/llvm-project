; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc --mtriple=loongarch32 --mattr=+32s,+lsx < %s | FileCheck %s --check-prefixes=CHECK,LA32
; RUN: llc --mtriple=loongarch64 --mattr=+lsx < %s | FileCheck %s --check-prefixes=CHECK,LA64

;; fptrunc
define void @fptrunc_v1f64_to_v1f32(ptr %res, ptr %a0) nounwind {
; CHECK-LABEL: fptrunc_v1f64_to_v1f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    fld.d $fa0, $a1, 0
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    fst.s $fa0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v0 = load <1 x double>, ptr %a0
  %trunc = fptrunc <1 x double> %v0 to <1 x float>
  store <1 x float> %trunc, ptr %res
  ret void
}

define void @fptrunc_v2f64_to_v2f32(ptr %res, ptr %a0) nounwind {
; LA32-LABEL: fptrunc_v2f64_to_v2f32:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    vld $vr0, $a1, 0
; LA32-NEXT:    vreplvei.d $vr1, $vr0, 0
; LA32-NEXT:    fcvt.s.d $fa1, $fa1
; LA32-NEXT:    vreplvei.d $vr0, $vr0, 1
; LA32-NEXT:    fcvt.s.d $fa0, $fa0
; LA32-NEXT:    fst.s $fa0, $a0, 4
; LA32-NEXT:    fst.s $fa1, $a0, 0
; LA32-NEXT:    ret
;
; LA64-LABEL: fptrunc_v2f64_to_v2f32:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    vld $vr0, $a1, 0
; LA64-NEXT:    vreplvei.d $vr1, $vr0, 1
; LA64-NEXT:    fcvt.s.d $fa1, $fa1
; LA64-NEXT:    vreplvei.d $vr0, $vr0, 0
; LA64-NEXT:    fcvt.s.d $fa0, $fa0
; LA64-NEXT:    vextrins.w $vr0, $vr1, 16
; LA64-NEXT:    vstelm.d $vr0, $a0, 0, 0
; LA64-NEXT:    ret
entry:
  %v0 = load <2 x double>, ptr %a0
  %trunc = fptrunc <2 x double> %v0 to <2 x float>
  store <2 x float> %trunc, ptr %res
  ret void
}

define void @fptrunc_v4f64_to_v4f32(ptr %res, ptr %a0) nounwind {
; CHECK-LABEL: fptrunc_v4f64_to_v4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vld $vr1, $a1, 16
; CHECK-NEXT:    vreplvei.d $vr2, $vr0, 1
; CHECK-NEXT:    fcvt.s.d $fa2, $fa2
; CHECK-NEXT:    vreplvei.d $vr0, $vr0, 0
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    vextrins.w $vr0, $vr2, 16
; CHECK-NEXT:    vreplvei.d $vr2, $vr1, 0
; CHECK-NEXT:    fcvt.s.d $fa2, $fa2
; CHECK-NEXT:    vextrins.w $vr0, $vr2, 32
; CHECK-NEXT:    vreplvei.d $vr1, $vr1, 1
; CHECK-NEXT:    fcvt.s.d $fa1, $fa1
; CHECK-NEXT:    vextrins.w $vr0, $vr1, 48
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v0 = load <4 x double>, ptr %a0
  %trunc = fptrunc <4 x double> %v0 to <4 x float>
  store <4 x float> %trunc, ptr %res
  ret void
}
