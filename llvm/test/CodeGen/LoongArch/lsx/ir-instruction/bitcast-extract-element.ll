; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch32 --mattr=+32s,+lsx < %s | FileCheck %s --check-prefix=LA32
; RUN: llc --mtriple=loongarch64 --mattr=+lsx < %s | FileCheck %s --check-prefix=LA64

define i32 @bitcast_extract_v4f32(<4 x float> %a) nounwind {
; LA32-LABEL: bitcast_extract_v4f32:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    vreplvei.w $vr0, $vr0, 3
; LA32-NEXT:    movfr2gr.s $a0, $fa0
; LA32-NEXT:    ret
;
; LA64-LABEL: bitcast_extract_v4f32:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    vpickve2gr.w $a0, $vr0, 3
; LA64-NEXT:    ret
entry:
  %b = extractelement <4 x float> %a, i32 3
  %c = bitcast float %b to i32
  ret i32 %c
}

define i64 @bitcast_extract_v2f64(<2 x double> %a) nounwind {
; LA32-LABEL: bitcast_extract_v2f64:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    vreplvei.d $vr0, $vr0, 1
; LA32-NEXT:    movfr2gr.s $a0, $fa0
; LA32-NEXT:    movfrh2gr.s $a1, $fa0
; LA32-NEXT:    ret
;
; LA64-LABEL: bitcast_extract_v2f64:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    vpickve2gr.d $a0, $vr0, 1
; LA64-NEXT:    ret
entry:
  %b = extractelement <2 x double> %a, i32 1
  %c = bitcast double %b to i64
  ret i64 %c
}
