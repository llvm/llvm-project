; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 --mattr=+lsx < %s | FileCheck %s

declare <16 x i8> @llvm.loongarch.lsx.vreplgr2vr.b(i32)

define <16 x i8> @lsx_vreplgr2vr_b(i32 %a) nounwind {
; CHECK-LABEL: lsx_vreplgr2vr_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vreplgr2vr.b $vr0, $a0
; CHECK-NEXT:    ret
entry:
  %res = call <16 x i8> @llvm.loongarch.lsx.vreplgr2vr.b(i32 %a)
  ret <16 x i8> %res
}

declare <8 x i16> @llvm.loongarch.lsx.vreplgr2vr.h(i32)

define <8 x i16> @lsx_vreplgr2vr_h(i32 %a) nounwind {
; CHECK-LABEL: lsx_vreplgr2vr_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vreplgr2vr.h $vr0, $a0
; CHECK-NEXT:    ret
entry:
  %res = call <8 x i16> @llvm.loongarch.lsx.vreplgr2vr.h(i32 %a)
  ret <8 x i16> %res
}

declare <4 x i32> @llvm.loongarch.lsx.vreplgr2vr.w(i32)

define <4 x i32> @lsx_vreplgr2vr_w(i32 %a) nounwind {
; CHECK-LABEL: lsx_vreplgr2vr_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vreplgr2vr.w $vr0, $a0
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i32> @llvm.loongarch.lsx.vreplgr2vr.w(i32 %a)
  ret <4 x i32> %res
}

declare <2 x i64> @llvm.loongarch.lsx.vreplgr2vr.d(i64)

define <2 x i64> @lsx_vreplgr2vr_d(i64 %a) nounwind {
; CHECK-LABEL: lsx_vreplgr2vr_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vreplgr2vr.d $vr0, $a0
; CHECK-NEXT:    ret
entry:
  %res = call <2 x i64> @llvm.loongarch.lsx.vreplgr2vr.d(i64 %a)
  ret <2 x i64> %res
}
