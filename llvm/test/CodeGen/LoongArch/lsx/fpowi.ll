; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 --mattr=+lsx < %s | FileCheck %s

declare <4 x float> @llvm.powi.v4f32.i32(<4 x float>, i32)

define <4 x float> @powi_v4f32(<4 x float> %va, i32 %b) nounwind {
; CHECK-LABEL: powi_v4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.d $sp, $sp, -48
; CHECK-NEXT:    st.d $ra, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $fp, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    vst $vr0, $sp, 0 # 16-byte Folded Spill
; CHECK-NEXT:    addi.w $fp, $a0, 0
; CHECK-NEXT:    vreplvei.w $vr0, $vr0, 0
; CHECK-NEXT:    # kill: def $f0 killed $f0 killed $vr0
; CHECK-NEXT:    move $a0, $fp
; CHECK-NEXT:    bl %plt(__powisf2)
; CHECK-NEXT:    movfr2gr.s $a0, $fa0
; CHECK-NEXT:    vinsgr2vr.w $vr0, $a0, 0
; CHECK-NEXT:    vst $vr0, $sp, 16 # 16-byte Folded Spill
; CHECK-NEXT:    vld $vr0, $sp, 0 # 16-byte Folded Reload
; CHECK-NEXT:    vreplvei.w $vr0, $vr0, 1
; CHECK-NEXT:    # kill: def $f0 killed $f0 killed $vr0
; CHECK-NEXT:    move $a0, $fp
; CHECK-NEXT:    bl %plt(__powisf2)
; CHECK-NEXT:    movfr2gr.s $a0, $fa0
; CHECK-NEXT:    vld $vr0, $sp, 16 # 16-byte Folded Reload
; CHECK-NEXT:    vinsgr2vr.w $vr0, $a0, 1
; CHECK-NEXT:    vst $vr0, $sp, 16 # 16-byte Folded Spill
; CHECK-NEXT:    vld $vr0, $sp, 0 # 16-byte Folded Reload
; CHECK-NEXT:    vreplvei.w $vr0, $vr0, 2
; CHECK-NEXT:    # kill: def $f0 killed $f0 killed $vr0
; CHECK-NEXT:    move $a0, $fp
; CHECK-NEXT:    bl %plt(__powisf2)
; CHECK-NEXT:    movfr2gr.s $a0, $fa0
; CHECK-NEXT:    vld $vr0, $sp, 16 # 16-byte Folded Reload
; CHECK-NEXT:    vinsgr2vr.w $vr0, $a0, 2
; CHECK-NEXT:    vst $vr0, $sp, 16 # 16-byte Folded Spill
; CHECK-NEXT:    vld $vr0, $sp, 0 # 16-byte Folded Reload
; CHECK-NEXT:    vreplvei.w $vr0, $vr0, 3
; CHECK-NEXT:    # kill: def $f0 killed $f0 killed $vr0
; CHECK-NEXT:    move $a0, $fp
; CHECK-NEXT:    bl %plt(__powisf2)
; CHECK-NEXT:    movfr2gr.s $a0, $fa0
; CHECK-NEXT:    vld $vr0, $sp, 16 # 16-byte Folded Reload
; CHECK-NEXT:    vinsgr2vr.w $vr0, $a0, 3
; CHECK-NEXT:    ld.d $fp, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 48
; CHECK-NEXT:    ret
entry:
  %res = call <4 x float> @llvm.powi.v4f32.i32(<4 x float> %va, i32 %b)
  ret <4 x float> %res
}

declare <2 x double> @llvm.powi.v2f64.i32(<2 x double>, i32)

define <2 x double> @powi_v2f64(<2 x double> %va, i32 %b) nounwind {
; CHECK-LABEL: powi_v2f64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.d $sp, $sp, -48
; CHECK-NEXT:    st.d $ra, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $fp, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    vst $vr0, $sp, 0 # 16-byte Folded Spill
; CHECK-NEXT:    addi.w $fp, $a0, 0
; CHECK-NEXT:    vreplvei.d $vr0, $vr0, 0
; CHECK-NEXT:    # kill: def $f0_64 killed $f0_64 killed $vr0
; CHECK-NEXT:    move $a0, $fp
; CHECK-NEXT:    bl %plt(__powidf2)
; CHECK-NEXT:    movfr2gr.d $a0, $fa0
; CHECK-NEXT:    vinsgr2vr.d $vr0, $a0, 0
; CHECK-NEXT:    vst $vr0, $sp, 16 # 16-byte Folded Spill
; CHECK-NEXT:    vld $vr0, $sp, 0 # 16-byte Folded Reload
; CHECK-NEXT:    vreplvei.d $vr0, $vr0, 1
; CHECK-NEXT:    # kill: def $f0_64 killed $f0_64 killed $vr0
; CHECK-NEXT:    move $a0, $fp
; CHECK-NEXT:    bl %plt(__powidf2)
; CHECK-NEXT:    movfr2gr.d $a0, $fa0
; CHECK-NEXT:    vld $vr0, $sp, 16 # 16-byte Folded Reload
; CHECK-NEXT:    vinsgr2vr.d $vr0, $a0, 1
; CHECK-NEXT:    ld.d $fp, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 48
; CHECK-NEXT:    ret
entry:
  %res = call <2 x double> @llvm.powi.v2f64.i32(<2 x double> %va, i32 %b)
  ret <2 x double> %res
}
