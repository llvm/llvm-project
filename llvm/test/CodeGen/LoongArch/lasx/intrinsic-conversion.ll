; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch32 --mattr=+32s,+lasx < %s | FileCheck %s
; RUN: llc --mtriple=loongarch64 --mattr=+lasx < %s | FileCheck %s

declare <8 x float> @llvm.loongarch.lasx.cast.128.s(<4 x float>)

define <8 x float> @lasx_cast_128_s(<4 x float> %va) {
; CHECK-LABEL: lasx_cast_128_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 def $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <8 x float> @llvm.loongarch.lasx.cast.128.s(<4 x float> %va)
  ret <8 x float> %res
}

declare <4 x double> @llvm.loongarch.lasx.cast.128.d(<2 x double>)

define <4 x double> @lasx_cast_128_d(<2 x double> %va) {
; CHECK-LABEL: lasx_cast_128_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 def $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <4 x double> @llvm.loongarch.lasx.cast.128.d(<2 x double> %va)
  ret <4 x double> %res
}

declare <4 x i64> @llvm.loongarch.lasx.cast.128(<2 x i64>)

define <4 x i64> @lasx_cast_128(<2 x i64> %va) {
; CHECK-LABEL: lasx_cast_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 def $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i64> @llvm.loongarch.lasx.cast.128(<2 x i64> %va)
  ret <4 x i64> %res
}

declare <8 x float> @llvm.loongarch.lasx.concat.128.s(<4 x float>, <4 x float>)

define <8 x float> @lasx_concat_128_s(<4 x float> %va, <4 x float> %vb) {
; CHECK-LABEL: lasx_concat_128_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 def $xr0
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    ret
entry:
  %res = call <8 x float> @llvm.loongarch.lasx.concat.128.s(<4 x float> %va, <4 x float> %vb)
  ret <8 x float> %res
}

declare <4 x double> @llvm.loongarch.lasx.concat.128.d(<2 x double>, <2 x double>)

define <4 x double> @lasx_concat_128_d(<2 x double> %va, <2 x double> %vb) {
; CHECK-LABEL: lasx_concat_128_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 def $xr0
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    ret
entry:
  %res = call <4 x double> @llvm.loongarch.lasx.concat.128.d(<2 x double> %va, <2 x double> %vb)
  ret <4 x double> %res
}

declare <4 x i64> @llvm.loongarch.lasx.concat.128(<2 x i64>, <2 x i64>)

define <4 x i64> @lasx_concat_128(<2 x i64> %va, <2 x i64> %vb) {
; CHECK-LABEL: lasx_concat_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 def $xr0
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i64> @llvm.loongarch.lasx.concat.128(<2 x i64> %va, <2 x i64> %vb)
  ret <4 x i64> %res
}

declare <4 x float> @llvm.loongarch.lasx.extract.128.lo.s(<8 x float>)

define <4 x float> @lasx_extract_128_lo_s(<8 x float> %va) {
; CHECK-LABEL: lasx_extract_128_lo_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 killed $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <4 x float> @llvm.loongarch.lasx.extract.128.lo.s(<8 x float> %va)
  ret <4 x float> %res
}

declare <2 x double> @llvm.loongarch.lasx.extract.128.lo.d(<4 x double>)

define <2 x double> @lasx_extract_128_lo_d(<4 x double> %va) {
; CHECK-LABEL: lasx_extract_128_lo_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 killed $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <2 x double> @llvm.loongarch.lasx.extract.128.lo.d(<4 x double> %va)
  ret <2 x double> %res
}

declare <2 x i64> @llvm.loongarch.lasx.extract.128.lo(<4 x i64>)

define <2 x i64> @lasx_extract_128_lo(<4 x i64> %va) {
; CHECK-LABEL: lasx_extract_128_lo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 killed $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <2 x i64> @llvm.loongarch.lasx.extract.128.lo(<4 x i64> %va)
  ret <2 x i64> %res
}

declare <4 x float> @llvm.loongarch.lasx.extract.128.hi.s(<8 x float>)

define <4 x float> @lasx_extract_128_hi_s(<8 x float> %va) {
; CHECK-LABEL: lasx_extract_128_hi_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvpermi.q $xr0, $xr0, 1
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 killed $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <4 x float> @llvm.loongarch.lasx.extract.128.hi.s(<8 x float> %va)
  ret <4 x float> %res
}

declare <2 x double> @llvm.loongarch.lasx.extract.128.hi.d(<4 x double>)

define <2 x double> @lasx_extract_128_hi_d(<4 x double> %va) {
; CHECK-LABEL: lasx_extract_128_hi_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvpermi.q $xr0, $xr0, 1
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 killed $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <2 x double> @llvm.loongarch.lasx.extract.128.hi.d(<4 x double> %va)
  ret <2 x double> %res
}

declare <2 x i64> @llvm.loongarch.lasx.extract.128.hi(<4 x i64>)

define <2 x i64> @lasx_extract_128_hi(<4 x i64> %va) {
; CHECK-LABEL: lasx_extract_128_hi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvpermi.q $xr0, $xr0, 1
; CHECK-NEXT:    # kill: def $vr0 killed $vr0 killed $xr0
; CHECK-NEXT:    ret
entry:
  %res = call <2 x i64> @llvm.loongarch.lasx.extract.128.hi(<4 x i64> %va)
  ret <2 x i64> %res
}

declare <8 x float> @llvm.loongarch.lasx.insert.128.lo.s(<8 x float>, <4 x float>)

define <8 x float> @lasx_insert_128_lo_s(<8 x float> %va, <4 x float> %vb) {
; CHECK-LABEL: lasx_insert_128_lo_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 48
; CHECK-NEXT:    ret
entry:
  %res = call <8 x float> @llvm.loongarch.lasx.insert.128.lo.s(<8 x float> %va, <4 x float> %vb)
  ret <8 x float> %res
}

declare <4 x double> @llvm.loongarch.lasx.insert.128.lo.d(<4 x double>, <2 x double>)

define <4 x double> @lasx_insert_128_lo_d(<4 x double> %va, <2 x double> %vb) {
; CHECK-LABEL: lasx_insert_128_lo_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 48
; CHECK-NEXT:    ret
entry:
  %res = call <4 x double> @llvm.loongarch.lasx.insert.128.lo.d(<4 x double> %va, <2 x double> %vb)
  ret <4 x double> %res
}

declare <4 x i64> @llvm.loongarch.lasx.insert.128.lo(<4 x i64>, <2 x i64>)

define <4 x i64> @lasx_insert_128_lo(<4 x i64> %va, <2 x i64> %vb) {
; CHECK-LABEL: lasx_insert_128_lo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 48
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i64> @llvm.loongarch.lasx.insert.128.lo(<4 x i64> %va, <2 x i64> %vb)
  ret <4 x i64> %res
}

declare <8 x float> @llvm.loongarch.lasx.insert.128.hi.s(<8 x float>, <4 x float>)

define <8 x float> @lasx_insert_128_hi_s(<8 x float> %va, <4 x float> %vb) {
; CHECK-LABEL: lasx_insert_128_hi_s:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    ret
entry:
  %res = call <8 x float> @llvm.loongarch.lasx.insert.128.hi.s(<8 x float> %va, <4 x float> %vb)
  ret <8 x float> %res
}

declare <4 x double> @llvm.loongarch.lasx.insert.128.hi.d(<4 x double>, <2 x double>)

define <4 x double> @lasx_insert_128_hi_d(<4 x double> %va, <2 x double> %vb) {
; CHECK-LABEL: lasx_insert_128_hi_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    ret
entry:
  %res = call <4 x double> @llvm.loongarch.lasx.insert.128.hi.d(<4 x double> %va, <2 x double> %vb)
  ret <4 x double> %res
}

declare <4 x i64> @llvm.loongarch.lasx.insert.128.hi(<4 x i64>, <2 x i64>)

define <4 x i64> @lasx_insert_128_hi(<4 x i64> %va, <2 x i64> %vb) {
; CHECK-LABEL: lasx_insert_128_hi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    # kill: def $vr1 killed $vr1 def $xr1
; CHECK-NEXT:    xvpermi.q $xr0, $xr1, 2
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i64> @llvm.loongarch.lasx.insert.128.hi(<4 x i64> %va, <2 x i64> %vb)
  ret <4 x i64> %res
}
