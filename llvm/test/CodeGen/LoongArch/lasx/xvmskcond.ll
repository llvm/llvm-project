; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 --mattr=+lasx --verify-machineinstrs < %s | FileCheck %s

define i32 @xmsk_eq_allzeros_i8(<32 x i8 > %a) {
; CHECK-LABEL: xmsk_eq_allzeros_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmsknz.b $xr0, $xr0
; CHECK-NEXT:    xvnor.v $xr0, $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 31, 16
; CHECK-NEXT:    ret
entry:
  %1 = icmp eq <32 x i8> %a, splat (i8 0)
  %2 = bitcast <32 x i1> %1 to i32
  ret i32 %2
}

define i32 @xmsk_sgt_allones_i8(<32 x i8 > %a) {
; CHECK-LABEL: xmsk_sgt_allones_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskgez.b $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 31, 16
; CHECK-NEXT:    ret
entry:
  %1 = icmp sgt <32 x i8> %a, splat (i8 -1)
  %2 = bitcast <32 x i1> %1 to i32
  ret i32 %2
}

define i32 @xmsk_sge_allzeros_i8(<32 x i8 > %a) {
; CHECK-LABEL: xmsk_sge_allzeros_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskgez.b $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 31, 16
; CHECK-NEXT:    ret
entry:
  %1 = icmp sge <32 x i8> %a, splat (i8 0)
  %2 = bitcast <32 x i1> %1 to i32
  ret i32 %2
}

define i32 @xmsk_slt_allzeros_i8(<32 x i8 > %a) {
; CHECK-LABEL: xmsk_slt_allzeros_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.b $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 31, 16
; CHECK-NEXT:    ret
entry:
  %1 = icmp slt <32 x i8> %a, splat (i8 0)
  %2 = bitcast <32 x i1> %1 to i32
  ret i32 %2
}

define i16 @xmsk_slt_allzeros_i16(<16 x i16 > %a) {
; CHECK-LABEL: xmsk_slt_allzeros_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.h $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 15, 8
; CHECK-NEXT:    ret
entry:
  %1 = icmp slt <16 x i16> %a, splat (i16 0)
  %2 = bitcast <16 x i1> %1 to i16
  ret i16 %2
}

define i8 @xmsk_slt_allzeros_i32(<8 x i32 > %a) {
; CHECK-LABEL: xmsk_slt_allzeros_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.w $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 7, 4
; CHECK-NEXT:    ret
entry:
  %1 = icmp slt <8 x i32> %a, splat (i32 0)
  %2 = bitcast <8 x i1> %1 to i8
  ret i8 %2
}

define i4 @xmsk_slt_allzeros_i64(<4 x i64 > %a) {
; CHECK-LABEL: xmsk_slt_allzeros_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.d $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 3, 2
; CHECK-NEXT:    ret
entry:
  %1 = icmp slt <4 x i64> %a, splat (i64 0)
  %2 = bitcast <4 x i1> %1 to i4
  ret i4 %2
}

define i32 @xmsk_sle_allones_i8(<32 x i8 > %a) {
; CHECK-LABEL: xmsk_sle_allones_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.b $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 31, 16
; CHECK-NEXT:    ret
entry:
  %1 = icmp sle <32 x i8> %a, splat (i8 -1)
  %2 = bitcast <32 x i1> %1 to i32
  ret i32 %2
}

define i16 @xmsk_sle_allones_i32(<16 x i16 > %a) {
; CHECK-LABEL: xmsk_sle_allones_i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.h $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 15, 8
; CHECK-NEXT:    ret
entry:
  %1 = icmp sle <16 x i16> %a, splat (i16 -1)
  %2 = bitcast <16 x i1> %1 to i16
  ret i16 %2
}

define i8 @xmsk_sle_allones_i16(<8 x i32 > %a) {
; CHECK-LABEL: xmsk_sle_allones_i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.w $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 7, 4
; CHECK-NEXT:    ret
entry:
  %1 = icmp sle <8 x i32> %a, splat (i32 -1)
  %2 = bitcast <8 x i1> %1 to i8
  ret i8 %2
}

define i4 @xmsk_sle_allones_i64(<4 x i64 > %a) {
; CHECK-LABEL: xmsk_sle_allones_i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmskltz.d $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 3, 2
; CHECK-NEXT:    ret
entry:
  %1 = icmp sle <4 x i64> %a, splat (i64 -1)
  %2 = bitcast <4 x i1> %1 to i4
  ret i4 %2
}

define i32 @xmsk_ne_allzeros_i8(<32 x i8 > %a) {
; CHECK-LABEL: xmsk_ne_allzeros_i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvmsknz.b $xr0, $xr0
; CHECK-NEXT:    xvpickve2gr.wu $a0, $xr0, 0
; CHECK-NEXT:    xvpickve2gr.wu $a1, $xr0, 4
; CHECK-NEXT:    bstrins.d $a0, $a1, 31, 16
; CHECK-NEXT:    ret
entry:
  %1 = icmp ne <32 x i8> %a, splat (i8 0)
  %2 = bitcast <32 x i1> %1 to i32
  ret i32 %2
}
