; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc --mtriple=loongarch32 --mattr=+32s,+lasx < %s | FileCheck %s
; RUN: llc --mtriple=loongarch64 --mattr=+lasx < %s | FileCheck %s

define void @buildvector_ext32107654ba98fedc(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext32107654ba98fedc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.b $vr0, $vr0, 27
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <32 x i8>, ptr %src
  %e0 = extractelement <32 x i8> %v, i32 3
  %e1 = extractelement <32 x i8> %v, i32 2
  %e2 = extractelement <32 x i8> %v, i32 1
  %e3 = extractelement <32 x i8> %v, i32 0
  %e4 = extractelement <32 x i8> %v, i32 7
  %e5 = extractelement <32 x i8> %v, i32 6
  %e6 = extractelement <32 x i8> %v, i32 5
  %e7 = extractelement <32 x i8> %v, i32 4
  %e8 = extractelement <32 x i8> %v, i32 11
  %e9 = extractelement <32 x i8> %v, i32 10
  %e10 = extractelement <32 x i8> %v, i32 9
  %e11 = extractelement <32 x i8> %v, i32 8
  %e12 = extractelement <32 x i8> %v, i32 15
  %e13 = extractelement <32 x i8> %v, i32 14
  %e14 = extractelement <32 x i8> %v, i32 13
  %e15 = extractelement <32 x i8> %v, i32 12
  %ins0 = insertelement <16 x i8> poison, i8 %e0, i32 0
  %ins1 = insertelement <16 x i8> %ins0, i8 %e1, i32 1
  %ins2 = insertelement <16 x i8> %ins1, i8 %e2, i32 2
  %ins3 = insertelement <16 x i8> %ins2, i8 %e3, i32 3
  %ins4 = insertelement <16 x i8> %ins3, i8 %e4, i32 4
  %ins5 = insertelement <16 x i8> %ins4, i8 %e5, i32 5
  %ins6 = insertelement <16 x i8> %ins5, i8 %e6, i32 6
  %ins7 = insertelement <16 x i8> %ins6, i8 %e7, i32 7
  %ins8 = insertelement <16 x i8> %ins7, i8 %e8, i32 8
  %ins9 = insertelement <16 x i8> %ins8, i8 %e9, i32 9
  %ins10 = insertelement <16 x i8> %ins9, i8 %e10, i32 10
  %ins11 = insertelement <16 x i8> %ins10, i8 %e11, i32 11
  %ins12 = insertelement <16 x i8> %ins11, i8 %e12, i32 12
  %ins13 = insertelement <16 x i8> %ins12, i8 %e13, i32 13
  %ins14 = insertelement <16 x i8> %ins13, i8 %e14, i32 14
  %ins15 = insertelement <16 x i8> %ins14, i8 %e15, i32 15
  store <16 x i8> %ins15, ptr %dst
  ret void
}

define void @buildvector_ext13579bdfx13579bdf(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext13579bdfx13579bdf:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vpickod.b $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <32 x i8>, ptr %src
  %e0 = extractelement <32 x i8> %v, i32 1
  %e1 = extractelement <32 x i8> %v, i32 3
  %e2 = extractelement <32 x i8> %v, i32 5
  %e3 = extractelement <32 x i8> %v, i32 7
  %e4 = extractelement <32 x i8> %v, i32 9
  %e5 = extractelement <32 x i8> %v, i32 11
  %e6 = extractelement <32 x i8> %v, i32 13
  %e7 = extractelement <32 x i8> %v, i32 15
  %e8 = extractelement <32 x i8> %v, i32 17
  %e9 = extractelement <32 x i8> %v, i32 19
  %e10 = extractelement <32 x i8> %v, i32 21
  %e11 = extractelement <32 x i8> %v, i32 23
  %e12 = extractelement <32 x i8> %v, i32 25
  %e13 = extractelement <32 x i8> %v, i32 27
  %e14 = extractelement <32 x i8> %v, i32 29
  %e15 = extractelement <32 x i8> %v, i32 31
  %ins0 = insertelement <16 x i8> poison, i8 %e0, i32 0
  %ins1 = insertelement <16 x i8> %ins0, i8 %e1, i32 1
  %ins2 = insertelement <16 x i8> %ins1, i8 %e2, i32 2
  %ins3 = insertelement <16 x i8> %ins2, i8 %e3, i32 3
  %ins4 = insertelement <16 x i8> %ins3, i8 %e4, i32 4
  %ins5 = insertelement <16 x i8> %ins4, i8 %e5, i32 5
  %ins6 = insertelement <16 x i8> %ins5, i8 %e6, i32 6
  %ins7 = insertelement <16 x i8> %ins6, i8 %e7, i32 7
  %ins8 = insertelement <16 x i8> %ins7, i8 %e8, i32 8
  %ins9 = insertelement <16 x i8> %ins8, i8 %e9, i32 9
  %ins10 = insertelement <16 x i8> %ins9, i8 %e10, i32 10
  %ins11 = insertelement <16 x i8> %ins10, i8 %e11, i32 11
  %ins12 = insertelement <16 x i8> %ins11, i8 %e12, i32 12
  %ins13 = insertelement <16 x i8> %ins12, i8 %e13, i32 13
  %ins14 = insertelement <16 x i8> %ins13, i8 %e14, i32 14
  %ins15 = insertelement <16 x i8> %ins14, i8 %e15, i32 15
  store <16 x i8> %ins15, ptr %dst
  ret void
}

define void @buildvector_ext01234560(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext01234560:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    pcalau12i $a1, %pc_hi20(.LCPI2_0)
; CHECK-NEXT:    vld $vr1, $a1, %pc_lo12(.LCPI2_0)
; CHECK-NEXT:    vshuf.h $vr1, $vr0, $vr0
; CHECK-NEXT:    vst $vr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <16 x i16>, ptr %src
  %e0 = extractelement <16 x i16> %v, i32 0
  %e1 = extractelement <16 x i16> %v, i32 1
  %e2 = extractelement <16 x i16> %v, i32 2
  %e3 = extractelement <16 x i16> %v, i32 3
  %e4 = extractelement <16 x i16> %v, i32 4
  %e5 = extractelement <16 x i16> %v, i32 5
  %e6 = extractelement <16 x i16> %v, i32 6
  %e7 = extractelement <16 x i16> %v, i32 0
  %ins0 = insertelement <8 x i16> poison, i16 %e0, i32 0
  %ins1 = insertelement <8 x i16> %ins0, i16 %e1, i32 1
  %ins2 = insertelement <8 x i16> %ins1, i16 %e2, i32 2
  %ins3 = insertelement <8 x i16> %ins2, i16 %e3, i32 3
  %ins4 = insertelement <8 x i16> %ins3, i16 %e4, i32 4
  %ins5 = insertelement <8 x i16> %ins4, i16 %e5, i32 5
  %ins6 = insertelement <8 x i16> %ins5, i16 %e6, i32 6
  %ins7 = insertelement <8 x i16> %ins6, i16 %e7, i32 7
  store <8 x i16> %ins7, ptr %dst
  ret void
}

define void @buildvector_ext08192a3b(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext08192a3b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vilvl.h $vr0, $vr1, $vr0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <16 x i16>, ptr %src
  %e0 = extractelement <16 x i16> %v, i32 0
  %e1 = extractelement <16 x i16> %v, i32 8
  %e2 = extractelement <16 x i16> %v, i32 1
  %e3 = extractelement <16 x i16> %v, i32 9
  %e4 = extractelement <16 x i16> %v, i32 2
  %e5 = extractelement <16 x i16> %v, i32 10
  %e6 = extractelement <16 x i16> %v, i32 3
  %e7 = extractelement <16 x i16> %v, i32 11
  %ins0 = insertelement <8 x i16> poison, i16 %e0, i32 0
  %ins1 = insertelement <8 x i16> %ins0, i16 %e1, i32 1
  %ins2 = insertelement <8 x i16> %ins1, i16 %e2, i32 2
  %ins3 = insertelement <8 x i16> %ins2, i16 %e3, i32 3
  %ins4 = insertelement <8 x i16> %ins3, i16 %e4, i32 4
  %ins5 = insertelement <8 x i16> %ins4, i16 %e5, i32 5
  %ins6 = insertelement <8 x i16> %ins5, i16 %e6, i32 6
  %ins7 = insertelement <8 x i16> %ins6, i16 %e7, i32 7
  store <8 x i16> %ins7, ptr %dst
  ret void
}

define void @buildvector_ext0000(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext0000:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vreplvei.w $vr0, $vr0, 0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <8 x i32>, ptr %src
  %e0 = extractelement <8 x i32> %v, i32 0
  %e1 = extractelement <8 x i32> %v, i32 0
  %e2 = extractelement <8 x i32> %v, i32 0
  %e3 = extractelement <8 x i32> %v, i32 0
  %ins0 = insertelement <4 x i32> poison, i32 %e0, i32 0
  %ins1 = insertelement <4 x i32> %ins0, i32 %e1, i32 1
  %ins2 = insertelement <4 x i32> %ins1, i32 %e2, i32 2
  %ins3 = insertelement <4 x i32> %ins2, i32 %e3, i32 3
  store <4 x i32> %ins3, ptr %dst
  ret void
}

define void @buildvector_ext7610(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext7610:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    pcalau12i $a1, %pc_hi20(.LCPI5_0)
; CHECK-NEXT:    vld $vr1, $a1, %pc_lo12(.LCPI5_0)
; CHECK-NEXT:    xvpermi.q $xr2, $xr0, 1
; CHECK-NEXT:    vshuf.w $vr1, $vr2, $vr0
; CHECK-NEXT:    vst $vr1, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <8 x i32>, ptr %src
  %e0 = extractelement <8 x i32> %v, i32 7
  %e1 = extractelement <8 x i32> %v, i32 6
  %e2 = extractelement <8 x i32> %v, i32 1
  %e3 = extractelement <8 x i32> %v, i32 0
  %ins0 = insertelement <4 x i32> poison, i32 %e0, i32 0
  %ins1 = insertelement <4 x i32> %ins0, i32 %e1, i32 1
  %ins2 = insertelement <4 x i32> %ins1, i32 %e2, i32 2
  %ins3 = insertelement <4 x i32> %ins2, i32 %e3, i32 3
  store <4 x i32> %ins3, ptr %dst
  ret void
}

define void @buildvector_ext0113(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext0113:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.w $vr0, $vr0, 212
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <8 x float>, ptr %src
  %e0 = extractelement <8 x float> %v, i32 0
  %e1 = extractelement <8 x float> %v, i32 1
  %e2 = extractelement <8 x float> %v, i32 1
  %e3 = extractelement <8 x float> %v, i32 3
  %ins0 = insertelement <4 x float> poison, float %e0, i32 0
  %ins1 = insertelement <4 x float> %ins0, float %e1, i32 1
  %ins2 = insertelement <4 x float> %ins1, float %e2, i32 2
  %ins3 = insertelement <4 x float> %ins2, float %e3, i32 3
  store <4 x float> %ins3, ptr %dst
  ret void
}

define void @buildvector_ext6060(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext6060:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vrepli.d $vr2, 6
; CHECK-NEXT:    vshuf.w $vr2, $vr1, $vr0
; CHECK-NEXT:    vst $vr2, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <8 x float>, ptr %src
  %e0 = extractelement <8 x float> %v, i32 6
  %e1 = extractelement <8 x float> %v, i32 0
  %e2 = extractelement <8 x float> %v, i32 6
  %e3 = extractelement <8 x float> %v, i32 0
  %ins0 = insertelement <4 x float> poison, float %e0, i32 0
  %ins1 = insertelement <4 x float> %ins0, float %e1, i32 1
  %ins2 = insertelement <4 x float> %ins1, float %e2, i32 2
  %ins3 = insertelement <4 x float> %ins2, float %e3, i32 3
  store <4 x float> %ins3, ptr %dst
  ret void
}

define void @buildvector_ext00(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext00:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vreplvei.d $vr0, $vr0, 0
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <4 x i64>, ptr %src
  %e0 = extractelement <4 x i64> %v, i32 0
  %e1 = extractelement <4 x i64> %v, i32 0
  %ins0 = insertelement <2 x i64> poison, i64 %e0, i32 0
  %ins1 = insertelement <2 x i64> %ins0, i64 %e1, i32 1
  store <2 x i64> %ins1, ptr %dst
  ret void
}

define void @buildvector_ext12(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vshuf4i.d $vr0, $vr1, 9
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <4 x i64>, ptr %src
  %e0 = extractelement <4 x i64> %v, i32 1
  %e1 = extractelement <4 x i64> %v, i32 2
  %ins0 = insertelement <2 x i64> poison, i64 %e0, i32 0
  %ins1 = insertelement <2 x i64> %ins0, i64 %e1, i32 1
  store <2 x i64> %ins1, ptr %dst
  ret void
}

define void @buildvector_ext10(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vld $vr0, $a1, 0
; CHECK-NEXT:    vshuf4i.d $vr0, $vr0, 1
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <4 x double>, ptr %src
  %e0 = extractelement <4 x double> %v, i32 1
  %e1 = extractelement <4 x double> %v, i32 0
  %ins0 = insertelement <2 x double> poison, double %e0, i32 0
  %ins1 = insertelement <2 x double> %ins0, double %e1, i32 1
  store <2 x double> %ins1, ptr %dst
  ret void
}

define void @buildvector_ext31(ptr %dst, ptr %src) nounwind {
; CHECK-LABEL: buildvector_ext31:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    xvpermi.q $xr1, $xr0, 1
; CHECK-NEXT:    vpackod.d $vr0, $vr0, $vr1
; CHECK-NEXT:    vst $vr0, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v = load <4 x double>, ptr %src
  %e0 = extractelement <4 x double> %v, i32 3
  %e1 = extractelement <4 x double> %v, i32 1
  %ins0 = insertelement <2 x double> poison, double %e0, i32 0
  %ins1 = insertelement <2 x double> %ins0, double %e1, i32 1
  store <2 x double> %ins1, ptr %dst
  ret void
}
