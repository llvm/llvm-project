; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 --mattr=+lasx < %s | FileCheck %s

;; Test scalar_to_vector expansion.

define <32 x i8> @scalar_to_32xi8(i8 %val) {
; CHECK-LABEL: scalar_to_32xi8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vinsgr2vr.b $vr0, $a0, 0
; CHECK-NEXT:    ret
  %ret = insertelement <32 x i8> poison, i8 %val, i32 0
  ret <32 x i8> %ret
}

define <16 x i16> @scalar_to_16xi16(i16 %val) {
; CHECK-LABEL: scalar_to_16xi16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vinsgr2vr.h $vr0, $a0, 0
; CHECK-NEXT:    ret
  %ret = insertelement <16 x i16> poison, i16 %val, i32 0
  ret <16 x i16> %ret
}

define <8 x i32> @scalar_to_8xi32(i32 %val) {
; CHECK-LABEL: scalar_to_8xi32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvinsgr2vr.w $xr0, $a0, 0
; CHECK-NEXT:    ret
  %ret = insertelement <8 x i32> poison, i32 %val, i32 0
  ret <8 x i32> %ret
}

define <4 x i64> @scalar_to_4xi64(i64 %val) {
; CHECK-LABEL: scalar_to_4xi64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvinsgr2vr.d $xr0, $a0, 0
; CHECK-NEXT:    ret
  %ret = insertelement <4 x i64> poison, i64 %val, i32 0
  ret <4 x i64> %ret
}

define <8 x float> @scalar_to_8xf32(float %val) {
; CHECK-LABEL: scalar_to_8xf32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $f0 killed $f0 def $xr0
; CHECK-NEXT:    ret
  %ret = insertelement <8 x float> poison, float %val, i32 0
  ret <8 x float> %ret
}

define <4 x double> @scalar_to_4xf64(double %val) {
; CHECK-LABEL: scalar_to_4xf64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    # kill: def $f0_64 killed $f0_64 def $xr0
; CHECK-NEXT:    ret
  %ret = insertelement <4 x double> poison, double %val, i32 0
  ret <4 x double> %ret
}
