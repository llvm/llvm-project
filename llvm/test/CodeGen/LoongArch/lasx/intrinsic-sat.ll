; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 --mattr=+lasx < %s | FileCheck %s

declare <32 x i8> @llvm.loongarch.lasx.xvsat.b(<32 x i8>, i32)

define <32 x i8> @lasx_xvsat_b(<32 x i8> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.b $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <32 x i8> @llvm.loongarch.lasx.xvsat.b(<32 x i8> %va, i32 1)
  ret <32 x i8> %res
}

declare <16 x i16> @llvm.loongarch.lasx.xvsat.h(<16 x i16>, i32)

define <16 x i16> @lasx_xvsat_h(<16 x i16> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.h $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <16 x i16> @llvm.loongarch.lasx.xvsat.h(<16 x i16> %va, i32 1)
  ret <16 x i16> %res
}

declare <8 x i32> @llvm.loongarch.lasx.xvsat.w(<8 x i32>, i32)

define <8 x i32> @lasx_xvsat_w(<8 x i32> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.w $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <8 x i32> @llvm.loongarch.lasx.xvsat.w(<8 x i32> %va, i32 1)
  ret <8 x i32> %res
}

declare <4 x i64> @llvm.loongarch.lasx.xvsat.d(<4 x i64>, i32)

define <4 x i64> @lasx_xvsat_d(<4 x i64> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.d $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i64> @llvm.loongarch.lasx.xvsat.d(<4 x i64> %va, i32 1)
  ret <4 x i64> %res
}

declare <32 x i8> @llvm.loongarch.lasx.xvsat.bu(<32 x i8>, i32)

define <32 x i8> @lasx_xvsat_bu(<32 x i8> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_bu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.bu $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <32 x i8> @llvm.loongarch.lasx.xvsat.bu(<32 x i8> %va, i32 1)
  ret <32 x i8> %res
}

declare <16 x i16> @llvm.loongarch.lasx.xvsat.hu(<16 x i16>, i32)

define <16 x i16> @lasx_xvsat_hu(<16 x i16> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_hu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.hu $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <16 x i16> @llvm.loongarch.lasx.xvsat.hu(<16 x i16> %va, i32 1)
  ret <16 x i16> %res
}

declare <8 x i32> @llvm.loongarch.lasx.xvsat.wu(<8 x i32>, i32)

define <8 x i32> @lasx_xvsat_wu(<8 x i32> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_wu:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.wu $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <8 x i32> @llvm.loongarch.lasx.xvsat.wu(<8 x i32> %va, i32 1)
  ret <8 x i32> %res
}

declare <4 x i64> @llvm.loongarch.lasx.xvsat.du(<4 x i64>, i32)

define <4 x i64> @lasx_xvsat_du(<4 x i64> %va) nounwind {
; CHECK-LABEL: lasx_xvsat_du:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsat.du $xr0, $xr0, 1
; CHECK-NEXT:    ret
entry:
  %res = call <4 x i64> @llvm.loongarch.lasx.xvsat.du(<4 x i64> %va, i32 1)
  ret <4 x i64> %res
}
