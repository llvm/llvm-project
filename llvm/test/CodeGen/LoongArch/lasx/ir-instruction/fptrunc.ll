; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc --mtriple=loongarch32 --mattr=+32s,+lasx < %s | FileCheck %s --check-prefixes=CHECK
; RUN: llc --mtriple=loongarch64 --mattr=+lasx < %s | FileCheck %s --check-prefixes=CHECK

;; fptrunc
define void @fptrunc_v4f64_to_v4f32(ptr %res, ptr %a0) nounwind {
; CHECK-LABEL: fptrunc_v4f64_to_v4f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 0
; CHECK-NEXT:    xvpickve.d $xr1, $xr0, 1
; CHECK-NEXT:    fcvt.s.d $fa1, $fa1
; CHECK-NEXT:    xvpickve.d $xr2, $xr0, 0
; CHECK-NEXT:    fcvt.s.d $fa2, $fa2
; CHECK-NEXT:    vextrins.w $vr2, $vr1, 16
; CHECK-NEXT:    xvpickve.d $xr1, $xr0, 2
; CHECK-NEXT:    fcvt.s.d $fa1, $fa1
; CHECK-NEXT:    vextrins.w $vr2, $vr1, 32
; CHECK-NEXT:    xvpickve.d $xr0, $xr0, 3
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    vextrins.w $vr2, $vr0, 48
; CHECK-NEXT:    vst $vr2, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v0 = load <4 x double>, ptr %a0
  %trunc = fptrunc <4 x double> %v0 to <4 x float>
  store <4 x float> %trunc, ptr %res
  ret void
}

define void @fptrunc_v8f64_to_v8f32(ptr %res, ptr %a0) nounwind {
; CHECK-LABEL: fptrunc_v8f64_to_v8f32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvld $xr0, $a1, 32
; CHECK-NEXT:    xvld $xr1, $a1, 0
; CHECK-NEXT:    xvpickve.d $xr2, $xr0, 1
; CHECK-NEXT:    fcvt.s.d $fa2, $fa2
; CHECK-NEXT:    xvpickve.d $xr3, $xr0, 0
; CHECK-NEXT:    fcvt.s.d $fa3, $fa3
; CHECK-NEXT:    vextrins.w $vr3, $vr2, 16
; CHECK-NEXT:    xvpickve.d $xr2, $xr0, 2
; CHECK-NEXT:    fcvt.s.d $fa2, $fa2
; CHECK-NEXT:    vextrins.w $vr3, $vr2, 32
; CHECK-NEXT:    xvpickve.d $xr0, $xr0, 3
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    vextrins.w $vr3, $vr0, 48
; CHECK-NEXT:    xvpickve.d $xr0, $xr1, 1
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    xvpickve.d $xr2, $xr1, 0
; CHECK-NEXT:    fcvt.s.d $fa2, $fa2
; CHECK-NEXT:    vextrins.w $vr2, $vr0, 16
; CHECK-NEXT:    xvpickve.d $xr0, $xr1, 2
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    vextrins.w $vr2, $vr0, 32
; CHECK-NEXT:    xvpickve.d $xr0, $xr1, 3
; CHECK-NEXT:    fcvt.s.d $fa0, $fa0
; CHECK-NEXT:    vextrins.w $vr2, $vr0, 48
; CHECK-NEXT:    xvpermi.q $xr2, $xr3, 2
; CHECK-NEXT:    xvst $xr2, $a0, 0
; CHECK-NEXT:    ret
entry:
  %v0 = load <8 x double>, ptr %a0
  %trunc = fptrunc <8 x double> %v0 to <8 x float>
  store <8 x float> %trunc, ptr %res
  ret void
}
