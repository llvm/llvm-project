; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 --mattr=+lasx < %s | FileCheck %s

declare void @llvm.loongarch.lasx.xvstelm.b(<32 x i8>, i8*, i32, i32)

define void @lasx_xvstelm_b(<32 x i8> %va, i8* %p) nounwind {
; CHECK-LABEL: lasx_xvstelm_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvstelm.b $xr0, $a0, 1, 1
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.lasx.xvstelm.b(<32 x i8> %va, i8* %p, i32 1, i32 1)
  ret void
}

declare void @llvm.loongarch.lasx.xvstelm.h(<16 x i16>, i8*, i32, i32)

define void @lasx_xvstelm_h(<16 x i16> %va, i8* %p) nounwind {
; CHECK-LABEL: lasx_xvstelm_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvstelm.h $xr0, $a0, 2, 1
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.lasx.xvstelm.h(<16 x i16> %va, i8* %p, i32 2, i32 1)
  ret void
}

declare void @llvm.loongarch.lasx.xvstelm.w(<8 x i32>, i8*, i32, i32)

define void @lasx_xvstelm_w(<8 x i32> %va, i8* %p) nounwind {
; CHECK-LABEL: lasx_xvstelm_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvstelm.w $xr0, $a0, 4, 1
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.lasx.xvstelm.w(<8 x i32> %va, i8* %p, i32 4, i32 1)
  ret void
}

declare void @llvm.loongarch.lasx.xvstelm.d(<4 x i64>, i8*, i32, i32)

define void @lasx_xvstelm_d(<4 x i64> %va, i8* %p) nounwind {
; CHECK-LABEL: lasx_xvstelm_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvstelm.d $xr0, $a0, 8, 1
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.lasx.xvstelm.d(<4 x i64> %va, i8* %p, i32 8, i32 1)
  ret void
}
