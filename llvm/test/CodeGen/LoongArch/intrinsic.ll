; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch32 < %s | FileCheck %s
; RUN: llc --mtriple=loongarch64 < %s | FileCheck %s

declare void @llvm.loongarch.dbar(i32)
declare void @llvm.loongarch.ibar(i32)
declare void @llvm.loongarch.break(i32)
declare void @llvm.loongarch.syscall(i32)
declare i32 @llvm.loongarch.csrrd.w(i32 immarg)
declare i32 @llvm.loongarch.csrwr.w(i32, i32 immarg)
declare i32 @llvm.loongarch.csrxchg.w(i32, i32, i32 immarg)

define void @foo() nounwind {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.dbar(i32 0)
  ret void
}

define void @ibar() nounwind {
; CHECK-LABEL: ibar:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ibar 0
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.ibar(i32 0)
  ret void
}

define void @break() nounwind {
; CHECK-LABEL: break:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    break 1
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.break(i32 1)
  ret void
}

define void @syscall() nounwind {
; CHECK-LABEL: syscall:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    syscall 1
; CHECK-NEXT:    ret
entry:
  call void @llvm.loongarch.syscall(i32 1)
  ret void
}

define i32 @csrrd_w() {
; CHECK-LABEL: csrrd_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrrd $a0, 1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i32 @llvm.loongarch.csrrd.w(i32 1)
  ret i32 %0
}

define i32 @csrwr_w(i32 signext %a) {
; CHECK-LABEL: csrwr_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrwr $a0, 1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i32 @llvm.loongarch.csrwr.w(i32 %a, i32 1)
  ret i32 %0
}

define i32 @csrxchg_w(i32 signext %a, i32 signext %b) {
; CHECK-LABEL: csrxchg_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    csrxchg $a0, $a1, 1
; CHECK-NEXT:    ret
entry:
  %0 = tail call i32 @llvm.loongarch.csrxchg.w(i32 %a, i32 %b, i32 1)
  ret i32 %0
}
