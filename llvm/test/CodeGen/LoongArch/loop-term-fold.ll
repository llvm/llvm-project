; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=loongarch64 --mattr=+d < %s | FileCheck %s

;; Whether Loop Term Fold Pass is enabled or not, this test only contains 2 add instructions.
define void @const_tripcount_le_1024(ptr %a, ptr %b) {
; CHECK-LABEL: const_tripcount_le_1024:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    move $a2, $zero
; CHECK-NEXT:    ori $a3, $zero, 2048
; CHECK-NEXT:    .p2align 4, , 16
; CHECK-NEXT:  .LBB0_1: # %for.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldx.h $a4, $a1, $a2
; CHECK-NEXT:    st.w $a4, $a0, 0
; CHECK-NEXT:    addi.d $a2, $a2, 2
; CHECK-NEXT:    addi.d $a0, $a0, 4
; CHECK-NEXT:    bne $a2, $a3, .LBB0_1
; CHECK-NEXT:  # %bb.2: # %for.cond.cleanup
; CHECK-NEXT:    ret
entry:
  br label %for.body

for.cond.cleanup:
  ret void

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds nuw i16, ptr %b, i64 %indvars.iv
  %0 = load i16, ptr %arrayidx
  %conv = sext i16 %0 to i32
  %arrayidx2 = getelementptr inbounds nuw i32, ptr %a, i64 %indvars.iv
  store i32 %conv, ptr %arrayidx2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1024
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}


;; After Loop Term Fold Pass enabled, this test only contains 2 add instructions.
define void @const_tripcount_gt_1024(ptr %a, ptr %b) {
; CHECK-LABEL: const_tripcount_gt_1024:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $a2, -2
; CHECK-NEXT:    ori $a2, $a2, 4092
; CHECK-NEXT:    .p2align 4, , 16
; CHECK-NEXT:  .LBB1_1: # %for.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.h $a3, $a1, 0
; CHECK-NEXT:    add.d $a4, $a0, $a2
; CHECK-NEXT:    stptr.w $a3, $a4, 4100
; CHECK-NEXT:    addi.d $a2, $a2, 4
; CHECK-NEXT:    addi.d $a1, $a1, 2
; CHECK-NEXT:    bnez $a2, .LBB1_1
; CHECK-NEXT:  # %bb.2: # %for.cond.cleanup
; CHECK-NEXT:    ret
entry:
  br label %for.body

for.cond.cleanup:
  ret void

for.body:
  %indvars.iv = phi i64 [ 0, %entry ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds nuw i16, ptr %b, i64 %indvars.iv
  %0 = load i16, ptr %arrayidx
  %conv = sext i16 %0 to i32
  %arrayidx2 = getelementptr inbounds nuw i32, ptr %a, i64 %indvars.iv
  store i32 %conv, ptr %arrayidx2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 1025
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

;; After Loop Term Fold Pass enabled, this test only contains 2 add instructions.
define void @runtime_tripcount(ptr %a, ptr %b, i32 %n) {
; CHECK-LABEL: runtime_tripcount:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.w $a2, $a2, 0
; CHECK-NEXT:    ori $a3, $zero, 1
; CHECK-NEXT:    blt $a2, $a3, .LBB2_2
; CHECK-NEXT:    .p2align 4, , 16
; CHECK-NEXT:  .LBB2_1: # %for.body
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ld.h $a3, $a1, 0
; CHECK-NEXT:    st.w $a3, $a0, 0
; CHECK-NEXT:    addi.d $a2, $a2, -1
; CHECK-NEXT:    addi.d $a0, $a0, 4
; CHECK-NEXT:    addi.d $a1, $a1, 2
; CHECK-NEXT:    bnez $a2, .LBB2_1
; CHECK-NEXT:  .LBB2_2: # %for.cond.cleanup
; CHECK-NEXT:    ret
entry:
  %cmp6 = icmp sgt i32 %n, 0
  br i1 %cmp6, label %for.body.preheader, label %for.cond.cleanup

for.body.preheader:
  %wide.trip.count = zext nneg i32 %n to i64
  br label %for.body

for.cond.cleanup:
  ret void

for.body:
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds nuw i16, ptr %b, i64 %indvars.iv
  %0 = load i16, ptr %arrayidx
  %conv = sext i16 %0 to i32
  %arrayidx2 = getelementptr inbounds nuw i32, ptr %a, i64 %indvars.iv
  store i32 %conv, ptr %arrayidx2
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}
