; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch32 < %s | FileCheck %s --check-prefix=LA32
; RUN: llc --mtriple=loongarch64 < %s | FileCheck %s --check-prefix=LA64
; RUN: llc --mtriple=loongarch32 -loongarch-check-zero-division < %s \
; RUN:     | FileCheck %s --check-prefix=LA32-TRAP
; RUN: llc --mtriple=loongarch64 -loongarch-check-zero-division < %s \
; RUN:     | FileCheck %s --check-prefix=LA64-TRAP

;; Test the sdiv/udiv/srem/urem LLVM IR.

define i1 @sdiv_i1(i1 %a, i1 %b) {
; LA32-LABEL: sdiv_i1:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: sdiv_i1:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: sdiv_i1:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: sdiv_i1:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = sdiv i1 %a, %b
  ret i1 %r
}

define i8 @sdiv_i8(i8 %a, i8 %b) {
; LA32-LABEL: sdiv_i8:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    ext.w.b $a1, $a1
; LA32-NEXT:    ext.w.b $a0, $a0
; LA32-NEXT:    div.w $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: sdiv_i8:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    ext.w.b $a1, $a1
; LA64-NEXT:    ext.w.b $a0, $a0
; LA64-NEXT:    div.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: sdiv_i8:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    ext.w.b $a1, $a1
; LA32-TRAP-NEXT:    ext.w.b $a0, $a0
; LA32-TRAP-NEXT:    div.w $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: sdiv_i8:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    ext.w.b $a1, $a1
; LA64-TRAP-NEXT:    ext.w.b $a0, $a0
; LA64-TRAP-NEXT:    div.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = sdiv i8 %a, %b
  ret i8 %r
}

define i16 @sdiv_i16(i16 %a, i16 %b) {
; LA32-LABEL: sdiv_i16:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    ext.w.h $a1, $a1
; LA32-NEXT:    ext.w.h $a0, $a0
; LA32-NEXT:    div.w $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: sdiv_i16:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    ext.w.h $a1, $a1
; LA64-NEXT:    ext.w.h $a0, $a0
; LA64-NEXT:    div.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: sdiv_i16:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    ext.w.h $a1, $a1
; LA32-TRAP-NEXT:    ext.w.h $a0, $a0
; LA32-TRAP-NEXT:    div.w $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: sdiv_i16:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    ext.w.h $a1, $a1
; LA64-TRAP-NEXT:    ext.w.h $a0, $a0
; LA64-TRAP-NEXT:    div.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = sdiv i16 %a, %b
  ret i16 %r
}

define i32 @sdiv_i32(i32 %a, i32 %b) {
; LA32-LABEL: sdiv_i32:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    div.w $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: sdiv_i32:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    addi.w $a1, $a1, 0
; LA64-NEXT:    addi.w $a0, $a0, 0
; LA64-NEXT:    div.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: sdiv_i32:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    div.w $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: sdiv_i32:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    addi.w $a1, $a1, 0
; LA64-TRAP-NEXT:    addi.w $a0, $a0, 0
; LA64-TRAP-NEXT:    div.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = sdiv i32 %a, %b
  ret i32 %r
}

define i64 @sdiv_i64(i64 %a, i64 %b) {
; LA32-LABEL: sdiv_i64:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    addi.w $sp, $sp, -16
; LA32-NEXT:    .cfi_def_cfa_offset 16
; LA32-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-NEXT:    .cfi_offset 1, -4
; LA32-NEXT:    bl __divdi3
; LA32-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-NEXT:    addi.w $sp, $sp, 16
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: sdiv_i64:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    div.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: sdiv_i64:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    addi.w $sp, $sp, -16
; LA32-TRAP-NEXT:    .cfi_def_cfa_offset 16
; LA32-TRAP-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-TRAP-NEXT:    .cfi_offset 1, -4
; LA32-TRAP-NEXT:    bl __divdi3
; LA32-TRAP-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-TRAP-NEXT:    addi.w $sp, $sp, 16
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: sdiv_i64:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    div.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = sdiv i64 %a, %b
  ret i64 %r
}

define i1 @udiv_i1(i1 %a, i1 %b) {
; LA32-LABEL: udiv_i1:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: udiv_i1:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: udiv_i1:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: udiv_i1:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = udiv i1 %a, %b
  ret i1 %r
}

define i8 @udiv_i8(i8 %a, i8 %b) {
; LA32-LABEL: udiv_i8:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    andi $a1, $a1, 255
; LA32-NEXT:    andi $a0, $a0, 255
; LA32-NEXT:    div.wu $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: udiv_i8:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    andi $a1, $a1, 255
; LA64-NEXT:    andi $a0, $a0, 255
; LA64-NEXT:    div.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: udiv_i8:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    andi $a1, $a1, 255
; LA32-TRAP-NEXT:    andi $a0, $a0, 255
; LA32-TRAP-NEXT:    div.wu $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: udiv_i8:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    andi $a1, $a1, 255
; LA64-TRAP-NEXT:    andi $a0, $a0, 255
; LA64-TRAP-NEXT:    div.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = udiv i8 %a, %b
  ret i8 %r
}

define i16 @udiv_i16(i16 %a, i16 %b) {
; LA32-LABEL: udiv_i16:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    bstrpick.w $a1, $a1, 15, 0
; LA32-NEXT:    bstrpick.w $a0, $a0, 15, 0
; LA32-NEXT:    div.wu $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: udiv_i16:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    bstrpick.d $a1, $a1, 15, 0
; LA64-NEXT:    bstrpick.d $a0, $a0, 15, 0
; LA64-NEXT:    div.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: udiv_i16:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    bstrpick.w $a1, $a1, 15, 0
; LA32-TRAP-NEXT:    bstrpick.w $a0, $a0, 15, 0
; LA32-TRAP-NEXT:    div.wu $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: udiv_i16:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    bstrpick.d $a1, $a1, 15, 0
; LA64-TRAP-NEXT:    bstrpick.d $a0, $a0, 15, 0
; LA64-TRAP-NEXT:    div.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = udiv i16 %a, %b
  ret i16 %r
}

define i32 @udiv_i32(i32 %a, i32 %b) {
; LA32-LABEL: udiv_i32:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    div.wu $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: udiv_i32:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    bstrpick.d $a1, $a1, 31, 0
; LA64-NEXT:    bstrpick.d $a0, $a0, 31, 0
; LA64-NEXT:    div.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: udiv_i32:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    div.wu $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: udiv_i32:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    bstrpick.d $a1, $a1, 31, 0
; LA64-TRAP-NEXT:    bstrpick.d $a0, $a0, 31, 0
; LA64-TRAP-NEXT:    div.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = udiv i32 %a, %b
  ret i32 %r
}

define i64 @udiv_i64(i64 %a, i64 %b) {
; LA32-LABEL: udiv_i64:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    addi.w $sp, $sp, -16
; LA32-NEXT:    .cfi_def_cfa_offset 16
; LA32-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-NEXT:    .cfi_offset 1, -4
; LA32-NEXT:    bl __udivdi3
; LA32-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-NEXT:    addi.w $sp, $sp, 16
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: udiv_i64:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    div.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: udiv_i64:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    addi.w $sp, $sp, -16
; LA32-TRAP-NEXT:    .cfi_def_cfa_offset 16
; LA32-TRAP-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-TRAP-NEXT:    .cfi_offset 1, -4
; LA32-TRAP-NEXT:    bl __udivdi3
; LA32-TRAP-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-TRAP-NEXT:    addi.w $sp, $sp, 16
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: udiv_i64:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    div.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = udiv i64 %a, %b
  ret i64 %r
}

define i1 @srem_i1(i1 %a, i1 %b) {
; LA32-LABEL: srem_i1:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    move $a0, $zero
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: srem_i1:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    move $a0, $zero
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: srem_i1:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    move $a0, $zero
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: srem_i1:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    move $a0, $zero
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = srem i1 %a, %b
  ret i1 %r
}

define i8 @srem_i8(i8 %a, i8 %b) {
; LA32-LABEL: srem_i8:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    ext.w.b $a1, $a1
; LA32-NEXT:    ext.w.b $a0, $a0
; LA32-NEXT:    mod.w $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: srem_i8:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    ext.w.b $a1, $a1
; LA64-NEXT:    ext.w.b $a0, $a0
; LA64-NEXT:    mod.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: srem_i8:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    ext.w.b $a1, $a1
; LA32-TRAP-NEXT:    ext.w.b $a0, $a0
; LA32-TRAP-NEXT:    mod.w $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: srem_i8:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    ext.w.b $a1, $a1
; LA64-TRAP-NEXT:    ext.w.b $a0, $a0
; LA64-TRAP-NEXT:    mod.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = srem i8 %a, %b
  ret i8 %r
}

define i16 @srem_i16(i16 %a, i16 %b) {
; LA32-LABEL: srem_i16:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    ext.w.h $a1, $a1
; LA32-NEXT:    ext.w.h $a0, $a0
; LA32-NEXT:    mod.w $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: srem_i16:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    ext.w.h $a1, $a1
; LA64-NEXT:    ext.w.h $a0, $a0
; LA64-NEXT:    mod.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: srem_i16:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    ext.w.h $a1, $a1
; LA32-TRAP-NEXT:    ext.w.h $a0, $a0
; LA32-TRAP-NEXT:    mod.w $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: srem_i16:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    ext.w.h $a1, $a1
; LA64-TRAP-NEXT:    ext.w.h $a0, $a0
; LA64-TRAP-NEXT:    mod.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = srem i16 %a, %b
  ret i16 %r
}

define i32 @srem_i32(i32 %a, i32 %b) {
; LA32-LABEL: srem_i32:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    mod.w $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: srem_i32:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    addi.w $a1, $a1, 0
; LA64-NEXT:    addi.w $a0, $a0, 0
; LA64-NEXT:    mod.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: srem_i32:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    mod.w $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: srem_i32:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    addi.w $a1, $a1, 0
; LA64-TRAP-NEXT:    addi.w $a0, $a0, 0
; LA64-TRAP-NEXT:    mod.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = srem i32 %a, %b
  ret i32 %r
}

define i64 @srem_i64(i64 %a, i64 %b) {
; LA32-LABEL: srem_i64:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    addi.w $sp, $sp, -16
; LA32-NEXT:    .cfi_def_cfa_offset 16
; LA32-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-NEXT:    .cfi_offset 1, -4
; LA32-NEXT:    bl __moddi3
; LA32-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-NEXT:    addi.w $sp, $sp, 16
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: srem_i64:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    mod.d $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: srem_i64:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    addi.w $sp, $sp, -16
; LA32-TRAP-NEXT:    .cfi_def_cfa_offset 16
; LA32-TRAP-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-TRAP-NEXT:    .cfi_offset 1, -4
; LA32-TRAP-NEXT:    bl __moddi3
; LA32-TRAP-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-TRAP-NEXT:    addi.w $sp, $sp, 16
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: srem_i64:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    mod.d $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = srem i64 %a, %b
  ret i64 %r
}

define i1 @urem_i1(i1 %a, i1 %b) {
; LA32-LABEL: urem_i1:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    move $a0, $zero
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: urem_i1:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    move $a0, $zero
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: urem_i1:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    move $a0, $zero
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: urem_i1:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    move $a0, $zero
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = urem i1 %a, %b
  ret i1 %r
}

define i8 @urem_i8(i8 %a, i8 %b) {
; LA32-LABEL: urem_i8:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    andi $a1, $a1, 255
; LA32-NEXT:    andi $a0, $a0, 255
; LA32-NEXT:    mod.wu $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: urem_i8:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    andi $a1, $a1, 255
; LA64-NEXT:    andi $a0, $a0, 255
; LA64-NEXT:    mod.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: urem_i8:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    andi $a1, $a1, 255
; LA32-TRAP-NEXT:    andi $a0, $a0, 255
; LA32-TRAP-NEXT:    mod.wu $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: urem_i8:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    andi $a1, $a1, 255
; LA64-TRAP-NEXT:    andi $a0, $a0, 255
; LA64-TRAP-NEXT:    mod.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = urem i8 %a, %b
  ret i8 %r
}

define i16 @urem_i16(i16 %a, i16 %b) {
; LA32-LABEL: urem_i16:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    bstrpick.w $a1, $a1, 15, 0
; LA32-NEXT:    bstrpick.w $a0, $a0, 15, 0
; LA32-NEXT:    mod.wu $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: urem_i16:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    bstrpick.d $a1, $a1, 15, 0
; LA64-NEXT:    bstrpick.d $a0, $a0, 15, 0
; LA64-NEXT:    mod.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: urem_i16:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    bstrpick.w $a1, $a1, 15, 0
; LA32-TRAP-NEXT:    bstrpick.w $a0, $a0, 15, 0
; LA32-TRAP-NEXT:    mod.wu $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: urem_i16:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    bstrpick.d $a1, $a1, 15, 0
; LA64-TRAP-NEXT:    bstrpick.d $a0, $a0, 15, 0
; LA64-TRAP-NEXT:    mod.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = urem i16 %a, %b
  ret i16 %r
}

define i32 @urem_i32(i32 %a, i32 %b) {
; LA32-LABEL: urem_i32:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    mod.wu $a0, $a0, $a1
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: urem_i32:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    bstrpick.d $a1, $a1, 31, 0
; LA64-NEXT:    bstrpick.d $a0, $a0, 31, 0
; LA64-NEXT:    mod.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: urem_i32:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    mod.wu $a0, $a0, $a1
; LA32-TRAP-NEXT:    bnez $a1, 8
; LA32-TRAP-NEXT:    break 7
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: urem_i32:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    bstrpick.d $a1, $a1, 31, 0
; LA64-TRAP-NEXT:    bstrpick.d $a0, $a0, 31, 0
; LA64-TRAP-NEXT:    mod.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = urem i32 %a, %b
  ret i32 %r
}

define i64 @urem_i64(i64 %a, i64 %b) {
; LA32-LABEL: urem_i64:
; LA32:       # %bb.0: # %entry
; LA32-NEXT:    addi.w $sp, $sp, -16
; LA32-NEXT:    .cfi_def_cfa_offset 16
; LA32-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-NEXT:    .cfi_offset 1, -4
; LA32-NEXT:    bl __umoddi3
; LA32-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-NEXT:    addi.w $sp, $sp, 16
; LA32-NEXT:    jirl $zero, $ra, 0
;
; LA64-LABEL: urem_i64:
; LA64:       # %bb.0: # %entry
; LA64-NEXT:    mod.du $a0, $a0, $a1
; LA64-NEXT:    jirl $zero, $ra, 0
;
; LA32-TRAP-LABEL: urem_i64:
; LA32-TRAP:       # %bb.0: # %entry
; LA32-TRAP-NEXT:    addi.w $sp, $sp, -16
; LA32-TRAP-NEXT:    .cfi_def_cfa_offset 16
; LA32-TRAP-NEXT:    st.w $ra, $sp, 12 # 4-byte Folded Spill
; LA32-TRAP-NEXT:    .cfi_offset 1, -4
; LA32-TRAP-NEXT:    bl __umoddi3
; LA32-TRAP-NEXT:    ld.w $ra, $sp, 12 # 4-byte Folded Reload
; LA32-TRAP-NEXT:    addi.w $sp, $sp, 16
; LA32-TRAP-NEXT:    jirl $zero, $ra, 0
;
; LA64-TRAP-LABEL: urem_i64:
; LA64-TRAP:       # %bb.0: # %entry
; LA64-TRAP-NEXT:    mod.du $a0, $a0, $a1
; LA64-TRAP-NEXT:    bnez $a1, 8
; LA64-TRAP-NEXT:    break 7
; LA64-TRAP-NEXT:    jirl $zero, $ra, 0
entry:
  %r = urem i64 %a, %b
  ret i64 %r
}
