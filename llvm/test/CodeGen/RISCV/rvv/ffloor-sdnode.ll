; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+d,+zvfh,+zfbfmin,+zvfbfmin,+v \
; RUN:     -target-abi=ilp32d -verify-machineinstrs < %s | FileCheck %s \
; RUN:     --check-prefixes=CHECK,ZVFH,RV32ZFH
; RUN: llc -mtriple=riscv64 -mattr=+d,+zvfh,+zfbfmin,+zvfbfmin,+v \
; RUN:     -target-abi=lp64d -verify-machineinstrs < %s | FileCheck %s \
; RUN:     --check-prefixes=CHECK,ZVFH,RV64ZFH
; RUN: llc -mtriple=riscv32 -mattr=+d,+zfhmin,+zvfhmin,+zfbfmin,+zvfbfmin,+v \
; RUN:     -target-abi=ilp32d -verify-machineinstrs < %s | FileCheck %s \
; RUN:     --check-prefixes=CHECK,ZVFHMIN,RV32ZFHMIN
; RUN: llc -mtriple=riscv64 -mattr=+d,+zfhmin,+zvfhmin,+zfbfmin,+zvfbfmin,+v \
; RUN:     -target-abi=lp64d -verify-machineinstrs < %s | FileCheck %s \
; RUN:     --check-prefixes=CHECK,ZVFHMIN,RV64ZFHMIN

define <vscale x 1 x bfloat> @floor_nxv1bf16(<vscale x 1 x bfloat> %x) {
; CHECK-LABEL: floor_nxv1bf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, mf4, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v9, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
; CHECK-NEXT:    vfabs.v v8, v9
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v8, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v8, v9, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, mf2, ta, mu
; CHECK-NEXT:    vfsgnj.vv v9, v8, v9, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, mf4, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v8, v9
; CHECK-NEXT:    ret
  %a = call <vscale x 1 x bfloat> @llvm.floor.nxv1bf16(<vscale x 1 x bfloat> %x)
  ret <vscale x 1 x bfloat> %a
}
declare <vscale x 1 x bfloat> @llvm.floor.nxv1bf16(<vscale x 1 x bfloat>)

define <vscale x 2 x bfloat> @floor_nxv2bf16(<vscale x 2 x bfloat> %x) {
; CHECK-LABEL: floor_nxv2bf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v9, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    vsetvli zero, zero, e32, m1, ta, ma
; CHECK-NEXT:    vfabs.v v8, v9
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v8, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v8, v9, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m1, ta, mu
; CHECK-NEXT:    vfsgnj.vv v9, v8, v9, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, mf2, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v8, v9
; CHECK-NEXT:    ret
  %a = call <vscale x 2 x bfloat> @llvm.floor.nxv2bf16(<vscale x 2 x bfloat> %x)
  ret <vscale x 2 x bfloat> %a
}
declare <vscale x 2 x bfloat> @llvm.floor.nxv2bf16(<vscale x 2 x bfloat>)

define <vscale x 4 x bfloat> @floor_nxv4bf16(<vscale x 4 x bfloat> %x) {
; CHECK-LABEL: floor_nxv4bf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m1, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v10, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    vsetvli zero, zero, e32, m2, ta, ma
; CHECK-NEXT:    vfabs.v v8, v10
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v8, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v8, v10, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; CHECK-NEXT:    vfsgnj.vv v10, v8, v10, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v8, v10
; CHECK-NEXT:    ret
  %a = call <vscale x 4 x bfloat> @llvm.floor.nxv4bf16(<vscale x 4 x bfloat> %x)
  ret <vscale x 4 x bfloat> %a
}
declare <vscale x 4 x bfloat> @llvm.floor.nxv4bf16(<vscale x 4 x bfloat>)

define <vscale x 8 x bfloat> @floor_nxv8bf16(<vscale x 8 x bfloat> %x) {
; CHECK-LABEL: floor_nxv8bf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m2, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v12, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    vsetvli zero, zero, e32, m4, ta, ma
; CHECK-NEXT:    vfabs.v v8, v12
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v8, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v8, v12, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m4, ta, mu
; CHECK-NEXT:    vfsgnj.vv v12, v8, v12, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m2, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v8, v12
; CHECK-NEXT:    ret
  %a = call <vscale x 8 x bfloat> @llvm.floor.nxv8bf16(<vscale x 8 x bfloat> %x)
  ret <vscale x 8 x bfloat> %a
}
declare <vscale x 8 x bfloat> @llvm.floor.nxv8bf16(<vscale x 8 x bfloat>)

define <vscale x 16 x bfloat> @floor_nxv16bf16(<vscale x 16 x bfloat> %x) {
; CHECK-LABEL: floor_nxv16bf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v16, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; CHECK-NEXT:    vfabs.v v8, v16
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v8, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v8, v16, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; CHECK-NEXT:    vfsgnj.vv v16, v8, v16, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v8, v16
; CHECK-NEXT:    ret
  %a = call <vscale x 16 x bfloat> @llvm.floor.nxv16bf16(<vscale x 16 x bfloat> %x)
  ret <vscale x 16 x bfloat> %a
}
declare <vscale x 16 x bfloat> @llvm.floor.nxv16bf16(<vscale x 16 x bfloat>)

define <vscale x 32 x bfloat> @floor_nxv32bf16(<vscale x 32 x bfloat> %x) {
; CHECK-LABEL: floor_nxv32bf16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v16, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; CHECK-NEXT:    vfabs.v v24, v16
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v24, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v24, v16, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v24, v24, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; CHECK-NEXT:    vfsgnj.vv v16, v24, v16, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; CHECK-NEXT:    vfwcvtbf16.f.f.v v24, v12
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; CHECK-NEXT:    vfabs.v v8, v24
; CHECK-NEXT:    vmflt.vf v0, v8, fa5
; CHECK-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v8, v16
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; CHECK-NEXT:    vfcvt.x.f.v v16, v24, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; CHECK-NEXT:    vfsgnj.vv v24, v16, v24, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; CHECK-NEXT:    vfncvtbf16.f.f.w v12, v24
; CHECK-NEXT:    ret
  %a = call <vscale x 32 x bfloat> @llvm.floor.nxv32bf16(<vscale x 32 x bfloat> %x)
  ret <vscale x 32 x bfloat> %a
}
declare <vscale x 32 x bfloat> @llvm.floor.nxv32bf16(<vscale x 32 x bfloat>)

define <vscale x 1 x half> @floor_nxv1f16(<vscale x 1 x half> %x) {
; ZVFH-LABEL: floor_nxv1f16:
; ZVFH:       # %bb.0:
; ZVFH-NEXT:    vsetvli a0, zero, e16, mf4, ta, ma
; ZVFH-NEXT:    vfabs.v v9, v8
; ZVFH-NEXT:    li a0, 25
; ZVFH-NEXT:    slli a0, a0, 10
; ZVFH-NEXT:    fmv.h.x fa5, a0
; ZVFH-NEXT:    vmflt.vf v0, v9, fa5
; ZVFH-NEXT:    fsrmi a0, 2
; ZVFH-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; ZVFH-NEXT:    fsrm a0
; ZVFH-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; ZVFH-NEXT:    vsetvli zero, zero, e16, mf4, ta, mu
; ZVFH-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; ZVFH-NEXT:    ret
;
; ZVFHMIN-LABEL: floor_nxv1f16:
; ZVFHMIN:       # %bb.0:
; ZVFHMIN-NEXT:    vsetvli a0, zero, e16, mf4, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v9, v8
; ZVFHMIN-NEXT:    lui a0, 307200
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, mf2, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v8, v9
; ZVFHMIN-NEXT:    fmv.w.x fa5, a0
; ZVFHMIN-NEXT:    vmflt.vf v0, v8, fa5
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vfcvt.x.f.v v8, v9, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, mf2, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v9, v8, v9, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, mf4, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v8, v9
; ZVFHMIN-NEXT:    ret
  %a = call <vscale x 1 x half> @llvm.floor.nxv1f16(<vscale x 1 x half> %x)
  ret <vscale x 1 x half> %a
}
declare <vscale x 1 x half> @llvm.floor.nxv1f16(<vscale x 1 x half>)

define <vscale x 2 x half> @floor_nxv2f16(<vscale x 2 x half> %x) {
; ZVFH-LABEL: floor_nxv2f16:
; ZVFH:       # %bb.0:
; ZVFH-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; ZVFH-NEXT:    vfabs.v v9, v8
; ZVFH-NEXT:    li a0, 25
; ZVFH-NEXT:    slli a0, a0, 10
; ZVFH-NEXT:    fmv.h.x fa5, a0
; ZVFH-NEXT:    vmflt.vf v0, v9, fa5
; ZVFH-NEXT:    fsrmi a0, 2
; ZVFH-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; ZVFH-NEXT:    fsrm a0
; ZVFH-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; ZVFH-NEXT:    vsetvli zero, zero, e16, mf2, ta, mu
; ZVFH-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; ZVFH-NEXT:    ret
;
; ZVFHMIN-LABEL: floor_nxv2f16:
; ZVFHMIN:       # %bb.0:
; ZVFHMIN-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v9, v8
; ZVFHMIN-NEXT:    lui a0, 307200
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m1, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v8, v9
; ZVFHMIN-NEXT:    fmv.w.x fa5, a0
; ZVFHMIN-NEXT:    vmflt.vf v0, v8, fa5
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vfcvt.x.f.v v8, v9, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m1, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v9, v8, v9, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, mf2, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v8, v9
; ZVFHMIN-NEXT:    ret
  %a = call <vscale x 2 x half> @llvm.floor.nxv2f16(<vscale x 2 x half> %x)
  ret <vscale x 2 x half> %a
}
declare <vscale x 2 x half> @llvm.floor.nxv2f16(<vscale x 2 x half>)

define <vscale x 4 x half> @floor_nxv4f16(<vscale x 4 x half> %x) {
; ZVFH-LABEL: floor_nxv4f16:
; ZVFH:       # %bb.0:
; ZVFH-NEXT:    vsetvli a0, zero, e16, m1, ta, ma
; ZVFH-NEXT:    vfabs.v v9, v8
; ZVFH-NEXT:    li a0, 25
; ZVFH-NEXT:    slli a0, a0, 10
; ZVFH-NEXT:    fmv.h.x fa5, a0
; ZVFH-NEXT:    vmflt.vf v0, v9, fa5
; ZVFH-NEXT:    fsrmi a0, 2
; ZVFH-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; ZVFH-NEXT:    fsrm a0
; ZVFH-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; ZVFH-NEXT:    vsetvli zero, zero, e16, m1, ta, mu
; ZVFH-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; ZVFH-NEXT:    ret
;
; ZVFHMIN-LABEL: floor_nxv4f16:
; ZVFHMIN:       # %bb.0:
; ZVFHMIN-NEXT:    vsetvli a0, zero, e16, m1, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v10, v8
; ZVFHMIN-NEXT:    lui a0, 307200
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m2, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v8, v10
; ZVFHMIN-NEXT:    fmv.w.x fa5, a0
; ZVFHMIN-NEXT:    vmflt.vf v0, v8, fa5
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vfcvt.x.f.v v8, v10, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v10, v8, v10, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, m1, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v8, v10
; ZVFHMIN-NEXT:    ret
  %a = call <vscale x 4 x half> @llvm.floor.nxv4f16(<vscale x 4 x half> %x)
  ret <vscale x 4 x half> %a
}
declare <vscale x 4 x half> @llvm.floor.nxv4f16(<vscale x 4 x half>)

define <vscale x 8 x half> @floor_nxv8f16(<vscale x 8 x half> %x) {
; ZVFH-LABEL: floor_nxv8f16:
; ZVFH:       # %bb.0:
; ZVFH-NEXT:    vsetvli a0, zero, e16, m2, ta, ma
; ZVFH-NEXT:    vfabs.v v10, v8
; ZVFH-NEXT:    li a0, 25
; ZVFH-NEXT:    slli a0, a0, 10
; ZVFH-NEXT:    fmv.h.x fa5, a0
; ZVFH-NEXT:    vmflt.vf v0, v10, fa5
; ZVFH-NEXT:    fsrmi a0, 2
; ZVFH-NEXT:    vfcvt.x.f.v v10, v8, v0.t
; ZVFH-NEXT:    fsrm a0
; ZVFH-NEXT:    vfcvt.f.x.v v10, v10, v0.t
; ZVFH-NEXT:    vsetvli zero, zero, e16, m2, ta, mu
; ZVFH-NEXT:    vfsgnj.vv v8, v10, v8, v0.t
; ZVFH-NEXT:    ret
;
; ZVFHMIN-LABEL: floor_nxv8f16:
; ZVFHMIN:       # %bb.0:
; ZVFHMIN-NEXT:    vsetvli a0, zero, e16, m2, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v12, v8
; ZVFHMIN-NEXT:    lui a0, 307200
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m4, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v8, v12
; ZVFHMIN-NEXT:    fmv.w.x fa5, a0
; ZVFHMIN-NEXT:    vmflt.vf v0, v8, fa5
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vfcvt.x.f.v v8, v12, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m4, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v12, v8, v12, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, m2, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v8, v12
; ZVFHMIN-NEXT:    ret
  %a = call <vscale x 8 x half> @llvm.floor.nxv8f16(<vscale x 8 x half> %x)
  ret <vscale x 8 x half> %a
}
declare <vscale x 8 x half> @llvm.floor.nxv8f16(<vscale x 8 x half>)

define <vscale x 16 x half> @floor_nxv16f16(<vscale x 16 x half> %x) {
; ZVFH-LABEL: floor_nxv16f16:
; ZVFH:       # %bb.0:
; ZVFH-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; ZVFH-NEXT:    vfabs.v v12, v8
; ZVFH-NEXT:    li a0, 25
; ZVFH-NEXT:    slli a0, a0, 10
; ZVFH-NEXT:    fmv.h.x fa5, a0
; ZVFH-NEXT:    vmflt.vf v0, v12, fa5
; ZVFH-NEXT:    fsrmi a0, 2
; ZVFH-NEXT:    vfcvt.x.f.v v12, v8, v0.t
; ZVFH-NEXT:    fsrm a0
; ZVFH-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; ZVFH-NEXT:    vsetvli zero, zero, e16, m4, ta, mu
; ZVFH-NEXT:    vfsgnj.vv v8, v12, v8, v0.t
; ZVFH-NEXT:    ret
;
; ZVFHMIN-LABEL: floor_nxv16f16:
; ZVFHMIN:       # %bb.0:
; ZVFHMIN-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v16, v8
; ZVFHMIN-NEXT:    lui a0, 307200
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v8, v16
; ZVFHMIN-NEXT:    fmv.w.x fa5, a0
; ZVFHMIN-NEXT:    vmflt.vf v0, v8, fa5
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vfcvt.x.f.v v8, v16, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v8, v8, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v16, v8, v16, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v8, v16
; ZVFHMIN-NEXT:    ret
  %a = call <vscale x 16 x half> @llvm.floor.nxv16f16(<vscale x 16 x half> %x)
  ret <vscale x 16 x half> %a
}
declare <vscale x 16 x half> @llvm.floor.nxv16f16(<vscale x 16 x half>)

define <vscale x 32 x half> @floor_nxv32f16(<vscale x 32 x half> %x) {
; ZVFH-LABEL: floor_nxv32f16:
; ZVFH:       # %bb.0:
; ZVFH-NEXT:    vsetvli a0, zero, e16, m8, ta, ma
; ZVFH-NEXT:    vfabs.v v16, v8
; ZVFH-NEXT:    li a0, 25
; ZVFH-NEXT:    slli a0, a0, 10
; ZVFH-NEXT:    fmv.h.x fa5, a0
; ZVFH-NEXT:    vmflt.vf v0, v16, fa5
; ZVFH-NEXT:    fsrmi a0, 2
; ZVFH-NEXT:    vfcvt.x.f.v v16, v8, v0.t
; ZVFH-NEXT:    fsrm a0
; ZVFH-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; ZVFH-NEXT:    vsetvli zero, zero, e16, m8, ta, mu
; ZVFH-NEXT:    vfsgnj.vv v8, v16, v8, v0.t
; ZVFH-NEXT:    ret
;
; ZVFHMIN-LABEL: floor_nxv32f16:
; ZVFHMIN:       # %bb.0:
; ZVFHMIN-NEXT:    vsetvli a0, zero, e16, m4, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v16, v8
; ZVFHMIN-NEXT:    lui a0, 307200
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v24, v16
; ZVFHMIN-NEXT:    fmv.w.x fa5, a0
; ZVFHMIN-NEXT:    vmflt.vf v0, v24, fa5
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vfcvt.x.f.v v24, v16, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v24, v24, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v16, v24, v16, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; ZVFHMIN-NEXT:    vfwcvt.f.f.v v24, v12
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; ZVFHMIN-NEXT:    vfabs.v v8, v24
; ZVFHMIN-NEXT:    vmflt.vf v0, v8, fa5
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v8, v16
; ZVFHMIN-NEXT:    fsrmi a0, 2
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, ma
; ZVFHMIN-NEXT:    vfcvt.x.f.v v16, v24, v0.t
; ZVFHMIN-NEXT:    fsrm a0
; ZVFHMIN-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; ZVFHMIN-NEXT:    vfsgnj.vv v24, v16, v24, v0.t
; ZVFHMIN-NEXT:    vsetvli zero, zero, e16, m4, ta, ma
; ZVFHMIN-NEXT:    vfncvt.f.f.w v12, v24
; ZVFHMIN-NEXT:    ret
  %a = call <vscale x 32 x half> @llvm.floor.nxv32f16(<vscale x 32 x half> %x)
  ret <vscale x 32 x half> %a
}
declare <vscale x 32 x half> @llvm.floor.nxv32f16(<vscale x 32 x half>)

define <vscale x 1 x float> @floor_nxv1f32(<vscale x 1 x float> %x) {
; CHECK-LABEL: floor_nxv1f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, mf2, ta, ma
; CHECK-NEXT:    vfabs.v v9, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v9, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, mf2, ta, mu
; CHECK-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; CHECK-NEXT:    ret
  %a = call <vscale x 1 x float> @llvm.floor.nxv1f32(<vscale x 1 x float> %x)
  ret <vscale x 1 x float> %a
}
declare <vscale x 1 x float> @llvm.floor.nxv1f32(<vscale x 1 x float>)

define <vscale x 2 x float> @floor_nxv2f32(<vscale x 2 x float> %x) {
; CHECK-LABEL: floor_nxv2f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vfabs.v v9, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v9, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m1, ta, mu
; CHECK-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; CHECK-NEXT:    ret
  %a = call <vscale x 2 x float> @llvm.floor.nxv2f32(<vscale x 2 x float> %x)
  ret <vscale x 2 x float> %a
}
declare <vscale x 2 x float> @llvm.floor.nxv2f32(<vscale x 2 x float>)

define <vscale x 4 x float> @floor_nxv4f32(<vscale x 4 x float> %x) {
; CHECK-LABEL: floor_nxv4f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m2, ta, ma
; CHECK-NEXT:    vfabs.v v10, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v10, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v10, v8, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v10, v10, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; CHECK-NEXT:    vfsgnj.vv v8, v10, v8, v0.t
; CHECK-NEXT:    ret
  %a = call <vscale x 4 x float> @llvm.floor.nxv4f32(<vscale x 4 x float> %x)
  ret <vscale x 4 x float> %a
}
declare <vscale x 4 x float> @llvm.floor.nxv4f32(<vscale x 4 x float>)

define <vscale x 8 x float> @floor_nxv8f32(<vscale x 8 x float> %x) {
; CHECK-LABEL: floor_nxv8f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m4, ta, ma
; CHECK-NEXT:    vfabs.v v12, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v12, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v12, v8, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m4, ta, mu
; CHECK-NEXT:    vfsgnj.vv v8, v12, v8, v0.t
; CHECK-NEXT:    ret
  %a = call <vscale x 8 x float> @llvm.floor.nxv8f32(<vscale x 8 x float> %x)
  ret <vscale x 8 x float> %a
}
declare <vscale x 8 x float> @llvm.floor.nxv8f32(<vscale x 8 x float>)

define <vscale x 16 x float> @floor_nxv16f32(<vscale x 16 x float> %x) {
; CHECK-LABEL: floor_nxv16f32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m8, ta, ma
; CHECK-NEXT:    vfabs.v v16, v8
; CHECK-NEXT:    lui a0, 307200
; CHECK-NEXT:    fmv.w.x fa5, a0
; CHECK-NEXT:    vmflt.vf v0, v16, fa5
; CHECK-NEXT:    fsrmi a0, 2
; CHECK-NEXT:    vfcvt.x.f.v v16, v8, v0.t
; CHECK-NEXT:    fsrm a0
; CHECK-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; CHECK-NEXT:    vsetvli zero, zero, e32, m8, ta, mu
; CHECK-NEXT:    vfsgnj.vv v8, v16, v8, v0.t
; CHECK-NEXT:    ret
  %a = call <vscale x 16 x float> @llvm.floor.nxv16f32(<vscale x 16 x float> %x)
  ret <vscale x 16 x float> %a
}
declare <vscale x 16 x float> @llvm.floor.nxv16f32(<vscale x 16 x float>)

define <vscale x 1 x double> @floor_nxv1f64(<vscale x 1 x double> %x) {
; RV32ZFH-LABEL: floor_nxv1f64:
; RV32ZFH:       # %bb.0:
; RV32ZFH-NEXT:    lui a0, %hi(.LCPI17_0)
; RV32ZFH-NEXT:    fld fa5, %lo(.LCPI17_0)(a0)
; RV32ZFH-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV32ZFH-NEXT:    vfabs.v v9, v8
; RV32ZFH-NEXT:    vmflt.vf v0, v9, fa5
; RV32ZFH-NEXT:    fsrmi a0, 2
; RV32ZFH-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; RV32ZFH-NEXT:    fsrm a0
; RV32ZFH-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; RV32ZFH-NEXT:    vsetvli zero, zero, e64, m1, ta, mu
; RV32ZFH-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; RV32ZFH-NEXT:    ret
;
; RV64ZFH-LABEL: floor_nxv1f64:
; RV64ZFH:       # %bb.0:
; RV64ZFH-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV64ZFH-NEXT:    vfabs.v v9, v8
; RV64ZFH-NEXT:    li a0, 1075
; RV64ZFH-NEXT:    slli a0, a0, 52
; RV64ZFH-NEXT:    fmv.d.x fa5, a0
; RV64ZFH-NEXT:    vmflt.vf v0, v9, fa5
; RV64ZFH-NEXT:    fsrmi a0, 2
; RV64ZFH-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; RV64ZFH-NEXT:    fsrm a0
; RV64ZFH-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; RV64ZFH-NEXT:    vsetvli zero, zero, e64, m1, ta, mu
; RV64ZFH-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; RV64ZFH-NEXT:    ret
;
; RV32ZFHMIN-LABEL: floor_nxv1f64:
; RV32ZFHMIN:       # %bb.0:
; RV32ZFHMIN-NEXT:    lui a0, %hi(.LCPI17_0)
; RV32ZFHMIN-NEXT:    fld fa5, %lo(.LCPI17_0)(a0)
; RV32ZFHMIN-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV32ZFHMIN-NEXT:    vfabs.v v9, v8
; RV32ZFHMIN-NEXT:    vmflt.vf v0, v9, fa5
; RV32ZFHMIN-NEXT:    fsrmi a0, 2
; RV32ZFHMIN-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; RV32ZFHMIN-NEXT:    fsrm a0
; RV32ZFHMIN-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; RV32ZFHMIN-NEXT:    vsetvli zero, zero, e64, m1, ta, mu
; RV32ZFHMIN-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; RV32ZFHMIN-NEXT:    ret
;
; RV64ZFHMIN-LABEL: floor_nxv1f64:
; RV64ZFHMIN:       # %bb.0:
; RV64ZFHMIN-NEXT:    vsetvli a0, zero, e64, m1, ta, ma
; RV64ZFHMIN-NEXT:    vfabs.v v9, v8
; RV64ZFHMIN-NEXT:    li a0, 1075
; RV64ZFHMIN-NEXT:    slli a0, a0, 52
; RV64ZFHMIN-NEXT:    fmv.d.x fa5, a0
; RV64ZFHMIN-NEXT:    vmflt.vf v0, v9, fa5
; RV64ZFHMIN-NEXT:    fsrmi a0, 2
; RV64ZFHMIN-NEXT:    vfcvt.x.f.v v9, v8, v0.t
; RV64ZFHMIN-NEXT:    fsrm a0
; RV64ZFHMIN-NEXT:    vfcvt.f.x.v v9, v9, v0.t
; RV64ZFHMIN-NEXT:    vsetvli zero, zero, e64, m1, ta, mu
; RV64ZFHMIN-NEXT:    vfsgnj.vv v8, v9, v8, v0.t
; RV64ZFHMIN-NEXT:    ret
  %a = call <vscale x 1 x double> @llvm.floor.nxv1f64(<vscale x 1 x double> %x)
  ret <vscale x 1 x double> %a
}
declare <vscale x 1 x double> @llvm.floor.nxv1f64(<vscale x 1 x double>)

define <vscale x 2 x double> @floor_nxv2f64(<vscale x 2 x double> %x) {
; RV32ZFH-LABEL: floor_nxv2f64:
; RV32ZFH:       # %bb.0:
; RV32ZFH-NEXT:    lui a0, %hi(.LCPI18_0)
; RV32ZFH-NEXT:    fld fa5, %lo(.LCPI18_0)(a0)
; RV32ZFH-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV32ZFH-NEXT:    vfabs.v v10, v8
; RV32ZFH-NEXT:    vmflt.vf v0, v10, fa5
; RV32ZFH-NEXT:    fsrmi a0, 2
; RV32ZFH-NEXT:    vfcvt.x.f.v v10, v8, v0.t
; RV32ZFH-NEXT:    fsrm a0
; RV32ZFH-NEXT:    vfcvt.f.x.v v10, v10, v0.t
; RV32ZFH-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; RV32ZFH-NEXT:    vfsgnj.vv v8, v10, v8, v0.t
; RV32ZFH-NEXT:    ret
;
; RV64ZFH-LABEL: floor_nxv2f64:
; RV64ZFH:       # %bb.0:
; RV64ZFH-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV64ZFH-NEXT:    vfabs.v v10, v8
; RV64ZFH-NEXT:    li a0, 1075
; RV64ZFH-NEXT:    slli a0, a0, 52
; RV64ZFH-NEXT:    fmv.d.x fa5, a0
; RV64ZFH-NEXT:    vmflt.vf v0, v10, fa5
; RV64ZFH-NEXT:    fsrmi a0, 2
; RV64ZFH-NEXT:    vfcvt.x.f.v v10, v8, v0.t
; RV64ZFH-NEXT:    fsrm a0
; RV64ZFH-NEXT:    vfcvt.f.x.v v10, v10, v0.t
; RV64ZFH-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; RV64ZFH-NEXT:    vfsgnj.vv v8, v10, v8, v0.t
; RV64ZFH-NEXT:    ret
;
; RV32ZFHMIN-LABEL: floor_nxv2f64:
; RV32ZFHMIN:       # %bb.0:
; RV32ZFHMIN-NEXT:    lui a0, %hi(.LCPI18_0)
; RV32ZFHMIN-NEXT:    fld fa5, %lo(.LCPI18_0)(a0)
; RV32ZFHMIN-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV32ZFHMIN-NEXT:    vfabs.v v10, v8
; RV32ZFHMIN-NEXT:    vmflt.vf v0, v10, fa5
; RV32ZFHMIN-NEXT:    fsrmi a0, 2
; RV32ZFHMIN-NEXT:    vfcvt.x.f.v v10, v8, v0.t
; RV32ZFHMIN-NEXT:    fsrm a0
; RV32ZFHMIN-NEXT:    vfcvt.f.x.v v10, v10, v0.t
; RV32ZFHMIN-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; RV32ZFHMIN-NEXT:    vfsgnj.vv v8, v10, v8, v0.t
; RV32ZFHMIN-NEXT:    ret
;
; RV64ZFHMIN-LABEL: floor_nxv2f64:
; RV64ZFHMIN:       # %bb.0:
; RV64ZFHMIN-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; RV64ZFHMIN-NEXT:    vfabs.v v10, v8
; RV64ZFHMIN-NEXT:    li a0, 1075
; RV64ZFHMIN-NEXT:    slli a0, a0, 52
; RV64ZFHMIN-NEXT:    fmv.d.x fa5, a0
; RV64ZFHMIN-NEXT:    vmflt.vf v0, v10, fa5
; RV64ZFHMIN-NEXT:    fsrmi a0, 2
; RV64ZFHMIN-NEXT:    vfcvt.x.f.v v10, v8, v0.t
; RV64ZFHMIN-NEXT:    fsrm a0
; RV64ZFHMIN-NEXT:    vfcvt.f.x.v v10, v10, v0.t
; RV64ZFHMIN-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; RV64ZFHMIN-NEXT:    vfsgnj.vv v8, v10, v8, v0.t
; RV64ZFHMIN-NEXT:    ret
  %a = call <vscale x 2 x double> @llvm.floor.nxv2f64(<vscale x 2 x double> %x)
  ret <vscale x 2 x double> %a
}
declare <vscale x 2 x double> @llvm.floor.nxv2f64(<vscale x 2 x double>)

define <vscale x 4 x double> @floor_nxv4f64(<vscale x 4 x double> %x) {
; RV32ZFH-LABEL: floor_nxv4f64:
; RV32ZFH:       # %bb.0:
; RV32ZFH-NEXT:    lui a0, %hi(.LCPI19_0)
; RV32ZFH-NEXT:    fld fa5, %lo(.LCPI19_0)(a0)
; RV32ZFH-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV32ZFH-NEXT:    vfabs.v v12, v8
; RV32ZFH-NEXT:    vmflt.vf v0, v12, fa5
; RV32ZFH-NEXT:    fsrmi a0, 2
; RV32ZFH-NEXT:    vfcvt.x.f.v v12, v8, v0.t
; RV32ZFH-NEXT:    fsrm a0
; RV32ZFH-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; RV32ZFH-NEXT:    vsetvli zero, zero, e64, m4, ta, mu
; RV32ZFH-NEXT:    vfsgnj.vv v8, v12, v8, v0.t
; RV32ZFH-NEXT:    ret
;
; RV64ZFH-LABEL: floor_nxv4f64:
; RV64ZFH:       # %bb.0:
; RV64ZFH-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV64ZFH-NEXT:    vfabs.v v12, v8
; RV64ZFH-NEXT:    li a0, 1075
; RV64ZFH-NEXT:    slli a0, a0, 52
; RV64ZFH-NEXT:    fmv.d.x fa5, a0
; RV64ZFH-NEXT:    vmflt.vf v0, v12, fa5
; RV64ZFH-NEXT:    fsrmi a0, 2
; RV64ZFH-NEXT:    vfcvt.x.f.v v12, v8, v0.t
; RV64ZFH-NEXT:    fsrm a0
; RV64ZFH-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; RV64ZFH-NEXT:    vsetvli zero, zero, e64, m4, ta, mu
; RV64ZFH-NEXT:    vfsgnj.vv v8, v12, v8, v0.t
; RV64ZFH-NEXT:    ret
;
; RV32ZFHMIN-LABEL: floor_nxv4f64:
; RV32ZFHMIN:       # %bb.0:
; RV32ZFHMIN-NEXT:    lui a0, %hi(.LCPI19_0)
; RV32ZFHMIN-NEXT:    fld fa5, %lo(.LCPI19_0)(a0)
; RV32ZFHMIN-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV32ZFHMIN-NEXT:    vfabs.v v12, v8
; RV32ZFHMIN-NEXT:    vmflt.vf v0, v12, fa5
; RV32ZFHMIN-NEXT:    fsrmi a0, 2
; RV32ZFHMIN-NEXT:    vfcvt.x.f.v v12, v8, v0.t
; RV32ZFHMIN-NEXT:    fsrm a0
; RV32ZFHMIN-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; RV32ZFHMIN-NEXT:    vsetvli zero, zero, e64, m4, ta, mu
; RV32ZFHMIN-NEXT:    vfsgnj.vv v8, v12, v8, v0.t
; RV32ZFHMIN-NEXT:    ret
;
; RV64ZFHMIN-LABEL: floor_nxv4f64:
; RV64ZFHMIN:       # %bb.0:
; RV64ZFHMIN-NEXT:    vsetvli a0, zero, e64, m4, ta, ma
; RV64ZFHMIN-NEXT:    vfabs.v v12, v8
; RV64ZFHMIN-NEXT:    li a0, 1075
; RV64ZFHMIN-NEXT:    slli a0, a0, 52
; RV64ZFHMIN-NEXT:    fmv.d.x fa5, a0
; RV64ZFHMIN-NEXT:    vmflt.vf v0, v12, fa5
; RV64ZFHMIN-NEXT:    fsrmi a0, 2
; RV64ZFHMIN-NEXT:    vfcvt.x.f.v v12, v8, v0.t
; RV64ZFHMIN-NEXT:    fsrm a0
; RV64ZFHMIN-NEXT:    vfcvt.f.x.v v12, v12, v0.t
; RV64ZFHMIN-NEXT:    vsetvli zero, zero, e64, m4, ta, mu
; RV64ZFHMIN-NEXT:    vfsgnj.vv v8, v12, v8, v0.t
; RV64ZFHMIN-NEXT:    ret
  %a = call <vscale x 4 x double> @llvm.floor.nxv4f64(<vscale x 4 x double> %x)
  ret <vscale x 4 x double> %a
}
declare <vscale x 4 x double> @llvm.floor.nxv4f64(<vscale x 4 x double>)

define <vscale x 8 x double> @floor_nxv8f64(<vscale x 8 x double> %x) {
; RV32ZFH-LABEL: floor_nxv8f64:
; RV32ZFH:       # %bb.0:
; RV32ZFH-NEXT:    lui a0, %hi(.LCPI20_0)
; RV32ZFH-NEXT:    fld fa5, %lo(.LCPI20_0)(a0)
; RV32ZFH-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV32ZFH-NEXT:    vfabs.v v16, v8
; RV32ZFH-NEXT:    vmflt.vf v0, v16, fa5
; RV32ZFH-NEXT:    fsrmi a0, 2
; RV32ZFH-NEXT:    vfcvt.x.f.v v16, v8, v0.t
; RV32ZFH-NEXT:    fsrm a0
; RV32ZFH-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; RV32ZFH-NEXT:    vsetvli zero, zero, e64, m8, ta, mu
; RV32ZFH-NEXT:    vfsgnj.vv v8, v16, v8, v0.t
; RV32ZFH-NEXT:    ret
;
; RV64ZFH-LABEL: floor_nxv8f64:
; RV64ZFH:       # %bb.0:
; RV64ZFH-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV64ZFH-NEXT:    vfabs.v v16, v8
; RV64ZFH-NEXT:    li a0, 1075
; RV64ZFH-NEXT:    slli a0, a0, 52
; RV64ZFH-NEXT:    fmv.d.x fa5, a0
; RV64ZFH-NEXT:    vmflt.vf v0, v16, fa5
; RV64ZFH-NEXT:    fsrmi a0, 2
; RV64ZFH-NEXT:    vfcvt.x.f.v v16, v8, v0.t
; RV64ZFH-NEXT:    fsrm a0
; RV64ZFH-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; RV64ZFH-NEXT:    vsetvli zero, zero, e64, m8, ta, mu
; RV64ZFH-NEXT:    vfsgnj.vv v8, v16, v8, v0.t
; RV64ZFH-NEXT:    ret
;
; RV32ZFHMIN-LABEL: floor_nxv8f64:
; RV32ZFHMIN:       # %bb.0:
; RV32ZFHMIN-NEXT:    lui a0, %hi(.LCPI20_0)
; RV32ZFHMIN-NEXT:    fld fa5, %lo(.LCPI20_0)(a0)
; RV32ZFHMIN-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV32ZFHMIN-NEXT:    vfabs.v v16, v8
; RV32ZFHMIN-NEXT:    vmflt.vf v0, v16, fa5
; RV32ZFHMIN-NEXT:    fsrmi a0, 2
; RV32ZFHMIN-NEXT:    vfcvt.x.f.v v16, v8, v0.t
; RV32ZFHMIN-NEXT:    fsrm a0
; RV32ZFHMIN-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; RV32ZFHMIN-NEXT:    vsetvli zero, zero, e64, m8, ta, mu
; RV32ZFHMIN-NEXT:    vfsgnj.vv v8, v16, v8, v0.t
; RV32ZFHMIN-NEXT:    ret
;
; RV64ZFHMIN-LABEL: floor_nxv8f64:
; RV64ZFHMIN:       # %bb.0:
; RV64ZFHMIN-NEXT:    vsetvli a0, zero, e64, m8, ta, ma
; RV64ZFHMIN-NEXT:    vfabs.v v16, v8
; RV64ZFHMIN-NEXT:    li a0, 1075
; RV64ZFHMIN-NEXT:    slli a0, a0, 52
; RV64ZFHMIN-NEXT:    fmv.d.x fa5, a0
; RV64ZFHMIN-NEXT:    vmflt.vf v0, v16, fa5
; RV64ZFHMIN-NEXT:    fsrmi a0, 2
; RV64ZFHMIN-NEXT:    vfcvt.x.f.v v16, v8, v0.t
; RV64ZFHMIN-NEXT:    fsrm a0
; RV64ZFHMIN-NEXT:    vfcvt.f.x.v v16, v16, v0.t
; RV64ZFHMIN-NEXT:    vsetvli zero, zero, e64, m8, ta, mu
; RV64ZFHMIN-NEXT:    vfsgnj.vv v8, v16, v8, v0.t
; RV64ZFHMIN-NEXT:    ret
  %a = call <vscale x 8 x double> @llvm.floor.nxv8f64(<vscale x 8 x double> %x)
  ret <vscale x 8 x double> %a
}
declare <vscale x 8 x double> @llvm.floor.nxv8f64(<vscale x 8 x double>)
