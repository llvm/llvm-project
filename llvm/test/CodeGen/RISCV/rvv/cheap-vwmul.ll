; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+v -verify-machineinstrs < %s | FileCheck %s
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs < %s | FileCheck %s
; RUN: llc -mtriple=riscv32 -mattr=+v,+cheap-vwmul -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-VWMUL
; RUN: llc -mtriple=riscv64 -mattr=+v,+cheap-vwmul -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-VWMUL
; RUN: llc -mtriple=riscv32 -mattr=+v,+zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-ZVBB
; RUN: llc -mtriple=riscv64 -mattr=+v,+zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-ZVBB
; RUN: llc -mtriple=riscv32 -mattr=+v,+cheap-vwmul,+zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-VWMUL-ZVBB
; RUN: llc -mtriple=riscv64 -mattr=+v,+cheap-vwmul,+zvbb -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK-VWMUL-ZVBB

define <vscale x 2 x i64> @sext_shl1_nxv2i64(<vscale x 2 x i32> %a) {
; CHECK-LABEL: sext_shl1_nxv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vwadd.vv v10, v8, v8
; CHECK-NEXT:    vmv2r.v v8, v10
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: sext_shl1_nxv2i64:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-VWMUL-NEXT:    vwadd.vv v10, v8, v8
; CHECK-VWMUL-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: sext_shl1_nxv2i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vwadd.vv v10, v8, v8
; CHECK-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: sext_shl1_nxv2i64:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwadd.vv v10, v8, v8
; CHECK-VWMUL-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = sext <vscale x 2 x i32> %a to <vscale x 2 x i64>
  %z = shl <vscale x 2 x i64> %x, splat (i64 1)
  ret <vscale x 2 x i64> %z
}

define <vscale x 2 x i64> @zext_shl1_nxv2i64(<vscale x 2 x i32> %a) {
; CHECK-LABEL: zext_shl1_nxv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vwaddu.vv v10, v8, v8
; CHECK-NEXT:    vmv2r.v v8, v10
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: zext_shl1_nxv2i64:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-VWMUL-NEXT:    vwaddu.vv v10, v8, v8
; CHECK-VWMUL-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: zext_shl1_nxv2i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v10, v8, 1
; CHECK-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: zext_shl1_nxv2i64:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v10, v8, 1
; CHECK-VWMUL-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = zext <vscale x 2 x i32> %a to <vscale x 2 x i64>
  %z = shl <vscale x 2 x i64> %x, splat (i64 1)
  ret <vscale x 2 x i64> %z
}

define <vscale x 2 x i64> @sext_shl2_nxv2i64(<vscale x 2 x i32> %a) {
; CHECK-LABEL: sext_shl2_nxv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; CHECK-NEXT:    vsext.vf2 v10, v8
; CHECK-NEXT:    vsll.vi v8, v10, 2
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: sext_shl2_nxv2i64:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a0, 4
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; CHECK-VWMUL-NEXT:    vwmulsu.vx v10, v8, a0
; CHECK-VWMUL-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: sext_shl2_nxv2i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; CHECK-ZVBB-NEXT:    vsext.vf2 v10, v8
; CHECK-ZVBB-NEXT:    vsll.vi v8, v10, 2
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: sext_shl2_nxv2i64:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    li a0, 4
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwmulsu.vx v10, v8, a0
; CHECK-VWMUL-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = sext <vscale x 2 x i32> %a to <vscale x 2 x i64>
  %z = shl <vscale x 2 x i64> %x, splat (i64 2)
  ret <vscale x 2 x i64> %z
}

define <vscale x 2 x i64> @zext_shl2_nxv2i64(<vscale x 2 x i32> %a) {
; CHECK-LABEL: zext_shl2_nxv2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e64, m2, ta, ma
; CHECK-NEXT:    vzext.vf2 v10, v8
; CHECK-NEXT:    vsll.vi v8, v10, 2
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: zext_shl2_nxv2i64:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a0, 4
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e32, m1, ta, ma
; CHECK-VWMUL-NEXT:    vwmulu.vx v10, v8, a0
; CHECK-VWMUL-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: zext_shl2_nxv2i64:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v10, v8, 2
; CHECK-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: zext_shl2_nxv2i64:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v10, v8, 2
; CHECK-VWMUL-ZVBB-NEXT:    vmv2r.v v8, v10
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = zext <vscale x 2 x i32> %a to <vscale x 2 x i64>
  %z = shl <vscale x 2 x i64> %x, splat (i64 2)
  ret <vscale x 2 x i64> %z
}

define <vscale x 2 x i32> @sext_shl12_nxv2i32(<vscale x 2 x i16> %a) {
; CHECK-LABEL: sext_shl12_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vsext.vf2 v9, v8
; CHECK-NEXT:    vsll.vi v8, v9, 12
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: sext_shl12_nxv2i32:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    lui a0, 1
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e16, mf2, ta, ma
; CHECK-VWMUL-NEXT:    vwmulsu.vx v9, v8, a0
; CHECK-VWMUL-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: sext_shl12_nxv2i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vsext.vf2 v9, v8
; CHECK-ZVBB-NEXT:    vsll.vi v8, v9, 12
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: sext_shl12_nxv2i32:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    lui a0, 1
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a1, zero, e16, mf2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwmulsu.vx v9, v8, a0
; CHECK-VWMUL-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = sext <vscale x 2 x i16> %a to <vscale x 2 x i32>
  %z = shl <vscale x 2 x i32> %x, splat (i32 12)
  ret <vscale x 2 x i32> %z
}

define <vscale x 2 x i32> @zext_shl12_nxv2i32(<vscale x 2 x i16> %a) {
; CHECK-LABEL: zext_shl12_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vzext.vf2 v9, v8
; CHECK-NEXT:    vsll.vi v8, v9, 12
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: zext_shl12_nxv2i32:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    lui a0, 1
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e16, mf2, ta, ma
; CHECK-VWMUL-NEXT:    vwmulu.vx v9, v8, a0
; CHECK-VWMUL-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: zext_shl12_nxv2i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v9, v8, 12
; CHECK-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: zext_shl12_nxv2i32:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v9, v8, 12
; CHECK-VWMUL-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = zext <vscale x 2 x i16> %a to <vscale x 2 x i32>
  %z = shl <vscale x 2 x i32> %x, splat (i32 12)
  ret <vscale x 2 x i32> %z
}

define <vscale x 2 x i16> @sext_shl3_nxv2i16(<vscale x 2 x i8> %a) {
; CHECK-LABEL: sext_shl3_nxv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-NEXT:    vsext.vf2 v9, v8
; CHECK-NEXT:    vsll.vi v8, v9, 3
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: sext_shl3_nxv2i16:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a0, 8
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e8, mf4, ta, ma
; CHECK-VWMUL-NEXT:    vwmulsu.vx v9, v8, a0
; CHECK-VWMUL-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: sext_shl3_nxv2i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vsext.vf2 v9, v8
; CHECK-ZVBB-NEXT:    vsll.vi v8, v9, 3
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: sext_shl3_nxv2i16:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    li a0, 8
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a1, zero, e8, mf4, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwmulsu.vx v9, v8, a0
; CHECK-VWMUL-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = sext <vscale x 2 x i8> %a to <vscale x 2 x i16>
  %z = shl <vscale x 2 x i16> %x, splat (i16 3)
  ret <vscale x 2 x i16> %z
}

define <vscale x 2 x i16> @zext_shl3_nxv2i16(<vscale x 2 x i8> %a) {
; CHECK-LABEL: zext_shl3_nxv2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-NEXT:    vzext.vf2 v9, v8
; CHECK-NEXT:    vsll.vi v8, v9, 3
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: zext_shl3_nxv2i16:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a0, 8
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e8, mf4, ta, ma
; CHECK-VWMUL-NEXT:    vwmulu.vx v9, v8, a0
; CHECK-VWMUL-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: zext_shl3_nxv2i16:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e8, mf4, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v9, v8, 3
; CHECK-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: zext_shl3_nxv2i16:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a0, zero, e8, mf4, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v9, v8, 3
; CHECK-VWMUL-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = zext <vscale x 2 x i8> %a to <vscale x 2 x i16>
  %z = shl <vscale x 2 x i16> %x, splat (i16 3)
  ret <vscale x 2 x i16> %z
}

define <vscale x 2 x i32> @sext_shl3_add_nxv2i32(<vscale x 2 x i16> %a, <vscale x 2 x i32> %b) {
; CHECK-LABEL: sext_shl3_add_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vsext.vf2 v10, v8
; CHECK-NEXT:    vsll.vi v8, v10, 3
; CHECK-NEXT:    vadd.vv v8, v9, v8
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: sext_shl3_add_nxv2i32:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a0, 8
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e16, mf2, ta, ma
; CHECK-VWMUL-NEXT:    vwmaccus.vx v9, a0, v8
; CHECK-VWMUL-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: sext_shl3_add_nxv2i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vsext.vf2 v10, v8
; CHECK-ZVBB-NEXT:    vsll.vi v8, v10, 3
; CHECK-ZVBB-NEXT:    vadd.vv v8, v9, v8
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: sext_shl3_add_nxv2i32:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    li a0, 8
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a1, zero, e16, mf2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwmaccus.vx v9, a0, v8
; CHECK-VWMUL-ZVBB-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = sext <vscale x 2 x i16> %a to <vscale x 2 x i32>
  %y = shl <vscale x 2 x i32> %x, splat (i32 3)
  %z = add <vscale x 2 x i32> %b, %y
  ret <vscale x 2 x i32> %z
}

define <vscale x 2 x i32> @zext_shl3_add_nxv2i32(<vscale x 2 x i16> %a, <vscale x 2 x i32> %b) {
; CHECK-LABEL: zext_shl3_add_nxv2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a0, zero, e32, m1, ta, ma
; CHECK-NEXT:    vzext.vf2 v10, v8
; CHECK-NEXT:    vsll.vi v8, v10, 3
; CHECK-NEXT:    vadd.vv v8, v9, v8
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: zext_shl3_add_nxv2i32:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a0, 8
; CHECK-VWMUL-NEXT:    vsetvli a1, zero, e16, mf2, ta, ma
; CHECK-VWMUL-NEXT:    vwmaccu.vx v9, a0, v8
; CHECK-VWMUL-NEXT:    vmv1r.v v8, v9
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: zext_shl3_add_nxv2i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v10, v8, 3
; CHECK-ZVBB-NEXT:    vsetvli zero, zero, e32, m1, ta, ma
; CHECK-ZVBB-NEXT:    vadd.vv v8, v9, v10
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: zext_shl3_add_nxv2i32:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli a0, zero, e16, mf2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v10, v8, 3
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli zero, zero, e32, m1, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vadd.vv v8, v9, v10
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %x = zext <vscale x 2 x i16> %a to <vscale x 2 x i32>
  %y = shl <vscale x 2 x i32> %x, splat (i32 3)
  %z = add <vscale x 2 x i32> %b, %y
  ret <vscale x 2 x i32> %z
}

define <8 x i32> @mgather_baseidx_zext_v8i8_v8i32(ptr %base, <8 x i8> %idxs, <8 x i1> %m, <8 x i32> %passthru) {
; CHECK-LABEL: mgather_baseidx_zext_v8i8_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; CHECK-NEXT:    vzext.vf2 v9, v8
; CHECK-NEXT:    vsll.vi v8, v9, 2
; CHECK-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; CHECK-NEXT:    vluxei16.v v10, (a0), v8, v0.t
; CHECK-NEXT:    vmv.v.v v8, v10
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: mgather_baseidx_zext_v8i8_v8i32:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a1, 4
; CHECK-VWMUL-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-VWMUL-NEXT:    vwmulu.vx v9, v8, a1
; CHECK-VWMUL-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; CHECK-VWMUL-NEXT:    vluxei16.v v10, (a0), v9, v0.t
; CHECK-VWMUL-NEXT:    vmv.v.v v8, v10
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: mgather_baseidx_zext_v8i8_v8i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v9, v8, 2
; CHECK-ZVBB-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; CHECK-ZVBB-NEXT:    vluxei16.v v10, (a0), v9, v0.t
; CHECK-ZVBB-NEXT:    vmv.v.v v8, v10
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: mgather_baseidx_zext_v8i8_v8i32:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v9, v8, 2
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli zero, zero, e32, m2, ta, mu
; CHECK-VWMUL-ZVBB-NEXT:    vluxei16.v v10, (a0), v9, v0.t
; CHECK-VWMUL-ZVBB-NEXT:    vmv.v.v v8, v10
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %eidxs = zext <8 x i8> %idxs to <8 x i32>
  %ptrs = getelementptr inbounds i32, ptr %base, <8 x i32> %eidxs
  %v = call <8 x i32> @llvm.masked.gather.v8i32.v8p0(<8 x ptr> %ptrs, i32 4, <8 x i1> %m, <8 x i32> %passthru)
  ret <8 x i32> %v
}

define <8 x i32> @vpgather_baseidx_zext_v8i8_v8i32(ptr %base, <8 x i8> %idxs, <8 x i1> %m, i32 zeroext %evl) {
; CHECK-LABEL: vpgather_baseidx_zext_v8i8_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; CHECK-NEXT:    vzext.vf2 v9, v8
; CHECK-NEXT:    vsll.vi v10, v9, 2
; CHECK-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-NEXT:    vluxei16.v v8, (a0), v10, v0.t
; CHECK-NEXT:    ret
;
; CHECK-VWMUL-LABEL: vpgather_baseidx_zext_v8i8_v8i32:
; CHECK-VWMUL:       # %bb.0:
; CHECK-VWMUL-NEXT:    li a2, 4
; CHECK-VWMUL-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-VWMUL-NEXT:    vwmulu.vx v10, v8, a2
; CHECK-VWMUL-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-VWMUL-NEXT:    vluxei16.v v8, (a0), v10, v0.t
; CHECK-VWMUL-NEXT:    ret
;
; CHECK-ZVBB-LABEL: vpgather_baseidx_zext_v8i8_v8i32:
; CHECK-ZVBB:       # %bb.0:
; CHECK-ZVBB-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-ZVBB-NEXT:    vwsll.vi v10, v8, 2
; CHECK-ZVBB-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-ZVBB-NEXT:    vluxei16.v v8, (a0), v10, v0.t
; CHECK-ZVBB-NEXT:    ret
;
; CHECK-VWMUL-ZVBB-LABEL: vpgather_baseidx_zext_v8i8_v8i32:
; CHECK-VWMUL-ZVBB:       # %bb.0:
; CHECK-VWMUL-ZVBB-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vwsll.vi v10, v8, 2
; CHECK-VWMUL-ZVBB-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; CHECK-VWMUL-ZVBB-NEXT:    vluxei16.v v8, (a0), v10, v0.t
; CHECK-VWMUL-ZVBB-NEXT:    ret
  %eidxs = zext <8 x i8> %idxs to <8 x i32>
  %ptrs = getelementptr inbounds i32, ptr %base, <8 x i32> %eidxs
  %v = call <8 x i32> @llvm.vp.gather.v8i32.v8p0(<8 x ptr> %ptrs, <8 x i1> %m, i32 %evl)
  ret <8 x i32> %v
}
