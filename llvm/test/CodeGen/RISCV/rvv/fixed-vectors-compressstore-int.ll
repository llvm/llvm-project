; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=riscv32 -mattr=+m,+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,RV32
; RUN: llc -mtriple=riscv64 -mattr=+m,+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,RV64

declare void @llvm.masked.compressstore.v1i8(<1 x i8>, ptr, <1 x i1>)
define void @compressstore_v1i8(ptr %base, <1 x i8> %v, <1 x i1> %mask) {
; CHECK-LABEL: compressstore_v1i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-NEXT:    vfirst.m a1, v0
; CHECK-NEXT:    bnez a1, .LBB0_2
; CHECK-NEXT:  # %bb.1: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:  .LBB0_2: # %else
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v1i8(<1 x i8> %v, ptr %base, <1 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v2i8(<2 x i8>, ptr, <2 x i1>)
define void @compressstore_v2i8(ptr %base, <2 x i8> %v, <2 x i1> %mask) {
; CHECK-LABEL: compressstore_v2i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB1_3
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a1, a1, 2
; CHECK-NEXT:    bnez a1, .LBB1_4
; CHECK-NEXT:  .LBB1_2: # %else2
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB1_3: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a1, a1, 2
; CHECK-NEXT:    beqz a1, .LBB1_2
; CHECK-NEXT:  .LBB1_4: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 1
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v2i8(<2 x i8> %v, ptr %base, <2 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v4i8(<4 x i8>, ptr, <4 x i1>)
define void @compressstore_v4i8(ptr %base, <4 x i8> %v, <4 x i1> %mask) {
; CHECK-LABEL: compressstore_v4i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB2_5
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    bnez a2, .LBB2_6
; CHECK-NEXT:  .LBB2_2: # %else2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    bnez a2, .LBB2_7
; CHECK-NEXT:  .LBB2_3: # %else5
; CHECK-NEXT:    andi a1, a1, 8
; CHECK-NEXT:    bnez a1, .LBB2_8
; CHECK-NEXT:  .LBB2_4: # %else8
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB2_5: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e8, mf4, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    beqz a2, .LBB2_2
; CHECK-NEXT:  .LBB2_6: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 1
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    beqz a2, .LBB2_3
; CHECK-NEXT:  .LBB2_7: # %cond.store4
; CHECK-NEXT:    vsetivli zero, 1, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 2
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a1, a1, 8
; CHECK-NEXT:    beqz a1, .LBB2_4
; CHECK-NEXT:  .LBB2_8: # %cond.store7
; CHECK-NEXT:    vsetivli zero, 1, e8, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 3
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v4i8(<4 x i8> %v, ptr %base, <4 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v8i8(<8 x i8>, ptr, <8 x i1>)
define void @compressstore_v8i8(ptr %base, <8 x i8> %v, <8 x i1> %mask) {
; CHECK-LABEL: compressstore_v8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB3_9
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    bnez a2, .LBB3_10
; CHECK-NEXT:  .LBB3_2: # %else2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    bnez a2, .LBB3_11
; CHECK-NEXT:  .LBB3_3: # %else5
; CHECK-NEXT:    andi a2, a1, 8
; CHECK-NEXT:    bnez a2, .LBB3_12
; CHECK-NEXT:  .LBB3_4: # %else8
; CHECK-NEXT:    andi a2, a1, 16
; CHECK-NEXT:    bnez a2, .LBB3_13
; CHECK-NEXT:  .LBB3_5: # %else11
; CHECK-NEXT:    andi a2, a1, 32
; CHECK-NEXT:    bnez a2, .LBB3_14
; CHECK-NEXT:  .LBB3_6: # %else14
; CHECK-NEXT:    andi a2, a1, 64
; CHECK-NEXT:    bnez a2, .LBB3_15
; CHECK-NEXT:  .LBB3_7: # %else17
; CHECK-NEXT:    andi a1, a1, -128
; CHECK-NEXT:    bnez a1, .LBB3_16
; CHECK-NEXT:  .LBB3_8: # %else20
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB3_9: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    beqz a2, .LBB3_2
; CHECK-NEXT:  .LBB3_10: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 1
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    beqz a2, .LBB3_3
; CHECK-NEXT:  .LBB3_11: # %cond.store4
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 2
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 8
; CHECK-NEXT:    beqz a2, .LBB3_4
; CHECK-NEXT:  .LBB3_12: # %cond.store7
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 3
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 16
; CHECK-NEXT:    beqz a2, .LBB3_5
; CHECK-NEXT:  .LBB3_13: # %cond.store10
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 4
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 32
; CHECK-NEXT:    beqz a2, .LBB3_6
; CHECK-NEXT:  .LBB3_14: # %cond.store13
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 5
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a2, a1, 64
; CHECK-NEXT:    beqz a2, .LBB3_7
; CHECK-NEXT:  .LBB3_15: # %cond.store16
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 6
; CHECK-NEXT:    vse8.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 1
; CHECK-NEXT:    andi a1, a1, -128
; CHECK-NEXT:    beqz a1, .LBB3_8
; CHECK-NEXT:  .LBB3_16: # %cond.store19
; CHECK-NEXT:    vsetivli zero, 1, e8, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 7
; CHECK-NEXT:    vse8.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v8i8(<8 x i8> %v, ptr %base, <8 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v1i16(<1 x i16>, ptr, <1 x i1>)
define void @compressstore_v1i16(ptr %base, <1 x i16> %v, <1 x i1> %mask) {
; CHECK-LABEL: compressstore_v1i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-NEXT:    vfirst.m a1, v0
; CHECK-NEXT:    bnez a1, .LBB4_2
; CHECK-NEXT:  # %bb.1: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e16, mf4, ta, ma
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:  .LBB4_2: # %else
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v1i16(<1 x i16> %v, ptr align 2 %base, <1 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v2i16(<2 x i16>, ptr, <2 x i1>)
define void @compressstore_v2i16(ptr %base, <2 x i16> %v, <2 x i1> %mask) {
; CHECK-LABEL: compressstore_v2i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB5_3
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a1, a1, 2
; CHECK-NEXT:    bnez a1, .LBB5_4
; CHECK-NEXT:  .LBB5_2: # %else2
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB5_3: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e16, mf4, ta, ma
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a1, a1, 2
; CHECK-NEXT:    beqz a1, .LBB5_2
; CHECK-NEXT:  .LBB5_4: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e16, mf4, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 1
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v2i16(<2 x i16> %v, ptr align 2 %base, <2 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v4i16(<4 x i16>, ptr, <4 x i1>)
define void @compressstore_v4i16(ptr %base, <4 x i16> %v, <4 x i1> %mask) {
; CHECK-LABEL: compressstore_v4i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB6_5
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    bnez a2, .LBB6_6
; CHECK-NEXT:  .LBB6_2: # %else2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    bnez a2, .LBB6_7
; CHECK-NEXT:  .LBB6_3: # %else5
; CHECK-NEXT:    andi a1, a1, 8
; CHECK-NEXT:    bnez a1, .LBB6_8
; CHECK-NEXT:  .LBB6_4: # %else8
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB6_5: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e16, mf2, ta, ma
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    beqz a2, .LBB6_2
; CHECK-NEXT:  .LBB6_6: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e16, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 1
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    beqz a2, .LBB6_3
; CHECK-NEXT:  .LBB6_7: # %cond.store4
; CHECK-NEXT:    vsetivli zero, 1, e16, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 2
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a1, a1, 8
; CHECK-NEXT:    beqz a1, .LBB6_4
; CHECK-NEXT:  .LBB6_8: # %cond.store7
; CHECK-NEXT:    vsetivli zero, 1, e16, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 3
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v4i16(<4 x i16> %v, ptr align 2 %base, <4 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v8i16(<8 x i16>, ptr, <8 x i1>)
define void @compressstore_v8i16(ptr %base, <8 x i16> %v, <8 x i1> %mask) {
; CHECK-LABEL: compressstore_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB7_9
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    bnez a2, .LBB7_10
; CHECK-NEXT:  .LBB7_2: # %else2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    bnez a2, .LBB7_11
; CHECK-NEXT:  .LBB7_3: # %else5
; CHECK-NEXT:    andi a2, a1, 8
; CHECK-NEXT:    bnez a2, .LBB7_12
; CHECK-NEXT:  .LBB7_4: # %else8
; CHECK-NEXT:    andi a2, a1, 16
; CHECK-NEXT:    bnez a2, .LBB7_13
; CHECK-NEXT:  .LBB7_5: # %else11
; CHECK-NEXT:    andi a2, a1, 32
; CHECK-NEXT:    bnez a2, .LBB7_14
; CHECK-NEXT:  .LBB7_6: # %else14
; CHECK-NEXT:    andi a2, a1, 64
; CHECK-NEXT:    bnez a2, .LBB7_15
; CHECK-NEXT:  .LBB7_7: # %else17
; CHECK-NEXT:    andi a1, a1, -128
; CHECK-NEXT:    bnez a1, .LBB7_16
; CHECK-NEXT:  .LBB7_8: # %else20
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB7_9: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    beqz a2, .LBB7_2
; CHECK-NEXT:  .LBB7_10: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 1
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    beqz a2, .LBB7_3
; CHECK-NEXT:  .LBB7_11: # %cond.store4
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 2
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 8
; CHECK-NEXT:    beqz a2, .LBB7_4
; CHECK-NEXT:  .LBB7_12: # %cond.store7
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 3
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 16
; CHECK-NEXT:    beqz a2, .LBB7_5
; CHECK-NEXT:  .LBB7_13: # %cond.store10
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 4
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 32
; CHECK-NEXT:    beqz a2, .LBB7_6
; CHECK-NEXT:  .LBB7_14: # %cond.store13
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 5
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a2, a1, 64
; CHECK-NEXT:    beqz a2, .LBB7_7
; CHECK-NEXT:  .LBB7_15: # %cond.store16
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 6
; CHECK-NEXT:    vse16.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 2
; CHECK-NEXT:    andi a1, a1, -128
; CHECK-NEXT:    beqz a1, .LBB7_8
; CHECK-NEXT:  .LBB7_16: # %cond.store19
; CHECK-NEXT:    vsetivli zero, 1, e16, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 7
; CHECK-NEXT:    vse16.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v8i16(<8 x i16> %v, ptr align 2 %base, <8 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v1i32(<1 x i32>, ptr, <1 x i1>)
define void @compressstore_v1i32(ptr %base, <1 x i32> %v, <1 x i1> %mask) {
; CHECK-LABEL: compressstore_v1i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; CHECK-NEXT:    vfirst.m a1, v0
; CHECK-NEXT:    bnez a1, .LBB8_2
; CHECK-NEXT:  # %bb.1: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:  .LBB8_2: # %else
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v1i32(<1 x i32> %v, ptr align 4 %base, <1 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v2i32(<2 x i32>, ptr, <2 x i1>)
define void @compressstore_v2i32(ptr %base, <2 x i32> %v, <2 x i1> %mask) {
; CHECK-LABEL: compressstore_v2i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB9_3
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a1, a1, 2
; CHECK-NEXT:    bnez a1, .LBB9_4
; CHECK-NEXT:  .LBB9_2: # %else2
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB9_3: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a1, a1, 2
; CHECK-NEXT:    beqz a1, .LBB9_2
; CHECK-NEXT:  .LBB9_4: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e32, mf2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 1
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v2i32(<2 x i32> %v, ptr align 4 %base, <2 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v4i32(<4 x i32>, ptr, <4 x i1>)
define void @compressstore_v4i32(ptr %base, <4 x i32> %v, <4 x i1> %mask) {
; CHECK-LABEL: compressstore_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB10_5
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    bnez a2, .LBB10_6
; CHECK-NEXT:  .LBB10_2: # %else2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    bnez a2, .LBB10_7
; CHECK-NEXT:  .LBB10_3: # %else5
; CHECK-NEXT:    andi a1, a1, 8
; CHECK-NEXT:    bnez a1, .LBB10_8
; CHECK-NEXT:  .LBB10_4: # %else8
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB10_5: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    beqz a2, .LBB10_2
; CHECK-NEXT:  .LBB10_6: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 1
; CHECK-NEXT:    vse32.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    beqz a2, .LBB10_3
; CHECK-NEXT:  .LBB10_7: # %cond.store4
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v9, v8, 2
; CHECK-NEXT:    vse32.v v9, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a1, a1, 8
; CHECK-NEXT:    beqz a1, .LBB10_4
; CHECK-NEXT:  .LBB10_8: # %cond.store7
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 3
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v4i32(<4 x i32> %v, ptr align 4 %base, <4 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v8i32(<8 x i32>, ptr, <8 x i1>)
define void @compressstore_v8i32(ptr %base, <8 x i32> %v, <8 x i1> %mask) {
; CHECK-LABEL: compressstore_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; CHECK-NEXT:    vmv.x.s a1, v0
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    bnez a2, .LBB11_9
; CHECK-NEXT:  # %bb.1: # %else
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    bnez a2, .LBB11_10
; CHECK-NEXT:  .LBB11_2: # %else2
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    bnez a2, .LBB11_11
; CHECK-NEXT:  .LBB11_3: # %else5
; CHECK-NEXT:    andi a2, a1, 8
; CHECK-NEXT:    bnez a2, .LBB11_12
; CHECK-NEXT:  .LBB11_4: # %else8
; CHECK-NEXT:    andi a2, a1, 16
; CHECK-NEXT:    bnez a2, .LBB11_13
; CHECK-NEXT:  .LBB11_5: # %else11
; CHECK-NEXT:    andi a2, a1, 32
; CHECK-NEXT:    bnez a2, .LBB11_14
; CHECK-NEXT:  .LBB11_6: # %else14
; CHECK-NEXT:    andi a2, a1, 64
; CHECK-NEXT:    bnez a2, .LBB11_15
; CHECK-NEXT:  .LBB11_7: # %else17
; CHECK-NEXT:    andi a1, a1, -128
; CHECK-NEXT:    bnez a1, .LBB11_16
; CHECK-NEXT:  .LBB11_8: # %else20
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB11_9: # %cond.store
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 2
; CHECK-NEXT:    beqz a2, .LBB11_2
; CHECK-NEXT:  .LBB11_10: # %cond.store1
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v10, v8, 1
; CHECK-NEXT:    vse32.v v10, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 4
; CHECK-NEXT:    beqz a2, .LBB11_3
; CHECK-NEXT:  .LBB11_11: # %cond.store4
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v10, v8, 2
; CHECK-NEXT:    vse32.v v10, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 8
; CHECK-NEXT:    beqz a2, .LBB11_4
; CHECK-NEXT:  .LBB11_12: # %cond.store7
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v10, v8, 3
; CHECK-NEXT:    vse32.v v10, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 16
; CHECK-NEXT:    beqz a2, .LBB11_5
; CHECK-NEXT:  .LBB11_13: # %cond.store10
; CHECK-NEXT:    vsetivli zero, 1, e32, m2, ta, ma
; CHECK-NEXT:    vslidedown.vi v10, v8, 4
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vse32.v v10, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 32
; CHECK-NEXT:    beqz a2, .LBB11_6
; CHECK-NEXT:  .LBB11_14: # %cond.store13
; CHECK-NEXT:    vsetivli zero, 1, e32, m2, ta, ma
; CHECK-NEXT:    vslidedown.vi v10, v8, 5
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vse32.v v10, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a2, a1, 64
; CHECK-NEXT:    beqz a2, .LBB11_7
; CHECK-NEXT:  .LBB11_15: # %cond.store16
; CHECK-NEXT:    vsetivli zero, 1, e32, m2, ta, ma
; CHECK-NEXT:    vslidedown.vi v10, v8, 6
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vse32.v v10, (a0)
; CHECK-NEXT:    addi a0, a0, 4
; CHECK-NEXT:    andi a1, a1, -128
; CHECK-NEXT:    beqz a1, .LBB11_8
; CHECK-NEXT:  .LBB11_16: # %cond.store19
; CHECK-NEXT:    vsetivli zero, 1, e32, m2, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 7
; CHECK-NEXT:    vsetivli zero, 1, e32, m1, ta, ma
; CHECK-NEXT:    vse32.v v8, (a0)
; CHECK-NEXT:    ret
  call void @llvm.masked.compressstore.v8i32(<8 x i32> %v, ptr align 4 %base, <8 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v1i64(<1 x i64>, ptr, <1 x i1>)
define void @compressstore_v1i64(ptr %base, <1 x i64> %v, <1 x i1> %mask) {
; RV32-LABEL: compressstore_v1i64:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; RV32-NEXT:    vfirst.m a1, v0
; RV32-NEXT:    bnez a1, .LBB12_2
; RV32-NEXT:  # %bb.1: # %cond.store
; RV32-NEXT:    li a1, 32
; RV32-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV32-NEXT:    vsrl.vx v9, v8, a1
; RV32-NEXT:    vmv.x.s a1, v9
; RV32-NEXT:    vmv.x.s a2, v8
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:  .LBB12_2: # %else
; RV32-NEXT:    ret
;
; RV64-LABEL: compressstore_v1i64:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetvli a1, zero, e8, mf8, ta, ma
; RV64-NEXT:    vfirst.m a1, v0
; RV64-NEXT:    bnez a1, .LBB12_2
; RV64-NEXT:  # %bb.1: # %cond.store
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v8, (a0)
; RV64-NEXT:  .LBB12_2: # %else
; RV64-NEXT:    ret
  call void @llvm.masked.compressstore.v1i64(<1 x i64> %v, ptr align 8 %base, <1 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v2i64(<2 x i64>, ptr, <2 x i1>)
define void @compressstore_v2i64(ptr %base, <2 x i64> %v, <2 x i1> %mask) {
; RV32-LABEL: compressstore_v2i64:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; RV32-NEXT:    vmv.x.s a1, v0
; RV32-NEXT:    andi a2, a1, 1
; RV32-NEXT:    bnez a2, .LBB13_3
; RV32-NEXT:  # %bb.1: # %else
; RV32-NEXT:    andi a1, a1, 2
; RV32-NEXT:    bnez a1, .LBB13_4
; RV32-NEXT:  .LBB13_2: # %else2
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB13_3: # %cond.store
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV32-NEXT:    vsrl.vx v9, v8, a2
; RV32-NEXT:    vmv.x.s a2, v9
; RV32-NEXT:    vmv.x.s a3, v8
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a1, a1, 2
; RV32-NEXT:    beqz a1, .LBB13_2
; RV32-NEXT:  .LBB13_4: # %cond.store1
; RV32-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV32-NEXT:    vslidedown.vi v8, v8, 1
; RV32-NEXT:    li a1, 32
; RV32-NEXT:    vsrl.vx v9, v8, a1
; RV32-NEXT:    vmv.x.s a1, v9
; RV32-NEXT:    vmv.x.s a2, v8
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: compressstore_v2i64:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; RV64-NEXT:    vmv.x.s a1, v0
; RV64-NEXT:    andi a2, a1, 1
; RV64-NEXT:    bnez a2, .LBB13_3
; RV64-NEXT:  # %bb.1: # %else
; RV64-NEXT:    andi a1, a1, 2
; RV64-NEXT:    bnez a1, .LBB13_4
; RV64-NEXT:  .LBB13_2: # %else2
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB13_3: # %cond.store
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v8, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a1, a1, 2
; RV64-NEXT:    beqz a1, .LBB13_2
; RV64-NEXT:  .LBB13_4: # %cond.store1
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vslidedown.vi v8, v8, 1
; RV64-NEXT:    vse64.v v8, (a0)
; RV64-NEXT:    ret
  call void @llvm.masked.compressstore.v2i64(<2 x i64> %v, ptr align 8 %base, <2 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v4i64(<4 x i64>, ptr, <4 x i1>)
define void @compressstore_v4i64(ptr %base, <4 x i64> %v, <4 x i1> %mask) {
; RV32-LABEL: compressstore_v4i64:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; RV32-NEXT:    vmv.x.s a1, v0
; RV32-NEXT:    andi a2, a1, 1
; RV32-NEXT:    bnez a2, .LBB14_5
; RV32-NEXT:  # %bb.1: # %else
; RV32-NEXT:    andi a2, a1, 2
; RV32-NEXT:    bnez a2, .LBB14_6
; RV32-NEXT:  .LBB14_2: # %else2
; RV32-NEXT:    andi a2, a1, 4
; RV32-NEXT:    bnez a2, .LBB14_7
; RV32-NEXT:  .LBB14_3: # %else5
; RV32-NEXT:    andi a1, a1, 8
; RV32-NEXT:    bnez a1, .LBB14_8
; RV32-NEXT:  .LBB14_4: # %else8
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB14_5: # %cond.store
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV32-NEXT:    vsrl.vx v10, v8, a2
; RV32-NEXT:    vmv.x.s a2, v10
; RV32-NEXT:    vmv.x.s a3, v8
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 2
; RV32-NEXT:    beqz a2, .LBB14_2
; RV32-NEXT:  .LBB14_6: # %cond.store1
; RV32-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV32-NEXT:    vslidedown.vi v10, v8, 1
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v12, v10, a2
; RV32-NEXT:    vmv.x.s a2, v12
; RV32-NEXT:    vmv.x.s a3, v10
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 4
; RV32-NEXT:    beqz a2, .LBB14_3
; RV32-NEXT:  .LBB14_7: # %cond.store4
; RV32-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV32-NEXT:    vslidedown.vi v10, v8, 2
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v12, v10, a2
; RV32-NEXT:    vmv.x.s a2, v12
; RV32-NEXT:    vmv.x.s a3, v10
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a1, a1, 8
; RV32-NEXT:    beqz a1, .LBB14_4
; RV32-NEXT:  .LBB14_8: # %cond.store7
; RV32-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV32-NEXT:    vslidedown.vi v8, v8, 3
; RV32-NEXT:    li a1, 32
; RV32-NEXT:    vsrl.vx v10, v8, a1
; RV32-NEXT:    vmv.x.s a1, v10
; RV32-NEXT:    vmv.x.s a2, v8
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: compressstore_v4i64:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; RV64-NEXT:    vmv.x.s a1, v0
; RV64-NEXT:    andi a2, a1, 1
; RV64-NEXT:    bnez a2, .LBB14_5
; RV64-NEXT:  # %bb.1: # %else
; RV64-NEXT:    andi a2, a1, 2
; RV64-NEXT:    bnez a2, .LBB14_6
; RV64-NEXT:  .LBB14_2: # %else2
; RV64-NEXT:    andi a2, a1, 4
; RV64-NEXT:    bnez a2, .LBB14_7
; RV64-NEXT:  .LBB14_3: # %else5
; RV64-NEXT:    andi a1, a1, 8
; RV64-NEXT:    bnez a1, .LBB14_8
; RV64-NEXT:  .LBB14_4: # %else8
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB14_5: # %cond.store
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v8, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 2
; RV64-NEXT:    beqz a2, .LBB14_2
; RV64-NEXT:  .LBB14_6: # %cond.store1
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vslidedown.vi v10, v8, 1
; RV64-NEXT:    vse64.v v10, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 4
; RV64-NEXT:    beqz a2, .LBB14_3
; RV64-NEXT:  .LBB14_7: # %cond.store4
; RV64-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV64-NEXT:    vslidedown.vi v10, v8, 2
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v10, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a1, a1, 8
; RV64-NEXT:    beqz a1, .LBB14_4
; RV64-NEXT:  .LBB14_8: # %cond.store7
; RV64-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV64-NEXT:    vslidedown.vi v8, v8, 3
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v8, (a0)
; RV64-NEXT:    ret
  call void @llvm.masked.compressstore.v4i64(<4 x i64> %v, ptr align 8 %base, <4 x i1> %mask)
  ret void
}

declare void @llvm.masked.compressstore.v8i64(<8 x i64>, ptr, <8 x i1>)
define void @compressstore_v8i64(ptr %base, <8 x i64> %v, <8 x i1> %mask) {
; RV32-LABEL: compressstore_v8i64:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; RV32-NEXT:    vmv.x.s a1, v0
; RV32-NEXT:    andi a2, a1, 1
; RV32-NEXT:    bnez a2, .LBB15_9
; RV32-NEXT:  # %bb.1: # %else
; RV32-NEXT:    andi a2, a1, 2
; RV32-NEXT:    bnez a2, .LBB15_10
; RV32-NEXT:  .LBB15_2: # %else2
; RV32-NEXT:    andi a2, a1, 4
; RV32-NEXT:    bnez a2, .LBB15_11
; RV32-NEXT:  .LBB15_3: # %else5
; RV32-NEXT:    andi a2, a1, 8
; RV32-NEXT:    bnez a2, .LBB15_12
; RV32-NEXT:  .LBB15_4: # %else8
; RV32-NEXT:    andi a2, a1, 16
; RV32-NEXT:    bnez a2, .LBB15_13
; RV32-NEXT:  .LBB15_5: # %else11
; RV32-NEXT:    andi a2, a1, 32
; RV32-NEXT:    bnez a2, .LBB15_14
; RV32-NEXT:  .LBB15_6: # %else14
; RV32-NEXT:    andi a2, a1, 64
; RV32-NEXT:    bnez a2, .LBB15_15
; RV32-NEXT:  .LBB15_7: # %else17
; RV32-NEXT:    andi a1, a1, -128
; RV32-NEXT:    bnez a1, .LBB15_16
; RV32-NEXT:  .LBB15_8: # %else20
; RV32-NEXT:    ret
; RV32-NEXT:  .LBB15_9: # %cond.store
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vsrl.vx v12, v8, a2
; RV32-NEXT:    vmv.x.s a2, v12
; RV32-NEXT:    vmv.x.s a3, v8
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 2
; RV32-NEXT:    beqz a2, .LBB15_2
; RV32-NEXT:  .LBB15_10: # %cond.store1
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v12, v8, 1
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v16, v12, a2
; RV32-NEXT:    vmv.x.s a2, v16
; RV32-NEXT:    vmv.x.s a3, v12
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 4
; RV32-NEXT:    beqz a2, .LBB15_3
; RV32-NEXT:  .LBB15_11: # %cond.store4
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v12, v8, 2
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v16, v12, a2
; RV32-NEXT:    vmv.x.s a2, v16
; RV32-NEXT:    vmv.x.s a3, v12
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 8
; RV32-NEXT:    beqz a2, .LBB15_4
; RV32-NEXT:  .LBB15_12: # %cond.store7
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v12, v8, 3
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v16, v12, a2
; RV32-NEXT:    vmv.x.s a2, v16
; RV32-NEXT:    vmv.x.s a3, v12
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 16
; RV32-NEXT:    beqz a2, .LBB15_5
; RV32-NEXT:  .LBB15_13: # %cond.store10
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v12, v8, 4
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v16, v12, a2
; RV32-NEXT:    vmv.x.s a2, v16
; RV32-NEXT:    vmv.x.s a3, v12
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 32
; RV32-NEXT:    beqz a2, .LBB15_6
; RV32-NEXT:  .LBB15_14: # %cond.store13
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v12, v8, 5
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v16, v12, a2
; RV32-NEXT:    vmv.x.s a2, v16
; RV32-NEXT:    vmv.x.s a3, v12
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a2, a1, 64
; RV32-NEXT:    beqz a2, .LBB15_7
; RV32-NEXT:  .LBB15_15: # %cond.store16
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v12, v8, 6
; RV32-NEXT:    li a2, 32
; RV32-NEXT:    vsrl.vx v16, v12, a2
; RV32-NEXT:    vmv.x.s a2, v16
; RV32-NEXT:    vmv.x.s a3, v12
; RV32-NEXT:    sw a3, 0(a0)
; RV32-NEXT:    sw a2, 4(a0)
; RV32-NEXT:    addi a0, a0, 8
; RV32-NEXT:    andi a1, a1, -128
; RV32-NEXT:    beqz a1, .LBB15_8
; RV32-NEXT:  .LBB15_16: # %cond.store19
; RV32-NEXT:    vsetivli zero, 1, e64, m4, ta, ma
; RV32-NEXT:    vslidedown.vi v8, v8, 7
; RV32-NEXT:    li a1, 32
; RV32-NEXT:    vsrl.vx v12, v8, a1
; RV32-NEXT:    vmv.x.s a1, v12
; RV32-NEXT:    vmv.x.s a2, v8
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: compressstore_v8i64:
; RV64:       # %bb.0:
; RV64-NEXT:    vsetivli zero, 1, e8, m1, ta, ma
; RV64-NEXT:    vmv.x.s a1, v0
; RV64-NEXT:    andi a2, a1, 1
; RV64-NEXT:    bnez a2, .LBB15_11
; RV64-NEXT:  # %bb.1: # %else
; RV64-NEXT:    andi a2, a1, 2
; RV64-NEXT:    bnez a2, .LBB15_12
; RV64-NEXT:  .LBB15_2: # %else2
; RV64-NEXT:    andi a2, a1, 4
; RV64-NEXT:    bnez a2, .LBB15_13
; RV64-NEXT:  .LBB15_3: # %else5
; RV64-NEXT:    andi a2, a1, 8
; RV64-NEXT:    beqz a2, .LBB15_5
; RV64-NEXT:  .LBB15_4: # %cond.store7
; RV64-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV64-NEXT:    vslidedown.vi v12, v8, 3
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v12, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:  .LBB15_5: # %else8
; RV64-NEXT:    addi sp, sp, -320
; RV64-NEXT:    .cfi_def_cfa_offset 320
; RV64-NEXT:    sd ra, 312(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd s0, 304(sp) # 8-byte Folded Spill
; RV64-NEXT:    .cfi_offset ra, -8
; RV64-NEXT:    .cfi_offset s0, -16
; RV64-NEXT:    addi s0, sp, 320
; RV64-NEXT:    .cfi_def_cfa s0, 0
; RV64-NEXT:    andi sp, sp, -64
; RV64-NEXT:    andi a2, a1, 16
; RV64-NEXT:    bnez a2, .LBB15_14
; RV64-NEXT:  # %bb.6: # %else11
; RV64-NEXT:    andi a2, a1, 32
; RV64-NEXT:    bnez a2, .LBB15_15
; RV64-NEXT:  .LBB15_7: # %else14
; RV64-NEXT:    andi a2, a1, 64
; RV64-NEXT:    bnez a2, .LBB15_16
; RV64-NEXT:  .LBB15_8: # %else17
; RV64-NEXT:    andi a1, a1, -128
; RV64-NEXT:    beqz a1, .LBB15_10
; RV64-NEXT:  .LBB15_9: # %cond.store19
; RV64-NEXT:    mv a1, sp
; RV64-NEXT:    vsetivli zero, 8, e64, m4, ta, ma
; RV64-NEXT:    vse64.v v8, (a1)
; RV64-NEXT:    ld a1, 56(sp)
; RV64-NEXT:    sd a1, 0(a0)
; RV64-NEXT:  .LBB15_10: # %else20
; RV64-NEXT:    addi sp, s0, -320
; RV64-NEXT:    ld ra, 312(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld s0, 304(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 320
; RV64-NEXT:    ret
; RV64-NEXT:  .LBB15_11: # %cond.store
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v8, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 2
; RV64-NEXT:    beqz a2, .LBB15_2
; RV64-NEXT:  .LBB15_12: # %cond.store1
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vslidedown.vi v12, v8, 1
; RV64-NEXT:    vse64.v v12, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 4
; RV64-NEXT:    beqz a2, .LBB15_3
; RV64-NEXT:  .LBB15_13: # %cond.store4
; RV64-NEXT:    vsetivli zero, 1, e64, m2, ta, ma
; RV64-NEXT:    vslidedown.vi v12, v8, 2
; RV64-NEXT:    vsetivli zero, 1, e64, m1, ta, ma
; RV64-NEXT:    vse64.v v12, (a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 8
; RV64-NEXT:    bnez a2, .LBB15_4
; RV64-NEXT:    j .LBB15_5
; RV64-NEXT:  .LBB15_14: # %cond.store10
; RV64-NEXT:    addi a2, sp, 192
; RV64-NEXT:    vsetivli zero, 8, e64, m4, ta, ma
; RV64-NEXT:    vse64.v v8, (a2)
; RV64-NEXT:    ld a2, 224(sp)
; RV64-NEXT:    sd a2, 0(a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 32
; RV64-NEXT:    beqz a2, .LBB15_7
; RV64-NEXT:  .LBB15_15: # %cond.store13
; RV64-NEXT:    addi a2, sp, 128
; RV64-NEXT:    vsetivli zero, 8, e64, m4, ta, ma
; RV64-NEXT:    vse64.v v8, (a2)
; RV64-NEXT:    ld a2, 168(sp)
; RV64-NEXT:    sd a2, 0(a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a2, a1, 64
; RV64-NEXT:    beqz a2, .LBB15_8
; RV64-NEXT:  .LBB15_16: # %cond.store16
; RV64-NEXT:    addi a2, sp, 64
; RV64-NEXT:    vsetivli zero, 8, e64, m4, ta, ma
; RV64-NEXT:    vse64.v v8, (a2)
; RV64-NEXT:    ld a2, 112(sp)
; RV64-NEXT:    sd a2, 0(a0)
; RV64-NEXT:    addi a0, a0, 8
; RV64-NEXT:    andi a1, a1, -128
; RV64-NEXT:    bnez a1, .LBB15_9
; RV64-NEXT:    j .LBB15_10
  call void @llvm.masked.compressstore.v8i64(<8 x i64> %v, ptr align 8 %base, <8 x i1> %mask)
  ret void
}
