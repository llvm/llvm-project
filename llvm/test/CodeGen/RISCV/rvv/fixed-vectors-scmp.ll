; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=riscv32 -mattr=+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,RV32
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,RV64

define <16 x i8> @scmp_i8i8(<16 x i8> %a, <16 x i8> %b) {
; CHECK-LABEL: scmp_i8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vmslt.vv v0, v9, v8
; CHECK-NEXT:    vmv.v.i v10, 0
; CHECK-NEXT:    vmerge.vim v10, v10, 1, v0
; CHECK-NEXT:    vmslt.vv v0, v8, v9
; CHECK-NEXT:    vmerge.vim v8, v10, -1, v0
; CHECK-NEXT:    ret
  %c = call <16 x i8> @llvm.scmp(<16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %c
}

define <16 x i8> @scmp_z8i8(<16 x i8> %a) {
; CHECK-LABEL: scmp_z8i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, mu
; CHECK-NEXT:    vmsle.vi v0, v8, 0
; CHECK-NEXT:    vmv.v.i v9, -1
; CHECK-NEXT:    vsrl.vi v9, v8, 7, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %c = call <16 x i8> @llvm.scmp(<16 x i8> zeroinitializer, <16 x i8> %a)
  ret <16 x i8> %c
}

define <16 x i8> @scmp_i8z8(<16 x i8> %a) {
; CHECK-LABEL: scmp_i8z8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 1
; CHECK-NEXT:    vsetivli zero, 16, e8, m1, ta, ma
; CHECK-NEXT:    vmin.vx v9, v8, a0
; CHECK-NEXT:    vsra.vi v8, v8, 7
; CHECK-NEXT:    vor.vv v8, v8, v9
; CHECK-NEXT:    ret
  %c = call <16 x i8> @llvm.scmp(<16 x i8> %a, <16 x i8> zeroinitializer)
  ret <16 x i8> %c
}


define <8 x i16> @scmp_i16i16(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: scmp_i16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; CHECK-NEXT:    vmslt.vv v0, v9, v8
; CHECK-NEXT:    vmv.v.i v10, 0
; CHECK-NEXT:    vmerge.vim v10, v10, 1, v0
; CHECK-NEXT:    vmslt.vv v0, v8, v9
; CHECK-NEXT:    vmerge.vim v8, v10, -1, v0
; CHECK-NEXT:    ret
  %c = call <8 x i16> @llvm.scmp(<8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %c
}

define <8 x i16> @scmp_z16i16(<8 x i16> %a) {
; CHECK-LABEL: scmp_z16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 8, e16, m1, ta, mu
; CHECK-NEXT:    vmsle.vi v0, v8, 0
; CHECK-NEXT:    vmv.v.i v9, -1
; CHECK-NEXT:    vsrl.vi v9, v8, 15, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %c = call <8 x i16> @llvm.scmp(<8 x i16> zeroinitializer, <8 x i16> %a)
  ret <8 x i16> %c
}

define <8 x i16> @scmp_i16z16(<8 x i16> %a) {
; CHECK-LABEL: scmp_i16z16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 1
; CHECK-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; CHECK-NEXT:    vmin.vx v9, v8, a0
; CHECK-NEXT:    vsra.vi v8, v8, 15
; CHECK-NEXT:    vor.vv v8, v8, v9
; CHECK-NEXT:    ret
  %c = call <8 x i16> @llvm.scmp(<8 x i16> %a, <8 x i16> zeroinitializer)
  ret <8 x i16> %c
}


define <4 x i32> @scmp_i32i32(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: scmp_i32i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; CHECK-NEXT:    vmslt.vv v0, v9, v8
; CHECK-NEXT:    vmv.v.i v10, 0
; CHECK-NEXT:    vmerge.vim v10, v10, 1, v0
; CHECK-NEXT:    vmslt.vv v0, v8, v9
; CHECK-NEXT:    vmerge.vim v8, v10, -1, v0
; CHECK-NEXT:    ret
  %c = call <4 x i32> @llvm.scmp(<4 x i32> %a, <4 x i32> %b)
  ret <4 x i32> %c
}

define <4 x i32> @scmp_z32i32(<4 x i32> %a) {
; CHECK-LABEL: scmp_z32i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; CHECK-NEXT:    vmsle.vi v0, v8, 0
; CHECK-NEXT:    vmv.v.i v9, -1
; CHECK-NEXT:    vsrl.vi v9, v8, 31, v0.t
; CHECK-NEXT:    vmv.v.v v8, v9
; CHECK-NEXT:    ret
  %c = call <4 x i32> @llvm.scmp(<4 x i32> zeroinitializer, <4 x i32> %a)
  ret <4 x i32> %c
}

define <4 x i32> @scmp_i32z32(<4 x i32> %a) {
; CHECK-LABEL: scmp_i32z32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li a0, 1
; CHECK-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; CHECK-NEXT:    vmin.vx v9, v8, a0
; CHECK-NEXT:    vsra.vi v8, v8, 31
; CHECK-NEXT:    vor.vv v8, v8, v9
; CHECK-NEXT:    ret
  %c = call <4 x i32> @llvm.scmp(<4 x i32> %a, <4 x i32> zeroinitializer)
  ret <4 x i32> %c
}


define <2 x i64> @scmp_i64i64(<2 x i64> %a, <2 x i64> %b) {
; CHECK-LABEL: scmp_i64i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; CHECK-NEXT:    vmslt.vv v0, v9, v8
; CHECK-NEXT:    vmv.v.i v10, 0
; CHECK-NEXT:    vmerge.vim v10, v10, 1, v0
; CHECK-NEXT:    vmslt.vv v0, v8, v9
; CHECK-NEXT:    vmerge.vim v8, v10, -1, v0
; CHECK-NEXT:    ret
  %c = call <2 x i64> @llvm.scmp(<2 x i64> %a, <2 x i64> %b)
  ret <2 x i64> %c
}

define <2 x i64> @scmp_z64i64(<2 x i64> %a) {
; RV32-LABEL: scmp_z64i64:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV32-NEXT:    vmsle.vi v0, v8, -1
; RV32-NEXT:    vmv.v.i v9, 0
; RV32-NEXT:    vmerge.vim v9, v9, 1, v0
; RV32-NEXT:    vmsgt.vi v0, v8, 0
; RV32-NEXT:    vmerge.vim v8, v9, -1, v0
; RV32-NEXT:    ret
;
; RV64-LABEL: scmp_z64i64:
; RV64:       # %bb.0:
; RV64-NEXT:    li a0, 63
; RV64-NEXT:    vsetivli zero, 2, e64, m1, ta, mu
; RV64-NEXT:    vmsle.vi v0, v8, 0
; RV64-NEXT:    vmv.v.i v9, -1
; RV64-NEXT:    vsrl.vx v9, v8, a0, v0.t
; RV64-NEXT:    vmv.v.v v8, v9
; RV64-NEXT:    ret
  %c = call <2 x i64> @llvm.scmp(<2 x i64> zeroinitializer, <2 x i64> %a)
  ret <2 x i64> %c
}

define <2 x i64> @scmp_i64z64(<2 x i64> %a) {
; RV32-LABEL: scmp_i64z64:
; RV32:       # %bb.0:
; RV32-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV32-NEXT:    vmsgt.vi v0, v8, 0
; RV32-NEXT:    vmv.v.i v9, 0
; RV32-NEXT:    vmerge.vim v9, v9, 1, v0
; RV32-NEXT:    vmsle.vi v0, v8, -1
; RV32-NEXT:    vmerge.vim v8, v9, -1, v0
; RV32-NEXT:    ret
;
; RV64-LABEL: scmp_i64z64:
; RV64:       # %bb.0:
; RV64-NEXT:    li a0, 1
; RV64-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; RV64-NEXT:    vmin.vx v9, v8, a0
; RV64-NEXT:    li a0, 63
; RV64-NEXT:    vsra.vx v8, v8, a0
; RV64-NEXT:    vor.vv v8, v8, v9
; RV64-NEXT:    ret
  %c = call <2 x i64> @llvm.scmp(<2 x i64> %a, <2 x i64> zeroinitializer)
  ret <2 x i64> %c
}
