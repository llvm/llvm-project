; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+v,+zvfbfmin,+xsfvfbfexp16e \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+v,+zvfbfmin,+xsfvfbfexp16e \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK

define <vscale x 1 x bfloat>  @intrinsic_sf_vfexp_v_nxv1bf16(<vscale x 1 x bfloat> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_v_nxv1bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, mf4, ta, ma
; CHECK-NEXT:    sf.vfexp.v v8, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 1 x bfloat> @llvm.riscv.sf.vfexp.nxv1bf16(
    <vscale x 1 x bfloat> poison,
    <vscale x 1 x bfloat> %0,
    iXLen %1)

  ret <vscale x 1 x bfloat> %a
}

define <vscale x 2 x bfloat>  @intrinsic_sf_vfexp_v_nxv2bf16(<vscale x 2 x bfloat> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_v_nxv2bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, mf2, ta, ma
; CHECK-NEXT:    sf.vfexp.v v8, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x bfloat> @llvm.riscv.sf.vfexp.nxv2bf16(
    <vscale x 2 x bfloat> poison,
    <vscale x 2 x bfloat> %0,
    iXLen %1)

  ret <vscale x 2 x bfloat> %a
}

define <vscale x 4 x bfloat>  @intrinsic_sf_vfexp_v_nxv4bf16(<vscale x 4 x bfloat> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_v_nxv4bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m1, ta, ma
; CHECK-NEXT:    sf.vfexp.v v8, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x bfloat> @llvm.riscv.sf.vfexp.nxv4bf16(
    <vscale x 4 x bfloat> poison,
    <vscale x 4 x bfloat> %0,
    iXLen %1)

  ret <vscale x 4 x bfloat> %a
}

define <vscale x 8 x bfloat>  @intrinsic_sf_vfexp_v_nxv8bf16(<vscale x 8 x bfloat> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_v_nxv8bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m2, ta, ma
; CHECK-NEXT:    sf.vfexp.v v8, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x bfloat> @llvm.riscv.sf.vfexp.nxv8bf16(
    <vscale x 8 x bfloat> poison,
    <vscale x 8 x bfloat> %0,
    iXLen %1)

  ret <vscale x 8 x bfloat> %a
}

define <vscale x 16 x bfloat>  @intrinsic_sf_vfexp_v_nxv16bf16(<vscale x 16 x bfloat> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_v_nxv16bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m4, ta, ma
; CHECK-NEXT:    sf.vfexp.v v8, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x bfloat> @llvm.riscv.sf.vfexp.nxv16bf16(
    <vscale x 16 x bfloat> poison,
    <vscale x 16 x bfloat> %0,
    iXLen %1)

  ret <vscale x 16 x bfloat> %a
}

define <vscale x 32 x bfloat>  @intrinsic_sf_vfexp_v_nxv32bf16(<vscale x 32 x bfloat> %0, iXLen %1) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_v_nxv32bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m8, ta, ma
; CHECK-NEXT:    sf.vfexp.v v8, v8
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x bfloat> @llvm.riscv.sf.vfexp.nxv32bf16(
    <vscale x 32 x bfloat> poison,
    <vscale x 32 x bfloat> %0,
    iXLen %1)

  ret <vscale x 32 x bfloat> %a
}

define <vscale x 1 x bfloat>  @intrinsic_sf_vfexp_mask_v_nxv1bf16(<vscale x 1 x bfloat> %0, <vscale x 1 x bfloat> %1, <vscale x 1 x i1> %m, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_mask_v_nxv1bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, mf4, tu, mu
; CHECK-NEXT:    sf.vfexp.v v8, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 1 x bfloat> @llvm.riscv.sf.vfexp.mask.nxv1bf16(
    <vscale x 1 x bfloat> %0,
    <vscale x 1 x bfloat> %1,
    <vscale x 1 x i1> %m,
    iXLen %2, iXLen 0)

  ret <vscale x 1 x bfloat> %a
}

define <vscale x 2 x bfloat>  @intrinsic_sf_vfexp_mask_v_nxv2bf16(<vscale x 2 x bfloat> %0, <vscale x 2 x bfloat> %1, <vscale x 2 x i1> %m, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_mask_v_nxv2bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, mf2, tu, mu
; CHECK-NEXT:    sf.vfexp.v v8, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 2 x bfloat> @llvm.riscv.sf.vfexp.mask.nxv2bf16(
    <vscale x 2 x bfloat> %0,
    <vscale x 2 x bfloat> %1,
    <vscale x 2 x i1> %m,
    iXLen %2, iXLen 0)

  ret <vscale x 2 x bfloat> %a
}

define <vscale x 4 x bfloat>  @intrinsic_sf_vfexp_mask_v_nxv4bf16(<vscale x 4 x bfloat> %0, <vscale x 4 x bfloat> %1, <vscale x 4 x i1> %m, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_mask_v_nxv4bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m1, tu, mu
; CHECK-NEXT:    sf.vfexp.v v8, v9, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 4 x bfloat> @llvm.riscv.sf.vfexp.mask.nxv4bf16(
    <vscale x 4 x bfloat> %0,
    <vscale x 4 x bfloat> %1,
    <vscale x 4 x i1> %m,
    iXLen %2, iXLen 0)

  ret <vscale x 4 x bfloat> %a
}

define <vscale x 8 x bfloat>  @intrinsic_sf_vfexp_mask_v_nxv8bf16(<vscale x 8 x bfloat> %0, <vscale x 8 x bfloat> %1, <vscale x 8 x i1> %m, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_mask_v_nxv8bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m2, tu, mu
; CHECK-NEXT:    sf.vfexp.v v8, v10, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 8 x bfloat> @llvm.riscv.sf.vfexp.mask.nxv8bf16(
    <vscale x 8 x bfloat> %0,
    <vscale x 8 x bfloat> %1,
    <vscale x 8 x i1> %m,
    iXLen %2, iXLen 0)

  ret <vscale x 8 x bfloat> %a
}

define <vscale x 16 x bfloat>  @intrinsic_sf_vfexp_mask_v_nxv16bf16(<vscale x 16 x bfloat> %0, <vscale x 16 x bfloat> %1, <vscale x 16 x i1> %m, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_mask_v_nxv16bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m4, tu, mu
; CHECK-NEXT:    sf.vfexp.v v8, v12, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 16 x bfloat> @llvm.riscv.sf.vfexp.mask.nxv16bf16(
    <vscale x 16 x bfloat> %0,
    <vscale x 16 x bfloat> %1,
    <vscale x 16 x i1> %m,
    iXLen %2, iXLen 0)

  ret <vscale x 16 x bfloat> %a
}

define <vscale x 32 x bfloat>  @intrinsic_sf_vfexp_mask_v_nxv32bf16(<vscale x 32 x bfloat> %0, <vscale x 32 x bfloat> %1, <vscale x 32 x i1> %m, iXLen %2) nounwind {
; CHECK-LABEL: intrinsic_sf_vfexp_mask_v_nxv32bf16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetvli zero, a0, e16alt, m8, tu, mu
; CHECK-NEXT:    sf.vfexp.v v8, v16, v0.t
; CHECK-NEXT:    ret
entry:
  %a = call <vscale x 32 x bfloat> @llvm.riscv.sf.vfexp.mask.nxv32bf16(
    <vscale x 32 x bfloat> %0,
    <vscale x 32 x bfloat> %1,
    <vscale x 32 x i1> %m,
    iXLen %2, iXLen 0)

  ret <vscale x 32 x bfloat> %a
}
