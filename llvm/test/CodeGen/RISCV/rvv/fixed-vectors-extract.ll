; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -target-abi=ilp32d -mattr=+experimental-v,+experimental-zfh,+f,+d -verify-machineinstrs -riscv-v-vector-bits-min=128 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=RV32
; RUN: llc -mtriple=riscv64 -target-abi=lp64d -mattr=+experimental-v,+experimental-zfh,+f,+d -verify-machineinstrs -riscv-v-vector-bits-min=128 -verify-machineinstrs < %s | FileCheck %s --check-prefixes=RV64

define i8 @extractelt_v16i8(<16 x i8>* %x) nounwind {
; RV32-LABEL: extractelt_v16i8:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 16
; RV32-NEXT:    vsetvli a1, a1, e8,m1,ta,mu
; RV32-NEXT:    vle8.v v25, (a0)
; RV32-NEXT:    addi a0, zero, 1
; RV32-NEXT:    vsetvli a0, a0, e8,m1,ta,mu
; RV32-NEXT:    vslidedown.vi v25, v25, 7
; RV32-NEXT:    vsetvli zero, zero, e8,m1,ta,mu
; RV32-NEXT:    vmv.x.s a0, v25
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v16i8:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 16
; RV64-NEXT:    vsetvli a1, a1, e8,m1,ta,mu
; RV64-NEXT:    vle8.v v25, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e8,m1,ta,mu
; RV64-NEXT:    vslidedown.vi v25, v25, 7
; RV64-NEXT:    vsetvli zero, zero, e8,m1,ta,mu
; RV64-NEXT:    vmv.x.s a0, v25
; RV64-NEXT:    ret
  %a = load <16 x i8>, <16 x i8>* %x
  %b = extractelement <16 x i8> %a, i32 7
  ret i8 %b
}

define i16 @extractelt_v8i16(<8 x i16>* %x) nounwind {
; RV32-LABEL: extractelt_v8i16:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 8
; RV32-NEXT:    vsetvli a1, a1, e16,m1,ta,mu
; RV32-NEXT:    vle16.v v25, (a0)
; RV32-NEXT:    addi a0, zero, 1
; RV32-NEXT:    vsetvli a0, a0, e16,m1,ta,mu
; RV32-NEXT:    vslidedown.vi v25, v25, 7
; RV32-NEXT:    vsetvli zero, zero, e16,m1,ta,mu
; RV32-NEXT:    vmv.x.s a0, v25
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v8i16:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 8
; RV64-NEXT:    vsetvli a1, a1, e16,m1,ta,mu
; RV64-NEXT:    vle16.v v25, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e16,m1,ta,mu
; RV64-NEXT:    vslidedown.vi v25, v25, 7
; RV64-NEXT:    vsetvli zero, zero, e16,m1,ta,mu
; RV64-NEXT:    vmv.x.s a0, v25
; RV64-NEXT:    ret
  %a = load <8 x i16>, <8 x i16>* %x
  %b = extractelement <8 x i16> %a, i32 7
  ret i16 %b
}

define i32 @extractelt_v4i32(<4 x i32>* %x) nounwind {
; RV32-LABEL: extractelt_v4i32:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 4
; RV32-NEXT:    vsetvli a1, a1, e32,m1,ta,mu
; RV32-NEXT:    vle32.v v25, (a0)
; RV32-NEXT:    addi a0, zero, 1
; RV32-NEXT:    vsetvli a0, a0, e32,m1,ta,mu
; RV32-NEXT:    vslidedown.vi v25, v25, 2
; RV32-NEXT:    vsetvli zero, zero, e32,m1,ta,mu
; RV32-NEXT:    vmv.x.s a0, v25
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v4i32:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 4
; RV64-NEXT:    vsetvli a1, a1, e32,m1,ta,mu
; RV64-NEXT:    vle32.v v25, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e32,m1,ta,mu
; RV64-NEXT:    vslidedown.vi v25, v25, 2
; RV64-NEXT:    vsetvli zero, zero, e32,m1,ta,mu
; RV64-NEXT:    vmv.x.s a0, v25
; RV64-NEXT:    ret
  %a = load <4 x i32>, <4 x i32>* %x
  %b = extractelement <4 x i32> %a, i32 2
  ret i32 %b
}

define i64 @extractelt_v2i64(<2 x i64>* %x) nounwind {
; RV32-LABEL: extractelt_v2i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 2
; RV32-NEXT:    vsetvli a1, a1, e64,m1,ta,mu
; RV32-NEXT:    vle64.v v25, (a0)
; RV32-NEXT:    vsetvli zero, zero, e64,m1,ta,mu
; RV32-NEXT:    vmv.x.s a0, v25
; RV32-NEXT:    addi a1, zero, 1
; RV32-NEXT:    addi a2, zero, 32
; RV32-NEXT:    vsetvli a1, a1, e64,m1,ta,mu
; RV32-NEXT:    vsrl.vx v25, v25, a2
; RV32-NEXT:    vsetvli zero, zero, e64,m1,ta,mu
; RV32-NEXT:    vmv.x.s a1, v25
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v2i64:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 2
; RV64-NEXT:    vsetvli a1, a1, e64,m1,ta,mu
; RV64-NEXT:    vle64.v v25, (a0)
; RV64-NEXT:    vsetvli zero, zero, e64,m1,ta,mu
; RV64-NEXT:    vmv.x.s a0, v25
; RV64-NEXT:    ret
  %a = load <2 x i64>, <2 x i64>* %x
  %b = extractelement <2 x i64> %a, i32 0
  ret i64 %b
}

define i8 @extractelt_v32i8(<32 x i8>* %x) nounwind {
; RV32-LABEL: extractelt_v32i8:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 32
; RV32-NEXT:    vsetvli a1, a1, e8,m2,ta,mu
; RV32-NEXT:    vle8.v v26, (a0)
; RV32-NEXT:    addi a0, zero, 1
; RV32-NEXT:    vsetvli a0, a0, e8,m2,ta,mu
; RV32-NEXT:    vslidedown.vi v26, v26, 7
; RV32-NEXT:    vsetvli zero, zero, e8,m2,ta,mu
; RV32-NEXT:    vmv.x.s a0, v26
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v32i8:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 32
; RV64-NEXT:    vsetvli a1, a1, e8,m2,ta,mu
; RV64-NEXT:    vle8.v v26, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e8,m2,ta,mu
; RV64-NEXT:    vslidedown.vi v26, v26, 7
; RV64-NEXT:    vsetvli zero, zero, e8,m2,ta,mu
; RV64-NEXT:    vmv.x.s a0, v26
; RV64-NEXT:    ret
  %a = load <32 x i8>, <32 x i8>* %x
  %b = extractelement <32 x i8> %a, i32 7
  ret i8 %b
}

define i16 @extractelt_v16i16(<16 x i16>* %x) nounwind {
; RV32-LABEL: extractelt_v16i16:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 16
; RV32-NEXT:    vsetvli a1, a1, e16,m2,ta,mu
; RV32-NEXT:    vle16.v v26, (a0)
; RV32-NEXT:    addi a0, zero, 1
; RV32-NEXT:    vsetvli a0, a0, e16,m2,ta,mu
; RV32-NEXT:    vslidedown.vi v26, v26, 7
; RV32-NEXT:    vsetvli zero, zero, e16,m2,ta,mu
; RV32-NEXT:    vmv.x.s a0, v26
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v16i16:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 16
; RV64-NEXT:    vsetvli a1, a1, e16,m2,ta,mu
; RV64-NEXT:    vle16.v v26, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e16,m2,ta,mu
; RV64-NEXT:    vslidedown.vi v26, v26, 7
; RV64-NEXT:    vsetvli zero, zero, e16,m2,ta,mu
; RV64-NEXT:    vmv.x.s a0, v26
; RV64-NEXT:    ret
  %a = load <16 x i16>, <16 x i16>* %x
  %b = extractelement <16 x i16> %a, i32 7
  ret i16 %b
}

define i32 @extractelt_v8i32(<8 x i32>* %x) nounwind {
; RV32-LABEL: extractelt_v8i32:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 8
; RV32-NEXT:    vsetvli a1, a1, e32,m2,ta,mu
; RV32-NEXT:    vle32.v v26, (a0)
; RV32-NEXT:    addi a0, zero, 1
; RV32-NEXT:    vsetvli a0, a0, e32,m2,ta,mu
; RV32-NEXT:    vslidedown.vi v26, v26, 6
; RV32-NEXT:    vsetvli zero, zero, e32,m2,ta,mu
; RV32-NEXT:    vmv.x.s a0, v26
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v8i32:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 8
; RV64-NEXT:    vsetvli a1, a1, e32,m2,ta,mu
; RV64-NEXT:    vle32.v v26, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e32,m2,ta,mu
; RV64-NEXT:    vslidedown.vi v26, v26, 6
; RV64-NEXT:    vsetvli zero, zero, e32,m2,ta,mu
; RV64-NEXT:    vmv.x.s a0, v26
; RV64-NEXT:    ret
  %a = load <8 x i32>, <8 x i32>* %x
  %b = extractelement <8 x i32> %a, i32 6
  ret i32 %b
}

define i64 @extractelt_v4i64(<4 x i64>* %x) nounwind {
; RV32-LABEL: extractelt_v4i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 4
; RV32-NEXT:    vsetvli a1, a1, e64,m2,ta,mu
; RV32-NEXT:    vle64.v v26, (a0)
; RV32-NEXT:    addi a1, zero, 1
; RV32-NEXT:    vsetvli a0, a1, e64,m2,ta,mu
; RV32-NEXT:    vslidedown.vi v26, v26, 3
; RV32-NEXT:    vsetvli zero, zero, e64,m2,ta,mu
; RV32-NEXT:    vmv.x.s a0, v26
; RV32-NEXT:    addi a2, zero, 32
; RV32-NEXT:    vsetvli a1, a1, e64,m2,ta,mu
; RV32-NEXT:    vsrl.vx v26, v26, a2
; RV32-NEXT:    vsetvli zero, zero, e64,m2,ta,mu
; RV32-NEXT:    vmv.x.s a1, v26
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v4i64:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 4
; RV64-NEXT:    vsetvli a1, a1, e64,m2,ta,mu
; RV64-NEXT:    vle64.v v26, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e64,m2,ta,mu
; RV64-NEXT:    vslidedown.vi v26, v26, 3
; RV64-NEXT:    vsetvli zero, zero, e64,m2,ta,mu
; RV64-NEXT:    vmv.x.s a0, v26
; RV64-NEXT:    ret
  %a = load <4 x i64>, <4 x i64>* %x
  %b = extractelement <4 x i64> %a, i32 3
  ret i64 %b
}

; This uses a non-power of 2 type so that it isn't an MVT to catch an
; incorrect use of getSimpleValueType().
; NOTE: Type legalization is bitcasting to vXi32 and doing 2 independent
; slidedowns and extracts.
define i64 @extractelt_v3i64(<3 x i64>* %x) nounwind {
; RV32-LABEL: extractelt_v3i64:
; RV32:       # %bb.0:
; RV32-NEXT:    addi a1, zero, 8
; RV32-NEXT:    vsetvli a1, a1, e32,m2,ta,mu
; RV32-NEXT:    vle32.v v26, (a0)
; RV32-NEXT:    addi a1, zero, 1
; RV32-NEXT:    vsetvli a0, a1, e32,m2,ta,mu
; RV32-NEXT:    vslidedown.vi v28, v26, 4
; RV32-NEXT:    vsetvli zero, zero, e32,m2,ta,mu
; RV32-NEXT:    vmv.x.s a0, v28
; RV32-NEXT:    vsetvli a1, a1, e32,m2,ta,mu
; RV32-NEXT:    vslidedown.vi v26, v26, 5
; RV32-NEXT:    vsetvli zero, zero, e32,m2,ta,mu
; RV32-NEXT:    vmv.x.s a1, v26
; RV32-NEXT:    ret
;
; RV64-LABEL: extractelt_v3i64:
; RV64:       # %bb.0:
; RV64-NEXT:    addi a1, zero, 4
; RV64-NEXT:    vsetvli a1, a1, e64,m2,ta,mu
; RV64-NEXT:    vle64.v v26, (a0)
; RV64-NEXT:    addi a0, zero, 1
; RV64-NEXT:    vsetvli a0, a0, e64,m2,ta,mu
; RV64-NEXT:    vslidedown.vi v26, v26, 2
; RV64-NEXT:    vsetvli zero, zero, e64,m2,ta,mu
; RV64-NEXT:    vmv.x.s a0, v26
; RV64-NEXT:    ret
  %a = load <3 x i64>, <3 x i64>* %x
  %b = extractelement <3 x i64> %a, i32 2
  ret i64 %b
}
