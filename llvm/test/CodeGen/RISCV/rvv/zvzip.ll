; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+v -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,NOZIP
; RUN: llc -mtriple=riscv64 -mattr=+v,+experimental-zvzip -verify-machineinstrs < %s | FileCheck %s --check-prefixes=CHECK,ZIP

define <4 x i32> @zipeven(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zipeven:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vslideup.vi v8, v9, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  ret <4 x i32> %c
}

define <4 x i32> @zipeven_swapped(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zipeven_swapped:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vslideup.vi v9, v8, 1, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_swapped:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v9, v8
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 4, i32 0, i32 6, i32 2>
  ret <4 x i32> %c
}

define <4 x i64> @zipeven_i64(<4 x i64> %a, <4 x i64> %b) {
; NOZIP-LABEL: zipeven_i64:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, mu
; NOZIP-NEXT:    vslideup.vi v8, v10, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_i64:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v10
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i64> %a, <4 x i64> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  ret <4 x i64> %c
}

define <4 x half> @zipeven_half(<4 x half> %a, <4 x half> %b) {
; CHECK-LABEL: zipeven_half:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lh a3, 0(a1)
; CHECK-NEXT:    lh a4, 0(a2)
; CHECK-NEXT:    lh a1, 16(a1)
; CHECK-NEXT:    lh a2, 16(a2)
; CHECK-NEXT:    sh a3, 0(a0)
; CHECK-NEXT:    sh a4, 2(a0)
; CHECK-NEXT:    sh a1, 4(a0)
; CHECK-NEXT:    sh a2, 6(a0)
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <4 x half> %a, <4 x half> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  ret <4 x half> %c
}

define <4 x float> @zipeven_float(<4 x float> %a, <4 x float> %b) {
; NOZIP-LABEL: zipeven_float:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vslideup.vi v8, v9, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_float:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x float> %a, <4 x float> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  ret <4 x float> %c
}

define <4 x double> @zipeven_double(<4 x double> %a, <4 x double> %b) {
; NOZIP-LABEL: zipeven_double:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, mu
; NOZIP-NEXT:    vslideup.vi v8, v10, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_double:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v10
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x double> %a, <4 x double> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  ret <4 x double> %c
}


define <4 x i32> @zipodd(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zipodd:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 5
; NOZIP-NEXT:    vslidedown.vi v9, v8, 1, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipodd:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipodd.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  ret <4 x i32> %c
}

define <4 x i32> @zipodd_swapped(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zipodd_swapped:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 5
; NOZIP-NEXT:    vslidedown.vi v8, v9, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipodd_swapped:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipodd.vv v8, v9, v8
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 5, i32 1, i32 7, i32 3>
  ret <4 x i32> %c
}

define <4 x i32> @zipeven_single(<4 x i32> %a) {
; CHECK-LABEL: zipeven_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> poison, <4 x i32> <i32 0, i32 poison, i32 2, i32 poison>
  ret <4 x i32> %c
}

define <4 x i32> @zipodd_single(<4 x i32> %a) {
; CHECK-LABEL: zipodd_single:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; CHECK-NEXT:    vslidedown.vi v8, v8, 1
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> poison, <4 x i32> <i32 1, i32 poison, i32 3, i32 poison>
  ret <4 x i32> %c
}

define <4 x i32> @zipodd_both(<4 x i32> %a) {
; NOZIP-LABEL: zipodd_both:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    lui a0, 12336
; NOZIP-NEXT:    addi a0, a0, 257
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vmv.s.x v9, a0
; NOZIP-NEXT:    vsext.vf4 v10, v9
; NOZIP-NEXT:    vrgather.vv v9, v8, v10
; NOZIP-NEXT:    vmv.v.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipodd_both:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipodd.vv v8, v8, v8
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> poison, <4 x i32> <i32 1, i32 1, i32 3, i32 3>
  ret <4 x i32> %c
}

define <4 x i32> @zipeven_both(<4 x i32> %a) {
; NOZIP-LABEL: zipeven_both:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    lui a0, 8224
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vmv.s.x v9, a0
; NOZIP-NEXT:    vsext.vf4 v10, v9
; NOZIP-NEXT:    vrgather.vv v9, v8, v10
; NOZIP-NEXT:    vmv.v.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_both:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v8
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> poison, <4 x i32> <i32 0, i32 0, i32 2, i32 2>
  ret <4 x i32> %c
}

define <4 x i32> @zipeven_partial(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zipeven_partial:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e32, m1, tu, ma
; NOZIP-NEXT:    vslideup.vi v8, v9, 1
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_partial:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 poison>
  ret <4 x i32> %c
}

define <4 x i32> @zipodd_partial(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zipodd_partial:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 13
; NOZIP-NEXT:    vslidedown.vi v9, v8, 1, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipodd_partial:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipodd.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 1, i32 5, i32 3, i32 poison>
  ret <4 x i32> %c
}


define <4 x i32> @zip2a_i32(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: zip2a_i32:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vwaddu.vv v10, v8, v9
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vwmaccu.vx v10, a0, v9
; NOZIP-NEXT:    vmv1r.v v8, v10
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zip2a_i32:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzip2a.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  ret <4 x i32> %c
}

define <4 x i64> @zip2a_i64(<4 x i64> %a, <4 x i64> %b) {
; NOZIP-LABEL: zip2a_i64:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e16, mf2, ta, ma
; NOZIP-NEXT:    vid.v v12
; NOZIP-NEXT:    vsrl.vi v14, v12, 1
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; NOZIP-NEXT:    vrgatherei16.vv v12, v8, v14
; NOZIP-NEXT:    vrgatherei16.vv v12, v10, v14, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v12
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zip2a_i64:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZIP-NEXT:    vzip2a.vv v8, v8, v10
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i64> %a, <4 x i64> %b, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  ret <4 x i64> %c
}

define <4 x half> @zip2a_half(<4 x half> %a, <4 x half> %b) {
; CHECK-LABEL: zip2a_half:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lh a3, 0(a1)
; CHECK-NEXT:    lh a4, 0(a2)
; CHECK-NEXT:    lh a1, 8(a1)
; CHECK-NEXT:    lh a2, 8(a2)
; CHECK-NEXT:    sh a3, 0(a0)
; CHECK-NEXT:    sh a4, 2(a0)
; CHECK-NEXT:    sh a1, 4(a0)
; CHECK-NEXT:    sh a2, 6(a0)
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <4 x half> %a, <4 x half> %b, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  ret <4 x half> %c
}

define <4 x float> @zip2a_float(<4 x float> %a, <4 x float> %b) {
; NOZIP-LABEL: zip2a_float:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vwaddu.vv v10, v8, v9
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vwmaccu.vx v10, a0, v9
; NOZIP-NEXT:    vmv1r.v v8, v10
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zip2a_float:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzip2a.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x float> %a, <4 x float> %b, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  ret <4 x float> %c
}

define <4 x double> @zip2a_double(<4 x double> %a, <4 x double> %b) {
; NOZIP-LABEL: zip2a_double:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e16, mf2, ta, ma
; NOZIP-NEXT:    vid.v v12
; NOZIP-NEXT:    vsrl.vi v14, v12, 1
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; NOZIP-NEXT:    vrgatherei16.vv v12, v8, v14
; NOZIP-NEXT:    vrgatherei16.vv v12, v10, v14, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v12
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zip2a_double:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZIP-NEXT:    vzip2a.vv v8, v8, v10
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x double> %a, <4 x double> %b, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  ret <4 x double> %c
}


define <8 x i64> @dual_interleave(<4 x i64> %a, <4 x i64> %b) {
; NOZIP-LABEL: dual_interleave:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 8, e16, m1, ta, ma
; NOZIP-NEXT:    vmv2r.v v16, v10
; NOZIP-NEXT:    vid.v v10
; NOZIP-NEXT:    lui a0, %hi(.LCPI19_0)
; NOZIP-NEXT:    addi a0, a0, %lo(.LCPI19_0)
; NOZIP-NEXT:    vsrl.vi v18, v10, 1
; NOZIP-NEXT:    vle16.v v20, (a0)
; NOZIP-NEXT:    vsetvli zero, zero, e64, m4, ta, mu
; NOZIP-NEXT:    vrgatherei16.vv v12, v8, v18
; NOZIP-NEXT:    li a0, 170
; NOZIP-NEXT:    vmv.s.x v0, a0
; NOZIP-NEXT:    vrgatherei16.vv v12, v16, v20, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v12
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: dual_interleave:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 8, e64, m4, ta, mu
; ZIP-NEXT:    vmv2r.v v12, v10
; ZIP-NEXT:    vzip2a.vv v8, v8, v8
; ZIP-NEXT:    lui a0, %hi(.LCPI19_0)
; ZIP-NEXT:    addi a0, a0, %lo(.LCPI19_0)
; ZIP-NEXT:    vle16.v v16, (a0)
; ZIP-NEXT:    li a0, 170
; ZIP-NEXT:    vmv.s.x v0, a0
; ZIP-NEXT:    vrgatherei16.vv v8, v12, v16, v0.t
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i64> %a, <4 x i64> %b, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 4>
  ret <8 x i64> %c
}

define <4 x i32> @unzip2a_i32(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: unzip2a_i32:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vid.v v10
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vadd.vv v10, v10, v10
; NOZIP-NEXT:    vadd.vi v10, v10, -4
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vnsrl.wi v8, v8, 0
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vrgather.vv v8, v9, v10, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_i32:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v8
; ZIP-NEXT:    vunzip2a.vv v9, v9, v8
; ZIP-NEXT:    vslideup.vi v8, v9, 2
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  ret <4 x i32> %c
}

define <4 x i32> @unzip2b_i32(<4 x i32> %a, <4 x i32> %b) {
; NOZIP-LABEL: unzip2b_i32:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e32, m1, ta, ma
; NOZIP-NEXT:    vslidedown.vi v10, v9, 2
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vwaddu.vv v11, v9, v10
; NOZIP-NEXT:    vwmaccu.vx v11, a0, v10
; NOZIP-NEXT:    li a0, 32
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vnsrl.wx v8, v8, a0
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vmerge.vvm v8, v8, v11, v0
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2b_i32:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vunzip2b.vv v8, v8, v8
; ZIP-NEXT:    vunzip2b.vv v9, v9, v8
; ZIP-NEXT:    vslideup.vi v8, v9, 2
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  ret <4 x i32> %c
}

define <4 x half> @unzip2a_half(<4 x half> %a, <4 x half> %b) {
; CHECK-LABEL: unzip2a_half:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lh a3, 0(a1)
; CHECK-NEXT:    lh a1, 16(a1)
; CHECK-NEXT:    lh a4, 0(a2)
; CHECK-NEXT:    lh a2, 16(a2)
; CHECK-NEXT:    sh a3, 0(a0)
; CHECK-NEXT:    sh a1, 2(a0)
; CHECK-NEXT:    sh a4, 4(a0)
; CHECK-NEXT:    sh a2, 6(a0)
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <4 x half> %a, <4 x half> %b, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  ret <4 x half> %c
}

define <4 x half> @unzip2b_half(<4 x half> %a, <4 x half> %b) {
; CHECK-LABEL: unzip2b_half:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lh a3, 8(a1)
; CHECK-NEXT:    lh a1, 24(a1)
; CHECK-NEXT:    lh a4, 8(a2)
; CHECK-NEXT:    lh a2, 24(a2)
; CHECK-NEXT:    sh a3, 0(a0)
; CHECK-NEXT:    sh a1, 2(a0)
; CHECK-NEXT:    sh a4, 4(a0)
; CHECK-NEXT:    sh a2, 6(a0)
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <4 x half> %a, <4 x half> %b, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  ret <4 x half> %c
}

define <4 x float> @unzip2a_float(<4 x float> %a, <4 x float> %b) {
; NOZIP-LABEL: unzip2a_float:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vid.v v10
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vadd.vv v10, v10, v10
; NOZIP-NEXT:    vadd.vi v10, v10, -4
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vnsrl.wi v8, v8, 0
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vrgather.vv v8, v9, v10, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_float:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v8
; ZIP-NEXT:    vunzip2a.vv v9, v9, v8
; ZIP-NEXT:    vslideup.vi v8, v9, 2
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x float> %a, <4 x float> %b, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  ret <4 x float> %c
}

define <4 x float> @unzip2b_float(<4 x float> %a, <4 x float> %b) {
; NOZIP-LABEL: unzip2b_float:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e32, m1, ta, ma
; NOZIP-NEXT:    vslidedown.vi v10, v9, 2
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vwaddu.vv v11, v9, v10
; NOZIP-NEXT:    vwmaccu.vx v11, a0, v10
; NOZIP-NEXT:    li a0, 32
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vnsrl.wx v8, v8, a0
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vmerge.vvm v8, v8, v11, v0
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2b_float:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vunzip2b.vv v8, v8, v8
; ZIP-NEXT:    vunzip2b.vv v9, v9, v8
; ZIP-NEXT:    vslideup.vi v8, v9, 2
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x float> %a, <4 x float> %b, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  ret <4 x float> %c
}

define <4 x double> @unzip2a_double(<4 x double> %a, <4 x double> %b) {
; NOZIP-LABEL: unzip2a_double:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e16, mf2, ta, ma
; NOZIP-NEXT:    vmv.v.i v14, 5
; NOZIP-NEXT:    vid.v v15
; NOZIP-NEXT:    vsetvli zero, zero, e64, m2, ta, ma
; NOZIP-NEXT:    vcompress.vm v12, v8, v14
; NOZIP-NEXT:    vsetvli zero, zero, e16, mf2, ta, ma
; NOZIP-NEXT:    vadd.vv v8, v15, v15
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vadd.vi v8, v8, -4
; NOZIP-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; NOZIP-NEXT:    vrgatherei16.vv v12, v10, v8, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v12
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_double:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m1, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v9
; ZIP-NEXT:    vunzip2a.vv v10, v10, v11
; ZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZIP-NEXT:    vslideup.vi v8, v10, 2
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x double> %a, <4 x double> %b, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  ret <4 x double> %c
}

define <4 x double> @unzip2b_double(<4 x double> %a, <4 x double> %b) {
; NOZIP-LABEL: unzip2b_double:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e16, mf2, ta, ma
; NOZIP-NEXT:    vmv.v.i v14, 10
; NOZIP-NEXT:    vid.v v15
; NOZIP-NEXT:    vsetvli zero, zero, e64, m2, ta, ma
; NOZIP-NEXT:    vcompress.vm v12, v8, v14
; NOZIP-NEXT:    vsetvli zero, zero, e16, mf2, ta, ma
; NOZIP-NEXT:    vadd.vv v8, v15, v15
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vadd.vi v8, v8, -3
; NOZIP-NEXT:    vsetvli zero, zero, e64, m2, ta, mu
; NOZIP-NEXT:    vrgatherei16.vv v12, v10, v8, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v12
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2b_double:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m1, ta, ma
; ZIP-NEXT:    vunzip2b.vv v8, v8, v9
; ZIP-NEXT:    vunzip2b.vv v10, v10, v11
; ZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; ZIP-NEXT:    vslideup.vi v8, v10, 2
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x double> %a, <4 x double> %b, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  ret <4 x double> %c
}

define <8 x i32> @unzip2a_i32_singlesrc(<8 x i32> %a) {
; CHECK-LABEL: unzip2a_i32_singlesrc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; CHECK-NEXT:    vnsrl.wi v10, v8, 0
; CHECK-NEXT:    vmv2r.v v8, v10
; CHECK-NEXT:    ret
entry:
  %c = shufflevector <8 x i32> %a, <8 x i32> poison, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  ret <8 x i32> %c
}

define <8 x i64> @unzip2a_i64_singlesrc(<8 x i64> %a) {
; NOZIP-LABEL: unzip2a_i64_singlesrc:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    li a0, 85
; NOZIP-NEXT:    vsetivli zero, 8, e64, m4, ta, ma
; NOZIP-NEXT:    vmv.s.x v16, a0
; NOZIP-NEXT:    vcompress.vm v12, v8, v16
; NOZIP-NEXT:    vmv.v.v v8, v12
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_i64_singlesrc:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 8, e64, m2, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v10
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <8 x i64> %a, <8 x i64> poison, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 undef, i32 undef, i32 undef, i32 undef>
  ret <8 x i64> %c
}


define <4 x i8> @zipeven_mf4(<4 x i8> %a, <4 x i8> %b) {
; NOZIP-LABEL: zipeven_mf4:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e8, mf4, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vslideup.vi v8, v9, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_mf4:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e8, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i8> %a, <4 x i8> %b, <4 x i32> <i32 0, i32 4, i32 2, i32 6>
  ret <4 x i8> %c
}

define <4 x i8> @zipodd_mf4(<4 x i8> %a, <4 x i8> %b) {
; NOZIP-LABEL: zipodd_mf4:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e8, mf4, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 5
; NOZIP-NEXT:    vslidedown.vi v9, v8, 1, v0.t
; NOZIP-NEXT:    vmv1r.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipodd_mf4:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e8, m1, ta, ma
; ZIP-NEXT:    vzipodd.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i8> %a, <4 x i8> %b, <4 x i32> <i32 1, i32 5, i32 3, i32 7>
  ret <4 x i8> %c
}

define <4 x i8> @zip2a_mf4(<4 x i8> %a, <4 x i8> %b) {
; NOZIP-LABEL: zip2a_mf4:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; NOZIP-NEXT:    vwaddu.vv v10, v8, v9
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vwmaccu.vx v10, a0, v9
; NOZIP-NEXT:    vmv1r.v v8, v10
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zip2a_mf4:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e8, m1, ta, ma
; ZIP-NEXT:    vzip2a.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i8> %a, <4 x i8> %b, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  ret <4 x i8> %c
}

define <4 x i8> @unzip2a_mf4(<4 x i8> %a, <4 x i8> %b) {
; NOZIP-LABEL: unzip2a_mf4:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e8, mf4, ta, ma
; NOZIP-NEXT:    vid.v v10
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vadd.vv v10, v10, v10
; NOZIP-NEXT:    vadd.vi v10, v10, -4
; NOZIP-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; NOZIP-NEXT:    vnsrl.wi v8, v8, 0
; NOZIP-NEXT:    vsetivli zero, 4, e8, mf4, ta, mu
; NOZIP-NEXT:    vrgather.vv v8, v9, v10, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_mf4:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; ZIP-NEXT:    vslideup.vi v8, v9, 4
; ZIP-NEXT:    vsetivli zero, 8, e8, m1, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v8
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i8> %a, <4 x i8> %b, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  ret <4 x i8> %c
}

define <4 x i8> @unzip2b_mf4(<4 x i8> %a, <4 x i8> %b) {
; NOZIP-LABEL: unzip2b_mf4:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e8, mf4, ta, ma
; NOZIP-NEXT:    vslidedown.vi v10, v9, 2
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vsetivli zero, 2, e8, mf8, ta, ma
; NOZIP-NEXT:    vwaddu.vv v11, v9, v10
; NOZIP-NEXT:    vwmaccu.vx v11, a0, v10
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vnsrl.wi v8, v8, 8
; NOZIP-NEXT:    vsetivli zero, 4, e8, mf4, ta, ma
; NOZIP-NEXT:    vmerge.vvm v8, v8, v11, v0
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2b_mf4:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 8, e8, mf2, ta, ma
; ZIP-NEXT:    vslideup.vi v8, v9, 4
; ZIP-NEXT:    vsetivli zero, 8, e8, m1, ta, ma
; ZIP-NEXT:    vunzip2b.vv v8, v8, v8
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i8> %a, <4 x i8> %b, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  ret <4 x i8> %c
}


define <4 x i32> @unzip2a_exact_vlen_m1(<4 x i32> %a, <4 x i32> %b) vscale_range(2,2) {
; NOZIP-LABEL: unzip2a_exact_vlen_m1:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; NOZIP-NEXT:    vid.v v10
; NOZIP-NEXT:    vmv.v.i v0, 12
; NOZIP-NEXT:    vadd.vv v10, v10, v10
; NOZIP-NEXT:    vadd.vi v10, v10, -4
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vnsrl.wi v8, v8, 0
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vrgather.vv v8, v9, v10, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_exact_vlen_m1:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <4 x i32> %a, <4 x i32> %b, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  ret <4 x i32> %c
}

define <16 x i64> @unzip2a_exact_vlen_m8(<16 x i64> %a, <16 x i64> %b) vscale_range(2,2) {
; NOZIP-LABEL: unzip2a_exact_vlen_m8:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    li a0, -256
; NOZIP-NEXT:    vsetivli zero, 2, e64, m1, ta, ma
; NOZIP-NEXT:    vslideup.vi v18, v19, 1
; NOZIP-NEXT:    vslideup.vi v10, v11, 1
; NOZIP-NEXT:    vslideup.vi v16, v17, 1
; NOZIP-NEXT:    vslideup.vi v8, v9, 1
; NOZIP-NEXT:    vmv.v.v v28, v16
; NOZIP-NEXT:    vmv.v.v v9, v10
; NOZIP-NEXT:    vmv.v.v v29, v18
; NOZIP-NEXT:    vslideup.vi v20, v21, 1
; NOZIP-NEXT:    vmv1r.v v10, v12
; NOZIP-NEXT:    vmv.v.v v30, v20
; NOZIP-NEXT:    vslideup.vi v10, v13, 1
; NOZIP-NEXT:    vmv1r.v v31, v22
; NOZIP-NEXT:    vslideup.vi v31, v23, 1
; NOZIP-NEXT:    vmv.s.x v0, a0
; NOZIP-NEXT:    vmv1r.v v11, v14
; NOZIP-NEXT:    vslideup.vi v11, v15, 1
; NOZIP-NEXT:    vsetivli zero, 16, e64, m8, ta, ma
; NOZIP-NEXT:    vmerge.vvm v8, v8, v24, v0
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_exact_vlen_m8:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 16, e64, m8, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v16
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <16 x i64> %a, <16 x i64> %b, <16 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14, i32 16, i32 18, i32 20, i32 22, i32 24, i32 26, i32 28, i32 30>
  ret <16 x i64> %c
}


define <8 x i16> @zipeven_i32_as_i16(<8 x i16> %a, <8 x i16> %b) {
; NOZIP-LABEL: zipeven_i32_as_i16:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 10
; NOZIP-NEXT:    vslideup.vi v8, v9, 1, v0.t
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipeven_i32_as_i16:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipeven.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <8 x i16> %a, <8 x i16> %b, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 4, i32 5, i32 12, i32 13>
  ret <8 x i16> %c
}

define <8 x i16> @zipodd_i32_as_i16(<8 x i16> %a, <8 x i16> %b) {
; NOZIP-LABEL: zipodd_i32_as_i16:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, mu
; NOZIP-NEXT:    vmv.v.i v0, 5
; NOZIP-NEXT:    vslidedown.vi v9, v8, 1, v0.t
; NOZIP-NEXT:    vmv.v.v v8, v9
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zipodd_i32_as_i16:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzipodd.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <8 x i16> %a, <8 x i16> %b, <8 x i32> <i32 2, i32 3, i32 10, i32 11, i32 6, i32 7, i32 14, i32 15>
  ret <8 x i16> %c
}

define <8 x i16> @zip2a_i32_as_i16(<8 x i16> %a, <8 x i16> %b) {
; NOZIP-LABEL: zip2a_i32_as_i16:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 2, e32, mf2, ta, ma
; NOZIP-NEXT:    vwaddu.vv v10, v8, v9
; NOZIP-NEXT:    li a0, -1
; NOZIP-NEXT:    vwmaccu.vx v10, a0, v9
; NOZIP-NEXT:    vmv1r.v v8, v10
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: zip2a_i32_as_i16:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e32, m1, ta, ma
; ZIP-NEXT:    vzip2a.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <8 x i16> %a, <8 x i16> %b, <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 2, i32 3, i32 10, i32 11>
  ret <8 x i16> %c
}

define <8 x i32> @unzip2a_i64_as_i32_singlesrc(<8 x i32> %a) {
; NOZIP-LABEL: unzip2a_i64_as_i32_singlesrc:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; NOZIP-NEXT:    vmv.v.i v12, 5
; NOZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; NOZIP-NEXT:    vcompress.vm v10, v8, v12
; NOZIP-NEXT:    vmv.v.v v8, v10
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2a_i64_as_i32_singlesrc:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m1, ta, ma
; ZIP-NEXT:    vunzip2a.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <8 x i32> %a, <8 x i32> poison, <8 x i32> <i32 0, i32 1, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  ret <8 x i32> %c
}

define <8 x i32> @unzip2b_i64_as_i32_singlesrc(<8 x i32> %a) {
; NOZIP-LABEL: unzip2b_i64_as_i32_singlesrc:
; NOZIP:       # %bb.0: # %entry
; NOZIP-NEXT:    vsetivli zero, 1, e8, mf8, ta, ma
; NOZIP-NEXT:    vmv.v.i v12, 10
; NOZIP-NEXT:    vsetivli zero, 4, e64, m2, ta, ma
; NOZIP-NEXT:    vcompress.vm v10, v8, v12
; NOZIP-NEXT:    vmv.v.v v8, v10
; NOZIP-NEXT:    ret
;
; ZIP-LABEL: unzip2b_i64_as_i32_singlesrc:
; ZIP:       # %bb.0: # %entry
; ZIP-NEXT:    vsetivli zero, 4, e64, m1, ta, ma
; ZIP-NEXT:    vunzip2b.vv v8, v8, v9
; ZIP-NEXT:    ret
entry:
  %c = shufflevector <8 x i32> %a, <8 x i32> poison, <8 x i32> <i32 2, i32 3, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  ret <8 x i32> %c
}
