; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+v,+zvbb -riscv-enable-vl-optimizer=false -verify-machineinstrs | FileCheck %s --check-prefixes=NOVLOPT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+v,+zvbb -riscv-enable-vl-optimizer=false -verify-machineinstrs | FileCheck %s --check-prefixes=NOVLOPT
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+v,+zvbb -riscv-enable-vl-optimizer -verify-machineinstrs | FileCheck %s --check-prefixes=VLOPT
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+v,+zvbb -riscv-enable-vl-optimizer -verify-machineinstrs | FileCheck %s --check-prefixes=VLOPT

; The purpose of this file is to check the behavior of specific instructions as it relates to the VL optimizer

define <vscale x 4 x i32> @vadd_vi(<vscale x 4 x i32> %a, iXLen %vl) {
; NOVLOPT-LABEL: vadd_vi:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vi v10, v8, 5
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vadd_vi:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vadd.vi v10, v8, 5
; VLOPT-NEXT:    vadd.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 5, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vadd_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vadd_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vadd_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v10
; VLOPT-NEXT:    vadd.vv v8, v8, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vadd_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vadd_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vadd_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vadd.vx v10, v8, a0
; VLOPT-NEXT:    vadd.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vsub_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vsub_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsub.vv v8, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsub.vv v8, v8, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vsub_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vsub.vv v8, v8, v10
; VLOPT-NEXT:    vsub.vv v8, v8, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vsub_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vsub_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsub.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsub.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vsub_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vsub.vx v10, v8, a0
; VLOPT-NEXT:    vsub.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vrsub_vi(<vscale x 4 x i32> %a, iXLen %vl) {
; NOVLOPT-LABEL: vrsub_vi:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vrsub.vi v10, v8, 5
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vrsub_vi:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vrsub.vi v10, v8, 5
; VLOPT-NEXT:    vadd.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vrsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 5, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vrsub_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vrsub_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vrsub.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsub.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vrsub_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vrsub.vx v10, v8, a0
; VLOPT-NEXT:    vsub.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vrsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vsub.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i64> @vwaddu_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwaddu_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwaddu.vv v12, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwaddu_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwaddu.vv v12, v8, v10
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwaddu.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwaddu_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwaddu_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwaddu.vx v12, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwaddu_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwaddu.vx v12, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwaddu.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsubu_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsubu_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsubu.vv v12, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsubu_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwsubu.vv v12, v8, v10
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsubu.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsubu_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsubu_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsubu.vx v12, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsubu_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwsubu.vx v12, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsubu.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwadd_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwadd_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwadd.vv v12, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwadd_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwadd.vv v12, v8, v10
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwadd.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwadd_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwadd_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwadd.vx v12, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwadd_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwadd.vx v12, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwadd.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsub_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsub_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsub.vv v12, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsub_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwsub.vv v12, v8, v10
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsub.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsub_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsub_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsub.vx v12, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsub_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwsub.vx v12, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsub.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwaddu_wv(<vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwaddu_wv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwaddu.wv v8, v8, v12
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwaddu_wv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwaddu.wv v8, v8, v12
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwaddu.w.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwaddu_wx(<vscale x 4 x i64> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwaddu_wx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwaddu.wx v8, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwaddu_wx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwaddu.wx v8, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwaddu.w.xv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsubu_wv(<vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsubu_wv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsubu.wv v8, v8, v12
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsubu_wv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwsubu.wv v8, v8, v12
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsubu.w.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsubu_wx(<vscale x 4 x i64> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsubu_wx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsubu.wx v8, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsubu_wx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwsubu.wx v8, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsubu.w.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwadd_wv(<vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwadd_wv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwadd.wv v8, v8, v12
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwadd_wv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwadd.wv v8, v8, v12
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwadd.w.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwadd_wx(<vscale x 4 x i64> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwadd_wx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwadd.wx v8, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwadd_wx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwadd.wx v8, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwadd.w.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsub_wv(<vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsub_wv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsub.wv v8, v8, v12
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsub_wv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vwsub.wv v8, v8, v12
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsub.w.nxv4i64.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i64> @vwsub_wx(<vscale x 4 x i64> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsub_wx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vwsub.wx v8, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v8, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsub_wx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vwsub.wx v8, v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e64, m4, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v8, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vwsub.w.nxv4i64.nxv4i32.i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i64.nxv4i64(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %1, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i32> @vsext_vf2(<vscale x 4 x i16> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vsext_vf2:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsext.vf2 v12, v8
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vsext_vf2:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vsext.vf2 v12, v8
; VLOPT-NEXT:    vadd.vv v8, v12, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vsext.nxv4i32.nxv4i16(<vscale x 4 x i32> poison, <vscale x 4 x i16> %a, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vsext_vf4(<vscale x 4 x i8> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vsext_vf4:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsext.vf4 v12, v8
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vsext_vf4:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vsext.vf4 v12, v8
; VLOPT-NEXT:    vadd.vv v8, v12, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vsext.nxv4i32.nxv4i8(<vscale x 4 x i32> poison, <vscale x 4 x i8> %a, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i64> @vsext_vf8(<vscale x 4 x i8> %a, <vscale x 4 x i64> %b, iXLen %vl) {
; NOVLOPT-LABEL: vsext_vf8:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e64, m4, ta, ma
; NOVLOPT-NEXT:    vsext.vf8 v16, v8
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v16, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vsext_vf8:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; VLOPT-NEXT:    vsext.vf8 v16, v8
; VLOPT-NEXT:    vadd.vv v8, v16, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vsext.nxv4i32.nxv4i8(<vscale x 4 x i64> poison, <vscale x 4 x i8> %a, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %b, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i32> @vzext_vf2(<vscale x 4 x i16> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vzext_vf2:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vzext.vf2 v12, v8
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vzext_vf2:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vzext.vf2 v12, v8
; VLOPT-NEXT:    vadd.vv v8, v12, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vzext.nxv4i32.nxv4i16(<vscale x 4 x i32> poison, <vscale x 4 x i16> %a, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vzext_vf4(<vscale x 4 x i8> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vzext_vf4:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vzext.vf4 v12, v8
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vzext_vf4:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vzext.vf4 v12, v8
; VLOPT-NEXT:    vadd.vv v8, v12, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vzext.nxv4i32.nxv4i8(<vscale x 4 x i32> poison, <vscale x 4 x i8> %a, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i64> @vzext_vf8(<vscale x 4 x i8> %a, <vscale x 4 x i64> %b, iXLen %vl) {
; NOVLOPT-LABEL: vzext_vf8:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e64, m4, ta, ma
; NOVLOPT-NEXT:    vzext.vf8 v16, v8
; NOVLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v16, v12
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vzext_vf8:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e64, m4, ta, ma
; VLOPT-NEXT:    vzext.vf8 v16, v8
; VLOPT-NEXT:    vadd.vv v8, v16, v12
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i64> @llvm.riscv.vzext.nxv4i32.nxv4i8(<vscale x 4 x i64> poison, <vscale x 4 x i8> %a, iXLen -1)
  %2 = call <vscale x 4 x i64> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i64> poison, <vscale x 4 x i64> %1, <vscale x 4 x i64> %b, iXLen %vl)
  ret <vscale x 4 x i64> %2
}

define <vscale x 4 x i32> @vsll_vi(<vscale x 4 x i32> %a, iXLen %vl) {
; NOVLOPT-LABEL: vsll_vi:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsll.vi v10, v8, 5
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vsll.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vsll_vi:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vsll.vi v10, v8, 5
; VLOPT-NEXT:    vsll.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vsll.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, iXLen 5, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vsll.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i16> @vnsrl_wi(<vscale x 4 x i32> %a, <vscale x 4 x i16> %b, iXLen %vl) {
; NOVLOPT-LABEL: vnsrl_wi:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e16, m1, ta, ma
; NOVLOPT-NEXT:    vnsrl.wi v11, v8, 5
; NOVLOPT-NEXT:    vsetvli zero, a0, e16, m1, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v11, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vnsrl_wi:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e16, m1, ta, ma
; VLOPT-NEXT:    vnsrl.wi v11, v8, 5
; VLOPT-NEXT:    vadd.vv v8, v11, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i16> @llvm.riscv.vnsrl.nxv4i16.nxv4i32(<vscale x 4 x i16> poison, <vscale x 4 x i32> %a, iXLen 5, iXLen -1)
  %2 = call <vscale x 4 x i16> @llvm.riscv.vadd.nxv4i16.nxv4i16(<vscale x 4 x i16> poison, <vscale x 4 x i16> %1, <vscale x 4 x i16> %b, iXLen %vl)
  ret <vscale x 4 x i16> %2
}



define <vscale x 4 x i32> @vmul_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vmul_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v8, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmul_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vmul.vv v8, v8, v10
; VLOPT-NEXT:    vmul.vv v8, v8, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmul_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vmul_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmul_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vmul.vx v10, v8, a0
; VLOPT-NEXT:    vmul.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmulh_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vmulh_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmulh.vv v8, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v8, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmulh_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vmulh.vv v8, v8, v10
; VLOPT-NEXT:    vmul.vv v8, v8, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmulh.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmulh_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vmulh_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmulh.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmulh_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vmulh.vx v10, v8, a0
; VLOPT-NEXT:    vmul.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmulh.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmulhu_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vmulhu_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmulhu.vv v8, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v8, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmulhu_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vmulhu.vv v8, v8, v10
; VLOPT-NEXT:    vmul.vv v8, v8, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmulhu.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmulhu_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vmulhu_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmulhu.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmulhu_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vmulhu.vx v10, v8, a0
; VLOPT-NEXT:    vmul.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmulhu.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmulhsu_vv(<vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vmulhsu_vv:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmulhsu.vv v8, v8, v10
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v8, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmulhsu_vv:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; VLOPT-NEXT:    vmulhsu.vv v8, v8, v10
; VLOPT-NEXT:    vmul.vv v8, v8, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmulhsu.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, <vscale x 4 x i32> %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmulhsu_vx(<vscale x 4 x i32> %a, i32 %b, iXLen %vl) {
; NOVLOPT-LABEL: vmulhsu_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmulhsu.vx v10, v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmul.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmulhsu_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vmulhsu.vx v10, v8, a0
; VLOPT-NEXT:    vmul.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmulhsu.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %a, i32 %b, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vmul.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vwmacc_vx(<vscale x 4 x i16> %a, i16 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwmacc_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e16, m1, ta, ma
; NOVLOPT-NEXT:    vwmacc.vx v10, a0, v8
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwmacc_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; VLOPT-NEXT:    vwmacc.vx v10, a0, v8
; VLOPT-NEXT:    vsetvli zero, zero, e32, m2, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v10, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vwmacc.nxv4i32.i16(<vscale x 4 x i32> poison, i16 %b, <vscale x 4 x i16> %a, iXLen -1, iXLen 0)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vwmaccu_vx(<vscale x 4 x i16> %a, i16 %b, iXLen %vl) {
; NOVLOPT-LABEL: vwmaccu_vx:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e16, m1, ta, ma
; NOVLOPT-NEXT:    vwmaccu.vx v10, a0, v8
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwmaccu_vx:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e16, m1, ta, ma
; VLOPT-NEXT:    vwmaccu.vx v10, a0, v8
; VLOPT-NEXT:    vsetvli zero, zero, e32, m2, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v10, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vwmaccu.nxv4i32.i16(<vscale x 4 x i32> poison, i16 %b, <vscale x 4 x i16> %a, iXLen -1, iXLen 0)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %1, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmv_v_i(<vscale x 4 x i32> %a, i32 %x, iXLen %vl) {
; NOVLOPT-LABEL: vmv_v_i:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a0, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmv.v.i v10, 5
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmv_v_i:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vmv.v.i v10, 5
; VLOPT-NEXT:    vadd.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmv.v.x.nxv4i32(<vscale x 4 x i32> poison, i32 5, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vmv_v_x(<vscale x 4 x i32> %a, i32 %x, iXLen %vl) {
; NOVLOPT-LABEL: vmv_v_x:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e32, m2, ta, ma
; NOVLOPT-NEXT:    vmv.v.x v10, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v10, v8
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmv_v_x:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e32, m2, ta, ma
; VLOPT-NEXT:    vmv.v.x v10, a0
; VLOPT-NEXT:    vadd.vv v8, v10, v8
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vmv.v.x.nxv4i32(<vscale x 4 x i32> poison, i32 %x, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %a, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

define <vscale x 4 x i32> @vwsll_vi(<vscale x 4 x i16> %a, <vscale x 4 x i32> %b, iXLen %vl) {
; NOVLOPT-LABEL: vwsll_vi:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a1, zero, e16, m1, ta, ma
; NOVLOPT-NEXT:    vwsll.vi v12, v8, 1
; NOVLOPT-NEXT:    vsetvli zero, a0, e32, m2, ta, ma
; NOVLOPT-NEXT:    vadd.vv v8, v12, v10
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vwsll_vi:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a0, e16, m1, ta, ma
; VLOPT-NEXT:    vwsll.vi v12, v8, 1
; VLOPT-NEXT:    vsetvli zero, zero, e32, m2, ta, ma
; VLOPT-NEXT:    vadd.vv v8, v12, v10
; VLOPT-NEXT:    ret
  %1 = call <vscale x 4 x i32> @llvm.riscv.vwsll.nxv4i32.nxv4i16(<vscale x 4 x i32> poison, <vscale x 4 x i16> %a,iXLen 1, iXLen -1)
  %2 = call <vscale x 4 x i32> @llvm.riscv.vadd.nxv4i32.nxv4i32(<vscale x 4 x i32> poison, <vscale x 4 x i32> %1, <vscale x 4 x i32> %b, iXLen %vl)
  ret <vscale x 4 x i32> %2
}

; Test getOperandInfo

define <vscale x 1 x i8> @vmerge_vim(<vscale x 1 x i8> %a, i8 %b, <vscale x 1 x i1> %m, iXLen %vl) {
; NOVLOPT-LABEL: vmerge_vim:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e8, mf8, tu, ma
; NOVLOPT-NEXT:    vmv.v.x v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; NOVLOPT-NEXT:    vmerge.vim v8, v8, 2, v0
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmerge_vim:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e8, mf8, tu, ma
; VLOPT-NEXT:    vmv.v.x v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e8, mf8, ta, ma
; VLOPT-NEXT:    vmerge.vim v8, v8, 2, v0
; VLOPT-NEXT:    ret
  %2 = call <vscale x 1 x i8> @llvm.riscv.vmv.v.x.nxv1i8(<vscale x 1 x i8> %a, i8 %b, iXLen -1)
  %3 = call <vscale x 1 x i8> @llvm.riscv.vmerge.nxv1i8.nxv1i8(<vscale x 1 x i8> undef, <vscale x 1 x i8> %2, i8 2, <vscale x 1 x i1> %m, iXLen %vl)
  ret <vscale x 1 x i8> %3
}

define <vscale x 1 x i8> @vmerge_vxm(<vscale x 1 x i8> %a, i8 %b, <vscale x 1 x i1> %m, iXLen %vl) {
; NOVLOPT-LABEL: vmerge_vxm:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e8, mf8, tu, ma
; NOVLOPT-NEXT:    vmv.v.x v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; NOVLOPT-NEXT:    vmerge.vxm v8, v8, a0, v0
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmerge_vxm:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e8, mf8, tu, ma
; VLOPT-NEXT:    vmv.v.x v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e8, mf8, ta, ma
; VLOPT-NEXT:    vmerge.vxm v8, v8, a0, v0
; VLOPT-NEXT:    ret
  %2 = call <vscale x 1 x i8> @llvm.riscv.vmv.v.x.nxv1i8(<vscale x 1 x i8> %a, i8 %b, iXLen -1)
  %3 = call <vscale x 1 x i8> @llvm.riscv.vmerge.nxv1i8.nxv1i8(<vscale x 1 x i8> undef, <vscale x 1 x i8> %2, i8 %b, <vscale x 1 x i1> %m, iXLen %vl)
  ret <vscale x 1 x i8> %3
}

define <vscale x 1 x i8> @vmerge_vvm(<vscale x 1 x i8> %a, i8 %b, <vscale x 1 x i8> %c, <vscale x 1 x i1> %m, iXLen %vl) {
; NOVLOPT-LABEL: vmerge_vvm:
; NOVLOPT:       # %bb.0:
; NOVLOPT-NEXT:    vsetvli a2, zero, e8, mf8, tu, ma
; NOVLOPT-NEXT:    vmv.v.x v8, a0
; NOVLOPT-NEXT:    vsetvli zero, a1, e8, mf8, ta, ma
; NOVLOPT-NEXT:    vmerge.vvm v8, v8, v9, v0
; NOVLOPT-NEXT:    ret
;
; VLOPT-LABEL: vmerge_vvm:
; VLOPT:       # %bb.0:
; VLOPT-NEXT:    vsetvli zero, a1, e8, mf8, tu, ma
; VLOPT-NEXT:    vmv.v.x v8, a0
; VLOPT-NEXT:    vsetvli zero, zero, e8, mf8, ta, ma
; VLOPT-NEXT:    vmerge.vvm v8, v8, v9, v0
; VLOPT-NEXT:    ret
  %2 = call <vscale x 1 x i8> @llvm.riscv.vmv.v.x.nxv1i8(<vscale x 1 x i8> %a, i8 %b, iXLen -1)
  %3 = call <vscale x 1 x i8> @llvm.riscv.vmerge.nxv1i8.nxv1i8(<vscale x 1 x i8> undef, <vscale x 1 x i8> %2, <vscale x 1 x i8> %c, <vscale x 1 x i1> %m, iXLen %vl)
  ret <vscale x 1 x i8> %3
}
