; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=riscv32 -mattr=+v \
; RUN:   -mattr=+zvfh -mattr=+experimental-zvfbfmin -mattr=+xsfmmbase \
; RUN:   -mattr=+xsfmm32a -mattr=+xsfmm32a8f -mattr=+xsfmm32a4i -mattr=+xsfmm64a64f \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=riscv64 -mattr=+v \
; RUN:   -mattr=+zvfh -mattr=+experimental-zvfbfmin -mattr=+xsfmmbase \
; RUN:   -mattr=+experimental-zvfbfmin -mattr=+xsfmmbase \
; RUN:   -mattr=+xsfmm32a -mattr=+xsfmm32a8f -mattr=+xsfmm32a4i -mattr=+xsfmm64a64f \
; RUN:   -verify-machineinstrs | FileCheck %s --check-prefixes=CHECK

declare void @llvm.riscv.sf.vtzero.t.iXLen(iXLen, iXLen, iXLen, iXLen, iXLen)
define void @test_sf_vtzero_t(iXLen %tm, iXLen %tn) {
; CHECK-LABEL: test_sf_vtzero_t:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sf.vsettnt zero, a1, e8, w4
; CHECK-NEXT:    sf.vsettm zero, a0
; CHECK-NEXT:    sf.vtzero.t mt0
; CHECK-NEXT:    ret
  entry:
    call void @llvm.riscv.sf.vtzero.t.iXLen(iXLen 0, iXLen %tm, iXLen %tn, iXLen 3, iXLen 4)
    ret void
}

