; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefixes=RV32,RV32I
; RUN: llc -mtriple=riscv32 -verify-machineinstrs -mattr=+zba < %s \
; RUN:   | FileCheck %s -check-prefixes=RV32,RV32ZBA
; RUN: llc -mtriple=riscv64 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefixes=RV64,RV64I
; RUN: llc -mtriple=riscv64 -verify-machineinstrs -mattr=+zba < %s \
; RUN:   | FileCheck %s -check-prefixes=RV64,RV64ZBA

declare void @inspect(...)

define void @test() {
; RV32-LABEL: test:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -2032
; RV32-NEXT:    .cfi_def_cfa_offset 2032
; RV32-NEXT:    sw ra, 2028(sp) # 4-byte Folded Spill
; RV32-NEXT:    .cfi_offset ra, -4
; RV32-NEXT:    addi sp, sp, -2048
; RV32-NEXT:    addi sp, sp, -1120
; RV32-NEXT:    .cfi_def_cfa_offset 5200
; RV32-NEXT:    addi a0, sp, 12
; RV32-NEXT:    addi a1, sp, 2047
; RV32-NEXT:    addi a1, a1, 13
; RV32-NEXT:    lui a2, 1
; RV32-NEXT:    addi a2, a2, 12
; RV32-NEXT:    add a2, sp, a2
; RV32-NEXT:    lui a3, 1
; RV32-NEXT:    addi a3, a3, 1036
; RV32-NEXT:    add a3, sp, a3
; RV32-NEXT:    call inspect
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    addi sp, sp, 1136
; RV32-NEXT:    lw ra, 2028(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    ret
;
; RV64-LABEL: test:
; RV64:       # %bb.0:
; RV64-NEXT:    addi sp, sp, -2032
; RV64-NEXT:    .cfi_def_cfa_offset 2032
; RV64-NEXT:    sd ra, 2024(sp) # 8-byte Folded Spill
; RV64-NEXT:    .cfi_offset ra, -8
; RV64-NEXT:    addi sp, sp, -2048
; RV64-NEXT:    addi sp, sp, -1120
; RV64-NEXT:    .cfi_def_cfa_offset 5200
; RV64-NEXT:    addi a0, sp, 8
; RV64-NEXT:    addi a1, sp, 2047
; RV64-NEXT:    addi a1, a1, 9
; RV64-NEXT:    lui a2, 1
; RV64-NEXT:    addiw a2, a2, 8
; RV64-NEXT:    add a2, sp, a2
; RV64-NEXT:    lui a3, 1
; RV64-NEXT:    addiw a3, a3, 1032
; RV64-NEXT:    add a3, sp, a3
; RV64-NEXT:    call inspect
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    addi sp, sp, 1136
; RV64-NEXT:    ld ra, 2024(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    ret
  %p4 = alloca [64 x i8], align 1
  %p3 = alloca [1024 x i8], align 1
  %p2 = alloca [2048 x i8], align 1
  %p1 = alloca [2048 x i8], align 1
  call void (...) @inspect(ptr %p1, ptr %p2, ptr %p3, ptr %p4)
  ret void
}

define void @align_8() {
; RV32-LABEL: align_8:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -2032
; RV32-NEXT:    .cfi_def_cfa_offset 2032
; RV32-NEXT:    sw ra, 2028(sp) # 4-byte Folded Spill
; RV32-NEXT:    .cfi_offset ra, -4
; RV32-NEXT:    addi sp, sp, -2048
; RV32-NEXT:    addi sp, sp, -32
; RV32-NEXT:    .cfi_def_cfa_offset 4112
; RV32-NEXT:    addi a0, sp, 7
; RV32-NEXT:    lui a1, 1
; RV32-NEXT:    addi a1, a1, 8
; RV32-NEXT:    add a1, sp, a1
; RV32-NEXT:    call inspect
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    addi sp, sp, 48
; RV32-NEXT:    lw ra, 2028(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    ret
;
; RV64-LABEL: align_8:
; RV64:       # %bb.0:
; RV64-NEXT:    addi sp, sp, -2032
; RV64-NEXT:    .cfi_def_cfa_offset 2032
; RV64-NEXT:    sd ra, 2024(sp) # 8-byte Folded Spill
; RV64-NEXT:    .cfi_offset ra, -8
; RV64-NEXT:    addi sp, sp, -2048
; RV64-NEXT:    addi sp, sp, -48
; RV64-NEXT:    .cfi_def_cfa_offset 4128
; RV64-NEXT:    addi a0, sp, 15
; RV64-NEXT:    lui a1, 1
; RV64-NEXT:    addiw a1, a1, 16
; RV64-NEXT:    add a1, sp, a1
; RV64-NEXT:    call inspect
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    addi sp, sp, 64
; RV64-NEXT:    ld ra, 2024(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    ret
  %p2 = alloca i8, align 8
  %p1 = alloca [4097 x i8], align 1
  call void (...) @inspect(ptr %p1, ptr %p2)
  ret void
}

define void @align_4() {
; RV32-LABEL: align_4:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -2032
; RV32-NEXT:    .cfi_def_cfa_offset 2032
; RV32-NEXT:    sw ra, 2028(sp) # 4-byte Folded Spill
; RV32-NEXT:    .cfi_offset ra, -4
; RV32-NEXT:    addi sp, sp, -2048
; RV32-NEXT:    addi sp, sp, -32
; RV32-NEXT:    .cfi_def_cfa_offset 4112
; RV32-NEXT:    addi a0, sp, 7
; RV32-NEXT:    lui a1, 1
; RV32-NEXT:    addi a1, a1, 8
; RV32-NEXT:    add a1, sp, a1
; RV32-NEXT:    call inspect
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    addi sp, sp, 48
; RV32-NEXT:    lw ra, 2028(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    ret
;
; RV64-LABEL: align_4:
; RV64:       # %bb.0:
; RV64-NEXT:    addi sp, sp, -2032
; RV64-NEXT:    .cfi_def_cfa_offset 2032
; RV64-NEXT:    sd ra, 2024(sp) # 8-byte Folded Spill
; RV64-NEXT:    .cfi_offset ra, -8
; RV64-NEXT:    addi sp, sp, -2048
; RV64-NEXT:    addi sp, sp, -48
; RV64-NEXT:    .cfi_def_cfa_offset 4128
; RV64-NEXT:    addi a0, sp, 19
; RV64-NEXT:    lui a1, 1
; RV64-NEXT:    addiw a1, a1, 20
; RV64-NEXT:    add a1, sp, a1
; RV64-NEXT:    call inspect
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    addi sp, sp, 64
; RV64-NEXT:    ld ra, 2024(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    ret
  %p2 = alloca i8, align 4
  %p1 = alloca [4097 x i8], align 1
  call void (...) @inspect(ptr %p1, ptr %p2)
  ret void
}

define void @align_2() {
; RV32-LABEL: align_2:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -2032
; RV32-NEXT:    .cfi_def_cfa_offset 2032
; RV32-NEXT:    sw ra, 2028(sp) # 4-byte Folded Spill
; RV32-NEXT:    .cfi_offset ra, -4
; RV32-NEXT:    addi sp, sp, -2048
; RV32-NEXT:    addi sp, sp, -32
; RV32-NEXT:    .cfi_def_cfa_offset 4112
; RV32-NEXT:    addi a0, sp, 9
; RV32-NEXT:    lui a1, 1
; RV32-NEXT:    addi a1, a1, 10
; RV32-NEXT:    add a1, sp, a1
; RV32-NEXT:    call inspect
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    addi sp, sp, 48
; RV32-NEXT:    lw ra, 2028(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    ret
;
; RV64-LABEL: align_2:
; RV64:       # %bb.0:
; RV64-NEXT:    addi sp, sp, -2032
; RV64-NEXT:    .cfi_def_cfa_offset 2032
; RV64-NEXT:    sd ra, 2024(sp) # 8-byte Folded Spill
; RV64-NEXT:    .cfi_offset ra, -8
; RV64-NEXT:    addi sp, sp, -2048
; RV64-NEXT:    addi sp, sp, -48
; RV64-NEXT:    .cfi_def_cfa_offset 4128
; RV64-NEXT:    addi a0, sp, 21
; RV64-NEXT:    lui a1, 1
; RV64-NEXT:    addiw a1, a1, 22
; RV64-NEXT:    add a1, sp, a1
; RV64-NEXT:    call inspect
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    addi sp, sp, 64
; RV64-NEXT:    ld ra, 2024(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    ret
  %p2 = alloca i8, align 2
  %p1 = alloca [4097 x i8], align 1
  call void (...) @inspect(ptr %p1, ptr %p2)
  ret void
}


define void @align_1() {
; RV32-LABEL: align_1:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -2032
; RV32-NEXT:    .cfi_def_cfa_offset 2032
; RV32-NEXT:    sw ra, 2028(sp) # 4-byte Folded Spill
; RV32-NEXT:    .cfi_offset ra, -4
; RV32-NEXT:    addi sp, sp, -2048
; RV32-NEXT:    addi sp, sp, -32
; RV32-NEXT:    .cfi_def_cfa_offset 4112
; RV32-NEXT:    addi a0, sp, 10
; RV32-NEXT:    lui a1, 1
; RV32-NEXT:    addi a1, a1, 11
; RV32-NEXT:    add a1, sp, a1
; RV32-NEXT:    call inspect
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    addi sp, sp, 48
; RV32-NEXT:    lw ra, 2028(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 2032
; RV32-NEXT:    ret
;
; RV64-LABEL: align_1:
; RV64:       # %bb.0:
; RV64-NEXT:    addi sp, sp, -2032
; RV64-NEXT:    .cfi_def_cfa_offset 2032
; RV64-NEXT:    sd ra, 2024(sp) # 8-byte Folded Spill
; RV64-NEXT:    .cfi_offset ra, -8
; RV64-NEXT:    addi sp, sp, -2048
; RV64-NEXT:    addi sp, sp, -48
; RV64-NEXT:    .cfi_def_cfa_offset 4128
; RV64-NEXT:    addi a0, sp, 22
; RV64-NEXT:    lui a1, 1
; RV64-NEXT:    addiw a1, a1, 23
; RV64-NEXT:    add a1, sp, a1
; RV64-NEXT:    call inspect
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    addi sp, sp, 64
; RV64-NEXT:    ld ra, 2024(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 2032
; RV64-NEXT:    ret
  %p2 = alloca i8, align 1
  %p1 = alloca [4097 x i8], align 1
  call void (...) @inspect(ptr %p1, ptr %p2)
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; RV32I: {{.*}}
; RV32ZBA: {{.*}}
; RV64I: {{.*}}
; RV64ZBA: {{.*}}
