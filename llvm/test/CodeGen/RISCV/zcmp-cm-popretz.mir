# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=riscv32 -mattr=+zcmp -x mir -start-before=prologepilog -stop-after=riscv-push-pop-opt -verify-machineinstrs -o - %s \
# RUN: | FileCheck -check-prefixes=CHECK-ZCMP32 %s
# RUN: llc -mtriple=riscv32 -mattr=+save-restore -x mir -start-before=prologepilog -stop-after=riscv-push-pop-opt -verify-machineinstrs -o - %s \
# RUN: | FileCheck -check-prefixes=CHECK-LIBCALL32 %s
# RUN: llc -mtriple=riscv64 -mattr=+zcmp -x mir -start-before=prologepilog -stop-after=riscv-push-pop-opt -verify-machineinstrs -o - %s \
# RUN: | FileCheck -check-prefixes=CHECK-ZCMP64 %s
# RUN: llc -mtriple=riscv64 -mattr=+save-restore -x mir -start-before=prologepilog -stop-after=riscv-push-pop-opt -verify-machineinstrs -o - %s \
# RUN: | FileCheck -check-prefixes=CHECK-LIBCALL64 %s
# RUN: llc -mtriple=riscv32 -x mir -start-before=prologepilog -stop-after=riscv-push-pop-opt -verify-machineinstrs -o - %s \
# RUN: | FileCheck -check-prefixes=CHECK-NO-ZCMP32 %s
# RUN: llc -mtriple=riscv64 -x mir -start-before=prologepilog -stop-after=riscv-push-pop-opt -verify-machineinstrs -o - %s \
# RUN: | FileCheck -check-prefixes=CHECK-NO-ZCMP64 %s
---
name: popret_rvlist5
tracksRegLiveness: true
body:                   |
  bb.0:
    ; CHECK-ZCMP32-LABEL: name: popret_rvlist5
    ; CHECK-ZCMP32: liveins: $x1, $x8
    ; CHECK-ZCMP32-NEXT: {{  $}}
    ; CHECK-ZCMP32-NEXT: frame-setup CM_PUSH 5, 0, implicit-def $x2, implicit $x2, implicit $x1, implicit $x8
    ; CHECK-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -8
    ; CHECK-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -4
    ; CHECK-ZCMP32-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-ZCMP32-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-ZCMP32-NEXT: CM_POPRET 5, 0, implicit-def $x2, implicit $x2, implicit-def $x1, implicit-def $x8
    ;
    ; CHECK-LIBCALL32-LABEL: name: popret_rvlist5
    ; CHECK-LIBCALL32: liveins: $x1, $x8
    ; CHECK-LIBCALL32-NEXT: {{  $}}
    ; CHECK-LIBCALL32-NEXT: $x5 = frame-setup PseudoCALLReg target-flags(riscv-call) &__riscv_save_1
    ; CHECK-LIBCALL32-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-LIBCALL32-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -4
    ; CHECK-LIBCALL32-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -8
    ; CHECK-LIBCALL32-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-LIBCALL32-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-LIBCALL32-NEXT: frame-destroy PseudoTAIL target-flags(riscv-call) &__riscv_restore_1, implicit $x2
    ;
    ; CHECK-ZCMP64-LABEL: name: popret_rvlist5
    ; CHECK-ZCMP64: liveins: $x1, $x8
    ; CHECK-ZCMP64-NEXT: {{  $}}
    ; CHECK-ZCMP64-NEXT: frame-setup CM_PUSH 5, 0, implicit-def $x2, implicit $x2, implicit $x1, implicit $x8
    ; CHECK-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -16
    ; CHECK-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -8
    ; CHECK-ZCMP64-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-ZCMP64-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-ZCMP64-NEXT: CM_POPRET 5, 0, implicit-def $x2, implicit $x2, implicit-def $x1, implicit-def $x8
    ;
    ; CHECK-LIBCALL64-LABEL: name: popret_rvlist5
    ; CHECK-LIBCALL64: liveins: $x1, $x8
    ; CHECK-LIBCALL64-NEXT: {{  $}}
    ; CHECK-LIBCALL64-NEXT: $x5 = frame-setup PseudoCALLReg target-flags(riscv-call) &__riscv_save_1
    ; CHECK-LIBCALL64-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-LIBCALL64-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -8
    ; CHECK-LIBCALL64-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -16
    ; CHECK-LIBCALL64-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-LIBCALL64-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-LIBCALL64-NEXT: frame-destroy PseudoTAIL target-flags(riscv-call) &__riscv_restore_1, implicit $x2
    ;
    ; CHECK-NO-ZCMP32-LABEL: name: popret_rvlist5
    ; CHECK-NO-ZCMP32: liveins: $x1, $x8
    ; CHECK-NO-ZCMP32-NEXT: {{  $}}
    ; CHECK-NO-ZCMP32-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NO-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NO-ZCMP32-NEXT: SW killed $x1, $x2, 12 :: (store (s32) into %stack.0)
    ; CHECK-NO-ZCMP32-NEXT: SW killed $x8, $x2, 8 :: (store (s32) into %stack.1)
    ; CHECK-NO-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -4
    ; CHECK-NO-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -8
    ; CHECK-NO-ZCMP32-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP32-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP32-NEXT: $x1 = LW $x2, 12 :: (load (s32) from %stack.0)
    ; CHECK-NO-ZCMP32-NEXT: $x8 = LW $x2, 8 :: (load (s32) from %stack.1)
    ; CHECK-NO-ZCMP32-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NO-ZCMP32-NEXT: PseudoRET
    ;
    ; CHECK-NO-ZCMP64-LABEL: name: popret_rvlist5
    ; CHECK-NO-ZCMP64: liveins: $x1, $x8
    ; CHECK-NO-ZCMP64-NEXT: {{  $}}
    ; CHECK-NO-ZCMP64-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NO-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NO-ZCMP64-NEXT: SD killed $x1, $x2, 8 :: (store (s64) into %stack.0)
    ; CHECK-NO-ZCMP64-NEXT: SD killed $x8, $x2, 0 :: (store (s64) into %stack.1)
    ; CHECK-NO-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -8
    ; CHECK-NO-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -16
    ; CHECK-NO-ZCMP64-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP64-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP64-NEXT: $x1 = LD $x2, 8 :: (load (s64) from %stack.0)
    ; CHECK-NO-ZCMP64-NEXT: $x8 = LD $x2, 0 :: (load (s64) from %stack.1)
    ; CHECK-NO-ZCMP64-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NO-ZCMP64-NEXT: PseudoRET
    $x1 = IMPLICIT_DEF
    $x8 = IMPLICIT_DEF
    PseudoRET
...
---
name: popretz_rvlist5
tracksRegLiveness: true
body:                   |
  bb.0:
    ; CHECK-ZCMP32-LABEL: name: popretz_rvlist5
    ; CHECK-ZCMP32: liveins: $x1, $x8
    ; CHECK-ZCMP32-NEXT: {{  $}}
    ; CHECK-ZCMP32-NEXT: frame-setup CM_PUSH 5, 0, implicit-def $x2, implicit $x2, implicit $x1, implicit $x8
    ; CHECK-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -8
    ; CHECK-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -4
    ; CHECK-ZCMP32-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-ZCMP32-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-ZCMP32-NEXT: CM_POPRETZ 5, 0, implicit-def $x2, implicit-def $x10, implicit $x2, implicit-def $x1, implicit-def $x8
    ;
    ; CHECK-LIBCALL32-LABEL: name: popretz_rvlist5
    ; CHECK-LIBCALL32: liveins: $x1, $x8
    ; CHECK-LIBCALL32-NEXT: {{  $}}
    ; CHECK-LIBCALL32-NEXT: $x5 = frame-setup PseudoCALLReg target-flags(riscv-call) &__riscv_save_1
    ; CHECK-LIBCALL32-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-LIBCALL32-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -4
    ; CHECK-LIBCALL32-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -8
    ; CHECK-LIBCALL32-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-LIBCALL32-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-LIBCALL32-NEXT: $x10 = ADDI $x0, 0
    ; CHECK-LIBCALL32-NEXT: frame-destroy PseudoTAIL target-flags(riscv-call) &__riscv_restore_1, implicit $x2, implicit $x10
    ;
    ; CHECK-ZCMP64-LABEL: name: popretz_rvlist5
    ; CHECK-ZCMP64: liveins: $x1, $x8
    ; CHECK-ZCMP64-NEXT: {{  $}}
    ; CHECK-ZCMP64-NEXT: frame-setup CM_PUSH 5, 0, implicit-def $x2, implicit $x2, implicit $x1, implicit $x8
    ; CHECK-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -16
    ; CHECK-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -8
    ; CHECK-ZCMP64-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-ZCMP64-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-ZCMP64-NEXT: CM_POPRETZ 5, 0, implicit-def $x2, implicit-def $x10, implicit $x2, implicit-def $x1, implicit-def $x8
    ;
    ; CHECK-LIBCALL64-LABEL: name: popretz_rvlist5
    ; CHECK-LIBCALL64: liveins: $x1, $x8
    ; CHECK-LIBCALL64-NEXT: {{  $}}
    ; CHECK-LIBCALL64-NEXT: $x5 = frame-setup PseudoCALLReg target-flags(riscv-call) &__riscv_save_1
    ; CHECK-LIBCALL64-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-LIBCALL64-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -8
    ; CHECK-LIBCALL64-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -16
    ; CHECK-LIBCALL64-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-LIBCALL64-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-LIBCALL64-NEXT: $x10 = ADDI $x0, 0
    ; CHECK-LIBCALL64-NEXT: frame-destroy PseudoTAIL target-flags(riscv-call) &__riscv_restore_1, implicit $x2, implicit $x10
    ;
    ; CHECK-NO-ZCMP32-LABEL: name: popretz_rvlist5
    ; CHECK-NO-ZCMP32: liveins: $x1, $x8
    ; CHECK-NO-ZCMP32-NEXT: {{  $}}
    ; CHECK-NO-ZCMP32-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NO-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NO-ZCMP32-NEXT: SW killed $x1, $x2, 12 :: (store (s32) into %stack.0)
    ; CHECK-NO-ZCMP32-NEXT: SW killed $x8, $x2, 8 :: (store (s32) into %stack.1)
    ; CHECK-NO-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -4
    ; CHECK-NO-ZCMP32-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -8
    ; CHECK-NO-ZCMP32-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP32-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP32-NEXT: $x10 = ADDI $x0, 0
    ; CHECK-NO-ZCMP32-NEXT: $x1 = LW $x2, 12 :: (load (s32) from %stack.0)
    ; CHECK-NO-ZCMP32-NEXT: $x8 = LW $x2, 8 :: (load (s32) from %stack.1)
    ; CHECK-NO-ZCMP32-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NO-ZCMP32-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-NO-ZCMP64-LABEL: name: popretz_rvlist5
    ; CHECK-NO-ZCMP64: liveins: $x1, $x8
    ; CHECK-NO-ZCMP64-NEXT: {{  $}}
    ; CHECK-NO-ZCMP64-NEXT: $x2 = frame-setup ADDI $x2, -16
    ; CHECK-NO-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION def_cfa_offset 16
    ; CHECK-NO-ZCMP64-NEXT: SD killed $x1, $x2, 8 :: (store (s64) into %stack.0)
    ; CHECK-NO-ZCMP64-NEXT: SD killed $x8, $x2, 0 :: (store (s64) into %stack.1)
    ; CHECK-NO-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x1, -8
    ; CHECK-NO-ZCMP64-NEXT: frame-setup CFI_INSTRUCTION offset $x8, -16
    ; CHECK-NO-ZCMP64-NEXT: $x1 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP64-NEXT: $x8 = IMPLICIT_DEF
    ; CHECK-NO-ZCMP64-NEXT: $x10 = ADDI $x0, 0
    ; CHECK-NO-ZCMP64-NEXT: $x1 = LD $x2, 8 :: (load (s64) from %stack.0)
    ; CHECK-NO-ZCMP64-NEXT: $x8 = LD $x2, 0 :: (load (s64) from %stack.1)
    ; CHECK-NO-ZCMP64-NEXT: $x2 = frame-destroy ADDI $x2, 16
    ; CHECK-NO-ZCMP64-NEXT: PseudoRET implicit $x10
    $x1 = IMPLICIT_DEF
    $x8 = IMPLICIT_DEF
    $x10 = COPY $x0
    PseudoRET implicit $x10
...
