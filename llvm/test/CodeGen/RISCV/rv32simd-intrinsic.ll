; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32P

declare i32 @llvm.riscv.pslli.b.i32.i32(i32, i32)

define i32 @pslli_b(i32 %a, i32 %b) {
; RV32P-LABEL: pslli_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pslli.b a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.pslli.b.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.pslli.h.i32.i32(i32, i32)

define i32 @pslli_h(i32 %a, i32 %b) {
; RV32P-LABEL: pslli_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pslli.h a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.pslli.h.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psslai.h.i32.i32(i32, i32)

define i32 @psslai_h(i32 %a, i32 %b) {
; RV32P-LABEL: psslai_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psslai.h a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psslai.h.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.sslai.i32.i32(i32, i32)

define i32 @sslai(i32 %a, i32 %b) {
; RV32P-LABEL: sslai:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sslai a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.sslai.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psll.bs.i32.i32(i32, i32)

define i32 @psll_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psll_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psll.bs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psll.bs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psll.hs.i32.i32(i32, i32)

define i32 @psll_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psll_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psll.hs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psll.hs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.sadd.i32(i32, i32)

define i32 @sadd(i32 %a, i32 %b) {
; RV32P-LABEL: sadd:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sadd a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.sadd.i32(i32 %a, i32 %b)
  ret i32 %tmp
}
