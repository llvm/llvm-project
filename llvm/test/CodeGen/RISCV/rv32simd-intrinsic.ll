; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32P

declare i32 @llvm.riscv.pslli.b.i32.i32(i32, i32)

define i32 @pslli_b(i32 %a, i32 %b) {
; RV32P-LABEL: pslli_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pslli.b a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.pslli.b.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.pslli.h.i32.i32(i32, i32)

define i32 @pslli_h(i32 %a, i32 %b) {
; RV32P-LABEL: pslli_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pslli.h a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.pslli.h.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psslai.h.i32.i32(i32, i32)

define i32 @psslai_h(i32 %a, i32 %b) {
; RV32P-LABEL: psslai_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psslai.h a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psslai.h.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.sslai.i32.i32(i32, i32)

define i32 @sslai(i32 %a, i32 %b) {
; RV32P-LABEL: sslai:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sslai a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.sslai.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psll.bs.i32.i32(i32, i32)

define i32 @psll_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psll_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psll.bs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psll.bs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psll.hs.i32.i32(i32, i32)

define i32 @psll_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psll_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psll.hs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psll.hs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.padd.bs.i32.i32(i32, i32)

define i32 @padd_bs(i32 %a, i32 %b) {
; RV32P-LABEL: padd_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.bs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.padd.bs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.padd.hs.i32.i32(i32, i32)

define i32 @padd_hs(i32 %a, i32 %b) {
; RV32P-LABEL: padd_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.hs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.padd.hs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.pssha.hs.i32(i32, i32)

define i32 @pssha_hs(i32 %a, i32 %b) {
; RV32P-LABEL: pssha_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssha.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssha.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ssha.i32(i32, i32)

define i32 @ssha(i32 %a, i32 %b) {
; RV32P-LABEL: ssha:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ssha a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ssha.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psshar.hs.i32(i32, i32)

define i32 @psshar_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psshar_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psshar.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psshar.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.sshar.i32(i32, i32)

define i32 @sshar(i32 %a, i32 %b) {
; RV32P-LABEL: sshar:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sshar a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.sshar.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrli.b.i32.i32(i32, i32)

define i32 @psrli_b(i32 %a, i32 %b) {
; RV32P-LABEL: psrli_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrli.b a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrli.b.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrli.h.i32.i32(i32, i32)

define i32 @psrli_h(i32 %a, i32 %b) {
; RV32P-LABEL: psrli_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrli.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrli.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pusati.h.i32.i32(i32, i32)

define i32 @pusati_h(i32 %a, i32 %b) {
; RV32P-LABEL: pusati_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pusati.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pusati.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.usati.i32.i32(i32, i32)

define i32 @usati(i32 %a, i32 %b) {
; RV32P-LABEL: usati:
; RV32P:       # %bb.0:
; RV32P-NEXT:    usati a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.usati.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrai.b.i32.i32(i32, i32)

define i32 @psrai_b(i32 %a, i32 %b) {
; RV32P-LABEL: psrai_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrai.b a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrai.b.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrai.h.i32.i32(i32, i32)

define i32 @psrai_h(i32 %a, i32 %b) {
; RV32P-LABEL: psrai_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrai.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrai.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrari.h.i32.i32(i32, i32)

define i32 @psrari_h(i32 %a, i32 %b) {
; RV32P-LABEL: psrari_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrari.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrari.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.srari.i32.i32(i32, i32)

define i32 @srari_32(i32 %a, i32 %b) {
; RV32P-LABEL: srari_32:
; RV32P:       # %bb.0:
; RV32P-NEXT:    srari a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.srari.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psati.h.i32.i32(i32, i32)

define i32 @psati_h(i32 %a, i32 %b) {
; RV32P-LABEL: psati_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psati.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psati.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.sati.i32.i32(i32, i32)

define i32 @sati(i32 %a, i32 %b) {
; RV32P-LABEL: sati:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sati a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.sati.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrl.bs.i32(i32, i32)

define i32 @psrl_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psrl_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrl.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrl.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrl.hs.i32(i32, i32)

define i32 @psrl_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psrl_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrl.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrl.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsum.bs.i32(i32, i32)

define i32 @predsum_bs(i32 %a, i32 %b) {
; RV32P-LABEL: predsum_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsum.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsum.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsum.hs.i32(i32, i32)

define i32 @predsum_hs(i32 %a, i32 %b) {
; RV32P-LABEL: predsum_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsum.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsum.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsumu.bs.i32(i32, i32)

define i32 @predsumu_bs(i32 %a, i32 %b) {
; RV32P-LABEL: predsumu_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsumu.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsumu.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsumu.hs.i32(i32, i32)

define i32 @predsumu_hs(i32 %a, i32 %b) {
; RV32P-LABEL: predsumu_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsumu.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsumu.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psra.bs.i32(i32, i32)

define i32 @psra_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psra_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psra.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psra.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psra.hs.i32(i32, i32)

define i32 @psra_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psra_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psra.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psra.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.padd.b.i32(i32, i32)

define i32 @padd_b(i32 %a, i32 %b) {
; RV32P-LABEL: padd_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.padd.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.padd.h.i32(i32, i32)

define i32 @padd_h(i32 %a, i32 %b) {
; RV32P-LABEL: padd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.padd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.sadd.i32(i32, i32)

define i32 @sadd(i32 %a, i32 %b) {
; RV32P-LABEL: sadd:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sadd a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.sadd.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psadd.b.i32(i32, i32)

define i32 @psadd_b(i32 %a, i32 %b) {
; RV32P-LABEL: psadd_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psadd.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psadd.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psadd.h.i32(i32, i32)

define i32 @psadd_h(i32 %a, i32 %b) {
; RV32P-LABEL: psadd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psadd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psadd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.aadd.i32(i32, i32)

define i32 @aadd(i32 %a, i32 %b) {
; RV32P-LABEL: aadd:
; RV32P:       # %bb.0:
; RV32P-NEXT:    aadd a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.aadd.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paadd.b.i32(i32, i32)

define i32 @paadd_b(i32 %a, i32 %b) {
; RV32P-LABEL: paadd_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paadd.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paadd.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paadd.h.i32(i32, i32)

define i32 @paadd_h(i32 %a, i32 %b) {
; RV32P-LABEL: paadd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paadd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paadd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.saddu.i32(i32, i32)

define i32 @saddu(i32 %a, i32 %b) {
; RV32P-LABEL: saddu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    saddu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.saddu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psaddu.b.i32(i32, i32)

define i32 @psaddu_b(i32 %a, i32 %b) {
; RV32P-LABEL: psaddu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psaddu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psaddu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psaddu.h.i32(i32, i32)

define i32 @psaddu_h(i32 %a, i32 %b) {
; RV32P-LABEL: psaddu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psaddu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psaddu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.aaddu.i32(i32, i32)

define i32 @aaddu(i32 %a, i32 %b) {
; RV32P-LABEL: aaddu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    aaddu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.aaddu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paaddu.b.i32(i32, i32)

define i32 @paaddu_b(i32 %a, i32 %b) {
; RV32P-LABEL: paaddu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paaddu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paaddu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paaddu.h.i32(i32, i32)

define i32 @paaddu_h(i32 %a, i32 %b) {
; RV32P-LABEL: paaddu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paaddu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paaddu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}
