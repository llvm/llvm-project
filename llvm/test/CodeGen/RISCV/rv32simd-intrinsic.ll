; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32P

declare i32 @llvm.riscv.pslli.b.i32.i32(i32, i32)

define i32 @pslli_b(i32 %a, i32 %b) {
; RV32P-LABEL: pslli_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pslli.b a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.pslli.b.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.pslli.h.i32.i32(i32, i32)

define i32 @pslli_h(i32 %a, i32 %b) {
; RV32P-LABEL: pslli_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pslli.h a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.pslli.h.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psslai.h.i32.i32(i32, i32)

define i32 @psslai_h(i32 %a, i32 %b) {
; RV32P-LABEL: psslai_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psslai.h a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psslai.h.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.sslai.i32.i32(i32, i32)

define i32 @sslai(i32 %a, i32 %b) {
; RV32P-LABEL: sslai:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sslai a0, a0, 1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.sslai.i32.i32(i32 %a, i32 1)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psll.bs.i32.i32(i32, i32)

define i32 @psll_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psll_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psll.bs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psll.bs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.psll.hs.i32.i32(i32, i32)

define i32 @psll_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psll_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psll.hs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.psll.hs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.padd.bs.i32.i32(i32, i32)

define i32 @padd_bs(i32 %a, i32 %b) {
; RV32P-LABEL: padd_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.bs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.padd.bs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.padd.hs.i32.i32(i32, i32)

define i32 @padd_hs(i32 %a, i32 %b) {
; RV32P-LABEL: padd_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.hs a0, a0, a1
; RV32P-NEXT:    ret
  %tmp = call i32 @llvm.riscv.padd.hs.i32.i32(i32 %a, i32 %b)
  ret i32 %tmp
}

declare i32 @llvm.riscv.pssha.hs.i32(i32, i32)

define i32 @pssha_hs(i32 %a, i32 %b) {
; RV32P-LABEL: pssha_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssha.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssha.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ssha.i32(i32, i32)

define i32 @ssha(i32 %a, i32 %b) {
; RV32P-LABEL: ssha:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ssha a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ssha.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psshar.hs.i32(i32, i32)

define i32 @psshar_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psshar_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psshar.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psshar.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.sshar.i32(i32, i32)

define i32 @sshar(i32 %a, i32 %b) {
; RV32P-LABEL: sshar:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sshar a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.sshar.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrli.b.i32.i32(i32, i32)

define i32 @psrli_b(i32 %a, i32 %b) {
; RV32P-LABEL: psrli_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrli.b a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrli.b.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrli.h.i32.i32(i32, i32)

define i32 @psrli_h(i32 %a, i32 %b) {
; RV32P-LABEL: psrli_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrli.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrli.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pusati.h.i32.i32(i32, i32)

define i32 @pusati_h(i32 %a, i32 %b) {
; RV32P-LABEL: pusati_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pusati.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pusati.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.usati.i32.i32(i32, i32)

define i32 @usati(i32 %a, i32 %b) {
; RV32P-LABEL: usati:
; RV32P:       # %bb.0:
; RV32P-NEXT:    usati a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.usati.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrai.b.i32.i32(i32, i32)

define i32 @psrai_b(i32 %a, i32 %b) {
; RV32P-LABEL: psrai_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrai.b a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrai.b.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrai.h.i32.i32(i32, i32)

define i32 @psrai_h(i32 %a, i32 %b) {
; RV32P-LABEL: psrai_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrai.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrai.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrari.h.i32.i32(i32, i32)

define i32 @psrari_h(i32 %a, i32 %b) {
; RV32P-LABEL: psrari_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrari.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrari.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.srari.i32.i32(i32, i32)

define i32 @srari_32(i32 %a, i32 %b) {
; RV32P-LABEL: srari_32:
; RV32P:       # %bb.0:
; RV32P-NEXT:    srari a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.srari.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psati.h.i32.i32(i32, i32)

define i32 @psati_h(i32 %a, i32 %b) {
; RV32P-LABEL: psati_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psati.h a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psati.h.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.sati.i32.i32(i32, i32)

define i32 @sati(i32 %a, i32 %b) {
; RV32P-LABEL: sati:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sati a0, a0, 1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.sati.i32.i32(i32 %a, i32 1)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrl.bs.i32(i32, i32)

define i32 @psrl_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psrl_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrl.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrl.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psrl.hs.i32(i32, i32)

define i32 @psrl_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psrl_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psrl.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psrl.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsum.bs.i32(i32, i32)

define i32 @predsum_bs(i32 %a, i32 %b) {
; RV32P-LABEL: predsum_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsum.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsum.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsum.hs.i32(i32, i32)

define i32 @predsum_hs(i32 %a, i32 %b) {
; RV32P-LABEL: predsum_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsum.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsum.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsumu.bs.i32(i32, i32)

define i32 @predsumu_bs(i32 %a, i32 %b) {
; RV32P-LABEL: predsumu_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsumu.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsumu.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.predsumu.hs.i32(i32, i32)

define i32 @predsumu_hs(i32 %a, i32 %b) {
; RV32P-LABEL: predsumu_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    predsumu.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.predsumu.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psra.bs.i32(i32, i32)

define i32 @psra_bs(i32 %a, i32 %b) {
; RV32P-LABEL: psra_bs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psra.bs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psra.bs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psra.hs.i32(i32, i32)

define i32 @psra_hs(i32 %a, i32 %b) {
; RV32P-LABEL: psra_hs:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psra.hs a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psra.hs.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.padd.b.i32(i32, i32)

define i32 @padd_b(i32 %a, i32 %b) {
; RV32P-LABEL: padd_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.padd.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.padd.h.i32(i32, i32)

define i32 @padd_h(i32 %a, i32 %b) {
; RV32P-LABEL: padd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    padd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.padd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.sadd.i32(i32, i32)

define i32 @sadd(i32 %a, i32 %b) {
; RV32P-LABEL: sadd:
; RV32P:       # %bb.0:
; RV32P-NEXT:    sadd a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.sadd.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psadd.b.i32(i32, i32)

define i32 @psadd_b(i32 %a, i32 %b) {
; RV32P-LABEL: psadd_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psadd.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psadd.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psadd.h.i32(i32, i32)

define i32 @psadd_h(i32 %a, i32 %b) {
; RV32P-LABEL: psadd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psadd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psadd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.aadd.i32(i32, i32)

define i32 @aadd(i32 %a, i32 %b) {
; RV32P-LABEL: aadd:
; RV32P:       # %bb.0:
; RV32P-NEXT:    aadd a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.aadd.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paadd.b.i32(i32, i32)

define i32 @paadd_b(i32 %a, i32 %b) {
; RV32P-LABEL: paadd_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paadd.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paadd.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paadd.h.i32(i32, i32)

define i32 @paadd_h(i32 %a, i32 %b) {
; RV32P-LABEL: paadd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paadd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paadd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.saddu.i32(i32, i32)

define i32 @saddu(i32 %a, i32 %b) {
; RV32P-LABEL: saddu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    saddu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.saddu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psaddu.b.i32(i32, i32)

define i32 @psaddu_b(i32 %a, i32 %b) {
; RV32P-LABEL: psaddu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psaddu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psaddu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psaddu.h.i32(i32, i32)

define i32 @psaddu_h(i32 %a, i32 %b) {
; RV32P-LABEL: psaddu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psaddu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psaddu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.aaddu.i32(i32, i32)

define i32 @aaddu(i32 %a, i32 %b) {
; RV32P-LABEL: aaddu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    aaddu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.aaddu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paaddu.b.i32(i32, i32)

define i32 @paaddu_b(i32 %a, i32 %b) {
; RV32P-LABEL: paaddu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paaddu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paaddu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paaddu.h.i32(i32, i32)

define i32 @paaddu_h(i32 %a, i32 %b) {
; RV32P-LABEL: paaddu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paaddu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paaddu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psub.b.i32(i32, i32)

define i32 @psub_b(i32 %a, i32 %b) {
; RV32P-LABEL: psub_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psub.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psub.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psub.h.i32(i32, i32)

define i32 @psub_h(i32 %a, i32 %b) {
; RV32P-LABEL: psub_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psub.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psub.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ssub.i32(i32, i32)

define i32 @ssub(i32 %a, i32 %b) {
; RV32P-LABEL: ssub:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ssub a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ssub.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pssub.b.i32(i32, i32)

define i32 @pssub_b(i32 %a, i32 %b) {
; RV32P-LABEL: pssub_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssub.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssub.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pssub.h.i32(i32, i32)

define i32 @pssub_h(i32 %a, i32 %b) {
; RV32P-LABEL: pssub_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssub.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssub.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.asub.i32(i32, i32)

define i32 @asub(i32 %a, i32 %b) {
; RV32P-LABEL: asub:
; RV32P:       # %bb.0:
; RV32P-NEXT:    asub a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.asub.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pasub.b.i32(i32, i32)

define i32 @pasub_b(i32 %a, i32 %b) {
; RV32P-LABEL: pasub_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pasub.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pasub.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pasub.h.i32(i32, i32)

define i32 @pasub_h(i32 %a, i32 %b) {
; RV32P-LABEL: pasub_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pasub.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pasub.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ssubu.i32(i32, i32)

define i32 @ssubu(i32 %a, i32 %b) {
; RV32P-LABEL: ssubu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ssubu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ssubu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pssubu.b.i32(i32, i32)

define i32 @pssubu_b(i32 %a, i32 %b) {
; RV32P-LABEL: pssubu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssubu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssubu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pssubu.h.i32(i32, i32)

define i32 @pssubu_h(i32 %a, i32 %b) {
; RV32P-LABEL: pssubu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssubu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssubu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.asubu.i32(i32, i32)

define i32 @asubu(i32 %a, i32 %b) {
; RV32P-LABEL: asubu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    asubu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.asubu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pasubu.b.i32(i32, i32)

define i32 @pasubu_b(i32 %a, i32 %b) {
; RV32P-LABEL: pasubu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pasubu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pasubu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pasubu.h.i32(i32, i32)

define i32 @pasubu_h(i32 %a, i32 %b) {
; RV32P-LABEL: pasubu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pasubu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pasubu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pdif.b.i32(i32, i32)

define i32 @pdif_b(i32 %a, i32 %b) {
; RV32P-LABEL: pdif_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pdif.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pdif.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pdif.h.i32(i32, i32)

define i32 @pdif_h(i32 %a, i32 %b) {
; RV32P-LABEL: pdif_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pdif.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pdif.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pdifu.b.i32(i32, i32)

define i32 @pdifu_b(i32 %a, i32 %b) {
; RV32P-LABEL: pdifu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pdifu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pdifu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pdifu.h.i32(i32, i32)

define i32 @pdifu_h(i32 %a, i32 %b) {
; RV32P-LABEL: pdifu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pdifu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pdifu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.slx.i32(i32, i32)

define i32 @slx(i32 %a, i32 %b) {
; RV32P-LABEL: slx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    slx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.slx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmul.h.b01.i32.i32(i32, i32)

define i32 @pmul_h_b01(i32 %a, i32 %b) {
; RV32P-LABEL: pmul_h_b01:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmul.h.b01 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmul.h.b01.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmulu.h.b01.i32.i32(i32, i32)

define i32 @pmulu_h_b01(i32 %a, i32 %b) {
; RV32P-LABEL: pmulu_h_b01:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmulu.h.b01 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmulu.h.b01.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mul.h01.i32(i32, i32)

define i32 @mul_h01(i32 %a, i32 %b) {
; RV32P-LABEL: mul_h01:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mul.h01 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mul.h01.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mulu.h01.i32(i32, i32)

define i32 @mulu_h01(i32 %a, i32 %b) {
; RV32P-LABEL: mulu_h01:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mulu.h01 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mulu.h01.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psh1add.h.i32(i32, i32)

define i32 @psh1add_h(i32 %a, i32 %b) {
; RV32P-LABEL: psh1add_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psh1add.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psh1add.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ssh1sadd.i32(i32, i32)

define i32 @ssh1sadd(i32 %a, i32 %b) {
; RV32P-LABEL: ssh1sadd:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ssh1sadd a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ssh1sadd.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pssh1sadd.h.i32(i32, i32)

define i32 @pssh1sadd_h(i32 %a, i32 %b) {
; RV32P-LABEL: pssh1sadd_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssh1sadd.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssh1sadd.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmul.h.b00.i32.i32(i32, i32)

define i32 @pmul_h_b00(i32 %a, i32 %b) {
; RV32P-LABEL: pmul_h_b00:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmul.h.b00 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmul.h.b00.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmul.h.b11.i32.i32(i32, i32)

define i32 @pmul_h_b11(i32 %a, i32 %b) {
; RV32P-LABEL: pmul_h_b11:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmul.h.b11 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmul.h.b11.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmulu.h.b00.i32.i32(i32, i32)

define i32 @pmulu_h_b00(i32 %a, i32 %b) {
; RV32P-LABEL: pmulu_h_b00:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmulu.h.b00 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmulu.h.b00.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmulu.h.b11.i32.i32(i32, i32)

define i32 @pmulu_h_b11(i32 %a, i32 %b) {
; RV32P-LABEL: pmulu_h_b11:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmulu.h.b11 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmulu.h.b11.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmulsu.h.b00.i32.i32.i32(i32, i32)

define i32 @pmulsu_h_b00(i32 %a, i32 %b) {
; RV32P-LABEL: pmulsu_h_b00:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmulsu.h.b00 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmulsu.h.b00.i32.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmulsu.h.b11.i32.i32.i32(i32, i32)

define i32 @pmulsu_h_b11(i32 %a, i32 %b) {
; RV32P-LABEL: pmulsu_h_b11:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmulsu.h.b11 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmulsu.h.b11.i32.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mul.h00.i32.i32(i32, i32)

define i32 @mul_h00(i32 %a, i32 %b) {
; RV32P-LABEL: mul_h00:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mul.h00 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mul.h00.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mul.h11.i32.i32(i32, i32)

define i32 @mul_h11(i32 %a, i32 %b) {
; RV32P-LABEL: mul_h11:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mul.h11 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mul.h11.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mulu.h00.i32.i32(i32, i32)

define i32 @mulu_h00(i32 %a, i32 %b) {
; RV32P-LABEL: mulu_h00:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mulu.h00 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mulu.h00.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mulu.h11.i32.i32(i32, i32)

define i32 @mulu_h11(i32 %a, i32 %b) {
; RV32P-LABEL: mulu_h11:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mulu.h11 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mulu.h11.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mulsu.h00.i32.i32.i32(i32, i32)

define i32 @mulsu_h00(i32 %a, i32 %b) {
; RV32P-LABEL: mulsu_h00:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mulsu.h00 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mulsu.h00.i32.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mulsu.h11.i32.i32.i32(i32, i32)

define i32 @mulsu_h11(i32 %a, i32 %b) {
; RV32P-LABEL: mulsu_h11:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mulsu.h11 a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mulsu.h11.i32.i32.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ppack.h.i32(i32, i32)

define i32 @ppack_h(i32 %a, i32 %b) {
; RV32P-LABEL: ppack_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ppack.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ppack.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ppackbt.h.i32(i32, i32)

define i32 @ppackbt_h(i32 %a, i32 %b) {
; RV32P-LABEL: ppackbt_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ppackbt.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ppackbt.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.packbt.i32(i32, i32)

define i32 @packbt(i32 %a, i32 %b) {
; RV32P-LABEL: packbt:
; RV32P:       # %bb.0:
; RV32P-NEXT:    packbt a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.packbt.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ppacktb.h.i32(i32, i32)

define i32 @ppacktb_h(i32 %a, i32 %b) {
; RV32P-LABEL: ppacktb_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ppacktb.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ppacktb.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.packtb.i32(i32, i32)

define i32 @packtb(i32 %a, i32 %b) {
; RV32P-LABEL: packtb:
; RV32P:       # %bb.0:
; RV32P-NEXT:    packtb a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.packtb.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.ppackt.h.i32(i32, i32)

define i32 @ppackt_h(i32 %a, i32 %b) {
; RV32P-LABEL: ppackt_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    ppackt.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.ppackt.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.packt.i32(i32, i32)

define i32 @packt(i32 %a, i32 %b) {
; RV32P-LABEL: packt:
; RV32P:       # %bb.0:
; RV32P-NEXT:    packt a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.packt.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pas.hx.i32(i32, i32)

define i32 @pas_hx(i32 %a, i32 %b) {
; RV32P-LABEL: pas_hx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pas.hx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pas.hx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psa.hx.i32(i32, i32)

define i32 @psa_hx(i32 %a, i32 %b) {
; RV32P-LABEL: psa_hx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psa.hx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psa.hx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.psas.hx.i32(i32, i32)

define i32 @psas_hx(i32 %a, i32 %b) {
; RV32P-LABEL: psas_hx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    psas.hx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.psas.hx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pssa.hx.i32(i32, i32)

define i32 @pssa_hx(i32 %a, i32 %b) {
; RV32P-LABEL: pssa_hx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pssa.hx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pssa.hx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.paas.hx.i32(i32, i32)

define i32 @paas_hx(i32 %a, i32 %b) {
; RV32P-LABEL: paas_hx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    paas.hx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.paas.hx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pasa.hx.i32(i32, i32)

define i32 @pasa_hx(i32 %a, i32 %b) {
; RV32P-LABEL: pasa_hx:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pasa.hx a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pasa.hx.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mseq.i32(i32, i32)

define i32 @mseq(i32 %a, i32 %b) {
; RV32P-LABEL: mseq:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mseq a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mseq.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmseq.b.i32(i32, i32)

define i32 @pmseq_b(i32 %a, i32 %b) {
; RV32P-LABEL: pmseq_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmseq.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmseq.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmseq.h.i32(i32, i32)

define i32 @pmseq_h(i32 %a, i32 %b) {
; RV32P-LABEL: pmseq_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmseq.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmseq.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.mslt.i32(i32, i32)

define i32 @mslt(i32 %a, i32 %b) {
; RV32P-LABEL: mslt:
; RV32P:       # %bb.0:
; RV32P-NEXT:    mslt a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.mslt.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmslt.b.i32(i32, i32)

define i32 @pmslt_b(i32 %a, i32 %b) {
; RV32P-LABEL: pmslt_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmslt.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmslt.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmslt.h.i32(i32, i32)

define i32 @pmslt_h(i32 %a, i32 %b) {
; RV32P-LABEL: pmslt_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmslt.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmslt.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.msltu.i32(i32, i32)

define i32 @msltu(i32 %a, i32 %b) {
; RV32P-LABEL: msltu:
; RV32P:       # %bb.0:
; RV32P-NEXT:    msltu a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.msltu.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmsltu.b.i32(i32, i32)

define i32 @pmsltu_b(i32 %a, i32 %b) {
; RV32P-LABEL: pmsltu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmsltu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmsltu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmsltu.h.i32(i32, i32)

define i32 @pmsltu_h(i32 %a, i32 %b) {
; RV32P-LABEL: pmsltu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmsltu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmsltu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmin.b.i32(i32, i32)

define i32 @pmin_b(i32 %a, i32 %b) {
; RV32P-LABEL: pmin_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmin.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmin.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmin.h.i32(i32, i32)

define i32 @pmin_h(i32 %a, i32 %b) {
; RV32P-LABEL: pmin_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmin.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmin.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pminu.b.i32(i32, i32)

define i32 @pminu_b(i32 %a, i32 %b) {
; RV32P-LABEL: pminu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pminu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pminu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pminu.h.i32(i32, i32)

define i32 @pminu_h(i32 %a, i32 %b) {
; RV32P-LABEL: pminu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pminu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pminu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmax.b.i32(i32, i32)

define i32 @pmax_b(i32 %a, i32 %b) {
; RV32P-LABEL: pmax_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmax.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmax.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmax.h.i32(i32, i32)

define i32 @pmax_h(i32 %a, i32 %b) {
; RV32P-LABEL: pmax_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmax.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmax.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmaxu.b.i32(i32, i32)

define i32 @pmaxu_b(i32 %a, i32 %b) {
; RV32P-LABEL: pmaxu_b:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmaxu.b a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmaxu.b.i32(i32 %a, i32 %b)
    ret i32 %tmp
}

declare i32 @llvm.riscv.pmaxu.h.i32(i32, i32)

define i32 @pmaxu_h(i32 %a, i32 %b) {
; RV32P-LABEL: pmaxu_h:
; RV32P:       # %bb.0:
; RV32P-NEXT:    pmaxu.h a0, a0, a1
; RV32P-NEXT:    ret
    %tmp = call i32 @llvm.riscv.pmaxu.h.i32(i32 %a, i32 %b)
    ret i32 %tmp
}
