# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv32 -mattr=+a,+zacas,+zabha -run-pass=instruction-select %s -o - \
# RUN: | FileCheck %s --check-prefixes=RV32IA-ZABHA

---
name:            cmpxchg_i8
legalized:       true
regBankSelected: true

body:             |
  bb.0:
    liveins: $x10

    ; RV32IA-ZABHA-LABEL: name: cmpxchg_i8
    ; RV32IA-ZABHA: liveins: $x10
    ; RV32IA-ZABHA-NEXT: {{  $}}
    ; RV32IA-ZABHA-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $x10
    ; RV32IA-ZABHA-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $x0
    ; RV32IA-ZABHA-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI $x0, 1
    ; RV32IA-ZABHA-NEXT: [[AMOCAS_B:%[0-9]+]]:gpr = AMOCAS_B [[COPY1]], [[COPY]], [[ADDI]] :: (load store monotonic (s8))
    ; RV32IA-ZABHA-NEXT: $x10 = COPY [[AMOCAS_B]]
    ; RV32IA-ZABHA-NEXT: PseudoRET implicit $x10
    %0:gpr(p0) = COPY $x10
    %1:gpr(s32) = G_CONSTANT i32 0
    %2:gpr(s32) = G_CONSTANT i32 1
    %3:gpr(s32) = G_ATOMIC_CMPXCHG %0, %1, %2 :: (load store monotonic (s8))
    $x10 = COPY %3(s32)
    PseudoRET implicit $x10
...
---
name:            cmpxchg_i16
legalized:       true
regBankSelected: true

body:             |
  bb.0:
    liveins: $x10

    ; RV32IA-ZABHA-LABEL: name: cmpxchg_i16
    ; RV32IA-ZABHA: liveins: $x10
    ; RV32IA-ZABHA-NEXT: {{  $}}
    ; RV32IA-ZABHA-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $x10
    ; RV32IA-ZABHA-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $x0
    ; RV32IA-ZABHA-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI $x0, 1
    ; RV32IA-ZABHA-NEXT: [[AMOCAS_H:%[0-9]+]]:gpr = AMOCAS_H [[COPY1]], [[COPY]], [[ADDI]] :: (load store monotonic (s16))
    ; RV32IA-ZABHA-NEXT: $x10 = COPY [[AMOCAS_H]]
    ; RV32IA-ZABHA-NEXT: PseudoRET implicit $x10
    %0:gpr(p0) = COPY $x10
    %1:gpr(s32) = G_CONSTANT i32 0
    %2:gpr(s32) = G_CONSTANT i32 1
    %3:gpr(s32) = G_ATOMIC_CMPXCHG %0, %1, %2 :: (load store monotonic (s16))
    $x10 = COPY %3(s32)
    PseudoRET implicit $x10
...
---
name:            cmpxchg_i32
legalized:       true
regBankSelected: true

body:             |
  bb.0:
    liveins: $x10

    ; RV32IA-ZABHA-LABEL: name: cmpxchg_i32
    ; RV32IA-ZABHA: liveins: $x10
    ; RV32IA-ZABHA-NEXT: {{  $}}
    ; RV32IA-ZABHA-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $x10
    ; RV32IA-ZABHA-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $x0
    ; RV32IA-ZABHA-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI $x0, 1
    ; RV32IA-ZABHA-NEXT: [[AMOCAS_W:%[0-9]+]]:gpr = AMOCAS_W [[COPY1]], [[COPY]], [[ADDI]] :: (load store monotonic (s32))
    ; RV32IA-ZABHA-NEXT: $x10 = COPY [[AMOCAS_W]]
    ; RV32IA-ZABHA-NEXT: PseudoRET implicit $x10
    %0:gpr(p0) = COPY $x10
    %1:gpr(s32) = G_CONSTANT i32 0
    %2:gpr(s32) = G_CONSTANT i32 1
    %3:gpr(s32) = G_ATOMIC_CMPXCHG %0, %1, %2 :: (load store monotonic (s32))
    $x10 = COPY %3(s32)
    PseudoRET implicit $x10
...
---
name:            cmpxchg_with_success_i32
legalized:       true
regBankSelected: true

body:             |
  bb.0:
    liveins: $x10

    ; RV32IA-ZABHA-LABEL: name: cmpxchg_with_success_i32
    ; RV32IA-ZABHA: liveins: $x10
    ; RV32IA-ZABHA-NEXT: {{  $}}
    ; RV32IA-ZABHA-NEXT: [[COPY:%[0-9]+]]:gpr = COPY $x10
    ; RV32IA-ZABHA-NEXT: [[COPY1:%[0-9]+]]:gpr = COPY $x0
    ; RV32IA-ZABHA-NEXT: [[ADDI:%[0-9]+]]:gpr = ADDI $x0, 1
    ; RV32IA-ZABHA-NEXT: [[AMOCAS_W:%[0-9]+]]:gpr = AMOCAS_W [[COPY1]], [[COPY]], [[ADDI]] :: (load store monotonic (s32))
    ; RV32IA-ZABHA-NEXT: [[SLTIU:%[0-9]+]]:gpr = SLTIU [[AMOCAS_W]], 1
    ; RV32IA-ZABHA-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; RV32IA-ZABHA-NEXT: $x10 = COPY [[AMOCAS_W]]
    ; RV32IA-ZABHA-NEXT: $x11 = COPY [[SLTIU]]
    ; RV32IA-ZABHA-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32_lp64, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; RV32IA-ZABHA-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; RV32IA-ZABHA-NEXT: [[COPY2:%[0-9]+]]:gpr = COPY $x10
    ; RV32IA-ZABHA-NEXT: $x10 = COPY [[COPY2]]
    ; RV32IA-ZABHA-NEXT: PseudoRET implicit $x10
    %0:gprb(p0) = COPY $x10
    %1:gprb(s32) = G_CONSTANT i32 0
    %2:gprb(s32) = G_CONSTANT i32 1
    %3:gprb(s32) = G_ATOMIC_CMPXCHG %0(p0), %1, %2 :: (load store monotonic (s32))
    %4:gprb(s32) = G_ICMP intpred(eq), %3(s32), %1
    %5:gprb(s32) = COPY %3(s32)
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %5(s32)
    $x11 = COPY %4(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32_lp64, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    %6:gprb(s32) = COPY $x10
    $x10 = COPY %6(s32)
    PseudoRET implicit $x10
...
