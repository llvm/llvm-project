# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv32 -mattr=+v -run-pass=instruction-select -simplify-mir -verify-machineinstrs %s -o - | FileCheck -check-prefix=RV32I %s
# RUN: llc -mtriple=riscv64 -mattr=+v -run-pass=instruction-select -simplify-mir -verify-machineinstrs %s -o - | FileCheck -check-prefix=RV64I %s

# Don't test i1 element types here since they have been widened to i8 in legalization

---
name:            icmp_nxv1i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv1i8
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLTU_VV_MF8_:%[0-9]+]]:vr = PseudoVMSLTU_VV_MF8 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLTU_VV_MF8_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv1i8
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLTU_VV_MF8_:%[0-9]+]]:vr = PseudoVMSLTU_VV_MF8 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLTU_VV_MF8_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 1 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 1 x s1>) = G_ICMP intpred(ult), %0(<vscale x 1 x s8>), %0
    $v8 = COPY %1(<vscale x 1 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv2i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv2i8
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLT_VV_MF4_:%[0-9]+]]:vr = PseudoVMSLT_VV_MF4 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLT_VV_MF4_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv2i8
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLT_VV_MF4_:%[0-9]+]]:vr = PseudoVMSLT_VV_MF4 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLT_VV_MF4_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 2 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 2 x s1>) = G_ICMP intpred(slt), %0(<vscale x 2 x s8>), %0
    $v8 = COPY %1(<vscale x 2 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv4i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv4i8
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLEU_VV_MF2_:%[0-9]+]]:vr = PseudoVMSLEU_VV_MF2 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLEU_VV_MF2_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv4i8
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLEU_VV_MF2_:%[0-9]+]]:vr = PseudoVMSLEU_VV_MF2 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLEU_VV_MF2_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 4 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 4 x s1>) = G_ICMP intpred(uge), %0(<vscale x 4 x s8>), %0
    $v8 = COPY %1(<vscale x 4 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv8i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv8i8
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLE_VV_M1_:%[0-9]+]]:vr = PseudoVMSLE_VV_M1 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLE_VV_M1_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv8i8
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLE_VV_M1_:%[0-9]+]]:vr = PseudoVMSLE_VV_M1 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLE_VV_M1_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 8 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 8 x s1>) = G_ICMP intpred(sge), %0(<vscale x 8 x s8>), %0
    $v8 = COPY %1(<vscale x 8 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv16i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv16i8
    ; RV32I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M2 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv16i8
    ; RV64I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M2 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 16 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 16 x s1>) = G_ICMP intpred(ugt), %0(<vscale x 16 x s8>), %0
    $v8 = COPY %1(<vscale x 16 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv32i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv32i8
    ; RV32I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLT_VV_M4 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv32i8
    ; RV64I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLT_VV_M4 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 32 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 32 x s1>) = G_ICMP intpred(sgt), %0(<vscale x 32 x s8>), %0
    $v8 = COPY %1(<vscale x 32 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv64i8
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv64i8
    ; RV32I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLEU_VV_M8 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv64i8
    ; RV64I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLEU_VV_M8 [[DEF]], [[DEF]], -1, 3 /* e8 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 64 x s8>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 64 x s1>) = G_ICMP intpred(ule), %0(<vscale x 64 x s8>), %0
    $v8 = COPY %1(<vscale x 64 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv1i16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv1i16
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLE_VV_MF4_:%[0-9]+]]:vr = PseudoVMSLE_VV_MF4 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLE_VV_MF4_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv1i16
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLE_VV_MF4_:%[0-9]+]]:vr = PseudoVMSLE_VV_MF4 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLE_VV_MF4_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 1 x s16>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 1 x s1>) = G_ICMP intpred(sle), %0(<vscale x 1 x s16>), %0
    $v8 = COPY %1(<vscale x 1 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv2i16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv2i16
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSNE_VV_MF2_:%[0-9]+]]:vr = PseudoVMSNE_VV_MF2 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSNE_VV_MF2_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv2i16
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSNE_VV_MF2_:%[0-9]+]]:vr = PseudoVMSNE_VV_MF2 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSNE_VV_MF2_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 2 x s16>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 2 x s1>) = G_ICMP intpred(ne), %0(<vscale x 2 x s16>), %0
    $v8 = COPY %1(<vscale x 2 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv4i16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv4i16
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSEQ_VV_M1_:%[0-9]+]]:vr = PseudoVMSEQ_VV_M1 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSEQ_VV_M1_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv4i16
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSEQ_VV_M1_:%[0-9]+]]:vr = PseudoVMSEQ_VV_M1 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSEQ_VV_M1_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 4 x s16>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 4 x s1>) = G_ICMP intpred(eq), %0(<vscale x 4 x s16>), %0
    $v8 = COPY %1(<vscale x 4 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv8i16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv8i16
    ; RV32I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M2 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv8i16
    ; RV64I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M2 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 8 x s16>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 8 x s1>) = G_ICMP intpred(ult), %0(<vscale x 8 x s16>), %0
    $v8 = COPY %1(<vscale x 8 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv16i16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv16i16
    ; RV32I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLT_VV_M4 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv16i16
    ; RV64I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLT_VV_M4 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 16 x s16>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 16 x s1>) = G_ICMP intpred(slt), %0(<vscale x 16 x s16>), %0
    $v8 = COPY %1(<vscale x 16 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv32i16
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv32i16
    ; RV32I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLEU_VV_M8 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv32i16
    ; RV64I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLEU_VV_M8 [[DEF]], [[DEF]], -1, 4 /* e16 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 32 x s16>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 32 x s1>) = G_ICMP intpred(uge), %0(<vscale x 32 x s16>), %0
    $v8 = COPY %1(<vscale x 32 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv1i32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv1i32
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLE_VV_MF2_:%[0-9]+]]:vr = PseudoVMSLE_VV_MF2 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLE_VV_MF2_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv1i32
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLE_VV_MF2_:%[0-9]+]]:vr = PseudoVMSLE_VV_MF2 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLE_VV_MF2_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 1 x s32>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 1 x s1>) = G_ICMP intpred(sge), %0(<vscale x 1 x s32>), %0
    $v8 = COPY %1(<vscale x 1 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv2i32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv2i32
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSLTU_VV_M1_:%[0-9]+]]:vr = PseudoVMSLTU_VV_M1 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSLTU_VV_M1_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv2i32
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSLTU_VV_M1_:%[0-9]+]]:vr = PseudoVMSLTU_VV_M1 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSLTU_VV_M1_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 2 x s32>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 2 x s1>) = G_ICMP intpred(ugt), %0(<vscale x 2 x s32>), %0
    $v8 = COPY %1(<vscale x 2 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv4i32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv4i32
    ; RV32I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLT_VV_M2 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv4i32
    ; RV64I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLT_VV_M2 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 4 x s32>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 4 x s1>) = G_ICMP intpred(sgt), %0(<vscale x 4 x s32>), %0
    $v8 = COPY %1(<vscale x 4 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv8i32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv8i32
    ; RV32I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLEU_VV_M4 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv8i32
    ; RV64I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLEU_VV_M4 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 8 x s32>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 8 x s1>) = G_ICMP intpred(ule), %0(<vscale x 8 x s32>), %0
    $v8 = COPY %1(<vscale x 8 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv16i32
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv16i32
    ; RV32I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLE_VV_M8 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv16i32
    ; RV64I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLE_VV_M8 [[DEF]], [[DEF]], -1, 5 /* e32 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 16 x s32>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 16 x s1>) = G_ICMP intpred(sle), %0(<vscale x 16 x s32>), %0
    $v8 = COPY %1(<vscale x 16 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv1i64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv1i64
    ; RV32I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV32I-NEXT: [[PseudoVMSEQ_VV_M1_:%[0-9]+]]:vr = PseudoVMSEQ_VV_M1 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV32I-NEXT: $v8 = COPY [[PseudoVMSEQ_VV_M1_]]
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv1i64
    ; RV64I: [[DEF:%[0-9]+]]:vr = IMPLICIT_DEF
    ; RV64I-NEXT: [[PseudoVMSEQ_VV_M1_:%[0-9]+]]:vr = PseudoVMSEQ_VV_M1 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV64I-NEXT: $v8 = COPY [[PseudoVMSEQ_VV_M1_]]
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 1 x s64>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 1 x s1>) = G_ICMP intpred(eq), %0(<vscale x 1 x s64>), %0
    $v8 = COPY %1(<vscale x 1 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv2i64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv2i64
    ; RV32I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSNE_VV_M2 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv2i64
    ; RV64I: [[DEF:%[0-9]+]]:vrm2 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSNE_VV_M2 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 2 x s64>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 2 x s1>) = G_ICMP intpred(ne), %0(<vscale x 2 x s64>), %0
    $v8 = COPY %1(<vscale x 2 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv4i64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv4i64
    ; RV32I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M4 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv4i64
    ; RV64I: [[DEF:%[0-9]+]]:vrm4 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M4 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 4 x s64>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 4 x s1>) = G_ICMP intpred(ult), %0(<vscale x 4 x s64>), %0
    $v8 = COPY %1(<vscale x 4 x s1>)
    PseudoRET implicit $v8

...
---
name:            icmp_nxv8i64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; RV32I-LABEL: name: icmp_nxv8i64
    ; RV32I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV32I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M8 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV32I-NEXT: $v8 = COPY %1
    ; RV32I-NEXT: PseudoRET implicit $v8
    ;
    ; RV64I-LABEL: name: icmp_nxv8i64
    ; RV64I: [[DEF:%[0-9]+]]:vrm8 = IMPLICIT_DEF
    ; RV64I-NEXT: early-clobber %1:vr = PseudoVMSLTU_VV_M8 [[DEF]], [[DEF]], -1, 6 /* e64 */
    ; RV64I-NEXT: $v8 = COPY %1
    ; RV64I-NEXT: PseudoRET implicit $v8
    %0:vrb(<vscale x 8 x s64>) = G_IMPLICIT_DEF
    %1:vrb(<vscale x 8 x s1>) = G_ICMP intpred(ult), %0(<vscale x 8 x s64>), %0
    $v8 = COPY %1(<vscale x 8 x s1>)
    PseudoRET implicit $v8

...
