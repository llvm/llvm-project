; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -global-isel -mtriple=riscv32 -global-isel -mattr=+f,+zfh < %s \
; RUN:   | FileCheck %s --check-prefix=RV32
; RUN: llc -global-isel -mtriple=riscv64 -global-isel -mattr=+d,+zfh < %s \
; RUN:   | FileCheck %s --check-prefix=RV64

define void @zero_f16(ptr %i) {
; RV32-LABEL: zero_f16:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    fmv.h.x fa5, zero
; RV32-NEXT:    fsh fa5, 0(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_f16:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.h.x fa5, zero
; RV64-NEXT:    fsh fa5, 0(a0)
; RV64-NEXT:    ret
entry:
  store half 0.0, ptr %i, align 4
  ret void
}

define void @zero_bf16(ptr %i) {
; RV32-LABEL: zero_bf16:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    fmv.h.x fa5, zero
; RV32-NEXT:    fsh fa5, 0(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_bf16:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.h.x fa5, zero
; RV64-NEXT:    fsh fa5, 0(a0)
; RV64-NEXT:    ret
entry:
  store bfloat 0.0, ptr %i, align 4
  ret void
}

define void @zero_f32(ptr %i) {
; RV32-LABEL: zero_f32:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    fmv.w.x fa5, zero
; RV32-NEXT:    fsw fa5, 0(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_f32:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.w.x fa5, zero
; RV64-NEXT:    fsw fa5, 0(a0)
; RV64-NEXT:    ret
entry:
  store float 0.0, ptr %i, align 4
  ret void
}


define void @zero_f64(ptr %i) {
; RV32-LABEL: zero_f64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    lui a1, %hi(.LCPI3_0)
; RV32-NEXT:    addi a1, a1, %lo(.LCPI3_0)
; RV32-NEXT:    lw a2, 0(a1)
; RV32-NEXT:    lw a1, 4(a1)
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_f64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.d.x fa5, zero
; RV64-NEXT:    fsd fa5, 0(a0)
; RV64-NEXT:    ret
entry:
  store double 0.0, ptr %i, align 8
  ret void
}

define void @zero_v1f32(ptr %i) {
; RV32-LABEL: zero_v1f32:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    fmv.w.x fa5, zero
; RV32-NEXT:    fsw fa5, 0(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_v1f32:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.w.x fa5, zero
; RV64-NEXT:    fsw fa5, 0(a0)
; RV64-NEXT:    ret
entry:
  store <1 x float> <float 0.0>, ptr %i, align 8
  ret void
}

define void @zero_v2f32(ptr %i) {
; RV32-LABEL: zero_v2f32:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    fmv.w.x fa5, zero
; RV32-NEXT:    fsw fa5, 0(a0)
; RV32-NEXT:    fsw fa5, 4(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_v2f32:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.w.x fa5, zero
; RV64-NEXT:    fsw fa5, 0(a0)
; RV64-NEXT:    fsw fa5, 4(a0)
; RV64-NEXT:    ret
entry:
  store <2 x float> <float 0.0, float 0.0>, ptr %i, align 8
  ret void
}

define void @zero_v4f32(ptr %i) {
; RV32-LABEL: zero_v4f32:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    fmv.w.x fa5, zero
; RV32-NEXT:    fsw fa5, 0(a0)
; RV32-NEXT:    fsw fa5, 4(a0)
; RV32-NEXT:    fsw fa5, 8(a0)
; RV32-NEXT:    fsw fa5, 12(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_v4f32:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.w.x fa5, zero
; RV64-NEXT:    fsw fa5, 0(a0)
; RV64-NEXT:    fsw fa5, 4(a0)
; RV64-NEXT:    fsw fa5, 8(a0)
; RV64-NEXT:    fsw fa5, 12(a0)
; RV64-NEXT:    ret
entry:
  store <4 x float> <float 0.0, float 0.0, float 0.0, float 0.0>, ptr %i, align 8
  ret void
}

define void @zero_v1f64(ptr %i) {
; RV32-LABEL: zero_v1f64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    lui a1, %hi(.LCPI7_0)
; RV32-NEXT:    addi a1, a1, %lo(.LCPI7_0)
; RV32-NEXT:    lw a2, 0(a1)
; RV32-NEXT:    lw a1, 4(a1)
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_v1f64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.d.x fa5, zero
; RV64-NEXT:    fsd fa5, 0(a0)
; RV64-NEXT:    ret
entry:
  store <1 x double> <double 0.0>, ptr %i, align 8
  ret void
}

define void @zero_v2f64(ptr %i) {
; RV32-LABEL: zero_v2f64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    lui a1, %hi(.LCPI8_0)
; RV32-NEXT:    addi a1, a1, %lo(.LCPI8_0)
; RV32-NEXT:    lw a2, 0(a1)
; RV32-NEXT:    lw a1, 4(a1)
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    sw a2, 8(a0)
; RV32-NEXT:    sw a1, 12(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_v2f64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.d.x fa5, zero
; RV64-NEXT:    fsd fa5, 0(a0)
; RV64-NEXT:    fsd fa5, 8(a0)
; RV64-NEXT:    ret
entry:
  store <2 x double> <double 0.0, double 0.0>, ptr %i, align 8
  ret void
}

define void @zero_v4f64(ptr %i) {
; RV32-LABEL: zero_v4f64:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    lui a1, %hi(.LCPI9_0)
; RV32-NEXT:    addi a1, a1, %lo(.LCPI9_0)
; RV32-NEXT:    lw a2, 0(a1)
; RV32-NEXT:    lw a1, 4(a1)
; RV32-NEXT:    sw a2, 0(a0)
; RV32-NEXT:    sw a1, 4(a0)
; RV32-NEXT:    sw a2, 8(a0)
; RV32-NEXT:    sw a1, 12(a0)
; RV32-NEXT:    sw a2, 16(a0)
; RV32-NEXT:    sw a1, 20(a0)
; RV32-NEXT:    sw a2, 24(a0)
; RV32-NEXT:    sw a1, 28(a0)
; RV32-NEXT:    ret
;
; RV64-LABEL: zero_v4f64:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    fmv.d.x fa5, zero
; RV64-NEXT:    fsd fa5, 0(a0)
; RV64-NEXT:    fsd fa5, 8(a0)
; RV64-NEXT:    fsd fa5, 16(a0)
; RV64-NEXT:    fsd fa5, 24(a0)
; RV64-NEXT:    ret
entry:
  store <4 x double> <double 0.0, double 0.0, double 0.0, double 0.0>, ptr %i, align 8
  ret void
}
