# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv32 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s -check-prefix=CHECK-I
# RUN: llc -mattr=+m -mtriple=riscv32 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s -check-prefix=CHECK-M
---
name:            sdiv_i7
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: sdiv_i7
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 7
    ; CHECK-I-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 7
    ; CHECK-I-NEXT: $x10 = COPY [[SEXT_INREG]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[SEXT_INREG1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__divsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: sdiv_i7
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 7
    ; CHECK-M-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 7
    ; CHECK-M-NEXT: [[SDIV:%[0-9]+]]:_(s32) = G_SDIV [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-M-NEXT: $x10 = COPY [[SDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s7) = G_TRUNC %0(s32)
    %3:_(s7) = G_TRUNC %1(s32)
    %4:_(s7) = G_SDIV %2, %3
    %5:_(s32) = G_ANYEXT %4(s7)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            sdiv_i8
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: sdiv_i8
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 8
    ; CHECK-I-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 8
    ; CHECK-I-NEXT: $x10 = COPY [[SEXT_INREG]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[SEXT_INREG1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__divsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: sdiv_i8
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 8
    ; CHECK-M-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 8
    ; CHECK-M-NEXT: [[SDIV:%[0-9]+]]:_(s32) = G_SDIV [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-M-NEXT: $x10 = COPY [[SDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s32)
    %3:_(s8) = G_TRUNC %1(s32)
    %4:_(s8) = G_SDIV %2, %3
    %5:_(s32) = G_ANYEXT %4(s8)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            sdiv_i16
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: sdiv_i16
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-I-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 16
    ; CHECK-I-NEXT: $x10 = COPY [[SEXT_INREG]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[SEXT_INREG1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__divsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: sdiv_i16
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-M-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG [[COPY1]], 16
    ; CHECK-M-NEXT: [[SDIV:%[0-9]+]]:_(s32) = G_SDIV [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-M-NEXT: $x10 = COPY [[SDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s32)
    %3:_(s16) = G_TRUNC %1(s32)
    %4:_(s16) = G_SDIV %2, %3
    %5:_(s32) = G_ANYEXT %4(s16)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            sdiv_i32
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: sdiv_i32
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__divsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: sdiv_i32
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[SDIV:%[0-9]+]]:_(s32) = G_SDIV [[COPY]], [[COPY1]]
    ; CHECK-M-NEXT: $x10 = COPY [[SDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_SDIV %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            sdiv_i48
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: sdiv_i48
    ; CHECK-I: %xhi:_(s32) = COPY $x10
    ; CHECK-I-NEXT: %xlo:_(s32) = COPY $x11
    ; CHECK-I-NEXT: %yhi:_(s32) = COPY $x12
    ; CHECK-I-NEXT: %ylo:_(s32) = COPY $x13
    ; CHECK-I-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG %xlo, 16
    ; CHECK-I-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG %ylo, 16
    ; CHECK-I-NEXT: $x10 = COPY %xhi(s32)
    ; CHECK-I-NEXT: $x11 = COPY [[SEXT_INREG]](s32)
    ; CHECK-I-NEXT: $x12 = COPY %yhi(s32)
    ; CHECK-I-NEXT: $x13 = COPY [[SEXT_INREG1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__divdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: sdiv_i48
    ; CHECK-M: %xhi:_(s32) = COPY $x10
    ; CHECK-M-NEXT: %xlo:_(s32) = COPY $x11
    ; CHECK-M-NEXT: %yhi:_(s32) = COPY $x12
    ; CHECK-M-NEXT: %ylo:_(s32) = COPY $x13
    ; CHECK-M-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s32) = G_SEXT_INREG %xlo, 16
    ; CHECK-M-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s32) = G_SEXT_INREG %ylo, 16
    ; CHECK-M-NEXT: $x10 = COPY %xhi(s32)
    ; CHECK-M-NEXT: $x11 = COPY [[SEXT_INREG]](s32)
    ; CHECK-M-NEXT: $x12 = COPY %yhi(s32)
    ; CHECK-M-NEXT: $x13 = COPY [[SEXT_INREG1]](s32)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__divdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %xhi:_(s32) = COPY $x10
    %xlo:_(s32) = COPY $x11
    %yhi:_(s32) = COPY $x12
    %ylo:_(s32) = COPY $x13
    %x0:_(s64) = G_MERGE_VALUES %xhi(s32), %xlo(s32)
    %y0:_(s64) = G_MERGE_VALUES %yhi(s32), %ylo(s32)
    %x:_(s48) = G_TRUNC %x0
    %y:_(s48) = G_TRUNC %y0
    %z:_(s48) = G_SDIV %x, %y
    %z0:_(s64) = G_ANYEXT %z
    %zhi:_(s32), %zlo:_(s32) = G_UNMERGE_VALUES %z0(s64)
    $x10 = COPY %zhi(s32)
    $x11 = COPY %zlo(s32)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            sdiv_i64
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: sdiv_i64
    ; CHECK-I: %hi1:_(s32) = COPY $x10
    ; CHECK-I-NEXT: %lo1:_(s32) = COPY $x11
    ; CHECK-I-NEXT: %hi2:_(s32) = COPY $x12
    ; CHECK-I-NEXT: %lo2:_(s32) = COPY $x13
    ; CHECK-I-NEXT: $x10 = COPY %hi1(s32)
    ; CHECK-I-NEXT: $x11 = COPY %lo1(s32)
    ; CHECK-I-NEXT: $x12 = COPY %hi2(s32)
    ; CHECK-I-NEXT: $x13 = COPY %lo2(s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__divdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: sdiv_i64
    ; CHECK-M: %hi1:_(s32) = COPY $x10
    ; CHECK-M-NEXT: %lo1:_(s32) = COPY $x11
    ; CHECK-M-NEXT: %hi2:_(s32) = COPY $x12
    ; CHECK-M-NEXT: %lo2:_(s32) = COPY $x13
    ; CHECK-M-NEXT: $x10 = COPY %hi1(s32)
    ; CHECK-M-NEXT: $x11 = COPY %lo1(s32)
    ; CHECK-M-NEXT: $x12 = COPY %hi2(s32)
    ; CHECK-M-NEXT: $x13 = COPY %lo2(s32)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__divdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %hi1:_(s32) = COPY $x10
    %lo1:_(s32) = COPY $x11
    %hi2:_(s32) = COPY $x12
    %lo2:_(s32) = COPY $x13
    %x1:_(s64) = G_MERGE_VALUES %hi1(s32), %lo1(s32)
    %x2:_(s64) = G_MERGE_VALUES %hi2(s32), %lo2(s32)
    %y:_(s64) = G_SDIV %x1, %x2
    %hiy:_(s32), %loy:_(s32) = G_UNMERGE_VALUES %y(s64)
    $x10 = COPY %hiy(s32)
    $x11 = COPY %loy(s32)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            udiv_i7
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: udiv_i7
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__udivsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: udiv_i7
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-M-NEXT: [[UDIV:%[0-9]+]]:_(s32) = G_UDIV [[AND]], [[AND1]]
    ; CHECK-M-NEXT: $x10 = COPY [[UDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s7) = G_TRUNC %0(s32)
    %3:_(s7) = G_TRUNC %1(s32)
    %4:_(s7) = G_UDIV %2, %3
    %5:_(s32) = G_ANYEXT %4(s7)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            udiv_i8
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: udiv_i8
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__udivsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: udiv_i8
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-M-NEXT: [[UDIV:%[0-9]+]]:_(s32) = G_UDIV [[AND]], [[AND1]]
    ; CHECK-M-NEXT: $x10 = COPY [[UDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s32)
    %3:_(s8) = G_TRUNC %1(s32)
    %4:_(s8) = G_UDIV %2, %3
    %5:_(s32) = G_ANYEXT %4(s8)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            udiv_i16
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: udiv_i16
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__udivsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: udiv_i16
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK-M-NEXT: [[UDIV:%[0-9]+]]:_(s32) = G_UDIV [[AND]], [[AND1]]
    ; CHECK-M-NEXT: $x10 = COPY [[UDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s32)
    %3:_(s16) = G_TRUNC %1(s32)
    %4:_(s16) = G_UDIV %2, %3
    %5:_(s32) = G_ANYEXT %4(s16)
    $x10 = COPY %5(s32)
    PseudoRET implicit $x10

...
---
name:            udiv_i32
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: udiv_i32
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__udivsi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: udiv_i32
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: [[UDIV:%[0-9]+]]:_(s32) = G_UDIV [[COPY]], [[COPY1]]
    ; CHECK-M-NEXT: $x10 = COPY [[UDIV]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s32) = COPY $x10
    %1:_(s32) = COPY $x11
    %2:_(s32) = G_UDIV %0, %1
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            udiv_i48
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: udiv_i48
    ; CHECK-I: %xhi:_(s32) = COPY $x10
    ; CHECK-I-NEXT: %xlo:_(s32) = COPY $x11
    ; CHECK-I-NEXT: %yhi:_(s32) = COPY $x12
    ; CHECK-I-NEXT: %ylo:_(s32) = COPY $x13
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %xhi, [[C]]
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND %xlo, [[C1]]
    ; CHECK-I-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-I-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-I-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND %yhi, [[C2]]
    ; CHECK-I-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND %ylo, [[C3]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s32)
    ; CHECK-I-NEXT: $x12 = COPY [[AND2]](s32)
    ; CHECK-I-NEXT: $x13 = COPY [[AND3]](s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__udivdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: udiv_i48
    ; CHECK-M: %xhi:_(s32) = COPY $x10
    ; CHECK-M-NEXT: %xlo:_(s32) = COPY $x11
    ; CHECK-M-NEXT: %yhi:_(s32) = COPY $x12
    ; CHECK-M-NEXT: %ylo:_(s32) = COPY $x13
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %xhi, [[C]]
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND %xlo, [[C1]]
    ; CHECK-M-NEXT: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 -1
    ; CHECK-M-NEXT: [[C3:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK-M-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND %yhi, [[C2]]
    ; CHECK-M-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND %ylo, [[C3]]
    ; CHECK-M-NEXT: $x10 = COPY [[AND]](s32)
    ; CHECK-M-NEXT: $x11 = COPY [[AND1]](s32)
    ; CHECK-M-NEXT: $x12 = COPY [[AND2]](s32)
    ; CHECK-M-NEXT: $x13 = COPY [[AND3]](s32)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__udivdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %xhi:_(s32) = COPY $x10
    %xlo:_(s32) = COPY $x11
    %yhi:_(s32) = COPY $x12
    %ylo:_(s32) = COPY $x13
    %x0:_(s64) = G_MERGE_VALUES %xhi(s32), %xlo(s32)
    %y0:_(s64) = G_MERGE_VALUES %yhi(s32), %ylo(s32)
    %x:_(s48) = G_TRUNC %x0
    %y:_(s48) = G_TRUNC %y0
    %z:_(s48) = G_UDIV %x, %y
    %z0:_(s64) = G_ANYEXT %z
    %zhi:_(s32), %zlo:_(s32) = G_UNMERGE_VALUES %z0(s64)
    $x10 = COPY %zhi(s32)
    $x11 = COPY %zlo(s32)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            udiv_i64
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: udiv_i64
    ; CHECK-I: %hi1:_(s32) = COPY $x10
    ; CHECK-I-NEXT: %lo1:_(s32) = COPY $x11
    ; CHECK-I-NEXT: %hi2:_(s32) = COPY $x12
    ; CHECK-I-NEXT: %lo2:_(s32) = COPY $x13
    ; CHECK-I-NEXT: $x10 = COPY %hi1(s32)
    ; CHECK-I-NEXT: $x11 = COPY %lo1(s32)
    ; CHECK-I-NEXT: $x12 = COPY %hi2(s32)
    ; CHECK-I-NEXT: $x13 = COPY %lo2(s32)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__udivdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: udiv_i64
    ; CHECK-M: %hi1:_(s32) = COPY $x10
    ; CHECK-M-NEXT: %lo1:_(s32) = COPY $x11
    ; CHECK-M-NEXT: %hi2:_(s32) = COPY $x12
    ; CHECK-M-NEXT: %lo2:_(s32) = COPY $x13
    ; CHECK-M-NEXT: $x10 = COPY %hi1(s32)
    ; CHECK-M-NEXT: $x11 = COPY %lo1(s32)
    ; CHECK-M-NEXT: $x12 = COPY %hi2(s32)
    ; CHECK-M-NEXT: $x13 = COPY %lo2(s32)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__udivdi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s32)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %hi1:_(s32) = COPY $x10
    %lo1:_(s32) = COPY $x11
    %hi2:_(s32) = COPY $x12
    %lo2:_(s32) = COPY $x13
    %x1:_(s64) = G_MERGE_VALUES %hi1(s32), %lo1(s32)
    %x2:_(s64) = G_MERGE_VALUES %hi2(s32), %lo2(s32)
    %y:_(s64) = G_UDIV %x1, %x2
    %hiy:_(s32), %loy:_(s32) = G_UNMERGE_VALUES %y(s64)
    $x10 = COPY %hiy(s32)
    $x11 = COPY %loy(s32)
    PseudoRET implicit $x10, implicit $x11

...
