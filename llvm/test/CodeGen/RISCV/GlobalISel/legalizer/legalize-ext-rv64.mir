# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s
---
name:            sext_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: sext_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[ADD]], 32
    ; CHECK-NEXT: $x10 = COPY [[SEXT_INREG]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s32) = G_ADD %2, %3
    %5:_(s64) = G_SEXT %4(s32)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            zext_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: zext_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s32) = G_ADD %2, %3
    %5:_(s64) = G_ZEXT %4(s32)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            anyext_16_i32
body:             |
  ; CHECK-LABEL: name: anyext_16_i32
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[C]](s64)
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[COPY]](p0) :: (load (s16))
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[LOAD]](s16)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
  ; CHECK-NEXT:   [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s64), [[ANYEXT]], [[TRUNC]]
  ; CHECK-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[SELECT]](s32)
  ; CHECK-NEXT:   $x10 = COPY [[ANYEXT1]](s64)
  ; CHECK-NEXT:   PseudoRET implicit $x10
  bb.0.entry:
  bb.1:
    liveins: $x10, $x11

    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_TRUNC %1(s64)
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s16) = G_LOAD %0(p0) :: (load (s16))
    %5:_(s32) = G_ANYEXT %4(s16)
    %6:_(s32) = G_SELECT %2(s1), %5, %3
    %7:_(s64) = G_ANYEXT %6(s32)
    $x10 = COPY %7(s64)
    PseudoRET implicit $x10

...
---
name:            sext_16_i32
body:             |
  ; CHECK-LABEL: name: sext_16_i32
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[C]](s64)
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[COPY]](p0) :: (load (s16))
  ; CHECK-NEXT:   [[SEXT:%[0-9]+]]:_(s32) = G_SEXT [[LOAD]](s16)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
  ; CHECK-NEXT:   [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s64), [[SEXT]], [[TRUNC]]
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SELECT]](s32)
  ; CHECK-NEXT:   $x10 = COPY [[ANYEXT]](s64)
  ; CHECK-NEXT:   PseudoRET implicit $x10
  bb.0.entry:
  bb.1:
    liveins: $x10, $x11

    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_TRUNC %1(s64)
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s16) = G_LOAD %0(p0) :: (load (s16))
    %5:_(s32) = G_SEXT %4(s16)
    %6:_(s32) = G_SELECT %2(s1), %5, %3
    %7:_(s64) = G_ANYEXT %6(s32)
    $x10 = COPY %7(s64)
    PseudoRET implicit $x10

...
---
name:            zext_16_i32
body:             |
  ; CHECK-LABEL: name: zext_16_i32
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $x10, $x11
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x10
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
  ; CHECK-NEXT:   [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[C]](s64)
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[COPY]](p0) :: (load (s16))
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[LOAD]](s16)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
  ; CHECK-NEXT:   [[SELECT:%[0-9]+]]:_(s32) = G_SELECT [[AND]](s64), [[ZEXT]], [[TRUNC]]
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SELECT]](s32)
  ; CHECK-NEXT:   $x10 = COPY [[ANYEXT]](s64)
  ; CHECK-NEXT:   PseudoRET implicit $x10
  bb.0.entry:
  bb.1:
    liveins: $x10, $x11

    %0:_(p0) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_TRUNC %1(s64)
    %3:_(s32) = G_CONSTANT i32 0
    %4:_(s16) = G_LOAD %0(p0) :: (load (s16))
    %5:_(s32) = G_ZEXT %4(s16)
    %6:_(s32) = G_SELECT %2(s1), %5, %3
    %7:_(s64) = G_ANYEXT %6(s32)
    $x10 = COPY %7(s64)
    PseudoRET implicit $x10

...
