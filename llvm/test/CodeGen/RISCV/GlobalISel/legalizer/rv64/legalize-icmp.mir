# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s
---
name:            cmp_sgt_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sgt), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sgt_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sgt), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sgt_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sgt), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sgt_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[SEXT_INREG]](s64), [[SEXT_INREG1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sgt), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sgt_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(sgt), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sgt_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL %xlo, [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL %ylo, [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(sgt), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sgt_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sgt_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(sgt), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(slt), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(slt), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(slt), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[SEXT_INREG]](s64), [[SEXT_INREG1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(slt), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(slt), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL %xlo, [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL %ylo, [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(sge), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_slt_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_slt_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(slt), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sge), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sge), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sge), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[SEXT_INREG]](s64), [[SEXT_INREG1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sge), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(sge), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL %xlo, [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL %ylo, [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(sge), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sge_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sge_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(sge), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sle), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sle), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sle), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), [[SEXT_INREG]](s64), [[SEXT_INREG1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(sle), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(sle), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL %xlo, [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL %ylo, [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[ASHR]](s64), [[ASHR1]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(sle), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_sle_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_sle_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sle), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(sle), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ugt), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ugt), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ugt), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ugt), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(ugt), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xhi, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xlo, [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %yhi, [[C2]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %ylo, [[C3]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), [[AND]](s64), [[AND2]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C4]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND4]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(ugt), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ugt_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ugt_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ugt), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(ugt), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ult), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ult), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ult), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ult), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(ult), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xhi, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xlo, [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %yhi, [[C2]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %ylo, [[C3]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND2]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C4]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND4]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(ult), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ult_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ult_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(sge), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(sge), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(uge), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(uge), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(uge), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(uge), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(uge), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xhi, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xlo, [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %yhi, [[C2]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %ylo, [[C3]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), [[AND]](s64), [[AND2]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C4]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND4]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(uge), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_uge_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_uge_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(uge), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(uge), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ule), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ule), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ule), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ule), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(ule), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xhi, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xlo, [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %yhi, [[C2]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %ylo, [[C3]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND1]](s64), [[AND3]]
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), [[AND]](s64), [[AND2]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C4]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND4]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(ule), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ule_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ule_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), %xlo(s64), %ylo
    ; CHECK-NEXT: [[ICMP2:%[0-9]+]]:_(s64) = G_ICMP intpred(ule), %xhi(s64), %yhi
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ICMP1]], [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(s64) = G_SELECT [[AND]](s64), [[ICMP2]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SELECT]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(ule), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(eq), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(eq), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(eq), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(eq), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(eq), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xhi, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xlo, [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %yhi, [[C2]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %ylo, [[C3]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR [[AND]], [[AND2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s64) = G_XOR [[AND1]], [[AND3]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s64) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[OR]](s64), [[C4]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(eq), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_eq_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_eq_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR %xhi, %yhi
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s64) = G_XOR %xlo, %ylo
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s64) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(eq), [[OR]](s64), [[C]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(eq), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i8
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ne), %2(s8), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i15
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i15
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ne), %2(s15), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i16
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ne), %2(s16), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i32
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s1) = G_ICMP intpred(ne), %2(s32), %3
    %5:_(s64) = G_ANYEXT %4(s1)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i64
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i64
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s1) = G_ICMP intpred(ne), %0(s64), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i72
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i72
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xhi, [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xlo, [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %yhi, [[C2]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %ylo, [[C3]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR [[AND]], [[AND2]]
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s64) = G_XOR [[AND1]], [[AND3]]
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s64) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[OR]](s64), [[C4]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y0:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %x:_(s72) = G_TRUNC %x0(s128)
    %y:_(s72) = G_TRUNC %y0(s128)
    %z:_(s1) = G_ICMP intpred(ne), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_i128
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_i128
    ; CHECK: %xhi:_(s64) = COPY $x10
    ; CHECK-NEXT: %xlo:_(s64) = COPY $x11
    ; CHECK-NEXT: %yhi:_(s64) = COPY $x12
    ; CHECK-NEXT: %ylo:_(s64) = COPY $x13
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR %xhi, %yhi
    ; CHECK-NEXT: [[XOR1:%[0-9]+]]:_(s64) = G_XOR %xlo, %ylo
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(s64) = G_OR [[XOR]], [[XOR1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[OR]](s64), [[C]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %xhi:_(s64) = COPY $x10
    %xlo:_(s64) = COPY $x11
    %yhi:_(s64) = COPY $x12
    %ylo:_(s64) = COPY $x13
    %x:_(s128) = G_MERGE_VALUES %xhi(s64), %xlo(s64)
    %y:_(s128) = G_MERGE_VALUES %yhi(s64), %ylo(s64)
    %z:_(s1) = G_ICMP intpred(ne), %x, %y
    %z0:_(s64) = G_ANYEXT %z(s1)
    $x10 = COPY %z0(s64)
    PseudoRET implicit $x10

...
---
name:            cmp_ne_ptr
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: cmp_ne_ptr
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $x11
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY]](p0), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(p0) = COPY $x10
    %1:_(p0) = COPY $x11
    %2:_(s1) = G_ICMP intpred(ne), %0(p0), %1
    %3:_(s64) = G_ANYEXT %2(s1)
    $x10 = COPY %3(s64)
    PseudoRET implicit $x10

...
