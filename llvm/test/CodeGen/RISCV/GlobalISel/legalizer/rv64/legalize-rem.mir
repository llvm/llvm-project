# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s -check-prefix=CHECK-I
# RUN: llc -mattr=+m -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s -check-prefix=CHECK-M
---
name:            srem_i8
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i8
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-I-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-I-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-I-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-I-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-I-NEXT: $x10 = COPY [[ASHR]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[ASHR1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__moddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: srem_i8
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-M-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[TRUNC]], [[C]](s32)
    ; CHECK-M-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK-M-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[TRUNC1]], [[C1]](s32)
    ; CHECK-M-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-M-NEXT: [[SREM:%[0-9]+]]:_(s32) = G_SREM [[ASHR]], [[ASHR1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s8) = G_SREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s8)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            srem_i15
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i15
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-I-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-I-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 49
    ; CHECK-I-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-I-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-I-NEXT: $x10 = COPY [[ASHR]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[ASHR1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__moddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: srem_i15
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 17
    ; CHECK-M-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[TRUNC]], [[C]](s32)
    ; CHECK-M-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 17
    ; CHECK-M-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[TRUNC1]], [[C1]](s32)
    ; CHECK-M-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-M-NEXT: [[SREM:%[0-9]+]]:_(s32) = G_SREM [[ASHR]], [[ASHR1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s15) = G_SREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s15)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            srem_i16
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i16
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-I-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-I-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-I-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-I-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-I-NEXT: $x10 = COPY [[ASHR]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[ASHR1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__moddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: srem_i16
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-M-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[TRUNC]], [[C]](s32)
    ; CHECK-M-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK-M-NEXT: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[TRUNC1]], [[C1]](s32)
    ; CHECK-M-NEXT: [[ASHR1:%[0-9]+]]:_(s32) = G_ASHR [[SHL1]], [[C1]](s32)
    ; CHECK-M-NEXT: [[SREM:%[0-9]+]]:_(s32) = G_SREM [[ASHR]], [[ASHR1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s16) = G_SREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s16)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            srem_i32
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i32
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-I-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-I-NEXT: $x10 = COPY [[SEXT_INREG]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[SEXT_INREG1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__moddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: srem_i32
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-M-NEXT: [[SREM:%[0-9]+]]:_(s32) = G_SREM [[TRUNC]], [[TRUNC1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s32) = G_SREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s32)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            srem_i64
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i64
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__moddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: srem_i64
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[SREM:%[0-9]+]]:_(s64) = G_SREM [[COPY]], [[COPY1]]
    ; CHECK-M-NEXT: $x10 = COPY [[SREM]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64) = G_SREM %0, %1
    $x10 = COPY %2(s64)
    PseudoRET implicit $x10

...
---
name:            srem_i72
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i72
    ; CHECK-I: %xlo:_(s64) = COPY $x10
    ; CHECK-I-NEXT: %xhi:_(s64) = COPY $x11
    ; CHECK-I-NEXT: %ylo:_(s64) = COPY $x12
    ; CHECK-I-NEXT: %yhi:_(s64) = COPY $x13
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-I-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL %xhi, [[C]](s64)
    ; CHECK-I-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-I-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL %yhi, [[C1]](s64)
    ; CHECK-I-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-I-NEXT: $x10 = COPY %xlo(s64)
    ; CHECK-I-NEXT: $x11 = COPY [[ASHR]](s64)
    ; CHECK-I-NEXT: $x12 = COPY %ylo(s64)
    ; CHECK-I-NEXT: $x13 = COPY [[ASHR1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__modti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: srem_i72
    ; CHECK-M: %xlo:_(s64) = COPY $x10
    ; CHECK-M-NEXT: %xhi:_(s64) = COPY $x11
    ; CHECK-M-NEXT: %ylo:_(s64) = COPY $x12
    ; CHECK-M-NEXT: %yhi:_(s64) = COPY $x13
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-M-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL %xhi, [[C]](s64)
    ; CHECK-M-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-M-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL %yhi, [[C1]](s64)
    ; CHECK-M-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-M-NEXT: $x10 = COPY %xlo(s64)
    ; CHECK-M-NEXT: $x11 = COPY [[ASHR]](s64)
    ; CHECK-M-NEXT: $x12 = COPY %ylo(s64)
    ; CHECK-M-NEXT: $x13 = COPY [[ASHR1]](s64)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__modti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %xlo:_(s64) = COPY $x10
    %xhi:_(s64) = COPY $x11
    %ylo:_(s64) = COPY $x12
    %yhi:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xlo(s64), %xhi(s64)
    %y0:_(s128) = G_MERGE_VALUES %ylo(s64), %yhi(s64)
    %x:_(s72) = G_TRUNC %x0
    %y:_(s72) = G_TRUNC %y0
    %z:_(s72) = G_SREM %x, %y
    %z0:_(s128) = G_ANYEXT %z
    %zlo:_(s64), %zhi:_(s64) = G_UNMERGE_VALUES %z0(s128)
    $x10 = COPY %zlo(s64)
    $x11 = COPY %zhi(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            srem_i128
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: srem_i128
    ; CHECK-I: %lo1:_(s64) = COPY $x10
    ; CHECK-I-NEXT: %hi1:_(s64) = COPY $x11
    ; CHECK-I-NEXT: %lo2:_(s64) = COPY $x12
    ; CHECK-I-NEXT: %hi2:_(s64) = COPY $x13
    ; CHECK-I-NEXT: $x10 = COPY %lo1(s64)
    ; CHECK-I-NEXT: $x11 = COPY %hi1(s64)
    ; CHECK-I-NEXT: $x12 = COPY %lo2(s64)
    ; CHECK-I-NEXT: $x13 = COPY %hi2(s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__modti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: srem_i128
    ; CHECK-M: %lo1:_(s64) = COPY $x10
    ; CHECK-M-NEXT: %hi1:_(s64) = COPY $x11
    ; CHECK-M-NEXT: %lo2:_(s64) = COPY $x12
    ; CHECK-M-NEXT: %hi2:_(s64) = COPY $x13
    ; CHECK-M-NEXT: $x10 = COPY %lo1(s64)
    ; CHECK-M-NEXT: $x11 = COPY %hi1(s64)
    ; CHECK-M-NEXT: $x12 = COPY %lo2(s64)
    ; CHECK-M-NEXT: $x13 = COPY %hi2(s64)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__modti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %lo1:_(s64) = COPY $x10
    %hi1:_(s64) = COPY $x11
    %lo2:_(s64) = COPY $x12
    %hi2:_(s64) = COPY $x13
    %x1:_(s128) = G_MERGE_VALUES %lo1(s64), %hi1(s64)
    %x2:_(s128) = G_MERGE_VALUES %lo2(s64), %hi2(s64)
    %y:_(s128) = G_SREM %x1, %x2
    %loy:_(s64), %hiy:_(s64) = G_UNMERGE_VALUES %y(s128)
    $x10 = COPY %loy(s64)
    $x11 = COPY %hiy(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            urem_i8
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i8
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umoddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: urem_i8
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[AND]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[AND1]](s64)
    ; CHECK-M-NEXT: [[UREM:%[0-9]+]]:_(s32) = G_UREM [[TRUNC]], [[TRUNC1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[UREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s8) = G_TRUNC %0(s64)
    %3:_(s8) = G_TRUNC %1(s64)
    %4:_(s8) = G_UREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s8)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            urem_i15
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i15
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umoddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: urem_i15
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[AND]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 32767
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[AND1]](s64)
    ; CHECK-M-NEXT: [[UREM:%[0-9]+]]:_(s32) = G_UREM [[TRUNC]], [[TRUNC1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[UREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s15) = G_TRUNC %0(s64)
    %3:_(s15) = G_TRUNC %1(s64)
    %4:_(s15) = G_UREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s15)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            urem_i16
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i16
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umoddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: urem_i16
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[AND]](s64)
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[AND1]](s64)
    ; CHECK-M-NEXT: [[UREM:%[0-9]+]]:_(s32) = G_UREM [[TRUNC]], [[TRUNC1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[UREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s16) = G_TRUNC %0(s64)
    %3:_(s16) = G_TRUNC %1(s64)
    %4:_(s16) = G_UREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s16)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            urem_i32
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i32
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umoddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: urem_i32
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-M-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-M-NEXT: [[UREM:%[0-9]+]]:_(s32) = G_UREM [[TRUNC]], [[TRUNC1]]
    ; CHECK-M-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[UREM]](s32)
    ; CHECK-M-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s32) = G_TRUNC %0(s64)
    %3:_(s32) = G_TRUNC %1(s64)
    %4:_(s32) = G_UREM %2, %3
    %5:_(s64) = G_ANYEXT %4(s32)
    $x10 = COPY %5(s64)
    PseudoRET implicit $x10

...
---
name:            urem_i64
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i64
    ; CHECK-I: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umoddi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-I-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: $x10 = COPY [[COPY2]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10
    ;
    ; CHECK-M-LABEL: name: urem_i64
    ; CHECK-M: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: [[UREM:%[0-9]+]]:_(s64) = G_UREM [[COPY]], [[COPY1]]
    ; CHECK-M-NEXT: $x10 = COPY [[UREM]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64) = G_UREM %0, %1
    $x10 = COPY %2(s64)
    PseudoRET implicit $x10

...
---
name:            urem_i72
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i72
    ; CHECK-I: %xlo:_(s64) = COPY $x10
    ; CHECK-I-NEXT: %xhi:_(s64) = COPY $x11
    ; CHECK-I-NEXT: %ylo:_(s64) = COPY $x12
    ; CHECK-I-NEXT: %yhi:_(s64) = COPY $x13
    ; CHECK-I-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-I-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-I-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xlo, [[C]]
    ; CHECK-I-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xhi, [[C1]]
    ; CHECK-I-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-I-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-I-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %ylo, [[C2]]
    ; CHECK-I-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %yhi, [[C3]]
    ; CHECK-I-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[AND1]](s64)
    ; CHECK-I-NEXT: $x12 = COPY [[AND2]](s64)
    ; CHECK-I-NEXT: $x13 = COPY [[AND3]](s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umodti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: urem_i72
    ; CHECK-M: %xlo:_(s64) = COPY $x10
    ; CHECK-M-NEXT: %xhi:_(s64) = COPY $x11
    ; CHECK-M-NEXT: %ylo:_(s64) = COPY $x12
    ; CHECK-M-NEXT: %yhi:_(s64) = COPY $x13
    ; CHECK-M-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-M-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-M-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %xlo, [[C]]
    ; CHECK-M-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND %xhi, [[C1]]
    ; CHECK-M-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; CHECK-M-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-M-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND %ylo, [[C2]]
    ; CHECK-M-NEXT: [[AND3:%[0-9]+]]:_(s64) = G_AND %yhi, [[C3]]
    ; CHECK-M-NEXT: $x10 = COPY [[AND]](s64)
    ; CHECK-M-NEXT: $x11 = COPY [[AND1]](s64)
    ; CHECK-M-NEXT: $x12 = COPY [[AND2]](s64)
    ; CHECK-M-NEXT: $x13 = COPY [[AND3]](s64)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__umodti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %xlo:_(s64) = COPY $x10
    %xhi:_(s64) = COPY $x11
    %ylo:_(s64) = COPY $x12
    %yhi:_(s64) = COPY $x13
    %x0:_(s128) = G_MERGE_VALUES %xlo(s64), %xhi(s64)
    %y0:_(s128) = G_MERGE_VALUES %ylo(s64), %yhi(s64)
    %x:_(s72) = G_TRUNC %x0
    %y:_(s72) = G_TRUNC %y0
    %z:_(s72) = G_UREM %x, %y
    %z0:_(s128) = G_ANYEXT %z
    %zlo:_(s64), %zhi:_(s64) = G_UNMERGE_VALUES %z0(s128)
    $x10 = COPY %zlo(s64)
    $x11 = COPY %zhi(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            urem_i128
body:             |
  bb.0.entry:
    ; CHECK-I-LABEL: name: urem_i128
    ; CHECK-I: %lo1:_(s64) = COPY $x10
    ; CHECK-I-NEXT: %hi1:_(s64) = COPY $x11
    ; CHECK-I-NEXT: %lo2:_(s64) = COPY $x12
    ; CHECK-I-NEXT: %hi2:_(s64) = COPY $x13
    ; CHECK-I-NEXT: $x10 = COPY %lo1(s64)
    ; CHECK-I-NEXT: $x11 = COPY %hi1(s64)
    ; CHECK-I-NEXT: $x12 = COPY %lo2(s64)
    ; CHECK-I-NEXT: $x13 = COPY %hi2(s64)
    ; CHECK-I-NEXT: PseudoCALL target-flags(riscv-call) &__umodti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-I-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-I-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-I-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-I-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-I-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; CHECK-M-LABEL: name: urem_i128
    ; CHECK-M: %lo1:_(s64) = COPY $x10
    ; CHECK-M-NEXT: %hi1:_(s64) = COPY $x11
    ; CHECK-M-NEXT: %lo2:_(s64) = COPY $x12
    ; CHECK-M-NEXT: %hi2:_(s64) = COPY $x13
    ; CHECK-M-NEXT: $x10 = COPY %lo1(s64)
    ; CHECK-M-NEXT: $x11 = COPY %hi1(s64)
    ; CHECK-M-NEXT: $x12 = COPY %lo2(s64)
    ; CHECK-M-NEXT: $x13 = COPY %hi2(s64)
    ; CHECK-M-NEXT: PseudoCALL target-flags(riscv-call) &__umodti3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; CHECK-M-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-M-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-M-NEXT: $x10 = COPY [[COPY]](s64)
    ; CHECK-M-NEXT: $x11 = COPY [[COPY1]](s64)
    ; CHECK-M-NEXT: PseudoRET implicit $x10, implicit $x11
    %lo1:_(s64) = COPY $x10
    %hi1:_(s64) = COPY $x11
    %lo2:_(s64) = COPY $x12
    %hi2:_(s64) = COPY $x13
    %x1:_(s128) = G_MERGE_VALUES %lo1(s64), %hi1(s64)
    %x2:_(s128) = G_MERGE_VALUES %lo2(s64), %hi2(s64)
    %y:_(s128) = G_UREM %x1, %x2
    %loy:_(s64), %hiy:_(s64) = G_UNMERGE_VALUES %y(s128)
    $x10 = COPY %loy(s64)
    $x11 = COPY %hiy(s64)
    PseudoRET implicit $x10, implicit $x11

...
