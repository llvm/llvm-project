# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mattr=+m -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s
# RUN: llc -mattr=+zmmul -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s
# RUN: llc -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s --check-prefix=LIBCALL

---
name:            smulo_i8
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: smulo_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[MUL]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[MUL]](s64), [[ASHR2]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: smulo_i8
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; LIBCALL-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; LIBCALL-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; LIBCALL-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; LIBCALL-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; LIBCALL-NEXT: $x10 = COPY [[ASHR]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ASHR1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; LIBCALL-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C2]](s64)
    ; LIBCALL-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY2]](s64), [[ASHR2]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s64)
    %4:_(s8), %5:_(s1) = G_SMULO %0, %1
    %6:_(s64) = G_ANYEXT %4(s8)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            smulo_i16
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: smulo_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[MUL]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[MUL]](s64), [[ASHR2]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: smulo_i16
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; LIBCALL-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; LIBCALL-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; LIBCALL-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; LIBCALL-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; LIBCALL-NEXT: $x10 = COPY [[ASHR]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ASHR1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; LIBCALL-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C2]](s64)
    ; LIBCALL-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY2]](s64), [[ASHR2]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s64)
    %4:_(s16), %5:_(s1) = G_SMULO %0, %1
    %6:_(s64) = G_ANYEXT %4(s16)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            smulo_i32
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: smulo_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(s64) = G_SEXT_INREG [[MUL]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[MUL]](s64), [[SEXT_INREG2]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: smulo_i32
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; LIBCALL-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; LIBCALL-NEXT: $x10 = COPY [[SEXT_INREG]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[SEXT_INREG1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY2]], 32
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY2]](s64), [[SEXT_INREG2]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %3(s64)
    %4:_(s32), %5:_(s1) = G_SMULO %0, %1
    %6:_(s64) = G_ANYEXT %4(s32)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            smulo_i64
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: smulo_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SMULH:%[0-9]+]]:_(s64) = G_SMULH [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 63
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[MUL]], [[C]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[SMULH]](s64), [[ASHR]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: smulo_i64
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 63
    ; LIBCALL-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[COPY]], [[C]](s64)
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 63
    ; LIBCALL-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[COPY1]], [[C1]](s64)
    ; LIBCALL-NEXT: $x10 = COPY [[COPY]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ASHR]](s64)
    ; LIBCALL-NEXT: $x12 = COPY [[COPY1]](s64)
    ; LIBCALL-NEXT: $x13 = COPY [[ASHR1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__multi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY3:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; LIBCALL-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY2]], [[C2]](s64)
    ; LIBCALL-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C2]](s64)
    ; LIBCALL-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 63
    ; LIBCALL-NEXT: [[ASHR3:%[0-9]+]]:_(s64) = G_ASHR [[ASHR2]], [[C3]](s64)
    ; LIBCALL-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; LIBCALL-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR [[COPY2]], [[ASHR2]]
    ; LIBCALL-NEXT: [[XOR1:%[0-9]+]]:_(s64) = G_XOR [[COPY3]], [[ASHR3]]
    ; LIBCALL-NEXT: [[OR:%[0-9]+]]:_(s64) = G_OR [[XOR]], [[XOR1]]
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[OR]](s64), [[C4]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64), %3:_(s1) = G_SMULO %0, %1
    %4:_(s64) = G_ANYEXT %3(s1)
    $x10 = COPY %2(s64)
    $x11 = COPY %4(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            umulo_i8
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: umulo_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[AND]], [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[MUL]], [[C2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[MUL]](s64), [[AND2]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: umulo_i8
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; LIBCALL-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; LIBCALL-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; LIBCALL-NEXT: $x10 = COPY [[AND]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[AND1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; LIBCALL-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[COPY2]], [[C2]]
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY2]](s64), [[AND2]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s64)
    %4:_(s8), %5:_(s1) = G_UMULO %0, %1
    %6:_(s64) = G_ANYEXT %4(s8)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            umulo_i16
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: umulo_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[AND]], [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[MUL]], [[C2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[MUL]](s64), [[AND2]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: umulo_i16
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; LIBCALL-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; LIBCALL-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; LIBCALL-NEXT: $x10 = COPY [[AND]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[AND1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; LIBCALL-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[COPY2]], [[C2]]
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY2]](s64), [[AND2]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s64)
    %4:_(s16), %5:_(s1) = G_UMULO %0, %1
    %6:_(s64) = G_ANYEXT %4(s16)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            umulo_i32
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: umulo_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[AND]], [[AND1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[MUL]], [[C2]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[MUL]](s64), [[AND2]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: umulo_i32
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; LIBCALL-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; LIBCALL-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; LIBCALL-NEXT: $x10 = COPY [[AND]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[AND1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__muldi3, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; LIBCALL-NEXT: [[AND2:%[0-9]+]]:_(s64) = G_AND [[COPY2]], [[C2]]
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[COPY2]](s64), [[AND2]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %3(s64)
    %4:_(s32), %5:_(s1) = G_UMULO %0, %1
    %6:_(s64) = G_ANYEXT %4(s32)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            umulo_i64
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: umulo_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[UMULH:%[0-9]+]]:_(s64) = G_UMULH [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[MUL:%[0-9]+]]:_(s64) = G_MUL [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[UMULH]](s64), [[C]]
    ; CHECK-NEXT: $x10 = COPY [[MUL]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    ;
    ; LIBCALL-LABEL: name: umulo_i64
    ; LIBCALL: liveins: $x10, $x11
    ; LIBCALL-NEXT: {{  $}}
    ; LIBCALL-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; LIBCALL-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; LIBCALL-NEXT: $x10 = COPY [[COPY]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[C]](s64)
    ; LIBCALL-NEXT: $x12 = COPY [[COPY1]](s64)
    ; LIBCALL-NEXT: $x13 = COPY [[C1]](s64)
    ; LIBCALL-NEXT: PseudoCALL target-flags(riscv-call) &__multi3, implicit-def $x1, implicit $x10, implicit $x11, implicit $x12, implicit $x13, implicit-def $x10, implicit-def $x11
    ; LIBCALL-NEXT: [[COPY2:%[0-9]+]]:_(s64) = COPY $x10
    ; LIBCALL-NEXT: [[COPY3:%[0-9]+]]:_(s64) = COPY $x11
    ; LIBCALL-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 -1
    ; LIBCALL-NEXT: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; LIBCALL-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY2]], [[C2]]
    ; LIBCALL-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY3]], [[C3]]
    ; LIBCALL-NEXT: [[C4:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; LIBCALL-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR [[COPY2]], [[AND]]
    ; LIBCALL-NEXT: [[XOR1:%[0-9]+]]:_(s64) = G_XOR [[COPY3]], [[AND1]]
    ; LIBCALL-NEXT: [[OR:%[0-9]+]]:_(s64) = G_OR [[XOR]], [[XOR1]]
    ; LIBCALL-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[OR]](s64), [[C4]]
    ; LIBCALL-NEXT: $x10 = COPY [[COPY2]](s64)
    ; LIBCALL-NEXT: $x11 = COPY [[ICMP]](s64)
    ; LIBCALL-NEXT: PseudoRET implicit $x10, implicit $x11
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64), %3:_(s1) = G_UMULO %0, %1
    %4:_(s64) = G_ANYEXT %3(s1)
    $x10 = COPY %2(s64)
    $x11 = COPY %4(s64)
    PseudoRET implicit $x10, implicit $x11

...
