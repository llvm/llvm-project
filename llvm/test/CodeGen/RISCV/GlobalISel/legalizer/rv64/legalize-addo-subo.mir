# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv64 -run-pass=legalizer %s -o - \
# RUN: | FileCheck %s

---
name:            saddo_i8
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: saddo_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[ADD]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[ADD]](s64), [[ASHR2]]
    ; CHECK-NEXT: $x10 = COPY [[ADD]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s64)
    %4:_(s8), %5:_(s1) = G_SADDO %0, %1
    %6:_(s64) = G_ANYEXT %4(s8)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            saddo_i16
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: saddo_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[ADD]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[ADD]](s64), [[ASHR2]]
    ; CHECK-NEXT: $x10 = COPY [[ADD]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s64)
    %4:_(s16), %5:_(s1) = G_SADDO %0, %1
    %6:_(s64) = G_ANYEXT %4(s16)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            saddo_i32
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: saddo_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(s64) = G_SEXT_INREG [[ADD]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[ADD]](s64), [[SEXT_INREG2]]
    ; CHECK-NEXT: $x10 = COPY [[ADD]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %3(s64)
    %4:_(s32), %5:_(s1) = G_SADDO %0, %1
    %6:_(s64) = G_ANYEXT %4(s32)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            saddo_i64
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: saddo_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[ADD]](s64), [[COPY]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[COPY1]](s64), [[C]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR [[ICMP1]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[ADD]](s64)
    ; CHECK-NEXT: $x11 = COPY [[XOR]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64), %3:_(s1) = G_SADDO %0, %1
    %4:_(s64) = G_ANYEXT %3(s1)
    $x10 = COPY %2(s64)
    $x11 = COPY %4(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            ssubo_i8
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: ssubo_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s64) = G_SUB [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 56
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[SUB]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[SUB]](s64), [[ASHR2]]
    ; CHECK-NEXT: $x10 = COPY [[SUB]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s64)
    %4:_(s8), %5:_(s1) = G_SSUBO %0, %1
    %6:_(s64) = G_ANYEXT %4(s8)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            ssubo_i16
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: ssubo_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(s64) = G_SHL [[COPY]], [[C]](s64)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(s64) = G_ASHR [[SHL]], [[C]](s64)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(s64) = G_SHL [[COPY1]], [[C1]](s64)
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(s64) = G_ASHR [[SHL1]], [[C1]](s64)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s64) = G_SUB [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(s64) = G_CONSTANT i64 48
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(s64) = G_SHL [[SUB]], [[C2]](s64)
    ; CHECK-NEXT: [[ASHR2:%[0-9]+]]:_(s64) = G_ASHR [[SHL2]], [[C2]](s64)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[SUB]](s64), [[ASHR2]]
    ; CHECK-NEXT: $x10 = COPY [[SUB]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s64)
    %4:_(s16), %5:_(s1) = G_SSUBO %0, %1
    %6:_(s64) = G_ANYEXT %4(s16)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            ssubo_i32
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: ssubo_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY]], 32
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(s64) = G_SEXT_INREG [[COPY1]], 32
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s64) = G_SUB [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(s64) = G_SEXT_INREG [[SUB]], 32
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ne), [[SUB]](s64), [[SEXT_INREG2]]
    ; CHECK-NEXT: $x10 = COPY [[SUB]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %3(s64)
    %4:_(s32), %5:_(s1) = G_SSUBO %0, %1
    %6:_(s64) = G_ANYEXT %4(s32)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            ssubo_i64
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: ssubo_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s64) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(slt), [[SUB]](s64), [[COPY]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(s64) = G_ICMP intpred(sgt), [[COPY1]](s64), [[C]]
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s64) = G_XOR [[ICMP1]], [[ICMP]]
    ; CHECK-NEXT: $x10 = COPY [[SUB]](s64)
    ; CHECK-NEXT: $x11 = COPY [[XOR]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64), %3:_(s1) = G_SSUBO %0, %1
    %4:_(s64) = G_ANYEXT %3(s1)
    $x10 = COPY %2(s64)
    $x11 = COPY %4(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            uaddo_i8
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: uaddo_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[ADD]](s32)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ANYEXT]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[ADD]](s32)
    ; CHECK-NEXT: $x10 = COPY [[ANYEXT1]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s64)
    %4:_(s8), %5:_(s1) = G_UADDO %0, %1
    %6:_(s64) = G_ANYEXT %4(s8)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            uaddo_i16
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: uaddo_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[ADD]](s32)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[ANYEXT]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s64) = G_ANYEXT [[ADD]](s32)
    ; CHECK-NEXT: $x10 = COPY [[ANYEXT1]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s64)
    %4:_(s16), %5:_(s1) = G_UADDO %0, %1
    %6:_(s64) = G_ANYEXT %4(s16)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            uaddo_i32
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: uaddo_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(s64) = G_ZEXT [[ADD]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[ZEXT]](s64), [[AND]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[ADD]](s32)
    ; CHECK-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %3(s64)
    %4:_(s32), %5:_(s1) = G_UADDO %0, %1
    %6:_(s64) = G_ANYEXT %4(s32)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            uaddo_i64
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: uaddo_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(s64) = G_ADD [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[ADD]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[ADD]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64), %3:_(s1) = G_UADDO %0, %1
    %4:_(s64) = G_ANYEXT %3(s1)
    $x10 = COPY %2(s64)
    $x11 = COPY %4(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            usubo_i8
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: usubo_i8
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 255
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SUB]](s32)
    ; CHECK-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s8) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s8) = G_TRUNC %3(s64)
    %4:_(s8), %5:_(s1) = G_USUBO %0, %1
    %6:_(s64) = G_ANYEXT %4(s8)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            usubo_i16
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: usubo_i16
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 65535
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SUB]](s32)
    ; CHECK-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s16) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s16) = G_TRUNC %3(s64)
    %4:_(s16), %5:_(s1) = G_USUBO %0, %1
    %6:_(s64) = G_ANYEXT %4(s16)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            usubo_i32
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: usubo_i32
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[COPY]](s64)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(s32) = G_TRUNC [[COPY1]](s64)
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s32) = G_SUB [[TRUNC]], [[TRUNC1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s64) = G_CONSTANT i64 4294967295
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(s64) = G_AND [[COPY1]], [[C1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[AND]](s64), [[AND1]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SUB]](s32)
    ; CHECK-NEXT: $x10 = COPY [[ANYEXT]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %2:_(s64) = COPY $x10
    %0:_(s32) = G_TRUNC %2(s64)
    %3:_(s64) = COPY $x11
    %1:_(s32) = G_TRUNC %3(s64)
    %4:_(s32), %5:_(s1) = G_USUBO %0, %1
    %6:_(s64) = G_ANYEXT %4(s32)
    %7:_(s64) = G_ANYEXT %5(s1)
    $x10 = COPY %6(s64)
    $x11 = COPY %7(s64)
    PseudoRET implicit $x10, implicit $x11

...
---
name:            usubo_i64
body:             |
  bb.1:
    liveins: $x10, $x11

    ; CHECK-LABEL: name: usubo_i64
    ; CHECK: liveins: $x10, $x11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(s64) = COPY $x10
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(s64) = COPY $x11
    ; CHECK-NEXT: [[SUB:%[0-9]+]]:_(s64) = G_SUB [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(s64) = G_ICMP intpred(ult), [[COPY]](s64), [[COPY1]]
    ; CHECK-NEXT: $x10 = COPY [[SUB]](s64)
    ; CHECK-NEXT: $x11 = COPY [[ICMP]](s64)
    ; CHECK-NEXT: PseudoRET implicit $x10, implicit $x11
    %0:_(s64) = COPY $x10
    %1:_(s64) = COPY $x11
    %2:_(s64), %3:_(s1) = G_USUBO %0, %1
    %4:_(s64) = G_ANYEXT %3(s1)
    $x10 = COPY %2(s64)
    $x11 = COPY %4(s64)
    PseudoRET implicit $x10, implicit $x11

...
