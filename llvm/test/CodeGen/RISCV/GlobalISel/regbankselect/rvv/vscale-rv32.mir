# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=riscv32 -mattr=+m,+v -run-pass=regbankselect \
# RUN:   -disable-gisel-legality-check -simplify-mir -verify-machineinstrs %s \
# RUN:   -o - | FileCheck %s

---
name:            test_1_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_1_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %1:_(s32) = G_READ_VLENB
    %2:_(s32) = G_CONSTANT i32 3
    %0:_(s32) = G_LSHR %1, %2(s32)
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_2_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_2_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %1:_(s32) = G_READ_VLENB
    %2:_(s32) = G_CONSTANT i32 2
    %0:_(s32) = G_LSHR %1, %2(s32)
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_3_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_3_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(s32) = COPY $x10
    ; CHECK-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %1:_(s32) = G_READ_VLENB
    %2:_(s32) = G_CONSTANT i32 3
    %3:_(s32) = G_LSHR %1, %2(s32)
    %4:_(s32) = G_CONSTANT i32 3
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %3(s32)
    $x11 = COPY %4(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    %0:_(s32) = COPY $x10
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_4_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_4_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %1:_(s32) = G_READ_VLENB
    %2:_(s32) = G_CONSTANT i32 1
    %0:_(s32) = G_LSHR %1, %2(s32)
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_8_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_8_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %0:_(s32) = G_READ_VLENB
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_16_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_16_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: $x10 = COPY [[SHL]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %1:_(s32) = G_READ_VLENB
    %2:_(s32) = G_CONSTANT i32 1
    %0:_(s32) = G_SHL %1, %2(s32)
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_40_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_40_s32
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(s32) = COPY $x10
    ; CHECK-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %1:_(s32) = G_READ_VLENB
    %2:_(s32) = G_CONSTANT i32 5
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %1(s32)
    $x11 = COPY %2(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    %0:_(s32) = COPY $x10
    $x10 = COPY %0(s32)
    PseudoRET implicit $x10

...
---
name:            test_1_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_1_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %6:_(s32) = G_READ_VLENB
    %7:_(s32) = G_CONSTANT i32 3
    %2:_(s32) = G_LSHR %6, %7(s32)
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            test_2_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_2_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 2
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %6:_(s32) = G_READ_VLENB
    %7:_(s32) = G_CONSTANT i32 2
    %2:_(s32) = G_LSHR %6, %7(s32)
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            test_3_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_3_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 3
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(s32) = COPY $x10
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C2:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C2]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %6:_(s32) = G_READ_VLENB
    %7:_(s32) = G_CONSTANT i32 3
    %8:_(s32) = G_LSHR %6, %7(s32)
    %9:_(s32) = G_CONSTANT i32 3
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %8(s32)
    $x11 = COPY %9(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    %2:_(s32) = COPY $x10
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            test_4_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_4_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:gprb(s32) = G_LSHR [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[LSHR]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %6:_(s32) = G_READ_VLENB
    %7:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_LSHR %6, %7(s32)
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            test_8_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_8_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %2:_(s32) = G_READ_VLENB
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            test_16_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_16_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:gprb(s32) = G_SHL [[READ_VLENB]], [[C]](s32)
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[SHL]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %6:_(s32) = G_READ_VLENB
    %7:_(s32) = G_CONSTANT i32 1
    %2:_(s32) = G_SHL %6, %7(s32)
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
---
name:            test_40_s64
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test_40_s64
    ; CHECK: [[READ_VLENB:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:gprb(s32) = COPY $x10
    ; CHECK-NEXT: [[READ_VLENB1:%[0-9]+]]:gprb(s32) = G_READ_VLENB
    ; CHECK-NEXT: [[C1:%[0-9]+]]:gprb(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[READ_VLENB1]](s32)
    ; CHECK-NEXT: $x11 = COPY [[C1]](s32)
    ; CHECK-NEXT: PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ; CHECK-NEXT: ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    ; CHECK-NEXT: $x10 = COPY [[COPY]](s32)
    ; CHECK-NEXT: PseudoRET implicit $x10
    %6:_(s32) = G_READ_VLENB
    %7:_(s32) = G_CONSTANT i32 5
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %6(s32)
    $x11 = COPY %7(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    %2:_(s32) = COPY $x10
    %4:_(s32) = G_READ_VLENB
    %5:_(s32) = G_CONSTANT i32 0
    ADJCALLSTACKDOWN 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %4(s32)
    $x11 = COPY %5(s32)
    PseudoCALL target-flags(riscv-call) &__mulsi3, csr_ilp32d_lp64d, implicit-def $x1, implicit $x10, implicit $x11, implicit-def $x10
    ADJCALLSTACKUP 0, 0, implicit-def $x2, implicit $x2
    $x10 = COPY %2(s32)
    PseudoRET implicit $x10

...
