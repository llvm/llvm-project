; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 < %s | FileCheck %s -check-prefix=RV32
; RUN: llc -mtriple=riscv64 < %s | FileCheck %s -check-prefix=RV64

; Check the PreserveMost calling convention works.

declare void @standard_cc_func()
declare preserve_mostcc void @preserve_mostcc_func()

define preserve_mostcc void @preserve_mostcc1() nounwind {
; RV32-LABEL: preserve_mostcc1:
; RV32:       # %bb.0: # %entry
; RV32-NEXT:    addi sp, sp, -64
; RV32-NEXT:    sw t0, 60(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t1, 56(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t2, 52(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a0, 48(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a1, 44(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a2, 40(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a3, 36(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a4, 32(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a5, 28(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a6, 24(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a7, 20(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t3, 16(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t4, 12(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t5, 8(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t6, 4(sp) # 4-byte Folded Spill
; RV32-NEXT:    call standard_cc_func
; RV32-NEXT:    lw t0, 60(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t1, 56(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t2, 52(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a0, 48(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a1, 44(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a2, 40(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a3, 36(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a4, 32(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a5, 28(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a6, 24(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a7, 20(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t3, 16(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t4, 12(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t5, 8(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t6, 4(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 64
; RV32-NEXT:    ret
;
; RV64-LABEL: preserve_mostcc1:
; RV64:       # %bb.0: # %entry
; RV64-NEXT:    addi sp, sp, -128
; RV64-NEXT:    sd t0, 120(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t1, 112(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t2, 104(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a0, 96(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a1, 88(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a2, 80(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a3, 72(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a4, 64(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a5, 56(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a6, 48(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a7, 40(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t3, 32(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t4, 24(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t5, 16(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t6, 8(sp) # 8-byte Folded Spill
; RV64-NEXT:    call standard_cc_func
; RV64-NEXT:    ld t0, 120(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t1, 112(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t2, 104(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a0, 96(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a1, 88(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a2, 80(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a3, 72(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a4, 64(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a5, 56(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a6, 48(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a7, 40(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t3, 32(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t4, 24(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t5, 16(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t6, 8(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 128
; RV64-NEXT:    ret
entry:
  call void @standard_cc_func()
  ret void
}

define preserve_mostcc void @preserve_mostcc2() nounwind {
; RV32-LABEL: preserve_mostcc2:
; RV32:       # %bb.0:
; RV32-NEXT:    addi sp, sp, -64
; RV32-NEXT:    sw t0, 60(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t1, 56(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t2, 52(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a0, 48(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a1, 44(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a2, 40(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a3, 36(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a4, 32(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a5, 28(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a6, 24(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw a7, 20(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t3, 16(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t4, 12(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t5, 8(sp) # 4-byte Folded Spill
; RV32-NEXT:    sw t6, 4(sp) # 4-byte Folded Spill
; RV32-NEXT:    call preserve_mostcc_func
; RV32-NEXT:    lw t0, 60(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t1, 56(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t2, 52(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a0, 48(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a1, 44(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a2, 40(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a3, 36(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a4, 32(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a5, 28(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a6, 24(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw a7, 20(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t3, 16(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t4, 12(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t5, 8(sp) # 4-byte Folded Reload
; RV32-NEXT:    lw t6, 4(sp) # 4-byte Folded Reload
; RV32-NEXT:    addi sp, sp, 64
; RV32-NEXT:    ret
;
; RV64-LABEL: preserve_mostcc2:
; RV64:       # %bb.0:
; RV64-NEXT:    addi sp, sp, -128
; RV64-NEXT:    sd t0, 120(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t1, 112(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t2, 104(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a0, 96(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a1, 88(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a2, 80(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a3, 72(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a4, 64(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a5, 56(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a6, 48(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd a7, 40(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t3, 32(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t4, 24(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t5, 16(sp) # 8-byte Folded Spill
; RV64-NEXT:    sd t6, 8(sp) # 8-byte Folded Spill
; RV64-NEXT:    call preserve_mostcc_func
; RV64-NEXT:    ld t0, 120(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t1, 112(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t2, 104(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a0, 96(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a1, 88(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a2, 80(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a3, 72(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a4, 64(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a5, 56(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a6, 48(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld a7, 40(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t3, 32(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t4, 24(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t5, 16(sp) # 8-byte Folded Reload
; RV64-NEXT:    ld t6, 8(sp) # 8-byte Folded Reload
; RV64-NEXT:    addi sp, sp, 128
; RV64-NEXT:    ret
  call preserve_mostcc void @preserve_mostcc_func()
  ret void
}
