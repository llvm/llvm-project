; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=riscv64 -mcpu=nextsilicon-gen1-ecore -mattr=+mem128ext -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=MEM-128
; RUN: llc -O0 -mtriple=riscv64 -mcpu=nextsilicon-gen1-ecore -mattr=-mem128ext -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=NO-MEM-128

define dso_local i128 @foo(i128 noundef %a, i128 noundef %b) #0 {
; MEM-128-LABEL: foo:
; MEM-128:       # %bb.0: # %entry
; MEM-128-NEXT:    addi sp, sp, -48
; MEM-128-NEXT:    .cfi_def_cfa_offset 48
; MEM-128-NEXT:    mv a4, a1
; MEM-128-NEXT:    mv a1, a0
; MEM-128-NEXT:    # kill: def $x10 killed $x13
; MEM-128-NEXT:    # kill: def $x10 killed $x12
; MEM-128-NEXT:    # kill: def $x10 killed $x14
; MEM-128-NEXT:    # kill: def $x10 killed $x11
; MEM-128-NEXT:    addi a0, sp, 32
; MEM-128-NEXT:    sq a1, a4, a0
; MEM-128-NEXT:    addi a1, sp, 16
; MEM-128-NEXT:    sq a2, a3, a1
; MEM-128-NEXT:    lq a2, a0, a0
; MEM-128-NEXT:    lq a1, a3, a1
; MEM-128-NEXT:    add a0, a0, a3
; MEM-128-NEXT:    add a1, a1, a2
; MEM-128-NEXT:    sltu a2, a1, a2
; MEM-128-NEXT:    add a2, a2, a0
; MEM-128-NEXT:    mv a0, sp
; MEM-128-NEXT:    sq a1, a2, a0
; MEM-128-NEXT:    lq a0, a1, a0
; MEM-128-NEXT:    addi sp, sp, 48
; MEM-128-NEXT:    ret
;
; NO-MEM-128-LABEL: foo:
; NO-MEM-128:       # %bb.0: # %entry
; NO-MEM-128-NEXT:    addi sp, sp, -48
; NO-MEM-128-NEXT:    .cfi_def_cfa_offset 48
; NO-MEM-128-NEXT:    # kill: def $x14 killed $x13
; NO-MEM-128-NEXT:    # kill: def $x14 killed $x12
; NO-MEM-128-NEXT:    # kill: def $x14 killed $x11
; NO-MEM-128-NEXT:    # kill: def $x14 killed $x10
; NO-MEM-128-NEXT:    sd a1, 40(sp)
; NO-MEM-128-NEXT:    sd a0, 32(sp)
; NO-MEM-128-NEXT:    sd a3, 24(sp)
; NO-MEM-128-NEXT:    sd a2, 16(sp)
; NO-MEM-128-NEXT:    ld a2, 32(sp)
; NO-MEM-128-NEXT:    ld a0, 40(sp)
; NO-MEM-128-NEXT:    ld a1, 16(sp)
; NO-MEM-128-NEXT:    ld a3, 24(sp)
; NO-MEM-128-NEXT:    add a0, a0, a3
; NO-MEM-128-NEXT:    add a1, a1, a2
; NO-MEM-128-NEXT:    sltu a2, a1, a2
; NO-MEM-128-NEXT:    add a0, a0, a2
; NO-MEM-128-NEXT:    sd a1, 0(sp)
; NO-MEM-128-NEXT:    sd a0, 8(sp)
; NO-MEM-128-NEXT:    ld a0, 0(sp)
; NO-MEM-128-NEXT:    ld a1, 8(sp)
; NO-MEM-128-NEXT:    addi sp, sp, 48
; NO-MEM-128-NEXT:    ret
entry:
  %a.addr = alloca i128, align 16
  %b.addr = alloca i128, align 16
  %c = alloca i128, align 16
  store i128 %a, ptr %a.addr, align 16
  store i128 %b, ptr %b.addr, align 16
  %0 = load i128, ptr %a.addr, align 16
  %1 = load i128, ptr %b.addr, align 16
  %add = add nsw i128 %0, %1
  store i128 %add, ptr %c, align 16
  %2 = load i128, ptr %c, align 16
  ret i128 %2
}
