; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=riscv64-- -mattr=+m,+v,+f | FileCheck %s -check-prefix=RISCV

define void @test_masked_store_success(<8 x i32> %x, ptr %ptr, <8 x i1> %mask) {
; RISCV-LABEL: test_masked_store_success:
; RISCV:       # %bb.0:
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vse32.v v8, (a0), v0.t
; RISCV-NEXT:    ret
  %load = load <8 x i32>, ptr %ptr, align 32
  %sel = select <8 x i1> %mask, <8 x i32> %x, <8 x i32> %load
  store <8 x i32> %sel, ptr %ptr, align 32
  ret void
}

define void @test_masked_store_volatile_load(<8 x i32> %x, ptr %ptr, <8 x i1> %mask) {
; RISCV-LABEL: test_masked_store_volatile_load:
; RISCV:       # %bb.0:
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vle32.v v10, (a0)
; RISCV-NEXT:    vmerge.vvm v8, v10, v8, v0
; RISCV-NEXT:    vse32.v v8, (a0)
; RISCV-NEXT:    ret
  %load = load volatile <8 x i32>, ptr %ptr, align 32
  %sel = select <8 x i1> %mask, <8 x i32> %x, <8 x i32> %load
  store <8 x i32> %sel, ptr %ptr, align 32
  ret void
}

define void @test_masked_store_volatile_store(<8 x i32> %x, ptr %ptr, <8 x i1> %mask) {
; RISCV-LABEL: test_masked_store_volatile_store:
; RISCV:       # %bb.0:
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vle32.v v10, (a0)
; RISCV-NEXT:    vmerge.vvm v8, v10, v8, v0
; RISCV-NEXT:    vse32.v v8, (a0)
; RISCV-NEXT:    ret
  %load = load <8 x i32>, ptr %ptr, align 32
  %sel = select <8 x i1> %mask, <8 x i32> %x, <8 x i32> %load
  store volatile <8 x i32> %sel, ptr %ptr, align 32
  ret void
}

declare void @use_vec(<8 x i32>)

define void @test_masked_store_intervening(<8 x i32> %x, ptr %ptr, <8 x i1> %mask) {
; RISCV-LABEL: test_masked_store_intervening:
; RISCV:       # %bb.0:
; RISCV-NEXT:    addi sp, sp, -32
; RISCV-NEXT:    .cfi_def_cfa_offset 32
; RISCV-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RISCV-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RISCV-NEXT:    .cfi_offset ra, -8
; RISCV-NEXT:    .cfi_offset s0, -16
; RISCV-NEXT:    csrr a1, vlenb
; RISCV-NEXT:    slli a2, a1, 2
; RISCV-NEXT:    add a1, a2, a1
; RISCV-NEXT:    sub sp, sp, a1
; RISCV-NEXT:    .cfi_escape 0x0f, 0x0d, 0x72, 0x00, 0x11, 0x20, 0x22, 0x11, 0x05, 0x92, 0xa2, 0x38, 0x00, 0x1e, 0x22 # sp + 32 + 5 * vlenb
; RISCV-NEXT:    csrr a1, vlenb
; RISCV-NEXT:    slli a1, a1, 2
; RISCV-NEXT:    add a1, sp, a1
; RISCV-NEXT:    addi a1, a1, 16
; RISCV-NEXT:    vs1r.v v0, (a1) # vscale x 8-byte Folded Spill
; RISCV-NEXT:    mv s0, a0
; RISCV-NEXT:    csrr a1, vlenb
; RISCV-NEXT:    slli a1, a1, 1
; RISCV-NEXT:    add a1, sp, a1
; RISCV-NEXT:    addi a1, a1, 16
; RISCV-NEXT:    vs2r.v v8, (a1) # vscale x 16-byte Folded Spill
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vle32.v v8, (a0)
; RISCV-NEXT:    addi a1, sp, 16
; RISCV-NEXT:    vs2r.v v8, (a1) # vscale x 16-byte Folded Spill
; RISCV-NEXT:    vmv.v.i v8, 0
; RISCV-NEXT:    vse32.v v8, (a0)
; RISCV-NEXT:    call use_vec
; RISCV-NEXT:    csrr a0, vlenb
; RISCV-NEXT:    slli a0, a0, 2
; RISCV-NEXT:    add a0, sp, a0
; RISCV-NEXT:    addi a0, a0, 16
; RISCV-NEXT:    vl1r.v v0, (a0) # vscale x 8-byte Folded Reload
; RISCV-NEXT:    csrr a0, vlenb
; RISCV-NEXT:    slli a0, a0, 1
; RISCV-NEXT:    add a0, sp, a0
; RISCV-NEXT:    addi a0, a0, 16
; RISCV-NEXT:    vl2r.v v8, (a0) # vscale x 16-byte Folded Reload
; RISCV-NEXT:    addi a0, sp, 16
; RISCV-NEXT:    vl2r.v v10, (a0) # vscale x 16-byte Folded Reload
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vmerge.vvm v8, v10, v8, v0
; RISCV-NEXT:    vse32.v v8, (s0)
; RISCV-NEXT:    csrr a0, vlenb
; RISCV-NEXT:    slli a1, a0, 2
; RISCV-NEXT:    add a0, a1, a0
; RISCV-NEXT:    add sp, sp, a0
; RISCV-NEXT:    .cfi_def_cfa sp, 32
; RISCV-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RISCV-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RISCV-NEXT:    .cfi_restore ra
; RISCV-NEXT:    .cfi_restore s0
; RISCV-NEXT:    addi sp, sp, 32
; RISCV-NEXT:    .cfi_def_cfa_offset 0
; RISCV-NEXT:    ret
  %load = load <8 x i32>, ptr %ptr, align 32
  store <8 x i32> zeroinitializer, ptr %ptr, align 32
  %tmp = load <8 x i32>, ptr %ptr
  call void @use_vec(<8 x i32> %tmp)
  %sel = select <8 x i1> %mask, <8 x i32> %x, <8 x i32> %load
  store <8 x i32> %sel, ptr %ptr, align 32
  ret void
}


define void @test_masked_store_multiple(<8 x i32> %x, <8 x i32> %y, ptr %ptr1, ptr %ptr2, <8 x i1> %mask, <8 x i1> %mask2) {
; RISCV-LABEL: test_masked_store_multiple:
; RISCV:       # %bb.0:
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vmv1r.v v13, v0
; RISCV-NEXT:    vle32.v v14, (a1)
; RISCV-NEXT:    vmv1r.v v0, v12
; RISCV-NEXT:    vmerge.vvm v10, v14, v10, v0
; RISCV-NEXT:    vmv1r.v v0, v13
; RISCV-NEXT:    vse32.v v8, (a0), v0.t
; RISCV-NEXT:    vse32.v v10, (a1)
; RISCV-NEXT:    ret
  %load = load <8 x i32>, ptr %ptr1, align 32
  %load2 = load <8 x i32>, ptr %ptr2, align 32
  %sel = select <8 x i1> %mask, <8 x i32> %x, <8 x i32> %load
  %sel2 = select <8 x i1> %mask2, <8 x i32> %y, <8 x i32> %load2
  store <8 x i32> %sel, ptr %ptr1, align 32
  store <8 x i32> %sel2, ptr %ptr2, align 32
  ret void
}

define void @test_masked_store_unaligned(<8 x i32> %data, ptr %ptr, <8 x i1> %mask) {
; RISCV-LABEL: test_masked_store_unaligned:
; RISCV:       # %bb.0:
; RISCV-NEXT:    li a1, 32
; RISCV-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; RISCV-NEXT:    vle8.v v10, (a0)
; RISCV-NEXT:    vsetivli zero, 8, e32, m2, ta, ma
; RISCV-NEXT:    vmerge.vvm v8, v10, v8, v0
; RISCV-NEXT:    vsetvli zero, a1, e8, m2, ta, ma
; RISCV-NEXT:    vse8.v v8, (a0)
; RISCV-NEXT:    ret
  %ptr_i8 = getelementptr i8, ptr %ptr, i32 1
  %ptr_vec = bitcast ptr %ptr_i8 to ptr
  %load = load <8 x i32>, ptr %ptr, align 1
  %sel = select <8 x i1> %mask, <8 x i32> %data, <8 x i32> %load
  store <8 x i32> %sel, ptr %ptr, align 1
  ret void
}
