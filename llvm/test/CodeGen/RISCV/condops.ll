; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+xventanacondops < %s | FileCheck %s -check-prefix=RV64XVENTANACONDOPS
; RUN: llc -mtriple=riscv64 -mattr=+xtheadcondmov < %s | FileCheck %s -check-prefix=RV64XTHEADCONDMOV
; RUN: llc -mtriple=riscv32 -mattr=+experimental-zicond < %s | FileCheck %s -check-prefixes=RV32ZICOND
; RUN: llc -mtriple=riscv64 -mattr=+experimental-zicond < %s | FileCheck %s -check-prefixes=RV64ZICOND

define i64 @zero1(i64 %rs1, i1 zeroext %rc) {
; RV64XVENTANACONDOPS-LABEL: zero1:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a0, zero, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a0, a0, a2
; RV32ZICOND-NEXT:    czero.eqz a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2(i64 %rs1, i1 zeroext %rc) {
; RV64XVENTANACONDOPS-LABEL: zero2:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a0, zero, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a0, a0, a2
; RV32ZICOND-NEXT:    czero.nez a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @add1(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: add1:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    add a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: add1:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    add a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: add1:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    add a4, a2, a4
; RV32ZICOND-NEXT:    add a3, a1, a3
; RV32ZICOND-NEXT:    sltu a5, a3, a1
; RV32ZICOND-NEXT:    add a4, a4, a5
; RV32ZICOND-NEXT:    czero.nez a1, a1, a0
; RV32ZICOND-NEXT:    czero.eqz a3, a3, a0
; RV32ZICOND-NEXT:    or a3, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a4, a0
; RV32ZICOND-NEXT:    czero.nez a0, a2, a0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: add1:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    add a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %add = add i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %add, i64 %rs1
  ret i64 %sel
}

define i64 @add2(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: add2:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    add a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: add2:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    add a0, a2, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: add2:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    add a2, a2, a4
; RV32ZICOND-NEXT:    add a5, a1, a3
; RV32ZICOND-NEXT:    sltu a1, a5, a1
; RV32ZICOND-NEXT:    add a1, a2, a1
; RV32ZICOND-NEXT:    czero.nez a2, a3, a0
; RV32ZICOND-NEXT:    czero.eqz a3, a5, a0
; RV32ZICOND-NEXT:    or a2, a3, a2
; RV32ZICOND-NEXT:    czero.eqz a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a4, a0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    mv a0, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: add2:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    add a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %add = add i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %add, i64 %rs2
  ret i64 %sel
}

define i64 @add3(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: add3:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    add a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: add3:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    add a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: add3:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    add a4, a2, a4
; RV32ZICOND-NEXT:    add a3, a1, a3
; RV32ZICOND-NEXT:    sltu a5, a3, a1
; RV32ZICOND-NEXT:    add a4, a4, a5
; RV32ZICOND-NEXT:    czero.eqz a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a3, a3, a0
; RV32ZICOND-NEXT:    or a3, a1, a3
; RV32ZICOND-NEXT:    czero.nez a1, a4, a0
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: add3:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    add a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %add = add i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs1, i64 %add
  ret i64 %sel
}

define i64 @add4(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: add4:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    add a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: add4:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    add a0, a2, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: add4:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    add a2, a2, a4
; RV32ZICOND-NEXT:    add a5, a1, a3
; RV32ZICOND-NEXT:    sltu a1, a5, a1
; RV32ZICOND-NEXT:    add a1, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a3, a0
; RV32ZICOND-NEXT:    czero.nez a3, a5, a0
; RV32ZICOND-NEXT:    or a2, a2, a3
; RV32ZICOND-NEXT:    czero.nez a1, a1, a0
; RV32ZICOND-NEXT:    czero.eqz a0, a4, a0
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    mv a0, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: add4:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    add a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %add = add i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs2, i64 %add
  ret i64 %sel
}

define i64 @sub1(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: sub1:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    sub a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: sub1:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    sub a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: sub1:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    sltu a5, a1, a3
; RV32ZICOND-NEXT:    sub a4, a2, a4
; RV32ZICOND-NEXT:    sub a4, a4, a5
; RV32ZICOND-NEXT:    czero.eqz a4, a4, a0
; RV32ZICOND-NEXT:    czero.nez a2, a2, a0
; RV32ZICOND-NEXT:    or a2, a4, a2
; RV32ZICOND-NEXT:    czero.eqz a0, a3, a0
; RV32ZICOND-NEXT:    sub a0, a1, a0
; RV32ZICOND-NEXT:    mv a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: sub1:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    sub a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %sub = sub i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %sub, i64 %rs1
  ret i64 %sel
}

define i64 @sub2(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: sub2:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    sub a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: sub2:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    sub a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: sub2:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    sltu a5, a1, a3
; RV32ZICOND-NEXT:    sub a4, a2, a4
; RV32ZICOND-NEXT:    sub a4, a4, a5
; RV32ZICOND-NEXT:    czero.nez a4, a4, a0
; RV32ZICOND-NEXT:    czero.eqz a2, a2, a0
; RV32ZICOND-NEXT:    or a2, a2, a4
; RV32ZICOND-NEXT:    czero.nez a0, a3, a0
; RV32ZICOND-NEXT:    sub a0, a1, a0
; RV32ZICOND-NEXT:    mv a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: sub2:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    sub a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %sub = sub i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs1, i64 %sub
  ret i64 %sel
}

define i64 @or1(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: or1:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: or1:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    or a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: or1:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a3, a3, a0
; RV32ZICOND-NEXT:    or a3, a1, a3
; RV32ZICOND-NEXT:    czero.eqz a1, a4, a0
; RV32ZICOND-NEXT:    or a1, a2, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: or1:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %or = or i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %or, i64 %rs1
  ret i64 %sel
}

define i64 @or2(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: or2:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: or2:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    or a0, a2, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: or2:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a1, a1, a0
; RV32ZICOND-NEXT:    or a3, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a2, a0
; RV32ZICOND-NEXT:    or a1, a4, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: or2:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    or a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %or = or i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %or, i64 %rs2
  ret i64 %sel
}

define i64 @or3(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: or3:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: or3:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    or a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: or3:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a3, a3, a0
; RV32ZICOND-NEXT:    or a3, a1, a3
; RV32ZICOND-NEXT:    czero.nez a1, a4, a0
; RV32ZICOND-NEXT:    or a1, a2, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: or3:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %or = or i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs1, i64 %or
  ret i64 %sel
}

define i64 @or4(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: or4:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: or4:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    or a0, a2, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: or4:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a1, a1, a0
; RV32ZICOND-NEXT:    or a3, a3, a1
; RV32ZICOND-NEXT:    czero.nez a1, a2, a0
; RV32ZICOND-NEXT:    or a1, a4, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: or4:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    or a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %or = or i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs2, i64 %or
  ret i64 %sel
}

define i64 @xor1(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: xor1:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    xor a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: xor1:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    xor a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: xor1:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a3, a3, a0
; RV32ZICOND-NEXT:    xor a3, a1, a3
; RV32ZICOND-NEXT:    czero.eqz a1, a4, a0
; RV32ZICOND-NEXT:    xor a1, a2, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: xor1:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    xor a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %xor = xor i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %xor, i64 %rs1
  ret i64 %sel
}

define i64 @xor2(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: xor2:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    xor a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: xor2:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    xor a0, a2, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: xor2:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a1, a1, a0
; RV32ZICOND-NEXT:    xor a3, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a2, a0
; RV32ZICOND-NEXT:    xor a1, a4, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: xor2:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    xor a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %xor = xor i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %xor, i64 %rs2
  ret i64 %sel
}

define i64 @xor3(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: xor3:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    xor a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: xor3:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    xor a0, a1, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: xor3:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a3, a3, a0
; RV32ZICOND-NEXT:    xor a3, a1, a3
; RV32ZICOND-NEXT:    czero.nez a1, a4, a0
; RV32ZICOND-NEXT:    xor a1, a2, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: xor3:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    xor a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %xor = xor i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs1, i64 %xor
  ret i64 %sel
}

define i64 @xor4(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: xor4:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    xor a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: xor4:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    xor a0, a2, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: xor4:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a1, a1, a0
; RV32ZICOND-NEXT:    xor a3, a3, a1
; RV32ZICOND-NEXT:    czero.nez a1, a2, a0
; RV32ZICOND-NEXT:    xor a1, a4, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: xor4:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    xor a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %xor = xor i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs2, i64 %xor
  ret i64 %sel
}

define i64 @and1(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: and1:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    and a1, a1, a2
; RV64XVENTANACONDOPS-NEXT:    or a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: and1:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    and a2, a1, a2
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, a1, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: and1:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a5, a1, a0
; RV32ZICOND-NEXT:    and a1, a1, a3
; RV32ZICOND-NEXT:    or a3, a1, a5
; RV32ZICOND-NEXT:    czero.nez a0, a2, a0
; RV32ZICOND-NEXT:    and a1, a2, a4
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: and1:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    and a1, a1, a2
; RV64ZICOND-NEXT:    or a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %and = and i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %and, i64 %rs1
  ret i64 %sel
}

define i64 @and2(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: and2:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    and a1, a2, a1
; RV64XVENTANACONDOPS-NEXT:    or a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: and2:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    and a1, a1, a2
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: and2:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a5, a3, a0
; RV32ZICOND-NEXT:    and a1, a3, a1
; RV32ZICOND-NEXT:    or a3, a1, a5
; RV32ZICOND-NEXT:    czero.nez a0, a4, a0
; RV32ZICOND-NEXT:    and a1, a4, a2
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: and2:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    and a1, a2, a1
; RV64ZICOND-NEXT:    or a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %and = and i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %and, i64 %rs2
  ret i64 %sel
}

define i64 @and3(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: and3:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    and a1, a1, a2
; RV64XVENTANACONDOPS-NEXT:    or a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: and3:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    and a2, a1, a2
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, a1, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: and3:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a5, a1, a0
; RV32ZICOND-NEXT:    and a1, a1, a3
; RV32ZICOND-NEXT:    or a3, a1, a5
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV32ZICOND-NEXT:    and a1, a2, a4
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: and3:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    and a1, a1, a2
; RV64ZICOND-NEXT:    or a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %and = and i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs1, i64 %and
  ret i64 %sel
}

define i64 @and4(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: and4:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    and a1, a2, a1
; RV64XVENTANACONDOPS-NEXT:    or a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: and4:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    and a1, a1, a2
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: and4:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.eqz a5, a3, a0
; RV32ZICOND-NEXT:    and a1, a3, a1
; RV32ZICOND-NEXT:    or a3, a1, a5
; RV32ZICOND-NEXT:    czero.eqz a0, a4, a0
; RV32ZICOND-NEXT:    and a1, a4, a2
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: and4:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    and a1, a2, a1
; RV64ZICOND-NEXT:    or a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %and = and i64 %rs1, %rs2
  %sel = select i1 %rc, i64 %rs2, i64 %and
  ret i64 %sel
}

define i64 @basic(i1 zeroext %rc, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: basic:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a2, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a2
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: basic:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: basic:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    czero.nez a3, a3, a0
; RV32ZICOND-NEXT:    czero.eqz a1, a1, a0
; RV32ZICOND-NEXT:    or a3, a1, a3
; RV32ZICOND-NEXT:    czero.nez a1, a4, a0
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    mv a0, a3
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: basic:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a2, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    or a0, a0, a2
; RV64ZICOND-NEXT:    ret
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @seteq(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: seteq:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xor a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a3, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: seteq:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xor a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: seteq:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor a1, a1, a3
; RV32ZICOND-NEXT:    xor a0, a0, a2
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a6, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a7, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: seteq:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xor a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a1, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a3, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setne(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setne:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xor a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a3, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setne:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xor a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setne:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor a1, a1, a3
; RV32ZICOND-NEXT:    xor a0, a0, a2
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a6, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a7, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setne:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xor a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a1, a3, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setgt(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setgt:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    slt a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a3, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setgt:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    slt a0, a1, a0
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setgt:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    slt a1, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a6, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a7, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setgt:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    slt a0, a1, a0
; RV64ZICOND-NEXT:    czero.nez a1, a3, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp sgt i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setge(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setge:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    slt a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a3, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setge:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    slt a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setge:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a0, a2
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    slt a1, a1, a3
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a6, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a7, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setge:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    slt a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a1, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a3, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp sge i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setlt(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setlt:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    slt a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a3, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setlt:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    slt a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setlt:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a0, a2
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    slt a1, a1, a3
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a6, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a7, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setlt:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    slt a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a1, a3, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp slt i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setle(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setle:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    slt a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a3, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setle:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    slt a0, a1, a0
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setle:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    slt a1, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a6, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a7, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setle:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    slt a0, a1, a0
; RV64ZICOND-NEXT:    czero.nez a1, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a3, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp sle i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setugt(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setugt:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    sltu a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a3, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setugt:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    sltu a0, a1, a0
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setugt:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    sltu a1, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a6, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a7, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setugt:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    sltu a0, a1, a0
; RV64ZICOND-NEXT:    czero.nez a1, a3, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp ugt i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setuge(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setuge:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    sltu a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a3, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setuge:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    sltu a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setuge:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a0, a2
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    sltu a1, a1, a3
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a6, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a7, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setuge:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    sltu a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a1, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a3, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp uge i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setult(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setult:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    sltu a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a3, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setult:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    sltu a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setult:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a0, a2
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    sltu a1, a1, a3
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a6, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a7, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setult:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    sltu a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a1, a3, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp ult i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setule(i64 %a, i64 %b, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setule:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    sltu a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a3, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setule:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    sltu a0, a1, a0
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, a3, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setule:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor t0, a1, a3
; RV32ZICOND-NEXT:    sltu a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a0, a0, t0
; RV32ZICOND-NEXT:    sltu a1, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a1, t0
; RV32ZICOND-NEXT:    or a1, a1, a0
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a6, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a7, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setule:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    sltu a0, a1, a0
; RV64ZICOND-NEXT:    czero.nez a1, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a3, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp ule i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @seteq_zero(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: seteq_zero:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: seteq_zero:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: seteq_zero:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: seteq_zero:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a1, a1, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, 0
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setne_zero(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setne_zero:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a2, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a2
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setne_zero:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setne_zero:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a2, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setne_zero:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a2, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    or a0, a0, a2
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, 0
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @seteq_constant(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: seteq_constant:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, -123
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: seteq_constant:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, -123
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: seteq_constant:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xori a0, a0, 123
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: seteq_constant:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, -123
; RV64ZICOND-NEXT:    czero.nez a1, a1, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, 123
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setne_constant(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setne_constant:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, -456
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a2, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a2
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setne_constant:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, -456
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setne_constant:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xori a0, a0, 456
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a2, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setne_constant:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, -456
; RV64ZICOND-NEXT:    czero.nez a2, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    or a0, a0, a2
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, 456
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @seteq_2048(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: seteq_2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: seteq_2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: seteq_2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    li a6, 1
; RV32ZICOND-NEXT:    slli a6, a6, 11
; RV32ZICOND-NEXT:    xor a0, a0, a6
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: seteq_2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, -2048
; RV64ZICOND-NEXT:    czero.nez a1, a1, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, 2048
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @seteq_neg2048(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: seteq_neg2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xori a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a1, a1, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: seteq_neg2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xori a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: seteq_neg2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -2048
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a4, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a3, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: seteq_neg2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xori a0, a0, -2048
; RV64ZICOND-NEXT:    czero.nez a1, a1, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    or a0, a0, a1
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, -2048
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @setne_neg2048(i64 %a, i64 %rs1, i64 %rs2) {
; RV64XVENTANACONDOPS-LABEL: setne_neg2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xori a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a2, a2, a0
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    or a0, a0, a2
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: setne_neg2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xori a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, a2, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: setne_neg2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -2048
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a2, a2, a1
; RV32ZICOND-NEXT:    or a0, a2, a0
; RV32ZICOND-NEXT:    czero.nez a2, a5, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    or a1, a1, a2
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: setne_neg2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xori a0, a0, -2048
; RV64ZICOND-NEXT:    czero.nez a2, a2, a0
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    or a0, a0, a2
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, -2048
  %sel = select i1 %rc, i64 %rs1, i64 %rs2
  ret i64 %sel
}

define i64 @zero1_seteq(i64 %a, i64 %b, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_seteq:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xor a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_seteq:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xor a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_seteq:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor a1, a1, a3
; RV32ZICOND-NEXT:    xor a0, a0, a2
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.nez a1, a5, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_seteq:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xor a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_seteq(i64 %a, i64 %b, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_seteq:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xor a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_seteq:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xor a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_seteq:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor a1, a1, a3
; RV32ZICOND-NEXT:    xor a0, a0, a2
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_seteq:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xor a0, a0, a1
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, %b
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_setne(i64 %a, i64 %b, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_setne:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xor a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_setne:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xor a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_setne:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor a1, a1, a3
; RV32ZICOND-NEXT:    xor a0, a0, a2
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a4, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a5, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_setne:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xor a0, a0, a1
; RV64ZICOND-NEXT:    czero.eqz a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, %b
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_setne(i64 %a, i64 %b, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_setne:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xor a0, a0, a1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a2, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_setne:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xor a0, a0, a1
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a2, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a2
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_setne:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xor a1, a1, a3
; RV32ZICOND-NEXT:    xor a0, a0, a2
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a4, a1
; RV32ZICOND-NEXT:    czero.nez a1, a5, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_setne:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xor a0, a0, a1
; RV64ZICOND-NEXT:    czero.nez a0, a2, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, %b
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_seteq_zero(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_seteq_zero:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_seteq_zero:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_seteq_zero:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.nez a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_seteq_zero:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, 0
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_seteq_zero(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_seteq_zero:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_seteq_zero:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_seteq_zero:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_seteq_zero:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, 0
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_setne_zero(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_setne_zero:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_setne_zero:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_setne_zero:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_setne_zero:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, 0
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_setne_zero(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_setne_zero:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_setne_zero:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_setne_zero:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.nez a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_setne_zero:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, 0
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_seteq_constant(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_seteq_constant:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, 231
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_seteq_constant:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, 231
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_seteq_constant:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -231
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.nez a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_seteq_constant:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, 231
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, -231
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_seteq_constant(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_seteq_constant:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, -546
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_seteq_constant:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, -546
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_seteq_constant:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xori a0, a0, 546
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_seteq_constant:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, -546
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, 546
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_setne_constant(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_setne_constant:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, -321
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_setne_constant:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, -321
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_setne_constant:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    xori a0, a0, 321
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_setne_constant:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, -321
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, 321
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_setne_constant(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_setne_constant:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    addi a0, a0, 654
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_setne_constant:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    addi a0, a0, 654
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_setne_constant:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -654
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.nez a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_setne_constant:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    addi a0, a0, 654
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, -654
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_seteq_neg2048(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_seteq_neg2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xori a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_seteq_neg2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xori a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_seteq_neg2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -2048
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.nez a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_seteq_neg2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xori a0, a0, -2048
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, -2048
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_seteq_neg2048(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_seteq_neg2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xori a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_seteq_neg2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xori a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_seteq_neg2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -2048
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_seteq_neg2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xori a0, a0, -2048
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp eq i64 %a, -2048
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

define i64 @zero1_setne_neg2048(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero1_setne_neg2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xori a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskc a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero1_setne_neg2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xori a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mveqz a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero1_setne_neg2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -2048
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.eqz a0, a2, a1
; RV32ZICOND-NEXT:    czero.eqz a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero1_setne_neg2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xori a0, a0, -2048
; RV64ZICOND-NEXT:    czero.eqz a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, -2048
  %sel = select i1 %rc, i64 %rs1, i64 0
  ret i64 %sel
}

define i64 @zero2_setne_neg2048(i64 %a, i64 %rs1) {
; RV64XVENTANACONDOPS-LABEL: zero2_setne_neg2048:
; RV64XVENTANACONDOPS:       # %bb.0:
; RV64XVENTANACONDOPS-NEXT:    xori a0, a0, -2048
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn a0, a1, a0
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: zero2_setne_neg2048:
; RV64XTHEADCONDMOV:       # %bb.0:
; RV64XTHEADCONDMOV-NEXT:    xori a0, a0, -2048
; RV64XTHEADCONDMOV-NEXT:    th.mvnez a1, zero, a0
; RV64XTHEADCONDMOV-NEXT:    mv a0, a1
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: zero2_setne_neg2048:
; RV32ZICOND:       # %bb.0:
; RV32ZICOND-NEXT:    not a1, a1
; RV32ZICOND-NEXT:    xori a0, a0, -2048
; RV32ZICOND-NEXT:    or a1, a0, a1
; RV32ZICOND-NEXT:    czero.nez a0, a2, a1
; RV32ZICOND-NEXT:    czero.nez a1, a3, a1
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: zero2_setne_neg2048:
; RV64ZICOND:       # %bb.0:
; RV64ZICOND-NEXT:    xori a0, a0, -2048
; RV64ZICOND-NEXT:    czero.nez a0, a1, a0
; RV64ZICOND-NEXT:    ret
  %rc = icmp ne i64 %a, -2048
  %sel = select i1 %rc, i64 0, i64 %rs1
  ret i64 %sel
}

; Test that we are able to convert the sext.w int he loop to mv.
define void @sextw_removal_maskc(i1 %c, i32 signext %arg, i32 signext %arg1) nounwind {
; RV64XVENTANACONDOPS-LABEL: sextw_removal_maskc:
; RV64XVENTANACONDOPS:       # %bb.0: # %bb
; RV64XVENTANACONDOPS-NEXT:    addi sp, sp, -32
; RV64XVENTANACONDOPS-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64XVENTANACONDOPS-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64XVENTANACONDOPS-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64XVENTANACONDOPS-NEXT:    mv s0, a2
; RV64XVENTANACONDOPS-NEXT:    andi a0, a0, 1
; RV64XVENTANACONDOPS-NEXT:    vt.maskc s1, a1, a0
; RV64XVENTANACONDOPS-NEXT:  .LBB54_1: # %bb2
; RV64XVENTANACONDOPS-NEXT:    # =>This Inner Loop Header: Depth=1
; RV64XVENTANACONDOPS-NEXT:    mv a0, s1
; RV64XVENTANACONDOPS-NEXT:    call bar@plt
; RV64XVENTANACONDOPS-NEXT:    sllw s1, s1, s0
; RV64XVENTANACONDOPS-NEXT:    bnez a0, .LBB54_1
; RV64XVENTANACONDOPS-NEXT:  # %bb.2: # %bb7
; RV64XVENTANACONDOPS-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64XVENTANACONDOPS-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64XVENTANACONDOPS-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64XVENTANACONDOPS-NEXT:    addi sp, sp, 32
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: sextw_removal_maskc:
; RV64XTHEADCONDMOV:       # %bb.0: # %bb
; RV64XTHEADCONDMOV-NEXT:    addi sp, sp, -32
; RV64XTHEADCONDMOV-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64XTHEADCONDMOV-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64XTHEADCONDMOV-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64XTHEADCONDMOV-NEXT:    mv s0, a2
; RV64XTHEADCONDMOV-NEXT:    mv s1, a1
; RV64XTHEADCONDMOV-NEXT:    andi a0, a0, 1
; RV64XTHEADCONDMOV-NEXT:    th.mveqz s1, zero, a0
; RV64XTHEADCONDMOV-NEXT:  .LBB54_1: # %bb2
; RV64XTHEADCONDMOV-NEXT:    # =>This Inner Loop Header: Depth=1
; RV64XTHEADCONDMOV-NEXT:    sext.w a0, s1
; RV64XTHEADCONDMOV-NEXT:    call bar@plt
; RV64XTHEADCONDMOV-NEXT:    sllw s1, s1, s0
; RV64XTHEADCONDMOV-NEXT:    bnez a0, .LBB54_1
; RV64XTHEADCONDMOV-NEXT:  # %bb.2: # %bb7
; RV64XTHEADCONDMOV-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64XTHEADCONDMOV-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64XTHEADCONDMOV-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64XTHEADCONDMOV-NEXT:    addi sp, sp, 32
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: sextw_removal_maskc:
; RV32ZICOND:       # %bb.0: # %bb
; RV32ZICOND-NEXT:    addi sp, sp, -16
; RV32ZICOND-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32ZICOND-NEXT:    sw s0, 8(sp) # 4-byte Folded Spill
; RV32ZICOND-NEXT:    sw s1, 4(sp) # 4-byte Folded Spill
; RV32ZICOND-NEXT:    mv s0, a2
; RV32ZICOND-NEXT:    andi a0, a0, 1
; RV32ZICOND-NEXT:    czero.eqz s1, a1, a0
; RV32ZICOND-NEXT:  .LBB54_1: # %bb2
; RV32ZICOND-NEXT:    # =>This Inner Loop Header: Depth=1
; RV32ZICOND-NEXT:    mv a0, s1
; RV32ZICOND-NEXT:    call bar@plt
; RV32ZICOND-NEXT:    sll s1, s1, s0
; RV32ZICOND-NEXT:    bnez a0, .LBB54_1
; RV32ZICOND-NEXT:  # %bb.2: # %bb7
; RV32ZICOND-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32ZICOND-NEXT:    lw s0, 8(sp) # 4-byte Folded Reload
; RV32ZICOND-NEXT:    lw s1, 4(sp) # 4-byte Folded Reload
; RV32ZICOND-NEXT:    addi sp, sp, 16
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: sextw_removal_maskc:
; RV64ZICOND:       # %bb.0: # %bb
; RV64ZICOND-NEXT:    addi sp, sp, -32
; RV64ZICOND-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64ZICOND-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64ZICOND-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64ZICOND-NEXT:    mv s0, a2
; RV64ZICOND-NEXT:    andi a0, a0, 1
; RV64ZICOND-NEXT:    czero.eqz s1, a1, a0
; RV64ZICOND-NEXT:  .LBB54_1: # %bb2
; RV64ZICOND-NEXT:    # =>This Inner Loop Header: Depth=1
; RV64ZICOND-NEXT:    sext.w a0, s1
; RV64ZICOND-NEXT:    call bar@plt
; RV64ZICOND-NEXT:    sllw s1, s1, s0
; RV64ZICOND-NEXT:    bnez a0, .LBB54_1
; RV64ZICOND-NEXT:  # %bb.2: # %bb7
; RV64ZICOND-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64ZICOND-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64ZICOND-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64ZICOND-NEXT:    addi sp, sp, 32
; RV64ZICOND-NEXT:    ret
bb:
  %i = select i1 %c, i32 %arg, i32 0
  br label %bb2

bb2:                                              ; preds = %bb2, %bb
  %i3 = phi i32 [ %i, %bb ], [ %i5, %bb2 ]
  %i4 = tail call signext i32 @bar(i32 signext %i3)
  %i5 = shl i32 %i3, %arg1
  %i6 = icmp eq i32 %i4, 0
  br i1 %i6, label %bb7, label %bb2

bb7:                                              ; preds = %bb2
  ret void
}
declare signext i32 @bar(i32 signext)

define void @sextw_removal_maskcn(i1 %c, i32 signext %arg, i32 signext %arg1) nounwind {
; RV64XVENTANACONDOPS-LABEL: sextw_removal_maskcn:
; RV64XVENTANACONDOPS:       # %bb.0: # %bb
; RV64XVENTANACONDOPS-NEXT:    addi sp, sp, -32
; RV64XVENTANACONDOPS-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64XVENTANACONDOPS-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64XVENTANACONDOPS-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64XVENTANACONDOPS-NEXT:    mv s0, a2
; RV64XVENTANACONDOPS-NEXT:    andi a0, a0, 1
; RV64XVENTANACONDOPS-NEXT:    vt.maskcn s1, a1, a0
; RV64XVENTANACONDOPS-NEXT:  .LBB55_1: # %bb2
; RV64XVENTANACONDOPS-NEXT:    # =>This Inner Loop Header: Depth=1
; RV64XVENTANACONDOPS-NEXT:    mv a0, s1
; RV64XVENTANACONDOPS-NEXT:    call bar@plt
; RV64XVENTANACONDOPS-NEXT:    sllw s1, s1, s0
; RV64XVENTANACONDOPS-NEXT:    bnez a0, .LBB55_1
; RV64XVENTANACONDOPS-NEXT:  # %bb.2: # %bb7
; RV64XVENTANACONDOPS-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64XVENTANACONDOPS-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64XVENTANACONDOPS-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64XVENTANACONDOPS-NEXT:    addi sp, sp, 32
; RV64XVENTANACONDOPS-NEXT:    ret
;
; RV64XTHEADCONDMOV-LABEL: sextw_removal_maskcn:
; RV64XTHEADCONDMOV:       # %bb.0: # %bb
; RV64XTHEADCONDMOV-NEXT:    addi sp, sp, -32
; RV64XTHEADCONDMOV-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64XTHEADCONDMOV-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64XTHEADCONDMOV-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64XTHEADCONDMOV-NEXT:    mv s0, a2
; RV64XTHEADCONDMOV-NEXT:    mv s1, a1
; RV64XTHEADCONDMOV-NEXT:    andi a0, a0, 1
; RV64XTHEADCONDMOV-NEXT:    th.mvnez s1, zero, a0
; RV64XTHEADCONDMOV-NEXT:  .LBB55_1: # %bb2
; RV64XTHEADCONDMOV-NEXT:    # =>This Inner Loop Header: Depth=1
; RV64XTHEADCONDMOV-NEXT:    sext.w a0, s1
; RV64XTHEADCONDMOV-NEXT:    call bar@plt
; RV64XTHEADCONDMOV-NEXT:    sllw s1, s1, s0
; RV64XTHEADCONDMOV-NEXT:    bnez a0, .LBB55_1
; RV64XTHEADCONDMOV-NEXT:  # %bb.2: # %bb7
; RV64XTHEADCONDMOV-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64XTHEADCONDMOV-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64XTHEADCONDMOV-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64XTHEADCONDMOV-NEXT:    addi sp, sp, 32
; RV64XTHEADCONDMOV-NEXT:    ret
;
; RV32ZICOND-LABEL: sextw_removal_maskcn:
; RV32ZICOND:       # %bb.0: # %bb
; RV32ZICOND-NEXT:    addi sp, sp, -16
; RV32ZICOND-NEXT:    sw ra, 12(sp) # 4-byte Folded Spill
; RV32ZICOND-NEXT:    sw s0, 8(sp) # 4-byte Folded Spill
; RV32ZICOND-NEXT:    sw s1, 4(sp) # 4-byte Folded Spill
; RV32ZICOND-NEXT:    mv s0, a2
; RV32ZICOND-NEXT:    andi a0, a0, 1
; RV32ZICOND-NEXT:    czero.nez s1, a1, a0
; RV32ZICOND-NEXT:  .LBB55_1: # %bb2
; RV32ZICOND-NEXT:    # =>This Inner Loop Header: Depth=1
; RV32ZICOND-NEXT:    mv a0, s1
; RV32ZICOND-NEXT:    call bar@plt
; RV32ZICOND-NEXT:    sll s1, s1, s0
; RV32ZICOND-NEXT:    bnez a0, .LBB55_1
; RV32ZICOND-NEXT:  # %bb.2: # %bb7
; RV32ZICOND-NEXT:    lw ra, 12(sp) # 4-byte Folded Reload
; RV32ZICOND-NEXT:    lw s0, 8(sp) # 4-byte Folded Reload
; RV32ZICOND-NEXT:    lw s1, 4(sp) # 4-byte Folded Reload
; RV32ZICOND-NEXT:    addi sp, sp, 16
; RV32ZICOND-NEXT:    ret
;
; RV64ZICOND-LABEL: sextw_removal_maskcn:
; RV64ZICOND:       # %bb.0: # %bb
; RV64ZICOND-NEXT:    addi sp, sp, -32
; RV64ZICOND-NEXT:    sd ra, 24(sp) # 8-byte Folded Spill
; RV64ZICOND-NEXT:    sd s0, 16(sp) # 8-byte Folded Spill
; RV64ZICOND-NEXT:    sd s1, 8(sp) # 8-byte Folded Spill
; RV64ZICOND-NEXT:    mv s0, a2
; RV64ZICOND-NEXT:    andi a0, a0, 1
; RV64ZICOND-NEXT:    czero.nez s1, a1, a0
; RV64ZICOND-NEXT:  .LBB55_1: # %bb2
; RV64ZICOND-NEXT:    # =>This Inner Loop Header: Depth=1
; RV64ZICOND-NEXT:    sext.w a0, s1
; RV64ZICOND-NEXT:    call bar@plt
; RV64ZICOND-NEXT:    sllw s1, s1, s0
; RV64ZICOND-NEXT:    bnez a0, .LBB55_1
; RV64ZICOND-NEXT:  # %bb.2: # %bb7
; RV64ZICOND-NEXT:    ld ra, 24(sp) # 8-byte Folded Reload
; RV64ZICOND-NEXT:    ld s0, 16(sp) # 8-byte Folded Reload
; RV64ZICOND-NEXT:    ld s1, 8(sp) # 8-byte Folded Reload
; RV64ZICOND-NEXT:    addi sp, sp, 32
; RV64ZICOND-NEXT:    ret
bb:
  %i = select i1 %c, i32 0, i32 %arg
  br label %bb2

bb2:                                              ; preds = %bb2, %bb
  %i3 = phi i32 [ %i, %bb ], [ %i5, %bb2 ]
  %i4 = tail call signext i32 @bar(i32 signext %i3)
  %i5 = shl i32 %i3, %arg1
  %i6 = icmp eq i32 %i4, 0
  br i1 %i6, label %bb7, label %bb2

bb7:                                              ; preds = %bb2
  ret void
}
