; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=riscv64 --mattr=+f,+zfa < %s | FileCheck %s --check-prefix=RISCV64
; RUN: llc --mtriple=riscv64 --mattr=+f,-zfa < %s | FileCheck %s --check-prefix=RISCV64-NOZFA

define i1 @f_olt_or(float %a, float %b, float %c) {
; RISCV64-LABEL: f_olt_or:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_olt_or:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_olt_or_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_olt_or_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_olt_or_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_olt_or_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_and(float %a, float %b, float %c) {
; RISCV64-LABEL: f_ugt_and:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ugt_and:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_ugt_and_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ugt_and_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_ugt_and_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ugt_and_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_and(float %a, float %b, float %c) {
; RISCV64-LABEL: f_olt_and:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmaxm.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_olt_and:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    flt.s a0, fa0, fa2
; RISCV64-NOZFA-NEXT:    flt.s a1, fa1, fa2
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_olt_and_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmaxm.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_olt_and_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_olt_and_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmaxm.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa5, fa2
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_olt_and_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    flt.s a0, fa0, fa2
; RISCV64-NOZFA-NEXT:    flt.s a1, fa1, fa2
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_or(float %a, float %b, float %c) {
; RISCV64-LABEL: f_ugt_or:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmaxm.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ugt_or:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fle.s a0, fa0, fa2
; RISCV64-NOZFA-NEXT:    fle.s a1, fa1, fa2
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_ugt_or_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmaxm.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ugt_or_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_ugt_or_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmaxm.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa5, fa2
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ugt_or_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fle.s a0, fa0, fa2
; RISCV64-NOZFA-NEXT:    fle.s a1, fa1, fa2
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_or(float %a, float %b, float %c) {
; RISCV64-LABEL: f_ogt_or:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ogt_or:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_ogt_or_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ogt_or_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_ogt_or_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ogt_or_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_and(float %a, float %b, float %c) {
; RISCV64-LABEL: f_ult_and:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ult_and:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_ult_and_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ult_and_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_ult_and_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ult_and_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmax.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_and(float %a, float %b, float %c) {
; RISCV64-LABEL: f_ogt_and:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fminm.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ogt_and:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    flt.s a0, fa2, fa0
; RISCV64-NOZFA-NEXT:    flt.s a1, fa2, fa1
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_ogt_and_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fminm.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ogt_and_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_ogt_and_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fminm.s fa5, fa0, fa1
; RISCV64-NEXT:    flt.s a0, fa2, fa5
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ogt_and_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    flt.s a0, fa2, fa0
; RISCV64-NOZFA-NEXT:    flt.s a1, fa2, fa1
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_or(float %a, float %b, float %c) {
; RISCV64-LABEL: f_ult_or:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fminm.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ult_or:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fle.s a0, fa2, fa0
; RISCV64-NOZFA-NEXT:    fle.s a1, fa2, fa1
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; RISCV64-LABEL: f_ult_or_nan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fminm.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ult_or_nan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fmin.s fa5, fa0, fa1
; RISCV64-NOZFA-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; RISCV64-LABEL: f_ult_or_snan:
; RISCV64:       # %bb.0: # %entry
; RISCV64-NEXT:    fminm.s fa5, fa0, fa1
; RISCV64-NEXT:    fle.s a0, fa2, fa5
; RISCV64-NEXT:    xori a0, a0, 1
; RISCV64-NEXT:    ret
;
; RISCV64-NOZFA-LABEL: f_ult_or_snan:
; RISCV64-NOZFA:       # %bb.0: # %entry
; RISCV64-NOZFA-NEXT:    fle.s a0, fa2, fa0
; RISCV64-NOZFA-NEXT:    fle.s a1, fa2, fa1
; RISCV64-NOZFA-NEXT:    and a0, a0, a1
; RISCV64-NOZFA-NEXT:    xori a0, a0, 1
; RISCV64-NOZFA-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}
