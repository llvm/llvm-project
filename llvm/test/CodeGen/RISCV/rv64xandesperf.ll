; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+xandesperf -verify-machineinstrs < %s \
; RUN:   | FileCheck %s

define i64 @lea_b_ze(i32 %a, i64 %b) {
; CHECK-LABEL: lea_b_ze:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nds.lea.b.ze a0, a1, a0
; CHECK-NEXT:    ret
  %conv = zext i32 %a to i64
  %add = add i64 %conv, %b
  ret i64 %add
}

define i64 @lea_h_ze(i32 %a, i64 %b) {
; CHECK-LABEL: lea_h_ze:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nds.lea.h.ze a0, a1, a0
; CHECK-NEXT:    ret
  %conv = zext i32 %a to i64
  %shl = shl nuw nsw i64 %conv, 1
  %add = add i64 %shl, %b
  ret i64 %add
}

define i64 @lea_w_ze(i32 %a, i64 %b) {
; CHECK-LABEL: lea_w_ze:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nds.lea.w.ze a0, a1, a0
; CHECK-NEXT:    ret
  %conv = zext i32 %a to i64
  %shl = shl nuw nsw i64 %conv, 2
  %add = add i64 %shl, %b
  ret i64 %add
}

define i64 @lea_d_ze(i32 %a, i64 %b) {
; CHECK-LABEL: lea_d_ze:
; CHECK:       # %bb.0:
; CHECK-NEXT:    nds.lea.d.ze a0, a1, a0
; CHECK-NEXT:    ret
  %conv = zext i32 %a to i64
  %shl = shl nuw nsw i64 %conv, 3
  %add = add i64 %shl, %b
  ret i64 %add
}
