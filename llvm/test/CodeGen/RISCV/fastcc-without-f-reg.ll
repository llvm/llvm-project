; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=riscv32 -mattr=+zhinx -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=ZHINX32 %s
; RUN: llc -mtriple=riscv64 -mattr=+zhinx -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=ZHINX64 %s
; RUN: llc -mtriple=riscv32 -mattr=+zfinx -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=ZFINX32 %s
; RUN: llc -mtriple=riscv64 -mattr=+zfinx -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=ZFINX64 %s
; RUN: llc -mtriple=riscv32 -mattr=+zdinx -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=ZDINX32 %s
; RUN: llc -mtriple=riscv64 -mattr=+zdinx -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=ZDINX64 %s

define half @caller_half(half %x) nounwind {
; ZHINX32-LABEL: caller_half:
; ZHINX32:       # %bb.0: # %entry
; ZHINX32-NEXT:    tail h
;
; ZHINX64-LABEL: caller_half:
; ZHINX64:       # %bb.0: # %entry
; ZHINX64-NEXT:    tail h
;
; ZFINX32-LABEL: caller_half:
; ZFINX32:       # %bb.0: # %entry
; ZFINX32-NEXT:    lui a1, 1048560
; ZFINX32-NEXT:    or a0, a0, a1
; ZFINX32-NEXT:    tail h
;
; ZFINX64-LABEL: caller_half:
; ZFINX64:       # %bb.0: # %entry
; ZFINX64-NEXT:    lui a1, 1048560
; ZFINX64-NEXT:    or a0, a0, a1
; ZFINX64-NEXT:    tail h
;
; ZDINX32-LABEL: caller_half:
; ZDINX32:       # %bb.0: # %entry
; ZDINX32-NEXT:    lui a1, 1048560
; ZDINX32-NEXT:    or a0, a0, a1
; ZDINX32-NEXT:    tail h
;
; ZDINX64-LABEL: caller_half:
; ZDINX64:       # %bb.0: # %entry
; ZDINX64-NEXT:    lui a1, 1048560
; ZDINX64-NEXT:    or a0, a0, a1
; ZDINX64-NEXT:    tail h
entry:
  %0 = tail call fastcc half @h(half %x)
  ret half %0
}

define internal fastcc half @h(half %x) nounwind {
; ZHINX32-LABEL: h:
; ZHINX32:       # %bb.0:
; ZHINX32-NEXT:    ret
;
; ZHINX64-LABEL: h:
; ZHINX64:       # %bb.0:
; ZHINX64-NEXT:    ret
;
; ZFINX32-LABEL: h:
; ZFINX32:       # %bb.0:
; ZFINX32-NEXT:    lui a1, 1048560
; ZFINX32-NEXT:    or a0, a0, a1
; ZFINX32-NEXT:    ret
;
; ZFINX64-LABEL: h:
; ZFINX64:       # %bb.0:
; ZFINX64-NEXT:    lui a1, 1048560
; ZFINX64-NEXT:    or a0, a0, a1
; ZFINX64-NEXT:    ret
;
; ZDINX32-LABEL: h:
; ZDINX32:       # %bb.0:
; ZDINX32-NEXT:    lui a1, 1048560
; ZDINX32-NEXT:    or a0, a0, a1
; ZDINX32-NEXT:    ret
;
; ZDINX64-LABEL: h:
; ZDINX64:       # %bb.0:
; ZDINX64-NEXT:    lui a1, 1048560
; ZDINX64-NEXT:    or a0, a0, a1
; ZDINX64-NEXT:    ret
  ret half %x
}

define float @caller_float(float %x) nounwind {
; ZHINX32-LABEL: caller_float:
; ZHINX32:       # %bb.0: # %entry
; ZHINX32-NEXT:    tail f
;
; ZHINX64-LABEL: caller_float:
; ZHINX64:       # %bb.0: # %entry
; ZHINX64-NEXT:    tail f
;
; ZFINX32-LABEL: caller_float:
; ZFINX32:       # %bb.0: # %entry
; ZFINX32-NEXT:    tail f
;
; ZFINX64-LABEL: caller_float:
; ZFINX64:       # %bb.0: # %entry
; ZFINX64-NEXT:    tail f
;
; ZDINX32-LABEL: caller_float:
; ZDINX32:       # %bb.0: # %entry
; ZDINX32-NEXT:    tail f
;
; ZDINX64-LABEL: caller_float:
; ZDINX64:       # %bb.0: # %entry
; ZDINX64-NEXT:    tail f
entry:
  %0 = tail call fastcc float @f(float %x)
  ret float %0
}

define internal fastcc float @f(float %x) nounwind {
; ZHINX32-LABEL: f:
; ZHINX32:       # %bb.0: # %entry
; ZHINX32-NEXT:    ret
;
; ZHINX64-LABEL: f:
; ZHINX64:       # %bb.0: # %entry
; ZHINX64-NEXT:    ret
;
; ZFINX32-LABEL: f:
; ZFINX32:       # %bb.0: # %entry
; ZFINX32-NEXT:    ret
;
; ZFINX64-LABEL: f:
; ZFINX64:       # %bb.0: # %entry
; ZFINX64-NEXT:    ret
;
; ZDINX32-LABEL: f:
; ZDINX32:       # %bb.0: # %entry
; ZDINX32-NEXT:    ret
;
; ZDINX64-LABEL: f:
; ZDINX64:       # %bb.0: # %entry
; ZDINX64-NEXT:    ret
entry:
  ret float %x
}

define double @caller_double(double %x) nounwind {
; ZHINX32-LABEL: caller_double:
; ZHINX32:       # %bb.0: # %entry
; ZHINX32-NEXT:    tail d
;
; ZHINX64-LABEL: caller_double:
; ZHINX64:       # %bb.0: # %entry
; ZHINX64-NEXT:    tail d
;
; ZFINX32-LABEL: caller_double:
; ZFINX32:       # %bb.0: # %entry
; ZFINX32-NEXT:    tail d
;
; ZFINX64-LABEL: caller_double:
; ZFINX64:       # %bb.0: # %entry
; ZFINX64-NEXT:    tail d
;
; ZDINX32-LABEL: caller_double:
; ZDINX32:       # %bb.0: # %entry
; ZDINX32-NEXT:    addi sp, sp, -32
; ZDINX32-NEXT:    sw ra, 28(sp) # 4-byte Folded Spill
; ZDINX32-NEXT:    sw a0, 16(sp)
; ZDINX32-NEXT:    sw a1, 20(sp)
; ZDINX32-NEXT:    lw a0, 16(sp)
; ZDINX32-NEXT:    lw a1, 20(sp)
; ZDINX32-NEXT:    sw a0, 0(sp)
; ZDINX32-NEXT:    sw a1, 4(sp)
; ZDINX32-NEXT:    call d
; ZDINX32-NEXT:    lw ra, 28(sp) # 4-byte Folded Reload
; ZDINX32-NEXT:    addi sp, sp, 32
; ZDINX32-NEXT:    ret
;
; ZDINX64-LABEL: caller_double:
; ZDINX64:       # %bb.0: # %entry
; ZDINX64-NEXT:    tail d
entry:
  %0 = tail call fastcc double @d(double %x)
  ret double %0
}

define internal fastcc double @d(double %x) nounwind {
; ZHINX32-LABEL: d:
; ZHINX32:       # %bb.0: # %entry
; ZHINX32-NEXT:    ret
;
; ZHINX64-LABEL: d:
; ZHINX64:       # %bb.0: # %entry
; ZHINX64-NEXT:    ret
;
; ZFINX32-LABEL: d:
; ZFINX32:       # %bb.0: # %entry
; ZFINX32-NEXT:    ret
;
; ZFINX64-LABEL: d:
; ZFINX64:       # %bb.0: # %entry
; ZFINX64-NEXT:    ret
;
; ZDINX32-LABEL: d:
; ZDINX32:       # %bb.0: # %entry
; ZDINX32-NEXT:    addi sp, sp, -16
; ZDINX32-NEXT:    lw a0, 16(sp)
; ZDINX32-NEXT:    lw a1, 20(sp)
; ZDINX32-NEXT:    sw a0, 8(sp)
; ZDINX32-NEXT:    sw a1, 12(sp)
; ZDINX32-NEXT:    lw a0, 8(sp)
; ZDINX32-NEXT:    lw a1, 12(sp)
; ZDINX32-NEXT:    addi sp, sp, 16
; ZDINX32-NEXT:    ret
;
; ZDINX64-LABEL: d:
; ZDINX64:       # %bb.0: # %entry
; ZDINX64-NEXT:    ret
entry:
  ret double %x
}
