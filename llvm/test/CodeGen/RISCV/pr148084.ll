; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s

source_filename = "external/libaom/av1/encoder/tx_search.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-linux-android10000"

define fastcc void @search_tx_type() #0 {
; CHECK-LABEL: search_tx_type:
; CHECK:       # %bb.0: # %._crit_edge.i
; CHECK-NEXT:  # %bb.1: # %bb
; CHECK-NEXT:    lbu a1, 0(zero)
; CHECK-NEXT:    lw a0, 0(zero)
; CHECK-NEXT:    lh a2, 0(zero)
; CHECK-NEXT:    seqz a1, a1
; CHECK-NEXT:    srai a3, a0, 63
; CHECK-NEXT:    addi a1, a1, -1
; CHECK-NEXT:    and a1, a1, a2
; CHECK-NEXT:    andi a2, a1, 1
; CHECK-NEXT:    addi a2, a2, -1
; CHECK-NEXT:    or a3, a3, a0
; CHECK-NEXT:    or a2, a2, a3
; CHECK-NEXT:    bgez a2, .LBB0_3
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    bexti a3, a1, 1
; CHECK-NEXT:    addi a3, a3, -1
; CHECK-NEXT:    and a2, a2, a3
; CHECK-NEXT:  .LBB0_3: # %bb
; CHECK-NEXT:    andi a4, a1, 4
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:    beqz a4, .LBB0_5
; CHECK-NEXT:  # %bb.4: # %bb
; CHECK-NEXT:    mv a3, a0
; CHECK-NEXT:  .LBB0_5: # %bb
; CHECK-NEXT:    blt a2, a0, .LBB0_7
; CHECK-NEXT:  # %bb.6: # %bb
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:  .LBB0_7: # %bb
; CHECK-NEXT:    andi a5, a1, 8
; CHECK-NEXT:    sext.w a4, a3
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:    beqz a5, .LBB0_9
; CHECK-NEXT:  # %bb.8: # %bb
; CHECK-NEXT:    mv a2, a0
; CHECK-NEXT:  .LBB0_9: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_11
; CHECK-NEXT:  # %bb.10: # %bb
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:  .LBB0_11: # %bb
; CHECK-NEXT:    andi a5, a1, 16
; CHECK-NEXT:    sext.w a4, a2
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:    beqz a5, .LBB0_13
; CHECK-NEXT:  # %bb.12: # %bb
; CHECK-NEXT:    mv a3, a0
; CHECK-NEXT:  .LBB0_13: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_15
; CHECK-NEXT:  # %bb.14: # %bb
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:  .LBB0_15: # %bb
; CHECK-NEXT:    andi a5, a1, 32
; CHECK-NEXT:    sext.w a4, a3
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:    beqz a5, .LBB0_17
; CHECK-NEXT:  # %bb.16: # %bb
; CHECK-NEXT:    mv a2, a0
; CHECK-NEXT:  .LBB0_17: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_19
; CHECK-NEXT:  # %bb.18: # %bb
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:  .LBB0_19: # %bb
; CHECK-NEXT:    andi a5, a1, 64
; CHECK-NEXT:    sext.w a4, a2
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:    beqz a5, .LBB0_21
; CHECK-NEXT:  # %bb.20: # %bb
; CHECK-NEXT:    mv a3, a0
; CHECK-NEXT:  .LBB0_21: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_23
; CHECK-NEXT:  # %bb.22: # %bb
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:  .LBB0_23: # %bb
; CHECK-NEXT:    andi a5, a1, 128
; CHECK-NEXT:    sext.w a4, a3
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:    beqz a5, .LBB0_25
; CHECK-NEXT:  # %bb.24: # %bb
; CHECK-NEXT:    mv a2, a0
; CHECK-NEXT:  .LBB0_25: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_27
; CHECK-NEXT:  # %bb.26: # %bb
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:  .LBB0_27: # %bb
; CHECK-NEXT:    andi a5, a1, 256
; CHECK-NEXT:    sext.w a4, a2
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:    beqz a5, .LBB0_29
; CHECK-NEXT:  # %bb.28: # %bb
; CHECK-NEXT:    mv a3, a0
; CHECK-NEXT:  .LBB0_29: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_31
; CHECK-NEXT:  # %bb.30: # %bb
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:  .LBB0_31: # %bb
; CHECK-NEXT:    andi a5, a1, 512
; CHECK-NEXT:    sext.w a4, a3
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:    beqz a5, .LBB0_33
; CHECK-NEXT:  # %bb.32: # %bb
; CHECK-NEXT:    mv a2, a0
; CHECK-NEXT:  .LBB0_33: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_35
; CHECK-NEXT:  # %bb.34: # %bb
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:  .LBB0_35: # %bb
; CHECK-NEXT:    andi a5, a1, 1024
; CHECK-NEXT:    sext.w a4, a2
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:    beqz a5, .LBB0_37
; CHECK-NEXT:  # %bb.36: # %bb
; CHECK-NEXT:    mv a3, a0
; CHECK-NEXT:  .LBB0_37: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_39
; CHECK-NEXT:  # %bb.38: # %bb
; CHECK-NEXT:    mv a3, a2
; CHECK-NEXT:  .LBB0_39: # %bb
; CHECK-NEXT:    slli a5, a1, 52
; CHECK-NEXT:    sext.w a4, a3
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:    bgez a5, .LBB0_41
; CHECK-NEXT:  # %bb.40: # %bb
; CHECK-NEXT:    mv a2, a0
; CHECK-NEXT:  .LBB0_41: # %bb
; CHECK-NEXT:    blt a4, a0, .LBB0_43
; CHECK-NEXT:  # %bb.42: # %bb
; CHECK-NEXT:    mv a2, a3
; CHECK-NEXT:  .LBB0_43: # %bb
; CHECK-NEXT:    slli a4, a1, 51
; CHECK-NEXT:    sext.w a3, a2
; CHECK-NEXT:    mv a1, a2
; CHECK-NEXT:    bltz a4, .LBB0_49
; CHECK-NEXT:  # %bb.44: # %bb
; CHECK-NEXT:    bge a3, a0, .LBB0_50
; CHECK-NEXT:  .LBB0_45: # %bb
; CHECK-NEXT:    sext.w a2, a1
; CHECK-NEXT:    blt a2, a0, .LBB0_47
; CHECK-NEXT:  .LBB0_46: # %bb
; CHECK-NEXT:    mv a0, a1
; CHECK-NEXT:  .LBB0_47: # %bb
; CHECK-NEXT:    sext.w a0, a0
; CHECK-NEXT:  # %bb.48: # %get_tx_mask.exit
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB0_49: # %bb
; CHECK-NEXT:    mv a1, a0
; CHECK-NEXT:    blt a3, a0, .LBB0_45
; CHECK-NEXT:  .LBB0_50: # %bb
; CHECK-NEXT:    mv a1, a2
; CHECK-NEXT:    sext.w a2, a2
; CHECK-NEXT:    bge a2, a0, .LBB0_46
; CHECK-NEXT:    j .LBB0_47
._crit_edge.i:
  %.in196.i = load i16, ptr null, align 2
  %i2 = load i16, ptr null, align 2
  %i3 = and i16 %i2, %.in196.i
  %i9 = trunc nuw i8 0 to i1
  br i1 %i9, label %get_tx_mask.exit, label %bb

bb:                                               ; preds = %._crit_edge.i
  %i13 = load i8, ptr null, align 1
  %i14 = icmp eq i8 %i13, 0
  %spec.select211.i = select i1 %i14, i16 0, i16 %i3
  %i19 = load i32, ptr null, align 4
  %i20 = zext i16 %spec.select211.i to i32
  %i21 = load i32, ptr null, align 4
  %i22 = icmp sgt i32 %i21, -1
  %i23 = and i32 %i20, 1
  %.not203.i = icmp eq i32 %i23, 0
  %spec.select212.i = select i1 %.not203.i, i32 -1, i32 %i21
  %.1174.i = select i1 %i22, i32 %spec.select212.i, i32 -1
  %i28 = icmp sgt i32 0, %.1174.i
  %i29 = and i32 %i20, 2
  %.not203.1.not.i = icmp eq i32 %i29, 0
  %spec.select212.1.i = select i1 %.not203.1.not.i, i32 %.1174.i, i32 0
  %.1174.1.i = select i1 %i28, i32 %spec.select212.1.i, i32 %.1174.i
  %i30 = load i32, ptr null, align 4
  %i31 = icmp sgt i32 %i30, %.1174.1.i
  %i32 = and i32 %i20, 4
  %.not203.2.i = icmp eq i32 %i32, 0
  %spec.select212.2.i = select i1 %.not203.2.i, i32 %.1174.1.i, i32 %i30
  %.1174.2.i = select i1 %i31, i32 %spec.select212.2.i, i32 %.1174.1.i
  %i36 = load i32, ptr null, align 4
  %i37 = icmp sgt i32 %i36, %.1174.2.i
  %i38 = and i32 %i20, 8
  %.not203.3.i = icmp eq i32 %i38, 0
  %spec.select212.3.i = select i1 %.not203.3.i, i32 %.1174.2.i, i32 %i36
  %.1174.3.i = select i1 %i37, i32 %spec.select212.3.i, i32 %.1174.2.i
  %i42 = load i32, ptr null, align 4
  %i43 = icmp sgt i32 %i42, %.1174.3.i
  %i44 = and i32 %i20, 16
  %.not203.4.i = icmp eq i32 %i44, 0
  %spec.select212.4.i = select i1 %.not203.4.i, i32 %.1174.3.i, i32 %i42
  %.1174.4.i = select i1 %i43, i32 %spec.select212.4.i, i32 %.1174.3.i
  %i48 = load i32, ptr null, align 4
  %i49 = icmp sgt i32 %i48, %.1174.4.i
  %i50 = and i32 %i20, 32
  %.not203.5.i = icmp eq i32 %i50, 0
  %spec.select212.5.i = select i1 %.not203.5.i, i32 %.1174.4.i, i32 %i48
  %.1174.5.i = select i1 %i49, i32 %spec.select212.5.i, i32 %.1174.4.i
  %i51 = load i32, ptr null, align 4
  %i52 = icmp sgt i32 %i51, %.1174.5.i
  %i53 = and i32 %i20, 64
  %.not203.6.i = icmp eq i32 %i53, 0
  %spec.select212.6.i = select i1 %.not203.6.i, i32 %.1174.5.i, i32 %i51
  %.1174.6.i = select i1 %i52, i32 %spec.select212.6.i, i32 %.1174.5.i
  %i56 = load i32, ptr null, align 4
  %i57 = icmp sgt i32 %i56, %.1174.6.i
  %i58 = and i32 %i20, 128
  %.not203.7.i = icmp eq i32 %i58, 0
  %spec.select212.7.i = select i1 %.not203.7.i, i32 %.1174.6.i, i32 %i56
  %.1174.7.i = select i1 %i57, i32 %spec.select212.7.i, i32 %.1174.6.i
  %i60 = load i32, ptr null, align 4
  %i61 = icmp sgt i32 %i60, %.1174.7.i
  %i62 = and i32 %i20, 256
  %.not203.8.i = icmp eq i32 %i62, 0
  %spec.select212.8.i = select i1 %.not203.8.i, i32 %.1174.7.i, i32 %i60
  %.1174.8.i = select i1 %i61, i32 %spec.select212.8.i, i32 %.1174.7.i
  %i63 = load i32, ptr null, align 4
  %i64 = icmp sgt i32 %i63, %.1174.8.i
  %i65 = and i32 %i20, 512
  %.not203.9.i = icmp eq i32 %i65, 0
  %spec.select212.9.i = select i1 %.not203.9.i, i32 %.1174.8.i, i32 %i63
  %.1174.9.i = select i1 %i64, i32 %spec.select212.9.i, i32 %.1174.8.i
  %i67 = load i32, ptr null, align 4
  %i68 = icmp sgt i32 %i67, %.1174.9.i
  %i69 = and i32 %i20, 1024
  %.not203.10.i = icmp eq i32 %i69, 0
  %spec.select212.10.i = select i1 %.not203.10.i, i32 %.1174.9.i, i32 %i67
  %.1174.10.i = select i1 %i68, i32 %spec.select212.10.i, i32 %.1174.9.i
  %i70 = load i32, ptr null, align 4
  %i71 = icmp sgt i32 %i70, %.1174.10.i
  %i72 = and i32 %i20, 2048
  %.not203.11.i = icmp eq i32 %i72, 0
  %spec.select212.11.i = select i1 %.not203.11.i, i32 %.1174.10.i, i32 %i70
  %.1174.11.i = select i1 %i71, i32 %spec.select212.11.i, i32 %.1174.10.i
  %i75 = load i32, ptr null, align 4
  %i76 = icmp sgt i32 %i75, %.1174.11.i
  %i77 = and i32 %i20, 4096
  %.not203.12.i = icmp eq i32 %i77, 0
  %spec.select212.12.i = select i1 %.not203.12.i, i32 %.1174.11.i, i32 %i75
  %.1174.12.i = select i1 %i76, i32 %spec.select212.12.i, i32 %.1174.11.i
  %i80 = load i32, ptr null, align 4
  %i81 = icmp sgt i32 %i80, %.1174.12.i
  %spec.select212.13.i = select i1 false, i32 %.1174.12.i, i32 %i80
  %.1174.13.i = select i1 %i81, i32 %spec.select212.13.i, i32 %.1174.12.i
  %.1172.13.i = select i1 %i81, i32 13, i32 0
  %i84 = icmp sgt i32 0, %.1174.13.i
  %.1172.14.i = select i1 %i84, i32 14, i32 %.1172.13.i
  %i88 = icmp slt i32 0, %i19
  %i89 = select i1 %i88, i16 -32768, i16 0
  %i90 = zext i16 %i89 to i32
  %i91 = shl nuw nsw i32 1, %.1172.14.i
  %i92 = and i32 %i91, %i90
  %.not200.i = icmp eq i32 %i92, 0
  %i93 = trunc nuw i32 %i91 to i16
  %i94 = xor i16 %i93, -1
  %i95 = select i1 %.not200.i, i16 -1, i16 %i94
  %.2177.i = and i16 %i95, %i89
  %i96 = xor i16 %.2177.i, -1
  %i97 = and i16 %spec.select211.i, %i96
  br label %get_tx_mask.exit

get_tx_mask.exit:                                 ; preds = %._crit_edge.i, %bb
  %.1261.i = phi i16 [ %i97, %bb ], [ 0, %._crit_edge.i ]
  %i99 = icmp eq i16 %.1261.i, 0
  %.2262.i = select i1 %i99, i16 0, i16 %.1261.i
  ret void
}

attributes #0 = { noimplicitfloat nounwind sspstrong uwtable vscale_range(2,1024) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+b,+c,+d,+f,+m,+relax,+unaligned-scalar-mem,+unaligned-vector-mem,+v,+zaamo,+zalrsc,+zba,+zbb,+zbs,+zca,+zcd,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-e,-experimental-p,-experimental-smctr,-experimental-ssctr,-experimental-svukte,-experimental-xqccmp,-experimental-xqcia,-experimental-xqciac,-experimental-xqcibi,-experimental-xqcibm,-experimental-xqcicli,-experimental-xqcicm,-experimental-xqcics,-experimental-xqcicsr,-experimental-xqciint,-experimental-xqciio,-experimental-xqcilb,-experimental-xqcili,-experimental-xqcilia,-experimental-xqcilo,-experimental-xqcilsm,-experimental-xqcisim,-experimental-xqcisls,-experimental-xqcisync,-experimental-xrivosvisni,-experimental-xrivosvizip,-experimental-xsfmclic,-experimental-xsfsclic,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-experimental-zvqdotq,-h,-q,-sdext,-sdtrig,-sha,-shcounterenw,-shgatpa,-shlcofideleg,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcntrpmf,-smcsrind,-smdbltrp,-smepmp,-smmpm,-smnpm,-smrnmi,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssdbltrp,-ssnpm,-sspm,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-supm,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-svvptc,-xandesperf,-xandesvbfhcvt,-xandesvdot,-xandesvpackfph,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xmipscmov,-xmipslsp,-xsfcease,-xsfmm128t,-xsfmm16t,-xsfmm32a16f,-xsfmm32a32f,-xsfmm32a8f,-xsfmm32a8i,-xsfmm32t,-xsfmm64a64f,-xsfmm64t,-xsfmmbase,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xwchc,-za128rs,-za64rs,-zabha,-zacas,-zama16b,-zawrs,-zbc,-zbkb,-zbkc,-zbkx,-zcb,-zce,-zcf,-zclsd,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccamoc,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zilsd,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
