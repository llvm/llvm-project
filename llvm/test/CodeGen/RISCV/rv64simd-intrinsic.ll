; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV64P

declare i64 @llvm.riscv.pslli_b.i64.i64(i64, i64)

define i64 @pslli.b(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.b a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.b.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pslli_h.i64.i64(i64, i64)

define i64 @pslli.h(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.h a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.h.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pslli_w.i64.i64(i64, i64)

define i64 @pslli.w(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.w a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.w.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psslai_h.i64.i64(i64, i64)

define i64 @psslai.h(i64 %a, i64 %b) {
; RV64P-LABEL: psslai.h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psslai.h a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psslai.h.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psslai_w.i64.i64(i64, i64)

define i64 @psslai.w(i64 %a, i64 %b) {
; RV64P-LABEL: psslai.w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psslai.w a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psslai.w.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.bs.i64.i64(i64, i64)

define i64 @psll_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psll_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.bs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.bs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.hs.i64.i64(i64, i64)

define i64 @psll_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psll_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.hs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.hs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.ws.i64.i64(i64, i64)

define i64 @psll_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psll_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.ws a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.ws.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.bs.i64.i64(i64, i64)

define i64 @padd_bs(i64 %a, i64 %b) {
; RV64P-LABEL: padd_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.bs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.bs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.hs.i64.i64(i64, i64)

define i64 @padd_hs(i64 %a, i64 %b) {
; RV64P-LABEL: padd_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.hs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.hs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.ws.i64.i64(i64, i64)

define i64 @padd_ws(i64 %a, i64 %b) {
; RV64P-LABEL: padd_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.ws a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.ws.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pssha.hs.i64(i64, i64)

define i64 @pssha_hs(i64 %a, i64 %b) {
; RV64P-LABEL: pssha_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssha.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssha.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssha.ws.i64(i64, i64)

define i64 @pssha_ws(i64 %a, i64 %b) {
; RV64P-LABEL: pssha_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssha.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssha.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.sha.i64(i64, i64)

define i64 @sha(i64 %a, i64 %b) {
; RV64P-LABEL: sha:
; RV64P:       # %bb.0:
; RV64P-NEXT:    sha a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.sha.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psshar.hs.i64(i64, i64)

define i64 @psshar_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psshar_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psshar.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psshar.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psshar.ws.i64(i64, i64)

define i64 @psshar_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psshar_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psshar.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psshar.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.shar.i64(i64, i64)

define i64 @shar(i64 %a, i64 %b) {
; RV64P-LABEL: shar:
; RV64P:       # %bb.0:
; RV64P-NEXT:    shar a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.shar.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrli.b.i64.i64(i64, i64)

define i64 @psrli_b(i64 %a, i64 %b) {
; RV64P-LABEL: psrli_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrli.b a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrli.b.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrli.h.i64.i64(i64, i64)

define i64 @psrli_h(i64 %a, i64 %b) {
; RV64P-LABEL: psrli_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrli.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrli.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrli.w.i64.i64(i64, i64)

define i64 @psrli_w(i64 %a, i64 %b) {
; RV64P-LABEL: psrli_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrli.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrli.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pusati.h.i64.i64(i64, i64)

define i64 @pusati_h(i64 %a, i64 %b) {
; RV64P-LABEL: pusati_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pusati.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pusati.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pusati.w.i64.i64(i64, i64)

define i64 @pusati_w(i64 %a, i64 %b) {
; RV64P-LABEL: pusati_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pusati.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pusati.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.usati.i64.i64(i64, i64)

define i64 @usati(i64 %a, i64 %b) {
; RV64P-LABEL: usati:
; RV64P:       # %bb.0:
; RV64P-NEXT:    usati a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.usati.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrai.b.i64.i64(i64, i64)

define i64 @psrai_b(i64 %a, i64 %b) {
; RV64P-LABEL: psrai_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrai.b a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrai.b.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrai.h.i64.i64(i64, i64)

define i64 @psrai_h(i64 %a, i64 %b) {
; RV64P-LABEL: psrai_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrai.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrai.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrai.w.i64.i64(i64, i64)

define i64 @psrai_w(i64 %a, i64 %b) {
; RV64P-LABEL: psrai_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrai.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrai.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrari.h.i64.i64(i64, i64)

define i64 @psrari_h(i64 %a, i64 %b) {
; RV64P-LABEL: psrari_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrari.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrari.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrari.w.i64.i64(i64, i64)

define i64 @psrari_w(i64 %a, i64 %b) {
; RV64P-LABEL: psrari_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrari.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrari.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.srari.i64.i64(i64, i64)

define i64 @srari_64(i64 %a, i64 %b) {
; RV64P-LABEL: srari_64:
; RV64P:       # %bb.0:
; RV64P-NEXT:    srari a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.srari.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psati.h.i64.i64(i64, i64)

define i64 @psati_h(i64 %a, i64 %b) {
; RV64P-LABEL: psati_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psati.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psati.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psati.w.i64.i64(i64, i64)

define i64 @psati_w(i64 %a, i64 %b) {
; RV64P-LABEL: psati_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psati.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psati.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.sati.i64.i64(i64, i64)

define i64 @sati(i64 %a, i64 %b) {
; RV64P-LABEL: sati:
; RV64P:       # %bb.0:
; RV64P-NEXT:    sati a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.sati.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrl.bs.i64(i64, i64)

define i64 @psrl_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psrl_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrl.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrl.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrl.hs.i64(i64, i64)

define i64 @psrl_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psrl_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrl.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrl.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrl.ws.i64(i64, i64)

define i64 @psrl_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psrl_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrl.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrl.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsum.bs.i64(i64, i64)

define i64 @predsum_bs(i64 %a, i64 %b) {
; RV64P-LABEL: predsum_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsum.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsum.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsum.hs.i64(i64, i64)

define i64 @predsum_hs(i64 %a, i64 %b) {
; RV64P-LABEL: predsum_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsum.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsum.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsum.ws.i64(i64, i64)

define i64 @predsum_ws(i64 %a, i64 %b) {
; RV64P-LABEL: predsum_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsum.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsum.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsumu.bs.i64(i64, i64)

define i64 @predsumu_bs(i64 %a, i64 %b) {
; RV64P-LABEL: predsumu_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsumu.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsumu.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsumu.hs.i64(i64, i64)

define i64 @predsumu_hs(i64 %a, i64 %b) {
; RV64P-LABEL: predsumu_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsumu.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsumu.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsumu.ws.i64(i64, i64)

define i64 @predsumu_ws(i64 %a, i64 %b) {
; RV64P-LABEL: predsumu_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsumu.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsumu.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psra.bs.i64(i64, i64)

define i64 @psra_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psra_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psra.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psra.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psra.hs.i64(i64, i64)

define i64 @psra_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psra_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psra.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psra.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psra.ws.i64(i64, i64)

define i64 @psra_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psra_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psra.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psra.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}
