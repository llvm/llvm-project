; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV64P

declare i64 @llvm.riscv.pslli_b.i64.i64(i64, i64)

define i64 @pslli.b(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.b a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.b.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pslli_h.i64.i64(i64, i64)

define i64 @pslli.h(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.h a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.h.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pslli_w.i64.i64(i64, i64)

define i64 @pslli.w(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.w a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.w.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psslai_h.i64.i64(i64, i64)

define i64 @psslai.h(i64 %a, i64 %b) {
; RV64P-LABEL: psslai.h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psslai.h a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psslai.h.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psslai_w.i64.i64(i64, i64)

define i64 @psslai.w(i64 %a, i64 %b) {
; RV64P-LABEL: psslai.w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psslai.w a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psslai.w.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.bs.i64.i64(i64, i64)

define i64 @psll_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psll_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.bs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.bs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.hs.i64.i64(i64, i64)

define i64 @psll_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psll_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.hs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.hs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.ws.i64.i64(i64, i64)

define i64 @psll_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psll_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.ws a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.ws.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.bs.i64.i64(i64, i64)

define i64 @padd_bs(i64 %a, i64 %b) {
; RV64P-LABEL: padd_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.bs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.bs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.hs.i64.i64(i64, i64)

define i64 @padd_hs(i64 %a, i64 %b) {
; RV64P-LABEL: padd_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.hs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.hs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.ws.i64.i64(i64, i64)

define i64 @padd_ws(i64 %a, i64 %b) {
; RV64P-LABEL: padd_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.ws a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.ws.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}
