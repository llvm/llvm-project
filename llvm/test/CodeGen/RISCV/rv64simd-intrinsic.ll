; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+experimental-p -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV64P

declare i64 @llvm.riscv.pslli_b.i64.i64(i64, i64)

define i64 @pslli.b(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.b a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.b.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pslli_h.i64.i64(i64, i64)

define i64 @pslli.h(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.h a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.h.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pslli_w.i64.i64(i64, i64)

define i64 @pslli.w(i64 %a, i64 %b) {
; RV64P-LABEL: pslli.w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pslli.w a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.pslli.w.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psslai_h.i64.i64(i64, i64)

define i64 @psslai.h(i64 %a, i64 %b) {
; RV64P-LABEL: psslai.h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psslai.h a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psslai.h.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psslai_w.i64.i64(i64, i64)

define i64 @psslai.w(i64 %a, i64 %b) {
; RV64P-LABEL: psslai.w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psslai.w a0, a0, 1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psslai.w.i64.i64(i64 %a, i64 1)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.bs.i64.i64(i64, i64)

define i64 @psll_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psll_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.bs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.bs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.hs.i64.i64(i64, i64)

define i64 @psll_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psll_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.hs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.hs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.psll.ws.i64.i64(i64, i64)

define i64 @psll_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psll_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psll.ws a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.psll.ws.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.bs.i64.i64(i64, i64)

define i64 @padd_bs(i64 %a, i64 %b) {
; RV64P-LABEL: padd_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.bs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.bs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.hs.i64.i64(i64, i64)

define i64 @padd_hs(i64 %a, i64 %b) {
; RV64P-LABEL: padd_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.hs a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.hs.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.padd.ws.i64.i64(i64, i64)

define i64 @padd_ws(i64 %a, i64 %b) {
; RV64P-LABEL: padd_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.ws a0, a0, a1
; RV64P-NEXT:    ret
  %tmp = call i64 @llvm.riscv.padd.ws.i64.i64(i64 %a, i64 %b)
  ret i64 %tmp
}

declare i64 @llvm.riscv.pssha.hs.i64(i64, i64)

define i64 @pssha_hs(i64 %a, i64 %b) {
; RV64P-LABEL: pssha_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssha.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssha.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssha.ws.i64(i64, i64)

define i64 @pssha_ws(i64 %a, i64 %b) {
; RV64P-LABEL: pssha_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssha.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssha.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.sha.i64(i64, i64)

define i64 @sha(i64 %a, i64 %b) {
; RV64P-LABEL: sha:
; RV64P:       # %bb.0:
; RV64P-NEXT:    sha a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.sha.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psshar.hs.i64(i64, i64)

define i64 @psshar_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psshar_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psshar.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psshar.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psshar.ws.i64(i64, i64)

define i64 @psshar_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psshar_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psshar.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psshar.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.shar.i64(i64, i64)

define i64 @shar(i64 %a, i64 %b) {
; RV64P-LABEL: shar:
; RV64P:       # %bb.0:
; RV64P-NEXT:    shar a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.shar.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrli.b.i64.i64(i64, i64)

define i64 @psrli_b(i64 %a, i64 %b) {
; RV64P-LABEL: psrli_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrli.b a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrli.b.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrli.h.i64.i64(i64, i64)

define i64 @psrli_h(i64 %a, i64 %b) {
; RV64P-LABEL: psrli_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrli.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrli.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrli.w.i64.i64(i64, i64)

define i64 @psrli_w(i64 %a, i64 %b) {
; RV64P-LABEL: psrli_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrli.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrli.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pusati.h.i64.i64(i64, i64)

define i64 @pusati_h(i64 %a, i64 %b) {
; RV64P-LABEL: pusati_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pusati.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pusati.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pusati.w.i64.i64(i64, i64)

define i64 @pusati_w(i64 %a, i64 %b) {
; RV64P-LABEL: pusati_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pusati.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pusati.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.usati.i64.i64(i64, i64)

define i64 @usati(i64 %a, i64 %b) {
; RV64P-LABEL: usati:
; RV64P:       # %bb.0:
; RV64P-NEXT:    usati a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.usati.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrai.b.i64.i64(i64, i64)

define i64 @psrai_b(i64 %a, i64 %b) {
; RV64P-LABEL: psrai_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrai.b a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrai.b.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrai.h.i64.i64(i64, i64)

define i64 @psrai_h(i64 %a, i64 %b) {
; RV64P-LABEL: psrai_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrai.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrai.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrai.w.i64.i64(i64, i64)

define i64 @psrai_w(i64 %a, i64 %b) {
; RV64P-LABEL: psrai_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrai.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrai.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrari.h.i64.i64(i64, i64)

define i64 @psrari_h(i64 %a, i64 %b) {
; RV64P-LABEL: psrari_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrari.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrari.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrari.w.i64.i64(i64, i64)

define i64 @psrari_w(i64 %a, i64 %b) {
; RV64P-LABEL: psrari_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrari.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrari.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.srari.i64.i64(i64, i64)

define i64 @srari_64(i64 %a, i64 %b) {
; RV64P-LABEL: srari_64:
; RV64P:       # %bb.0:
; RV64P-NEXT:    srari a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.srari.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psati.h.i64.i64(i64, i64)

define i64 @psati_h(i64 %a, i64 %b) {
; RV64P-LABEL: psati_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psati.h a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psati.h.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psati.w.i64.i64(i64, i64)

define i64 @psati_w(i64 %a, i64 %b) {
; RV64P-LABEL: psati_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psati.w a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psati.w.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.sati.i64.i64(i64, i64)

define i64 @sati(i64 %a, i64 %b) {
; RV64P-LABEL: sati:
; RV64P:       # %bb.0:
; RV64P-NEXT:    sati a0, a0, 1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.sati.i64.i64(i64 %a, i64 1)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrl.bs.i64(i64, i64)

define i64 @psrl_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psrl_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrl.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrl.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrl.hs.i64(i64, i64)

define i64 @psrl_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psrl_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrl.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrl.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psrl.ws.i64(i64, i64)

define i64 @psrl_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psrl_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psrl.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psrl.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsum.bs.i64(i64, i64)

define i64 @predsum_bs(i64 %a, i64 %b) {
; RV64P-LABEL: predsum_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsum.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsum.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsum.hs.i64(i64, i64)

define i64 @predsum_hs(i64 %a, i64 %b) {
; RV64P-LABEL: predsum_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsum.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsum.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsum.ws.i64(i64, i64)

define i64 @predsum_ws(i64 %a, i64 %b) {
; RV64P-LABEL: predsum_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsum.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsum.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsumu.bs.i64(i64, i64)

define i64 @predsumu_bs(i64 %a, i64 %b) {
; RV64P-LABEL: predsumu_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsumu.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsumu.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsumu.hs.i64(i64, i64)

define i64 @predsumu_hs(i64 %a, i64 %b) {
; RV64P-LABEL: predsumu_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsumu.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsumu.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.predsumu.ws.i64(i64, i64)

define i64 @predsumu_ws(i64 %a, i64 %b) {
; RV64P-LABEL: predsumu_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    predsumu.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.predsumu.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psra.bs.i64(i64, i64)

define i64 @psra_bs(i64 %a, i64 %b) {
; RV64P-LABEL: psra_bs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psra.bs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psra.bs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psra.hs.i64(i64, i64)

define i64 @psra_hs(i64 %a, i64 %b) {
; RV64P-LABEL: psra_hs:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psra.hs a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psra.hs.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psra.ws.i64(i64, i64)

define i64 @psra_ws(i64 %a, i64 %b) {
; RV64P-LABEL: psra_ws:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psra.ws a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psra.ws.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.padd.b.i64(i64, i64)

define i64 @padd_b(i64 %a, i64 %b) {
; RV64P-LABEL: padd_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.padd.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.padd.h.i64(i64, i64)

define i64 @padd_h(i64 %a, i64 %b) {
; RV64P-LABEL: padd_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.padd.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.padd.w.i64(i64, i64)

define i64 @padd_w(i64 %a, i64 %b) {
; RV64P-LABEL: padd_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    padd.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.padd.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psadd.b.i64(i64, i64)

define i64 @psadd_b(i64 %a, i64 %b) {
; RV64P-LABEL: psadd_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psadd.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psadd.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psadd.h.i64(i64, i64)

define i64 @psadd_h(i64 %a, i64 %b) {
; RV64P-LABEL: psadd_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psadd.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psadd.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psadd.w.i64(i64, i64)

define i64 @psadd_w(i64 %a, i64 %b) {
; RV64P-LABEL: psadd_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psadd.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psadd.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paadd.b.i64(i64, i64)

define i64 @paadd_b(i64 %a, i64 %b) {
; RV64P-LABEL: paadd_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paadd.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paadd.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paadd.h.i64(i64, i64)

define i64 @paadd_h(i64 %a, i64 %b) {
; RV64P-LABEL: paadd_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paadd.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paadd.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paadd.w.i64(i64, i64)

define i64 @paadd_w(i64 %a, i64 %b) {
; RV64P-LABEL: paadd_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paadd.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paadd.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psaddu.b.i64(i64, i64)

define i64 @psaddu_b(i64 %a, i64 %b) {
; RV64P-LABEL: psaddu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psaddu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psaddu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psaddu.h.i64(i64, i64)

define i64 @psaddu_h(i64 %a, i64 %b) {
; RV64P-LABEL: psaddu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psaddu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psaddu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psaddu.w.i64(i64, i64)

define i64 @psaddu_w(i64 %a, i64 %b) {
; RV64P-LABEL: psaddu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psaddu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psaddu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paaddu.b.i64(i64, i64)

define i64 @paaddu_b(i64 %a, i64 %b) {
; RV64P-LABEL: paaddu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paaddu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paaddu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paaddu.h.i64(i64, i64)

define i64 @paaddu_h(i64 %a, i64 %b) {
; RV64P-LABEL: paaddu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paaddu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paaddu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paaddu.w.i64(i64, i64)

define i64 @paaddu_w(i64 %a, i64 %b) {
; RV64P-LABEL: paaddu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paaddu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paaddu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psub.b.i64(i64, i64)

define i64 @psub_b(i64 %a, i64 %b) {
; RV64P-LABEL: psub_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psub.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psub.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psub.h.i64(i64, i64)

define i64 @psub_h(i64 %a, i64 %b) {
; RV64P-LABEL: psub_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psub.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psub.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psub.w.i64(i64, i64)

define i64 @psub_w(i64 %a, i64 %b) {
; RV64P-LABEL: psub_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psub.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psub.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssub.b.i64(i64, i64)

define i64 @pssub_b(i64 %a, i64 %b) {
; RV64P-LABEL: pssub_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssub.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssub.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssub.h.i64(i64, i64)

define i64 @pssub_h(i64 %a, i64 %b) {
; RV64P-LABEL: pssub_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssub.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssub.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssub.w.i64(i64, i64)

define i64 @pssub_w(i64 %a, i64 %b) {
; RV64P-LABEL: pssub_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssub.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssub.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasub.b.i64(i64, i64)

define i64 @pasub_b(i64 %a, i64 %b) {
; RV64P-LABEL: pasub_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasub.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasub.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasub.h.i64(i64, i64)

define i64 @pasub_h(i64 %a, i64 %b) {
; RV64P-LABEL: pasub_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasub.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasub.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasub.w.i64(i64, i64)

define i64 @pasub_w(i64 %a, i64 %b) {
; RV64P-LABEL: pasub_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasub.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasub.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssubu.b.i64(i64, i64)

define i64 @pssubu_b(i64 %a, i64 %b) {
; RV64P-LABEL: pssubu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssubu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssubu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssubu.h.i64(i64, i64)

define i64 @pssubu_h(i64 %a, i64 %b) {
; RV64P-LABEL: pssubu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssubu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssubu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssubu.w.i64(i64, i64)

define i64 @pssubu_w(i64 %a, i64 %b) {
; RV64P-LABEL: pssubu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssubu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssubu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasubu.b.i64(i64, i64)

define i64 @pasubu_b(i64 %a, i64 %b) {
; RV64P-LABEL: pasubu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasubu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasubu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasubu.h.i64(i64, i64)

define i64 @pasubu_h(i64 %a, i64 %b) {
; RV64P-LABEL: pasubu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasubu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasubu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasubu.w.i64(i64, i64)

define i64 @pasubu_w(i64 %a, i64 %b) {
; RV64P-LABEL: pasubu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasubu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasubu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pdif.b.i64(i64, i64)

define i64 @pdif_b(i64 %a, i64 %b) {
; RV64P-LABEL: pdif_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pdif.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pdif.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pdif.h.i64(i64, i64)

define i64 @pdif_h(i64 %a, i64 %b) {
; RV64P-LABEL: pdif_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pdif.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pdif.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pdifu.b.i64(i64, i64)

define i64 @pdifu_b(i64 %a, i64 %b) {
; RV64P-LABEL: pdifu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pdifu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pdifu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pdifu.h.i64(i64, i64)

define i64 @pdifu_h(i64 %a, i64 %b) {
; RV64P-LABEL: pdifu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pdifu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pdifu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.slx.i64(i64, i64)

define i64 @slx(i64 %a, i64 %b) {
; RV64P-LABEL: slx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    slx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.slx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmul.h.b01.i64.i64(i64, i64)

define i64 @pmul_h_b01(i64 %a, i64 %b) {
; RV64P-LABEL: pmul_h_b01:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmul.h.b01 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmul.h.b01.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmul.w.h01.i64.i64(i64, i64)

define i64 @pmul_w_h01(i64 %a, i64 %b) {
; RV64P-LABEL: pmul_w_h01:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmul.w.h01 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmul.w.h01.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulu.h.b01.i64.i64(i64, i64)

define i64 @pmulu_h_b01(i64 %a, i64 %b) {
; RV64P-LABEL: pmulu_h_b01:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulu.h.b01 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulu.h.b01.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulu.w.h01.i64.i64(i64, i64)

define i64 @pmulu_w_h01(i64 %a, i64 %b) {
; RV64P-LABEL: pmulu_w_h01:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulu.w.h01 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulu.w.h01.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mul.w01.i64(i64, i64)

define i64 @mul_w01(i64 %a, i64 %b) {
; RV64P-LABEL: mul_w01:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mul.w01 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mul.w01.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mulu.w01.i64(i64, i64)

define i64 @mulu_w01(i64 %a, i64 %b) {
; RV64P-LABEL: mulu_w01:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mulu.w01 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mulu.w01.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psh1add.h.i64(i64, i64)

define i64 @psh1add_h(i64 %a, i64 %b) {
; RV64P-LABEL: psh1add_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psh1add.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psh1add.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psh1add.w.i64(i64, i64)

define i64 @psh1add_w(i64 %a, i64 %b) {
; RV64P-LABEL: psh1add_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psh1add.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psh1add.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssh1sadd.h.i64(i64, i64)

define i64 @pssh1sadd_h(i64 %a, i64 %b) {
; RV64P-LABEL: pssh1sadd_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssh1sadd.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssh1sadd.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssh1sadd.w.i64(i64, i64)

define i64 @pssh1sadd_w(i64 %a, i64 %b) {
; RV64P-LABEL: pssh1sadd_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssh1sadd.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssh1sadd.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.unzip8p.i64(i64, i64)

define i64 @unzip8p(i64 %a, i64 %b) {
; RV64P-LABEL: unzip8p:
; RV64P:       # %bb.0:
; RV64P-NEXT:    unzip8p a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.unzip8p.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.unzip16p.i64(i64, i64)

define i64 @unzip16p(i64 %a, i64 %b) {
; RV64P-LABEL: unzip16p:
; RV64P:       # %bb.0:
; RV64P-NEXT:    unzip16p a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.unzip16p.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.unzip8hp.i64(i64, i64)

define i64 @unzip8hp(i64 %a, i64 %b) {
; RV64P-LABEL: unzip8hp:
; RV64P:       # %bb.0:
; RV64P-NEXT:    unzip8hp a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.unzip8hp.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.unzip16hp.i64(i64, i64)

define i64 @unzip16hp(i64 %a, i64 %b) {
; RV64P-LABEL: unzip16hp:
; RV64P:       # %bb.0:
; RV64P-NEXT:    unzip16hp a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.unzip16hp.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.zip8p.i64(i64, i64)

define i64 @zip8p(i64 %a, i64 %b) {
; RV64P-LABEL: zip8p:
; RV64P:       # %bb.0:
; RV64P-NEXT:    zip8p a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.zip8p.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.zip16p.i64(i64, i64)

define i64 @zip16p(i64 %a, i64 %b) {
; RV64P-LABEL: zip16p:
; RV64P:       # %bb.0:
; RV64P-NEXT:    zip16p a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.zip16p.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.zip8hp.i64(i64, i64)

define i64 @zip8hp(i64 %a, i64 %b) {
; RV64P-LABEL: zip8hp:
; RV64P:       # %bb.0:
; RV64P-NEXT:    zip8hp a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.zip8hp.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.zip16hp.i64(i64, i64)

define i64 @zip16hp(i64 %a, i64 %b) {
; RV64P-LABEL: zip16hp:
; RV64P:       # %bb.0:
; RV64P-NEXT:    zip16hp a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.zip16hp.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmul.h.b00.i64.i64(i64, i64)

define i64 @pmul_h_b00(i64 %a, i64 %b) {
; RV64P-LABEL: pmul_h_b00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmul.h.b00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmul.h.b00.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmul.w.h00.i64.i64(i64, i64)

define i64 @pmul_w_h00(i64 %a, i64 %b) {
; RV64P-LABEL: pmul_w_h00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmul.w.h00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmul.w.h00.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmul.h.b11.i64.i64(i64, i64)

define i64 @pmul_h_b11(i64 %a, i64 %b) {
; RV64P-LABEL: pmul_h_b11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmul.h.b11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmul.h.b11.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmul.w.h11.i64.i64(i64, i64)

define i64 @pmul_w_h11(i64 %a, i64 %b) {
; RV64P-LABEL: pmul_w_h11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmul.w.h11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmul.w.h11.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulu.h.b00.i64.i64(i64, i64)

define i64 @pmulu_h_b00(i64 %a, i64 %b) {
; RV64P-LABEL: pmulu_h_b00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulu.h.b00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulu.h.b00.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulu.w.h00.i64.i64(i64, i64)

define i64 @pmulu_w_h00(i64 %a, i64 %b) {
; RV64P-LABEL: pmulu_w_h00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulu.w.h00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulu.w.h00.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulu.h.b11.i64.i64(i64, i64)

define i64 @pmulu_h_b11(i64 %a, i64 %b) {
; RV64P-LABEL: pmulu_h_b11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulu.h.b11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulu.h.b11.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulu.w.h11.i64.i64(i64, i64)

define i64 @pmulu_w_h11(i64 %a, i64 %b) {
; RV64P-LABEL: pmulu_w_h11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulu.w.h11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulu.w.h11.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulsu.h.b00.i64.i64.i64(i64, i64)

define i64 @pmulsu_h_b00(i64 %a, i64 %b) {
; RV64P-LABEL: pmulsu_h_b00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulsu.h.b00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulsu.h.b00.i64.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulsu.w.h00.i64.i64.i64(i64, i64)

define i64 @pmulsu_w_h00(i64 %a, i64 %b) {
; RV64P-LABEL: pmulsu_w_h00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulsu.w.h00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulsu.w.h00.i64.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulsu.h.b11.i64.i64.i64(i64, i64)

define i64 @pmulsu_h_b11(i64 %a, i64 %b) {
; RV64P-LABEL: pmulsu_h_b11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulsu.h.b11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulsu.h.b11.i64.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmulsu.w.h11.i64.i64.i64(i64, i64)

define i64 @pmulsu_w_h11(i64 %a, i64 %b) {
; RV64P-LABEL: pmulsu_w_h11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmulsu.w.h11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmulsu.w.h11.i64.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mul.w00.i64.i64(i64, i64)

define i64 @mul_w00(i64 %a, i64 %b) {
; RV64P-LABEL: mul_w00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mul.w00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mul.w00.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mul.w11.i64.i64(i64, i64)

define i64 @mul_w11(i64 %a, i64 %b) {
; RV64P-LABEL: mul_w11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mul.w11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mul.w11.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mulu.w00.i64.i64(i64, i64)

define i64 @mulu_w00(i64 %a, i64 %b) {
; RV64P-LABEL: mulu_w00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mulu.w00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mulu.w00.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mulu.w11.i64.i64(i64, i64)

define i64 @mulu_w11(i64 %a, i64 %b) {
; RV64P-LABEL: mulu_w11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mulu.w11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mulu.w11.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mulsu.w00.i64.i64.i64(i64, i64)

define i64 @mulsu_w00(i64 %a, i64 %b) {
; RV64P-LABEL: mulsu_w00:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mulsu.w00 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mulsu.w00.i64.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.mulsu.w11.i64.i64.i64(i64, i64)

define i64 @mulsu_w11(i64 %a, i64 %b) {
; RV64P-LABEL: mulsu_w11:
; RV64P:       # %bb.0:
; RV64P-NEXT:    mulsu.w11 a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.mulsu.w11.i64.i64.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppack.h.i64(i64, i64)

define i64 @ppack_h(i64 %a, i64 %b) {
; RV64P-LABEL: ppack_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppack.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppack.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppack.w.i64(i64, i64)

define i64 @ppack_w(i64 %a, i64 %b) {
; RV64P-LABEL: ppack_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppack.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppack.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppackbt.h.i64(i64, i64)

define i64 @ppackbt_h(i64 %a, i64 %b) {
; RV64P-LABEL: ppackbt_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppackbt.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppackbt.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppackbt.w.i64(i64, i64)

define i64 @ppackbt_w(i64 %a, i64 %b) {
; RV64P-LABEL: ppackbt_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppackbt.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppackbt.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.packbt.i64(i64, i64)

define i64 @packbt(i64 %a, i64 %b) {
; RV64P-LABEL: packbt:
; RV64P:       # %bb.0:
; RV64P-NEXT:    packbt a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.packbt.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppacktb.h.i64(i64, i64)

define i64 @ppacktb_h(i64 %a, i64 %b) {
; RV64P-LABEL: ppacktb_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppacktb.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppacktb.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppacktb.w.i64(i64, i64)

define i64 @ppacktb_w(i64 %a, i64 %b) {
; RV64P-LABEL: ppacktb_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppacktb.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppacktb.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.packtb.i64(i64, i64)

define i64 @packtb(i64 %a, i64 %b) {
; RV64P-LABEL: packtb:
; RV64P:       # %bb.0:
; RV64P-NEXT:    packtb a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.packtb.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppackt.h.i64(i64, i64)

define i64 @ppackt_h(i64 %a, i64 %b) {
; RV64P-LABEL: ppackt_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppackt.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppackt.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.ppackt.w.i64(i64, i64)

define i64 @ppackt_w(i64 %a, i64 %b) {
; RV64P-LABEL: ppackt_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    ppackt.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.ppackt.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.packt.i64(i64, i64)

define i64 @packt(i64 %a, i64 %b) {
; RV64P-LABEL: packt:
; RV64P:       # %bb.0:
; RV64P-NEXT:    packt a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.packt.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pas.hx.i64(i64, i64)

define i64 @pas_hx(i64 %a, i64 %b) {
; RV64P-LABEL: pas_hx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pas.hx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pas.hx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pas.wx.i64(i64, i64)

define i64 @pas_wx(i64 %a, i64 %b) {
; RV64P-LABEL: pas_wx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pas.wx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pas.wx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psa.hx.i64(i64, i64)

define i64 @psa_hx(i64 %a, i64 %b) {
; RV64P-LABEL: psa_hx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psa.hx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psa.hx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psa.wx.i64(i64, i64)

define i64 @psa_wx(i64 %a, i64 %b) {
; RV64P-LABEL: psa_wx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psa.wx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psa.wx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psas.hx.i64(i64, i64)

define i64 @psas_hx(i64 %a, i64 %b) {
; RV64P-LABEL: psas_hx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psas.hx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psas.hx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.psas.wx.i64(i64, i64)

define i64 @psas_wx(i64 %a, i64 %b) {
; RV64P-LABEL: psas_wx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    psas.wx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.psas.wx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssa.hx.i64(i64, i64)

define i64 @pssa_hx(i64 %a, i64 %b) {
; RV64P-LABEL: pssa_hx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssa.hx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssa.hx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pssa.wx.i64(i64, i64)

define i64 @pssa_wx(i64 %a, i64 %b) {
; RV64P-LABEL: pssa_wx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pssa.wx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pssa.wx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paas.hx.i64(i64, i64)

define i64 @paas_hx(i64 %a, i64 %b) {
; RV64P-LABEL: paas_hx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paas.hx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paas.hx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.paas.wx.i64(i64, i64)

define i64 @paas_wx(i64 %a, i64 %b) {
; RV64P-LABEL: paas_wx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    paas.wx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.paas.wx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasa.hx.i64(i64, i64)

define i64 @pasa_hx(i64 %a, i64 %b) {
; RV64P-LABEL: pasa_hx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasa.hx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasa.hx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pasa.wx.i64(i64, i64)

define i64 @pasa_wx(i64 %a, i64 %b) {
; RV64P-LABEL: pasa_wx:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pasa.wx a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pasa.wx.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmseq.b.i64(i64, i64)

define i64 @pmseq_b(i64 %a, i64 %b) {
; RV64P-LABEL: pmseq_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmseq.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmseq.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmseq.h.i64(i64, i64)

define i64 @pmseq_h(i64 %a, i64 %b) {
; RV64P-LABEL: pmseq_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmseq.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmseq.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmseq.w.i64(i64, i64)

define i64 @pmseq_w(i64 %a, i64 %b) {
; RV64P-LABEL: pmseq_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmseq.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmseq.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmslt.b.i64(i64, i64)

define i64 @pmslt_b(i64 %a, i64 %b) {
; RV64P-LABEL: pmslt_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmslt.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmslt.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmslt.h.i64(i64, i64)

define i64 @pmslt_h(i64 %a, i64 %b) {
; RV64P-LABEL: pmslt_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmslt.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmslt.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmslt.w.i64(i64, i64)

define i64 @pmslt_w(i64 %a, i64 %b) {
; RV64P-LABEL: pmslt_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmslt.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmslt.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmsltu.b.i64(i64, i64)

define i64 @pmsltu_b(i64 %a, i64 %b) {
; RV64P-LABEL: pmsltu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmsltu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmsltu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmsltu.h.i64(i64, i64)

define i64 @pmsltu_h(i64 %a, i64 %b) {
; RV64P-LABEL: pmsltu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmsltu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmsltu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmsltu.w.i64(i64, i64)

define i64 @pmsltu_w(i64 %a, i64 %b) {
; RV64P-LABEL: pmsltu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmsltu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmsltu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmin.b.i64(i64, i64)

define i64 @pmin_b(i64 %a, i64 %b) {
; RV64P-LABEL: pmin_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmin.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmin.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmin.h.i64(i64, i64)

define i64 @pmin_h(i64 %a, i64 %b) {
; RV64P-LABEL: pmin_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmin.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmin.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmin.w.i64(i64, i64)

define i64 @pmin_w(i64 %a, i64 %b) {
; RV64P-LABEL: pmin_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmin.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmin.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pminu.b.i64(i64, i64)

define i64 @pminu_b(i64 %a, i64 %b) {
; RV64P-LABEL: pminu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pminu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pminu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pminu.h.i64(i64, i64)

define i64 @pminu_h(i64 %a, i64 %b) {
; RV64P-LABEL: pminu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pminu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pminu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pminu.w.i64(i64, i64)

define i64 @pminu_w(i64 %a, i64 %b) {
; RV64P-LABEL: pminu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pminu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pminu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmax.b.i64(i64, i64)

define i64 @pmax_b(i64 %a, i64 %b) {
; RV64P-LABEL: pmax_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmax.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmax.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmax.h.i64(i64, i64)

define i64 @pmax_h(i64 %a, i64 %b) {
; RV64P-LABEL: pmax_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmax.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmax.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmax.w.i64(i64, i64)

define i64 @pmax_w(i64 %a, i64 %b) {
; RV64P-LABEL: pmax_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmax.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmax.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmaxu.b.i64(i64, i64)

define i64 @pmaxu_b(i64 %a, i64 %b) {
; RV64P-LABEL: pmaxu_b:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmaxu.b a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmaxu.b.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmaxu.h.i64(i64, i64)

define i64 @pmaxu_h(i64 %a, i64 %b) {
; RV64P-LABEL: pmaxu_h:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmaxu.h a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmaxu.h.i64(i64 %a, i64 %b)
    ret i64 %tmp
}

declare i64 @llvm.riscv.pmaxu.w.i64(i64, i64)

define i64 @pmaxu_w(i64 %a, i64 %b) {
; RV64P-LABEL: pmaxu_w:
; RV64P:       # %bb.0:
; RV64P-NEXT:    pmaxu.w a0, a0, a1
; RV64P-NEXT:    ret
    %tmp = call i64 @llvm.riscv.pmaxu.w.i64(i64 %a, i64 %b)
    ret i64 %tmp
}
