; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -mattr=+wavefrontsize64 -verify-machineinstrs < %s | FileCheck %s --check-prefix=GFX11-W64

; Test GFX11 WMMA with amdgpu_kernel (compute) calling convention - Wave64 mode
; Wave64 uses smaller accumulator vectors compared to Wave32

declare <4 x float> @llvm.amdgcn.wmma.f32.16x16x16.f16(<16 x half>, <16 x half>, <4 x float>)
declare <4 x float> @llvm.amdgcn.wmma.f32.16x16x16.bf16(<16 x i16>, <16 x i16>, <4 x float>)
declare <4 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu8(i1, <4 x i32>, i1, <4 x i32>, <4 x i32>, i1)
declare <4 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu4(i1, <2 x i32>, i1, <2 x i32>, <4 x i32>, i1)

define amdgpu_kernel void @test_wmma_f32_16x16x16_f16_kernel_w64(
; GFX11-W64-LABEL: test_wmma_f32_16x16x16_f16_kernel_w64:
; GFX11-W64:       ; %bb.0: ; %entry
; GFX11-W64-NEXT:    s_load_b256 s[0:7], s[2:3], 0x0
; GFX11-W64-NEXT:    v_mov_b32_e32 v20, 0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    s_load_b256 s[8:15], s[0:1], 0x0
; GFX11-W64-NEXT:    s_load_b256 s[16:23], s[2:3], 0x0
; GFX11-W64-NEXT:    s_load_b128 s[0:3], s[4:5], 0x0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    v_mov_b32_e32 v0, s8
; GFX11-W64-NEXT:    v_mov_b32_e32 v8, s16
; GFX11-W64-NEXT:    v_mov_b32_e32 v19, s3
; GFX11-W64-NEXT:    v_mov_b32_e32 v1, s9
; GFX11-W64-NEXT:    v_mov_b32_e32 v2, s10
; GFX11-W64-NEXT:    v_mov_b32_e32 v3, s11
; GFX11-W64-NEXT:    v_mov_b32_e32 v4, s12
; GFX11-W64-NEXT:    v_mov_b32_e32 v5, s13
; GFX11-W64-NEXT:    v_mov_b32_e32 v6, s14
; GFX11-W64-NEXT:    v_mov_b32_e32 v7, s15
; GFX11-W64-NEXT:    v_mov_b32_e32 v9, s17
; GFX11-W64-NEXT:    v_mov_b32_e32 v10, s18
; GFX11-W64-NEXT:    v_mov_b32_e32 v11, s19
; GFX11-W64-NEXT:    v_mov_b32_e32 v12, s20
; GFX11-W64-NEXT:    v_mov_b32_e32 v13, s21
; GFX11-W64-NEXT:    v_mov_b32_e32 v14, s22
; GFX11-W64-NEXT:    v_mov_b32_e32 v15, s23
; GFX11-W64-NEXT:    v_mov_b32_e32 v18, s2
; GFX11-W64-NEXT:    v_mov_b32_e32 v17, s1
; GFX11-W64-NEXT:    v_mov_b32_e32 v16, s0
; GFX11-W64-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-W64-NEXT:    v_wmma_f32_16x16x16_f16 v[16:19], v[0:7], v[8:15], v[16:19]
; GFX11-W64-NEXT:    global_store_b128 v20, v[16:19], s[6:7]
; GFX11-W64-NEXT:    s_nop 0
; GFX11-W64-NEXT:    s_sendmsg sendmsg(MSG_DEALLOC_VGPRS)
; GFX11-W64-NEXT:    s_endpgm
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <16 x half>, ptr addrspace(1) %a_ptr, align 32
  %b = load <16 x half>, ptr addrspace(1) %b_ptr, align 32
  %c = load <4 x float>, ptr addrspace(1) %c_ptr, align 16
  %res = call <4 x float> @llvm.amdgcn.wmma.f32.16x16x16.f16(<16 x half> %a, <16 x half> %b, <4 x float> %c)
  store <4 x float> %res, ptr addrspace(1) %out, align 16
  ret void
}

define amdgpu_kernel void @test_wmma_f32_16x16x16_bf16_kernel_w64(
; GFX11-W64-LABEL: test_wmma_f32_16x16x16_bf16_kernel_w64:
; GFX11-W64:       ; %bb.0: ; %entry
; GFX11-W64-NEXT:    s_load_b256 s[0:7], s[2:3], 0x0
; GFX11-W64-NEXT:    v_mov_b32_e32 v20, 0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    s_load_b256 s[8:15], s[0:1], 0x0
; GFX11-W64-NEXT:    s_load_b256 s[16:23], s[2:3], 0x0
; GFX11-W64-NEXT:    s_load_b128 s[0:3], s[4:5], 0x0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    v_mov_b32_e32 v0, s8
; GFX11-W64-NEXT:    v_mov_b32_e32 v8, s16
; GFX11-W64-NEXT:    v_mov_b32_e32 v19, s3
; GFX11-W64-NEXT:    v_mov_b32_e32 v1, s9
; GFX11-W64-NEXT:    v_mov_b32_e32 v2, s10
; GFX11-W64-NEXT:    v_mov_b32_e32 v3, s11
; GFX11-W64-NEXT:    v_mov_b32_e32 v4, s12
; GFX11-W64-NEXT:    v_mov_b32_e32 v5, s13
; GFX11-W64-NEXT:    v_mov_b32_e32 v6, s14
; GFX11-W64-NEXT:    v_mov_b32_e32 v7, s15
; GFX11-W64-NEXT:    v_mov_b32_e32 v9, s17
; GFX11-W64-NEXT:    v_mov_b32_e32 v10, s18
; GFX11-W64-NEXT:    v_mov_b32_e32 v11, s19
; GFX11-W64-NEXT:    v_mov_b32_e32 v12, s20
; GFX11-W64-NEXT:    v_mov_b32_e32 v13, s21
; GFX11-W64-NEXT:    v_mov_b32_e32 v14, s22
; GFX11-W64-NEXT:    v_mov_b32_e32 v15, s23
; GFX11-W64-NEXT:    v_mov_b32_e32 v18, s2
; GFX11-W64-NEXT:    v_mov_b32_e32 v17, s1
; GFX11-W64-NEXT:    v_mov_b32_e32 v16, s0
; GFX11-W64-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-W64-NEXT:    v_wmma_f32_16x16x16_bf16 v[16:19], v[0:7], v[8:15], v[16:19]
; GFX11-W64-NEXT:    global_store_b128 v20, v[16:19], s[6:7]
; GFX11-W64-NEXT:    s_nop 0
; GFX11-W64-NEXT:    s_sendmsg sendmsg(MSG_DEALLOC_VGPRS)
; GFX11-W64-NEXT:    s_endpgm
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <16 x i16>, ptr addrspace(1) %a_ptr, align 32
  %b = load <16 x i16>, ptr addrspace(1) %b_ptr, align 32
  %c = load <4 x float>, ptr addrspace(1) %c_ptr, align 16
  %res = call <4 x float> @llvm.amdgcn.wmma.f32.16x16x16.bf16(<16 x i16> %a, <16 x i16> %b, <4 x float> %c)
  store <4 x float> %res, ptr addrspace(1) %out, align 16
  ret void
}

define amdgpu_kernel void @test_wmma_i32_16x16x16_iu8_kernel_w64(
; GFX11-W64-LABEL: test_wmma_i32_16x16x16_iu8_kernel_w64:
; GFX11-W64:       ; %bb.0: ; %entry
; GFX11-W64-NEXT:    s_load_b256 s[0:7], s[2:3], 0x0
; GFX11-W64-NEXT:    v_mov_b32_e32 v12, 0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    s_load_b128 s[8:11], s[0:1], 0x0
; GFX11-W64-NEXT:    s_load_b128 s[0:3], s[2:3], 0x0
; GFX11-W64-NEXT:    s_load_b128 s[12:15], s[4:5], 0x0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    v_mov_b32_e32 v0, s8
; GFX11-W64-NEXT:    v_mov_b32_e32 v7, s3
; GFX11-W64-NEXT:    v_mov_b32_e32 v8, s12
; GFX11-W64-NEXT:    v_mov_b32_e32 v1, s9
; GFX11-W64-NEXT:    v_mov_b32_e32 v2, s10
; GFX11-W64-NEXT:    v_mov_b32_e32 v3, s11
; GFX11-W64-NEXT:    v_mov_b32_e32 v6, s2
; GFX11-W64-NEXT:    v_mov_b32_e32 v5, s1
; GFX11-W64-NEXT:    v_mov_b32_e32 v4, s0
; GFX11-W64-NEXT:    v_mov_b32_e32 v9, s13
; GFX11-W64-NEXT:    v_mov_b32_e32 v10, s14
; GFX11-W64-NEXT:    v_mov_b32_e32 v11, s15
; GFX11-W64-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-W64-NEXT:    v_wmma_i32_16x16x16_iu8 v[8:11], v[0:3], v[4:7], v[8:11]
; GFX11-W64-NEXT:    global_store_b128 v12, v[8:11], s[6:7]
; GFX11-W64-NEXT:    s_nop 0
; GFX11-W64-NEXT:    s_sendmsg sendmsg(MSG_DEALLOC_VGPRS)
; GFX11-W64-NEXT:    s_endpgm
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <4 x i32>, ptr addrspace(1) %a_ptr, align 16
  %b = load <4 x i32>, ptr addrspace(1) %b_ptr, align 16
  %c = load <4 x i32>, ptr addrspace(1) %c_ptr, align 16
  %res = call <4 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu8(i1 0, <4 x i32> %a, i1 0, <4 x i32> %b, <4 x i32> %c, i1 0)
  store <4 x i32> %res, ptr addrspace(1) %out, align 16
  ret void
}

define amdgpu_kernel void @test_wmma_i32_16x16x16_iu4_kernel_w64(
; GFX11-W64-LABEL: test_wmma_i32_16x16x16_iu4_kernel_w64:
; GFX11-W64:       ; %bb.0: ; %entry
; GFX11-W64-NEXT:    s_load_b256 s[0:7], s[2:3], 0x0
; GFX11-W64-NEXT:    v_mov_b32_e32 v8, 0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    s_load_b64 s[8:9], s[0:1], 0x0
; GFX11-W64-NEXT:    s_load_b64 s[10:11], s[2:3], 0x0
; GFX11-W64-NEXT:    s_load_b128 s[0:3], s[4:5], 0x0
; GFX11-W64-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-W64-NEXT:    v_mov_b32_e32 v4, s8
; GFX11-W64-NEXT:    v_mov_b32_e32 v6, s10
; GFX11-W64-NEXT:    v_mov_b32_e32 v0, s0
; GFX11-W64-NEXT:    v_mov_b32_e32 v5, s9
; GFX11-W64-NEXT:    v_mov_b32_e32 v7, s11
; GFX11-W64-NEXT:    v_mov_b32_e32 v1, s1
; GFX11-W64-NEXT:    v_mov_b32_e32 v2, s2
; GFX11-W64-NEXT:    v_mov_b32_e32 v3, s3
; GFX11-W64-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-W64-NEXT:    v_wmma_i32_16x16x16_iu4 v[0:3], v[4:5], v[6:7], v[0:3]
; GFX11-W64-NEXT:    global_store_b128 v8, v[0:3], s[6:7]
; GFX11-W64-NEXT:    s_nop 0
; GFX11-W64-NEXT:    s_sendmsg sendmsg(MSG_DEALLOC_VGPRS)
; GFX11-W64-NEXT:    s_endpgm
    ptr addrspace(1) %a_ptr,
    ptr addrspace(1) %b_ptr,
    ptr addrspace(1) %c_ptr,
    ptr addrspace(1) %out) {
entry:
  %a = load <2 x i32>, ptr addrspace(1) %a_ptr, align 8
  %b = load <2 x i32>, ptr addrspace(1) %b_ptr, align 8
  %c = load <4 x i32>, ptr addrspace(1) %c_ptr, align 16
  %res = call <4 x i32> @llvm.amdgcn.wmma.i32.16x16x16.iu4(i1 0, <2 x i32> %a, i1 0, <2 x i32> %b, <4 x i32> %c, i1 0)
  store <4 x i32> %res, ptr addrspace(1) %out, align 16
  ret void
}
