; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define float @bitcast_i32_to_f32(i32 %a, i32 %b) {
; SI-LABEL: bitcast_i32_to_f32:
; VI-LABEL: bitcast_i32_to_f32:
; GFX9-LABEL: bitcast_i32_to_f32:
; GFX11-TRUE16-LABEL: bitcast_i32_to_f32:
; GFX11-FAKE16-LABEL: bitcast_i32_to_f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg float @bitcast_i32_to_f32_scalar(i32 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i32_to_f32_scalar:
; VI-LABEL: bitcast_i32_to_f32_scalar:
; GFX9-LABEL: bitcast_i32_to_f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_i32_to_f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_i32_to_f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define i32 @bitcast_f32_to_i32(float %a, i32 %b) {
; SI-LABEL: bitcast_f32_to_i32:
; VI-LABEL: bitcast_f32_to_i32:
; GFX9-LABEL: bitcast_f32_to_i32:
; GFX11-TRUE16-LABEL: bitcast_f32_to_i32:
; GFX11-FAKE16-LABEL: bitcast_f32_to_i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast float %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg i32 @bitcast_f32_to_i32_scalar(float inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f32_to_i32_scalar:
; VI-LABEL: bitcast_f32_to_i32_scalar:
; GFX9-LABEL: bitcast_f32_to_i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_f32_to_i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_f32_to_i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast float %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define <2 x i16> @bitcast_i32_to_v2i16(i32 %a, i32 %b) {
; SI-LABEL: bitcast_i32_to_v2i16:
; VI-LABEL: bitcast_i32_to_v2i16:
; GFX9-LABEL: bitcast_i32_to_v2i16:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v2i16:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v2i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x i16> @bitcast_i32_to_v2i16_scalar(i32 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i32_to_v2i16_scalar:
; VI-LABEL: bitcast_i32_to_v2i16_scalar:
; GFX9-LABEL: bitcast_i32_to_v2i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v2i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v2i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define i32 @bitcast_v2i16_to_i32(<2 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v2i16_to_i32:
; VI-LABEL: bitcast_v2i16_to_i32:
; GFX9-LABEL: bitcast_v2i16_to_i32:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_i32:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg i32 @bitcast_v2i16_to_i32_scalar(<2 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i16_to_i32_scalar:
; VI-LABEL: bitcast_v2i16_to_i32_scalar:
; GFX9-LABEL: bitcast_v2i16_to_i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define <2 x half> @bitcast_i32_to_v2f16(i32 %a, i32 %b) {
; SI-LABEL: bitcast_i32_to_v2f16:
; VI-LABEL: bitcast_i32_to_v2f16:
; GFX9-LABEL: bitcast_i32_to_v2f16:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v2f16:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v2f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x half> @bitcast_i32_to_v2f16_scalar(i32 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i32_to_v2f16_scalar:
; VI-LABEL: bitcast_i32_to_v2f16_scalar:
; GFX9-LABEL: bitcast_i32_to_v2f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v2f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v2f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define i32 @bitcast_v2f16_to_i32(<2 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v2f16_to_i32:
; VI-LABEL: bitcast_v2f16_to_i32:
; GFX9-LABEL: bitcast_v2f16_to_i32:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_i32:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg i32 @bitcast_v2f16_to_i32_scalar(<2 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f16_to_i32_scalar:
; VI-LABEL: bitcast_v2f16_to_i32_scalar:
; GFX9-LABEL: bitcast_v2f16_to_i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define <2 x bfloat> @bitcast_i32_to_v2bf16(i32 %a, i32 %b) {
; SI-LABEL: bitcast_i32_to_v2bf16:
; VI-LABEL: bitcast_i32_to_v2bf16:
; GFX9-LABEL: bitcast_i32_to_v2bf16:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v2bf16:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v2bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x bfloat> @bitcast_i32_to_v2bf16_scalar(i32 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i32_to_v2bf16_scalar:
; VI-LABEL: bitcast_i32_to_v2bf16_scalar:
; GFX9-LABEL: bitcast_i32_to_v2bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v2bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v2bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define i32 @bitcast_v2bf16_to_i32(<2 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v2bf16_to_i32:
; VI-LABEL: bitcast_v2bf16_to_i32:
; GFX9-LABEL: bitcast_v2bf16_to_i32:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_i32:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg i32 @bitcast_v2bf16_to_i32_scalar(<2 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2bf16_to_i32_scalar:
; VI-LABEL: bitcast_v2bf16_to_i32_scalar:
; GFX9-LABEL: bitcast_v2bf16_to_i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define <1 x i32> @bitcast_i32_to_v1i32(i32 %a, i32 %b) {
; SI-LABEL: bitcast_i32_to_v1i32:
; VI-LABEL: bitcast_i32_to_v1i32:
; GFX9-LABEL: bitcast_i32_to_v1i32:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v1i32:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v1i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <1 x i32> @bitcast_i32_to_v1i32_scalar(i32 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i32_to_v1i32_scalar:
; VI-LABEL: bitcast_i32_to_v1i32_scalar:
; GFX9-LABEL: bitcast_i32_to_v1i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v1i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v1i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define i32 @bitcast_v1i32_to_i32(<1 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v1i32_to_i32:
; VI-LABEL: bitcast_v1i32_to_i32:
; GFX9-LABEL: bitcast_v1i32_to_i32:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_i32:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg i32 @bitcast_v1i32_to_i32_scalar(<1 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v1i32_to_i32_scalar:
; VI-LABEL: bitcast_v1i32_to_i32_scalar:
; GFX9-LABEL: bitcast_v1i32_to_i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define <4 x i8> @bitcast_i32_to_v4i8(i32 %a, i32 %b) {
; SI-LABEL: bitcast_i32_to_v4i8:
; VI-LABEL: bitcast_i32_to_v4i8:
; GFX9-LABEL: bitcast_i32_to_v4i8:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v4i8:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v4i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <4 x i8> @bitcast_i32_to_v4i8_scalar(i32 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i32_to_v4i8_scalar:
; VI-LABEL: bitcast_i32_to_v4i8_scalar:
; GFX9-LABEL: bitcast_i32_to_v4i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_i32_to_v4i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_i32_to_v4i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i32 %a, 3
  %a2 = bitcast i32 %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast i32 %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define i32 @bitcast_v4i8_to_i32(<4 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v4i8_to_i32:
; VI-LABEL: bitcast_v4i8_to_i32:
; GFX9-LABEL: bitcast_v4i8_to_i32:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_i32:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define inreg i32 @bitcast_v4i8_to_i32_scalar(<4 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i8_to_i32_scalar:
; VI-LABEL: bitcast_v4i8_to_i32_scalar:
; GFX9-LABEL: bitcast_v4i8_to_i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to i32
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to i32
  br label %end

end:
  %phi = phi i32 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i32 %phi
}

define <2 x i16> @bitcast_f32_to_v2i16(float %a, i32 %b) {
; SI-LABEL: bitcast_f32_to_v2i16:
; VI-LABEL: bitcast_f32_to_v2i16:
; GFX9-LABEL: bitcast_f32_to_v2i16:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v2i16:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v2i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x i16> @bitcast_f32_to_v2i16_scalar(float inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f32_to_v2i16_scalar:
; VI-LABEL: bitcast_f32_to_v2i16_scalar:
; GFX9-LABEL: bitcast_f32_to_v2i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v2i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v2i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define float @bitcast_v2i16_to_f32(<2 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v2i16_to_f32:
; VI-LABEL: bitcast_v2i16_to_f32:
; GFX9-LABEL: bitcast_v2i16_to_f32:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_f32:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg float @bitcast_v2i16_to_f32_scalar(<2 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i16_to_f32_scalar:
; VI-LABEL: bitcast_v2i16_to_f32_scalar:
; GFX9-LABEL: bitcast_v2i16_to_f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define <2 x half> @bitcast_f32_to_v2f16(float %a, i32 %b) {
; SI-LABEL: bitcast_f32_to_v2f16:
; VI-LABEL: bitcast_f32_to_v2f16:
; GFX9-LABEL: bitcast_f32_to_v2f16:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v2f16:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v2f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x half> @bitcast_f32_to_v2f16_scalar(float inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f32_to_v2f16_scalar:
; VI-LABEL: bitcast_f32_to_v2f16_scalar:
; GFX9-LABEL: bitcast_f32_to_v2f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v2f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v2f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define float @bitcast_v2f16_to_f32(<2 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v2f16_to_f32:
; VI-LABEL: bitcast_v2f16_to_f32:
; GFX9-LABEL: bitcast_v2f16_to_f32:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_f32:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg float @bitcast_v2f16_to_f32_scalar(<2 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f16_to_f32_scalar:
; VI-LABEL: bitcast_v2f16_to_f32_scalar:
; GFX9-LABEL: bitcast_v2f16_to_f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define <2 x bfloat> @bitcast_f32_to_v2bf16(float %a, i32 %b) {
; SI-LABEL: bitcast_f32_to_v2bf16:
; VI-LABEL: bitcast_f32_to_v2bf16:
; GFX9-LABEL: bitcast_f32_to_v2bf16:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v2bf16:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v2bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x bfloat> @bitcast_f32_to_v2bf16_scalar(float inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f32_to_v2bf16_scalar:
; VI-LABEL: bitcast_f32_to_v2bf16_scalar:
; GFX9-LABEL: bitcast_f32_to_v2bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v2bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v2bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define float @bitcast_v2bf16_to_f32(<2 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v2bf16_to_f32:
; VI-LABEL: bitcast_v2bf16_to_f32:
; GFX9-LABEL: bitcast_v2bf16_to_f32:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_f32:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg float @bitcast_v2bf16_to_f32_scalar(<2 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2bf16_to_f32_scalar:
; VI-LABEL: bitcast_v2bf16_to_f32_scalar:
; GFX9-LABEL: bitcast_v2bf16_to_f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define <1 x i32> @bitcast_f32_to_v1i32(float %a, i32 %b) {
; SI-LABEL: bitcast_f32_to_v1i32:
; VI-LABEL: bitcast_f32_to_v1i32:
; GFX9-LABEL: bitcast_f32_to_v1i32:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v1i32:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v1i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <1 x i32> @bitcast_f32_to_v1i32_scalar(float inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f32_to_v1i32_scalar:
; VI-LABEL: bitcast_f32_to_v1i32_scalar:
; GFX9-LABEL: bitcast_f32_to_v1i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v1i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v1i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define float @bitcast_v1i32_to_f32(<1 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v1i32_to_f32:
; VI-LABEL: bitcast_v1i32_to_f32:
; GFX9-LABEL: bitcast_v1i32_to_f32:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_f32:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg float @bitcast_v1i32_to_f32_scalar(<1 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v1i32_to_f32_scalar:
; VI-LABEL: bitcast_v1i32_to_f32_scalar:
; GFX9-LABEL: bitcast_v1i32_to_f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define <4 x i8> @bitcast_f32_to_v4i8(float %a, i32 %b) {
; SI-LABEL: bitcast_f32_to_v4i8:
; VI-LABEL: bitcast_f32_to_v4i8:
; GFX9-LABEL: bitcast_f32_to_v4i8:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v4i8:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v4i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <4 x i8> @bitcast_f32_to_v4i8_scalar(float inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f32_to_v4i8_scalar:
; VI-LABEL: bitcast_f32_to_v4i8_scalar:
; GFX9-LABEL: bitcast_f32_to_v4i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_f32_to_v4i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_f32_to_v4i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd float %a, 1.000000e+00
  %a2 = bitcast float %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast float %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define float @bitcast_v4i8_to_f32(<4 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v4i8_to_f32:
; VI-LABEL: bitcast_v4i8_to_f32:
; GFX9-LABEL: bitcast_v4i8_to_f32:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_f32:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define inreg float @bitcast_v4i8_to_f32_scalar(<4 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i8_to_f32_scalar:
; VI-LABEL: bitcast_v4i8_to_f32_scalar:
; GFX9-LABEL: bitcast_v4i8_to_f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to float
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to float
  br label %end

end:
  %phi = phi float [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret float %phi
}

define <2 x half> @bitcast_v2i16_to_v2f16(<2 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v2i16_to_v2f16:
; VI-LABEL: bitcast_v2i16_to_v2f16:
; GFX9-LABEL: bitcast_v2i16_to_v2f16:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v2f16:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v2f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x half> @bitcast_v2i16_to_v2f16_scalar(<2 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i16_to_v2f16_scalar:
; VI-LABEL: bitcast_v2i16_to_v2f16_scalar:
; GFX9-LABEL: bitcast_v2i16_to_v2f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v2f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v2f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define <2 x i16> @bitcast_v2f16_to_v2i16(<2 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v2f16_to_v2i16:
; VI-LABEL: bitcast_v2f16_to_v2i16:
; GFX9-LABEL: bitcast_v2f16_to_v2i16:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v2i16:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v2i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x i16> @bitcast_v2f16_to_v2i16_scalar(<2 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f16_to_v2i16_scalar:
; VI-LABEL: bitcast_v2f16_to_v2i16_scalar:
; GFX9-LABEL: bitcast_v2f16_to_v2i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v2i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v2i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define <2 x bfloat> @bitcast_v2i16_to_v2bf16(<2 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v2i16_to_v2bf16:
; VI-LABEL: bitcast_v2i16_to_v2bf16:
; GFX9-LABEL: bitcast_v2i16_to_v2bf16:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v2bf16:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v2bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x bfloat> @bitcast_v2i16_to_v2bf16_scalar(<2 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i16_to_v2bf16_scalar:
; VI-LABEL: bitcast_v2i16_to_v2bf16_scalar:
; GFX9-LABEL: bitcast_v2i16_to_v2bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v2bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v2bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define <2 x i16> @bitcast_v2bf16_to_v2i16(<2 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v2bf16_to_v2i16:
; VI-LABEL: bitcast_v2bf16_to_v2i16:
; GFX9-LABEL: bitcast_v2bf16_to_v2i16:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v2i16:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v2i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x i16> @bitcast_v2bf16_to_v2i16_scalar(<2 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2bf16_to_v2i16_scalar:
; VI-LABEL: bitcast_v2bf16_to_v2i16_scalar:
; GFX9-LABEL: bitcast_v2bf16_to_v2i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v2i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v2i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define <1 x i32> @bitcast_v2i16_to_v1i32(<2 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v2i16_to_v1i32:
; VI-LABEL: bitcast_v2i16_to_v1i32:
; GFX9-LABEL: bitcast_v2i16_to_v1i32:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v1i32:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v1i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <1 x i32> @bitcast_v2i16_to_v1i32_scalar(<2 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i16_to_v1i32_scalar:
; VI-LABEL: bitcast_v2i16_to_v1i32_scalar:
; GFX9-LABEL: bitcast_v2i16_to_v1i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v1i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v1i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define <2 x i16> @bitcast_v1i32_to_v2i16(<1 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v1i32_to_v2i16:
; VI-LABEL: bitcast_v1i32_to_v2i16:
; GFX9-LABEL: bitcast_v1i32_to_v2i16:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v2i16:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v2i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x i16> @bitcast_v1i32_to_v2i16_scalar(<1 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v1i32_to_v2i16_scalar:
; VI-LABEL: bitcast_v1i32_to_v2i16_scalar:
; GFX9-LABEL: bitcast_v1i32_to_v2i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v2i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v2i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define <4 x i8> @bitcast_v2i16_to_v4i8(<2 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v2i16_to_v4i8:
; VI-LABEL: bitcast_v2i16_to_v4i8:
; GFX9-LABEL: bitcast_v2i16_to_v4i8:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v4i8:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v4i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <4 x i8> @bitcast_v2i16_to_v4i8_scalar(<2 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i16_to_v4i8_scalar:
; VI-LABEL: bitcast_v2i16_to_v4i8_scalar:
; GFX9-LABEL: bitcast_v2i16_to_v4i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i16_to_v4i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i16_to_v4i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i16> %a, splat (i16 3)
  %a2 = bitcast <2 x i16> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i16> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define <2 x i16> @bitcast_v4i8_to_v2i16(<4 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v4i8_to_v2i16:
; VI-LABEL: bitcast_v4i8_to_v2i16:
; GFX9-LABEL: bitcast_v4i8_to_v2i16:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v2i16:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v2i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define inreg <2 x i16> @bitcast_v4i8_to_v2i16_scalar(<4 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i8_to_v2i16_scalar:
; VI-LABEL: bitcast_v4i8_to_v2i16_scalar:
; GFX9-LABEL: bitcast_v4i8_to_v2i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v2i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v2i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x i16>
  br label %end

end:
  %phi = phi <2 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i16> %phi
}

define <2 x bfloat> @bitcast_v2f16_to_v2bf16(<2 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v2f16_to_v2bf16:
; VI-LABEL: bitcast_v2f16_to_v2bf16:
; GFX9-LABEL: bitcast_v2f16_to_v2bf16:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v2bf16:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v2bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x bfloat> @bitcast_v2f16_to_v2bf16_scalar(<2 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f16_to_v2bf16_scalar:
; VI-LABEL: bitcast_v2f16_to_v2bf16_scalar:
; GFX9-LABEL: bitcast_v2f16_to_v2bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v2bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v2bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define <2 x half> @bitcast_v2bf16_to_v2f16(<2 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v2bf16_to_v2f16:
; VI-LABEL: bitcast_v2bf16_to_v2f16:
; GFX9-LABEL: bitcast_v2bf16_to_v2f16:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v2f16:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v2f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x half> @bitcast_v2bf16_to_v2f16_scalar(<2 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2bf16_to_v2f16_scalar:
; VI-LABEL: bitcast_v2bf16_to_v2f16_scalar:
; GFX9-LABEL: bitcast_v2bf16_to_v2f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v2f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v2f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define <1 x i32> @bitcast_v2f16_to_v1i32(<2 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v2f16_to_v1i32:
; VI-LABEL: bitcast_v2f16_to_v1i32:
; GFX9-LABEL: bitcast_v2f16_to_v1i32:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v1i32:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v1i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <1 x i32> @bitcast_v2f16_to_v1i32_scalar(<2 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f16_to_v1i32_scalar:
; VI-LABEL: bitcast_v2f16_to_v1i32_scalar:
; GFX9-LABEL: bitcast_v2f16_to_v1i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v1i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v1i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define <2 x half> @bitcast_v1i32_to_v2f16(<1 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v1i32_to_v2f16:
; VI-LABEL: bitcast_v1i32_to_v2f16:
; GFX9-LABEL: bitcast_v1i32_to_v2f16:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v2f16:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v2f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x half> @bitcast_v1i32_to_v2f16_scalar(<1 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v1i32_to_v2f16_scalar:
; VI-LABEL: bitcast_v1i32_to_v2f16_scalar:
; GFX9-LABEL: bitcast_v1i32_to_v2f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v2f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v2f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define <4 x i8> @bitcast_v2f16_to_v4i8(<2 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v2f16_to_v4i8:
; VI-LABEL: bitcast_v2f16_to_v4i8:
; GFX9-LABEL: bitcast_v2f16_to_v4i8:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v4i8:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v4i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <4 x i8> @bitcast_v2f16_to_v4i8_scalar(<2 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f16_to_v4i8_scalar:
; VI-LABEL: bitcast_v2f16_to_v4i8_scalar:
; GFX9-LABEL: bitcast_v2f16_to_v4i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f16_to_v4i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f16_to_v4i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <2 x half> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x half> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define <2 x half> @bitcast_v4i8_to_v2f16(<4 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v4i8_to_v2f16:
; VI-LABEL: bitcast_v4i8_to_v2f16:
; GFX9-LABEL: bitcast_v4i8_to_v2f16:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v2f16:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v2f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define inreg <2 x half> @bitcast_v4i8_to_v2f16_scalar(<4 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i8_to_v2f16_scalar:
; VI-LABEL: bitcast_v4i8_to_v2f16_scalar:
; GFX9-LABEL: bitcast_v4i8_to_v2f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v2f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v2f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x half>
  br label %end

end:
  %phi = phi <2 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x half> %phi
}

define <1 x i32> @bitcast_v2bf16_to_v1i32(<2 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v2bf16_to_v1i32:
; VI-LABEL: bitcast_v2bf16_to_v1i32:
; GFX9-LABEL: bitcast_v2bf16_to_v1i32:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v1i32:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v1i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <1 x i32> @bitcast_v2bf16_to_v1i32_scalar(<2 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2bf16_to_v1i32_scalar:
; VI-LABEL: bitcast_v2bf16_to_v1i32_scalar:
; GFX9-LABEL: bitcast_v2bf16_to_v1i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v1i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v1i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define <2 x bfloat> @bitcast_v1i32_to_v2bf16(<1 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v1i32_to_v2bf16:
; VI-LABEL: bitcast_v1i32_to_v2bf16:
; GFX9-LABEL: bitcast_v1i32_to_v2bf16:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v2bf16:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v2bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x bfloat> @bitcast_v1i32_to_v2bf16_scalar(<1 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v1i32_to_v2bf16_scalar:
; VI-LABEL: bitcast_v1i32_to_v2bf16_scalar:
; GFX9-LABEL: bitcast_v1i32_to_v2bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v2bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v2bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define <4 x i8> @bitcast_v2bf16_to_v4i8(<2 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v2bf16_to_v4i8:
; VI-LABEL: bitcast_v2bf16_to_v4i8:
; GFX9-LABEL: bitcast_v2bf16_to_v4i8:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v4i8:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v4i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <4 x i8> @bitcast_v2bf16_to_v4i8_scalar(<2 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2bf16_to_v4i8_scalar:
; VI-LABEL: bitcast_v2bf16_to_v4i8_scalar:
; GFX9-LABEL: bitcast_v2bf16_to_v4i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2bf16_to_v4i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2bf16_to_v4i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <2 x bfloat> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x bfloat> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define <2 x bfloat> @bitcast_v4i8_to_v2bf16(<4 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v4i8_to_v2bf16:
; VI-LABEL: bitcast_v4i8_to_v2bf16:
; GFX9-LABEL: bitcast_v4i8_to_v2bf16:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v2bf16:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v2bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define inreg <2 x bfloat> @bitcast_v4i8_to_v2bf16_scalar(<4 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i8_to_v2bf16_scalar:
; VI-LABEL: bitcast_v4i8_to_v2bf16_scalar:
; GFX9-LABEL: bitcast_v4i8_to_v2bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v2bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v2bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <2 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <2 x bfloat>
  br label %end

end:
  %phi = phi <2 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x bfloat> %phi
}

define <4 x i8> @bitcast_v1i32_to_v4i8(<1 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v1i32_to_v4i8:
; VI-LABEL: bitcast_v1i32_to_v4i8:
; GFX9-LABEL: bitcast_v1i32_to_v4i8:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v4i8:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v4i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define inreg <4 x i8> @bitcast_v1i32_to_v4i8_scalar(<1 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v1i32_to_v4i8_scalar:
; VI-LABEL: bitcast_v1i32_to_v4i8_scalar:
; GFX9-LABEL: bitcast_v1i32_to_v4i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v1i32_to_v4i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v1i32_to_v4i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <1 x i32> %a, splat (i32 3)
  %a2 = bitcast <1 x i32> %a1 to <4 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <1 x i32> %a to <4 x i8>
  br label %end

end:
  %phi = phi <4 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i8> %phi
}

define <1 x i32> @bitcast_v4i8_to_v1i32(<4 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v4i8_to_v1i32:
; VI-LABEL: bitcast_v4i8_to_v1i32:
; GFX9-LABEL: bitcast_v4i8_to_v1i32:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v1i32:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v1i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}

define inreg <1 x i32> @bitcast_v4i8_to_v1i32_scalar(<4 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i8_to_v1i32_scalar:
; VI-LABEL: bitcast_v4i8_to_v1i32_scalar:
; GFX9-LABEL: bitcast_v4i8_to_v1i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i8_to_v1i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i8_to_v1i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i8> %a, splat (i8 3)
  %a2 = bitcast <4 x i8> %a1 to <1 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i8> %a to <1 x i32>
  br label %end

end:
  %phi = phi <1 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <1 x i32> %phi
}
