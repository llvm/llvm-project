# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=amdgcn--amdhsa -mcpu=gfx940 -run-pass=peephole-opt -o - %s | FileCheck %s

---
name:            reg_sequence_extract_subreg_sub0_from_regsequence_sub0_sub1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: reg_sequence_extract_subreg_sub0_from_regsequence_sub0_sub1
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64_align2 = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_64_align2 = REG_SEQUENCE [[COPY]].sub0, %subreg.sub0, [[V_MOV_B32_e32_]], %subreg.sub1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[REG_SEQUENCE]].sub0
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64_align2 = COPY $vgpr0_vgpr1
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_64_align2 = REG_SEQUENCE %0.sub0, %subreg.sub0, %1, %subreg.sub1
    %3:vgpr_32 = COPY %2.sub0
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_extract_subreg_sub1_from_regsequence_sub0_sub1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: reg_sequence_extract_subreg_sub1_from_regsequence_sub0_sub1
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64_align2 = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_64_align2 = REG_SEQUENCE [[COPY]].sub0, %subreg.sub0, [[V_MOV_B32_e32_]], %subreg.sub1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[V_MOV_B32_e32_]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64_align2 = COPY $vgpr0_vgpr1
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_64_align2 = REG_SEQUENCE %0.sub0, %subreg.sub0, %1, %subreg.sub1
    %3:vgpr_32 = COPY %2.sub1
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_extract_subreg_sub0_from_regsequence_sub1_sub0
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: reg_sequence_extract_subreg_sub0_from_regsequence_sub1_sub0
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64_align2 = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_64_align2 = REG_SEQUENCE [[V_MOV_B32_e32_]], %subreg.sub1, [[COPY]].sub0, %subreg.sub0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[REG_SEQUENCE]].sub0
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64_align2 = COPY $vgpr0_vgpr1
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_64_align2 = REG_SEQUENCE %1, %subreg.sub1, %0.sub0, %subreg.sub0
    %3:vgpr_32 = COPY %2.sub0
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_extract_subreg_sub1_from_regsequence_sub1_sub0
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: reg_sequence_extract_subreg_sub1_from_regsequence_sub1_sub0
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64_align2 = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_64_align2 = REG_SEQUENCE [[V_MOV_B32_e32_]], %subreg.sub1, [[COPY]].sub0, %subreg.sub0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[V_MOV_B32_e32_]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64_align2 = COPY $vgpr0_vgpr1
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_64_align2 = REG_SEQUENCE %1, %subreg.sub1, %0.sub0, %subreg.sub0
    %3:vgpr_32 = COPY %2.sub1
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_extract_subreg_sub0_from_vreg96
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr1_vgpr2

    ; CHECK-LABEL: name: reg_sequence_extract_subreg_sub0_from_vreg96
    ; CHECK: liveins: $vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64 = COPY $vgpr1_vgpr2
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_96 = REG_SEQUENCE [[COPY]].sub0, %subreg.sub0, [[V_MOV_B32_e32_]], %subreg.sub1, [[COPY]].sub1, %subreg.sub2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[REG_SEQUENCE]].sub0
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64 = COPY $vgpr1_vgpr2
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_96 = REG_SEQUENCE %0.sub0, %subreg.sub0, %1, %subreg.sub1, %0.sub1, %subreg.sub2
    %3:vgpr_32 = COPY %2.sub0
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_extract_subreg_sub1_from_vreg96
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr1_vgpr2

    ; CHECK-LABEL: name: reg_sequence_extract_subreg_sub1_from_vreg96
    ; CHECK: liveins: $vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64 = COPY $vgpr1_vgpr2
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_96 = REG_SEQUENCE [[COPY]].sub0, %subreg.sub0, [[V_MOV_B32_e32_]], %subreg.sub1, [[COPY]].sub1, %subreg.sub2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[REG_SEQUENCE]].sub0
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64 = COPY $vgpr1_vgpr2
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_96 = REG_SEQUENCE %0.sub0, %subreg.sub0, %1, %subreg.sub1, %0.sub1, %subreg.sub2
    %3:vgpr_32 = COPY %2.sub0
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_compose_0
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr1_vgpr2

    ; CHECK-LABEL: name: reg_sequence_compose_0
    ; CHECK: liveins: $vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_64 = COPY $vgpr1_vgpr2
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_96 = REG_SEQUENCE [[COPY]], %subreg.sub0_sub1, [[V_MOV_B32_e32_]], %subreg.sub2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[REG_SEQUENCE]].sub1
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_64 = COPY $vgpr1_vgpr2
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_96 = REG_SEQUENCE %0, %subreg.sub0_sub1, %1, %subreg.sub2
    %3:vgpr_32 = COPY %2.sub1
    S_ENDPGM 0, implicit %3

...

---
name:            reg_sequence_compose_1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr1_vgpr2_vgpr3_vgpr4

    ; CHECK-LABEL: name: reg_sequence_compose_1
    ; CHECK: liveins: $vgpr1_vgpr2_vgpr3_vgpr4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vreg_128 = COPY $vgpr1_vgpr2_vgpr3_vgpr4
    ; CHECK-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; CHECK-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_96 = REG_SEQUENCE [[COPY]].sub2_sub3, %subreg.sub0_sub1, [[COPY]].sub0, %subreg.sub2
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY [[REG_SEQUENCE]].sub1
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY1]]
    %0:vreg_128 = COPY $vgpr1_vgpr2_vgpr3_vgpr4
    %1:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %2:vreg_96 = REG_SEQUENCE %0.sub2_sub3, %subreg.sub0_sub1, %0.sub0, %subreg.sub2
    %3:vgpr_32 = COPY %2.sub1
    S_ENDPGM 0, implicit %3

...



