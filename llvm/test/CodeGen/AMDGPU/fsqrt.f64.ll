; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -global-isel=0 -march=amdgcn -mcpu=tahiti -verify-machineinstrs < %s | FileCheck -check-prefixes=GCN,SDAG %s
; RUN: llc -global-isel=0 -march=amdgcn -mcpu=fiji -verify-machineinstrs < %s | FileCheck -check-prefixes=GCN,SDAG %s

; RUN: llc -global-isel=1 -march=amdgcn -mcpu=tahiti -verify-machineinstrs < %s | FileCheck -check-prefixes=GCN,GISEL %s
; RUN: llc -global-isel=1 -march=amdgcn -mcpu=fiji -verify-machineinstrs < %s | FileCheck -check-prefixes=GCN,GISEL %s

define double @v_sqrt_f64(double %x) {
; GCN-LABEL: v_sqrt_f64:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_fneg(double %x) {
; GCN-LABEL: v_sqrt_f64_fneg:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e64 v[0:1], -v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %x.neg = fneg double %x
  %result = call double @llvm.sqrt.f64(double %x.neg)
  ret double %result
}

define double @v_sqrt_f64_fabs(double %x) {
; GCN-LABEL: v_sqrt_f64_fabs:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e64 v[0:1], |v[0:1]|
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %x.fabs = call double @llvm.fabs.f64(double %x)
  %result = call double @llvm.sqrt.f64(double %x.fabs)
  ret double %result
}

define double @v_sqrt_f64_fneg_fabs(double %x) {
; GCN-LABEL: v_sqrt_f64_fneg_fabs:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e64 v[0:1], -|v[0:1]|
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %x.fabs = call double @llvm.fabs.f64(double %x)
  %x.fabs.neg = fneg double %x.fabs
  %result = call double @llvm.sqrt.f64(double %x.fabs.neg)
  ret double %result
}

define double @v_sqrt_f64_ninf(double %x) {
; GCN-LABEL: v_sqrt_f64_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call ninf double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_no_infs_attribute(double %x) "no-infs-fp-math"="true" {
; GCN-LABEL: v_sqrt_f64_no_infs_attribute:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call ninf double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_nnan(double %x) {
; GCN-LABEL: v_sqrt_f64_nnan:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nnan double @llvm.sqrt.f64(double %x)
  ret double %result
}

define amdgpu_ps <2 x i32> @s_sqrt_f64(double inreg %x) {
; GCN-LABEL: s_sqrt_f64:
; GCN:       ; %bb.0:
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], s[0:1]
; GCN-NEXT:    v_readfirstlane_b32 s0, v0
; GCN-NEXT:    v_readfirstlane_b32 s1, v1
; GCN-NEXT:    ; return to shader part epilog
  %result = call double @llvm.sqrt.f64(double %x)
  %cast = bitcast double %result to <2 x i32>
  %cast.0 = extractelement <2 x i32> %cast, i32 0
  %cast.1 = extractelement <2 x i32> %cast, i32 1
  %lane.0 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.0)
  %lane.1 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.1)
  %insert.0 = insertelement <2 x i32> poison, i32 %lane.0, i32 0
  %insert.1 = insertelement <2 x i32> %insert.0, i32 %lane.1, i32 1
  ret <2 x i32> %insert.1
}

define amdgpu_ps <2 x i32> @s_sqrt_f64_ninf(double inreg %x) {
; GCN-LABEL: s_sqrt_f64_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], s[0:1]
; GCN-NEXT:    v_readfirstlane_b32 s0, v0
; GCN-NEXT:    v_readfirstlane_b32 s1, v1
; GCN-NEXT:    ; return to shader part epilog
  %result = call ninf double @llvm.sqrt.f64(double %x)
  %cast = bitcast double %result to <2 x i32>
  %cast.0 = extractelement <2 x i32> %cast, i32 0
  %cast.1 = extractelement <2 x i32> %cast, i32 1
  %lane.0 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.0)
  %lane.1 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.1)
  %insert.0 = insertelement <2 x i32> poison, i32 %lane.0, i32 0
  %insert.1 = insertelement <2 x i32> %insert.0, i32 %lane.1, i32 1
  ret <2 x i32> %insert.1
}

define amdgpu_ps <2 x i32> @s_sqrt_f64_afn(double inreg %x) {
; GCN-LABEL: s_sqrt_f64_afn:
; GCN:       ; %bb.0:
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], s[0:1]
; GCN-NEXT:    v_readfirstlane_b32 s0, v0
; GCN-NEXT:    v_readfirstlane_b32 s1, v1
; GCN-NEXT:    ; return to shader part epilog
  %result = call afn double @llvm.sqrt.f64(double %x)
  %cast = bitcast double %result to <2 x i32>
  %cast.0 = extractelement <2 x i32> %cast, i32 0
  %cast.1 = extractelement <2 x i32> %cast, i32 1
  %lane.0 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.0)
  %lane.1 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.1)
  %insert.0 = insertelement <2 x i32> poison, i32 %lane.0, i32 0
  %insert.1 = insertelement <2 x i32> %insert.0, i32 %lane.1, i32 1
  ret <2 x i32> %insert.1
}

define amdgpu_ps <2 x i32> @s_sqrt_f64_afn_nnan_ninf(double inreg %x) {
; GCN-LABEL: s_sqrt_f64_afn_nnan_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], s[0:1]
; GCN-NEXT:    v_readfirstlane_b32 s0, v0
; GCN-NEXT:    v_readfirstlane_b32 s1, v1
; GCN-NEXT:    ; return to shader part epilog
  %result = call afn nnan ninf double @llvm.sqrt.f64(double %x)
  %cast = bitcast double %result to <2 x i32>
  %cast.0 = extractelement <2 x i32> %cast, i32 0
  %cast.1 = extractelement <2 x i32> %cast, i32 1
  %lane.0 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.0)
  %lane.1 = call i32 @llvm.amdgcn.readfirstlane(i32 %cast.1)
  %insert.0 = insertelement <2 x i32> poison, i32 %lane.0, i32 0
  %insert.1 = insertelement <2 x i32> %insert.0, i32 %lane.1, i32 1
  ret <2 x i32> %insert.1
}

define double @v_sqrt_f64_nsz(double %x) {
; GCN-LABEL: v_sqrt_f64_nsz:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_nnan_ninf(double %x) {
; GCN-LABEL: v_sqrt_f64_nnan_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nnan ninf double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_nnan_ninf_nsz(double %x) {
; GCN-LABEL: v_sqrt_f64_nnan_ninf_nsz:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nnan ninf nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_afn(double %x) {
; GCN-LABEL: v_sqrt_f64_afn:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_afn_nsz(double %x) {
; GCN-LABEL: v_sqrt_f64_afn_nsz:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define <2 x double> @v_sqrt_v2f64_afn(<2 x double> %x) {
; GCN-LABEL: v_sqrt_v2f64_afn:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    v_sqrt_f64_e32 v[2:3], v[2:3]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn <2 x double> @llvm.sqrt.v2f64(<2 x double> %x)
  ret <2 x double> %result
}

define double @v_sqrt_f64_afn_nnan(double %x) {
; GCN-LABEL: v_sqrt_f64_afn_nnan:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn nnan double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64_fabs_afn_ninf(double %x) {
; GCN-LABEL: v_sqrt_f64_fabs_afn_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e64 v[0:1], |v[0:1]|
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %fabs = call double @llvm.fabs.f64(double %x)
  %result = call afn ninf double @llvm.sqrt.f64(double %fabs)
  ret double %result
}

define double @v_sqrt_f64_afn_nnan_ninf(double %x) {
; GCN-LABEL: v_sqrt_f64_afn_nnan_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn nnan ninf double @llvm.sqrt.f64(double %x)
  ret double %result
}

define <2 x double> @v_sqrt_v2f64_afn_nnan_ninf(<2 x double> %x) {
; GCN-LABEL: v_sqrt_v2f64_afn_nnan_ninf:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    v_sqrt_f64_e32 v[2:3], v[2:3]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn nnan ninf <2 x double> @llvm.sqrt.v2f64(<2 x double> %x)
  ret <2 x double> %result
}

define double @v_sqrt_f64_afn_nnan_ninf_nsz(double %x) {
; GCN-LABEL: v_sqrt_f64_afn_nnan_ninf_nsz:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call afn nnan ninf nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64__approx_func_fp_math(double %x) #2 {
; GCN-LABEL: v_sqrt_f64__approx_func_fp_math:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64__enough_unsafe_attrs(double %x) #3 {
; GCN-LABEL: v_sqrt_f64__enough_unsafe_attrs:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define double @v_sqrt_f64__unsafe_attr(double %x) #4 {
; GCN-LABEL: v_sqrt_f64__unsafe_attr:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call nsz double @llvm.sqrt.f64(double %x)
  ret double %result
}

define <2 x double> @v_sqrt_v2f64(<2 x double> %x) {
; GCN-LABEL: v_sqrt_v2f64:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    v_sqrt_f64_e32 v[2:3], v[2:3]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %x)
  ret <2 x double> %result
}

define <3 x double> @v_sqrt_v3f64(<3 x double> %x) {
; GCN-LABEL: v_sqrt_v3f64:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GCN-NEXT:    v_sqrt_f64_e32 v[0:1], v[0:1]
; GCN-NEXT:    v_sqrt_f64_e32 v[2:3], v[2:3]
; GCN-NEXT:    v_sqrt_f64_e32 v[4:5], v[4:5]
; GCN-NEXT:    s_setpc_b64 s[30:31]
  %result = call <3 x double> @llvm.sqrt.v3f64(<3 x double> %x)
  ret <3 x double> %result
}

declare double @llvm.fabs.f64(double) #0
declare double @llvm.sqrt.f64(double) #0
declare <2 x double> @llvm.sqrt.v2f64(<2 x double>) #0
declare <3 x double> @llvm.sqrt.v3f64(<3 x double>) #0
declare i32 @llvm.amdgcn.readfirstlane(i32) #1

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nounwind willreturn memory(none) }
attributes #2 = { "approx-func-fp-math"="true" }
attributes #3 = { "approx-func-fp-math"="true" "no-nans-fp-math"="true" "no-infs-fp-math"="true" }
attributes #4 = { "unsafe-fp-math"="true" }
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GISEL: {{.*}}
; SDAG: {{.*}}
