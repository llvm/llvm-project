; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx1010 < %s | FileCheck -check-prefixes=GFX10PLUS,GFX10,GFX10-SDAG %s
; RUN: llc -global-isel=1 -global-isel-abort=2 -mtriple=amdgcn -mcpu=gfx1010 < %s | FileCheck -check-prefixes=GFX10PLUS,GFX10,GFX10-GISEL %s
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx1100 -amdgpu-enable-vopd=0 < %s | FileCheck -check-prefixes=GFX10PLUS,GFX11,GFX11-SDAG %s
; RUN: llc -global-isel=1 -global-isel-abort=2 -mtriple=amdgcn -mcpu=gfx1100 -amdgpu-enable-vopd=0 < %s | FileCheck -check-prefixes=GFX10PLUS,GFX11,GFX11-GISEL %s
; RUN: llc -global-isel=0 -mtriple=amdgcn -mcpu=gfx1200 -amdgpu-enable-vopd=0 < %s | FileCheck -check-prefixes=GFX10PLUS,GFX12,GFX12-SDAG %s
; RUN: llc -global-isel=1 -global-isel-abort=2 -mtriple=amdgcn -mcpu=gfx1200 -amdgpu-enable-vopd=0 < %s | FileCheck -check-prefixes=GFX10PLUS,GFX12,GFX12-GISEL %s

define amdgpu_kernel void @dpp8_test(ptr addrspace(1) %out, i32 %in) {
; GFX10-LABEL: dpp8_test:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_clause 0x1
; GFX10-NEXT:    s_load_dword s2, s[4:5], 0x2c
; GFX10-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24
; GFX10-NEXT:    v_mov_b32_e32 v1, 0
; GFX10-NEXT:    s_waitcnt lgkmcnt(0)
; GFX10-NEXT:    v_mov_b32_e32 v0, s2
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_dword v1, v0, s[0:1]
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: dpp8_test:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_clause 0x1
; GFX11-NEXT:    s_load_b32 s2, s[4:5], 0x2c
; GFX11-NEXT:    s_load_b64 s[0:1], s[4:5], 0x24
; GFX11-NEXT:    v_mov_b32_e32 v1, 0
; GFX11-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-NEXT:    v_mov_b32_e32 v0, s2
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    global_store_b32 v1, v0, s[0:1]
; GFX11-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_test:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    s_load_b96 s[0:2], s[4:5], 0x24
; GFX12-NEXT:    v_mov_b32_e32 v1, 0
; GFX12-NEXT:    s_wait_kmcnt 0x0
; GFX12-NEXT:    v_mov_b32_e32 v0, s2
; GFX12-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b32 v1, v0, s[0:1]
; GFX12-NEXT:    s_endpgm
  %tmp0 = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 %in, i32 1) #0
  store i32 %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @dpp8_wait_states(ptr addrspace(1) %out, i32 %in) {
; GFX10-LABEL: dpp8_wait_states:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_clause 0x1
; GFX10-NEXT:    s_load_dword s2, s[4:5], 0x2c
; GFX10-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x24
; GFX10-NEXT:    v_mov_b32_e32 v1, 0
; GFX10-NEXT:    s_waitcnt lgkmcnt(0)
; GFX10-NEXT:    v_mov_b32_e32 v0, s2
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[5,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_dword v1, v0, s[0:1]
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: dpp8_wait_states:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_clause 0x1
; GFX11-NEXT:    s_load_b32 s2, s[4:5], 0x2c
; GFX11-NEXT:    s_load_b64 s[0:1], s[4:5], 0x24
; GFX11-NEXT:    v_mov_b32_e32 v1, 0
; GFX11-NEXT:    s_waitcnt lgkmcnt(0)
; GFX11-NEXT:    v_mov_b32_e32 v0, s2
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[5,0,0,0,0,0,0,0]
; GFX11-NEXT:    global_store_b32 v1, v0, s[0:1]
; GFX11-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_wait_states:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    s_load_b96 s[0:2], s[4:5], 0x24
; GFX12-NEXT:    v_mov_b32_e32 v1, 0
; GFX12-NEXT:    s_wait_kmcnt 0x0
; GFX12-NEXT:    v_mov_b32_e32 v0, s2
; GFX12-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[5,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b32 v1, v0, s[0:1]
; GFX12-NEXT:    s_endpgm
  %tmp0 = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 %in, i32 1) #0
  %tmp1 = call i32 @llvm.amdgcn.mov.dpp8.i32(i32 %tmp0, i32 5) #0
  store i32 %tmp1, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_i64(i64 %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_i64:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_i64:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_i64:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_i64:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_i64:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_i64:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call i64 @llvm.amdgcn.mov.dpp8.i64(i64 %in, i32 1)
  store i64 %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v2i32(<2 x i32> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v2i32:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v2i32:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v2i32:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v2i32:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v2i32:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v2i32:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <2 x i32> @llvm.amdgcn.mov.dpp8.v3i32(<2 x i32> %in, i32 1)
  store <2 x i32> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v3i32(<3 x i32> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v3i32:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx3 v[3:4], v[0:2], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v3i32:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx3 v[3:4], v[0:2], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v3i32:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v3i32:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v3i32:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v3i32:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <3 x i32> @llvm.amdgcn.mov.dpp8.v3i32(<3 x i32> %in, i32 1)
  store <3 x i32> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v4i32(<4 x i32> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v4i32:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx4 v[4:5], v[0:3], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v4i32:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx4 v[4:5], v[0:3], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v4i32:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b128 v[4:5], v[0:3], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v4i32:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b128 v[4:5], v[0:3], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v4i32:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b128 v[4:5], v[0:3], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v4i32:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b128 v[4:5], v[0:3], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <4 x i32> @llvm.amdgcn.mov.dpp8.v3i32(<4 x i32> %in, i32 1)
  store <4 x i32> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_p0(ptr %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_p0:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_p0:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_p0:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_p0:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_p0:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_p0:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call ptr @llvm.amdgcn.mov.dpp8.p0(ptr %in, i32 1)
  store ptr %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_p3(ptr addrspace(3) %in, ptr addrspace(1) %out) {
; GFX10-LABEL: dpp8_p3:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_dword v[1:2], v0, off
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: dpp8_p3:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    global_store_b32 v[1:2], v0, off
; GFX11-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_p3:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b32 v[1:2], v0, off
; GFX12-NEXT:    s_endpgm
  %tmp0 = call ptr addrspace(3) @llvm.amdgcn.mov.dpp8.v3p3(ptr addrspace(3) %in, i32 1)
  store ptr addrspace(3) %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v3p3(<3 x ptr addrspace(3)> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v3p3:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx3 v[3:4], v[0:2], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v3p3:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx3 v[3:4], v[0:2], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v3p3:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v3p3:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v3p3:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v3p3:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <3 x ptr addrspace(3)> @llvm.amdgcn.mov.dpp8.v3p3(<3 x ptr addrspace(3)> %in, i32 1)
  store <3 x ptr addrspace(3)> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_i16(i16 %in, ptr addrspace(1) %out) {
; GFX10-LABEL: dpp8_i16:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_short v[1:2], v0, off
; GFX10-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_i16:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    ; implicit-def: $vgpr3
; GFX11-SDAG-NEXT:    v_mov_b16_e32 v3.l, v0.l
; GFX11-SDAG-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b16 v[1:2], v3, off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_i16:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b16 v[1:2], v0, off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_i16:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b16 v[1:2], v0, off
; GFX12-NEXT:    s_endpgm
  %tmp0 = call i16 @llvm.amdgcn.mov.dpp8.i16(i16 %in, i32 1)
  store i16 %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v4i16(<4 x i16> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v4i16:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v4i16:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v4i16:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v4i16:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v4i16:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v4i16:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <4 x i16> @llvm.amdgcn.mov.dpp8.v4i16(<4 x i16> %in, i32 1)
  store <4 x i16> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v4f16(<4 x half> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v4f16:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v4f16:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v4f16:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v4f16:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v4f16:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v4f16:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <4 x half> @llvm.amdgcn.mov.dpp8.v4f16(<4 x half> %in, i32 1)
  store <4 x half> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_float(float %in, ptr addrspace(1) %out) {
; GFX10-LABEL: dpp8_float:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_dword v[1:2], v0, off
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: dpp8_float:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    global_store_b32 v[1:2], v0, off
; GFX11-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_float:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b32 v[1:2], v0, off
; GFX12-NEXT:    s_endpgm
  %tmp0 = call float @llvm.amdgcn.mov.dpp8.f32(float %in, i32 1)
  store float %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v3f32(<3 x float> %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_v3f32:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx3 v[3:4], v[0:2], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_v3f32:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx3 v[3:4], v[0:2], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_v3f32:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_v3f32:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_v3f32:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_v3f32:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v2, v2 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b96 v[3:4], v[0:2], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call <3 x float> @llvm.amdgcn.mov.dpp8.v3f32(<3 x float> %in, i32 1)
  store <3 x float> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_half(half %in, ptr addrspace(1) %out) {
; GFX10-LABEL: dpp8_half:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_short v[1:2], v0, off
; GFX10-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_half:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    ; implicit-def: $vgpr3
; GFX11-SDAG-NEXT:    v_mov_b16_e32 v3.l, v0.l
; GFX11-SDAG-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b16 v[1:2], v3, off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_half:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b16 v[1:2], v0, off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_half:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b16 v[1:2], v0, off
; GFX12-NEXT:    s_endpgm
  %tmp0 = call half @llvm.amdgcn.mov.dpp8.f16(half %in, i32 1)
  store half %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_bfloat(bfloat %in, ptr addrspace(1) %out) {
; GFX10-LABEL: dpp8_bfloat:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_short v[1:2], v0, off
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: dpp8_bfloat:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    ; implicit-def: $vgpr3
; GFX11-NEXT:    v_mov_b16_e32 v3.l, v0.l
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_mov_b32_dpp v3, v3 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    global_store_b16 v[1:2], v3, off
; GFX11-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_bfloat:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b16 v[1:2], v0, off
; GFX12-NEXT:    s_endpgm
  %tmp0 = call bfloat @llvm.amdgcn.mov.dpp8.bf16(bfloat %in, i32 1)
  store bfloat %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_v4bf16(<4 x bfloat> %in, ptr addrspace(1) %out) {
; GFX10-LABEL: dpp8_v4bf16:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-NEXT:    s_endpgm
;
; GFX11-LABEL: dpp8_v4bf16:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-NEXT:    s_endpgm
;
; GFX12-LABEL: dpp8_v4bf16:
; GFX12:       ; %bb.0:
; GFX12-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-NEXT:    s_endpgm
  %tmp0 = call <4 x bfloat> @llvm.amdgcn.mov.dpp8.v4bf16(<4 x bfloat> %in, i32 1)
  store <4 x bfloat> %tmp0, ptr addrspace(1) %out
  ret void
}

define amdgpu_ps void @dpp8_double(double %in, ptr addrspace(1) %out) {
; GFX10-SDAG-LABEL: dpp8_double:
; GFX10-SDAG:       ; %bb.0:
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-SDAG-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-SDAG-NEXT:    s_endpgm
;
; GFX10-GISEL-LABEL: dpp8_double:
; GFX10-GISEL:       ; %bb.0:
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX10-GISEL-NEXT:    global_store_dwordx2 v[2:3], v[0:1], off
; GFX10-GISEL-NEXT:    s_endpgm
;
; GFX11-SDAG-LABEL: dpp8_double:
; GFX11-SDAG:       ; %bb.0:
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-SDAG-NEXT:    s_endpgm
;
; GFX11-GISEL-LABEL: dpp8_double:
; GFX11-GISEL:       ; %bb.0:
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX11-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX11-GISEL-NEXT:    s_endpgm
;
; GFX12-SDAG-LABEL: dpp8_double:
; GFX12-SDAG:       ; %bb.0:
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-SDAG-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-SDAG-NEXT:    s_endpgm
;
; GFX12-GISEL-LABEL: dpp8_double:
; GFX12-GISEL:       ; %bb.0:
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v0, v0 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    v_mov_b32_dpp v1, v1 dpp8:[1,0,0,0,0,0,0,0]
; GFX12-GISEL-NEXT:    global_store_b64 v[2:3], v[0:1], off
; GFX12-GISEL-NEXT:    s_endpgm
  %tmp0 = call double @llvm.amdgcn.mov.dpp8.f64(double %in, i32 1)
  store double %tmp0, ptr addrspace(1) %out
  ret void
}

declare i32 @llvm.amdgcn.mov.dpp8.i32(i32, i32) #0

attributes #0 = { nounwind readnone convergent }
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GFX10PLUS: {{.*}}
