; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: opt -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -passes=amdgpu-simplifylib,instcombine -amdgpu-prelink < %s | llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -amdgpu-prelink | FileCheck %s

declare hidden float @_Z3powff(float, float)
declare hidden double @_Z3powdd(double, double)
declare hidden half @_Z3powDhDh(half, half)

declare hidden float @_Z4powrff(float, float)
declare hidden double @_Z4powrdd(double, double)
declare hidden half @_Z4powrDhDh(half, half)

declare hidden float @_Z4pownfi(float, i32)
declare hidden double @_Z4powndi(double, i32)
declare hidden half @_Z4pownDhi(half, i32)

; --------------------------------------------------------------------
; test pow
; --------------------------------------------------------------------

define half @test_pow_fast_f16(half %x, half %y) {
  %pow = tail call fast half @_Z3powDhDh(half %x, half %y)
  ret half %pow
}

define float @test_pow_fast_f32(float %x, float %y) {
  %pow = tail call fast float @_Z3powff(float %x, float %y)
  ret float %pow
}

define double @test_pow_fast_f64(double %x, double %y) {
  %pow = tail call fast double @_Z3powdd(double %x, double %y)
  ret double %pow
}

define half @test_pow_fast_f16__integral_y(half %x, i32 %y.i) {
  %y = sitofp i32 %y.i to half
  %pow = tail call fast half @_Z3powDhDh(half %x, half %y)
  ret half %pow
}

define float @test_pow_fast_f32__integral_y(float %x, i32 %y.i) {
  %y = sitofp i32 %y.i to float
  %pow = tail call fast float @_Z3powff(float %x, float %y)
  ret float %pow
}

define double @test_pow_fast_f64__integral_y(double %x, i32 %y.i) {
  %y = sitofp i32 %y.i to double
  %pow = tail call fast double @_Z3powdd(double %x, double %y)
  ret double %pow
}

; --------------------------------------------------------------------
; test powr
; --------------------------------------------------------------------

define half @test_powr_fast_f16(half %x, half %y) {
  %powr = tail call fast half @_Z4powrDhDh(half %x, half %y)
  ret half %powr
}

define float @test_powr_fast_f32(float %x, float %y) {
  %powr = tail call fast float @_Z4powrff(float %x, float %y)
  ret float %powr
}

define double @test_powr_fast_f64(double %x, double %y) {
  %powr = tail call fast double @_Z4powrdd(double %x, double %y)
  ret double %powr
}

; --------------------------------------------------------------------
; test pown
; --------------------------------------------------------------------

define half @test_pown_fast_f16(half %x, i32 %y) {
  %call = tail call fast half @_Z4pownDhi(half %x, i32 %y)
  ret half %call
}

define float @test_pown_fast_f32(float %x, i32 %y) {
  %call = tail call fast float @_Z4pownfi(float %x, i32 %y)
  ret float %call
}

define double @test_pown_fast_f64(double %x, i32 %y) {
  %call = tail call fast double @_Z4powndi(double %x, i32 %y)
  ret double %call
}

define half @test_pown_fast_f16_known_even(half %x, i32 %y.arg) {
  %y = shl i32 %y.arg, 1
  %call = tail call fast half @_Z4pownDhi(half %x, i32 %y)
  ret half %call
}

define float @test_pown_fast_f32_known_even(float %x, i32 %y.arg) {
  %y = shl i32 %y.arg, 1
  %call = tail call fast float @_Z4pownfi(float %x, i32 %y)
  ret float %call
}

define double @test_pown_fast_f64_known_even(double %x, i32 %y.arg) {
  %y = shl i32 %y.arg, 1
  %call = tail call fast double @_Z4powndi(double %x, i32 %y)
  ret double %call
}

define half @test_pown_fast_f16_known_odd(half %x, i32 %y.arg) {
  %y = or i32 %y.arg, 1
  %call = tail call fast half @_Z4pownDhi(half %x, i32 %y)
  ret half %call
}

define float @test_pown_fast_f32_known_odd(float %x, i32 %y.arg) {
  %y = or i32 %y.arg, 1
  %call = tail call fast float @_Z4pownfi(float %x, i32 %y)
  ret float %call
}

define double @test_pown_fast_f64_known_odd(double %x, i32 %y.arg) {
  %y = or i32 %y.arg, 1
  %call = tail call fast double @_Z4powndi(double %x, i32 %y)
  ret double %call
}

!llvm.module.flags = !{!0}
!0 = !{i32 1, !"amdhsa_code_object_version", i32 500}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
