# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx950  -run-pass=machine-scheduler --debug-only=machine-scheduler -o - %s 2>&1 | FileCheck %s
# REQUIRES: asserts

--- |
  define void @avgpr_rp_occ1() #0 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ2() #1 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ3() #2 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ4() #3 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ5() #4 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ6() #5 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ7() #6 {
  entry:
    unreachable
  }

  define void @avgpr_rp_occ8() #7 {
  entry:
    unreachable
  }


  define void @vgpr_rp_occ1() #0 {
  entry:
    unreachable
  }

  define void @vgpr_rp_occ2() #1 {
  entry:
    unreachable
  }

  define void @vgpr_rp_occ3() #2 {
  entry:
    unreachable
  }

  attributes #0 = {"amdgpu-waves-per-eu"="1,1" "amdgpu-flat-work-group-size"="64,64"}
  attributes #1 = {"amdgpu-waves-per-eu"="2,2" "amdgpu-flat-work-group-size"="64,64"}
  attributes #2 = {"amdgpu-waves-per-eu"="3,3" "amdgpu-flat-work-group-size"="64,64"}
  attributes #3 = {"amdgpu-waves-per-eu"="4,4" "amdgpu-flat-work-group-size"="64,64"}
  attributes #4 = {"amdgpu-waves-per-eu"="5,5" "amdgpu-flat-work-group-size"="64,64"}
  attributes #5 = {"amdgpu-waves-per-eu"="6,6" "amdgpu-flat-work-group-size"="64,64"}
  attributes #6 = {"amdgpu-waves-per-eu"="7,7" "amdgpu-flat-work-group-size"="64,64"}
  attributes #7 = {"amdgpu-waves-per-eu"="8,8" "amdgpu-flat-work-group-size"="64,64"}


...

# CHECK: avgpr_rp_occ1:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 256 AGPRs: 192(O1), SGPRs: 0(O10), LVGPR WT: 256, LSGPR WT: 0 -> Occ: 1

---
name:            avgpr_rp_occ1
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:vreg_1024 = IMPLICIT_DEF
    %2:vreg_1024 = IMPLICIT_DEF
    %3:vreg_1024 = IMPLICIT_DEF
    %4:vreg_1024 = IMPLICIT_DEF
    %5:vreg_1024 = IMPLICIT_DEF
    %6:vreg_1024 = IMPLICIT_DEF
    %7:vreg_1024 = IMPLICIT_DEF
    %8:av_1024 = IMPLICIT_DEF
    %9:av_1024 = IMPLICIT_DEF
    %10:av_1024 = IMPLICIT_DEF
    %11:av_1024 = IMPLICIT_DEF
    %12:av_1024 = IMPLICIT_DEF
    %13:av_1024 = IMPLICIT_DEF
    %14:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2, %3, %4, %5, %6, %7

  bb.1:
    KILL %8, %9, %10, %11, %12, %13, %14
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ2:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 128 AGPRs: 64(O2), SGPRs: 0(O10), LVGPR WT: 128, LSGPR WT: 0 -> Occ: 2

---
name:            avgpr_rp_occ2
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:vreg_1024 = IMPLICIT_DEF
    %2:vreg_1024 = IMPLICIT_DEF
    %3:vreg_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    %5:av_1024 = IMPLICIT_DEF
    %6:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2, %3

  bb.1:
    KILL %4, %5, %6
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ3:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 84 AGPRs: 44(O4), SGPRs: 0(O10), LVGPR WT: 84, LSGPR WT: 0 -> Occ: 4

---
name:            avgpr_rp_occ3
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:vreg_1024 = IMPLICIT_DEF
    %2:vreg_1024 = IMPLICIT_DEF
    %3:av_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2

  bb.1:
    KILL %3, %4
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ4:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 64 AGPRs: 64(O4), SGPRs: 0(O10), LVGPR WT: 64, LSGPR WT: 0 -> Occ: 4

---
name:            avgpr_rp_occ4
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:av_1024 = IMPLICIT_DEF
    %2:av_1024 = IMPLICIT_DEF
    %3:av_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2 

  bb.1:
    KILL %3, %4 
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ5:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 48 AGPRs: 80(O4), SGPRs: 0(O10), LVGPR WT: 80, LSGPR WT: 0 -> Occ: 4

---
name:            avgpr_rp_occ5
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:av_1024 = IMPLICIT_DEF
    %2:av_1024 = IMPLICIT_DEF
    %3:av_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2 

  bb.1:
    KILL %3, %4 
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ6:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 40 AGPRs: 88(O4), SGPRs: 0(O10), LVGPR WT: 88, LSGPR WT: 0 -> Occ: 4

---
name:            avgpr_rp_occ6
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:av_1024 = IMPLICIT_DEF
    %2:av_1024 = IMPLICIT_DEF
    %3:av_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2 

  bb.1:
    KILL %3, %4 
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ7:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 36 AGPRs: 92(O4), SGPRs: 0(O10), LVGPR WT: 92, LSGPR WT: 0 -> Occ: 4

---
name:            avgpr_rp_occ7
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:av_1024 = IMPLICIT_DEF
    %2:av_1024 = IMPLICIT_DEF
    %3:av_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2 

  bb.1:
    KILL %3, %4 
    S_ENDPGM 0
...

# CHECK: avgpr_rp_occ8:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 32 AGPRs: 96(O4), SGPRs: 0(O10), LVGPR WT: 96, LSGPR WT: 0 -> Occ: 4

---
name:            avgpr_rp_occ8
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:av_1024 = IMPLICIT_DEF
    %2:av_1024 = IMPLICIT_DEF
    %3:av_1024 = IMPLICIT_DEF
    %4:av_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2 

  bb.1:
    KILL %3, %4 
    S_ENDPGM 0
...

# CHECK: vgpr_rp_occ1:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 448 AGPRs: 0(O1), SGPRs: 0(O10), LVGPR WT: 448, LSGPR WT: 0 -> Occ: 1

---
name:            vgpr_rp_occ1
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:vreg_1024 = IMPLICIT_DEF
    %2:vreg_1024 = IMPLICIT_DEF
    %3:vreg_1024 = IMPLICIT_DEF
    %4:vreg_1024 = IMPLICIT_DEF
    %5:vreg_1024 = IMPLICIT_DEF
    %6:vreg_1024 = IMPLICIT_DEF
    %7:vreg_1024 = IMPLICIT_DEF
    %8:vreg_1024 = IMPLICIT_DEF
    %9:vreg_1024 = IMPLICIT_DEF
    %10:vreg_1024 = IMPLICIT_DEF
    %11:vreg_1024 = IMPLICIT_DEF
    %12:vreg_1024 = IMPLICIT_DEF
    %13:vreg_1024 = IMPLICIT_DEF
    %14:vreg_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2, %3, %4, %5, %6, %7

  bb.1:
    KILL %8, %9, %10, %11, %12, %13, %14
    S_ENDPGM 0
...

# CHECK: vgpr_rp_occ2:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 192 AGPRs: 0(O2), SGPRs: 0(O10), LVGPR WT: 192, LSGPR WT: 0 -> Occ: 2

---
name:            vgpr_rp_occ2
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:vreg_1024 = IMPLICIT_DEF
    %2:vreg_1024 = IMPLICIT_DEF
    %3:vreg_1024 = IMPLICIT_DEF
    %4:vreg_1024 = IMPLICIT_DEF
    %5:vreg_1024 = IMPLICIT_DEF
    %6:vreg_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2, %3

  bb.1:
    KILL %4, %5, %6
    S_ENDPGM 0
...

# CHECK: vgpr_rp_occ3:%bb.0
# CHECK: Pressure before scheduling:
# CHECK-NEXT: Region live-ins:
# CHECK-NEXT: Region live-in pressure:  VGPRs: 0 AGPRs: 0(O8), SGPRs: 0(O10), LVGPR WT: 0, LSGPR WT: 0 -> Occ: 8
# CHECK-NEXT: Region register pressure: VGPRs: 128 AGPRs: 0(O4), SGPRs: 0(O10), LVGPR WT: 128, LSGPR WT: 0 -> Occ: 4


---
name:            vgpr_rp_occ3
tracksRegLiveness: true
machineFunctionInfo:
  isEntryFunction: true
  scratchRSrcReg:  '$sgpr96_sgpr97_sgpr98_sgpr99'
  stackPtrOffsetReg: '$sgpr32'
  argumentInfo:
    privateSegmentBuffer: { reg: '$sgpr0_sgpr1_sgpr2_sgpr3' }
    kernargSegmentPtr: { reg: '$sgpr4_sgpr5' }
    workGroupIDX:    { reg: '$sgpr6' }
    privateSegmentWaveByteOffset: { reg: '$sgpr7' }
    workItemIDX:     { reg: '$vgpr0' }
  sgprForEXECCopy: '$sgpr100_sgpr101'
body:             |
  bb.0:
   liveins: $vgpr0, $sgpr4_sgpr5
    %1:vreg_1024 = IMPLICIT_DEF
    %2:vreg_1024 = IMPLICIT_DEF
    %3:vreg_1024 = IMPLICIT_DEF
    %4:vreg_1024 = IMPLICIT_DEF
    SCHED_BARRIER 0
    KILL %1, %2

  bb.1:
    KILL %3, %4
    S_ENDPGM 0
...
