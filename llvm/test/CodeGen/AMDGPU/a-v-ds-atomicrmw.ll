; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn -mcpu=gfx90a < %s | FileCheck %s

;---------------------------------------------------------------------
; xchg i32 cases
;---------------------------------------------------------------------

; Input and result use AGPR
define void @ds_atomic_xchg_i32_ret_a_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_a_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "a"(i32 %result)
  ret void
}

; Input is AGPR, result used as VGPR.
define void @ds_atomic_xchg_i32_ret_a_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_a_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "v"(i32 %result)
  ret void
}

; Input is VGPR, result used as AGPR
define void @ds_atomic_xchg_i32_ret_v_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_v_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=v"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "a"(i32 %result)
  ret void
}

; Input is AV, result also used as AV
define void @ds_atomic_xchg_i32_ret_av_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_av_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

; Input is AV, used as v
define void @ds_atomic_xchg_i32_ret_av_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_av_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "v"(i32 %result)
  ret void
}

; Input is AV, used as a
define void @ds_atomic_xchg_i32_ret_av_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_av_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "a"(i32 %result)
  ret void
}

; Input is a, result used as AV
define void @ds_atomic_xchg_i32_ret_a_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_a_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

; Input is v, result used as AV
define void @ds_atomic_xchg_i32_ret_v_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_v_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=v"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

define void @ds_atomic_xchg_i32_ret_av_av_no_agprs(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_ret_av_av_no_agprs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    buffer_store_dword v40, off, s[0:3], s32 offset:68 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v41, off, s[0:3], s32 offset:64 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v42, off, s[0:3], s32 offset:60 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v43, off, s[0:3], s32 offset:56 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v44, off, s[0:3], s32 offset:52 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v45, off, s[0:3], s32 offset:48 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v46, off, s[0:3], s32 offset:44 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v47, off, s[0:3], s32 offset:40 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v56, off, s[0:3], s32 offset:36 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v57, off, s[0:3], s32 offset:32 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v58, off, s[0:3], s32 offset:28 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v59, off, s[0:3], s32 offset:24 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v60, off, s[0:3], s32 offset:20 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v61, off, s[0:3], s32 offset:16 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v62, off, s[0:3], s32 offset:12 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v63, off, s[0:3], s32 offset:8 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword a32, off, s[0:3], s32 offset:4 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword a33, off, s[0:3], s32 ; 4-byte Folded Spill
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[0:31]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_write_b32 a33, v31
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_write_b32 a32, v30
; CHECK-NEXT:    v_accvgpr_write_b32 a31, v29
; CHECK-NEXT:    v_accvgpr_write_b32 a30, v28
; CHECK-NEXT:    v_accvgpr_write_b32 a29, v27
; CHECK-NEXT:    v_accvgpr_write_b32 a28, v26
; CHECK-NEXT:    v_accvgpr_write_b32 a27, v25
; CHECK-NEXT:    v_accvgpr_write_b32 a26, v24
; CHECK-NEXT:    v_accvgpr_write_b32 a25, v23
; CHECK-NEXT:    v_accvgpr_write_b32 a24, v22
; CHECK-NEXT:    v_accvgpr_write_b32 a23, v21
; CHECK-NEXT:    v_accvgpr_write_b32 a22, v20
; CHECK-NEXT:    v_accvgpr_write_b32 a21, v19
; CHECK-NEXT:    v_accvgpr_write_b32 a20, v18
; CHECK-NEXT:    v_accvgpr_write_b32 a19, v17
; CHECK-NEXT:    v_accvgpr_write_b32 a18, v16
; CHECK-NEXT:    v_accvgpr_write_b32 a17, v15
; CHECK-NEXT:    v_accvgpr_write_b32 a16, v14
; CHECK-NEXT:    v_accvgpr_write_b32 a15, v13
; CHECK-NEXT:    v_accvgpr_write_b32 a14, v12
; CHECK-NEXT:    v_accvgpr_write_b32 a13, v11
; CHECK-NEXT:    v_accvgpr_write_b32 a12, v10
; CHECK-NEXT:    v_accvgpr_write_b32 a11, v9
; CHECK-NEXT:    v_accvgpr_write_b32 a10, v8
; CHECK-NEXT:    v_accvgpr_write_b32 a9, v7
; CHECK-NEXT:    v_accvgpr_write_b32 a8, v6
; CHECK-NEXT:    v_accvgpr_write_b32 a7, v5
; CHECK-NEXT:    v_accvgpr_write_b32 a6, v4
; CHECK-NEXT:    v_accvgpr_write_b32 a5, v3
; CHECK-NEXT:    v_accvgpr_write_b32 a4, v2
; CHECK-NEXT:    v_accvgpr_write_b32 a3, v1
; CHECK-NEXT:    v_accvgpr_write_b32 a2, v0
; CHECK-NEXT:    v_accvgpr_read_b32 v0, a0
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a1
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_read_b32 v0, a2
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a3
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a4
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a5
; CHECK-NEXT:    v_accvgpr_read_b32 v4, a6
; CHECK-NEXT:    v_accvgpr_read_b32 v5, a7
; CHECK-NEXT:    v_accvgpr_read_b32 v6, a8
; CHECK-NEXT:    v_accvgpr_read_b32 v7, a9
; CHECK-NEXT:    v_accvgpr_read_b32 v8, a10
; CHECK-NEXT:    v_accvgpr_read_b32 v9, a11
; CHECK-NEXT:    v_accvgpr_read_b32 v10, a12
; CHECK-NEXT:    v_accvgpr_read_b32 v11, a13
; CHECK-NEXT:    v_accvgpr_read_b32 v12, a14
; CHECK-NEXT:    v_accvgpr_read_b32 v13, a15
; CHECK-NEXT:    v_accvgpr_read_b32 v14, a16
; CHECK-NEXT:    v_accvgpr_read_b32 v15, a17
; CHECK-NEXT:    v_accvgpr_read_b32 v16, a18
; CHECK-NEXT:    v_accvgpr_read_b32 v17, a19
; CHECK-NEXT:    v_accvgpr_read_b32 v18, a20
; CHECK-NEXT:    v_accvgpr_read_b32 v19, a21
; CHECK-NEXT:    v_accvgpr_read_b32 v20, a22
; CHECK-NEXT:    v_accvgpr_read_b32 v21, a23
; CHECK-NEXT:    v_accvgpr_read_b32 v22, a24
; CHECK-NEXT:    v_accvgpr_read_b32 v23, a25
; CHECK-NEXT:    v_accvgpr_read_b32 v24, a26
; CHECK-NEXT:    v_accvgpr_read_b32 v25, a27
; CHECK-NEXT:    v_accvgpr_read_b32 v26, a28
; CHECK-NEXT:    v_accvgpr_read_b32 v27, a29
; CHECK-NEXT:    v_accvgpr_read_b32 v28, a30
; CHECK-NEXT:    v_accvgpr_read_b32 v29, a31
; CHECK-NEXT:    v_accvgpr_read_b32 v30, a32
; CHECK-NEXT:    v_accvgpr_read_b32 v31, a33
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:31]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    buffer_load_dword a33, off, s[0:3], s32 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword a32, off, s[0:3], s32 offset:4 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v63, off, s[0:3], s32 offset:8 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v62, off, s[0:3], s32 offset:12 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v61, off, s[0:3], s32 offset:16 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v60, off, s[0:3], s32 offset:20 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v59, off, s[0:3], s32 offset:24 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v58, off, s[0:3], s32 offset:28 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v57, off, s[0:3], s32 offset:32 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v56, off, s[0:3], s32 offset:36 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v47, off, s[0:3], s32 offset:40 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v46, off, s[0:3], s32 offset:44 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v45, off, s[0:3], s32 offset:48 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v44, off, s[0:3], s32 offset:52 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v43, off, s[0:3], s32 offset:56 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v42, off, s[0:3], s32 offset:60 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v41, off, s[0:3], s32 offset:64 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v40, off, s[0:3], s32 offset:68 ; 4-byte Folded Reload
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %vgpr.def = call { <32 x i32>, <32 x i32> }  asm sideeffect "; def $0", "=${v[0:31]},=${v[32:63]}"()
  %vgpr.0 = extractvalue { <32 x i32>, <32 x i32> } %vgpr.def, 0
  %vgpr.1 = extractvalue { <32 x i32>, <32 x i32> } %vgpr.def, 1
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm sideeffect "; use $0", "{v[0:31]},{v[32:63]}"(<32 x i32> %vgpr.0, <32 x i32> %vgpr.1)
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

define void @ds_atomic_xchg_i32_noret_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_noret_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %unused = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  ret void
}

define void @ds_atomic_xchg_i32_noret_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i32_noret_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %unused = atomicrmw xchg ptr addrspace(3) %ptr, i32 %data seq_cst
  ret void
}

;---------------------------------------------------------------------
; xchg i64 cases
;---------------------------------------------------------------------

; Input and result use AGPR
define void @ds_atomic_xchg_i64_ret_a_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_a_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_write_b32 a1, v1
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=a"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "a"(i64 %result)
  ret void
}

; Input is AGPR, result used as VGPR.
define void @ds_atomic_xchg_i64_ret_a_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_a_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=a"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "v"(i64 %result)
  ret void
}

; Input is VGPR, result used as AGPR
define void @ds_atomic_xchg_i64_ret_v_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_v_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_write_b32 a1, v1
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=v"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "a"(i64 %result)
  ret void
}

; Input is AV, result also used as AV
define void @ds_atomic_xchg_i64_ret_av_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_av_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=^VA"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "^VA"(i64 %result)
  ret void
}

; Input is AV, used as v
define void @ds_atomic_xchg_i64_ret_av_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_av_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=^VA"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "v"(i64 %result)
  ret void
}

; Input is AV, used as a
define void @ds_atomic_xchg_i64_ret_av_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_av_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_write_b32 a1, v1
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=^VA"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "a"(i64 %result)
  ret void
}

; Input is a, result used as AV
define void @ds_atomic_xchg_i64_ret_a_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_a_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=a"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "^VA"(i64 %result)
  ret void
}

; Input is v, result used as AV
define void @ds_atomic_xchg_i64_ret_v_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_ret_v_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=v"()
  %result = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "^VA"(i64 %result)
  ret void
}

define void @ds_atomic_xchg_i64_noret_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_noret_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i64 0, i64 10
  %data = call i64 asm "; def $0", "=a"()
  %unused = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  ret void
}

define void @ds_atomic_xchg_i64_noret_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xchg_i64_noret_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_wrxchg_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i64 0, i64 10
  %data = call i64 asm "; def $0", "=^VA"()
  %unused = atomicrmw xchg ptr addrspace(3) %ptr, i64 %data seq_cst
  ret void
}

;---------------------------------------------------------------------
; xor i32 cases
;---------------------------------------------------------------------

; Input and result use AGPR
define void @ds_atomic_xor_i32_ret_a_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_a_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "a"(i32 %result)
  ret void
}

; Input is AGPR, result used as VGPR.
define void @ds_atomic_xor_i32_ret_a_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_a_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "v"(i32 %result)
  ret void
}

; Input is VGPR, result used as AGPR
define void @ds_atomic_xor_i32_ret_v_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_v_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=v"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "a"(i32 %result)
  ret void
}

; Input is AV, result also used as AV
define void @ds_atomic_xor_i32_ret_av_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_av_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

; Input is AV, used as v
define void @ds_atomic_xor_i32_ret_av_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_av_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "v"(i32 %result)
  ret void
}

; Input is AV, used as a
define void @ds_atomic_xor_i32_ret_av_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_av_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "a"(i32 %result)
  ret void
}

; Input is a, result used as AV
define void @ds_atomic_xor_i32_ret_a_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_a_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a0
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

; Input is v, result used as AV
define void @ds_atomic_xor_i32_ret_v_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_v_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=v"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

define void @ds_atomic_xor_i32_ret_av_av_no_agprs(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_ret_av_av_no_agprs:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    buffer_store_dword v40, off, s[0:3], s32 offset:68 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v41, off, s[0:3], s32 offset:64 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v42, off, s[0:3], s32 offset:60 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v43, off, s[0:3], s32 offset:56 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v44, off, s[0:3], s32 offset:52 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v45, off, s[0:3], s32 offset:48 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v46, off, s[0:3], s32 offset:44 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v47, off, s[0:3], s32 offset:40 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v56, off, s[0:3], s32 offset:36 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v57, off, s[0:3], s32 offset:32 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v58, off, s[0:3], s32 offset:28 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v59, off, s[0:3], s32 offset:24 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v60, off, s[0:3], s32 offset:20 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v61, off, s[0:3], s32 offset:16 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v62, off, s[0:3], s32 offset:12 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword v63, off, s[0:3], s32 offset:8 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword a32, off, s[0:3], s32 offset:4 ; 4-byte Folded Spill
; CHECK-NEXT:    buffer_store_dword a33, off, s[0:3], s32 ; 4-byte Folded Spill
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[0:31]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_write_b32 a33, v31
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_write_b32 a32, v30
; CHECK-NEXT:    v_accvgpr_write_b32 a31, v29
; CHECK-NEXT:    v_accvgpr_write_b32 a30, v28
; CHECK-NEXT:    v_accvgpr_write_b32 a29, v27
; CHECK-NEXT:    v_accvgpr_write_b32 a28, v26
; CHECK-NEXT:    v_accvgpr_write_b32 a27, v25
; CHECK-NEXT:    v_accvgpr_write_b32 a26, v24
; CHECK-NEXT:    v_accvgpr_write_b32 a25, v23
; CHECK-NEXT:    v_accvgpr_write_b32 a24, v22
; CHECK-NEXT:    v_accvgpr_write_b32 a23, v21
; CHECK-NEXT:    v_accvgpr_write_b32 a22, v20
; CHECK-NEXT:    v_accvgpr_write_b32 a21, v19
; CHECK-NEXT:    v_accvgpr_write_b32 a20, v18
; CHECK-NEXT:    v_accvgpr_write_b32 a19, v17
; CHECK-NEXT:    v_accvgpr_write_b32 a18, v16
; CHECK-NEXT:    v_accvgpr_write_b32 a17, v15
; CHECK-NEXT:    v_accvgpr_write_b32 a16, v14
; CHECK-NEXT:    v_accvgpr_write_b32 a15, v13
; CHECK-NEXT:    v_accvgpr_write_b32 a14, v12
; CHECK-NEXT:    v_accvgpr_write_b32 a13, v11
; CHECK-NEXT:    v_accvgpr_write_b32 a12, v10
; CHECK-NEXT:    v_accvgpr_write_b32 a11, v9
; CHECK-NEXT:    v_accvgpr_write_b32 a10, v8
; CHECK-NEXT:    v_accvgpr_write_b32 a9, v7
; CHECK-NEXT:    v_accvgpr_write_b32 a8, v6
; CHECK-NEXT:    v_accvgpr_write_b32 a7, v5
; CHECK-NEXT:    v_accvgpr_write_b32 a6, v4
; CHECK-NEXT:    v_accvgpr_write_b32 a5, v3
; CHECK-NEXT:    v_accvgpr_write_b32 a4, v2
; CHECK-NEXT:    v_accvgpr_write_b32 a3, v1
; CHECK-NEXT:    v_accvgpr_write_b32 a2, v0
; CHECK-NEXT:    v_accvgpr_read_b32 v0, a0
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a1
; CHECK-NEXT:    ds_xor_rtn_b32 v0, v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_read_b32 v0, a2
; CHECK-NEXT:    v_accvgpr_read_b32 v1, a3
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a4
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a5
; CHECK-NEXT:    v_accvgpr_read_b32 v4, a6
; CHECK-NEXT:    v_accvgpr_read_b32 v5, a7
; CHECK-NEXT:    v_accvgpr_read_b32 v6, a8
; CHECK-NEXT:    v_accvgpr_read_b32 v7, a9
; CHECK-NEXT:    v_accvgpr_read_b32 v8, a10
; CHECK-NEXT:    v_accvgpr_read_b32 v9, a11
; CHECK-NEXT:    v_accvgpr_read_b32 v10, a12
; CHECK-NEXT:    v_accvgpr_read_b32 v11, a13
; CHECK-NEXT:    v_accvgpr_read_b32 v12, a14
; CHECK-NEXT:    v_accvgpr_read_b32 v13, a15
; CHECK-NEXT:    v_accvgpr_read_b32 v14, a16
; CHECK-NEXT:    v_accvgpr_read_b32 v15, a17
; CHECK-NEXT:    v_accvgpr_read_b32 v16, a18
; CHECK-NEXT:    v_accvgpr_read_b32 v17, a19
; CHECK-NEXT:    v_accvgpr_read_b32 v18, a20
; CHECK-NEXT:    v_accvgpr_read_b32 v19, a21
; CHECK-NEXT:    v_accvgpr_read_b32 v20, a22
; CHECK-NEXT:    v_accvgpr_read_b32 v21, a23
; CHECK-NEXT:    v_accvgpr_read_b32 v22, a24
; CHECK-NEXT:    v_accvgpr_read_b32 v23, a25
; CHECK-NEXT:    v_accvgpr_read_b32 v24, a26
; CHECK-NEXT:    v_accvgpr_read_b32 v25, a27
; CHECK-NEXT:    v_accvgpr_read_b32 v26, a28
; CHECK-NEXT:    v_accvgpr_read_b32 v27, a29
; CHECK-NEXT:    v_accvgpr_read_b32 v28, a30
; CHECK-NEXT:    v_accvgpr_read_b32 v29, a31
; CHECK-NEXT:    v_accvgpr_read_b32 v30, a32
; CHECK-NEXT:    v_accvgpr_read_b32 v31, a33
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:31]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    buffer_load_dword a33, off, s[0:3], s32 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword a32, off, s[0:3], s32 offset:4 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v63, off, s[0:3], s32 offset:8 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v62, off, s[0:3], s32 offset:12 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v61, off, s[0:3], s32 offset:16 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v60, off, s[0:3], s32 offset:20 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v59, off, s[0:3], s32 offset:24 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v58, off, s[0:3], s32 offset:28 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v57, off, s[0:3], s32 offset:32 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v56, off, s[0:3], s32 offset:36 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v47, off, s[0:3], s32 offset:40 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v46, off, s[0:3], s32 offset:44 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v45, off, s[0:3], s32 offset:48 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v44, off, s[0:3], s32 offset:52 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v43, off, s[0:3], s32 offset:56 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v42, off, s[0:3], s32 offset:60 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v41, off, s[0:3], s32 offset:64 ; 4-byte Folded Reload
; CHECK-NEXT:    buffer_load_dword v40, off, s[0:3], s32 offset:68 ; 4-byte Folded Reload
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %vgpr.def = call { <32 x i32>, <32 x i32> }  asm sideeffect "; def $0", "=${v[0:31]},=${v[32:63]}"()
  %vgpr.0 = extractvalue { <32 x i32>, <32 x i32> } %vgpr.def, 0
  %vgpr.1 = extractvalue { <32 x i32>, <32 x i32> } %vgpr.def, 1
  %result = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  call void asm sideeffect "; use $0", "{v[0:31]},{v[32:63]}"(<32 x i32> %vgpr.0, <32 x i32> %vgpr.1)
  call void asm "; use $0", "^VA"(i32 %result)
  ret void
}

define void @ds_atomic_xor_i32_noret_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_noret_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a0
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_b32 v0, a0
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=a"()
  %unused = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  ret void
}

define void @ds_atomic_xor_i32_noret_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i32_noret_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v1
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_b32 v0, v1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i32], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i32 asm "; def $0", "=^VA"()
  %unused = atomicrmw xor ptr addrspace(3) %ptr, i32 %data seq_cst
  ret void
}

;---------------------------------------------------------------------
; xor i64 cases
;---------------------------------------------------------------------

; Input and result use AGPR
define void @ds_atomic_xor_i64_ret_a_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_a_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_write_b32 a1, v1
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=a"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "a"(i64 %result)
  ret void
}

; Input is AGPR, result used as VGPR.
define void @ds_atomic_xor_i64_ret_a_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_a_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=a"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "v"(i64 %result)
  ret void
}

; Input is VGPR, result used as AGPR
define void @ds_atomic_xor_i64_ret_v_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_v_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_write_b32 a1, v1
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=v"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "a"(i64 %result)
  ret void
}

; Input is AV, result also used as AV
define void @ds_atomic_xor_i64_ret_av_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_av_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=^VA"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "^VA"(i64 %result)
  ret void
}

; Input is AV, used as v
define void @ds_atomic_xor_i64_ret_av_v(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_av_v:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=^VA"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "v"(i64 %result)
  ret void
}

; Input is AV, used as a
define void @ds_atomic_xor_i64_ret_av_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_av_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_accvgpr_write_b32 a0, v0
; CHECK-NEXT:    v_accvgpr_write_b32 a1, v1
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=^VA"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "a"(i64 %result)
  ret void
}

; Input is a, result used as AV
define void @ds_atomic_xor_i64_ret_a_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_a_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    v_accvgpr_read_b32 v3, a1
; CHECK-NEXT:    v_accvgpr_read_b32 v2, a0
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=a"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "^VA"(i64 %result)
  ret void
}

; Input is v, result used as AV
define void @ds_atomic_xor_i64_ret_v_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_ret_v_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_rtn_b64 v[0:1], v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use v[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i32 0, i32 10
  %data = call i64 asm "; def $0", "=v"()
  %result = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  call void asm "; use $0", "^VA"(i64 %result)
  ret void
}

define void @ds_atomic_xor_i64_noret_a(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_noret_a:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def a[0:1]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_b64 v0, a[0:1]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i64 0, i64 10
  %data = call i64 asm "; def $0", "=a"()
  %unused = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  ret void
}

define void @ds_atomic_xor_i64_noret_av(ptr addrspace(3) %ptr) #0 {
; CHECK-LABEL: ds_atomic_xor_i64_noret_av:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; def v[2:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    ds_xor_b64 v0, v[2:3]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %gep.0 = getelementptr inbounds [512 x i64], ptr addrspace(3) %ptr, i64 0, i64 10
  %data = call i64 asm "; def $0", "=^VA"()
  %unused = atomicrmw xor ptr addrspace(3) %ptr, i64 %data seq_cst
  ret void
}

attributes #0 = { nounwind "amdgpu-waves-per-eu"="10,10" }
