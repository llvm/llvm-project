# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx908 --run-pass=post-RA-hazard-rec %s -o - | FileCheck -check-prefixes=GCN %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx908 --amdgpu-snop-padding=0 --run-pass=post-RA-hazard-rec %s -o - | FileCheck -check-prefixes=GCN %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx908 --amdgpu-snop-padding=1 --run-pass=post-RA-hazard-rec %s -o - | FileCheck -check-prefixes=GCN-NOP1 %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx908 --amdgpu-snop-padding=20 --run-pass=post-RA-hazard-rec %s -o - | FileCheck -check-prefixes=GCN-NOP20 %s

# do not insert s_nop between terminators

--- |
  define amdgpu_kernel void @multiple-terminators() { ret void }
  define amdgpu_kernel void @standard() { ret void }

  define amdgpu_kernel void @bundle() #0 {
    %1 = call i32 @func()
    ret void
  }

  declare hidden i32 @func() #0

  attributes #0 = { nounwind }
...


---
name: multiple-terminators
body:             |
  ; GCN-LABEL: name: multiple-terminators
  ; GCN: bb.0:
  ; GCN-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; GCN-NEXT:   liveins: $sgpr0, $sgpr1
  ; GCN-NEXT: {{  $}}
  ; GCN-NEXT:   S_CBRANCH_SCC1 %bb.1, implicit $scc
  ; GCN-NEXT:   S_BRANCH %bb.2, implicit $scc
  ; GCN-NEXT: {{  $}}
  ; GCN-NEXT: bb.1:
  ; GCN-NEXT:   successors: %bb.2(0x80000000)
  ; GCN-NEXT: {{  $}}
  ; GCN-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
  ; GCN-NEXT: {{  $}}
  ; GCN-NEXT: bb.2:
  ; GCN-NEXT:   $sgpr1 = S_ADD_U32 $sgpr1, 2, implicit-def $scc
  ;
  ; GCN-NOP1-LABEL: name: multiple-terminators
  ; GCN-NOP1: bb.0:
  ; GCN-NOP1-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; GCN-NOP1-NEXT:   liveins: $sgpr0, $sgpr1
  ; GCN-NOP1-NEXT: {{  $}}
  ; GCN-NOP1-NEXT:   S_CBRANCH_SCC1 %bb.1, implicit $scc
  ; GCN-NOP1-NEXT:   S_BRANCH %bb.2, implicit $scc
  ; GCN-NOP1-NEXT: {{  $}}
  ; GCN-NOP1-NEXT: bb.1:
  ; GCN-NOP1-NEXT:   successors: %bb.2(0x80000000)
  ; GCN-NOP1-NEXT: {{  $}}
  ; GCN-NOP1-NEXT:   S_NOP 0
  ; GCN-NOP1-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
  ; GCN-NOP1-NEXT: {{  $}}
  ; GCN-NOP1-NEXT: bb.2:
  ; GCN-NOP1-NEXT:   S_NOP 0
  ; GCN-NOP1-NEXT:   $sgpr1 = S_ADD_U32 $sgpr1, 2, implicit-def $scc
  ;
  ; GCN-NOP20-LABEL: name: multiple-terminators
  ; GCN-NOP20: bb.0:
  ; GCN-NOP20-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; GCN-NOP20-NEXT:   liveins: $sgpr0, $sgpr1
  ; GCN-NOP20-NEXT: {{  $}}
  ; GCN-NOP20-NEXT:   S_CBRANCH_SCC1 %bb.1, implicit $scc
  ; GCN-NOP20-NEXT:   S_BRANCH %bb.2, implicit $scc
  ; GCN-NOP20-NEXT: {{  $}}
  ; GCN-NOP20-NEXT: bb.1:
  ; GCN-NOP20-NEXT:   successors: %bb.2(0x80000000)
  ; GCN-NOP20-NEXT: {{  $}}
  ; GCN-NOP20-NEXT:   S_NOP 7
  ; GCN-NOP20-NEXT:   S_NOP 7
  ; GCN-NOP20-NEXT:   S_NOP 3
  ; GCN-NOP20-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
  ; GCN-NOP20-NEXT: {{  $}}
  ; GCN-NOP20-NEXT: bb.2:
  ; GCN-NOP20-NEXT:   S_NOP 7
  ; GCN-NOP20-NEXT:   S_NOP 7
  ; GCN-NOP20-NEXT:   S_NOP 3
  ; GCN-NOP20-NEXT:   $sgpr1 = S_ADD_U32 $sgpr1, 2, implicit-def $scc
  bb.0:
    liveins: $sgpr0, $sgpr1

    S_CBRANCH_SCC1 %bb.1, implicit $scc
    S_BRANCH %bb.2, implicit $scc
  bb.1:
    $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
  bb.2:
    $sgpr1 = S_ADD_U32 $sgpr1, 2, implicit-def $scc
...


---
name:            standard
body:            |
  bb.0:
    ; GCN-LABEL: name: standard
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
    ; GCN-NEXT: $sgpr1 = S_ADDC_U32 $sgpr1, 2, implicit-def $scc, implicit $scc
    ; GCN-NEXT: S_ENDPGM 0
    ;
    ; GCN-NOP1-LABEL: name: standard
    ; GCN-NOP1: S_NOP 0
    ; GCN-NOP1-NEXT: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NOP1-NEXT: S_NOP 0
    ; GCN-NOP1-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NOP1-NEXT: S_NOP 0
    ; GCN-NOP1-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
    ; GCN-NOP1-NEXT: S_NOP 0
    ; GCN-NOP1-NEXT: $sgpr1 = S_ADDC_U32 $sgpr1, 2, implicit-def $scc, implicit $scc
    ; GCN-NOP1-NEXT: S_ENDPGM 0
    ;
    ; GCN-NOP20-LABEL: name: standard
    ; GCN-NOP20: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: $sgpr1 = S_ADDC_U32 $sgpr1, 2, implicit-def $scc, implicit $scc
    ; GCN-NOP20-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    $sgpr0_sgpr1 = S_GETPC_B64
    $sgpr0 = S_ADD_U32 $sgpr0, 4, implicit-def $scc
    $sgpr1 = S_ADDC_U32 $sgpr1, 2, implicit-def $scc, implicit $scc
    S_ENDPGM 0
...

# Do not insert s_nop inside bundles to preserve potential pc relative offsets.

---
name:            bundle
body:            |
  bb.0:
    ; GCN-LABEL: name: bundle
    ; GCN: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NEXT: BUNDLE implicit-def $sgpr0_sgpr1 {
    ; GCN-NEXT:   $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @func + 4, implicit-def $scc
    ; GCN-NEXT:   $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-hi) @func + 4, implicit-def $scc, implicit $scc
    ; GCN-NEXT: }
    ; GCN-NEXT: dead $sgpr30_sgpr31 = SI_CALL killed renamable $sgpr4_sgpr5, @func, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def dead $vgpr0
    ; GCN-NEXT: S_ENDPGM 0
    ;
    ; GCN-NOP1-LABEL: name: bundle
    ; GCN-NOP1: S_NOP 0
    ; GCN-NOP1-NEXT: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NOP1-NEXT: S_NOP 0
    ; GCN-NOP1-NEXT: BUNDLE implicit-def $sgpr0_sgpr1 {
    ; GCN-NOP1-NEXT:   $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NOP1-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @func + 4, implicit-def $scc
    ; GCN-NOP1-NEXT:   $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-hi) @func + 4, implicit-def $scc, implicit $scc
    ; GCN-NOP1-NEXT: }
    ; GCN-NOP1-NEXT: S_NOP 0
    ; GCN-NOP1-NEXT: dead $sgpr30_sgpr31 = SI_CALL killed renamable $sgpr4_sgpr5, @func, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def dead $vgpr0
    ; GCN-NOP1-NEXT: S_ENDPGM 0
    ;
    ; GCN-NOP20-LABEL: name: bundle
    ; GCN-NOP20: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: BUNDLE implicit-def $sgpr0_sgpr1 {
    ; GCN-NOP20-NEXT:   $sgpr0_sgpr1 = S_GETPC_B64
    ; GCN-NOP20-NEXT:   $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @func + 4, implicit-def $scc
    ; GCN-NOP20-NEXT:   $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-hi) @func + 4, implicit-def $scc, implicit $scc
    ; GCN-NOP20-NEXT: }
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 7
    ; GCN-NOP20-NEXT: S_NOP 3
    ; GCN-NOP20-NEXT: dead $sgpr30_sgpr31 = SI_CALL killed renamable $sgpr4_sgpr5, @func, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def dead $vgpr0
    ; GCN-NOP20-NEXT: S_ENDPGM 0
    $vgpr1 = V_CNDMASK_B32_e64 0, $vgpr1, 0, $vgpr2, $sgpr0_sgpr1, implicit $exec
    BUNDLE implicit-def $sgpr0_sgpr1 {
      $sgpr0_sgpr1 = S_GETPC_B64
      $sgpr0 = S_ADD_U32 $sgpr0, target-flags(amdgpu-rel32-lo) @func + 4, implicit-def $scc
      $sgpr1 = S_ADDC_U32 $sgpr1, target-flags(amdgpu-rel32-hi) @func + 4, implicit-def $scc, implicit $scc
    }
    dead $sgpr30_sgpr31 = SI_CALL killed renamable $sgpr4_sgpr5, @func, csr_amdgpu, implicit $sgpr0_sgpr1_sgpr2_sgpr3, implicit-def dead $vgpr0
    S_ENDPGM 0
...


