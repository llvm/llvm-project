# RUN: llc -mtriple=amdgcn -mcpu=gfx1030 -verify-machineinstrs %s -o - -run-pass=amdgpu-hot-block-remat  -amdgpu-remat-enable-sub-exp-remat | FileCheck %s

# Regression test for PHI being sinked to uses as a pacifist.

# CHECK: bb.2.bb19:
# CHECK: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI
# CHECK-NEXT: PHI

--- |
  ; ModuleID = 'C:\llvm-project\llvm\test\CodeGen\AMDGPU\remat\phi_pacifist.ll'
  source_filename = "reduced.ll"
  target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-p9:192:256:256:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7:8:9"
  target triple = "amdgcn"
  
  define amdgpu_ps void @_amdgpu_ps_main(float %arg, float %arg1, float %arg2, float %arg3, float %arg4, i32 %arg5, float %arg6, float %arg7, float %arg8, <2 x half> %arg9, i1 %arg10) #0 {
  bb:
    br label %bb19, !amdgpu.uniform !0
  
  bb11:                                             ; preds = %bb19
    %i21.lcssa = phi i32 [ %i21, %bb19 ]
    %i23.lcssa = phi i32 [ %i23, %bb19 ]
    %i26.lcssa = phi float [ %i26, %bb19 ]
    %.lcssa = phi i64 [ %0, %bb19 ]
    call void @llvm.amdgcn.end.cf.i64(i64 %.lcssa)
    %i = bitcast i32 %i21.lcssa to float
    %i12 = bitcast i32 %i23.lcssa to float
    %i13 = fmul float 0.000000e+00, %i26.lcssa
    %i18 = call <2 x half> @llvm.amdgcn.cvt.pkrtz(float %arg4, float %arg8)
    call void @llvm.amdgcn.exp.compr.v2f16(i32 0, i32 0, <2 x half> %i18, <2 x half> %arg9, i1 false, i1 false)
    ret void
  
  bb19:                                             ; preds = %bb19, %bb
    %phi.broken = phi i64 [ %0, %bb19 ], [ 0, %bb ]
    %i20 = phi i32 [ %arg5, %bb ], [ 0, %bb19 ]
    %i21 = phi i32 [ 0, %bb ], [ %i35, %bb19 ]
    %i22 = phi i32 [ 0, %bb ], [ %i38, %bb19 ]
    %i23 = phi i32 [ 0, %bb ], [ %i60, %bb19 ]
    %i24 = phi i32 [ 0, %bb ], [ %i61, %bb19 ]
    %i25 = phi i32 [ 0, %bb ], [ %i62, %bb19 ]
    %i26 = phi float [ 0.000000e+00, %bb ], [ %i39, %bb19 ]
    %i27 = phi i32 [ 0, %bb ], [ %i49, %bb19 ]
    %i28 = phi i32 [ 0, %bb ], [ %i50, %bb19 ]
    %i29 = phi i32 [ 0, %bb ], [ %i51, %bb19 ]
    %i30 = call <4 x float> @llvm.amdgcn.image.load.2d.v4f32.i32.v8i32(i32 1, i32 %i20, i32 0, <8 x i32> zeroinitializer, i32 0, i32 0)
    %i31 = extractelement <4 x float> %i30, i64 0
    %i32 = fmul float %arg1, %i31
    %i33 = bitcast i32 %i22 to float
    %i34 = fmul float %arg, %i32
    %i35 = select i1 %arg10, i32 %arg5, i32 %i21
    %i36 = fadd float 0.000000e+00, %i33
    %i37 = bitcast float %i36 to i32
    %i38 = select i1 %arg10, i32 %i22, i32 %i37
    %i39 = fadd float %i26, 1.000000e+00
    %i40 = bitcast i32 %i27 to float
    %i41 = bitcast i32 %i28 to float
    %i42 = bitcast i32 %i29 to float
    %i43 = fadd float 0.000000e+00, %i40
    %i44 = fadd float 0.000000e+00, %i41
    %i45 = fadd float 0.000000e+00, %i42
    %i46 = bitcast float %i43 to i32
    %i47 = bitcast float %i44 to i32
    %i48 = bitcast float %i45 to i32
    %i49 = select i1 %arg10, i32 %i27, i32 %i46
    %i50 = select i1 %arg10, i32 %i28, i32 %i47
    %i51 = select i1 %arg10, i32 %i29, i32 %i48
    %i52 = fmul float %i34, %arg7
    %i53 = bitcast i32 %i24 to float
    %i54 = bitcast i32 %i25 to float
    %i55 = fadd float %arg6, %i53
    %i56 = fadd float %arg2, %i54
    %i57 = bitcast float %i52 to i32
    %i58 = bitcast float %i55 to i32
    %i59 = bitcast float %i56 to i32
    %i60 = select i1 %arg10, i32 %i57, i32 %i23
    %i61 = select i1 %arg10, i32 %i58, i32 %i24
    %i62 = select i1 %arg10, i32 %i59, i32 %i25
    %i63 = sitofp i32 %i20 to float
    %i64 = fcmp olt float %arg3, %i63
    %0 = call i64 @llvm.amdgcn.if.break.i64(i1 %i64, i64 %phi.broken)
    %1 = call i1 @llvm.amdgcn.loop.i64(i64 %0)
    br i1 %1, label %bb11, label %bb19
  }
  
  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare <2 x half> @llvm.amdgcn.cvt.pkrtz(float, float) #1
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
  declare void @llvm.amdgcn.exp.compr.v2f16(i32 immarg, i32 immarg, <2 x half>, <2 x half>, i1 immarg, i1 immarg) #2
  
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
  declare <4 x float> @llvm.amdgcn.image.load.2d.v4f32.i32.v8i32(i32 immarg, i32, i32, <8 x i32>, i32 immarg, i32 immarg) #3
  
  ; Function Attrs: nocallback nofree nounwind willreturn memory(none)
  declare i64 @llvm.amdgcn.if.break.i64(i1, i64) #4
  
  ; Function Attrs: nocallback nofree nounwind willreturn
  declare i1 @llvm.amdgcn.loop.i64(i64) #5
  
  ; Function Attrs: nocallback nofree nounwind willreturn
  declare void @llvm.amdgcn.end.cf.i64(i64) #5
  
  attributes #0 = { "target-cpu"="gfx1010" "target-features"=",+wavefrontsize64,+cumode,-xnack" }
  attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) "target-cpu"="gfx1010" }
  attributes #2 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) "target-cpu"="gfx1010" }
  attributes #3 = { nocallback nofree nosync nounwind willreturn memory(read) "target-cpu"="gfx1010" }
  attributes #4 = { nocallback nofree nounwind willreturn memory(none) }
  attributes #5 = { nocallback nofree nounwind willreturn }
  
  !0 = !{}

...
---
name:            _amdgpu_ps_main
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHContTarget: false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 1, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 2, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 3, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 4, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 5, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 6, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 7, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 8, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 9, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 10, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 11, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 12, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 13, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 14, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 15, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 16, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 17, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 18, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 19, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 20, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 21, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 22, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 23, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 24, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 25, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 26, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 27, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 28, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 29, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 30, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 31, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 32, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 33, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 34, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 35, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 36, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 37, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 38, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 39, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 40, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 41, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 42, class: sreg_64_xexec, preferred-register: '$vcc', flags: [  ] }
  - { id: 43, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 44, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 45, class: sgpr_256, preferred-register: '', flags: [  ] }
  - { id: 46, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 47, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 48, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 49, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 50, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 51, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 52, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 53, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 54, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 55, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 56, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 57, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 58, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 59, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 60, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 61, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 62, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 63, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 64, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 65, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 66, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 67, class: sreg_64_xexec, preferred-register: '', flags: [  ] }
  - { id: 68, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 69, class: sreg_64, preferred-register: '$vcc', flags: [  ] }
  - { id: 70, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 71, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 72, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 73, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 74, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 75, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 76, class: vgpr_32, preferred-register: '', flags: [  ] }
liveins:
  - { reg: '$vgpr0', virtual-reg: '%25' }
  - { reg: '$vgpr1', virtual-reg: '%26' }
  - { reg: '$vgpr2', virtual-reg: '%27' }
  - { reg: '$vgpr3', virtual-reg: '%28' }
  - { reg: '$vgpr4', virtual-reg: '%29' }
  - { reg: '$vgpr5', virtual-reg: '%30' }
  - { reg: '$vgpr6', virtual-reg: '%31' }
  - { reg: '$vgpr7', virtual-reg: '%32' }
  - { reg: '$vgpr8', virtual-reg: '%33' }
  - { reg: '$vgpr9', virtual-reg: '%34' }
  - { reg: '$vgpr10', virtual-reg: '%35' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  explicitKernArgSize: 0
  maxKernArgAlign: 4
  ldsSize:         0
  gdsSize:         0
  dynLDSAlign:     1
  isEntryFunction: true
  isChainFunction: false
  noSignedZerosFPMath: false
  memoryBound:     false
  waveLimiter:     false
  hasSpilledSGPRs: false
  hasSpilledVGPRs: false
  scratchRSrcReg:  '$sgpr100_sgpr101_sgpr102_sgpr103'
  frameOffsetReg:  '$fp_reg'
  stackPtrOffsetReg: '$sgpr32'
  bytesInStackArgArea: 0
  returnsVoid:     true
  argumentInfo:
    privateSegmentWaveByteOffset: { reg: '$sgpr0' }
  psInputAddr:     2047
  psInputEnable:   2047
  maxMemoryClusterDWords: 8
  mode:
    ieee:            false
    dx10-clamp:      true
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true
  highBitsOf32BitAddress: 0
  occupancy:       20
  vgprForAGPRCopy: ''
  sgprForEXECCopy: '$sgpr104_sgpr105'
  longBranchReservedReg: ''
  hasInitWholeWave: false
body:             |
  bb.0.bb:
    successors: %bb.2(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6, $vgpr7, $vgpr8, $vgpr9, $vgpr10
  
    %35:vgpr_32 = COPY $vgpr10
    %34:vgpr_32 = COPY $vgpr9
    %33:vgpr_32 = COPY $vgpr8
    %32:vgpr_32 = COPY $vgpr7
    %31:vgpr_32 = COPY $vgpr6
    %30:vgpr_32 = COPY $vgpr5
    %29:vgpr_32 = COPY $vgpr4
    %28:vgpr_32 = COPY $vgpr3
    %27:vgpr_32 = COPY $vgpr2
    %26:vgpr_32 = COPY $vgpr1
    %25:vgpr_32 = COPY $vgpr0
    %41:vgpr_32 = V_AND_B32_e64 1, %35, implicit $exec
    %42:sreg_64_xexec = V_CMP_EQ_U32_e64 1, killed %41, implicit $exec
    %39:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %38:sreg_64 = S_MOV_B64 0
    %76:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    %51:sgpr_32 = S_MOV_B32 0
    %45:sgpr_256 = REG_SEQUENCE %51, %subreg.sub0, %51, %subreg.sub1, %51, %subreg.sub2, %51, %subreg.sub3, %51, %subreg.sub4, %51, %subreg.sub5, %51, %subreg.sub6, %51, %subreg.sub7
    S_BRANCH %bb.2
  
  bb.1.bb11:
    SI_END_CF %24, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %70:vgpr_32 = nofpexcept V_CVT_PKRTZ_F16_F32_e64 0, %29, 0, %33, 0, 0, implicit $mode, implicit $exec
    %71:sreg_32 = IMPLICIT_DEF
    %72:vgpr_32 = COPY %71
    %73:sreg_32 = IMPLICIT_DEF
    %74:vgpr_32 = COPY %73
    EXP 0, killed %70, %34, %72, %74, 0, -1, 0, implicit $exec
    S_ENDPGM 0
  
  bb.2.bb19:
    successors: %bb.1(0x04000000), %bb.2(0x7c000000)
  
    %4:sreg_64 = PHI %38, %bb.0, %24, %bb.2
    %5:vgpr_32 = PHI %30, %bb.0, %76, %bb.2
    %6:vgpr_32 = PHI %39, %bb.0, %15, %bb.2
    %7:vgpr_32 = PHI %39, %bb.0, %16, %bb.2
    %8:vgpr_32 = PHI %39, %bb.0, %21, %bb.2
    %9:vgpr_32 = PHI %39, %bb.0, %22, %bb.2
    %10:vgpr_32 = PHI %39, %bb.0, %23, %bb.2
    %75:vgpr_32 = PHI %76, %bb.0, %55, %bb.2
    %12:vgpr_32 = PHI %39, %bb.0, %18, %bb.2
    %13:vgpr_32 = PHI %39, %bb.0, %19, %bb.2
    %14:vgpr_32 = PHI %39, %bb.0, %20, %bb.2
    %46:vgpr_32 = IMAGE_LOAD_V1_V2_nsa_gfx10 %5, %76, %45, 1, 1, -1, 0, 0, 0, 0, 0, 0, implicit $exec :: (dereferenceable load (s32), addrspace 8)
    %48:vgpr_32 = nofpexcept V_MUL_F32_e64 0, %26, 0, killed %46, 0, 0, implicit $mode, implicit $exec
    %49:vgpr_32 = nofpexcept V_MUL_F32_e64 0, %25, 0, killed %48, 0, 0, implicit $mode, implicit $exec
    %15:vgpr_32 = V_CNDMASK_B32_e64 0, %6, 0, %30, %42, implicit $exec
    %52:vgpr_32 = nofpexcept V_ADD_F32_e64 0, 0, 0, %7, 0, 0, implicit $mode, implicit $exec
    %16:vgpr_32 = V_CNDMASK_B32_e64 0, killed %52, 0, %7, %42, implicit $exec
    %55:vgpr_32 = nofpexcept V_ADD_F32_e64 0, 1065353216, 0, %75, 0, 0, implicit $mode, implicit $exec
    %56:vgpr_32 = nofpexcept V_ADD_F32_e64 0, 0, 0, %12, 0, 0, implicit $mode, implicit $exec
    %57:vgpr_32 = nofpexcept V_ADD_F32_e64 0, 0, 0, %13, 0, 0, implicit $mode, implicit $exec
    %58:vgpr_32 = nofpexcept V_ADD_F32_e64 0, 0, 0, %14, 0, 0, implicit $mode, implicit $exec
    %18:vgpr_32 = V_CNDMASK_B32_e64 0, killed %56, 0, %12, %42, implicit $exec
    %19:vgpr_32 = V_CNDMASK_B32_e64 0, killed %57, 0, %13, %42, implicit $exec
    %20:vgpr_32 = V_CNDMASK_B32_e64 0, killed %58, 0, %14, %42, implicit $exec
    %62:vgpr_32 = nofpexcept V_MUL_F32_e64 0, killed %49, 0, %32, 0, 0, implicit $mode, implicit $exec
    %63:vgpr_32 = nofpexcept V_ADD_F32_e64 0, %31, 0, %9, 0, 0, implicit $mode, implicit $exec
    %64:vgpr_32 = nofpexcept V_ADD_F32_e64 0, %27, 0, %10, 0, 0, implicit $mode, implicit $exec
    %21:vgpr_32 = V_CNDMASK_B32_e64 0, %8, 0, killed %62, %42, implicit $exec
    %22:vgpr_32 = V_CNDMASK_B32_e64 0, %9, 0, killed %63, %42, implicit $exec
    %23:vgpr_32 = V_CNDMASK_B32_e64 0, %10, 0, killed %64, %42, implicit $exec
    %68:vgpr_32 = V_CVT_F32_I32_e64 %5, 0, 0, implicit $mode, implicit $exec
    %69:sreg_64 = nofpexcept V_CMP_LT_F32_e64 0, %28, 0, killed %68, 0, implicit $mode, implicit $exec
    %24:sreg_64 = SI_IF_BREAK killed %69, %4, implicit-def dead $scc
    SI_LOOP %24, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.1

...
