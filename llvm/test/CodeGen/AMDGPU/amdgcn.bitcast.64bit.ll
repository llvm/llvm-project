; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define double @bitcast_i64_to_f64(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_f64:
; VI-LABEL: bitcast_i64_to_f64:
; GFX9-LABEL: bitcast_i64_to_f64:
; GFX11-TRUE16-LABEL: bitcast_i64_to_f64:
; GFX11-FAKE16-LABEL: bitcast_i64_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_i64_to_f64_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_f64_scalar:
; VI-LABEL: bitcast_i64_to_f64_scalar:
; GFX9-LABEL: bitcast_i64_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define i64 @bitcast_f64_to_i64(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_i64:
; VI-LABEL: bitcast_f64_to_i64:
; GFX9-LABEL: bitcast_f64_to_i64:
; GFX11-TRUE16-LABEL: bitcast_f64_to_i64:
; GFX11-FAKE16-LABEL: bitcast_f64_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast double %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_f64_to_i64_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_i64_scalar:
; VI-LABEL: bitcast_f64_to_i64_scalar:
; GFX9-LABEL: bitcast_f64_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast double %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <2 x i32> @bitcast_i64_to_v2i32(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_v2i32:
; VI-LABEL: bitcast_i64_to_v2i32:
; GFX9-LABEL: bitcast_i64_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_i64_to_v2i32_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_v2i32_scalar:
; VI-LABEL: bitcast_i64_to_v2i32_scalar:
; GFX9-LABEL: bitcast_i64_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define i64 @bitcast_v2i32_to_i64(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_i64:
; VI-LABEL: bitcast_v2i32_to_i64:
; GFX9-LABEL: bitcast_v2i32_to_i64:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_i64:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_v2i32_to_i64_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_i64_scalar:
; VI-LABEL: bitcast_v2i32_to_i64_scalar:
; GFX9-LABEL: bitcast_v2i32_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <2 x float> @bitcast_i64_to_v2f32(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_v2f32:
; VI-LABEL: bitcast_i64_to_v2f32:
; GFX9-LABEL: bitcast_i64_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_i64_to_v2f32_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_v2f32_scalar:
; VI-LABEL: bitcast_i64_to_v2f32_scalar:
; GFX9-LABEL: bitcast_i64_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define i64 @bitcast_v2f32_to_i64(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_i64:
; VI-LABEL: bitcast_v2f32_to_i64:
; GFX9-LABEL: bitcast_v2f32_to_i64:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_i64:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_v2f32_to_i64_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_i64_scalar:
; VI-LABEL: bitcast_v2f32_to_i64_scalar:
; GFX9-LABEL: bitcast_v2f32_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <4 x i16> @bitcast_i64_to_v4i16(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_v4i16:
; VI-LABEL: bitcast_i64_to_v4i16:
; GFX9-LABEL: bitcast_i64_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_i64_to_v4i16_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_v4i16_scalar:
; VI-LABEL: bitcast_i64_to_v4i16_scalar:
; GFX9-LABEL: bitcast_i64_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define i64 @bitcast_v4i16_to_i64(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_i64:
; VI-LABEL: bitcast_v4i16_to_i64:
; GFX9-LABEL: bitcast_v4i16_to_i64:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_i64:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_v4i16_to_i64_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_i64_scalar:
; VI-LABEL: bitcast_v4i16_to_i64_scalar:
; GFX9-LABEL: bitcast_v4i16_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <4 x half> @bitcast_i64_to_v4f16(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_v4f16:
; VI-LABEL: bitcast_i64_to_v4f16:
; GFX9-LABEL: bitcast_i64_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_i64_to_v4f16_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_v4f16_scalar:
; VI-LABEL: bitcast_i64_to_v4f16_scalar:
; GFX9-LABEL: bitcast_i64_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define i64 @bitcast_v4f16_to_i64(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_i64:
; VI-LABEL: bitcast_v4f16_to_i64:
; GFX9-LABEL: bitcast_v4f16_to_i64:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_i64:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_v4f16_to_i64_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_i64_scalar:
; VI-LABEL: bitcast_v4f16_to_i64_scalar:
; GFX9-LABEL: bitcast_v4f16_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <4 x bfloat> @bitcast_i64_to_v4bf16(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_v4bf16:
; VI-LABEL: bitcast_i64_to_v4bf16:
; GFX9-LABEL: bitcast_i64_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_i64_to_v4bf16_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_v4bf16_scalar:
; VI-LABEL: bitcast_i64_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_i64_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define i64 @bitcast_v4bf16_to_i64(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_i64:
; VI-LABEL: bitcast_v4bf16_to_i64:
; GFX9-LABEL: bitcast_v4bf16_to_i64:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_i64:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_v4bf16_to_i64_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_i64_scalar:
; VI-LABEL: bitcast_v4bf16_to_i64_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <8 x i8> @bitcast_i64_to_v8i8(i64 %a, i32 %b) {
; SI-LABEL: bitcast_i64_to_v8i8:
; VI-LABEL: bitcast_i64_to_v8i8:
; GFX9-LABEL: bitcast_i64_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_i64_to_v8i8_scalar(i64 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i64_to_v8i8_scalar:
; VI-LABEL: bitcast_i64_to_v8i8_scalar:
; GFX9-LABEL: bitcast_i64_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_i64_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_i64_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i64 %a, 3
  %a2 = bitcast i64 %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast i64 %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define i64 @bitcast_v8i8_to_i64(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_i64:
; VI-LABEL: bitcast_v8i8_to_i64:
; GFX9-LABEL: bitcast_v8i8_to_i64:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_i64:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define inreg i64 @bitcast_v8i8_to_i64_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_i64_scalar:
; VI-LABEL: bitcast_v8i8_to_i64_scalar:
; GFX9-LABEL: bitcast_v8i8_to_i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to i64
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to i64
  br label %end

end:
  %phi = phi i64 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i64 %phi
}

define <2 x i32> @bitcast_f64_to_v2i32(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_v2i32:
; VI-LABEL: bitcast_f64_to_v2i32:
; GFX9-LABEL: bitcast_f64_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_f64_to_v2i32_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_v2i32_scalar:
; VI-LABEL: bitcast_f64_to_v2i32_scalar:
; GFX9-LABEL: bitcast_f64_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define double @bitcast_v2i32_to_f64(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_f64:
; VI-LABEL: bitcast_v2i32_to_f64:
; GFX9-LABEL: bitcast_v2i32_to_f64:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_f64:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_v2i32_to_f64_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_f64_scalar:
; VI-LABEL: bitcast_v2i32_to_f64_scalar:
; GFX9-LABEL: bitcast_v2i32_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define <2 x float> @bitcast_f64_to_v2f32(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_v2f32:
; VI-LABEL: bitcast_f64_to_v2f32:
; GFX9-LABEL: bitcast_f64_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_f64_to_v2f32_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_v2f32_scalar:
; VI-LABEL: bitcast_f64_to_v2f32_scalar:
; GFX9-LABEL: bitcast_f64_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define double @bitcast_v2f32_to_f64(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_f64:
; VI-LABEL: bitcast_v2f32_to_f64:
; GFX9-LABEL: bitcast_v2f32_to_f64:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_f64:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_v2f32_to_f64_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_f64_scalar:
; VI-LABEL: bitcast_v2f32_to_f64_scalar:
; GFX9-LABEL: bitcast_v2f32_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define <4 x i16> @bitcast_f64_to_v4i16(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_v4i16:
; VI-LABEL: bitcast_f64_to_v4i16:
; GFX9-LABEL: bitcast_f64_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_f64_to_v4i16_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_v4i16_scalar:
; VI-LABEL: bitcast_f64_to_v4i16_scalar:
; GFX9-LABEL: bitcast_f64_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define double @bitcast_v4i16_to_f64(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_f64:
; VI-LABEL: bitcast_v4i16_to_f64:
; GFX9-LABEL: bitcast_v4i16_to_f64:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_f64:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_v4i16_to_f64_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_f64_scalar:
; VI-LABEL: bitcast_v4i16_to_f64_scalar:
; GFX9-LABEL: bitcast_v4i16_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define <4 x half> @bitcast_f64_to_v4f16(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_v4f16:
; VI-LABEL: bitcast_f64_to_v4f16:
; GFX9-LABEL: bitcast_f64_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_f64_to_v4f16_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_v4f16_scalar:
; VI-LABEL: bitcast_f64_to_v4f16_scalar:
; GFX9-LABEL: bitcast_f64_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define double @bitcast_v4f16_to_f64(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_f64:
; VI-LABEL: bitcast_v4f16_to_f64:
; GFX9-LABEL: bitcast_v4f16_to_f64:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_f64:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_v4f16_to_f64_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_f64_scalar:
; VI-LABEL: bitcast_v4f16_to_f64_scalar:
; GFX9-LABEL: bitcast_v4f16_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define <4 x bfloat> @bitcast_f64_to_v4bf16(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_v4bf16:
; VI-LABEL: bitcast_f64_to_v4bf16:
; GFX9-LABEL: bitcast_f64_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_f64_to_v4bf16_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_v4bf16_scalar:
; VI-LABEL: bitcast_f64_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_f64_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define double @bitcast_v4bf16_to_f64(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_f64:
; VI-LABEL: bitcast_v4bf16_to_f64:
; GFX9-LABEL: bitcast_v4bf16_to_f64:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_f64:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_v4bf16_to_f64_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_f64_scalar:
; VI-LABEL: bitcast_v4bf16_to_f64_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define <8 x i8> @bitcast_f64_to_v8i8(double %a, i32 %b) {
; SI-LABEL: bitcast_f64_to_v8i8:
; VI-LABEL: bitcast_f64_to_v8i8:
; GFX9-LABEL: bitcast_f64_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_f64_to_v8i8_scalar(double inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f64_to_v8i8_scalar:
; VI-LABEL: bitcast_f64_to_v8i8_scalar:
; GFX9-LABEL: bitcast_f64_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_f64_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_f64_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd double %a, 1.000000e+00
  %a2 = bitcast double %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast double %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define double @bitcast_v8i8_to_f64(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_f64:
; VI-LABEL: bitcast_v8i8_to_f64:
; GFX9-LABEL: bitcast_v8i8_to_f64:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_f64:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define inreg double @bitcast_v8i8_to_f64_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_f64_scalar:
; VI-LABEL: bitcast_v8i8_to_f64_scalar:
; GFX9-LABEL: bitcast_v8i8_to_f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to double
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to double
  br label %end

end:
  %phi = phi double [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret double %phi
}

define <2 x float> @bitcast_v2i32_to_v2f32(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_v2f32:
; VI-LABEL: bitcast_v2i32_to_v2f32:
; GFX9-LABEL: bitcast_v2i32_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_v2i32_to_v2f32_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_v2f32_scalar:
; VI-LABEL: bitcast_v2i32_to_v2f32_scalar:
; GFX9-LABEL: bitcast_v2i32_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define <2 x i32> @bitcast_v2f32_to_v2i32(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_v2i32:
; VI-LABEL: bitcast_v2f32_to_v2i32:
; GFX9-LABEL: bitcast_v2f32_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_v2f32_to_v2i32_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_v2i32_scalar:
; VI-LABEL: bitcast_v2f32_to_v2i32_scalar:
; GFX9-LABEL: bitcast_v2f32_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define <4 x i16> @bitcast_v2i32_to_v4i16(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_v4i16:
; VI-LABEL: bitcast_v2i32_to_v4i16:
; GFX9-LABEL: bitcast_v2i32_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_v2i32_to_v4i16_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_v4i16_scalar:
; VI-LABEL: bitcast_v2i32_to_v4i16_scalar:
; GFX9-LABEL: bitcast_v2i32_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define <2 x i32> @bitcast_v4i16_to_v2i32(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_v2i32:
; VI-LABEL: bitcast_v4i16_to_v2i32:
; GFX9-LABEL: bitcast_v4i16_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_v4i16_to_v2i32_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_v2i32_scalar:
; VI-LABEL: bitcast_v4i16_to_v2i32_scalar:
; GFX9-LABEL: bitcast_v4i16_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define <4 x half> @bitcast_v2i32_to_v4f16(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_v4f16:
; VI-LABEL: bitcast_v2i32_to_v4f16:
; GFX9-LABEL: bitcast_v2i32_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_v2i32_to_v4f16_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_v4f16_scalar:
; VI-LABEL: bitcast_v2i32_to_v4f16_scalar:
; GFX9-LABEL: bitcast_v2i32_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define <2 x i32> @bitcast_v4f16_to_v2i32(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_v2i32:
; VI-LABEL: bitcast_v4f16_to_v2i32:
; GFX9-LABEL: bitcast_v4f16_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_v4f16_to_v2i32_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_v2i32_scalar:
; VI-LABEL: bitcast_v4f16_to_v2i32_scalar:
; GFX9-LABEL: bitcast_v4f16_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define <4 x bfloat> @bitcast_v2i32_to_v4bf16(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_v4bf16:
; VI-LABEL: bitcast_v2i32_to_v4bf16:
; GFX9-LABEL: bitcast_v2i32_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_v2i32_to_v4bf16_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_v4bf16_scalar:
; VI-LABEL: bitcast_v2i32_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_v2i32_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define <2 x i32> @bitcast_v4bf16_to_v2i32(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_v2i32:
; VI-LABEL: bitcast_v4bf16_to_v2i32:
; GFX9-LABEL: bitcast_v4bf16_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_v4bf16_to_v2i32_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_v2i32_scalar:
; VI-LABEL: bitcast_v4bf16_to_v2i32_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define <8 x i8> @bitcast_v2i32_to_v8i8(<2 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v2i32_to_v8i8:
; VI-LABEL: bitcast_v2i32_to_v8i8:
; GFX9-LABEL: bitcast_v2i32_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_v2i32_to_v8i8_scalar(<2 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2i32_to_v8i8_scalar:
; VI-LABEL: bitcast_v2i32_to_v8i8_scalar:
; GFX9-LABEL: bitcast_v2i32_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2i32_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2i32_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <2 x i32> %a, splat (i32 3)
  %a2 = bitcast <2 x i32> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x i32> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define <2 x i32> @bitcast_v8i8_to_v2i32(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_v2i32:
; VI-LABEL: bitcast_v8i8_to_v2i32:
; GFX9-LABEL: bitcast_v8i8_to_v2i32:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v2i32:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v2i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define inreg <2 x i32> @bitcast_v8i8_to_v2i32_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_v2i32_scalar:
; VI-LABEL: bitcast_v8i8_to_v2i32_scalar:
; GFX9-LABEL: bitcast_v8i8_to_v2i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v2i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v2i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <2 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <2 x i32>
  br label %end

end:
  %phi = phi <2 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x i32> %phi
}

define <4 x i16> @bitcast_v2f32_to_v4i16(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_v4i16:
; VI-LABEL: bitcast_v2f32_to_v4i16:
; GFX9-LABEL: bitcast_v2f32_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_v2f32_to_v4i16_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_v4i16_scalar:
; VI-LABEL: bitcast_v2f32_to_v4i16_scalar:
; GFX9-LABEL: bitcast_v2f32_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define <2 x float> @bitcast_v4i16_to_v2f32(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_v2f32:
; VI-LABEL: bitcast_v4i16_to_v2f32:
; GFX9-LABEL: bitcast_v4i16_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_v4i16_to_v2f32_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_v2f32_scalar:
; VI-LABEL: bitcast_v4i16_to_v2f32_scalar:
; GFX9-LABEL: bitcast_v4i16_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define <4 x half> @bitcast_v2f32_to_v4f16(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_v4f16:
; VI-LABEL: bitcast_v2f32_to_v4f16:
; GFX9-LABEL: bitcast_v2f32_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_v2f32_to_v4f16_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_v4f16_scalar:
; VI-LABEL: bitcast_v2f32_to_v4f16_scalar:
; GFX9-LABEL: bitcast_v2f32_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define <2 x float> @bitcast_v4f16_to_v2f32(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_v2f32:
; VI-LABEL: bitcast_v4f16_to_v2f32:
; GFX9-LABEL: bitcast_v4f16_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_v4f16_to_v2f32_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_v2f32_scalar:
; VI-LABEL: bitcast_v4f16_to_v2f32_scalar:
; GFX9-LABEL: bitcast_v4f16_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define <4 x bfloat> @bitcast_v2f32_to_v4bf16(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_v4bf16:
; VI-LABEL: bitcast_v2f32_to_v4bf16:
; GFX9-LABEL: bitcast_v2f32_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_v2f32_to_v4bf16_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_v4bf16_scalar:
; VI-LABEL: bitcast_v2f32_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_v2f32_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define <2 x float> @bitcast_v4bf16_to_v2f32(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_v2f32:
; VI-LABEL: bitcast_v4bf16_to_v2f32:
; GFX9-LABEL: bitcast_v4bf16_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_v4bf16_to_v2f32_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_v2f32_scalar:
; VI-LABEL: bitcast_v4bf16_to_v2f32_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define <8 x i8> @bitcast_v2f32_to_v8i8(<2 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v2f32_to_v8i8:
; VI-LABEL: bitcast_v2f32_to_v8i8:
; GFX9-LABEL: bitcast_v2f32_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_v2f32_to_v8i8_scalar(<2 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v2f32_to_v8i8_scalar:
; VI-LABEL: bitcast_v2f32_to_v8i8_scalar:
; GFX9-LABEL: bitcast_v2f32_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v2f32_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v2f32_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <2 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <2 x float> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <2 x float> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define <2 x float> @bitcast_v8i8_to_v2f32(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_v2f32:
; VI-LABEL: bitcast_v8i8_to_v2f32:
; GFX9-LABEL: bitcast_v8i8_to_v2f32:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v2f32:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v2f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define inreg <2 x float> @bitcast_v8i8_to_v2f32_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_v2f32_scalar:
; VI-LABEL: bitcast_v8i8_to_v2f32_scalar:
; GFX9-LABEL: bitcast_v8i8_to_v2f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v2f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v2f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <2 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <2 x float>
  br label %end

end:
  %phi = phi <2 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <2 x float> %phi
}

define <4 x half> @bitcast_v4i16_to_v4f16(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_v4f16:
; VI-LABEL: bitcast_v4i16_to_v4f16:
; GFX9-LABEL: bitcast_v4i16_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_v4i16_to_v4f16_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_v4f16_scalar:
; VI-LABEL: bitcast_v4i16_to_v4f16_scalar:
; GFX9-LABEL: bitcast_v4i16_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define <4 x i16> @bitcast_v4f16_to_v4i16(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_v4i16:
; VI-LABEL: bitcast_v4f16_to_v4i16:
; GFX9-LABEL: bitcast_v4f16_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_v4f16_to_v4i16_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_v4i16_scalar:
; VI-LABEL: bitcast_v4f16_to_v4i16_scalar:
; GFX9-LABEL: bitcast_v4f16_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define <4 x bfloat> @bitcast_v4i16_to_v4bf16(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_v4bf16:
; VI-LABEL: bitcast_v4i16_to_v4bf16:
; GFX9-LABEL: bitcast_v4i16_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_v4i16_to_v4bf16_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_v4bf16_scalar:
; VI-LABEL: bitcast_v4i16_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_v4i16_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define <4 x i16> @bitcast_v4bf16_to_v4i16(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_v4i16:
; VI-LABEL: bitcast_v4bf16_to_v4i16:
; GFX9-LABEL: bitcast_v4bf16_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_v4bf16_to_v4i16_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_v4i16_scalar:
; VI-LABEL: bitcast_v4bf16_to_v4i16_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define <8 x i8> @bitcast_v4i16_to_v8i8(<4 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v4i16_to_v8i8:
; VI-LABEL: bitcast_v4i16_to_v8i8:
; GFX9-LABEL: bitcast_v4i16_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_v4i16_to_v8i8_scalar(<4 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i16_to_v8i8_scalar:
; VI-LABEL: bitcast_v4i16_to_v8i8_scalar:
; GFX9-LABEL: bitcast_v4i16_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i16_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i16_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i16> %a, splat (i16 3)
  %a2 = bitcast <4 x i16> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i16> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define <4 x i16> @bitcast_v8i8_to_v4i16(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_v4i16:
; VI-LABEL: bitcast_v8i8_to_v4i16:
; GFX9-LABEL: bitcast_v8i8_to_v4i16:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v4i16:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v4i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define inreg <4 x i16> @bitcast_v8i8_to_v4i16_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_v4i16_scalar:
; VI-LABEL: bitcast_v8i8_to_v4i16_scalar:
; GFX9-LABEL: bitcast_v8i8_to_v4i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v4i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v4i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <4 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <4 x i16>
  br label %end

end:
  %phi = phi <4 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i16> %phi
}

define <4 x bfloat> @bitcast_v4f16_to_v4bf16(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_v4bf16:
; VI-LABEL: bitcast_v4f16_to_v4bf16:
; GFX9-LABEL: bitcast_v4f16_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_v4f16_to_v4bf16_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_v4bf16_scalar:
; VI-LABEL: bitcast_v4f16_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_v4f16_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define <4 x half> @bitcast_v4bf16_to_v4f16(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_v4f16:
; VI-LABEL: bitcast_v4bf16_to_v4f16:
; GFX9-LABEL: bitcast_v4bf16_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_v4bf16_to_v4f16_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_v4f16_scalar:
; VI-LABEL: bitcast_v4bf16_to_v4f16_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define <8 x i8> @bitcast_v4f16_to_v8i8(<4 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v4f16_to_v8i8:
; VI-LABEL: bitcast_v4f16_to_v8i8:
; GFX9-LABEL: bitcast_v4f16_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_v4f16_to_v8i8_scalar(<4 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f16_to_v8i8_scalar:
; VI-LABEL: bitcast_v4f16_to_v8i8_scalar:
; GFX9-LABEL: bitcast_v4f16_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f16_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f16_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <4 x half> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x half> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define <4 x half> @bitcast_v8i8_to_v4f16(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_v4f16:
; VI-LABEL: bitcast_v8i8_to_v4f16:
; GFX9-LABEL: bitcast_v8i8_to_v4f16:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v4f16:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v4f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define inreg <4 x half> @bitcast_v8i8_to_v4f16_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_v4f16_scalar:
; VI-LABEL: bitcast_v8i8_to_v4f16_scalar:
; GFX9-LABEL: bitcast_v8i8_to_v4f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v4f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v4f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <4 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <4 x half>
  br label %end

end:
  %phi = phi <4 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x half> %phi
}

define <8 x i8> @bitcast_v4bf16_to_v8i8(<4 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v4bf16_to_v8i8:
; VI-LABEL: bitcast_v4bf16_to_v8i8:
; GFX9-LABEL: bitcast_v4bf16_to_v8i8:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v8i8:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v8i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define inreg <8 x i8> @bitcast_v4bf16_to_v8i8_scalar(<4 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4bf16_to_v8i8_scalar:
; VI-LABEL: bitcast_v4bf16_to_v8i8_scalar:
; GFX9-LABEL: bitcast_v4bf16_to_v8i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4bf16_to_v8i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4bf16_to_v8i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <4 x bfloat> %a1 to <8 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x bfloat> %a to <8 x i8>
  br label %end

end:
  %phi = phi <8 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i8> %phi
}

define <4 x bfloat> @bitcast_v8i8_to_v4bf16(<8 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v8i8_to_v4bf16:
; VI-LABEL: bitcast_v8i8_to_v4bf16:
; GFX9-LABEL: bitcast_v8i8_to_v4bf16:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v4bf16:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v4bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}

define inreg <4 x bfloat> @bitcast_v8i8_to_v4bf16_scalar(<8 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i8_to_v4bf16_scalar:
; VI-LABEL: bitcast_v8i8_to_v4bf16_scalar:
; GFX9-LABEL: bitcast_v8i8_to_v4bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i8_to_v4bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i8_to_v4bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i8> %a, splat (i8 3)
  %a2 = bitcast <8 x i8> %a1 to <4 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i8> %a to <4 x bfloat>
  br label %end

end:
  %phi = phi <4 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x bfloat> %phi
}
