; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mcpu=gfx90a -amdgpu-mfma-vgpr-form < %s | FileCheck %s

target triple = "amdgcn-amd-amdhsa"

define void @test_rewrite_mfma_i32_32x32x8i8(i32 %arg0, i32 %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_i32_32x32x8i8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[12:15], v[2:3], off offset:48
; CHECK-NEXT:    global_load_dwordx4 a[8:11], v[2:3], off offset:32
; CHECK-NEXT:    global_load_dwordx4 a[4:7], v[2:3], off offset:16
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_i32_32x32x8i8 a[0:15], v0, v1, a[0:15]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:15]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <16 x i32>, ptr addrspace(1) %ptr
  %mai = call <16 x i32> @llvm.amdgcn.mfma.i32.32x32x8i8(i32 %arg0, i32 %arg1, <16 x i32> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<16 x i32> %mai)
  ret void
}

define void @test_rewrite_mfma_i32_16x16x16i8(i32 %arg0, i32 %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_i32_16x16x16i8:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_i32_16x16x16i8 a[0:3], v0, v1, a[0:3]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <4 x i32>, ptr addrspace(1) %ptr
  %mai = call <4 x i32> @llvm.amdgcn.mfma.i32.16x16x16i8(i32 %arg0, i32 %arg1, <4 x i32> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<4 x i32> %mai)
  ret void
}

define void @test_rewrite_mfma_f32_32x32x2bf16(<2 x i16> %arg0, <2 x i16> %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_f32_32x32x2bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[28:31], v[2:3], off offset:112
; CHECK-NEXT:    global_load_dwordx4 a[24:27], v[2:3], off offset:96
; CHECK-NEXT:    global_load_dwordx4 a[20:23], v[2:3], off offset:80
; CHECK-NEXT:    global_load_dwordx4 a[16:19], v[2:3], off offset:64
; CHECK-NEXT:    global_load_dwordx4 a[12:15], v[2:3], off offset:48
; CHECK-NEXT:    global_load_dwordx4 a[8:11], v[2:3], off offset:32
; CHECK-NEXT:    global_load_dwordx4 a[4:7], v[2:3], off offset:16
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_f32_32x32x2bf16 a[0:31], v0, v1, a[0:31]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:31]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <32 x float>, ptr addrspace(1) %ptr
  %mai = call <32 x float> @llvm.amdgcn.mfma.f32.32x32x2bf16(<2 x i16> %arg0, <2 x i16> %arg1, <32 x float> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<32 x float> %mai)
  ret void
}

define void @test_rewrite_mfma_f32_16x16x2bf16(<2 x i16> %arg0, <2 x i16> %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_f32_16x16x2bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[12:15], v[2:3], off offset:48
; CHECK-NEXT:    global_load_dwordx4 a[8:11], v[2:3], off offset:32
; CHECK-NEXT:    global_load_dwordx4 a[4:7], v[2:3], off offset:16
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_f32_16x16x2bf16 a[0:15], v0, v1, a[0:15]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:15]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <16 x float>, ptr addrspace(1) %ptr
  %mai = call <16 x float> @llvm.amdgcn.mfma.f32.16x16x2bf16(<2 x i16> %arg0, <2 x i16> %arg1, <16 x float> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<16 x float> %mai)
  ret void
}

define void @test_rewrite_mfma_f32_4x4x2bf16(<2 x i16> %arg0, <2 x i16> %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_f32_4x4x2bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_f32_4x4x2bf16 a[0:3], v0, v1, a[0:3]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <4 x float>, ptr addrspace(1) %ptr
  %mai = call <4 x float> @llvm.amdgcn.mfma.f32.4x4x2bf16(<2 x i16> %arg0, <2 x i16> %arg1, <4 x float> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<4 x float> %mai)
  ret void
}

define void @test_rewrite_mfma_f32_32x32x4bf16(<2 x i16> %arg0, <2 x i16> %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_f32_32x32x4bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[12:15], v[2:3], off offset:48
; CHECK-NEXT:    global_load_dwordx4 a[8:11], v[2:3], off offset:32
; CHECK-NEXT:    global_load_dwordx4 a[4:7], v[2:3], off offset:16
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_f32_32x32x4bf16 a[0:15], v0, v1, a[0:15]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:15]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <16 x float>, ptr addrspace(1) %ptr
  %mai = call <16 x float> @llvm.amdgcn.mfma.f32.32x32x4bf16(<2 x i16> %arg0, <2 x i16> %arg1, <16 x float> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<16 x float> %mai)
  ret void
}

define void @test_rewrite_mfma_f32_16x16x8bf16(<2 x i16> %arg0, <2 x i16> %arg1, ptr addrspace(1) %ptr) #0 {
; CHECK-LABEL: test_rewrite_mfma_f32_16x16x8bf16:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; CHECK-NEXT:    global_load_dwordx4 a[0:3], v[2:3], off
; CHECK-NEXT:    s_waitcnt vmcnt(0)
; CHECK-NEXT:    v_mfma_f32_16x16x8bf16 a[0:3], v0, v1, a[0:3]
; CHECK-NEXT:    ;;#ASMSTART
; CHECK-NEXT:    ; use a[0:3]
; CHECK-NEXT:    ;;#ASMEND
; CHECK-NEXT:    s_setpc_b64 s[30:31]
  %src2 = load <4 x float>, ptr addrspace(1) %ptr
  %mai = call <4 x float> @llvm.amdgcn.mfma.f32.16x16x8bf16(<2 x i16> %arg0, <2 x i16> %arg1, <4 x float> %src2, i32 0, i32 0, i32 0)
  call void asm sideeffect "; use $0", "a"(<4 x float> %mai)
  ret void
}

attributes #0 = { nounwind "amdgpu-flat-work-group-size"="1,256" "amdgpu-waves-per-eu"="4,4" }
