; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx700 < %s | FileCheck -check-prefixes=GFX7,GCN %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 < %s | FileCheck -check-prefixes=GFX9,GCN %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 < %s | FileCheck -check-prefixes=GFX11 %s

define i32 @fneg_select_i32_1(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fneg_select_i32_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, v2, -v1, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_i32_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, v2, -v1, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_i32_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, v2, -v1, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i32 %a, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %b
  ret i32 %select
}

define i32 @fneg_select_i32_2(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fneg_select_i32_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, -v1, v2, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_i32_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, -v1, v2, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_i32_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, -v1, v2, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i32 %a, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %b, i32 %neg.a
  ret i32 %select
}

define i32 @fneg_select_i32_both(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fneg_select_i32_both:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, -v2, -v1, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_i32_both:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, -v2, -v1, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_i32_both:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, -v2, -v1, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i32 %a, u0x80000000
  %neg.b = xor i32 %b, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %neg.b
  ret i32 %select
}

define i32 @fneg_1_fabs_2_select_i32(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fneg_1_fabs_2_select_i32:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, |v1|, -v1, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_1_fabs_2_select_i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, |v1|, -v1, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_1_fabs_2_select_i32:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, |v1|, -v1, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i32 %a, u0x80000000
  %abs.b = and i32 %a, u0x7fffffff
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %abs.b
  ret i32 %select
}

define <2 x i32> @fneg_select_v2i32_1(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fneg_select_v2i32_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, v4, -v2, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, v5, -v3, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_v2i32_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, v4, -v2, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, v5, -v3, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_v2i32_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, v4, -v2, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, v5, -v3, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor <2 x i32> %a, splat (i32 u0x80000000)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %neg.a, <2 x i32> %b
  ret <2 x i32> %select
}

define <2 x i32> @fneg_select_v2i32_2(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fneg_select_v2i32_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, -v2, v4, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, -v3, v5, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_v2i32_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, -v2, v4, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, -v3, v5, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_v2i32_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, -v2, v4, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, -v3, v5, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor <2 x i32> %a, splat (i32 u0x80000000)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %b, <2 x i32> %neg.a
  ret <2 x i32> %select
}

define i32 @fabs_select_i32_1(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fabs_select_i32_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, v2, |v1|, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fabs_select_i32_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, v2, |v1|, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fabs_select_i32_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, v2, |v1|, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = and i32 %a, u0x7fffffff
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %b
  ret i32 %select
}

define i32 @fabs_select_i32_2(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fabs_select_i32_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, |v1|, v2, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fabs_select_i32_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, |v1|, v2, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fabs_select_i32_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, |v1|, v2, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = and i32 %a, u0x7fffffff
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %b, i32 %neg.a
  ret i32 %select
}

define <2 x i32> @fabs_select_v2i32_1(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fabs_select_v2i32_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, v4, |v2|, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, v5, |v3|, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fabs_select_v2i32_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, v4, |v2|, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, v5, |v3|, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fabs_select_v2i32_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, v4, |v2|, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, v5, |v3|, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = and <2 x i32> %a, splat (i32 u0x7fffffff)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %neg.a, <2 x i32> %b
  ret <2 x i32> %select
}

define <2 x i32> @fabs_select_v2i32_2(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fabs_select_v2i32_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, |v2|, v4, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, |v3|, v5, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fabs_select_v2i32_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, |v2|, v4, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, |v3|, v5, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fabs_select_v2i32_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, |v2|, v4, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, |v3|, v5, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = and <2 x i32> %a, splat (i32 u0x7fffffff)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %b, <2 x i32> %neg.a
  ret <2 x i32> %select
}

define <2 x i32> @fneg_select_v2i32(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fneg_select_v2i32:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, -v2, |v2|, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, -v3, |v3|, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_v2i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, -v2, |v2|, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, -v3, |v3|, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_v2i32:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, -v2, |v2|, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, -v3, |v3|, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor <2 x i32> %a, splat (i32 u0x80000000)
  %abs.b = and <2 x i32> %a, splat (i32 u0x7fffffff)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %abs.b, <2 x i32> %neg.a
  ret <2 x i32> %select
}

define i32 @fneg_fabs_select_i32_1(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fneg_fabs_select_i32_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, v2, -|v1|, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_fabs_select_i32_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, v2, -|v1|, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_fabs_select_i32_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, v2, -|v1|, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = or i32 %a, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %b
  ret i32 %select
}

define i32 @fneg_fabs_select_i32_2(i32 %cond, i32 %a, i32 %b) {
; GFX7-LABEL: fneg_fabs_select_i32_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, -|v1|, v2, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_fabs_select_i32_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, -|v1|, v2, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_fabs_select_i32_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, -|v1|, v2, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = or i32 %a, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %b, i32 %neg.a
  ret i32 %select
}

define <2 x i32> @fneg_fabs_select_v2i32_1(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fneg_fabs_select_v2i32_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, v4, -|v2|, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, v5, -|v3|, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_fabs_select_v2i32_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, v4, -|v2|, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, v5, -|v3|, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_fabs_select_v2i32_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, v4, -|v2|, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, v5, -|v3|, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = or <2 x i32> %a, splat (i32 u0x80000000)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %neg.a, <2 x i32> %b
  ret <2 x i32> %select
}

define <2 x i32> @fneg_fabs_select_v2i32_2(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
; GFX7-LABEL: fneg_fabs_select_v2i32_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX7-NEXT:    v_cndmask_b32_e64 v0, -|v2|, v4, vcc
; GFX7-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX7-NEXT:    v_cndmask_b32_e64 v1, -|v3|, v5, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_fabs_select_v2i32_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v0
; GFX9-NEXT:    v_cndmask_b32_e64 v0, -|v2|, v4, vcc
; GFX9-NEXT:    v_cmp_eq_u32_e32 vcc, 0, v1
; GFX9-NEXT:    v_cndmask_b32_e64 v1, -|v3|, v5, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_fabs_select_v2i32_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v0
; GFX11-NEXT:    v_cndmask_b32_e64 v0, -|v2|, v4, vcc_lo
; GFX11-NEXT:    v_cmp_eq_u32_e32 vcc_lo, 0, v1
; GFX11-NEXT:    v_cndmask_b32_e64 v1, -|v3|, v5, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = or <2 x i32> %a, splat (i32 u0x80000000)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %b, <2 x i32> %neg.a
  ret <2 x i32> %select
}

define i64 @fneg_select_i64_1(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fneg_select_i64_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_i64_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_i64_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_xor_b32_e32 v1, 0x80000000, v3
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v4, v2 :: v_dual_cndmask_b32 v1, v5, v1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i64 %a, u0x8000000000000000
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %b
  ret i64 %select
}

define i64 @fneg_select_i64_2(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fneg_select_i64_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_select_i64_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_select_i64_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_xor_b32_e32 v1, 0x80000000, v3
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v2, v4 :: v_dual_cndmask_b32 v1, v1, v5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i64 %a, u0x8000000000000000
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %b, i64 %neg.a
  ret i64 %select
}

define i64 @fneg_1_fabs_2_select_i64(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fneg_1_fabs_2_select_i64:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX7-NEXT:    v_and_b32_e32 v5, 0x7fffffff, v5
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_1_fabs_2_select_i64:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX9-NEXT:    v_and_b32_e32 v5, 0x7fffffff, v5
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_1_fabs_2_select_i64:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_xor_b32_e32 v3, 0x80000000, v3
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v4, v2 :: v_dual_and_b32 v1, 0x7fffffff, v5
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_cndmask_b32_e32 v1, v1, v3, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = xor i64 %a, u0x8000000000000000
  %abs.b = and i64 %b, u0x7fffffffffffffff
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %abs.b
  ret i64 %select
}

define i64 @fabs_select_i64_1(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fabs_select_i64_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_and_b32_e32 v3, 0x7fffffff, v3
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fabs_select_i64_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_and_b32_e32 v3, 0x7fffffff, v3
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fabs_select_i64_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v4, v2 :: v_dual_and_b32 v1, 0x7fffffff, v3
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_cndmask_b32_e32 v1, v5, v1, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = and i64 %a, u0x7fffffffffffffff
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %b
  ret i64 %select
}

define i64 @fabs_select_i64_2(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fabs_select_i64_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_and_b32_e32 v3, 0x7fffffff, v3
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fabs_select_i64_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_and_b32_e32 v3, 0x7fffffff, v3
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fabs_select_i64_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v2, v4 :: v_dual_and_b32 v1, 0x7fffffff, v3
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_cndmask_b32_e32 v1, v1, v5, vcc_lo
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = and i64 %a, u0x7fffffffffffffff
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %b, i64 %neg.a
  ret i64 %select
}

define i64 @fneg_fabs_select_i64_1(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fneg_fabs_select_i64_1:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_or_b32_e32 v3, 0x80000000, v3
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_fabs_select_i64_1:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_or_b32_e32 v3, 0x80000000, v3
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v4, v2, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v5, v3, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_fabs_select_i64_1:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_or_b32_e32 v1, 0x80000000, v3
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v4, v2 :: v_dual_cndmask_b32 v1, v5, v1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = or i64 %a, u0x8000000000000000
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %b
  ret i64 %select
}

define i64 @fneg_fabs_select_i64_2(i64 %cond, i64 %a, i64 %b) {
; GFX7-LABEL: fneg_fabs_select_i64_2:
; GFX7:       ; %bb.0:
; GFX7-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX7-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX7-NEXT:    v_or_b32_e32 v3, 0x80000000, v3
; GFX7-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc
; GFX7-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc
; GFX7-NEXT:    s_setpc_b64 s[30:31]
;
; GFX9-LABEL: fneg_fabs_select_i64_2:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_cmp_eq_u64_e32 vcc, 0, v[0:1]
; GFX9-NEXT:    v_or_b32_e32 v3, 0x80000000, v3
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v4, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v3, v5, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: fneg_fabs_select_i64_2:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_cmp_eq_u64_e32 vcc_lo, 0, v[0:1]
; GFX11-NEXT:    v_or_b32_e32 v1, 0x80000000, v3
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v2, v4 :: v_dual_cndmask_b32 v1, v1, v5
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %neg.a = or i64 %a, u0x8000000000000000
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %b, i64 %neg.a
  ret i64 %select
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GCN: {{.*}}
