; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx700 < %s | FileCheck -check-prefixes=GCN,GFX7 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 < %s | FileCheck -check-prefixes=GCN,GFX9 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefixes=GFX11,GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefixes=GFX11,GFX11-FAKE16 %s

define i32 @fneg_select_i32(i32 %cond, i32 %a, i32 %b) {
  %neg.a = xor i32 %a, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %b
  ret i32 %select
}

define <2 x i32> @fneg_select_v2i32(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
  %neg.a = xor <2 x i32> %a, splat (i32 u0x80000000)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %neg.a, <2 x i32> %b
  ret <2 x i32> %select
}

define i32 @fabs_select_i32(i32 %cond, i32 %a, i32 %b) {
  %neg.a = and i32 %a, u0x7fffffff
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %b
  ret i32 %select
}

define <2 x i32> @fabs_select_v2i32(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
  %neg.a = and <2 x i32> %a, splat (i32 u0x7fffffff)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %neg.a, <2 x i32> %b
  ret <2 x i32> %select
}

define i32 @fneg_fabs_select_i32(i32 %cond, i32 %a, i32 %b) {
  %neg.a = or i32 %a, u0x80000000
  %cmp = icmp eq i32 %cond, zeroinitializer
  %select = select i1 %cmp, i32 %neg.a, i32 %b
  ret i32 %select
}

define <2 x i32> @fneg_fabs_select_v2i32(<2 x i32> %cond, <2 x i32> %a, <2 x i32> %b) {
  %neg.a = or <2 x i32> %a, splat (i32 u0x80000000)
  %cmp = icmp eq <2 x i32> %cond, zeroinitializer
  %select = select <2 x i1> %cmp, <2 x i32> %neg.a, <2 x i32> %b
  ret <2 x i32> %select
}

define i64 @fneg_select_i64(i64 %cond, i64 %a, i64 %b) {
  %neg.a = xor i64 %a, u0x8000000000000000
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %b
  ret i64 %select
}

define i64 @fabs_select_i64(i64 %cond, i64 %a, i64 %b) {
  %neg.a = and i64 %a, u0x7fffffffffffffff
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %b
  ret i64 %select
}

define i64 @fneg_fabs_select_i64(i64 %cond, i64 %a, i64 %b) {
  %neg.a = or i64 %a, u0x8000000000000000
  %cmp = icmp eq i64 %cond, zeroinitializer
  %select = select i1 %cmp, i64 %neg.a, i64 %b
  ret i64 %select
}
