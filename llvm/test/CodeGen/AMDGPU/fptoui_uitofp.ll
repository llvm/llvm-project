; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc < %s -mtriple=amdgcn | FileCheck %s

define amdgpu_kernel void @fptoui_f32_to_i16_to_f32(ptr addrspace(1) %out, float %x) {
; CHECK-LABEL: fptoui_f32_to_i16_to_f32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dword s6, s[4:5], 0xb
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_trunc_f32_e64 v0, |s6|
; CHECK-NEXT:    buffer_store_dword v0, off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui float %x to i16
  %fp = uitofp i16 %ui to float
  store float %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f32_to_i32_to_f32(ptr addrspace(1) %out, float %x) {
; CHECK-LABEL: fptoui_f32_to_i32_to_f32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dword s6, s[4:5], 0xb
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_trunc_f32_e64 v0, |s6|
; CHECK-NEXT:    buffer_store_dword v0, off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui float %x to i32
  %fp = uitofp i32 %ui to float
  store float %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f32_to_i64_to_f32(ptr addrspace(1) %out, float %x) {
; CHECK-LABEL: fptoui_f32_to_i64_to_f32:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dword s6, s[4:5], 0xb
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_trunc_f32_e64 v0, |s6|
; CHECK-NEXT:    buffer_store_dword v0, off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui float %x to i64
  %fp = uitofp i64 %ui to float
  store float %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f16_to_i16_to_f16(ptr addrspace(1) %out, half %x) {
; CHECK-LABEL: fptoui_f16_to_i16_to_f16:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dword s6, s[4:5], 0xb
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_cvt_f32_f16_e32 v0, s6
; CHECK-NEXT:    v_cvt_u32_f32_e32 v0, v0
; CHECK-NEXT:    v_cvt_f32_u32_e32 v0, v0
; CHECK-NEXT:    v_cvt_f16_f32_e32 v0, v0
; CHECK-NEXT:    buffer_store_short v0, off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui half %x to i16
  %fp = uitofp i16 %ui to half
  store half %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f16_to_i32_to_f16(ptr addrspace(1) %out, half %x) {
; CHECK-LABEL: fptoui_f16_to_i32_to_f16:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dword s6, s[4:5], 0xb
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_cvt_f32_f16_e64 v0, |s6|
; CHECK-NEXT:    v_trunc_f32_e32 v0, v0
; CHECK-NEXT:    v_cvt_f16_f32_e32 v0, v0
; CHECK-NEXT:    buffer_store_short v0, off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui half %x to i32
  %fp = uitofp i32 %ui to half
  store half %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f16_to_i64_to_f16(ptr addrspace(1) %out, half %x) {
; CHECK-LABEL: fptoui_f16_to_i64_to_f16:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dword s6, s[4:5], 0xb
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_cvt_f32_f16_e64 v0, |s6|
; CHECK-NEXT:    v_trunc_f32_e32 v0, v0
; CHECK-NEXT:    v_cvt_f16_f32_e32 v0, v0
; CHECK-NEXT:    buffer_store_short v0, off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui half %x to i64
  %fp = uitofp i64 %ui to half
  store half %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f64_to_i16_to_f64(ptr addrspace(1) %out, double %x) {
; CHECK-LABEL: fptoui_f64_to_i16_to_f64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s7, 0xf000
; CHECK-NEXT:    s_mov_b32 s6, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_mov_b32 s4, s0
; CHECK-NEXT:    s_mov_b32 s5, s1
; CHECK-NEXT:    v_cvt_u32_f64_e32 v0, s[2:3]
; CHECK-NEXT:    v_cvt_f64_u32_e32 v[0:1], v0
; CHECK-NEXT:    buffer_store_dwordx2 v[0:1], off, s[4:7], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui double %x to i16
  %fp = uitofp i16 %ui to double
  store double %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f64_to_i32_to_f64(ptr addrspace(1) %out, double %x) {
; CHECK-LABEL: fptoui_f64_to_i32_to_f64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dwordx4 s[0:3], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s7, 0xf000
; CHECK-NEXT:    s_mov_b32 s6, -1
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_mov_b32 s4, s0
; CHECK-NEXT:    s_mov_b32 s5, s1
; CHECK-NEXT:    v_cvt_u32_f64_e32 v0, s[2:3]
; CHECK-NEXT:    v_cvt_f64_u32_e32 v[0:1], v0
; CHECK-NEXT:    buffer_store_dwordx2 v[0:1], off, s[4:7], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui double %x to i32
  %fp = uitofp i32 %ui to double
  store double %fp, ptr addrspace(1) %out
  ret void
}

define amdgpu_kernel void @fptoui_f64_to_i64_to_f64(ptr addrspace(1) %out, double %x) {
; CHECK-LABEL: fptoui_f64_to_i64_to_f64:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x9
; CHECK-NEXT:    s_mov_b32 s3, 0xf000
; CHECK-NEXT:    s_mov_b32 s2, -1
; CHECK-NEXT:    s_mov_b32 s9, 0xfffff
; CHECK-NEXT:    v_not_b32_e32 v2, 31
; CHECK-NEXT:    v_mov_b32_e32 v0, -1
; CHECK-NEXT:    v_mov_b32_e32 v1, 0x3fefffff
; CHECK-NEXT:    s_mov_b32 s10, 0
; CHECK-NEXT:    s_mov_b32 s11, 0xc1f00000
; CHECK-NEXT:    s_mov_b32 s8, s2
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_mov_b32 s0, s4
; CHECK-NEXT:    s_mov_b32 s1, s5
; CHECK-NEXT:    s_bfe_u32 s4, s7, 0xb0014
; CHECK-NEXT:    s_and_b32 s12, s7, 0x80000000
; CHECK-NEXT:    s_add_i32 s13, s4, 0xfffffc01
; CHECK-NEXT:    s_lshr_b64 s[4:5], s[8:9], s13
; CHECK-NEXT:    s_andn2_b64 s[4:5], s[6:7], s[4:5]
; CHECK-NEXT:    s_cmp_lt_i32 s13, 0
; CHECK-NEXT:    s_cselect_b32 s4, 0, s4
; CHECK-NEXT:    s_cselect_b32 s5, s12, s5
; CHECK-NEXT:    s_cmp_gt_i32 s13, 51
; CHECK-NEXT:    s_cselect_b32 s5, s7, s5
; CHECK-NEXT:    s_cselect_b32 s4, s6, s4
; CHECK-NEXT:    v_ldexp_f64 v[2:3], s[4:5], v2
; CHECK-NEXT:    v_mov_b32_e32 v4, s4
; CHECK-NEXT:    v_mov_b32_e32 v5, s5
; CHECK-NEXT:    v_fract_f64_e32 v[6:7], v[2:3]
; CHECK-NEXT:    v_min_f64 v[0:1], v[6:7], v[0:1]
; CHECK-NEXT:    v_cmp_class_f64_e64 vcc, v[2:3], 3
; CHECK-NEXT:    v_cndmask_b32_e32 v0, v0, v2, vcc
; CHECK-NEXT:    v_cndmask_b32_e32 v1, v1, v3, vcc
; CHECK-NEXT:    v_add_f64 v[0:1], v[2:3], -v[0:1]
; CHECK-NEXT:    v_fma_f64 v[2:3], v[0:1], s[10:11], v[4:5]
; CHECK-NEXT:    v_cvt_u32_f64_e32 v0, v[0:1]
; CHECK-NEXT:    v_cvt_u32_f64_e32 v2, v[2:3]
; CHECK-NEXT:    v_cvt_f64_u32_e32 v[0:1], v0
; CHECK-NEXT:    v_ldexp_f64 v[0:1], v[0:1], 32
; CHECK-NEXT:    v_cvt_f64_u32_e32 v[2:3], v2
; CHECK-NEXT:    v_add_f64 v[0:1], v[0:1], v[2:3]
; CHECK-NEXT:    buffer_store_dwordx2 v[0:1], off, s[0:3], 0
; CHECK-NEXT:    s_endpgm
entry:
  %ui = fptoui double %x to i64
  %fp = uitofp i64 %ui to double
  store double %fp, ptr addrspace(1) %out
  ret void
}
