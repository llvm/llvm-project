# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -verify-machineinstrs -run-pass=prologepilog %s -o - | FileCheck -check-prefix=MUBUF %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx90a -verify-machineinstrs -run-pass=prologepilog %s -o - | FileCheck -check-prefix=MUBUF %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1010 -verify-machineinstrs -run-pass=prologepilog %s -o - | FileCheck -check-prefix=MUBUFW32 %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx940 -verify-machineinstrs -run-pass=prologepilog %s -o - | FileCheck -check-prefix=FLATSCRW64 %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -verify-machineinstrs -run-pass=prologepilog %s -o - | FileCheck -check-prefix=FLATSCRW32 %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1200 -verify-machineinstrs -run-pass=prologepilog %s -o - | FileCheck -check-prefix=FLATSCRW32 %s

---
name: v_add_u32_e32__inline_imm__fi_offset0
tracksRegLiveness: true
stack:
  - { id: 0, size: 4, alignment: 16 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    ; MUBUF-LABEL: name: v_add_u32_e32__inline_imm__fi_offset0
    ; MUBUF: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__inline_imm__fi_offset0
    ; MUBUFW32: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__inline_imm__fi_offset0
    ; FLATSCRW64: $vgpr1 = V_MOV_B32_e32 $sgpr32, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__inline_imm__fi_offset0
    ; FLATSCRW32: $vgpr1 = V_MOV_B32_e32 $sgpr32, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 12, %stack.0, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__inline_imm___fi_offset_inline_imm
tracksRegLiveness: true
stack:
  - { id: 0, size: 16, alignment: 16 }
  - { id: 1, size: 4, alignment: 4 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    ; MUBUF-LABEL: name: v_add_u32_e32__inline_imm___fi_offset_inline_imm
    ; MUBUF: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: $vgpr1 = V_ADD_U32_e32 16, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__inline_imm___fi_offset_inline_imm
    ; MUBUFW32: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: $vgpr1 = V_ADD_U32_e32 16, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__inline_imm___fi_offset_inline_imm
    ; FLATSCRW64: $sgpr4 = S_ADD_I32 $sgpr32, 16, implicit-def $scc
    ; FLATSCRW64-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__inline_imm___fi_offset_inline_imm
    ; FLATSCRW32: $sgpr4 = S_ADD_I32 $sgpr32, 16, implicit-def $scc
    ; FLATSCRW32-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 12, killed $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 12, %stack.1, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__literal__fi_offset0
tracksRegLiveness: true
stack:
  - { id: 0, size: 4, alignment: 16 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    ; MUBUF-LABEL: name: v_add_u32_e32__literal__fi_offset0
    ; MUBUF: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__literal__fi_offset0
    ; MUBUFW32: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__literal__fi_offset0
    ; FLATSCRW64: $vgpr1 = V_MOV_B32_e32 $sgpr32, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__literal__fi_offset0
    ; FLATSCRW32: $vgpr1 = V_MOV_B32_e32 $sgpr32, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 68, %stack.0, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__literal__fi_offset0__offset_inlineimm
tracksRegLiveness: true
stack:
  - { id: 0, size: 32, alignment: 16 }
  - { id: 1, size: 4, alignment: 4 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    ; MUBUF-LABEL: name: v_add_u32_e32__literal__fi_offset0__offset_inlineimm
    ; MUBUF: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: $vgpr1 = V_ADD_U32_e32 32, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__literal__fi_offset0__offset_inlineimm
    ; MUBUFW32: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: $vgpr1 = V_ADD_U32_e32 32, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__literal__fi_offset0__offset_inlineimm
    ; FLATSCRW64: $sgpr4 = S_ADD_I32 $sgpr32, 32, implicit-def $scc
    ; FLATSCRW64-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__literal__fi_offset0__offset_inlineimm
    ; FLATSCRW32: $sgpr4 = S_ADD_I32 $sgpr32, 32, implicit-def $scc
    ; FLATSCRW32-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 68, killed $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 68, %stack.1, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__vgpr__fi_offset0
tracksRegLiveness: true
stack:
  - { id: 0, size: 4, alignment: 16 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $vgpr1
    ; MUBUF-LABEL: name: v_add_u32_e32__vgpr__fi_offset0
    ; MUBUF: liveins: $vgpr1
    ; MUBUF-NEXT: {{  $}}
    ; MUBUF-NEXT: $vgpr2 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__vgpr__fi_offset0
    ; MUBUFW32: liveins: $vgpr1
    ; MUBUFW32-NEXT: {{  $}}
    ; MUBUFW32-NEXT: $vgpr2 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__vgpr__fi_offset0
    ; FLATSCRW64: liveins: $vgpr1
    ; FLATSCRW64-NEXT: {{  $}}
    ; FLATSCRW64-NEXT: $vgpr2 = V_MOV_B32_e32 $sgpr32, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__vgpr__fi_offset0
    ; FLATSCRW32: liveins: $vgpr1
    ; FLATSCRW32-NEXT: {{  $}}
    ; FLATSCRW32-NEXT: $vgpr2 = V_MOV_B32_e32 $sgpr32, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, %stack.0, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__fi_offset0__vgpr
tracksRegLiveness: true
stack:
  - { id: 0, size: 4, alignment: 16 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $vgpr1
    ; MUBUF-LABEL: name: v_add_u32_e32__fi_offset0__vgpr
    ; MUBUF: liveins: $vgpr1
    ; MUBUF-NEXT: {{  $}}
    ; MUBUF-NEXT: $vgpr2 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 killed $vgpr2, $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__fi_offset0__vgpr
    ; MUBUFW32: liveins: $vgpr1
    ; MUBUFW32-NEXT: {{  $}}
    ; MUBUFW32-NEXT: $vgpr2 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 killed $vgpr2, $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__fi_offset0__vgpr
    ; FLATSCRW64: liveins: $vgpr1
    ; FLATSCRW64-NEXT: {{  $}}
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $sgpr32, $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__fi_offset0__vgpr
    ; FLATSCRW32: liveins: $vgpr1
    ; FLATSCRW32-NEXT: {{  $}}
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $sgpr32, $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 %stack.0, $vgpr1, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__vgpr__fi_literal_offset
tracksRegLiveness: true
stack:
  - { id: 0, size: 128, alignment: 16 }
  - { id: 1, size: 4, alignment: 4 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $vgpr1
    ; MUBUF-LABEL: name: v_add_u32_e32__vgpr__fi_literal_offset
    ; MUBUF: liveins: $vgpr1
    ; MUBUF-NEXT: {{  $}}
    ; MUBUF-NEXT: $vgpr2 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: $vgpr2 = V_ADD_U32_e32 128, killed $vgpr2, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__vgpr__fi_literal_offset
    ; MUBUFW32: liveins: $vgpr1
    ; MUBUFW32-NEXT: {{  $}}
    ; MUBUFW32-NEXT: $vgpr2 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: $vgpr2 = V_ADD_U32_e32 128, killed $vgpr2, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__vgpr__fi_literal_offset
    ; FLATSCRW64: liveins: $vgpr1
    ; FLATSCRW64-NEXT: {{  $}}
    ; FLATSCRW64-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW64-NEXT: $vgpr2 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__vgpr__fi_literal_offset
    ; FLATSCRW32: liveins: $vgpr1
    ; FLATSCRW32-NEXT: {{  $}}
    ; FLATSCRW32-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW32-NEXT: $vgpr2 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, killed $vgpr2, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 $vgpr1, %stack.1, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__fi_literal_offset__vgpr
tracksRegLiveness: true
stack:
  - { id: 0, size: 128, alignment: 16 }
  - { id: 1, size: 4, alignment: 4 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $vgpr1
    ; MUBUF-LABEL: name: v_add_u32_e32__fi_literal_offset__vgpr
    ; MUBUF: liveins: $vgpr1
    ; MUBUF-NEXT: {{  $}}
    ; MUBUF-NEXT: $vgpr2 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: $vgpr2 = V_ADD_U32_e32 128, killed $vgpr2, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 killed $vgpr2, $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__fi_literal_offset__vgpr
    ; MUBUFW32: liveins: $vgpr1
    ; MUBUFW32-NEXT: {{  $}}
    ; MUBUFW32-NEXT: $vgpr2 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: $vgpr2 = V_ADD_U32_e32 128, killed $vgpr2, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 killed $vgpr2, $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__fi_literal_offset__vgpr
    ; FLATSCRW64: liveins: $vgpr1
    ; FLATSCRW64-NEXT: {{  $}}
    ; FLATSCRW64-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 killed $sgpr4, $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__fi_literal_offset__vgpr
    ; FLATSCRW32: liveins: $vgpr1
    ; FLATSCRW32-NEXT: {{  $}}
    ; FLATSCRW32-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 killed $sgpr4, $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 %stack.1, $vgpr1, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e32__sgpr__fi_literal_offset
tracksRegLiveness: true
stack:
  - { id: 0, size: 128, alignment: 16 }
  - { id: 1, size: 4, alignment: 4 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $sgpr8
    ; MUBUF-LABEL: name: v_add_u32_e32__sgpr__fi_literal_offset
    ; MUBUF: liveins: $sgpr8
    ; MUBUF-NEXT: {{  $}}
    ; MUBUF-NEXT: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: $vgpr1 = V_ADD_U32_e32 128, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $sgpr8, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e32__sgpr__fi_literal_offset
    ; MUBUFW32: liveins: $sgpr8
    ; MUBUFW32-NEXT: {{  $}}
    ; MUBUFW32-NEXT: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: $vgpr1 = V_ADD_U32_e32 128, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $sgpr8, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e32__sgpr__fi_literal_offset
    ; FLATSCRW64: liveins: $sgpr8
    ; FLATSCRW64-NEXT: {{  $}}
    ; FLATSCRW64-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW64-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $sgpr8, killed $vgpr1, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e32__sgpr__fi_literal_offset
    ; FLATSCRW32: liveins: $sgpr8
    ; FLATSCRW32-NEXT: {{  $}}
    ; FLATSCRW32-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW32-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e32 $sgpr8, killed $vgpr1, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e32 $sgpr8, %stack.1, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e64__inline_imm__fi_offset0
tracksRegLiveness: true
stack:
  - { id: 0, size: 4, alignment: 16 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    ; MUBUF-LABEL: name: v_add_u32_e64__inline_imm__fi_offset0
    ; MUBUF: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e64 12, killed $vgpr1, 0, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e64__inline_imm__fi_offset0
    ; MUBUFW32: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e64 12, killed $vgpr1, 0, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e64__inline_imm__fi_offset0
    ; FLATSCRW64: renamable $vgpr0 = V_ADD_U32_e64 12, $sgpr32, 0, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e64__inline_imm__fi_offset0
    ; FLATSCRW32: renamable $vgpr0 = V_ADD_U32_e64 12, $sgpr32, 0, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e64 12, %stack.0, 0, implicit $exec
    SI_RETURN implicit $vgpr0

...

---
name: v_add_u32_e64__fi_literal_offset__sgpr
tracksRegLiveness: true
stack:
  - { id: 0, size: 128, alignment: 16 }
  - { id: 1, size: 4, alignment: 4 }
machineFunctionInfo:
  scratchRSrcReg:  '$sgpr0_sgpr1_sgpr2_sgpr3'
  frameOffsetReg:  '$sgpr33'
  stackPtrOffsetReg: '$sgpr32'
body:             |
  bb.0:
    liveins: $sgpr8
    ; MUBUF-LABEL: name: v_add_u32_e64__fi_literal_offset__sgpr
    ; MUBUF: liveins: $sgpr8
    ; MUBUF-NEXT: {{  $}}
    ; MUBUF-NEXT: $vgpr1 = V_LSHRREV_B32_e64 6, $sgpr32, implicit $exec
    ; MUBUF-NEXT: $vgpr1 = V_ADD_U32_e32 128, killed $vgpr1, implicit $exec
    ; MUBUF-NEXT: renamable $vgpr0 = V_ADD_U32_e64 killed $vgpr1, $sgpr8, 0, implicit $exec
    ; MUBUF-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; MUBUFW32-LABEL: name: v_add_u32_e64__fi_literal_offset__sgpr
    ; MUBUFW32: liveins: $sgpr8
    ; MUBUFW32-NEXT: {{  $}}
    ; MUBUFW32-NEXT: $vgpr1 = V_LSHRREV_B32_e64 5, $sgpr32, implicit $exec
    ; MUBUFW32-NEXT: $vgpr1 = V_ADD_U32_e32 128, killed $vgpr1, implicit $exec
    ; MUBUFW32-NEXT: renamable $vgpr0 = V_ADD_U32_e64 killed $vgpr1, $sgpr8, 0, implicit $exec
    ; MUBUFW32-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW64-LABEL: name: v_add_u32_e64__fi_literal_offset__sgpr
    ; FLATSCRW64: liveins: $sgpr8
    ; FLATSCRW64-NEXT: {{  $}}
    ; FLATSCRW64-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW64-NEXT: $vgpr1 = V_MOV_B32_e32 killed $sgpr4, implicit $exec
    ; FLATSCRW64-NEXT: renamable $vgpr0 = V_ADD_U32_e64 killed $vgpr1, $sgpr8, 0, implicit $exec
    ; FLATSCRW64-NEXT: SI_RETURN implicit $vgpr0
    ;
    ; FLATSCRW32-LABEL: name: v_add_u32_e64__fi_literal_offset__sgpr
    ; FLATSCRW32: liveins: $sgpr8
    ; FLATSCRW32-NEXT: {{  $}}
    ; FLATSCRW32-NEXT: $sgpr4 = S_ADD_I32 $sgpr32, 128, implicit-def $scc
    ; FLATSCRW32-NEXT: renamable $vgpr0 = V_ADD_U32_e64 killed $sgpr4, $sgpr8, 0, implicit $exec
    ; FLATSCRW32-NEXT: SI_RETURN implicit $vgpr0
    renamable $vgpr0 = V_ADD_U32_e64 %stack.1, $sgpr8, 0, implicit $exec
    SI_RETURN implicit $vgpr0

...
