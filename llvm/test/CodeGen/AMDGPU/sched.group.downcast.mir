# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 6
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx950 -run-pass=machine-scheduler -o - %s | FileCheck %s -check-prefixes=DEFAULT,GCN
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx950 --amdgpu-igrouplp-use-downcast-ops=1 -run-pass=machine-scheduler -o - %s | FileCheck %s -check-prefixes=DOWNCAST,GCN


# default will result in the prescribed pipeline, since amdgpu-igrouplp-use-downcast-ops thinks there are 8 VALU.

---
name: 2xVALU_1xSALU_2xVALU_1xSALU
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; DEFAULT-LABEL: name: 2xVALU_1xSALU_2xVALU_1xSALU
    ; DEFAULT: liveins: $vgpr0_vgpr1
    ; DEFAULT-NEXT: {{  $}}
    ; DEFAULT-NEXT: $exec = IMPLICIT_DEF
    ; DEFAULT-NEXT: dead [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; DEFAULT-NEXT: dead [[DEF1:%[0-9]+]]:sgpr_128 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[DEF2:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[DEF3:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[V_PK_ADD_F32_:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF2]], 8, [[DEF3]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: [[DEF4:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[DEF5:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[V_PK_ADD_F32_1:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF3]], 8, [[V_PK_ADD_F32_]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: [[S_ADD_U32_:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF4]], [[DEF5]], implicit-def $scc
    ; DEFAULT-NEXT: [[V_PK_ADD_F32_2:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_]], 8, [[V_PK_ADD_F32_1]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: dead [[V_PK_ADD_F32_3:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_1]], 8, [[V_PK_ADD_F32_2]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: dead [[S_ADD_U32_1:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF5]], [[S_ADD_U32_]], implicit-def $scc
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 2, 2, 0
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 2, 2, 0
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DEFAULT-NEXT: S_ENDPGM 0
    ;
    ; DOWNCAST-LABEL: name: 2xVALU_1xSALU_2xVALU_1xSALU
    ; DOWNCAST: liveins: $vgpr0_vgpr1
    ; DOWNCAST-NEXT: {{  $}}
    ; DOWNCAST-NEXT: $exec = IMPLICIT_DEF
    ; DOWNCAST-NEXT: dead [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: dead [[DEF1:%[0-9]+]]:sgpr_128 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[DEF2:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[DEF3:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[V_PK_ADD_F32_:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF2]], 8, [[DEF3]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: [[DEF4:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[DEF5:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[S_ADD_U32_:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF4]], [[DEF5]], implicit-def $scc
    ; DOWNCAST-NEXT: [[V_PK_ADD_F32_1:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF3]], 8, [[V_PK_ADD_F32_]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: [[V_PK_ADD_F32_2:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_]], 8, [[V_PK_ADD_F32_1]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: dead [[V_PK_ADD_F32_3:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_1]], 8, [[V_PK_ADD_F32_2]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: dead [[S_ADD_U32_1:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF5]], [[S_ADD_U32_]], implicit-def $scc
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 2, 2, 0
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 2, 2, 0
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DOWNCAST-NEXT: S_ENDPGM 0
    $exec = IMPLICIT_DEF
    %0:vgpr_32 = IMPLICIT_DEF
    %1:sgpr_128 = IMPLICIT_DEF
    %2:vreg_64_align2 = IMPLICIT_DEF
    %3:vreg_64_align2 = IMPLICIT_DEF
    %4:vreg_64_align2 = V_PK_ADD_F32 8, %2, 8, %3, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %5:vreg_64_align2 = V_PK_ADD_F32 8, %3, 8, %4, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %6:vreg_64_align2 = V_PK_ADD_F32 8, %4, 8, %5, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %7:vreg_64_align2 = V_PK_ADD_F32 8, %5, 8, %6, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %8:sgpr_32 = IMPLICIT_DEF
    %9:sgpr_32 = IMPLICIT_DEF
    %10:sgpr_32 = S_ADD_U32 %8, %9, implicit-def $scc
    %11:sgpr_32 = S_ADD_U32 %9, %10, implicit-def $scc
    SCHED_GROUP_BARRIER 2, 2, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    SCHED_GROUP_BARRIER 2, 2, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    S_ENDPGM 0
...

# amdgpu-igrouplp-use-downcast-ops should have no effect since the ops aren't candidates for downcast

---
name: 2xVALU_1xSALU_2xVALU_1xSALU_nonunpack
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GCN-LABEL: name: 2xVALU_1xSALU_2xVALU_1xSALU_nonunpack
    ; GCN: liveins: $vgpr0_vgpr1
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: $exec = IMPLICIT_DEF
    ; GCN-NEXT: dead [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: dead [[DEF1:%[0-9]+]]:sgpr_128 = IMPLICIT_DEF
    ; GCN-NEXT: [[DEF2:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[DEF3:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[V_ADD_F32_e64_:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[DEF2]], 0, [[DEF3]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: [[DEF4:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[DEF5:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[V_ADD_F32_e64_1:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[DEF3]], 0, [[V_ADD_F32_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: [[S_ADD_U32_:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF4]], [[DEF5]], implicit-def $scc
    ; GCN-NEXT: [[V_ADD_F32_e64_2:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[V_ADD_F32_e64_]], 0, [[V_ADD_F32_e64_1]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: dead [[V_ADD_F32_e64_3:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[V_ADD_F32_e64_1]], 0, [[V_ADD_F32_e64_2]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: dead [[S_ADD_U32_1:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF5]], [[S_ADD_U32_]], implicit-def $scc
    ; GCN-NEXT: SCHED_GROUP_BARRIER 2, 2, 0
    ; GCN-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; GCN-NEXT: SCHED_GROUP_BARRIER 2, 2, 0
    ; GCN-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; GCN-NEXT: S_ENDPGM 0
    $exec = IMPLICIT_DEF
    %0:vgpr_32 = IMPLICIT_DEF
    %1:sgpr_128 = IMPLICIT_DEF
    %2:vgpr_32 = IMPLICIT_DEF
    %3:vgpr_32 = IMPLICIT_DEF
    %4:vgpr_32 = V_ADD_F32_e64 0, %2, 0, %3, 0, 0, implicit $mode, implicit $exec
    %5:vgpr_32 = V_ADD_F32_e64 0, %3, 0, %4, 0, 0, implicit $mode, implicit $exec
    %6:vgpr_32 = V_ADD_F32_e64 0, %4, 0, %5, 0, 0, implicit $mode, implicit $exec
    %7:vgpr_32 = V_ADD_F32_e64 0, %5, 0, %6, 0, 0, implicit $mode, implicit $exec
    %8:sgpr_32 = IMPLICIT_DEF
    %9:sgpr_32 = IMPLICIT_DEF
    %10:sgpr_32 = S_ADD_U32 %8, %9, implicit-def $scc
    %11:sgpr_32 = S_ADD_U32 %9, %10, implicit-def $scc
    SCHED_GROUP_BARRIER 2, 2, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    SCHED_GROUP_BARRIER 2, 2, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    S_ENDPGM 0
...

# amdgpu-igrouplp-use-downcast-ops should schedule 2 v_pk between the SALU, since v_pk will be unpacked.

---
name: 4xVALU_1xSALU_4xVALU_1xSALU
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; DEFAULT-LABEL: name: 4xVALU_1xSALU_4xVALU_1xSALU
    ; DEFAULT: liveins: $vgpr0_vgpr1
    ; DEFAULT-NEXT: {{  $}}
    ; DEFAULT-NEXT: $exec = IMPLICIT_DEF
    ; DEFAULT-NEXT: dead [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; DEFAULT-NEXT: dead [[DEF1:%[0-9]+]]:sgpr_128 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[DEF2:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[DEF3:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[V_PK_ADD_F32_:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF2]], 8, [[DEF3]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: [[DEF4:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[DEF5:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DEFAULT-NEXT: [[V_PK_ADD_F32_1:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF3]], 8, [[V_PK_ADD_F32_]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: [[V_PK_ADD_F32_2:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_]], 8, [[V_PK_ADD_F32_1]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: dead [[V_PK_ADD_F32_3:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_1]], 8, [[V_PK_ADD_F32_2]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DEFAULT-NEXT: [[S_ADD_U32_:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF4]], [[DEF5]], implicit-def $scc
    ; DEFAULT-NEXT: dead [[S_ADD_U32_1:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF5]], [[S_ADD_U32_]], implicit-def $scc
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 2, 4, 0
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 2, 4, 0
    ; DEFAULT-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DEFAULT-NEXT: S_ENDPGM 0
    ;
    ; DOWNCAST-LABEL: name: 4xVALU_1xSALU_4xVALU_1xSALU
    ; DOWNCAST: liveins: $vgpr0_vgpr1
    ; DOWNCAST-NEXT: {{  $}}
    ; DOWNCAST-NEXT: $exec = IMPLICIT_DEF
    ; DOWNCAST-NEXT: dead [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: dead [[DEF1:%[0-9]+]]:sgpr_128 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[DEF2:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[DEF3:%[0-9]+]]:vreg_64_align2 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[V_PK_ADD_F32_:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF2]], 8, [[DEF3]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: [[DEF4:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[DEF5:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; DOWNCAST-NEXT: [[V_PK_ADD_F32_1:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[DEF3]], 8, [[V_PK_ADD_F32_]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: [[S_ADD_U32_:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF4]], [[DEF5]], implicit-def $scc
    ; DOWNCAST-NEXT: [[V_PK_ADD_F32_2:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_]], 8, [[V_PK_ADD_F32_1]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: dead [[V_PK_ADD_F32_3:%[0-9]+]]:vreg_64_align2 = V_PK_ADD_F32 8, [[V_PK_ADD_F32_1]], 8, [[V_PK_ADD_F32_2]], 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; DOWNCAST-NEXT: dead [[S_ADD_U32_1:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF5]], [[S_ADD_U32_]], implicit-def $scc
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 2, 4, 0
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 2, 4, 0
    ; DOWNCAST-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; DOWNCAST-NEXT: S_ENDPGM 0
    $exec = IMPLICIT_DEF
    %0:vgpr_32 = IMPLICIT_DEF
    %1:sgpr_128 = IMPLICIT_DEF
    %2:vreg_64_align2 = IMPLICIT_DEF
    %3:vreg_64_align2 = IMPLICIT_DEF
    %4:vreg_64_align2 = V_PK_ADD_F32 8, %2, 8, %3, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %5:vreg_64_align2 = V_PK_ADD_F32 8, %3, 8, %4, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %6:vreg_64_align2 = V_PK_ADD_F32 8, %4, 8, %5, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %7:vreg_64_align2 = V_PK_ADD_F32 8, %5, 8, %6, 11, 0, 0, 0, 0, implicit $mode, implicit $exec
    %8:sgpr_32 = IMPLICIT_DEF
    %9:sgpr_32 = IMPLICIT_DEF
    %10:sgpr_32 = S_ADD_U32 %8, %9, implicit-def $scc
    %11:sgpr_32 = S_ADD_U32 %9, %10, implicit-def $scc
    SCHED_GROUP_BARRIER 2, 4, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    SCHED_GROUP_BARRIER 2, 4, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    S_ENDPGM 0
...

# amdgpu-igrouplp-use-downcast-ops should have no effect since the ops aren't candidates for downcast

---
name: 4xVALU_1xSALU_4xVALU_1xSALU_nonunpack
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GCN-LABEL: name: 4xVALU_1xSALU_4xVALU_1xSALU_nonunpack
    ; GCN: liveins: $vgpr0_vgpr1
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: $exec = IMPLICIT_DEF
    ; GCN-NEXT: dead [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: dead [[DEF1:%[0-9]+]]:sgpr_128 = IMPLICIT_DEF
    ; GCN-NEXT: [[DEF2:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[DEF3:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[V_ADD_F32_e64_:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[DEF2]], 0, [[DEF3]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: [[DEF4:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[DEF5:%[0-9]+]]:sgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[V_ADD_F32_e64_1:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[DEF3]], 0, [[V_ADD_F32_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: [[V_ADD_F32_e64_2:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[V_ADD_F32_e64_]], 0, [[V_ADD_F32_e64_1]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: dead [[V_ADD_F32_e64_3:%[0-9]+]]:vgpr_32 = V_ADD_F32_e64 0, [[V_ADD_F32_e64_1]], 0, [[V_ADD_F32_e64_2]], 0, 0, implicit $mode, implicit $exec
    ; GCN-NEXT: [[S_ADD_U32_:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF4]], [[DEF5]], implicit-def $scc
    ; GCN-NEXT: dead [[S_ADD_U32_1:%[0-9]+]]:sgpr_32 = S_ADD_U32 [[DEF5]], [[S_ADD_U32_]], implicit-def $scc
    ; GCN-NEXT: SCHED_GROUP_BARRIER 2, 4, 0
    ; GCN-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; GCN-NEXT: SCHED_GROUP_BARRIER 2, 4, 0
    ; GCN-NEXT: SCHED_GROUP_BARRIER 4, 1, 0
    ; GCN-NEXT: S_ENDPGM 0
    $exec = IMPLICIT_DEF
    %0:vgpr_32 = IMPLICIT_DEF
    %1:sgpr_128 = IMPLICIT_DEF
    %2:vgpr_32 = IMPLICIT_DEF
    %3:vgpr_32 = IMPLICIT_DEF
    %4:vgpr_32 = V_ADD_F32_e64 0, %2, 0, %3, 0, 0, implicit $mode, implicit $exec
    %5:vgpr_32 = V_ADD_F32_e64 0, %3, 0, %4, 0, 0, implicit $mode, implicit $exec
    %6:vgpr_32 = V_ADD_F32_e64 0, %4, 0, %5, 0, 0, implicit $mode, implicit $exec
    %7:vgpr_32 = V_ADD_F32_e64 0, %5, 0, %6, 0, 0, implicit $mode, implicit $exec
    %8:sgpr_32 = IMPLICIT_DEF
    %9:sgpr_32 = IMPLICIT_DEF
    %10:sgpr_32 = S_ADD_U32 %8, %9, implicit-def $scc
    %11:sgpr_32 = S_ADD_U32 %9, %10, implicit-def $scc
    SCHED_GROUP_BARRIER 2, 4, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    SCHED_GROUP_BARRIER 2, 4, 0
    SCHED_GROUP_BARRIER 4, 1 ,0
    S_ENDPGM 0
...
