; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -global-isel=0 -mtriple=amdgcn--amdpal -mcpu=gfx1200 < %s | FileCheck %s --check-prefix=DAGISEL
; RUN: llc -global-isel=1 -mtriple=amdgcn--amdpal -mcpu=gfx1200 < %s | FileCheck %s --check-prefix=GISEL

declare amdgpu_gfx_whole_wave i32 @good_callee(i1 %active, i32 %x, i32 %y, i32 inreg %c)

define amdgpu_gfx void @basic_test(i32 %x, i32 inreg %c, ptr addrspace(1) %ptr) {
; DAGISEL-LABEL: basic_test:
; DAGISEL:       ; %bb.0:
; DAGISEL-NEXT:    s_wait_loadcnt_dscnt 0x0
; DAGISEL-NEXT:    s_wait_expcnt 0x0
; DAGISEL-NEXT:    s_wait_samplecnt 0x0
; DAGISEL-NEXT:    s_wait_bvhcnt 0x0
; DAGISEL-NEXT:    s_wait_kmcnt 0x0
; DAGISEL-NEXT:    s_mov_b32 s0, s33
; DAGISEL-NEXT:    s_mov_b32 s33, s32
; DAGISEL-NEXT:    s_or_saveexec_b32 s1, -1
; DAGISEL-NEXT:    scratch_store_b32 off, v42, s33 offset:8 ; 4-byte Folded Spill
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_mov_b32 exec_lo, s1
; DAGISEL-NEXT:    v_writelane_b32 v42, s0, 2
; DAGISEL-NEXT:    s_clause 0x1
; DAGISEL-NEXT:    scratch_store_b32 off, v40, s33 offset:4
; DAGISEL-NEXT:    scratch_store_b32 off, v41, s33
; DAGISEL-NEXT:    v_dual_mov_b32 v41, v2 :: v_dual_mov_b32 v40, v1
; DAGISEL-NEXT:    v_add_nc_u32_e32 v1, 13, v0
; DAGISEL-NEXT:    v_writelane_b32 v42, s30, 0
; DAGISEL-NEXT:    s_mov_b32 s1, good_callee@abs32@hi
; DAGISEL-NEXT:    s_mov_b32 s0, good_callee@abs32@lo
; DAGISEL-NEXT:    s_add_co_i32 s32, s32, 16
; DAGISEL-NEXT:    v_writelane_b32 v42, s31, 1
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; DAGISEL-NEXT:    global_store_b32 v[40:41], v0, off
; DAGISEL-NEXT:    s_clause 0x1
; DAGISEL-NEXT:    scratch_load_b32 v41, off, s33
; DAGISEL-NEXT:    scratch_load_b32 v40, off, s33 offset:4
; DAGISEL-NEXT:    v_readlane_b32 s31, v42, 1
; DAGISEL-NEXT:    v_readlane_b32 s30, v42, 0
; DAGISEL-NEXT:    s_mov_b32 s32, s33
; DAGISEL-NEXT:    v_readlane_b32 s0, v42, 2
; DAGISEL-NEXT:    s_or_saveexec_b32 s1, -1
; DAGISEL-NEXT:    scratch_load_b32 v42, off, s33 offset:8 ; 4-byte Folded Reload
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_mov_b32 exec_lo, s1
; DAGISEL-NEXT:    s_mov_b32 s33, s0
; DAGISEL-NEXT:    s_wait_loadcnt 0x0
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_setpc_b64 s[30:31]
;
; GISEL-LABEL: basic_test:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    s_wait_loadcnt_dscnt 0x0
; GISEL-NEXT:    s_wait_expcnt 0x0
; GISEL-NEXT:    s_wait_samplecnt 0x0
; GISEL-NEXT:    s_wait_bvhcnt 0x0
; GISEL-NEXT:    s_wait_kmcnt 0x0
; GISEL-NEXT:    s_mov_b32 s0, s33
; GISEL-NEXT:    s_mov_b32 s33, s32
; GISEL-NEXT:    s_or_saveexec_b32 s1, -1
; GISEL-NEXT:    scratch_store_b32 off, v42, s33 offset:8 ; 4-byte Folded Spill
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_mov_b32 exec_lo, s1
; GISEL-NEXT:    v_writelane_b32 v42, s0, 2
; GISEL-NEXT:    s_clause 0x1
; GISEL-NEXT:    scratch_store_b32 off, v40, s33 offset:4
; GISEL-NEXT:    scratch_store_b32 off, v41, s33
; GISEL-NEXT:    v_dual_mov_b32 v40, v1 :: v_dual_mov_b32 v41, v2
; GISEL-NEXT:    v_add_nc_u32_e32 v1, 13, v0
; GISEL-NEXT:    v_writelane_b32 v42, s30, 0
; GISEL-NEXT:    s_mov_b32 s0, good_callee@abs32@lo
; GISEL-NEXT:    s_mov_b32 s1, good_callee@abs32@hi
; GISEL-NEXT:    s_add_co_i32 s32, s32, 16
; GISEL-NEXT:    v_writelane_b32 v42, s31, 1
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; GISEL-NEXT:    global_store_b32 v[40:41], v0, off
; GISEL-NEXT:    s_clause 0x1
; GISEL-NEXT:    scratch_load_b32 v41, off, s33
; GISEL-NEXT:    scratch_load_b32 v40, off, s33 offset:4
; GISEL-NEXT:    v_readlane_b32 s31, v42, 1
; GISEL-NEXT:    v_readlane_b32 s30, v42, 0
; GISEL-NEXT:    s_mov_b32 s32, s33
; GISEL-NEXT:    v_readlane_b32 s0, v42, 2
; GISEL-NEXT:    s_or_saveexec_b32 s1, -1
; GISEL-NEXT:    scratch_load_b32 v42, off, s33 offset:8 ; 4-byte Folded Reload
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_mov_b32 exec_lo, s1
; GISEL-NEXT:    s_mov_b32 s33, s0
; GISEL-NEXT:    s_wait_loadcnt 0x0
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_setpc_b64 s[30:31]
  %y = add i32 %x, 13
  %ret = call i32(ptr, ...) @llvm.amdgcn.call.whole.wave(ptr @good_callee, i32 %x, i32 %y, i32 inreg %c)
  store i32 %ret, ptr addrspace(1) %ptr
  ret void
}

declare amdgpu_gfx_whole_wave void @void_callee(i1 %active, i32 %x)

define amdgpu_gfx void @ret_void(i32 %x) {
; DAGISEL-LABEL: ret_void:
; DAGISEL:       ; %bb.0:
; DAGISEL-NEXT:    s_wait_loadcnt_dscnt 0x0
; DAGISEL-NEXT:    s_wait_expcnt 0x0
; DAGISEL-NEXT:    s_wait_samplecnt 0x0
; DAGISEL-NEXT:    s_wait_bvhcnt 0x0
; DAGISEL-NEXT:    s_wait_kmcnt 0x0
; DAGISEL-NEXT:    s_mov_b32 s0, s33
; DAGISEL-NEXT:    s_mov_b32 s33, s32
; DAGISEL-NEXT:    s_or_saveexec_b32 s1, -1
; DAGISEL-NEXT:    scratch_store_b32 off, v40, s33 ; 4-byte Folded Spill
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_mov_b32 exec_lo, s1
; DAGISEL-NEXT:    v_writelane_b32 v40, s0, 2
; DAGISEL-NEXT:    s_mov_b32 s1, void_callee@abs32@hi
; DAGISEL-NEXT:    s_mov_b32 s0, void_callee@abs32@lo
; DAGISEL-NEXT:    s_add_co_i32 s32, s32, 16
; DAGISEL-NEXT:    v_writelane_b32 v40, s30, 0
; DAGISEL-NEXT:    v_writelane_b32 v40, s31, 1
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; DAGISEL-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; DAGISEL-NEXT:    v_readlane_b32 s31, v40, 1
; DAGISEL-NEXT:    v_readlane_b32 s30, v40, 0
; DAGISEL-NEXT:    s_mov_b32 s32, s33
; DAGISEL-NEXT:    v_readlane_b32 s0, v40, 2
; DAGISEL-NEXT:    s_or_saveexec_b32 s1, -1
; DAGISEL-NEXT:    scratch_load_b32 v40, off, s33 ; 4-byte Folded Reload
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_mov_b32 exec_lo, s1
; DAGISEL-NEXT:    s_mov_b32 s33, s0
; DAGISEL-NEXT:    s_wait_loadcnt 0x0
; DAGISEL-NEXT:    s_wait_alu 0xfffe
; DAGISEL-NEXT:    s_setpc_b64 s[30:31]
;
; GISEL-LABEL: ret_void:
; GISEL:       ; %bb.0:
; GISEL-NEXT:    s_wait_loadcnt_dscnt 0x0
; GISEL-NEXT:    s_wait_expcnt 0x0
; GISEL-NEXT:    s_wait_samplecnt 0x0
; GISEL-NEXT:    s_wait_bvhcnt 0x0
; GISEL-NEXT:    s_wait_kmcnt 0x0
; GISEL-NEXT:    s_mov_b32 s0, s33
; GISEL-NEXT:    s_mov_b32 s33, s32
; GISEL-NEXT:    s_or_saveexec_b32 s1, -1
; GISEL-NEXT:    scratch_store_b32 off, v40, s33 ; 4-byte Folded Spill
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_mov_b32 exec_lo, s1
; GISEL-NEXT:    v_writelane_b32 v40, s0, 2
; GISEL-NEXT:    s_mov_b32 s0, void_callee@abs32@lo
; GISEL-NEXT:    s_mov_b32 s1, void_callee@abs32@hi
; GISEL-NEXT:    s_add_co_i32 s32, s32, 16
; GISEL-NEXT:    v_writelane_b32 v40, s30, 0
; GISEL-NEXT:    v_writelane_b32 v40, s31, 1
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_swappc_b64 s[30:31], s[0:1]
; GISEL-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GISEL-NEXT:    v_readlane_b32 s31, v40, 1
; GISEL-NEXT:    v_readlane_b32 s30, v40, 0
; GISEL-NEXT:    s_mov_b32 s32, s33
; GISEL-NEXT:    v_readlane_b32 s0, v40, 2
; GISEL-NEXT:    s_or_saveexec_b32 s1, -1
; GISEL-NEXT:    scratch_load_b32 v40, off, s33 ; 4-byte Folded Reload
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_mov_b32 exec_lo, s1
; GISEL-NEXT:    s_mov_b32 s33, s0
; GISEL-NEXT:    s_wait_loadcnt 0x0
; GISEL-NEXT:    s_wait_alu 0xfffe
; GISEL-NEXT:    s_setpc_b64 s[30:31]
  call void(ptr, ...) @llvm.amdgcn.call.whole.wave(ptr @void_callee, i32 %x)
  ret void
}

