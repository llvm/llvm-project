; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define <7 x float> @bitcast_v7i32_to_v7f32(<7 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v7i32_to_v7f32:
; VI-LABEL: bitcast_v7i32_to_v7f32:
; GFX9-LABEL: bitcast_v7i32_to_v7f32:
; GFX11-TRUE16-LABEL: bitcast_v7i32_to_v7f32:
; GFX11-FAKE16-LABEL: bitcast_v7i32_to_v7f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <7 x i32> %a, splat (i32 3)
  %a2 = bitcast <7 x i32> %a1 to <7 x float>
  br label %end

cmp.false:
  %a3 = bitcast <7 x i32> %a to <7 x float>
  br label %end

end:
  %phi = phi <7 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x float> %phi
}

define inreg <7 x float> @bitcast_v7i32_to_v7f32_scalar(<7 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v7i32_to_v7f32_scalar:
; VI-LABEL: bitcast_v7i32_to_v7f32_scalar:
; GFX9-LABEL: bitcast_v7i32_to_v7f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v7i32_to_v7f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v7i32_to_v7f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <7 x i32> %a, splat (i32 3)
  %a2 = bitcast <7 x i32> %a1 to <7 x float>
  br label %end

cmp.false:
  %a3 = bitcast <7 x i32> %a to <7 x float>
  br label %end

end:
  %phi = phi <7 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x float> %phi
}

define <7 x i32> @bitcast_v7f32_to_v7i32(<7 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v7f32_to_v7i32:
; VI-LABEL: bitcast_v7f32_to_v7i32:
; GFX9-LABEL: bitcast_v7f32_to_v7i32:
; GFX11-TRUE16-LABEL: bitcast_v7f32_to_v7i32:
; GFX11-FAKE16-LABEL: bitcast_v7f32_to_v7i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <7 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <7 x float> %a1 to <7 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <7 x float> %a to <7 x i32>
  br label %end

end:
  %phi = phi <7 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x i32> %phi
}

define inreg <7 x i32> @bitcast_v7f32_to_v7i32_scalar(<7 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v7f32_to_v7i32_scalar:
; VI-LABEL: bitcast_v7f32_to_v7i32_scalar:
; GFX9-LABEL: bitcast_v7f32_to_v7i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v7f32_to_v7i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v7f32_to_v7i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <7 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <7 x float> %a1 to <7 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <7 x float> %a to <7 x i32>
  br label %end

end:
  %phi = phi <7 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x i32> %phi
}

define <14 x i16> @bitcast_v7i32_to_v14i16(<7 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v7i32_to_v14i16:
; VI-LABEL: bitcast_v7i32_to_v14i16:
; GFX9-LABEL: bitcast_v7i32_to_v14i16:
; GFX11-TRUE16-LABEL: bitcast_v7i32_to_v14i16:
; GFX11-FAKE16-LABEL: bitcast_v7i32_to_v14i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <7 x i32> %a, splat (i32 3)
  %a2 = bitcast <7 x i32> %a1 to <14 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <7 x i32> %a to <14 x i16>
  br label %end

end:
  %phi = phi <14 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x i16> %phi
}

define inreg <14 x i16> @bitcast_v7i32_to_v14i16_scalar(<7 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v7i32_to_v14i16_scalar:
; VI-LABEL: bitcast_v7i32_to_v14i16_scalar:
; GFX9-LABEL: bitcast_v7i32_to_v14i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v7i32_to_v14i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v7i32_to_v14i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <7 x i32> %a, splat (i32 3)
  %a2 = bitcast <7 x i32> %a1 to <14 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <7 x i32> %a to <14 x i16>
  br label %end

end:
  %phi = phi <14 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x i16> %phi
}

define <7 x i32> @bitcast_v14i16_to_v7i32(<14 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v14i16_to_v7i32:
; VI-LABEL: bitcast_v14i16_to_v7i32:
; GFX9-LABEL: bitcast_v14i16_to_v7i32:
; GFX11-TRUE16-LABEL: bitcast_v14i16_to_v7i32:
; GFX11-FAKE16-LABEL: bitcast_v14i16_to_v7i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <14 x i16> %a, splat (i16 3)
  %a2 = bitcast <14 x i16> %a1 to <7 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <14 x i16> %a to <7 x i32>
  br label %end

end:
  %phi = phi <7 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x i32> %phi
}

define inreg <7 x i32> @bitcast_v14i16_to_v7i32_scalar(<14 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v14i16_to_v7i32_scalar:
; VI-LABEL: bitcast_v14i16_to_v7i32_scalar:
; GFX9-LABEL: bitcast_v14i16_to_v7i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v14i16_to_v7i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v14i16_to_v7i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <14 x i16> %a, splat (i16 3)
  %a2 = bitcast <14 x i16> %a1 to <7 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <14 x i16> %a to <7 x i32>
  br label %end

end:
  %phi = phi <7 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x i32> %phi
}

define <14 x half> @bitcast_v7i32_to_v14f16(<7 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v7i32_to_v14f16:
; VI-LABEL: bitcast_v7i32_to_v14f16:
; GFX9-LABEL: bitcast_v7i32_to_v14f16:
; GFX11-TRUE16-LABEL: bitcast_v7i32_to_v14f16:
; GFX11-FAKE16-LABEL: bitcast_v7i32_to_v14f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <7 x i32> %a, splat (i32 3)
  %a2 = bitcast <7 x i32> %a1 to <14 x half>
  br label %end

cmp.false:
  %a3 = bitcast <7 x i32> %a to <14 x half>
  br label %end

end:
  %phi = phi <14 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x half> %phi
}

define inreg <14 x half> @bitcast_v7i32_to_v14f16_scalar(<7 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v7i32_to_v14f16_scalar:
; VI-LABEL: bitcast_v7i32_to_v14f16_scalar:
; GFX9-LABEL: bitcast_v7i32_to_v14f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v7i32_to_v14f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v7i32_to_v14f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <7 x i32> %a, splat (i32 3)
  %a2 = bitcast <7 x i32> %a1 to <14 x half>
  br label %end

cmp.false:
  %a3 = bitcast <7 x i32> %a to <14 x half>
  br label %end

end:
  %phi = phi <14 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x half> %phi
}

define <7 x i32> @bitcast_v14f16_to_v7i32(<14 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v14f16_to_v7i32:
; VI-LABEL: bitcast_v14f16_to_v7i32:
; GFX9-LABEL: bitcast_v14f16_to_v7i32:
; GFX11-TRUE16-LABEL: bitcast_v14f16_to_v7i32:
; GFX11-FAKE16-LABEL: bitcast_v14f16_to_v7i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <14 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <14 x half> %a1 to <7 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <14 x half> %a to <7 x i32>
  br label %end

end:
  %phi = phi <7 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x i32> %phi
}

define inreg <7 x i32> @bitcast_v14f16_to_v7i32_scalar(<14 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v14f16_to_v7i32_scalar:
; VI-LABEL: bitcast_v14f16_to_v7i32_scalar:
; GFX9-LABEL: bitcast_v14f16_to_v7i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v14f16_to_v7i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v14f16_to_v7i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <14 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <14 x half> %a1 to <7 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <14 x half> %a to <7 x i32>
  br label %end

end:
  %phi = phi <7 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x i32> %phi
}

define <14 x i16> @bitcast_v7f32_to_v14i16(<7 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v7f32_to_v14i16:
; VI-LABEL: bitcast_v7f32_to_v14i16:
; GFX9-LABEL: bitcast_v7f32_to_v14i16:
; GFX11-TRUE16-LABEL: bitcast_v7f32_to_v14i16:
; GFX11-FAKE16-LABEL: bitcast_v7f32_to_v14i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <7 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <7 x float> %a1 to <14 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <7 x float> %a to <14 x i16>
  br label %end

end:
  %phi = phi <14 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x i16> %phi
}

define inreg <14 x i16> @bitcast_v7f32_to_v14i16_scalar(<7 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v7f32_to_v14i16_scalar:
; VI-LABEL: bitcast_v7f32_to_v14i16_scalar:
; GFX9-LABEL: bitcast_v7f32_to_v14i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v7f32_to_v14i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v7f32_to_v14i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <7 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <7 x float> %a1 to <14 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <7 x float> %a to <14 x i16>
  br label %end

end:
  %phi = phi <14 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x i16> %phi
}

define <7 x float> @bitcast_v14i16_to_v7f32(<14 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v14i16_to_v7f32:
; VI-LABEL: bitcast_v14i16_to_v7f32:
; GFX9-LABEL: bitcast_v14i16_to_v7f32:
; GFX11-TRUE16-LABEL: bitcast_v14i16_to_v7f32:
; GFX11-FAKE16-LABEL: bitcast_v14i16_to_v7f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <14 x i16> %a, splat (i16 3)
  %a2 = bitcast <14 x i16> %a1 to <7 x float>
  br label %end

cmp.false:
  %a3 = bitcast <14 x i16> %a to <7 x float>
  br label %end

end:
  %phi = phi <7 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x float> %phi
}

define inreg <7 x float> @bitcast_v14i16_to_v7f32_scalar(<14 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v14i16_to_v7f32_scalar:
; VI-LABEL: bitcast_v14i16_to_v7f32_scalar:
; GFX9-LABEL: bitcast_v14i16_to_v7f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v14i16_to_v7f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v14i16_to_v7f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <14 x i16> %a, splat (i16 3)
  %a2 = bitcast <14 x i16> %a1 to <7 x float>
  br label %end

cmp.false:
  %a3 = bitcast <14 x i16> %a to <7 x float>
  br label %end

end:
  %phi = phi <7 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x float> %phi
}

define <14 x half> @bitcast_v7f32_to_v14f16(<7 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v7f32_to_v14f16:
; VI-LABEL: bitcast_v7f32_to_v14f16:
; GFX9-LABEL: bitcast_v7f32_to_v14f16:
; GFX11-TRUE16-LABEL: bitcast_v7f32_to_v14f16:
; GFX11-FAKE16-LABEL: bitcast_v7f32_to_v14f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <7 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <7 x float> %a1 to <14 x half>
  br label %end

cmp.false:
  %a3 = bitcast <7 x float> %a to <14 x half>
  br label %end

end:
  %phi = phi <14 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x half> %phi
}

define inreg <14 x half> @bitcast_v7f32_to_v14f16_scalar(<7 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v7f32_to_v14f16_scalar:
; VI-LABEL: bitcast_v7f32_to_v14f16_scalar:
; GFX9-LABEL: bitcast_v7f32_to_v14f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v7f32_to_v14f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v7f32_to_v14f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <7 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <7 x float> %a1 to <14 x half>
  br label %end

cmp.false:
  %a3 = bitcast <7 x float> %a to <14 x half>
  br label %end

end:
  %phi = phi <14 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x half> %phi
}

define <7 x float> @bitcast_v14f16_to_v7f32(<14 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v14f16_to_v7f32:
; VI-LABEL: bitcast_v14f16_to_v7f32:
; GFX9-LABEL: bitcast_v14f16_to_v7f32:
; GFX11-TRUE16-LABEL: bitcast_v14f16_to_v7f32:
; GFX11-FAKE16-LABEL: bitcast_v14f16_to_v7f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <14 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <14 x half> %a1 to <7 x float>
  br label %end

cmp.false:
  %a3 = bitcast <14 x half> %a to <7 x float>
  br label %end

end:
  %phi = phi <7 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x float> %phi
}

define inreg <7 x float> @bitcast_v14f16_to_v7f32_scalar(<14 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v14f16_to_v7f32_scalar:
; VI-LABEL: bitcast_v14f16_to_v7f32_scalar:
; GFX9-LABEL: bitcast_v14f16_to_v7f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v14f16_to_v7f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v14f16_to_v7f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <14 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <14 x half> %a1 to <7 x float>
  br label %end

cmp.false:
  %a3 = bitcast <14 x half> %a to <7 x float>
  br label %end

end:
  %phi = phi <7 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <7 x float> %phi
}

define <14 x half> @bitcast_v14i16_to_v14f16(<14 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v14i16_to_v14f16:
; VI-LABEL: bitcast_v14i16_to_v14f16:
; GFX9-LABEL: bitcast_v14i16_to_v14f16:
; GFX11-TRUE16-LABEL: bitcast_v14i16_to_v14f16:
; GFX11-FAKE16-LABEL: bitcast_v14i16_to_v14f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <14 x i16> %a, splat (i16 3)
  %a2 = bitcast <14 x i16> %a1 to <14 x half>
  br label %end

cmp.false:
  %a3 = bitcast <14 x i16> %a to <14 x half>
  br label %end

end:
  %phi = phi <14 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x half> %phi
}

define inreg <14 x half> @bitcast_v14i16_to_v14f16_scalar(<14 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v14i16_to_v14f16_scalar:
; VI-LABEL: bitcast_v14i16_to_v14f16_scalar:
; GFX9-LABEL: bitcast_v14i16_to_v14f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v14i16_to_v14f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v14i16_to_v14f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <14 x i16> %a, splat (i16 3)
  %a2 = bitcast <14 x i16> %a1 to <14 x half>
  br label %end

cmp.false:
  %a3 = bitcast <14 x i16> %a to <14 x half>
  br label %end

end:
  %phi = phi <14 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x half> %phi
}

define <14 x i16> @bitcast_v14f16_to_v14i16(<14 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v14f16_to_v14i16:
; VI-LABEL: bitcast_v14f16_to_v14i16:
; GFX9-LABEL: bitcast_v14f16_to_v14i16:
; GFX11-TRUE16-LABEL: bitcast_v14f16_to_v14i16:
; GFX11-FAKE16-LABEL: bitcast_v14f16_to_v14i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <14 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <14 x half> %a1 to <14 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <14 x half> %a to <14 x i16>
  br label %end

end:
  %phi = phi <14 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x i16> %phi
}

define inreg <14 x i16> @bitcast_v14f16_to_v14i16_scalar(<14 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v14f16_to_v14i16_scalar:
; VI-LABEL: bitcast_v14f16_to_v14i16_scalar:
; GFX9-LABEL: bitcast_v14f16_to_v14i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v14f16_to_v14i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v14f16_to_v14i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <14 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <14 x half> %a1 to <14 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <14 x half> %a to <14 x i16>
  br label %end

end:
  %phi = phi <14 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <14 x i16> %phi
}
