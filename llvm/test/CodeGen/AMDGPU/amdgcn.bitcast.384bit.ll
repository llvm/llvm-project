; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define <12 x float> @bitcast_v12i32_to_v12f32(<12 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v12i32_to_v12f32:
; VI-LABEL: bitcast_v12i32_to_v12f32:
; GFX9-LABEL: bitcast_v12i32_to_v12f32:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v12f32:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v12f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define inreg <12 x float> @bitcast_v12i32_to_v12f32_scalar(<12 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12i32_to_v12f32_scalar:
; VI-LABEL: bitcast_v12i32_to_v12f32_scalar:
; GFX9-LABEL: bitcast_v12i32_to_v12f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v12f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v12f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define <12 x i32> @bitcast_v12f32_to_v12i32(<12 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v12f32_to_v12i32:
; VI-LABEL: bitcast_v12f32_to_v12i32:
; GFX9-LABEL: bitcast_v12f32_to_v12i32:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v12i32:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v12i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define inreg <12 x i32> @bitcast_v12f32_to_v12i32_scalar(<12 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12f32_to_v12i32_scalar:
; VI-LABEL: bitcast_v12f32_to_v12i32_scalar:
; GFX9-LABEL: bitcast_v12f32_to_v12i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v12i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v12i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define <6 x double> @bitcast_v12i32_to_v6f64(<12 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v12i32_to_v6f64:
; VI-LABEL: bitcast_v12i32_to_v6f64:
; GFX9-LABEL: bitcast_v12i32_to_v6f64:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v6f64:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v6f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define inreg <6 x double> @bitcast_v12i32_to_v6f64_scalar(<12 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12i32_to_v6f64_scalar:
; VI-LABEL: bitcast_v12i32_to_v6f64_scalar:
; GFX9-LABEL: bitcast_v12i32_to_v6f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v6f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v6f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define <12 x i32> @bitcast_v6f64_to_v12i32(<6 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v6f64_to_v12i32:
; VI-LABEL: bitcast_v6f64_to_v12i32:
; GFX9-LABEL: bitcast_v6f64_to_v12i32:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v12i32:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v12i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define inreg <12 x i32> @bitcast_v6f64_to_v12i32_scalar(<6 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6f64_to_v12i32_scalar:
; VI-LABEL: bitcast_v6f64_to_v12i32_scalar:
; GFX9-LABEL: bitcast_v6f64_to_v12i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v12i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v12i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define <6 x i64> @bitcast_v12i32_to_v6i64(<12 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v12i32_to_v6i64:
; VI-LABEL: bitcast_v12i32_to_v6i64:
; GFX9-LABEL: bitcast_v12i32_to_v6i64:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v6i64:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v6i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define inreg <6 x i64> @bitcast_v12i32_to_v6i64_scalar(<12 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12i32_to_v6i64_scalar:
; VI-LABEL: bitcast_v12i32_to_v6i64_scalar:
; GFX9-LABEL: bitcast_v12i32_to_v6i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v6i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v6i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define <12 x i32> @bitcast_v6i64_to_v12i32(<6 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v6i64_to_v12i32:
; VI-LABEL: bitcast_v6i64_to_v12i32:
; GFX9-LABEL: bitcast_v6i64_to_v12i32:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v12i32:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v12i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define inreg <12 x i32> @bitcast_v6i64_to_v12i32_scalar(<6 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6i64_to_v12i32_scalar:
; VI-LABEL: bitcast_v6i64_to_v12i32_scalar:
; GFX9-LABEL: bitcast_v6i64_to_v12i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v12i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v12i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define <24 x i16> @bitcast_v12i32_to_v24i16(<12 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v12i32_to_v24i16:
; VI-LABEL: bitcast_v12i32_to_v24i16:
; GFX9-LABEL: bitcast_v12i32_to_v24i16:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v24i16:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v24i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define inreg <24 x i16> @bitcast_v12i32_to_v24i16_scalar(<12 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12i32_to_v24i16_scalar:
; VI-LABEL: bitcast_v12i32_to_v24i16_scalar:
; GFX9-LABEL: bitcast_v12i32_to_v24i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v24i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v24i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define <12 x i32> @bitcast_v24i16_to_v12i32(<24 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v24i16_to_v12i32:
; VI-LABEL: bitcast_v24i16_to_v12i32:
; GFX9-LABEL: bitcast_v24i16_to_v12i32:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v12i32:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v12i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define inreg <12 x i32> @bitcast_v24i16_to_v12i32_scalar(<24 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24i16_to_v12i32_scalar:
; VI-LABEL: bitcast_v24i16_to_v12i32_scalar:
; GFX9-LABEL: bitcast_v24i16_to_v12i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v12i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v12i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define <24 x half> @bitcast_v12i32_to_v24f16(<12 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v12i32_to_v24f16:
; VI-LABEL: bitcast_v12i32_to_v24f16:
; GFX9-LABEL: bitcast_v12i32_to_v24f16:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v24f16:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v24f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define inreg <24 x half> @bitcast_v12i32_to_v24f16_scalar(<12 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12i32_to_v24f16_scalar:
; VI-LABEL: bitcast_v12i32_to_v24f16_scalar:
; GFX9-LABEL: bitcast_v12i32_to_v24f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12i32_to_v24f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12i32_to_v24f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <12 x i32> %a, splat (i32 3)
  %a2 = bitcast <12 x i32> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <12 x i32> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define <12 x i32> @bitcast_v24f16_to_v12i32(<24 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v24f16_to_v12i32:
; VI-LABEL: bitcast_v24f16_to_v12i32:
; GFX9-LABEL: bitcast_v24f16_to_v12i32:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v12i32:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v12i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define inreg <12 x i32> @bitcast_v24f16_to_v12i32_scalar(<24 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24f16_to_v12i32_scalar:
; VI-LABEL: bitcast_v24f16_to_v12i32_scalar:
; GFX9-LABEL: bitcast_v24f16_to_v12i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v12i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v12i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <12 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <12 x i32>
  br label %end

end:
  %phi = phi <12 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x i32> %phi
}

define <6 x double> @bitcast_v12f32_to_v6f64(<12 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v12f32_to_v6f64:
; VI-LABEL: bitcast_v12f32_to_v6f64:
; GFX9-LABEL: bitcast_v12f32_to_v6f64:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v6f64:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v6f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define inreg <6 x double> @bitcast_v12f32_to_v6f64_scalar(<12 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12f32_to_v6f64_scalar:
; VI-LABEL: bitcast_v12f32_to_v6f64_scalar:
; GFX9-LABEL: bitcast_v12f32_to_v6f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v6f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v6f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define <12 x float> @bitcast_v6f64_to_v12f32(<6 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v6f64_to_v12f32:
; VI-LABEL: bitcast_v6f64_to_v12f32:
; GFX9-LABEL: bitcast_v6f64_to_v12f32:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v12f32:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v12f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define inreg <12 x float> @bitcast_v6f64_to_v12f32_scalar(<6 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6f64_to_v12f32_scalar:
; VI-LABEL: bitcast_v6f64_to_v12f32_scalar:
; GFX9-LABEL: bitcast_v6f64_to_v12f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v12f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v12f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define <6 x i64> @bitcast_v12f32_to_v6i64(<12 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v12f32_to_v6i64:
; VI-LABEL: bitcast_v12f32_to_v6i64:
; GFX9-LABEL: bitcast_v12f32_to_v6i64:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v6i64:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v6i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define inreg <6 x i64> @bitcast_v12f32_to_v6i64_scalar(<12 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12f32_to_v6i64_scalar:
; VI-LABEL: bitcast_v12f32_to_v6i64_scalar:
; GFX9-LABEL: bitcast_v12f32_to_v6i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v6i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v6i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define <12 x float> @bitcast_v6i64_to_v12f32(<6 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v6i64_to_v12f32:
; VI-LABEL: bitcast_v6i64_to_v12f32:
; GFX9-LABEL: bitcast_v6i64_to_v12f32:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v12f32:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v12f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define inreg <12 x float> @bitcast_v6i64_to_v12f32_scalar(<6 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6i64_to_v12f32_scalar:
; VI-LABEL: bitcast_v6i64_to_v12f32_scalar:
; GFX9-LABEL: bitcast_v6i64_to_v12f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v12f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v12f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define <24 x i16> @bitcast_v12f32_to_v24i16(<12 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v12f32_to_v24i16:
; VI-LABEL: bitcast_v12f32_to_v24i16:
; GFX9-LABEL: bitcast_v12f32_to_v24i16:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v24i16:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v24i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define inreg <24 x i16> @bitcast_v12f32_to_v24i16_scalar(<12 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12f32_to_v24i16_scalar:
; VI-LABEL: bitcast_v12f32_to_v24i16_scalar:
; GFX9-LABEL: bitcast_v12f32_to_v24i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v24i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v24i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define <12 x float> @bitcast_v24i16_to_v12f32(<24 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v24i16_to_v12f32:
; VI-LABEL: bitcast_v24i16_to_v12f32:
; GFX9-LABEL: bitcast_v24i16_to_v12f32:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v12f32:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v12f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define inreg <12 x float> @bitcast_v24i16_to_v12f32_scalar(<24 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24i16_to_v12f32_scalar:
; VI-LABEL: bitcast_v24i16_to_v12f32_scalar:
; GFX9-LABEL: bitcast_v24i16_to_v12f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v12f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v12f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define <24 x half> @bitcast_v12f32_to_v24f16(<12 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v12f32_to_v24f16:
; VI-LABEL: bitcast_v12f32_to_v24f16:
; GFX9-LABEL: bitcast_v12f32_to_v24f16:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v24f16:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v24f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define inreg <24 x half> @bitcast_v12f32_to_v24f16_scalar(<12 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v12f32_to_v24f16_scalar:
; VI-LABEL: bitcast_v12f32_to_v24f16_scalar:
; GFX9-LABEL: bitcast_v12f32_to_v24f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v12f32_to_v24f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v12f32_to_v24f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <12 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <12 x float> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <12 x float> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define <12 x float> @bitcast_v24f16_to_v12f32(<24 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v24f16_to_v12f32:
; VI-LABEL: bitcast_v24f16_to_v12f32:
; GFX9-LABEL: bitcast_v24f16_to_v12f32:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v12f32:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v12f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define inreg <12 x float> @bitcast_v24f16_to_v12f32_scalar(<24 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24f16_to_v12f32_scalar:
; VI-LABEL: bitcast_v24f16_to_v12f32_scalar:
; GFX9-LABEL: bitcast_v24f16_to_v12f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v12f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v12f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <12 x float>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <12 x float>
  br label %end

end:
  %phi = phi <12 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <12 x float> %phi
}

define <6 x i64> @bitcast_v6f64_to_v6i64(<6 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v6f64_to_v6i64:
; VI-LABEL: bitcast_v6f64_to_v6i64:
; GFX9-LABEL: bitcast_v6f64_to_v6i64:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v6i64:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v6i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define inreg <6 x i64> @bitcast_v6f64_to_v6i64_scalar(<6 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6f64_to_v6i64_scalar:
; VI-LABEL: bitcast_v6f64_to_v6i64_scalar:
; GFX9-LABEL: bitcast_v6f64_to_v6i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v6i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v6i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define <6 x double> @bitcast_v6i64_to_v6f64(<6 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v6i64_to_v6f64:
; VI-LABEL: bitcast_v6i64_to_v6f64:
; GFX9-LABEL: bitcast_v6i64_to_v6f64:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v6f64:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v6f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define inreg <6 x double> @bitcast_v6i64_to_v6f64_scalar(<6 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6i64_to_v6f64_scalar:
; VI-LABEL: bitcast_v6i64_to_v6f64_scalar:
; GFX9-LABEL: bitcast_v6i64_to_v6f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v6f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v6f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define <24 x i16> @bitcast_v6f64_to_v24i16(<6 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v6f64_to_v24i16:
; VI-LABEL: bitcast_v6f64_to_v24i16:
; GFX9-LABEL: bitcast_v6f64_to_v24i16:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v24i16:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v24i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define inreg <24 x i16> @bitcast_v6f64_to_v24i16_scalar(<6 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6f64_to_v24i16_scalar:
; VI-LABEL: bitcast_v6f64_to_v24i16_scalar:
; GFX9-LABEL: bitcast_v6f64_to_v24i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v24i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v24i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define <6 x double> @bitcast_v24i16_to_v6f64(<24 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v24i16_to_v6f64:
; VI-LABEL: bitcast_v24i16_to_v6f64:
; GFX9-LABEL: bitcast_v24i16_to_v6f64:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v6f64:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v6f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define inreg <6 x double> @bitcast_v24i16_to_v6f64_scalar(<24 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24i16_to_v6f64_scalar:
; VI-LABEL: bitcast_v24i16_to_v6f64_scalar:
; GFX9-LABEL: bitcast_v24i16_to_v6f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v6f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v6f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define <24 x half> @bitcast_v6f64_to_v24f16(<6 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v6f64_to_v24f16:
; VI-LABEL: bitcast_v6f64_to_v24f16:
; GFX9-LABEL: bitcast_v6f64_to_v24f16:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v24f16:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v24f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define inreg <24 x half> @bitcast_v6f64_to_v24f16_scalar(<6 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6f64_to_v24f16_scalar:
; VI-LABEL: bitcast_v6f64_to_v24f16_scalar:
; GFX9-LABEL: bitcast_v6f64_to_v24f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6f64_to_v24f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6f64_to_v24f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <6 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <6 x double> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <6 x double> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define <6 x double> @bitcast_v24f16_to_v6f64(<24 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v24f16_to_v6f64:
; VI-LABEL: bitcast_v24f16_to_v6f64:
; GFX9-LABEL: bitcast_v24f16_to_v6f64:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v6f64:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v6f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define inreg <6 x double> @bitcast_v24f16_to_v6f64_scalar(<24 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24f16_to_v6f64_scalar:
; VI-LABEL: bitcast_v24f16_to_v6f64_scalar:
; GFX9-LABEL: bitcast_v24f16_to_v6f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v6f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v6f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <6 x double>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <6 x double>
  br label %end

end:
  %phi = phi <6 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x double> %phi
}

define <24 x i16> @bitcast_v6i64_to_v24i16(<6 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v6i64_to_v24i16:
; VI-LABEL: bitcast_v6i64_to_v24i16:
; GFX9-LABEL: bitcast_v6i64_to_v24i16:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v24i16:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v24i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define inreg <24 x i16> @bitcast_v6i64_to_v24i16_scalar(<6 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6i64_to_v24i16_scalar:
; VI-LABEL: bitcast_v6i64_to_v24i16_scalar:
; GFX9-LABEL: bitcast_v6i64_to_v24i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v24i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v24i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define <6 x i64> @bitcast_v24i16_to_v6i64(<24 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v24i16_to_v6i64:
; VI-LABEL: bitcast_v24i16_to_v6i64:
; GFX9-LABEL: bitcast_v24i16_to_v6i64:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v6i64:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v6i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define inreg <6 x i64> @bitcast_v24i16_to_v6i64_scalar(<24 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24i16_to_v6i64_scalar:
; VI-LABEL: bitcast_v24i16_to_v6i64_scalar:
; GFX9-LABEL: bitcast_v24i16_to_v6i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v6i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v6i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define <24 x half> @bitcast_v6i64_to_v24f16(<6 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v6i64_to_v24f16:
; VI-LABEL: bitcast_v6i64_to_v24f16:
; GFX9-LABEL: bitcast_v6i64_to_v24f16:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v24f16:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v24f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define inreg <24 x half> @bitcast_v6i64_to_v24f16_scalar(<6 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v6i64_to_v24f16_scalar:
; VI-LABEL: bitcast_v6i64_to_v24f16_scalar:
; GFX9-LABEL: bitcast_v6i64_to_v24f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v6i64_to_v24f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v6i64_to_v24f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <6 x i64> %a, splat (i64 3)
  %a2 = bitcast <6 x i64> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <6 x i64> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define <6 x i64> @bitcast_v24f16_to_v6i64(<24 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v24f16_to_v6i64:
; VI-LABEL: bitcast_v24f16_to_v6i64:
; GFX9-LABEL: bitcast_v24f16_to_v6i64:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v6i64:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v6i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define inreg <6 x i64> @bitcast_v24f16_to_v6i64_scalar(<24 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24f16_to_v6i64_scalar:
; VI-LABEL: bitcast_v24f16_to_v6i64_scalar:
; GFX9-LABEL: bitcast_v24f16_to_v6i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v6i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v6i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <6 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <6 x i64>
  br label %end

end:
  %phi = phi <6 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <6 x i64> %phi
}

define <24 x half> @bitcast_v24i16_to_v24f16(<24 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v24i16_to_v24f16:
; VI-LABEL: bitcast_v24i16_to_v24f16:
; GFX9-LABEL: bitcast_v24i16_to_v24f16:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v24f16:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v24f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define inreg <24 x half> @bitcast_v24i16_to_v24f16_scalar(<24 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24i16_to_v24f16_scalar:
; VI-LABEL: bitcast_v24i16_to_v24f16_scalar:
; GFX9-LABEL: bitcast_v24i16_to_v24f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24i16_to_v24f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24i16_to_v24f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <24 x i16> %a, splat (i16 3)
  %a2 = bitcast <24 x i16> %a1 to <24 x half>
  br label %end

cmp.false:
  %a3 = bitcast <24 x i16> %a to <24 x half>
  br label %end

end:
  %phi = phi <24 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x half> %phi
}

define <24 x i16> @bitcast_v24f16_to_v24i16(<24 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v24f16_to_v24i16:
; VI-LABEL: bitcast_v24f16_to_v24i16:
; GFX9-LABEL: bitcast_v24f16_to_v24i16:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v24i16:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v24i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}

define inreg <24 x i16> @bitcast_v24f16_to_v24i16_scalar(<24 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v24f16_to_v24i16_scalar:
; VI-LABEL: bitcast_v24f16_to_v24i16_scalar:
; GFX9-LABEL: bitcast_v24f16_to_v24i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v24f16_to_v24i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v24f16_to_v24i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <24 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <24 x half> %a1 to <24 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <24 x half> %a to <24 x i16>
  br label %end

end:
  %phi = phi <24 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <24 x i16> %phi
}
