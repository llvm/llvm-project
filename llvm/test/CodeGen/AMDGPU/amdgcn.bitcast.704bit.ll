; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define <22 x float> @bitcast_v22i32_to_v22f32(<22 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v22i32_to_v22f32:
; VI-LABEL: bitcast_v22i32_to_v22f32:
; GFX9-LABEL: bitcast_v22i32_to_v22f32:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v22f32:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v22f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define inreg <22 x float> @bitcast_v22i32_to_v22f32_scalar(<22 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22i32_to_v22f32_scalar:
; VI-LABEL: bitcast_v22i32_to_v22f32_scalar:
; GFX9-LABEL: bitcast_v22i32_to_v22f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v22f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v22f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define <22 x i32> @bitcast_v22f32_to_v22i32(<22 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v22f32_to_v22i32:
; VI-LABEL: bitcast_v22f32_to_v22i32:
; GFX9-LABEL: bitcast_v22f32_to_v22i32:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v22i32:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v22i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define inreg <22 x i32> @bitcast_v22f32_to_v22i32_scalar(<22 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22f32_to_v22i32_scalar:
; VI-LABEL: bitcast_v22f32_to_v22i32_scalar:
; GFX9-LABEL: bitcast_v22f32_to_v22i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v22i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v22i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define <11 x i64> @bitcast_v22i32_to_v11i64(<22 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v22i32_to_v11i64:
; VI-LABEL: bitcast_v22i32_to_v11i64:
; GFX9-LABEL: bitcast_v22i32_to_v11i64:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v11i64:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v11i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define inreg <11 x i64> @bitcast_v22i32_to_v11i64_scalar(<22 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22i32_to_v11i64_scalar:
; VI-LABEL: bitcast_v22i32_to_v11i64_scalar:
; GFX9-LABEL: bitcast_v22i32_to_v11i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v11i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v11i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define <22 x i32> @bitcast_v11i64_to_v22i32(<11 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v11i64_to_v22i32:
; VI-LABEL: bitcast_v11i64_to_v22i32:
; GFX9-LABEL: bitcast_v11i64_to_v22i32:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v22i32:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v22i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define inreg <22 x i32> @bitcast_v11i64_to_v22i32_scalar(<11 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11i64_to_v22i32_scalar:
; VI-LABEL: bitcast_v11i64_to_v22i32_scalar:
; GFX9-LABEL: bitcast_v11i64_to_v22i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v22i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v22i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define <11 x double> @bitcast_v22i32_to_v11f64(<22 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v22i32_to_v11f64:
; VI-LABEL: bitcast_v22i32_to_v11f64:
; GFX9-LABEL: bitcast_v22i32_to_v11f64:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v11f64:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v11f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define inreg <11 x double> @bitcast_v22i32_to_v11f64_scalar(<22 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22i32_to_v11f64_scalar:
; VI-LABEL: bitcast_v22i32_to_v11f64_scalar:
; GFX9-LABEL: bitcast_v22i32_to_v11f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v11f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v11f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define <22 x i32> @bitcast_v11f64_to_v22i32(<11 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v11f64_to_v22i32:
; VI-LABEL: bitcast_v11f64_to_v22i32:
; GFX9-LABEL: bitcast_v11f64_to_v22i32:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v22i32:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v22i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define inreg <22 x i32> @bitcast_v11f64_to_v22i32_scalar(<11 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11f64_to_v22i32_scalar:
; VI-LABEL: bitcast_v11f64_to_v22i32_scalar:
; GFX9-LABEL: bitcast_v11f64_to_v22i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v22i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v22i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define <44 x i16> @bitcast_v22i32_to_v44i16(<22 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v22i32_to_v44i16:
; VI-LABEL: bitcast_v22i32_to_v44i16:
; GFX9-LABEL: bitcast_v22i32_to_v44i16:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v44i16:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v44i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define inreg <44 x i16> @bitcast_v22i32_to_v44i16_scalar(<22 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22i32_to_v44i16_scalar:
; VI-LABEL: bitcast_v22i32_to_v44i16_scalar:
; GFX9-LABEL: bitcast_v22i32_to_v44i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v44i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v44i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define <22 x i32> @bitcast_v44i16_to_v22i32(<44 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v44i16_to_v22i32:
; VI-LABEL: bitcast_v44i16_to_v22i32:
; GFX9-LABEL: bitcast_v44i16_to_v22i32:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v22i32:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v22i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define inreg <22 x i32> @bitcast_v44i16_to_v22i32_scalar(<44 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44i16_to_v22i32_scalar:
; VI-LABEL: bitcast_v44i16_to_v22i32_scalar:
; GFX9-LABEL: bitcast_v44i16_to_v22i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v22i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v22i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define <44 x half> @bitcast_v22i32_to_v44f16(<22 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v22i32_to_v44f16:
; VI-LABEL: bitcast_v22i32_to_v44f16:
; GFX9-LABEL: bitcast_v22i32_to_v44f16:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v44f16:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v44f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define inreg <44 x half> @bitcast_v22i32_to_v44f16_scalar(<22 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22i32_to_v44f16_scalar:
; VI-LABEL: bitcast_v22i32_to_v44f16_scalar:
; GFX9-LABEL: bitcast_v22i32_to_v44f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22i32_to_v44f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22i32_to_v44f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <22 x i32> %a, splat (i32 3)
  %a2 = bitcast <22 x i32> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <22 x i32> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define <22 x i32> @bitcast_v44f16_to_v22i32(<44 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v44f16_to_v22i32:
; VI-LABEL: bitcast_v44f16_to_v22i32:
; GFX9-LABEL: bitcast_v44f16_to_v22i32:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v22i32:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v22i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define inreg <22 x i32> @bitcast_v44f16_to_v22i32_scalar(<44 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44f16_to_v22i32_scalar:
; VI-LABEL: bitcast_v44f16_to_v22i32_scalar:
; GFX9-LABEL: bitcast_v44f16_to_v22i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v22i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v22i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <22 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <22 x i32>
  br label %end

end:
  %phi = phi <22 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x i32> %phi
}

define <11 x i64> @bitcast_v22f32_to_v11i64(<22 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v22f32_to_v11i64:
; VI-LABEL: bitcast_v22f32_to_v11i64:
; GFX9-LABEL: bitcast_v22f32_to_v11i64:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v11i64:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v11i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define inreg <11 x i64> @bitcast_v22f32_to_v11i64_scalar(<22 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22f32_to_v11i64_scalar:
; VI-LABEL: bitcast_v22f32_to_v11i64_scalar:
; GFX9-LABEL: bitcast_v22f32_to_v11i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v11i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v11i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define <22 x float> @bitcast_v11i64_to_v22f32(<11 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v11i64_to_v22f32:
; VI-LABEL: bitcast_v11i64_to_v22f32:
; GFX9-LABEL: bitcast_v11i64_to_v22f32:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v22f32:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v22f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define inreg <22 x float> @bitcast_v11i64_to_v22f32_scalar(<11 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11i64_to_v22f32_scalar:
; VI-LABEL: bitcast_v11i64_to_v22f32_scalar:
; GFX9-LABEL: bitcast_v11i64_to_v22f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v22f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v22f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define <11 x double> @bitcast_v22f32_to_v11f64(<22 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v22f32_to_v11f64:
; VI-LABEL: bitcast_v22f32_to_v11f64:
; GFX9-LABEL: bitcast_v22f32_to_v11f64:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v11f64:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v11f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define inreg <11 x double> @bitcast_v22f32_to_v11f64_scalar(<22 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22f32_to_v11f64_scalar:
; VI-LABEL: bitcast_v22f32_to_v11f64_scalar:
; GFX9-LABEL: bitcast_v22f32_to_v11f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v11f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v11f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define <22 x float> @bitcast_v11f64_to_v22f32(<11 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v11f64_to_v22f32:
; VI-LABEL: bitcast_v11f64_to_v22f32:
; GFX9-LABEL: bitcast_v11f64_to_v22f32:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v22f32:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v22f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define inreg <22 x float> @bitcast_v11f64_to_v22f32_scalar(<11 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11f64_to_v22f32_scalar:
; VI-LABEL: bitcast_v11f64_to_v22f32_scalar:
; GFX9-LABEL: bitcast_v11f64_to_v22f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v22f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v22f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define <44 x i16> @bitcast_v22f32_to_v44i16(<22 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v22f32_to_v44i16:
; VI-LABEL: bitcast_v22f32_to_v44i16:
; GFX9-LABEL: bitcast_v22f32_to_v44i16:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v44i16:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v44i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define inreg <44 x i16> @bitcast_v22f32_to_v44i16_scalar(<22 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22f32_to_v44i16_scalar:
; VI-LABEL: bitcast_v22f32_to_v44i16_scalar:
; GFX9-LABEL: bitcast_v22f32_to_v44i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v44i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v44i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define <22 x float> @bitcast_v44i16_to_v22f32(<44 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v44i16_to_v22f32:
; VI-LABEL: bitcast_v44i16_to_v22f32:
; GFX9-LABEL: bitcast_v44i16_to_v22f32:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v22f32:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v22f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define inreg <22 x float> @bitcast_v44i16_to_v22f32_scalar(<44 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44i16_to_v22f32_scalar:
; VI-LABEL: bitcast_v44i16_to_v22f32_scalar:
; GFX9-LABEL: bitcast_v44i16_to_v22f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v22f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v22f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define <44 x half> @bitcast_v22f32_to_v44f16(<22 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v22f32_to_v44f16:
; VI-LABEL: bitcast_v22f32_to_v44f16:
; GFX9-LABEL: bitcast_v22f32_to_v44f16:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v44f16:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v44f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define inreg <44 x half> @bitcast_v22f32_to_v44f16_scalar(<22 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v22f32_to_v44f16_scalar:
; VI-LABEL: bitcast_v22f32_to_v44f16_scalar:
; GFX9-LABEL: bitcast_v22f32_to_v44f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v22f32_to_v44f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v22f32_to_v44f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <22 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <22 x float> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <22 x float> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define <22 x float> @bitcast_v44f16_to_v22f32(<44 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v44f16_to_v22f32:
; VI-LABEL: bitcast_v44f16_to_v22f32:
; GFX9-LABEL: bitcast_v44f16_to_v22f32:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v22f32:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v22f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define inreg <22 x float> @bitcast_v44f16_to_v22f32_scalar(<44 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44f16_to_v22f32_scalar:
; VI-LABEL: bitcast_v44f16_to_v22f32_scalar:
; GFX9-LABEL: bitcast_v44f16_to_v22f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v22f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v22f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <22 x float>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <22 x float>
  br label %end

end:
  %phi = phi <22 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <22 x float> %phi
}

define <11 x double> @bitcast_v11i64_to_v11f64(<11 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v11i64_to_v11f64:
; VI-LABEL: bitcast_v11i64_to_v11f64:
; GFX9-LABEL: bitcast_v11i64_to_v11f64:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v11f64:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v11f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define inreg <11 x double> @bitcast_v11i64_to_v11f64_scalar(<11 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11i64_to_v11f64_scalar:
; VI-LABEL: bitcast_v11i64_to_v11f64_scalar:
; GFX9-LABEL: bitcast_v11i64_to_v11f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v11f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v11f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define <11 x i64> @bitcast_v11f64_to_v11i64(<11 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v11f64_to_v11i64:
; VI-LABEL: bitcast_v11f64_to_v11i64:
; GFX9-LABEL: bitcast_v11f64_to_v11i64:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v11i64:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v11i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define inreg <11 x i64> @bitcast_v11f64_to_v11i64_scalar(<11 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11f64_to_v11i64_scalar:
; VI-LABEL: bitcast_v11f64_to_v11i64_scalar:
; GFX9-LABEL: bitcast_v11f64_to_v11i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v11i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v11i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define <44 x i16> @bitcast_v11i64_to_v44i16(<11 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v11i64_to_v44i16:
; VI-LABEL: bitcast_v11i64_to_v44i16:
; GFX9-LABEL: bitcast_v11i64_to_v44i16:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v44i16:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v44i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define inreg <44 x i16> @bitcast_v11i64_to_v44i16_scalar(<11 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11i64_to_v44i16_scalar:
; VI-LABEL: bitcast_v11i64_to_v44i16_scalar:
; GFX9-LABEL: bitcast_v11i64_to_v44i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v44i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v44i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define <11 x i64> @bitcast_v44i16_to_v11i64(<44 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v44i16_to_v11i64:
; VI-LABEL: bitcast_v44i16_to_v11i64:
; GFX9-LABEL: bitcast_v44i16_to_v11i64:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v11i64:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v11i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define inreg <11 x i64> @bitcast_v44i16_to_v11i64_scalar(<44 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44i16_to_v11i64_scalar:
; VI-LABEL: bitcast_v44i16_to_v11i64_scalar:
; GFX9-LABEL: bitcast_v44i16_to_v11i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v11i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v11i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define <44 x half> @bitcast_v11i64_to_v44f16(<11 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v11i64_to_v44f16:
; VI-LABEL: bitcast_v11i64_to_v44f16:
; GFX9-LABEL: bitcast_v11i64_to_v44f16:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v44f16:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v44f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define inreg <44 x half> @bitcast_v11i64_to_v44f16_scalar(<11 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11i64_to_v44f16_scalar:
; VI-LABEL: bitcast_v11i64_to_v44f16_scalar:
; GFX9-LABEL: bitcast_v11i64_to_v44f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11i64_to_v44f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11i64_to_v44f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <11 x i64> %a, splat (i64 3)
  %a2 = bitcast <11 x i64> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <11 x i64> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define <11 x i64> @bitcast_v44f16_to_v11i64(<44 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v44f16_to_v11i64:
; VI-LABEL: bitcast_v44f16_to_v11i64:
; GFX9-LABEL: bitcast_v44f16_to_v11i64:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v11i64:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v11i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define inreg <11 x i64> @bitcast_v44f16_to_v11i64_scalar(<44 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44f16_to_v11i64_scalar:
; VI-LABEL: bitcast_v44f16_to_v11i64_scalar:
; GFX9-LABEL: bitcast_v44f16_to_v11i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v11i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v11i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <11 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <11 x i64>
  br label %end

end:
  %phi = phi <11 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x i64> %phi
}

define <44 x i16> @bitcast_v11f64_to_v44i16(<11 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v11f64_to_v44i16:
; VI-LABEL: bitcast_v11f64_to_v44i16:
; GFX9-LABEL: bitcast_v11f64_to_v44i16:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v44i16:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v44i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define inreg <44 x i16> @bitcast_v11f64_to_v44i16_scalar(<11 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11f64_to_v44i16_scalar:
; VI-LABEL: bitcast_v11f64_to_v44i16_scalar:
; GFX9-LABEL: bitcast_v11f64_to_v44i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v44i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v44i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define <11 x double> @bitcast_v44i16_to_v11f64(<44 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v44i16_to_v11f64:
; VI-LABEL: bitcast_v44i16_to_v11f64:
; GFX9-LABEL: bitcast_v44i16_to_v11f64:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v11f64:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v11f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define inreg <11 x double> @bitcast_v44i16_to_v11f64_scalar(<44 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44i16_to_v11f64_scalar:
; VI-LABEL: bitcast_v44i16_to_v11f64_scalar:
; GFX9-LABEL: bitcast_v44i16_to_v11f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v11f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v11f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define <44 x half> @bitcast_v11f64_to_v44f16(<11 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v11f64_to_v44f16:
; VI-LABEL: bitcast_v11f64_to_v44f16:
; GFX9-LABEL: bitcast_v11f64_to_v44f16:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v44f16:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v44f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define inreg <44 x half> @bitcast_v11f64_to_v44f16_scalar(<11 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v11f64_to_v44f16_scalar:
; VI-LABEL: bitcast_v11f64_to_v44f16_scalar:
; GFX9-LABEL: bitcast_v11f64_to_v44f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v11f64_to_v44f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v11f64_to_v44f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <11 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <11 x double> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <11 x double> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define <11 x double> @bitcast_v44f16_to_v11f64(<44 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v44f16_to_v11f64:
; VI-LABEL: bitcast_v44f16_to_v11f64:
; GFX9-LABEL: bitcast_v44f16_to_v11f64:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v11f64:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v11f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define inreg <11 x double> @bitcast_v44f16_to_v11f64_scalar(<44 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44f16_to_v11f64_scalar:
; VI-LABEL: bitcast_v44f16_to_v11f64_scalar:
; GFX9-LABEL: bitcast_v44f16_to_v11f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v11f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v11f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <11 x double>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <11 x double>
  br label %end

end:
  %phi = phi <11 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <11 x double> %phi
}

define <44 x half> @bitcast_v44i16_to_v44f16(<44 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v44i16_to_v44f16:
; VI-LABEL: bitcast_v44i16_to_v44f16:
; GFX9-LABEL: bitcast_v44i16_to_v44f16:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v44f16:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v44f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define inreg <44 x half> @bitcast_v44i16_to_v44f16_scalar(<44 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44i16_to_v44f16_scalar:
; VI-LABEL: bitcast_v44i16_to_v44f16_scalar:
; GFX9-LABEL: bitcast_v44i16_to_v44f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44i16_to_v44f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44i16_to_v44f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <44 x i16> %a, splat (i16 3)
  %a2 = bitcast <44 x i16> %a1 to <44 x half>
  br label %end

cmp.false:
  %a3 = bitcast <44 x i16> %a to <44 x half>
  br label %end

end:
  %phi = phi <44 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x half> %phi
}

define <44 x i16> @bitcast_v44f16_to_v44i16(<44 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v44f16_to_v44i16:
; VI-LABEL: bitcast_v44f16_to_v44i16:
; GFX9-LABEL: bitcast_v44f16_to_v44i16:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v44i16:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v44i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}

define inreg <44 x i16> @bitcast_v44f16_to_v44i16_scalar(<44 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v44f16_to_v44i16_scalar:
; VI-LABEL: bitcast_v44f16_to_v44i16_scalar:
; GFX9-LABEL: bitcast_v44f16_to_v44i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v44f16_to_v44i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v44f16_to_v44i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <44 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <44 x half> %a1 to <44 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <44 x half> %a to <44 x i16>
  br label %end

end:
  %phi = phi <44 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <44 x i16> %phi
}
