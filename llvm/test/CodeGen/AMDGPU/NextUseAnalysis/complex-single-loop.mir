# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#       bb.0.entry
#           |
#    bb.1.loop.header<--+
#       /   |           |
#  bb.2.bb1 |           |
#       \   |           |
#      bb.5.Flow        |
#       /   |           |
#  bb.6.bb3 |           |
#       \   |           |
#      bb.3.Flow1       |
#       /   |           |
#  bb.4.bb2 |           |
#       \   |           |
#    bb.7.loop.latch----+
#           |
#       bb.8.exit
#




# CHECK-LABEL: === NextUseAnalysis Results for test5 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %0:vgpr_32 = COPY killed $vgpr6
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Instr: %1:vgpr_32 = COPY killed $vgpr5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 29 ]
# CHECK: Instr: %2:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 28 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Instr: %3:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 27 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Instr: %4:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Instr: %5:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 24 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Instr: %7:vreg_64 = REG_SEQUENCE killed %2, %subreg.sub0, killed %1, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Instr: %8:vreg_64 = REG_SEQUENCE killed %4, %subreg.sub0, killed %3, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 22 ]
# CHECK: Vreg: %7[ 27 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Instr: %9:vreg_64 = REG_SEQUENCE killed %6, %subreg.sub0, killed %5, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %7[ 26 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %8:sub0[ 16 ]
# CHECK: Vreg: %8:sub1[ 17 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Instr: %10:vgpr_32 = GLOBAL_LOAD_UBYTE %9, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 20 ]
# CHECK: Vreg: %7[ 25 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %8:sub0[ 15 ]
# CHECK: Vreg: %8:sub1[ 16 ]
# CHECK: Instr: %11:vgpr_32 = GLOBAL_LOAD_UBYTE %9, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %7[ 24 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %8:sub0[ 14 ]
# CHECK: Vreg: %8:sub1[ 15 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Instr: %12:vgpr_32 = V_LSHL_OR_B32_e64 killed %11, 8, killed %10, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %7[ 23 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %8:sub0[ 13 ]
# CHECK: Vreg: %8:sub1[ 14 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Instr: %13:vgpr_32 = GLOBAL_LOAD_UBYTE %9, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %7[ 22 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %8:sub0[ 12 ]
# CHECK: Vreg: %8:sub1[ 13 ]
# CHECK: Vreg: %12[ 3 ]
# CHECK: Instr: %14:vgpr_32 = GLOBAL_LOAD_UBYTE killed %9, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %7[ 21 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %8:sub0[ 11 ]
# CHECK: Vreg: %8:sub1[ 12 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Instr: %15:vgpr_32 = V_LSHL_OR_B32_e64 killed %14, 8, killed %13, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %7[ 20 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %8:sub0[ 10 ]
# CHECK: Vreg: %8:sub1[ 11 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: %16:vgpr_32 = V_LSHL_OR_B32_e64 killed %15, 16, killed %12, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %7[ 19 ]
# CHECK: Vreg: %8:sub0[ 9 ]
# CHECK: Vreg: %8:sub1[ 10 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %17:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %7[ 18 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %7[ 18 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %18:sreg_32 = PHI %17, %bb.0, %19, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ LoopTag+18 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %20:vreg_64 = PHI undef %21:vreg_64, %bb.0, %22, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ LoopTag+18 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %23:sreg_32 = PHI %17, %bb.0, %24, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ LoopTag+18 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %20[ 4 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %25:vgpr_32 = PHI %16, %bb.0, %26, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ LoopTag+18 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %20[ 4 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Instr: %27:sreg_32 = V_CMP_GE_I32_e64 %23, %16, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %7[ LoopTag+17 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 13 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %20[ 3 ]
# CHECK: Vreg: %8:sub0[ 7 ]
# CHECK: Vreg: %8:sub1[ 8 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Instr: %28:sreg_32 = V_CMP_LT_I32_e64 %23, %16, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %7[ LoopTag+16 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %8:sub0[ 6 ]
# CHECK: Vreg: %8:sub1[ 7 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Instr: %29:sreg_32 = SI_IF killed %28, %bb.5, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %7[ LoopTag+15 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %16[ 9 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8:sub0[ 5 ]
# CHECK: Vreg: %8:sub1[ 6 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Instr: S_BRANCH %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %16[ 8 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %8:sub0[ 4 ]
# CHECK: Vreg: %8:sub1[ 5 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %16[ 8 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %8:sub0[ 4 ]
# CHECK: Vreg: %8:sub1[ 5 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %30:sreg_32_xm0 = S_ASHR_I32 %23, 31, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %7[ LoopTag+26 ]
# CHECK: Vreg: %16[ 7 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 22 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %8:sub0[ 3 ]
# CHECK: Vreg: %8:sub1[ 4 ]
# CHECK: Vreg: %29[ 13 ]
# CHECK: Instr: %31:sreg_64 = REG_SEQUENCE %23, %subreg.sub0, killed %30, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 20 ]
# CHECK: Vreg: %7[ LoopTag+25 ]
# CHECK: Vreg: %16[ 6 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %18[ 21 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %8:sub0[ 2 ]
# CHECK: Vreg: %8:sub1[ 3 ]
# CHECK: Vreg: %29[ 12 ]
# CHECK: Instr: %32:sreg_64 = nsw S_LSHL_B64 killed %31, 2, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %7[ LoopTag+24 ]
# CHECK: Vreg: %16[ 5 ]
# CHECK: Vreg: %23[ 18 ]
# CHECK: Vreg: %18[ 20 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %8:sub0[ 1 ]
# CHECK: Vreg: %8:sub1[ 2 ]
# CHECK: Vreg: %29[ 11 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Instr: %33:vgpr_32, %34:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %8.sub0, %32.sub0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %7[ LoopTag+23 ]
# CHECK: Vreg: %16[ 4 ]
# CHECK: Vreg: %23[ 17 ]
# CHECK: Vreg: %18[ 19 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %32:sub0[ 0 ]
# CHECK: Vreg: %32:sub1[ 1 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8:sub0[ 0 ]
# CHECK: Vreg: %8:sub1[ 1 ]
# CHECK: Vreg: %29[ 10 ]
# CHECK: Instr: %35:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %32.sub1, %8.sub1, killed %34, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %7[ LoopTag+22 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %16[ 3 ]
# CHECK: Vreg: %23[ 16 ]
# CHECK: Vreg: %18[ 18 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %32:sub1[ 0 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %8:sub1[ 0 ]
# CHECK: Vreg: %8:sub0[ 28 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Instr: %36:vreg_64 = REG_SEQUENCE killed %33, %subreg.sub0, killed %35, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %7[ LoopTag+21 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %16[ 2 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %18[ 17 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %27[ 4 ]
# CHECK: Vreg: %8:sub0[ 27 ]
# CHECK: Vreg: %8:sub1[ 28 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Instr: %37:vgpr_32 = GLOBAL_LOAD_DWORD %36, 0, 0, implicit $exec :: (load (s32) from %ir.gep, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %7[ LoopTag+20 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 14 ]
# CHECK: Vreg: %18[ 16 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %8:sub0[ 26 ]
# CHECK: Vreg: %8:sub1[ 27 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Instr: %38:sreg_32 = V_CMP_LE_I32_e64 killed %37, %16, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %7[ LoopTag+19 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18[ 15 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %8:sub0[ 25 ]
# CHECK: Vreg: %8:sub1[ 26 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Instr: %39:sreg_32 = COPY $exec_lo
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %7[ LoopTag+18 ]
# CHECK: Vreg: %23[ 12 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8:sub0[ 24 ]
# CHECK: Vreg: %8:sub1[ 25 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: %40:sreg_32 = S_ANDN2_B32 killed %27, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %7[ LoopTag+17 ]
# CHECK: Vreg: %23[ 11 ]
# CHECK: Vreg: %18[ 13 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %8:sub0[ 23 ]
# CHECK: Vreg: %8:sub1[ 24 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %41:sreg_32 = S_AND_B32 killed %38, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %7[ LoopTag+16 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %23[ 10 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %8:sub0[ 22 ]
# CHECK: Vreg: %8:sub1[ 23 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %42:sreg_32 = S_OR_B32 killed %40, killed %41, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %7[ LoopTag+15 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %23[ 9 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %8:sub0[ 21 ]
# CHECK: Vreg: %8:sub1[ 22 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %8:sub0[ 20 ]
# CHECK: Vreg: %8:sub1[ 21 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %8:sub0[ 20 ]
# CHECK: Vreg: %8:sub1[ 21 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %43:sreg_32 = PHI %44, %bb.5, %45, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %7[ LoopTag+11 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %8:sub0[ 17 ]
# CHECK: Vreg: %8:sub1[ 18 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Instr: %46:vgpr_32 = PHI undef %47:vgpr_32, %bb.5, %48, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %7[ LoopTag+11 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %8:sub0[ 17 ]
# CHECK: Vreg: %8:sub1[ 18 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %43[ 2 ]
# CHECK: Instr: SI_END_CF killed %49, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %7[ LoopTag+10 ]
# CHECK: Vreg: %23[ 4 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %46[ 2 ]
# CHECK: Vreg: %8:sub0[ 16 ]
# CHECK: Vreg: %8:sub1[ 17 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %43[ 1 ]
# CHECK: Instr: %50:sreg_32 = SI_IF killed %43, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %7[ LoopTag+9 ]
# CHECK: Vreg: %23[ 3 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %8:sub0[ 15 ]
# CHECK: Vreg: %8:sub1[ 16 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %7[ LoopTag+8 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %8:sub0[ 14 ]
# CHECK: Vreg: %8:sub1[ 15 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %7[ LoopTag+8 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %8:sub0[ 14 ]
# CHECK: Vreg: %8:sub1[ 15 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: GLOBAL_STORE_DWORD %22, killed %25, 0, 0, implicit $exec :: (store (s32) into %ir.gep, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %7[ LoopTag+10 ]
# CHECK: Vreg: %23[ 4 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %8:sub0[ 16 ]
# CHECK: Vreg: %8:sub1[ 17 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Instr: %51:vgpr_32 = V_MOV_B32_e32 1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %7[ LoopTag+9 ]
# CHECK: Vreg: %23[ 3 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %8:sub0[ 15 ]
# CHECK: Vreg: %8:sub1[ 16 ]
# CHECK: Vreg: %22[ 7 ]
# CHECK: Vreg: %50[ 2 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %7[ LoopTag+8 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %8:sub0[ 14 ]
# CHECK: Vreg: %8:sub1[ 15 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %7[ LoopTag+8 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %8:sub0[ 14 ]
# CHECK: Vreg: %8:sub1[ 15 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %52:sreg_32 = PHI %27, %bb.1, %42, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %8:sub0[ 20 ]
# CHECK: Vreg: %8:sub1[ 21 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Instr: %44:sreg_32 = PHI %17, %bb.1, %39, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %52[ 2 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %8:sub0[ 20 ]
# CHECK: Vreg: %8:sub1[ 21 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Instr: %22:vreg_64 = PHI %20, %bb.1, %36, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %52[ 2 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %44[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %8:sub0[ 20 ]
# CHECK: Vreg: %8:sub1[ 21 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Instr: SI_END_CF killed %29, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %7[ LoopTag+13 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %23[ 7 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %44[ 2 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %8:sub0[ 19 ]
# CHECK: Vreg: %8:sub1[ 20 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Instr: %49:sreg_32 = SI_IF killed %52, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %7[ LoopTag+12 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %44[ 1 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %8:sub0[ 18 ]
# CHECK: Vreg: %8:sub1[ 19 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %7[ LoopTag+11 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %8:sub0[ 17 ]
# CHECK: Vreg: %8:sub1[ 18 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %7[ LoopTag+11 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %8:sub0[ 17 ]
# CHECK: Vreg: %8:sub1[ 18 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %53:vgpr_32 = V_LSHRREV_B32_e64 31, %25, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %7[ LoopTag+16 ]
# CHECK: Vreg: %23[ 10 ]
# CHECK: Vreg: %49[ 6 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %44[ 3 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %8:sub0[ 22 ]
# CHECK: Vreg: %8:sub1[ 23 ]
# CHECK: Vreg: %22[ 9 ]
# CHECK: Instr: %54:vgpr_32 = V_ADD_U32_e64 %25, killed %53, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %7[ LoopTag+15 ]
# CHECK: Vreg: %23[ 9 ]
# CHECK: Vreg: %49[ 5 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %44[ 2 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %8:sub0[ 21 ]
# CHECK: Vreg: %8:sub1[ 22 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Instr: %48:vgpr_32 = V_ASHRREV_I32_e64 1, killed %54, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %7[ LoopTag+14 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %49[ 4 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %44[ 1 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %8:sub0[ 20 ]
# CHECK: Vreg: %8:sub1[ 21 ]
# CHECK: Vreg: %22[ 7 ]
# CHECK: Instr: %55:sreg_32 = S_ANDN2_B32 killed %44, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %7[ LoopTag+13 ]
# CHECK: Vreg: %23[ 7 ]
# CHECK: Vreg: %49[ 3 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %8:sub0[ 19 ]
# CHECK: Vreg: %8:sub1[ 20 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %48[ 2 ]
# CHECK: Instr: %45:sreg_32 = COPY killed %55
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %7[ LoopTag+12 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %49[ 2 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %8:sub0[ 18 ]
# CHECK: Vreg: %8:sub1[ 19 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %7[ LoopTag+11 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %8:sub0[ 17 ]
# CHECK: Vreg: %8:sub1[ 18 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %7[ LoopTag+11 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %8:sub0[ 17 ]
# CHECK: Vreg: %8:sub1[ 18 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: %26:vgpr_32 = PHI %46, %bb.3, %51, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %7[ LoopTag+8 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %8:sub0[ 14 ]
# CHECK: Vreg: %8:sub1[ 15 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Instr: SI_END_CF killed %50, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %7[ LoopTag+7 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %8:sub0[ 13 ]
# CHECK: Vreg: %8:sub1[ 14 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Instr: %24:sreg_32 = S_ADD_I32 killed %23, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %7[ LoopTag+6 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %8:sub0[ 12 ]
# CHECK: Vreg: %8:sub1[ 13 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Instr: %56:sreg_32 = V_CMP_GE_U32_e64 %24, %0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %26[ 3 ]
# CHECK: Vreg: %7[ LoopTag+5 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %8:sub0[ 11 ]
# CHECK: Vreg: %8:sub1[ 12 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %19:sreg_32 = SI_IF_BREAK killed %56, killed %18, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %7[ LoopTag+4 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %8:sub0[ 10 ]
# CHECK: Vreg: %8:sub1[ 11 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Instr: SI_LOOP %19, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %7[ LoopTag+3 ]
# CHECK: Vreg: %8:sub0[ 9 ]
# CHECK: Vreg: %8:sub1[ 10 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: S_BRANCH %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ LoopTag+2 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ LoopTag+2 ]
# CHECK: Vreg: %8:sub0[ 8 ]
# CHECK: Vreg: %8:sub1[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: --- MBB_8 ---
# CHECK: Instr: SI_END_CF killed %19, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: GLOBAL_STORE_DWORD killed %7, killed %26, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Instr: S_ENDPGM 0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps void @test5(ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, i32 %TC) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  br label %1
  1:
  %phi.inc = phi i32 [ 0, %0 ], [ %inc, %5 ]
  %phi1 = phi i32 [ %ld1, %0 ], [ %phi2, %5 ]
  %cond1 = icmp slt i32 %phi.inc, %ld1
  br i1 %cond1, label %2, label %4
  2:
  %sext = sext i32 %phi.inc to i64
  %gep = getelementptr inbounds i32, ptr addrspace(1) %p2, i64 %sext
  %ld2 = load i32, ptr addrspace(1) %gep, align 4
  %cond2 = icmp sgt i32 %ld2, %ld1
  br i1 %cond2, label %3, label %4
  3:
  store i32 %phi1, ptr addrspace(1) %gep, align 4
  br label %5
  4:
  %div = sdiv i32 %phi1, 2
  br label %5
  5:
  %phi2 = phi i32 [ 1, %3 ], [ %div, %4 ]
  %inc = add i32 %phi.inc, 1
  %cond3 = icmp ult i32 %inc, %TC
  br i1 %cond3, label %1, label %6
  6:
  store i32 %phi2, ptr addrspace(1) %p3, align 4
  ret void
  }
...

---
name:            test5
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6
  
    %28:vgpr_32 = COPY killed $vgpr6
    %27:vgpr_32 = COPY killed $vgpr5
    %26:vgpr_32 = COPY killed $vgpr4
    %25:vgpr_32 = COPY killed $vgpr3
    %24:vgpr_32 = COPY killed $vgpr2
    %23:vgpr_32 = COPY killed $vgpr1
    %22:vgpr_32 = COPY killed $vgpr0
    %67:vreg_64 = REG_SEQUENCE killed %26, %subreg.sub0, killed %27, %subreg.sub1
    %66:vreg_64 = REG_SEQUENCE killed %24, %subreg.sub0, killed %25, %subreg.sub1
    %65:vreg_64 = REG_SEQUENCE killed %22, %subreg.sub0, killed %23, %subreg.sub1
    %36:vgpr_32 = GLOBAL_LOAD_UBYTE %65, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %38:vgpr_32 = GLOBAL_LOAD_UBYTE %65, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %41:vgpr_32 = V_LSHL_OR_B32_e64 killed %38, 8, killed %36, implicit $exec
    %42:vgpr_32 = GLOBAL_LOAD_UBYTE %65, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %44:vgpr_32 = GLOBAL_LOAD_UBYTE killed %65, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %44, 8, killed %42, implicit $exec
    %0:vgpr_32 = V_LSHL_OR_B32_e64 killed %46, 16, killed %41, implicit $exec
    %31:sreg_32 = S_MOV_B32 0
  
  bb.1:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    %1:sreg_32 = PHI %31, %bb.0, %19, %bb.7
    %2:vreg_64 = PHI undef %32:vreg_64, %bb.0, %12, %bb.7
    %3:sreg_32 = PHI %31, %bb.0, %18, %bb.7
    %4:vgpr_32 = PHI %0, %bb.0, %17, %bb.7
    %49:sreg_32 = V_CMP_GE_I32_e64 %3, %0, implicit $exec
    %50:sreg_32 = V_CMP_LT_I32_e64 %3, %0, implicit $exec
    %6:sreg_32 = SI_IF killed %50, %bb.5, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.2
  
  bb.2:
    successors: %bb.5(0x80000000)
  
    %53:sreg_32_xm0 = S_ASHR_I32 %3, 31, implicit-def dead $scc
    %55:sreg_64 = REG_SEQUENCE %3, %subreg.sub0, killed %53, %subreg.sub1
    %57:sreg_64 = nsw S_LSHL_B64 killed %55, 2, implicit-def dead $scc
    %74:vgpr_32, %76:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %66.sub0, %57.sub0, 0, implicit $exec
    %75:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %57.sub1, %66.sub1, killed %76, 0, implicit $exec
    %7:vreg_64 = REG_SEQUENCE killed %74, %subreg.sub0, killed %75, %subreg.sub1
    %58:vgpr_32 = GLOBAL_LOAD_DWORD %7, 0, 0, implicit $exec :: (load (s32) from %ir.gep, addrspace 1)
    %59:sreg_32 = V_CMP_LE_I32_e64 killed %58, %0, implicit $exec
    %70:sreg_32 = COPY $exec_lo
    %72:sreg_32 = S_ANDN2_B32 killed %49, $exec_lo, implicit-def dead $scc
    %73:sreg_32 = S_AND_B32 killed %59, $exec_lo, implicit-def dead $scc
    %71:sreg_32 = S_OR_B32 killed %72, killed %73, implicit-def dead $scc
    S_BRANCH %bb.5
  
  bb.3:
    successors: %bb.4(0x40000000), %bb.7(0x40000000)
  
    %10:sreg_32 = PHI %13, %bb.5, %68, %bb.6
    %9:vgpr_32 = PHI undef %60:vgpr_32, %bb.5, %16, %bb.6
    SI_END_CF killed %15, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %11:sreg_32 = SI_IF killed %10, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.4:
    successors: %bb.7(0x80000000)
  
    GLOBAL_STORE_DWORD %12, killed %4, 0, 0, implicit $exec :: (store (s32) into %ir.gep, addrspace 1)
    %63:vgpr_32 = V_MOV_B32_e32 1, implicit $exec
    S_BRANCH %bb.7
  
  bb.5:
    successors: %bb.6(0x40000000), %bb.3(0x40000000)
  
    %14:sreg_32 = PHI %49, %bb.1, %71, %bb.2
    %13:sreg_32 = PHI %31, %bb.1, %70, %bb.2
    %12:vreg_64 = PHI %2, %bb.1, %7, %bb.2
    SI_END_CF killed %6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %15:sreg_32 = SI_IF killed %14, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.6
  
  bb.6:
    successors: %bb.3(0x80000000)
  
    %61:vgpr_32 = V_LSHRREV_B32_e64 31, %4, implicit $exec
    %62:vgpr_32 = V_ADD_U32_e64 %4, killed %61, 0, implicit $exec
    %16:vgpr_32 = V_ASHRREV_I32_e64 1, killed %62, implicit $exec
    %69:sreg_32 = S_ANDN2_B32 killed %13, $exec_lo, implicit-def dead $scc
    %68:sreg_32 = COPY killed %69
    S_BRANCH %bb.3
  
  bb.7:
    successors: %bb.8(0x04000000), %bb.1(0x7c000000)
  
    %17:vgpr_32 = PHI %9, %bb.3, %63, %bb.4
    SI_END_CF killed %11, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %18:sreg_32 = S_ADD_I32 killed %3, 1, implicit-def dead $scc
    %64:sreg_32 = V_CMP_GE_U32_e64 %18, %28, implicit $exec
    %19:sreg_32 = SI_IF_BREAK killed %64, killed %1, implicit-def dead $scc
    SI_LOOP %19, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.8
  
  bb.8:
    SI_END_CF killed %19, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    GLOBAL_STORE_DWORD killed %67, killed %17, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    S_ENDPGM 0
...
---
