# NOTE: Test validates basic next-use distance calculations for COPY instructions and register liveness tracking
# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s





# CHECK-LABEL: === NextUseAnalysis Results for test1 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %10:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Instr: %9:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %10[ 12 ]
# CHECK: Instr: %8:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Instr: %7:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Instr: %14:vgpr_32 = V_AND_B32_e64 1, killed %8, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Instr: %15:sreg_32 = V_CMP_NE_U32_e64 1, killed %14, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Instr: %0:sreg_32 = SI_IF killed %15, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %1:vreg_64 = PHI undef %12:vreg_64, %bb.0, %4, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Instr: %72:vgpr_32 = PHI %6, %bb.0, undef %73:vgpr_32, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Instr: %2:sreg_32 = SI_ELSE killed %0, %bb.4, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %72[ 2 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Instr: S_BRANCH %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %72[ 1 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %72[ 1 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %33:vgpr_32 = DS_READ_U8_gfx9 %72, 0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %2[ 17 ]
# CHECK: Vreg: %9[ 18 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %10[ 19 ]
# CHECK: Instr: %34:vgpr_32 = DS_READ_U8_gfx9 %72, 1, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 10 ]
# CHECK: Vreg: %2[ 16 ]
# CHECK: Vreg: %9[ 17 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %10[ 18 ]
# CHECK: Instr: %35:vgpr_32 = DS_READ_U8_gfx9 %72, 2, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 9 ]
# CHECK: Vreg: %2[ 15 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %10[ 17 ]
# CHECK: Instr: %36:vgpr_32 = DS_READ_U8_gfx9 %72, 3, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 8 ]
# CHECK: Vreg: %2[ 14 ]
# CHECK: Vreg: %9[ 15 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Instr: %37:vgpr_32 = DS_READ_U8_gfx9 %72, 4, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 7 ]
# CHECK: Vreg: %2[ 13 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Instr: %38:vgpr_32 = DS_READ_U8_gfx9 %72, 5, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 6 ]
# CHECK: Vreg: %2[ 12 ]
# CHECK: Vreg: %9[ 13 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Instr: %39:vgpr_32 = DS_READ_U8_gfx9 %72, 6, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 5 ]
# CHECK: Vreg: %2[ 11 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: %40:vgpr_32 = DS_READ_U8_gfx9 killed %72, 7, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 4 ]
# CHECK: Vreg: %2[ 10 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %42:vgpr_32 = V_LSHL_OR_B32_e64 killed %38, 8, killed %37, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %43:vgpr_32 = V_LSHL_OR_B32_e64 killed %40, 8, killed %39, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %42[ 1 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Instr: %45:vgpr_32 = V_LSHL_OR_B32_e64 killed %43, 16, killed %42, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Instr: %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %34, 8, killed %33, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 3 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Instr: %47:vgpr_32 = V_LSHL_OR_B32_e64 killed %36, 8, killed %35, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 2 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Instr: %48:vgpr_32 = V_LSHL_OR_B32_e64 killed %47, 16, killed %46, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 1 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Instr: %62:vreg_64 = REG_SEQUENCE killed %48, %subreg.sub0, killed %45, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Instr: %3:vreg_64 = COPY killed %62
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %16:vgpr_32 = DS_READ_U8_gfx9 %7, 0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %9[ 20 ]
# CHECK: Vreg: %10[ 21 ]
# CHECK: Instr: %17:vgpr_32 = DS_READ_U8_gfx9 %7, 1, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %9[ 19 ]
# CHECK: Vreg: %16[ 10 ]
# CHECK: Vreg: %10[ 20 ]
# CHECK: Instr: %18:vgpr_32 = DS_READ_U8_gfx9 %7, 2, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %9[ 18 ]
# CHECK: Vreg: %16[ 9 ]
# CHECK: Vreg: %10[ 19 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Instr: %19:vgpr_32 = DS_READ_U8_gfx9 %7, 3, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %9[ 17 ]
# CHECK: Vreg: %16[ 8 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %10[ 18 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Instr: %20:vgpr_32 = DS_READ_U8_gfx9 %7, 4, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %16[ 7 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %10[ 17 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %19[ 8 ]
# CHECK: Instr: %21:vgpr_32 = DS_READ_U8_gfx9 %7, 5, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %9[ 15 ]
# CHECK: Vreg: %16[ 6 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %20[ 3 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %19[ 7 ]
# CHECK: Instr: %22:vgpr_32 = DS_READ_U8_gfx9 %7, 6, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %16[ 5 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %19[ 6 ]
# CHECK: Instr: %23:vgpr_32 = DS_READ_U8_gfx9 killed %7, 7, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9[ 13 ]
# CHECK: Vreg: %16[ 4 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %19[ 5 ]
# CHECK: Instr: %25:vgpr_32 = V_LSHL_OR_B32_e64 killed %21, 8, killed %20, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %16[ 3 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %19[ 4 ]
# CHECK: Instr: %26:vgpr_32 = V_LSHL_OR_B32_e64 killed %23, 8, killed %22, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %16[ 2 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %19[ 3 ]
# CHECK: Instr: %28:vgpr_32 = V_LSHL_OR_B32_e64 killed %26, 16, killed %25, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %19[ 2 ]
# CHECK: Instr: %29:vgpr_32 = V_LSHL_OR_B32_e64 killed %17, 8, killed %16, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: %30:vgpr_32 = V_LSHL_OR_B32_e64 killed %19, 8, killed %18, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %28[ 2 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %31:vgpr_32 = V_LSHL_OR_B32_e64 killed %30, 16, killed %29, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Instr: %61:vreg_64 = REG_SEQUENCE killed %31, %subreg.sub0, killed %28, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Instr: %4:vreg_64 = COPY killed %61
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Instr: S_BRANCH %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: %5:vreg_64 = PHI %1, %bb.1, %3, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Instr: SI_END_CF killed %2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %5:sub0[ 1 ]
# CHECK: Vreg: %5:sub1[ 2 ]
# CHECK: Instr: %64:vgpr_32, %66:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %5.sub0, killed %9, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %5:sub0[ 0 ]
# CHECK: Vreg: %5:sub1[ 1 ]
# CHECK: Instr: %65:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %5.sub1, killed %10, killed %66, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %5:sub1[ 0 ]
# CHECK: Instr: %53:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %64, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Instr: %54:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %65, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %53[ 1 ]
# CHECK: Instr: $sgpr0 = COPY killed %53
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %54[ 1 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Instr: $sgpr1 = COPY killed %54
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %54[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0, killed $sgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

---
name:            test1
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHContTarget: false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 1, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 2, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 3, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 4, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 5, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 6, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 7, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 8, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 9, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 10, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 11, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 12, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 13, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 14, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 15, class: sreg_32, preferred-register: '$vcc_lo', flags: [  ] }
  - { id: 16, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 17, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 18, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 19, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 20, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 21, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 22, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 23, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 24, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 25, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 26, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 27, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 28, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 29, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 30, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 31, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 32, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 33, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 34, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 35, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 36, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 37, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 38, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 39, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 40, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 41, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 42, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 43, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 44, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 45, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 46, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 47, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 48, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 49, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 50, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 51, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 52, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 53, class: sreg_32_xm0, preferred-register: '', flags: [  ] }
  - { id: 54, class: sreg_32_xm0, preferred-register: '', flags: [  ] }
  - { id: 55, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 56, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 57, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 58, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 59, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 60, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 61, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 62, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 63, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 64, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 65, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 66, class: sreg_32_xm0_xexec, preferred-register: '$vcc_lo', 
      flags: [  ] }
  - { id: 67, class: sreg_32_xm0_xexec, preferred-register: '', flags: [  ] }
  - { id: 68, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 69, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 70, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 71, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 72, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 73, class: vgpr_32, preferred-register: '', flags: [  ] }
liveins:
  - { reg: '$vgpr0', virtual-reg: '%6' }
  - { reg: '$vgpr1', virtual-reg: '%7' }
  - { reg: '$vgpr2', virtual-reg: '%8' }
  - { reg: '$vgpr3', virtual-reg: '%9' }
  - { reg: '$vgpr4', virtual-reg: '%10' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  explicitKernArgSize: 0
  maxKernArgAlign: 4
  ldsSize:         0
  gdsSize:         0
  dynLDSAlign:     1
  isEntryFunction: true
  isChainFunction: false
  noSignedZerosFPMath: false
  memoryBound:     false
  waveLimiter:     false
  hasSpilledSGPRs: false
  hasSpilledVGPRs: false
  scratchRSrcReg:  '$private_rsrc_reg'
  frameOffsetReg:  '$fp_reg'
  stackPtrOffsetReg: '$sgpr32'
  bytesInStackArgArea: 0
  returnsVoid:     false
  psInputAddr:     15
  psInputEnable:   15
  maxMemoryClusterDWords: 8
  mode:
    ieee:            false
    dx10-clamp:      true
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true
  highBitsOf32BitAddress: 0
  occupancy:       16
  vgprForAGPRCopy: ''
  sgprForEXECCopy: '$sgpr105'
  longBranchReservedReg: ''
  hasInitWholeWave: false
  dynamicVGPRBlockSize: 0
  scratchReservedForDynamicVGPRs: 0
  isWholeWaveFunction: false
body:             |
  bb.0:
    successors: %bb.3(0x40000000), %bb.1(0x40000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4
  
    %10:vgpr_32 = COPY killed $vgpr4
    %9:vgpr_32 = COPY killed $vgpr3
    %8:vgpr_32 = COPY killed $vgpr2
    %7:vgpr_32 = COPY killed $vgpr1
    %6:vgpr_32 = COPY killed $vgpr0
    %14:vgpr_32 = V_AND_B32_e64 1, killed %8, implicit $exec
    %15:sreg_32 = V_CMP_NE_U32_e64 1, killed %14, implicit $exec
    %0:sreg_32 = SI_IF killed %15, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.3
  
  bb.1:
    successors: %bb.2(0x40000000), %bb.4(0x40000000)
  
    %1:vreg_64 = PHI undef %12:vreg_64, %bb.0, %4, %bb.3
    %72:vgpr_32 = PHI %6, %bb.0, undef %73:vgpr_32, %bb.3
    %2:sreg_32 = SI_ELSE killed %0, %bb.4, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.2
  
  bb.2:
    successors: %bb.4(0x80000000)
  
    %33:vgpr_32 = DS_READ_U8_gfx9 %72, 0, 0, implicit $exec
    %34:vgpr_32 = DS_READ_U8_gfx9 %72, 1, 0, implicit $exec
    %35:vgpr_32 = DS_READ_U8_gfx9 %72, 2, 0, implicit $exec
    %36:vgpr_32 = DS_READ_U8_gfx9 %72, 3, 0, implicit $exec
    %37:vgpr_32 = DS_READ_U8_gfx9 %72, 4, 0, implicit $exec
    %38:vgpr_32 = DS_READ_U8_gfx9 %72, 5, 0, implicit $exec
    %39:vgpr_32 = DS_READ_U8_gfx9 %72, 6, 0, implicit $exec
    %40:vgpr_32 = DS_READ_U8_gfx9 killed %72, 7, 0, implicit $exec
    %42:vgpr_32 = V_LSHL_OR_B32_e64 killed %38, 8, killed %37, implicit $exec
    %43:vgpr_32 = V_LSHL_OR_B32_e64 killed %40, 8, killed %39, implicit $exec
    %45:vgpr_32 = V_LSHL_OR_B32_e64 killed %43, 16, killed %42, implicit $exec
    %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %34, 8, killed %33, implicit $exec
    %47:vgpr_32 = V_LSHL_OR_B32_e64 killed %36, 8, killed %35, implicit $exec
    %48:vgpr_32 = V_LSHL_OR_B32_e64 killed %47, 16, killed %46, implicit $exec
    %62:vreg_64 = REG_SEQUENCE killed %48, %subreg.sub0, killed %45, %subreg.sub1
    %3:vreg_64 = COPY killed %62
    S_BRANCH %bb.4
  
  bb.3:
    successors: %bb.1(0x80000000)
  
    %16:vgpr_32 = DS_READ_U8_gfx9 %7, 0, 0, implicit $exec
    %17:vgpr_32 = DS_READ_U8_gfx9 %7, 1, 0, implicit $exec
    %18:vgpr_32 = DS_READ_U8_gfx9 %7, 2, 0, implicit $exec
    %19:vgpr_32 = DS_READ_U8_gfx9 %7, 3, 0, implicit $exec
    %20:vgpr_32 = DS_READ_U8_gfx9 %7, 4, 0, implicit $exec
    %21:vgpr_32 = DS_READ_U8_gfx9 %7, 5, 0, implicit $exec
    %22:vgpr_32 = DS_READ_U8_gfx9 %7, 6, 0, implicit $exec
    %23:vgpr_32 = DS_READ_U8_gfx9 killed %7, 7, 0, implicit $exec
    %25:vgpr_32 = V_LSHL_OR_B32_e64 killed %21, 8, killed %20, implicit $exec
    %26:vgpr_32 = V_LSHL_OR_B32_e64 killed %23, 8, killed %22, implicit $exec
    %28:vgpr_32 = V_LSHL_OR_B32_e64 killed %26, 16, killed %25, implicit $exec
    %29:vgpr_32 = V_LSHL_OR_B32_e64 killed %17, 8, killed %16, implicit $exec
    %30:vgpr_32 = V_LSHL_OR_B32_e64 killed %19, 8, killed %18, implicit $exec
    %31:vgpr_32 = V_LSHL_OR_B32_e64 killed %30, 16, killed %29, implicit $exec
    %61:vreg_64 = REG_SEQUENCE killed %31, %subreg.sub0, killed %28, %subreg.sub1
    %4:vreg_64 = COPY killed %61
    S_BRANCH %bb.1
  
  bb.4:
    %5:vreg_64 = PHI %1, %bb.1, %3, %bb.2
    SI_END_CF killed %2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %64:vgpr_32, %66:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %5.sub0, killed %9, 0, implicit $exec
    %65:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %5.sub1, killed %10, killed %66, 0, implicit $exec
    %53:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %64, implicit $exec
    %54:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %65, implicit $exec
    $sgpr0 = COPY killed %53
    $sgpr1 = COPY killed %54
    SI_RETURN_TO_EPILOG killed $sgpr0, killed $sgpr1
...
---



# Test: Verify instruction-specific distance analysis for linear control flow
# Focus on key instructions and their immediate distance patterns





