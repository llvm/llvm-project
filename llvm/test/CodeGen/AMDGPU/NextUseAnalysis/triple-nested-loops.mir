# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#                     bb.0.entry
#                         |
#                 bb.1.loop1.header<-------+
#                         |                |
#                 bb.2.loop2.header<---+   |
#                         |            |   |
#                     bb.3.loop3<--+   |   |
#                         |        |   |   |
#                         +--------+   |   |
#                         |            |   |
#                 bb.4.loop2.latch-----+   |
#                         |                |
#                 bb.5.loop1.latch---------+
#                         |
#                     bb.6.exit
#


# CHECK-LABEL: === NextUseAnalysis Results for test9 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %0:vgpr_32 = COPY killed $vgpr11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %52[ 40 ]
# CHECK: Vreg: %33[ 25 ]
# CHECK: Vreg: %28[ 24 ]
# CHECK: Vreg: %35[ 25 ]
# CHECK: Vreg: %30[ 24 ]
# CHECK: Vreg: %37[ 25 ]
# CHECK: Vreg: %50[ 40 ]
# CHECK: Instr: %1:vgpr_32 = COPY killed $vgpr10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 64 ]
# CHECK: Vreg: %26[ 23 ]
# CHECK: Vreg: %52[ 39 ]
# CHECK: Vreg: %33[ 24 ]
# CHECK: Vreg: %28[ 23 ]
# CHECK: Vreg: %35[ 24 ]
# CHECK: Vreg: %30[ 23 ]
# CHECK: Vreg: %37[ 24 ]
# CHECK: Vreg: %50[ 39 ]
# CHECK: Instr: %2:vgpr_32 = COPY killed $vgpr9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 63 ]
# CHECK: Vreg: %26[ 22 ]
# CHECK: Vreg: %52[ 38 ]
# CHECK: Vreg: %33[ 23 ]
# CHECK: Vreg: %28[ 22 ]
# CHECK: Vreg: %35[ 23 ]
# CHECK: Vreg: %30[ 22 ]
# CHECK: Vreg: %37[ 23 ]
# CHECK: Vreg: %1[ 54 ]
# CHECK: Vreg: %50[ 38 ]
# CHECK: Instr: %3:vgpr_32 = COPY killed $vgpr8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 62 ]
# CHECK: Vreg: %26[ 21 ]
# CHECK: Vreg: %52[ 37 ]
# CHECK: Vreg: %33[ 22 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %28[ 21 ]
# CHECK: Vreg: %35[ 22 ]
# CHECK: Vreg: %30[ 21 ]
# CHECK: Vreg: %37[ 22 ]
# CHECK: Vreg: %1[ 53 ]
# CHECK: Vreg: %50[ 37 ]
# CHECK: Instr: %4:vgpr_32 = COPY killed $vgpr7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 61 ]
# CHECK: Vreg: %26[ 20 ]
# CHECK: Vreg: %52[ 36 ]
# CHECK: Vreg: %33[ 21 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %28[ 20 ]
# CHECK: Vreg: %35[ 21 ]
# CHECK: Vreg: %30[ 20 ]
# CHECK: Vreg: %37[ 21 ]
# CHECK: Vreg: %1[ 52 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %50[ 36 ]
# CHECK: Instr: %5:vgpr_32 = COPY killed $vgpr6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 60 ]
# CHECK: Vreg: %26[ 19 ]
# CHECK: Vreg: %52[ 35 ]
# CHECK: Vreg: %33[ 20 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %28[ 19 ]
# CHECK: Vreg: %35[ 20 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %30[ 19 ]
# CHECK: Vreg: %37[ 20 ]
# CHECK: Vreg: %1[ 51 ]
# CHECK: Vreg: %3[ 7 ]
# CHECK: Vreg: %50[ 35 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 59 ]
# CHECK: Vreg: %26[ 18 ]
# CHECK: Vreg: %52[ 34 ]
# CHECK: Vreg: %33[ 19 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %28[ 18 ]
# CHECK: Vreg: %35[ 19 ]
# CHECK: Vreg: %4[ 7 ]
# CHECK: Vreg: %30[ 18 ]
# CHECK: Vreg: %37[ 19 ]
# CHECK: Vreg: %1[ 50 ]
# CHECK: Vreg: %3[ 6 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Vreg: %50[ 34 ]
# CHECK: Instr: %7:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 58 ]
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %52[ 33 ]
# CHECK: Vreg: %33[ 18 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %28[ 17 ]
# CHECK: Vreg: %35[ 18 ]
# CHECK: Vreg: %4[ 6 ]
# CHECK: Vreg: %30[ 17 ]
# CHECK: Vreg: %37[ 18 ]
# CHECK: Vreg: %6[ 7 ]
# CHECK: Vreg: %1[ 49 ]
# CHECK: Vreg: %3[ 5 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %50[ 33 ]
# CHECK: Instr: %8:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 57 ]
# CHECK: Vreg: %26[ 16 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %52[ 32 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %28[ 16 ]
# CHECK: Vreg: %35[ 17 ]
# CHECK: Vreg: %4[ 5 ]
# CHECK: Vreg: %30[ 16 ]
# CHECK: Vreg: %37[ 17 ]
# CHECK: Vreg: %6[ 6 ]
# CHECK: Vreg: %1[ 48 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Vreg: %5[ 5 ]
# CHECK: Vreg: %50[ 32 ]
# CHECK: Instr: %9:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 56 ]
# CHECK: Vreg: %26[ 15 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %52[ 31 ]
# CHECK: Vreg: %33[ 16 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %28[ 15 ]
# CHECK: Vreg: %35[ 16 ]
# CHECK: Vreg: %4[ 4 ]
# CHECK: Vreg: %30[ 15 ]
# CHECK: Vreg: %37[ 16 ]
# CHECK: Vreg: %6[ 5 ]
# CHECK: Vreg: %1[ 47 ]
# CHECK: Vreg: %8[ 6 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Vreg: %50[ 31 ]
# CHECK: Instr: %10:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 55 ]
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %52[ 30 ]
# CHECK: Vreg: %33[ 15 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %28[ 14 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %35[ 15 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %30[ 14 ]
# CHECK: Vreg: %37[ 15 ]
# CHECK: Vreg: %6[ 4 ]
# CHECK: Vreg: %1[ 46 ]
# CHECK: Vreg: %8[ 5 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %50[ 30 ]
# CHECK: Instr: %11:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 54 ]
# CHECK: Vreg: %26[ 13 ]
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %52[ 29 ]
# CHECK: Vreg: %33[ 14 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %28[ 13 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %35[ 14 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %30[ 13 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %1[ 45 ]
# CHECK: Vreg: %8[ 4 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %50[ 29 ]
# CHECK: Instr: %12:vreg_64 = REG_SEQUENCE killed %3, %subreg.sub0, killed %2, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 53 ]
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %52[ 28 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %28[ 12 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %35[ 13 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %30[ 12 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %37[ 13 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %1[ 44 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %50[ 28 ]
# CHECK: Instr: %13:vreg_64 = REG_SEQUENCE killed %5, %subreg.sub0, killed %4, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 52 ]
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %52[ 27 ]
# CHECK: Vreg: %33[ 12 ]
# CHECK: Vreg: %28[ 11 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %30[ 11 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %37[ 12 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %1[ 43 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %50[ 27 ]
# CHECK: Vreg: %12[ 37 ]
# CHECK: Instr: %14:vreg_64 = REG_SEQUENCE killed %7, %subreg.sub0, killed %6, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 51 ]
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %52[ 26 ]
# CHECK: Vreg: %33[ 11 ]
# CHECK: Vreg: %28[ 10 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %30[ 10 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %37[ 11 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %13[ 20 ]
# CHECK: Vreg: %1[ 42 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %50[ 26 ]
# CHECK: Vreg: %12[ 36 ]
# CHECK: Instr: %15:vreg_64 = REG_SEQUENCE killed %9, %subreg.sub0, killed %8, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 50 ]
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %52[ 25 ]
# CHECK: Vreg: %33[ 10 ]
# CHECK: Vreg: %14[ 27 ]
# CHECK: Vreg: %28[ 9 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %30[ 9 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %37[ 10 ]
# CHECK: Vreg: %13[ 19 ]
# CHECK: Vreg: %1[ 41 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %50[ 25 ]
# CHECK: Vreg: %12[ 35 ]
# CHECK: Instr: %16:vreg_64 = REG_SEQUENCE killed %11, %subreg.sub0, killed %10, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 49 ]
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %52[ 24 ]
# CHECK: Vreg: %33[ 9 ]
# CHECK: Vreg: %14[ 26 ]
# CHECK: Vreg: %28[ 8 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %30[ 8 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %13[ 18 ]
# CHECK: Vreg: %1[ 40 ]
# CHECK: Vreg: %15[ 10 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %50[ 24 ]
# CHECK: Vreg: %12[ 34 ]
# CHECK: Instr: %17:vgpr_32 = GLOBAL_LOAD_UBYTE %16, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 48 ]
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %52[ 23 ]
# CHECK: Vreg: %33[ 8 ]
# CHECK: Vreg: %14[ 25 ]
# CHECK: Vreg: %28[ 7 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %30[ 7 ]
# CHECK: Vreg: %37[ 8 ]
# CHECK: Vreg: %13[ 17 ]
# CHECK: Vreg: %1[ 39 ]
# CHECK: Vreg: %15[ 9 ]
# CHECK: Vreg: %50[ 23 ]
# CHECK: Vreg: %12[ 33 ]
# CHECK: Instr: %18:vgpr_32 = GLOBAL_LOAD_UBYTE %16, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 47 ]
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %52[ 22 ]
# CHECK: Vreg: %33[ 7 ]
# CHECK: Vreg: %14[ 24 ]
# CHECK: Vreg: %28[ 6 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %30[ 6 ]
# CHECK: Vreg: %37[ 7 ]
# CHECK: Vreg: %13[ 16 ]
# CHECK: Vreg: %1[ 38 ]
# CHECK: Vreg: %15[ 8 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ 22 ]
# CHECK: Vreg: %12[ 32 ]
# CHECK: Instr: %19:vgpr_32 = V_LSHL_OR_B32_e64 killed %18, 8, killed %17, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 46 ]
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %52[ 21 ]
# CHECK: Vreg: %33[ 6 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %28[ 5 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %30[ 5 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %13[ 15 ]
# CHECK: Vreg: %1[ 37 ]
# CHECK: Vreg: %15[ 7 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %50[ 21 ]
# CHECK: Vreg: %12[ 31 ]
# CHECK: Instr: %20:vgpr_32 = GLOBAL_LOAD_UBYTE %16, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 45 ]
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %52[ 20 ]
# CHECK: Vreg: %33[ 5 ]
# CHECK: Vreg: %14[ 22 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %30[ 4 ]
# CHECK: Vreg: %37[ 5 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %1[ 36 ]
# CHECK: Vreg: %15[ 6 ]
# CHECK: Vreg: %50[ 20 ]
# CHECK: Vreg: %12[ 30 ]
# CHECK: Vreg: %19[ 3 ]
# CHECK: Instr: %21:vgpr_32 = GLOBAL_LOAD_UBYTE killed %16, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 44 ]
# CHECK: Vreg: %26[ 3 ]
# CHECK: Vreg: %52[ 19 ]
# CHECK: Vreg: %33[ 4 ]
# CHECK: Vreg: %14[ 21 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 35 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %50[ 19 ]
# CHECK: Vreg: %12[ 29 ]
# CHECK: Vreg: %19[ 2 ]
# CHECK: Instr: %22:vgpr_32 = V_LSHL_OR_B32_e64 killed %21, 8, killed %20, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 43 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %52[ 18 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %14[ 20 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %28[ 2 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %30[ 2 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 34 ]
# CHECK: Vreg: %15[ 4 ]
# CHECK: Vreg: %50[ 18 ]
# CHECK: Vreg: %12[ 28 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: %23:vgpr_32 = V_LSHL_OR_B32_e64 killed %22, 16, killed %19, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 42 ]
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %52[ 17 ]
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %14[ 19 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %1[ 33 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %50[ 17 ]
# CHECK: Vreg: %12[ 27 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %24:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %25:sreg_32 = PHI %24, %bb.0, %26, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Instr: %27:sreg_32 = PHI %24, %bb.0, %28, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %25[ 49 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Instr: %29:vgpr_32 = PHI %23, %bb.0, %30, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %25[ 49 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %27[ 47 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Instr: %31:vgpr_32 = V_MOV_B32_e32 13, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ 50 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 48 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ 46 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ 50 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 48 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ 46 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %32:sreg_32 = PHI %24, %bb.1, %33, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ LoopTag+50 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ LoopTag+48 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ LoopTag+46 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: Instr: %34:sreg_32 = PHI %24, %bb.1, %35, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ LoopTag+50 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ LoopTag+48 ]
# CHECK: Vreg: %32[ 41 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ LoopTag+46 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: Instr: %36:vgpr_32 = PHI %31, %bb.1, %37, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %23[ LoopTag+50 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ LoopTag+48 ]
# CHECK: Vreg: %32[ 41 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ LoopTag+46 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %24[ 43 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: Instr: %38:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 0, 0, implicit $exec :: (load (s8) from %ir.p2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 39 ]
# CHECK: Vreg: %52[ 14 ]
# CHECK: Vreg: %14[ 16 ]
# CHECK: Vreg: %23[ LoopTag+49 ]
# CHECK: Vreg: %25[ LoopTag+47 ]
# CHECK: Vreg: %32[ 40 ]
# CHECK: Vreg: %13[ 8 ]
# CHECK: Vreg: %1[ 30 ]
# CHECK: Vreg: %27[ LoopTag+45 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %29[ 37 ]
# CHECK: Vreg: %36[ LoopTag*2+53 ]
# CHECK: Vreg: %24[ 42 ]
# CHECK: Vreg: %50[ 14 ]
# CHECK: Vreg: %31[ 42 ]
# CHECK: Vreg: %12[ 24 ]
# CHECK: Instr: %39:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 1, 0, implicit $exec :: (load (s8) from %ir.p2 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 38 ]
# CHECK: Vreg: %52[ 13 ]
# CHECK: Vreg: %14[ 15 ]
# CHECK: Vreg: %23[ LoopTag+48 ]
# CHECK: Vreg: %25[ LoopTag+46 ]
# CHECK: Vreg: %32[ 39 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %1[ 29 ]
# CHECK: Vreg: %27[ LoopTag+44 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %29[ 36 ]
# CHECK: Vreg: %36[ LoopTag*2+52 ]
# CHECK: Vreg: %24[ 41 ]
# CHECK: Vreg: %50[ 13 ]
# CHECK: Vreg: %31[ 41 ]
# CHECK: Vreg: %12[ 23 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %40:vgpr_32 = V_LSHL_OR_B32_e64 killed %39, 8, killed %38, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 37 ]
# CHECK: Vreg: %52[ 12 ]
# CHECK: Vreg: %14[ 14 ]
# CHECK: Vreg: %23[ LoopTag+47 ]
# CHECK: Vreg: %25[ LoopTag+45 ]
# CHECK: Vreg: %32[ 38 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %27[ LoopTag+43 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 35 ]
# CHECK: Vreg: %36[ LoopTag*2+51 ]
# CHECK: Vreg: %24[ 40 ]
# CHECK: Vreg: %50[ 12 ]
# CHECK: Vreg: %31[ 40 ]
# CHECK: Vreg: %12[ 22 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %41:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 2, 0, implicit $exec :: (load (s8) from %ir.p2 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 36 ]
# CHECK: Vreg: %52[ 11 ]
# CHECK: Vreg: %14[ 13 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %23[ LoopTag+46 ]
# CHECK: Vreg: %25[ LoopTag+44 ]
# CHECK: Vreg: %32[ 37 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %1[ 27 ]
# CHECK: Vreg: %27[ LoopTag+42 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %29[ 34 ]
# CHECK: Vreg: %36[ LoopTag*2+50 ]
# CHECK: Vreg: %24[ 39 ]
# CHECK: Vreg: %50[ 11 ]
# CHECK: Vreg: %31[ 39 ]
# CHECK: Vreg: %12[ 21 ]
# CHECK: Instr: %42:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 3, 0, implicit $exec :: (load (s8) from %ir.p2 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 35 ]
# CHECK: Vreg: %52[ 10 ]
# CHECK: Vreg: %14[ 12 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %23[ LoopTag+45 ]
# CHECK: Vreg: %25[ LoopTag+43 ]
# CHECK: Vreg: %32[ 36 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %1[ 26 ]
# CHECK: Vreg: %27[ LoopTag+41 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %29[ 33 ]
# CHECK: Vreg: %36[ LoopTag*2+49 ]
# CHECK: Vreg: %24[ 38 ]
# CHECK: Vreg: %50[ 10 ]
# CHECK: Vreg: %31[ 38 ]
# CHECK: Vreg: %12[ 20 ]
# CHECK: Instr: %43:vgpr_32 = V_LSHL_OR_B32_e64 killed %42, 8, killed %41, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 34 ]
# CHECK: Vreg: %52[ 9 ]
# CHECK: Vreg: %14[ 11 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ LoopTag+44 ]
# CHECK: Vreg: %25[ LoopTag+42 ]
# CHECK: Vreg: %32[ 35 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %1[ 25 ]
# CHECK: Vreg: %27[ LoopTag+40 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %15[ 38 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 32 ]
# CHECK: Vreg: %36[ LoopTag*2+48 ]
# CHECK: Vreg: %24[ 37 ]
# CHECK: Vreg: %50[ 9 ]
# CHECK: Vreg: %31[ 37 ]
# CHECK: Vreg: %12[ 19 ]
# CHECK: Instr: %44:vgpr_32 = V_LSHL_OR_B32_e64 killed %43, 16, killed %40, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 33 ]
# CHECK: Vreg: %52[ 8 ]
# CHECK: Vreg: %14[ 10 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %23[ LoopTag+43 ]
# CHECK: Vreg: %25[ LoopTag+41 ]
# CHECK: Vreg: %32[ 34 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %1[ 24 ]
# CHECK: Vreg: %27[ LoopTag+39 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %15[ 37 ]
# CHECK: Vreg: %29[ 31 ]
# CHECK: Vreg: %36[ LoopTag*2+47 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ 36 ]
# CHECK: Vreg: %50[ 8 ]
# CHECK: Vreg: %31[ 36 ]
# CHECK: Vreg: %12[ 18 ]
# CHECK: Instr: %45:vgpr_32 = V_ADD_U32_e64 %34, %44, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 32 ]
# CHECK: Vreg: %52[ 7 ]
# CHECK: Vreg: %14[ 9 ]
# CHECK: Vreg: %23[ LoopTag+42 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ LoopTag+40 ]
# CHECK: Vreg: %32[ 33 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %27[ LoopTag+38 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %15[ 36 ]
# CHECK: Vreg: %29[ 30 ]
# CHECK: Vreg: %36[ LoopTag*2+46 ]
# CHECK: Vreg: %24[ 35 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: Vreg: %31[ 35 ]
# CHECK: Vreg: %12[ 17 ]
# CHECK: Instr: GLOBAL_STORE_BYTE_D16_HI %13, %45, 2, 0, implicit $exec :: (store (s8) into %ir.p4 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 31 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %52[ 6 ]
# CHECK: Vreg: %14[ 8 ]
# CHECK: Vreg: %23[ LoopTag+41 ]
# CHECK: Vreg: %44[ LoopTag+36 ]
# CHECK: Vreg: %25[ LoopTag+39 ]
# CHECK: Vreg: %32[ 32 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %27[ LoopTag+37 ]
# CHECK: Vreg: %34[ 30 ]
# CHECK: Vreg: %15[ 35 ]
# CHECK: Vreg: %29[ 29 ]
# CHECK: Vreg: %36[ LoopTag*2+45 ]
# CHECK: Vreg: %24[ 34 ]
# CHECK: Vreg: %50[ 6 ]
# CHECK: Vreg: %31[ 34 ]
# CHECK: Vreg: %12[ 16 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %13, %45, 0, 0, implicit $exec :: (store (s8) into %ir.p4, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 30 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %52[ 5 ]
# CHECK: Vreg: %14[ 7 ]
# CHECK: Vreg: %23[ LoopTag+40 ]
# CHECK: Vreg: %44[ LoopTag+35 ]
# CHECK: Vreg: %25[ LoopTag+38 ]
# CHECK: Vreg: %32[ 31 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %27[ LoopTag+36 ]
# CHECK: Vreg: %34[ 29 ]
# CHECK: Vreg: %15[ 34 ]
# CHECK: Vreg: %29[ 28 ]
# CHECK: Vreg: %36[ LoopTag*2+44 ]
# CHECK: Vreg: %24[ 33 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %31[ 33 ]
# CHECK: Vreg: %12[ 15 ]
# CHECK: Instr: %46:vgpr_32 = V_LSHRREV_B32_e64 24, %45, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 29 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %52[ 4 ]
# CHECK: Vreg: %14[ 6 ]
# CHECK: Vreg: %23[ LoopTag+39 ]
# CHECK: Vreg: %44[ LoopTag+34 ]
# CHECK: Vreg: %25[ LoopTag+37 ]
# CHECK: Vreg: %32[ 30 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %27[ LoopTag+35 ]
# CHECK: Vreg: %34[ 28 ]
# CHECK: Vreg: %15[ 33 ]
# CHECK: Vreg: %29[ 27 ]
# CHECK: Vreg: %36[ LoopTag*2+43 ]
# CHECK: Vreg: %24[ 32 ]
# CHECK: Vreg: %50[ 4 ]
# CHECK: Vreg: %31[ 32 ]
# CHECK: Vreg: %12[ 14 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %13, killed %46, 3, 0, implicit $exec :: (store (s8) into %ir.p4 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 28 ]
# CHECK: Vreg: %45[ 1 ]
# CHECK: Vreg: %52[ 3 ]
# CHECK: Vreg: %14[ 5 ]
# CHECK: Vreg: %23[ LoopTag+38 ]
# CHECK: Vreg: %44[ LoopTag+33 ]
# CHECK: Vreg: %25[ LoopTag+36 ]
# CHECK: Vreg: %32[ 29 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %27[ LoopTag+34 ]
# CHECK: Vreg: %34[ 27 ]
# CHECK: Vreg: %15[ 32 ]
# CHECK: Vreg: %29[ 26 ]
# CHECK: Vreg: %36[ LoopTag*2+42 ]
# CHECK: Vreg: %24[ 31 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Vreg: %31[ 31 ]
# CHECK: Vreg: %12[ 13 ]
# CHECK: Instr: %47:vgpr_32 = V_LSHRREV_B32_e64 8, killed %45, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 27 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %52[ 2 ]
# CHECK: Vreg: %14[ 4 ]
# CHECK: Vreg: %23[ LoopTag+37 ]
# CHECK: Vreg: %44[ LoopTag+32 ]
# CHECK: Vreg: %25[ LoopTag+35 ]
# CHECK: Vreg: %32[ 28 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %27[ LoopTag+33 ]
# CHECK: Vreg: %34[ 26 ]
# CHECK: Vreg: %15[ 31 ]
# CHECK: Vreg: %29[ 25 ]
# CHECK: Vreg: %36[ LoopTag*2+41 ]
# CHECK: Vreg: %24[ 30 ]
# CHECK: Vreg: %50[ 2 ]
# CHECK: Vreg: %31[ 30 ]
# CHECK: Vreg: %12[ 12 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %13, killed %47, 1, 0, implicit $exec :: (store (s8) into %ir.p4 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %23[ LoopTag+36 ]
# CHECK: Vreg: %44[ LoopTag+31 ]
# CHECK: Vreg: %25[ LoopTag+34 ]
# CHECK: Vreg: %32[ 27 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %27[ LoopTag+32 ]
# CHECK: Vreg: %34[ 25 ]
# CHECK: Vreg: %15[ 30 ]
# CHECK: Vreg: %29[ 24 ]
# CHECK: Vreg: %36[ LoopTag*2+40 ]
# CHECK: Vreg: %24[ 29 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %31[ 29 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Instr: %48:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %23[ LoopTag+35 ]
# CHECK: Vreg: %44[ LoopTag+30 ]
# CHECK: Vreg: %25[ LoopTag+33 ]
# CHECK: Vreg: %32[ 26 ]
# CHECK: Vreg: %13[ 37 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %27[ LoopTag+31 ]
# CHECK: Vreg: %34[ 24 ]
# CHECK: Vreg: %15[ 29 ]
# CHECK: Vreg: %29[ 23 ]
# CHECK: Vreg: %36[ LoopTag*2+39 ]
# CHECK: Vreg: %24[ 28 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ 28 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %23[ LoopTag+35 ]
# CHECK: Vreg: %44[ LoopTag+30 ]
# CHECK: Vreg: %25[ LoopTag+33 ]
# CHECK: Vreg: %32[ 26 ]
# CHECK: Vreg: %13[ 37 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %27[ LoopTag+31 ]
# CHECK: Vreg: %34[ 24 ]
# CHECK: Vreg: %15[ 29 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ 23 ]
# CHECK: Vreg: %36[ LoopTag*2+39 ]
# CHECK: Vreg: %24[ 28 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ 28 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %49:sreg_32 = PHI %48, %bb.2, %50, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+25 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %23[ LoopTag*2+35 ]
# CHECK: Vreg: %44[ LoopTag*2+30 ]
# CHECK: Vreg: %25[ LoopTag*2+33 ]
# CHECK: Vreg: %32[ LoopTag+26 ]
# CHECK: Vreg: %13[ LoopTag+37 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %27[ LoopTag*2+31 ]
# CHECK: Vreg: %34[ LoopTag+24 ]
# CHECK: Vreg: %15[ LoopTag+29 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ LoopTag+23 ]
# CHECK: Vreg: %36[ LoopTag*3+39 ]
# CHECK: Vreg: %24[ LoopTag+28 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ LoopTag+28 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: Instr: %51:sreg_32 = PHI %48, %bb.2, %52, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+25 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %23[ LoopTag*2+35 ]
# CHECK: Vreg: %49[ 17 ]
# CHECK: Vreg: %44[ LoopTag*2+30 ]
# CHECK: Vreg: %25[ LoopTag*2+33 ]
# CHECK: Vreg: %32[ LoopTag+26 ]
# CHECK: Vreg: %13[ LoopTag+37 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %27[ LoopTag*2+31 ]
# CHECK: Vreg: %34[ LoopTag+24 ]
# CHECK: Vreg: %15[ LoopTag+29 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ LoopTag+23 ]
# CHECK: Vreg: %36[ LoopTag*3+39 ]
# CHECK: Vreg: %24[ LoopTag+28 ]
# CHECK: Vreg: %31[ LoopTag+28 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: Instr: %52:sreg_32 = S_ADD_I32 killed %51, 3, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+24 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %23[ LoopTag*2+34 ]
# CHECK: Vreg: %49[ 16 ]
# CHECK: Vreg: %44[ LoopTag*2+29 ]
# CHECK: Vreg: %25[ LoopTag*2+32 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %32[ LoopTag+25 ]
# CHECK: Vreg: %13[ LoopTag+36 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %27[ LoopTag*2+30 ]
# CHECK: Vreg: %34[ LoopTag+23 ]
# CHECK: Vreg: %15[ LoopTag+28 ]
# CHECK: Vreg: %48[ 19 ]
# CHECK: Vreg: %29[ LoopTag+22 ]
# CHECK: Vreg: %36[ LoopTag*3+38 ]
# CHECK: Vreg: %24[ LoopTag+27 ]
# CHECK: Vreg: %31[ LoopTag+27 ]
# CHECK: Vreg: %12[ 9 ]
# CHECK: Instr: %53:vgpr_32 = GLOBAL_LOAD_UBYTE %14, 0, 0, implicit $exec :: (load (s8) from %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+23 ]
# CHECK: Vreg: %52[ 7 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+33 ]
# CHECK: Vreg: %49[ 15 ]
# CHECK: Vreg: %44[ LoopTag*2+28 ]
# CHECK: Vreg: %25[ LoopTag*2+31 ]
# CHECK: Vreg: %32[ LoopTag+24 ]
# CHECK: Vreg: %13[ LoopTag+35 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %27[ LoopTag*2+29 ]
# CHECK: Vreg: %34[ LoopTag+22 ]
# CHECK: Vreg: %15[ LoopTag+27 ]
# CHECK: Vreg: %48[ 18 ]
# CHECK: Vreg: %29[ LoopTag+21 ]
# CHECK: Vreg: %36[ LoopTag*3+37 ]
# CHECK: Vreg: %24[ LoopTag+26 ]
# CHECK: Vreg: %31[ LoopTag+26 ]
# CHECK: Vreg: %12[ 8 ]
# CHECK: Instr: %54:vgpr_32 = GLOBAL_LOAD_UBYTE %14, 1, 0, implicit $exec :: (load (s8) from %ir.p3 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+22 ]
# CHECK: Vreg: %52[ 6 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+32 ]
# CHECK: Vreg: %49[ 14 ]
# CHECK: Vreg: %44[ LoopTag*2+27 ]
# CHECK: Vreg: %25[ LoopTag*2+30 ]
# CHECK: Vreg: %32[ LoopTag+23 ]
# CHECK: Vreg: %13[ LoopTag+34 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %27[ LoopTag*2+28 ]
# CHECK: Vreg: %53[ 1 ]
# CHECK: Vreg: %34[ LoopTag+21 ]
# CHECK: Vreg: %15[ LoopTag+26 ]
# CHECK: Vreg: %48[ 17 ]
# CHECK: Vreg: %29[ LoopTag+20 ]
# CHECK: Vreg: %36[ LoopTag*3+36 ]
# CHECK: Vreg: %24[ LoopTag+25 ]
# CHECK: Vreg: %31[ LoopTag+25 ]
# CHECK: Vreg: %12[ 7 ]
# CHECK: Instr: %55:vgpr_32 = V_LSHL_OR_B32_e64 killed %54, 8, killed %53, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+21 ]
# CHECK: Vreg: %52[ 5 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+31 ]
# CHECK: Vreg: %49[ 13 ]
# CHECK: Vreg: %44[ LoopTag*2+26 ]
# CHECK: Vreg: %25[ LoopTag*2+29 ]
# CHECK: Vreg: %32[ LoopTag+22 ]
# CHECK: Vreg: %13[ LoopTag+33 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %27[ LoopTag*2+27 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ LoopTag+20 ]
# CHECK: Vreg: %15[ LoopTag+25 ]
# CHECK: Vreg: %48[ 16 ]
# CHECK: Vreg: %29[ LoopTag+19 ]
# CHECK: Vreg: %36[ LoopTag*3+35 ]
# CHECK: Vreg: %24[ LoopTag+24 ]
# CHECK: Vreg: %31[ LoopTag+24 ]
# CHECK: Vreg: %12[ 6 ]
# CHECK: Instr: %56:vgpr_32 = GLOBAL_LOAD_UBYTE %14, 2, 0, implicit $exec :: (load (s8) from %ir.p3 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+20 ]
# CHECK: Vreg: %52[ 4 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+30 ]
# CHECK: Vreg: %49[ 12 ]
# CHECK: Vreg: %44[ LoopTag*2+25 ]
# CHECK: Vreg: %25[ LoopTag*2+28 ]
# CHECK: Vreg: %32[ LoopTag+21 ]
# CHECK: Vreg: %13[ LoopTag+32 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %27[ LoopTag*2+26 ]
# CHECK: Vreg: %34[ LoopTag+19 ]
# CHECK: Vreg: %15[ LoopTag+24 ]
# CHECK: Vreg: %48[ 15 ]
# CHECK: Vreg: %29[ LoopTag+18 ]
# CHECK: Vreg: %55[ 3 ]
# CHECK: Vreg: %36[ LoopTag*3+34 ]
# CHECK: Vreg: %24[ LoopTag+23 ]
# CHECK: Vreg: %31[ LoopTag+23 ]
# CHECK: Vreg: %12[ 5 ]
# CHECK: Instr: %57:vgpr_32 = GLOBAL_LOAD_UBYTE %14, 3, 0, implicit $exec :: (load (s8) from %ir.p3 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+19 ]
# CHECK: Vreg: %52[ 3 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+29 ]
# CHECK: Vreg: %49[ 11 ]
# CHECK: Vreg: %56[ 1 ]
# CHECK: Vreg: %44[ LoopTag*2+24 ]
# CHECK: Vreg: %25[ LoopTag*2+27 ]
# CHECK: Vreg: %32[ LoopTag+20 ]
# CHECK: Vreg: %13[ LoopTag+31 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %27[ LoopTag*2+25 ]
# CHECK: Vreg: %34[ LoopTag+18 ]
# CHECK: Vreg: %15[ LoopTag+23 ]
# CHECK: Vreg: %48[ 14 ]
# CHECK: Vreg: %29[ LoopTag+17 ]
# CHECK: Vreg: %55[ 2 ]
# CHECK: Vreg: %36[ LoopTag*3+33 ]
# CHECK: Vreg: %24[ LoopTag+22 ]
# CHECK: Vreg: %31[ LoopTag+22 ]
# CHECK: Vreg: %12[ 4 ]
# CHECK: Instr: %58:vgpr_32 = V_LSHL_OR_B32_e64 killed %57, 8, killed %56, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+18 ]
# CHECK: Vreg: %52[ 2 ]
# CHECK: Vreg: %14[ 15 ]
# CHECK: Vreg: %23[ LoopTag*2+28 ]
# CHECK: Vreg: %49[ 10 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %44[ LoopTag*2+23 ]
# CHECK: Vreg: %25[ LoopTag*2+26 ]
# CHECK: Vreg: %32[ LoopTag+19 ]
# CHECK: Vreg: %13[ LoopTag+30 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %27[ LoopTag*2+24 ]
# CHECK: Vreg: %34[ LoopTag+17 ]
# CHECK: Vreg: %15[ LoopTag+22 ]
# CHECK: Vreg: %48[ 13 ]
# CHECK: Vreg: %29[ LoopTag+16 ]
# CHECK: Vreg: %55[ 1 ]
# CHECK: Vreg: %36[ LoopTag*3+32 ]
# CHECK: Vreg: %24[ LoopTag+21 ]
# CHECK: Vreg: %31[ LoopTag+21 ]
# CHECK: Vreg: %12[ 3 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Instr: %59:vgpr_32 = V_LSHL_OR_B32_e64 killed %58, 16, killed %55, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+17 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %14[ 14 ]
# CHECK: Vreg: %23[ LoopTag*2+27 ]
# CHECK: Vreg: %49[ 9 ]
# CHECK: Vreg: %44[ LoopTag*2+22 ]
# CHECK: Vreg: %25[ LoopTag*2+25 ]
# CHECK: Vreg: %32[ LoopTag+18 ]
# CHECK: Vreg: %13[ LoopTag+29 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %27[ LoopTag*2+23 ]
# CHECK: Vreg: %34[ LoopTag+16 ]
# CHECK: Vreg: %15[ LoopTag+21 ]
# CHECK: Vreg: %48[ 12 ]
# CHECK: Vreg: %29[ LoopTag+15 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ LoopTag*3+31 ]
# CHECK: Vreg: %24[ LoopTag+20 ]
# CHECK: Vreg: %31[ LoopTag+20 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Instr: %60:vgpr_32 = V_ADD_U32_e64 %52, %59, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+16 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 13 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+26 ]
# CHECK: Vreg: %49[ 8 ]
# CHECK: Vreg: %44[ LoopTag*2+21 ]
# CHECK: Vreg: %25[ LoopTag*2+24 ]
# CHECK: Vreg: %32[ LoopTag+17 ]
# CHECK: Vreg: %13[ LoopTag+28 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %27[ LoopTag*2+22 ]
# CHECK: Vreg: %34[ LoopTag+15 ]
# CHECK: Vreg: %15[ LoopTag+20 ]
# CHECK: Vreg: %48[ 11 ]
# CHECK: Vreg: %29[ LoopTag+14 ]
# CHECK: Vreg: %36[ LoopTag*3+30 ]
# CHECK: Vreg: %24[ LoopTag+19 ]
# CHECK: Vreg: %31[ LoopTag+19 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: GLOBAL_STORE_BYTE_D16_HI %12, %60, 2, 0, implicit $exec :: (store (s8) into %ir.p5 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+15 ]
# CHECK: Vreg: %52[ 6 ]
# CHECK: Vreg: %14[ 12 ]
# CHECK: Vreg: %59[ LoopTag+12 ]
# CHECK: Vreg: %23[ LoopTag*2+25 ]
# CHECK: Vreg: %49[ 7 ]
# CHECK: Vreg: %44[ LoopTag*2+20 ]
# CHECK: Vreg: %25[ LoopTag*2+23 ]
# CHECK: Vreg: %32[ LoopTag+16 ]
# CHECK: Vreg: %13[ LoopTag+27 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %27[ LoopTag*2+21 ]
# CHECK: Vreg: %34[ LoopTag+14 ]
# CHECK: Vreg: %15[ LoopTag+19 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 10 ]
# CHECK: Vreg: %29[ LoopTag+13 ]
# CHECK: Vreg: %36[ LoopTag*3+29 ]
# CHECK: Vreg: %24[ LoopTag+18 ]
# CHECK: Vreg: %31[ LoopTag+18 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %12, %60, 0, 0, implicit $exec :: (store (s8) into %ir.p5, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+14 ]
# CHECK: Vreg: %52[ 5 ]
# CHECK: Vreg: %14[ 11 ]
# CHECK: Vreg: %59[ LoopTag+11 ]
# CHECK: Vreg: %23[ LoopTag*2+24 ]
# CHECK: Vreg: %49[ 6 ]
# CHECK: Vreg: %44[ LoopTag*2+19 ]
# CHECK: Vreg: %25[ LoopTag*2+22 ]
# CHECK: Vreg: %32[ LoopTag+15 ]
# CHECK: Vreg: %13[ LoopTag+26 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ LoopTag*2+20 ]
# CHECK: Vreg: %34[ LoopTag+13 ]
# CHECK: Vreg: %15[ LoopTag+18 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 9 ]
# CHECK: Vreg: %29[ LoopTag+12 ]
# CHECK: Vreg: %36[ LoopTag*3+28 ]
# CHECK: Vreg: %24[ LoopTag+17 ]
# CHECK: Vreg: %31[ LoopTag+17 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %61:vgpr_32 = V_LSHRREV_B32_e64 24, %60, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+13 ]
# CHECK: Vreg: %52[ 4 ]
# CHECK: Vreg: %14[ 10 ]
# CHECK: Vreg: %59[ LoopTag+10 ]
# CHECK: Vreg: %23[ LoopTag*2+23 ]
# CHECK: Vreg: %49[ 5 ]
# CHECK: Vreg: %44[ LoopTag*2+18 ]
# CHECK: Vreg: %25[ LoopTag*2+21 ]
# CHECK: Vreg: %32[ LoopTag+14 ]
# CHECK: Vreg: %13[ LoopTag+25 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %27[ LoopTag*2+19 ]
# CHECK: Vreg: %34[ LoopTag+12 ]
# CHECK: Vreg: %15[ LoopTag+17 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %29[ LoopTag+11 ]
# CHECK: Vreg: %36[ LoopTag*3+27 ]
# CHECK: Vreg: %24[ LoopTag+16 ]
# CHECK: Vreg: %31[ LoopTag+16 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %12, killed %61, 3, 0, implicit $exec :: (store (s8) into %ir.p5 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+12 ]
# CHECK: Vreg: %52[ 3 ]
# CHECK: Vreg: %14[ 9 ]
# CHECK: Vreg: %59[ LoopTag+9 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+22 ]
# CHECK: Vreg: %49[ 4 ]
# CHECK: Vreg: %44[ LoopTag*2+17 ]
# CHECK: Vreg: %25[ LoopTag*2+20 ]
# CHECK: Vreg: %32[ LoopTag+13 ]
# CHECK: Vreg: %13[ LoopTag+24 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %27[ LoopTag*2+18 ]
# CHECK: Vreg: %34[ LoopTag+11 ]
# CHECK: Vreg: %15[ LoopTag+16 ]
# CHECK: Vreg: %60[ 1 ]
# CHECK: Vreg: %48[ 7 ]
# CHECK: Vreg: %29[ LoopTag+10 ]
# CHECK: Vreg: %36[ LoopTag*3+26 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %31[ LoopTag+15 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %62:vgpr_32 = V_LSHRREV_B32_e64 8, killed %60, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+11 ]
# CHECK: Vreg: %52[ 2 ]
# CHECK: Vreg: %14[ 8 ]
# CHECK: Vreg: %59[ LoopTag+8 ]
# CHECK: Vreg: %23[ LoopTag*2+21 ]
# CHECK: Vreg: %49[ 3 ]
# CHECK: Vreg: %44[ LoopTag*2+16 ]
# CHECK: Vreg: %25[ LoopTag*2+19 ]
# CHECK: Vreg: %32[ LoopTag+12 ]
# CHECK: Vreg: %13[ LoopTag+23 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %27[ LoopTag*2+17 ]
# CHECK: Vreg: %34[ LoopTag+10 ]
# CHECK: Vreg: %15[ LoopTag+15 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 6 ]
# CHECK: Vreg: %29[ LoopTag+9 ]
# CHECK: Vreg: %36[ LoopTag*3+25 ]
# CHECK: Vreg: %24[ LoopTag+14 ]
# CHECK: Vreg: %31[ LoopTag+14 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %12, killed %62, 1, 0, implicit $exec :: (store (s8) into %ir.p5 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+10 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %14[ 7 ]
# CHECK: Vreg: %59[ LoopTag+7 ]
# CHECK: Vreg: %23[ LoopTag*2+20 ]
# CHECK: Vreg: %49[ 2 ]
# CHECK: Vreg: %44[ LoopTag*2+15 ]
# CHECK: Vreg: %25[ LoopTag*2+18 ]
# CHECK: Vreg: %32[ LoopTag+11 ]
# CHECK: Vreg: %13[ LoopTag+22 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ LoopTag*2+16 ]
# CHECK: Vreg: %34[ LoopTag+9 ]
# CHECK: Vreg: %15[ LoopTag+14 ]
# CHECK: Vreg: %48[ 5 ]
# CHECK: Vreg: %29[ LoopTag+8 ]
# CHECK: Vreg: %36[ LoopTag*3+24 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %24[ LoopTag+13 ]
# CHECK: Vreg: %31[ LoopTag+13 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %63:sreg_32 = V_CMP_GE_U32_e64 %52, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+9 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 6 ]
# CHECK: Vreg: %59[ LoopTag+6 ]
# CHECK: Vreg: %23[ LoopTag*2+19 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %44[ LoopTag*2+14 ]
# CHECK: Vreg: %25[ LoopTag*2+17 ]
# CHECK: Vreg: %32[ LoopTag+10 ]
# CHECK: Vreg: %13[ LoopTag+21 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %27[ LoopTag*2+15 ]
# CHECK: Vreg: %34[ LoopTag+8 ]
# CHECK: Vreg: %15[ LoopTag+13 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %29[ LoopTag+7 ]
# CHECK: Vreg: %36[ LoopTag*3+23 ]
# CHECK: Vreg: %24[ LoopTag+12 ]
# CHECK: Vreg: %31[ LoopTag+12 ]
# CHECK: Vreg: %12[ 14 ]
# CHECK: Instr: %50:sreg_32 = SI_IF_BREAK killed %63, killed %49, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+8 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %14[ 5 ]
# CHECK: Vreg: %59[ LoopTag+5 ]
# CHECK: Vreg: %23[ LoopTag*2+18 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %44[ LoopTag*2+13 ]
# CHECK: Vreg: %25[ LoopTag*2+16 ]
# CHECK: Vreg: %32[ LoopTag+9 ]
# CHECK: Vreg: %13[ LoopTag+20 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %27[ LoopTag*2+14 ]
# CHECK: Vreg: %34[ LoopTag+7 ]
# CHECK: Vreg: %15[ LoopTag+12 ]
# CHECK: Vreg: %48[ 3 ]
# CHECK: Vreg: %29[ LoopTag+6 ]
# CHECK: Vreg: %36[ LoopTag*3+22 ]
# CHECK: Vreg: %24[ LoopTag+11 ]
# CHECK: Vreg: %31[ LoopTag+11 ]
# CHECK: Vreg: %12[ 13 ]
# CHECK: Instr: %64:vgpr_32 = COPY %52, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+7 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 4 ]
# CHECK: Vreg: %59[ LoopTag+4 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %44[ LoopTag*2+12 ]
# CHECK: Vreg: %25[ LoopTag*2+15 ]
# CHECK: Vreg: %32[ LoopTag+8 ]
# CHECK: Vreg: %13[ LoopTag+19 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %27[ LoopTag*2+13 ]
# CHECK: Vreg: %34[ LoopTag+6 ]
# CHECK: Vreg: %15[ LoopTag+11 ]
# CHECK: Vreg: %48[ 2 ]
# CHECK: Vreg: %29[ LoopTag+5 ]
# CHECK: Vreg: %36[ LoopTag*3+21 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %31[ LoopTag+10 ]
# CHECK: Vreg: %12[ 12 ]
# CHECK: Instr: SI_LOOP %50, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+6 ]
# CHECK: Vreg: %64[ LoopTag+3 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %59[ LoopTag+3 ]
# CHECK: Vreg: %23[ LoopTag*2+16 ]
# CHECK: Vreg: %44[ LoopTag*2+11 ]
# CHECK: Vreg: %25[ LoopTag*2+14 ]
# CHECK: Vreg: %32[ LoopTag+7 ]
# CHECK: Vreg: %13[ LoopTag+18 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %27[ LoopTag*2+12 ]
# CHECK: Vreg: %34[ LoopTag+5 ]
# CHECK: Vreg: %15[ LoopTag+10 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %29[ LoopTag+4 ]
# CHECK: Vreg: %36[ LoopTag*3+20 ]
# CHECK: Vreg: %24[ LoopTag+9 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ LoopTag+9 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+5 ]
# CHECK: Vreg: %64[ LoopTag+2 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %59[ LoopTag+2 ]
# CHECK: Vreg: %23[ LoopTag*2+15 ]
# CHECK: Vreg: %44[ LoopTag*2+10 ]
# CHECK: Vreg: %25[ LoopTag*2+13 ]
# CHECK: Vreg: %32[ LoopTag+6 ]
# CHECK: Vreg: %13[ LoopTag+17 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %27[ LoopTag*2+11 ]
# CHECK: Vreg: %34[ LoopTag+4 ]
# CHECK: Vreg: %15[ LoopTag+9 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ LoopTag+3 ]
# CHECK: Vreg: %36[ LoopTag*3+19 ]
# CHECK: Vreg: %24[ LoopTag+8 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ LoopTag+8 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ LoopTag+5 ]
# CHECK: Vreg: %64[ LoopTag+2 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %59[ LoopTag+2 ]
# CHECK: Vreg: %23[ LoopTag*2+15 ]
# CHECK: Vreg: %44[ LoopTag*2+10 ]
# CHECK: Vreg: %25[ LoopTag*2+13 ]
# CHECK: Vreg: %32[ LoopTag+6 ]
# CHECK: Vreg: %13[ LoopTag+17 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %27[ LoopTag*2+11 ]
# CHECK: Vreg: %34[ LoopTag+4 ]
# CHECK: Vreg: %15[ LoopTag+9 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ LoopTag+3 ]
# CHECK: Vreg: %36[ LoopTag*3+19 ]
# CHECK: Vreg: %24[ LoopTag+8 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ LoopTag+8 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: SI_END_CF killed %50, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %52[ 22 ]
# CHECK: Vreg: %14[ 24 ]
# CHECK: Vreg: %59[ 1 ]
# CHECK: Vreg: %23[ LoopTag+14 ]
# CHECK: Vreg: %44[ LoopTag+9 ]
# CHECK: Vreg: %25[ LoopTag+12 ]
# CHECK: Vreg: %32[ 5 ]
# CHECK: Vreg: %13[ 16 ]
# CHECK: Vreg: %1[ 38 ]
# CHECK: Vreg: %27[ LoopTag+10 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %15[ 8 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ LoopTag*2+18 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %31[ 7 ]
# CHECK: Vreg: %12[ 32 ]
# CHECK: Instr: %65:vgpr_32 = V_ADD_U32_e64 killed %59, %64, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %52[ 21 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %23[ LoopTag+13 ]
# CHECK: Vreg: %44[ LoopTag+8 ]
# CHECK: Vreg: %25[ LoopTag+11 ]
# CHECK: Vreg: %32[ 4 ]
# CHECK: Vreg: %13[ 15 ]
# CHECK: Vreg: %1[ 37 ]
# CHECK: Vreg: %27[ LoopTag+9 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %15[ 7 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ LoopTag*2+17 ]
# CHECK: Vreg: %24[ 6 ]
# CHECK: Vreg: %50[ 21 ]
# CHECK: Vreg: %31[ 6 ]
# CHECK: Vreg: %12[ 31 ]
# CHECK: Instr: %37:vgpr_32 = V_MUL_LO_U32_e64 %29, %65, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %64[ LoopTag+7 ]
# CHECK: Vreg: %52[ 20 ]
# CHECK: Vreg: %14[ 22 ]
# CHECK: Vreg: %23[ LoopTag+12 ]
# CHECK: Vreg: %44[ LoopTag+7 ]
# CHECK: Vreg: %25[ LoopTag+10 ]
# CHECK: Vreg: %32[ 3 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %1[ 36 ]
# CHECK: Vreg: %27[ LoopTag+8 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %15[ 6 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ LoopTag*2+16 ]
# CHECK: Vreg: %24[ 5 ]
# CHECK: Vreg: %50[ 20 ]
# CHECK: Vreg: %31[ 5 ]
# CHECK: Vreg: %12[ 30 ]
# CHECK: Instr: %35:sreg_32 = S_ADD_I32 killed %34, 2, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %64[ LoopTag+6 ]
# CHECK: Vreg: %52[ 19 ]
# CHECK: Vreg: %14[ 21 ]
# CHECK: Vreg: %23[ LoopTag+11 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %44[ LoopTag+6 ]
# CHECK: Vreg: %25[ LoopTag+9 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %65[ LoopTag*2+15 ]
# CHECK: Vreg: %1[ 35 ]
# CHECK: Vreg: %27[ LoopTag+7 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %29[ 42 ]
# CHECK: Vreg: %36[ LoopTag*2+15 ]
# CHECK: Vreg: %24[ 4 ]
# CHECK: Vreg: %50[ 19 ]
# CHECK: Vreg: %31[ 4 ]
# CHECK: Vreg: %12[ 29 ]
# CHECK: Instr: %66:sreg_32 = V_CMP_GE_U32_e64 %35, %0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %64[ LoopTag+5 ]
# CHECK: Vreg: %52[ 18 ]
# CHECK: Vreg: %14[ 20 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ LoopTag+10 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %44[ LoopTag+5 ]
# CHECK: Vreg: %25[ LoopTag+8 ]
# CHECK: Vreg: %32[ 1 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %65[ LoopTag*2+14 ]
# CHECK: Vreg: %1[ 34 ]
# CHECK: Vreg: %27[ LoopTag+6 ]
# CHECK: Vreg: %15[ 4 ]
# CHECK: Vreg: %29[ 41 ]
# CHECK: Vreg: %36[ LoopTag*2+14 ]
# CHECK: Vreg: %24[ 3 ]
# CHECK: Vreg: %50[ 18 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Vreg: %12[ 28 ]
# CHECK: Instr: %33:sreg_32 = SI_IF_BREAK killed %66, killed %32, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 42 ]
# CHECK: Vreg: %64[ LoopTag+4 ]
# CHECK: Vreg: %52[ 17 ]
# CHECK: Vreg: %14[ 19 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %23[ LoopTag+9 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %44[ LoopTag+4 ]
# CHECK: Vreg: %25[ LoopTag+7 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %65[ LoopTag*2+13 ]
# CHECK: Vreg: %1[ 33 ]
# CHECK: Vreg: %27[ LoopTag+5 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %29[ 40 ]
# CHECK: Vreg: %36[ LoopTag*2+13 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Vreg: %50[ 17 ]
# CHECK: Vreg: %31[ 2 ]
# CHECK: Vreg: %12[ 27 ]
# CHECK: Instr: SI_LOOP %33, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %64[ LoopTag+3 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ LoopTag+8 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %44[ LoopTag+3 ]
# CHECK: Vreg: %25[ LoopTag+6 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %65[ LoopTag*2+12 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %27[ LoopTag+4 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %29[ 39 ]
# CHECK: Vreg: %36[ LoopTag*2+12 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %64[ LoopTag+2 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ LoopTag+7 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ LoopTag+2 ]
# CHECK: Vreg: %25[ LoopTag+5 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %65[ LoopTag*2+11 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ LoopTag+3 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %36[ LoopTag*2+11 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %64[ LoopTag+2 ]
# CHECK: Vreg: %52[ 15 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ LoopTag+7 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ LoopTag+2 ]
# CHECK: Vreg: %25[ LoopTag+5 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %65[ LoopTag*2+11 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %27[ LoopTag+3 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %29[ 38 ]
# CHECK: Vreg: %36[ LoopTag*2+11 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: SI_END_CF killed %33, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 47 ]
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %52[ 22 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %14[ 24 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %37[ 7 ]
# CHECK: Vreg: %44[ 1 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %13[ 16 ]
# CHECK: Vreg: %65[ LoopTag+10 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %15[ 8 ]
# CHECK: Vreg: %29[ LoopTag+10 ]
# CHECK: Vreg: %36[ LoopTag+10 ]
# CHECK: Vreg: %24[ 6 ]
# CHECK: Vreg: %50[ 22 ]
# CHECK: Vreg: %12[ 32 ]
# CHECK: Instr: %30:vgpr_32 = V_SUB_U32_e64 killed %44, killed %64, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 46 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %52[ 21 ]
# CHECK: Vreg: %33[ 6 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %13[ 15 ]
# CHECK: Vreg: %65[ LoopTag+9 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %15[ 7 ]
# CHECK: Vreg: %29[ LoopTag+9 ]
# CHECK: Vreg: %36[ LoopTag+9 ]
# CHECK: Vreg: %24[ 5 ]
# CHECK: Vreg: %50[ 21 ]
# CHECK: Vreg: %12[ 31 ]
# CHECK: Instr: %28:sreg_32 = S_ADD_I32 killed %27, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 45 ]
# CHECK: Vreg: %52[ 20 ]
# CHECK: Vreg: %33[ 5 ]
# CHECK: Vreg: %14[ 22 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %23[ 4 ]
# CHECK: Vreg: %30[ 4 ]
# CHECK: Vreg: %37[ 5 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %65[ LoopTag+8 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %15[ 6 ]
# CHECK: Vreg: %29[ LoopTag+8 ]
# CHECK: Vreg: %36[ LoopTag+8 ]
# CHECK: Vreg: %24[ 4 ]
# CHECK: Vreg: %50[ 20 ]
# CHECK: Vreg: %12[ 30 ]
# CHECK: Instr: %67:sreg_32 = V_CMP_GE_U32_e64 %28, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 44 ]
# CHECK: Vreg: %52[ 19 ]
# CHECK: Vreg: %33[ 4 ]
# CHECK: Vreg: %14[ 21 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %23[ 3 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %65[ LoopTag+7 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %29[ LoopTag+7 ]
# CHECK: Vreg: %36[ LoopTag+7 ]
# CHECK: Vreg: %24[ 3 ]
# CHECK: Vreg: %50[ 19 ]
# CHECK: Vreg: %12[ 29 ]
# CHECK: Instr: %26:sreg_32 = SI_IF_BREAK killed %67, killed %25, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 43 ]
# CHECK: Vreg: %52[ 18 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %14[ 20 ]
# CHECK: Vreg: %28[ 2 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %30[ 2 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %65[ LoopTag+6 ]
# CHECK: Vreg: %1[ 34 ]
# CHECK: Vreg: %15[ 4 ]
# CHECK: Vreg: %67[ 0 ]
# CHECK: Vreg: %29[ LoopTag+6 ]
# CHECK: Vreg: %36[ LoopTag+6 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Vreg: %50[ 18 ]
# CHECK: Vreg: %12[ 28 ]
# CHECK: Instr: SI_LOOP %26, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 42 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %52[ 17 ]
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %14[ 19 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %65[ LoopTag+5 ]
# CHECK: Vreg: %1[ 33 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %29[ LoopTag+5 ]
# CHECK: Vreg: %36[ LoopTag+5 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %50[ 17 ]
# CHECK: Vreg: %12[ 27 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %65[ LoopTag+4 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %29[ LoopTag+4 ]
# CHECK: Vreg: %36[ LoopTag+4 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %52[ 16 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %65[ LoopTag+4 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %29[ LoopTag+4 ]
# CHECK: Vreg: %36[ LoopTag+4 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: SI_END_CF killed %26, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %65[ 3 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Instr: %68:vgpr_32 = V_MAX_U32_e64 1, killed %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %65[ 2 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Instr: %69:vgpr_32 = V_ADD_U32_e64 killed %68, killed %23, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Instr: %70:vgpr_32 = V_ADD3_U32_e64 %36, killed %29, %65, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %69[ 3 ]
# CHECK: Instr: %71:vgpr_32 = V_ADD_U32_e64 killed %65, killed %37, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %69[ 2 ]
# CHECK: Instr: %72:vgpr_32 = V_ADD3_U32_e64 killed %71, killed %70, killed %36, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %69[ 1 ]
# CHECK: Instr: %73:vgpr_32 = V_ADD3_U32_e64 killed %69, killed %72, -1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %69[ 0 ]
# CHECK: Instr: %74:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %73, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %73[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %74
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %74[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i32 @test9(ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, ptr addrspace(1) %p4, ptr addrspace(1) %p5, i32 %TC1, i32 %TC2, i32 %TC3) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  br label %1
  1:
  %phi.inc1 = phi i32 [ 0, %0 ], [ %inc1, %5 ]
  %phi1 = phi i32 [ %ld1, %0 ], [ %sub, %5 ]
  %add1 = add i32 %ld1, %phi.inc1
  br label %2
  2:
  %phi.inc2 = phi i32 [ 0, %1 ], [ %inc2, %4 ]
  %phi2 = phi i32 [ 13, %1 ], [ %mul, %4 ]
  %ld2 = load i32, ptr addrspace(1) %p2, align 1
  %add2 = add i32 %ld2, %phi.inc2
  store i32 %add2, ptr addrspace(1) %p4, align 1
  br label %3
  3:
  %phi.inc3 = phi i32 [ 0, %2 ], [ %inc3, %3 ]
  %inc3 = add i32 %phi.inc3, 3
  %sub = sub i32 %ld2, %inc3
  %ld3 = load i32, ptr addrspace(1) %p3, align 1
  %add3 = add i32 %ld3, %inc3
  store i32 %add3, ptr addrspace(1) %p5, align 1
  %cond3 = icmp ult i32 %inc3, %TC1
  br i1 %cond3, label %3, label %4
  4:
  %mul = mul i32 %phi1, %add3
  %inc2 = add i32 %phi.inc2, 2
  %cond2 = icmp ult i32 %inc2, %TC2
  br i1 %cond2, label %2, label %5
  5:
  %add4 = add i32 %phi2, %phi1
  %add5 = add i32 %add3, %add4
  %inc1 = add i32 %phi.inc1, 1
  %cond1 = icmp ult i32 %inc1, %TC1
  br i1 %cond1, label %1, label %6
  6:
  %add6 = add i32 %add3, %mul
  %add7 = add i32 %add6, %add5
  %add8 = add i32 %add7, %phi2
  %add9 = add i32 %add8, %add1
  ret i32 %add9
  }
...

---
name:            test9
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6, $vgpr7, $vgpr8, $vgpr9, $vgpr10, $vgpr11
  
    %45:vgpr_32 = COPY killed $vgpr11
    %44:vgpr_32 = COPY killed $vgpr10
    %43:vgpr_32 = COPY killed $vgpr9
    %42:vgpr_32 = COPY killed $vgpr8
    %41:vgpr_32 = COPY killed $vgpr7
    %40:vgpr_32 = COPY killed $vgpr6
    %39:vgpr_32 = COPY killed $vgpr5
    %38:vgpr_32 = COPY killed $vgpr4
    %37:vgpr_32 = COPY killed $vgpr3
    %36:vgpr_32 = COPY killed $vgpr2
    %35:vgpr_32 = COPY killed $vgpr1
    %34:vgpr_32 = COPY killed $vgpr0
    %124:vreg_64 = REG_SEQUENCE killed %42, %subreg.sub0, killed %43, %subreg.sub1
    %123:vreg_64 = REG_SEQUENCE killed %40, %subreg.sub0, killed %41, %subreg.sub1
    %122:vreg_64 = REG_SEQUENCE killed %38, %subreg.sub0, killed %39, %subreg.sub1
    %121:vreg_64 = REG_SEQUENCE killed %36, %subreg.sub0, killed %37, %subreg.sub1
    %120:vreg_64 = REG_SEQUENCE killed %34, %subreg.sub0, killed %35, %subreg.sub1
    %56:vgpr_32 = GLOBAL_LOAD_UBYTE %120, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %58:vgpr_32 = GLOBAL_LOAD_UBYTE %120, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %61:vgpr_32 = V_LSHL_OR_B32_e64 killed %58, 8, killed %56, implicit $exec
    %62:vgpr_32 = GLOBAL_LOAD_UBYTE %120, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %64:vgpr_32 = GLOBAL_LOAD_UBYTE killed %120, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %66:vgpr_32 = V_LSHL_OR_B32_e64 killed %64, 8, killed %62, implicit $exec
    %0:vgpr_32 = V_LSHL_OR_B32_e64 killed %66, 16, killed %61, implicit $exec
    %50:sreg_32 = S_MOV_B32 0
  
  bb.1:
    successors: %bb.2(0x80000000)
  
    %1:sreg_32 = PHI %50, %bb.0, %28, %bb.5
    %2:sreg_32 = PHI %50, %bb.0, %27, %bb.5
    %3:vgpr_32 = PHI %0, %bb.0, %26, %bb.5
    %69:vgpr_32 = V_MOV_B32_e32 13, implicit $exec
  
  bb.2:
    successors: %bb.3(0x80000000)
  
    %4:sreg_32 = PHI %50, %bb.1, %19, %bb.4
    %5:sreg_32 = PHI %50, %bb.1, %18, %bb.4
    %6:vgpr_32 = PHI %69, %bb.1, %17, %bb.4
    %71:vgpr_32 = GLOBAL_LOAD_UBYTE %121, 0, 0, implicit $exec :: (load (s8) from %ir.p2, addrspace 1)
    %72:vgpr_32 = GLOBAL_LOAD_UBYTE %121, 1, 0, implicit $exec :: (load (s8) from %ir.p2 + 1, addrspace 1)
    %74:vgpr_32 = V_LSHL_OR_B32_e64 killed %72, 8, killed %71, implicit $exec
    %75:vgpr_32 = GLOBAL_LOAD_UBYTE %121, 2, 0, implicit $exec :: (load (s8) from %ir.p2 + 2, addrspace 1)
    %76:vgpr_32 = GLOBAL_LOAD_UBYTE %121, 3, 0, implicit $exec :: (load (s8) from %ir.p2 + 3, addrspace 1)
    %77:vgpr_32 = V_LSHL_OR_B32_e64 killed %76, 8, killed %75, implicit $exec
    %7:vgpr_32 = V_LSHL_OR_B32_e64 killed %77, 16, killed %74, implicit $exec
    %79:vgpr_32 = V_ADD_U32_e64 %5, %7, 0, implicit $exec
    GLOBAL_STORE_BYTE_D16_HI %123, %79, 2, 0, implicit $exec :: (store (s8) into %ir.p4 + 2, addrspace 1)
    GLOBAL_STORE_BYTE %123, %79, 0, 0, implicit $exec :: (store (s8) into %ir.p4, addrspace 1)
    %81:vgpr_32 = V_LSHRREV_B32_e64 24, %79, implicit $exec
    GLOBAL_STORE_BYTE %123, killed %81, 3, 0, implicit $exec :: (store (s8) into %ir.p4 + 3, addrspace 1)
    %82:vgpr_32 = V_LSHRREV_B32_e64 8, killed %79, implicit $exec
    GLOBAL_STORE_BYTE %123, killed %82, 1, 0, implicit $exec :: (store (s8) into %ir.p4 + 1, addrspace 1)
    %70:sreg_32 = S_MOV_B32 0
  
  bb.3:
    successors: %bb.4(0x04000000), %bb.3(0x7c000000)
  
    %8:sreg_32 = PHI %70, %bb.2, %12, %bb.3
    %9:sreg_32 = PHI %70, %bb.2, %10, %bb.3
    %10:sreg_32 = S_ADD_I32 killed %9, 3, implicit-def dead $scc
    %84:vgpr_32 = GLOBAL_LOAD_UBYTE %122, 0, 0, implicit $exec :: (load (s8) from %ir.p3, addrspace 1)
    %85:vgpr_32 = GLOBAL_LOAD_UBYTE %122, 1, 0, implicit $exec :: (load (s8) from %ir.p3 + 1, addrspace 1)
    %87:vgpr_32 = V_LSHL_OR_B32_e64 killed %85, 8, killed %84, implicit $exec
    %88:vgpr_32 = GLOBAL_LOAD_UBYTE %122, 2, 0, implicit $exec :: (load (s8) from %ir.p3 + 2, addrspace 1)
    %89:vgpr_32 = GLOBAL_LOAD_UBYTE %122, 3, 0, implicit $exec :: (load (s8) from %ir.p3 + 3, addrspace 1)
    %90:vgpr_32 = V_LSHL_OR_B32_e64 killed %89, 8, killed %88, implicit $exec
    %11:vgpr_32 = V_LSHL_OR_B32_e64 killed %90, 16, killed %87, implicit $exec
    %92:vgpr_32 = V_ADD_U32_e64 %10, %11, 0, implicit $exec
    GLOBAL_STORE_BYTE_D16_HI %124, %92, 2, 0, implicit $exec :: (store (s8) into %ir.p5 + 2, addrspace 1)
    GLOBAL_STORE_BYTE %124, %92, 0, 0, implicit $exec :: (store (s8) into %ir.p5, addrspace 1)
    %94:vgpr_32 = V_LSHRREV_B32_e64 24, %92, implicit $exec
    GLOBAL_STORE_BYTE %124, killed %94, 3, 0, implicit $exec :: (store (s8) into %ir.p5 + 3, addrspace 1)
    %95:vgpr_32 = V_LSHRREV_B32_e64 8, killed %92, implicit $exec
    GLOBAL_STORE_BYTE %124, killed %95, 1, 0, implicit $exec :: (store (s8) into %ir.p5 + 1, addrspace 1)
    %96:sreg_32 = V_CMP_GE_U32_e64 %10, %44, implicit $exec
    %12:sreg_32 = SI_IF_BREAK killed %96, killed %8, implicit-def dead $scc
    %125:vgpr_32 = COPY %10, implicit $exec
    SI_LOOP %12, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.4:
    successors: %bb.5(0x04000000), %bb.2(0x7c000000)
  
    SI_END_CF killed %12, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %16:vgpr_32 = V_ADD_U32_e64 killed %11, %125, 0, implicit $exec
    %17:vgpr_32 = V_MUL_LO_U32_e64 %3, %16, implicit $exec
    %18:sreg_32 = S_ADD_I32 killed %5, 2, implicit-def dead $scc
    %98:sreg_32 = V_CMP_GE_U32_e64 %18, %45, implicit $exec
    %19:sreg_32 = SI_IF_BREAK killed %98, killed %4, implicit-def dead $scc
    SI_LOOP %19, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.5
  
  bb.5:
    successors: %bb.6(0x04000000), %bb.1(0x7c000000)
  
    SI_END_CF killed %19, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %26:vgpr_32 = V_SUB_U32_e64 killed %7, killed %125, 0, implicit $exec
    %27:sreg_32 = S_ADD_I32 killed %2, 1, implicit-def dead $scc
    %100:sreg_32 = V_CMP_GE_U32_e64 %27, %44, implicit $exec
    %28:sreg_32 = SI_IF_BREAK killed %100, killed %1, implicit-def dead $scc
    SI_LOOP %28, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.6
  
  bb.6:
    SI_END_CF killed %28, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %102:vgpr_32 = V_MAX_U32_e64 1, killed %44, implicit $exec
    %103:vgpr_32 = V_ADD_U32_e64 killed %102, killed %0, 0, implicit $exec
    %104:vgpr_32 = V_ADD3_U32_e64 %6, killed %3, %16, implicit $exec
    %105:vgpr_32 = V_ADD_U32_e64 killed %16, killed %17, 0, implicit $exec
    %106:vgpr_32 = V_ADD3_U32_e64 killed %105, killed %104, killed %6, implicit $exec
    %108:vgpr_32 = V_ADD3_U32_e64 killed %103, killed %106, -1, implicit $exec
    %109:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %108, implicit $exec
    $sgpr0 = COPY killed %109
    SI_RETURN_TO_EPILOG killed $sgpr0
...
---
