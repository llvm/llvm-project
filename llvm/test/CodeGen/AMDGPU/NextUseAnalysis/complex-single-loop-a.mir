# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#            bb.0.entry
#                |
#        bb.1.loop1.header<----+
#         /      |             |
#  bb.5.bb2      |             |
#         \      |             |
#         bb.2.Flow------------+
#                |             |
#         bb.3.Flow2           |
#           /    |             |
#    bb.4.bb1    |             |
#           \    |             |
#       bb.6.loop1.latch2------+
#                |
#            bb.7.exit
#




# CHECK-LABEL: === NextUseAnalysis Results for test8 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %0:vgpr_32 = COPY killed $vgpr8
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Instr: %1:vgpr_32 = COPY killed $vgpr7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Instr: %2:vgpr_32 = COPY killed $vgpr6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 39 ]
# CHECK: Vreg: %1[ 33 ]
# CHECK: Instr: %3:vgpr_32 = COPY killed $vgpr5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 38 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Instr: %4:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 37 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %3[ 5 ]
# CHECK: Instr: %5:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 36 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %4[ 4 ]
# CHECK: Vreg: %1[ 30 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 35 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %1[ 29 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Instr: %7:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 34 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Instr: %8:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 33 ]
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %1[ 27 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Instr: %9:vreg_64 = REG_SEQUENCE killed %4, %subreg.sub0, killed %3, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 32 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %1[ 26 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Instr: %10:vreg_64 = REG_SEQUENCE killed %6, %subreg.sub0, killed %5, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 31 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %9[ 22 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %1[ 25 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Instr: %11:vreg_64 = REG_SEQUENCE killed %8, %subreg.sub0, killed %7, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 30 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 21 ]
# CHECK: Vreg: %1[ 24 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 19 ]
# CHECK: Instr: %12:vgpr_32 = V_AND_B32_e64 1, killed %2, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 29 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 20 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %10[ 18 ]
# CHECK: Instr: %13:sreg_32 = V_CMP_NE_U32_e64 1, killed %12, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 28 ]
# CHECK: Vreg: %9[ 19 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %10[ 17 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %14:vgpr_32 = GLOBAL_LOAD_UBYTE %11, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 27 ]
# CHECK: Vreg: %9[ 18 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Instr: %15:vgpr_32 = GLOBAL_LOAD_UBYTE %11, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %9[ 17 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Instr: %16:vgpr_32 = V_LSHL_OR_B32_e64 killed %15, 8, killed %14, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Instr: %17:vgpr_32 = GLOBAL_LOAD_UBYTE %11, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 24 ]
# CHECK: Vreg: %9[ 15 ]
# CHECK: Vreg: %16[ 3 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Instr: %18:vgpr_32 = GLOBAL_LOAD_UBYTE %11, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %16[ 2 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Instr: %19:vgpr_32 = V_LSHL_OR_B32_e64 killed %18, 8, killed %17, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 22 ]
# CHECK: Vreg: %9[ 13 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 21 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Instr: %20:vgpr_32 = V_LSHL_OR_B32_e64 killed %19, 16, killed %16, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %11[ 20 ]
# CHECK: Vreg: %13[ 8 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %21:vgpr_32 = V_ADD_U32_e64 500, %20, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 20 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %11[ 19 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Instr: %22:vgpr_32 = V_MOV_B32_e32 7, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %21[ 15 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %11[ 18 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %20[ 9 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Instr: %23:vgpr_32 = V_MOV_B32_e32 10, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %21[ 14 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %11[ 17 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %20[ 8 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Instr: %24:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %20[ 7 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Instr: %25:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %26:sreg_32 = PHI undef %27:sreg_32, %bb.0, %28, %bb.2, undef %29:sreg_32, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %30:sreg_32 = PHI undef %31:sreg_32, %bb.0, %32, %bb.2, undef %33:sreg_32, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %34:sreg_32 = PHI %24, %bb.0, %34, %bb.2, %35, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %36:sreg_32 = PHI %24, %bb.0, %37, %bb.2, %24, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %38:vgpr_32 = PHI %25, %bb.0, %39, %bb.2, %25, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Instr: %40:vgpr_32 = PHI %23, %bb.0, %41, %bb.2, %42, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Instr: %43:vgpr_32 = PHI %22, %bb.0, %44, %bb.2, %45, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Instr: %46:sreg_32 = S_OR_B32 killed %30, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %20[ 5 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %43[ LoopTag+21 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Instr: %47:sreg_32 = S_OR_B32 killed %26, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %20[ 4 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %46[ 2 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %43[ LoopTag+20 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Instr: %48:sreg_32 = SI_IF %13, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %47[ 1 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %20[ 3 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %43[ LoopTag+19 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %28:sreg_32 = PHI %47, %bb.1, %49, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %32:sreg_32 = PHI %46, %bb.1, %50, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %51:vgpr_32 = PHI undef %52:vgpr_32, %bb.1, %53, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %54:vgpr_32 = PHI undef %52:vgpr_32, %bb.1, %55, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %51[ 7 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %56:vgpr_32 = PHI undef %52:vgpr_32, %bb.1, %57, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %54[ 7 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %51[ 7 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %44:vgpr_32 = PHI undef %52:vgpr_32, %bb.1, %58, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %54[ 7 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %56[ 7 ]
# CHECK: Vreg: %51[ 7 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %41:vgpr_32 = PHI undef %52:vgpr_32, %bb.1, %59, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %54[ 7 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %56[ 7 ]
# CHECK: Vreg: %44[ 4 ]
# CHECK: Vreg: %51[ 7 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: %39:vgpr_32 = PHI undef %52:vgpr_32, %bb.1, %60, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %54[ 7 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %56[ 7 ]
# CHECK: Vreg: %44[ 4 ]
# CHECK: Vreg: %51[ 7 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 4 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Instr: SI_END_CF killed %48, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %54[ 6 ]
# CHECK: Vreg: %11[ 10 ]
# CHECK: Vreg: %56[ 6 ]
# CHECK: Vreg: %44[ 3 ]
# CHECK: Vreg: %51[ 6 ]
# CHECK: Vreg: %32[ 1 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %20[ 9 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %41[ 3 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %43[ LoopTag+17 ]
# CHECK: Vreg: %38[ LoopTag+19 ]
# CHECK: Instr: %37:sreg_32 = SI_IF_BREAK %32, killed %36, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %28[ 2 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %54[ 5 ]
# CHECK: Vreg: %11[ 9 ]
# CHECK: Vreg: %56[ 5 ]
# CHECK: Vreg: %44[ 2 ]
# CHECK: Vreg: %51[ 5 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %20[ 8 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %43[ LoopTag+16 ]
# CHECK: Vreg: %38[ LoopTag+18 ]
# CHECK: Instr: SI_LOOP %37, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %54[ 4 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %56[ 4 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 1 ]
# CHECK: Vreg: %51[ 4 ]
# CHECK: Vreg: %32[ 1 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %20[ 7 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %43[ LoopTag+15 ]
# CHECK: Vreg: %38[ LoopTag+17 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %54[ 3 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %56[ 3 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %51[ 3 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %43[ LoopTag+14 ]
# CHECK: Vreg: %38[ LoopTag+16 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %54[ 3 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %56[ 3 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %51[ 3 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %43[ LoopTag+14 ]
# CHECK: Vreg: %38[ LoopTag+16 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: SI_END_CF killed %37, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %54[ 2 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %56[ 2 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %51[ 2 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %20[ 17 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Vreg: %43[ LoopTag+13 ]
# CHECK: Vreg: %38[ LoopTag+15 ]
# CHECK: Instr: %61:sreg_32 = SI_IF killed %28, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %54[ 1 ]
# CHECK: Vreg: %11[ 5 ]
# CHECK: Vreg: %56[ 1 ]
# CHECK: Vreg: %51[ 1 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %20[ 16 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Vreg: %43[ LoopTag+12 ]
# CHECK: Vreg: %38[ LoopTag+14 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: GLOBAL_STORE_DWORD %9, %21, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %61[ 4 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %13[ 15 ]
# CHECK: Vreg: %20[ 18 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %10[ 17 ]
# CHECK: Vreg: %43[ LoopTag+14 ]
# CHECK: Vreg: %38[ LoopTag+16 ]
# CHECK: Instr: %62:vgpr_32 = V_MOV_B32_e32 100, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %9[ 18 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %20[ 17 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Vreg: %43[ LoopTag+13 ]
# CHECK: Vreg: %38[ LoopTag+15 ]
# CHECK: Instr: %63:vgpr_32 = V_MOV_B32_e32 1000, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9[ 17 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 5 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %20[ 16 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %43[ LoopTag+12 ]
# CHECK: Vreg: %38[ LoopTag+14 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %57:vgpr_32 = GLOBAL_LOAD_DWORD %10, 0, 0, implicit $exec :: (load (s32) from %ir.p2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 21 ]
# CHECK: Vreg: %47[ 11 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %11[ 24 ]
# CHECK: Vreg: %13[ 20 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %46[ 8 ]
# CHECK: Vreg: %34[ 17 ]
# CHECK: Vreg: %48[ 14 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %36[ 15 ]
# CHECK: Vreg: %43[ LoopTag+31 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Instr: %53:vgpr_32 = V_MUL_LO_U32_e64 %57, %20, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 24 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 20 ]
# CHECK: Vreg: %47[ 10 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %11[ 23 ]
# CHECK: Vreg: %13[ 19 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %46[ 7 ]
# CHECK: Vreg: %34[ 16 ]
# CHECK: Vreg: %48[ 13 ]
# CHECK: Vreg: %10[ 21 ]
# CHECK: Vreg: %36[ 14 ]
# CHECK: Vreg: %43[ LoopTag+30 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %9, %53, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 19 ]
# CHECK: Vreg: %47[ 9 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %11[ 22 ]
# CHECK: Vreg: %13[ 18 ]
# CHECK: Vreg: %20[ 21 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %46[ 6 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 15 ]
# CHECK: Vreg: %48[ 12 ]
# CHECK: Vreg: %10[ 20 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %43[ LoopTag+29 ]
# CHECK: Vreg: %57[ 11 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: %55:vgpr_32 = V_SUB_U32_e64 %53, %40, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 22 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 18 ]
# CHECK: Vreg: %47[ 8 ]
# CHECK: Vreg: %9[ 18 ]
# CHECK: Vreg: %11[ 21 ]
# CHECK: Vreg: %13[ 17 ]
# CHECK: Vreg: %20[ 20 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %46[ 5 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 14 ]
# CHECK: Vreg: %48[ 11 ]
# CHECK: Vreg: %10[ 19 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %43[ LoopTag+28 ]
# CHECK: Vreg: %57[ 10 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %60:vgpr_32 = V_ADD_U32_e64 1, %38, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %40[ 18 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %47[ 7 ]
# CHECK: Vreg: %9[ 17 ]
# CHECK: Vreg: %11[ 20 ]
# CHECK: Vreg: %13[ 16 ]
# CHECK: Vreg: %20[ 19 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %46[ 4 ]
# CHECK: Vreg: %53[ 9 ]
# CHECK: Vreg: %34[ 13 ]
# CHECK: Vreg: %48[ 10 ]
# CHECK: Vreg: %10[ 18 ]
# CHECK: Vreg: %55[ 9 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %43[ LoopTag+27 ]
# CHECK: Vreg: %57[ 9 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %64:sreg_32 = V_CMP_GE_U32_e64 %60, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 20 ]
# CHECK: Vreg: %40[ 17 ]
# CHECK: Vreg: %21[ 16 ]
# CHECK: Vreg: %47[ 6 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %11[ 19 ]
# CHECK: Vreg: %13[ 15 ]
# CHECK: Vreg: %20[ 18 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %46[ 3 ]
# CHECK: Vreg: %53[ 8 ]
# CHECK: Vreg: %34[ 12 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 9 ]
# CHECK: Vreg: %10[ 17 ]
# CHECK: Vreg: %55[ 8 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %43[ LoopTag+26 ]
# CHECK: Vreg: %57[ 8 ]
# CHECK: Vreg: %38[ LoopTag+28 ]
# CHECK: Instr: %59:vgpr_32 = V_MOV_B32_e32 52, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %64[ 3 ]
# CHECK: Vreg: %40[ 16 ]
# CHECK: Vreg: %21[ 15 ]
# CHECK: Vreg: %47[ 5 ]
# CHECK: Vreg: %9[ 15 ]
# CHECK: Vreg: %11[ 18 ]
# CHECK: Vreg: %13[ 14 ]
# CHECK: Vreg: %20[ 17 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %46[ 2 ]
# CHECK: Vreg: %53[ 7 ]
# CHECK: Vreg: %34[ 11 ]
# CHECK: Vreg: %60[ 7 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Vreg: %55[ 7 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %43[ LoopTag+25 ]
# CHECK: Vreg: %57[ 7 ]
# CHECK: Vreg: %38[ LoopTag+27 ]
# CHECK: Instr: %58:vgpr_32 = V_MOV_B32_e32 13, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %64[ 2 ]
# CHECK: Vreg: %59[ 6 ]
# CHECK: Vreg: %40[ 15 ]
# CHECK: Vreg: %21[ 14 ]
# CHECK: Vreg: %47[ 4 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %11[ 17 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %20[ 16 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %53[ 6 ]
# CHECK: Vreg: %34[ 10 ]
# CHECK: Vreg: %60[ 6 ]
# CHECK: Vreg: %48[ 7 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Vreg: %55[ 6 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %43[ LoopTag+24 ]
# CHECK: Vreg: %57[ 6 ]
# CHECK: Vreg: %38[ LoopTag+26 ]
# CHECK: Instr: %65:sreg_32 = S_ANDN2_B32 killed %46, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %59[ 5 ]
# CHECK: Vreg: %40[ 14 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %47[ 3 ]
# CHECK: Vreg: %9[ 13 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %58[ 5 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %53[ 5 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %48[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %55[ 5 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %43[ LoopTag+23 ]
# CHECK: Vreg: %57[ 5 ]
# CHECK: Vreg: %38[ LoopTag+25 ]
# CHECK: Instr: %66:sreg_32 = S_AND_B32 killed %64, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %59[ 4 ]
# CHECK: Vreg: %40[ 13 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %47[ 2 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %58[ 4 ]
# CHECK: Vreg: %20[ 14 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Vreg: %53[ 4 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %60[ 4 ]
# CHECK: Vreg: %48[ 5 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Vreg: %55[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %43[ LoopTag+22 ]
# CHECK: Vreg: %57[ 4 ]
# CHECK: Vreg: %38[ LoopTag+24 ]
# CHECK: Instr: %50:sreg_32 = S_OR_B32 killed %65, killed %66, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %59[ 3 ]
# CHECK: Vreg: %40[ 12 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %47[ 1 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %58[ 3 ]
# CHECK: Vreg: %20[ 13 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %53[ 3 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %60[ 3 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %55[ 3 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %43[ LoopTag+21 ]
# CHECK: Vreg: %57[ 3 ]
# CHECK: Vreg: %38[ LoopTag+23 ]
# CHECK: Instr: %67:sreg_32 = S_ANDN2_B32 killed %47, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %59[ 2 ]
# CHECK: Vreg: %40[ 11 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %58[ 2 ]
# CHECK: Vreg: %20[ 12 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %53[ 2 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %60[ 2 ]
# CHECK: Vreg: %48[ 3 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %55[ 2 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %43[ LoopTag+20 ]
# CHECK: Vreg: %50[ 2 ]
# CHECK: Vreg: %57[ 2 ]
# CHECK: Vreg: %38[ LoopTag+22 ]
# CHECK: Instr: %49:sreg_32 = COPY killed %67
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %59[ 1 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %13[ 8 ]
# CHECK: Vreg: %58[ 1 ]
# CHECK: Vreg: %20[ 11 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %53[ 1 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %60[ 1 ]
# CHECK: Vreg: %67[ 0 ]
# CHECK: Vreg: %48[ 2 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %55[ 1 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %43[ LoopTag+19 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %57[ 1 ]
# CHECK: Vreg: %38[ LoopTag+21 ]
# CHECK: Instr: S_BRANCH %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %43[ LoopTag+18 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ LoopTag+20 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %68:vgpr_32 = PHI %56, %bb.3, %63, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: Instr: %69:vgpr_32 = PHI %54, %bb.3, %62, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %68[ 3 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: Instr: %70:vgpr_32 = PHI %51, %bb.3, %21, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %68[ 3 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %43[ LoopTag+11 ]
# CHECK: Vreg: %69[ LoopTag+12 ]
# CHECK: Vreg: %38[ LoopTag+13 ]
# CHECK: Instr: SI_END_CF killed %61, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 20 ]
# CHECK: Vreg: %9[ 15 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %68[ 2 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %70[ LoopTag+12 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %20[ 14 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Vreg: %43[ LoopTag+10 ]
# CHECK: Vreg: %69[ LoopTag+11 ]
# CHECK: Vreg: %38[ LoopTag+12 ]
# CHECK: Instr: %42:vgpr_32 = V_ADD_U32_e64 1, killed %40, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 19 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %68[ 1 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %70[ LoopTag+11 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %20[ 13 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %43[ LoopTag+9 ]
# CHECK: Vreg: %69[ LoopTag+10 ]
# CHECK: Vreg: %38[ LoopTag+11 ]
# CHECK: Instr: %71:vgpr_32 = V_ADD_U32_e64 %68, %42, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %21[ 18 ]
# CHECK: Vreg: %9[ 13 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %70[ LoopTag+10 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %20[ 12 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %43[ LoopTag+8 ]
# CHECK: Vreg: %69[ LoopTag+9 ]
# CHECK: Vreg: %38[ LoopTag+10 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %11, %71, 0, 0, implicit $exec :: (store (s32) into %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %42[ 1 ]
# CHECK: Vreg: %68[ LoopTag+8 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %70[ LoopTag+9 ]
# CHECK: Vreg: %13[ 8 ]
# CHECK: Vreg: %20[ 11 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %43[ LoopTag+7 ]
# CHECK: Vreg: %69[ LoopTag+8 ]
# CHECK: Vreg: %38[ LoopTag+9 ]
# CHECK: Instr: %72:sreg_32 = V_CMP_GE_U32_e64 %42, %0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %71[ LoopTag+6 ]
# CHECK: Vreg: %21[ 16 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %68[ LoopTag+7 ]
# CHECK: Vreg: %11[ 19 ]
# CHECK: Vreg: %70[ LoopTag+8 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %43[ LoopTag+6 ]
# CHECK: Vreg: %69[ LoopTag+7 ]
# CHECK: Vreg: %38[ LoopTag+8 ]
# CHECK: Instr: %35:sreg_32 = SI_IF_BREAK killed %72, killed %34, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %71[ LoopTag+5 ]
# CHECK: Vreg: %21[ 15 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %42[ 3 ]
# CHECK: Vreg: %68[ LoopTag+6 ]
# CHECK: Vreg: %11[ 18 ]
# CHECK: Vreg: %70[ LoopTag+7 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %20[ 9 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %43[ LoopTag+5 ]
# CHECK: Vreg: %69[ LoopTag+6 ]
# CHECK: Vreg: %38[ LoopTag+7 ]
# CHECK: Instr: %45:vgpr_32 = V_MOV_B32_e32 13, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %71[ LoopTag+4 ]
# CHECK: Vreg: %21[ 14 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %42[ 2 ]
# CHECK: Vreg: %68[ LoopTag+5 ]
# CHECK: Vreg: %11[ 17 ]
# CHECK: Vreg: %70[ LoopTag+6 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %20[ 8 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %43[ LoopTag+4 ]
# CHECK: Vreg: %69[ LoopTag+5 ]
# CHECK: Vreg: %38[ LoopTag+6 ]
# CHECK: Instr: SI_LOOP %35, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %45[ 1 ]
# CHECK: Vreg: %71[ LoopTag+3 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 1 ]
# CHECK: Vreg: %68[ LoopTag+4 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %70[ LoopTag+5 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %20[ 7 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %43[ LoopTag+3 ]
# CHECK: Vreg: %69[ LoopTag+4 ]
# CHECK: Vreg: %38[ LoopTag+5 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %71[ LoopTag+2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %68[ LoopTag+3 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %70[ LoopTag+4 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %43[ LoopTag+2 ]
# CHECK: Vreg: %69[ LoopTag+3 ]
# CHECK: Vreg: %38[ LoopTag+4 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %71[ LoopTag+2 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %68[ LoopTag+3 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %70[ LoopTag+4 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %43[ LoopTag+2 ]
# CHECK: Vreg: %69[ LoopTag+3 ]
# CHECK: Vreg: %38[ LoopTag+4 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: SI_END_CF killed %35, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %71[ 1 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %68[ 2 ]
# CHECK: Vreg: %70[ 3 ]
# CHECK: Vreg: %43[ 1 ]
# CHECK: Vreg: %69[ 2 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: %73:vgpr_32 = V_ADD3_U32_e64 killed %71, killed %43, %71, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %68[ 1 ]
# CHECK: Vreg: %70[ 2 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %69[ 1 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: %74:vgpr_32 = V_ADD3_U32_e64 killed %73, killed %68, killed %69, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %69[ 0 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %75:vgpr_32 = V_ADD3_U32_e64 killed %74, killed %70, killed %38, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %76:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %75, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %75[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %76
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %76[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i32 @test8(ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, i1 %cond, i32 %TC1, i32 %TC2) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  %add1 = add i32 %ld1, 100
  br label %1
  1:
  %phi.inc1 = phi i32 [ 0, %0 ], [ %inc1, %4 ], [ 0, %5 ]
  %phi.inc2 = phi i32 [ 10, %0 ], [ 52, %4 ], [ %inc2, %5 ]
  %phi1 = phi i32 [ 7, %0 ], [ 13, %4 ], [ 13, %5 ]
  br i1 %cond, label %2, label %3
  2:
  %add2 = add i32 %ld1, 500
  store i32 %add2, ptr addrspace(1) %p3
  br label %5
  3:
  %ld2 = load i32, ptr addrspace(1) %p2, align 4
  %mul = mul i32 %ld2, %ld1
  store i32 %mul, ptr addrspace(1) %p3
  br label %4
  4:
  %sub = sub i32 %mul, %phi.inc2
  %inc1 = add i32 %phi.inc1, 1
  %cond1 = icmp ult i32 %inc1, %TC1
  br i1 %cond1, label %1, label %5
  5:
  %phi2 = phi i32 [ 1000, %2 ], [ %ld2, %4 ]
  %phi3 = phi i32 [ 100, %2 ], [ %sub, %4 ]
  %phi4 = phi i32 [ %add2, %2 ], [ %mul, %4 ]
  %inc2 = add i32 %phi.inc2, 1
  %add3 = add i32 %phi2, %inc2
  store i32 %add3, ptr addrspace(1) %p1
  %add4 = add i32 %add3, %phi1
  %cond2 = icmp ult i32 %inc2, %TC2
  br i1 %cond2, label %1, label %6
  6:
  %add5 = add i32 %add4, %add3
  %add6 = add i32 %add5, %phi2
  %add7 = add i32 %add6, %phi3
  %add8 = add i32 %add7, %phi4
  %add9 = add i32 %add8, %phi.inc1
  ret i32 %add9
  }
...

---
name:            test8
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6, $vgpr7, $vgpr8
  
    %45:vgpr_32 = COPY killed $vgpr8
    %44:vgpr_32 = COPY killed $vgpr7
    %43:vgpr_32 = COPY killed $vgpr6
    %42:vgpr_32 = COPY killed $vgpr5
    %41:vgpr_32 = COPY killed $vgpr4
    %40:vgpr_32 = COPY killed $vgpr3
    %39:vgpr_32 = COPY killed $vgpr2
    %38:vgpr_32 = COPY killed $vgpr1
    %37:vgpr_32 = COPY killed $vgpr0
    %92:vreg_64 = REG_SEQUENCE killed %41, %subreg.sub0, killed %42, %subreg.sub1
    %91:vreg_64 = REG_SEQUENCE killed %39, %subreg.sub0, killed %40, %subreg.sub1
    %90:vreg_64 = REG_SEQUENCE killed %37, %subreg.sub0, killed %38, %subreg.sub1
    %55:vgpr_32 = V_AND_B32_e64 1, killed %43, implicit $exec
    %56:sreg_32 = V_CMP_NE_U32_e64 1, killed %55, implicit $exec
    %57:vgpr_32 = GLOBAL_LOAD_UBYTE %90, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %59:vgpr_32 = GLOBAL_LOAD_UBYTE %90, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %62:vgpr_32 = V_LSHL_OR_B32_e64 killed %59, 8, killed %57, implicit $exec
    %63:vgpr_32 = GLOBAL_LOAD_UBYTE %90, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %65:vgpr_32 = GLOBAL_LOAD_UBYTE %90, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %67:vgpr_32 = V_LSHL_OR_B32_e64 killed %65, 8, killed %63, implicit $exec
    %1:vgpr_32 = V_LSHL_OR_B32_e64 killed %67, 16, killed %62, implicit $exec
    %2:vgpr_32 = V_ADD_U32_e64 500, %1, 0, implicit $exec
    %51:vgpr_32 = V_MOV_B32_e32 7, implicit $exec
    %50:vgpr_32 = V_MOV_B32_e32 10, implicit $exec
    %49:sreg_32 = S_MOV_B32 0
    %93:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  
  bb.1:
    successors: %bb.5(0x40000000), %bb.2(0x40000000)
  
    %105:sreg_32 = PHI undef %101:sreg_32, %bb.0, %16, %bb.2, undef %102:sreg_32, %bb.6
    %98:sreg_32 = PHI undef %94:sreg_32, %bb.0, %15, %bb.2, undef %95:sreg_32, %bb.6
    %3:sreg_32 = PHI %49, %bb.0, %3, %bb.2, %29, %bb.6
    %4:sreg_32 = PHI %49, %bb.0, %17, %bb.2, %49, %bb.6
    %5:vgpr_32 = PHI %93, %bb.0, %14, %bb.2, %93, %bb.6
    %6:vgpr_32 = PHI %50, %bb.0, %86, %bb.2, %27, %bb.6
    %7:vgpr_32 = PHI %51, %bb.0, %88, %bb.2, %80, %bb.6
    %96:sreg_32 = S_OR_B32 killed %98, $exec_lo, implicit-def dead $scc
    %103:sreg_32 = S_OR_B32 killed %105, $exec_lo, implicit-def dead $scc
    %8:sreg_32 = SI_IF %56, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.5
  
  bb.2:
    successors: %bb.3(0x40000000), %bb.1(0x40000000)
  
    %16:sreg_32 = PHI %103, %bb.1, %104, %bb.5
    %15:sreg_32 = PHI %96, %bb.1, %97, %bb.5
    %9:vgpr_32 = PHI undef %70:vgpr_32, %bb.1, %20, %bb.5
    %10:vgpr_32 = PHI undef %70:vgpr_32, %bb.1, %21, %bb.5
    %11:vgpr_32 = PHI undef %70:vgpr_32, %bb.1, %19, %bb.5
    %88:vgpr_32 = PHI undef %70:vgpr_32, %bb.1, %89, %bb.5
    %86:vgpr_32 = PHI undef %70:vgpr_32, %bb.1, %87, %bb.5
    %14:vgpr_32 = PHI undef %70:vgpr_32, %bb.1, %22, %bb.5
    SI_END_CF killed %8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %17:sreg_32 = SI_IF_BREAK %15, killed %4, implicit-def dead $scc
    SI_LOOP %17, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.3
  
  bb.3:
    successors: %bb.4(0x40000000), %bb.6(0x40000000)
  
    SI_END_CF killed %17, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %18:sreg_32 = SI_IF killed %16, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.4:
    successors: %bb.6(0x80000000)
  
    GLOBAL_STORE_DWORD %92, %2, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    %79:vgpr_32 = V_MOV_B32_e32 100, implicit $exec
    %78:vgpr_32 = V_MOV_B32_e32 1000, implicit $exec
    S_BRANCH %bb.6
  
  bb.5:
    successors: %bb.2(0x80000000)
  
    %19:vgpr_32 = GLOBAL_LOAD_DWORD %91, 0, 0, implicit $exec :: (load (s32) from %ir.p2, addrspace 1)
    %20:vgpr_32 = V_MUL_LO_U32_e64 %19, %1, implicit $exec
    GLOBAL_STORE_DWORD %92, %20, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    %21:vgpr_32 = V_SUB_U32_e64 %20, %6, 0, implicit $exec
    %22:vgpr_32 = V_ADD_U32_e64 1, %5, 0, implicit $exec
    %77:sreg_32 = V_CMP_GE_U32_e64 %22, %44, implicit $exec
    %87:vgpr_32 = V_MOV_B32_e32 52, implicit $exec
    %89:vgpr_32 = V_MOV_B32_e32 13, implicit $exec
    %99:sreg_32 = S_ANDN2_B32 killed %96, $exec_lo, implicit-def dead $scc
    %100:sreg_32 = S_AND_B32 killed %77, $exec_lo, implicit-def dead $scc
    %97:sreg_32 = S_OR_B32 killed %99, killed %100, implicit-def dead $scc
    %106:sreg_32 = S_ANDN2_B32 killed %103, $exec_lo, implicit-def dead $scc
    %104:sreg_32 = COPY killed %106
    S_BRANCH %bb.2
  
  bb.6:
    successors: %bb.7(0x04000000), %bb.1(0x7c000000)
  
    %24:vgpr_32 = PHI %11, %bb.3, %78, %bb.4
    %25:vgpr_32 = PHI %10, %bb.3, %79, %bb.4
    %26:vgpr_32 = PHI %9, %bb.3, %2, %bb.4
    SI_END_CF killed %18, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %27:vgpr_32 = V_ADD_U32_e64 1, killed %6, 0, implicit $exec
    %28:vgpr_32 = V_ADD_U32_e64 %24, %27, 0, implicit $exec
    GLOBAL_STORE_DWORD %90, %28, 0, 0, implicit $exec :: (store (s32) into %ir.p1, addrspace 1)
    %81:sreg_32 = V_CMP_GE_U32_e64 %27, %45, implicit $exec
    %29:sreg_32 = SI_IF_BREAK killed %81, killed %3, implicit-def dead $scc
    %80:vgpr_32 = V_MOV_B32_e32 13, implicit $exec
    SI_LOOP %29, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.7
  
  bb.7:
    SI_END_CF killed %29, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %82:vgpr_32 = V_ADD3_U32_e64 killed %28, killed %7, %28, implicit $exec
    %83:vgpr_32 = V_ADD3_U32_e64 killed %82, killed %24, killed %25, implicit $exec
    %84:vgpr_32 = V_ADD3_U32_e64 killed %83, killed %26, killed %5, implicit $exec
    %85:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %84, implicit $exec
    $sgpr0 = COPY killed %85
    SI_RETURN_TO_EPILOG killed $sgpr0
...
---
