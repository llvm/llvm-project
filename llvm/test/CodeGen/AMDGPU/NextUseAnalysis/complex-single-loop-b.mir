# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#            bb.0.entry
#           /         |
#       bb.4.bb1      |
#         /   |       |
#  bb.5.bb2   |       |
#         \   |       |
#        bb.7.bb3     |
#         |    \      |
#         | bb.10.bb5 |
#         |    /      |
#        bb.8.Flow    |
#         /   |       |
#  bb.9.bb4   |       |
#         \   |       |
#        bb.11.bb6    |
#            |        |
#            bb.6.Flow2
#             /       |
# bb.1.loop.preheader |
#          |          |
#  +--->bb.3.loop     |
#   +------+          |
#          |          |
#     bb.12.Flow1     |
#            \        |
#            bb.2.Flow3
#                |
#           bb.13.exit
#




# CHECK-LABEL: === NextUseAnalysis Results for test11 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %0:vgpr_32 = COPY killed $vgpr12
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Instr: %1:vgpr_32 = COPY killed $vgpr11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Instr: %2:vgpr_32 = COPY killed $vgpr10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %1[ 29 ]
# CHECK: Instr: %3:vgpr_32 = COPY killed $vgpr9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %2[ 24 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Instr: %4:vgpr_32 = COPY killed $vgpr8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %2[ 23 ]
# CHECK: Vreg: %1[ 27 ]
# CHECK: Vreg: %3[ 38 ]
# CHECK: Instr: %5:vgpr_32 = COPY killed $vgpr7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %2[ 22 ]
# CHECK: Vreg: %4[ 37 ]
# CHECK: Vreg: %1[ 26 ]
# CHECK: Vreg: %3[ 37 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %2[ 21 ]
# CHECK: Vreg: %4[ 36 ]
# CHECK: Vreg: %1[ 25 ]
# CHECK: Vreg: %3[ 36 ]
# CHECK: Vreg: %5[ 22 ]
# CHECK: Instr: %7:vgpr_32 = COPY killed $vgpr5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %4[ 35 ]
# CHECK: Vreg: %6[ 21 ]
# CHECK: Vreg: %1[ 24 ]
# CHECK: Vreg: %3[ 35 ]
# CHECK: Vreg: %5[ 21 ]
# CHECK: Instr: %8:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %2[ 19 ]
# CHECK: Vreg: %4[ 34 ]
# CHECK: Vreg: %6[ 20 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %3[ 34 ]
# CHECK: Vreg: %5[ 20 ]
# CHECK: Instr: %9:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %2[ 18 ]
# CHECK: Vreg: %4[ 33 ]
# CHECK: Vreg: %6[ 19 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %8[ 4 ]
# CHECK: Vreg: %3[ 33 ]
# CHECK: Vreg: %5[ 19 ]
# CHECK: Instr: %10:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %2[ 17 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 32 ]
# CHECK: Vreg: %6[ 18 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %3[ 32 ]
# CHECK: Vreg: %5[ 18 ]
# CHECK: Instr: %11:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %2[ 16 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 31 ]
# CHECK: Vreg: %6[ 17 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %3[ 31 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %5[ 17 ]
# CHECK: Instr: %12:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %2[ 15 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %4[ 30 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %6[ 16 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %3[ 30 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %5[ 16 ]
# CHECK: Instr: %13:vreg_64 = REG_SEQUENCE killed %8, %subreg.sub0, killed %7, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %2[ 14 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %4[ 29 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %6[ 15 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %3[ 29 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %5[ 15 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Instr: %14:vreg_64 = REG_SEQUENCE %10, %subreg.sub0, %9, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %2[ 13 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %4[ 28 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %6[ 14 ]
# CHECK: Vreg: %13[ 13 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %3[ 28 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %5[ 14 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: %15:vreg_64 = REG_SEQUENCE killed %12, %subreg.sub0, killed %11, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %14[ 42 ]
# CHECK: Vreg: %2[ 12 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %4[ 27 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %6[ 13 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %3[ 27 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %5[ 13 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %16:vgpr_32 = V_AND_B32_e64 1, killed %0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %14[ 41 ]
# CHECK: Vreg: %2[ 11 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %4[ 26 ]
# CHECK: Vreg: %6[ 12 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %3[ 26 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %5[ 12 ]
# CHECK: Instr: %17:sreg_32 = V_CMP_NE_U32_e64 1, killed %16, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 40 ]
# CHECK: Vreg: %2[ 10 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %4[ 25 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %3[ 25 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %5[ 11 ]
# CHECK: Instr: %18:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 39 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %4[ 24 ]
# CHECK: Vreg: %6[ 10 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 24 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Vreg: %5[ 10 ]
# CHECK: Instr: %19:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 38 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %4[ 23 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %13[ 8 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 23 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %5[ 9 ]
# CHECK: Instr: %20:vgpr_32 = V_LSHL_OR_B32_e64 killed %19, 8, killed %18, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 37 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %4[ 22 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %6[ 8 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %3[ 22 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %5[ 8 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %21:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 36 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %4[ 21 ]
# CHECK: Vreg: %6[ 7 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %20[ 3 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 21 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Instr: %22:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 35 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %4[ 20 ]
# CHECK: Vreg: %6[ 6 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 20 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Instr: %23:vgpr_32 = V_LSHL_OR_B32_e64 killed %22, 8, killed %21, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 34 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 19 ]
# CHECK: Vreg: %6[ 5 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %15:sub0[ 15 ]
# CHECK: Vreg: %15:sub1[ 16 ]
# CHECK: Vreg: %15[ 23 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %3[ 19 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 5 ]
# CHECK: Instr: %24:vgpr_32 = V_LSHL_OR_B32_e64 killed %23, 16, killed %20, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 33 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %4[ 18 ]
# CHECK: Vreg: %6[ 4 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %15:sub0[ 14 ]
# CHECK: Vreg: %15:sub1[ 15 ]
# CHECK: Vreg: %15[ 22 ]
# CHECK: Vreg: %3[ 18 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Instr: %25:vgpr_32 = V_ADD_U32_e64 100, %24, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 32 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %4[ 17 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %15:sub0[ 13 ]
# CHECK: Vreg: %15:sub1[ 14 ]
# CHECK: Vreg: %15[ 21 ]
# CHECK: Vreg: %3[ 17 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Instr: %26:sreg_32 = SI_IF killed %17, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %14[ 31 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %4[ 16 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %15:sub0[ 12 ]
# CHECK: Vreg: %15:sub1[ 13 ]
# CHECK: Vreg: %15[ 20 ]
# CHECK: Vreg: %3[ 16 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %14[ 30 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %4[ 15 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %15:sub0[ 11 ]
# CHECK: Vreg: %15:sub1[ 12 ]
# CHECK: Vreg: %15[ 19 ]
# CHECK: Vreg: %3[ 15 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %14[ 30 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %4[ 15 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %15:sub0[ 11 ]
# CHECK: Vreg: %15:sub1[ 12 ]
# CHECK: Vreg: %15[ 19 ]
# CHECK: Vreg: %3[ 15 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %27:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 23 ]
# CHECK: Vreg: %59[ 17 ]
# CHECK: Vreg: %61[ 18 ]
# CHECK: Vreg: %42[ 1 ]
# CHECK: Vreg: %37[ 24 ]
# CHECK: Vreg: %48[ 5 ]
# CHECK: Vreg: %50[ 6 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 22 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %37[ 23 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %33[ 22 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %37[ 23 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %28:vgpr_32 = PHI %29, %bb.6, %30, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Instr: %31:vgpr_32 = PHI %32, %bb.6, %33, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Instr: %34:vgpr_32 = PHI %35, %bb.6, %36, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Instr: SI_END_CF killed %37, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %28[ 2 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %31[ 2 ]
# CHECK: Instr: S_BRANCH %bb.13
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %38:sreg_32 = PHI %27, %bb.1, %39, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+22 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %37[ LoopTag+23 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Instr: %40:sreg_32 = PHI %27, %bb.1, %41, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+22 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %37[ LoopTag+23 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %38[ 18 ]
# CHECK: Instr: %30:vgpr_32 = PHI %42, %bb.1, %36, %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+22 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %37[ LoopTag+23 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %38[ 18 ]
# CHECK: Instr: %43:sreg_32_xm0 = S_ASHR_I32 %40, 31, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+21 ]
# CHECK: Vreg: %59[ 15 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %61[ 16 ]
# CHECK: Vreg: %30[ LoopTag+21 ]
# CHECK: Vreg: %37[ LoopTag+22 ]
# CHECK: Vreg: %48[ 3 ]
# CHECK: Vreg: %50[ 4 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Instr: %44:sreg_64 = REG_SEQUENCE %40, %subreg.sub0, killed %43, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+20 ]
# CHECK: Vreg: %59[ 14 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %61[ 15 ]
# CHECK: Vreg: %30[ LoopTag+20 ]
# CHECK: Vreg: %37[ LoopTag+21 ]
# CHECK: Vreg: %48[ 2 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Vreg: %38[ 16 ]
# CHECK: Instr: %45:sreg_64 = nsw S_LSHL_B64 killed %44, 3, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+19 ]
# CHECK: Vreg: %59[ 13 ]
# CHECK: Vreg: %40[ 11 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %30[ LoopTag+19 ]
# CHECK: Vreg: %37[ LoopTag+20 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %50[ 2 ]
# CHECK: Vreg: %38[ 15 ]
# CHECK: Instr: %46:vgpr_32, %47:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %48, %45.sub0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45:sub0[ 0 ]
# CHECK: Vreg: %45:sub1[ 1 ]
# CHECK: Vreg: %33[ LoopTag+18 ]
# CHECK: Vreg: %59[ 12 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %61[ 13 ]
# CHECK: Vreg: %30[ LoopTag+18 ]
# CHECK: Vreg: %37[ LoopTag+19 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %38[ 14 ]
# CHECK: Instr: %49:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %45.sub1, %50, killed %47, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45:sub1[ 0 ]
# CHECK: Vreg: %33[ LoopTag+17 ]
# CHECK: Vreg: %59[ 11 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %61[ 12 ]
# CHECK: Vreg: %30[ LoopTag+17 ]
# CHECK: Vreg: %37[ LoopTag+18 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %48[ 19 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Instr: %51:vreg_64 = REG_SEQUENCE killed %46, %subreg.sub0, killed %49, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+16 ]
# CHECK: Vreg: %59[ 10 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %30[ LoopTag+16 ]
# CHECK: Vreg: %37[ LoopTag+17 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %48[ 18 ]
# CHECK: Vreg: %50[ 19 ]
# CHECK: Vreg: %38[ 12 ]
# CHECK: Instr: %52:vgpr_32 = GLOBAL_LOAD_UBYTE %51, 0, 0, implicit $exec :: (load (s8) from %ir.gep1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+15 ]
# CHECK: Vreg: %59[ 9 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %61[ 10 ]
# CHECK: Vreg: %30[ LoopTag+15 ]
# CHECK: Vreg: %37[ LoopTag+16 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %48[ 17 ]
# CHECK: Vreg: %50[ 18 ]
# CHECK: Vreg: %38[ 11 ]
# CHECK: Instr: %53:vgpr_32 = GLOBAL_LOAD_UBYTE %51, 1, 0, implicit $exec :: (load (s8) from %ir.gep1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %33[ LoopTag+14 ]
# CHECK: Vreg: %59[ 8 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %30[ LoopTag+14 ]
# CHECK: Vreg: %37[ LoopTag+15 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %48[ 16 ]
# CHECK: Vreg: %50[ 17 ]
# CHECK: Vreg: %38[ 10 ]
# CHECK: Instr: %54:vgpr_32 = V_LSHL_OR_B32_e64 killed %53, 8, killed %52, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %33[ LoopTag+13 ]
# CHECK: Vreg: %59[ 7 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %30[ LoopTag+13 ]
# CHECK: Vreg: %37[ LoopTag+14 ]
# CHECK: Vreg: %51[ 1 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %48[ 15 ]
# CHECK: Vreg: %50[ 16 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Instr: %55:vgpr_32 = GLOBAL_LOAD_UBYTE %51, 2, 0, implicit $exec :: (load (s8) from %ir.gep1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+12 ]
# CHECK: Vreg: %59[ 6 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %54[ 3 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %30[ LoopTag+12 ]
# CHECK: Vreg: %37[ LoopTag+13 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %48[ 14 ]
# CHECK: Vreg: %50[ 15 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Instr: %56:vgpr_32 = GLOBAL_LOAD_UBYTE killed %51, 3, 0, implicit $exec :: (load (s8) from %ir.gep1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+11 ]
# CHECK: Vreg: %59[ 5 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %54[ 2 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %30[ LoopTag+11 ]
# CHECK: Vreg: %37[ LoopTag+12 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %48[ 13 ]
# CHECK: Vreg: %55[ 1 ]
# CHECK: Vreg: %50[ 14 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Instr: %57:vgpr_32 = V_LSHL_OR_B32_e64 killed %56, 8, killed %55, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+10 ]
# CHECK: Vreg: %59[ 4 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %54[ 1 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %30[ LoopTag+10 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %37[ LoopTag+11 ]
# CHECK: Vreg: %48[ 12 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %50[ 13 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Instr: %58:vgpr_32 = V_LSHL_OR_B32_e64 killed %57, 16, killed %54, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+9 ]
# CHECK: Vreg: %59[ 3 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %61[ 4 ]
# CHECK: Vreg: %30[ LoopTag+9 ]
# CHECK: Vreg: %37[ LoopTag+10 ]
# CHECK: Vreg: %48[ 11 ]
# CHECK: Vreg: %50[ 12 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Instr: %41:sreg_32 = S_ADD_I32 killed %40, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+8 ]
# CHECK: Vreg: %59[ 2 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %30[ LoopTag+8 ]
# CHECK: Vreg: %37[ LoopTag+9 ]
# CHECK: Vreg: %58[ 1 ]
# CHECK: Vreg: %48[ 10 ]
# CHECK: Vreg: %50[ 11 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Instr: %36:vgpr_32 = V_ADD_U32_e64 %41, killed %58, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+7 ]
# CHECK: Vreg: %59[ 1 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %30[ LoopTag+7 ]
# CHECK: Vreg: %37[ LoopTag+8 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %48[ 9 ]
# CHECK: Vreg: %50[ 10 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %59, %36, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+6 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %30[ LoopTag+6 ]
# CHECK: Vreg: %37[ LoopTag+7 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %50[ 9 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: %60:sreg_32 = V_CMP_GE_U32_e64 %41, %61, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+5 ]
# CHECK: Vreg: %59[ 19 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %30[ LoopTag+5 ]
# CHECK: Vreg: %37[ LoopTag+6 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %48[ 7 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %50[ 8 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %39:sreg_32 = SI_IF_BREAK killed %60, killed %38, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+4 ]
# CHECK: Vreg: %59[ 18 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %30[ LoopTag+4 ]
# CHECK: Vreg: %37[ LoopTag+5 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %48[ 6 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: SI_LOOP %39, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+3 ]
# CHECK: Vreg: %59[ 17 ]
# CHECK: Vreg: %61[ 18 ]
# CHECK: Vreg: %30[ LoopTag+3 ]
# CHECK: Vreg: %37[ LoopTag+4 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %48[ 5 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %50[ 6 ]
# CHECK: Instr: S_BRANCH %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ LoopTag+2 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %30[ LoopTag+2 ]
# CHECK: Vreg: %37[ LoopTag+3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %33[ LoopTag+2 ]
# CHECK: Vreg: %59[ 16 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %30[ LoopTag+2 ]
# CHECK: Vreg: %37[ LoopTag+3 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %48[ 4 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: %62:vreg_64 = REG_SEQUENCE killed %6, %subreg.sub0, killed %5, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 30 ]
# CHECK: Vreg: %14[ 29 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %4[ 14 ]
# CHECK: Vreg: %25[ 27 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %15:sub0[ 10 ]
# CHECK: Vreg: %15:sub1[ 11 ]
# CHECK: Vreg: %15[ 18 ]
# CHECK: Vreg: %3[ 14 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Instr: %63:vgpr_32 = V_MUL_LO_U32_e64 100, %24, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 29 ]
# CHECK: Vreg: %14[ 28 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %4[ 13 ]
# CHECK: Vreg: %25[ 26 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %15:sub0[ 9 ]
# CHECK: Vreg: %15:sub1[ 10 ]
# CHECK: Vreg: %15[ 17 ]
# CHECK: Vreg: %3[ 13 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %62[ 6 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %13, %63, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 28 ]
# CHECK: Vreg: %14[ 27 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %4[ 12 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 25 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %15:sub0[ 8 ]
# CHECK: Vreg: %15:sub1[ 9 ]
# CHECK: Vreg: %15[ 16 ]
# CHECK: Vreg: %3[ 12 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %24[ 4 ]
# CHECK: Instr: %64:sreg_32 = V_CMP_GE_U32_e64 %63, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 27 ]
# CHECK: Vreg: %14[ 26 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %4[ 11 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 24 ]
# CHECK: Vreg: %13[ 12 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15:sub0[ 7 ]
# CHECK: Vreg: %15:sub1[ 8 ]
# CHECK: Vreg: %15[ 15 ]
# CHECK: Vreg: %3[ 11 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %62[ 4 ]
# CHECK: Vreg: %24[ 3 ]
# CHECK: Instr: %65:sreg_32 = V_CMP_LT_U32_e64 %63, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 8 ]
# CHECK: Vreg: %26[ 26 ]
# CHECK: Vreg: %14[ 25 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %4[ 10 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %13[ 11 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15:sub0[ 6 ]
# CHECK: Vreg: %15:sub1[ 7 ]
# CHECK: Vreg: %15[ 14 ]
# CHECK: Vreg: %3[ 10 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %62[ 3 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Instr: %66:sreg_32 = SI_IF killed %65, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 7 ]
# CHECK: Vreg: %26[ 25 ]
# CHECK: Vreg: %14[ 24 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 9 ]
# CHECK: Vreg: %63[ 8 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %13[ 10 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %15:sub0[ 5 ]
# CHECK: Vreg: %15:sub1[ 6 ]
# CHECK: Vreg: %15[ 13 ]
# CHECK: Vreg: %3[ 9 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 6 ]
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %66[ 1 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %63[ 7 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %15:sub0[ 4 ]
# CHECK: Vreg: %15:sub1[ 5 ]
# CHECK: Vreg: %15[ 12 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %64[ 6 ]
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %66[ 1 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %63[ 7 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %13[ 9 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %15:sub0[ 4 ]
# CHECK: Vreg: %15:sub1[ 5 ]
# CHECK: Vreg: %15[ 12 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %67:vgpr_32 = GLOBAL_LOAD_UBYTE %62, 24, 0, implicit $exec :: (load (s8) from %ir.gep2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 15 ]
# CHECK: Vreg: %26[ 33 ]
# CHECK: Vreg: %14[ 32 ]
# CHECK: Vreg: %66[ 10 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %4[ 17 ]
# CHECK: Vreg: %63[ 16 ]
# CHECK: Vreg: %25[ 30 ]
# CHECK: Vreg: %13[ 8 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %15:sub0[ 13 ]
# CHECK: Vreg: %15:sub1[ 14 ]
# CHECK: Vreg: %15[ 21 ]
# CHECK: Vreg: %3[ 17 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Instr: %68:vgpr_32 = GLOBAL_LOAD_UBYTE %62, 25, 0, implicit $exec :: (load (s8) from %ir.gep2 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 14 ]
# CHECK: Vreg: %26[ 32 ]
# CHECK: Vreg: %14[ 31 ]
# CHECK: Vreg: %66[ 9 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %4[ 16 ]
# CHECK: Vreg: %63[ 15 ]
# CHECK: Vreg: %25[ 29 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %15:sub0[ 12 ]
# CHECK: Vreg: %15:sub1[ 13 ]
# CHECK: Vreg: %15[ 20 ]
# CHECK: Vreg: %3[ 16 ]
# CHECK: Vreg: %67[ 1 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Instr: %69:vgpr_32 = V_LSHL_OR_B32_e64 killed %68, 8, killed %67, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 13 ]
# CHECK: Vreg: %26[ 31 ]
# CHECK: Vreg: %14[ 30 ]
# CHECK: Vreg: %66[ 8 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %4[ 15 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %63[ 14 ]
# CHECK: Vreg: %25[ 28 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %15:sub0[ 11 ]
# CHECK: Vreg: %15:sub1[ 12 ]
# CHECK: Vreg: %15[ 19 ]
# CHECK: Vreg: %3[ 15 ]
# CHECK: Vreg: %67[ 0 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Instr: %70:vgpr_32 = GLOBAL_LOAD_UBYTE %62, 26, 0, implicit $exec :: (load (s8) from %ir.gep2 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 12 ]
# CHECK: Vreg: %26[ 30 ]
# CHECK: Vreg: %14[ 29 ]
# CHECK: Vreg: %66[ 7 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %4[ 14 ]
# CHECK: Vreg: %63[ 13 ]
# CHECK: Vreg: %25[ 27 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %15:sub0[ 10 ]
# CHECK: Vreg: %15:sub1[ 11 ]
# CHECK: Vreg: %15[ 18 ]
# CHECK: Vreg: %3[ 14 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %69[ 3 ]
# CHECK: Instr: %71:vgpr_32 = GLOBAL_LOAD_UBYTE %62, 27, 0, implicit $exec :: (load (s8) from %ir.gep2 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 11 ]
# CHECK: Vreg: %26[ 29 ]
# CHECK: Vreg: %14[ 28 ]
# CHECK: Vreg: %66[ 6 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %4[ 13 ]
# CHECK: Vreg: %63[ 12 ]
# CHECK: Vreg: %25[ 26 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %15:sub0[ 9 ]
# CHECK: Vreg: %15:sub1[ 10 ]
# CHECK: Vreg: %15[ 17 ]
# CHECK: Vreg: %3[ 13 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %69[ 2 ]
# CHECK: Instr: %72:vgpr_32 = V_LSHL_OR_B32_e64 killed %71, 8, killed %70, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 10 ]
# CHECK: Vreg: %26[ 28 ]
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %14[ 27 ]
# CHECK: Vreg: %66[ 5 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %4[ 12 ]
# CHECK: Vreg: %63[ 11 ]
# CHECK: Vreg: %25[ 25 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %15:sub0[ 8 ]
# CHECK: Vreg: %15:sub1[ 9 ]
# CHECK: Vreg: %15[ 16 ]
# CHECK: Vreg: %3[ 12 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %62[ 16 ]
# CHECK: Vreg: %69[ 1 ]
# CHECK: Instr: %73:vgpr_32 = V_LSHL_OR_B32_e64 killed %72, 16, killed %69, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 9 ]
# CHECK: Vreg: %26[ 27 ]
# CHECK: Vreg: %14[ 26 ]
# CHECK: Vreg: %66[ 4 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %4[ 11 ]
# CHECK: Vreg: %63[ 10 ]
# CHECK: Vreg: %25[ 24 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %15:sub0[ 7 ]
# CHECK: Vreg: %15:sub1[ 8 ]
# CHECK: Vreg: %15[ 15 ]
# CHECK: Vreg: %3[ 11 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %62[ 15 ]
# CHECK: Vreg: %69[ 0 ]
# CHECK: Instr: %74:vgpr_32 = V_MUL_LO_U32_e64 killed %73, killed %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 8 ]
# CHECK: Vreg: %26[ 26 ]
# CHECK: Vreg: %14[ 25 ]
# CHECK: Vreg: %66[ 3 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %4[ 10 ]
# CHECK: Vreg: %63[ 9 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15:sub0[ 6 ]
# CHECK: Vreg: %15:sub1[ 7 ]
# CHECK: Vreg: %15[ 14 ]
# CHECK: Vreg: %3[ 10 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %62[ 14 ]
# CHECK: Instr: GLOBAL_STORE_DWORD killed %13, %74, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 7 ]
# CHECK: Vreg: %26[ 25 ]
# CHECK: Vreg: %14[ 24 ]
# CHECK: Vreg: %66[ 2 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 9 ]
# CHECK: Vreg: %63[ 8 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %15:sub0[ 5 ]
# CHECK: Vreg: %15:sub1[ 6 ]
# CHECK: Vreg: %15[ 13 ]
# CHECK: Vreg: %3[ 9 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %62[ 13 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 6 ]
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %66[ 1 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %63[ 7 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %15:sub0[ 4 ]
# CHECK: Vreg: %15:sub1[ 5 ]
# CHECK: Vreg: %15[ 12 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %62[ 12 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %64[ 6 ]
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %66[ 1 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %63[ 7 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %15:sub0[ 4 ]
# CHECK: Vreg: %15:sub1[ 5 ]
# CHECK: Vreg: %15[ 12 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %62[ 12 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %29:vgpr_32 = PHI undef %75:vgpr_32, %bb.0, %76, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %76[ 0 ]
# CHECK: Instr: %32:vgpr_32 = PHI undef %75:vgpr_32, %bb.0, %77, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %35:vgpr_32 = PHI undef %75:vgpr_32, %bb.0, %78, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %42:vgpr_32 = PHI %24, %bb.0, undef %79:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: %48:vgpr_32 = PHI %10, %bb.0, undef %80:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Instr: %50:vgpr_32 = PHI %9, %bb.0, undef %81:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Instr: %59:vreg_64 = PHI %13, %bb.0, undef %82:vreg_64, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %50[ 9 ]
# CHECK: Instr: %61:vgpr_32 = PHI %2, %bb.0, undef %83:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %59[ 20 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %50[ 9 ]
# CHECK: Instr: %33:vgpr_32 = PHI %25, %bb.0, undef %84:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %59[ 20 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %61[ 21 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %48[ 8 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %50[ 9 ]
# CHECK: Instr: %37:sreg_32 = SI_ELSE killed %26, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %33[ 25 ]
# CHECK: Vreg: %59[ 19 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %61[ 20 ]
# CHECK: Vreg: %42[ 3 ]
# CHECK: Vreg: %32[ 1 ]
# CHECK: Vreg: %48[ 7 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %50[ 8 ]
# CHECK: Instr: S_BRANCH %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 24 ]
# CHECK: Vreg: %59[ 18 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %42[ 2 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %48[ 6 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %33[ 24 ]
# CHECK: Vreg: %59[ 18 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %42[ 2 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %48[ 6 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: %85:vgpr_32 = PHI %24, %bb.4, %74, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 6 ]
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %14[ 23 ]
# CHECK: Vreg: %66[ 1 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %63[ 7 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %15:sub0[ 4 ]
# CHECK: Vreg: %15:sub1[ 5 ]
# CHECK: Vreg: %15[ 12 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %62[ 12 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Instr: SI_END_CF killed %66, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 5 ]
# CHECK: Vreg: %26[ 23 ]
# CHECK: Vreg: %14[ 22 ]
# CHECK: Vreg: %85[ 7 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %4[ 7 ]
# CHECK: Vreg: %63[ 6 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %15:sub0[ 3 ]
# CHECK: Vreg: %15:sub1[ 4 ]
# CHECK: Vreg: %15[ 11 ]
# CHECK: Vreg: %3[ 7 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %62[ 11 ]
# CHECK: Instr: %86:vgpr_32, %87:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %10, 24, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 4 ]
# CHECK: Vreg: %26[ 22 ]
# CHECK: Vreg: %14[ 21 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %4[ 6 ]
# CHECK: Vreg: %63[ 5 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %15:sub0[ 2 ]
# CHECK: Vreg: %15:sub1[ 3 ]
# CHECK: Vreg: %15[ 10 ]
# CHECK: Vreg: %3[ 6 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %62[ 10 ]
# CHECK: Instr: %88:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, %9, killed %87, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 3 ]
# CHECK: Vreg: %26[ 21 ]
# CHECK: Vreg: %14[ 20 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %87[ 0 ]
# CHECK: Vreg: %4[ 5 ]
# CHECK: Vreg: %63[ 4 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %15:sub0[ 1 ]
# CHECK: Vreg: %15:sub1[ 2 ]
# CHECK: Vreg: %15[ 9 ]
# CHECK: Vreg: %86[ 4 ]
# CHECK: Vreg: %3[ 5 ]
# CHECK: Vreg: %10[ 17 ]
# CHECK: Vreg: %62[ 9 ]
# CHECK: Instr: %89:vgpr_32, %90:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %15.sub0, 16, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 2 ]
# CHECK: Vreg: %26[ 20 ]
# CHECK: Vreg: %14[ 19 ]
# CHECK: Vreg: %85[ 4 ]
# CHECK: Vreg: %9[ 17 ]
# CHECK: Vreg: %4[ 4 ]
# CHECK: Vreg: %63[ 3 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %15:sub0[ 0 ]
# CHECK: Vreg: %15:sub1[ 1 ]
# CHECK: Vreg: %15[ 8 ]
# CHECK: Vreg: %86[ 3 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Vreg: %10[ 16 ]
# CHECK: Vreg: %62[ 8 ]
# CHECK: Vreg: %88[ 3 ]
# CHECK: Instr: %91:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, %15.sub1, killed %90, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %26[ 19 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %14[ 18 ]
# CHECK: Vreg: %85[ 3 ]
# CHECK: Vreg: %9[ 16 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %63[ 2 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %89[ 2 ]
# CHECK: Vreg: %15:sub1[ 0 ]
# CHECK: Vreg: %15:sub0[ 4 ]
# CHECK: Vreg: %15[ 7 ]
# CHECK: Vreg: %86[ 2 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %10[ 15 ]
# CHECK: Vreg: %62[ 7 ]
# CHECK: Vreg: %88[ 2 ]
# CHECK: Instr: %92:sreg_32 = SI_IF killed %64, %bb.8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %26[ 18 ]
# CHECK: Vreg: %14[ 17 ]
# CHECK: Vreg: %85[ 2 ]
# CHECK: Vreg: %9[ 15 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %63[ 1 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %89[ 1 ]
# CHECK: Vreg: %91[ 1 ]
# CHECK: Vreg: %15:sub0[ 3 ]
# CHECK: Vreg: %15:sub1[ 4 ]
# CHECK: Vreg: %15[ 6 ]
# CHECK: Vreg: %86[ 1 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %10[ 14 ]
# CHECK: Vreg: %62[ 6 ]
# CHECK: Vreg: %88[ 1 ]
# CHECK: Instr: S_BRANCH %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %14[ 16 ]
# CHECK: Vreg: %85[ 1 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %15:sub0[ 2 ]
# CHECK: Vreg: %15:sub1[ 3 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %14[ 16 ]
# CHECK: Vreg: %85[ 1 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %9[ 14 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %15:sub0[ 2 ]
# CHECK: Vreg: %15:sub1[ 3 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %10[ 13 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: --- MBB_8 ---
# CHECK: Instr: %93:vreg_64 = PHI undef %94:vreg_64, %bb.7, %95, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %96:vreg_64 = PHI undef %94:vreg_64, %bb.7, %97, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %98:vgpr_32 = PHI undef %99:vgpr_32, %bb.7, %100, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %101:vgpr_32 = PHI undef %99:vgpr_32, %bb.7, %102, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %103:vgpr_32 = PHI %86, %bb.7, undef %104:vgpr_32, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Instr: %105:vgpr_32 = PHI %88, %bb.7, undef %106:vgpr_32, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %103[ 4 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Instr: %107:vgpr_32 = PHI %89, %bb.7, undef %108:vgpr_32, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %103[ 4 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %105[ 4 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Instr: %109:vgpr_32 = PHI %91, %bb.7, undef %110:vgpr_32, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %103[ 4 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %105[ 4 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %107[ 5 ]
# CHECK: Instr: %111:vgpr_32 = PHI %63, %bb.7, undef %112:vgpr_32, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %109[ 5 ]
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %103[ 4 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %105[ 4 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %93[ 3 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %107[ 5 ]
# CHECK: Instr: %113:vreg_64 = REG_SEQUENCE killed %4, %subreg.sub0, killed %3, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %109[ 4 ]
# CHECK: Vreg: %26[ 16 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %111[ 5 ]
# CHECK: Vreg: %92[ 1 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %101[ 2 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %96[ 2 ]
# CHECK: Vreg: %103[ 3 ]
# CHECK: Vreg: %98[ 2 ]
# CHECK: Vreg: %105[ 3 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %93[ 2 ]
# CHECK: Vreg: %62[ 4 ]
# CHECK: Vreg: %107[ 4 ]
# CHECK: Instr: %114:sreg_32 = SI_ELSE killed %92, %bb.11, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %109[ 3 ]
# CHECK: Vreg: %26[ 15 ]
# CHECK: Vreg: %85[ 4 ]
# CHECK: Vreg: %111[ 4 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %113[ 7 ]
# CHECK: Vreg: %101[ 1 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %96[ 1 ]
# CHECK: Vreg: %103[ 2 ]
# CHECK: Vreg: %98[ 1 ]
# CHECK: Vreg: %105[ 2 ]
# CHECK: Vreg: %93[ 1 ]
# CHECK: Vreg: %62[ 3 ]
# CHECK: Vreg: %107[ 3 ]
# CHECK: Instr: S_BRANCH %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %109[ 2 ]
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %85[ 3 ]
# CHECK: Vreg: %111[ 3 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %103[ 1 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %105[ 1 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %107[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %109[ 2 ]
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %85[ 3 ]
# CHECK: Vreg: %111[ 3 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %103[ 1 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %105[ 1 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %107[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: --- MBB_9 ---
# CHECK: Instr: %115:vreg_64 = REG_SEQUENCE killed %103, %subreg.sub0, killed %105, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %109[ 1 ]
# CHECK: Vreg: %26[ 26 ]
# CHECK: Vreg: %85[ 2 ]
# CHECK: Vreg: %111[ 2 ]
# CHECK: Vreg: %113[ 18 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %103[ 0 ]
# CHECK: Vreg: %105[ 0 ]
# CHECK: Vreg: %62[ 14 ]
# CHECK: Vreg: %107[ 1 ]
# CHECK: Vreg: %114[ 13 ]
# CHECK: Instr: %116:vreg_64 = REG_SEQUENCE killed %107, %subreg.sub0, killed %109, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %109[ 0 ]
# CHECK: Vreg: %26[ 25 ]
# CHECK: Vreg: %85[ 1 ]
# CHECK: Vreg: %111[ 1 ]
# CHECK: Vreg: %113[ 17 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %115[ 2 ]
# CHECK: Vreg: %62[ 13 ]
# CHECK: Vreg: %107[ 0 ]
# CHECK: Vreg: %114[ 12 ]
# CHECK: Instr: %117:vgpr_32 = V_ADD_U32_e64 killed %111, %85, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %116[ 9 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Vreg: %111[ 0 ]
# CHECK: Vreg: %113[ 16 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %115[ 1 ]
# CHECK: Vreg: %62[ 12 ]
# CHECK: Vreg: %114[ 11 ]
# CHECK: Instr: %118:vgpr_32 = GLOBAL_LOAD_UBYTE %115, 0, 0, implicit $exec :: (load (s8) from %ir.gep3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 23 ]
# CHECK: Vreg: %116[ 8 ]
# CHECK: Vreg: %85[ 14 ]
# CHECK: Vreg: %113[ 15 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %117[ 7 ]
# CHECK: Vreg: %62[ 11 ]
# CHECK: Vreg: %114[ 10 ]
# CHECK: Instr: %119:vgpr_32 = GLOBAL_LOAD_UBYTE %115, 1, 0, implicit $exec :: (load (s8) from %ir.gep3 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 22 ]
# CHECK: Vreg: %116[ 7 ]
# CHECK: Vreg: %85[ 13 ]
# CHECK: Vreg: %118[ 1 ]
# CHECK: Vreg: %113[ 14 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %117[ 6 ]
# CHECK: Vreg: %62[ 10 ]
# CHECK: Vreg: %114[ 9 ]
# CHECK: Instr: %120:vgpr_32 = V_LSHL_OR_B32_e64 killed %119, 8, killed %118, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 21 ]
# CHECK: Vreg: %116[ 6 ]
# CHECK: Vreg: %85[ 12 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %113[ 13 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %115[ 1 ]
# CHECK: Vreg: %117[ 5 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %62[ 9 ]
# CHECK: Vreg: %114[ 8 ]
# CHECK: Instr: %121:vgpr_32 = GLOBAL_LOAD_UBYTE %115, 2, 0, implicit $exec :: (load (s8) from %ir.gep3 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 20 ]
# CHECK: Vreg: %116[ 5 ]
# CHECK: Vreg: %85[ 11 ]
# CHECK: Vreg: %113[ 12 ]
# CHECK: Vreg: %120[ 3 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %117[ 4 ]
# CHECK: Vreg: %62[ 8 ]
# CHECK: Vreg: %114[ 7 ]
# CHECK: Instr: %122:vgpr_32 = GLOBAL_LOAD_UBYTE %115, 3, 0, implicit $exec :: (load (s8) from %ir.gep3 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 19 ]
# CHECK: Vreg: %116[ 4 ]
# CHECK: Vreg: %85[ 10 ]
# CHECK: Vreg: %113[ 11 ]
# CHECK: Vreg: %120[ 2 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %117[ 3 ]
# CHECK: Vreg: %62[ 7 ]
# CHECK: Vreg: %114[ 6 ]
# CHECK: Vreg: %121[ 1 ]
# CHECK: Instr: %123:vgpr_32 = V_LSHL_OR_B32_e64 killed %122, 8, killed %121, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 18 ]
# CHECK: Vreg: %116[ 3 ]
# CHECK: Vreg: %85[ 9 ]
# CHECK: Vreg: %113[ 10 ]
# CHECK: Vreg: %120[ 1 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %115[ 4 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %117[ 2 ]
# CHECK: Vreg: %62[ 6 ]
# CHECK: Vreg: %114[ 5 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Instr: %124:vgpr_32 = V_LSHL_OR_B32_e64 killed %123, 16, killed %120, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %116[ 2 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %85[ 8 ]
# CHECK: Vreg: %113[ 9 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %115[ 3 ]
# CHECK: Vreg: %117[ 1 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %114[ 4 ]
# CHECK: Instr: %125:vgpr_32 = V_SUB_U32_e64 killed %124, %117, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 16 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %85[ 7 ]
# CHECK: Vreg: %113[ 8 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %115[ 2 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %62[ 4 ]
# CHECK: Vreg: %114[ 3 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %116, %125, 0, 0, implicit $exec :: (store (s32) into %ir.gep4, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 15 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %113[ 7 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %115[ 1 ]
# CHECK: Vreg: %117[ 1 ]
# CHECK: Vreg: %62[ 3 ]
# CHECK: Vreg: %114[ 2 ]
# CHECK: Instr: S_BRANCH %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: --- MBB_10 ---
# CHECK: Instr: %102:vgpr_32 = V_MUL_LO_U32_e64 killed %63, %85, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 33 ]
# CHECK: Vreg: %14[ 15 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Vreg: %92[ 18 ]
# CHECK: Vreg: %9[ 13 ]
# CHECK: Vreg: %4[ 17 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 30 ]
# CHECK: Vreg: %15:sub0[ 1 ]
# CHECK: Vreg: %15:sub1[ 2 ]
# CHECK: Vreg: %15[ 4 ]
# CHECK: Vreg: %3[ 17 ]
# CHECK: Vreg: %10[ 12 ]
# CHECK: Vreg: %62[ 21 ]
# CHECK: Instr: %126:vgpr_32, %127:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %15.sub0, 8, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 32 ]
# CHECK: Vreg: %14[ 14 ]
# CHECK: Vreg: %85[ 21 ]
# CHECK: Vreg: %92[ 17 ]
# CHECK: Vreg: %9[ 12 ]
# CHECK: Vreg: %4[ 16 ]
# CHECK: Vreg: %25[ 29 ]
# CHECK: Vreg: %15:sub0[ 0 ]
# CHECK: Vreg: %15:sub1[ 1 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %3[ 16 ]
# CHECK: Vreg: %10[ 11 ]
# CHECK: Vreg: %62[ 20 ]
# CHECK: Vreg: %102[ 10 ]
# CHECK: Instr: %128:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, %15.sub1, killed %127, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 31 ]
# CHECK: Vreg: %14[ 13 ]
# CHECK: Vreg: %85[ 20 ]
# CHECK: Vreg: %92[ 16 ]
# CHECK: Vreg: %9[ 11 ]
# CHECK: Vreg: %4[ 15 ]
# CHECK: Vreg: %127[ 0 ]
# CHECK: Vreg: %25[ 28 ]
# CHECK: Vreg: %15:sub1[ 0 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %3[ 15 ]
# CHECK: Vreg: %10[ 10 ]
# CHECK: Vreg: %62[ 19 ]
# CHECK: Vreg: %126[ 1 ]
# CHECK: Vreg: %102[ 9 ]
# CHECK: Instr: %97:vreg_64 = REG_SEQUENCE killed %126, %subreg.sub0, killed %128, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %26[ 30 ]
# CHECK: Vreg: %14[ 12 ]
# CHECK: Vreg: %85[ 19 ]
# CHECK: Vreg: %92[ 15 ]
# CHECK: Vreg: %9[ 10 ]
# CHECK: Vreg: %4[ 14 ]
# CHECK: Vreg: %25[ 27 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %3[ 14 ]
# CHECK: Vreg: %10[ 9 ]
# CHECK: Vreg: %62[ 18 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %102[ 8 ]
# CHECK: Instr: %129:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 8, 0, implicit $exec :: (load (s8) from %ir.gep5, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 29 ]
# CHECK: Vreg: %97[ 12 ]
# CHECK: Vreg: %14[ 11 ]
# CHECK: Vreg: %85[ 18 ]
# CHECK: Vreg: %92[ 14 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %4[ 13 ]
# CHECK: Vreg: %25[ 26 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 13 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %62[ 17 ]
# CHECK: Vreg: %102[ 7 ]
# CHECK: Instr: %130:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 9, 0, implicit $exec :: (load (s8) from %ir.gep5 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 28 ]
# CHECK: Vreg: %97[ 11 ]
# CHECK: Vreg: %14[ 10 ]
# CHECK: Vreg: %85[ 17 ]
# CHECK: Vreg: %92[ 13 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %4[ 12 ]
# CHECK: Vreg: %25[ 25 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 12 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %62[ 16 ]
# CHECK: Vreg: %102[ 6 ]
# CHECK: Instr: %131:vgpr_32 = V_LSHL_OR_B32_e64 killed %130, 8, killed %129, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 27 ]
# CHECK: Vreg: %97[ 10 ]
# CHECK: Vreg: %14[ 9 ]
# CHECK: Vreg: %85[ 16 ]
# CHECK: Vreg: %130[ 0 ]
# CHECK: Vreg: %92[ 12 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %4[ 11 ]
# CHECK: Vreg: %25[ 24 ]
# CHECK: Vreg: %129[ 0 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %3[ 11 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %62[ 15 ]
# CHECK: Vreg: %102[ 5 ]
# CHECK: Instr: %132:vgpr_32 = GLOBAL_LOAD_UBYTE %15, 10, 0, implicit $exec :: (load (s8) from %ir.gep5 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 26 ]
# CHECK: Vreg: %97[ 9 ]
# CHECK: Vreg: %14[ 8 ]
# CHECK: Vreg: %85[ 15 ]
# CHECK: Vreg: %92[ 11 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %4[ 10 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 10 ]
# CHECK: Vreg: %131[ 3 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %62[ 14 ]
# CHECK: Vreg: %102[ 4 ]
# CHECK: Instr: %133:vgpr_32 = GLOBAL_LOAD_UBYTE killed %15, 11, 0, implicit $exec :: (load (s8) from %ir.gep5 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 25 ]
# CHECK: Vreg: %97[ 8 ]
# CHECK: Vreg: %14[ 7 ]
# CHECK: Vreg: %85[ 14 ]
# CHECK: Vreg: %92[ 10 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %4[ 9 ]
# CHECK: Vreg: %132[ 1 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 9 ]
# CHECK: Vreg: %131[ 2 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %62[ 13 ]
# CHECK: Vreg: %102[ 3 ]
# CHECK: Instr: %134:vgpr_32 = V_LSHL_OR_B32_e64 killed %133, 8, killed %132, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 24 ]
# CHECK: Vreg: %97[ 7 ]
# CHECK: Vreg: %14[ 6 ]
# CHECK: Vreg: %85[ 13 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %132[ 0 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %131[ 1 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %62[ 12 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %102[ 2 ]
# CHECK: Instr: %135:vgpr_32 = V_LSHL_OR_B32_e64 killed %134, 16, killed %131, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 23 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %14[ 5 ]
# CHECK: Vreg: %85[ 12 ]
# CHECK: Vreg: %92[ 8 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 7 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %134[ 0 ]
# CHECK: Vreg: %3[ 7 ]
# CHECK: Vreg: %131[ 0 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %62[ 11 ]
# CHECK: Vreg: %102[ 1 ]
# CHECK: Instr: %100:vgpr_32 = V_SUB_U32_e64 killed %135, %102, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 22 ]
# CHECK: Vreg: %135[ 0 ]
# CHECK: Vreg: %97[ 5 ]
# CHECK: Vreg: %14[ 4 ]
# CHECK: Vreg: %85[ 11 ]
# CHECK: Vreg: %92[ 7 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %4[ 6 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %3[ 6 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %62[ 10 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %136:vgpr_32, %137:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 killed %10, 8, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 21 ]
# CHECK: Vreg: %97[ 4 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %85[ 10 ]
# CHECK: Vreg: %92[ 6 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %4[ 5 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %3[ 5 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %100[ 3 ]
# CHECK: Vreg: %62[ 9 ]
# CHECK: Vreg: %102[ 4 ]
# CHECK: Instr: %138:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, killed %9, killed %137, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 20 ]
# CHECK: Vreg: %97[ 3 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %85[ 9 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %137[ 0 ]
# CHECK: Vreg: %4[ 4 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %136[ 1 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Vreg: %100[ 2 ]
# CHECK: Vreg: %62[ 8 ]
# CHECK: Vreg: %102[ 3 ]
# CHECK: Instr: %95:vreg_64 = REG_SEQUENCE killed %136, %subreg.sub0, killed %138, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 19 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %85[ 8 ]
# CHECK: Vreg: %92[ 4 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %136[ 0 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %138[ 0 ]
# CHECK: Vreg: %100[ 1 ]
# CHECK: Vreg: %62[ 7 ]
# CHECK: Vreg: %102[ 2 ]
# CHECK: Instr: GLOBAL_STORE_DWORD killed %14, %100, 8, 0, implicit $exec :: (store (s32) into %ir.gep6, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 18 ]
# CHECK: Vreg: %97[ 1 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %85[ 7 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %62[ 6 ]
# CHECK: Vreg: %95[ 1 ]
# CHECK: Vreg: %102[ 1 ]
# CHECK: Instr: S_BRANCH %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 17 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %62[ 5 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: --- MBB_11 ---
# CHECK: Instr: %139:vgpr_32 = PHI %101, %bb.8, %117, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Instr: %76:vgpr_32 = PHI %98, %bb.8, %125, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %139[ 3 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Instr: %140:vreg_64 = PHI %96, %bb.8, %115, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %139[ 3 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Vreg: %76[ 11 ]
# CHECK: Instr: %141:vreg_64 = PHI %93, %bb.8, %116, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %113[ 6 ]
# CHECK: Vreg: %139[ 3 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %62[ 2 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Vreg: %76[ 11 ]
# CHECK: Vreg: %140[ 4 ]
# CHECK: Instr: SI_END_CF killed %114, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 13 ]
# CHECK: Vreg: %85[ 4 ]
# CHECK: Vreg: %113[ 5 ]
# CHECK: Vreg: %139[ 2 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %141[ 11 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Vreg: %76[ 10 ]
# CHECK: Vreg: %140[ 3 ]
# CHECK: Instr: %142:vgpr_32 = GLOBAL_LOAD_DWORD killed %62, 16, 0, implicit $exec :: (load (s32) from %ir.gep7, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %85[ 3 ]
# CHECK: Vreg: %113[ 4 ]
# CHECK: Vreg: %139[ 1 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %141[ 10 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %76[ 9 ]
# CHECK: Vreg: %140[ 2 ]
# CHECK: Instr: %77:vgpr_32 = V_ADD_U32_e64 %142, killed %139, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %142[ 0 ]
# CHECK: Vreg: %85[ 2 ]
# CHECK: Vreg: %113[ 3 ]
# CHECK: Vreg: %139[ 0 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %141[ 9 ]
# CHECK: Vreg: %76[ 8 ]
# CHECK: Vreg: %140[ 1 ]
# CHECK: Instr: GLOBAL_STORE_DWORD killed %140, %77, 0, 0, implicit $exec :: (store (s32) into %ir.phi4, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %142[ 1 ]
# CHECK: Vreg: %85[ 1 ]
# CHECK: Vreg: %113[ 2 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %141[ 8 ]
# CHECK: Vreg: %76[ 7 ]
# CHECK: Vreg: %140[ 0 ]
# CHECK: Instr: %143:vgpr_32 = V_SUB_U32_e64 killed %142, killed %85, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %142[ 0 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Vreg: %113[ 1 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %77[ 5 ]
# CHECK: Vreg: %141[ 7 ]
# CHECK: Vreg: %76[ 6 ]
# CHECK: Instr: %144:vgpr_32 = GLOBAL_LOAD_USHORT %113, 24, 0, implicit $exec :: (load (s16) from %ir.gep8, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %113[ 0 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %77[ 4 ]
# CHECK: Vreg: %141[ 6 ]
# CHECK: Vreg: %143[ 4 ]
# CHECK: Vreg: %76[ 5 ]
# CHECK: Instr: %145:vgpr_32 = GLOBAL_LOAD_USHORT killed %113, 26, 0, implicit $exec :: (load (s16) from %ir.gep8 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %144[ 1 ]
# CHECK: Vreg: %113[ 0 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %77[ 3 ]
# CHECK: Vreg: %141[ 5 ]
# CHECK: Vreg: %143[ 3 ]
# CHECK: Vreg: %76[ 4 ]
# CHECK: Instr: %146:vgpr_32 = V_LSHL_OR_B32_e64 killed %145, 16, killed %144, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %144[ 0 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %77[ 2 ]
# CHECK: Vreg: %141[ 4 ]
# CHECK: Vreg: %143[ 2 ]
# CHECK: Vreg: %145[ 0 ]
# CHECK: Vreg: %76[ 3 ]
# CHECK: Instr: %147:vreg_64 = REG_SEQUENCE killed %146, %subreg.sub0, undef %148:vgpr_32, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %146[ 0 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %77[ 1 ]
# CHECK: Vreg: %141[ 3 ]
# CHECK: Vreg: %143[ 1 ]
# CHECK: Vreg: %76[ 2 ]
# CHECK: Instr: %149:vreg_64, $sgpr_null = V_MAD_U64_U32_e64 killed %143, %77, killed %147, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %141[ 2 ]
# CHECK: Vreg: %143[ 0 ]
# CHECK: Vreg: %76[ 1 ]
# CHECK: Vreg: %147[ 0 ]
# CHECK: Instr: %78:vgpr_32 = V_ADD3_U32_e64 killed %149.sub0, %76, killed %25, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 3 ]
# CHECK: Vreg: %149:sub0[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %77[ 2 ]
# CHECK: Vreg: %141[ 1 ]
# CHECK: Vreg: %76[ 0 ]
# CHECK: Instr: GLOBAL_STORE_DWORD killed %141, %78, 0, 0, implicit $exec :: (store (s32) into %ir.phi5, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %77[ 1 ]
# CHECK: Vreg: %141[ 0 ]
# CHECK: Vreg: %76[ 1 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %76[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %76[ 0 ]
# CHECK: --- MBB_12 ---
# CHECK: Instr: SI_END_CF killed %39, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Instr: S_BRANCH %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: --- MBB_13 ---
# CHECK: Instr: %150:vgpr_32 = V_ADD3_U32_e64 killed %34, killed %31, killed %28, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Instr: %151:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %150, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %150[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %151
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %151[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i32 @test11 (ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, ptr addrspace(1) %p4, ptr addrspace(1) %p5, i32 %TC, i32 %Val, i1 %cond1) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  %add1 = add i32 %ld1, 100
  br i1 %cond1, label %1, label %2
  1:
  %phi.inc1 = phi i32 [ 0, %0 ], [ %inc1, %1 ]
  %phi.add = phi i32 [ %ld1, %0 ], [ %add2, %1 ]
  %sext = sext i32 %phi.inc1 to i64
  %gep1 = getelementptr inbounds i64, ptr addrspace(1) %p2, i64 %sext
  %ld2 = load i32, ptr addrspace(1) %gep1, align 1
  %inc1 = add i32 %phi.inc1, 1
  %add2 = add i32 %ld2, %inc1
  store i32 %add2, ptr addrspace(1) %p3
  %cond2 = icmp ult i32 %inc1, %TC
  br i1 %cond2, label %1, label %8
  2:
  %mul1 = mul i32 %ld1, 100
  store i32 %mul1, ptr addrspace(1) %p3
  %cond3 = icmp ult i32 %mul1, %Val
  br i1 %cond3, label %3, label %4
  3:
  %gep2 = getelementptr inbounds i64, ptr addrspace(1) %p4, i64 3
  %ld3 = load i32, ptr addrspace(1) %gep2, align 1
  %mul2 = mul i32 %ld3, %Val
  store i32 %mul2, ptr addrspace(1) %p3
  br label %4
  4:
  %phi1 = phi i32 [ %ld1, %2 ], [ %mul2, %3]
  %sub1 = sub i32 %mul1, %phi1
  %cond4 = icmp ult i32 %sub1, %Val
  br i1 %cond3, label %5, label %6
  5:
  %add3 = add i32 %mul1, %phi1
  %gep3 = getelementptr inbounds i64, ptr addrspace(1) %p2, i64 3
  %ld4 = load i32, ptr addrspace(1) %gep3, align 1
  %sub2 = sub i32 %ld4, %add3
  %gep4 = getelementptr inbounds i64, ptr addrspace(1) %p1, i64 2
  store i32 %sub2, ptr addrspace(1) %gep4
  br label %7
  6:
  %mul3 = mul i32 %mul1, %phi1
  %gep5 = getelementptr inbounds i64, ptr addrspace(1) %p1, i64 1
  %ld5 = load i32, ptr addrspace(1) %gep5, align 1
  %sub3 = sub i32 %ld5, %mul3
  %gep6 = getelementptr inbounds i64, ptr addrspace(1) %p2, i64 1
  store i32 %sub3, ptr addrspace(1) %gep6
  br label %7
  7:
  %phi2 = phi i32 [ %add3, %5 ], [ %mul3, %6 ]
  %phi3 = phi i32 [ %sub2, %5 ], [ %sub3, %6 ]
  %phi4 = phi ptr addrspace(1) [ %gep3, %5 ], [ %gep5, %6]
  %phi5 = phi ptr addrspace(1) [ %gep4, %5 ], [ %gep6, %6]
  %gep7 = getelementptr inbounds i64, ptr addrspace(1) %p4, i64 2
  %ld6 = load i32, ptr addrspace(1) %gep7, align 4
  %add4 = add i32 %ld6, %phi2
  store i32 %add4, ptr addrspace(1) %phi4
  %sub4 = sub i32 %ld6, %phi1
  %gep8 = getelementptr inbounds i64, ptr addrspace(1) %p5, i64 3
  %ld7 = load i32, ptr addrspace(1) %gep8, align 2
  %mul4 = mul i32 %sub4, %add4
  %add5 = add i32 %ld7, %mul4
  %add6 = add i32 %add5, %phi3
  %add7 = add i32 %add6, %add1
  store i32 %add7, ptr addrspace(1) %phi5
  br label %8
  8:
  %phi6 = phi i32 [ %add2, %1 ], [ %add7, %7 ]
  %phi7 = phi i32 [ %add1, %1 ], [ %add4, %7 ]
  %phi8 = phi i32 [ %phi.add, %1 ], [ %phi3, %7 ]
  %add8 = add i32 %phi6, %phi7
  %add9 = add i32 %add8, %phi8
  ret i32 %add9
  }
...

---
name:            test11
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.4(0x40000000), %bb.6(0x40000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6, $vgpr7, $vgpr8, $vgpr9, $vgpr10, $vgpr11, $vgpr12
  
    %57:vgpr_32 = COPY killed $vgpr12
    %56:vgpr_32 = COPY killed $vgpr11
    %55:vgpr_32 = COPY killed $vgpr10
    %54:vgpr_32 = COPY killed $vgpr9
    %53:vgpr_32 = COPY killed $vgpr8
    %52:vgpr_32 = COPY killed $vgpr7
    %51:vgpr_32 = COPY killed $vgpr6
    %50:vgpr_32 = COPY killed $vgpr5
    %49:vgpr_32 = COPY killed $vgpr4
    %48:vgpr_32 = COPY killed $vgpr3
    %47:vgpr_32 = COPY killed $vgpr2
    %46:vgpr_32 = COPY killed $vgpr1
    %45:vgpr_32 = COPY killed $vgpr0
    %156:vreg_64 = REG_SEQUENCE killed %49, %subreg.sub0, killed %50, %subreg.sub1
    %155:vreg_64 = REG_SEQUENCE %47, %subreg.sub0, %48, %subreg.sub1
    %154:vreg_64 = REG_SEQUENCE killed %45, %subreg.sub0, killed %46, %subreg.sub1
    %69:vgpr_32 = V_AND_B32_e64 1, killed %57, implicit $exec
    %70:sreg_32 = V_CMP_NE_U32_e64 1, killed %69, implicit $exec
    %71:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %73:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %76:vgpr_32 = V_LSHL_OR_B32_e64 killed %73, 8, killed %71, implicit $exec
    %77:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %79:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %81:vgpr_32 = V_LSHL_OR_B32_e64 killed %79, 8, killed %77, implicit $exec
    %0:vgpr_32 = V_LSHL_OR_B32_e64 killed %81, 16, killed %76, implicit $exec
    %1:vgpr_32 = V_ADD_U32_e64 100, %0, 0, implicit $exec
    %2:sreg_32 = SI_IF killed %70, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.1:
    successors: %bb.3(0x80000000)
  
    %132:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.3
  
  bb.2:
    successors: %bb.13(0x80000000)
  
    %3:vgpr_32 = PHI %17, %bb.6, %8, %bb.12
    %4:vgpr_32 = PHI %18, %bb.6, %184, %bb.12
    %5:vgpr_32 = PHI %19, %bb.6, %11, %bb.12
    SI_END_CF killed %20, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.13
  
  bb.3:
    successors: %bb.12(0x04000000), %bb.3(0x7c000000)
  
    %6:sreg_32 = PHI %132, %bb.1, %12, %bb.3
    %7:sreg_32 = PHI %132, %bb.1, %9, %bb.3
    %8:vgpr_32 = PHI %174, %bb.1, %11, %bb.3
    %133:sreg_32_xm0 = S_ASHR_I32 %7, 31, implicit-def dead $scc
    %135:sreg_64 = REG_SEQUENCE %7, %subreg.sub0, killed %133, %subreg.sub1
    %137:sreg_64 = nsw S_LSHL_B64 killed %135, 3, implicit-def dead $scc
    %159:vgpr_32, %161:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %176, %137.sub0, 0, implicit $exec
    %160:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %137.sub1, %178, killed %161, 0, implicit $exec
    %138:vreg_64 = REG_SEQUENCE killed %159, %subreg.sub0, killed %160, %subreg.sub1
    %139:vgpr_32 = GLOBAL_LOAD_UBYTE %138, 0, 0, implicit $exec :: (load (s8) from %ir.gep1, addrspace 1)
    %140:vgpr_32 = GLOBAL_LOAD_UBYTE %138, 1, 0, implicit $exec :: (load (s8) from %ir.gep1 + 1, addrspace 1)
    %142:vgpr_32 = V_LSHL_OR_B32_e64 killed %140, 8, killed %139, implicit $exec
    %143:vgpr_32 = GLOBAL_LOAD_UBYTE %138, 2, 0, implicit $exec :: (load (s8) from %ir.gep1 + 2, addrspace 1)
    %144:vgpr_32 = GLOBAL_LOAD_UBYTE killed %138, 3, 0, implicit $exec :: (load (s8) from %ir.gep1 + 3, addrspace 1)
    %145:vgpr_32 = V_LSHL_OR_B32_e64 killed %144, 8, killed %143, implicit $exec
    %147:vgpr_32 = V_LSHL_OR_B32_e64 killed %145, 16, killed %142, implicit $exec
    %9:sreg_32 = S_ADD_I32 killed %7, 1, implicit-def dead $scc
    %11:vgpr_32 = V_ADD_U32_e64 %9, killed %147, 0, implicit $exec
    GLOBAL_STORE_DWORD %180, %11, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    %149:sreg_32 = V_CMP_GE_U32_e64 %9, %182, implicit $exec
    %12:sreg_32 = SI_IF_BREAK killed %149, killed %6, implicit-def dead $scc
    SI_LOOP %12, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.12
  
  bb.4:
    successors: %bb.5(0x40000000), %bb.7(0x40000000)
  
    %157:vreg_64 = REG_SEQUENCE killed %51, %subreg.sub0, killed %52, %subreg.sub1
    %13:vgpr_32 = V_MUL_LO_U32_e64 100, %0, implicit $exec
    GLOBAL_STORE_DWORD %156, %13, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    %85:sreg_32 = V_CMP_GE_U32_e64 %13, %56, implicit $exec
    %86:sreg_32 = V_CMP_LT_U32_e64 %13, %56, implicit $exec
    %15:sreg_32 = SI_IF killed %86, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.5
  
  bb.5:
    successors: %bb.7(0x80000000)
  
    %87:vgpr_32 = GLOBAL_LOAD_UBYTE %157, 24, 0, implicit $exec :: (load (s8) from %ir.gep2, addrspace 1)
    %88:vgpr_32 = GLOBAL_LOAD_UBYTE %157, 25, 0, implicit $exec :: (load (s8) from %ir.gep2 + 1, addrspace 1)
    %90:vgpr_32 = V_LSHL_OR_B32_e64 killed %88, 8, killed %87, implicit $exec
    %91:vgpr_32 = GLOBAL_LOAD_UBYTE %157, 26, 0, implicit $exec :: (load (s8) from %ir.gep2 + 2, addrspace 1)
    %92:vgpr_32 = GLOBAL_LOAD_UBYTE %157, 27, 0, implicit $exec :: (load (s8) from %ir.gep2 + 3, addrspace 1)
    %93:vgpr_32 = V_LSHL_OR_B32_e64 killed %92, 8, killed %91, implicit $exec
    %95:vgpr_32 = V_LSHL_OR_B32_e64 killed %93, 16, killed %90, implicit $exec
    %16:vgpr_32 = V_MUL_LO_U32_e64 killed %95, killed %56, implicit $exec
    GLOBAL_STORE_DWORD killed %156, %16, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    S_BRANCH %bb.7
  
  bb.6:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
  
    %17:vgpr_32 = PHI undef %63:vgpr_32, %bb.0, %37, %bb.11
    %18:vgpr_32 = PHI undef %63:vgpr_32, %bb.0, %40, %bb.11
    %19:vgpr_32 = PHI undef %63:vgpr_32, %bb.0, %41, %bb.11
    %174:vgpr_32 = PHI %0, %bb.0, undef %175:vgpr_32, %bb.11
    %176:vgpr_32 = PHI %47, %bb.0, undef %177:vgpr_32, %bb.11
    %178:vgpr_32 = PHI %48, %bb.0, undef %179:vgpr_32, %bb.11
    %180:vreg_64 = PHI %156, %bb.0, undef %181:vreg_64, %bb.11
    %182:vgpr_32 = PHI %55, %bb.0, undef %183:vgpr_32, %bb.11
    %184:vgpr_32 = PHI %1, %bb.0, undef %185:vgpr_32, %bb.11
    %20:sreg_32 = SI_ELSE killed %2, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.1
  
  bb.7:
    successors: %bb.10(0x40000000), %bb.8(0x40000000)
  
    %21:vgpr_32 = PHI %0, %bb.4, %16, %bb.5
    SI_END_CF killed %15, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %162:vgpr_32, %164:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %47, 24, 0, implicit $exec
    %163:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, %48, killed %164, 0, implicit $exec
    %165:vgpr_32, %167:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %154.sub0, 16, 0, implicit $exec
    %166:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, %154.sub1, killed %167, 0, implicit $exec
    %24:sreg_32 = SI_IF killed %85, %bb.8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.10
  
  bb.8:
    successors: %bb.9(0x40000000), %bb.11(0x40000000)
  
    %25:vreg_64 = PHI undef %96:vreg_64, %bb.7, %35, %bb.10
    %26:vreg_64 = PHI undef %96:vreg_64, %bb.7, %33, %bb.10
    %27:vgpr_32 = PHI undef %97:vgpr_32, %bb.7, %34, %bb.10
    %28:vgpr_32 = PHI undef %97:vgpr_32, %bb.7, %32, %bb.10
    %186:vgpr_32 = PHI %162, %bb.7, undef %187:vgpr_32, %bb.10
    %188:vgpr_32 = PHI %163, %bb.7, undef %189:vgpr_32, %bb.10
    %190:vgpr_32 = PHI %165, %bb.7, undef %191:vgpr_32, %bb.10
    %192:vgpr_32 = PHI %166, %bb.7, undef %193:vgpr_32, %bb.10
    %194:vgpr_32 = PHI %13, %bb.7, undef %195:vgpr_32, %bb.10
    %158:vreg_64 = REG_SEQUENCE killed %53, %subreg.sub0, killed %54, %subreg.sub1
    %29:sreg_32 = SI_ELSE killed %24, %bb.11, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.9
  
  bb.9:
    successors: %bb.11(0x80000000)
  
    %22:vreg_64 = REG_SEQUENCE killed %186, %subreg.sub0, killed %188, %subreg.sub1
    %23:vreg_64 = REG_SEQUENCE killed %190, %subreg.sub0, killed %192, %subreg.sub1
    %30:vgpr_32 = V_ADD_U32_e64 killed %194, %21, 0, implicit $exec
    %111:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 0, 0, implicit $exec :: (load (s8) from %ir.gep3, addrspace 1)
    %112:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 1, 0, implicit $exec :: (load (s8) from %ir.gep3 + 1, addrspace 1)
    %114:vgpr_32 = V_LSHL_OR_B32_e64 killed %112, 8, killed %111, implicit $exec
    %115:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 2, 0, implicit $exec :: (load (s8) from %ir.gep3 + 2, addrspace 1)
    %116:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 3, 0, implicit $exec :: (load (s8) from %ir.gep3 + 3, addrspace 1)
    %117:vgpr_32 = V_LSHL_OR_B32_e64 killed %116, 8, killed %115, implicit $exec
    %119:vgpr_32 = V_LSHL_OR_B32_e64 killed %117, 16, killed %114, implicit $exec
    %31:vgpr_32 = V_SUB_U32_e64 killed %119, %30, 0, implicit $exec
    GLOBAL_STORE_DWORD %23, %31, 0, 0, implicit $exec :: (store (s32) into %ir.gep4, addrspace 1)
    S_BRANCH %bb.11
  
  bb.10:
    successors: %bb.8(0x80000000)
  
    %32:vgpr_32 = V_MUL_LO_U32_e64 killed %13, %21, implicit $exec
    %168:vgpr_32, %170:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %154.sub0, 8, 0, implicit $exec
    %169:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, %154.sub1, killed %170, 0, implicit $exec
    %33:vreg_64 = REG_SEQUENCE killed %168, %subreg.sub0, killed %169, %subreg.sub1
    %102:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 8, 0, implicit $exec :: (load (s8) from %ir.gep5, addrspace 1)
    %103:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 9, 0, implicit $exec :: (load (s8) from %ir.gep5 + 1, addrspace 1)
    %105:vgpr_32 = V_LSHL_OR_B32_e64 killed %103, 8, killed %102, implicit $exec
    %106:vgpr_32 = GLOBAL_LOAD_UBYTE %154, 10, 0, implicit $exec :: (load (s8) from %ir.gep5 + 2, addrspace 1)
    %107:vgpr_32 = GLOBAL_LOAD_UBYTE killed %154, 11, 0, implicit $exec :: (load (s8) from %ir.gep5 + 3, addrspace 1)
    %108:vgpr_32 = V_LSHL_OR_B32_e64 killed %107, 8, killed %106, implicit $exec
    %110:vgpr_32 = V_LSHL_OR_B32_e64 killed %108, 16, killed %105, implicit $exec
    %34:vgpr_32 = V_SUB_U32_e64 killed %110, %32, 0, implicit $exec
    %171:vgpr_32, %173:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 killed %47, 8, 0, implicit $exec
    %172:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 0, killed %48, killed %173, 0, implicit $exec
    %35:vreg_64 = REG_SEQUENCE killed %171, %subreg.sub0, killed %172, %subreg.sub1
    GLOBAL_STORE_DWORD killed %155, %34, 8, 0, implicit $exec :: (store (s32) into %ir.gep6, addrspace 1)
    S_BRANCH %bb.8
  
  bb.11:
    successors: %bb.6(0x80000000)
  
    %36:vgpr_32 = PHI %28, %bb.8, %30, %bb.9
    %37:vgpr_32 = PHI %27, %bb.8, %31, %bb.9
    %38:vreg_64 = PHI %26, %bb.8, %22, %bb.9
    %39:vreg_64 = PHI %25, %bb.8, %23, %bb.9
    SI_END_CF killed %29, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %120:vgpr_32 = GLOBAL_LOAD_DWORD killed %157, 16, 0, implicit $exec :: (load (s32) from %ir.gep7, addrspace 1)
    %40:vgpr_32 = V_ADD_U32_e64 %120, killed %36, 0, implicit $exec
    GLOBAL_STORE_DWORD killed %38, %40, 0, 0, implicit $exec :: (store (s32) into %ir.phi4, addrspace 1)
    %121:vgpr_32 = V_SUB_U32_e64 killed %120, killed %21, 0, implicit $exec
    %122:vgpr_32 = GLOBAL_LOAD_USHORT %158, 24, 0, implicit $exec :: (load (s16) from %ir.gep8, addrspace 1)
    %123:vgpr_32 = GLOBAL_LOAD_USHORT killed %158, 26, 0, implicit $exec :: (load (s16) from %ir.gep8 + 2, addrspace 1)
    %125:vgpr_32 = V_LSHL_OR_B32_e64 killed %123, 16, killed %122, implicit $exec
    %152:vreg_64 = REG_SEQUENCE killed %125, %subreg.sub0, undef %153:vgpr_32, %subreg.sub1
    %129:vreg_64, $sgpr_null = V_MAD_U64_U32_e64 killed %121, %40, killed %152, 0, implicit $exec
    %41:vgpr_32 = V_ADD3_U32_e64 killed %129.sub0, %37, killed %1, implicit $exec
    GLOBAL_STORE_DWORD killed %39, %41, 0, 0, implicit $exec :: (store (s32) into %ir.phi5, addrspace 1)
    S_BRANCH %bb.6
  
  bb.12:
    successors: %bb.2(0x80000000)
  
    SI_END_CF killed %12, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.2
  
  bb.13:
    %150:vgpr_32 = V_ADD3_U32_e64 killed %5, killed %4, killed %3, implicit $exec
    %151:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %150, implicit $exec
    $sgpr0 = COPY killed %151
    SI_RETURN_TO_EPILOG killed $sgpr0
...
---
