# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
  #
  #       bb.0.entry
  #        /    |
  #   bb.1.bb1  |
  #        \    |
  #       bb.2.bb2
  #        /    |
  #   bb.5.bb4  |
  #        \    |
  #      bb.3.Flow3
  #        /    |
  #   bb.4.bb3  |
  #        \    |
  #      bb.6.bb5
  #        /    |
  #   bb.12.bb7 |
  #        \    |
  #      bb.7.Flow2
  #        /    |
  #   bb.8.bb6  |
  #    /     |  |
  #bb.11.bb9 |  |
  #    \     |  |
  #  bb.9.Flow  |
  #    /     |  |
  #bb.10.bb8 |  |
  #    \     |  |
  # bb.13.Flow1 |
  #       \     |
  #      bb.14.exit
  #

# CHECK-LABEL: === NextUseAnalysis Results for test3 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %31:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 53 ]
# CHECK: Vreg: %64[ 27 ]
# CHECK: Vreg: %78[ 47 ]
# CHECK: Vreg: %23[ 53 ]
# CHECK: Vreg: %11[ 40 ]
# CHECK: Vreg: %120[ 38 ]
# CHECK: Vreg: %108[ 53 ]
# CHECK: Vreg: %25[ 49 ]
# CHECK: Vreg: %122[ 47 ]
# CHECK: Vreg: %65[ 38 ]
# CHECK: Vreg: %124[ 47 ]
# CHECK: Vreg: %22[ 55 ]
# CHECK: Vreg: %126[ 53 ]
# CHECK: Vreg: %24[ 47 ]
# CHECK: Vreg: %12[ 38 ]
# CHECK: Instr: %30:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 52 ]
# CHECK: Vreg: %64[ 26 ]
# CHECK: Vreg: %78[ 46 ]
# CHECK: Vreg: %23[ 52 ]
# CHECK: Vreg: %11[ 39 ]
# CHECK: Vreg: %120[ 37 ]
# CHECK: Vreg: %108[ 52 ]
# CHECK: Vreg: %25[ 48 ]
# CHECK: Vreg: %122[ 46 ]
# CHECK: Vreg: %65[ 37 ]
# CHECK: Vreg: %124[ 46 ]
# CHECK: Vreg: %22[ 54 ]
# CHECK: Vreg: %126[ 52 ]
# CHECK: Vreg: %24[ 46 ]
# CHECK: Vreg: %31[ 7 ]
# CHECK: Vreg: %12[ 37 ]
# CHECK: Instr: %29:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 51 ]
# CHECK: Vreg: %64[ 25 ]
# CHECK: Vreg: %78[ 45 ]
# CHECK: Vreg: %23[ 51 ]
# CHECK: Vreg: %30[ 4 ]
# CHECK: Vreg: %11[ 38 ]
# CHECK: Vreg: %120[ 36 ]
# CHECK: Vreg: %108[ 51 ]
# CHECK: Vreg: %25[ 47 ]
# CHECK: Vreg: %122[ 45 ]
# CHECK: Vreg: %65[ 36 ]
# CHECK: Vreg: %124[ 45 ]
# CHECK: Vreg: %22[ 53 ]
# CHECK: Vreg: %126[ 51 ]
# CHECK: Vreg: %24[ 45 ]
# CHECK: Vreg: %31[ 6 ]
# CHECK: Vreg: %12[ 36 ]
# CHECK: Instr: %28:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 50 ]
# CHECK: Vreg: %64[ 24 ]
# CHECK: Vreg: %78[ 44 ]
# CHECK: Vreg: %23[ 50 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %11[ 37 ]
# CHECK: Vreg: %120[ 35 ]
# CHECK: Vreg: %108[ 50 ]
# CHECK: Vreg: %25[ 46 ]
# CHECK: Vreg: %122[ 44 ]
# CHECK: Vreg: %65[ 35 ]
# CHECK: Vreg: %124[ 44 ]
# CHECK: Vreg: %22[ 52 ]
# CHECK: Vreg: %29[ 26 ]
# CHECK: Vreg: %126[ 50 ]
# CHECK: Vreg: %24[ 44 ]
# CHECK: Vreg: %31[ 5 ]
# CHECK: Vreg: %12[ 35 ]
# CHECK: Instr: %27:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 49 ]
# CHECK: Vreg: %64[ 23 ]
# CHECK: Vreg: %78[ 43 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %23[ 49 ]
# CHECK: Vreg: %30[ 2 ]
# CHECK: Vreg: %11[ 36 ]
# CHECK: Vreg: %120[ 34 ]
# CHECK: Vreg: %108[ 49 ]
# CHECK: Vreg: %25[ 45 ]
# CHECK: Vreg: %122[ 43 ]
# CHECK: Vreg: %65[ 34 ]
# CHECK: Vreg: %124[ 43 ]
# CHECK: Vreg: %22[ 51 ]
# CHECK: Vreg: %29[ 25 ]
# CHECK: Vreg: %126[ 49 ]
# CHECK: Vreg: %24[ 43 ]
# CHECK: Vreg: %31[ 4 ]
# CHECK: Vreg: %12[ 34 ]
# CHECK: Instr: %118:vreg_64 = REG_SEQUENCE killed %27, %subreg.sub0, killed %28, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 48 ]
# CHECK: Vreg: %64[ 22 ]
# CHECK: Vreg: %78[ 42 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %23[ 48 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %11[ 35 ]
# CHECK: Vreg: %120[ 33 ]
# CHECK: Vreg: %108[ 48 ]
# CHECK: Vreg: %25[ 44 ]
# CHECK: Vreg: %122[ 42 ]
# CHECK: Vreg: %65[ 33 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %124[ 42 ]
# CHECK: Vreg: %22[ 50 ]
# CHECK: Vreg: %29[ 24 ]
# CHECK: Vreg: %126[ 48 ]
# CHECK: Vreg: %24[ 42 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Vreg: %12[ 33 ]
# CHECK: Instr: %35:vgpr_32 = V_AND_B32_e64 1, killed %30, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 47 ]
# CHECK: Vreg: %64[ 21 ]
# CHECK: Vreg: %78[ 41 ]
# CHECK: Vreg: %118[ 5 ]
# CHECK: Vreg: %23[ 47 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %11[ 34 ]
# CHECK: Vreg: %120[ 32 ]
# CHECK: Vreg: %108[ 47 ]
# CHECK: Vreg: %25[ 43 ]
# CHECK: Vreg: %122[ 41 ]
# CHECK: Vreg: %65[ 32 ]
# CHECK: Vreg: %124[ 41 ]
# CHECK: Vreg: %22[ 49 ]
# CHECK: Vreg: %29[ 23 ]
# CHECK: Vreg: %126[ 47 ]
# CHECK: Vreg: %24[ 41 ]
# CHECK: Vreg: %31[ 2 ]
# CHECK: Vreg: %12[ 32 ]
# CHECK: Instr: %36:sreg_32 = V_CMP_EQ_U32_e64 1, killed %35, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 46 ]
# CHECK: Vreg: %64[ 20 ]
# CHECK: Vreg: %78[ 40 ]
# CHECK: Vreg: %118[ 4 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %23[ 46 ]
# CHECK: Vreg: %11[ 33 ]
# CHECK: Vreg: %120[ 31 ]
# CHECK: Vreg: %108[ 46 ]
# CHECK: Vreg: %25[ 42 ]
# CHECK: Vreg: %122[ 40 ]
# CHECK: Vreg: %65[ 31 ]
# CHECK: Vreg: %124[ 40 ]
# CHECK: Vreg: %22[ 48 ]
# CHECK: Vreg: %29[ 22 ]
# CHECK: Vreg: %126[ 46 ]
# CHECK: Vreg: %24[ 40 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: Vreg: %12[ 31 ]
# CHECK: Instr: %37:vgpr_32 = V_AND_B32_e64 1, killed %31, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 45 ]
# CHECK: Vreg: %64[ 19 ]
# CHECK: Vreg: %78[ 39 ]
# CHECK: Vreg: %118[ 3 ]
# CHECK: Vreg: %23[ 45 ]
# CHECK: Vreg: %11[ 32 ]
# CHECK: Vreg: %120[ 30 ]
# CHECK: Vreg: %108[ 45 ]
# CHECK: Vreg: %25[ 41 ]
# CHECK: Vreg: %122[ 39 ]
# CHECK: Vreg: %65[ 30 ]
# CHECK: Vreg: %124[ 39 ]
# CHECK: Vreg: %22[ 47 ]
# CHECK: Vreg: %29[ 21 ]
# CHECK: Vreg: %36[ 18 ]
# CHECK: Vreg: %126[ 45 ]
# CHECK: Vreg: %24[ 39 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %12[ 30 ]
# CHECK: Instr: %38:sreg_32 = V_CMP_EQ_U32_e64 1, killed %37, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 44 ]
# CHECK: Vreg: %64[ 18 ]
# CHECK: Vreg: %78[ 38 ]
# CHECK: Vreg: %118[ 2 ]
# CHECK: Vreg: %23[ 44 ]
# CHECK: Vreg: %11[ 31 ]
# CHECK: Vreg: %120[ 29 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %108[ 44 ]
# CHECK: Vreg: %25[ 40 ]
# CHECK: Vreg: %122[ 38 ]
# CHECK: Vreg: %65[ 29 ]
# CHECK: Vreg: %124[ 38 ]
# CHECK: Vreg: %22[ 46 ]
# CHECK: Vreg: %29[ 20 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 44 ]
# CHECK: Vreg: %24[ 38 ]
# CHECK: Vreg: %12[ 29 ]
# CHECK: Instr: %40:sreg_32 = S_XOR_B32 %38, -1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 43 ]
# CHECK: Vreg: %64[ 17 ]
# CHECK: Vreg: %78[ 37 ]
# CHECK: Vreg: %118[ 1 ]
# CHECK: Vreg: %23[ 43 ]
# CHECK: Vreg: %11[ 30 ]
# CHECK: Vreg: %120[ 28 ]
# CHECK: Vreg: %108[ 43 ]
# CHECK: Vreg: %25[ 39 ]
# CHECK: Vreg: %122[ 37 ]
# CHECK: Vreg: %65[ 28 ]
# CHECK: Vreg: %124[ 37 ]
# CHECK: Vreg: %22[ 45 ]
# CHECK: Vreg: %29[ 19 ]
# CHECK: Vreg: %36[ 16 ]
# CHECK: Vreg: %126[ 43 ]
# CHECK: Vreg: %24[ 37 ]
# CHECK: Vreg: %12[ 28 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %41:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 42 ]
# CHECK: Vreg: %64[ 16 ]
# CHECK: Vreg: %78[ 36 ]
# CHECK: Vreg: %40[ 26 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 42 ]
# CHECK: Vreg: %11[ 29 ]
# CHECK: Vreg: %120[ 27 ]
# CHECK: Vreg: %108[ 42 ]
# CHECK: Vreg: %25[ 38 ]
# CHECK: Vreg: %122[ 36 ]
# CHECK: Vreg: %65[ 27 ]
# CHECK: Vreg: %124[ 36 ]
# CHECK: Vreg: %22[ 44 ]
# CHECK: Vreg: %29[ 18 ]
# CHECK: Vreg: %36[ 15 ]
# CHECK: Vreg: %126[ 42 ]
# CHECK: Vreg: %24[ 36 ]
# CHECK: Vreg: %12[ 27 ]
# CHECK: Vreg: %38[ 33 ]
# CHECK: Instr: %43:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 41 ]
# CHECK: Vreg: %64[ 15 ]
# CHECK: Vreg: %78[ 35 ]
# CHECK: Vreg: %40[ 25 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 41 ]
# CHECK: Vreg: %11[ 28 ]
# CHECK: Vreg: %120[ 26 ]
# CHECK: Vreg: %108[ 41 ]
# CHECK: Vreg: %25[ 37 ]
# CHECK: Vreg: %122[ 35 ]
# CHECK: Vreg: %65[ 26 ]
# CHECK: Vreg: %124[ 35 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %22[ 43 ]
# CHECK: Vreg: %29[ 17 ]
# CHECK: Vreg: %36[ 14 ]
# CHECK: Vreg: %126[ 41 ]
# CHECK: Vreg: %24[ 35 ]
# CHECK: Vreg: %12[ 26 ]
# CHECK: Vreg: %38[ 32 ]
# CHECK: Instr: %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %43, 8, killed %41, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 40 ]
# CHECK: Vreg: %64[ 14 ]
# CHECK: Vreg: %78[ 34 ]
# CHECK: Vreg: %40[ 24 ]
# CHECK: Vreg: %118[ 1 ]
# CHECK: Vreg: %23[ 40 ]
# CHECK: Vreg: %11[ 27 ]
# CHECK: Vreg: %120[ 25 ]
# CHECK: Vreg: %108[ 40 ]
# CHECK: Vreg: %25[ 36 ]
# CHECK: Vreg: %122[ 34 ]
# CHECK: Vreg: %65[ 25 ]
# CHECK: Vreg: %124[ 34 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 42 ]
# CHECK: Vreg: %29[ 16 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %126[ 40 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ 34 ]
# CHECK: Vreg: %12[ 25 ]
# CHECK: Vreg: %38[ 31 ]
# CHECK: Instr: %47:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 39 ]
# CHECK: Vreg: %64[ 13 ]
# CHECK: Vreg: %78[ 33 ]
# CHECK: Vreg: %40[ 23 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 39 ]
# CHECK: Vreg: %11[ 26 ]
# CHECK: Vreg: %120[ 24 ]
# CHECK: Vreg: %108[ 39 ]
# CHECK: Vreg: %25[ 35 ]
# CHECK: Vreg: %122[ 33 ]
# CHECK: Vreg: %65[ 24 ]
# CHECK: Vreg: %46[ 3 ]
# CHECK: Vreg: %124[ 33 ]
# CHECK: Vreg: %22[ 41 ]
# CHECK: Vreg: %29[ 15 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %126[ 39 ]
# CHECK: Vreg: %24[ 33 ]
# CHECK: Vreg: %12[ 24 ]
# CHECK: Vreg: %38[ 30 ]
# CHECK: Instr: %49:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 38 ]
# CHECK: Vreg: %64[ 12 ]
# CHECK: Vreg: %78[ 32 ]
# CHECK: Vreg: %40[ 22 ]
# CHECK: Vreg: %47[ 1 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 38 ]
# CHECK: Vreg: %11[ 25 ]
# CHECK: Vreg: %120[ 23 ]
# CHECK: Vreg: %108[ 38 ]
# CHECK: Vreg: %25[ 34 ]
# CHECK: Vreg: %122[ 32 ]
# CHECK: Vreg: %65[ 23 ]
# CHECK: Vreg: %46[ 2 ]
# CHECK: Vreg: %124[ 32 ]
# CHECK: Vreg: %22[ 40 ]
# CHECK: Vreg: %29[ 14 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %126[ 38 ]
# CHECK: Vreg: %24[ 32 ]
# CHECK: Vreg: %12[ 23 ]
# CHECK: Vreg: %38[ 29 ]
# CHECK: Instr: %51:vgpr_32 = V_LSHL_OR_B32_e64 killed %49, 8, killed %47, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 37 ]
# CHECK: Vreg: %64[ 11 ]
# CHECK: Vreg: %78[ 31 ]
# CHECK: Vreg: %40[ 21 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %118[ 2 ]
# CHECK: Vreg: %23[ 37 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %11[ 24 ]
# CHECK: Vreg: %120[ 22 ]
# CHECK: Vreg: %108[ 37 ]
# CHECK: Vreg: %25[ 33 ]
# CHECK: Vreg: %122[ 31 ]
# CHECK: Vreg: %65[ 22 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %124[ 31 ]
# CHECK: Vreg: %22[ 39 ]
# CHECK: Vreg: %29[ 13 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %126[ 37 ]
# CHECK: Vreg: %24[ 31 ]
# CHECK: Vreg: %12[ 22 ]
# CHECK: Vreg: %38[ 28 ]
# CHECK: Instr: %1:vgpr_32 = V_LSHL_OR_B32_e64 killed %51, 16, killed %46, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 36 ]
# CHECK: Vreg: %64[ 10 ]
# CHECK: Vreg: %78[ 30 ]
# CHECK: Vreg: %40[ 20 ]
# CHECK: Vreg: %118[ 1 ]
# CHECK: Vreg: %23[ 36 ]
# CHECK: Vreg: %11[ 23 ]
# CHECK: Vreg: %120[ 21 ]
# CHECK: Vreg: %108[ 36 ]
# CHECK: Vreg: %25[ 32 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %122[ 30 ]
# CHECK: Vreg: %65[ 21 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %124[ 30 ]
# CHECK: Vreg: %22[ 38 ]
# CHECK: Vreg: %29[ 12 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %126[ 36 ]
# CHECK: Vreg: %24[ 30 ]
# CHECK: Vreg: %12[ 21 ]
# CHECK: Vreg: %38[ 27 ]
# CHECK: Instr: %53:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 12, 0, implicit $exec :: (load (s8) from %ir.gep1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 35 ]
# CHECK: Vreg: %64[ 9 ]
# CHECK: Vreg: %78[ 29 ]
# CHECK: Vreg: %40[ 19 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 35 ]
# CHECK: Vreg: %11[ 22 ]
# CHECK: Vreg: %120[ 20 ]
# CHECK: Vreg: %108[ 35 ]
# CHECK: Vreg: %25[ 31 ]
# CHECK: Vreg: %122[ 29 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %65[ 20 ]
# CHECK: Vreg: %124[ 29 ]
# CHECK: Vreg: %22[ 37 ]
# CHECK: Vreg: %29[ 11 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %126[ 35 ]
# CHECK: Vreg: %24[ 29 ]
# CHECK: Vreg: %12[ 20 ]
# CHECK: Vreg: %38[ 26 ]
# CHECK: Instr: %55:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 13, 0, implicit $exec :: (load (s8) from %ir.gep1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 34 ]
# CHECK: Vreg: %64[ 8 ]
# CHECK: Vreg: %78[ 28 ]
# CHECK: Vreg: %40[ 18 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 34 ]
# CHECK: Vreg: %11[ 21 ]
# CHECK: Vreg: %120[ 19 ]
# CHECK: Vreg: %108[ 34 ]
# CHECK: Vreg: %25[ 30 ]
# CHECK: Vreg: %122[ 28 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %65[ 19 ]
# CHECK: Vreg: %53[ 1 ]
# CHECK: Vreg: %124[ 28 ]
# CHECK: Vreg: %22[ 36 ]
# CHECK: Vreg: %29[ 10 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %126[ 34 ]
# CHECK: Vreg: %24[ 28 ]
# CHECK: Vreg: %12[ 19 ]
# CHECK: Vreg: %38[ 25 ]
# CHECK: Instr: %57:vgpr_32 = V_LSHL_OR_B32_e64 killed %55, 8, killed %53, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 33 ]
# CHECK: Vreg: %64[ 7 ]
# CHECK: Vreg: %78[ 27 ]
# CHECK: Vreg: %40[ 17 ]
# CHECK: Vreg: %118[ 1 ]
# CHECK: Vreg: %23[ 33 ]
# CHECK: Vreg: %11[ 20 ]
# CHECK: Vreg: %120[ 18 ]
# CHECK: Vreg: %108[ 33 ]
# CHECK: Vreg: %25[ 29 ]
# CHECK: Vreg: %122[ 27 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %65[ 18 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %124[ 27 ]
# CHECK: Vreg: %22[ 35 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 33 ]
# CHECK: Vreg: %24[ 27 ]
# CHECK: Vreg: %12[ 18 ]
# CHECK: Vreg: %38[ 24 ]
# CHECK: Instr: %58:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 14, 0, implicit $exec :: (load (s8) from %ir.gep1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 32 ]
# CHECK: Vreg: %64[ 6 ]
# CHECK: Vreg: %78[ 26 ]
# CHECK: Vreg: %40[ 16 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 32 ]
# CHECK: Vreg: %11[ 19 ]
# CHECK: Vreg: %120[ 17 ]
# CHECK: Vreg: %108[ 32 ]
# CHECK: Vreg: %25[ 28 ]
# CHECK: Vreg: %122[ 26 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %65[ 17 ]
# CHECK: Vreg: %124[ 26 ]
# CHECK: Vreg: %22[ 34 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %126[ 32 ]
# CHECK: Vreg: %24[ 26 ]
# CHECK: Vreg: %12[ 17 ]
# CHECK: Vreg: %57[ 3 ]
# CHECK: Vreg: %38[ 23 ]
# CHECK: Instr: %60:vgpr_32 = GLOBAL_LOAD_UBYTE killed %118, 15, 0, implicit $exec :: (load (s8) from %ir.gep1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 31 ]
# CHECK: Vreg: %64[ 5 ]
# CHECK: Vreg: %78[ 25 ]
# CHECK: Vreg: %40[ 15 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %23[ 31 ]
# CHECK: Vreg: %11[ 18 ]
# CHECK: Vreg: %120[ 16 ]
# CHECK: Vreg: %108[ 31 ]
# CHECK: Vreg: %25[ 27 ]
# CHECK: Vreg: %122[ 25 ]
# CHECK: Vreg: %58[ 1 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %65[ 16 ]
# CHECK: Vreg: %124[ 25 ]
# CHECK: Vreg: %22[ 33 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 31 ]
# CHECK: Vreg: %24[ 25 ]
# CHECK: Vreg: %12[ 16 ]
# CHECK: Vreg: %57[ 2 ]
# CHECK: Vreg: %38[ 22 ]
# CHECK: Instr: %62:vgpr_32 = V_LSHL_OR_B32_e64 killed %60, 8, killed %58, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 30 ]
# CHECK: Vreg: %64[ 4 ]
# CHECK: Vreg: %78[ 24 ]
# CHECK: Vreg: %40[ 14 ]
# CHECK: Vreg: %23[ 30 ]
# CHECK: Vreg: %11[ 17 ]
# CHECK: Vreg: %120[ 15 ]
# CHECK: Vreg: %108[ 30 ]
# CHECK: Vreg: %25[ 26 ]
# CHECK: Vreg: %122[ 24 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %65[ 15 ]
# CHECK: Vreg: %124[ 24 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %22[ 32 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 30 ]
# CHECK: Vreg: %24[ 24 ]
# CHECK: Vreg: %12[ 15 ]
# CHECK: Vreg: %57[ 1 ]
# CHECK: Vreg: %38[ 21 ]
# CHECK: Instr: %2:vgpr_32 = V_LSHL_OR_B32_e64 killed %62, 16, killed %57, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 29 ]
# CHECK: Vreg: %64[ 3 ]
# CHECK: Vreg: %78[ 23 ]
# CHECK: Vreg: %40[ 13 ]
# CHECK: Vreg: %23[ 29 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %120[ 14 ]
# CHECK: Vreg: %108[ 29 ]
# CHECK: Vreg: %25[ 25 ]
# CHECK: Vreg: %122[ 23 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %124[ 23 ]
# CHECK: Vreg: %22[ 31 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %126[ 29 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %24[ 23 ]
# CHECK: Vreg: %12[ 14 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ 20 ]
# CHECK: Instr: %3:vgpr_32 = V_ADD_U32_e64 100, %1, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 28 ]
# CHECK: Vreg: %64[ 2 ]
# CHECK: Vreg: %78[ 22 ]
# CHECK: Vreg: %40[ 12 ]
# CHECK: Vreg: %2[ 22 ]
# CHECK: Vreg: %23[ 28 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %120[ 13 ]
# CHECK: Vreg: %108[ 28 ]
# CHECK: Vreg: %25[ 24 ]
# CHECK: Vreg: %122[ 22 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %65[ 13 ]
# CHECK: Vreg: %124[ 22 ]
# CHECK: Vreg: %22[ 30 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %126[ 28 ]
# CHECK: Vreg: %24[ 22 ]
# CHECK: Vreg: %12[ 13 ]
# CHECK: Vreg: %38[ 19 ]
# CHECK: Instr: %4:sreg_32 = SI_IF %36, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 27 ]
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %78[ 21 ]
# CHECK: Vreg: %40[ 11 ]
# CHECK: Vreg: %2[ 21 ]
# CHECK: Vreg: %23[ 27 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %120[ 12 ]
# CHECK: Vreg: %108[ 27 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %122[ 21 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %65[ 12 ]
# CHECK: Vreg: %124[ 21 ]
# CHECK: Vreg: %22[ 29 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %126[ 27 ]
# CHECK: Vreg: %24[ 21 ]
# CHECK: Vreg: %12[ 12 ]
# CHECK: Vreg: %38[ 18 ]
# CHECK: Instr: S_BRANCH %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 26 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %78[ 20 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %23[ 26 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %120[ 11 ]
# CHECK: Vreg: %108[ 26 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %122[ 20 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %124[ 20 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 26 ]
# CHECK: Vreg: %24[ 20 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 26 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %78[ 20 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %23[ 26 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %120[ 11 ]
# CHECK: Vreg: %108[ 26 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %122[ 20 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %124[ 20 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 26 ]
# CHECK: Vreg: %24[ 20 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %64:vgpr_32 = V_MOV_B32_e32 100, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 26 ]
# CHECK: Vreg: %78[ 20 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %23[ 26 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %120[ 11 ]
# CHECK: Vreg: %108[ 26 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %122[ 20 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %124[ 20 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 26 ]
# CHECK: Vreg: %24[ 20 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 26 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %78[ 20 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %23[ 26 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %120[ 11 ]
# CHECK: Vreg: %108[ 26 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %122[ 20 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %124[ 20 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 26 ]
# CHECK: Vreg: %24[ 20 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %5:vgpr_32 = PHI %3, %bb.0, %64, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 26 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %78[ 20 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %23[ 26 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %120[ 11 ]
# CHECK: Vreg: %108[ 26 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %122[ 20 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %124[ 20 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 26 ]
# CHECK: Vreg: %24[ 20 ]
# CHECK: Vreg: %12[ 11 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Instr: SI_END_CF killed %4, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 25 ]
# CHECK: Vreg: %78[ 19 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %2[ 19 ]
# CHECK: Vreg: %23[ 25 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %120[ 10 ]
# CHECK: Vreg: %108[ 25 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %122[ 19 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %65[ 10 ]
# CHECK: Vreg: %124[ 19 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 16 ]
# CHECK: Vreg: %126[ 25 ]
# CHECK: Vreg: %24[ 19 ]
# CHECK: Vreg: %5[ 10 ]
# CHECK: Vreg: %12[ 10 ]
# CHECK: Vreg: %38[ 16 ]
# CHECK: Instr: %66:vgpr_32 = DS_READ_U8_gfx9 %29, 0, 0, implicit $exec :: (load (s8) from %ir.p2, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 24 ]
# CHECK: Vreg: %78[ 18 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %2[ 18 ]
# CHECK: Vreg: %23[ 24 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %120[ 9 ]
# CHECK: Vreg: %108[ 24 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %122[ 18 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %65[ 9 ]
# CHECK: Vreg: %124[ 18 ]
# CHECK: Vreg: %22[ 26 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 15 ]
# CHECK: Vreg: %126[ 24 ]
# CHECK: Vreg: %24[ 18 ]
# CHECK: Vreg: %5[ 9 ]
# CHECK: Vreg: %12[ 9 ]
# CHECK: Vreg: %38[ 15 ]
# CHECK: Instr: %67:vgpr_32 = DS_READ_U8_gfx9 %29, 1, 0, implicit $exec :: (load (s8) from %ir.p2 + 1, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 23 ]
# CHECK: Vreg: %78[ 17 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %2[ 17 ]
# CHECK: Vreg: %66[ 3 ]
# CHECK: Vreg: %23[ 23 ]
# CHECK: Vreg: %11[ 10 ]
# CHECK: Vreg: %120[ 8 ]
# CHECK: Vreg: %108[ 23 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %122[ 17 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %65[ 8 ]
# CHECK: Vreg: %124[ 17 ]
# CHECK: Vreg: %22[ 25 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 14 ]
# CHECK: Vreg: %126[ 23 ]
# CHECK: Vreg: %24[ 17 ]
# CHECK: Vreg: %5[ 8 ]
# CHECK: Vreg: %12[ 8 ]
# CHECK: Vreg: %38[ 14 ]
# CHECK: Instr: %68:vgpr_32 = DS_READ_U8_gfx9 %29, 2, 0, implicit $exec :: (load (s8) from %ir.p2 + 2, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 22 ]
# CHECK: Vreg: %78[ 16 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %2[ 16 ]
# CHECK: Vreg: %66[ 2 ]
# CHECK: Vreg: %23[ 22 ]
# CHECK: Vreg: %11[ 9 ]
# CHECK: Vreg: %120[ 7 ]
# CHECK: Vreg: %108[ 22 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %122[ 16 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %65[ 7 ]
# CHECK: Vreg: %124[ 16 ]
# CHECK: Vreg: %22[ 24 ]
# CHECK: Vreg: %67[ 2 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %126[ 22 ]
# CHECK: Vreg: %24[ 16 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Vreg: %12[ 7 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Instr: %69:vgpr_32 = DS_READ_U8_gfx9 %29, 3, 0, implicit $exec :: (load (s8) from %ir.p2 + 3, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 21 ]
# CHECK: Vreg: %78[ 15 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %2[ 15 ]
# CHECK: Vreg: %66[ 1 ]
# CHECK: Vreg: %23[ 21 ]
# CHECK: Vreg: %68[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %120[ 6 ]
# CHECK: Vreg: %108[ 21 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %122[ 15 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %65[ 6 ]
# CHECK: Vreg: %124[ 15 ]
# CHECK: Vreg: %22[ 23 ]
# CHECK: Vreg: %67[ 1 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %126[ 21 ]
# CHECK: Vreg: %24[ 15 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %12[ 6 ]
# CHECK: Vreg: %38[ 12 ]
# CHECK: Instr: %71:vgpr_32 = V_LSHL_OR_B32_e64 killed %67, 8, killed %66, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 20 ]
# CHECK: Vreg: %78[ 14 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %2[ 14 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %23[ 20 ]
# CHECK: Vreg: %68[ 1 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %120[ 5 ]
# CHECK: Vreg: %108[ 20 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %122[ 14 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %124[ 14 ]
# CHECK: Vreg: %22[ 22 ]
# CHECK: Vreg: %67[ 0 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %126[ 20 ]
# CHECK: Vreg: %24[ 14 ]
# CHECK: Vreg: %5[ 5 ]
# CHECK: Vreg: %69[ 1 ]
# CHECK: Vreg: %12[ 5 ]
# CHECK: Vreg: %38[ 11 ]
# CHECK: Instr: %72:vgpr_32 = V_LSHL_OR_B32_e64 killed %69, 8, killed %68, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 19 ]
# CHECK: Vreg: %71[ 1 ]
# CHECK: Vreg: %78[ 13 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %2[ 13 ]
# CHECK: Vreg: %23[ 19 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %120[ 4 ]
# CHECK: Vreg: %108[ 19 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %122[ 13 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %65[ 4 ]
# CHECK: Vreg: %124[ 13 ]
# CHECK: Vreg: %22[ 21 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %126[ 19 ]
# CHECK: Vreg: %24[ 13 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Vreg: %69[ 0 ]
# CHECK: Vreg: %12[ 4 ]
# CHECK: Vreg: %38[ 10 ]
# CHECK: Instr: %6:vgpr_32 = V_LSHL_OR_B32_e64 killed %72, 16, killed %71, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 18 ]
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %78[ 12 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %2[ 12 ]
# CHECK: Vreg: %23[ 18 ]
# CHECK: Vreg: %11[ 5 ]
# CHECK: Vreg: %120[ 3 ]
# CHECK: Vreg: %108[ 18 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %122[ 12 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %65[ 3 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %124[ 12 ]
# CHECK: Vreg: %22[ 20 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %126[ 18 ]
# CHECK: Vreg: %24[ 12 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %12[ 3 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Instr: %7:vgpr_32 = V_ADD_U32_e64 100, %6, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 17 ]
# CHECK: Vreg: %78[ 11 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %2[ 11 ]
# CHECK: Vreg: %23[ 17 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %120[ 2 ]
# CHECK: Vreg: %108[ 17 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %122[ 11 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %65[ 2 ]
# CHECK: Vreg: %124[ 11 ]
# CHECK: Vreg: %22[ 19 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %126[ 17 ]
# CHECK: Vreg: %24[ 11 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Instr: %8:sreg_32 = SI_IF killed %40, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 16 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %78[ 10 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %2[ 10 ]
# CHECK: Vreg: %23[ 16 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %120[ 1 ]
# CHECK: Vreg: %108[ 16 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %6[ 12 ]
# CHECK: Vreg: %122[ 10 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Vreg: %124[ 10 ]
# CHECK: Vreg: %22[ 18 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %126[ 16 ]
# CHECK: Vreg: %24[ 10 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %9:vgpr_32 = PHI undef %65:vgpr_32, %bb.2, %12, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Instr: %119:vgpr_32 = PHI %5, %bb.2, undef %120:vgpr_32, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Instr: %10:sreg_32 = SI_ELSE killed %8, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 14 ]
# CHECK: Vreg: %7[ 12 ]
# CHECK: Vreg: %78[ 8 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %23[ 14 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %108[ 14 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %6[ 10 ]
# CHECK: Vreg: %122[ 8 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %124[ 8 ]
# CHECK: Vreg: %22[ 16 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %119[ 2 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %126[ 14 ]
# CHECK: Vreg: %24[ 8 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 13 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %78[ 7 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %108[ 13 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %122[ 7 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %124[ 7 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %119[ 1 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 13 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 13 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %78[ 7 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %108[ 13 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %122[ 7 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %124[ 7 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %119[ 1 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 13 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: %76:vreg_64, $sgpr_null = V_MAD_U64_U32_e64 %1, killed %119, 1000, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Instr: %11:vgpr_32 = COPY killed %76.sub0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 14 ]
# CHECK: Vreg: %7[ 12 ]
# CHECK: Vreg: %78[ 8 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %23[ 14 ]
# CHECK: Vreg: %108[ 14 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %6[ 10 ]
# CHECK: Vreg: %122[ 8 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %124[ 8 ]
# CHECK: Vreg: %22[ 16 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %126[ 14 ]
# CHECK: Vreg: %24[ 8 ]
# CHECK: Vreg: %76:sub0[ 0 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 13 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %78[ 7 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %108[ 13 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %122[ 7 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %124[ 7 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 13 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 13 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %78[ 7 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %108[ 13 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %122[ 7 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %124[ 7 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 13 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %12:vgpr_32 = V_ADD_U32_e64 %7, %1, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 16 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %78[ 10 ]
# CHECK: Vreg: %2[ 10 ]
# CHECK: Vreg: %23[ 16 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %120[ 1 ]
# CHECK: Vreg: %108[ 16 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %6[ 12 ]
# CHECK: Vreg: %122[ 10 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %124[ 10 ]
# CHECK: Vreg: %22[ 18 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %126[ 16 ]
# CHECK: Vreg: %24[ 10 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %13:vgpr_32 = PHI %9, %bb.3, %11, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 13 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %78[ 7 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %108[ 13 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %122[ 7 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %124[ 7 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 13 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Instr: SI_END_CF killed %10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 12 ]
# CHECK: Vreg: %7[ 10 ]
# CHECK: Vreg: %78[ 6 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %23[ 12 ]
# CHECK: Vreg: %108[ 12 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %6[ 8 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %122[ 6 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %124[ 6 ]
# CHECK: Vreg: %22[ 14 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 12 ]
# CHECK: Vreg: %24[ 6 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: %14:vgpr_32 = DS_READ_B32_gfx9 killed %29, 12, 0, implicit $exec :: (load (s32) from %ir.gep2, align 8, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 11 ]
# CHECK: Vreg: %7[ 9 ]
# CHECK: Vreg: %78[ 5 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %23[ 11 ]
# CHECK: Vreg: %108[ 11 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %6[ 7 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %122[ 5 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %124[ 5 ]
# CHECK: Vreg: %22[ 13 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %126[ 11 ]
# CHECK: Vreg: %24[ 5 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: %15:vgpr_32 = V_ADD_U32_e64 %14, killed %13, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 10 ]
# CHECK: Vreg: %7[ 8 ]
# CHECK: Vreg: %78[ 4 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %23[ 10 ]
# CHECK: Vreg: %108[ 10 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %6[ 6 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %122[ 4 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %124[ 4 ]
# CHECK: Vreg: %22[ 12 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %126[ 10 ]
# CHECK: Vreg: %24[ 4 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Instr: %79:sreg_32 = S_XOR_B32 %36, %38, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 9 ]
# CHECK: Vreg: %7[ 7 ]
# CHECK: Vreg: %78[ 3 ]
# CHECK: Vreg: %14[ 4 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %23[ 9 ]
# CHECK: Vreg: %108[ 9 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %6[ 5 ]
# CHECK: Vreg: %122[ 3 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %124[ 3 ]
# CHECK: Vreg: %22[ 11 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %126[ 9 ]
# CHECK: Vreg: %24[ 3 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %83:sreg_32 = S_XOR_B32 killed %79, -1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 8 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %78[ 2 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %108[ 8 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %6[ 4 ]
# CHECK: Vreg: %122[ 2 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %22[ 10 ]
# CHECK: Vreg: %79[ 0 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %126[ 8 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Instr: %16:sreg_32 = SI_IF killed %83, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 7 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %78[ 1 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %23[ 7 ]
# CHECK: Vreg: %108[ 7 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %122[ 1 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %124[ 1 ]
# CHECK: Vreg: %22[ 9 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 7 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Vreg: %83[ 0 ]
# CHECK: Instr: S_BRANCH %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: %17:vgpr_32 = PHI undef %78:vgpr_32, %bb.6, %24, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: %121:vgpr_32 = PHI %2, %bb.6, undef %122:vgpr_32, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: %123:vgpr_32 = PHI %15, %bb.6, undef %124:vgpr_32, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %121[ 6 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Instr: %18:sreg_32 = SI_ELSE killed %16, %bb.14, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 5 ]
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %123[ 5 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %23[ 5 ]
# CHECK: Vreg: %108[ 5 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %22[ 7 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %126[ 5 ]
# CHECK: Vreg: %121[ 5 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Instr: S_BRANCH %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 4 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %123[ 4 ]
# CHECK: Vreg: %23[ 4 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %108[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %126[ 4 ]
# CHECK: Vreg: %121[ 4 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 4 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %123[ 4 ]
# CHECK: Vreg: %23[ 4 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %108[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %126[ 4 ]
# CHECK: Vreg: %121[ 4 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: --- MBB_8 ---
# CHECK: Instr: %109:sreg_32 = S_AND_B32 killed %36, killed %38, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 3 ]
# CHECK: Vreg: %7[ 8 ]
# CHECK: Vreg: %123[ 3 ]
# CHECK: Vreg: %23[ 3 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %108[ 3 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %126[ 3 ]
# CHECK: Vreg: %121[ 3 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Instr: %113:sreg_32 = S_XOR_B32 killed %109, -1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 2 ]
# CHECK: Vreg: %109[ 0 ]
# CHECK: Vreg: %7[ 7 ]
# CHECK: Vreg: %123[ 2 ]
# CHECK: Vreg: %23[ 2 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %108[ 2 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %126[ 2 ]
# CHECK: Vreg: %121[ 2 ]
# CHECK: Instr: %19:sreg_32 = SI_IF killed %113, %bb.9, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 1 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %123[ 1 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %113[ 0 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %108[ 1 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %126[ 1 ]
# CHECK: Vreg: %121[ 1 ]
# CHECK: Instr: S_BRANCH %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %108[ 0 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %108[ 0 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: --- MBB_9 ---
# CHECK: Instr: %20:vgpr_32 = PHI undef %108:vgpr_32, %bb.8, %23, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %108[ 0 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: %125:vgpr_32 = PHI %121, %bb.8, undef %126:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: %127:vgpr_32 = PHI %123, %bb.8, undef %128:vgpr_32, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %125[ 3 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: %21:sreg_32 = SI_ELSE killed %19, %bb.13, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %125[ 2 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %127[ 2 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: S_BRANCH %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %125[ 1 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %127[ 1 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %125[ 1 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %127[ 1 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: --- MBB_10 ---
# CHECK: Instr: %22:vgpr_32 = V_ADD_U32_e64 killed %125, killed %127, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %127[ 0 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Instr: S_BRANCH %bb.13
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: --- MBB_11 ---
# CHECK: Instr: %23:vgpr_32 = V_MUL_LO_U32_e64 killed %121, killed %123, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 1 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %108[ 1 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %126[ 1 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 2 ]
# CHECK: Instr: S_BRANCH %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %108[ 0 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %108[ 0 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: --- MBB_12 ---
# CHECK: Instr: %84:vgpr_32 = V_SUB_U32_e64 killed %14, killed %15, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 28 ]
# CHECK: Vreg: %7[ 26 ]
# CHECK: Vreg: %78[ 22 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %2[ 21 ]
# CHECK: Vreg: %16[ 23 ]
# CHECK: Vreg: %23[ 28 ]
# CHECK: Vreg: %108[ 28 ]
# CHECK: Vreg: %25[ 24 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %122[ 22 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 22 ]
# CHECK: Vreg: %22[ 30 ]
# CHECK: Vreg: %36[ 25 ]
# CHECK: Vreg: %126[ 28 ]
# CHECK: Vreg: %38[ 25 ]
# CHECK: Instr: %85:vgpr_32 = V_MUL_LO_U32_e64 killed %84, killed %6, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 27 ]
# CHECK: Vreg: %7[ 25 ]
# CHECK: Vreg: %78[ 21 ]
# CHECK: Vreg: %2[ 20 ]
# CHECK: Vreg: %16[ 22 ]
# CHECK: Vreg: %23[ 27 ]
# CHECK: Vreg: %108[ 27 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %122[ 21 ]
# CHECK: Vreg: %84[ 0 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %15[ 21 ]
# CHECK: Vreg: %124[ 21 ]
# CHECK: Vreg: %22[ 29 ]
# CHECK: Vreg: %36[ 24 ]
# CHECK: Vreg: %126[ 27 ]
# CHECK: Vreg: %38[ 24 ]
# CHECK: Instr: %86:vgpr_32 = V_CVT_F32_U32_e64 %1, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 26 ]
# CHECK: Vreg: %7[ 24 ]
# CHECK: Vreg: %78[ 20 ]
# CHECK: Vreg: %85[ 8 ]
# CHECK: Vreg: %2[ 19 ]
# CHECK: Vreg: %16[ 21 ]
# CHECK: Vreg: %23[ 26 ]
# CHECK: Vreg: %108[ 26 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %122[ 20 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15[ 20 ]
# CHECK: Vreg: %124[ 20 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %36[ 23 ]
# CHECK: Vreg: %126[ 26 ]
# CHECK: Vreg: %38[ 23 ]
# CHECK: Instr: %87:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %86, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 25 ]
# CHECK: Vreg: %7[ 23 ]
# CHECK: Vreg: %78[ 19 ]
# CHECK: Vreg: %85[ 7 ]
# CHECK: Vreg: %2[ 18 ]
# CHECK: Vreg: %16[ 20 ]
# CHECK: Vreg: %23[ 25 ]
# CHECK: Vreg: %108[ 25 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %122[ 19 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %15[ 19 ]
# CHECK: Vreg: %124[ 19 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %36[ 22 ]
# CHECK: Vreg: %126[ 25 ]
# CHECK: Vreg: %38[ 22 ]
# CHECK: Instr: %89:vgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept V_MUL_F32_e64 0, 1333788670, 0, killed %87, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 24 ]
# CHECK: Vreg: %7[ 22 ]
# CHECK: Vreg: %78[ 18 ]
# CHECK: Vreg: %85[ 6 ]
# CHECK: Vreg: %2[ 17 ]
# CHECK: Vreg: %16[ 19 ]
# CHECK: Vreg: %23[ 24 ]
# CHECK: Vreg: %87[ 0 ]
# CHECK: Vreg: %108[ 24 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %122[ 18 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %15[ 18 ]
# CHECK: Vreg: %124[ 18 ]
# CHECK: Vreg: %22[ 26 ]
# CHECK: Vreg: %36[ 21 ]
# CHECK: Vreg: %126[ 24 ]
# CHECK: Vreg: %38[ 21 ]
# CHECK: Instr: %90:vgpr_32 = nofpexcept V_CVT_U32_F32_e64 0, killed %89, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 23 ]
# CHECK: Vreg: %7[ 21 ]
# CHECK: Vreg: %78[ 17 ]
# CHECK: Vreg: %85[ 5 ]
# CHECK: Vreg: %2[ 16 ]
# CHECK: Vreg: %16[ 18 ]
# CHECK: Vreg: %23[ 23 ]
# CHECK: Vreg: %108[ 23 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %122[ 17 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %15[ 17 ]
# CHECK: Vreg: %124[ 17 ]
# CHECK: Vreg: %22[ 25 ]
# CHECK: Vreg: %36[ 20 ]
# CHECK: Vreg: %126[ 23 ]
# CHECK: Vreg: %38[ 20 ]
# CHECK: Instr: %92:vgpr_32 = V_SUB_U32_e64 0, %1, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 22 ]
# CHECK: Vreg: %90[ 1 ]
# CHECK: Vreg: %7[ 20 ]
# CHECK: Vreg: %78[ 16 ]
# CHECK: Vreg: %85[ 4 ]
# CHECK: Vreg: %2[ 15 ]
# CHECK: Vreg: %16[ 17 ]
# CHECK: Vreg: %23[ 22 ]
# CHECK: Vreg: %108[ 22 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %122[ 16 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15[ 16 ]
# CHECK: Vreg: %124[ 16 ]
# CHECK: Vreg: %22[ 24 ]
# CHECK: Vreg: %36[ 19 ]
# CHECK: Vreg: %126[ 22 ]
# CHECK: Vreg: %38[ 19 ]
# CHECK: Instr: %93:vgpr_32 = V_MUL_LO_U32_e64 killed %92, %90, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 21 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %7[ 19 ]
# CHECK: Vreg: %78[ 15 ]
# CHECK: Vreg: %85[ 3 ]
# CHECK: Vreg: %2[ 14 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %16[ 16 ]
# CHECK: Vreg: %23[ 21 ]
# CHECK: Vreg: %108[ 21 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %122[ 15 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %15[ 15 ]
# CHECK: Vreg: %124[ 15 ]
# CHECK: Vreg: %22[ 23 ]
# CHECK: Vreg: %36[ 18 ]
# CHECK: Vreg: %126[ 21 ]
# CHECK: Vreg: %38[ 18 ]
# CHECK: Instr: %94:vgpr_32 = V_MUL_HI_U32_e64 %90, killed %93, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 20 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %7[ 18 ]
# CHECK: Vreg: %78[ 14 ]
# CHECK: Vreg: %85[ 2 ]
# CHECK: Vreg: %2[ 13 ]
# CHECK: Vreg: %16[ 15 ]
# CHECK: Vreg: %23[ 20 ]
# CHECK: Vreg: %108[ 20 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %122[ 14 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %15[ 14 ]
# CHECK: Vreg: %124[ 14 ]
# CHECK: Vreg: %22[ 22 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %126[ 20 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Instr: %95:vgpr_32 = V_ADD_U32_e64 killed %90, killed %94, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 19 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %7[ 17 ]
# CHECK: Vreg: %78[ 13 ]
# CHECK: Vreg: %85[ 1 ]
# CHECK: Vreg: %2[ 12 ]
# CHECK: Vreg: %16[ 14 ]
# CHECK: Vreg: %23[ 19 ]
# CHECK: Vreg: %94[ 0 ]
# CHECK: Vreg: %108[ 19 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %122[ 13 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %15[ 13 ]
# CHECK: Vreg: %124[ 13 ]
# CHECK: Vreg: %22[ 21 ]
# CHECK: Vreg: %36[ 16 ]
# CHECK: Vreg: %126[ 19 ]
# CHECK: Vreg: %38[ 16 ]
# CHECK: Instr: %96:vgpr_32 = V_MUL_HI_U32_e64 %85, killed %95, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 18 ]
# CHECK: Vreg: %7[ 16 ]
# CHECK: Vreg: %78[ 12 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Vreg: %2[ 11 ]
# CHECK: Vreg: %16[ 13 ]
# CHECK: Vreg: %23[ 18 ]
# CHECK: Vreg: %108[ 18 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %122[ 12 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %15[ 12 ]
# CHECK: Vreg: %124[ 12 ]
# CHECK: Vreg: %22[ 20 ]
# CHECK: Vreg: %36[ 15 ]
# CHECK: Vreg: %126[ 18 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %38[ 15 ]
# CHECK: Instr: %97:vgpr_32 = V_MUL_LO_U32_e64 %96, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 17 ]
# CHECK: Vreg: %7[ 15 ]
# CHECK: Vreg: %78[ 11 ]
# CHECK: Vreg: %85[ 1 ]
# CHECK: Vreg: %2[ 10 ]
# CHECK: Vreg: %16[ 12 ]
# CHECK: Vreg: %23[ 17 ]
# CHECK: Vreg: %108[ 17 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %122[ 11 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15[ 11 ]
# CHECK: Vreg: %124[ 11 ]
# CHECK: Vreg: %22[ 19 ]
# CHECK: Vreg: %36[ 14 ]
# CHECK: Vreg: %126[ 17 ]
# CHECK: Vreg: %38[ 14 ]
# CHECK: Instr: %98:vgpr_32 = V_SUB_U32_e64 killed %85, killed %97, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 16 ]
# CHECK: Vreg: %7[ 14 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %78[ 10 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %16[ 11 ]
# CHECK: Vreg: %23[ 16 ]
# CHECK: Vreg: %108[ 16 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %96[ 2 ]
# CHECK: Vreg: %122[ 10 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %15[ 10 ]
# CHECK: Vreg: %124[ 10 ]
# CHECK: Vreg: %22[ 18 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %126[ 16 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Instr: %99:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 %98, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 15 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %78[ 9 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %16[ 10 ]
# CHECK: Vreg: %23[ 15 ]
# CHECK: Vreg: %108[ 15 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %96[ 1 ]
# CHECK: Vreg: %122[ 9 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %15[ 9 ]
# CHECK: Vreg: %124[ 9 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %126[ 15 ]
# CHECK: Vreg: %38[ 12 ]
# CHECK: Instr: %101:vgpr_32 = V_ADD_U32_e64 1, %96, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 14 ]
# CHECK: Vreg: %7[ 12 ]
# CHECK: Vreg: %78[ 8 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %99[ 1 ]
# CHECK: Vreg: %16[ 9 ]
# CHECK: Vreg: %23[ 14 ]
# CHECK: Vreg: %108[ 14 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %122[ 8 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %98[ 2 ]
# CHECK: Vreg: %15[ 8 ]
# CHECK: Vreg: %124[ 8 ]
# CHECK: Vreg: %22[ 16 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %126[ 14 ]
# CHECK: Vreg: %38[ 11 ]
# CHECK: Instr: %102:vgpr_32 = V_CNDMASK_B32_e64 0, killed %96, 0, killed %101, %99, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 13 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %78[ 7 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %99[ 0 ]
# CHECK: Vreg: %16[ 8 ]
# CHECK: Vreg: %23[ 13 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %108[ 13 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %122[ 7 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %98[ 1 ]
# CHECK: Vreg: %15[ 7 ]
# CHECK: Vreg: %124[ 7 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %126[ 13 ]
# CHECK: Vreg: %38[ 10 ]
# CHECK: Instr: %103:vgpr_32 = V_SUB_U32_e64 %98, %1, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 12 ]
# CHECK: Vreg: %7[ 10 ]
# CHECK: Vreg: %78[ 6 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %99[ 1 ]
# CHECK: Vreg: %16[ 7 ]
# CHECK: Vreg: %23[ 12 ]
# CHECK: Vreg: %108[ 12 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %122[ 6 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %15[ 6 ]
# CHECK: Vreg: %124[ 6 ]
# CHECK: Vreg: %22[ 14 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %126[ 12 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Vreg: %102[ 3 ]
# CHECK: Instr: %104:vgpr_32 = V_CNDMASK_B32_e64 0, killed %98, 0, killed %103, killed %99, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 11 ]
# CHECK: Vreg: %7[ 9 ]
# CHECK: Vreg: %78[ 5 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %99[ 0 ]
# CHECK: Vreg: %16[ 6 ]
# CHECK: Vreg: %23[ 11 ]
# CHECK: Vreg: %108[ 11 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %122[ 5 ]
# CHECK: Vreg: %103[ 0 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %124[ 5 ]
# CHECK: Vreg: %22[ 13 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %126[ 11 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Vreg: %102[ 2 ]
# CHECK: Instr: %105:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 killed %104, killed %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 10 ]
# CHECK: Vreg: %7[ 8 ]
# CHECK: Vreg: %78[ 4 ]
# CHECK: Vreg: %104[ 0 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %16[ 5 ]
# CHECK: Vreg: %23[ 10 ]
# CHECK: Vreg: %108[ 10 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %122[ 4 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %15[ 4 ]
# CHECK: Vreg: %124[ 4 ]
# CHECK: Vreg: %22[ 12 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %126[ 10 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Vreg: %102[ 1 ]
# CHECK: Instr: %106:vgpr_32 = V_ADD_U32_e64 1, %102, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 9 ]
# CHECK: Vreg: %7[ 7 ]
# CHECK: Vreg: %78[ 3 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %16[ 4 ]
# CHECK: Vreg: %23[ 9 ]
# CHECK: Vreg: %108[ 9 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %122[ 3 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %124[ 3 ]
# CHECK: Vreg: %105[ 1 ]
# CHECK: Vreg: %22[ 11 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %126[ 9 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %107:vgpr_32 = V_CNDMASK_B32_e64 0, killed %102, 0, killed %106, killed %105, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 8 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %78[ 2 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %16[ 3 ]
# CHECK: Vreg: %106[ 0 ]
# CHECK: Vreg: %23[ 8 ]
# CHECK: Vreg: %108[ 8 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %122[ 2 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %105[ 0 ]
# CHECK: Vreg: %22[ 10 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %126[ 8 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: %24:vgpr_32 = V_ADD_U32_e64 killed %107, killed %2, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 7 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %78[ 1 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 2 ]
# CHECK: Vreg: %23[ 7 ]
# CHECK: Vreg: %108[ 7 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %122[ 1 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %124[ 1 ]
# CHECK: Vreg: %22[ 9 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %126[ 7 ]
# CHECK: Vreg: %107[ 0 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %128[ 6 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %23[ 6 ]
# CHECK: Vreg: %108[ 6 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %126[ 6 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: --- MBB_13 ---
# CHECK: Instr: %25:vgpr_32 = PHI %20, %bb.9, %22, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Instr: SI_END_CF killed %21, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: --- MBB_14 ---
# CHECK: Instr: %26:vgpr_32 = PHI %17, %bb.7, %25, %bb.13
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Instr: SI_END_CF killed %18, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Instr: %114:vgpr_32 = V_ADD_U32_e64 killed %7, killed %26, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Instr: %115:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %114, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %114[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %115
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %115[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i32 @test3(ptr addrspace(1) %p1, ptr addrspace(3) %p2, i1 %cond1, i1 %cond2) {
  entry:
     %ld1 = load i32, ptr addrspace(1) %p1, align 1
     %gep1 = getelementptr inbounds i32, ptr addrspace(1) %p1, i64 3
     %ld2 = load i32, ptr addrspace(1) %gep1, align 1
     %add1 = add i32 %ld1, 100
     br i1 %cond1, label %bb1, label %bb2
  
  bb1:
    br label %bb2
  
  bb2:
    %phi0 = phi i32 [ 100, %bb1 ], [ %add1, %entry ]
    %ld3 = load i32, ptr addrspace(3) %p2, align 1
    %add2 = add i32 %ld3, 100
    br i1 %cond2, label %bb3, label %bb4
  
  bb3:
    %mul1 = mul i32 %ld1, %phi0
    %add3 = add i32 %mul1, 1000
    br label %bb5
  
  bb4:
    %add4 = add i32 %add2, %ld1
    br label %bb5
  
  bb5:
    %phi1 = phi i32 [ %add3, %bb3 ], [ %add4, %bb4]
    %gep2 = getelementptr inbounds i32, ptr addrspace(3) %p2, i64 3
    %ld4 = load i32, ptr addrspace(3) %gep2, align 8
    %add5 = add i32 %ld4, %phi1
    %xor = xor i1 %cond1, %cond2
    br i1 %xor, label %bb6, label %bb7
  
  bb6:
    %and = and i1 %cond1, %cond2
    br i1 %and, label %bb8, label %bb9
  
  bb8:
    %add6 = add i32 %ld2, %add5
    br label %exit
  
  bb9:
    %mul2 = mul i32 %ld2, %add5
    br label %exit
  
  bb7:
    %sub1 = sub i32 %ld4, %add5
    %mul3 = mul i32 %sub1, %ld3
    %div = udiv i32 %mul3, %ld1
    %add7 = add i32 %div, %ld2
    br label %exit
  
  exit:
    %phi2 = phi i32 [ %add6, %bb8 ], [ %mul2, %bb9], [ %add7, %bb7 ]
    %add8 = add i32 %add2, %phi2
    ret i32 %add8
  }
  
---
name:            test3
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHContTarget: false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 1, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 2, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 3, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 4, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 5, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 6, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 7, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 8, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 9, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 10, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 11, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 12, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 13, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 14, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 15, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 16, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 17, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 18, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 19, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 20, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 21, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 22, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 23, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 24, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 25, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 26, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 27, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 28, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 29, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 30, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 31, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 32, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 33, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 34, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 35, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 36, class: sreg_32, preferred-register: '$vcc_lo', flags: [  ] }
  - { id: 37, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 38, class: sreg_32, preferred-register: '$vcc_lo', flags: [  ] }
  - { id: 39, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 40, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 41, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 42, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 43, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 44, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 45, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 46, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 47, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 48, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 49, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 50, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 51, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 52, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 53, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 54, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 55, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 56, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 57, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 58, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 59, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 60, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 61, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 62, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 63, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 64, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 65, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 66, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 67, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 68, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 69, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 70, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 71, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 72, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 73, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 74, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 75, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 76, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 77, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 78, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 79, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 80, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 81, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 82, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 83, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 84, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 85, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 86, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 87, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 88, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 89, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 90, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 91, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 92, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 93, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 94, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 95, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 96, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 97, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 98, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 99, class: sreg_32_xm0_xexec, preferred-register: '$vcc_lo', 
      flags: [  ] }
  - { id: 100, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 101, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 102, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 103, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 104, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 105, class: sreg_32_xm0_xexec, preferred-register: '$vcc_lo', 
      flags: [  ] }
  - { id: 106, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 107, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 108, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 109, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 110, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 111, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 112, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 113, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 114, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 115, class: sreg_32_xm0, preferred-register: '', flags: [  ] }
  - { id: 116, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 117, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 118, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 119, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 120, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 121, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 122, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 123, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 124, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 125, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 126, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 127, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 128, class: vgpr_32, preferred-register: '', flags: [  ] }
liveins:
  - { reg: '$vgpr0', virtual-reg: '%27' }
  - { reg: '$vgpr1', virtual-reg: '%28' }
  - { reg: '$vgpr2', virtual-reg: '%29' }
  - { reg: '$vgpr3', virtual-reg: '%30' }
  - { reg: '$vgpr4', virtual-reg: '%31' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  explicitKernArgSize: 0
  maxKernArgAlign: 4
  ldsSize:         0
  gdsSize:         0
  dynLDSAlign:     1
  isEntryFunction: true
  isChainFunction: false
  noSignedZerosFPMath: false
  memoryBound:     false
  waveLimiter:     false
  hasSpilledSGPRs: false
  hasSpilledVGPRs: false
  scratchRSrcReg:  '$private_rsrc_reg'
  frameOffsetReg:  '$fp_reg'
  stackPtrOffsetReg: '$sgpr32'
  bytesInStackArgArea: 0
  returnsVoid:     false
  psInputAddr:     15
  psInputEnable:   15
  maxMemoryClusterDWords: 8
  mode:
    ieee:            false
    dx10-clamp:      true
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true
  highBitsOf32BitAddress: 0
  occupancy:       16
  vgprForAGPRCopy: ''
  sgprForEXECCopy: '$sgpr105'
  longBranchReservedReg: ''
  hasInitWholeWave: false
  dynamicVGPRBlockSize: 0
  scratchReservedForDynamicVGPRs: 0
  isWholeWaveFunction: false
body:             |
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4
  
    %31:vgpr_32 = COPY killed $vgpr4
    %30:vgpr_32 = COPY killed $vgpr3
    %29:vgpr_32 = COPY killed $vgpr2
    %28:vgpr_32 = COPY killed $vgpr1
    %27:vgpr_32 = COPY killed $vgpr0
    %118:vreg_64 = REG_SEQUENCE killed %27, %subreg.sub0, killed %28, %subreg.sub1
    %35:vgpr_32 = V_AND_B32_e64 1, killed %30, implicit $exec
    %36:sreg_32 = V_CMP_EQ_U32_e64 1, killed %35, implicit $exec
    %37:vgpr_32 = V_AND_B32_e64 1, killed %31, implicit $exec
    %38:sreg_32 = V_CMP_EQ_U32_e64 1, killed %37, implicit $exec
    %40:sreg_32 = S_XOR_B32 %38, -1, implicit-def dead $scc
    %41:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %43:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %43, 8, killed %41, implicit $exec
    %47:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %49:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %51:vgpr_32 = V_LSHL_OR_B32_e64 killed %49, 8, killed %47, implicit $exec
    %1:vgpr_32 = V_LSHL_OR_B32_e64 killed %51, 16, killed %46, implicit $exec
    %53:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 12, 0, implicit $exec :: (load (s8) from %ir.gep1, addrspace 1)
    %55:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 13, 0, implicit $exec :: (load (s8) from %ir.gep1 + 1, addrspace 1)
    %57:vgpr_32 = V_LSHL_OR_B32_e64 killed %55, 8, killed %53, implicit $exec
    %58:vgpr_32 = GLOBAL_LOAD_UBYTE %118, 14, 0, implicit $exec :: (load (s8) from %ir.gep1 + 2, addrspace 1)
    %60:vgpr_32 = GLOBAL_LOAD_UBYTE killed %118, 15, 0, implicit $exec :: (load (s8) from %ir.gep1 + 3, addrspace 1)
    %62:vgpr_32 = V_LSHL_OR_B32_e64 killed %60, 8, killed %58, implicit $exec
    %2:vgpr_32 = V_LSHL_OR_B32_e64 killed %62, 16, killed %57, implicit $exec
    %3:vgpr_32 = V_ADD_U32_e64 100, %1, 0, implicit $exec
    %4:sreg_32 = SI_IF %36, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.1
  
  bb.1:
    successors: %bb.2(0x80000000)
  
    %64:vgpr_32 = V_MOV_B32_e32 100, implicit $exec
  
  bb.2:
    successors: %bb.5(0x40000000), %bb.3(0x40000000)
  
    %5:vgpr_32 = PHI %3, %bb.0, %64, %bb.1
    SI_END_CF killed %4, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %66:vgpr_32 = DS_READ_U8_gfx9 %29, 0, 0, implicit $exec :: (load (s8) from %ir.p2, addrspace 3)
    %67:vgpr_32 = DS_READ_U8_gfx9 %29, 1, 0, implicit $exec :: (load (s8) from %ir.p2 + 1, addrspace 3)
    %68:vgpr_32 = DS_READ_U8_gfx9 %29, 2, 0, implicit $exec :: (load (s8) from %ir.p2 + 2, addrspace 3)
    %69:vgpr_32 = DS_READ_U8_gfx9 %29, 3, 0, implicit $exec :: (load (s8) from %ir.p2 + 3, addrspace 3)
    %71:vgpr_32 = V_LSHL_OR_B32_e64 killed %67, 8, killed %66, implicit $exec
    %72:vgpr_32 = V_LSHL_OR_B32_e64 killed %69, 8, killed %68, implicit $exec
    %6:vgpr_32 = V_LSHL_OR_B32_e64 killed %72, 16, killed %71, implicit $exec
    %7:vgpr_32 = V_ADD_U32_e64 100, %6, 0, implicit $exec
    %8:sreg_32 = SI_IF killed %40, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.5
  
  bb.3:
    successors: %bb.4(0x40000000), %bb.6(0x40000000)
  
    %9:vgpr_32 = PHI undef %65:vgpr_32, %bb.2, %12, %bb.5
    %119:vgpr_32 = PHI %5, %bb.2, undef %120:vgpr_32, %bb.5
    %10:sreg_32 = SI_ELSE killed %8, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.4:
    successors: %bb.6(0x80000000)
  
    %76:vreg_64, $sgpr_null = V_MAD_U64_U32_e64 %1, killed %119, 1000, 0, implicit $exec
    %11:vgpr_32 = COPY killed %76.sub0
    S_BRANCH %bb.6
  
  bb.5:
    successors: %bb.3(0x80000000)
  
    %12:vgpr_32 = V_ADD_U32_e64 %7, %1, 0, implicit $exec
    S_BRANCH %bb.3
  
  bb.6:
    successors: %bb.12(0x40000000), %bb.7(0x40000000)
  
    %13:vgpr_32 = PHI %9, %bb.3, %11, %bb.4
    SI_END_CF killed %10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %14:vgpr_32 = DS_READ_B32_gfx9 killed %29, 12, 0, implicit $exec :: (load (s32) from %ir.gep2, align 8, addrspace 3)
    %15:vgpr_32 = V_ADD_U32_e64 %14, killed %13, 0, implicit $exec
    %79:sreg_32 = S_XOR_B32 %36, %38, implicit-def dead $scc
    %83:sreg_32 = S_XOR_B32 killed %79, -1, implicit-def dead $scc
    %16:sreg_32 = SI_IF killed %83, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.12
  
  bb.7:
    successors: %bb.8(0x40000000), %bb.14(0x40000000)
  
    %17:vgpr_32 = PHI undef %78:vgpr_32, %bb.6, %24, %bb.12
    %121:vgpr_32 = PHI %2, %bb.6, undef %122:vgpr_32, %bb.12
    %123:vgpr_32 = PHI %15, %bb.6, undef %124:vgpr_32, %bb.12
    %18:sreg_32 = SI_ELSE killed %16, %bb.14, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.8
  
  bb.8:
    successors: %bb.11(0x40000000), %bb.9(0x40000000)
  
    %109:sreg_32 = S_AND_B32 killed %36, killed %38, implicit-def dead $scc
    %113:sreg_32 = S_XOR_B32 killed %109, -1, implicit-def dead $scc
    %19:sreg_32 = SI_IF killed %113, %bb.9, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.11
  
  bb.9:
    successors: %bb.10(0x40000000), %bb.13(0x40000000)
  
    %20:vgpr_32 = PHI undef %108:vgpr_32, %bb.8, %23, %bb.11
    %125:vgpr_32 = PHI %121, %bb.8, undef %126:vgpr_32, %bb.11
    %127:vgpr_32 = PHI %123, %bb.8, undef %128:vgpr_32, %bb.11
    %21:sreg_32 = SI_ELSE killed %19, %bb.13, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.10
  
  bb.10:
    successors: %bb.13(0x80000000)
  
    %22:vgpr_32 = V_ADD_U32_e64 killed %125, killed %127, 0, implicit $exec
    S_BRANCH %bb.13
  
  bb.11:
    successors: %bb.9(0x80000000)
  
    %23:vgpr_32 = V_MUL_LO_U32_e64 killed %121, killed %123, implicit $exec
    S_BRANCH %bb.9
  
  bb.12:
    successors: %bb.7(0x80000000)
  
    %84:vgpr_32 = V_SUB_U32_e64 killed %14, killed %15, 0, implicit $exec
    %85:vgpr_32 = V_MUL_LO_U32_e64 killed %84, killed %6, implicit $exec
    %86:vgpr_32 = V_CVT_F32_U32_e64 %1, 0, 0, implicit $mode, implicit $exec
    %87:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %86, 0, 0, implicit $mode, implicit $exec
    %89:vgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept V_MUL_F32_e64 0, 1333788670, 0, killed %87, 0, 0, implicit $mode, implicit $exec
    %90:vgpr_32 = nofpexcept V_CVT_U32_F32_e64 0, killed %89, 0, 0, implicit $mode, implicit $exec
    %92:vgpr_32 = V_SUB_U32_e64 0, %1, 0, implicit $exec
    %93:vgpr_32 = V_MUL_LO_U32_e64 killed %92, %90, implicit $exec
    %94:vgpr_32 = V_MUL_HI_U32_e64 %90, killed %93, implicit $exec
    %95:vgpr_32 = V_ADD_U32_e64 killed %90, killed %94, 0, implicit $exec
    %96:vgpr_32 = V_MUL_HI_U32_e64 %85, killed %95, implicit $exec
    %97:vgpr_32 = V_MUL_LO_U32_e64 %96, %1, implicit $exec
    %98:vgpr_32 = V_SUB_U32_e64 killed %85, killed %97, 0, implicit $exec
    %99:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 %98, %1, implicit $exec
    %101:vgpr_32 = V_ADD_U32_e64 1, %96, 0, implicit $exec
    %102:vgpr_32 = V_CNDMASK_B32_e64 0, killed %96, 0, killed %101, %99, implicit $exec
    %103:vgpr_32 = V_SUB_U32_e64 %98, %1, 0, implicit $exec
    %104:vgpr_32 = V_CNDMASK_B32_e64 0, killed %98, 0, killed %103, killed %99, implicit $exec
    %105:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 killed %104, killed %1, implicit $exec
    %106:vgpr_32 = V_ADD_U32_e64 1, %102, 0, implicit $exec
    %107:vgpr_32 = V_CNDMASK_B32_e64 0, killed %102, 0, killed %106, killed %105, implicit $exec
    %24:vgpr_32 = V_ADD_U32_e64 killed %107, killed %2, 0, implicit $exec
    S_BRANCH %bb.7
  
  bb.13:
    successors: %bb.14(0x80000000)
  
    %25:vgpr_32 = PHI %20, %bb.9, %22, %bb.10
    SI_END_CF killed %21, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
  
  bb.14:
    %26:vgpr_32 = PHI %17, %bb.7, %25, %bb.13
    SI_END_CF killed %18, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %114:vgpr_32 = V_ADD_U32_e64 killed %7, killed %26, 0, implicit $exec
    %115:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %114, implicit $exec
    $sgpr0 = COPY killed %115
    SI_RETURN_TO_EPILOG killed $sgpr0
...
---

