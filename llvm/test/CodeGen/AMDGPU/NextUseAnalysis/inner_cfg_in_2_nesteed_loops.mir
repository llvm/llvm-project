# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#             bb.0.entry
#                 |
#         bb.1.loop1.header<-----+
#                 |              |
#         bb.2.loop2.header<--+  |
#               /    \        |  |
#            bb.3   bb.6.bb2  |  |
#               \    /        |  |
#              bb.4.Flow      |  |
#               /    |        |  |
#  bb.5.loop2.latch1 |        |  |
#               \    |        |  |
#             bb.7.Flow1------+  |
#                 |              |
#          bb.8.loop1.latch------+
#                 |
#             bb.9.exit
#


# CHECK-LABEL: === NextUseAnalysis Results for test10 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %0:vgpr_32 = COPY killed $vgpr7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %28[ 21 ]
# CHECK: Vreg: %35[ 25 ]
# CHECK: Vreg: %61[ 32 ]
# CHECK: Vreg: %30[ 21 ]
# CHECK: Vreg: %37[ 27 ]
# CHECK: Vreg: %39[ 27 ]
# CHECK: Vreg: %20[ 18 ]
# CHECK: Vreg: %65[ 32 ]
# CHECK: Vreg: %60[ 32 ]
# CHECK: Vreg: %41[ 27 ]
# CHECK: Vreg: %22[ 18 ]
# CHECK: Vreg: %43[ 27 ]
# CHECK: Vreg: %24[ 18 ]
# CHECK: Vreg: %31[ 21 ]
# CHECK: Instr: %1:vgpr_32 = COPY killed $vgpr6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 43 ]
# CHECK: Vreg: %28[ 20 ]
# CHECK: Vreg: %35[ 24 ]
# CHECK: Vreg: %61[ 31 ]
# CHECK: Vreg: %30[ 20 ]
# CHECK: Vreg: %37[ 26 ]
# CHECK: Vreg: %39[ 26 ]
# CHECK: Vreg: %20[ 17 ]
# CHECK: Vreg: %65[ 31 ]
# CHECK: Vreg: %60[ 31 ]
# CHECK: Vreg: %41[ 26 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %43[ 26 ]
# CHECK: Vreg: %24[ 17 ]
# CHECK: Vreg: %31[ 20 ]
# CHECK: Instr: %2:vgpr_32 = COPY killed $vgpr5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 42 ]
# CHECK: Vreg: %28[ 19 ]
# CHECK: Vreg: %35[ 23 ]
# CHECK: Vreg: %61[ 30 ]
# CHECK: Vreg: %30[ 19 ]
# CHECK: Vreg: %37[ 25 ]
# CHECK: Vreg: %39[ 25 ]
# CHECK: Vreg: %20[ 16 ]
# CHECK: Vreg: %1[ 36 ]
# CHECK: Vreg: %65[ 30 ]
# CHECK: Vreg: %60[ 30 ]
# CHECK: Vreg: %41[ 25 ]
# CHECK: Vreg: %22[ 16 ]
# CHECK: Vreg: %43[ 25 ]
# CHECK: Vreg: %24[ 16 ]
# CHECK: Vreg: %31[ 19 ]
# CHECK: Instr: %3:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 41 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %28[ 18 ]
# CHECK: Vreg: %35[ 22 ]
# CHECK: Vreg: %61[ 29 ]
# CHECK: Vreg: %30[ 18 ]
# CHECK: Vreg: %37[ 24 ]
# CHECK: Vreg: %39[ 24 ]
# CHECK: Vreg: %20[ 15 ]
# CHECK: Vreg: %1[ 35 ]
# CHECK: Vreg: %65[ 29 ]
# CHECK: Vreg: %60[ 29 ]
# CHECK: Vreg: %41[ 24 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %43[ 24 ]
# CHECK: Vreg: %24[ 15 ]
# CHECK: Vreg: %31[ 18 ]
# CHECK: Instr: %4:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 40 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %28[ 17 ]
# CHECK: Vreg: %35[ 21 ]
# CHECK: Vreg: %61[ 28 ]
# CHECK: Vreg: %30[ 17 ]
# CHECK: Vreg: %37[ 23 ]
# CHECK: Vreg: %39[ 23 ]
# CHECK: Vreg: %20[ 14 ]
# CHECK: Vreg: %1[ 34 ]
# CHECK: Vreg: %65[ 28 ]
# CHECK: Vreg: %60[ 28 ]
# CHECK: Vreg: %41[ 23 ]
# CHECK: Vreg: %22[ 14 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Vreg: %43[ 23 ]
# CHECK: Vreg: %24[ 14 ]
# CHECK: Vreg: %31[ 17 ]
# CHECK: Instr: %5:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 39 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %28[ 16 ]
# CHECK: Vreg: %35[ 20 ]
# CHECK: Vreg: %61[ 27 ]
# CHECK: Vreg: %4[ 4 ]
# CHECK: Vreg: %30[ 16 ]
# CHECK: Vreg: %37[ 22 ]
# CHECK: Vreg: %39[ 22 ]
# CHECK: Vreg: %20[ 13 ]
# CHECK: Vreg: %1[ 33 ]
# CHECK: Vreg: %65[ 27 ]
# CHECK: Vreg: %60[ 27 ]
# CHECK: Vreg: %41[ 22 ]
# CHECK: Vreg: %22[ 13 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %43[ 22 ]
# CHECK: Vreg: %24[ 13 ]
# CHECK: Vreg: %31[ 16 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 38 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %28[ 15 ]
# CHECK: Vreg: %35[ 19 ]
# CHECK: Vreg: %61[ 26 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %30[ 15 ]
# CHECK: Vreg: %37[ 21 ]
# CHECK: Vreg: %39[ 21 ]
# CHECK: Vreg: %20[ 12 ]
# CHECK: Vreg: %1[ 32 ]
# CHECK: Vreg: %65[ 26 ]
# CHECK: Vreg: %60[ 26 ]
# CHECK: Vreg: %41[ 21 ]
# CHECK: Vreg: %22[ 12 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %43[ 21 ]
# CHECK: Vreg: %24[ 12 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %31[ 15 ]
# CHECK: Instr: %7:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 37 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %28[ 14 ]
# CHECK: Vreg: %35[ 18 ]
# CHECK: Vreg: %61[ 25 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %30[ 14 ]
# CHECK: Vreg: %37[ 20 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %39[ 20 ]
# CHECK: Vreg: %20[ 11 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %65[ 25 ]
# CHECK: Vreg: %60[ 25 ]
# CHECK: Vreg: %41[ 20 ]
# CHECK: Vreg: %22[ 11 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %43[ 20 ]
# CHECK: Vreg: %24[ 11 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %31[ 14 ]
# CHECK: Instr: %8:vreg_64 = REG_SEQUENCE killed %3, %subreg.sub0, killed %2, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 36 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %28[ 13 ]
# CHECK: Vreg: %35[ 17 ]
# CHECK: Vreg: %61[ 24 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %30[ 13 ]
# CHECK: Vreg: %37[ 19 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %39[ 19 ]
# CHECK: Vreg: %20[ 10 ]
# CHECK: Vreg: %1[ 30 ]
# CHECK: Vreg: %65[ 24 ]
# CHECK: Vreg: %60[ 24 ]
# CHECK: Vreg: %41[ 19 ]
# CHECK: Vreg: %22[ 10 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %43[ 19 ]
# CHECK: Vreg: %24[ 10 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %31[ 13 ]
# CHECK: Instr: %9:vreg_64 = REG_SEQUENCE killed %5, %subreg.sub0, killed %4, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 35 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %28[ 12 ]
# CHECK: Vreg: %35[ 16 ]
# CHECK: Vreg: %61[ 23 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %30[ 12 ]
# CHECK: Vreg: %37[ 18 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %39[ 18 ]
# CHECK: Vreg: %20[ 9 ]
# CHECK: Vreg: %1[ 29 ]
# CHECK: Vreg: %65[ 23 ]
# CHECK: Vreg: %8[ 12 ]
# CHECK: Vreg: %60[ 23 ]
# CHECK: Vreg: %41[ 18 ]
# CHECK: Vreg: %22[ 9 ]
# CHECK: Vreg: %43[ 18 ]
# CHECK: Vreg: %24[ 9 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %31[ 12 ]
# CHECK: Instr: %10:vreg_64 = REG_SEQUENCE killed %7, %subreg.sub0, killed %6, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 34 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %28[ 11 ]
# CHECK: Vreg: %9:sub0[ 26 ]
# CHECK: Vreg: %9:sub1[ 27 ]
# CHECK: Vreg: %35[ 15 ]
# CHECK: Vreg: %61[ 22 ]
# CHECK: Vreg: %30[ 11 ]
# CHECK: Vreg: %37[ 17 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 17 ]
# CHECK: Vreg: %20[ 8 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %65[ 22 ]
# CHECK: Vreg: %8[ 11 ]
# CHECK: Vreg: %60[ 22 ]
# CHECK: Vreg: %41[ 17 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %43[ 17 ]
# CHECK: Vreg: %24[ 8 ]
# CHECK: Vreg: %31[ 11 ]
# CHECK: Instr: %11:vgpr_32 = GLOBAL_LOAD_UBYTE %10, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 33 ]
# CHECK: Vreg: %28[ 10 ]
# CHECK: Vreg: %9:sub0[ 25 ]
# CHECK: Vreg: %9:sub1[ 26 ]
# CHECK: Vreg: %35[ 14 ]
# CHECK: Vreg: %61[ 21 ]
# CHECK: Vreg: %30[ 10 ]
# CHECK: Vreg: %37[ 16 ]
# CHECK: Vreg: %39[ 16 ]
# CHECK: Vreg: %20[ 7 ]
# CHECK: Vreg: %1[ 27 ]
# CHECK: Vreg: %65[ 21 ]
# CHECK: Vreg: %8[ 10 ]
# CHECK: Vreg: %60[ 21 ]
# CHECK: Vreg: %41[ 16 ]
# CHECK: Vreg: %22[ 7 ]
# CHECK: Vreg: %10:sub0[ 21 ]
# CHECK: Vreg: %10:sub1[ 22 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %43[ 16 ]
# CHECK: Vreg: %24[ 7 ]
# CHECK: Vreg: %31[ 10 ]
# CHECK: Instr: %12:vgpr_32 = GLOBAL_LOAD_UBYTE %10, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 32 ]
# CHECK: Vreg: %28[ 9 ]
# CHECK: Vreg: %9:sub0[ 24 ]
# CHECK: Vreg: %9:sub1[ 25 ]
# CHECK: Vreg: %35[ 13 ]
# CHECK: Vreg: %61[ 20 ]
# CHECK: Vreg: %30[ 9 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %37[ 15 ]
# CHECK: Vreg: %39[ 15 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %1[ 26 ]
# CHECK: Vreg: %65[ 20 ]
# CHECK: Vreg: %8[ 9 ]
# CHECK: Vreg: %60[ 20 ]
# CHECK: Vreg: %41[ 15 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %10:sub0[ 20 ]
# CHECK: Vreg: %10:sub1[ 21 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %43[ 15 ]
# CHECK: Vreg: %24[ 6 ]
# CHECK: Vreg: %31[ 9 ]
# CHECK: Instr: %13:vgpr_32 = V_LSHL_OR_B32_e64 killed %12, 8, killed %11, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 31 ]
# CHECK: Vreg: %28[ 8 ]
# CHECK: Vreg: %9:sub0[ 23 ]
# CHECK: Vreg: %9:sub1[ 24 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %30[ 8 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %39[ 14 ]
# CHECK: Vreg: %20[ 5 ]
# CHECK: Vreg: %1[ 25 ]
# CHECK: Vreg: %65[ 19 ]
# CHECK: Vreg: %8[ 8 ]
# CHECK: Vreg: %60[ 19 ]
# CHECK: Vreg: %41[ 14 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %43[ 14 ]
# CHECK: Vreg: %24[ 5 ]
# CHECK: Vreg: %31[ 8 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %14:vgpr_32 = GLOBAL_LOAD_UBYTE %10, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 30 ]
# CHECK: Vreg: %28[ 7 ]
# CHECK: Vreg: %9:sub0[ 22 ]
# CHECK: Vreg: %9:sub1[ 23 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 18 ]
# CHECK: Vreg: %30[ 7 ]
# CHECK: Vreg: %37[ 13 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %39[ 13 ]
# CHECK: Vreg: %20[ 4 ]
# CHECK: Vreg: %1[ 24 ]
# CHECK: Vreg: %65[ 18 ]
# CHECK: Vreg: %8[ 7 ]
# CHECK: Vreg: %60[ 18 ]
# CHECK: Vreg: %41[ 13 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %10:sub0[ 18 ]
# CHECK: Vreg: %10:sub1[ 19 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %43[ 13 ]
# CHECK: Vreg: %24[ 4 ]
# CHECK: Vreg: %31[ 7 ]
# CHECK: Instr: %15:vgpr_32 = GLOBAL_LOAD_UBYTE %10, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 29 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %28[ 6 ]
# CHECK: Vreg: %9:sub0[ 21 ]
# CHECK: Vreg: %9:sub1[ 22 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %30[ 6 ]
# CHECK: Vreg: %37[ 12 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %39[ 12 ]
# CHECK: Vreg: %20[ 3 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %65[ 17 ]
# CHECK: Vreg: %8[ 6 ]
# CHECK: Vreg: %60[ 17 ]
# CHECK: Vreg: %41[ 12 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %10:sub0[ 17 ]
# CHECK: Vreg: %10:sub1[ 18 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %43[ 12 ]
# CHECK: Vreg: %24[ 3 ]
# CHECK: Vreg: %31[ 6 ]
# CHECK: Instr: %16:vgpr_32 = V_LSHL_OR_B32_e64 killed %15, 8, killed %14, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 28 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %28[ 5 ]
# CHECK: Vreg: %9:sub0[ 20 ]
# CHECK: Vreg: %9:sub1[ 21 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 16 ]
# CHECK: Vreg: %30[ 5 ]
# CHECK: Vreg: %37[ 11 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %39[ 11 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %65[ 16 ]
# CHECK: Vreg: %8[ 5 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %60[ 16 ]
# CHECK: Vreg: %41[ 11 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %10:sub0[ 16 ]
# CHECK: Vreg: %10:sub1[ 17 ]
# CHECK: Vreg: %43[ 11 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Vreg: %31[ 5 ]
# CHECK: Instr: %17:vgpr_32 = V_LSHL_OR_B32_e64 killed %16, 16, killed %13, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 27 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9:sub0[ 19 ]
# CHECK: Vreg: %9:sub1[ 20 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %61[ 15 ]
# CHECK: Vreg: %30[ 4 ]
# CHECK: Vreg: %37[ 10 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %39[ 10 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %65[ 15 ]
# CHECK: Vreg: %8[ 4 ]
# CHECK: Vreg: %60[ 15 ]
# CHECK: Vreg: %41[ 10 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %10:sub0[ 15 ]
# CHECK: Vreg: %10:sub1[ 16 ]
# CHECK: Vreg: %43[ 10 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %31[ 4 ]
# CHECK: Instr: %18:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %19:sreg_32 = PHI %18, %bb.0, %20, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Instr: %21:sreg_32 = PHI %18, %bb.0, %22, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Vreg: %19[ 21 ]
# CHECK: Instr: %23:vgpr_32 = PHI %17, %bb.0, %24, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Vreg: %19[ 21 ]
# CHECK: Instr: %25:vgpr_32 = V_MOV_B32_e32 100, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %28[ 2 ]
# CHECK: Vreg: %9:sub0[ 17 ]
# CHECK: Vreg: %9:sub1[ 18 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %61[ 13 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %30[ 2 ]
# CHECK: Vreg: %37[ 8 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %39[ 8 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %65[ 13 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %60[ 13 ]
# CHECK: Vreg: %41[ 8 ]
# CHECK: Vreg: %10:sub0[ 13 ]
# CHECK: Vreg: %10:sub1[ 14 ]
# CHECK: Vreg: %17[ 23 ]
# CHECK: Vreg: %43[ 8 ]
# CHECK: Vreg: %31[ 2 ]
# CHECK: Vreg: %19[ 20 ]
# CHECK: Instr: %26:vgpr_32 = V_MUL_LO_U32_e64 100, %23, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 24 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %28[ 1 ]
# CHECK: Vreg: %9:sub0[ 16 ]
# CHECK: Vreg: %9:sub1[ 17 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %61[ 12 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %37[ 7 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %39[ 7 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %65[ 12 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %60[ 12 ]
# CHECK: Vreg: %41[ 7 ]
# CHECK: Vreg: %10:sub0[ 12 ]
# CHECK: Vreg: %10:sub1[ 13 ]
# CHECK: Vreg: %17[ 22 ]
# CHECK: Vreg: %43[ 7 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: Vreg: %19[ 19 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %8, %26, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag+23 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ 21 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ 18 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag+24 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag+23 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %8[ 24 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ 21 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ 18 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %27:sreg_32 = PHI %18, %bb.1, %28, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag*2+24 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag*2+23 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ LoopTag+17 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %8[ LoopTag+24 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ LoopTag+21 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+18 ]
# CHECK: Instr: %29:sreg_32 = PHI %18, %bb.1, %30, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag*2+24 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag*2+23 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ LoopTag+17 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %8[ LoopTag+24 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ LoopTag+21 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+18 ]
# CHECK: Instr: %24:vgpr_32 = PHI %25, %bb.1, %31, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag*2+24 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag*2+23 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ LoopTag+17 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %8[ LoopTag+24 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ LoopTag+21 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+18 ]
# CHECK: Instr: %32:sreg_32 = S_MOV_B32 -1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 22 ]
# CHECK: Vreg: %26[ LoopTag*2+23 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %9:sub0[ 14 ]
# CHECK: Vreg: %9:sub1[ 15 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %61[ 10 ]
# CHECK: Vreg: %23[ LoopTag*2+22 ]
# CHECK: Vreg: %37[ 5 ]
# CHECK: Vreg: %18[ 13 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %39[ 5 ]
# CHECK: Vreg: %1[ LoopTag+16 ]
# CHECK: Vreg: %65[ 10 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %8[ LoopTag+23 ]
# CHECK: Vreg: %60[ 10 ]
# CHECK: Vreg: %41[ 5 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10:sub0[ 10 ]
# CHECK: Vreg: %10:sub1[ 11 ]
# CHECK: Vreg: %17[ LoopTag+20 ]
# CHECK: Vreg: %43[ 5 ]
# CHECK: Vreg: %24[ LoopTag+20 ]
# CHECK: Vreg: %19[ LoopTag+17 ]
# CHECK: Instr: %33:sreg_32 = S_MOV_B32 -1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+22 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9:sub0[ 13 ]
# CHECK: Vreg: %9:sub1[ 14 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %23[ LoopTag*2+21 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %32[ 4 ]
# CHECK: Vreg: %39[ 4 ]
# CHECK: Vreg: %1[ LoopTag+15 ]
# CHECK: Vreg: %65[ 9 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %8[ LoopTag+22 ]
# CHECK: Vreg: %60[ 9 ]
# CHECK: Vreg: %41[ 4 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 9 ]
# CHECK: Vreg: %10:sub1[ 10 ]
# CHECK: Vreg: %17[ LoopTag+19 ]
# CHECK: Vreg: %43[ 4 ]
# CHECK: Vreg: %24[ LoopTag+19 ]
# CHECK: Vreg: %19[ LoopTag+16 ]
# CHECK: Instr: S_CMP_GE_U32 %29, %21, implicit-def $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 20 ]
# CHECK: Vreg: %26[ LoopTag*2+21 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9:sub0[ 12 ]
# CHECK: Vreg: %9:sub1[ 13 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %23[ LoopTag*2+20 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %32[ 3 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %1[ LoopTag+14 ]
# CHECK: Vreg: %65[ 8 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %8[ LoopTag+21 ]
# CHECK: Vreg: %60[ 8 ]
# CHECK: Vreg: %41[ 3 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 8 ]
# CHECK: Vreg: %10:sub1[ 9 ]
# CHECK: Vreg: %17[ LoopTag+18 ]
# CHECK: Vreg: %43[ 3 ]
# CHECK: Vreg: %24[ LoopTag+18 ]
# CHECK: Vreg: %19[ LoopTag+15 ]
# CHECK: Instr: %34:sgpr_32 = V_READFIRSTLANE_B32 undef %35:vgpr_32, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %26[ LoopTag*2+20 ]
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %9:sub0[ 11 ]
# CHECK: Vreg: %9:sub1[ 12 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %23[ LoopTag*2+19 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %1[ LoopTag+13 ]
# CHECK: Vreg: %65[ 7 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %8[ LoopTag+20 ]
# CHECK: Vreg: %60[ 7 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %10:sub0[ 7 ]
# CHECK: Vreg: %10:sub1[ 8 ]
# CHECK: Vreg: %17[ LoopTag+17 ]
# CHECK: Vreg: %43[ 2 ]
# CHECK: Vreg: %24[ LoopTag+17 ]
# CHECK: Vreg: %19[ LoopTag+14 ]
# CHECK: Instr: S_CBRANCH_SCC1 %bb.5, implicit killed $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %26[ LoopTag*2+19 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %9:sub0[ 10 ]
# CHECK: Vreg: %9:sub1[ 11 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %23[ LoopTag*2+18 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %32[ 1 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %1[ LoopTag+12 ]
# CHECK: Vreg: %65[ 6 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %8[ LoopTag+19 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %60[ 6 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10:sub0[ 6 ]
# CHECK: Vreg: %10:sub1[ 7 ]
# CHECK: Vreg: %17[ LoopTag+16 ]
# CHECK: Vreg: %43[ 1 ]
# CHECK: Vreg: %24[ LoopTag+16 ]
# CHECK: Vreg: %19[ LoopTag+13 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 5 ]
# CHECK: Vreg: %10:sub1[ 6 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 5 ]
# CHECK: Vreg: %10:sub1[ 6 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %36:sreg_32 = PHI %32, %bb.2, %37, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Instr: %38:vgpr_32 = PHI undef %35:vgpr_32, %bb.2, %39, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Instr: %40:sreg_32 = PHI %34, %bb.2, %41, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %39[ 14 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Instr: %42:sreg_32_xm0_xexec = PHI %33, %bb.2, %43, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %39[ 14 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 14 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Instr: %44:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, killed %42, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 20 ]
# CHECK: Vreg: %26[ LoopTag*2+17 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %9:sub0[ 8 ]
# CHECK: Vreg: %9:sub1[ 9 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 4 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+16 ]
# CHECK: Vreg: %37[ 13 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %39[ 13 ]
# CHECK: Vreg: %1[ LoopTag+10 ]
# CHECK: Vreg: %65[ 4 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %8[ LoopTag+17 ]
# CHECK: Vreg: %60[ 4 ]
# CHECK: Vreg: %41[ 13 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %10:sub0[ 18 ]
# CHECK: Vreg: %10:sub1[ 19 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %17[ LoopTag+14 ]
# CHECK: Vreg: %43[ 13 ]
# CHECK: Vreg: %24[ LoopTag+14 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Vreg: %19[ LoopTag+11 ]
# CHECK: Instr: %45:sreg_32_xm0_xexec = V_CMP_NE_U32_e64 1, killed %44, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 19 ]
# CHECK: Vreg: %26[ LoopTag*2+16 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %9:sub0[ 7 ]
# CHECK: Vreg: %9:sub1[ 8 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %23[ LoopTag*2+15 ]
# CHECK: Vreg: %37[ 12 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %39[ 12 ]
# CHECK: Vreg: %1[ LoopTag+9 ]
# CHECK: Vreg: %65[ 3 ]
# CHECK: Vreg: %27[ 4 ]
# CHECK: Vreg: %8[ LoopTag+16 ]
# CHECK: Vreg: %60[ 3 ]
# CHECK: Vreg: %41[ 12 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %10:sub0[ 17 ]
# CHECK: Vreg: %10:sub1[ 18 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %17[ LoopTag+13 ]
# CHECK: Vreg: %43[ 12 ]
# CHECK: Vreg: %24[ LoopTag+13 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: $vcc_lo = S_AND_B32 $exec_lo, killed %45, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 18 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ LoopTag*2+15 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %9:sub0[ 6 ]
# CHECK: Vreg: %9:sub1[ 7 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %23[ LoopTag*2+14 ]
# CHECK: Vreg: %37[ 11 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %39[ 11 ]
# CHECK: Vreg: %1[ LoopTag+8 ]
# CHECK: Vreg: %65[ 2 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %8[ LoopTag+15 ]
# CHECK: Vreg: %60[ 2 ]
# CHECK: Vreg: %41[ 11 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %10:sub0[ 16 ]
# CHECK: Vreg: %10:sub1[ 17 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %17[ LoopTag+12 ]
# CHECK: Vreg: %43[ 11 ]
# CHECK: Vreg: %24[ LoopTag+12 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Vreg: %19[ LoopTag+9 ]
# CHECK: Instr: S_CBRANCH_VCCNZ %bb.6, implicit killed $vcc_lo, implicit $vcc_lo
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 17 ]
# CHECK: Vreg: %26[ LoopTag*2+14 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %9:sub0[ 5 ]
# CHECK: Vreg: %9:sub1[ 6 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %23[ LoopTag*2+13 ]
# CHECK: Vreg: %37[ 10 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %39[ 10 ]
# CHECK: Vreg: %1[ LoopTag+7 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %8[ LoopTag+14 ]
# CHECK: Vreg: %60[ 1 ]
# CHECK: Vreg: %41[ 10 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10:sub0[ 15 ]
# CHECK: Vreg: %10:sub1[ 16 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ LoopTag+11 ]
# CHECK: Vreg: %43[ 10 ]
# CHECK: Vreg: %24[ LoopTag+11 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Vreg: %19[ LoopTag+8 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 4 ]
# CHECK: Vreg: %9:sub1[ 5 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 4 ]
# CHECK: Vreg: %9:sub1[ 5 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: %46:sreg_32_xm0 = S_ASHR_I32 %29, 31, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %26[ LoopTag*2+32 ]
# CHECK: Vreg: %40[ 19 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %9:sub0[ 3 ]
# CHECK: Vreg: %9:sub1[ 4 ]
# CHECK: Vreg: %35[ 26 ]
# CHECK: Vreg: %23[ LoopTag*2+31 ]
# CHECK: Vreg: %37[ 28 ]
# CHECK: Vreg: %18[ 22 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %39[ 28 ]
# CHECK: Vreg: %1[ LoopTag+25 ]
# CHECK: Vreg: %27[ 20 ]
# CHECK: Vreg: %8[ LoopTag+32 ]
# CHECK: Vreg: %41[ 28 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 33 ]
# CHECK: Vreg: %10:sub1[ 34 ]
# CHECK: Vreg: %36[ 16 ]
# CHECK: Vreg: %17[ LoopTag+29 ]
# CHECK: Vreg: %43[ 28 ]
# CHECK: Vreg: %24[ LoopTag+29 ]
# CHECK: Vreg: %38[ 19 ]
# CHECK: Vreg: %19[ LoopTag+26 ]
# CHECK: Instr: %47:sreg_64 = REG_SEQUENCE %29, %subreg.sub0, killed %46, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %26[ LoopTag*2+31 ]
# CHECK: Vreg: %40[ 18 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9:sub0[ 2 ]
# CHECK: Vreg: %9:sub1[ 3 ]
# CHECK: Vreg: %35[ 25 ]
# CHECK: Vreg: %23[ LoopTag*2+30 ]
# CHECK: Vreg: %37[ 27 ]
# CHECK: Vreg: %18[ 21 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %39[ 27 ]
# CHECK: Vreg: %1[ LoopTag+24 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %27[ 19 ]
# CHECK: Vreg: %8[ LoopTag+31 ]
# CHECK: Vreg: %41[ 27 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 32 ]
# CHECK: Vreg: %10:sub1[ 33 ]
# CHECK: Vreg: %36[ 15 ]
# CHECK: Vreg: %17[ LoopTag+28 ]
# CHECK: Vreg: %43[ 27 ]
# CHECK: Vreg: %24[ LoopTag+28 ]
# CHECK: Vreg: %38[ 18 ]
# CHECK: Vreg: %19[ LoopTag+25 ]
# CHECK: Instr: %48:sreg_64 = nsw S_LSHL_B64 killed %47, 3, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ LoopTag*2+30 ]
# CHECK: Vreg: %40[ 17 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %9:sub0[ 1 ]
# CHECK: Vreg: %9:sub1[ 2 ]
# CHECK: Vreg: %35[ 24 ]
# CHECK: Vreg: %23[ LoopTag*2+29 ]
# CHECK: Vreg: %37[ 26 ]
# CHECK: Vreg: %18[ 20 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %39[ 26 ]
# CHECK: Vreg: %1[ LoopTag+23 ]
# CHECK: Vreg: %27[ 18 ]
# CHECK: Vreg: %8[ LoopTag+30 ]
# CHECK: Vreg: %41[ 26 ]
# CHECK: Vreg: %29[ 12 ]
# CHECK: Vreg: %10:sub0[ 31 ]
# CHECK: Vreg: %10:sub1[ 32 ]
# CHECK: Vreg: %36[ 14 ]
# CHECK: Vreg: %17[ LoopTag+27 ]
# CHECK: Vreg: %43[ 26 ]
# CHECK: Vreg: %24[ LoopTag+27 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Vreg: %19[ LoopTag+24 ]
# CHECK: Instr: %49:vgpr_32, %50:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %9.sub0, %48.sub0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %26[ LoopTag*2+29 ]
# CHECK: Vreg: %40[ 16 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %9:sub0[ 0 ]
# CHECK: Vreg: %9:sub1[ 1 ]
# CHECK: Vreg: %35[ 23 ]
# CHECK: Vreg: %23[ LoopTag*2+28 ]
# CHECK: Vreg: %37[ 25 ]
# CHECK: Vreg: %18[ 19 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %39[ 25 ]
# CHECK: Vreg: %1[ LoopTag+22 ]
# CHECK: Vreg: %27[ 17 ]
# CHECK: Vreg: %8[ LoopTag+29 ]
# CHECK: Vreg: %41[ 25 ]
# CHECK: Vreg: %48:sub0[ 0 ]
# CHECK: Vreg: %48:sub1[ 1 ]
# CHECK: Vreg: %29[ 11 ]
# CHECK: Vreg: %10:sub0[ 30 ]
# CHECK: Vreg: %10:sub1[ 31 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %17[ LoopTag+26 ]
# CHECK: Vreg: %43[ 25 ]
# CHECK: Vreg: %24[ LoopTag+26 ]
# CHECK: Vreg: %38[ 16 ]
# CHECK: Vreg: %19[ LoopTag+23 ]
# CHECK: Instr: %51:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %48.sub1, %9.sub1, killed %50, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %26[ LoopTag*2+28 ]
# CHECK: Vreg: %40[ 15 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %9:sub0[ 33 ]
# CHECK: Vreg: %9:sub1[ 0 ]
# CHECK: Vreg: %35[ 22 ]
# CHECK: Vreg: %23[ LoopTag*2+27 ]
# CHECK: Vreg: %49[ 1 ]
# CHECK: Vreg: %37[ 24 ]
# CHECK: Vreg: %18[ 18 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %39[ 24 ]
# CHECK: Vreg: %1[ LoopTag+21 ]
# CHECK: Vreg: %27[ 16 ]
# CHECK: Vreg: %8[ LoopTag+28 ]
# CHECK: Vreg: %41[ 24 ]
# CHECK: Vreg: %48:sub1[ 0 ]
# CHECK: Vreg: %29[ 10 ]
# CHECK: Vreg: %10:sub0[ 29 ]
# CHECK: Vreg: %10:sub1[ 30 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %17[ LoopTag+25 ]
# CHECK: Vreg: %43[ 24 ]
# CHECK: Vreg: %24[ LoopTag+25 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %38[ 15 ]
# CHECK: Vreg: %19[ LoopTag+22 ]
# CHECK: Instr: %52:vreg_64 = REG_SEQUENCE killed %49, %subreg.sub0, killed %51, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %26[ LoopTag*2+27 ]
# CHECK: Vreg: %40[ 14 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %9:sub0[ 32 ]
# CHECK: Vreg: %9:sub1[ 33 ]
# CHECK: Vreg: %35[ 21 ]
# CHECK: Vreg: %23[ LoopTag*2+26 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %37[ 23 ]
# CHECK: Vreg: %18[ 17 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %39[ 23 ]
# CHECK: Vreg: %1[ LoopTag+20 ]
# CHECK: Vreg: %27[ 15 ]
# CHECK: Vreg: %8[ LoopTag+27 ]
# CHECK: Vreg: %41[ 23 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %10:sub0[ 28 ]
# CHECK: Vreg: %10:sub1[ 29 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %17[ LoopTag+24 ]
# CHECK: Vreg: %43[ 23 ]
# CHECK: Vreg: %24[ LoopTag+24 ]
# CHECK: Vreg: %38[ 14 ]
# CHECK: Vreg: %19[ LoopTag+21 ]
# CHECK: Instr: %53:vgpr_32 = GLOBAL_LOAD_UBYTE %52, 0, 0, implicit $exec :: (load (s8) from %ir.gep1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %26[ LoopTag*2+26 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %40[ 13 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %9:sub0[ 31 ]
# CHECK: Vreg: %9:sub1[ 32 ]
# CHECK: Vreg: %35[ 20 ]
# CHECK: Vreg: %23[ LoopTag*2+25 ]
# CHECK: Vreg: %37[ 22 ]
# CHECK: Vreg: %18[ 16 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %39[ 22 ]
# CHECK: Vreg: %1[ LoopTag+19 ]
# CHECK: Vreg: %27[ 14 ]
# CHECK: Vreg: %8[ LoopTag+26 ]
# CHECK: Vreg: %41[ 22 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %10:sub0[ 27 ]
# CHECK: Vreg: %10:sub1[ 28 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %17[ LoopTag+23 ]
# CHECK: Vreg: %43[ 22 ]
# CHECK: Vreg: %24[ LoopTag+23 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Vreg: %19[ LoopTag+20 ]
# CHECK: Instr: %54:vgpr_32 = GLOBAL_LOAD_UBYTE %52, 1, 0, implicit $exec :: (load (s8) from %ir.gep1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %26[ LoopTag*2+25 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %40[ 12 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 30 ]
# CHECK: Vreg: %9:sub1[ 31 ]
# CHECK: Vreg: %35[ 19 ]
# CHECK: Vreg: %23[ LoopTag*2+24 ]
# CHECK: Vreg: %37[ 21 ]
# CHECK: Vreg: %18[ 15 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %39[ 21 ]
# CHECK: Vreg: %1[ LoopTag+18 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %8[ LoopTag+25 ]
# CHECK: Vreg: %53[ 1 ]
# CHECK: Vreg: %41[ 21 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %10:sub0[ 26 ]
# CHECK: Vreg: %10:sub1[ 27 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %17[ LoopTag+22 ]
# CHECK: Vreg: %43[ 21 ]
# CHECK: Vreg: %24[ LoopTag+22 ]
# CHECK: Vreg: %38[ 12 ]
# CHECK: Vreg: %19[ LoopTag+19 ]
# CHECK: Instr: %55:vgpr_32 = V_LSHL_OR_B32_e64 killed %54, 8, killed %53, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %26[ LoopTag*2+24 ]
# CHECK: Vreg: %52[ 1 ]
# CHECK: Vreg: %40[ 11 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %9:sub0[ 29 ]
# CHECK: Vreg: %9:sub1[ 30 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %35[ 18 ]
# CHECK: Vreg: %23[ LoopTag*2+23 ]
# CHECK: Vreg: %37[ 20 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %39[ 20 ]
# CHECK: Vreg: %1[ LoopTag+17 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %8[ LoopTag+24 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %41[ 20 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 25 ]
# CHECK: Vreg: %10:sub1[ 26 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %17[ LoopTag+21 ]
# CHECK: Vreg: %43[ 20 ]
# CHECK: Vreg: %24[ LoopTag+21 ]
# CHECK: Vreg: %38[ 11 ]
# CHECK: Vreg: %19[ LoopTag+18 ]
# CHECK: Instr: %56:vgpr_32 = GLOBAL_LOAD_UBYTE %52, 2, 0, implicit $exec :: (load (s8) from %ir.gep1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %26[ LoopTag*2+23 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %9:sub0[ 28 ]
# CHECK: Vreg: %9:sub1[ 29 ]
# CHECK: Vreg: %35[ 17 ]
# CHECK: Vreg: %23[ LoopTag*2+22 ]
# CHECK: Vreg: %37[ 19 ]
# CHECK: Vreg: %18[ 13 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %39[ 19 ]
# CHECK: Vreg: %1[ LoopTag+16 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %8[ LoopTag+23 ]
# CHECK: Vreg: %41[ 19 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %10:sub0[ 24 ]
# CHECK: Vreg: %10:sub1[ 25 ]
# CHECK: Vreg: %55[ 3 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %17[ LoopTag+20 ]
# CHECK: Vreg: %43[ 19 ]
# CHECK: Vreg: %24[ LoopTag+20 ]
# CHECK: Vreg: %38[ 10 ]
# CHECK: Vreg: %19[ LoopTag+17 ]
# CHECK: Instr: %57:vgpr_32 = GLOBAL_LOAD_UBYTE killed %52, 3, 0, implicit $exec :: (load (s8) from %ir.gep1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %26[ LoopTag*2+22 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %9:sub0[ 27 ]
# CHECK: Vreg: %9:sub1[ 28 ]
# CHECK: Vreg: %35[ 16 ]
# CHECK: Vreg: %23[ LoopTag*2+21 ]
# CHECK: Vreg: %56[ 1 ]
# CHECK: Vreg: %37[ 18 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %39[ 18 ]
# CHECK: Vreg: %1[ LoopTag+15 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %8[ LoopTag+22 ]
# CHECK: Vreg: %41[ 18 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %10:sub0[ 23 ]
# CHECK: Vreg: %10:sub1[ 24 ]
# CHECK: Vreg: %55[ 2 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %17[ LoopTag+19 ]
# CHECK: Vreg: %43[ 18 ]
# CHECK: Vreg: %24[ LoopTag+19 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Vreg: %19[ LoopTag+16 ]
# CHECK: Instr: %58:vgpr_32 = V_LSHL_OR_B32_e64 killed %57, 8, killed %56, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %26[ LoopTag*2+21 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %9:sub0[ 26 ]
# CHECK: Vreg: %9:sub1[ 27 ]
# CHECK: Vreg: %35[ 15 ]
# CHECK: Vreg: %23[ LoopTag*2+20 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %37[ 17 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %39[ 17 ]
# CHECK: Vreg: %1[ LoopTag+14 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %8[ LoopTag+21 ]
# CHECK: Vreg: %41[ 17 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %10:sub0[ 22 ]
# CHECK: Vreg: %10:sub1[ 23 ]
# CHECK: Vreg: %55[ 1 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %17[ LoopTag+18 ]
# CHECK: Vreg: %43[ 17 ]
# CHECK: Vreg: %24[ LoopTag+18 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Vreg: %19[ LoopTag+15 ]
# CHECK: Instr: %59:vgpr_32 = V_LSHL_OR_B32_e64 killed %58, 16, killed %55, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %26[ LoopTag*2+20 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %9:sub0[ 25 ]
# CHECK: Vreg: %9:sub1[ 26 ]
# CHECK: Vreg: %35[ 14 ]
# CHECK: Vreg: %23[ LoopTag*2+19 ]
# CHECK: Vreg: %37[ 16 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %39[ 16 ]
# CHECK: Vreg: %1[ LoopTag+13 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %8[ LoopTag+20 ]
# CHECK: Vreg: %41[ 16 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10:sub0[ 21 ]
# CHECK: Vreg: %10:sub1[ 22 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %17[ LoopTag+17 ]
# CHECK: Vreg: %43[ 16 ]
# CHECK: Vreg: %24[ LoopTag+17 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Vreg: %19[ LoopTag+14 ]
# CHECK: Instr: %60:vgpr_32 = V_ADD_U32_e64 %21, killed %59, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %26[ LoopTag*2+19 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9:sub0[ 24 ]
# CHECK: Vreg: %9:sub1[ 25 ]
# CHECK: Vreg: %35[ 13 ]
# CHECK: Vreg: %23[ LoopTag*2+18 ]
# CHECK: Vreg: %37[ 15 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %39[ 15 ]
# CHECK: Vreg: %1[ LoopTag+12 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %8[ LoopTag+19 ]
# CHECK: Vreg: %41[ 15 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 20 ]
# CHECK: Vreg: %10:sub1[ 21 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %17[ LoopTag+16 ]
# CHECK: Vreg: %43[ 15 ]
# CHECK: Vreg: %24[ LoopTag+16 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Vreg: %19[ LoopTag+13 ]
# CHECK: Instr: %61:sreg_32 = S_ADD_I32 killed %29, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 23 ]
# CHECK: Vreg: %9:sub1[ 24 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %39[ 14 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 14 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 14 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Instr: %62:sreg_32 = V_CMP_GE_U32_e64 %61, %0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %26[ LoopTag*2+17 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %9:sub0[ 22 ]
# CHECK: Vreg: %9:sub1[ 23 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+16 ]
# CHECK: Vreg: %37[ 13 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %39[ 13 ]
# CHECK: Vreg: %1[ LoopTag+10 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %8[ LoopTag+17 ]
# CHECK: Vreg: %60[ 4 ]
# CHECK: Vreg: %41[ 13 ]
# CHECK: Vreg: %10:sub0[ 18 ]
# CHECK: Vreg: %10:sub1[ 19 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ LoopTag+14 ]
# CHECK: Vreg: %43[ 13 ]
# CHECK: Vreg: %24[ LoopTag+14 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Vreg: %19[ LoopTag+11 ]
# CHECK: Instr: %63:sreg_32 = S_ANDN2_B32 killed %36, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 29 ]
# CHECK: Vreg: %26[ LoopTag*2+16 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %9:sub0[ 21 ]
# CHECK: Vreg: %9:sub1[ 22 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %23[ LoopTag*2+15 ]
# CHECK: Vreg: %37[ 12 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %39[ 12 ]
# CHECK: Vreg: %1[ LoopTag+9 ]
# CHECK: Vreg: %27[ 4 ]
# CHECK: Vreg: %8[ LoopTag+16 ]
# CHECK: Vreg: %60[ 3 ]
# CHECK: Vreg: %41[ 12 ]
# CHECK: Vreg: %10:sub0[ 17 ]
# CHECK: Vreg: %10:sub1[ 18 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ LoopTag+13 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %43[ 12 ]
# CHECK: Vreg: %24[ LoopTag+13 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: %64:sreg_32 = S_AND_B32 killed %62, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 28 ]
# CHECK: Vreg: %26[ LoopTag*2+15 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %9:sub0[ 20 ]
# CHECK: Vreg: %9:sub1[ 21 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %23[ LoopTag*2+14 ]
# CHECK: Vreg: %37[ 11 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %63[ 1 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %39[ 11 ]
# CHECK: Vreg: %1[ LoopTag+8 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %8[ LoopTag+15 ]
# CHECK: Vreg: %60[ 2 ]
# CHECK: Vreg: %41[ 11 ]
# CHECK: Vreg: %10:sub0[ 16 ]
# CHECK: Vreg: %10:sub1[ 17 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %17[ LoopTag+12 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %43[ 11 ]
# CHECK: Vreg: %24[ LoopTag+12 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Vreg: %19[ LoopTag+9 ]
# CHECK: Instr: %65:sreg_32 = S_OR_B32 killed %63, killed %64, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 27 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %26[ LoopTag*2+14 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %9:sub0[ 19 ]
# CHECK: Vreg: %9:sub1[ 20 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %23[ LoopTag*2+13 ]
# CHECK: Vreg: %37[ 10 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %39[ 10 ]
# CHECK: Vreg: %1[ LoopTag+7 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %8[ LoopTag+14 ]
# CHECK: Vreg: %60[ 1 ]
# CHECK: Vreg: %41[ 10 ]
# CHECK: Vreg: %10:sub0[ 15 ]
# CHECK: Vreg: %10:sub1[ 16 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ LoopTag+11 ]
# CHECK: Vreg: %43[ 10 ]
# CHECK: Vreg: %24[ LoopTag+11 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Vreg: %19[ LoopTag+8 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %66:sreg_32 = S_SUB_I32 %29, %21, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 16 ]
# CHECK: Vreg: %26[ LoopTag*2+37 ]
# CHECK: Vreg: %33[ 19 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %9:sub0[ 28 ]
# CHECK: Vreg: %9:sub1[ 29 ]
# CHECK: Vreg: %35[ 19 ]
# CHECK: Vreg: %61[ 24 ]
# CHECK: Vreg: %23[ LoopTag*2+36 ]
# CHECK: Vreg: %18[ 27 ]
# CHECK: Vreg: %25[ 27 ]
# CHECK: Vreg: %32[ 19 ]
# CHECK: Vreg: %1[ LoopTag+30 ]
# CHECK: Vreg: %65[ 24 ]
# CHECK: Vreg: %27[ 25 ]
# CHECK: Vreg: %8[ LoopTag+37 ]
# CHECK: Vreg: %34[ 19 ]
# CHECK: Vreg: %60[ 24 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 4 ]
# CHECK: Vreg: %10:sub1[ 5 ]
# CHECK: Vreg: %17[ LoopTag+34 ]
# CHECK: Vreg: %24[ LoopTag+34 ]
# CHECK: Vreg: %19[ LoopTag+31 ]
# CHECK: Instr: %67:sreg_32_xm0 = S_ASHR_I32 %66, 31, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %26[ LoopTag*2+36 ]
# CHECK: Vreg: %33[ 18 ]
# CHECK: Vreg: %21[ 29 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %9:sub0[ 27 ]
# CHECK: Vreg: %9:sub1[ 28 ]
# CHECK: Vreg: %35[ 18 ]
# CHECK: Vreg: %61[ 23 ]
# CHECK: Vreg: %23[ LoopTag*2+35 ]
# CHECK: Vreg: %18[ 26 ]
# CHECK: Vreg: %25[ 26 ]
# CHECK: Vreg: %32[ 18 ]
# CHECK: Vreg: %1[ LoopTag+29 ]
# CHECK: Vreg: %65[ 23 ]
# CHECK: Vreg: %27[ 24 ]
# CHECK: Vreg: %8[ LoopTag+36 ]
# CHECK: Vreg: %34[ 18 ]
# CHECK: Vreg: %60[ 23 ]
# CHECK: Vreg: %29[ 13 ]
# CHECK: Vreg: %10:sub0[ 3 ]
# CHECK: Vreg: %10:sub1[ 4 ]
# CHECK: Vreg: %17[ LoopTag+33 ]
# CHECK: Vreg: %24[ LoopTag+33 ]
# CHECK: Vreg: %19[ LoopTag+30 ]
# CHECK: Instr: %68:sreg_64 = REG_SEQUENCE killed %66, %subreg.sub0, killed %67, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %26[ LoopTag*2+35 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %21[ 28 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %9:sub0[ 26 ]
# CHECK: Vreg: %9:sub1[ 27 ]
# CHECK: Vreg: %35[ 17 ]
# CHECK: Vreg: %61[ 22 ]
# CHECK: Vreg: %23[ LoopTag*2+34 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %25[ 25 ]
# CHECK: Vreg: %32[ 17 ]
# CHECK: Vreg: %1[ LoopTag+28 ]
# CHECK: Vreg: %65[ 22 ]
# CHECK: Vreg: %27[ 23 ]
# CHECK: Vreg: %8[ LoopTag+35 ]
# CHECK: Vreg: %34[ 17 ]
# CHECK: Vreg: %60[ 22 ]
# CHECK: Vreg: %67[ 0 ]
# CHECK: Vreg: %29[ 12 ]
# CHECK: Vreg: %10:sub0[ 2 ]
# CHECK: Vreg: %10:sub1[ 3 ]
# CHECK: Vreg: %17[ LoopTag+32 ]
# CHECK: Vreg: %24[ LoopTag+32 ]
# CHECK: Vreg: %19[ LoopTag+29 ]
# CHECK: Instr: %69:sreg_64 = nsw S_LSHL_B64 killed %68, 3, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %26[ LoopTag*2+34 ]
# CHECK: Vreg: %33[ 16 ]
# CHECK: Vreg: %21[ 27 ]
# CHECK: Vreg: %9:sub0[ 25 ]
# CHECK: Vreg: %9:sub1[ 26 ]
# CHECK: Vreg: %35[ 16 ]
# CHECK: Vreg: %61[ 21 ]
# CHECK: Vreg: %23[ LoopTag*2+33 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %18[ 24 ]
# CHECK: Vreg: %25[ 24 ]
# CHECK: Vreg: %32[ 16 ]
# CHECK: Vreg: %1[ LoopTag+27 ]
# CHECK: Vreg: %65[ 21 ]
# CHECK: Vreg: %27[ 22 ]
# CHECK: Vreg: %8[ LoopTag+34 ]
# CHECK: Vreg: %34[ 16 ]
# CHECK: Vreg: %60[ 21 ]
# CHECK: Vreg: %29[ 11 ]
# CHECK: Vreg: %10:sub0[ 1 ]
# CHECK: Vreg: %10:sub1[ 2 ]
# CHECK: Vreg: %17[ LoopTag+31 ]
# CHECK: Vreg: %24[ LoopTag+31 ]
# CHECK: Vreg: %19[ LoopTag+28 ]
# CHECK: Instr: %70:vgpr_32, %71:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %10.sub0, %69.sub0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %26[ LoopTag*2+33 ]
# CHECK: Vreg: %33[ 15 ]
# CHECK: Vreg: %21[ 26 ]
# CHECK: Vreg: %9:sub0[ 24 ]
# CHECK: Vreg: %9:sub1[ 25 ]
# CHECK: Vreg: %35[ 15 ]
# CHECK: Vreg: %61[ 20 ]
# CHECK: Vreg: %23[ LoopTag*2+32 ]
# CHECK: Vreg: %18[ 23 ]
# CHECK: Vreg: %25[ 23 ]
# CHECK: Vreg: %32[ 15 ]
# CHECK: Vreg: %1[ LoopTag+26 ]
# CHECK: Vreg: %65[ 20 ]
# CHECK: Vreg: %27[ 21 ]
# CHECK: Vreg: %8[ LoopTag+33 ]
# CHECK: Vreg: %34[ 15 ]
# CHECK: Vreg: %60[ 20 ]
# CHECK: Vreg: %29[ 10 ]
# CHECK: Vreg: %10:sub0[ 0 ]
# CHECK: Vreg: %10:sub1[ 1 ]
# CHECK: Vreg: %17[ LoopTag+30 ]
# CHECK: Vreg: %24[ LoopTag+30 ]
# CHECK: Vreg: %69:sub0[ 0 ]
# CHECK: Vreg: %69:sub1[ 1 ]
# CHECK: Vreg: %19[ LoopTag+27 ]
# CHECK: Instr: %72:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %69.sub1, %10.sub1, killed %71, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %26[ LoopTag*2+32 ]
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %33[ 14 ]
# CHECK: Vreg: %21[ 25 ]
# CHECK: Vreg: %9:sub0[ 23 ]
# CHECK: Vreg: %9:sub1[ 24 ]
# CHECK: Vreg: %35[ 14 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %23[ LoopTag*2+31 ]
# CHECK: Vreg: %18[ 22 ]
# CHECK: Vreg: %25[ 22 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %32[ 14 ]
# CHECK: Vreg: %1[ LoopTag+25 ]
# CHECK: Vreg: %65[ 19 ]
# CHECK: Vreg: %27[ 20 ]
# CHECK: Vreg: %8[ LoopTag+32 ]
# CHECK: Vreg: %34[ 14 ]
# CHECK: Vreg: %60[ 19 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %10:sub0[ 33 ]
# CHECK: Vreg: %10:sub1[ 0 ]
# CHECK: Vreg: %17[ LoopTag+29 ]
# CHECK: Vreg: %24[ LoopTag+29 ]
# CHECK: Vreg: %69:sub1[ 0 ]
# CHECK: Vreg: %19[ LoopTag+26 ]
# CHECK: Instr: %73:vreg_64 = REG_SEQUENCE killed %70, %subreg.sub0, killed %72, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %26[ LoopTag*2+31 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %21[ 24 ]
# CHECK: Vreg: %9:sub0[ 22 ]
# CHECK: Vreg: %9:sub1[ 23 ]
# CHECK: Vreg: %35[ 13 ]
# CHECK: Vreg: %61[ 18 ]
# CHECK: Vreg: %23[ LoopTag*2+30 ]
# CHECK: Vreg: %18[ 21 ]
# CHECK: Vreg: %25[ 21 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %32[ 13 ]
# CHECK: Vreg: %1[ LoopTag+24 ]
# CHECK: Vreg: %65[ 18 ]
# CHECK: Vreg: %27[ 19 ]
# CHECK: Vreg: %8[ LoopTag+31 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 13 ]
# CHECK: Vreg: %60[ 18 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %10:sub0[ 32 ]
# CHECK: Vreg: %10:sub1[ 33 ]
# CHECK: Vreg: %17[ LoopTag+28 ]
# CHECK: Vreg: %24[ LoopTag+28 ]
# CHECK: Vreg: %19[ LoopTag+25 ]
# CHECK: Instr: %74:vgpr_32 = GLOBAL_LOAD_UBYTE %73, 0, 0, implicit $exec :: (load (s8) from %ir.gep2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %26[ LoopTag*2+30 ]
# CHECK: Vreg: %33[ 12 ]
# CHECK: Vreg: %21[ 23 ]
# CHECK: Vreg: %9:sub0[ 21 ]
# CHECK: Vreg: %9:sub1[ 22 ]
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %23[ LoopTag*2+29 ]
# CHECK: Vreg: %18[ 20 ]
# CHECK: Vreg: %25[ 20 ]
# CHECK: Vreg: %32[ 12 ]
# CHECK: Vreg: %1[ LoopTag+23 ]
# CHECK: Vreg: %65[ 17 ]
# CHECK: Vreg: %27[ 18 ]
# CHECK: Vreg: %8[ LoopTag+30 ]
# CHECK: Vreg: %34[ 12 ]
# CHECK: Vreg: %60[ 17 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %10:sub0[ 31 ]
# CHECK: Vreg: %10:sub1[ 32 ]
# CHECK: Vreg: %17[ LoopTag+27 ]
# CHECK: Vreg: %24[ LoopTag+27 ]
# CHECK: Vreg: %19[ LoopTag+24 ]
# CHECK: Instr: %75:vgpr_32 = GLOBAL_LOAD_UBYTE %73, 1, 0, implicit $exec :: (load (s8) from %ir.gep2 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %26[ LoopTag*2+29 ]
# CHECK: Vreg: %33[ 11 ]
# CHECK: Vreg: %21[ 22 ]
# CHECK: Vreg: %9:sub0[ 20 ]
# CHECK: Vreg: %9:sub1[ 21 ]
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 16 ]
# CHECK: Vreg: %23[ LoopTag*2+28 ]
# CHECK: Vreg: %18[ 19 ]
# CHECK: Vreg: %25[ 19 ]
# CHECK: Vreg: %32[ 11 ]
# CHECK: Vreg: %1[ LoopTag+22 ]
# CHECK: Vreg: %65[ 16 ]
# CHECK: Vreg: %27[ 17 ]
# CHECK: Vreg: %8[ LoopTag+29 ]
# CHECK: Vreg: %34[ 11 ]
# CHECK: Vreg: %60[ 16 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 30 ]
# CHECK: Vreg: %10:sub1[ 31 ]
# CHECK: Vreg: %74[ 1 ]
# CHECK: Vreg: %17[ LoopTag+26 ]
# CHECK: Vreg: %24[ LoopTag+26 ]
# CHECK: Vreg: %19[ LoopTag+23 ]
# CHECK: Instr: %76:vgpr_32 = V_LSHL_OR_B32_e64 killed %75, 8, killed %74, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %26[ LoopTag*2+28 ]
# CHECK: Vreg: %33[ 10 ]
# CHECK: Vreg: %21[ 21 ]
# CHECK: Vreg: %9:sub0[ 19 ]
# CHECK: Vreg: %9:sub1[ 20 ]
# CHECK: Vreg: %73[ 1 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 15 ]
# CHECK: Vreg: %23[ LoopTag*2+27 ]
# CHECK: Vreg: %75[ 0 ]
# CHECK: Vreg: %18[ 18 ]
# CHECK: Vreg: %25[ 18 ]
# CHECK: Vreg: %32[ 10 ]
# CHECK: Vreg: %1[ LoopTag+21 ]
# CHECK: Vreg: %65[ 15 ]
# CHECK: Vreg: %27[ 16 ]
# CHECK: Vreg: %8[ LoopTag+28 ]
# CHECK: Vreg: %34[ 10 ]
# CHECK: Vreg: %60[ 15 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %10:sub0[ 29 ]
# CHECK: Vreg: %10:sub1[ 30 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %17[ LoopTag+25 ]
# CHECK: Vreg: %24[ LoopTag+25 ]
# CHECK: Vreg: %19[ LoopTag+22 ]
# CHECK: Instr: %77:vgpr_32 = GLOBAL_LOAD_UBYTE %73, 2, 0, implicit $exec :: (load (s8) from %ir.gep2 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %26[ LoopTag*2+27 ]
# CHECK: Vreg: %33[ 9 ]
# CHECK: Vreg: %21[ 20 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %23[ LoopTag*2+26 ]
# CHECK: Vreg: %18[ 17 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %32[ 9 ]
# CHECK: Vreg: %1[ LoopTag+20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %27[ 15 ]
# CHECK: Vreg: %8[ LoopTag+27 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %10:sub0[ 28 ]
# CHECK: Vreg: %10:sub1[ 29 ]
# CHECK: Vreg: %17[ LoopTag+24 ]
# CHECK: Vreg: %24[ LoopTag+24 ]
# CHECK: Vreg: %76[ 3 ]
# CHECK: Vreg: %19[ LoopTag+21 ]
# CHECK: Instr: %78:vgpr_32 = GLOBAL_LOAD_UBYTE killed %73, 3, 0, implicit $exec :: (load (s8) from %ir.gep2 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %26[ LoopTag*2+26 ]
# CHECK: Vreg: %33[ 8 ]
# CHECK: Vreg: %21[ 19 ]
# CHECK: Vreg: %9:sub0[ 17 ]
# CHECK: Vreg: %9:sub1[ 18 ]
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %61[ 13 ]
# CHECK: Vreg: %23[ LoopTag*2+25 ]
# CHECK: Vreg: %18[ 16 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %32[ 8 ]
# CHECK: Vreg: %77[ 1 ]
# CHECK: Vreg: %1[ LoopTag+19 ]
# CHECK: Vreg: %65[ 13 ]
# CHECK: Vreg: %27[ 14 ]
# CHECK: Vreg: %8[ LoopTag+26 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %60[ 13 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %10:sub0[ 27 ]
# CHECK: Vreg: %10:sub1[ 28 ]
# CHECK: Vreg: %17[ LoopTag+23 ]
# CHECK: Vreg: %24[ LoopTag+23 ]
# CHECK: Vreg: %76[ 2 ]
# CHECK: Vreg: %19[ LoopTag+20 ]
# CHECK: Instr: %79:vgpr_32 = V_LSHL_OR_B32_e64 killed %78, 8, killed %77, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %26[ LoopTag*2+25 ]
# CHECK: Vreg: %33[ 7 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %21[ 18 ]
# CHECK: Vreg: %9:sub0[ 16 ]
# CHECK: Vreg: %9:sub1[ 17 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 12 ]
# CHECK: Vreg: %23[ LoopTag*2+24 ]
# CHECK: Vreg: %18[ 15 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %32[ 7 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %1[ LoopTag+18 ]
# CHECK: Vreg: %65[ 12 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %8[ LoopTag+25 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %60[ 12 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %10:sub0[ 26 ]
# CHECK: Vreg: %10:sub1[ 27 ]
# CHECK: Vreg: %17[ LoopTag+22 ]
# CHECK: Vreg: %24[ LoopTag+22 ]
# CHECK: Vreg: %76[ 1 ]
# CHECK: Vreg: %19[ LoopTag+19 ]
# CHECK: Instr: %80:vgpr_32 = V_LSHL_OR_B32_e64 killed %79, 16, killed %76, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %26[ LoopTag*2+24 ]
# CHECK: Vreg: %33[ 6 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag*2+23 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %32[ 6 ]
# CHECK: Vreg: %1[ LoopTag+17 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %8[ LoopTag+24 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %79[ 0 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %10:sub0[ 25 ]
# CHECK: Vreg: %10:sub1[ 26 ]
# CHECK: Vreg: %17[ LoopTag+21 ]
# CHECK: Vreg: %24[ LoopTag+21 ]
# CHECK: Vreg: %76[ 0 ]
# CHECK: Vreg: %19[ LoopTag+18 ]
# CHECK: Instr: %39:vgpr_32 = V_SUBREV_U32_e64 %29, killed %80, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %26[ LoopTag*2+23 ]
# CHECK: Vreg: %33[ 5 ]
# CHECK: Vreg: %21[ 16 ]
# CHECK: Vreg: %9:sub0[ 14 ]
# CHECK: Vreg: %9:sub1[ 15 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %80[ 0 ]
# CHECK: Vreg: %61[ 10 ]
# CHECK: Vreg: %23[ LoopTag*2+22 ]
# CHECK: Vreg: %18[ 13 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %32[ 5 ]
# CHECK: Vreg: %1[ LoopTag+16 ]
# CHECK: Vreg: %65[ 10 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %8[ LoopTag+23 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %60[ 10 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 24 ]
# CHECK: Vreg: %10:sub1[ 25 ]
# CHECK: Vreg: %17[ LoopTag+20 ]
# CHECK: Vreg: %24[ LoopTag+20 ]
# CHECK: Vreg: %19[ LoopTag+17 ]
# CHECK: Instr: %41:sreg_32 = S_ADD_I32 %29, 2, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %26[ LoopTag*2+22 ]
# CHECK: Vreg: %33[ 4 ]
# CHECK: Vreg: %21[ 15 ]
# CHECK: Vreg: %9:sub0[ 13 ]
# CHECK: Vreg: %9:sub1[ 14 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %23[ LoopTag*2+21 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %32[ 4 ]
# CHECK: Vreg: %39[ 4 ]
# CHECK: Vreg: %1[ LoopTag+15 ]
# CHECK: Vreg: %65[ 9 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %8[ LoopTag+22 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %60[ 9 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %10:sub0[ 23 ]
# CHECK: Vreg: %10:sub1[ 24 ]
# CHECK: Vreg: %17[ LoopTag+19 ]
# CHECK: Vreg: %24[ LoopTag+19 ]
# CHECK: Vreg: %19[ LoopTag+16 ]
# CHECK: Instr: %81:sreg_32 = V_CMP_GE_U32_e64 %41, %0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %26[ LoopTag*2+21 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %21[ 14 ]
# CHECK: Vreg: %9:sub0[ 12 ]
# CHECK: Vreg: %9:sub1[ 13 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %23[ LoopTag*2+20 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %32[ 3 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %1[ LoopTag+14 ]
# CHECK: Vreg: %65[ 8 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %8[ LoopTag+21 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %60[ 8 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %10:sub0[ 22 ]
# CHECK: Vreg: %10:sub1[ 23 ]
# CHECK: Vreg: %17[ LoopTag+18 ]
# CHECK: Vreg: %24[ LoopTag+18 ]
# CHECK: Vreg: %19[ LoopTag+15 ]
# CHECK: Instr: %43:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag*2+20 ]
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %9:sub0[ 11 ]
# CHECK: Vreg: %9:sub1[ 12 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %23[ LoopTag*2+19 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %32[ 2 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %1[ LoopTag+13 ]
# CHECK: Vreg: %65[ 7 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %8[ LoopTag+20 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %60[ 7 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %10:sub0[ 21 ]
# CHECK: Vreg: %10:sub1[ 22 ]
# CHECK: Vreg: %17[ LoopTag+17 ]
# CHECK: Vreg: %81[ 1 ]
# CHECK: Vreg: %24[ LoopTag+17 ]
# CHECK: Vreg: %19[ LoopTag+14 ]
# CHECK: Instr: %37:sreg_32 = S_ORN2_B32 killed %81, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 22 ]
# CHECK: Vreg: %26[ LoopTag*2+19 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %9:sub0[ 10 ]
# CHECK: Vreg: %9:sub1[ 11 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %23[ LoopTag*2+18 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %32[ 1 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %1[ LoopTag+12 ]
# CHECK: Vreg: %65[ 6 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %8[ LoopTag+19 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %60[ 6 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %10:sub0[ 20 ]
# CHECK: Vreg: %10:sub1[ 21 ]
# CHECK: Vreg: %17[ LoopTag+16 ]
# CHECK: Vreg: %81[ 0 ]
# CHECK: Vreg: %43[ 1 ]
# CHECK: Vreg: %24[ LoopTag+16 ]
# CHECK: Vreg: %19[ LoopTag+13 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 21 ]
# CHECK: Vreg: %26[ LoopTag*2+18 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %9:sub0[ 9 ]
# CHECK: Vreg: %9:sub1[ 10 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %23[ LoopTag*2+17 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ LoopTag+11 ]
# CHECK: Vreg: %65[ 5 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %8[ LoopTag+18 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %60[ 5 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %17[ LoopTag+15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %24[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %82:sreg_32 = PHI %36, %bb.3, %65, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Instr: %31:vgpr_32 = PHI %38, %bb.3, %60, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %82[ 1 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Instr: %30:sreg_32 = PHI %40, %bb.3, %61, %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag*2+13 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %23[ LoopTag*2+12 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %82[ 1 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ LoopTag+6 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ LoopTag+13 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ LoopTag+10 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Instr: %28:sreg_32 = SI_IF_BREAK killed %82, killed %27, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %26[ LoopTag*2+12 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %9:sub0[ 17 ]
# CHECK: Vreg: %9:sub1[ 18 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %61[ 13 ]
# CHECK: Vreg: %23[ LoopTag*2+11 ]
# CHECK: Vreg: %30[ 2 ]
# CHECK: Vreg: %37[ 8 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %82[ 0 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %39[ 8 ]
# CHECK: Vreg: %1[ LoopTag+5 ]
# CHECK: Vreg: %65[ 13 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %8[ LoopTag+12 ]
# CHECK: Vreg: %60[ 13 ]
# CHECK: Vreg: %41[ 8 ]
# CHECK: Vreg: %10:sub0[ 13 ]
# CHECK: Vreg: %10:sub1[ 14 ]
# CHECK: Vreg: %17[ LoopTag+9 ]
# CHECK: Vreg: %43[ 8 ]
# CHECK: Vreg: %24[ LoopTag+9 ]
# CHECK: Vreg: %31[ 2 ]
# CHECK: Vreg: %19[ LoopTag+6 ]
# CHECK: Instr: SI_LOOP %28, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 24 ]
# CHECK: Vreg: %26[ LoopTag*2+11 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 16 ]
# CHECK: Vreg: %9:sub1[ 17 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %61[ 12 ]
# CHECK: Vreg: %23[ LoopTag*2+10 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %37[ 7 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %39[ 7 ]
# CHECK: Vreg: %1[ LoopTag+4 ]
# CHECK: Vreg: %65[ 12 ]
# CHECK: Vreg: %8[ LoopTag+11 ]
# CHECK: Vreg: %60[ 12 ]
# CHECK: Vreg: %41[ 7 ]
# CHECK: Vreg: %10:sub0[ 12 ]
# CHECK: Vreg: %10:sub1[ 13 ]
# CHECK: Vreg: %17[ LoopTag+8 ]
# CHECK: Vreg: %43[ 7 ]
# CHECK: Vreg: %24[ LoopTag+8 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: Vreg: %19[ LoopTag+5 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag*2+10 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag*2+9 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ LoopTag+3 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %8[ LoopTag+10 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ LoopTag+7 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %24[ LoopTag+7 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+4 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %26[ LoopTag*2+10 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 15 ]
# CHECK: Vreg: %9:sub1[ 16 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %23[ LoopTag*2+9 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ LoopTag+3 ]
# CHECK: Vreg: %65[ 11 ]
# CHECK: Vreg: %8[ LoopTag+10 ]
# CHECK: Vreg: %60[ 11 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %10:sub0[ 11 ]
# CHECK: Vreg: %10:sub1[ 12 ]
# CHECK: Vreg: %17[ LoopTag+7 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %24[ LoopTag+7 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+4 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: SI_END_CF killed %28, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 32 ]
# CHECK: Vreg: %26[ LoopTag+9 ]
# CHECK: Vreg: %19[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %9:sub0[ 24 ]
# CHECK: Vreg: %9:sub1[ 25 ]
# CHECK: Vreg: %35[ 13 ]
# CHECK: Vreg: %61[ 20 ]
# CHECK: Vreg: %23[ LoopTag+8 ]
# CHECK: Vreg: %30[ 9 ]
# CHECK: Vreg: %37[ 15 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %39[ 15 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %65[ 20 ]
# CHECK: Vreg: %8[ 9 ]
# CHECK: Vreg: %60[ 20 ]
# CHECK: Vreg: %41[ 15 ]
# CHECK: Vreg: %10:sub0[ 20 ]
# CHECK: Vreg: %10:sub1[ 21 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %43[ 15 ]
# CHECK: Vreg: %24[ 6 ]
# CHECK: Vreg: %31[ 9 ]
# CHECK: Instr: %22:sreg_32 = S_ADD_I32 killed %21, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 31 ]
# CHECK: Vreg: %26[ LoopTag+8 ]
# CHECK: Vreg: %19[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %28[ 8 ]
# CHECK: Vreg: %9:sub0[ 23 ]
# CHECK: Vreg: %9:sub1[ 24 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %23[ LoopTag+7 ]
# CHECK: Vreg: %30[ 8 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %39[ 14 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %65[ 19 ]
# CHECK: Vreg: %8[ 8 ]
# CHECK: Vreg: %60[ 19 ]
# CHECK: Vreg: %41[ 14 ]
# CHECK: Vreg: %10:sub0[ 19 ]
# CHECK: Vreg: %10:sub1[ 20 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %43[ 14 ]
# CHECK: Vreg: %24[ 5 ]
# CHECK: Vreg: %31[ 8 ]
# CHECK: Instr: %83:sreg_32 = V_CMP_GE_U32_e64 %22, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 30 ]
# CHECK: Vreg: %26[ LoopTag+7 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Vreg: %28[ 7 ]
# CHECK: Vreg: %9:sub0[ 22 ]
# CHECK: Vreg: %9:sub1[ 23 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 18 ]
# CHECK: Vreg: %23[ LoopTag+6 ]
# CHECK: Vreg: %30[ 7 ]
# CHECK: Vreg: %37[ 13 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %39[ 13 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %65[ 18 ]
# CHECK: Vreg: %8[ 7 ]
# CHECK: Vreg: %60[ 18 ]
# CHECK: Vreg: %41[ 13 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 18 ]
# CHECK: Vreg: %10:sub1[ 19 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %43[ 13 ]
# CHECK: Vreg: %24[ 4 ]
# CHECK: Vreg: %31[ 7 ]
# CHECK: Instr: %20:sreg_32 = SI_IF_BREAK killed %83, killed %19, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 29 ]
# CHECK: Vreg: %26[ LoopTag+6 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Vreg: %28[ 6 ]
# CHECK: Vreg: %9:sub0[ 21 ]
# CHECK: Vreg: %9:sub1[ 22 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %23[ LoopTag+5 ]
# CHECK: Vreg: %30[ 6 ]
# CHECK: Vreg: %37[ 12 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %39[ 12 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %65[ 17 ]
# CHECK: Vreg: %8[ 6 ]
# CHECK: Vreg: %60[ 17 ]
# CHECK: Vreg: %41[ 12 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %10:sub0[ 17 ]
# CHECK: Vreg: %10:sub1[ 18 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %43[ 12 ]
# CHECK: Vreg: %24[ 3 ]
# CHECK: Vreg: %31[ 6 ]
# CHECK: Vreg: %83[ 0 ]
# CHECK: Instr: %84:vgpr_32 = COPY %22, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 28 ]
# CHECK: Vreg: %26[ LoopTag+5 ]
# CHECK: Vreg: %28[ 5 ]
# CHECK: Vreg: %9:sub0[ 20 ]
# CHECK: Vreg: %9:sub1[ 21 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 16 ]
# CHECK: Vreg: %23[ LoopTag+4 ]
# CHECK: Vreg: %30[ 5 ]
# CHECK: Vreg: %37[ 11 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %39[ 11 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %65[ 16 ]
# CHECK: Vreg: %8[ 5 ]
# CHECK: Vreg: %60[ 16 ]
# CHECK: Vreg: %41[ 11 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 16 ]
# CHECK: Vreg: %10:sub1[ 17 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %43[ 11 ]
# CHECK: Vreg: %24[ 2 ]
# CHECK: Vreg: %31[ 5 ]
# CHECK: Instr: SI_LOOP %20, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 27 ]
# CHECK: Vreg: %26[ LoopTag+4 ]
# CHECK: Vreg: %28[ 4 ]
# CHECK: Vreg: %9:sub0[ 19 ]
# CHECK: Vreg: %9:sub1[ 20 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %61[ 15 ]
# CHECK: Vreg: %23[ LoopTag+3 ]
# CHECK: Vreg: %30[ 4 ]
# CHECK: Vreg: %37[ 10 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %39[ 10 ]
# CHECK: Vreg: %84[ LoopTag+3 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %65[ 15 ]
# CHECK: Vreg: %8[ 4 ]
# CHECK: Vreg: %60[ 15 ]
# CHECK: Vreg: %41[ 10 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %10:sub0[ 15 ]
# CHECK: Vreg: %10:sub1[ 16 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %43[ 10 ]
# CHECK: Vreg: %24[ 1 ]
# CHECK: Vreg: %31[ 4 ]
# CHECK: Instr: S_BRANCH %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag+3 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %23[ LoopTag+2 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %84[ LoopTag+2 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 26 ]
# CHECK: Vreg: %26[ LoopTag+3 ]
# CHECK: Vreg: %28[ 3 ]
# CHECK: Vreg: %9:sub0[ 18 ]
# CHECK: Vreg: %9:sub1[ 19 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %23[ LoopTag+2 ]
# CHECK: Vreg: %30[ 3 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %84[ LoopTag+2 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %65[ 14 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %60[ 14 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %10:sub0[ 14 ]
# CHECK: Vreg: %10:sub1[ 15 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %31[ 3 ]
# CHECK: --- MBB_8 ---
# CHECK: Instr: SI_END_CF killed %20, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %84[ 1 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Instr: %85:vgpr_32 = V_ADD3_U32_e64 killed %23, killed %84, killed %17, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %84[ 0 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Instr: %86:vgpr_32 = V_ADD3_U32_e64 killed %85, killed %26, 100, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Instr: %87:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %86, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %86[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %87
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %87[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i32 @test10(ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, i32 %TC1, i32 %TC2) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  %add1 = add i32 %ld1, 100
  br label %1
  1:
  %phi.inc1 = phi i32 [ 0, %0 ], [ %inc1, %7 ]
  %phi1 = phi i32 [ %ld1, %0 ], [ %phi2, %7 ]
  br label %2
  2:
  %mul = mul i32 %phi1, 100
  store i32 %mul, ptr addrspace(1) %p3
  br label %3
  3:
  %phi.inc2 = phi i32 [ 0, %2 ], [ %inc2, %4 ], [ %inc3, %6 ]
  %phi2 = phi i32 [ 100, %2 ], [ %add2, %4 ], [ %sub2, %6 ]
  %cond1 = icmp ugt i32 %phi.inc1, %phi.inc2
  br i1 %cond1, label %4, label %5
  4:
  %sext1 = sext i32 %phi.inc2 to i64
  %gep1 = getelementptr inbounds i64, ptr addrspace(1) %p2, i64 %sext1
  %ld2 = load i32, ptr addrspace(1) %gep1, align 1
  %add2 = add i32 %ld2, %phi.inc1
  %inc2 = add i32 %phi.inc2, 1
  %cond2 = icmp ult i32 %inc2, %TC2
  br i1 %cond2, label %3, label %7
  5:
  %sub1 = sub i32 %phi.inc2, %phi.inc1
  %sext2 = sext i32 %sub1 to i64
  %gep2 = getelementptr inbounds i64, ptr addrspace(1) %p1, i64 %sext2
  %ld3 = load i32, ptr addrspace(1) %gep2, align 1
  %sub2 = sub i32 %ld3, %phi.inc2
  br label %6
  6:
  %inc3 = add i32 %phi.inc2, 2
  %cond3 = icmp ult i32 %inc3, %TC2
  br i1 %cond3, label %3, label %7
  7:
  %inc1 = add i32 %phi.inc1, 1
  %add3 = add i32 %phi1, %inc1
  %cond4 = icmp ult i32 %inc1, %TC1
  br i1 %cond4, label %1, label %8
  8:
  %add4 = add i32 %add3, %add1
  %add5 = add i32 %add4, %mul
  ret i32 %add5
  }
...

---
name:            test10
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6, $vgpr7
  
    %37:vgpr_32 = COPY killed $vgpr7
    %36:vgpr_32 = COPY killed $vgpr6
    %35:vgpr_32 = COPY killed $vgpr5
    %34:vgpr_32 = COPY killed $vgpr4
    %33:vgpr_32 = COPY killed $vgpr3
    %32:vgpr_32 = COPY killed $vgpr2
    %31:vgpr_32 = COPY killed $vgpr1
    %30:vgpr_32 = COPY killed $vgpr0
    %118:vreg_64 = REG_SEQUENCE killed %34, %subreg.sub0, killed %35, %subreg.sub1
    %117:vreg_64 = REG_SEQUENCE killed %32, %subreg.sub0, killed %33, %subreg.sub1
    %116:vreg_64 = REG_SEQUENCE killed %30, %subreg.sub0, killed %31, %subreg.sub1
    %45:vgpr_32 = GLOBAL_LOAD_UBYTE %116, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %47:vgpr_32 = GLOBAL_LOAD_UBYTE %116, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %50:vgpr_32 = V_LSHL_OR_B32_e64 killed %47, 8, killed %45, implicit $exec
    %51:vgpr_32 = GLOBAL_LOAD_UBYTE %116, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %53:vgpr_32 = GLOBAL_LOAD_UBYTE %116, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %55:vgpr_32 = V_LSHL_OR_B32_e64 killed %53, 8, killed %51, implicit $exec
    %0:vgpr_32 = V_LSHL_OR_B32_e64 killed %55, 16, killed %50, implicit $exec
    %41:sreg_32 = S_MOV_B32 0
  
  bb.1:
    successors: %bb.2(0x80000000)
  
    %1:sreg_32 = PHI %41, %bb.0, %25, %bb.7
    %2:sreg_32 = PHI %41, %bb.0, %24, %bb.7
    %3:vgpr_32 = PHI %0, %bb.0, %7, %bb.7
    %58:vgpr_32 = V_MOV_B32_e32 100, implicit $exec
    %4:vgpr_32 = V_MUL_LO_U32_e64 100, %3, implicit $exec
    GLOBAL_STORE_DWORD %118, %4, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
  
  bb.2:
    successors: %bb.5(0x40000000), %bb.3(0x40000000)
  
    %5:sreg_32 = PHI %41, %bb.1, %21, %bb.6
    %6:sreg_32 = PHI %41, %bb.1, %19, %bb.6
    %7:vgpr_32 = PHI %58, %bb.1, %18, %bb.6
    %61:sreg_32 = S_MOV_B32 -1
    %60:sreg_32 = S_MOV_B32 -1
    S_CMP_GE_U32 %6, %2, implicit-def $scc
    %114:sgpr_32 = V_READFIRSTLANE_B32 undef %59:vgpr_32, implicit $exec
    S_CBRANCH_SCC1 %bb.5, implicit killed $scc
    S_BRANCH %bb.3
  
  bb.3:
    successors: %bb.4(0x40000000), %bb.6(0x40000000)
  
    %10:sreg_32 = PHI %61, %bb.2, %120, %bb.5
    %8:vgpr_32 = PHI undef %59:vgpr_32, %bb.2, %15, %bb.5
    %9:sreg_32 = PHI %114, %bb.2, %16, %bb.5
    %11:sreg_32_xm0_xexec = PHI %60, %bb.2, %62, %bb.5
    %81:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, 1, killed %11, implicit $exec
    %115:sreg_32_xm0_xexec = V_CMP_NE_U32_e64 1, killed %81, implicit $exec
    $vcc_lo = S_AND_B32 $exec_lo, killed %115, implicit-def dead $scc
    S_CBRANCH_VCCNZ %bb.6, implicit killed $vcc_lo, implicit $vcc
    S_BRANCH %bb.4
  
  bb.4:
    successors: %bb.6(0x80000000)
  
    %84:sreg_32_xm0 = S_ASHR_I32 %6, 31, implicit-def dead $scc
    %86:sreg_64 = REG_SEQUENCE %6, %subreg.sub0, killed %84, %subreg.sub1
    %88:sreg_64 = nsw S_LSHL_B64 killed %86, 3, implicit-def dead $scc
    %126:vgpr_32, %128:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %117.sub0, %88.sub0, 0, implicit $exec
    %127:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %88.sub1, %117.sub1, killed %128, 0, implicit $exec
    %89:vreg_64 = REG_SEQUENCE killed %126, %subreg.sub0, killed %127, %subreg.sub1
    %90:vgpr_32 = GLOBAL_LOAD_UBYTE %89, 0, 0, implicit $exec :: (load (s8) from %ir.gep1, addrspace 1)
    %91:vgpr_32 = GLOBAL_LOAD_UBYTE %89, 1, 0, implicit $exec :: (load (s8) from %ir.gep1 + 1, addrspace 1)
    %93:vgpr_32 = V_LSHL_OR_B32_e64 killed %91, 8, killed %90, implicit $exec
    %94:vgpr_32 = GLOBAL_LOAD_UBYTE %89, 2, 0, implicit $exec :: (load (s8) from %ir.gep1 + 2, addrspace 1)
    %95:vgpr_32 = GLOBAL_LOAD_UBYTE killed %89, 3, 0, implicit $exec :: (load (s8) from %ir.gep1 + 3, addrspace 1)
    %96:vgpr_32 = V_LSHL_OR_B32_e64 killed %95, 8, killed %94, implicit $exec
    %98:vgpr_32 = V_LSHL_OR_B32_e64 killed %96, 16, killed %93, implicit $exec
    %12:vgpr_32 = V_ADD_U32_e64 %2, killed %98, 0, implicit $exec
    %13:sreg_32 = S_ADD_I32 killed %6, 1, implicit-def dead $scc
    %100:sreg_32 = V_CMP_GE_U32_e64 %13, %37, implicit $exec
    %123:sreg_32 = S_ANDN2_B32 killed %10, $exec_lo, implicit-def dead $scc
    %124:sreg_32 = S_AND_B32 killed %100, $exec_lo, implicit-def dead $scc
    %122:sreg_32 = S_OR_B32 killed %123, killed %124, implicit-def dead $scc
    S_BRANCH %bb.6
  
  bb.5:
    successors: %bb.3(0x80000000)
  
    %63:sreg_32 = S_SUB_I32 %6, %2, implicit-def dead $scc
    %64:sreg_32_xm0 = S_ASHR_I32 %63, 31, implicit-def dead $scc
    %66:sreg_64 = REG_SEQUENCE killed %63, %subreg.sub0, killed %64, %subreg.sub1
    %68:sreg_64 = nsw S_LSHL_B64 killed %66, 3, implicit-def dead $scc
    %134:vgpr_32, %136:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %116.sub0, %68.sub0, 0, implicit $exec
    %135:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %68.sub1, %116.sub1, killed %136, 0, implicit $exec
    %69:vreg_64 = REG_SEQUENCE killed %134, %subreg.sub0, killed %135, %subreg.sub1
    %70:vgpr_32 = GLOBAL_LOAD_UBYTE %69, 0, 0, implicit $exec :: (load (s8) from %ir.gep2, addrspace 1)
    %71:vgpr_32 = GLOBAL_LOAD_UBYTE %69, 1, 0, implicit $exec :: (load (s8) from %ir.gep2 + 1, addrspace 1)
    %73:vgpr_32 = V_LSHL_OR_B32_e64 killed %71, 8, killed %70, implicit $exec
    %74:vgpr_32 = GLOBAL_LOAD_UBYTE %69, 2, 0, implicit $exec :: (load (s8) from %ir.gep2 + 2, addrspace 1)
    %75:vgpr_32 = GLOBAL_LOAD_UBYTE killed %69, 3, 0, implicit $exec :: (load (s8) from %ir.gep2 + 3, addrspace 1)
    %76:vgpr_32 = V_LSHL_OR_B32_e64 killed %75, 8, killed %74, implicit $exec
    %78:vgpr_32 = V_LSHL_OR_B32_e64 killed %76, 16, killed %73, implicit $exec
    %15:vgpr_32 = V_SUBREV_U32_e64 %6, killed %78, 0, implicit $exec
    %16:sreg_32 = S_ADD_I32 %6, 2, implicit-def dead $scc
    %80:sreg_32 = V_CMP_GE_U32_e64 %16, %37, implicit $exec
    %62:sreg_32 = S_MOV_B32 0
    %120:sreg_32 = S_ORN2_B32 killed %80, $exec_lo, implicit-def dead $scc
    S_BRANCH %bb.3
  
  bb.6:
    successors: %bb.7(0x04000000), %bb.2(0x7c000000)
  
    %20:sreg_32 = PHI %10, %bb.3, %122, %bb.4
    %18:vgpr_32 = PHI %8, %bb.3, %12, %bb.4
    %19:sreg_32 = PHI %9, %bb.3, %13, %bb.4
    %21:sreg_32 = SI_IF_BREAK killed %20, killed %5, implicit-def dead $scc
    SI_LOOP %21, %bb.2, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.7
  
  bb.7:
    successors: %bb.8(0x04000000), %bb.1(0x7c000000)
  
    SI_END_CF killed %21, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %24:sreg_32 = S_ADD_I32 killed %2, 1, implicit-def dead $scc
    %103:sreg_32 = V_CMP_GE_U32_e64 %24, %36, implicit $exec
    %25:sreg_32 = SI_IF_BREAK killed %103, killed %1, implicit-def dead $scc
    %119:vgpr_32 = COPY %24, implicit $exec
    SI_LOOP %25, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.8
  
  bb.8:
    SI_END_CF killed %25, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %104:vgpr_32 = V_ADD3_U32_e64 killed %3, killed %119, killed %0, implicit $exec
    %106:vgpr_32 = V_ADD3_U32_e64 killed %104, killed %4, 100, implicit $exec
    %107:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %106, implicit $exec
    $sgpr0 = COPY killed %107
    SI_RETURN_TO_EPILOG killed $sgpr0
...
---
