# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s


# CHECK-LABEL: === NextUseAnalysis Results for test2 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %27:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %90[ 12 ]
# CHECK: Vreg: %97[ 10 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %92[ 13 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 10 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %101[ 8 ]
# CHECK: Vreg: %39[ 12 ]
# CHECK: Vreg: %22[ 12 ]
# CHECK: Vreg: %3[ 8 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %5[ 10 ]
# CHECK: Vreg: %95[ 10 ]
# CHECK: Instr: %26:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %90[ 11 ]
# CHECK: Vreg: %97[ 9 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %92[ 12 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %101[ 7 ]
# CHECK: Vreg: %39[ 11 ]
# CHECK: Vreg: %27[ 14 ]
# CHECK: Vreg: %22[ 11 ]
# CHECK: Vreg: %3[ 7 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %17[ 12 ]
# CHECK: Vreg: %5[ 9 ]
# CHECK: Vreg: %95[ 9 ]
# CHECK: Instr: %25:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %90[ 10 ]
# CHECK: Vreg: %97[ 8 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %92[ 11 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %101[ 6 ]
# CHECK: Vreg: %39[ 10 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %22[ 10 ]
# CHECK: Vreg: %3[ 6 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %17[ 11 ]
# CHECK: Vreg: %5[ 8 ]
# CHECK: Vreg: %95[ 8 ]
# CHECK: Instr: %24:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %90[ 9 ]
# CHECK: Vreg: %97[ 7 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %92[ 10 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %101[ 5 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %22[ 9 ]
# CHECK: Vreg: %3[ 5 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %17[ 10 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Vreg: %95[ 7 ]
# CHECK: Instr: %32:vgpr_32 = V_AND_B32_e64 1, killed %24, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %90[ 8 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %101[ 4 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %39[ 8 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: Instr: %33:sreg_32 = V_CMP_NE_U32_e64 1, killed %32, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %90[ 7 ]
# CHECK: Vreg: %97[ 5 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %92[ 8 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 7 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %22[ 7 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Vreg: %5[ 5 ]
# CHECK: Vreg: %95[ 5 ]
# CHECK: Instr: %34:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %90[ 6 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %97[ 4 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %92[ 7 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %61[ 4 ]
# CHECK: Vreg: %11[ 10 ]
# CHECK: Vreg: %101[ 2 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Vreg: %95[ 4 ]
# CHECK: Instr: %1:sreg_32 = SI_IF %33, %bb.8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %90[ 5 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %97[ 3 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %92[ 6 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %11[ 9 ]
# CHECK: Vreg: %101[ 1 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %39[ 5 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %95[ 3 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %90[ 4 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %39[ 4 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %90[ 4 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %39[ 4 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %4:sreg_32 = PHI %37, %bb.3, %90, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: Instr: %2:vreg_64 = PHI undef %35:vreg_64, %bb.3, %22, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: Instr: %3:vreg_64 = PHI %6, %bb.3, undef %39:vreg_64, %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: Instr: SI_END_CF killed %7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %33[ 16 ]
# CHECK: Vreg: %97[ 5 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %92[ 8 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Vreg: %5[ 5 ]
# CHECK: Vreg: %95[ 5 ]
# CHECK: Instr: %102:sreg_32 = S_AND_B32 killed %4, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %33[ 15 ]
# CHECK: Vreg: %97[ 4 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %92[ 7 ]
# CHECK: Vreg: %61[ 4 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %11[ 10 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Vreg: %95[ 4 ]
# CHECK: Instr: %101:sreg_32 = COPY killed %102
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %33[ 14 ]
# CHECK: Vreg: %97[ 3 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %92[ 6 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %11[ 9 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %95[ 3 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Instr: S_BRANCH %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: %63:vgpr_32 = DS_READ_U16_gfx9 %25, 0, 0, implicit $exec :: (load (s16) from %ir.p, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 16 ]
# CHECK: Vreg: %33[ 10 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %92[ 15 ]
# CHECK: Vreg: %61[ 12 ]
# CHECK: Vreg: %11[ 18 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %20[ 9 ]
# CHECK: Vreg: %27[ 17 ]
# CHECK: Vreg: %34[ 12 ]
# CHECK: Vreg: %17[ 15 ]
# CHECK: Vreg: %19[ 12 ]
# CHECK: Instr: %64:vgpr_32 = DS_READ_U16_gfx9 %25, 2, 0, implicit $exec :: (load (s16) from %ir.p + 2, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 15 ]
# CHECK: Vreg: %33[ 9 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %92[ 14 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %11[ 17 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %63[ 4 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %20[ 8 ]
# CHECK: Vreg: %27[ 16 ]
# CHECK: Vreg: %34[ 11 ]
# CHECK: Vreg: %17[ 14 ]
# CHECK: Vreg: %19[ 11 ]
# CHECK: Instr: %65:vgpr_32 = DS_READ_U16_gfx9 %25, 4, 0, implicit $exec :: (load (s16) from %ir.p + 4, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 3 ]
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %33[ 8 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %92[ 13 ]
# CHECK: Vreg: %61[ 10 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %63[ 3 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %20[ 7 ]
# CHECK: Vreg: %27[ 15 ]
# CHECK: Vreg: %34[ 10 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %19[ 10 ]
# CHECK: Instr: %66:vgpr_32 = DS_READ_U16_gfx9 %25, 6, 0, implicit $exec :: (load (s16) from %ir.p + 6, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 2 ]
# CHECK: Vreg: %26[ 13 ]
# CHECK: Vreg: %33[ 7 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %92[ 12 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %63[ 2 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %20[ 6 ]
# CHECK: Vreg: %65[ 1 ]
# CHECK: Vreg: %27[ 14 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %17[ 12 ]
# CHECK: Vreg: %19[ 9 ]
# CHECK: Instr: %68:vgpr_32 = V_LSHL_OR_B32_e64 killed %66, 16, killed %65, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %33[ 6 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %92[ 11 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %63[ 1 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %20[ 5 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %17[ 11 ]
# CHECK: Vreg: %19[ 8 ]
# CHECK: Instr: %69:vgpr_32 = V_LSHL_OR_B32_e64 killed %64, 16, killed %63, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %33[ 5 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %92[ 10 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %68[ 1 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %20[ 4 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %17[ 10 ]
# CHECK: Vreg: %19[ 7 ]
# CHECK: Instr: %88:vreg_64 = REG_SEQUENCE killed %69, %subreg.sub0, killed %68, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %33[ 4 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %20[ 3 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %69[ 0 ]
# CHECK: Vreg: %19[ 6 ]
# CHECK: Instr: %5:vreg_64 = COPY killed %88
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %33[ 3 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %92[ 8 ]
# CHECK: Vreg: %61[ 5 ]
# CHECK: Vreg: %11[ 11 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Vreg: %19[ 5 ]
# CHECK: Instr: %95:sreg_32 = COPY $exec_lo
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %92[ 7 ]
# CHECK: Vreg: %61[ 4 ]
# CHECK: Vreg: %11[ 10 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Vreg: %19[ 4 ]
# CHECK: Instr: %98:sreg_32 = S_ANDN2_B32 killed %20, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %92[ 6 ]
# CHECK: Vreg: %61[ 3 ]
# CHECK: Vreg: %11[ 9 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %95[ 3 ]
# CHECK: Vreg: %19[ 3 ]
# CHECK: Instr: %99:sreg_32 = S_AND_B32 killed %33, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %98[ 1 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Vreg: %19[ 2 ]
# CHECK: Instr: %97:sreg_32 = S_OR_B32 killed %98, killed %99, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %92[ 4 ]
# CHECK: Vreg: %99[ 0 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %95[ 1 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %6:vreg_64 = DS_READ_B64_gfx9 %25, 8, 0, implicit $exec :: (load (s64) from %ir.gep2, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 13 ]
# CHECK: Vreg: %33[ 2 ]
# CHECK: Vreg: %97[ 9 ]
# CHECK: Vreg: %90[ 3 ]
# CHECK: Vreg: %92[ 12 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %27[ 14 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %17[ 12 ]
# CHECK: Vreg: %5[ 9 ]
# CHECK: Vreg: %95[ 9 ]
# CHECK: Instr: %37:sreg_32 = S_MOV_B32 -1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %33[ 1 ]
# CHECK: Vreg: %97[ 8 ]
# CHECK: Vreg: %90[ 2 ]
# CHECK: Vreg: %92[ 11 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %17[ 11 ]
# CHECK: Vreg: %5[ 8 ]
# CHECK: Vreg: %95[ 8 ]
# CHECK: Instr: %7:sreg_32 = SI_IF %33, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %97[ 7 ]
# CHECK: Vreg: %90[ 1 ]
# CHECK: Vreg: %92[ 10 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %17[ 10 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Vreg: %95[ 7 ]
# CHECK: Instr: S_BRANCH %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: %9:sreg_32 = PHI %14, %bb.6, %92, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: %8:vreg_64 = PHI %12, %bb.6, %17, %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Instr: SI_END_CF killed %16, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Instr: %10:sreg_32 = SI_IF killed %9, %bb.10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 3 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %27[ 4 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %76:vreg_64 = DS_READ2_B32_gfx9 killed %25, 6, 7, 0, implicit $exec :: (load (s64) from %ir.gep3, align 4, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %8[ 4 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Instr: %104:vgpr_32, %106:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %76.sub0, killed %26, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %76:sub0[ 0 ]
# CHECK: Vreg: %76:sub1[ 1 ]
# CHECK: Instr: %105:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %76.sub1, killed %27, killed %106, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %104[ 1 ]
# CHECK: Vreg: %106[ 0 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %76:sub1[ 0 ]
# CHECK: Instr: %11:vreg_64 = REG_SEQUENCE killed %104, %subreg.sub0, killed %105, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %104[ 0 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %105[ 0 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Instr: S_BRANCH %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %15:sreg_32 = PHI %20, %bb.8, %97, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %14:sreg_32 = PHI %34, %bb.8, %95, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %12:vreg_64 = PHI %18, %bb.8, undef %61:vreg_64, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %13:vreg_64 = PHI %19, %bb.8, %5, %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 3 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: SI_END_CF killed %21, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 3 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %92[ 2 ]
# CHECK: Vreg: %11[ 5 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %13:sub0[ 3 ]
# CHECK: Vreg: %13:sub1[ 4 ]
# CHECK: Vreg: %27[ 4 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Instr: %16:sreg_32 = SI_IF killed %15, %bb.4, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %92[ 1 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %13:sub0[ 2 ]
# CHECK: Vreg: %13:sub1[ 3 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %13:sub0[ 1 ]
# CHECK: Vreg: %13:sub1[ 2 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %13:sub0[ 1 ]
# CHECK: Vreg: %13:sub1[ 2 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: %112:vgpr_32, %114:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %13.sub0, %26, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %16[ 6 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %13:sub0[ 0 ]
# CHECK: Vreg: %13:sub1[ 1 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %12[ 5 ]
# CHECK: Instr: %113:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %13.sub1, %27, killed %114, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %16[ 5 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %13:sub1[ 0 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %112[ 1 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Vreg: %12[ 4 ]
# CHECK: Instr: %17:vreg_64 = REG_SEQUENCE killed %112, %subreg.sub0, killed %113, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %16[ 4 ]
# CHECK: Vreg: %113[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %112[ 0 ]
# CHECK: Vreg: %12[ 3 ]
# CHECK: Instr: %93:sreg_32 = S_ANDN2_B32 killed %14, $exec_lo, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %16[ 3 ]
# CHECK: Vreg: %11[ 5 ]
# CHECK: Vreg: %25[ 6 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Instr: %92:sreg_32 = COPY killed %93
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %16[ 2 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %25[ 5 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %25[ 4 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: --- MBB_8 ---
# CHECK: Instr: %20:sreg_32 = PHI %34, %bb.0, %101, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Instr: %18:vreg_64 = PHI undef %29:vreg_64, %bb.0, %2, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Instr: %19:vreg_64 = PHI undef %29:vreg_64, %bb.0, %3, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %33[ 13 ]
# CHECK: Vreg: %97[ 2 ]
# CHECK: Vreg: %92[ 5 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %20[ 2 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Instr: %21:sreg_32 = SI_ELSE killed %1, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %33[ 12 ]
# CHECK: Vreg: %97[ 1 ]
# CHECK: Vreg: %92[ 4 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %95[ 1 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: S_BRANCH %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %33[ 11 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %33[ 11 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %92[ 3 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: --- MBB_9 ---
# CHECK: Instr: %41:vgpr_32 = DS_READ_U8_gfx9 %25, 32, 0, implicit $exec :: (load (s8) from %ir.gep4, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 14 ]
# CHECK: Vreg: %7[ 19 ]
# CHECK: Vreg: %33[ 35 ]
# CHECK: Vreg: %97[ 24 ]
# CHECK: Vreg: %92[ 27 ]
# CHECK: Vreg: %35[ 18 ]
# CHECK: Vreg: %61[ 24 ]
# CHECK: Vreg: %11[ 30 ]
# CHECK: Vreg: %37[ 18 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 18 ]
# CHECK: Vreg: %39[ 18 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %27[ 15 ]
# CHECK: Vreg: %34[ 22 ]
# CHECK: Vreg: %29[ 22 ]
# CHECK: Vreg: %17[ 27 ]
# CHECK: Vreg: %5[ 24 ]
# CHECK: Vreg: %95[ 24 ]
# CHECK: Instr: %42:vgpr_32 = DS_READ_U8_gfx9 %25, 33, 0, implicit $exec :: (load (s8) from %ir.gep4 + 1, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 13 ]
# CHECK: Vreg: %7[ 18 ]
# CHECK: Vreg: %33[ 34 ]
# CHECK: Vreg: %97[ 23 ]
# CHECK: Vreg: %92[ 26 ]
# CHECK: Vreg: %35[ 17 ]
# CHECK: Vreg: %61[ 23 ]
# CHECK: Vreg: %11[ 29 ]
# CHECK: Vreg: %37[ 17 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 17 ]
# CHECK: Vreg: %39[ 17 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %27[ 14 ]
# CHECK: Vreg: %34[ 21 ]
# CHECK: Vreg: %41[ 10 ]
# CHECK: Vreg: %29[ 21 ]
# CHECK: Vreg: %17[ 26 ]
# CHECK: Vreg: %5[ 23 ]
# CHECK: Vreg: %95[ 23 ]
# CHECK: Instr: %43:vgpr_32 = DS_READ_U8_gfx9 %25, 34, 0, implicit $exec :: (load (s8) from %ir.gep4 + 2, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %7[ 17 ]
# CHECK: Vreg: %33[ 33 ]
# CHECK: Vreg: %97[ 22 ]
# CHECK: Vreg: %92[ 25 ]
# CHECK: Vreg: %35[ 16 ]
# CHECK: Vreg: %61[ 22 ]
# CHECK: Vreg: %42[ 9 ]
# CHECK: Vreg: %11[ 28 ]
# CHECK: Vreg: %37[ 16 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 16 ]
# CHECK: Vreg: %39[ 16 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %34[ 20 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %29[ 20 ]
# CHECK: Vreg: %17[ 25 ]
# CHECK: Vreg: %5[ 22 ]
# CHECK: Vreg: %95[ 22 ]
# CHECK: Instr: %44:vgpr_32 = DS_READ_U8_gfx9 %25, 35, 0, implicit $exec :: (load (s8) from %ir.gep4 + 3, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %7[ 16 ]
# CHECK: Vreg: %33[ 32 ]
# CHECK: Vreg: %97[ 21 ]
# CHECK: Vreg: %92[ 24 ]
# CHECK: Vreg: %35[ 15 ]
# CHECK: Vreg: %61[ 21 ]
# CHECK: Vreg: %42[ 8 ]
# CHECK: Vreg: %11[ 27 ]
# CHECK: Vreg: %37[ 15 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 15 ]
# CHECK: Vreg: %39[ 15 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %34[ 19 ]
# CHECK: Vreg: %41[ 8 ]
# CHECK: Vreg: %29[ 19 ]
# CHECK: Vreg: %17[ 24 ]
# CHECK: Vreg: %43[ 9 ]
# CHECK: Vreg: %5[ 21 ]
# CHECK: Vreg: %95[ 21 ]
# CHECK: Instr: %45:vgpr_32 = DS_READ_U8_gfx9 %25, 36, 0, implicit $exec :: (load (s8) from %ir.gep4 + 4, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 15 ]
# CHECK: Vreg: %33[ 31 ]
# CHECK: Vreg: %97[ 20 ]
# CHECK: Vreg: %92[ 23 ]
# CHECK: Vreg: %35[ 14 ]
# CHECK: Vreg: %61[ 20 ]
# CHECK: Vreg: %42[ 7 ]
# CHECK: Vreg: %11[ 26 ]
# CHECK: Vreg: %37[ 14 ]
# CHECK: Vreg: %44[ 8 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 14 ]
# CHECK: Vreg: %39[ 14 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 18 ]
# CHECK: Vreg: %41[ 7 ]
# CHECK: Vreg: %29[ 18 ]
# CHECK: Vreg: %17[ 23 ]
# CHECK: Vreg: %43[ 8 ]
# CHECK: Vreg: %5[ 20 ]
# CHECK: Vreg: %95[ 20 ]
# CHECK: Instr: %46:vgpr_32 = DS_READ_U8_gfx9 %25, 37, 0, implicit $exec :: (load (s8) from %ir.gep4 + 5, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 3 ]
# CHECK: Vreg: %26[ 9 ]
# CHECK: Vreg: %7[ 14 ]
# CHECK: Vreg: %33[ 30 ]
# CHECK: Vreg: %97[ 19 ]
# CHECK: Vreg: %92[ 22 ]
# CHECK: Vreg: %35[ 13 ]
# CHECK: Vreg: %61[ 19 ]
# CHECK: Vreg: %42[ 6 ]
# CHECK: Vreg: %11[ 25 ]
# CHECK: Vreg: %37[ 13 ]
# CHECK: Vreg: %44[ 7 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 13 ]
# CHECK: Vreg: %39[ 13 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %27[ 10 ]
# CHECK: Vreg: %34[ 17 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %29[ 17 ]
# CHECK: Vreg: %17[ 22 ]
# CHECK: Vreg: %43[ 7 ]
# CHECK: Vreg: %5[ 19 ]
# CHECK: Vreg: %95[ 19 ]
# CHECK: Instr: %47:vgpr_32 = DS_READ_U8_gfx9 %25, 38, 0, implicit $exec :: (load (s8) from %ir.gep4 + 6, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 2 ]
# CHECK: Vreg: %26[ 8 ]
# CHECK: Vreg: %7[ 13 ]
# CHECK: Vreg: %33[ 29 ]
# CHECK: Vreg: %97[ 18 ]
# CHECK: Vreg: %92[ 21 ]
# CHECK: Vreg: %35[ 12 ]
# CHECK: Vreg: %61[ 18 ]
# CHECK: Vreg: %42[ 5 ]
# CHECK: Vreg: %11[ 24 ]
# CHECK: Vreg: %37[ 12 ]
# CHECK: Vreg: %44[ 6 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 12 ]
# CHECK: Vreg: %39[ 12 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %46[ 2 ]
# CHECK: Vreg: %27[ 9 ]
# CHECK: Vreg: %34[ 16 ]
# CHECK: Vreg: %41[ 5 ]
# CHECK: Vreg: %29[ 16 ]
# CHECK: Vreg: %17[ 21 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %5[ 18 ]
# CHECK: Vreg: %95[ 18 ]
# CHECK: Instr: %48:vgpr_32 = DS_READ_U8_gfx9 %25, 39, 0, implicit $exec :: (load (s8) from %ir.gep4 + 7, addrspace 3)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 1 ]
# CHECK: Vreg: %26[ 7 ]
# CHECK: Vreg: %7[ 12 ]
# CHECK: Vreg: %33[ 28 ]
# CHECK: Vreg: %97[ 17 ]
# CHECK: Vreg: %47[ 2 ]
# CHECK: Vreg: %92[ 20 ]
# CHECK: Vreg: %35[ 11 ]
# CHECK: Vreg: %61[ 17 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %11[ 23 ]
# CHECK: Vreg: %37[ 11 ]
# CHECK: Vreg: %44[ 5 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %6[ 11 ]
# CHECK: Vreg: %39[ 11 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %27[ 8 ]
# CHECK: Vreg: %34[ 15 ]
# CHECK: Vreg: %41[ 4 ]
# CHECK: Vreg: %29[ 15 ]
# CHECK: Vreg: %17[ 20 ]
# CHECK: Vreg: %43[ 5 ]
# CHECK: Vreg: %5[ 17 ]
# CHECK: Vreg: %95[ 17 ]
# CHECK: Instr: %50:vgpr_32 = V_LSHL_OR_B32_e64 killed %46, 8, killed %45, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %26[ 6 ]
# CHECK: Vreg: %7[ 11 ]
# CHECK: Vreg: %33[ 27 ]
# CHECK: Vreg: %97[ 16 ]
# CHECK: Vreg: %47[ 1 ]
# CHECK: Vreg: %92[ 19 ]
# CHECK: Vreg: %35[ 10 ]
# CHECK: Vreg: %61[ 16 ]
# CHECK: Vreg: %42[ 3 ]
# CHECK: Vreg: %11[ 22 ]
# CHECK: Vreg: %37[ 10 ]
# CHECK: Vreg: %44[ 4 ]
# CHECK: Vreg: %25[ 17 ]
# CHECK: Vreg: %6[ 10 ]
# CHECK: Vreg: %39[ 10 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %27[ 7 ]
# CHECK: Vreg: %34[ 14 ]
# CHECK: Vreg: %41[ 3 ]
# CHECK: Vreg: %48[ 1 ]
# CHECK: Vreg: %29[ 14 ]
# CHECK: Vreg: %17[ 19 ]
# CHECK: Vreg: %43[ 4 ]
# CHECK: Vreg: %5[ 16 ]
# CHECK: Vreg: %95[ 16 ]
# CHECK: Instr: %51:vgpr_32 = V_LSHL_OR_B32_e64 killed %48, 8, killed %47, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 5 ]
# CHECK: Vreg: %7[ 10 ]
# CHECK: Vreg: %33[ 26 ]
# CHECK: Vreg: %97[ 15 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %92[ 18 ]
# CHECK: Vreg: %35[ 9 ]
# CHECK: Vreg: %61[ 15 ]
# CHECK: Vreg: %42[ 2 ]
# CHECK: Vreg: %11[ 21 ]
# CHECK: Vreg: %37[ 9 ]
# CHECK: Vreg: %44[ 3 ]
# CHECK: Vreg: %25[ 16 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %39[ 9 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %27[ 6 ]
# CHECK: Vreg: %34[ 13 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ 13 ]
# CHECK: Vreg: %17[ 18 ]
# CHECK: Vreg: %43[ 3 ]
# CHECK: Vreg: %5[ 15 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %95[ 15 ]
# CHECK: Instr: %53:vgpr_32 = V_LSHL_OR_B32_e64 killed %51, 16, killed %50, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 4 ]
# CHECK: Vreg: %7[ 9 ]
# CHECK: Vreg: %33[ 25 ]
# CHECK: Vreg: %97[ 14 ]
# CHECK: Vreg: %92[ 17 ]
# CHECK: Vreg: %35[ 8 ]
# CHECK: Vreg: %61[ 14 ]
# CHECK: Vreg: %42[ 1 ]
# CHECK: Vreg: %11[ 20 ]
# CHECK: Vreg: %37[ 8 ]
# CHECK: Vreg: %44[ 2 ]
# CHECK: Vreg: %25[ 15 ]
# CHECK: Vreg: %6[ 8 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %39[ 8 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %27[ 5 ]
# CHECK: Vreg: %34[ 12 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %29[ 12 ]
# CHECK: Vreg: %17[ 17 ]
# CHECK: Vreg: %43[ 2 ]
# CHECK: Vreg: %5[ 14 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %95[ 14 ]
# CHECK: Instr: %54:vgpr_32 = V_LSHL_OR_B32_e64 killed %42, 8, killed %41, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 3 ]
# CHECK: Vreg: %7[ 8 ]
# CHECK: Vreg: %33[ 24 ]
# CHECK: Vreg: %97[ 13 ]
# CHECK: Vreg: %92[ 16 ]
# CHECK: Vreg: %35[ 7 ]
# CHECK: Vreg: %61[ 13 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %11[ 19 ]
# CHECK: Vreg: %37[ 7 ]
# CHECK: Vreg: %44[ 1 ]
# CHECK: Vreg: %25[ 14 ]
# CHECK: Vreg: %6[ 7 ]
# CHECK: Vreg: %39[ 7 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %27[ 4 ]
# CHECK: Vreg: %53[ 4 ]
# CHECK: Vreg: %34[ 11 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %29[ 11 ]
# CHECK: Vreg: %17[ 16 ]
# CHECK: Vreg: %43[ 1 ]
# CHECK: Vreg: %5[ 13 ]
# CHECK: Vreg: %95[ 13 ]
# CHECK: Instr: %55:vgpr_32 = V_LSHL_OR_B32_e64 killed %44, 8, killed %43, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 2 ]
# CHECK: Vreg: %7[ 7 ]
# CHECK: Vreg: %33[ 23 ]
# CHECK: Vreg: %97[ 12 ]
# CHECK: Vreg: %92[ 15 ]
# CHECK: Vreg: %54[ 1 ]
# CHECK: Vreg: %35[ 6 ]
# CHECK: Vreg: %61[ 12 ]
# CHECK: Vreg: %11[ 18 ]
# CHECK: Vreg: %37[ 6 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %25[ 13 ]
# CHECK: Vreg: %6[ 6 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %27[ 3 ]
# CHECK: Vreg: %53[ 3 ]
# CHECK: Vreg: %34[ 10 ]
# CHECK: Vreg: %29[ 10 ]
# CHECK: Vreg: %17[ 15 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %5[ 12 ]
# CHECK: Vreg: %95[ 12 ]
# CHECK: Instr: %56:vgpr_32 = V_LSHL_OR_B32_e64 killed %55, 16, killed %54, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %33[ 22 ]
# CHECK: Vreg: %97[ 11 ]
# CHECK: Vreg: %92[ 14 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %35[ 5 ]
# CHECK: Vreg: %61[ 11 ]
# CHECK: Vreg: %11[ 17 ]
# CHECK: Vreg: %37[ 5 ]
# CHECK: Vreg: %25[ 12 ]
# CHECK: Vreg: %6[ 5 ]
# CHECK: Vreg: %39[ 5 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %27[ 2 ]
# CHECK: Vreg: %53[ 2 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %17[ 14 ]
# CHECK: Vreg: %5[ 11 ]
# CHECK: Vreg: %95[ 11 ]
# CHECK: Instr: %120:vgpr_32, %122:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 killed %56, %26, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %33[ 21 ]
# CHECK: Vreg: %97[ 10 ]
# CHECK: Vreg: %92[ 13 ]
# CHECK: Vreg: %35[ 4 ]
# CHECK: Vreg: %61[ 10 ]
# CHECK: Vreg: %11[ 16 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %25[ 11 ]
# CHECK: Vreg: %6[ 4 ]
# CHECK: Vreg: %39[ 4 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %27[ 1 ]
# CHECK: Vreg: %53[ 1 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %5[ 10 ]
# CHECK: Vreg: %95[ 10 ]
# CHECK: Instr: %121:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %53, %27, killed %122, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 13 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %33[ 20 ]
# CHECK: Vreg: %97[ 9 ]
# CHECK: Vreg: %92[ 12 ]
# CHECK: Vreg: %35[ 3 ]
# CHECK: Vreg: %61[ 9 ]
# CHECK: Vreg: %11[ 15 ]
# CHECK: Vreg: %120[ 1 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %25[ 10 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %17[ 12 ]
# CHECK: Vreg: %5[ 9 ]
# CHECK: Vreg: %95[ 9 ]
# CHECK: Instr: %22:vreg_64 = REG_SEQUENCE killed %120, %subreg.sub0, killed %121, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 12 ]
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %33[ 19 ]
# CHECK: Vreg: %97[ 8 ]
# CHECK: Vreg: %92[ 11 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %61[ 8 ]
# CHECK: Vreg: %11[ 14 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %25[ 9 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %27[ 13 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %17[ 11 ]
# CHECK: Vreg: %5[ 8 ]
# CHECK: Vreg: %95[ 8 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Instr: %90:sreg_32 = S_XOR_B32 $exec_lo, -1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 11 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %33[ 18 ]
# CHECK: Vreg: %97[ 7 ]
# CHECK: Vreg: %92[ 10 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %61[ 7 ]
# CHECK: Vreg: %11[ 13 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %25[ 8 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %27[ 12 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %17[ 10 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Vreg: %95[ 7 ]
# CHECK: Instr: S_BRANCH %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %26[ 10 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %33[ 17 ]
# CHECK: Vreg: %97[ 6 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %92[ 9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %61[ 6 ]
# CHECK: Vreg: %11[ 12 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %25[ 7 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %27[ 11 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Vreg: %95[ 6 ]
# CHECK: --- MBB_10 ---
# CHECK: Instr: %23:vreg_64 = PHI %8, %bb.4, %11, %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Instr: SI_END_CF killed %10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %23:sub0[ 1 ]
# CHECK: Vreg: %23:sub1[ 2 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Instr: %78:sreg_32_xm0 = V_READFIRSTLANE_B32 %23.sub0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %23:sub0[ 0 ]
# CHECK: Vreg: %23:sub1[ 1 ]
# CHECK: Instr: %80:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %23.sub1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %78[ 1 ]
# CHECK: Vreg: %23:sub1[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %78
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %80[ 1 ]
# CHECK: Instr: $sgpr1 = COPY killed %80
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %80[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0, killed $sgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i64 @test2(i1 %cond, ptr addrspace(3) %p, i64 %val) {
  entry:
    %gep2 = getelementptr i64, ptr addrspace(3) %p, i64 1
    %gep3 = getelementptr i64, ptr addrspace(3) %p, i64 2  
    %gep4 = getelementptr i64, ptr addrspace(3) %p, i64 3
    br label %bb2
  bb1:
    br label %bb2
  bb2:
    br label %bb3
  bb3:
    br label %bb4
  bb4:
    br label %bb5
  bb5:
    br label %exit
  exit:
    ret i64 0
  }

...
name:            test2
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHContTarget: false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   true
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 1, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 2, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 3, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 4, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 5, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 6, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 7, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 8, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 9, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 10, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 11, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 12, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 13, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 14, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 15, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 16, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 17, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 18, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 19, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 20, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 21, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 22, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 23, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 24, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 25, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 26, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 27, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 28, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 29, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 30, class: vreg_1, preferred-register: '', flags: [  ] }
  - { id: 31, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 32, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 33, class: sreg_32, preferred-register: '$vcc_lo', flags: [  ] }
  - { id: 34, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 35, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 36, class: vreg_1, preferred-register: '', flags: [  ] }
  - { id: 37, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 38, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 39, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 40, class: vreg_1, preferred-register: '', flags: [  ] }
  - { id: 41, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 42, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 43, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 44, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 45, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 46, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 47, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 48, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 49, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 50, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 51, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 52, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 53, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 54, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 55, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 56, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 57, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 58, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 59, class: vreg_1, preferred-register: '', flags: [  ] }
  - { id: 60, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 61, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 62, class: vreg_1, preferred-register: '', flags: [  ] }
  - { id: 63, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 64, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 65, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 66, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 67, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 68, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 69, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 70, class: sreg_64, preferred-register: '', flags: [  ] }
  - { id: 71, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 72, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 73, class: vreg_1, preferred-register: '', flags: [  ] }
  - { id: 74, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 75, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 76, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 77, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 78, class: sreg_32_xm0, preferred-register: '', flags: [  ] }
  - { id: 79, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 80, class: sreg_32_xm0, preferred-register: '', flags: [  ] }
  - { id: 81, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 82, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 83, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 84, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 85, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 86, class: sgpr_32, preferred-register: '', flags: [  ] }
  - { id: 87, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 88, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 89, class: vreg_64, preferred-register: '', flags: [  ] }
  - { id: 90, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 91, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 92, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 93, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 94, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 95, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 96, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 97, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 98, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 99, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 100, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 101, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 102, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 103, class: sreg_32, preferred-register: '', flags: [  ] }
  - { id: 104, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 105, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 106, class: sreg_32_xm0_xexec, preferred-register: '$vcc_lo', 
      flags: [  ] }
  - { id: 107, class: sreg_32_xm0_xexec, preferred-register: '', flags: [  ] }
  - { id: 108, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 109, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 110, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 111, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 112, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 113, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 114, class: sreg_32_xm0_xexec, preferred-register: '$vcc_lo', 
      flags: [  ] }
  - { id: 115, class: sreg_32_xm0_xexec, preferred-register: '', flags: [  ] }
  - { id: 116, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 117, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 118, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 119, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 120, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 121, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 122, class: sreg_32_xm0_xexec, preferred-register: '$vcc_lo', 
      flags: [  ] }
  - { id: 123, class: sreg_32_xm0_xexec, preferred-register: '', flags: [  ] }
  - { id: 124, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 125, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 126, class: vgpr_32, preferred-register: '', flags: [  ] }
  - { id: 127, class: vgpr_32, preferred-register: '', flags: [  ] }
liveins:
  - { reg: '$vgpr0', virtual-reg: '%24' }
  - { reg: '$vgpr1', virtual-reg: '%25' }
  - { reg: '$vgpr2', virtual-reg: '%26' }
  - { reg: '$vgpr3', virtual-reg: '%27' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    1
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:
  restorePoint:
fixedStack:      []
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  explicitKernArgSize: 0
  maxKernArgAlign: 4
  ldsSize:         0
  gdsSize:         0
  dynLDSAlign:     1
  isEntryFunction: true
  isChainFunction: false
  noSignedZerosFPMath: false
  memoryBound:     false
  waveLimiter:     false
  hasSpilledSGPRs: false
  hasSpilledVGPRs: false
  scratchRSrcReg:  '$private_rsrc_reg'
  frameOffsetReg:  '$fp_reg'
  stackPtrOffsetReg: '$sgpr32'
  bytesInStackArgArea: 0
  returnsVoid:     false
  psInputAddr:     7
  psInputEnable:   7
  maxMemoryClusterDWords: 8
  mode:
    ieee:            false
    dx10-clamp:      true
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true
  highBitsOf32BitAddress: 0
  occupancy:       16
  vgprForAGPRCopy: ''
  sgprForEXECCopy: '$sgpr105'
  longBranchReservedReg: ''
  hasInitWholeWave: false
  dynamicVGPRBlockSize: 0
  scratchReservedForDynamicVGPRs: 0
  isWholeWaveFunction: false
body:             |
  bb.0:
    successors: %bb.3(0x40000000), %bb.8(0x40000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
  
    %27:vgpr_32 = COPY killed $vgpr3
    %26:vgpr_32 = COPY killed $vgpr2
    %25:vgpr_32 = COPY killed $vgpr1
    %24:vgpr_32 = COPY killed $vgpr0
    %32:vgpr_32 = V_AND_B32_e64 1, killed %24, implicit $exec
    %33:sreg_32 = V_CMP_NE_U32_e64 1, killed %32, implicit $exec
    %34:sreg_32 = S_MOV_B32 0
    %1:sreg_32 = SI_IF %33, %bb.8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.3
  
  bb.1:
    successors: %bb.8(0x80000000)
  
    %4:sreg_32 = PHI %37, %bb.3, %90, %bb.9
    %2:vreg_64 = PHI undef %35:vreg_64, %bb.3, %22, %bb.9
    %3:vreg_64 = PHI %6, %bb.3, undef %39:vreg_64, %bb.9
    SI_END_CF killed %7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %102:sreg_32 = S_AND_B32 killed %4, $exec_lo, implicit-def dead $scc
    %101:sreg_32 = COPY killed %102
    S_BRANCH %bb.8
  
  bb.2:
    successors: %bb.6(0x80000000)
  
    %63:vgpr_32 = DS_READ_U16_gfx9 %25, 0, 0, implicit $exec :: (load (s16) from %ir.p, addrspace 3)
    %64:vgpr_32 = DS_READ_U16_gfx9 %25, 2, 0, implicit $exec :: (load (s16) from %ir.p + 2, addrspace 3)
    %65:vgpr_32 = DS_READ_U16_gfx9 %25, 4, 0, implicit $exec :: (load (s16) from %ir.p + 4, addrspace 3)
    %66:vgpr_32 = DS_READ_U16_gfx9 %25, 6, 0, implicit $exec :: (load (s16) from %ir.p + 6, addrspace 3)
    %68:vgpr_32 = V_LSHL_OR_B32_e64 killed %66, 16, killed %65, implicit $exec
    %69:vgpr_32 = V_LSHL_OR_B32_e64 killed %64, 16, killed %63, implicit $exec
    %88:vreg_64 = REG_SEQUENCE killed %69, %subreg.sub0, killed %68, %subreg.sub1
    %5:vreg_64 = COPY killed %88
    %95:sreg_32 = COPY $exec_lo
    %98:sreg_32 = S_ANDN2_B32 killed %20, $exec_lo, implicit-def dead $scc
    %99:sreg_32 = S_AND_B32 killed %33, $exec_lo, implicit-def dead $scc
    %97:sreg_32 = S_OR_B32 killed %98, killed %99, implicit-def dead $scc
    S_BRANCH %bb.6
  
  bb.3:
    successors: %bb.9(0x40000000), %bb.1(0x40000000)
  
    %6:vreg_64 = DS_READ_B64_gfx9 %25, 8, 0, implicit $exec :: (load (s64) from %ir.gep2, addrspace 3)
    %37:sreg_32 = S_MOV_B32 -1
    %7:sreg_32 = SI_IF %33, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.9
  
  bb.4:
    successors: %bb.5(0x40000000), %bb.10(0x40000000)
  
    %9:sreg_32 = PHI %14, %bb.6, %92, %bb.7
    %8:vreg_64 = PHI %12, %bb.6, %17, %bb.7
    SI_END_CF killed %16, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %10:sreg_32 = SI_IF killed %9, %bb.10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.5
  
  bb.5:
    successors: %bb.10(0x80000000)
  
    %76:vreg_64 = DS_READ2_B32_gfx9 killed %25, 6, 7, 0, implicit $exec :: (load (s64) from %ir.gep3, align 4, addrspace 3)
    %104:vgpr_32, %106:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %76.sub0, killed %26, 0, implicit $exec
    %105:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %76.sub1, killed %27, killed %106, 0, implicit $exec
    %11:vreg_64 = REG_SEQUENCE killed %104, %subreg.sub0, killed %105, %subreg.sub1
    S_BRANCH %bb.10
  
  bb.6:
    successors: %bb.7(0x40000000), %bb.4(0x40000000)
  
    %15:sreg_32 = PHI %20, %bb.8, %97, %bb.2
    %14:sreg_32 = PHI %34, %bb.8, %95, %bb.2
    %12:vreg_64 = PHI %18, %bb.8, undef %61:vreg_64, %bb.2
    %13:vreg_64 = PHI %19, %bb.8, %5, %bb.2
    SI_END_CF killed %21, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %16:sreg_32 = SI_IF killed %15, %bb.4, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.7
  
  bb.7:
    successors: %bb.4(0x80000000)
  
    %112:vgpr_32, %114:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %13.sub0, %26, 0, implicit $exec
    %113:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %13.sub1, %27, killed %114, 0, implicit $exec
    %17:vreg_64 = REG_SEQUENCE killed %112, %subreg.sub0, killed %113, %subreg.sub1
    %93:sreg_32 = S_ANDN2_B32 killed %14, $exec_lo, implicit-def dead $scc
    %92:sreg_32 = COPY killed %93
    S_BRANCH %bb.4
  
  bb.8:
    successors: %bb.2(0x40000000), %bb.6(0x40000000)
  
    %20:sreg_32 = PHI %34, %bb.0, %101, %bb.1
    %18:vreg_64 = PHI undef %29:vreg_64, %bb.0, %2, %bb.1
    %19:vreg_64 = PHI undef %29:vreg_64, %bb.0, %3, %bb.1
    %21:sreg_32 = SI_ELSE killed %1, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.2
  
  bb.9:
    successors: %bb.1(0x80000000)
  
    %41:vgpr_32 = DS_READ_U8_gfx9 %25, 32, 0, implicit $exec :: (load (s8) from %ir.gep4, addrspace 3)
    %42:vgpr_32 = DS_READ_U8_gfx9 %25, 33, 0, implicit $exec :: (load (s8) from %ir.gep4 + 1, addrspace 3)
    %43:vgpr_32 = DS_READ_U8_gfx9 %25, 34, 0, implicit $exec :: (load (s8) from %ir.gep4 + 2, addrspace 3)
    %44:vgpr_32 = DS_READ_U8_gfx9 %25, 35, 0, implicit $exec :: (load (s8) from %ir.gep4 + 3, addrspace 3)
    %45:vgpr_32 = DS_READ_U8_gfx9 %25, 36, 0, implicit $exec :: (load (s8) from %ir.gep4 + 4, addrspace 3)
    %46:vgpr_32 = DS_READ_U8_gfx9 %25, 37, 0, implicit $exec :: (load (s8) from %ir.gep4 + 5, addrspace 3)
    %47:vgpr_32 = DS_READ_U8_gfx9 %25, 38, 0, implicit $exec :: (load (s8) from %ir.gep4 + 6, addrspace 3)
    %48:vgpr_32 = DS_READ_U8_gfx9 %25, 39, 0, implicit $exec :: (load (s8) from %ir.gep4 + 7, addrspace 3)
    %50:vgpr_32 = V_LSHL_OR_B32_e64 killed %46, 8, killed %45, implicit $exec
    %51:vgpr_32 = V_LSHL_OR_B32_e64 killed %48, 8, killed %47, implicit $exec
    %53:vgpr_32 = V_LSHL_OR_B32_e64 killed %51, 16, killed %50, implicit $exec
    %54:vgpr_32 = V_LSHL_OR_B32_e64 killed %42, 8, killed %41, implicit $exec
    %55:vgpr_32 = V_LSHL_OR_B32_e64 killed %44, 8, killed %43, implicit $exec
    %56:vgpr_32 = V_LSHL_OR_B32_e64 killed %55, 16, killed %54, implicit $exec
    %120:vgpr_32, %122:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 killed %56, %26, 0, implicit $exec
    %121:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %53, %27, killed %122, 0, implicit $exec
    %22:vreg_64 = REG_SEQUENCE killed %120, %subreg.sub0, killed %121, %subreg.sub1
    %90:sreg_32 = S_XOR_B32 $exec_lo, -1, implicit-def dead $scc
    S_BRANCH %bb.1
  
  bb.10:
    %23:vreg_64 = PHI %8, %bb.4, %11, %bb.5
    SI_END_CF killed %10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %78:sreg_32_xm0 = V_READFIRSTLANE_B32 %23.sub0, implicit $exec
    %80:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %23.sub1, implicit $exec
    $sgpr0 = COPY killed %78
    $sgpr1 = COPY killed %80
    SI_RETURN_TO_EPILOG killed $sgpr0, killed $sgpr1
...
---


