# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#                      bb.0.entry
#                          |
#                      bb.1.loop1
#                          |
#                       bb.2.bb
#                        / |
#    bb.3.loop3.preheader  |
#              |           |
#    +---->bb.8.loop3      |
#    +---------+           |
#              |           |
#    bb.9.loop4.preheader  |
#              |           |
#    +--->bb.10.loop4      |
#    +---------+           |
#              |           |
#    bb.12.exit.loopexit1  |
#                    \     |
#                   bb.7.Flow
#                    /     |
#    bb.4.loop2.preheader  |
#              |           |
#    +---->bb.6.loop2      |
#    +---------+           |
#              |           |
#    bb.11.exit.loopexit   |
#                    \     |
#                   bb.5.Flow12
#                       |
#                   bb.13.exit
#




# CHECK-LABEL: === NextUseAnalysis Results for test16 ===
# CHECK: --- MBB_0 ---
# CHECK: Instr: %0:vgpr_32 = COPY killed $vgpr16
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Instr: %1:vgpr_32 = COPY killed $vgpr15
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 126 ]
# CHECK: Instr: %2:vgpr_32 = COPY killed $vgpr14
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 125 ]
# CHECK: Vreg: %1[ 161 ]
# CHECK: Instr: %3:vgpr_32 = COPY killed $vgpr13
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 124 ]
# CHECK: Vreg: %2[ 124 ]
# CHECK: Vreg: %1[ 160 ]
# CHECK: Instr: %4:vgpr_32 = COPY killed $vgpr12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 123 ]
# CHECK: Vreg: %2[ 123 ]
# CHECK: Vreg: %1[ 159 ]
# CHECK: Vreg: %3[ 114 ]
# CHECK: Instr: %5:vgpr_32 = COPY killed $vgpr11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 122 ]
# CHECK: Vreg: %2[ 122 ]
# CHECK: Vreg: %4[ 101 ]
# CHECK: Vreg: %1[ 158 ]
# CHECK: Vreg: %3[ 113 ]
# CHECK: Instr: %6:vgpr_32 = COPY killed $vgpr10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 121 ]
# CHECK: Vreg: %2[ 121 ]
# CHECK: Vreg: %4[ 100 ]
# CHECK: Vreg: %1[ 157 ]
# CHECK: Vreg: %3[ 112 ]
# CHECK: Vreg: %5[ 11 ]
# CHECK: Instr: %7:vgpr_32 = COPY killed $vgpr9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 120 ]
# CHECK: Vreg: %2[ 120 ]
# CHECK: Vreg: %4[ 99 ]
# CHECK: Vreg: %6[ 10 ]
# CHECK: Vreg: %1[ 156 ]
# CHECK: Vreg: %3[ 111 ]
# CHECK: Vreg: %5[ 10 ]
# CHECK: Instr: %8:vgpr_32 = COPY killed $vgpr8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 119 ]
# CHECK: Vreg: %7[ 10 ]
# CHECK: Vreg: %2[ 119 ]
# CHECK: Vreg: %4[ 98 ]
# CHECK: Vreg: %6[ 9 ]
# CHECK: Vreg: %1[ 155 ]
# CHECK: Vreg: %3[ 110 ]
# CHECK: Vreg: %5[ 9 ]
# CHECK: Instr: %9:vgpr_32 = COPY killed $vgpr7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 118 ]
# CHECK: Vreg: %7[ 9 ]
# CHECK: Vreg: %2[ 118 ]
# CHECK: Vreg: %4[ 97 ]
# CHECK: Vreg: %6[ 8 ]
# CHECK: Vreg: %1[ 154 ]
# CHECK: Vreg: %8[ 9 ]
# CHECK: Vreg: %3[ 109 ]
# CHECK: Vreg: %5[ 8 ]
# CHECK: Instr: %10:vgpr_32 = COPY killed $vgpr6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 117 ]
# CHECK: Vreg: %7[ 8 ]
# CHECK: Vreg: %2[ 117 ]
# CHECK: Vreg: %9[ 9 ]
# CHECK: Vreg: %4[ 96 ]
# CHECK: Vreg: %6[ 7 ]
# CHECK: Vreg: %1[ 153 ]
# CHECK: Vreg: %8[ 8 ]
# CHECK: Vreg: %3[ 108 ]
# CHECK: Vreg: %5[ 7 ]
# CHECK: Instr: %11:vgpr_32 = COPY killed $vgpr5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 116 ]
# CHECK: Vreg: %7[ 7 ]
# CHECK: Vreg: %2[ 116 ]
# CHECK: Vreg: %9[ 8 ]
# CHECK: Vreg: %4[ 95 ]
# CHECK: Vreg: %6[ 6 ]
# CHECK: Vreg: %1[ 152 ]
# CHECK: Vreg: %8[ 7 ]
# CHECK: Vreg: %3[ 107 ]
# CHECK: Vreg: %10[ 8 ]
# CHECK: Vreg: %5[ 6 ]
# CHECK: Instr: %12:vgpr_32 = COPY killed $vgpr4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 115 ]
# CHECK: Vreg: %7[ 6 ]
# CHECK: Vreg: %2[ 115 ]
# CHECK: Vreg: %9[ 7 ]
# CHECK: Vreg: %4[ 94 ]
# CHECK: Vreg: %11[ 8 ]
# CHECK: Vreg: %6[ 5 ]
# CHECK: Vreg: %1[ 151 ]
# CHECK: Vreg: %8[ 6 ]
# CHECK: Vreg: %3[ 106 ]
# CHECK: Vreg: %10[ 7 ]
# CHECK: Vreg: %5[ 5 ]
# CHECK: Instr: %13:vgpr_32 = COPY killed $vgpr3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 114 ]
# CHECK: Vreg: %7[ 5 ]
# CHECK: Vreg: %2[ 114 ]
# CHECK: Vreg: %9[ 6 ]
# CHECK: Vreg: %4[ 93 ]
# CHECK: Vreg: %11[ 7 ]
# CHECK: Vreg: %6[ 4 ]
# CHECK: Vreg: %1[ 150 ]
# CHECK: Vreg: %8[ 5 ]
# CHECK: Vreg: %3[ 105 ]
# CHECK: Vreg: %10[ 6 ]
# CHECK: Vreg: %5[ 4 ]
# CHECK: Vreg: %12[ 7 ]
# CHECK: Instr: %14:vgpr_32 = COPY killed $vgpr2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 113 ]
# CHECK: Vreg: %7[ 4 ]
# CHECK: Vreg: %2[ 113 ]
# CHECK: Vreg: %9[ 5 ]
# CHECK: Vreg: %4[ 92 ]
# CHECK: Vreg: %11[ 6 ]
# CHECK: Vreg: %6[ 3 ]
# CHECK: Vreg: %13[ 7 ]
# CHECK: Vreg: %1[ 149 ]
# CHECK: Vreg: %8[ 4 ]
# CHECK: Vreg: %3[ 104 ]
# CHECK: Vreg: %10[ 5 ]
# CHECK: Vreg: %5[ 3 ]
# CHECK: Vreg: %12[ 6 ]
# CHECK: Instr: %15:vgpr_32 = COPY killed $vgpr1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 112 ]
# CHECK: Vreg: %7[ 3 ]
# CHECK: Vreg: %14[ 6 ]
# CHECK: Vreg: %2[ 112 ]
# CHECK: Vreg: %9[ 4 ]
# CHECK: Vreg: %4[ 91 ]
# CHECK: Vreg: %11[ 5 ]
# CHECK: Vreg: %6[ 2 ]
# CHECK: Vreg: %13[ 6 ]
# CHECK: Vreg: %1[ 148 ]
# CHECK: Vreg: %8[ 3 ]
# CHECK: Vreg: %3[ 103 ]
# CHECK: Vreg: %10[ 4 ]
# CHECK: Vreg: %5[ 2 ]
# CHECK: Vreg: %12[ 5 ]
# CHECK: Instr: %16:vgpr_32 = COPY killed $vgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 111 ]
# CHECK: Vreg: %7[ 2 ]
# CHECK: Vreg: %14[ 5 ]
# CHECK: Vreg: %2[ 111 ]
# CHECK: Vreg: %9[ 3 ]
# CHECK: Vreg: %4[ 90 ]
# CHECK: Vreg: %11[ 4 ]
# CHECK: Vreg: %6[ 1 ]
# CHECK: Vreg: %13[ 5 ]
# CHECK: Vreg: %1[ 147 ]
# CHECK: Vreg: %8[ 2 ]
# CHECK: Vreg: %15[ 6 ]
# CHECK: Vreg: %3[ 102 ]
# CHECK: Vreg: %10[ 3 ]
# CHECK: Vreg: %5[ 1 ]
# CHECK: Vreg: %12[ 4 ]
# CHECK: Instr: %17:vreg_64 = REG_SEQUENCE killed %6, %subreg.sub0, killed %5, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 110 ]
# CHECK: Vreg: %7[ 1 ]
# CHECK: Vreg: %14[ 4 ]
# CHECK: Vreg: %2[ 110 ]
# CHECK: Vreg: %9[ 2 ]
# CHECK: Vreg: %16[ 5 ]
# CHECK: Vreg: %4[ 89 ]
# CHECK: Vreg: %11[ 3 ]
# CHECK: Vreg: %6[ 0 ]
# CHECK: Vreg: %13[ 4 ]
# CHECK: Vreg: %1[ 146 ]
# CHECK: Vreg: %8[ 1 ]
# CHECK: Vreg: %15[ 5 ]
# CHECK: Vreg: %3[ 101 ]
# CHECK: Vreg: %10[ 2 ]
# CHECK: Vreg: %5[ 0 ]
# CHECK: Vreg: %12[ 3 ]
# CHECK: Instr: %18:vreg_64 = REG_SEQUENCE killed %8, %subreg.sub0, killed %7, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 109 ]
# CHECK: Vreg: %7[ 0 ]
# CHECK: Vreg: %14[ 3 ]
# CHECK: Vreg: %2[ 109 ]
# CHECK: Vreg: %9[ 1 ]
# CHECK: Vreg: %16[ 4 ]
# CHECK: Vreg: %4[ 88 ]
# CHECK: Vreg: %11[ 2 ]
# CHECK: Vreg: %13[ 3 ]
# CHECK: Vreg: %1[ 145 ]
# CHECK: Vreg: %8[ 0 ]
# CHECK: Vreg: %15[ 4 ]
# CHECK: Vreg: %3[ 100 ]
# CHECK: Vreg: %10[ 1 ]
# CHECK: Vreg: %17[ 46 ]
# CHECK: Vreg: %12[ 2 ]
# CHECK: Instr: %19:vreg_64 = REG_SEQUENCE killed %10, %subreg.sub0, killed %9, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 108 ]
# CHECK: Vreg: %14[ 2 ]
# CHECK: Vreg: %2[ 108 ]
# CHECK: Vreg: %9[ 0 ]
# CHECK: Vreg: %16[ 3 ]
# CHECK: Vreg: %4[ 87 ]
# CHECK: Vreg: %11[ 1 ]
# CHECK: Vreg: %18:sub0[ 53 ]
# CHECK: Vreg: %18:sub1[ 54 ]
# CHECK: Vreg: %18[ 141 ]
# CHECK: Vreg: %13[ 2 ]
# CHECK: Vreg: %1[ 144 ]
# CHECK: Vreg: %15[ 3 ]
# CHECK: Vreg: %3[ 99 ]
# CHECK: Vreg: %10[ 0 ]
# CHECK: Vreg: %17[ 45 ]
# CHECK: Vreg: %12[ 1 ]
# CHECK: Instr: %20:vreg_64 = REG_SEQUENCE killed %12, %subreg.sub0, killed %11, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 107 ]
# CHECK: Vreg: %14[ 1 ]
# CHECK: Vreg: %2[ 107 ]
# CHECK: Vreg: %16[ 2 ]
# CHECK: Vreg: %4[ 86 ]
# CHECK: Vreg: %11[ 0 ]
# CHECK: Vreg: %18:sub0[ 52 ]
# CHECK: Vreg: %18:sub1[ 53 ]
# CHECK: Vreg: %18[ 140 ]
# CHECK: Vreg: %13[ 1 ]
# CHECK: Vreg: %1[ 143 ]
# CHECK: Vreg: %15[ 2 ]
# CHECK: Vreg: %3[ 98 ]
# CHECK: Vreg: %17[ 44 ]
# CHECK: Vreg: %12[ 0 ]
# CHECK: Vreg: %19[ 98 ]
# CHECK: Instr: %21:vreg_64 = REG_SEQUENCE killed %14, %subreg.sub0, killed %13, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 106 ]
# CHECK: Vreg: %14[ 0 ]
# CHECK: Vreg: %2[ 106 ]
# CHECK: Vreg: %16[ 1 ]
# CHECK: Vreg: %4[ 85 ]
# CHECK: Vreg: %18:sub0[ 51 ]
# CHECK: Vreg: %18:sub1[ 52 ]
# CHECK: Vreg: %18[ 139 ]
# CHECK: Vreg: %13[ 0 ]
# CHECK: Vreg: %20[ 92 ]
# CHECK: Vreg: %1[ 142 ]
# CHECK: Vreg: %15[ 1 ]
# CHECK: Vreg: %3[ 97 ]
# CHECK: Vreg: %17[ 43 ]
# CHECK: Vreg: %19[ 97 ]
# CHECK: Instr: %22:vreg_64 = REG_SEQUENCE killed %16, %subreg.sub0, killed %15, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 105 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %2[ 105 ]
# CHECK: Vreg: %16[ 0 ]
# CHECK: Vreg: %4[ 84 ]
# CHECK: Vreg: %18:sub0[ 50 ]
# CHECK: Vreg: %18:sub1[ 51 ]
# CHECK: Vreg: %18[ 138 ]
# CHECK: Vreg: %20[ 91 ]
# CHECK: Vreg: %1[ 141 ]
# CHECK: Vreg: %15[ 0 ]
# CHECK: Vreg: %3[ 96 ]
# CHECK: Vreg: %17[ 42 ]
# CHECK: Vreg: %19[ 96 ]
# CHECK: Instr: %23:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 104 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %2[ 104 ]
# CHECK: Vreg: %4[ 83 ]
# CHECK: Vreg: %18:sub0[ 49 ]
# CHECK: Vreg: %18:sub1[ 50 ]
# CHECK: Vreg: %18[ 137 ]
# CHECK: Vreg: %20[ 90 ]
# CHECK: Vreg: %1[ 140 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %3[ 95 ]
# CHECK: Vreg: %17[ 41 ]
# CHECK: Vreg: %19[ 95 ]
# CHECK: Instr: %24:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 103 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %2[ 103 ]
# CHECK: Vreg: %23[ 1 ]
# CHECK: Vreg: %4[ 82 ]
# CHECK: Vreg: %18:sub0[ 48 ]
# CHECK: Vreg: %18:sub1[ 49 ]
# CHECK: Vreg: %18[ 136 ]
# CHECK: Vreg: %20[ 89 ]
# CHECK: Vreg: %1[ 139 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %3[ 94 ]
# CHECK: Vreg: %17[ 40 ]
# CHECK: Vreg: %19[ 94 ]
# CHECK: Instr: %25:vgpr_32 = V_LSHL_OR_B32_e64 killed %24, 8, killed %23, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 102 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %2[ 102 ]
# CHECK: Vreg: %23[ 0 ]
# CHECK: Vreg: %4[ 81 ]
# CHECK: Vreg: %18:sub0[ 47 ]
# CHECK: Vreg: %18:sub1[ 48 ]
# CHECK: Vreg: %18[ 135 ]
# CHECK: Vreg: %20[ 88 ]
# CHECK: Vreg: %1[ 138 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %3[ 93 ]
# CHECK: Vreg: %17[ 39 ]
# CHECK: Vreg: %24[ 0 ]
# CHECK: Vreg: %19[ 93 ]
# CHECK: Instr: %26:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 101 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %2[ 101 ]
# CHECK: Vreg: %4[ 80 ]
# CHECK: Vreg: %18:sub0[ 46 ]
# CHECK: Vreg: %18:sub1[ 47 ]
# CHECK: Vreg: %18[ 134 ]
# CHECK: Vreg: %25[ 3 ]
# CHECK: Vreg: %20[ 87 ]
# CHECK: Vreg: %1[ 137 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %3[ 92 ]
# CHECK: Vreg: %17[ 38 ]
# CHECK: Vreg: %19[ 92 ]
# CHECK: Instr: %27:vgpr_32 = GLOBAL_LOAD_UBYTE %22, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 100 ]
# CHECK: Vreg: %26[ 1 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %2[ 100 ]
# CHECK: Vreg: %4[ 79 ]
# CHECK: Vreg: %18:sub0[ 45 ]
# CHECK: Vreg: %18:sub1[ 46 ]
# CHECK: Vreg: %18[ 133 ]
# CHECK: Vreg: %25[ 2 ]
# CHECK: Vreg: %20[ 86 ]
# CHECK: Vreg: %1[ 136 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %3[ 91 ]
# CHECK: Vreg: %17[ 37 ]
# CHECK: Vreg: %19[ 91 ]
# CHECK: Instr: %28:vgpr_32 = V_LSHL_OR_B32_e64 killed %27, 8, killed %26, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 99 ]
# CHECK: Vreg: %26[ 0 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %2[ 99 ]
# CHECK: Vreg: %4[ 78 ]
# CHECK: Vreg: %18:sub0[ 44 ]
# CHECK: Vreg: %18:sub1[ 45 ]
# CHECK: Vreg: %18[ 132 ]
# CHECK: Vreg: %25[ 1 ]
# CHECK: Vreg: %20[ 85 ]
# CHECK: Vreg: %1[ 135 ]
# CHECK: Vreg: %27[ 0 ]
# CHECK: Vreg: %22[ 32 ]
# CHECK: Vreg: %3[ 90 ]
# CHECK: Vreg: %17[ 36 ]
# CHECK: Vreg: %19[ 90 ]
# CHECK: Instr: %29:vgpr_32 = V_LSHL_OR_B32_e64 killed %28, 16, killed %25, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 98 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %2[ 98 ]
# CHECK: Vreg: %28[ 0 ]
# CHECK: Vreg: %4[ 77 ]
# CHECK: Vreg: %18:sub0[ 43 ]
# CHECK: Vreg: %18:sub1[ 44 ]
# CHECK: Vreg: %18[ 131 ]
# CHECK: Vreg: %25[ 0 ]
# CHECK: Vreg: %20[ 84 ]
# CHECK: Vreg: %1[ 134 ]
# CHECK: Vreg: %22[ 31 ]
# CHECK: Vreg: %3[ 89 ]
# CHECK: Vreg: %17[ 35 ]
# CHECK: Vreg: %19[ 89 ]
# CHECK: Instr: %30:sreg_32 = S_MOV_B32 1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 97 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %2[ 97 ]
# CHECK: Vreg: %4[ 76 ]
# CHECK: Vreg: %18:sub0[ 42 ]
# CHECK: Vreg: %18:sub1[ 43 ]
# CHECK: Vreg: %18[ 130 ]
# CHECK: Vreg: %20[ 83 ]
# CHECK: Vreg: %1[ 133 ]
# CHECK: Vreg: %22[ 30 ]
# CHECK: Vreg: %3[ 88 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 34 ]
# CHECK: Vreg: %19[ 88 ]
# CHECK: Instr: %31:vgpr_32 = V_ADD_U32_e64 1, %29, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 96 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %2[ 96 ]
# CHECK: Vreg: %4[ 75 ]
# CHECK: Vreg: %30[ 2 ]
# CHECK: Vreg: %18:sub0[ 41 ]
# CHECK: Vreg: %18:sub1[ 42 ]
# CHECK: Vreg: %18[ 129 ]
# CHECK: Vreg: %20[ 82 ]
# CHECK: Vreg: %1[ 132 ]
# CHECK: Vreg: %22[ 29 ]
# CHECK: Vreg: %3[ 87 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 33 ]
# CHECK: Vreg: %19[ 87 ]
# CHECK: Instr: %32:sreg_32 = S_MOV_B32 -1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 95 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %2[ 95 ]
# CHECK: Vreg: %4[ 74 ]
# CHECK: Vreg: %30[ 1 ]
# CHECK: Vreg: %18:sub0[ 40 ]
# CHECK: Vreg: %18:sub1[ 41 ]
# CHECK: Vreg: %18[ 128 ]
# CHECK: Vreg: %20[ 81 ]
# CHECK: Vreg: %1[ 131 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ 86 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 32 ]
# CHECK: Vreg: %31[ 1 ]
# CHECK: Vreg: %19[ 86 ]
# CHECK: Instr: %33:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 94 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ 94 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ 127 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %20[ 80 ]
# CHECK: Vreg: %1[ 130 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ 85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ 85 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 94 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ 94 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ 127 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %20[ 80 ]
# CHECK: Vreg: %1[ 130 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ 85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ 85 ]
# CHECK: --- MBB_1 ---
# CHECK: Instr: %34:sreg_32 = PHI %33, %bb.0, %35, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+94 ]
# CHECK: Vreg: %33[ 0 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+94 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+127 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ LoopTag+80 ]
# CHECK: Vreg: %1[ LoopTag+130 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+85 ]
# CHECK: Instr: %36:vgpr_32 = PHI %31, %bb.0, %37, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+94 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+94 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+127 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ LoopTag+80 ]
# CHECK: Vreg: %1[ LoopTag+130 ]
# CHECK: Vreg: %34[ 74 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %31[ 0 ]
# CHECK: Vreg: %19[ LoopTag+85 ]
# CHECK: Instr: %38:sreg_32 = PHI %32, %bb.0, %39, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+94 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+94 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+127 ]
# CHECK: Vreg: %32[ 0 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ LoopTag+80 ]
# CHECK: Vreg: %1[ LoopTag+130 ]
# CHECK: Vreg: %34[ 74 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 58 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %19[ LoopTag+85 ]
# CHECK: Instr: %40:sreg_32 = PHI %30, %bb.0, %41, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+94 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+94 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %30[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+127 ]
# CHECK: Vreg: %20[ LoopTag+80 ]
# CHECK: Vreg: %1[ LoopTag+130 ]
# CHECK: Vreg: %34[ 74 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 58 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Vreg: %19[ LoopTag+85 ]
# CHECK: Instr: %42:vgpr_32 = PHI %29, %bb.0, %43, %bb.1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+94 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+94 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+127 ]
# CHECK: Vreg: %20[ LoopTag+80 ]
# CHECK: Vreg: %1[ LoopTag+130 ]
# CHECK: Vreg: %34[ 74 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+85 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 58 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Vreg: %19[ LoopTag+85 ]
# CHECK: Instr: %44:vgpr_32 = GLOBAL_LOAD_UBYTE %21, 0, 0, implicit $exec :: (load (s8) from %ir.p2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+93 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ LoopTag+93 ]
# CHECK: Vreg: %42[ LoopTag+105 ]
# CHECK: Vreg: %4[ 72 ]
# CHECK: Vreg: %18:sub0[ 38 ]
# CHECK: Vreg: %18:sub1[ 39 ]
# CHECK: Vreg: %18[ LoopTag+126 ]
# CHECK: Vreg: %20[ LoopTag+79 ]
# CHECK: Vreg: %1[ LoopTag+129 ]
# CHECK: Vreg: %34[ 73 ]
# CHECK: Vreg: %22[ 26 ]
# CHECK: Vreg: %3[ LoopTag+84 ]
# CHECK: Vreg: %29[ 28 ]
# CHECK: Vreg: %36[ 57 ]
# CHECK: Vreg: %17[ 30 ]
# CHECK: Vreg: %38[ 12 ]
# CHECK: Vreg: %19[ LoopTag+84 ]
# CHECK: Instr: %45:vgpr_32 = GLOBAL_LOAD_UBYTE %21, 1, 0, implicit $exec :: (load (s8) from %ir.p2 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+92 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ LoopTag+92 ]
# CHECK: Vreg: %42[ LoopTag+104 ]
# CHECK: Vreg: %4[ 71 ]
# CHECK: Vreg: %18:sub0[ 37 ]
# CHECK: Vreg: %18:sub1[ 38 ]
# CHECK: Vreg: %18[ LoopTag+125 ]
# CHECK: Vreg: %44[ 1 ]
# CHECK: Vreg: %20[ LoopTag+78 ]
# CHECK: Vreg: %1[ LoopTag+128 ]
# CHECK: Vreg: %34[ 72 ]
# CHECK: Vreg: %22[ 25 ]
# CHECK: Vreg: %3[ LoopTag+83 ]
# CHECK: Vreg: %29[ 27 ]
# CHECK: Vreg: %36[ 56 ]
# CHECK: Vreg: %17[ 29 ]
# CHECK: Vreg: %38[ 11 ]
# CHECK: Vreg: %19[ LoopTag+83 ]
# CHECK: Instr: %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %45, 8, killed %44, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+91 ]
# CHECK: Vreg: %45[ 0 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+91 ]
# CHECK: Vreg: %42[ LoopTag+103 ]
# CHECK: Vreg: %4[ 70 ]
# CHECK: Vreg: %18:sub0[ 36 ]
# CHECK: Vreg: %18:sub1[ 37 ]
# CHECK: Vreg: %18[ LoopTag+124 ]
# CHECK: Vreg: %44[ 0 ]
# CHECK: Vreg: %20[ LoopTag+77 ]
# CHECK: Vreg: %1[ LoopTag+127 ]
# CHECK: Vreg: %34[ 71 ]
# CHECK: Vreg: %22[ 24 ]
# CHECK: Vreg: %3[ LoopTag+82 ]
# CHECK: Vreg: %29[ 26 ]
# CHECK: Vreg: %36[ 55 ]
# CHECK: Vreg: %17[ 28 ]
# CHECK: Vreg: %38[ 10 ]
# CHECK: Vreg: %19[ LoopTag+82 ]
# CHECK: Instr: %47:vgpr_32 = GLOBAL_LOAD_UBYTE %21, 2, 0, implicit $exec :: (load (s8) from %ir.p2 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+90 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ LoopTag+90 ]
# CHECK: Vreg: %42[ LoopTag+102 ]
# CHECK: Vreg: %4[ 69 ]
# CHECK: Vreg: %18:sub0[ 35 ]
# CHECK: Vreg: %18:sub1[ 36 ]
# CHECK: Vreg: %18[ LoopTag+123 ]
# CHECK: Vreg: %20[ LoopTag+76 ]
# CHECK: Vreg: %1[ LoopTag+126 ]
# CHECK: Vreg: %46[ 3 ]
# CHECK: Vreg: %34[ 70 ]
# CHECK: Vreg: %22[ 23 ]
# CHECK: Vreg: %3[ LoopTag+81 ]
# CHECK: Vreg: %29[ 25 ]
# CHECK: Vreg: %36[ 54 ]
# CHECK: Vreg: %17[ 27 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Vreg: %19[ LoopTag+81 ]
# CHECK: Instr: %48:vgpr_32 = GLOBAL_LOAD_UBYTE %21, 3, 0, implicit $exec :: (load (s8) from %ir.p2 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+89 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ LoopTag+89 ]
# CHECK: Vreg: %47[ 1 ]
# CHECK: Vreg: %42[ LoopTag+101 ]
# CHECK: Vreg: %4[ 68 ]
# CHECK: Vreg: %18:sub0[ 34 ]
# CHECK: Vreg: %18:sub1[ 35 ]
# CHECK: Vreg: %18[ LoopTag+122 ]
# CHECK: Vreg: %20[ LoopTag+75 ]
# CHECK: Vreg: %1[ LoopTag+125 ]
# CHECK: Vreg: %46[ 2 ]
# CHECK: Vreg: %34[ 69 ]
# CHECK: Vreg: %22[ 22 ]
# CHECK: Vreg: %3[ LoopTag+80 ]
# CHECK: Vreg: %29[ 24 ]
# CHECK: Vreg: %36[ 53 ]
# CHECK: Vreg: %17[ 26 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Vreg: %19[ LoopTag+80 ]
# CHECK: Instr: %49:vgpr_32 = V_LSHL_OR_B32_e64 killed %48, 8, killed %47, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+88 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 73 ]
# CHECK: Vreg: %2[ LoopTag+88 ]
# CHECK: Vreg: %47[ 0 ]
# CHECK: Vreg: %42[ LoopTag+100 ]
# CHECK: Vreg: %4[ 67 ]
# CHECK: Vreg: %18:sub0[ 33 ]
# CHECK: Vreg: %18:sub1[ 34 ]
# CHECK: Vreg: %18[ LoopTag+121 ]
# CHECK: Vreg: %20[ LoopTag+74 ]
# CHECK: Vreg: %1[ LoopTag+124 ]
# CHECK: Vreg: %46[ 1 ]
# CHECK: Vreg: %34[ 68 ]
# CHECK: Vreg: %22[ 21 ]
# CHECK: Vreg: %3[ LoopTag+79 ]
# CHECK: Vreg: %48[ 0 ]
# CHECK: Vreg: %29[ 23 ]
# CHECK: Vreg: %36[ 52 ]
# CHECK: Vreg: %17[ 25 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Vreg: %19[ LoopTag+79 ]
# CHECK: Instr: %50:vgpr_32 = V_LSHL_OR_B32_e64 killed %49, 16, killed %46, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+87 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 72 ]
# CHECK: Vreg: %2[ LoopTag+87 ]
# CHECK: Vreg: %42[ LoopTag+99 ]
# CHECK: Vreg: %4[ 66 ]
# CHECK: Vreg: %49[ 0 ]
# CHECK: Vreg: %18:sub0[ 32 ]
# CHECK: Vreg: %18:sub1[ 33 ]
# CHECK: Vreg: %18[ LoopTag+120 ]
# CHECK: Vreg: %20[ LoopTag+73 ]
# CHECK: Vreg: %1[ LoopTag+123 ]
# CHECK: Vreg: %46[ 0 ]
# CHECK: Vreg: %34[ 67 ]
# CHECK: Vreg: %22[ 20 ]
# CHECK: Vreg: %3[ LoopTag+78 ]
# CHECK: Vreg: %29[ 22 ]
# CHECK: Vreg: %36[ 51 ]
# CHECK: Vreg: %17[ 24 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Vreg: %19[ LoopTag+78 ]
# CHECK: Instr: %51:sgpr_32 = S_CVT_F32_U32 %40, implicit $mode
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+86 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 71 ]
# CHECK: Vreg: %2[ LoopTag+86 ]
# CHECK: Vreg: %42[ LoopTag+98 ]
# CHECK: Vreg: %4[ 65 ]
# CHECK: Vreg: %18:sub0[ 31 ]
# CHECK: Vreg: %18:sub1[ 32 ]
# CHECK: Vreg: %18[ LoopTag+119 ]
# CHECK: Vreg: %20[ LoopTag+72 ]
# CHECK: Vreg: %1[ LoopTag+122 ]
# CHECK: Vreg: %34[ 66 ]
# CHECK: Vreg: %22[ 19 ]
# CHECK: Vreg: %3[ LoopTag+77 ]
# CHECK: Vreg: %29[ 21 ]
# CHECK: Vreg: %36[ 50 ]
# CHECK: Vreg: %17[ 23 ]
# CHECK: Vreg: %50[ 8 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Vreg: %19[ LoopTag+77 ]
# CHECK: Instr: %52:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %51, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+85 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %21[ 70 ]
# CHECK: Vreg: %2[ LoopTag+85 ]
# CHECK: Vreg: %42[ LoopTag+97 ]
# CHECK: Vreg: %4[ 64 ]
# CHECK: Vreg: %18:sub0[ 30 ]
# CHECK: Vreg: %18:sub1[ 31 ]
# CHECK: Vreg: %18[ LoopTag+118 ]
# CHECK: Vreg: %51[ 0 ]
# CHECK: Vreg: %20[ LoopTag+71 ]
# CHECK: Vreg: %1[ LoopTag+121 ]
# CHECK: Vreg: %34[ 65 ]
# CHECK: Vreg: %22[ 18 ]
# CHECK: Vreg: %3[ LoopTag+76 ]
# CHECK: Vreg: %29[ 20 ]
# CHECK: Vreg: %36[ 49 ]
# CHECK: Vreg: %17[ 22 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Vreg: %19[ LoopTag+76 ]
# CHECK: Instr: %53:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %52, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+84 ]
# CHECK: Vreg: %52[ 0 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %21[ 69 ]
# CHECK: Vreg: %2[ LoopTag+84 ]
# CHECK: Vreg: %42[ LoopTag+96 ]
# CHECK: Vreg: %4[ 63 ]
# CHECK: Vreg: %18:sub0[ 29 ]
# CHECK: Vreg: %18:sub1[ 30 ]
# CHECK: Vreg: %18[ LoopTag+117 ]
# CHECK: Vreg: %20[ LoopTag+70 ]
# CHECK: Vreg: %1[ LoopTag+120 ]
# CHECK: Vreg: %34[ 64 ]
# CHECK: Vreg: %22[ 17 ]
# CHECK: Vreg: %3[ LoopTag+75 ]
# CHECK: Vreg: %29[ 19 ]
# CHECK: Vreg: %36[ 48 ]
# CHECK: Vreg: %17[ 21 ]
# CHECK: Vreg: %50[ 6 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Vreg: %19[ LoopTag+75 ]
# CHECK: Instr: %54:sgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept S_MUL_F32 killed %53, 1333788670, implicit $mode
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+83 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 68 ]
# CHECK: Vreg: %2[ LoopTag+83 ]
# CHECK: Vreg: %42[ LoopTag+95 ]
# CHECK: Vreg: %4[ 62 ]
# CHECK: Vreg: %18:sub0[ 28 ]
# CHECK: Vreg: %18:sub1[ 29 ]
# CHECK: Vreg: %18[ LoopTag+116 ]
# CHECK: Vreg: %20[ LoopTag+69 ]
# CHECK: Vreg: %1[ LoopTag+119 ]
# CHECK: Vreg: %53[ 0 ]
# CHECK: Vreg: %34[ 63 ]
# CHECK: Vreg: %22[ 16 ]
# CHECK: Vreg: %3[ LoopTag+74 ]
# CHECK: Vreg: %29[ 18 ]
# CHECK: Vreg: %36[ 47 ]
# CHECK: Vreg: %17[ 20 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Vreg: %19[ LoopTag+74 ]
# CHECK: Instr: %55:sreg_32 = nofpexcept S_CVT_U32_F32 killed %54, implicit $mode
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+82 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 67 ]
# CHECK: Vreg: %2[ LoopTag+82 ]
# CHECK: Vreg: %54[ 0 ]
# CHECK: Vreg: %42[ LoopTag+94 ]
# CHECK: Vreg: %4[ 61 ]
# CHECK: Vreg: %18:sub0[ 27 ]
# CHECK: Vreg: %18:sub1[ 28 ]
# CHECK: Vreg: %18[ LoopTag+115 ]
# CHECK: Vreg: %20[ LoopTag+68 ]
# CHECK: Vreg: %1[ LoopTag+118 ]
# CHECK: Vreg: %34[ 62 ]
# CHECK: Vreg: %22[ 15 ]
# CHECK: Vreg: %3[ LoopTag+73 ]
# CHECK: Vreg: %29[ 17 ]
# CHECK: Vreg: %36[ 46 ]
# CHECK: Vreg: %17[ 19 ]
# CHECK: Vreg: %50[ 4 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Vreg: %19[ LoopTag+73 ]
# CHECK: Instr: %56:sreg_32 = S_MUL_I32 %38, %55
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+81 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 66 ]
# CHECK: Vreg: %2[ LoopTag+81 ]
# CHECK: Vreg: %42[ LoopTag+93 ]
# CHECK: Vreg: %4[ 60 ]
# CHECK: Vreg: %18:sub0[ 26 ]
# CHECK: Vreg: %18:sub1[ 27 ]
# CHECK: Vreg: %18[ LoopTag+114 ]
# CHECK: Vreg: %20[ LoopTag+67 ]
# CHECK: Vreg: %1[ LoopTag+117 ]
# CHECK: Vreg: %34[ 61 ]
# CHECK: Vreg: %22[ 14 ]
# CHECK: Vreg: %3[ LoopTag+72 ]
# CHECK: Vreg: %29[ 16 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 45 ]
# CHECK: Vreg: %17[ 18 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+72 ]
# CHECK: Instr: %57:sreg_32 = S_MUL_HI_U32 %55, killed %56
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+80 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 65 ]
# CHECK: Vreg: %2[ LoopTag+80 ]
# CHECK: Vreg: %42[ LoopTag+92 ]
# CHECK: Vreg: %4[ 59 ]
# CHECK: Vreg: %56[ 0 ]
# CHECK: Vreg: %18:sub0[ 25 ]
# CHECK: Vreg: %18:sub1[ 26 ]
# CHECK: Vreg: %18[ LoopTag+113 ]
# CHECK: Vreg: %20[ LoopTag+66 ]
# CHECK: Vreg: %1[ LoopTag+116 ]
# CHECK: Vreg: %34[ 60 ]
# CHECK: Vreg: %22[ 13 ]
# CHECK: Vreg: %3[ LoopTag+71 ]
# CHECK: Vreg: %29[ 15 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 44 ]
# CHECK: Vreg: %17[ 17 ]
# CHECK: Vreg: %50[ 2 ]
# CHECK: Vreg: %38[ 57 ]
# CHECK: Vreg: %19[ LoopTag+71 ]
# CHECK: Instr: %58:sreg_32 = S_ADD_I32 killed %55, killed %57, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+79 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 64 ]
# CHECK: Vreg: %2[ LoopTag+79 ]
# CHECK: Vreg: %42[ LoopTag+91 ]
# CHECK: Vreg: %4[ 58 ]
# CHECK: Vreg: %18:sub0[ 24 ]
# CHECK: Vreg: %18:sub1[ 25 ]
# CHECK: Vreg: %18[ LoopTag+112 ]
# CHECK: Vreg: %20[ LoopTag+65 ]
# CHECK: Vreg: %1[ LoopTag+115 ]
# CHECK: Vreg: %34[ 59 ]
# CHECK: Vreg: %22[ 12 ]
# CHECK: Vreg: %3[ LoopTag+70 ]
# CHECK: Vreg: %29[ 14 ]
# CHECK: Vreg: %55[ 0 ]
# CHECK: Vreg: %36[ 43 ]
# CHECK: Vreg: %17[ 16 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %57[ 0 ]
# CHECK: Vreg: %38[ 56 ]
# CHECK: Vreg: %19[ LoopTag+70 ]
# CHECK: Instr: %59:vgpr_32 = V_MUL_HI_U32_e64 %50, killed %58, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+78 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 63 ]
# CHECK: Vreg: %2[ LoopTag+78 ]
# CHECK: Vreg: %42[ LoopTag+90 ]
# CHECK: Vreg: %4[ 57 ]
# CHECK: Vreg: %18:sub0[ 23 ]
# CHECK: Vreg: %18:sub1[ 24 ]
# CHECK: Vreg: %18[ LoopTag+111 ]
# CHECK: Vreg: %58[ 0 ]
# CHECK: Vreg: %20[ LoopTag+64 ]
# CHECK: Vreg: %1[ LoopTag+114 ]
# CHECK: Vreg: %34[ 58 ]
# CHECK: Vreg: %22[ 11 ]
# CHECK: Vreg: %3[ LoopTag+69 ]
# CHECK: Vreg: %29[ 13 ]
# CHECK: Vreg: %36[ 42 ]
# CHECK: Vreg: %17[ 15 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %38[ 55 ]
# CHECK: Vreg: %19[ LoopTag+69 ]
# CHECK: Instr: %60:vgpr_32 = V_MUL_LO_U32_e64 %59, %40, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+77 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 62 ]
# CHECK: Vreg: %2[ LoopTag+77 ]
# CHECK: Vreg: %42[ LoopTag+89 ]
# CHECK: Vreg: %4[ 56 ]
# CHECK: Vreg: %18:sub0[ 22 ]
# CHECK: Vreg: %18:sub1[ 23 ]
# CHECK: Vreg: %18[ LoopTag+110 ]
# CHECK: Vreg: %20[ LoopTag+63 ]
# CHECK: Vreg: %1[ LoopTag+113 ]
# CHECK: Vreg: %34[ 57 ]
# CHECK: Vreg: %22[ 10 ]
# CHECK: Vreg: %3[ LoopTag+68 ]
# CHECK: Vreg: %29[ 12 ]
# CHECK: Vreg: %36[ 41 ]
# CHECK: Vreg: %17[ 14 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Vreg: %38[ 54 ]
# CHECK: Vreg: %19[ LoopTag+68 ]
# CHECK: Instr: %61:vgpr_32 = V_SUB_U32_e64 %50, killed %60, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+76 ]
# CHECK: Vreg: %59[ 2 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 61 ]
# CHECK: Vreg: %2[ LoopTag+76 ]
# CHECK: Vreg: %42[ LoopTag+88 ]
# CHECK: Vreg: %4[ 55 ]
# CHECK: Vreg: %18:sub0[ 21 ]
# CHECK: Vreg: %18:sub1[ 22 ]
# CHECK: Vreg: %18[ LoopTag+109 ]
# CHECK: Vreg: %20[ LoopTag+62 ]
# CHECK: Vreg: %1[ LoopTag+112 ]
# CHECK: Vreg: %34[ 56 ]
# CHECK: Vreg: %60[ 0 ]
# CHECK: Vreg: %22[ 9 ]
# CHECK: Vreg: %3[ LoopTag+67 ]
# CHECK: Vreg: %29[ 11 ]
# CHECK: Vreg: %36[ 40 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Vreg: %38[ 53 ]
# CHECK: Vreg: %19[ LoopTag+67 ]
# CHECK: Instr: %62:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %40, %61, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+75 ]
# CHECK: Vreg: %59[ 1 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 60 ]
# CHECK: Vreg: %2[ LoopTag+75 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %42[ LoopTag+87 ]
# CHECK: Vreg: %4[ 54 ]
# CHECK: Vreg: %18:sub0[ 20 ]
# CHECK: Vreg: %18:sub1[ 21 ]
# CHECK: Vreg: %18[ LoopTag+108 ]
# CHECK: Vreg: %20[ LoopTag+61 ]
# CHECK: Vreg: %1[ LoopTag+111 ]
# CHECK: Vreg: %34[ 55 ]
# CHECK: Vreg: %22[ 8 ]
# CHECK: Vreg: %3[ LoopTag+66 ]
# CHECK: Vreg: %29[ 10 ]
# CHECK: Vreg: %36[ 39 ]
# CHECK: Vreg: %17[ 12 ]
# CHECK: Vreg: %50[ LoopTag+71 ]
# CHECK: Vreg: %38[ 52 ]
# CHECK: Vreg: %19[ LoopTag+66 ]
# CHECK: Instr: %63:vgpr_32 = V_ADD_U32_e64 1, %59, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+74 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 59 ]
# CHECK: Vreg: %2[ LoopTag+74 ]
# CHECK: Vreg: %61[ 2 ]
# CHECK: Vreg: %42[ LoopTag+86 ]
# CHECK: Vreg: %4[ 53 ]
# CHECK: Vreg: %18:sub0[ 19 ]
# CHECK: Vreg: %18:sub1[ 20 ]
# CHECK: Vreg: %18[ LoopTag+107 ]
# CHECK: Vreg: %20[ LoopTag+60 ]
# CHECK: Vreg: %1[ LoopTag+110 ]
# CHECK: Vreg: %34[ 54 ]
# CHECK: Vreg: %22[ 7 ]
# CHECK: Vreg: %3[ LoopTag+65 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %36[ 38 ]
# CHECK: Vreg: %17[ 11 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %50[ LoopTag+70 ]
# CHECK: Vreg: %38[ 51 ]
# CHECK: Vreg: %19[ LoopTag+65 ]
# CHECK: Instr: %64:vgpr_32 = V_CNDMASK_B32_e64 0, killed %59, 0, killed %63, %62, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+73 ]
# CHECK: Vreg: %59[ 0 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 58 ]
# CHECK: Vreg: %2[ LoopTag+73 ]
# CHECK: Vreg: %61[ 1 ]
# CHECK: Vreg: %42[ LoopTag+85 ]
# CHECK: Vreg: %4[ 52 ]
# CHECK: Vreg: %18:sub0[ 18 ]
# CHECK: Vreg: %18:sub1[ 19 ]
# CHECK: Vreg: %18[ LoopTag+106 ]
# CHECK: Vreg: %63[ 0 ]
# CHECK: Vreg: %20[ LoopTag+59 ]
# CHECK: Vreg: %1[ LoopTag+109 ]
# CHECK: Vreg: %34[ 53 ]
# CHECK: Vreg: %22[ 6 ]
# CHECK: Vreg: %3[ LoopTag+64 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %36[ 37 ]
# CHECK: Vreg: %17[ 10 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %50[ LoopTag+69 ]
# CHECK: Vreg: %38[ 50 ]
# CHECK: Vreg: %19[ LoopTag+64 ]
# CHECK: Instr: %65:vgpr_32 = V_SUBREV_U32_e64 %40, %61, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+72 ]
# CHECK: Vreg: %64[ 3 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 57 ]
# CHECK: Vreg: %2[ LoopTag+72 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %42[ LoopTag+84 ]
# CHECK: Vreg: %4[ 51 ]
# CHECK: Vreg: %18:sub0[ 17 ]
# CHECK: Vreg: %18:sub1[ 18 ]
# CHECK: Vreg: %18[ LoopTag+105 ]
# CHECK: Vreg: %20[ LoopTag+58 ]
# CHECK: Vreg: %1[ LoopTag+108 ]
# CHECK: Vreg: %34[ 52 ]
# CHECK: Vreg: %22[ 5 ]
# CHECK: Vreg: %3[ LoopTag+63 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %36[ 36 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %62[ 1 ]
# CHECK: Vreg: %50[ LoopTag+68 ]
# CHECK: Vreg: %38[ 49 ]
# CHECK: Vreg: %19[ LoopTag+63 ]
# CHECK: Instr: %66:vgpr_32 = V_CNDMASK_B32_e64 0, killed %61, 0, killed %65, killed %62, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+71 ]
# CHECK: Vreg: %64[ 2 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 56 ]
# CHECK: Vreg: %2[ LoopTag+71 ]
# CHECK: Vreg: %61[ 0 ]
# CHECK: Vreg: %42[ LoopTag+83 ]
# CHECK: Vreg: %4[ 50 ]
# CHECK: Vreg: %18:sub0[ 16 ]
# CHECK: Vreg: %18:sub1[ 17 ]
# CHECK: Vreg: %18[ LoopTag+104 ]
# CHECK: Vreg: %20[ LoopTag+57 ]
# CHECK: Vreg: %1[ LoopTag+107 ]
# CHECK: Vreg: %65[ 0 ]
# CHECK: Vreg: %34[ 51 ]
# CHECK: Vreg: %22[ 4 ]
# CHECK: Vreg: %3[ LoopTag+62 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %36[ 35 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Vreg: %62[ 0 ]
# CHECK: Vreg: %50[ LoopTag+67 ]
# CHECK: Vreg: %38[ 48 ]
# CHECK: Vreg: %19[ LoopTag+62 ]
# CHECK: Instr: %67:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %40, killed %66, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+70 ]
# CHECK: Vreg: %64[ 1 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 55 ]
# CHECK: Vreg: %2[ LoopTag+70 ]
# CHECK: Vreg: %66[ 0 ]
# CHECK: Vreg: %42[ LoopTag+82 ]
# CHECK: Vreg: %4[ 49 ]
# CHECK: Vreg: %18:sub0[ 15 ]
# CHECK: Vreg: %18:sub1[ 16 ]
# CHECK: Vreg: %18[ LoopTag+103 ]
# CHECK: Vreg: %20[ LoopTag+56 ]
# CHECK: Vreg: %1[ LoopTag+106 ]
# CHECK: Vreg: %34[ 50 ]
# CHECK: Vreg: %22[ 3 ]
# CHECK: Vreg: %3[ LoopTag+61 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %36[ 34 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %50[ LoopTag+66 ]
# CHECK: Vreg: %38[ 47 ]
# CHECK: Vreg: %19[ LoopTag+61 ]
# CHECK: Instr: %68:vgpr_32 = V_ADD_U32_e64 1, %64, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+69 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 54 ]
# CHECK: Vreg: %2[ LoopTag+69 ]
# CHECK: Vreg: %42[ LoopTag+81 ]
# CHECK: Vreg: %4[ 48 ]
# CHECK: Vreg: %18:sub0[ 14 ]
# CHECK: Vreg: %18:sub1[ 15 ]
# CHECK: Vreg: %18[ LoopTag+102 ]
# CHECK: Vreg: %20[ LoopTag+55 ]
# CHECK: Vreg: %1[ LoopTag+105 ]
# CHECK: Vreg: %34[ 49 ]
# CHECK: Vreg: %22[ 2 ]
# CHECK: Vreg: %3[ LoopTag+60 ]
# CHECK: Vreg: %67[ 1 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %36[ 33 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %50[ LoopTag+65 ]
# CHECK: Vreg: %38[ 46 ]
# CHECK: Vreg: %19[ LoopTag+60 ]
# CHECK: Instr: %69:vgpr_32 = V_CNDMASK_B32_e64 0, killed %64, 0, killed %68, killed %67, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+68 ]
# CHECK: Vreg: %64[ 0 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 53 ]
# CHECK: Vreg: %2[ LoopTag+68 ]
# CHECK: Vreg: %42[ LoopTag+80 ]
# CHECK: Vreg: %4[ 47 ]
# CHECK: Vreg: %68[ 0 ]
# CHECK: Vreg: %18:sub0[ 13 ]
# CHECK: Vreg: %18:sub1[ 14 ]
# CHECK: Vreg: %18[ LoopTag+101 ]
# CHECK: Vreg: %20[ LoopTag+54 ]
# CHECK: Vreg: %1[ LoopTag+104 ]
# CHECK: Vreg: %34[ 48 ]
# CHECK: Vreg: %22[ 1 ]
# CHECK: Vreg: %3[ LoopTag+59 ]
# CHECK: Vreg: %67[ 0 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %36[ 32 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %50[ LoopTag+64 ]
# CHECK: Vreg: %38[ 45 ]
# CHECK: Vreg: %19[ LoopTag+59 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %22, killed %69, 0, 0, implicit $exec :: (store (s32) into %ir.p1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+67 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 52 ]
# CHECK: Vreg: %2[ LoopTag+67 ]
# CHECK: Vreg: %42[ LoopTag+79 ]
# CHECK: Vreg: %4[ 46 ]
# CHECK: Vreg: %18:sub0[ 12 ]
# CHECK: Vreg: %18:sub1[ 13 ]
# CHECK: Vreg: %18[ LoopTag+100 ]
# CHECK: Vreg: %20[ LoopTag+53 ]
# CHECK: Vreg: %1[ LoopTag+103 ]
# CHECK: Vreg: %34[ 47 ]
# CHECK: Vreg: %22[ 0 ]
# CHECK: Vreg: %3[ LoopTag+58 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %36[ 31 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %69[ 0 ]
# CHECK: Vreg: %50[ LoopTag+63 ]
# CHECK: Vreg: %38[ 44 ]
# CHECK: Vreg: %19[ LoopTag+58 ]
# CHECK: Instr: %41:sreg_32 = S_ADD_I32 %40, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+66 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 51 ]
# CHECK: Vreg: %2[ LoopTag+66 ]
# CHECK: Vreg: %42[ LoopTag+78 ]
# CHECK: Vreg: %4[ 45 ]
# CHECK: Vreg: %18:sub0[ 11 ]
# CHECK: Vreg: %18:sub1[ 12 ]
# CHECK: Vreg: %18[ LoopTag+99 ]
# CHECK: Vreg: %20[ LoopTag+52 ]
# CHECK: Vreg: %1[ LoopTag+102 ]
# CHECK: Vreg: %34[ 46 ]
# CHECK: Vreg: %22[ 77 ]
# CHECK: Vreg: %3[ LoopTag+57 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %36[ 30 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %50[ LoopTag+62 ]
# CHECK: Vreg: %38[ 43 ]
# CHECK: Vreg: %19[ LoopTag+57 ]
# CHECK: Instr: %70:vgpr_32 = V_ADD_U32_e64 %40, %29, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+65 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 50 ]
# CHECK: Vreg: %2[ LoopTag+65 ]
# CHECK: Vreg: %42[ LoopTag+77 ]
# CHECK: Vreg: %4[ 44 ]
# CHECK: Vreg: %18:sub0[ 10 ]
# CHECK: Vreg: %18:sub1[ 11 ]
# CHECK: Vreg: %18[ LoopTag+98 ]
# CHECK: Vreg: %20[ LoopTag+51 ]
# CHECK: Vreg: %1[ LoopTag+101 ]
# CHECK: Vreg: %34[ 45 ]
# CHECK: Vreg: %41[ 44 ]
# CHECK: Vreg: %22[ 76 ]
# CHECK: Vreg: %3[ LoopTag+56 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %36[ 29 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %50[ LoopTag+61 ]
# CHECK: Vreg: %38[ 42 ]
# CHECK: Vreg: %19[ LoopTag+56 ]
# CHECK: Instr: %71:vgpr_32 = V_LSHRREV_B32_e64 24, %70, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+64 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 49 ]
# CHECK: Vreg: %2[ LoopTag+64 ]
# CHECK: Vreg: %42[ LoopTag+76 ]
# CHECK: Vreg: %4[ 43 ]
# CHECK: Vreg: %18:sub0[ 9 ]
# CHECK: Vreg: %18:sub1[ 10 ]
# CHECK: Vreg: %18[ LoopTag+97 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %20[ LoopTag+50 ]
# CHECK: Vreg: %1[ LoopTag+100 ]
# CHECK: Vreg: %34[ 44 ]
# CHECK: Vreg: %41[ 43 ]
# CHECK: Vreg: %22[ 75 ]
# CHECK: Vreg: %3[ LoopTag+55 ]
# CHECK: Vreg: %29[ LoopTag+53 ]
# CHECK: Vreg: %36[ 28 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+60 ]
# CHECK: Vreg: %38[ 41 ]
# CHECK: Vreg: %19[ LoopTag+55 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %17, killed %71, 3, 0, implicit $exec :: (store (s8) into %ir.p6 + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+63 ]
# CHECK: Vreg: %71[ 0 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 48 ]
# CHECK: Vreg: %2[ LoopTag+63 ]
# CHECK: Vreg: %42[ LoopTag+75 ]
# CHECK: Vreg: %4[ 42 ]
# CHECK: Vreg: %18:sub0[ 8 ]
# CHECK: Vreg: %18:sub1[ 9 ]
# CHECK: Vreg: %18[ LoopTag+96 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %20[ LoopTag+49 ]
# CHECK: Vreg: %1[ LoopTag+99 ]
# CHECK: Vreg: %34[ 43 ]
# CHECK: Vreg: %41[ 42 ]
# CHECK: Vreg: %22[ 74 ]
# CHECK: Vreg: %3[ LoopTag+54 ]
# CHECK: Vreg: %29[ LoopTag+52 ]
# CHECK: Vreg: %36[ 27 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %50[ LoopTag+59 ]
# CHECK: Vreg: %38[ 40 ]
# CHECK: Vreg: %19[ LoopTag+54 ]
# CHECK: Instr: GLOBAL_STORE_BYTE_D16_HI %17, %70, 2, 0, implicit $exec :: (store (s8) into %ir.p6 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+62 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 47 ]
# CHECK: Vreg: %2[ LoopTag+62 ]
# CHECK: Vreg: %42[ LoopTag+74 ]
# CHECK: Vreg: %4[ 41 ]
# CHECK: Vreg: %18:sub0[ 7 ]
# CHECK: Vreg: %18:sub1[ 8 ]
# CHECK: Vreg: %18[ LoopTag+95 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %20[ LoopTag+48 ]
# CHECK: Vreg: %1[ LoopTag+98 ]
# CHECK: Vreg: %34[ 42 ]
# CHECK: Vreg: %41[ 41 ]
# CHECK: Vreg: %22[ 73 ]
# CHECK: Vreg: %3[ LoopTag+53 ]
# CHECK: Vreg: %29[ LoopTag+51 ]
# CHECK: Vreg: %36[ 26 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %50[ LoopTag+58 ]
# CHECK: Vreg: %38[ 39 ]
# CHECK: Vreg: %19[ LoopTag+53 ]
# CHECK: Instr: %72:vgpr_32 = V_LSHRREV_B32_e64 8, %70, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+61 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 46 ]
# CHECK: Vreg: %2[ LoopTag+61 ]
# CHECK: Vreg: %42[ LoopTag+73 ]
# CHECK: Vreg: %4[ 40 ]
# CHECK: Vreg: %18:sub0[ 6 ]
# CHECK: Vreg: %18:sub1[ 7 ]
# CHECK: Vreg: %18[ LoopTag+94 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %20[ LoopTag+47 ]
# CHECK: Vreg: %1[ LoopTag+97 ]
# CHECK: Vreg: %34[ 41 ]
# CHECK: Vreg: %41[ 40 ]
# CHECK: Vreg: %22[ 72 ]
# CHECK: Vreg: %3[ LoopTag+52 ]
# CHECK: Vreg: %29[ LoopTag+50 ]
# CHECK: Vreg: %36[ 25 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+57 ]
# CHECK: Vreg: %38[ 38 ]
# CHECK: Vreg: %19[ LoopTag+52 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %17, killed %72, 1, 0, implicit $exec :: (store (s8) into %ir.p6 + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+60 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 45 ]
# CHECK: Vreg: %2[ LoopTag+60 ]
# CHECK: Vreg: %42[ LoopTag+72 ]
# CHECK: Vreg: %4[ 39 ]
# CHECK: Vreg: %18:sub0[ 5 ]
# CHECK: Vreg: %18:sub1[ 6 ]
# CHECK: Vreg: %18[ LoopTag+93 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %20[ LoopTag+46 ]
# CHECK: Vreg: %1[ LoopTag+96 ]
# CHECK: Vreg: %72[ 0 ]
# CHECK: Vreg: %34[ 40 ]
# CHECK: Vreg: %41[ 39 ]
# CHECK: Vreg: %22[ 71 ]
# CHECK: Vreg: %3[ LoopTag+51 ]
# CHECK: Vreg: %29[ LoopTag+49 ]
# CHECK: Vreg: %36[ 24 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %50[ LoopTag+56 ]
# CHECK: Vreg: %38[ 37 ]
# CHECK: Vreg: %19[ LoopTag+51 ]
# CHECK: Instr: GLOBAL_STORE_BYTE %17, %70, 0, 0, implicit $exec :: (store (s8) into %ir.p6, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+59 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 44 ]
# CHECK: Vreg: %2[ LoopTag+59 ]
# CHECK: Vreg: %42[ LoopTag+71 ]
# CHECK: Vreg: %4[ 38 ]
# CHECK: Vreg: %18:sub0[ 4 ]
# CHECK: Vreg: %18:sub1[ 5 ]
# CHECK: Vreg: %18[ LoopTag+92 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %20[ LoopTag+45 ]
# CHECK: Vreg: %1[ LoopTag+95 ]
# CHECK: Vreg: %34[ 39 ]
# CHECK: Vreg: %41[ 38 ]
# CHECK: Vreg: %22[ 70 ]
# CHECK: Vreg: %3[ LoopTag+50 ]
# CHECK: Vreg: %29[ LoopTag+48 ]
# CHECK: Vreg: %36[ 23 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %50[ LoopTag+55 ]
# CHECK: Vreg: %38[ 36 ]
# CHECK: Vreg: %19[ LoopTag+50 ]
# CHECK: Instr: %73:sreg_32_xm0 = S_ASHR_I32 %40, 31, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+58 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 43 ]
# CHECK: Vreg: %2[ LoopTag+58 ]
# CHECK: Vreg: %42[ LoopTag+70 ]
# CHECK: Vreg: %4[ 37 ]
# CHECK: Vreg: %18:sub0[ 3 ]
# CHECK: Vreg: %18:sub1[ 4 ]
# CHECK: Vreg: %18[ LoopTag+91 ]
# CHECK: Vreg: %70[ 21 ]
# CHECK: Vreg: %20[ LoopTag+44 ]
# CHECK: Vreg: %1[ LoopTag+94 ]
# CHECK: Vreg: %34[ 38 ]
# CHECK: Vreg: %41[ 37 ]
# CHECK: Vreg: %22[ 69 ]
# CHECK: Vreg: %3[ LoopTag+49 ]
# CHECK: Vreg: %29[ LoopTag+47 ]
# CHECK: Vreg: %36[ 22 ]
# CHECK: Vreg: %17[ 73 ]
# CHECK: Vreg: %50[ LoopTag+54 ]
# CHECK: Vreg: %38[ 35 ]
# CHECK: Vreg: %19[ LoopTag+49 ]
# CHECK: Instr: %74:sreg_64 = REG_SEQUENCE %40, %subreg.sub0, killed %73, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+57 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 42 ]
# CHECK: Vreg: %2[ LoopTag+57 ]
# CHECK: Vreg: %73[ 0 ]
# CHECK: Vreg: %42[ LoopTag+69 ]
# CHECK: Vreg: %4[ 36 ]
# CHECK: Vreg: %18:sub0[ 2 ]
# CHECK: Vreg: %18:sub1[ 3 ]
# CHECK: Vreg: %18[ LoopTag+90 ]
# CHECK: Vreg: %70[ 20 ]
# CHECK: Vreg: %20[ LoopTag+43 ]
# CHECK: Vreg: %1[ LoopTag+93 ]
# CHECK: Vreg: %34[ 37 ]
# CHECK: Vreg: %41[ 36 ]
# CHECK: Vreg: %22[ 68 ]
# CHECK: Vreg: %3[ LoopTag+48 ]
# CHECK: Vreg: %29[ LoopTag+46 ]
# CHECK: Vreg: %36[ 21 ]
# CHECK: Vreg: %17[ 72 ]
# CHECK: Vreg: %50[ LoopTag+53 ]
# CHECK: Vreg: %38[ 34 ]
# CHECK: Vreg: %19[ LoopTag+48 ]
# CHECK: Instr: %75:sreg_64 = nsw S_LSHL_B64 killed %74, 2, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+56 ]
# CHECK: Vreg: %40[ 37 ]
# CHECK: Vreg: %21[ 41 ]
# CHECK: Vreg: %2[ LoopTag+56 ]
# CHECK: Vreg: %42[ LoopTag+68 ]
# CHECK: Vreg: %4[ 35 ]
# CHECK: Vreg: %18:sub0[ 1 ]
# CHECK: Vreg: %18:sub1[ 2 ]
# CHECK: Vreg: %18[ LoopTag+89 ]
# CHECK: Vreg: %70[ 19 ]
# CHECK: Vreg: %20[ LoopTag+42 ]
# CHECK: Vreg: %1[ LoopTag+92 ]
# CHECK: Vreg: %34[ 36 ]
# CHECK: Vreg: %41[ 35 ]
# CHECK: Vreg: %22[ 67 ]
# CHECK: Vreg: %3[ LoopTag+47 ]
# CHECK: Vreg: %29[ LoopTag+45 ]
# CHECK: Vreg: %74[ 0 ]
# CHECK: Vreg: %36[ 20 ]
# CHECK: Vreg: %17[ 71 ]
# CHECK: Vreg: %50[ LoopTag+52 ]
# CHECK: Vreg: %38[ 33 ]
# CHECK: Vreg: %19[ LoopTag+47 ]
# CHECK: Instr: %76:vgpr_32, %77:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %18.sub0, %75.sub0, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+55 ]
# CHECK: Vreg: %40[ 36 ]
# CHECK: Vreg: %21[ 40 ]
# CHECK: Vreg: %2[ LoopTag+55 ]
# CHECK: Vreg: %42[ LoopTag+67 ]
# CHECK: Vreg: %4[ 34 ]
# CHECK: Vreg: %75:sub0[ 0 ]
# CHECK: Vreg: %75:sub1[ 1 ]
# CHECK: Vreg: %18:sub0[ 0 ]
# CHECK: Vreg: %18:sub1[ 1 ]
# CHECK: Vreg: %18[ LoopTag+88 ]
# CHECK: Vreg: %70[ 18 ]
# CHECK: Vreg: %20[ LoopTag+41 ]
# CHECK: Vreg: %1[ LoopTag+91 ]
# CHECK: Vreg: %34[ 35 ]
# CHECK: Vreg: %41[ 34 ]
# CHECK: Vreg: %22[ 66 ]
# CHECK: Vreg: %3[ LoopTag+46 ]
# CHECK: Vreg: %29[ LoopTag+44 ]
# CHECK: Vreg: %36[ 19 ]
# CHECK: Vreg: %17[ 70 ]
# CHECK: Vreg: %50[ LoopTag+51 ]
# CHECK: Vreg: %38[ 32 ]
# CHECK: Vreg: %19[ LoopTag+46 ]
# CHECK: Instr: %78:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %75.sub1, %18.sub1, killed %77, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+54 ]
# CHECK: Vreg: %40[ 35 ]
# CHECK: Vreg: %21[ 39 ]
# CHECK: Vreg: %2[ LoopTag+54 ]
# CHECK: Vreg: %42[ LoopTag+66 ]
# CHECK: Vreg: %4[ 33 ]
# CHECK: Vreg: %75:sub1[ 0 ]
# CHECK: Vreg: %18:sub1[ 0 ]
# CHECK: Vreg: %18:sub0[ 77 ]
# CHECK: Vreg: %18[ LoopTag+87 ]
# CHECK: Vreg: %70[ 17 ]
# CHECK: Vreg: %77[ 0 ]
# CHECK: Vreg: %20[ LoopTag+40 ]
# CHECK: Vreg: %1[ LoopTag+90 ]
# CHECK: Vreg: %34[ 34 ]
# CHECK: Vreg: %41[ 33 ]
# CHECK: Vreg: %22[ 65 ]
# CHECK: Vreg: %3[ LoopTag+45 ]
# CHECK: Vreg: %29[ LoopTag+43 ]
# CHECK: Vreg: %36[ 18 ]
# CHECK: Vreg: %17[ 69 ]
# CHECK: Vreg: %50[ LoopTag+50 ]
# CHECK: Vreg: %76[ 1 ]
# CHECK: Vreg: %38[ 31 ]
# CHECK: Vreg: %19[ LoopTag+45 ]
# CHECK: Instr: %79:vreg_64 = REG_SEQUENCE killed %76, %subreg.sub0, killed %78, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+53 ]
# CHECK: Vreg: %78[ 0 ]
# CHECK: Vreg: %40[ 34 ]
# CHECK: Vreg: %21[ 38 ]
# CHECK: Vreg: %2[ LoopTag+53 ]
# CHECK: Vreg: %42[ LoopTag+65 ]
# CHECK: Vreg: %4[ 32 ]
# CHECK: Vreg: %18:sub0[ 76 ]
# CHECK: Vreg: %18:sub1[ 77 ]
# CHECK: Vreg: %18[ LoopTag+86 ]
# CHECK: Vreg: %70[ 16 ]
# CHECK: Vreg: %20[ LoopTag+39 ]
# CHECK: Vreg: %1[ LoopTag+89 ]
# CHECK: Vreg: %34[ 33 ]
# CHECK: Vreg: %41[ 32 ]
# CHECK: Vreg: %22[ 64 ]
# CHECK: Vreg: %3[ LoopTag+44 ]
# CHECK: Vreg: %29[ LoopTag+42 ]
# CHECK: Vreg: %36[ 17 ]
# CHECK: Vreg: %17[ 68 ]
# CHECK: Vreg: %50[ LoopTag+49 ]
# CHECK: Vreg: %76[ 0 ]
# CHECK: Vreg: %38[ 30 ]
# CHECK: Vreg: %19[ LoopTag+44 ]
# CHECK: Instr: %80:vgpr_32 = GLOBAL_LOAD_UBYTE %79, 0, 0, implicit $exec :: (load (s8) from %ir.gep, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+52 ]
# CHECK: Vreg: %40[ 33 ]
# CHECK: Vreg: %21[ 37 ]
# CHECK: Vreg: %2[ LoopTag+52 ]
# CHECK: Vreg: %42[ LoopTag+64 ]
# CHECK: Vreg: %4[ 31 ]
# CHECK: Vreg: %18:sub0[ 75 ]
# CHECK: Vreg: %18:sub1[ 76 ]
# CHECK: Vreg: %18[ LoopTag+85 ]
# CHECK: Vreg: %70[ 15 ]
# CHECK: Vreg: %20[ LoopTag+38 ]
# CHECK: Vreg: %1[ LoopTag+88 ]
# CHECK: Vreg: %34[ 32 ]
# CHECK: Vreg: %79[ 0 ]
# CHECK: Vreg: %41[ 31 ]
# CHECK: Vreg: %22[ 63 ]
# CHECK: Vreg: %3[ LoopTag+43 ]
# CHECK: Vreg: %29[ LoopTag+41 ]
# CHECK: Vreg: %36[ 16 ]
# CHECK: Vreg: %17[ 67 ]
# CHECK: Vreg: %50[ LoopTag+48 ]
# CHECK: Vreg: %38[ 29 ]
# CHECK: Vreg: %19[ LoopTag+43 ]
# CHECK: Instr: %81:vgpr_32 = GLOBAL_LOAD_UBYTE %79, 1, 0, implicit $exec :: (load (s8) from %ir.gep + 1, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+51 ]
# CHECK: Vreg: %40[ 32 ]
# CHECK: Vreg: %21[ 36 ]
# CHECK: Vreg: %2[ LoopTag+51 ]
# CHECK: Vreg: %80[ 1 ]
# CHECK: Vreg: %42[ LoopTag+63 ]
# CHECK: Vreg: %4[ 30 ]
# CHECK: Vreg: %18:sub0[ 74 ]
# CHECK: Vreg: %18:sub1[ 75 ]
# CHECK: Vreg: %18[ LoopTag+84 ]
# CHECK: Vreg: %70[ 14 ]
# CHECK: Vreg: %20[ LoopTag+37 ]
# CHECK: Vreg: %1[ LoopTag+87 ]
# CHECK: Vreg: %34[ 31 ]
# CHECK: Vreg: %79[ 0 ]
# CHECK: Vreg: %41[ 30 ]
# CHECK: Vreg: %22[ 62 ]
# CHECK: Vreg: %3[ LoopTag+42 ]
# CHECK: Vreg: %29[ LoopTag+40 ]
# CHECK: Vreg: %36[ 15 ]
# CHECK: Vreg: %17[ 66 ]
# CHECK: Vreg: %50[ LoopTag+47 ]
# CHECK: Vreg: %38[ 28 ]
# CHECK: Vreg: %19[ LoopTag+42 ]
# CHECK: Instr: %82:vgpr_32 = V_LSHL_OR_B32_e64 killed %81, 8, killed %80, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+50 ]
# CHECK: Vreg: %40[ 31 ]
# CHECK: Vreg: %21[ 35 ]
# CHECK: Vreg: %2[ LoopTag+50 ]
# CHECK: Vreg: %80[ 0 ]
# CHECK: Vreg: %42[ LoopTag+62 ]
# CHECK: Vreg: %4[ 29 ]
# CHECK: Vreg: %18:sub0[ 73 ]
# CHECK: Vreg: %18:sub1[ 74 ]
# CHECK: Vreg: %18[ LoopTag+83 ]
# CHECK: Vreg: %70[ 13 ]
# CHECK: Vreg: %20[ LoopTag+36 ]
# CHECK: Vreg: %1[ LoopTag+86 ]
# CHECK: Vreg: %34[ 30 ]
# CHECK: Vreg: %79[ 1 ]
# CHECK: Vreg: %41[ 29 ]
# CHECK: Vreg: %22[ 61 ]
# CHECK: Vreg: %3[ LoopTag+41 ]
# CHECK: Vreg: %29[ LoopTag+39 ]
# CHECK: Vreg: %36[ 14 ]
# CHECK: Vreg: %17[ 65 ]
# CHECK: Vreg: %81[ 0 ]
# CHECK: Vreg: %50[ LoopTag+46 ]
# CHECK: Vreg: %38[ 27 ]
# CHECK: Vreg: %19[ LoopTag+41 ]
# CHECK: Instr: %83:vgpr_32 = GLOBAL_LOAD_UBYTE %79, 2, 0, implicit $exec :: (load (s8) from %ir.gep + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+49 ]
# CHECK: Vreg: %40[ 30 ]
# CHECK: Vreg: %21[ 34 ]
# CHECK: Vreg: %2[ LoopTag+49 ]
# CHECK: Vreg: %42[ LoopTag+61 ]
# CHECK: Vreg: %4[ 28 ]
# CHECK: Vreg: %18:sub0[ 72 ]
# CHECK: Vreg: %18:sub1[ 73 ]
# CHECK: Vreg: %18[ LoopTag+82 ]
# CHECK: Vreg: %82[ 3 ]
# CHECK: Vreg: %70[ 12 ]
# CHECK: Vreg: %20[ LoopTag+35 ]
# CHECK: Vreg: %1[ LoopTag+85 ]
# CHECK: Vreg: %34[ 29 ]
# CHECK: Vreg: %79[ 0 ]
# CHECK: Vreg: %41[ 28 ]
# CHECK: Vreg: %22[ 60 ]
# CHECK: Vreg: %3[ LoopTag+40 ]
# CHECK: Vreg: %29[ LoopTag+38 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %17[ 64 ]
# CHECK: Vreg: %50[ LoopTag+45 ]
# CHECK: Vreg: %38[ 26 ]
# CHECK: Vreg: %19[ LoopTag+40 ]
# CHECK: Instr: %84:vgpr_32 = GLOBAL_LOAD_UBYTE killed %79, 3, 0, implicit $exec :: (load (s8) from %ir.gep + 3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+48 ]
# CHECK: Vreg: %83[ 1 ]
# CHECK: Vreg: %40[ 29 ]
# CHECK: Vreg: %21[ 33 ]
# CHECK: Vreg: %2[ LoopTag+48 ]
# CHECK: Vreg: %42[ LoopTag+60 ]
# CHECK: Vreg: %4[ 27 ]
# CHECK: Vreg: %18:sub0[ 71 ]
# CHECK: Vreg: %18:sub1[ 72 ]
# CHECK: Vreg: %18[ LoopTag+81 ]
# CHECK: Vreg: %82[ 2 ]
# CHECK: Vreg: %70[ 11 ]
# CHECK: Vreg: %20[ LoopTag+34 ]
# CHECK: Vreg: %1[ LoopTag+84 ]
# CHECK: Vreg: %34[ 28 ]
# CHECK: Vreg: %79[ 0 ]
# CHECK: Vreg: %41[ 27 ]
# CHECK: Vreg: %22[ 59 ]
# CHECK: Vreg: %3[ LoopTag+39 ]
# CHECK: Vreg: %29[ LoopTag+37 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %17[ 63 ]
# CHECK: Vreg: %50[ LoopTag+44 ]
# CHECK: Vreg: %38[ 25 ]
# CHECK: Vreg: %19[ LoopTag+39 ]
# CHECK: Instr: %85:vgpr_32 = V_LSHL_OR_B32_e64 killed %84, 8, killed %83, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+47 ]
# CHECK: Vreg: %83[ 0 ]
# CHECK: Vreg: %40[ 28 ]
# CHECK: Vreg: %21[ 32 ]
# CHECK: Vreg: %2[ LoopTag+47 ]
# CHECK: Vreg: %42[ LoopTag+59 ]
# CHECK: Vreg: %4[ 26 ]
# CHECK: Vreg: %18:sub0[ 70 ]
# CHECK: Vreg: %18:sub1[ 71 ]
# CHECK: Vreg: %18[ LoopTag+80 ]
# CHECK: Vreg: %82[ 1 ]
# CHECK: Vreg: %70[ 10 ]
# CHECK: Vreg: %20[ LoopTag+33 ]
# CHECK: Vreg: %1[ LoopTag+83 ]
# CHECK: Vreg: %84[ 0 ]
# CHECK: Vreg: %34[ 27 ]
# CHECK: Vreg: %41[ 26 ]
# CHECK: Vreg: %22[ 58 ]
# CHECK: Vreg: %3[ LoopTag+38 ]
# CHECK: Vreg: %29[ LoopTag+36 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %17[ 62 ]
# CHECK: Vreg: %50[ LoopTag+43 ]
# CHECK: Vreg: %38[ 24 ]
# CHECK: Vreg: %19[ LoopTag+38 ]
# CHECK: Instr: %86:vgpr_32 = V_LSHL_OR_B32_e64 killed %85, 16, killed %82, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+46 ]
# CHECK: Vreg: %40[ 27 ]
# CHECK: Vreg: %21[ 31 ]
# CHECK: Vreg: %2[ LoopTag+46 ]
# CHECK: Vreg: %85[ 0 ]
# CHECK: Vreg: %42[ LoopTag+58 ]
# CHECK: Vreg: %4[ 25 ]
# CHECK: Vreg: %18:sub0[ 69 ]
# CHECK: Vreg: %18:sub1[ 70 ]
# CHECK: Vreg: %18[ LoopTag+79 ]
# CHECK: Vreg: %82[ 0 ]
# CHECK: Vreg: %70[ 9 ]
# CHECK: Vreg: %20[ LoopTag+32 ]
# CHECK: Vreg: %1[ LoopTag+82 ]
# CHECK: Vreg: %34[ 26 ]
# CHECK: Vreg: %41[ 25 ]
# CHECK: Vreg: %22[ 57 ]
# CHECK: Vreg: %3[ LoopTag+37 ]
# CHECK: Vreg: %29[ LoopTag+35 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %17[ 61 ]
# CHECK: Vreg: %50[ LoopTag+42 ]
# CHECK: Vreg: %38[ 23 ]
# CHECK: Vreg: %19[ LoopTag+37 ]
# CHECK: Instr: %87:vgpr_32 = V_CVT_F32_U32_e64 %86, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+45 ]
# CHECK: Vreg: %40[ 26 ]
# CHECK: Vreg: %21[ 30 ]
# CHECK: Vreg: %2[ LoopTag+45 ]
# CHECK: Vreg: %42[ LoopTag+57 ]
# CHECK: Vreg: %4[ 24 ]
# CHECK: Vreg: %18:sub0[ 68 ]
# CHECK: Vreg: %18:sub1[ 69 ]
# CHECK: Vreg: %18[ LoopTag+78 ]
# CHECK: Vreg: %70[ 8 ]
# CHECK: Vreg: %20[ LoopTag+31 ]
# CHECK: Vreg: %1[ LoopTag+81 ]
# CHECK: Vreg: %34[ 25 ]
# CHECK: Vreg: %41[ 24 ]
# CHECK: Vreg: %22[ 56 ]
# CHECK: Vreg: %3[ LoopTag+36 ]
# CHECK: Vreg: %29[ LoopTag+34 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %17[ 60 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %50[ LoopTag+41 ]
# CHECK: Vreg: %38[ 22 ]
# CHECK: Vreg: %19[ LoopTag+36 ]
# CHECK: Instr: %88:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %87, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+44 ]
# CHECK: Vreg: %40[ 25 ]
# CHECK: Vreg: %21[ 29 ]
# CHECK: Vreg: %2[ LoopTag+44 ]
# CHECK: Vreg: %42[ LoopTag+56 ]
# CHECK: Vreg: %87[ 0 ]
# CHECK: Vreg: %4[ 23 ]
# CHECK: Vreg: %18:sub0[ 67 ]
# CHECK: Vreg: %18:sub1[ 68 ]
# CHECK: Vreg: %18[ LoopTag+77 ]
# CHECK: Vreg: %70[ 7 ]
# CHECK: Vreg: %20[ LoopTag+30 ]
# CHECK: Vreg: %1[ LoopTag+80 ]
# CHECK: Vreg: %34[ 24 ]
# CHECK: Vreg: %41[ 23 ]
# CHECK: Vreg: %22[ 55 ]
# CHECK: Vreg: %3[ LoopTag+35 ]
# CHECK: Vreg: %29[ LoopTag+33 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %17[ 59 ]
# CHECK: Vreg: %86[ 3 ]
# CHECK: Vreg: %50[ LoopTag+40 ]
# CHECK: Vreg: %38[ 21 ]
# CHECK: Vreg: %19[ LoopTag+35 ]
# CHECK: Instr: %89:vgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept V_MUL_F32_e64 0, 1333788670, 0, killed %88, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+43 ]
# CHECK: Vreg: %40[ 24 ]
# CHECK: Vreg: %21[ 28 ]
# CHECK: Vreg: %2[ LoopTag+43 ]
# CHECK: Vreg: %42[ LoopTag+55 ]
# CHECK: Vreg: %4[ 22 ]
# CHECK: Vreg: %18:sub0[ 66 ]
# CHECK: Vreg: %18:sub1[ 67 ]
# CHECK: Vreg: %18[ LoopTag+76 ]
# CHECK: Vreg: %70[ 6 ]
# CHECK: Vreg: %20[ LoopTag+29 ]
# CHECK: Vreg: %1[ LoopTag+79 ]
# CHECK: Vreg: %34[ 23 ]
# CHECK: Vreg: %41[ 22 ]
# CHECK: Vreg: %22[ 54 ]
# CHECK: Vreg: %3[ LoopTag+34 ]
# CHECK: Vreg: %29[ LoopTag+32 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %17[ 58 ]
# CHECK: Vreg: %86[ 2 ]
# CHECK: Vreg: %88[ 0 ]
# CHECK: Vreg: %50[ LoopTag+39 ]
# CHECK: Vreg: %38[ 20 ]
# CHECK: Vreg: %19[ LoopTag+34 ]
# CHECK: Instr: %90:vgpr_32 = nofpexcept V_CVT_U32_F32_e64 0, killed %89, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+42 ]
# CHECK: Vreg: %40[ 23 ]
# CHECK: Vreg: %21[ 27 ]
# CHECK: Vreg: %2[ LoopTag+42 ]
# CHECK: Vreg: %42[ LoopTag+54 ]
# CHECK: Vreg: %4[ 21 ]
# CHECK: Vreg: %18:sub0[ 65 ]
# CHECK: Vreg: %18:sub1[ 66 ]
# CHECK: Vreg: %18[ LoopTag+75 ]
# CHECK: Vreg: %89[ 0 ]
# CHECK: Vreg: %70[ 5 ]
# CHECK: Vreg: %20[ LoopTag+28 ]
# CHECK: Vreg: %1[ LoopTag+78 ]
# CHECK: Vreg: %34[ 22 ]
# CHECK: Vreg: %41[ 21 ]
# CHECK: Vreg: %22[ 53 ]
# CHECK: Vreg: %3[ LoopTag+33 ]
# CHECK: Vreg: %29[ LoopTag+31 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %17[ 57 ]
# CHECK: Vreg: %86[ 1 ]
# CHECK: Vreg: %50[ LoopTag+38 ]
# CHECK: Vreg: %38[ 19 ]
# CHECK: Vreg: %19[ LoopTag+33 ]
# CHECK: Instr: %91:vgpr_32 = V_SUB_U32_e64 0, %86, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+41 ]
# CHECK: Vreg: %90[ 1 ]
# CHECK: Vreg: %40[ 22 ]
# CHECK: Vreg: %21[ 26 ]
# CHECK: Vreg: %2[ LoopTag+41 ]
# CHECK: Vreg: %42[ LoopTag+53 ]
# CHECK: Vreg: %4[ 20 ]
# CHECK: Vreg: %18:sub0[ 64 ]
# CHECK: Vreg: %18:sub1[ 65 ]
# CHECK: Vreg: %18[ LoopTag+74 ]
# CHECK: Vreg: %70[ 4 ]
# CHECK: Vreg: %20[ LoopTag+27 ]
# CHECK: Vreg: %1[ LoopTag+77 ]
# CHECK: Vreg: %34[ 21 ]
# CHECK: Vreg: %41[ 20 ]
# CHECK: Vreg: %22[ 52 ]
# CHECK: Vreg: %3[ LoopTag+32 ]
# CHECK: Vreg: %29[ LoopTag+30 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %17[ 56 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %50[ LoopTag+37 ]
# CHECK: Vreg: %38[ 18 ]
# CHECK: Vreg: %19[ LoopTag+32 ]
# CHECK: Instr: %92:vgpr_32 = V_MUL_LO_U32_e64 killed %91, %90, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+40 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %40[ 21 ]
# CHECK: Vreg: %21[ 25 ]
# CHECK: Vreg: %2[ LoopTag+40 ]
# CHECK: Vreg: %42[ LoopTag+52 ]
# CHECK: Vreg: %4[ 19 ]
# CHECK: Vreg: %18:sub0[ 63 ]
# CHECK: Vreg: %18:sub1[ 64 ]
# CHECK: Vreg: %18[ LoopTag+73 ]
# CHECK: Vreg: %70[ 3 ]
# CHECK: Vreg: %20[ LoopTag+26 ]
# CHECK: Vreg: %1[ LoopTag+76 ]
# CHECK: Vreg: %91[ 0 ]
# CHECK: Vreg: %34[ 20 ]
# CHECK: Vreg: %41[ 19 ]
# CHECK: Vreg: %22[ 51 ]
# CHECK: Vreg: %3[ LoopTag+31 ]
# CHECK: Vreg: %29[ LoopTag+29 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %17[ 55 ]
# CHECK: Vreg: %86[ 5 ]
# CHECK: Vreg: %50[ LoopTag+36 ]
# CHECK: Vreg: %38[ 17 ]
# CHECK: Vreg: %19[ LoopTag+31 ]
# CHECK: Instr: %93:vgpr_32 = V_MUL_HI_U32_e64 %90, killed %92, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+39 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %40[ 20 ]
# CHECK: Vreg: %21[ 24 ]
# CHECK: Vreg: %2[ LoopTag+39 ]
# CHECK: Vreg: %92[ 0 ]
# CHECK: Vreg: %42[ LoopTag+51 ]
# CHECK: Vreg: %4[ 18 ]
# CHECK: Vreg: %18:sub0[ 62 ]
# CHECK: Vreg: %18:sub1[ 63 ]
# CHECK: Vreg: %18[ LoopTag+72 ]
# CHECK: Vreg: %70[ 2 ]
# CHECK: Vreg: %20[ LoopTag+25 ]
# CHECK: Vreg: %1[ LoopTag+75 ]
# CHECK: Vreg: %34[ 19 ]
# CHECK: Vreg: %41[ 18 ]
# CHECK: Vreg: %22[ 50 ]
# CHECK: Vreg: %3[ LoopTag+30 ]
# CHECK: Vreg: %29[ LoopTag+28 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %17[ 54 ]
# CHECK: Vreg: %86[ 4 ]
# CHECK: Vreg: %50[ LoopTag+35 ]
# CHECK: Vreg: %38[ 16 ]
# CHECK: Vreg: %19[ LoopTag+30 ]
# CHECK: Instr: %94:vgpr_32 = V_ADD_U32_e64 killed %90, killed %93, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+38 ]
# CHECK: Vreg: %90[ 0 ]
# CHECK: Vreg: %40[ 19 ]
# CHECK: Vreg: %21[ 23 ]
# CHECK: Vreg: %2[ LoopTag+38 ]
# CHECK: Vreg: %42[ LoopTag+50 ]
# CHECK: Vreg: %4[ 17 ]
# CHECK: Vreg: %18:sub0[ 61 ]
# CHECK: Vreg: %18:sub1[ 62 ]
# CHECK: Vreg: %18[ LoopTag+71 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %20[ LoopTag+24 ]
# CHECK: Vreg: %1[ LoopTag+74 ]
# CHECK: Vreg: %34[ 18 ]
# CHECK: Vreg: %41[ 17 ]
# CHECK: Vreg: %22[ 49 ]
# CHECK: Vreg: %3[ LoopTag+29 ]
# CHECK: Vreg: %29[ LoopTag+27 ]
# CHECK: Vreg: %93[ 0 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %17[ 53 ]
# CHECK: Vreg: %86[ 3 ]
# CHECK: Vreg: %50[ LoopTag+34 ]
# CHECK: Vreg: %38[ 15 ]
# CHECK: Vreg: %19[ LoopTag+29 ]
# CHECK: Instr: %95:vgpr_32 = V_MUL_HI_U32_e64 %70, %94, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+37 ]
# CHECK: Vreg: %40[ 18 ]
# CHECK: Vreg: %21[ 22 ]
# CHECK: Vreg: %2[ LoopTag+37 ]
# CHECK: Vreg: %42[ LoopTag+49 ]
# CHECK: Vreg: %4[ 16 ]
# CHECK: Vreg: %94[ 0 ]
# CHECK: Vreg: %18:sub0[ 60 ]
# CHECK: Vreg: %18:sub1[ 61 ]
# CHECK: Vreg: %18[ LoopTag+70 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %20[ LoopTag+23 ]
# CHECK: Vreg: %1[ LoopTag+73 ]
# CHECK: Vreg: %34[ 17 ]
# CHECK: Vreg: %41[ 16 ]
# CHECK: Vreg: %22[ 48 ]
# CHECK: Vreg: %3[ LoopTag+28 ]
# CHECK: Vreg: %29[ LoopTag+26 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ 52 ]
# CHECK: Vreg: %86[ 2 ]
# CHECK: Vreg: %50[ LoopTag+33 ]
# CHECK: Vreg: %38[ 14 ]
# CHECK: Vreg: %19[ LoopTag+28 ]
# CHECK: Instr: %96:vgpr_32 = V_MUL_HI_U32_e64 %36, killed %94, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+36 ]
# CHECK: Vreg: %40[ 17 ]
# CHECK: Vreg: %21[ 21 ]
# CHECK: Vreg: %2[ LoopTag+36 ]
# CHECK: Vreg: %42[ LoopTag+48 ]
# CHECK: Vreg: %4[ 15 ]
# CHECK: Vreg: %94[ 0 ]
# CHECK: Vreg: %18:sub0[ 59 ]
# CHECK: Vreg: %18:sub1[ 60 ]
# CHECK: Vreg: %18[ LoopTag+69 ]
# CHECK: Vreg: %70[ 2 ]
# CHECK: Vreg: %20[ LoopTag+22 ]
# CHECK: Vreg: %1[ LoopTag+72 ]
# CHECK: Vreg: %34[ 16 ]
# CHECK: Vreg: %41[ 15 ]
# CHECK: Vreg: %22[ 47 ]
# CHECK: Vreg: %3[ LoopTag+27 ]
# CHECK: Vreg: %29[ LoopTag+25 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ 51 ]
# CHECK: Vreg: %86[ 1 ]
# CHECK: Vreg: %50[ LoopTag+32 ]
# CHECK: Vreg: %95[ 4 ]
# CHECK: Vreg: %38[ 13 ]
# CHECK: Vreg: %19[ LoopTag+27 ]
# CHECK: Instr: %97:vgpr_32 = V_MUL_LO_U32_e64 %86, %96, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+35 ]
# CHECK: Vreg: %40[ 16 ]
# CHECK: Vreg: %21[ 20 ]
# CHECK: Vreg: %2[ LoopTag+35 ]
# CHECK: Vreg: %42[ LoopTag+47 ]
# CHECK: Vreg: %4[ 14 ]
# CHECK: Vreg: %18:sub0[ 58 ]
# CHECK: Vreg: %18:sub1[ 59 ]
# CHECK: Vreg: %18[ LoopTag+68 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %20[ LoopTag+21 ]
# CHECK: Vreg: %1[ LoopTag+71 ]
# CHECK: Vreg: %34[ 15 ]
# CHECK: Vreg: %41[ 14 ]
# CHECK: Vreg: %22[ 46 ]
# CHECK: Vreg: %3[ LoopTag+26 ]
# CHECK: Vreg: %29[ LoopTag+24 ]
# CHECK: Vreg: %36[ 13 ]
# CHECK: Vreg: %17[ 50 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %50[ LoopTag+31 ]
# CHECK: Vreg: %95[ 3 ]
# CHECK: Vreg: %38[ 12 ]
# CHECK: Vreg: %19[ LoopTag+26 ]
# CHECK: Instr: %98:vgpr_32 = V_SUB_U32_e64 %70, killed %97, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+34 ]
# CHECK: Vreg: %97[ 0 ]
# CHECK: Vreg: %40[ 15 ]
# CHECK: Vreg: %21[ 19 ]
# CHECK: Vreg: %2[ LoopTag+34 ]
# CHECK: Vreg: %42[ LoopTag+46 ]
# CHECK: Vreg: %4[ 13 ]
# CHECK: Vreg: %18:sub0[ 57 ]
# CHECK: Vreg: %18:sub1[ 58 ]
# CHECK: Vreg: %18[ LoopTag+67 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %96[ 4 ]
# CHECK: Vreg: %20[ LoopTag+20 ]
# CHECK: Vreg: %1[ LoopTag+70 ]
# CHECK: Vreg: %34[ 14 ]
# CHECK: Vreg: %41[ 13 ]
# CHECK: Vreg: %22[ 45 ]
# CHECK: Vreg: %3[ LoopTag+25 ]
# CHECK: Vreg: %29[ LoopTag+23 ]
# CHECK: Vreg: %36[ 12 ]
# CHECK: Vreg: %17[ 49 ]
# CHECK: Vreg: %86[ 1 ]
# CHECK: Vreg: %50[ LoopTag+30 ]
# CHECK: Vreg: %95[ 2 ]
# CHECK: Vreg: %38[ 11 ]
# CHECK: Vreg: %19[ LoopTag+25 ]
# CHECK: Instr: %99:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 %98, %86, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+33 ]
# CHECK: Vreg: %40[ 14 ]
# CHECK: Vreg: %21[ 18 ]
# CHECK: Vreg: %2[ LoopTag+33 ]
# CHECK: Vreg: %42[ LoopTag+45 ]
# CHECK: Vreg: %4[ 12 ]
# CHECK: Vreg: %18:sub0[ 56 ]
# CHECK: Vreg: %18:sub1[ 57 ]
# CHECK: Vreg: %18[ LoopTag+66 ]
# CHECK: Vreg: %70[ 4 ]
# CHECK: Vreg: %96[ 3 ]
# CHECK: Vreg: %20[ LoopTag+19 ]
# CHECK: Vreg: %1[ LoopTag+69 ]
# CHECK: Vreg: %34[ 13 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %41[ 12 ]
# CHECK: Vreg: %22[ 44 ]
# CHECK: Vreg: %3[ LoopTag+24 ]
# CHECK: Vreg: %29[ LoopTag+22 ]
# CHECK: Vreg: %36[ 11 ]
# CHECK: Vreg: %17[ 48 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %50[ LoopTag+29 ]
# CHECK: Vreg: %95[ 1 ]
# CHECK: Vreg: %38[ 10 ]
# CHECK: Vreg: %19[ LoopTag+24 ]
# CHECK: Instr: %100:vgpr_32 = V_ADD_U32_e64 1, %95, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+32 ]
# CHECK: Vreg: %40[ 13 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %2[ LoopTag+32 ]
# CHECK: Vreg: %99[ 1 ]
# CHECK: Vreg: %42[ LoopTag+44 ]
# CHECK: Vreg: %4[ 11 ]
# CHECK: Vreg: %18:sub0[ 55 ]
# CHECK: Vreg: %18:sub1[ 56 ]
# CHECK: Vreg: %18[ LoopTag+65 ]
# CHECK: Vreg: %70[ 3 ]
# CHECK: Vreg: %96[ 2 ]
# CHECK: Vreg: %20[ LoopTag+18 ]
# CHECK: Vreg: %1[ LoopTag+68 ]
# CHECK: Vreg: %34[ 12 ]
# CHECK: Vreg: %98[ 5 ]
# CHECK: Vreg: %41[ 11 ]
# CHECK: Vreg: %22[ 43 ]
# CHECK: Vreg: %3[ LoopTag+23 ]
# CHECK: Vreg: %29[ LoopTag+21 ]
# CHECK: Vreg: %36[ 10 ]
# CHECK: Vreg: %17[ 47 ]
# CHECK: Vreg: %86[ 4 ]
# CHECK: Vreg: %50[ LoopTag+28 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %38[ 9 ]
# CHECK: Vreg: %19[ LoopTag+23 ]
# CHECK: Instr: %101:vgpr_32 = V_CNDMASK_B32_e64 0, killed %95, 0, killed %100, %99, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+31 ]
# CHECK: Vreg: %40[ 12 ]
# CHECK: Vreg: %21[ 16 ]
# CHECK: Vreg: %2[ LoopTag+31 ]
# CHECK: Vreg: %99[ 0 ]
# CHECK: Vreg: %42[ LoopTag+43 ]
# CHECK: Vreg: %4[ 10 ]
# CHECK: Vreg: %18:sub0[ 54 ]
# CHECK: Vreg: %18:sub1[ 55 ]
# CHECK: Vreg: %18[ LoopTag+64 ]
# CHECK: Vreg: %70[ 2 ]
# CHECK: Vreg: %96[ 1 ]
# CHECK: Vreg: %20[ LoopTag+17 ]
# CHECK: Vreg: %1[ LoopTag+67 ]
# CHECK: Vreg: %34[ 11 ]
# CHECK: Vreg: %98[ 4 ]
# CHECK: Vreg: %41[ 10 ]
# CHECK: Vreg: %22[ 42 ]
# CHECK: Vreg: %3[ LoopTag+22 ]
# CHECK: Vreg: %29[ LoopTag+20 ]
# CHECK: Vreg: %36[ 9 ]
# CHECK: Vreg: %17[ 46 ]
# CHECK: Vreg: %100[ 0 ]
# CHECK: Vreg: %86[ 3 ]
# CHECK: Vreg: %50[ LoopTag+27 ]
# CHECK: Vreg: %95[ 0 ]
# CHECK: Vreg: %38[ 8 ]
# CHECK: Vreg: %19[ LoopTag+22 ]
# CHECK: Instr: %102:vgpr_32 = V_NOT_B32_e32 killed %96, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+30 ]
# CHECK: Vreg: %40[ 11 ]
# CHECK: Vreg: %21[ 15 ]
# CHECK: Vreg: %2[ LoopTag+30 ]
# CHECK: Vreg: %99[ 3 ]
# CHECK: Vreg: %42[ LoopTag+42 ]
# CHECK: Vreg: %4[ 9 ]
# CHECK: Vreg: %101[ 5 ]
# CHECK: Vreg: %18:sub0[ 53 ]
# CHECK: Vreg: %18:sub1[ 54 ]
# CHECK: Vreg: %18[ LoopTag+63 ]
# CHECK: Vreg: %70[ 1 ]
# CHECK: Vreg: %96[ 0 ]
# CHECK: Vreg: %20[ LoopTag+16 ]
# CHECK: Vreg: %1[ LoopTag+66 ]
# CHECK: Vreg: %34[ 10 ]
# CHECK: Vreg: %98[ 3 ]
# CHECK: Vreg: %41[ 9 ]
# CHECK: Vreg: %22[ 41 ]
# CHECK: Vreg: %3[ LoopTag+21 ]
# CHECK: Vreg: %29[ LoopTag+19 ]
# CHECK: Vreg: %36[ 8 ]
# CHECK: Vreg: %17[ 45 ]
# CHECK: Vreg: %86[ 2 ]
# CHECK: Vreg: %50[ LoopTag+26 ]
# CHECK: Vreg: %38[ 7 ]
# CHECK: Vreg: %19[ LoopTag+21 ]
# CHECK: Instr: %103:vreg_64 = REG_SEQUENCE killed %70, %subreg.sub0, undef %104:vgpr_32, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+29 ]
# CHECK: Vreg: %102[ 1 ]
# CHECK: Vreg: %40[ 10 ]
# CHECK: Vreg: %21[ 14 ]
# CHECK: Vreg: %2[ LoopTag+29 ]
# CHECK: Vreg: %99[ 2 ]
# CHECK: Vreg: %42[ LoopTag+41 ]
# CHECK: Vreg: %4[ 8 ]
# CHECK: Vreg: %101[ 4 ]
# CHECK: Vreg: %18:sub0[ 52 ]
# CHECK: Vreg: %18:sub1[ 53 ]
# CHECK: Vreg: %18[ LoopTag+62 ]
# CHECK: Vreg: %70[ 0 ]
# CHECK: Vreg: %20[ LoopTag+15 ]
# CHECK: Vreg: %1[ LoopTag+65 ]
# CHECK: Vreg: %34[ 9 ]
# CHECK: Vreg: %98[ 2 ]
# CHECK: Vreg: %41[ 8 ]
# CHECK: Vreg: %22[ 40 ]
# CHECK: Vreg: %3[ LoopTag+20 ]
# CHECK: Vreg: %29[ LoopTag+18 ]
# CHECK: Vreg: %36[ 7 ]
# CHECK: Vreg: %17[ 44 ]
# CHECK: Vreg: %86[ 1 ]
# CHECK: Vreg: %50[ LoopTag+25 ]
# CHECK: Vreg: %38[ 6 ]
# CHECK: Vreg: %19[ LoopTag+20 ]
# CHECK: Instr: %105:vreg_64, $sgpr_null = V_MAD_U64_U32_e64 %86, killed %102, killed %103, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+28 ]
# CHECK: Vreg: %102[ 0 ]
# CHECK: Vreg: %40[ 9 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %2[ LoopTag+28 ]
# CHECK: Vreg: %99[ 1 ]
# CHECK: Vreg: %42[ LoopTag+40 ]
# CHECK: Vreg: %4[ 7 ]
# CHECK: Vreg: %101[ 3 ]
# CHECK: Vreg: %18:sub0[ 51 ]
# CHECK: Vreg: %18:sub1[ 52 ]
# CHECK: Vreg: %18[ LoopTag+61 ]
# CHECK: Vreg: %103[ 0 ]
# CHECK: Vreg: %20[ LoopTag+14 ]
# CHECK: Vreg: %1[ LoopTag+64 ]
# CHECK: Vreg: %34[ 8 ]
# CHECK: Vreg: %98[ 1 ]
# CHECK: Vreg: %41[ 7 ]
# CHECK: Vreg: %22[ 39 ]
# CHECK: Vreg: %3[ LoopTag+19 ]
# CHECK: Vreg: %29[ LoopTag+17 ]
# CHECK: Vreg: %36[ 6 ]
# CHECK: Vreg: %17[ 43 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %50[ LoopTag+24 ]
# CHECK: Vreg: %38[ 5 ]
# CHECK: Vreg: %19[ LoopTag+19 ]
# CHECK: Instr: %106:vgpr_32 = V_CNDMASK_B32_e64 0, killed %98, 0, killed %105.sub0, killed %99, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+27 ]
# CHECK: Vreg: %40[ 8 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %2[ LoopTag+27 ]
# CHECK: Vreg: %99[ 0 ]
# CHECK: Vreg: %42[ LoopTag+39 ]
# CHECK: Vreg: %4[ 6 ]
# CHECK: Vreg: %101[ 2 ]
# CHECK: Vreg: %18:sub0[ 50 ]
# CHECK: Vreg: %18:sub1[ 51 ]
# CHECK: Vreg: %18[ LoopTag+60 ]
# CHECK: Vreg: %20[ LoopTag+13 ]
# CHECK: Vreg: %1[ LoopTag+63 ]
# CHECK: Vreg: %34[ 7 ]
# CHECK: Vreg: %98[ 0 ]
# CHECK: Vreg: %41[ 6 ]
# CHECK: Vreg: %22[ 38 ]
# CHECK: Vreg: %3[ LoopTag+18 ]
# CHECK: Vreg: %105:sub0[ 0 ]
# CHECK: Vreg: %29[ LoopTag+16 ]
# CHECK: Vreg: %36[ 5 ]
# CHECK: Vreg: %17[ 42 ]
# CHECK: Vreg: %86[ 1 ]
# CHECK: Vreg: %50[ LoopTag+23 ]
# CHECK: Vreg: %38[ 4 ]
# CHECK: Vreg: %19[ LoopTag+18 ]
# CHECK: Instr: %107:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 killed %106, killed %86, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+26 ]
# CHECK: Vreg: %40[ 7 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %2[ LoopTag+26 ]
# CHECK: Vreg: %42[ LoopTag+38 ]
# CHECK: Vreg: %106[ 0 ]
# CHECK: Vreg: %4[ 5 ]
# CHECK: Vreg: %101[ 1 ]
# CHECK: Vreg: %18:sub0[ 49 ]
# CHECK: Vreg: %18:sub1[ 50 ]
# CHECK: Vreg: %18[ LoopTag+59 ]
# CHECK: Vreg: %20[ LoopTag+12 ]
# CHECK: Vreg: %1[ LoopTag+62 ]
# CHECK: Vreg: %34[ 6 ]
# CHECK: Vreg: %41[ 5 ]
# CHECK: Vreg: %22[ 37 ]
# CHECK: Vreg: %3[ LoopTag+17 ]
# CHECK: Vreg: %29[ LoopTag+15 ]
# CHECK: Vreg: %36[ 4 ]
# CHECK: Vreg: %17[ 41 ]
# CHECK: Vreg: %86[ 0 ]
# CHECK: Vreg: %50[ LoopTag+22 ]
# CHECK: Vreg: %38[ 3 ]
# CHECK: Vreg: %19[ LoopTag+17 ]
# CHECK: Instr: %108:vgpr_32 = V_ADD_U32_e64 1, %101, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+25 ]
# CHECK: Vreg: %40[ 6 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %2[ LoopTag+25 ]
# CHECK: Vreg: %42[ LoopTag+37 ]
# CHECK: Vreg: %4[ 4 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %18:sub0[ 48 ]
# CHECK: Vreg: %18:sub1[ 49 ]
# CHECK: Vreg: %18[ LoopTag+58 ]
# CHECK: Vreg: %20[ LoopTag+11 ]
# CHECK: Vreg: %1[ LoopTag+61 ]
# CHECK: Vreg: %34[ 5 ]
# CHECK: Vreg: %41[ 4 ]
# CHECK: Vreg: %22[ 36 ]
# CHECK: Vreg: %3[ LoopTag+16 ]
# CHECK: Vreg: %29[ LoopTag+14 ]
# CHECK: Vreg: %36[ 3 ]
# CHECK: Vreg: %17[ 40 ]
# CHECK: Vreg: %107[ 1 ]
# CHECK: Vreg: %50[ LoopTag+21 ]
# CHECK: Vreg: %38[ 2 ]
# CHECK: Vreg: %19[ LoopTag+16 ]
# CHECK: Instr: %43:vgpr_32 = V_CNDMASK_B32_e64 0, killed %101, 0, killed %108, killed %107, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+24 ]
# CHECK: Vreg: %40[ 5 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %2[ LoopTag+24 ]
# CHECK: Vreg: %42[ LoopTag+36 ]
# CHECK: Vreg: %4[ 3 ]
# CHECK: Vreg: %101[ 0 ]
# CHECK: Vreg: %18:sub0[ 47 ]
# CHECK: Vreg: %18:sub1[ 48 ]
# CHECK: Vreg: %18[ LoopTag+57 ]
# CHECK: Vreg: %108[ 0 ]
# CHECK: Vreg: %20[ LoopTag+10 ]
# CHECK: Vreg: %1[ LoopTag+60 ]
# CHECK: Vreg: %34[ 4 ]
# CHECK: Vreg: %41[ 3 ]
# CHECK: Vreg: %22[ 35 ]
# CHECK: Vreg: %3[ LoopTag+15 ]
# CHECK: Vreg: %29[ LoopTag+13 ]
# CHECK: Vreg: %36[ 2 ]
# CHECK: Vreg: %17[ 39 ]
# CHECK: Vreg: %107[ 0 ]
# CHECK: Vreg: %50[ LoopTag+20 ]
# CHECK: Vreg: %38[ 1 ]
# CHECK: Vreg: %19[ LoopTag+15 ]
# CHECK: Instr: %39:sreg_32 = S_ADD_I32 killed %38, -1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+23 ]
# CHECK: Vreg: %40[ 4 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %2[ LoopTag+23 ]
# CHECK: Vreg: %42[ LoopTag+35 ]
# CHECK: Vreg: %4[ 2 ]
# CHECK: Vreg: %18:sub0[ 46 ]
# CHECK: Vreg: %18:sub1[ 47 ]
# CHECK: Vreg: %18[ LoopTag+56 ]
# CHECK: Vreg: %20[ LoopTag+9 ]
# CHECK: Vreg: %1[ LoopTag+59 ]
# CHECK: Vreg: %34[ 3 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %22[ 34 ]
# CHECK: Vreg: %3[ LoopTag+14 ]
# CHECK: Vreg: %29[ LoopTag+12 ]
# CHECK: Vreg: %36[ 1 ]
# CHECK: Vreg: %17[ 38 ]
# CHECK: Vreg: %43[ 7 ]
# CHECK: Vreg: %50[ LoopTag+19 ]
# CHECK: Vreg: %38[ 0 ]
# CHECK: Vreg: %19[ LoopTag+14 ]
# CHECK: Instr: %37:vgpr_32 = V_ADD_U32_e64 1, killed %36, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+22 ]
# CHECK: Vreg: %40[ 3 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %2[ LoopTag+22 ]
# CHECK: Vreg: %42[ LoopTag+34 ]
# CHECK: Vreg: %4[ 1 ]
# CHECK: Vreg: %18:sub0[ 45 ]
# CHECK: Vreg: %18:sub1[ 46 ]
# CHECK: Vreg: %18[ LoopTag+55 ]
# CHECK: Vreg: %39[ 6 ]
# CHECK: Vreg: %20[ LoopTag+8 ]
# CHECK: Vreg: %1[ LoopTag+58 ]
# CHECK: Vreg: %34[ 2 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %22[ 33 ]
# CHECK: Vreg: %3[ LoopTag+13 ]
# CHECK: Vreg: %29[ LoopTag+11 ]
# CHECK: Vreg: %36[ 0 ]
# CHECK: Vreg: %17[ 37 ]
# CHECK: Vreg: %43[ 6 ]
# CHECK: Vreg: %50[ LoopTag+18 ]
# CHECK: Vreg: %19[ LoopTag+13 ]
# CHECK: Instr: %109:sreg_32 = V_CMP_GE_U32_e64 %41, %4, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+21 ]
# CHECK: Vreg: %40[ 2 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %2[ LoopTag+21 ]
# CHECK: Vreg: %42[ LoopTag+33 ]
# CHECK: Vreg: %4[ 0 ]
# CHECK: Vreg: %37[ 5 ]
# CHECK: Vreg: %18:sub0[ 44 ]
# CHECK: Vreg: %18:sub1[ 45 ]
# CHECK: Vreg: %18[ LoopTag+54 ]
# CHECK: Vreg: %39[ 5 ]
# CHECK: Vreg: %20[ LoopTag+7 ]
# CHECK: Vreg: %1[ LoopTag+57 ]
# CHECK: Vreg: %34[ 1 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 32 ]
# CHECK: Vreg: %3[ LoopTag+12 ]
# CHECK: Vreg: %29[ LoopTag+10 ]
# CHECK: Vreg: %17[ 36 ]
# CHECK: Vreg: %43[ 5 ]
# CHECK: Vreg: %50[ LoopTag+17 ]
# CHECK: Vreg: %19[ LoopTag+12 ]
# CHECK: Instr: %35:sreg_32 = SI_IF_BREAK killed %109, killed %34, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+20 ]
# CHECK: Vreg: %109[ 0 ]
# CHECK: Vreg: %40[ 1 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %2[ LoopTag+20 ]
# CHECK: Vreg: %42[ LoopTag+32 ]
# CHECK: Vreg: %4[ 77 ]
# CHECK: Vreg: %37[ 4 ]
# CHECK: Vreg: %18:sub0[ 43 ]
# CHECK: Vreg: %18:sub1[ 44 ]
# CHECK: Vreg: %18[ LoopTag+53 ]
# CHECK: Vreg: %39[ 4 ]
# CHECK: Vreg: %20[ LoopTag+6 ]
# CHECK: Vreg: %1[ LoopTag+56 ]
# CHECK: Vreg: %34[ 0 ]
# CHECK: Vreg: %41[ 2 ]
# CHECK: Vreg: %22[ 31 ]
# CHECK: Vreg: %3[ LoopTag+11 ]
# CHECK: Vreg: %29[ LoopTag+9 ]
# CHECK: Vreg: %17[ 35 ]
# CHECK: Vreg: %43[ 4 ]
# CHECK: Vreg: %50[ LoopTag+16 ]
# CHECK: Vreg: %19[ LoopTag+11 ]
# CHECK: Instr: %110:vgpr_32 = COPY killed %40, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+19 ]
# CHECK: Vreg: %40[ 0 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %2[ LoopTag+19 ]
# CHECK: Vreg: %35[ 2 ]
# CHECK: Vreg: %42[ LoopTag+31 ]
# CHECK: Vreg: %4[ 76 ]
# CHECK: Vreg: %37[ 3 ]
# CHECK: Vreg: %18:sub0[ 42 ]
# CHECK: Vreg: %18:sub1[ 43 ]
# CHECK: Vreg: %18[ LoopTag+52 ]
# CHECK: Vreg: %39[ 3 ]
# CHECK: Vreg: %20[ LoopTag+5 ]
# CHECK: Vreg: %1[ LoopTag+55 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %22[ 30 ]
# CHECK: Vreg: %3[ LoopTag+10 ]
# CHECK: Vreg: %29[ LoopTag+8 ]
# CHECK: Vreg: %17[ 34 ]
# CHECK: Vreg: %43[ 3 ]
# CHECK: Vreg: %50[ LoopTag+15 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: %111:vgpr_32 = COPY %41, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+18 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %2[ LoopTag+18 ]
# CHECK: Vreg: %35[ 1 ]
# CHECK: Vreg: %42[ LoopTag+30 ]
# CHECK: Vreg: %4[ 75 ]
# CHECK: Vreg: %37[ 2 ]
# CHECK: Vreg: %18:sub0[ 41 ]
# CHECK: Vreg: %18:sub1[ 42 ]
# CHECK: Vreg: %18[ LoopTag+51 ]
# CHECK: Vreg: %39[ 2 ]
# CHECK: Vreg: %20[ LoopTag+4 ]
# CHECK: Vreg: %1[ LoopTag+54 ]
# CHECK: Vreg: %110[ LoopTag+14 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 29 ]
# CHECK: Vreg: %3[ LoopTag+9 ]
# CHECK: Vreg: %29[ LoopTag+7 ]
# CHECK: Vreg: %17[ 33 ]
# CHECK: Vreg: %43[ 2 ]
# CHECK: Vreg: %50[ LoopTag+14 ]
# CHECK: Vreg: %19[ LoopTag+9 ]
# CHECK: Instr: SI_LOOP %35, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+17 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %2[ LoopTag+17 ]
# CHECK: Vreg: %111[ LoopTag+9 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ LoopTag+29 ]
# CHECK: Vreg: %4[ 74 ]
# CHECK: Vreg: %37[ 1 ]
# CHECK: Vreg: %18:sub0[ 40 ]
# CHECK: Vreg: %18:sub1[ 41 ]
# CHECK: Vreg: %18[ LoopTag+50 ]
# CHECK: Vreg: %39[ 1 ]
# CHECK: Vreg: %20[ LoopTag+3 ]
# CHECK: Vreg: %1[ LoopTag+53 ]
# CHECK: Vreg: %110[ LoopTag+13 ]
# CHECK: Vreg: %41[ 1 ]
# CHECK: Vreg: %22[ 28 ]
# CHECK: Vreg: %3[ LoopTag+8 ]
# CHECK: Vreg: %29[ LoopTag+6 ]
# CHECK: Vreg: %17[ 32 ]
# CHECK: Vreg: %43[ 1 ]
# CHECK: Vreg: %50[ LoopTag+13 ]
# CHECK: Vreg: %19[ LoopTag+8 ]
# CHECK: Instr: S_BRANCH %bb.2
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+16 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+16 ]
# CHECK: Vreg: %111[ LoopTag+8 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ LoopTag+28 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+49 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ LoopTag+2 ]
# CHECK: Vreg: %1[ LoopTag+52 ]
# CHECK: Vreg: %110[ LoopTag+12 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+7 ]
# CHECK: Vreg: %29[ LoopTag+5 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %50[ LoopTag+12 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ LoopTag+16 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ LoopTag+16 ]
# CHECK: Vreg: %111[ LoopTag+8 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ LoopTag+28 ]
# CHECK: Vreg: %4[ 73 ]
# CHECK: Vreg: %37[ 0 ]
# CHECK: Vreg: %18:sub0[ 39 ]
# CHECK: Vreg: %18:sub1[ 40 ]
# CHECK: Vreg: %18[ LoopTag+49 ]
# CHECK: Vreg: %39[ 0 ]
# CHECK: Vreg: %20[ LoopTag+2 ]
# CHECK: Vreg: %1[ LoopTag+52 ]
# CHECK: Vreg: %110[ LoopTag+12 ]
# CHECK: Vreg: %41[ 0 ]
# CHECK: Vreg: %22[ 27 ]
# CHECK: Vreg: %3[ LoopTag+7 ]
# CHECK: Vreg: %29[ LoopTag+5 ]
# CHECK: Vreg: %17[ 31 ]
# CHECK: Vreg: %43[ 0 ]
# CHECK: Vreg: %50[ LoopTag+12 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: --- MBB_2 ---
# CHECK: Instr: SI_END_CF killed %35, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 15 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %2[ 15 ]
# CHECK: Vreg: %111[ 7 ]
# CHECK: Vreg: %35[ 0 ]
# CHECK: Vreg: %42[ 27 ]
# CHECK: Vreg: %18[ 48 ]
# CHECK: Vreg: %20[ 1 ]
# CHECK: Vreg: %1[ 51 ]
# CHECK: Vreg: %110[ 11 ]
# CHECK: Vreg: %3[ 6 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %17[ 24 ]
# CHECK: Vreg: %50[ 11 ]
# CHECK: Vreg: %19[ 6 ]
# CHECK: Instr: %112:vgpr_32 = GLOBAL_LOAD_USHORT %20, 0, 0, implicit $exec :: (load (s16) from %ir.p3, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 14 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %2[ 14 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %42[ 26 ]
# CHECK: Vreg: %18[ 47 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 50 ]
# CHECK: Vreg: %110[ 10 ]
# CHECK: Vreg: %3[ 5 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %17[ 23 ]
# CHECK: Vreg: %50[ 10 ]
# CHECK: Vreg: %19[ 5 ]
# CHECK: Instr: %113:vgpr_32 = GLOBAL_LOAD_USHORT killed %20, 2, 0, implicit $exec :: (load (s16) from %ir.p3 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 13 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %2[ 13 ]
# CHECK: Vreg: %111[ 5 ]
# CHECK: Vreg: %42[ 25 ]
# CHECK: Vreg: %18[ 46 ]
# CHECK: Vreg: %20[ 0 ]
# CHECK: Vreg: %1[ 49 ]
# CHECK: Vreg: %110[ 9 ]
# CHECK: Vreg: %3[ 4 ]
# CHECK: Vreg: %112[ 1 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %17[ 22 ]
# CHECK: Vreg: %50[ 9 ]
# CHECK: Vreg: %19[ 4 ]
# CHECK: Instr: %114:vgpr_32 = V_LSHL_OR_B32_e64 killed %113, 16, killed %112, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %2[ 12 ]
# CHECK: Vreg: %111[ 4 ]
# CHECK: Vreg: %42[ 24 ]
# CHECK: Vreg: %113[ 0 ]
# CHECK: Vreg: %18[ 45 ]
# CHECK: Vreg: %1[ 48 ]
# CHECK: Vreg: %110[ 8 ]
# CHECK: Vreg: %3[ 3 ]
# CHECK: Vreg: %112[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 21 ]
# CHECK: Vreg: %50[ 8 ]
# CHECK: Vreg: %19[ 3 ]
# CHECK: Instr: %115:sreg_32 = V_CMP_LT_U32_e64 %114, %29, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %2[ 11 ]
# CHECK: Vreg: %111[ 3 ]
# CHECK: Vreg: %42[ 23 ]
# CHECK: Vreg: %18[ 44 ]
# CHECK: Vreg: %1[ 47 ]
# CHECK: Vreg: %110[ 7 ]
# CHECK: Vreg: %3[ 2 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 20 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Vreg: %19[ 2 ]
# CHECK: Instr: %116:sreg_32 = SI_IF killed %115, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %2[ 10 ]
# CHECK: Vreg: %111[ 2 ]
# CHECK: Vreg: %42[ 22 ]
# CHECK: Vreg: %18[ 43 ]
# CHECK: Vreg: %115[ 0 ]
# CHECK: Vreg: %1[ 46 ]
# CHECK: Vreg: %110[ 6 ]
# CHECK: Vreg: %3[ 1 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %17[ 19 ]
# CHECK: Vreg: %50[ 6 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: S_BRANCH %bb.3
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %111[ 1 ]
# CHECK: Vreg: %42[ 21 ]
# CHECK: Vreg: %18[ 42 ]
# CHECK: Vreg: %1[ 45 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 18 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %2[ 9 ]
# CHECK: Vreg: %111[ 1 ]
# CHECK: Vreg: %42[ 21 ]
# CHECK: Vreg: %18[ 42 ]
# CHECK: Vreg: %1[ 45 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %17[ 18 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: --- MBB_3 ---
# CHECK: Instr: %117:vgpr_32 = V_ADD3_U32_e64 %29, %111, -1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 61 ]
# CHECK: Vreg: %116[ 53 ]
# CHECK: Vreg: %21[ 21 ]
# CHECK: Vreg: %2[ 8 ]
# CHECK: Vreg: %111[ 0 ]
# CHECK: Vreg: %42[ 20 ]
# CHECK: Vreg: %18[ 41 ]
# CHECK: Vreg: %1[ 44 ]
# CHECK: Vreg: %110[ 57 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %17[ 17 ]
# CHECK: Vreg: %50[ 57 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Vreg: %19[ 14 ]
# CHECK: Instr: %118:vgpr_32 = V_ADD_U32_e64 -10, %114, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 60 ]
# CHECK: Vreg: %116[ 52 ]
# CHECK: Vreg: %21[ 20 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %111[ 62 ]
# CHECK: Vreg: %42[ 19 ]
# CHECK: Vreg: %18[ 40 ]
# CHECK: Vreg: %1[ 43 ]
# CHECK: Vreg: %110[ 56 ]
# CHECK: Vreg: %117[ 3 ]
# CHECK: Vreg: %29[ 57 ]
# CHECK: Vreg: %17[ 16 ]
# CHECK: Vreg: %50[ 56 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Vreg: %19[ 13 ]
# CHECK: Instr: %119:sreg_32 = S_MOV_B32 9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 59 ]
# CHECK: Vreg: %116[ 51 ]
# CHECK: Vreg: %21[ 19 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %111[ 61 ]
# CHECK: Vreg: %118[ 2 ]
# CHECK: Vreg: %42[ 18 ]
# CHECK: Vreg: %18[ 39 ]
# CHECK: Vreg: %1[ 42 ]
# CHECK: Vreg: %110[ 55 ]
# CHECK: Vreg: %117[ 2 ]
# CHECK: Vreg: %29[ 56 ]
# CHECK: Vreg: %17[ 15 ]
# CHECK: Vreg: %50[ 55 ]
# CHECK: Vreg: %114[ 48 ]
# CHECK: Vreg: %19[ 12 ]
# CHECK: Instr: %120:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 58 ]
# CHECK: Vreg: %116[ 50 ]
# CHECK: Vreg: %21[ 18 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %111[ 60 ]
# CHECK: Vreg: %118[ 1 ]
# CHECK: Vreg: %42[ 17 ]
# CHECK: Vreg: %18[ 38 ]
# CHECK: Vreg: %1[ 41 ]
# CHECK: Vreg: %110[ 54 ]
# CHECK: Vreg: %117[ 1 ]
# CHECK: Vreg: %29[ 55 ]
# CHECK: Vreg: %119[ 1 ]
# CHECK: Vreg: %17[ 14 ]
# CHECK: Vreg: %50[ 54 ]
# CHECK: Vreg: %114[ 47 ]
# CHECK: Vreg: %19[ 11 ]
# CHECK: Instr: S_BRANCH %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 57 ]
# CHECK: Vreg: %116[ 49 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ 59 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %42[ 16 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %18[ 37 ]
# CHECK: Vreg: %1[ 40 ]
# CHECK: Vreg: %110[ 53 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %29[ 54 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %50[ 53 ]
# CHECK: Vreg: %114[ 46 ]
# CHECK: Vreg: %19[ 10 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 57 ]
# CHECK: Vreg: %116[ 49 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ 59 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %42[ 16 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %18[ 37 ]
# CHECK: Vreg: %1[ 40 ]
# CHECK: Vreg: %110[ 53 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %29[ 54 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %50[ 53 ]
# CHECK: Vreg: %114[ 46 ]
# CHECK: Vreg: %19[ 10 ]
# CHECK: --- MBB_4 ---
# CHECK: Instr: %121:sreg_32 = S_MOV_B32 -1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 25 ]
# CHECK: Vreg: %135[ 4 ]
# CHECK: Vreg: %142[ 11 ]
# CHECK: Vreg: %111[ 8 ]
# CHECK: Vreg: %139[ 9 ]
# CHECK: Vreg: %129[ 19 ]
# CHECK: Vreg: %110[ 21 ]
# CHECK: Vreg: %29[ 22 ]
# CHECK: Vreg: %50[ 21 ]
# CHECK: Vreg: %147[ 17 ]
# CHECK: Instr: %122:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 24 ]
# CHECK: Vreg: %135[ 3 ]
# CHECK: Vreg: %142[ 10 ]
# CHECK: Vreg: %111[ 7 ]
# CHECK: Vreg: %139[ 8 ]
# CHECK: Vreg: %129[ 18 ]
# CHECK: Vreg: %110[ 20 ]
# CHECK: Vreg: %29[ 21 ]
# CHECK: Vreg: %50[ 20 ]
# CHECK: Vreg: %121[ 1 ]
# CHECK: Vreg: %147[ 16 ]
# CHECK: Instr: S_BRANCH %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %135[ 2 ]
# CHECK: Vreg: %142[ 9 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %139[ 7 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %129[ 17 ]
# CHECK: Vreg: %110[ 19 ]
# CHECK: Vreg: %29[ 20 ]
# CHECK: Vreg: %50[ 19 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %147[ 15 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 23 ]
# CHECK: Vreg: %135[ 2 ]
# CHECK: Vreg: %142[ 9 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %139[ 7 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %129[ 17 ]
# CHECK: Vreg: %110[ 19 ]
# CHECK: Vreg: %29[ 20 ]
# CHECK: Vreg: %50[ 19 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %147[ 15 ]
# CHECK: --- MBB_5 ---
# CHECK: Instr: %123:vgpr_32 = PHI %124, %bb.7, %125, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %127[ 0 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %110[ 3 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Instr: %126:vgpr_32 = PHI %127, %bb.7, %128, %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %123[ 6 ]
# CHECK: Vreg: %127[ 0 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %110[ 3 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Instr: SI_END_CF killed %129, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 6 ]
# CHECK: Vreg: %123[ 5 ]
# CHECK: Vreg: %129[ 0 ]
# CHECK: Vreg: %110[ 2 ]
# CHECK: Vreg: %29[ 3 ]
# CHECK: Vreg: %126[ 3 ]
# CHECK: Vreg: %50[ 2 ]
# CHECK: Instr: S_BRANCH %bb.13
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %123[ 4 ]
# CHECK: Vreg: %110[ 1 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %126[ 2 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 5 ]
# CHECK: Vreg: %123[ 4 ]
# CHECK: Vreg: %110[ 1 ]
# CHECK: Vreg: %29[ 2 ]
# CHECK: Vreg: %126[ 2 ]
# CHECK: Vreg: %50[ 1 ]
# CHECK: --- MBB_6 ---
# CHECK: Instr: %130:sreg_32 = PHI %122, %bb.4, %131, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+23 ]
# CHECK: Vreg: %135[ 2 ]
# CHECK: Vreg: %142[ 9 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %139[ 7 ]
# CHECK: Vreg: %122[ 0 ]
# CHECK: Vreg: %129[ LoopTag+17 ]
# CHECK: Vreg: %110[ LoopTag+19 ]
# CHECK: Vreg: %131[ 0 ]
# CHECK: Vreg: %29[ LoopTag+20 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %50[ LoopTag+19 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %147[ LoopTag+15 ]
# CHECK: Instr: %132:sreg_32 = PHI %121, %bb.4, %133, %bb.6
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+23 ]
# CHECK: Vreg: %135[ 2 ]
# CHECK: Vreg: %142[ 9 ]
# CHECK: Vreg: %130[ 10 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %139[ 7 ]
# CHECK: Vreg: %129[ LoopTag+17 ]
# CHECK: Vreg: %110[ LoopTag+19 ]
# CHECK: Vreg: %29[ LoopTag+20 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %50[ LoopTag+19 ]
# CHECK: Vreg: %121[ 0 ]
# CHECK: Vreg: %147[ LoopTag+15 ]
# CHECK: Instr: %133:sreg_32 = S_ADD_I32 %132, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+22 ]
# CHECK: Vreg: %135[ 1 ]
# CHECK: Vreg: %142[ 8 ]
# CHECK: Vreg: %130[ 9 ]
# CHECK: Vreg: %111[ 5 ]
# CHECK: Vreg: %132[ 0 ]
# CHECK: Vreg: %139[ 6 ]
# CHECK: Vreg: %129[ LoopTag+16 ]
# CHECK: Vreg: %110[ LoopTag+18 ]
# CHECK: Vreg: %29[ LoopTag+19 ]
# CHECK: Vreg: %50[ LoopTag+18 ]
# CHECK: Vreg: %147[ LoopTag+14 ]
# CHECK: Instr: %134:vgpr_32 = GLOBAL_LOAD_USHORT %135, 0, 0, implicit $exec :: (load (s16) from %ir.p4, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+21 ]
# CHECK: Vreg: %135[ 0 ]
# CHECK: Vreg: %142[ 7 ]
# CHECK: Vreg: %130[ 8 ]
# CHECK: Vreg: %111[ 4 ]
# CHECK: Vreg: %132[ 6 ]
# CHECK: Vreg: %139[ 5 ]
# CHECK: Vreg: %129[ LoopTag+15 ]
# CHECK: Vreg: %110[ LoopTag+17 ]
# CHECK: Vreg: %29[ LoopTag+18 ]
# CHECK: Vreg: %133[ 3 ]
# CHECK: Vreg: %50[ LoopTag+17 ]
# CHECK: Vreg: %147[ LoopTag+13 ]
# CHECK: Instr: %136:vgpr_32 = GLOBAL_LOAD_USHORT %135, 2, 0, implicit $exec :: (load (s16) from %ir.p4 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+20 ]
# CHECK: Vreg: %135[ 0 ]
# CHECK: Vreg: %142[ 6 ]
# CHECK: Vreg: %130[ 7 ]
# CHECK: Vreg: %111[ 3 ]
# CHECK: Vreg: %132[ 5 ]
# CHECK: Vreg: %139[ 4 ]
# CHECK: Vreg: %134[ 1 ]
# CHECK: Vreg: %129[ LoopTag+14 ]
# CHECK: Vreg: %110[ LoopTag+16 ]
# CHECK: Vreg: %29[ LoopTag+17 ]
# CHECK: Vreg: %133[ 2 ]
# CHECK: Vreg: %50[ LoopTag+16 ]
# CHECK: Vreg: %147[ LoopTag+12 ]
# CHECK: Instr: %137:vgpr_32 = V_LSHL_OR_B32_e64 killed %136, 16, killed %134, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+19 ]
# CHECK: Vreg: %135[ 11 ]
# CHECK: Vreg: %142[ 5 ]
# CHECK: Vreg: %130[ 6 ]
# CHECK: Vreg: %111[ 2 ]
# CHECK: Vreg: %132[ 4 ]
# CHECK: Vreg: %139[ 3 ]
# CHECK: Vreg: %134[ 0 ]
# CHECK: Vreg: %129[ LoopTag+13 ]
# CHECK: Vreg: %110[ LoopTag+15 ]
# CHECK: Vreg: %136[ 0 ]
# CHECK: Vreg: %29[ LoopTag+16 ]
# CHECK: Vreg: %133[ 1 ]
# CHECK: Vreg: %50[ LoopTag+15 ]
# CHECK: Vreg: %147[ LoopTag+11 ]
# CHECK: Instr: %125:vgpr_32 = V_MUL_LO_U32_e64 killed %137, %133, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+18 ]
# CHECK: Vreg: %135[ 10 ]
# CHECK: Vreg: %142[ 4 ]
# CHECK: Vreg: %130[ 5 ]
# CHECK: Vreg: %111[ 1 ]
# CHECK: Vreg: %137[ 0 ]
# CHECK: Vreg: %132[ 3 ]
# CHECK: Vreg: %139[ 2 ]
# CHECK: Vreg: %129[ LoopTag+12 ]
# CHECK: Vreg: %110[ LoopTag+14 ]
# CHECK: Vreg: %29[ LoopTag+15 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %50[ LoopTag+14 ]
# CHECK: Vreg: %147[ LoopTag+10 ]
# CHECK: Instr: %138:vgpr_32 = V_SUB_U32_e64 %125, %111, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+17 ]
# CHECK: Vreg: %135[ 9 ]
# CHECK: Vreg: %142[ 3 ]
# CHECK: Vreg: %130[ 4 ]
# CHECK: Vreg: %111[ 0 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %132[ 2 ]
# CHECK: Vreg: %139[ 1 ]
# CHECK: Vreg: %129[ LoopTag+11 ]
# CHECK: Vreg: %110[ LoopTag+13 ]
# CHECK: Vreg: %29[ LoopTag+14 ]
# CHECK: Vreg: %133[ 5 ]
# CHECK: Vreg: %50[ LoopTag+13 ]
# CHECK: Vreg: %147[ LoopTag+9 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %139, killed %138, 0, 0, implicit $exec :: (store (s32) into %ir.p2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+16 ]
# CHECK: Vreg: %135[ 8 ]
# CHECK: Vreg: %142[ 2 ]
# CHECK: Vreg: %130[ 3 ]
# CHECK: Vreg: %111[ 12 ]
# CHECK: Vreg: %125[ LoopTag+9 ]
# CHECK: Vreg: %132[ 1 ]
# CHECK: Vreg: %139[ 0 ]
# CHECK: Vreg: %129[ LoopTag+10 ]
# CHECK: Vreg: %110[ LoopTag+12 ]
# CHECK: Vreg: %29[ LoopTag+13 ]
# CHECK: Vreg: %138[ 0 ]
# CHECK: Vreg: %133[ 4 ]
# CHECK: Vreg: %50[ LoopTag+12 ]
# CHECK: Vreg: %147[ LoopTag+8 ]
# CHECK: Instr: %140:sreg_32 = S_ADD_I32 killed %132, 2, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+15 ]
# CHECK: Vreg: %135[ 7 ]
# CHECK: Vreg: %142[ 1 ]
# CHECK: Vreg: %130[ 2 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %125[ LoopTag+8 ]
# CHECK: Vreg: %132[ 0 ]
# CHECK: Vreg: %139[ 12 ]
# CHECK: Vreg: %129[ LoopTag+9 ]
# CHECK: Vreg: %110[ LoopTag+11 ]
# CHECK: Vreg: %29[ LoopTag+12 ]
# CHECK: Vreg: %133[ 3 ]
# CHECK: Vreg: %50[ LoopTag+11 ]
# CHECK: Vreg: %147[ LoopTag+7 ]
# CHECK: Instr: %141:sreg_32 = V_CMP_GE_U32_e64 killed %140, %142, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+14 ]
# CHECK: Vreg: %135[ 6 ]
# CHECK: Vreg: %142[ 0 ]
# CHECK: Vreg: %130[ 1 ]
# CHECK: Vreg: %111[ 10 ]
# CHECK: Vreg: %125[ LoopTag+7 ]
# CHECK: Vreg: %139[ 11 ]
# CHECK: Vreg: %129[ LoopTag+8 ]
# CHECK: Vreg: %110[ LoopTag+10 ]
# CHECK: Vreg: %29[ LoopTag+11 ]
# CHECK: Vreg: %133[ 2 ]
# CHECK: Vreg: %50[ LoopTag+10 ]
# CHECK: Vreg: %140[ 0 ]
# CHECK: Vreg: %147[ LoopTag+6 ]
# CHECK: Instr: %131:sreg_32 = SI_IF_BREAK killed %141, killed %130, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+13 ]
# CHECK: Vreg: %135[ 5 ]
# CHECK: Vreg: %142[ 12 ]
# CHECK: Vreg: %130[ 0 ]
# CHECK: Vreg: %111[ 9 ]
# CHECK: Vreg: %125[ LoopTag+6 ]
# CHECK: Vreg: %139[ 10 ]
# CHECK: Vreg: %141[ 0 ]
# CHECK: Vreg: %129[ LoopTag+7 ]
# CHECK: Vreg: %110[ LoopTag+9 ]
# CHECK: Vreg: %29[ LoopTag+10 ]
# CHECK: Vreg: %133[ 1 ]
# CHECK: Vreg: %50[ LoopTag+9 ]
# CHECK: Vreg: %147[ LoopTag+5 ]
# CHECK: Instr: %143:vgpr_32 = COPY %133, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+12 ]
# CHECK: Vreg: %135[ 4 ]
# CHECK: Vreg: %142[ 11 ]
# CHECK: Vreg: %111[ 8 ]
# CHECK: Vreg: %125[ LoopTag+5 ]
# CHECK: Vreg: %139[ 9 ]
# CHECK: Vreg: %129[ LoopTag+6 ]
# CHECK: Vreg: %110[ LoopTag+8 ]
# CHECK: Vreg: %131[ 1 ]
# CHECK: Vreg: %29[ LoopTag+9 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %50[ LoopTag+8 ]
# CHECK: Vreg: %147[ LoopTag+4 ]
# CHECK: Instr: SI_LOOP %131, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+11 ]
# CHECK: Vreg: %135[ 3 ]
# CHECK: Vreg: %142[ 10 ]
# CHECK: Vreg: %111[ 7 ]
# CHECK: Vreg: %125[ LoopTag+4 ]
# CHECK: Vreg: %139[ 8 ]
# CHECK: Vreg: %129[ LoopTag+5 ]
# CHECK: Vreg: %110[ LoopTag+7 ]
# CHECK: Vreg: %143[ LoopTag+3 ]
# CHECK: Vreg: %131[ 0 ]
# CHECK: Vreg: %29[ LoopTag+8 ]
# CHECK: Vreg: %133[ 1 ]
# CHECK: Vreg: %50[ LoopTag+7 ]
# CHECK: Vreg: %147[ LoopTag+3 ]
# CHECK: Instr: S_BRANCH %bb.11
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+10 ]
# CHECK: Vreg: %135[ 2 ]
# CHECK: Vreg: %142[ 9 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %125[ LoopTag+3 ]
# CHECK: Vreg: %139[ 7 ]
# CHECK: Vreg: %129[ LoopTag+4 ]
# CHECK: Vreg: %110[ LoopTag+6 ]
# CHECK: Vreg: %143[ LoopTag+2 ]
# CHECK: Vreg: %131[ 0 ]
# CHECK: Vreg: %29[ LoopTag+7 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %50[ LoopTag+6 ]
# CHECK: Vreg: %147[ LoopTag+2 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ LoopTag+10 ]
# CHECK: Vreg: %135[ 2 ]
# CHECK: Vreg: %142[ 9 ]
# CHECK: Vreg: %111[ 6 ]
# CHECK: Vreg: %125[ LoopTag+3 ]
# CHECK: Vreg: %139[ 7 ]
# CHECK: Vreg: %129[ LoopTag+4 ]
# CHECK: Vreg: %110[ LoopTag+6 ]
# CHECK: Vreg: %143[ LoopTag+2 ]
# CHECK: Vreg: %131[ 0 ]
# CHECK: Vreg: %29[ LoopTag+7 ]
# CHECK: Vreg: %133[ 0 ]
# CHECK: Vreg: %50[ LoopTag+6 ]
# CHECK: Vreg: %147[ LoopTag+2 ]
# CHECK: --- MBB_7 ---
# CHECK: Instr: %124:vgpr_32 = PHI undef %144:vgpr_32, %bb.2, %145, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %146[ 0 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %145[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Instr: %127:vgpr_32 = PHI undef %144:vgpr_32, %bb.2, %146, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %146[ 0 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Instr: %147:vgpr_32 = PHI %114, %bb.2, undef %148:vgpr_32, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %127[ 2 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Instr: %135:vreg_64 = PHI %19, %bb.2, undef %149:vreg_64, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %127[ 2 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %147[ 20 ]
# CHECK: Instr: %139:vreg_64 = PHI %21, %bb.2, undef %150:vreg_64, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %135[ 7 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %127[ 2 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %147[ 20 ]
# CHECK: Instr: %142:vgpr_32 = PHI %3, %bb.2, undef %151:vgpr_32, %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %135[ 7 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %139[ 12 ]
# CHECK: Vreg: %127[ 2 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %124[ 2 ]
# CHECK: Vreg: %3[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %147[ 20 ]
# CHECK: Instr: %129:sreg_32 = SI_ELSE killed %116, %bb.5, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %135[ 6 ]
# CHECK: Vreg: %116[ 0 ]
# CHECK: Vreg: %142[ 13 ]
# CHECK: Vreg: %111[ 10 ]
# CHECK: Vreg: %139[ 11 ]
# CHECK: Vreg: %127[ 1 ]
# CHECK: Vreg: %110[ 4 ]
# CHECK: Vreg: %124[ 1 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %50[ 4 ]
# CHECK: Vreg: %147[ 19 ]
# CHECK: Instr: S_BRANCH %bb.4
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %135[ 5 ]
# CHECK: Vreg: %142[ 12 ]
# CHECK: Vreg: %111[ 9 ]
# CHECK: Vreg: %139[ 10 ]
# CHECK: Vreg: %127[ 0 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %110[ 3 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Vreg: %147[ 18 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %135[ 5 ]
# CHECK: Vreg: %142[ 12 ]
# CHECK: Vreg: %111[ 9 ]
# CHECK: Vreg: %139[ 10 ]
# CHECK: Vreg: %127[ 0 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %110[ 3 ]
# CHECK: Vreg: %124[ 0 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Vreg: %147[ 18 ]
# CHECK: --- MBB_8 ---
# CHECK: Instr: %152:sreg_32 = PHI %120, %bb.3, %153, %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+57 ]
# CHECK: Vreg: %116[ LoopTag+49 ]
# CHECK: Vreg: %21[ LoopTag+17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ LoopTag+59 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %42[ LoopTag+16 ]
# CHECK: Vreg: %120[ 0 ]
# CHECK: Vreg: %18[ LoopTag+37 ]
# CHECK: Vreg: %153[ 0 ]
# CHECK: Vreg: %1[ LoopTag+40 ]
# CHECK: Vreg: %110[ LoopTag+53 ]
# CHECK: Vreg: %155[ 0 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %29[ LoopTag+54 ]
# CHECK: Vreg: %157[ 0 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %17[ LoopTag+13 ]
# CHECK: Vreg: %50[ LoopTag+53 ]
# CHECK: Vreg: %114[ LoopTag+46 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: %154:vgpr_32 = PHI %118, %bb.3, %155, %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+57 ]
# CHECK: Vreg: %116[ LoopTag+49 ]
# CHECK: Vreg: %21[ LoopTag+17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ LoopTag+59 ]
# CHECK: Vreg: %118[ 0 ]
# CHECK: Vreg: %42[ LoopTag+16 ]
# CHECK: Vreg: %18[ LoopTag+37 ]
# CHECK: Vreg: %1[ LoopTag+40 ]
# CHECK: Vreg: %110[ LoopTag+53 ]
# CHECK: Vreg: %155[ 0 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %29[ LoopTag+54 ]
# CHECK: Vreg: %157[ 0 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %17[ LoopTag+13 ]
# CHECK: Vreg: %152[ 5 ]
# CHECK: Vreg: %50[ LoopTag+53 ]
# CHECK: Vreg: %114[ LoopTag+46 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: %156:sreg_32 = PHI %119, %bb.3, %157, %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+57 ]
# CHECK: Vreg: %154[ 0 ]
# CHECK: Vreg: %116[ LoopTag+49 ]
# CHECK: Vreg: %21[ LoopTag+17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ LoopTag+59 ]
# CHECK: Vreg: %42[ LoopTag+16 ]
# CHECK: Vreg: %18[ LoopTag+37 ]
# CHECK: Vreg: %1[ LoopTag+40 ]
# CHECK: Vreg: %110[ LoopTag+53 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %29[ LoopTag+54 ]
# CHECK: Vreg: %157[ 0 ]
# CHECK: Vreg: %119[ 0 ]
# CHECK: Vreg: %17[ LoopTag+13 ]
# CHECK: Vreg: %152[ 5 ]
# CHECK: Vreg: %50[ LoopTag+53 ]
# CHECK: Vreg: %114[ LoopTag+46 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: %158:vgpr_32 = PHI %117, %bb.3, %154, %bb.8
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+57 ]
# CHECK: Vreg: %154[ 0 ]
# CHECK: Vreg: %116[ LoopTag+49 ]
# CHECK: Vreg: %21[ LoopTag+17 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ LoopTag+59 ]
# CHECK: Vreg: %156[ 1 ]
# CHECK: Vreg: %42[ LoopTag+16 ]
# CHECK: Vreg: %18[ LoopTag+37 ]
# CHECK: Vreg: %1[ LoopTag+40 ]
# CHECK: Vreg: %110[ LoopTag+53 ]
# CHECK: Vreg: %117[ 0 ]
# CHECK: Vreg: %29[ LoopTag+54 ]
# CHECK: Vreg: %17[ LoopTag+13 ]
# CHECK: Vreg: %152[ 5 ]
# CHECK: Vreg: %50[ LoopTag+53 ]
# CHECK: Vreg: %114[ LoopTag+46 ]
# CHECK: Vreg: %19[ LoopTag+10 ]
# CHECK: Instr: %157:sreg_32 = nuw S_ADD_I32 %156, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+56 ]
# CHECK: Vreg: %154[ 2 ]
# CHECK: Vreg: %116[ LoopTag+48 ]
# CHECK: Vreg: %21[ LoopTag+16 ]
# CHECK: Vreg: %2[ 3 ]
# CHECK: Vreg: %111[ LoopTag+58 ]
# CHECK: Vreg: %156[ 0 ]
# CHECK: Vreg: %42[ LoopTag+15 ]
# CHECK: Vreg: %158[ LoopTag+10 ]
# CHECK: Vreg: %18[ LoopTag+36 ]
# CHECK: Vreg: %1[ LoopTag+39 ]
# CHECK: Vreg: %110[ LoopTag+52 ]
# CHECK: Vreg: %29[ LoopTag+53 ]
# CHECK: Vreg: %17[ LoopTag+12 ]
# CHECK: Vreg: %152[ 4 ]
# CHECK: Vreg: %50[ LoopTag+52 ]
# CHECK: Vreg: %114[ LoopTag+45 ]
# CHECK: Vreg: %19[ LoopTag+9 ]
# CHECK: Instr: %159:sreg_32 = S_ADD_I32 killed %156, 2, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+55 ]
# CHECK: Vreg: %154[ 1 ]
# CHECK: Vreg: %116[ LoopTag+47 ]
# CHECK: Vreg: %21[ LoopTag+15 ]
# CHECK: Vreg: %2[ 2 ]
# CHECK: Vreg: %111[ LoopTag+57 ]
# CHECK: Vreg: %156[ 0 ]
# CHECK: Vreg: %42[ LoopTag+14 ]
# CHECK: Vreg: %158[ LoopTag+9 ]
# CHECK: Vreg: %18[ LoopTag+35 ]
# CHECK: Vreg: %1[ LoopTag+38 ]
# CHECK: Vreg: %110[ LoopTag+51 ]
# CHECK: Vreg: %29[ LoopTag+52 ]
# CHECK: Vreg: %157[ 4 ]
# CHECK: Vreg: %17[ LoopTag+11 ]
# CHECK: Vreg: %152[ 3 ]
# CHECK: Vreg: %50[ LoopTag+51 ]
# CHECK: Vreg: %114[ LoopTag+44 ]
# CHECK: Vreg: %19[ LoopTag+8 ]
# CHECK: Instr: %155:vgpr_32 = V_ADD_U32_e64 -1, %154, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+54 ]
# CHECK: Vreg: %154[ 0 ]
# CHECK: Vreg: %116[ LoopTag+46 ]
# CHECK: Vreg: %21[ LoopTag+14 ]
# CHECK: Vreg: %2[ 1 ]
# CHECK: Vreg: %111[ LoopTag+56 ]
# CHECK: Vreg: %42[ LoopTag+13 ]
# CHECK: Vreg: %158[ LoopTag+8 ]
# CHECK: Vreg: %18[ LoopTag+34 ]
# CHECK: Vreg: %1[ LoopTag+37 ]
# CHECK: Vreg: %110[ LoopTag+50 ]
# CHECK: Vreg: %29[ LoopTag+51 ]
# CHECK: Vreg: %157[ 3 ]
# CHECK: Vreg: %17[ LoopTag+10 ]
# CHECK: Vreg: %152[ 2 ]
# CHECK: Vreg: %50[ LoopTag+50 ]
# CHECK: Vreg: %114[ LoopTag+43 ]
# CHECK: Vreg: %159[ 1 ]
# CHECK: Vreg: %19[ LoopTag+7 ]
# CHECK: Instr: %160:sreg_32 = V_CMP_GE_U32_e64 killed %159, %2, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+53 ]
# CHECK: Vreg: %154[ LoopTag+6 ]
# CHECK: Vreg: %116[ LoopTag+45 ]
# CHECK: Vreg: %21[ LoopTag+13 ]
# CHECK: Vreg: %2[ 0 ]
# CHECK: Vreg: %111[ LoopTag+55 ]
# CHECK: Vreg: %42[ LoopTag+12 ]
# CHECK: Vreg: %158[ LoopTag+7 ]
# CHECK: Vreg: %18[ LoopTag+33 ]
# CHECK: Vreg: %1[ LoopTag+36 ]
# CHECK: Vreg: %110[ LoopTag+49 ]
# CHECK: Vreg: %155[ 4 ]
# CHECK: Vreg: %29[ LoopTag+50 ]
# CHECK: Vreg: %157[ 2 ]
# CHECK: Vreg: %17[ LoopTag+9 ]
# CHECK: Vreg: %152[ 1 ]
# CHECK: Vreg: %50[ LoopTag+49 ]
# CHECK: Vreg: %114[ LoopTag+42 ]
# CHECK: Vreg: %159[ 0 ]
# CHECK: Vreg: %19[ LoopTag+6 ]
# CHECK: Instr: %153:sreg_32 = SI_IF_BREAK killed %160, killed %152, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+52 ]
# CHECK: Vreg: %154[ LoopTag+5 ]
# CHECK: Vreg: %116[ LoopTag+44 ]
# CHECK: Vreg: %21[ LoopTag+12 ]
# CHECK: Vreg: %2[ 7 ]
# CHECK: Vreg: %111[ LoopTag+54 ]
# CHECK: Vreg: %42[ LoopTag+11 ]
# CHECK: Vreg: %158[ LoopTag+6 ]
# CHECK: Vreg: %18[ LoopTag+32 ]
# CHECK: Vreg: %160[ 0 ]
# CHECK: Vreg: %1[ LoopTag+35 ]
# CHECK: Vreg: %110[ LoopTag+48 ]
# CHECK: Vreg: %155[ 3 ]
# CHECK: Vreg: %29[ LoopTag+49 ]
# CHECK: Vreg: %157[ 1 ]
# CHECK: Vreg: %17[ LoopTag+8 ]
# CHECK: Vreg: %152[ 0 ]
# CHECK: Vreg: %50[ LoopTag+48 ]
# CHECK: Vreg: %114[ LoopTag+41 ]
# CHECK: Vreg: %19[ LoopTag+5 ]
# CHECK: Instr: %161:vgpr_32 = COPY %157, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+51 ]
# CHECK: Vreg: %154[ LoopTag+4 ]
# CHECK: Vreg: %116[ LoopTag+43 ]
# CHECK: Vreg: %21[ LoopTag+11 ]
# CHECK: Vreg: %2[ 6 ]
# CHECK: Vreg: %111[ LoopTag+53 ]
# CHECK: Vreg: %42[ LoopTag+10 ]
# CHECK: Vreg: %158[ LoopTag+5 ]
# CHECK: Vreg: %18[ LoopTag+31 ]
# CHECK: Vreg: %153[ 1 ]
# CHECK: Vreg: %1[ LoopTag+34 ]
# CHECK: Vreg: %110[ LoopTag+47 ]
# CHECK: Vreg: %155[ 2 ]
# CHECK: Vreg: %29[ LoopTag+48 ]
# CHECK: Vreg: %157[ 0 ]
# CHECK: Vreg: %17[ LoopTag+7 ]
# CHECK: Vreg: %50[ LoopTag+47 ]
# CHECK: Vreg: %114[ LoopTag+40 ]
# CHECK: Vreg: %19[ LoopTag+4 ]
# CHECK: Instr: SI_LOOP %153, %bb.8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+50 ]
# CHECK: Vreg: %154[ LoopTag+3 ]
# CHECK: Vreg: %116[ LoopTag+42 ]
# CHECK: Vreg: %161[ LoopTag+39 ]
# CHECK: Vreg: %21[ LoopTag+10 ]
# CHECK: Vreg: %2[ 5 ]
# CHECK: Vreg: %111[ LoopTag+52 ]
# CHECK: Vreg: %42[ LoopTag+9 ]
# CHECK: Vreg: %158[ LoopTag+4 ]
# CHECK: Vreg: %18[ LoopTag+30 ]
# CHECK: Vreg: %153[ 0 ]
# CHECK: Vreg: %1[ LoopTag+33 ]
# CHECK: Vreg: %110[ LoopTag+46 ]
# CHECK: Vreg: %155[ 1 ]
# CHECK: Vreg: %29[ LoopTag+47 ]
# CHECK: Vreg: %157[ 1 ]
# CHECK: Vreg: %17[ LoopTag+6 ]
# CHECK: Vreg: %50[ LoopTag+46 ]
# CHECK: Vreg: %114[ LoopTag+39 ]
# CHECK: Vreg: %19[ LoopTag+3 ]
# CHECK: Instr: S_BRANCH %bb.9
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+49 ]
# CHECK: Vreg: %154[ LoopTag+2 ]
# CHECK: Vreg: %116[ LoopTag+41 ]
# CHECK: Vreg: %161[ LoopTag+38 ]
# CHECK: Vreg: %21[ LoopTag+9 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ LoopTag+51 ]
# CHECK: Vreg: %42[ LoopTag+8 ]
# CHECK: Vreg: %158[ LoopTag+3 ]
# CHECK: Vreg: %18[ LoopTag+29 ]
# CHECK: Vreg: %153[ 0 ]
# CHECK: Vreg: %1[ LoopTag+32 ]
# CHECK: Vreg: %110[ LoopTag+45 ]
# CHECK: Vreg: %155[ 0 ]
# CHECK: Vreg: %29[ LoopTag+46 ]
# CHECK: Vreg: %157[ 0 ]
# CHECK: Vreg: %17[ LoopTag+5 ]
# CHECK: Vreg: %50[ LoopTag+45 ]
# CHECK: Vreg: %114[ LoopTag+38 ]
# CHECK: Vreg: %19[ LoopTag+2 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ LoopTag+49 ]
# CHECK: Vreg: %154[ LoopTag+2 ]
# CHECK: Vreg: %116[ LoopTag+41 ]
# CHECK: Vreg: %161[ LoopTag+38 ]
# CHECK: Vreg: %21[ LoopTag+9 ]
# CHECK: Vreg: %2[ 4 ]
# CHECK: Vreg: %111[ LoopTag+51 ]
# CHECK: Vreg: %42[ LoopTag+8 ]
# CHECK: Vreg: %158[ LoopTag+3 ]
# CHECK: Vreg: %18[ LoopTag+29 ]
# CHECK: Vreg: %153[ 0 ]
# CHECK: Vreg: %1[ LoopTag+32 ]
# CHECK: Vreg: %110[ LoopTag+45 ]
# CHECK: Vreg: %155[ 0 ]
# CHECK: Vreg: %29[ LoopTag+46 ]
# CHECK: Vreg: %157[ 0 ]
# CHECK: Vreg: %17[ LoopTag+5 ]
# CHECK: Vreg: %50[ LoopTag+45 ]
# CHECK: Vreg: %114[ LoopTag+38 ]
# CHECK: Vreg: %19[ LoopTag+2 ]
# CHECK: --- MBB_9 ---
# CHECK: Instr: SI_END_CF killed %153, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 48 ]
# CHECK: Vreg: %154[ 1 ]
# CHECK: Vreg: %116[ 40 ]
# CHECK: Vreg: %161[ 37 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %111[ 50 ]
# CHECK: Vreg: %42[ 7 ]
# CHECK: Vreg: %158[ 2 ]
# CHECK: Vreg: %18[ 28 ]
# CHECK: Vreg: %153[ 0 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %110[ 44 ]
# CHECK: Vreg: %29[ 45 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %50[ 44 ]
# CHECK: Vreg: %114[ 37 ]
# CHECK: Vreg: %19[ 1 ]
# CHECK: Instr: GLOBAL_STORE_DWORD killed %19, killed %154, 0, 0, implicit $exec :: (store (s32) into %ir.p4, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 47 ]
# CHECK: Vreg: %154[ 0 ]
# CHECK: Vreg: %116[ 39 ]
# CHECK: Vreg: %161[ 36 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %111[ 49 ]
# CHECK: Vreg: %42[ 6 ]
# CHECK: Vreg: %158[ 1 ]
# CHECK: Vreg: %18[ 27 ]
# CHECK: Vreg: %1[ 30 ]
# CHECK: Vreg: %110[ 43 ]
# CHECK: Vreg: %29[ 44 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %50[ 43 ]
# CHECK: Vreg: %114[ 36 ]
# CHECK: Vreg: %19[ 0 ]
# CHECK: Instr: %162:vreg_64 = REG_SEQUENCE %158, %subreg.sub0, undef %163:vgpr_32, %subreg.sub1
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 46 ]
# CHECK: Vreg: %116[ 38 ]
# CHECK: Vreg: %161[ 35 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %111[ 48 ]
# CHECK: Vreg: %42[ 5 ]
# CHECK: Vreg: %158[ 0 ]
# CHECK: Vreg: %18[ 26 ]
# CHECK: Vreg: %1[ 29 ]
# CHECK: Vreg: %110[ 42 ]
# CHECK: Vreg: %29[ 43 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %50[ 42 ]
# CHECK: Vreg: %114[ 35 ]
# CHECK: Instr: %164:sreg_32 = S_MOV_B32 0
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 45 ]
# CHECK: Vreg: %116[ 37 ]
# CHECK: Vreg: %161[ 34 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ 47 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ 41 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %29[ 42 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ 41 ]
# CHECK: Vreg: %114[ 34 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 45 ]
# CHECK: Vreg: %116[ 37 ]
# CHECK: Vreg: %161[ 34 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ 47 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ 41 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %29[ 42 ]
# CHECK: Vreg: %164[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ 41 ]
# CHECK: Vreg: %114[ 34 ]
# CHECK: --- MBB_10 ---
# CHECK: Instr: %165:sreg_32 = PHI %164, %bb.9, %166, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+45 ]
# CHECK: Vreg: %116[ LoopTag+37 ]
# CHECK: Vreg: %161[ LoopTag+34 ]
# CHECK: Vreg: %168[ 0 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ LoopTag+47 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %170[ 0 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ LoopTag+41 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %29[ LoopTag+42 ]
# CHECK: Vreg: %164[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+41 ]
# CHECK: Vreg: %114[ LoopTag+34 ]
# CHECK: Vreg: %166[ 0 ]
# CHECK: Instr: %167:sreg_32 = PHI %164, %bb.9, %168, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+45 ]
# CHECK: Vreg: %116[ LoopTag+37 ]
# CHECK: Vreg: %161[ LoopTag+34 ]
# CHECK: Vreg: %168[ 0 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ LoopTag+47 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %170[ 0 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %165[ 29 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ LoopTag+41 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %29[ LoopTag+42 ]
# CHECK: Vreg: %164[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+41 ]
# CHECK: Vreg: %114[ LoopTag+34 ]
# CHECK: Instr: %169:sreg_32 = PHI %164, %bb.9, %170, %bb.10
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+45 ]
# CHECK: Vreg: %116[ LoopTag+37 ]
# CHECK: Vreg: %161[ LoopTag+34 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ LoopTag+47 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %170[ 0 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %165[ 29 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %167[ 11 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ LoopTag+41 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %29[ LoopTag+42 ]
# CHECK: Vreg: %164[ 0 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+41 ]
# CHECK: Vreg: %114[ LoopTag+34 ]
# CHECK: Instr: %171:vgpr_32 = GLOBAL_LOAD_USHORT %17, 0, 0, implicit $exec :: (load (s16) from %ir.p6, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+44 ]
# CHECK: Vreg: %116[ LoopTag+36 ]
# CHECK: Vreg: %161[ LoopTag+33 ]
# CHECK: Vreg: %21[ 4 ]
# CHECK: Vreg: %111[ LoopTag+46 ]
# CHECK: Vreg: %42[ 3 ]
# CHECK: Vreg: %158[ 15 ]
# CHECK: Vreg: %165[ 28 ]
# CHECK: Vreg: %18[ 24 ]
# CHECK: Vreg: %167[ 10 ]
# CHECK: Vreg: %1[ 27 ]
# CHECK: Vreg: %110[ LoopTag+40 ]
# CHECK: Vreg: %162:sub0[ 13 ]
# CHECK: Vreg: %169[ 3 ]
# CHECK: Vreg: %29[ LoopTag+41 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %50[ LoopTag+40 ]
# CHECK: Vreg: %114[ LoopTag+33 ]
# CHECK: Instr: %172:vgpr_32 = GLOBAL_LOAD_USHORT %17, 2, 0, implicit $exec :: (load (s16) from %ir.p6 + 2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+43 ]
# CHECK: Vreg: %116[ LoopTag+35 ]
# CHECK: Vreg: %161[ LoopTag+32 ]
# CHECK: Vreg: %21[ 3 ]
# CHECK: Vreg: %111[ LoopTag+45 ]
# CHECK: Vreg: %42[ 2 ]
# CHECK: Vreg: %158[ 14 ]
# CHECK: Vreg: %165[ 27 ]
# CHECK: Vreg: %18[ 23 ]
# CHECK: Vreg: %167[ 9 ]
# CHECK: Vreg: %1[ 26 ]
# CHECK: Vreg: %110[ LoopTag+39 ]
# CHECK: Vreg: %162:sub0[ 12 ]
# CHECK: Vreg: %169[ 2 ]
# CHECK: Vreg: %29[ LoopTag+40 ]
# CHECK: Vreg: %17[ 0 ]
# CHECK: Vreg: %171[ 1 ]
# CHECK: Vreg: %50[ LoopTag+39 ]
# CHECK: Vreg: %114[ LoopTag+32 ]
# CHECK: Instr: %173:vgpr_32 = V_LSHL_OR_B32_e64 killed %172, 16, killed %171, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+42 ]
# CHECK: Vreg: %116[ LoopTag+34 ]
# CHECK: Vreg: %161[ LoopTag+31 ]
# CHECK: Vreg: %21[ 2 ]
# CHECK: Vreg: %111[ LoopTag+44 ]
# CHECK: Vreg: %42[ 1 ]
# CHECK: Vreg: %158[ 13 ]
# CHECK: Vreg: %165[ 26 ]
# CHECK: Vreg: %18[ 22 ]
# CHECK: Vreg: %172[ 0 ]
# CHECK: Vreg: %167[ 8 ]
# CHECK: Vreg: %1[ 25 ]
# CHECK: Vreg: %110[ LoopTag+38 ]
# CHECK: Vreg: %162:sub0[ 11 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+39 ]
# CHECK: Vreg: %17[ 30 ]
# CHECK: Vreg: %171[ 0 ]
# CHECK: Vreg: %50[ LoopTag+38 ]
# CHECK: Vreg: %114[ LoopTag+31 ]
# CHECK: Instr: %174:vgpr_32 = V_ADD_U32_e64 %169, %42, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+41 ]
# CHECK: Vreg: %173[ LoopTag+31 ]
# CHECK: Vreg: %116[ LoopTag+33 ]
# CHECK: Vreg: %161[ LoopTag+30 ]
# CHECK: Vreg: %21[ 1 ]
# CHECK: Vreg: %111[ LoopTag+43 ]
# CHECK: Vreg: %42[ 0 ]
# CHECK: Vreg: %158[ 12 ]
# CHECK: Vreg: %165[ 25 ]
# CHECK: Vreg: %18[ 21 ]
# CHECK: Vreg: %167[ 7 ]
# CHECK: Vreg: %1[ 24 ]
# CHECK: Vreg: %110[ LoopTag+37 ]
# CHECK: Vreg: %162:sub0[ 10 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+38 ]
# CHECK: Vreg: %17[ 29 ]
# CHECK: Vreg: %50[ LoopTag+37 ]
# CHECK: Vreg: %114[ LoopTag+30 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %21, killed %174, 0, 0, implicit $exec :: (store (s32) into %ir.p2, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+40 ]
# CHECK: Vreg: %173[ LoopTag+30 ]
# CHECK: Vreg: %116[ LoopTag+32 ]
# CHECK: Vreg: %161[ LoopTag+29 ]
# CHECK: Vreg: %21[ 0 ]
# CHECK: Vreg: %111[ LoopTag+42 ]
# CHECK: Vreg: %42[ 31 ]
# CHECK: Vreg: %158[ 11 ]
# CHECK: Vreg: %165[ 24 ]
# CHECK: Vreg: %18[ 20 ]
# CHECK: Vreg: %167[ 6 ]
# CHECK: Vreg: %1[ 23 ]
# CHECK: Vreg: %110[ LoopTag+36 ]
# CHECK: Vreg: %174[ 0 ]
# CHECK: Vreg: %162:sub0[ 9 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+37 ]
# CHECK: Vreg: %17[ 28 ]
# CHECK: Vreg: %50[ LoopTag+36 ]
# CHECK: Vreg: %114[ LoopTag+29 ]
# CHECK: Instr: %175:sgpr_32 = S_CVT_F32_U32 %169, implicit $mode
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+39 ]
# CHECK: Vreg: %173[ LoopTag+29 ]
# CHECK: Vreg: %116[ LoopTag+31 ]
# CHECK: Vreg: %161[ LoopTag+28 ]
# CHECK: Vreg: %21[ 31 ]
# CHECK: Vreg: %111[ LoopTag+41 ]
# CHECK: Vreg: %42[ 30 ]
# CHECK: Vreg: %158[ 10 ]
# CHECK: Vreg: %165[ 23 ]
# CHECK: Vreg: %18[ 19 ]
# CHECK: Vreg: %167[ 5 ]
# CHECK: Vreg: %1[ 22 ]
# CHECK: Vreg: %110[ LoopTag+35 ]
# CHECK: Vreg: %162:sub0[ 8 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+36 ]
# CHECK: Vreg: %17[ 27 ]
# CHECK: Vreg: %50[ LoopTag+35 ]
# CHECK: Vreg: %114[ LoopTag+28 ]
# CHECK: Instr: %176:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %175, 0, 0, implicit $mode, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+38 ]
# CHECK: Vreg: %173[ LoopTag+28 ]
# CHECK: Vreg: %116[ LoopTag+30 ]
# CHECK: Vreg: %161[ LoopTag+27 ]
# CHECK: Vreg: %21[ 30 ]
# CHECK: Vreg: %111[ LoopTag+40 ]
# CHECK: Vreg: %175[ 0 ]
# CHECK: Vreg: %42[ 29 ]
# CHECK: Vreg: %158[ 9 ]
# CHECK: Vreg: %165[ 22 ]
# CHECK: Vreg: %18[ 18 ]
# CHECK: Vreg: %167[ 4 ]
# CHECK: Vreg: %1[ 21 ]
# CHECK: Vreg: %110[ LoopTag+34 ]
# CHECK: Vreg: %162:sub0[ 7 ]
# CHECK: Vreg: %169[ 8 ]
# CHECK: Vreg: %29[ LoopTag+35 ]
# CHECK: Vreg: %17[ 26 ]
# CHECK: Vreg: %50[ LoopTag+34 ]
# CHECK: Vreg: %114[ LoopTag+27 ]
# CHECK: Instr: %177:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %176, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+37 ]
# CHECK: Vreg: %173[ LoopTag+27 ]
# CHECK: Vreg: %116[ LoopTag+29 ]
# CHECK: Vreg: %161[ LoopTag+26 ]
# CHECK: Vreg: %21[ 29 ]
# CHECK: Vreg: %111[ LoopTag+39 ]
# CHECK: Vreg: %42[ 28 ]
# CHECK: Vreg: %158[ 8 ]
# CHECK: Vreg: %165[ 21 ]
# CHECK: Vreg: %18[ 17 ]
# CHECK: Vreg: %167[ 3 ]
# CHECK: Vreg: %1[ 20 ]
# CHECK: Vreg: %110[ LoopTag+33 ]
# CHECK: Vreg: %162:sub0[ 6 ]
# CHECK: Vreg: %169[ 7 ]
# CHECK: Vreg: %176[ 0 ]
# CHECK: Vreg: %29[ LoopTag+34 ]
# CHECK: Vreg: %17[ 25 ]
# CHECK: Vreg: %50[ LoopTag+33 ]
# CHECK: Vreg: %114[ LoopTag+26 ]
# CHECK: Instr: %178:sgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept S_MUL_F32 killed %177, 1333788670, implicit $mode
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+36 ]
# CHECK: Vreg: %173[ LoopTag+26 ]
# CHECK: Vreg: %116[ LoopTag+28 ]
# CHECK: Vreg: %161[ LoopTag+25 ]
# CHECK: Vreg: %21[ 28 ]
# CHECK: Vreg: %111[ LoopTag+38 ]
# CHECK: Vreg: %42[ 27 ]
# CHECK: Vreg: %177[ 0 ]
# CHECK: Vreg: %158[ 7 ]
# CHECK: Vreg: %165[ 20 ]
# CHECK: Vreg: %18[ 16 ]
# CHECK: Vreg: %167[ 2 ]
# CHECK: Vreg: %1[ 19 ]
# CHECK: Vreg: %110[ LoopTag+32 ]
# CHECK: Vreg: %162:sub0[ 5 ]
# CHECK: Vreg: %169[ 6 ]
# CHECK: Vreg: %29[ LoopTag+33 ]
# CHECK: Vreg: %17[ 24 ]
# CHECK: Vreg: %50[ LoopTag+32 ]
# CHECK: Vreg: %114[ LoopTag+25 ]
# CHECK: Instr: %179:sreg_32 = nofpexcept S_CVT_U32_F32 killed %178, implicit $mode
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+35 ]
# CHECK: Vreg: %173[ LoopTag+25 ]
# CHECK: Vreg: %116[ LoopTag+27 ]
# CHECK: Vreg: %161[ LoopTag+24 ]
# CHECK: Vreg: %21[ 27 ]
# CHECK: Vreg: %111[ LoopTag+37 ]
# CHECK: Vreg: %42[ 26 ]
# CHECK: Vreg: %158[ 6 ]
# CHECK: Vreg: %165[ 19 ]
# CHECK: Vreg: %18[ 15 ]
# CHECK: Vreg: %167[ 1 ]
# CHECK: Vreg: %1[ 18 ]
# CHECK: Vreg: %110[ LoopTag+31 ]
# CHECK: Vreg: %162:sub0[ 4 ]
# CHECK: Vreg: %169[ 5 ]
# CHECK: Vreg: %29[ LoopTag+32 ]
# CHECK: Vreg: %17[ 23 ]
# CHECK: Vreg: %50[ LoopTag+31 ]
# CHECK: Vreg: %114[ LoopTag+24 ]
# CHECK: Vreg: %178[ 0 ]
# CHECK: Instr: %180:sreg_32 = S_MUL_I32 %167, %179
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+34 ]
# CHECK: Vreg: %173[ LoopTag+24 ]
# CHECK: Vreg: %116[ LoopTag+26 ]
# CHECK: Vreg: %161[ LoopTag+23 ]
# CHECK: Vreg: %21[ 26 ]
# CHECK: Vreg: %111[ LoopTag+36 ]
# CHECK: Vreg: %42[ 25 ]
# CHECK: Vreg: %158[ 5 ]
# CHECK: Vreg: %165[ 18 ]
# CHECK: Vreg: %18[ 14 ]
# CHECK: Vreg: %179[ 0 ]
# CHECK: Vreg: %167[ 0 ]
# CHECK: Vreg: %1[ 17 ]
# CHECK: Vreg: %110[ LoopTag+30 ]
# CHECK: Vreg: %162:sub0[ 3 ]
# CHECK: Vreg: %169[ 4 ]
# CHECK: Vreg: %29[ LoopTag+31 ]
# CHECK: Vreg: %17[ 22 ]
# CHECK: Vreg: %50[ LoopTag+30 ]
# CHECK: Vreg: %114[ LoopTag+23 ]
# CHECK: Instr: %181:sreg_32 = S_MUL_HI_U32 %179, killed %180
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+33 ]
# CHECK: Vreg: %173[ LoopTag+23 ]
# CHECK: Vreg: %116[ LoopTag+25 ]
# CHECK: Vreg: %161[ LoopTag+22 ]
# CHECK: Vreg: %180[ 0 ]
# CHECK: Vreg: %21[ 25 ]
# CHECK: Vreg: %111[ LoopTag+35 ]
# CHECK: Vreg: %42[ 24 ]
# CHECK: Vreg: %158[ 4 ]
# CHECK: Vreg: %165[ 17 ]
# CHECK: Vreg: %18[ 13 ]
# CHECK: Vreg: %179[ 0 ]
# CHECK: Vreg: %167[ 15 ]
# CHECK: Vreg: %1[ 16 ]
# CHECK: Vreg: %110[ LoopTag+29 ]
# CHECK: Vreg: %162:sub0[ 2 ]
# CHECK: Vreg: %169[ 3 ]
# CHECK: Vreg: %29[ LoopTag+30 ]
# CHECK: Vreg: %17[ 21 ]
# CHECK: Vreg: %50[ LoopTag+29 ]
# CHECK: Vreg: %114[ LoopTag+22 ]
# CHECK: Instr: %182:sreg_32 = S_ADD_I32 killed %179, killed %181, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+32 ]
# CHECK: Vreg: %173[ LoopTag+22 ]
# CHECK: Vreg: %116[ LoopTag+24 ]
# CHECK: Vreg: %161[ LoopTag+21 ]
# CHECK: Vreg: %21[ 24 ]
# CHECK: Vreg: %111[ LoopTag+34 ]
# CHECK: Vreg: %42[ 23 ]
# CHECK: Vreg: %158[ 3 ]
# CHECK: Vreg: %165[ 16 ]
# CHECK: Vreg: %18[ 12 ]
# CHECK: Vreg: %179[ 0 ]
# CHECK: Vreg: %167[ 14 ]
# CHECK: Vreg: %1[ 15 ]
# CHECK: Vreg: %110[ LoopTag+28 ]
# CHECK: Vreg: %181[ 0 ]
# CHECK: Vreg: %162:sub0[ 1 ]
# CHECK: Vreg: %169[ 2 ]
# CHECK: Vreg: %29[ LoopTag+29 ]
# CHECK: Vreg: %17[ 20 ]
# CHECK: Vreg: %50[ LoopTag+28 ]
# CHECK: Vreg: %114[ LoopTag+21 ]
# CHECK: Instr: %183:vgpr_32 = V_MUL_HI_U32_e64 %162.sub0, killed %182, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+31 ]
# CHECK: Vreg: %173[ LoopTag+21 ]
# CHECK: Vreg: %116[ LoopTag+23 ]
# CHECK: Vreg: %161[ LoopTag+20 ]
# CHECK: Vreg: %21[ 23 ]
# CHECK: Vreg: %111[ LoopTag+33 ]
# CHECK: Vreg: %182[ 0 ]
# CHECK: Vreg: %42[ 22 ]
# CHECK: Vreg: %158[ 2 ]
# CHECK: Vreg: %165[ 15 ]
# CHECK: Vreg: %18[ 11 ]
# CHECK: Vreg: %167[ 13 ]
# CHECK: Vreg: %1[ 14 ]
# CHECK: Vreg: %110[ LoopTag+27 ]
# CHECK: Vreg: %162:sub0[ 0 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+28 ]
# CHECK: Vreg: %17[ 19 ]
# CHECK: Vreg: %50[ LoopTag+27 ]
# CHECK: Vreg: %114[ LoopTag+20 ]
# CHECK: Instr: %184:vgpr_32 = V_MUL_LO_U32_e64 %183, %169, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+30 ]
# CHECK: Vreg: %173[ LoopTag+20 ]
# CHECK: Vreg: %116[ LoopTag+22 ]
# CHECK: Vreg: %161[ LoopTag+19 ]
# CHECK: Vreg: %21[ 22 ]
# CHECK: Vreg: %111[ LoopTag+32 ]
# CHECK: Vreg: %42[ 21 ]
# CHECK: Vreg: %158[ 1 ]
# CHECK: Vreg: %165[ 14 ]
# CHECK: Vreg: %18[ 10 ]
# CHECK: Vreg: %167[ 12 ]
# CHECK: Vreg: %1[ 13 ]
# CHECK: Vreg: %110[ LoopTag+26 ]
# CHECK: Vreg: %162:sub0[ 31 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+27 ]
# CHECK: Vreg: %183[ 0 ]
# CHECK: Vreg: %17[ 18 ]
# CHECK: Vreg: %50[ LoopTag+26 ]
# CHECK: Vreg: %114[ LoopTag+19 ]
# CHECK: Instr: %185:vgpr_32 = V_SUB_U32_e64 %158, killed %184, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+29 ]
# CHECK: Vreg: %173[ LoopTag+19 ]
# CHECK: Vreg: %116[ LoopTag+21 ]
# CHECK: Vreg: %161[ LoopTag+18 ]
# CHECK: Vreg: %21[ 21 ]
# CHECK: Vreg: %111[ LoopTag+31 ]
# CHECK: Vreg: %42[ 20 ]
# CHECK: Vreg: %158[ 0 ]
# CHECK: Vreg: %184[ 0 ]
# CHECK: Vreg: %165[ 13 ]
# CHECK: Vreg: %18[ 9 ]
# CHECK: Vreg: %167[ 11 ]
# CHECK: Vreg: %1[ 12 ]
# CHECK: Vreg: %110[ LoopTag+25 ]
# CHECK: Vreg: %162:sub0[ 30 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+26 ]
# CHECK: Vreg: %183[ 2 ]
# CHECK: Vreg: %17[ 17 ]
# CHECK: Vreg: %50[ LoopTag+25 ]
# CHECK: Vreg: %114[ LoopTag+18 ]
# CHECK: Instr: %186:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %169, %185, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+28 ]
# CHECK: Vreg: %173[ LoopTag+18 ]
# CHECK: Vreg: %116[ LoopTag+20 ]
# CHECK: Vreg: %161[ LoopTag+17 ]
# CHECK: Vreg: %21[ 20 ]
# CHECK: Vreg: %111[ LoopTag+30 ]
# CHECK: Vreg: %42[ 19 ]
# CHECK: Vreg: %158[ 31 ]
# CHECK: Vreg: %165[ 12 ]
# CHECK: Vreg: %18[ 8 ]
# CHECK: Vreg: %167[ 10 ]
# CHECK: Vreg: %1[ 11 ]
# CHECK: Vreg: %110[ LoopTag+24 ]
# CHECK: Vreg: %162:sub0[ 29 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+25 ]
# CHECK: Vreg: %183[ 1 ]
# CHECK: Vreg: %17[ 16 ]
# CHECK: Vreg: %50[ LoopTag+24 ]
# CHECK: Vreg: %114[ LoopTag+17 ]
# CHECK: Vreg: %185[ 0 ]
# CHECK: Instr: %187:vgpr_32 = V_ADD_U32_e64 1, %183, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+27 ]
# CHECK: Vreg: %173[ LoopTag+17 ]
# CHECK: Vreg: %116[ LoopTag+19 ]
# CHECK: Vreg: %161[ LoopTag+16 ]
# CHECK: Vreg: %21[ 19 ]
# CHECK: Vreg: %111[ LoopTag+29 ]
# CHECK: Vreg: %42[ 18 ]
# CHECK: Vreg: %158[ 30 ]
# CHECK: Vreg: %165[ 11 ]
# CHECK: Vreg: %18[ 7 ]
# CHECK: Vreg: %186[ 1 ]
# CHECK: Vreg: %167[ 9 ]
# CHECK: Vreg: %1[ 10 ]
# CHECK: Vreg: %110[ LoopTag+23 ]
# CHECK: Vreg: %162:sub0[ 28 ]
# CHECK: Vreg: %169[ 2 ]
# CHECK: Vreg: %29[ LoopTag+24 ]
# CHECK: Vreg: %183[ 0 ]
# CHECK: Vreg: %17[ 15 ]
# CHECK: Vreg: %50[ LoopTag+23 ]
# CHECK: Vreg: %114[ LoopTag+16 ]
# CHECK: Vreg: %185[ 2 ]
# CHECK: Instr: %188:vgpr_32 = V_CNDMASK_B32_e64 0, killed %183, 0, killed %187, %186, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+26 ]
# CHECK: Vreg: %173[ LoopTag+16 ]
# CHECK: Vreg: %116[ LoopTag+18 ]
# CHECK: Vreg: %161[ LoopTag+15 ]
# CHECK: Vreg: %187[ 0 ]
# CHECK: Vreg: %21[ 18 ]
# CHECK: Vreg: %111[ LoopTag+28 ]
# CHECK: Vreg: %42[ 17 ]
# CHECK: Vreg: %158[ 29 ]
# CHECK: Vreg: %165[ 10 ]
# CHECK: Vreg: %18[ 6 ]
# CHECK: Vreg: %186[ 0 ]
# CHECK: Vreg: %167[ 8 ]
# CHECK: Vreg: %1[ 9 ]
# CHECK: Vreg: %110[ LoopTag+22 ]
# CHECK: Vreg: %162:sub0[ 27 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+23 ]
# CHECK: Vreg: %183[ 0 ]
# CHECK: Vreg: %17[ 14 ]
# CHECK: Vreg: %50[ LoopTag+22 ]
# CHECK: Vreg: %114[ LoopTag+15 ]
# CHECK: Vreg: %185[ 1 ]
# CHECK: Instr: %189:vgpr_32 = V_SUBREV_U32_e64 %169, %185, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+25 ]
# CHECK: Vreg: %173[ LoopTag+15 ]
# CHECK: Vreg: %116[ LoopTag+17 ]
# CHECK: Vreg: %161[ LoopTag+14 ]
# CHECK: Vreg: %21[ 17 ]
# CHECK: Vreg: %111[ LoopTag+27 ]
# CHECK: Vreg: %42[ 16 ]
# CHECK: Vreg: %158[ 28 ]
# CHECK: Vreg: %165[ 9 ]
# CHECK: Vreg: %18[ 5 ]
# CHECK: Vreg: %186[ 1 ]
# CHECK: Vreg: %167[ 7 ]
# CHECK: Vreg: %1[ 8 ]
# CHECK: Vreg: %110[ LoopTag+21 ]
# CHECK: Vreg: %162:sub0[ 26 ]
# CHECK: Vreg: %188[ 3 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+22 ]
# CHECK: Vreg: %17[ 13 ]
# CHECK: Vreg: %50[ LoopTag+21 ]
# CHECK: Vreg: %114[ LoopTag+14 ]
# CHECK: Vreg: %185[ 0 ]
# CHECK: Instr: %190:vgpr_32 = V_CNDMASK_B32_e64 0, killed %185, 0, killed %189, killed %186, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+24 ]
# CHECK: Vreg: %173[ LoopTag+14 ]
# CHECK: Vreg: %116[ LoopTag+16 ]
# CHECK: Vreg: %161[ LoopTag+13 ]
# CHECK: Vreg: %21[ 16 ]
# CHECK: Vreg: %111[ LoopTag+26 ]
# CHECK: Vreg: %189[ 0 ]
# CHECK: Vreg: %42[ 15 ]
# CHECK: Vreg: %158[ 27 ]
# CHECK: Vreg: %165[ 8 ]
# CHECK: Vreg: %18[ 4 ]
# CHECK: Vreg: %186[ 0 ]
# CHECK: Vreg: %167[ 6 ]
# CHECK: Vreg: %1[ 7 ]
# CHECK: Vreg: %110[ LoopTag+20 ]
# CHECK: Vreg: %162:sub0[ 25 ]
# CHECK: Vreg: %188[ 2 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+21 ]
# CHECK: Vreg: %17[ 12 ]
# CHECK: Vreg: %50[ LoopTag+20 ]
# CHECK: Vreg: %114[ LoopTag+13 ]
# CHECK: Vreg: %185[ 0 ]
# CHECK: Instr: %191:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %169, killed %190, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+23 ]
# CHECK: Vreg: %173[ LoopTag+13 ]
# CHECK: Vreg: %116[ LoopTag+15 ]
# CHECK: Vreg: %161[ LoopTag+12 ]
# CHECK: Vreg: %21[ 15 ]
# CHECK: Vreg: %111[ LoopTag+25 ]
# CHECK: Vreg: %42[ 14 ]
# CHECK: Vreg: %158[ 26 ]
# CHECK: Vreg: %165[ 7 ]
# CHECK: Vreg: %18[ 3 ]
# CHECK: Vreg: %167[ 5 ]
# CHECK: Vreg: %1[ 6 ]
# CHECK: Vreg: %110[ LoopTag+19 ]
# CHECK: Vreg: %162:sub0[ 24 ]
# CHECK: Vreg: %188[ 1 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+20 ]
# CHECK: Vreg: %17[ 11 ]
# CHECK: Vreg: %190[ 0 ]
# CHECK: Vreg: %50[ LoopTag+19 ]
# CHECK: Vreg: %114[ LoopTag+12 ]
# CHECK: Instr: %192:vgpr_32 = V_ADD_U32_e64 1, %188, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+22 ]
# CHECK: Vreg: %173[ LoopTag+12 ]
# CHECK: Vreg: %116[ LoopTag+14 ]
# CHECK: Vreg: %161[ LoopTag+11 ]
# CHECK: Vreg: %21[ 14 ]
# CHECK: Vreg: %111[ LoopTag+24 ]
# CHECK: Vreg: %42[ 13 ]
# CHECK: Vreg: %158[ 25 ]
# CHECK: Vreg: %165[ 6 ]
# CHECK: Vreg: %18[ 2 ]
# CHECK: Vreg: %191[ 1 ]
# CHECK: Vreg: %167[ 4 ]
# CHECK: Vreg: %1[ 5 ]
# CHECK: Vreg: %110[ LoopTag+18 ]
# CHECK: Vreg: %162:sub0[ 23 ]
# CHECK: Vreg: %188[ 0 ]
# CHECK: Vreg: %169[ 3 ]
# CHECK: Vreg: %29[ LoopTag+19 ]
# CHECK: Vreg: %17[ 10 ]
# CHECK: Vreg: %50[ LoopTag+18 ]
# CHECK: Vreg: %114[ LoopTag+11 ]
# CHECK: Instr: %193:vgpr_32 = V_CNDMASK_B32_e64 0, killed %188, 0, killed %192, killed %191, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+21 ]
# CHECK: Vreg: %173[ LoopTag+11 ]
# CHECK: Vreg: %192[ 0 ]
# CHECK: Vreg: %116[ LoopTag+13 ]
# CHECK: Vreg: %161[ LoopTag+10 ]
# CHECK: Vreg: %21[ 13 ]
# CHECK: Vreg: %111[ LoopTag+23 ]
# CHECK: Vreg: %42[ 12 ]
# CHECK: Vreg: %158[ 24 ]
# CHECK: Vreg: %165[ 5 ]
# CHECK: Vreg: %18[ 1 ]
# CHECK: Vreg: %191[ 0 ]
# CHECK: Vreg: %167[ 3 ]
# CHECK: Vreg: %1[ 4 ]
# CHECK: Vreg: %110[ LoopTag+17 ]
# CHECK: Vreg: %162:sub0[ 22 ]
# CHECK: Vreg: %188[ 0 ]
# CHECK: Vreg: %169[ 2 ]
# CHECK: Vreg: %29[ LoopTag+18 ]
# CHECK: Vreg: %17[ 9 ]
# CHECK: Vreg: %50[ LoopTag+17 ]
# CHECK: Vreg: %114[ LoopTag+10 ]
# CHECK: Instr: GLOBAL_STORE_DWORD %18, killed %193, 0, 0, implicit $exec :: (store (s32) into %ir.p5, addrspace 1)
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+20 ]
# CHECK: Vreg: %173[ LoopTag+10 ]
# CHECK: Vreg: %116[ LoopTag+12 ]
# CHECK: Vreg: %161[ LoopTag+9 ]
# CHECK: Vreg: %21[ 12 ]
# CHECK: Vreg: %111[ LoopTag+22 ]
# CHECK: Vreg: %42[ 11 ]
# CHECK: Vreg: %158[ 23 ]
# CHECK: Vreg: %165[ 4 ]
# CHECK: Vreg: %18[ 0 ]
# CHECK: Vreg: %167[ 2 ]
# CHECK: Vreg: %1[ 3 ]
# CHECK: Vreg: %110[ LoopTag+16 ]
# CHECK: Vreg: %193[ 0 ]
# CHECK: Vreg: %162:sub0[ 21 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+17 ]
# CHECK: Vreg: %17[ 8 ]
# CHECK: Vreg: %50[ LoopTag+16 ]
# CHECK: Vreg: %114[ LoopTag+9 ]
# CHECK: Instr: %170:sreg_32 = S_ADD_I32 %169, 1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+19 ]
# CHECK: Vreg: %173[ LoopTag+9 ]
# CHECK: Vreg: %116[ LoopTag+11 ]
# CHECK: Vreg: %161[ LoopTag+8 ]
# CHECK: Vreg: %21[ 11 ]
# CHECK: Vreg: %111[ LoopTag+21 ]
# CHECK: Vreg: %42[ 10 ]
# CHECK: Vreg: %158[ 22 ]
# CHECK: Vreg: %165[ 3 ]
# CHECK: Vreg: %18[ 31 ]
# CHECK: Vreg: %167[ 1 ]
# CHECK: Vreg: %1[ 2 ]
# CHECK: Vreg: %110[ LoopTag+15 ]
# CHECK: Vreg: %162:sub0[ 20 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+16 ]
# CHECK: Vreg: %17[ 7 ]
# CHECK: Vreg: %50[ LoopTag+15 ]
# CHECK: Vreg: %114[ LoopTag+8 ]
# CHECK: Instr: %168:sreg_32 = S_ADD_I32 killed %167, -1, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+18 ]
# CHECK: Vreg: %173[ LoopTag+8 ]
# CHECK: Vreg: %116[ LoopTag+10 ]
# CHECK: Vreg: %161[ LoopTag+7 ]
# CHECK: Vreg: %21[ 10 ]
# CHECK: Vreg: %111[ LoopTag+20 ]
# CHECK: Vreg: %42[ 9 ]
# CHECK: Vreg: %170[ 1 ]
# CHECK: Vreg: %158[ 21 ]
# CHECK: Vreg: %165[ 2 ]
# CHECK: Vreg: %18[ 30 ]
# CHECK: Vreg: %167[ 0 ]
# CHECK: Vreg: %1[ 1 ]
# CHECK: Vreg: %110[ LoopTag+14 ]
# CHECK: Vreg: %162:sub0[ 19 ]
# CHECK: Vreg: %169[ 3 ]
# CHECK: Vreg: %29[ LoopTag+15 ]
# CHECK: Vreg: %17[ 6 ]
# CHECK: Vreg: %50[ LoopTag+14 ]
# CHECK: Vreg: %114[ LoopTag+7 ]
# CHECK: Instr: %194:sreg_32 = V_CMP_GE_U32_e64 %170, %1, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+17 ]
# CHECK: Vreg: %173[ LoopTag+7 ]
# CHECK: Vreg: %116[ LoopTag+9 ]
# CHECK: Vreg: %161[ LoopTag+6 ]
# CHECK: Vreg: %168[ 4 ]
# CHECK: Vreg: %21[ 9 ]
# CHECK: Vreg: %111[ LoopTag+19 ]
# CHECK: Vreg: %42[ 8 ]
# CHECK: Vreg: %170[ 0 ]
# CHECK: Vreg: %158[ 20 ]
# CHECK: Vreg: %165[ 1 ]
# CHECK: Vreg: %18[ 29 ]
# CHECK: Vreg: %1[ 0 ]
# CHECK: Vreg: %110[ LoopTag+13 ]
# CHECK: Vreg: %162:sub0[ 18 ]
# CHECK: Vreg: %169[ 2 ]
# CHECK: Vreg: %29[ LoopTag+14 ]
# CHECK: Vreg: %17[ 5 ]
# CHECK: Vreg: %50[ LoopTag+13 ]
# CHECK: Vreg: %114[ LoopTag+6 ]
# CHECK: Instr: %166:sreg_32 = SI_IF_BREAK killed %194, killed %165, implicit-def dead $scc
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+16 ]
# CHECK: Vreg: %173[ LoopTag+6 ]
# CHECK: Vreg: %116[ LoopTag+8 ]
# CHECK: Vreg: %161[ LoopTag+5 ]
# CHECK: Vreg: %168[ 3 ]
# CHECK: Vreg: %21[ 8 ]
# CHECK: Vreg: %194[ 0 ]
# CHECK: Vreg: %111[ LoopTag+18 ]
# CHECK: Vreg: %42[ 7 ]
# CHECK: Vreg: %170[ 3 ]
# CHECK: Vreg: %158[ 19 ]
# CHECK: Vreg: %165[ 0 ]
# CHECK: Vreg: %18[ 28 ]
# CHECK: Vreg: %1[ 31 ]
# CHECK: Vreg: %110[ LoopTag+12 ]
# CHECK: Vreg: %162:sub0[ 17 ]
# CHECK: Vreg: %169[ 1 ]
# CHECK: Vreg: %29[ LoopTag+13 ]
# CHECK: Vreg: %17[ 4 ]
# CHECK: Vreg: %50[ LoopTag+12 ]
# CHECK: Vreg: %114[ LoopTag+5 ]
# CHECK: Instr: %195:vgpr_32 = COPY killed %169, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+15 ]
# CHECK: Vreg: %173[ LoopTag+5 ]
# CHECK: Vreg: %116[ LoopTag+7 ]
# CHECK: Vreg: %161[ LoopTag+4 ]
# CHECK: Vreg: %168[ 2 ]
# CHECK: Vreg: %21[ 7 ]
# CHECK: Vreg: %111[ LoopTag+17 ]
# CHECK: Vreg: %42[ 6 ]
# CHECK: Vreg: %170[ 2 ]
# CHECK: Vreg: %158[ 18 ]
# CHECK: Vreg: %18[ 27 ]
# CHECK: Vreg: %1[ 30 ]
# CHECK: Vreg: %110[ LoopTag+11 ]
# CHECK: Vreg: %162:sub0[ 16 ]
# CHECK: Vreg: %169[ 0 ]
# CHECK: Vreg: %29[ LoopTag+12 ]
# CHECK: Vreg: %17[ 3 ]
# CHECK: Vreg: %50[ LoopTag+11 ]
# CHECK: Vreg: %114[ LoopTag+4 ]
# CHECK: Vreg: %166[ 1 ]
# CHECK: Instr: SI_LOOP %166, %bb.10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+14 ]
# CHECK: Vreg: %173[ LoopTag+4 ]
# CHECK: Vreg: %116[ LoopTag+6 ]
# CHECK: Vreg: %161[ LoopTag+3 ]
# CHECK: Vreg: %168[ 1 ]
# CHECK: Vreg: %21[ 6 ]
# CHECK: Vreg: %111[ LoopTag+16 ]
# CHECK: Vreg: %42[ 5 ]
# CHECK: Vreg: %170[ 1 ]
# CHECK: Vreg: %158[ 17 ]
# CHECK: Vreg: %18[ 26 ]
# CHECK: Vreg: %1[ 29 ]
# CHECK: Vreg: %110[ LoopTag+10 ]
# CHECK: Vreg: %162:sub0[ 15 ]
# CHECK: Vreg: %195[ LoopTag+4 ]
# CHECK: Vreg: %29[ LoopTag+11 ]
# CHECK: Vreg: %17[ 2 ]
# CHECK: Vreg: %50[ LoopTag+10 ]
# CHECK: Vreg: %114[ LoopTag+3 ]
# CHECK: Vreg: %166[ 0 ]
# CHECK: Instr: S_BRANCH %bb.12
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ LoopTag+13 ]
# CHECK: Vreg: %173[ LoopTag+3 ]
# CHECK: Vreg: %116[ LoopTag+5 ]
# CHECK: Vreg: %161[ LoopTag+2 ]
# CHECK: Vreg: %168[ 0 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ LoopTag+15 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %170[ 0 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ LoopTag+9 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %195[ LoopTag+3 ]
# CHECK: Vreg: %29[ LoopTag+10 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+9 ]
# CHECK: Vreg: %114[ LoopTag+2 ]
# CHECK: Vreg: %166[ 0 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ LoopTag+13 ]
# CHECK: Vreg: %173[ LoopTag+3 ]
# CHECK: Vreg: %116[ LoopTag+5 ]
# CHECK: Vreg: %161[ LoopTag+2 ]
# CHECK: Vreg: %168[ 0 ]
# CHECK: Vreg: %21[ 5 ]
# CHECK: Vreg: %111[ LoopTag+15 ]
# CHECK: Vreg: %42[ 4 ]
# CHECK: Vreg: %170[ 0 ]
# CHECK: Vreg: %158[ 16 ]
# CHECK: Vreg: %18[ 25 ]
# CHECK: Vreg: %1[ 28 ]
# CHECK: Vreg: %110[ LoopTag+9 ]
# CHECK: Vreg: %162:sub0[ 14 ]
# CHECK: Vreg: %195[ LoopTag+3 ]
# CHECK: Vreg: %29[ LoopTag+10 ]
# CHECK: Vreg: %17[ 1 ]
# CHECK: Vreg: %50[ LoopTag+9 ]
# CHECK: Vreg: %114[ LoopTag+2 ]
# CHECK: Vreg: %166[ 0 ]
# CHECK: --- MBB_11 ---
# CHECK: Instr: SI_END_CF killed %131, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %125[ 2 ]
# CHECK: Vreg: %129[ 3 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %143[ 1 ]
# CHECK: Vreg: %131[ 0 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Vreg: %147[ 1 ]
# CHECK: Instr: %128:vgpr_32 = V_MUL_LO_U32_e64 killed %147, killed %143, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 8 ]
# CHECK: Vreg: %125[ 1 ]
# CHECK: Vreg: %129[ 2 ]
# CHECK: Vreg: %110[ 4 ]
# CHECK: Vreg: %143[ 0 ]
# CHECK: Vreg: %29[ 5 ]
# CHECK: Vreg: %50[ 4 ]
# CHECK: Vreg: %147[ 0 ]
# CHECK: Instr: S_BRANCH %bb.5
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %110[ 3 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 7 ]
# CHECK: Vreg: %128[ 0 ]
# CHECK: Vreg: %125[ 0 ]
# CHECK: Vreg: %129[ 1 ]
# CHECK: Vreg: %110[ 3 ]
# CHECK: Vreg: %29[ 4 ]
# CHECK: Vreg: %50[ 3 ]
# CHECK: --- MBB_12 ---
# CHECK: Instr: SI_END_CF killed %166, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 12 ]
# CHECK: Vreg: %173[ 2 ]
# CHECK: Vreg: %116[ 4 ]
# CHECK: Vreg: %161[ 1 ]
# CHECK: Vreg: %111[ 14 ]
# CHECK: Vreg: %110[ 8 ]
# CHECK: Vreg: %195[ 2 ]
# CHECK: Vreg: %29[ 9 ]
# CHECK: Vreg: %50[ 8 ]
# CHECK: Vreg: %114[ 1 ]
# CHECK: Vreg: %166[ 0 ]
# CHECK: Instr: %146:vgpr_32 = V_MUL_LO_U32_e64 killed %114, killed %161, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 11 ]
# CHECK: Vreg: %173[ 1 ]
# CHECK: Vreg: %116[ 3 ]
# CHECK: Vreg: %161[ 0 ]
# CHECK: Vreg: %111[ 13 ]
# CHECK: Vreg: %110[ 7 ]
# CHECK: Vreg: %195[ 1 ]
# CHECK: Vreg: %29[ 8 ]
# CHECK: Vreg: %50[ 7 ]
# CHECK: Vreg: %114[ 0 ]
# CHECK: Instr: %145:vgpr_32 = V_MUL_LO_U32_e64 killed %173, killed %195, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 10 ]
# CHECK: Vreg: %173[ 0 ]
# CHECK: Vreg: %116[ 2 ]
# CHECK: Vreg: %111[ 12 ]
# CHECK: Vreg: %146[ 1 ]
# CHECK: Vreg: %110[ 6 ]
# CHECK: Vreg: %195[ 0 ]
# CHECK: Vreg: %29[ 7 ]
# CHECK: Vreg: %50[ 6 ]
# CHECK: Instr: S_BRANCH %bb.7
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %146[ 0 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %145[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: Block End Distances:
# CHECK: Vreg: %0[ 9 ]
# CHECK: Vreg: %116[ 1 ]
# CHECK: Vreg: %111[ 11 ]
# CHECK: Vreg: %146[ 0 ]
# CHECK: Vreg: %110[ 5 ]
# CHECK: Vreg: %29[ 6 ]
# CHECK: Vreg: %145[ 0 ]
# CHECK: Vreg: %50[ 5 ]
# CHECK: --- MBB_13 ---
# CHECK: Instr: %196:vgpr_32 = V_MUL_LO_U32_e64 killed %50, killed %110, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 4 ]
# CHECK: Vreg: %123[ 3 ]
# CHECK: Vreg: %110[ 0 ]
# CHECK: Vreg: %29[ 1 ]
# CHECK: Vreg: %126[ 1 ]
# CHECK: Vreg: %50[ 0 ]
# CHECK: Instr: %197:vgpr_32 = V_ADD_U32_e64 killed %29, killed %126, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 3 ]
# CHECK: Vreg: %123[ 2 ]
# CHECK: Vreg: %196[ 1 ]
# CHECK: Vreg: %29[ 0 ]
# CHECK: Vreg: %126[ 0 ]
# CHECK: Instr: %198:vgpr_32 = V_SUB_U32_e64 killed %196, killed %197, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 2 ]
# CHECK: Vreg: %123[ 1 ]
# CHECK: Vreg: %196[ 0 ]
# CHECK: Vreg: %197[ 0 ]
# CHECK: Instr: %199:vgpr_32 = V_ADD_U32_e64 killed %198, killed %123, 0, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 1 ]
# CHECK: Vreg: %123[ 0 ]
# CHECK: Vreg: %198[ 0 ]
# CHECK: Instr: %200:vgpr_32 = V_ADD3_U32_e64 killed %199, killed %0, -100, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %0[ 0 ]
# CHECK: Vreg: %199[ 0 ]
# CHECK: Instr: %201:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %200, implicit $exec
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %200[ 0 ]
# CHECK: Instr: $sgpr0 = COPY killed %201
# CHECK-NEXT: Next-use distances:
# CHECK: Vreg: %201[ 0 ]
# CHECK: Instr: SI_RETURN_TO_EPILOG killed $sgpr0
# CHECK-NEXT: Next-use distances:
# CHECK: (no register uses)
# CHECK: Block End Distances:
# CHECK: (no registers live at block end)
# CHECK: === End NextUseAnalysis Results ===

--- |
  define amdgpu_ps i32 @test16(ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, ptr addrspace(1) %p4, ptr addrspace(1) %p5, ptr addrspace(1) %p6, i32 %TC1, i32 %TC2, i32 %TC3, i32 %TC4, i32 %Val) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  %add1 = add i32 %ld1, 100
  br label %1
  1:
  %phi.inc1 = phi i32 [ 1, %0 ], [ %inc1, %1 ]
  %phi.div = phi i32 [ %ld1, %0 ], [ %div2, %1 ]
  %ld2 = load i32, ptr addrspace(1) %p2, align 1
  %mul1 = mul i32 %ld2, %phi.inc1
  %div1 = udiv i32 %ld2, %phi.inc1
  store i32 %div1, ptr addrspace(1) %p1, align 4
  %inc1 = add i32 %phi.inc1, 1
  %add2 = add i32 %ld1, %phi.inc1
  store i32 %add2, ptr addrspace(1) %p6, align 1
  %sext = sext i32 %phi.inc1 to i64
  %gep = getelementptr inbounds i32, ptr addrspace(1) %p5, i64 %sext
  %ld3 = load i32, ptr addrspace(1) %gep, align 1
  %div2 = udiv i32 %add2, %ld3
  %cond1 = icmp ult i32 %inc1, %TC1
  br i1 %cond1, label %1, label %2
  2:
  %ld4 = load i32, ptr addrspace(1) %p3, align 2
  %cond2 = icmp uge i32 %ld4, %ld1
  br i1 %cond2, label %3, label %4
  3:
  %phi.inc2 = phi i32 [ 0, %2 ], [ %inc2, %3 ]
  %ld5 = load i32, ptr addrspace(1) %p4, align 2
  %mul2 = mul i32 %ld4, %phi.inc2
  %mul3 = mul i32 %ld5, %phi.inc2
  %sub1 = sub i32 %mul3, %inc1
  store i32 %sub1, ptr addrspace(1) %p2, align 4
  %inc2 = add i32 %phi.inc2, 1
  %cond3 = icmp ult i32 %inc2, %TC2
  br i1 %cond3, label %3, label %6
  4:
  %phi.inc3 = phi i32 [ 10, %2 ], [ %inc3, %4 ]
  %phi.sub = phi i32 [ %add2, %2 ], [ %sub2, %4 ]
  %mul4 = mul i32 %ld4, %phi.inc3
  %sub2 = sub i32 %ld4, %phi.inc3
  store i32 %sub2, ptr addrspace(1) %p4, align 4
  %inc3 = add i32 %phi.inc3, 1
  %cond4 = icmp ult i32 %inc3, %TC3
  br i1 %cond4, label %4, label %5
  5:
  %phi.inc4 = phi i32 [ 0, %4 ], [ %inc4, %5 ]
  %ld6 = load i32, ptr addrspace(1) %p6, align 2
  %mul5 = mul i32 %ld6, %phi.inc4
  %add3 = add i32 %phi.div, %phi.inc4
  store i32 %add3, ptr addrspace(1) %p2, align 4
  %div3 = udiv i32 %phi.sub, %phi.inc4
  store i32 %div3, ptr addrspace(1) %p5, align 4
  %inc4 = add i32 %phi.inc4, 1
  %cond5 = icmp ult i32 %inc4, %TC4
  br i1 %cond5, label %5, label %6
  6:
  %phi1 = phi i32 [ %mul2, %3 ], [ %mul4, %5 ]
  %phi2 = phi i32 [ %mul3, %3 ], [ %mul5, %5 ]
  %add4 = add i32 %phi1, %add1
  %sub3 = sub i32 %mul1, %add4
  %add5 = add i32 %phi2, %sub3
  %add6 = add i32 %add5, %Val
  ret i32 %add6
  }
...

---
name:            test16
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6, $vgpr7, $vgpr8, $vgpr9, $vgpr10, $vgpr11, $vgpr12, $vgpr13, $vgpr14, $vgpr15, $vgpr16
  
    %76:vgpr_32 = COPY killed $vgpr16
    %75:vgpr_32 = COPY killed $vgpr15
    %74:vgpr_32 = COPY killed $vgpr14
    %73:vgpr_32 = COPY killed $vgpr13
    %72:vgpr_32 = COPY killed $vgpr12
    %71:vgpr_32 = COPY killed $vgpr11
    %70:vgpr_32 = COPY killed $vgpr10
    %69:vgpr_32 = COPY killed $vgpr9
    %68:vgpr_32 = COPY killed $vgpr8
    %67:vgpr_32 = COPY killed $vgpr7
    %66:vgpr_32 = COPY killed $vgpr6
    %65:vgpr_32 = COPY killed $vgpr5
    %64:vgpr_32 = COPY killed $vgpr4
    %63:vgpr_32 = COPY killed $vgpr3
    %62:vgpr_32 = COPY killed $vgpr2
    %61:vgpr_32 = COPY killed $vgpr1
    %60:vgpr_32 = COPY killed $vgpr0
    %243:vreg_64 = REG_SEQUENCE killed %70, %subreg.sub0, killed %71, %subreg.sub1
    %242:vreg_64 = REG_SEQUENCE killed %68, %subreg.sub0, killed %69, %subreg.sub1
    %241:vreg_64 = REG_SEQUENCE killed %66, %subreg.sub0, killed %67, %subreg.sub1
    %240:vreg_64 = REG_SEQUENCE killed %64, %subreg.sub0, killed %65, %subreg.sub1
    %239:vreg_64 = REG_SEQUENCE killed %62, %subreg.sub0, killed %63, %subreg.sub1
    %238:vreg_64 = REG_SEQUENCE killed %60, %subreg.sub0, killed %61, %subreg.sub1
    %92:vgpr_32 = GLOBAL_LOAD_UBYTE %238, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %94:vgpr_32 = GLOBAL_LOAD_UBYTE %238, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %97:vgpr_32 = V_LSHL_OR_B32_e64 killed %94, 8, killed %92, implicit $exec
    %98:vgpr_32 = GLOBAL_LOAD_UBYTE %238, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %100:vgpr_32 = GLOBAL_LOAD_UBYTE %238, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %102:vgpr_32 = V_LSHL_OR_B32_e64 killed %100, 8, killed %98, implicit $exec
    %0:vgpr_32 = V_LSHL_OR_B32_e64 killed %102, 16, killed %97, implicit $exec
    %85:sreg_32 = S_MOV_B32 1
    %1:vgpr_32 = V_ADD_U32_e64 1, %0, 0, implicit $exec
    %84:sreg_32 = S_MOV_B32 -1
    %83:sreg_32 = S_MOV_B32 0
  
  bb.1:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  
    %2:sreg_32 = PHI %83, %bb.0, %12, %bb.1
    %3:vgpr_32 = PHI %1, %bb.0, %11, %bb.1
    %4:sreg_32 = PHI %84, %bb.0, %10, %bb.1
    %5:sreg_32 = PHI %85, %bb.0, %8, %bb.1
    %6:vgpr_32 = PHI %0, %bb.0, %9, %bb.1
    %104:vgpr_32 = GLOBAL_LOAD_UBYTE %239, 0, 0, implicit $exec :: (load (s8) from %ir.p2, addrspace 1)
    %105:vgpr_32 = GLOBAL_LOAD_UBYTE %239, 1, 0, implicit $exec :: (load (s8) from %ir.p2 + 1, addrspace 1)
    %107:vgpr_32 = V_LSHL_OR_B32_e64 killed %105, 8, killed %104, implicit $exec
    %108:vgpr_32 = GLOBAL_LOAD_UBYTE %239, 2, 0, implicit $exec :: (load (s8) from %ir.p2 + 2, addrspace 1)
    %109:vgpr_32 = GLOBAL_LOAD_UBYTE %239, 3, 0, implicit $exec :: (load (s8) from %ir.p2 + 3, addrspace 1)
    %110:vgpr_32 = V_LSHL_OR_B32_e64 killed %109, 8, killed %108, implicit $exec
    %7:vgpr_32 = V_LSHL_OR_B32_e64 killed %110, 16, killed %107, implicit $exec
    %112:sgpr_32 = S_CVT_F32_U32 %5, implicit $mode
    %113:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %112, 0, 0, implicit $mode, implicit $exec
    %116:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %113, implicit $exec
    %115:sgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept S_MUL_F32 killed %116, 1333788670, implicit $mode
    %117:sreg_32 = nofpexcept S_CVT_U32_F32 killed %115, implicit $mode
    %118:sreg_32 = S_MUL_I32 %4, %117
    %119:sreg_32 = S_MUL_HI_U32 %117, killed %118
    %120:sreg_32 = S_ADD_I32 killed %117, killed %119, implicit-def dead $scc
    %121:vgpr_32 = V_MUL_HI_U32_e64 %7, killed %120, implicit $exec
    %122:vgpr_32 = V_MUL_LO_U32_e64 %121, %5, implicit $exec
    %123:vgpr_32 = V_SUB_U32_e64 %7, killed %122, 0, implicit $exec
    %124:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %5, %123, implicit $exec
    %126:vgpr_32 = V_ADD_U32_e64 1, %121, 0, implicit $exec
    %127:vgpr_32 = V_CNDMASK_B32_e64 0, killed %121, 0, killed %126, %124, implicit $exec
    %128:vgpr_32 = V_SUBREV_U32_e64 %5, %123, 0, implicit $exec
    %129:vgpr_32 = V_CNDMASK_B32_e64 0, killed %123, 0, killed %128, killed %124, implicit $exec
    %130:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %5, killed %129, implicit $exec
    %131:vgpr_32 = V_ADD_U32_e64 1, %127, 0, implicit $exec
    %132:vgpr_32 = V_CNDMASK_B32_e64 0, killed %127, 0, killed %131, killed %130, implicit $exec
    GLOBAL_STORE_DWORD %238, killed %132, 0, 0, implicit $exec :: (store (s32) into %ir.p1, addrspace 1)
    %8:sreg_32 = S_ADD_I32 %5, 1, implicit-def dead $scc
    %133:vgpr_32 = V_ADD_U32_e64 %5, %0, 0, implicit $exec
    %135:vgpr_32 = V_LSHRREV_B32_e64 24, %133, implicit $exec
    GLOBAL_STORE_BYTE %243, killed %135, 3, 0, implicit $exec :: (store (s8) into %ir.p6 + 3, addrspace 1)
    GLOBAL_STORE_BYTE_D16_HI %243, %133, 2, 0, implicit $exec :: (store (s8) into %ir.p6 + 2, addrspace 1)
    %136:vgpr_32 = V_LSHRREV_B32_e64 8, %133, implicit $exec
    GLOBAL_STORE_BYTE %243, killed %136, 1, 0, implicit $exec :: (store (s8) into %ir.p6 + 1, addrspace 1)
    GLOBAL_STORE_BYTE %243, %133, 0, 0, implicit $exec :: (store (s8) into %ir.p6, addrspace 1)
    %137:sreg_32_xm0 = S_ASHR_I32 %5, 31, implicit-def dead $scc
    %139:sreg_64 = REG_SEQUENCE %5, %subreg.sub0, killed %137, %subreg.sub1
    %141:sreg_64 = nsw S_LSHL_B64 killed %139, 2, implicit-def dead $scc
    %249:vgpr_32, %251:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %242.sub0, %141.sub0, 0, implicit $exec
    %250:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %141.sub1, %242.sub1, killed %251, 0, implicit $exec
    %142:vreg_64 = REG_SEQUENCE killed %249, %subreg.sub0, killed %250, %subreg.sub1
    %143:vgpr_32 = GLOBAL_LOAD_UBYTE %142, 0, 0, implicit $exec :: (load (s8) from %ir.gep, addrspace 1)
    %144:vgpr_32 = GLOBAL_LOAD_UBYTE %142, 1, 0, implicit $exec :: (load (s8) from %ir.gep + 1, addrspace 1)
    %145:vgpr_32 = V_LSHL_OR_B32_e64 killed %144, 8, killed %143, implicit $exec
    %146:vgpr_32 = GLOBAL_LOAD_UBYTE %142, 2, 0, implicit $exec :: (load (s8) from %ir.gep + 2, addrspace 1)
    %147:vgpr_32 = GLOBAL_LOAD_UBYTE killed %142, 3, 0, implicit $exec :: (load (s8) from %ir.gep + 3, addrspace 1)
    %148:vgpr_32 = V_LSHL_OR_B32_e64 killed %147, 8, killed %146, implicit $exec
    %149:vgpr_32 = V_LSHL_OR_B32_e64 killed %148, 16, killed %145, implicit $exec
    %150:vgpr_32 = V_CVT_F32_U32_e64 %149, 0, 0, implicit $mode, implicit $exec
    %151:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %150, 0, 0, implicit $mode, implicit $exec
    %152:vgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept V_MUL_F32_e64 0, 1333788670, 0, killed %151, 0, 0, implicit $mode, implicit $exec
    %153:vgpr_32 = nofpexcept V_CVT_U32_F32_e64 0, killed %152, 0, 0, implicit $mode, implicit $exec
    %155:vgpr_32 = V_SUB_U32_e64 0, %149, 0, implicit $exec
    %156:vgpr_32 = V_MUL_LO_U32_e64 killed %155, %153, implicit $exec
    %157:vgpr_32 = V_MUL_HI_U32_e64 %153, killed %156, implicit $exec
    %158:vgpr_32 = V_ADD_U32_e64 killed %153, killed %157, 0, implicit $exec
    %159:vgpr_32 = V_MUL_HI_U32_e64 %133, %158, implicit $exec
    %160:vgpr_32 = V_MUL_HI_U32_e64 %3, killed %158, implicit $exec
    %161:vgpr_32 = V_MUL_LO_U32_e64 %149, %160, implicit $exec
    %162:vgpr_32 = V_SUB_U32_e64 %133, killed %161, 0, implicit $exec
    %163:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 %162, %149, implicit $exec
    %164:vgpr_32 = V_ADD_U32_e64 1, %159, 0, implicit $exec
    %165:vgpr_32 = V_CNDMASK_B32_e64 0, killed %159, 0, killed %164, %163, implicit $exec
    %166:vgpr_32 = V_NOT_B32_e32 killed %160, implicit $exec
    %236:vreg_64 = REG_SEQUENCE killed %133, %subreg.sub0, undef %237:vgpr_32, %subreg.sub1
    %170:vreg_64, $sgpr_null = V_MAD_U64_U32_e64 %149, killed %166, killed %236, 0, implicit $exec
    %173:vgpr_32 = V_CNDMASK_B32_e64 0, killed %162, 0, killed %170.sub0, killed %163, implicit $exec
    %174:sreg_32_xm0_xexec = V_CMP_GE_U32_e64 killed %173, killed %149, implicit $exec
    %175:vgpr_32 = V_ADD_U32_e64 1, %165, 0, implicit $exec
    %9:vgpr_32 = V_CNDMASK_B32_e64 0, killed %165, 0, killed %175, killed %174, implicit $exec
    %10:sreg_32 = S_ADD_I32 killed %4, -1, implicit-def dead $scc
    %11:vgpr_32 = V_ADD_U32_e64 1, killed %3, 0, implicit $exec
    %177:sreg_32 = V_CMP_GE_U32_e64 %8, %72, implicit $exec
    %12:sreg_32 = SI_IF_BREAK killed %177, killed %2, implicit-def dead $scc
    %244:vgpr_32 = COPY killed %5, implicit $exec
    %245:vgpr_32 = COPY %8, implicit $exec
    SI_LOOP %12, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.2
  
  bb.2:
    successors: %bb.3(0x40000000), %bb.7(0x40000000)
  
    SI_END_CF killed %12, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %179:vgpr_32 = GLOBAL_LOAD_USHORT %240, 0, 0, implicit $exec :: (load (s16) from %ir.p3, addrspace 1)
    %180:vgpr_32 = GLOBAL_LOAD_USHORT killed %240, 2, 0, implicit $exec :: (load (s16) from %ir.p3 + 2, addrspace 1)
    %18:vgpr_32 = V_LSHL_OR_B32_e64 killed %180, 16, killed %179, implicit $exec
    %182:sreg_32 = V_CMP_LT_U32_e64 %18, %0, implicit $exec
    %19:sreg_32 = SI_IF killed %182, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.3
  
  bb.3:
    successors: %bb.8(0x80000000)
  
    %20:vgpr_32 = V_ADD3_U32_e64 %0, %245, -1, implicit $exec
    %21:vgpr_32 = V_ADD_U32_e64 -10, %18, 0, implicit $exec
    %184:sreg_32 = S_MOV_B32 9
    %183:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.8
  
  bb.4:
    successors: %bb.6(0x80000000)
  
    %221:sreg_32 = S_MOV_B32 -1
    %220:sreg_32 = S_MOV_B32 0
    S_BRANCH %bb.6
  
  bb.5:
    successors: %bb.13(0x80000000)
  
    %22:vgpr_32 = PHI %29, %bb.7, %27, %bb.11
    %23:vgpr_32 = PHI %30, %bb.7, %54, %bb.11
    SI_END_CF killed %31, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.13
  
  bb.6:
    successors: %bb.11(0x04000000), %bb.6(0x7c000000)
  
    %24:sreg_32 = PHI %220, %bb.4, %28, %bb.6
    %25:sreg_32 = PHI %221, %bb.4, %26, %bb.6
    %26:sreg_32 = S_ADD_I32 %25, 1, implicit-def dead $scc
    %222:vgpr_32 = GLOBAL_LOAD_USHORT %254, 0, 0, implicit $exec :: (load (s16) from %ir.p4, addrspace 1)
    %223:vgpr_32 = GLOBAL_LOAD_USHORT %254, 2, 0, implicit $exec :: (load (s16) from %ir.p4 + 2, addrspace 1)
    %224:vgpr_32 = V_LSHL_OR_B32_e64 killed %223, 16, killed %222, implicit $exec
    %27:vgpr_32 = V_MUL_LO_U32_e64 killed %224, %26, implicit $exec
    %225:vgpr_32 = V_SUB_U32_e64 %27, %245, 0, implicit $exec
    GLOBAL_STORE_DWORD %256, killed %225, 0, 0, implicit $exec :: (store (s32) into %ir.p2, addrspace 1)
    %226:sreg_32 = S_ADD_I32 killed %25, 2, implicit-def dead $scc
    %227:sreg_32 = V_CMP_GE_U32_e64 killed %226, %258, implicit $exec
    %28:sreg_32 = SI_IF_BREAK killed %227, killed %24, implicit-def dead $scc
    %247:vgpr_32 = COPY %26, implicit $exec
    SI_LOOP %28, %bb.6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.11
  
  bb.7:
    successors: %bb.4(0x40000000), %bb.5(0x40000000)
  
    %29:vgpr_32 = PHI undef %178:vgpr_32, %bb.2, %59, %bb.12
    %30:vgpr_32 = PHI undef %178:vgpr_32, %bb.2, %58, %bb.12
    %252:vgpr_32 = PHI %18, %bb.2, undef %253:vgpr_32, %bb.12
    %254:vreg_64 = PHI %241, %bb.2, undef %255:vreg_64, %bb.12
    %256:vreg_64 = PHI %239, %bb.2, undef %257:vreg_64, %bb.12
    %258:vgpr_32 = PHI %73, %bb.2, undef %259:vgpr_32, %bb.12
    %31:sreg_32 = SI_ELSE killed %19, %bb.5, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.8:
    successors: %bb.9(0x04000000), %bb.8(0x7c000000)
  
    %32:sreg_32 = PHI %183, %bb.3, %38, %bb.8
    %33:vgpr_32 = PHI %21, %bb.3, %37, %bb.8
    %34:sreg_32 = PHI %184, %bb.3, %36, %bb.8
    %35:vgpr_32 = PHI %20, %bb.3, %33, %bb.8
    %36:sreg_32 = nuw S_ADD_I32 %34, 1, implicit-def dead $scc
    %189:sreg_32 = S_ADD_I32 killed %34, 2, implicit-def dead $scc
    %37:vgpr_32 = V_ADD_U32_e64 -1, %33, 0, implicit $exec
    %191:sreg_32 = V_CMP_GE_U32_e64 killed %189, %74, implicit $exec
    %38:sreg_32 = SI_IF_BREAK killed %191, killed %32, implicit-def dead $scc
    %246:vgpr_32 = COPY %36, implicit $exec
    SI_LOOP %38, %bb.8, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.9
  
  bb.9:
    successors: %bb.10(0x80000000)
  
    SI_END_CF killed %38, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    GLOBAL_STORE_DWORD killed %241, killed %33, 0, 0, implicit $exec :: (store (s32) into %ir.p4, addrspace 1)
    %234:vreg_64 = REG_SEQUENCE %35, %subreg.sub0, undef %235:vgpr_32, %subreg.sub1
    %192:sreg_32 = S_MOV_B32 0
  
  bb.10:
    successors: %bb.12(0x04000000), %bb.10(0x7c000000)
  
    %44:sreg_32 = PHI %192, %bb.9, %50, %bb.10
    %45:sreg_32 = PHI %192, %bb.9, %49, %bb.10
    %46:sreg_32 = PHI %192, %bb.9, %48, %bb.10
    %195:vgpr_32 = GLOBAL_LOAD_USHORT %243, 0, 0, implicit $exec :: (load (s16) from %ir.p6, addrspace 1)
    %196:vgpr_32 = GLOBAL_LOAD_USHORT %243, 2, 0, implicit $exec :: (load (s16) from %ir.p6 + 2, addrspace 1)
    %47:vgpr_32 = V_LSHL_OR_B32_e64 killed %196, 16, killed %195, implicit $exec
    %198:vgpr_32 = V_ADD_U32_e64 %46, %6, 0, implicit $exec
    GLOBAL_STORE_DWORD %239, killed %198, 0, 0, implicit $exec :: (store (s32) into %ir.p2, addrspace 1)
    %199:sgpr_32 = S_CVT_F32_U32 %46, implicit $mode
    %200:vgpr_32 = nofpexcept V_RCP_IFLAG_F32_e64 0, killed %199, 0, 0, implicit $mode, implicit $exec
    %203:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %200, implicit $exec
    %202:sgpr_32 = nnan ninf nsz arcp contract afn reassoc nofpexcept S_MUL_F32 killed %203, 1333788670, implicit $mode
    %204:sreg_32 = nofpexcept S_CVT_U32_F32 killed %202, implicit $mode
    %205:sreg_32 = S_MUL_I32 %45, %204
    %206:sreg_32 = S_MUL_HI_U32 %204, killed %205
    %207:sreg_32 = S_ADD_I32 killed %204, killed %206, implicit-def dead $scc
    %208:vgpr_32 = V_MUL_HI_U32_e64 %234.sub0, killed %207, implicit $exec
    %209:vgpr_32 = V_MUL_LO_U32_e64 %208, %46, implicit $exec
    %210:vgpr_32 = V_SUB_U32_e64 %35, killed %209, 0, implicit $exec
    %211:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %46, %210, implicit $exec
    %212:vgpr_32 = V_ADD_U32_e64 1, %208, 0, implicit $exec
    %213:vgpr_32 = V_CNDMASK_B32_e64 0, killed %208, 0, killed %212, %211, implicit $exec
    %214:vgpr_32 = V_SUBREV_U32_e64 %46, %210, 0, implicit $exec
    %215:vgpr_32 = V_CNDMASK_B32_e64 0, killed %210, 0, killed %214, killed %211, implicit $exec
    %216:sreg_32_xm0_xexec = V_CMP_LE_U32_e64 %46, killed %215, implicit $exec
    %217:vgpr_32 = V_ADD_U32_e64 1, %213, 0, implicit $exec
    %218:vgpr_32 = V_CNDMASK_B32_e64 0, killed %213, 0, killed %217, killed %216, implicit $exec
    GLOBAL_STORE_DWORD %242, killed %218, 0, 0, implicit $exec :: (store (s32) into %ir.p5, addrspace 1)
    %48:sreg_32 = S_ADD_I32 %46, 1, implicit-def dead $scc
    %49:sreg_32 = S_ADD_I32 killed %45, -1, implicit-def dead $scc
    %219:sreg_32 = V_CMP_GE_U32_e64 %48, %75, implicit $exec
    %50:sreg_32 = SI_IF_BREAK killed %219, killed %44, implicit-def dead $scc
    %248:vgpr_32 = COPY killed %46, implicit $exec
    SI_LOOP %50, %bb.10, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.12
  
  bb.11:
    successors: %bb.5(0x80000000)
  
    SI_END_CF killed %28, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %54:vgpr_32 = V_MUL_LO_U32_e64 killed %252, killed %247, implicit $exec
    S_BRANCH %bb.5
  
  bb.12:
    successors: %bb.7(0x80000000)
  
    SI_END_CF killed %50, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %58:vgpr_32 = V_MUL_LO_U32_e64 killed %18, killed %246, implicit $exec
    %59:vgpr_32 = V_MUL_LO_U32_e64 killed %47, killed %248, implicit $exec
    S_BRANCH %bb.7
  
  bb.13:
    %228:vgpr_32 = V_MUL_LO_U32_e64 killed %7, killed %244, implicit $exec
    %229:vgpr_32 = V_ADD_U32_e64 killed %0, killed %23, 0, implicit $exec
    %230:vgpr_32 = V_SUB_U32_e64 killed %228, killed %229, 0, implicit $exec
    %231:vgpr_32 = V_ADD_U32_e64 killed %230, killed %22, 0, implicit $exec
    %232:vgpr_32 = V_ADD3_U32_e64 killed %231, killed %76, -100, implicit $exec
    %233:sreg_32_xm0 = V_READFIRSTLANE_B32 killed %232, implicit $exec
    $sgpr0 = COPY killed %233
    SI_RETURN_TO_EPILOG killed $sgpr0
...
---
