# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=amdgpu-next-use -debug-only=amdgpu-next-use %s -o /dev/null 2>&1 | FileCheck %s
# 
# MIR CFG:
#
#       bb.0.entry
#           |
#    bb.1.loop.header<--+
#       /   |           |
#  bb.2.bb1 |           |
#       \   |           |
#      bb.5.Flow        |
#       /   |           |
#  bb.6.bb3 |           |
#       \   |           |
#      bb.3.Flow1       |
#       /   |           |
#  bb.4.bb2 |           |
#       \   |           |
#    bb.7.loop.latch----+
#           |
#       bb.8.exit
#

--- |
  define amdgpu_ps void @test5(ptr addrspace(1) %p1, ptr addrspace(1) %p2, ptr addrspace(1) %p3, i32 %TC) {
  0:
  %ld1 = load i32, ptr addrspace(1) %p1, align 1
  br label %1
  1:
  %phi.inc = phi i32 [ 0, %0 ], [ %inc, %5 ]
  %phi1 = phi i32 [ %ld1, %0 ], [ %phi2, %5 ]
  %cond1 = icmp slt i32 %phi.inc, %ld1
  br i1 %cond1, label %2, label %4
  2:
  %sext = sext i32 %phi.inc to i64
  %gep = getelementptr inbounds i32, ptr addrspace(1) %p2, i64 %sext
  %ld2 = load i32, ptr addrspace(1) %gep, align 4
  %cond2 = icmp sgt i32 %ld2, %ld1
  br i1 %cond2, label %3, label %4
  3:
  store i32 %phi1, ptr addrspace(1) %gep, align 4
  br label %5
  4:
  %div = sdiv i32 %phi1, 2
  br label %5
  5:
  %phi2 = phi i32 [ 1, %3 ], [ %div, %4 ]
  %inc = add i32 %phi.inc, 1
  %cond3 = icmp ult i32 %inc, %TC
  br i1 %cond3, label %1, label %6
  6:
  store i32 %phi2, ptr addrspace(1) %p3, align 4
  ret void
  }
...

---
name:            test5
alignment:       1
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
machineFunctionInfo: {}
body:             |
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5, $vgpr6
  
    %28:vgpr_32 = COPY killed $vgpr6
    %27:vgpr_32 = COPY killed $vgpr5
    %26:vgpr_32 = COPY killed $vgpr4
    %25:vgpr_32 = COPY killed $vgpr3
    %24:vgpr_32 = COPY killed $vgpr2
    %23:vgpr_32 = COPY killed $vgpr1
    %22:vgpr_32 = COPY killed $vgpr0
    %81:vreg_64 = REG_SEQUENCE killed %26, %subreg.sub0, killed %27, %subreg.sub1
    %80:vreg_64 = REG_SEQUENCE killed %24, %subreg.sub0, killed %25, %subreg.sub1
    %79:vreg_64 = REG_SEQUENCE killed %22, %subreg.sub0, killed %23, %subreg.sub1
    %36:vgpr_32 = GLOBAL_LOAD_UBYTE %79, 0, 0, implicit $exec :: (load (s8) from %ir.p1, addrspace 1)
    %38:vgpr_32 = GLOBAL_LOAD_UBYTE %79, 1, 0, implicit $exec :: (load (s8) from %ir.p1 + 1, addrspace 1)
    %41:vgpr_32 = V_LSHL_OR_B32_e64 killed %38, 8, killed %36, implicit $exec
    %42:vgpr_32 = GLOBAL_LOAD_UBYTE %79, 2, 0, implicit $exec :: (load (s8) from %ir.p1 + 2, addrspace 1)
    %44:vgpr_32 = GLOBAL_LOAD_UBYTE killed %79, 3, 0, implicit $exec :: (load (s8) from %ir.p1 + 3, addrspace 1)
    %46:vgpr_32 = V_LSHL_OR_B32_e64 killed %44, 8, killed %42, implicit $exec
    %0:vgpr_32 = V_LSHL_OR_B32_e64 killed %46, 16, killed %41, implicit $exec
    %31:sreg_32 = S_MOV_B32 0
  
  bb.1:
    successors: %bb.2(0x40000000), %bb.5(0x40000000)
  
    %1:sreg_32 = PHI %31, %bb.0, %19, %bb.7
    %2:vreg_64 = PHI undef %32:vreg_64, %bb.0, %12, %bb.7
    %3:sreg_32 = PHI %31, %bb.0, %18, %bb.7
    %4:vgpr_32 = PHI %0, %bb.0, %17, %bb.7
    %49:sreg_32 = V_CMP_GE_I32_e64 %3, %0, implicit $exec
    %50:sreg_32 = V_CMP_LT_I32_e64 %3, %0, implicit $exec
    %6:sreg_32 = SI_IF killed %50, %bb.5, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.2
  
  bb.2:
    successors: %bb.5(0x80000000)
  
    %53:sreg_32_xm0 = S_ASHR_I32 %3, 31, implicit-def dead $scc
    %55:sreg_64 = REG_SEQUENCE %3, %subreg.sub0, killed %53, %subreg.sub1
    %57:sreg_64 = nsw S_LSHL_B64 killed %55, 2, implicit-def dead $scc
    %91:vgpr_32, %93:sreg_32_xm0_xexec = V_ADD_CO_U32_e64 %80.sub0, %57.sub0, 0, implicit $exec
    %92:vgpr_32, dead $sgpr_null = V_ADDC_U32_e64 killed %57.sub1, %80.sub1, killed %93, 0, implicit $exec
    %7:vreg_64 = REG_SEQUENCE killed %91, %subreg.sub0, killed %92, %subreg.sub1
    %58:vgpr_32 = GLOBAL_LOAD_DWORD %7, 0, 0, implicit $exec :: (load (s32) from %ir.gep, addrspace 1)
    %59:sreg_32 = V_CMP_LE_I32_e64 killed %58, %0, implicit $exec
    %85:sreg_32 = COPY $exec_lo
    %88:sreg_32 = S_ANDN2_B32 killed %49, $exec_lo, implicit-def dead $scc
    %89:sreg_32 = S_AND_B32 killed %59, $exec_lo, implicit-def dead $scc
    %87:sreg_32 = S_OR_B32 killed %88, killed %89, implicit-def dead $scc
    S_BRANCH %bb.5
  
  bb.3:
    successors: %bb.4(0x40000000), %bb.7(0x40000000)
  
    %10:sreg_32 = PHI %13, %bb.5, %82, %bb.6
    %9:vgpr_32 = PHI undef %61:vgpr_32, %bb.5, %16, %bb.6
    SI_END_CF killed %15, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %11:sreg_32 = SI_IF killed %10, %bb.7, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.4
  
  bb.4:
    successors: %bb.7(0x80000000)
  
    GLOBAL_STORE_DWORD %12, killed %4, 0, 0, implicit $exec :: (store (s32) into %ir.gep, addrspace 1)
    %70:vgpr_32 = V_MOV_B32_e32 1, implicit $exec
    S_BRANCH %bb.7
  
  bb.5:
    successors: %bb.6(0x40000000), %bb.3(0x40000000)
  
    %14:sreg_32 = PHI %49, %bb.1, %87, %bb.2
    %13:sreg_32 = PHI %31, %bb.1, %85, %bb.2
    %12:vreg_64 = PHI %2, %bb.1, %7, %bb.2
    SI_END_CF killed %6, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %15:sreg_32 = SI_IF killed %14, %bb.3, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.6
  
  bb.6:
    successors: %bb.3(0x80000000)
  
    %65:vgpr_32 = V_LSHRREV_B32_e64 31, %4, implicit $exec
    %66:vgpr_32 = V_ADD_U32_e64 %4, killed %65, 0, implicit $exec
    %16:vgpr_32 = V_ASHRREV_I32_e64 1, killed %66, implicit $exec
    %83:sreg_32 = S_ANDN2_B32 killed %13, $exec_lo, implicit-def dead $scc
    %82:sreg_32 = COPY killed %83
    S_BRANCH %bb.3
  
  bb.7:
    successors: %bb.8(0x04000000), %bb.1(0x7c000000)
  
    %17:vgpr_32 = PHI %9, %bb.3, %70, %bb.4
    SI_END_CF killed %11, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    %18:sreg_32 = S_ADD_I32 killed %3, 1, implicit-def dead $scc
    %72:sreg_32 = V_CMP_GE_U32_e64 %18, %28, implicit $exec
    %19:sreg_32 = SI_IF_BREAK killed %72, killed %1, implicit-def dead $scc
    SI_LOOP %19, %bb.1, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    S_BRANCH %bb.8
  
  bb.8:
    SI_END_CF killed %19, implicit-def dead $exec, implicit-def dead $scc, implicit $exec
    GLOBAL_STORE_DWORD killed %81, killed %17, 0, 0, implicit $exec :: (store (s32) into %ir.p3, addrspace 1)
    S_ENDPGM 0
...
---
