; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx950 --amdgpu-mfma-vgpr-form=1 --greedy-regclass-priority-trumps-globalness=1 < %s | FileCheck  %s

define amdgpu_kernel void @bad_rp(ptr addrspace(3) %in0, ptr addrspace(0) %out, i1 %cond) #0 {
; CHECK-LABEL: bad_rp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_load_dword s0, s[4:5], 0x0
; CHECK-NEXT:    s_load_dword s1, s[4:5], 0x10
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mov_b32_e32 v0, s0
; CHECK-NEXT:    ds_read_b128 a[0:3], v0
; CHECK-NEXT:    ds_read_b128 a[4:7], v0 offset:16
; CHECK-NEXT:    ds_read_b128 a[8:11], v0 offset:32
; CHECK-NEXT:    ds_read_b128 a[12:15], v0 offset:48
; CHECK-NEXT:    ds_read_b128 a[16:19], v0 offset:64
; CHECK-NEXT:    ds_read_b128 a[20:23], v0 offset:80
; CHECK-NEXT:    ds_read_b128 a[24:27], v0 offset:96
; CHECK-NEXT:    ds_read_b128 a[28:31], v0 offset:112
; CHECK-NEXT:    ds_read_b128 a[32:35], v0 offset:128
; CHECK-NEXT:    ds_read_b128 a[36:39], v0 offset:144
; CHECK-NEXT:    ds_read_b128 a[40:43], v0 offset:160
; CHECK-NEXT:    ds_read_b128 a[44:47], v0 offset:176
; CHECK-NEXT:    ds_read_b128 a[48:51], v0 offset:192
; CHECK-NEXT:    ds_read_b128 a[52:55], v0 offset:208
; CHECK-NEXT:    ds_read_b128 a[56:59], v0 offset:224
; CHECK-NEXT:    ds_read_b128 a[60:63], v0 offset:240
; CHECK-NEXT:    s_bitcmp1_b32 s1, 0
; CHECK-NEXT:    s_cselect_b64 s[0:1], -1, 0
; CHECK-NEXT:    s_xor_b64 s[0:1], s[0:1], -1
; CHECK-NEXT:  .LBB0_1: ; %bb.1
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    s_waitcnt lgkmcnt(14)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[240:255], a[0:3], a[0:3], 0
; CHECK-NEXT:    s_andn2_b64 vcc, exec, s[0:1]
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[224:239], a[4:7], a[4:7], v[240:255]
; CHECK-NEXT:    s_waitcnt lgkmcnt(13)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[208:223], a[8:11], a[8:11], v[224:239]
; CHECK-NEXT:    s_waitcnt lgkmcnt(12)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[192:207], a[12:15], a[12:15], v[208:223]
; CHECK-NEXT:    s_waitcnt lgkmcnt(11)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[176:191], a[16:19], a[16:19], v[192:207]
; CHECK-NEXT:    s_waitcnt lgkmcnt(10)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[160:175], a[20:23], a[20:23], v[176:191]
; CHECK-NEXT:    s_waitcnt lgkmcnt(9)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[144:159], a[24:27], a[24:27], v[160:175]
; CHECK-NEXT:    s_waitcnt lgkmcnt(8)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[128:143], a[28:31], a[28:31], v[144:159]
; CHECK-NEXT:    s_waitcnt lgkmcnt(7)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[112:127], a[32:35], a[32:35], v[128:143]
; CHECK-NEXT:    s_waitcnt lgkmcnt(6)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[96:111], a[36:39], a[36:39], v[112:127]
; CHECK-NEXT:    s_waitcnt lgkmcnt(5)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[80:95], a[40:43], a[40:43], v[96:111]
; CHECK-NEXT:    s_waitcnt lgkmcnt(4)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[64:79], a[44:47], a[44:47], v[80:95]
; CHECK-NEXT:    s_waitcnt lgkmcnt(3)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[48:63], a[48:51], a[48:51], v[64:79]
; CHECK-NEXT:    s_waitcnt lgkmcnt(2)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[32:47], a[52:55], a[52:55], v[48:63]
; CHECK-NEXT:    s_waitcnt lgkmcnt(1)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[16:31], a[56:59], a[56:59], v[32:47]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[0:15], a[60:63], a[60:63], v[16:31]
; CHECK-NEXT:    s_cbranch_vccnz .LBB0_1
; CHECK-NEXT:  ; %bb.2: ; %bb.2
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x8
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mov_b64_e32 v[168:169], s[0:1]
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[244:247] offset:16
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[240:243]
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[224:227] offset:32
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[228:231] offset:48
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[208:211] offset:64
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[212:215] offset:80
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[192:195] offset:96
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[196:199] offset:112
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[180:183] offset:144
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[176:179] offset:128
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[160:163] offset:160
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[164:167] offset:176
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[148:151] offset:208
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[156:159] offset:240
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[152:155] offset:224
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[144:147] offset:192
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[140:143] offset:272
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[136:139] offset:256
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[132:135] offset:240
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[128:131] offset:224
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[124:127] offset:304
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[120:123] offset:288
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[116:119] offset:272
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[112:115] offset:256
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[108:111] offset:336
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[104:107] offset:320
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[100:103] offset:304
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[96:99] offset:288
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[92:95] offset:368
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[88:91] offset:352
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[84:87] offset:336
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[80:83] offset:320
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[76:79] offset:400
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[72:75] offset:384
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[68:71] offset:368
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[64:67] offset:352
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[60:63] offset:432
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[56:59] offset:416
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[52:55] offset:400
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[48:51] offset:384
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[44:47] offset:464
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[40:43] offset:448
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[36:39] offset:432
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[32:35] offset:416
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[28:31] offset:496
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[24:27] offset:480
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[20:23] offset:464
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[16:19] offset:448
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[12:15] offset:528
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[8:11] offset:512
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[4:7] offset:496
; CHECK-NEXT:    flat_store_dwordx4 v[168:169], v[0:3] offset:480
; CHECK-NEXT:    s_endpgm
  %gep1 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 4
  %gep2 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 8
  %gep3 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 12
  %gep4 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 16
  %gep5 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 20
  %gep6 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 24
  %gep7 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 28
  %gep8 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 32
  %gep9 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 36
  %gep10 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 40
  %gep11 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 44
  %gep12 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 48
  %gep13 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 52
  %gep14 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 56
  %gep15 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 60
  %load0 = load <8 x half>, ptr addrspace(3) %in0, align 16
  %load1 = load <8 x half>, ptr addrspace(3) %gep1, align 16
  %load2 = load <8 x half>, ptr addrspace(3) %gep2, align 16
  %load3 = load <8 x half>, ptr addrspace(3) %gep3, align 16
  %load4 = load <8 x half>, ptr addrspace(3) %gep4, align 16
  %load5 = load <8 x half>, ptr addrspace(3) %gep5, align 16
  %load6 = load <8 x half>, ptr addrspace(3) %gep6, align 16
  %load7 = load <8 x half>, ptr addrspace(3) %gep7, align 16
  %load8 = load <8 x half>, ptr addrspace(3) %gep8, align 16
  %load9 = load <8 x half>, ptr addrspace(3) %gep9, align 16
  %load10 = load <8 x half>, ptr addrspace(3) %gep10, align 16
  %load11 = load <8 x half>, ptr addrspace(3) %gep11, align 16
  %load12 = load <8 x half>, ptr addrspace(3) %gep12, align 16
  %load13 = load <8 x half>, ptr addrspace(3) %gep13, align 16
  %load14 = load <8 x half>, ptr addrspace(3) %gep14, align 16
  %load15 = load <8 x half>, ptr addrspace(3) %gep15, align 16
  br label %bb.1

bb.1:
  %mfma0 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load0, <8 x half> %load0, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %mfma1 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load1, <8 x half> %load1, <16 x float> %mfma0, i32 0, i32 0, i32 0)
  %mfma2 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load2, <8 x half> %load2, <16 x float> %mfma1, i32 0, i32 0, i32 0)
  %mfma3 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load3, <8 x half> %load3, <16 x float> %mfma2, i32 0, i32 0, i32 0)
  %mfma4 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load4, <8 x half> %load4, <16 x float> %mfma3, i32 0, i32 0, i32 0)
  %mfma5 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load5, <8 x half> %load5, <16 x float> %mfma4, i32 0, i32 0, i32 0)
  %mfma6 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load6, <8 x half> %load6, <16 x float> %mfma5, i32 0, i32 0, i32 0)
  %mfma7 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load7, <8 x half> %load7, <16 x float> %mfma6, i32 0, i32 0, i32 0)
  %mfma8 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load8, <8 x half> %load8, <16 x float> %mfma7, i32 0, i32 0, i32 0)
  %mfma9 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load9, <8 x half> %load9, <16 x float> %mfma8, i32 0, i32 0, i32 0)
  %mfma10 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load10, <8 x half> %load10, <16 x float> %mfma9, i32 0, i32 0, i32 0)
  %mfma11 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load11, <8 x half> %load11, <16 x float> %mfma10, i32 0, i32 0, i32 0)
  %mfma12 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load12, <8 x half> %load12, <16 x float> %mfma11, i32 0, i32 0, i32 0)
  %mfma13 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load13, <8 x half> %load13, <16 x float> %mfma12, i32 0, i32 0, i32 0)
  %mfma14 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load14, <8 x half> %load14, <16 x float> %mfma13, i32 0, i32 0, i32 0)
  %mfma15 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load15, <8 x half> %load15, <16 x float> %mfma14, i32 0, i32 0, i32 0)
  br i1 %cond, label %bb.1, label %bb.2

bb.2:
  %out1 = getelementptr ptr, ptr %out, i32 4
  %out2 = getelementptr ptr, ptr %out, i32 8
  %out3 = getelementptr ptr, ptr %out, i32 12
  %out4 = getelementptr ptr, ptr %out, i32 16
  %out5 = getelementptr ptr, ptr %out, i32 20
  %out6 = getelementptr ptr, ptr %out, i32 24
  %out7 = getelementptr ptr, ptr %out, i32 28
  %out8 = getelementptr ptr, ptr %out, i32 32
  %out9 = getelementptr ptr, ptr %out, i32 36
  %out10 = getelementptr ptr, ptr %out, i32 40
  %out11 = getelementptr ptr, ptr %out, i32 44
  %out12 = getelementptr ptr, ptr %out, i32 48
  %out13 = getelementptr ptr, ptr %out, i32 52
  %out14 = getelementptr ptr, ptr %out, i32 56
  %out15 = getelementptr ptr, ptr %out, i32 60
  store <16 x float> %mfma0, ptr addrspace(0) %out
  store <16 x float> %mfma1, ptr addrspace(0) %out1
  store <16 x float> %mfma2, ptr addrspace(0) %out2
  store <16 x float> %mfma3, ptr addrspace(0) %out3
  store <16 x float> %mfma4, ptr addrspace(0) %out4
  store <16 x float> %mfma5, ptr addrspace(0) %out5
  store <16 x float> %mfma6, ptr addrspace(0) %out6
  store <16 x float> %mfma7, ptr addrspace(0) %out7
  store <16 x float> %mfma8, ptr addrspace(0) %out8
  store <16 x float> %mfma9, ptr addrspace(0) %out9
  store <16 x float> %mfma10, ptr addrspace(0) %out10
  store <16 x float> %mfma11, ptr addrspace(0) %out11
  store <16 x float> %mfma12, ptr addrspace(0) %out12
  store <16 x float> %mfma13, ptr addrspace(0) %out13
  store <16 x float> %mfma14, ptr addrspace(0) %out14
  store <16 x float> %mfma15, ptr addrspace(0) %out15
  ret void
}

define amdgpu_kernel void @good_rp(ptr addrspace(3) %in0, ptr addrspace(0) %out, i1 %cond) #0 {
; CHECK-LABEL: good_rp:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    s_load_dword s0, s[4:5], 0x10
; CHECK-NEXT:    s_load_dword s1, s[4:5], 0x0
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    s_bitcmp1_b32 s0, 0
; CHECK-NEXT:    v_mov_b32_e32 v0, s1
; CHECK-NEXT:    ds_read_b128 v[176:179], v0
; CHECK-NEXT:    ds_read_b128 v[180:183], v0 offset:16
; CHECK-NEXT:    ds_read_b128 v[184:187], v0 offset:32
; CHECK-NEXT:    ds_read_b128 v[188:191], v0 offset:48
; CHECK-NEXT:    ds_read_b128 v[192:195], v0 offset:64
; CHECK-NEXT:    ds_read_b128 v[196:199], v0 offset:80
; CHECK-NEXT:    ds_read_b128 v[200:203], v0 offset:96
; CHECK-NEXT:    ds_read_b128 v[204:207], v0 offset:112
; CHECK-NEXT:    ds_read_b128 v[208:211], v0 offset:128
; CHECK-NEXT:    ds_read_b128 v[212:215], v0 offset:144
; CHECK-NEXT:    ds_read_b128 v[216:219], v0 offset:160
; CHECK-NEXT:    s_cselect_b64 s[0:1], -1, 0
; CHECK-NEXT:    s_xor_b64 s[0:1], s[0:1], -1
; CHECK-NEXT:    v_cndmask_b32_e64 v0, 0, 1, s[0:1]
; CHECK-NEXT:    v_cmp_ne_u32_e64 s[0:1], 1, v0
; CHECK-NEXT:  .LBB1_1: ; %bb.1
; CHECK-NEXT:    ; =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    s_waitcnt lgkmcnt(10)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[160:175], v[176:179], v[176:179], 0
; CHECK-NEXT:    s_and_b64 vcc, exec, s[0:1]
; CHECK-NEXT:    s_waitcnt lgkmcnt(9)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[144:159], v[180:183], v[180:183], v[160:175]
; CHECK-NEXT:    s_waitcnt lgkmcnt(8)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[128:143], v[184:187], v[184:187], v[144:159]
; CHECK-NEXT:    s_waitcnt lgkmcnt(7)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[112:127], v[188:191], v[188:191], v[128:143]
; CHECK-NEXT:    s_waitcnt lgkmcnt(6)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[96:111], v[192:195], v[192:195], v[112:127]
; CHECK-NEXT:    s_waitcnt lgkmcnt(5)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[80:95], v[196:199], v[196:199], v[96:111]
; CHECK-NEXT:    s_waitcnt lgkmcnt(4)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[64:79], v[200:203], v[200:203], v[80:95]
; CHECK-NEXT:    s_waitcnt lgkmcnt(3)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[48:63], v[204:207], v[204:207], v[64:79]
; CHECK-NEXT:    s_waitcnt lgkmcnt(2)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[32:47], v[208:211], v[208:211], v[48:63]
; CHECK-NEXT:    s_waitcnt lgkmcnt(1)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[16:31], v[212:215], v[212:215], v[32:47]
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mfma_f32_32x32x16_f16 v[0:15], v[216:219], v[216:219], v[16:31]
; CHECK-NEXT:    s_cbranch_vccnz .LBB1_1
; CHECK-NEXT:  ; %bb.2: ; %bb.2
; CHECK-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x8
; CHECK-NEXT:    s_waitcnt lgkmcnt(0)
; CHECK-NEXT:    v_mov_b64_e32 v[88:89], s[0:1]
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[164:167] offset:16
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[160:163]
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[144:147] offset:32
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[148:151] offset:48
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[128:131] offset:64
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[132:135] offset:80
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[112:115] offset:96
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[116:119] offset:112
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[100:103] offset:144
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[96:99] offset:128
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[80:83] offset:160
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[84:87] offset:176
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[68:71] offset:208
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[76:79] offset:240
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[72:75] offset:224
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[64:67] offset:192
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[60:63] offset:272
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[56:59] offset:256
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[52:55] offset:240
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[48:51] offset:224
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[44:47] offset:304
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[40:43] offset:288
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[36:39] offset:272
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[32:35] offset:256
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[28:31] offset:336
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[24:27] offset:320
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[20:23] offset:304
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[16:19] offset:288
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[12:15] offset:368
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[8:11] offset:352
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[4:7] offset:336
; CHECK-NEXT:    flat_store_dwordx4 v[88:89], v[0:3] offset:320
; CHECK-NEXT:    s_endpgm
  %gep1 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 4
  %gep2 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 8
  %gep3 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 12
  %gep4 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 16
  %gep5 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 20
  %gep6 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 24
  %gep7 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 28
  %gep8 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 32
  %gep9 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 36
  %gep10 = getelementptr ptr addrspace(3), ptr addrspace(3) %in0, i32 40
  %load0 = load <8 x half>, ptr addrspace(3) %in0, align 16
  %load1 = load <8 x half>, ptr addrspace(3) %gep1, align 16
  %load2 = load <8 x half>, ptr addrspace(3) %gep2, align 16
  %load3 = load <8 x half>, ptr addrspace(3) %gep3, align 16
  %load4 = load <8 x half>, ptr addrspace(3) %gep4, align 16
  %load5 = load <8 x half>, ptr addrspace(3) %gep5, align 16
  %load6 = load <8 x half>, ptr addrspace(3) %gep6, align 16
  %load7 = load <8 x half>, ptr addrspace(3) %gep7, align 16
  %load8 = load <8 x half>, ptr addrspace(3) %gep8, align 16
  %load9 = load <8 x half>, ptr addrspace(3) %gep9, align 16
  %load10 = load <8 x half>, ptr addrspace(3) %gep10, align 16
  br label %bb.1

bb.1:
  %mfma0 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load0, <8 x half> %load0, <16 x float> zeroinitializer, i32 0, i32 0, i32 0)
  %mfma1 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load1, <8 x half> %load1, <16 x float> %mfma0, i32 0, i32 0, i32 0)
  %mfma2 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load2, <8 x half> %load2, <16 x float> %mfma1, i32 0, i32 0, i32 0)
  %mfma3 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load3, <8 x half> %load3, <16 x float> %mfma2, i32 0, i32 0, i32 0)
  %mfma4 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load4, <8 x half> %load4, <16 x float> %mfma3, i32 0, i32 0, i32 0)
  %mfma5 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load5, <8 x half> %load5, <16 x float> %mfma4, i32 0, i32 0, i32 0)
  %mfma6 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load6, <8 x half> %load6, <16 x float> %mfma5, i32 0, i32 0, i32 0)
  %mfma7 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load7, <8 x half> %load7, <16 x float> %mfma6, i32 0, i32 0, i32 0)
  %mfma8 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load8, <8 x half> %load8, <16 x float> %mfma7, i32 0, i32 0, i32 0)
  %mfma9 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load9, <8 x half> %load9, <16 x float> %mfma8, i32 0, i32 0, i32 0)
  %mfma10 = tail call <16 x float> @llvm.amdgcn.mfma.f32.32x32x16.f16(<8 x half> %load10, <8 x half> %load10, <16 x float> %mfma9, i32 0, i32 0, i32 0)
  br i1 %cond, label %bb.1, label %bb.2

bb.2:
  %out1 = getelementptr ptr, ptr %out, i32 4
  %out2 = getelementptr ptr, ptr %out, i32 8
  %out3 = getelementptr ptr, ptr %out, i32 12
  %out4 = getelementptr ptr, ptr %out, i32 16
  %out5 = getelementptr ptr, ptr %out, i32 20
  %out6 = getelementptr ptr, ptr %out, i32 24
  %out7 = getelementptr ptr, ptr %out, i32 28
  %out8 = getelementptr ptr, ptr %out, i32 32
  %out9 = getelementptr ptr, ptr %out, i32 36
  %out10 = getelementptr ptr, ptr %out, i32 40
  store <16 x float> %mfma0, ptr addrspace(0) %out
  store <16 x float> %mfma1, ptr addrspace(0) %out1
  store <16 x float> %mfma2, ptr addrspace(0) %out2
  store <16 x float> %mfma3, ptr addrspace(0) %out3
  store <16 x float> %mfma4, ptr addrspace(0) %out4
  store <16 x float> %mfma5, ptr addrspace(0) %out5
  store <16 x float> %mfma6, ptr addrspace(0) %out6
  store <16 x float> %mfma7, ptr addrspace(0) %out7
  store <16 x float> %mfma8, ptr addrspace(0) %out8
  store <16 x float> %mfma9, ptr addrspace(0) %out9
  store <16 x float> %mfma10, ptr addrspace(0) %out10
  ret void
}

attributes #0 = { "amdgpu-flat-work-group-size"="64,64" "amdgpu-waves-per-eu"="1" }
