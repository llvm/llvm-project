; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefixes=GCN,SICIVI,SICI,SI %s
; RUN: llc -mtriple=amdgcn -mcpu=bonaire < %s | FileCheck -check-prefixes=GCN,SICIVI,SICI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefixes=GCN,SICIVI,VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefixes=GCN,GFX9 %s

define amdgpu_vs float @load_i32(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_i32:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dword s0, s[0:1], 0x0
; SICI-NEXT:    s_load_dword s1, s[2:3], 0x2
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    s_add_i32 s0, s0, s1
; SICI-NEXT:    v_mov_b32_e32 v0, s0
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_i32:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dword s0, s[0:1], 0x0
; VI-NEXT:    s_load_dword s1, s[2:3], 0x8
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    s_add_i32 s0, s0, s1
; VI-NEXT:    v_mov_b32_e32 v0, s0
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dword s4, s[0:1], 0x0
; GFX9-NEXT:    s_load_dword s5, s[2:3], 0x8
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_add_i32 s4, s4, s5
; GFX9-NEXT:    v_mov_b32_e32 v0, s4
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds i32, ptr addrspace(6) %p1, i32 2
  %r0 = load i32, ptr addrspace(6) %p0
  %r1 = load i32, ptr addrspace(6) %gep1
  %r = add i32 %r0, %r1
  %r2 = bitcast i32 %r to float
  ret float %r2
}

define amdgpu_vs <2 x float> @load_v2i32(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v2i32:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x0
; SICI-NEXT:    s_load_dwordx2 s[2:3], s[2:3], 0x4
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    s_add_i32 s0, s0, s2
; SICI-NEXT:    s_add_i32 s1, s1, s3
; SICI-NEXT:    v_mov_b32_e32 v0, s0
; SICI-NEXT:    v_mov_b32_e32 v1, s1
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v2i32:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x0
; VI-NEXT:    s_load_dwordx2 s[2:3], s[2:3], 0x10
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    s_add_i32 s0, s0, s2
; VI-NEXT:    s_add_i32 s1, s1, s3
; VI-NEXT:    v_mov_b32_e32 v0, s0
; VI-NEXT:    v_mov_b32_e32 v1, s1
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v2i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx2 s[4:5], s[0:1], 0x0
; GFX9-NEXT:    s_load_dwordx2 s[6:7], s[2:3], 0x10
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_add_i32 s0, s4, s6
; GFX9-NEXT:    s_add_i32 s1, s5, s7
; GFX9-NEXT:    v_mov_b32_e32 v0, s0
; GFX9-NEXT:    v_mov_b32_e32 v1, s1
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <2 x i32>, ptr addrspace(6) %p1, i32 2
  %r0 = load <2 x i32>, ptr addrspace(6) %p0
  %r1 = load <2 x i32>, ptr addrspace(6) %gep1
  %r = add <2 x i32> %r0, %r1
  %r2 = bitcast <2 x i32> %r to <2 x float>
  ret <2 x float> %r2
}

define amdgpu_vs <4 x float> @load_v4i32(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v4i32:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s5, 0
; SICI-NEXT:    s_mov_b32 s4, s1
; SICI-NEXT:    s_mov_b32 s1, s5
; SICI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; SICI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x8
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    s_add_i32 s0, s0, s4
; SICI-NEXT:    s_add_i32 s1, s1, s5
; SICI-NEXT:    s_add_i32 s2, s2, s6
; SICI-NEXT:    s_add_i32 s3, s3, s7
; SICI-NEXT:    v_mov_b32_e32 v0, s0
; SICI-NEXT:    v_mov_b32_e32 v1, s1
; SICI-NEXT:    v_mov_b32_e32 v2, s2
; SICI-NEXT:    v_mov_b32_e32 v3, s3
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v4i32:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s5, 0
; VI-NEXT:    s_mov_b32 s4, s1
; VI-NEXT:    s_mov_b32 s1, s5
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; VI-NEXT:    s_load_dwordx4 s[4:7], s[4:5], 0x20
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    s_add_i32 s0, s0, s4
; VI-NEXT:    s_add_i32 s1, s1, s5
; VI-NEXT:    s_add_i32 s2, s2, s6
; VI-NEXT:    s_add_i32 s3, s3, s7
; VI-NEXT:    v_mov_b32_e32 v0, s0
; VI-NEXT:    v_mov_b32_e32 v1, s1
; VI-NEXT:    v_mov_b32_e32 v2, s2
; VI-NEXT:    v_mov_b32_e32 v3, s3
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v4i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx4 s[4:7], s[0:1], 0x0
; GFX9-NEXT:    s_load_dwordx4 s[8:11], s[2:3], 0x20
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_add_i32 s0, s4, s8
; GFX9-NEXT:    s_add_i32 s1, s5, s9
; GFX9-NEXT:    s_add_i32 s2, s6, s10
; GFX9-NEXT:    s_add_i32 s3, s7, s11
; GFX9-NEXT:    v_mov_b32_e32 v0, s0
; GFX9-NEXT:    v_mov_b32_e32 v1, s1
; GFX9-NEXT:    v_mov_b32_e32 v2, s2
; GFX9-NEXT:    v_mov_b32_e32 v3, s3
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <4 x i32>, ptr addrspace(6) %p1, i32 2
  %r0 = load <4 x i32>, ptr addrspace(6) %p0
  %r1 = load <4 x i32>, ptr addrspace(6) %gep1
  %r = add <4 x i32> %r0, %r1
  %r2 = bitcast <4 x i32> %r to <4 x float>
  ret <4 x float> %r2
}

define amdgpu_vs <8 x float> @load_v8i32(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v8i32:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx8 s[4:11], s[2:3], 0x10
; SICI-NEXT:    s_load_dwordx8 s[12:19], s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    s_add_i32 s0, s12, s4
; SICI-NEXT:    s_add_i32 s1, s13, s5
; SICI-NEXT:    s_add_i32 s2, s14, s6
; SICI-NEXT:    s_add_i32 s3, s15, s7
; SICI-NEXT:    s_add_i32 s4, s16, s8
; SICI-NEXT:    s_add_i32 s5, s17, s9
; SICI-NEXT:    s_add_i32 s6, s18, s10
; SICI-NEXT:    s_add_i32 s7, s19, s11
; SICI-NEXT:    v_mov_b32_e32 v0, s0
; SICI-NEXT:    v_mov_b32_e32 v1, s1
; SICI-NEXT:    v_mov_b32_e32 v2, s2
; SICI-NEXT:    v_mov_b32_e32 v3, s3
; SICI-NEXT:    v_mov_b32_e32 v4, s4
; SICI-NEXT:    v_mov_b32_e32 v5, s5
; SICI-NEXT:    v_mov_b32_e32 v6, s6
; SICI-NEXT:    v_mov_b32_e32 v7, s7
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v8i32:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx8 s[4:11], s[2:3], 0x40
; VI-NEXT:    s_load_dwordx8 s[12:19], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    s_add_i32 s0, s12, s4
; VI-NEXT:    s_add_i32 s1, s13, s5
; VI-NEXT:    s_add_i32 s2, s14, s6
; VI-NEXT:    s_add_i32 s3, s15, s7
; VI-NEXT:    s_add_i32 s4, s16, s8
; VI-NEXT:    s_add_i32 s5, s17, s9
; VI-NEXT:    s_add_i32 s6, s18, s10
; VI-NEXT:    s_add_i32 s7, s19, s11
; VI-NEXT:    v_mov_b32_e32 v0, s0
; VI-NEXT:    v_mov_b32_e32 v1, s1
; VI-NEXT:    v_mov_b32_e32 v2, s2
; VI-NEXT:    v_mov_b32_e32 v3, s3
; VI-NEXT:    v_mov_b32_e32 v4, s4
; VI-NEXT:    v_mov_b32_e32 v5, s5
; VI-NEXT:    v_mov_b32_e32 v6, s6
; VI-NEXT:    v_mov_b32_e32 v7, s7
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v8i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx8 s[4:11], s[2:3], 0x40
; GFX9-NEXT:    s_load_dwordx8 s[12:19], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_add_i32 s0, s12, s4
; GFX9-NEXT:    s_add_i32 s1, s13, s5
; GFX9-NEXT:    s_add_i32 s2, s14, s6
; GFX9-NEXT:    s_add_i32 s3, s15, s7
; GFX9-NEXT:    s_add_i32 s4, s16, s8
; GFX9-NEXT:    s_add_i32 s5, s17, s9
; GFX9-NEXT:    s_add_i32 s6, s18, s10
; GFX9-NEXT:    s_add_i32 s7, s19, s11
; GFX9-NEXT:    v_mov_b32_e32 v0, s0
; GFX9-NEXT:    v_mov_b32_e32 v1, s1
; GFX9-NEXT:    v_mov_b32_e32 v2, s2
; GFX9-NEXT:    v_mov_b32_e32 v3, s3
; GFX9-NEXT:    v_mov_b32_e32 v4, s4
; GFX9-NEXT:    v_mov_b32_e32 v5, s5
; GFX9-NEXT:    v_mov_b32_e32 v6, s6
; GFX9-NEXT:    v_mov_b32_e32 v7, s7
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <8 x i32>, ptr addrspace(6) %p1, i32 2
  %r0 = load <8 x i32>, ptr addrspace(6) %p0
  %r1 = load <8 x i32>, ptr addrspace(6) %gep1
  %r = add <8 x i32> %r0, %r1
  %r2 = bitcast <8 x i32> %r to <8 x float>
  ret <8 x float> %r2
}

define amdgpu_vs <16 x float> @load_v16i32(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v16i32:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx16 s[4:19], s[2:3], 0x20
; SICI-NEXT:    s_load_dwordx16 s[36:51], s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    s_add_i32 s0, s36, s4
; SICI-NEXT:    s_add_i32 s1, s37, s5
; SICI-NEXT:    s_add_i32 s2, s38, s6
; SICI-NEXT:    s_add_i32 s3, s39, s7
; SICI-NEXT:    s_add_i32 s4, s40, s8
; SICI-NEXT:    s_add_i32 s5, s41, s9
; SICI-NEXT:    s_add_i32 s6, s42, s10
; SICI-NEXT:    s_add_i32 s7, s43, s11
; SICI-NEXT:    s_add_i32 s8, s44, s12
; SICI-NEXT:    s_add_i32 s9, s45, s13
; SICI-NEXT:    s_add_i32 s10, s46, s14
; SICI-NEXT:    s_add_i32 s11, s47, s15
; SICI-NEXT:    s_add_i32 s12, s48, s16
; SICI-NEXT:    s_add_i32 s13, s49, s17
; SICI-NEXT:    s_add_i32 s14, s50, s18
; SICI-NEXT:    s_add_i32 s15, s51, s19
; SICI-NEXT:    v_mov_b32_e32 v0, s0
; SICI-NEXT:    v_mov_b32_e32 v1, s1
; SICI-NEXT:    v_mov_b32_e32 v2, s2
; SICI-NEXT:    v_mov_b32_e32 v3, s3
; SICI-NEXT:    v_mov_b32_e32 v4, s4
; SICI-NEXT:    v_mov_b32_e32 v5, s5
; SICI-NEXT:    v_mov_b32_e32 v6, s6
; SICI-NEXT:    v_mov_b32_e32 v7, s7
; SICI-NEXT:    v_mov_b32_e32 v8, s8
; SICI-NEXT:    v_mov_b32_e32 v9, s9
; SICI-NEXT:    v_mov_b32_e32 v10, s10
; SICI-NEXT:    v_mov_b32_e32 v11, s11
; SICI-NEXT:    v_mov_b32_e32 v12, s12
; SICI-NEXT:    v_mov_b32_e32 v13, s13
; SICI-NEXT:    v_mov_b32_e32 v14, s14
; SICI-NEXT:    v_mov_b32_e32 v15, s15
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v16i32:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx16 s[4:19], s[2:3], 0x80
; VI-NEXT:    s_load_dwordx16 s[36:51], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    s_add_i32 s0, s36, s4
; VI-NEXT:    s_add_i32 s1, s37, s5
; VI-NEXT:    s_add_i32 s2, s38, s6
; VI-NEXT:    s_add_i32 s3, s39, s7
; VI-NEXT:    s_add_i32 s4, s40, s8
; VI-NEXT:    s_add_i32 s5, s41, s9
; VI-NEXT:    s_add_i32 s6, s42, s10
; VI-NEXT:    s_add_i32 s7, s43, s11
; VI-NEXT:    s_add_i32 s8, s44, s12
; VI-NEXT:    s_add_i32 s9, s45, s13
; VI-NEXT:    s_add_i32 s10, s46, s14
; VI-NEXT:    s_add_i32 s11, s47, s15
; VI-NEXT:    s_add_i32 s12, s48, s16
; VI-NEXT:    s_add_i32 s13, s49, s17
; VI-NEXT:    s_add_i32 s14, s50, s18
; VI-NEXT:    s_add_i32 s15, s51, s19
; VI-NEXT:    v_mov_b32_e32 v0, s0
; VI-NEXT:    v_mov_b32_e32 v1, s1
; VI-NEXT:    v_mov_b32_e32 v2, s2
; VI-NEXT:    v_mov_b32_e32 v3, s3
; VI-NEXT:    v_mov_b32_e32 v4, s4
; VI-NEXT:    v_mov_b32_e32 v5, s5
; VI-NEXT:    v_mov_b32_e32 v6, s6
; VI-NEXT:    v_mov_b32_e32 v7, s7
; VI-NEXT:    v_mov_b32_e32 v8, s8
; VI-NEXT:    v_mov_b32_e32 v9, s9
; VI-NEXT:    v_mov_b32_e32 v10, s10
; VI-NEXT:    v_mov_b32_e32 v11, s11
; VI-NEXT:    v_mov_b32_e32 v12, s12
; VI-NEXT:    v_mov_b32_e32 v13, s13
; VI-NEXT:    v_mov_b32_e32 v14, s14
; VI-NEXT:    v_mov_b32_e32 v15, s15
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v16i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx16 s[4:19], s[2:3], 0x80
; GFX9-NEXT:    s_load_dwordx16 s[36:51], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_add_i32 s0, s36, s4
; GFX9-NEXT:    s_add_i32 s1, s37, s5
; GFX9-NEXT:    s_add_i32 s2, s38, s6
; GFX9-NEXT:    s_add_i32 s3, s39, s7
; GFX9-NEXT:    s_add_i32 s4, s40, s8
; GFX9-NEXT:    s_add_i32 s5, s41, s9
; GFX9-NEXT:    s_add_i32 s6, s42, s10
; GFX9-NEXT:    s_add_i32 s7, s43, s11
; GFX9-NEXT:    s_add_i32 s8, s44, s12
; GFX9-NEXT:    s_add_i32 s9, s45, s13
; GFX9-NEXT:    s_add_i32 s10, s46, s14
; GFX9-NEXT:    s_add_i32 s11, s47, s15
; GFX9-NEXT:    s_add_i32 s12, s48, s16
; GFX9-NEXT:    s_add_i32 s13, s49, s17
; GFX9-NEXT:    s_add_i32 s14, s50, s18
; GFX9-NEXT:    s_add_i32 s15, s51, s19
; GFX9-NEXT:    v_mov_b32_e32 v0, s0
; GFX9-NEXT:    v_mov_b32_e32 v1, s1
; GFX9-NEXT:    v_mov_b32_e32 v2, s2
; GFX9-NEXT:    v_mov_b32_e32 v3, s3
; GFX9-NEXT:    v_mov_b32_e32 v4, s4
; GFX9-NEXT:    v_mov_b32_e32 v5, s5
; GFX9-NEXT:    v_mov_b32_e32 v6, s6
; GFX9-NEXT:    v_mov_b32_e32 v7, s7
; GFX9-NEXT:    v_mov_b32_e32 v8, s8
; GFX9-NEXT:    v_mov_b32_e32 v9, s9
; GFX9-NEXT:    v_mov_b32_e32 v10, s10
; GFX9-NEXT:    v_mov_b32_e32 v11, s11
; GFX9-NEXT:    v_mov_b32_e32 v12, s12
; GFX9-NEXT:    v_mov_b32_e32 v13, s13
; GFX9-NEXT:    v_mov_b32_e32 v14, s14
; GFX9-NEXT:    v_mov_b32_e32 v15, s15
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <16 x i32>, ptr addrspace(6) %p1, i32 2
  %r0 = load <16 x i32>, ptr addrspace(6) %p0
  %r1 = load <16 x i32>, ptr addrspace(6) %gep1
  %r = add <16 x i32> %r0, %r1
  %r2 = bitcast <16 x i32> %r to <16 x float>
  ret <16 x float> %r2
}

define amdgpu_vs float @load_float(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_float:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dword s2, s[2:3], 0x2
; SICI-NEXT:    s_load_dword s0, s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    v_mov_b32_e32 v0, s2
; SICI-NEXT:    v_add_f32_e32 v0, s0, v0
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_float:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dword s2, s[2:3], 0x8
; VI-NEXT:    s_load_dword s0, s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    v_mov_b32_e32 v0, s2
; VI-NEXT:    v_add_f32_e32 v0, s0, v0
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_float:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dword s4, s[2:3], 0x8
; GFX9-NEXT:    s_load_dword s5, s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v0, s4
; GFX9-NEXT:    v_add_f32_e32 v0, s5, v0
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds float, ptr addrspace(6) %p1, i32 2
  %r0 = load float, ptr addrspace(6) %p0
  %r1 = load float, ptr addrspace(6) %gep1
  %r = fadd float %r0, %r1
  ret float %r
}

define amdgpu_vs <2 x float> @load_v2float(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v2float:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_load_dwordx2 s[4:5], s[2:3], 0x4
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    v_mov_b32_e32 v0, s4
; SICI-NEXT:    v_mov_b32_e32 v1, s5
; SICI-NEXT:    v_add_f32_e32 v0, s0, v0
; SICI-NEXT:    v_add_f32_e32 v1, s1, v1
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v2float:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_load_dwordx2 s[4:5], s[2:3], 0x10
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    v_mov_b32_e32 v0, s4
; VI-NEXT:    v_mov_b32_e32 v1, s5
; VI-NEXT:    v_add_f32_e32 v0, s0, v0
; VI-NEXT:    v_add_f32_e32 v1, s1, v1
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v2float:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_load_dwordx2 s[4:5], s[2:3], 0x10
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx2 s[0:1], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v0, s4
; GFX9-NEXT:    v_mov_b32_e32 v1, s5
; GFX9-NEXT:    v_add_f32_e32 v0, s0, v0
; GFX9-NEXT:    v_add_f32_e32 v1, s1, v1
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <2 x float>, ptr addrspace(6) %p1, i32 2
  %r0 = load <2 x float>, ptr addrspace(6) %p0
  %r1 = load <2 x float>, ptr addrspace(6) %gep1
  %r = fadd <2 x float> %r0, %r1
  ret <2 x float> %r
}

define amdgpu_vs <4 x float> @load_v4float(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v4float:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_load_dwordx4 s[4:7], s[2:3], 0x8
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    v_mov_b32_e32 v0, s4
; SICI-NEXT:    v_mov_b32_e32 v1, s5
; SICI-NEXT:    v_mov_b32_e32 v2, s6
; SICI-NEXT:    v_mov_b32_e32 v3, s7
; SICI-NEXT:    v_add_f32_e32 v0, s0, v0
; SICI-NEXT:    v_add_f32_e32 v1, s1, v1
; SICI-NEXT:    v_add_f32_e32 v2, s2, v2
; SICI-NEXT:    v_add_f32_e32 v3, s3, v3
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v4float:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_load_dwordx4 s[4:7], s[2:3], 0x20
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    v_mov_b32_e32 v0, s4
; VI-NEXT:    v_mov_b32_e32 v1, s5
; VI-NEXT:    v_mov_b32_e32 v2, s6
; VI-NEXT:    v_mov_b32_e32 v3, s7
; VI-NEXT:    v_add_f32_e32 v0, s0, v0
; VI-NEXT:    v_add_f32_e32 v1, s1, v1
; VI-NEXT:    v_add_f32_e32 v2, s2, v2
; VI-NEXT:    v_add_f32_e32 v3, s3, v3
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v4float:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_load_dwordx4 s[4:7], s[2:3], 0x20
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v0, s4
; GFX9-NEXT:    v_mov_b32_e32 v1, s5
; GFX9-NEXT:    v_mov_b32_e32 v2, s6
; GFX9-NEXT:    v_mov_b32_e32 v3, s7
; GFX9-NEXT:    v_add_f32_e32 v0, s0, v0
; GFX9-NEXT:    v_add_f32_e32 v1, s1, v1
; GFX9-NEXT:    v_add_f32_e32 v2, s2, v2
; GFX9-NEXT:    v_add_f32_e32 v3, s3, v3
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <4 x float>, ptr addrspace(6) %p1, i32 2
  %r0 = load <4 x float>, ptr addrspace(6) %p0
  %r1 = load <4 x float>, ptr addrspace(6) %gep1
  %r = fadd <4 x float> %r0, %r1
  ret <4 x float> %r
}

define amdgpu_vs <8 x float> @load_v8float(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v8float:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx8 s[4:11], s[2:3], 0x10
; SICI-NEXT:    s_load_dwordx8 s[12:19], s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    v_mov_b32_e32 v0, s4
; SICI-NEXT:    v_mov_b32_e32 v1, s5
; SICI-NEXT:    v_mov_b32_e32 v2, s6
; SICI-NEXT:    v_mov_b32_e32 v3, s7
; SICI-NEXT:    v_mov_b32_e32 v4, s8
; SICI-NEXT:    v_mov_b32_e32 v5, s9
; SICI-NEXT:    v_mov_b32_e32 v6, s10
; SICI-NEXT:    v_mov_b32_e32 v7, s11
; SICI-NEXT:    v_add_f32_e32 v0, s12, v0
; SICI-NEXT:    v_add_f32_e32 v1, s13, v1
; SICI-NEXT:    v_add_f32_e32 v2, s14, v2
; SICI-NEXT:    v_add_f32_e32 v3, s15, v3
; SICI-NEXT:    v_add_f32_e32 v4, s16, v4
; SICI-NEXT:    v_add_f32_e32 v5, s17, v5
; SICI-NEXT:    v_add_f32_e32 v6, s18, v6
; SICI-NEXT:    v_add_f32_e32 v7, s19, v7
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v8float:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx8 s[4:11], s[2:3], 0x40
; VI-NEXT:    s_load_dwordx8 s[12:19], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    v_mov_b32_e32 v0, s4
; VI-NEXT:    v_mov_b32_e32 v1, s5
; VI-NEXT:    v_mov_b32_e32 v2, s6
; VI-NEXT:    v_mov_b32_e32 v3, s7
; VI-NEXT:    v_mov_b32_e32 v4, s8
; VI-NEXT:    v_mov_b32_e32 v5, s9
; VI-NEXT:    v_mov_b32_e32 v6, s10
; VI-NEXT:    v_mov_b32_e32 v7, s11
; VI-NEXT:    v_add_f32_e32 v0, s12, v0
; VI-NEXT:    v_add_f32_e32 v1, s13, v1
; VI-NEXT:    v_add_f32_e32 v2, s14, v2
; VI-NEXT:    v_add_f32_e32 v3, s15, v3
; VI-NEXT:    v_add_f32_e32 v4, s16, v4
; VI-NEXT:    v_add_f32_e32 v5, s17, v5
; VI-NEXT:    v_add_f32_e32 v6, s18, v6
; VI-NEXT:    v_add_f32_e32 v7, s19, v7
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v8float:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx8 s[4:11], s[2:3], 0x40
; GFX9-NEXT:    s_load_dwordx8 s[12:19], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v0, s4
; GFX9-NEXT:    v_mov_b32_e32 v1, s5
; GFX9-NEXT:    v_mov_b32_e32 v2, s6
; GFX9-NEXT:    v_mov_b32_e32 v3, s7
; GFX9-NEXT:    v_mov_b32_e32 v4, s8
; GFX9-NEXT:    v_mov_b32_e32 v5, s9
; GFX9-NEXT:    v_mov_b32_e32 v6, s10
; GFX9-NEXT:    v_mov_b32_e32 v7, s11
; GFX9-NEXT:    v_add_f32_e32 v0, s12, v0
; GFX9-NEXT:    v_add_f32_e32 v1, s13, v1
; GFX9-NEXT:    v_add_f32_e32 v2, s14, v2
; GFX9-NEXT:    v_add_f32_e32 v3, s15, v3
; GFX9-NEXT:    v_add_f32_e32 v4, s16, v4
; GFX9-NEXT:    v_add_f32_e32 v5, s17, v5
; GFX9-NEXT:    v_add_f32_e32 v6, s18, v6
; GFX9-NEXT:    v_add_f32_e32 v7, s19, v7
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <8 x float>, ptr addrspace(6) %p1, i32 2
  %r0 = load <8 x float>, ptr addrspace(6) %p0
  %r1 = load <8 x float>, ptr addrspace(6) %gep1
  %r = fadd <8 x float> %r0, %r1
  ret <8 x float> %r
}

define amdgpu_vs <16 x float> @load_v16float(ptr addrspace(6) inreg %p0, ptr addrspace(6) inreg %p1) #0 {
; SICI-LABEL: load_v16float:
; SICI:       ; %bb.0:
; SICI-NEXT:    s_mov_b32 s3, 0
; SICI-NEXT:    s_mov_b32 s2, s1
; SICI-NEXT:    s_mov_b32 s1, s3
; SICI-NEXT:    s_load_dwordx16 s[16:31], s[2:3], 0x20
; SICI-NEXT:    s_load_dwordx16 s[0:15], s[0:1], 0x0
; SICI-NEXT:    s_waitcnt lgkmcnt(0)
; SICI-NEXT:    v_mov_b32_e32 v0, s16
; SICI-NEXT:    v_mov_b32_e32 v1, s17
; SICI-NEXT:    v_mov_b32_e32 v2, s18
; SICI-NEXT:    v_mov_b32_e32 v3, s19
; SICI-NEXT:    v_mov_b32_e32 v4, s20
; SICI-NEXT:    v_mov_b32_e32 v5, s21
; SICI-NEXT:    v_mov_b32_e32 v6, s22
; SICI-NEXT:    v_mov_b32_e32 v7, s23
; SICI-NEXT:    v_mov_b32_e32 v8, s24
; SICI-NEXT:    v_mov_b32_e32 v9, s25
; SICI-NEXT:    v_mov_b32_e32 v10, s26
; SICI-NEXT:    v_mov_b32_e32 v11, s27
; SICI-NEXT:    v_mov_b32_e32 v12, s28
; SICI-NEXT:    v_mov_b32_e32 v13, s29
; SICI-NEXT:    v_mov_b32_e32 v14, s30
; SICI-NEXT:    v_mov_b32_e32 v15, s31
; SICI-NEXT:    v_add_f32_e32 v0, s0, v0
; SICI-NEXT:    v_add_f32_e32 v1, s1, v1
; SICI-NEXT:    v_add_f32_e32 v2, s2, v2
; SICI-NEXT:    v_add_f32_e32 v3, s3, v3
; SICI-NEXT:    v_add_f32_e32 v4, s4, v4
; SICI-NEXT:    v_add_f32_e32 v5, s5, v5
; SICI-NEXT:    v_add_f32_e32 v6, s6, v6
; SICI-NEXT:    v_add_f32_e32 v7, s7, v7
; SICI-NEXT:    v_add_f32_e32 v8, s8, v8
; SICI-NEXT:    v_add_f32_e32 v9, s9, v9
; SICI-NEXT:    v_add_f32_e32 v10, s10, v10
; SICI-NEXT:    v_add_f32_e32 v11, s11, v11
; SICI-NEXT:    v_add_f32_e32 v12, s12, v12
; SICI-NEXT:    v_add_f32_e32 v13, s13, v13
; SICI-NEXT:    v_add_f32_e32 v14, s14, v14
; SICI-NEXT:    v_add_f32_e32 v15, s15, v15
; SICI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_v16float:
; VI:       ; %bb.0:
; VI-NEXT:    s_mov_b32 s3, 0
; VI-NEXT:    s_mov_b32 s2, s1
; VI-NEXT:    s_mov_b32 s1, s3
; VI-NEXT:    s_load_dwordx16 s[16:31], s[2:3], 0x80
; VI-NEXT:    s_load_dwordx16 s[0:15], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    v_mov_b32_e32 v0, s16
; VI-NEXT:    v_mov_b32_e32 v1, s17
; VI-NEXT:    v_mov_b32_e32 v2, s18
; VI-NEXT:    v_mov_b32_e32 v3, s19
; VI-NEXT:    v_mov_b32_e32 v4, s20
; VI-NEXT:    v_mov_b32_e32 v5, s21
; VI-NEXT:    v_mov_b32_e32 v6, s22
; VI-NEXT:    v_mov_b32_e32 v7, s23
; VI-NEXT:    v_mov_b32_e32 v8, s24
; VI-NEXT:    v_mov_b32_e32 v9, s25
; VI-NEXT:    v_mov_b32_e32 v10, s26
; VI-NEXT:    v_mov_b32_e32 v11, s27
; VI-NEXT:    v_mov_b32_e32 v12, s28
; VI-NEXT:    v_mov_b32_e32 v13, s29
; VI-NEXT:    v_mov_b32_e32 v14, s30
; VI-NEXT:    v_mov_b32_e32 v15, s31
; VI-NEXT:    v_add_f32_e32 v0, s0, v0
; VI-NEXT:    v_add_f32_e32 v1, s1, v1
; VI-NEXT:    v_add_f32_e32 v2, s2, v2
; VI-NEXT:    v_add_f32_e32 v3, s3, v3
; VI-NEXT:    v_add_f32_e32 v4, s4, v4
; VI-NEXT:    v_add_f32_e32 v5, s5, v5
; VI-NEXT:    v_add_f32_e32 v6, s6, v6
; VI-NEXT:    v_add_f32_e32 v7, s7, v7
; VI-NEXT:    v_add_f32_e32 v8, s8, v8
; VI-NEXT:    v_add_f32_e32 v9, s9, v9
; VI-NEXT:    v_add_f32_e32 v10, s10, v10
; VI-NEXT:    v_add_f32_e32 v11, s11, v11
; VI-NEXT:    v_add_f32_e32 v12, s12, v12
; VI-NEXT:    v_add_f32_e32 v13, s13, v13
; VI-NEXT:    v_add_f32_e32 v14, s14, v14
; VI-NEXT:    v_add_f32_e32 v15, s15, v15
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_v16float:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_mov_b32 s2, s1
; GFX9-NEXT:    s_mov_b32 s3, 0
; GFX9-NEXT:    s_mov_b32 s1, s3
; GFX9-NEXT:    s_load_dwordx16 s[36:51], s[2:3], 0x80
; GFX9-NEXT:    s_load_dwordx16 s[4:19], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    v_mov_b32_e32 v0, s36
; GFX9-NEXT:    v_mov_b32_e32 v1, s37
; GFX9-NEXT:    v_mov_b32_e32 v2, s38
; GFX9-NEXT:    v_mov_b32_e32 v3, s39
; GFX9-NEXT:    v_mov_b32_e32 v4, s40
; GFX9-NEXT:    v_mov_b32_e32 v5, s41
; GFX9-NEXT:    v_mov_b32_e32 v6, s42
; GFX9-NEXT:    v_mov_b32_e32 v7, s43
; GFX9-NEXT:    v_mov_b32_e32 v8, s44
; GFX9-NEXT:    v_mov_b32_e32 v9, s45
; GFX9-NEXT:    v_mov_b32_e32 v10, s46
; GFX9-NEXT:    v_mov_b32_e32 v11, s47
; GFX9-NEXT:    v_mov_b32_e32 v12, s48
; GFX9-NEXT:    v_mov_b32_e32 v13, s49
; GFX9-NEXT:    v_mov_b32_e32 v14, s50
; GFX9-NEXT:    v_mov_b32_e32 v15, s51
; GFX9-NEXT:    v_add_f32_e32 v0, s4, v0
; GFX9-NEXT:    v_add_f32_e32 v1, s5, v1
; GFX9-NEXT:    v_add_f32_e32 v2, s6, v2
; GFX9-NEXT:    v_add_f32_e32 v3, s7, v3
; GFX9-NEXT:    v_add_f32_e32 v4, s8, v4
; GFX9-NEXT:    v_add_f32_e32 v5, s9, v5
; GFX9-NEXT:    v_add_f32_e32 v6, s10, v6
; GFX9-NEXT:    v_add_f32_e32 v7, s11, v7
; GFX9-NEXT:    v_add_f32_e32 v8, s12, v8
; GFX9-NEXT:    v_add_f32_e32 v9, s13, v9
; GFX9-NEXT:    v_add_f32_e32 v10, s14, v10
; GFX9-NEXT:    v_add_f32_e32 v11, s15, v11
; GFX9-NEXT:    v_add_f32_e32 v12, s16, v12
; GFX9-NEXT:    v_add_f32_e32 v13, s17, v13
; GFX9-NEXT:    v_add_f32_e32 v14, s18, v14
; GFX9-NEXT:    v_add_f32_e32 v15, s19, v15
; GFX9-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr inbounds <16 x float>, ptr addrspace(6) %p1, i32 2
  %r0 = load <16 x float>, ptr addrspace(6) %p0
  %r1 = load <16 x float>, ptr addrspace(6) %gep1
  %r = fadd <16 x float> %r0, %r1
  ret <16 x float> %r
}

define amdgpu_vs i32 @load_i32_hi0(ptr addrspace(6) inreg %p) #1 {
; GCN-LABEL: load_i32_hi0:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_mov_b32 s1, 0
; GCN-NEXT:    s_load_dword s0, s[0:1], 0x0
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    ; return to shader part epilog
  %r0 = load i32, ptr addrspace(6) %p
  ret i32 %r0
}

define amdgpu_vs i32 @load_i32_hi1(ptr addrspace(6) inreg %p) #2 {
; GCN-LABEL: load_i32_hi1:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_mov_b32 s1, 1
; GCN-NEXT:    s_load_dword s0, s[0:1], 0x0
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    ; return to shader part epilog
  %r0 = load i32, ptr addrspace(6) %p
  ret i32 %r0
}

define amdgpu_vs i32 @load_i32_hiffff8000(ptr addrspace(6) inreg %p) #3 {
; GCN-LABEL: load_i32_hiffff8000:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_movk_i32 s1, 0x8000
; GCN-NEXT:    s_load_dword s0, s[0:1], 0x0
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    ; return to shader part epilog
  %r0 = load i32, ptr addrspace(6) %p
  ret i32 %r0
}

define amdgpu_vs i32 @load_i32_hifffffff0(ptr addrspace(6) inreg %p) #4 {
; GCN-LABEL: load_i32_hifffffff0:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_mov_b32 s1, -16
; GCN-NEXT:    s_load_dword s0, s[0:1], 0x0
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    ; return to shader part epilog
  %r0 = load i32, ptr addrspace(6) %p
  ret i32 %r0
}

define amdgpu_ps <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> @load_sampler(ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), float inreg, i32 inreg, <2 x i32>, <2 x i32>, <2 x i32>, <3 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, float, float, i32, i32, float, i32) #5 {
; SI-LABEL: load_sampler:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b64 s[6:7], exec
; SI-NEXT:    s_wqm_b64 exec, exec
; SI-NEXT:    s_mov_b32 m0, s5
; SI-NEXT:    v_interp_mov_f32 v0, p0, attr0.x
; SI-NEXT:    v_lshlrev_b32_e32 v0, 6, v0
; SI-NEXT:    v_add_i32_e32 v0, vcc, s1, v0
; SI-NEXT:    v_readfirstlane_b32 s0, v0
; SI-NEXT:    s_mov_b32 s1, 0
; SI-NEXT:    s_nop 2
; SI-NEXT:    s_load_dwordx8 s[8:15], s[0:1], 0x0
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0xc
; SI-NEXT:    v_mov_b32_e32 v0, 0
; SI-NEXT:    s_and_b64 exec, exec, s[6:7]
; SI-NEXT:    s_waitcnt lgkmcnt(0)
; SI-NEXT:    image_sample v[0:3], v0, s[8:15], s[0:3] dmask:0xf
; SI-NEXT:    s_waitcnt vmcnt(0)
; SI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_sampler:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b64 s[6:7], exec
; VI-NEXT:    s_wqm_b64 exec, exec
; VI-NEXT:    s_mov_b32 m0, s5
; VI-NEXT:    v_interp_mov_f32_e32 v0, p0, attr0.x
; VI-NEXT:    v_lshlrev_b32_e32 v0, 6, v0
; VI-NEXT:    v_add_u32_e32 v0, vcc, s1, v0
; VI-NEXT:    v_readfirstlane_b32 s0, v0
; VI-NEXT:    s_mov_b32 s1, 0
; VI-NEXT:    s_load_dwordx8 s[8:15], s[0:1], 0x0
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x30
; VI-NEXT:    v_mov_b32_e32 v0, 0
; VI-NEXT:    s_and_b64 exec, exec, s[6:7]
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    image_sample v[0:3], v0, s[8:15], s[0:3] dmask:0xf
; VI-NEXT:    s_waitcnt vmcnt(0)
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_sampler:
; GFX9:       ; %bb.0: ; %main_body
; GFX9-NEXT:    s_mov_b64 s[6:7], exec
; GFX9-NEXT:    s_wqm_b64 exec, exec
; GFX9-NEXT:    s_mov_b32 m0, s5
; GFX9-NEXT:    s_mov_b32 s17, 0
; GFX9-NEXT:    v_interp_mov_f32_e32 v0, p0, attr0.x
; GFX9-NEXT:    v_lshl_add_u32 v0, v0, 6, s1
; GFX9-NEXT:    v_readfirstlane_b32 s16, v0
; GFX9-NEXT:    s_load_dwordx8 s[8:15], s[16:17], 0x0
; GFX9-NEXT:    s_load_dwordx4 s[0:3], s[16:17], 0x30
; GFX9-NEXT:    v_mov_b32_e32 v0, 0
; GFX9-NEXT:    s_and_b64 exec, exec, s[6:7]
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    image_sample v[0:3], v0, s[8:15], s[0:3] dmask:0xf
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    ; return to shader part epilog
main_body:
  %22 = call nsz float @llvm.amdgcn.interp.mov(i32 2, i32 0, i32 0, i32 %5) #8
  %23 = bitcast float %22 to i32
  %24 = shl i32 %23, 1
  %25 = getelementptr inbounds [0 x <8 x i32>], ptr addrspace(6) %1, i32 0, i32 %24, !amdgpu.uniform !0
  %26 = load <8 x i32>, ptr addrspace(6) %25, align 32, !invariant.load !0
  %27 = shl i32 %23, 2
  %28 = getelementptr [0 x <4 x i32>], ptr addrspace(6) %1, i32 0, i32 %27, !amdgpu.uniform !0
  %29 = getelementptr inbounds [0 x <4 x i32>], ptr addrspace(6) %28, i32 0, i32 3, !amdgpu.uniform !0
  %30 = load <4 x i32>, ptr addrspace(6) %29, align 16, !invariant.load !0
  %31 = call nsz <4 x float> @llvm.amdgcn.image.sample.1d.v4f32.f32(i32 15, float 0.0, <8 x i32> %26, <4 x i32> %30, i1 0, i32 0, i32 0) #8
  %32 = extractelement <4 x float> %31, i32 0
  %33 = extractelement <4 x float> %31, i32 1
  %34 = extractelement <4 x float> %31, i32 2
  %35 = extractelement <4 x float> %31, i32 3
  %36 = bitcast float %4 to i32
  %37 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> poison, i32 %36, 4
  %38 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %37, float %32, 5
  %39 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %38, float %33, 6
  %40 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %39, float %34, 7
  %41 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %40, float %35, 8
  %42 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %41, float %20, 19
  ret <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %42
}

define amdgpu_ps <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> @load_sampler_nouniform(ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), ptr addrspace(6) inreg noalias dereferenceable(18446744073709551615), float inreg, i32 inreg, <2 x i32>, <2 x i32>, <2 x i32>, <3 x i32>, <2 x i32>, <2 x i32>, <2 x i32>, float, float, float, float, float, i32, i32, float, i32) #5 {
; SI-LABEL: load_sampler_nouniform:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    s_mov_b64 s[6:7], exec
; SI-NEXT:    s_wqm_b64 exec, exec
; SI-NEXT:    s_mov_b32 m0, s5
; SI-NEXT:    v_interp_mov_f32 v0, p0, attr0.x
; SI-NEXT:    v_lshlrev_b32_e32 v0, 6, v0
; SI-NEXT:    v_add_i32_e32 v0, vcc, s1, v0
; SI-NEXT:    v_readfirstlane_b32 s0, v0
; SI-NEXT:    s_mov_b32 s1, 0
; SI-NEXT:    s_nop 2
; SI-NEXT:    s_load_dwordx8 s[8:15], s[0:1], 0x0
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0xc
; SI-NEXT:    v_mov_b32_e32 v0, 0
; SI-NEXT:    s_and_b64 exec, exec, s[6:7]
; SI-NEXT:    s_waitcnt lgkmcnt(0)
; SI-NEXT:    image_sample v[0:3], v0, s[8:15], s[0:3] dmask:0xf
; SI-NEXT:    s_waitcnt vmcnt(0)
; SI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: load_sampler_nouniform:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    s_mov_b64 s[6:7], exec
; VI-NEXT:    s_wqm_b64 exec, exec
; VI-NEXT:    s_mov_b32 m0, s5
; VI-NEXT:    v_interp_mov_f32_e32 v0, p0, attr0.x
; VI-NEXT:    v_lshlrev_b32_e32 v0, 6, v0
; VI-NEXT:    v_add_u32_e32 v0, vcc, s1, v0
; VI-NEXT:    v_readfirstlane_b32 s0, v0
; VI-NEXT:    s_mov_b32 s1, 0
; VI-NEXT:    s_load_dwordx8 s[8:15], s[0:1], 0x0
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x30
; VI-NEXT:    v_mov_b32_e32 v0, 0
; VI-NEXT:    s_and_b64 exec, exec, s[6:7]
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    image_sample v[0:3], v0, s[8:15], s[0:3] dmask:0xf
; VI-NEXT:    s_waitcnt vmcnt(0)
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: load_sampler_nouniform:
; GFX9:       ; %bb.0: ; %main_body
; GFX9-NEXT:    s_mov_b64 s[6:7], exec
; GFX9-NEXT:    s_wqm_b64 exec, exec
; GFX9-NEXT:    s_mov_b32 m0, s5
; GFX9-NEXT:    s_mov_b32 s17, 0
; GFX9-NEXT:    v_interp_mov_f32_e32 v0, p0, attr0.x
; GFX9-NEXT:    v_lshl_add_u32 v0, v0, 6, s1
; GFX9-NEXT:    v_readfirstlane_b32 s16, v0
; GFX9-NEXT:    s_load_dwordx8 s[8:15], s[16:17], 0x0
; GFX9-NEXT:    s_load_dwordx4 s[0:3], s[16:17], 0x30
; GFX9-NEXT:    v_mov_b32_e32 v0, 0
; GFX9-NEXT:    s_and_b64 exec, exec, s[6:7]
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    image_sample v[0:3], v0, s[8:15], s[0:3] dmask:0xf
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    ; return to shader part epilog
main_body:
  %22 = call nsz float @llvm.amdgcn.interp.mov(i32 2, i32 0, i32 0, i32 %5) #8
  %23 = bitcast float %22 to i32
  %24 = shl i32 %23, 1
  %25 = getelementptr inbounds [0 x <8 x i32>], ptr addrspace(6) %1, i32 0, i32 %24
  %26 = load <8 x i32>, ptr addrspace(6) %25, align 32, !invariant.load !0
  %27 = shl i32 %23, 2
  %28 = getelementptr [0 x <4 x i32>], ptr addrspace(6) %1, i32 0, i32 %27
  %29 = getelementptr inbounds [0 x <4 x i32>], ptr addrspace(6) %28, i32 0, i32 3
  %30 = load <4 x i32>, ptr addrspace(6) %29, align 16, !invariant.load !0
  %31 = call nsz <4 x float> @llvm.amdgcn.image.sample.1d.v4f32.f32(i32 15, float 0.0, <8 x i32> %26, <4 x i32> %30, i1 0, i32 0, i32 0) #8
  %32 = extractelement <4 x float> %31, i32 0
  %33 = extractelement <4 x float> %31, i32 1
  %34 = extractelement <4 x float> %31, i32 2
  %35 = extractelement <4 x float> %31, i32 3
  %36 = bitcast float %4 to i32
  %37 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> poison, i32 %36, 4
  %38 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %37, float %32, 5
  %39 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %38, float %33, 6
  %40 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %39, float %34, 7
  %41 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %40, float %35, 8
  %42 = insertvalue <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %41, float %20, 19
  ret <{ i32, i32, i32, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float }> %42
}

define amdgpu_vs float @load_addr_no_fold(ptr addrspace(6) inreg noalias %p0) #0 {
; GCN-LABEL: load_addr_no_fold:
; GCN:       ; %bb.0:
; GCN-NEXT:    s_add_i32 s0, s0, 4
; GCN-NEXT:    s_mov_b32 s1, 0
; GCN-NEXT:    s_load_dword s0, s[0:1], 0x0
; GCN-NEXT:    s_waitcnt lgkmcnt(0)
; GCN-NEXT:    v_mov_b32_e32 v0, s0
; GCN-NEXT:    ; return to shader part epilog
  %gep1 = getelementptr i32, ptr addrspace(6) %p0, i32 1
  %r1 = load i32, ptr addrspace(6) %gep1
  %r2 = bitcast i32 %r1 to float
  ret float %r2
}

define amdgpu_vs float @vgpr_arg_src(ptr addrspace(6) %arg) {
; SI-LABEL: vgpr_arg_src:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_readfirstlane_b32 s0, v0
; SI-NEXT:    s_mov_b32 s1, 0
; SI-NEXT:    s_nop 2
; SI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; SI-NEXT:    s_waitcnt lgkmcnt(0)
; SI-NEXT:    buffer_load_format_x v0, v0, s[0:3], 0 idxen
; SI-NEXT:    s_waitcnt vmcnt(0)
; SI-NEXT:    ; return to shader part epilog
;
; VI-LABEL: vgpr_arg_src:
; VI:       ; %bb.0: ; %main_body
; VI-NEXT:    v_readfirstlane_b32 s0, v0
; VI-NEXT:    s_mov_b32 s1, 0
; VI-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; VI-NEXT:    s_waitcnt lgkmcnt(0)
; VI-NEXT:    s_nop 1
; VI-NEXT:    buffer_load_format_x v0, v0, s[0:3], 0 idxen
; VI-NEXT:    s_waitcnt vmcnt(0)
; VI-NEXT:    ; return to shader part epilog
;
; GFX9-LABEL: vgpr_arg_src:
; GFX9:       ; %bb.0: ; %main_body
; GFX9-NEXT:    v_readfirstlane_b32 s0, v0
; GFX9-NEXT:    s_mov_b32 s1, 0
; GFX9-NEXT:    s_load_dwordx4 s[0:3], s[0:1], 0x0
; GFX9-NEXT:    s_waitcnt lgkmcnt(0)
; GFX9-NEXT:    s_nop 1
; GFX9-NEXT:    buffer_load_format_x v0, v0, s[0:3], 0 idxen
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    ; return to shader part epilog
main_body:
  %tmp9 = load ptr addrspace(8), ptr addrspace(6) %arg
  %tmp10 = call nsz float @llvm.amdgcn.struct.ptr.buffer.load.format.f32(ptr addrspace(8) %tmp9, i32 poison, i32 0, i32 0, i32 0) #1
  ret float %tmp10
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.amdgcn.interp.mov(i32, i32, i32, i32) #6

; Function Attrs: nounwind readonly
declare <4 x float> @llvm.amdgcn.image.sample.1d.v4f32.f32(i32, float, <8 x i32>, <4 x i32>, i1, i32, i32) #7

declare float @llvm.amdgcn.struct.ptr.buffer.load.format.f32(ptr addrspace(8), i32, i32, i32, i32) #7

!0 = !{}

attributes #0 = { nounwind }
attributes #1 = { nounwind "amdgpu-32bit-address-high-bits"="0" }
attributes #2 = { nounwind "amdgpu-32bit-address-high-bits"="1" }
attributes #3 = { nounwind "amdgpu-32bit-address-high-bits"="0xffff8000" }
attributes #4 = { nounwind "amdgpu-32bit-address-high-bits"="0xfffffff0" }
attributes #5 = { "InitialPSInputAddr"="45175" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind memory(argmem: read) }
attributes #8 = { nounwind readnone }
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; SICIVI: {{.*}}
