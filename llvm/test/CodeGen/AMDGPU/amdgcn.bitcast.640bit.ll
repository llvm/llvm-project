; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define <20 x float> @bitcast_v20i32_to_v20f32(<20 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v20i32_to_v20f32:
; VI-LABEL: bitcast_v20i32_to_v20f32:
; GFX9-LABEL: bitcast_v20i32_to_v20f32:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v20f32:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v20f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define inreg <20 x float> @bitcast_v20i32_to_v20f32_scalar(<20 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20i32_to_v20f32_scalar:
; VI-LABEL: bitcast_v20i32_to_v20f32_scalar:
; GFX9-LABEL: bitcast_v20i32_to_v20f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v20f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v20f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define <20 x i32> @bitcast_v20f32_to_v20i32(<20 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v20f32_to_v20i32:
; VI-LABEL: bitcast_v20f32_to_v20i32:
; GFX9-LABEL: bitcast_v20f32_to_v20i32:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v20i32:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v20i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define inreg <20 x i32> @bitcast_v20f32_to_v20i32_scalar(<20 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20f32_to_v20i32_scalar:
; VI-LABEL: bitcast_v20f32_to_v20i32_scalar:
; GFX9-LABEL: bitcast_v20f32_to_v20i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v20i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v20i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define <10 x i64> @bitcast_v20i32_to_v10i64(<20 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v20i32_to_v10i64:
; VI-LABEL: bitcast_v20i32_to_v10i64:
; GFX9-LABEL: bitcast_v20i32_to_v10i64:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v10i64:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v10i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define inreg <10 x i64> @bitcast_v20i32_to_v10i64_scalar(<20 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20i32_to_v10i64_scalar:
; VI-LABEL: bitcast_v20i32_to_v10i64_scalar:
; GFX9-LABEL: bitcast_v20i32_to_v10i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v10i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v10i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define <20 x i32> @bitcast_v10i64_to_v20i32(<10 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v10i64_to_v20i32:
; VI-LABEL: bitcast_v10i64_to_v20i32:
; GFX9-LABEL: bitcast_v10i64_to_v20i32:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v20i32:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v20i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define inreg <20 x i32> @bitcast_v10i64_to_v20i32_scalar(<10 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10i64_to_v20i32_scalar:
; VI-LABEL: bitcast_v10i64_to_v20i32_scalar:
; GFX9-LABEL: bitcast_v10i64_to_v20i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v20i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v20i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define <10 x double> @bitcast_v20i32_to_v10f64(<20 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v20i32_to_v10f64:
; VI-LABEL: bitcast_v20i32_to_v10f64:
; GFX9-LABEL: bitcast_v20i32_to_v10f64:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v10f64:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v10f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define inreg <10 x double> @bitcast_v20i32_to_v10f64_scalar(<20 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20i32_to_v10f64_scalar:
; VI-LABEL: bitcast_v20i32_to_v10f64_scalar:
; GFX9-LABEL: bitcast_v20i32_to_v10f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v10f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v10f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define <20 x i32> @bitcast_v10f64_to_v20i32(<10 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v10f64_to_v20i32:
; VI-LABEL: bitcast_v10f64_to_v20i32:
; GFX9-LABEL: bitcast_v10f64_to_v20i32:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v20i32:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v20i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define inreg <20 x i32> @bitcast_v10f64_to_v20i32_scalar(<10 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10f64_to_v20i32_scalar:
; VI-LABEL: bitcast_v10f64_to_v20i32_scalar:
; GFX9-LABEL: bitcast_v10f64_to_v20i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v20i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v20i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define <40 x i16> @bitcast_v20i32_to_v40i16(<20 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v20i32_to_v40i16:
; VI-LABEL: bitcast_v20i32_to_v40i16:
; GFX9-LABEL: bitcast_v20i32_to_v40i16:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v40i16:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v40i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define inreg <40 x i16> @bitcast_v20i32_to_v40i16_scalar(<20 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20i32_to_v40i16_scalar:
; VI-LABEL: bitcast_v20i32_to_v40i16_scalar:
; GFX9-LABEL: bitcast_v20i32_to_v40i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v40i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v40i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define <20 x i32> @bitcast_v40i16_to_v20i32(<40 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v40i16_to_v20i32:
; VI-LABEL: bitcast_v40i16_to_v20i32:
; GFX9-LABEL: bitcast_v40i16_to_v20i32:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v20i32:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v20i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define inreg <20 x i32> @bitcast_v40i16_to_v20i32_scalar(<40 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40i16_to_v20i32_scalar:
; VI-LABEL: bitcast_v40i16_to_v20i32_scalar:
; GFX9-LABEL: bitcast_v40i16_to_v20i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v20i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v20i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define <40 x half> @bitcast_v20i32_to_v40f16(<20 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v20i32_to_v40f16:
; VI-LABEL: bitcast_v20i32_to_v40f16:
; GFX9-LABEL: bitcast_v20i32_to_v40f16:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v40f16:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v40f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define inreg <40 x half> @bitcast_v20i32_to_v40f16_scalar(<20 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20i32_to_v40f16_scalar:
; VI-LABEL: bitcast_v20i32_to_v40f16_scalar:
; GFX9-LABEL: bitcast_v20i32_to_v40f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20i32_to_v40f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20i32_to_v40f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <20 x i32> %a, splat (i32 3)
  %a2 = bitcast <20 x i32> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <20 x i32> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define <20 x i32> @bitcast_v40f16_to_v20i32(<40 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v40f16_to_v20i32:
; VI-LABEL: bitcast_v40f16_to_v20i32:
; GFX9-LABEL: bitcast_v40f16_to_v20i32:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v20i32:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v20i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define inreg <20 x i32> @bitcast_v40f16_to_v20i32_scalar(<40 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40f16_to_v20i32_scalar:
; VI-LABEL: bitcast_v40f16_to_v20i32_scalar:
; GFX9-LABEL: bitcast_v40f16_to_v20i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v20i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v20i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <20 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <20 x i32>
  br label %end

end:
  %phi = phi <20 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x i32> %phi
}

define <10 x i64> @bitcast_v20f32_to_v10i64(<20 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v20f32_to_v10i64:
; VI-LABEL: bitcast_v20f32_to_v10i64:
; GFX9-LABEL: bitcast_v20f32_to_v10i64:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v10i64:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v10i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define inreg <10 x i64> @bitcast_v20f32_to_v10i64_scalar(<20 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20f32_to_v10i64_scalar:
; VI-LABEL: bitcast_v20f32_to_v10i64_scalar:
; GFX9-LABEL: bitcast_v20f32_to_v10i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v10i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v10i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define <20 x float> @bitcast_v10i64_to_v20f32(<10 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v10i64_to_v20f32:
; VI-LABEL: bitcast_v10i64_to_v20f32:
; GFX9-LABEL: bitcast_v10i64_to_v20f32:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v20f32:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v20f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define inreg <20 x float> @bitcast_v10i64_to_v20f32_scalar(<10 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10i64_to_v20f32_scalar:
; VI-LABEL: bitcast_v10i64_to_v20f32_scalar:
; GFX9-LABEL: bitcast_v10i64_to_v20f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v20f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v20f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define <10 x double> @bitcast_v20f32_to_v10f64(<20 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v20f32_to_v10f64:
; VI-LABEL: bitcast_v20f32_to_v10f64:
; GFX9-LABEL: bitcast_v20f32_to_v10f64:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v10f64:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v10f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define inreg <10 x double> @bitcast_v20f32_to_v10f64_scalar(<20 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20f32_to_v10f64_scalar:
; VI-LABEL: bitcast_v20f32_to_v10f64_scalar:
; GFX9-LABEL: bitcast_v20f32_to_v10f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v10f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v10f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define <20 x float> @bitcast_v10f64_to_v20f32(<10 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v10f64_to_v20f32:
; VI-LABEL: bitcast_v10f64_to_v20f32:
; GFX9-LABEL: bitcast_v10f64_to_v20f32:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v20f32:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v20f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define inreg <20 x float> @bitcast_v10f64_to_v20f32_scalar(<10 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10f64_to_v20f32_scalar:
; VI-LABEL: bitcast_v10f64_to_v20f32_scalar:
; GFX9-LABEL: bitcast_v10f64_to_v20f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v20f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v20f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define <40 x i16> @bitcast_v20f32_to_v40i16(<20 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v20f32_to_v40i16:
; VI-LABEL: bitcast_v20f32_to_v40i16:
; GFX9-LABEL: bitcast_v20f32_to_v40i16:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v40i16:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v40i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define inreg <40 x i16> @bitcast_v20f32_to_v40i16_scalar(<20 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20f32_to_v40i16_scalar:
; VI-LABEL: bitcast_v20f32_to_v40i16_scalar:
; GFX9-LABEL: bitcast_v20f32_to_v40i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v40i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v40i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define <20 x float> @bitcast_v40i16_to_v20f32(<40 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v40i16_to_v20f32:
; VI-LABEL: bitcast_v40i16_to_v20f32:
; GFX9-LABEL: bitcast_v40i16_to_v20f32:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v20f32:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v20f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define inreg <20 x float> @bitcast_v40i16_to_v20f32_scalar(<40 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40i16_to_v20f32_scalar:
; VI-LABEL: bitcast_v40i16_to_v20f32_scalar:
; GFX9-LABEL: bitcast_v40i16_to_v20f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v20f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v20f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define <40 x half> @bitcast_v20f32_to_v40f16(<20 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v20f32_to_v40f16:
; VI-LABEL: bitcast_v20f32_to_v40f16:
; GFX9-LABEL: bitcast_v20f32_to_v40f16:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v40f16:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v40f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define inreg <40 x half> @bitcast_v20f32_to_v40f16_scalar(<20 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v20f32_to_v40f16_scalar:
; VI-LABEL: bitcast_v20f32_to_v40f16_scalar:
; GFX9-LABEL: bitcast_v20f32_to_v40f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v20f32_to_v40f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v20f32_to_v40f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <20 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <20 x float> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <20 x float> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define <20 x float> @bitcast_v40f16_to_v20f32(<40 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v40f16_to_v20f32:
; VI-LABEL: bitcast_v40f16_to_v20f32:
; GFX9-LABEL: bitcast_v40f16_to_v20f32:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v20f32:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v20f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define inreg <20 x float> @bitcast_v40f16_to_v20f32_scalar(<40 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40f16_to_v20f32_scalar:
; VI-LABEL: bitcast_v40f16_to_v20f32_scalar:
; GFX9-LABEL: bitcast_v40f16_to_v20f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v20f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v20f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <20 x float>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <20 x float>
  br label %end

end:
  %phi = phi <20 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <20 x float> %phi
}

define <10 x double> @bitcast_v10i64_to_v10f64(<10 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v10i64_to_v10f64:
; VI-LABEL: bitcast_v10i64_to_v10f64:
; GFX9-LABEL: bitcast_v10i64_to_v10f64:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v10f64:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v10f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define inreg <10 x double> @bitcast_v10i64_to_v10f64_scalar(<10 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10i64_to_v10f64_scalar:
; VI-LABEL: bitcast_v10i64_to_v10f64_scalar:
; GFX9-LABEL: bitcast_v10i64_to_v10f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v10f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v10f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define <10 x i64> @bitcast_v10f64_to_v10i64(<10 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v10f64_to_v10i64:
; VI-LABEL: bitcast_v10f64_to_v10i64:
; GFX9-LABEL: bitcast_v10f64_to_v10i64:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v10i64:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v10i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define inreg <10 x i64> @bitcast_v10f64_to_v10i64_scalar(<10 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10f64_to_v10i64_scalar:
; VI-LABEL: bitcast_v10f64_to_v10i64_scalar:
; GFX9-LABEL: bitcast_v10f64_to_v10i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v10i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v10i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define <40 x i16> @bitcast_v10i64_to_v40i16(<10 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v10i64_to_v40i16:
; VI-LABEL: bitcast_v10i64_to_v40i16:
; GFX9-LABEL: bitcast_v10i64_to_v40i16:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v40i16:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v40i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define inreg <40 x i16> @bitcast_v10i64_to_v40i16_scalar(<10 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10i64_to_v40i16_scalar:
; VI-LABEL: bitcast_v10i64_to_v40i16_scalar:
; GFX9-LABEL: bitcast_v10i64_to_v40i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v40i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v40i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define <10 x i64> @bitcast_v40i16_to_v10i64(<40 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v40i16_to_v10i64:
; VI-LABEL: bitcast_v40i16_to_v10i64:
; GFX9-LABEL: bitcast_v40i16_to_v10i64:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v10i64:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v10i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define inreg <10 x i64> @bitcast_v40i16_to_v10i64_scalar(<40 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40i16_to_v10i64_scalar:
; VI-LABEL: bitcast_v40i16_to_v10i64_scalar:
; GFX9-LABEL: bitcast_v40i16_to_v10i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v10i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v10i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define <40 x half> @bitcast_v10i64_to_v40f16(<10 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v10i64_to_v40f16:
; VI-LABEL: bitcast_v10i64_to_v40f16:
; GFX9-LABEL: bitcast_v10i64_to_v40f16:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v40f16:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v40f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define inreg <40 x half> @bitcast_v10i64_to_v40f16_scalar(<10 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10i64_to_v40f16_scalar:
; VI-LABEL: bitcast_v10i64_to_v40f16_scalar:
; GFX9-LABEL: bitcast_v10i64_to_v40f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10i64_to_v40f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10i64_to_v40f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <10 x i64> %a, splat (i64 3)
  %a2 = bitcast <10 x i64> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <10 x i64> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define <10 x i64> @bitcast_v40f16_to_v10i64(<40 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v40f16_to_v10i64:
; VI-LABEL: bitcast_v40f16_to_v10i64:
; GFX9-LABEL: bitcast_v40f16_to_v10i64:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v10i64:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v10i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define inreg <10 x i64> @bitcast_v40f16_to_v10i64_scalar(<40 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40f16_to_v10i64_scalar:
; VI-LABEL: bitcast_v40f16_to_v10i64_scalar:
; GFX9-LABEL: bitcast_v40f16_to_v10i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v10i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v10i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <10 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <10 x i64>
  br label %end

end:
  %phi = phi <10 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x i64> %phi
}

define <40 x i16> @bitcast_v10f64_to_v40i16(<10 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v10f64_to_v40i16:
; VI-LABEL: bitcast_v10f64_to_v40i16:
; GFX9-LABEL: bitcast_v10f64_to_v40i16:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v40i16:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v40i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define inreg <40 x i16> @bitcast_v10f64_to_v40i16_scalar(<10 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10f64_to_v40i16_scalar:
; VI-LABEL: bitcast_v10f64_to_v40i16_scalar:
; GFX9-LABEL: bitcast_v10f64_to_v40i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v40i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v40i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define <10 x double> @bitcast_v40i16_to_v10f64(<40 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v40i16_to_v10f64:
; VI-LABEL: bitcast_v40i16_to_v10f64:
; GFX9-LABEL: bitcast_v40i16_to_v10f64:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v10f64:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v10f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define inreg <10 x double> @bitcast_v40i16_to_v10f64_scalar(<40 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40i16_to_v10f64_scalar:
; VI-LABEL: bitcast_v40i16_to_v10f64_scalar:
; GFX9-LABEL: bitcast_v40i16_to_v10f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v10f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v10f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define <40 x half> @bitcast_v10f64_to_v40f16(<10 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v10f64_to_v40f16:
; VI-LABEL: bitcast_v10f64_to_v40f16:
; GFX9-LABEL: bitcast_v10f64_to_v40f16:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v40f16:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v40f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define inreg <40 x half> @bitcast_v10f64_to_v40f16_scalar(<10 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v10f64_to_v40f16_scalar:
; VI-LABEL: bitcast_v10f64_to_v40f16_scalar:
; GFX9-LABEL: bitcast_v10f64_to_v40f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v10f64_to_v40f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v10f64_to_v40f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <10 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <10 x double> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <10 x double> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define <10 x double> @bitcast_v40f16_to_v10f64(<40 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v40f16_to_v10f64:
; VI-LABEL: bitcast_v40f16_to_v10f64:
; GFX9-LABEL: bitcast_v40f16_to_v10f64:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v10f64:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v10f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define inreg <10 x double> @bitcast_v40f16_to_v10f64_scalar(<40 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40f16_to_v10f64_scalar:
; VI-LABEL: bitcast_v40f16_to_v10f64_scalar:
; GFX9-LABEL: bitcast_v40f16_to_v10f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v10f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v10f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <10 x double>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <10 x double>
  br label %end

end:
  %phi = phi <10 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <10 x double> %phi
}

define <40 x half> @bitcast_v40i16_to_v40f16(<40 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v40i16_to_v40f16:
; VI-LABEL: bitcast_v40i16_to_v40f16:
; GFX9-LABEL: bitcast_v40i16_to_v40f16:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v40f16:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v40f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define inreg <40 x half> @bitcast_v40i16_to_v40f16_scalar(<40 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40i16_to_v40f16_scalar:
; VI-LABEL: bitcast_v40i16_to_v40f16_scalar:
; GFX9-LABEL: bitcast_v40i16_to_v40f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40i16_to_v40f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40i16_to_v40f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <40 x i16> %a, splat (i16 3)
  %a2 = bitcast <40 x i16> %a1 to <40 x half>
  br label %end

cmp.false:
  %a3 = bitcast <40 x i16> %a to <40 x half>
  br label %end

end:
  %phi = phi <40 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x half> %phi
}

define <40 x i16> @bitcast_v40f16_to_v40i16(<40 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v40f16_to_v40i16:
; VI-LABEL: bitcast_v40f16_to_v40i16:
; GFX9-LABEL: bitcast_v40f16_to_v40i16:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v40i16:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v40i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}

define inreg <40 x i16> @bitcast_v40f16_to_v40i16_scalar(<40 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v40f16_to_v40i16_scalar:
; VI-LABEL: bitcast_v40f16_to_v40i16_scalar:
; GFX9-LABEL: bitcast_v40f16_to_v40i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v40f16_to_v40i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v40f16_to_v40i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <40 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <40 x half> %a1 to <40 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <40 x half> %a to <40 x i16>
  br label %end

end:
  %phi = phi <40 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <40 x i16> %phi
}
