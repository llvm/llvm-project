; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx908 < %s | FileCheck -check-prefix=GFX908 %s
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx90a < %s | FileCheck -check-prefix=GFX90A %s

; This testcase would fail due to not having a free VGPR available to
; copy between AGPRs.
define void @no_free_vgprs_at_agpr_copy(float %v0, float %v1) #0 {
; GFX908-LABEL: no_free_vgprs_at_agpr_copy:
; GFX908:       ; %bb.0:
; GFX908-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX908-NEXT:    v_mov_b32_e32 v33, v0
; GFX908-NEXT:    v_mov_b32_e32 v34, v1
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; def v[0:31] a[0:15]
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a15
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a31, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a14
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a30, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a13
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a29, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a12
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a28, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a11
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a27, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a10
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a26, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a9
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a25, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a8
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a24, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a7
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a23, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a6
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a22, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a5
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a21, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a4
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a20, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a3
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a19, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a2
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a18, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a1
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a17, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a0
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a16, v32
; GFX908-NEXT:    s_nop 0
; GFX908-NEXT:    v_mfma_f32_16x16x1f32 a[0:15], v33, v34, a[16:31]
; GFX908-NEXT:    s_nop 7
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a0 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_read_b32 v39, a11 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_read_b32 v38, a12 ; Reload Reuse
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a1 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_read_b32 v37, a13 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_read_b32 v36, a14 ; Reload Reuse
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:4 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a2 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_read_b32 v35, a15 ; Reload Reuse
; GFX908-NEXT:    s_nop 0
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:8 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a3 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:12 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a4 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:16 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a5 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:20 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a6 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:24 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a7 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:28 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a8 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:32 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a9 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:36 ; 4-byte Folded Spill
; GFX908-NEXT:    v_accvgpr_read_b32 v34, a10 ; Reload Reuse
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    buffer_store_dword v34, off, s[0:3], s32 offset:40 ; 4-byte Folded Spill
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; copy
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 ; 4-byte Folded Reload
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a1
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a0, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:4 ; 4-byte Folded Reload
; GFX908-NEXT:    v_accvgpr_write_b32 a16, v32
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a1, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:8 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a2, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:12 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a3, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:16 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a4, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:20 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a5, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:24 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a6, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:28 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a7, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:32 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a8, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:36 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a9, v34 ; Reload Reuse
; GFX908-NEXT:    buffer_load_dword v34, off, s[0:3], s32 offset:40 ; 4-byte Folded Reload
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_accvgpr_write_b32 a10, v34 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_write_b32 a11, v39 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_write_b32 a12, v38 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_write_b32 a13, v37 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_write_b32 a14, v36 ; Reload Reuse
; GFX908-NEXT:    v_accvgpr_write_b32 a15, v35 ; Reload Reuse
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; copy
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    v_accvgpr_read_b32 v33, a2
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a3, v33
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; use a3 v[0:31]
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    s_setpc_b64 s[30:31]
;
; GFX90A-LABEL: no_free_vgprs_at_agpr_copy:
; GFX90A:       ; %bb.0:
; GFX90A-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX90A-NEXT:    v_mov_b32_e32 v32, v0
; GFX90A-NEXT:    v_mov_b32_e32 v33, v1
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; def v[0:31] a[0:15]
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    v_accvgpr_mov_b32 a31, a15
; GFX90A-NEXT:    v_accvgpr_mov_b32 a30, a14
; GFX90A-NEXT:    v_accvgpr_mov_b32 a29, a13
; GFX90A-NEXT:    v_accvgpr_mov_b32 a28, a12
; GFX90A-NEXT:    v_accvgpr_mov_b32 a27, a11
; GFX90A-NEXT:    v_accvgpr_mov_b32 a26, a10
; GFX90A-NEXT:    v_accvgpr_mov_b32 a25, a9
; GFX90A-NEXT:    v_accvgpr_mov_b32 a24, a8
; GFX90A-NEXT:    v_accvgpr_mov_b32 a23, a7
; GFX90A-NEXT:    v_accvgpr_mov_b32 a22, a6
; GFX90A-NEXT:    v_accvgpr_mov_b32 a21, a5
; GFX90A-NEXT:    v_accvgpr_mov_b32 a20, a4
; GFX90A-NEXT:    v_accvgpr_mov_b32 a19, a3
; GFX90A-NEXT:    v_accvgpr_mov_b32 a18, a2
; GFX90A-NEXT:    v_accvgpr_mov_b32 a17, a1
; GFX90A-NEXT:    v_accvgpr_mov_b32 a16, a0
; GFX90A-NEXT:    s_nop 1
; GFX90A-NEXT:    v_mfma_f32_16x16x1f32 a[0:15], v32, v33, a[16:31]
; GFX90A-NEXT:    s_nop 7
; GFX90A-NEXT:    s_nop 2
; GFX90A-NEXT:    buffer_store_dword a0, off, s[0:3], s32 ; 4-byte Folded Spill
; GFX90A-NEXT:    s_waitcnt vmcnt(0)
; GFX90A-NEXT:    buffer_store_dword a1, off, s[0:3], s32 offset:4 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a2, off, s[0:3], s32 offset:8 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a3, off, s[0:3], s32 offset:12 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a4, off, s[0:3], s32 offset:16 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a5, off, s[0:3], s32 offset:20 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a6, off, s[0:3], s32 offset:24 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a7, off, s[0:3], s32 offset:28 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a8, off, s[0:3], s32 offset:32 ; 4-byte Folded Spill
; GFX90A-NEXT:    buffer_store_dword a9, off, s[0:3], s32 offset:36 ; 4-byte Folded Spill
; GFX90A-NEXT:    v_accvgpr_read_b32 v39, a10 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_read_b32 v38, a11 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_read_b32 v37, a12 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_read_b32 v36, a13 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_read_b32 v35, a14 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_read_b32 v34, a15 ; Reload Reuse
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; copy
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    v_accvgpr_mov_b32 a16, a1
; GFX90A-NEXT:    buffer_load_dword a0, off, s[0:3], s32 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a1, off, s[0:3], s32 offset:4 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a2, off, s[0:3], s32 offset:8 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a3, off, s[0:3], s32 offset:12 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a4, off, s[0:3], s32 offset:16 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a5, off, s[0:3], s32 offset:20 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a6, off, s[0:3], s32 offset:24 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a7, off, s[0:3], s32 offset:28 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a8, off, s[0:3], s32 offset:32 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_nop 0
; GFX90A-NEXT:    buffer_load_dword a9, off, s[0:3], s32 offset:36 ; 4-byte Folded Reload
; GFX90A-NEXT:    s_waitcnt vmcnt(0)
; GFX90A-NEXT:    v_accvgpr_write_b32 a10, v39 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_write_b32 a11, v38 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_write_b32 a12, v37 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_write_b32 a13, v36 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_write_b32 a14, v35 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_write_b32 a15, v34 ; Reload Reuse
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; copy
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    v_accvgpr_mov_b32 a3, a2
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; use a3 v[0:31]
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    s_setpc_b64 s[30:31]
  %asm = call { <32 x i32>, <16 x float> } asm sideeffect "; def $0 $1","=${v[0:31]},=${a[0:15]}"()
  %vgpr0 = extractvalue { <32 x i32>, <16 x float> } %asm, 0
  %agpr0 = extractvalue { <32 x i32>, <16 x float> } %asm, 1
  %mfma = call <16 x float> @llvm.amdgcn.mfma.f32.16x16x1f32(float %v0, float %v1, <16 x float> %agpr0, i32 0, i32 0, i32 0)
  %agpr1 = call i32 asm sideeffect "; copy ", "={a1},a,~{a[0:15]}"(<16 x float> %agpr0)
  %agpr2 = call i32 asm sideeffect "; copy ", "={a2},a,{a[0:15]}"(i32 %agpr1, <16 x float> %mfma)
  call void asm sideeffect "; use $0 $1","{a3},{v[0:31]}"(i32 %agpr2, <32 x i32> %vgpr0)
  ret void
}

; Check that we do make use of v32 if there are no AGPRs present in the function
define amdgpu_kernel void @no_agpr_no_reserve(<32 x i32> addrspace(1)* %arg) #0 {
; GFX908-LABEL: no_agpr_no_reserve:
; GFX908:       ; %bb.0:
; GFX908-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x0
; GFX908-NEXT:    v_lshlrev_b32_e32 v32, 7, v0
; GFX908-NEXT:    s_waitcnt lgkmcnt(0)
; GFX908-NEXT:    global_load_dwordx4 v[0:3], v32, s[0:1] offset:16
; GFX908-NEXT:    global_load_dwordx4 v[4:7], v32, s[0:1]
; GFX908-NEXT:    global_load_dwordx4 v[8:11], v32, s[0:1] offset:48
; GFX908-NEXT:    global_load_dwordx4 v[12:15], v32, s[0:1] offset:32
; GFX908-NEXT:    global_load_dwordx4 v[16:19], v32, s[0:1] offset:80
; GFX908-NEXT:    global_load_dwordx4 v[20:23], v32, s[0:1] offset:64
; GFX908-NEXT:    global_load_dwordx4 v[24:27], v32, s[0:1] offset:112
; GFX908-NEXT:    global_load_dwordx4 v[28:31], v32, s[0:1] offset:96
; GFX908-NEXT:    s_waitcnt vmcnt(7)
; GFX908-NEXT:    v_add_u32_e32 v3, v3, v3
; GFX908-NEXT:    v_add_u32_e32 v2, v2, v2
; GFX908-NEXT:    v_add_u32_e32 v1, v1, v1
; GFX908-NEXT:    v_add_u32_e32 v0, v0, v0
; GFX908-NEXT:    s_waitcnt vmcnt(6)
; GFX908-NEXT:    v_add_u32_e32 v7, v7, v7
; GFX908-NEXT:    v_add_u32_e32 v6, v6, v6
; GFX908-NEXT:    v_add_u32_e32 v5, v5, v5
; GFX908-NEXT:    s_waitcnt vmcnt(0)
; GFX908-NEXT:    v_add_u32_e32 v31, v31, v31
; GFX908-NEXT:    v_add_u32_e32 v30, v30, v30
; GFX908-NEXT:    v_add_u32_e32 v29, v29, v29
; GFX908-NEXT:    v_add_u32_e32 v28, v28, v28
; GFX908-NEXT:    v_add_u32_e32 v4, v4, v4
; GFX908-NEXT:    v_add_u32_e32 v11, v11, v11
; GFX908-NEXT:    v_add_u32_e32 v10, v10, v10
; GFX908-NEXT:    v_add_u32_e32 v9, v9, v9
; GFX908-NEXT:    v_add_u32_e32 v8, v8, v8
; GFX908-NEXT:    v_add_u32_e32 v15, v15, v15
; GFX908-NEXT:    v_add_u32_e32 v14, v14, v14
; GFX908-NEXT:    v_add_u32_e32 v13, v13, v13
; GFX908-NEXT:    v_add_u32_e32 v12, v12, v12
; GFX908-NEXT:    v_add_u32_e32 v19, v19, v19
; GFX908-NEXT:    v_add_u32_e32 v18, v18, v18
; GFX908-NEXT:    v_add_u32_e32 v17, v17, v17
; GFX908-NEXT:    v_add_u32_e32 v16, v16, v16
; GFX908-NEXT:    v_add_u32_e32 v23, v23, v23
; GFX908-NEXT:    v_add_u32_e32 v22, v22, v22
; GFX908-NEXT:    v_add_u32_e32 v21, v21, v21
; GFX908-NEXT:    v_add_u32_e32 v20, v20, v20
; GFX908-NEXT:    v_add_u32_e32 v27, v27, v27
; GFX908-NEXT:    v_add_u32_e32 v26, v26, v26
; GFX908-NEXT:    v_add_u32_e32 v25, v25, v25
; GFX908-NEXT:    v_add_u32_e32 v24, v24, v24
; GFX908-NEXT:    global_store_dwordx4 v32, v[28:31], s[0:1] offset:96
; GFX908-NEXT:    global_store_dwordx4 v32, v[24:27], s[0:1] offset:112
; GFX908-NEXT:    global_store_dwordx4 v32, v[20:23], s[0:1] offset:64
; GFX908-NEXT:    global_store_dwordx4 v32, v[16:19], s[0:1] offset:80
; GFX908-NEXT:    global_store_dwordx4 v32, v[12:15], s[0:1] offset:32
; GFX908-NEXT:    global_store_dwordx4 v32, v[8:11], s[0:1] offset:48
; GFX908-NEXT:    global_store_dwordx4 v32, v[4:7], s[0:1]
; GFX908-NEXT:    global_store_dwordx4 v32, v[0:3], s[0:1] offset:16
; GFX908-NEXT:    s_endpgm
;
; GFX90A-LABEL: no_agpr_no_reserve:
; GFX90A:       ; %bb.0:
; GFX90A-NEXT:    s_load_dwordx2 s[0:1], s[4:5], 0x0
; GFX90A-NEXT:    v_lshlrev_b32_e32 v32, 7, v0
; GFX90A-NEXT:    s_waitcnt lgkmcnt(0)
; GFX90A-NEXT:    global_load_dwordx4 v[0:3], v32, s[0:1] offset:16
; GFX90A-NEXT:    global_load_dwordx4 v[4:7], v32, s[0:1]
; GFX90A-NEXT:    global_load_dwordx4 v[8:11], v32, s[0:1] offset:48
; GFX90A-NEXT:    global_load_dwordx4 v[12:15], v32, s[0:1] offset:32
; GFX90A-NEXT:    global_load_dwordx4 v[16:19], v32, s[0:1] offset:80
; GFX90A-NEXT:    global_load_dwordx4 v[20:23], v32, s[0:1] offset:64
; GFX90A-NEXT:    global_load_dwordx4 v[24:27], v32, s[0:1] offset:112
; GFX90A-NEXT:    global_load_dwordx4 v[28:31], v32, s[0:1] offset:96
; GFX90A-NEXT:    s_waitcnt vmcnt(7)
; GFX90A-NEXT:    v_add_u32_e32 v3, v3, v3
; GFX90A-NEXT:    v_add_u32_e32 v2, v2, v2
; GFX90A-NEXT:    v_add_u32_e32 v1, v1, v1
; GFX90A-NEXT:    v_add_u32_e32 v0, v0, v0
; GFX90A-NEXT:    s_waitcnt vmcnt(6)
; GFX90A-NEXT:    v_add_u32_e32 v7, v7, v7
; GFX90A-NEXT:    v_add_u32_e32 v6, v6, v6
; GFX90A-NEXT:    v_add_u32_e32 v5, v5, v5
; GFX90A-NEXT:    s_waitcnt vmcnt(0)
; GFX90A-NEXT:    v_add_u32_e32 v31, v31, v31
; GFX90A-NEXT:    v_add_u32_e32 v30, v30, v30
; GFX90A-NEXT:    v_add_u32_e32 v29, v29, v29
; GFX90A-NEXT:    v_add_u32_e32 v28, v28, v28
; GFX90A-NEXT:    v_add_u32_e32 v4, v4, v4
; GFX90A-NEXT:    v_add_u32_e32 v11, v11, v11
; GFX90A-NEXT:    v_add_u32_e32 v10, v10, v10
; GFX90A-NEXT:    v_add_u32_e32 v9, v9, v9
; GFX90A-NEXT:    v_add_u32_e32 v8, v8, v8
; GFX90A-NEXT:    v_add_u32_e32 v15, v15, v15
; GFX90A-NEXT:    v_add_u32_e32 v14, v14, v14
; GFX90A-NEXT:    v_add_u32_e32 v13, v13, v13
; GFX90A-NEXT:    v_add_u32_e32 v12, v12, v12
; GFX90A-NEXT:    v_add_u32_e32 v19, v19, v19
; GFX90A-NEXT:    v_add_u32_e32 v18, v18, v18
; GFX90A-NEXT:    v_add_u32_e32 v17, v17, v17
; GFX90A-NEXT:    v_add_u32_e32 v16, v16, v16
; GFX90A-NEXT:    v_add_u32_e32 v23, v23, v23
; GFX90A-NEXT:    v_add_u32_e32 v22, v22, v22
; GFX90A-NEXT:    v_add_u32_e32 v21, v21, v21
; GFX90A-NEXT:    v_add_u32_e32 v20, v20, v20
; GFX90A-NEXT:    v_add_u32_e32 v27, v27, v27
; GFX90A-NEXT:    v_add_u32_e32 v26, v26, v26
; GFX90A-NEXT:    v_add_u32_e32 v25, v25, v25
; GFX90A-NEXT:    v_add_u32_e32 v24, v24, v24
; GFX90A-NEXT:    global_store_dwordx4 v32, v[28:31], s[0:1] offset:96
; GFX90A-NEXT:    global_store_dwordx4 v32, v[24:27], s[0:1] offset:112
; GFX90A-NEXT:    global_store_dwordx4 v32, v[20:23], s[0:1] offset:64
; GFX90A-NEXT:    global_store_dwordx4 v32, v[16:19], s[0:1] offset:80
; GFX90A-NEXT:    global_store_dwordx4 v32, v[12:15], s[0:1] offset:32
; GFX90A-NEXT:    global_store_dwordx4 v32, v[8:11], s[0:1] offset:48
; GFX90A-NEXT:    global_store_dwordx4 v32, v[4:7], s[0:1]
; GFX90A-NEXT:    global_store_dwordx4 v32, v[0:3], s[0:1] offset:16
; GFX90A-NEXT:    s_endpgm
  %id = call i32 @llvm.amdgcn.workitem.id.x()
  %gep = getelementptr inbounds <32 x i32>, <32 x i32> addrspace(1)* %arg, i32 %id
  %load = load <32 x i32>, <32 x i32> addrspace(1)* %gep
  %add = add <32 x i32> %load, %load
  store <32 x i32> %add, <32 x i32> addrspace(1)* %gep
  ret void
}

; FIXME: This case is broken. The asm value passed in v32 is live
; through the range where the reserved def for the copy is introduced,
; clobbering the user value.
define void @v32_asm_def_use(float %v0, float %v1) #0 {
; GFX908-LABEL: v32_asm_def_use:
; GFX908:       ; %bb.0:
; GFX908-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX908-NEXT:    v_mov_b32_e32 v33, v1
; GFX908-NEXT:    v_mov_b32_e32 v34, v0
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; def v[0:31] a[0:15]
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a15
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a31, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a14
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a30, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a13
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a29, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a12
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a28, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a11
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a27, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a10
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a26, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a9
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a25, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a8
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a24, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a7
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a23, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a6
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a22, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a5
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a21, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a4
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a20, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a3
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a19, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a2
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a18, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a1
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a17, v32
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a0
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a16, v32
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; def v32
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; copy
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    v_accvgpr_read_b32 v32, a1
; GFX908-NEXT:    v_mfma_f32_16x16x1f32 a[0:15], v34, v33, a[16:31]
; GFX908-NEXT:    s_nop 0
; GFX908-NEXT:    v_accvgpr_write_b32 a32, v32
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; copy
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    s_nop 7
; GFX908-NEXT:    v_accvgpr_read_b32 v33, a2
; GFX908-NEXT:    s_nop 1
; GFX908-NEXT:    v_accvgpr_write_b32 a3, v33
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; use a3 v[0:31]
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    ;;#ASMSTART
; GFX908-NEXT:    ; use v32
; GFX908-NEXT:    ;;#ASMEND
; GFX908-NEXT:    s_setpc_b64 s[30:31]
;
; GFX90A-LABEL: v32_asm_def_use:
; GFX90A:       ; %bb.0:
; GFX90A-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX90A-NEXT:    v_mov_b32_e32 v34, v0
; GFX90A-NEXT:    v_mov_b32_e32 v33, v1
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; def v[0:31] a[0:15]
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    v_accvgpr_mov_b32 a31, a15
; GFX90A-NEXT:    v_accvgpr_mov_b32 a30, a14
; GFX90A-NEXT:    v_accvgpr_mov_b32 a29, a13
; GFX90A-NEXT:    v_accvgpr_mov_b32 a28, a12
; GFX90A-NEXT:    v_accvgpr_mov_b32 a27, a11
; GFX90A-NEXT:    v_accvgpr_mov_b32 a26, a10
; GFX90A-NEXT:    v_accvgpr_mov_b32 a25, a9
; GFX90A-NEXT:    v_accvgpr_mov_b32 a24, a8
; GFX90A-NEXT:    v_accvgpr_mov_b32 a23, a7
; GFX90A-NEXT:    v_accvgpr_mov_b32 a22, a6
; GFX90A-NEXT:    v_accvgpr_mov_b32 a21, a5
; GFX90A-NEXT:    v_accvgpr_mov_b32 a20, a4
; GFX90A-NEXT:    v_accvgpr_mov_b32 a19, a3
; GFX90A-NEXT:    v_accvgpr_mov_b32 a18, a2
; GFX90A-NEXT:    v_accvgpr_mov_b32 a17, a1
; GFX90A-NEXT:    v_accvgpr_mov_b32 a16, a0
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; def v32
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; copy
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    v_accvgpr_read_b32 v35, a32 ; Reload Reuse
; GFX90A-NEXT:    v_accvgpr_mov_b32 a32, a1
; GFX90A-NEXT:    v_mfma_f32_16x16x1f32 a[0:15], v34, v33, a[16:31]
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; copy
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    v_accvgpr_write_b32 a32, v35 ; Reload Reuse
; GFX90A-NEXT:    s_nop 7
; GFX90A-NEXT:    s_nop 1
; GFX90A-NEXT:    v_accvgpr_mov_b32 a3, a2
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; use a3 v[0:31]
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    ;;#ASMSTART
; GFX90A-NEXT:    ; use v32
; GFX90A-NEXT:    ;;#ASMEND
; GFX90A-NEXT:    s_setpc_b64 s[30:31]
  %asm = call { <32 x i32>, <16 x float> } asm sideeffect "; def $0 $1","=${v[0:31]},=${a[0:15]}"()
  %vgpr0 = extractvalue { <32 x i32>, <16 x float> } %asm, 0
  %agpr0 = extractvalue { <32 x i32>, <16 x float> } %asm, 1
  %mfma = call <16 x float> @llvm.amdgcn.mfma.f32.16x16x1f32(float %v0, float %v1, <16 x float> %agpr0, i32 0, i32 0, i32 0)
  %v32 = call i32 asm sideeffect "; def $0","=${v32}"()
  %agpr1 = call i32 asm sideeffect "; copy ", "={a1},a,~{a[0:15]}"(<16 x float> %agpr0)
  %agpr2 = call i32 asm sideeffect "; copy ", "={a2},a,{a[0:15]}"(i32 %agpr1, <16 x float> %mfma)
  call void asm sideeffect "; use $0 $1","{a3},{v[0:31]}"(i32 %agpr2, <32 x i32> %vgpr0)
  call void asm sideeffect "; use $0","${v32}"(i32 %v32)
  ret void
}

declare <16 x float> @llvm.amdgcn.mfma.f32.16x16x1f32(float, float, <16 x float>, i32 immarg, i32 immarg, i32 immarg) #1
declare i32 @llvm.amdgcn.workitem.id.x() #2

attributes #0 = { "amdgpu-waves-per-eu"="6,6" }
attributes #1 = { convergent nounwind readnone willreturn }
attributes #2 = { nounwind readnone willreturn }
