# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -global-isel -mtriple=amdgcn-mesa-mesa3d -run-pass=legalizer %s -o - | FileCheck %s

---
name: test_amdgcn_fdiv_fast
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_amdgcn_fdiv_fast
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[BITCAST1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x45F0000000000000
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3DF0000000000000
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; CHECK-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FABS]](f32), [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST1]], [[SELECT]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FMUL]](f32)
    ; CHECK-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[INT]]
    ; CHECK-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[SELECT]], [[FMUL1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL2]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.fdiv.fast), %2(f32), %3(f32)
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_amdgcn_fdiv_fast_propagate_flags
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_amdgcn_fdiv_fast_propagate_flags
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(f32) = nsz G_FABS [[BITCAST1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x45F0000000000000
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3DF0000000000000
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; CHECK-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nsz G_FCMP floatpred(ogt), [[FABS]](f32), [[C]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(f32) = nsz G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nsz G_FMUL [[BITCAST1]], [[SELECT]]
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = nsz G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FMUL]](f32)
    ; CHECK-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nsz G_FMUL [[BITCAST]], [[INT]]
    ; CHECK-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = nsz G_FMUL [[SELECT]], [[FMUL1]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL2]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = nsz G_INTRINSIC intrinsic(@llvm.amdgcn.fdiv.fast), %2(f32), %3(f32)
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...
