# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f16
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FABS]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FNEG %2
    %4:_(f16) = G_FABS %3
    %5:_(i16) = G_BITCAST %4(f16)
    %6:_(i32) = G_ANYEXT %5(i16)
    $vgpr0 = COPY %6(i32)

...
---
name:            test_f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FABS]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FNEG %1
    %3:_(f32) = G_FABS %2
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)

...
---
name:            test_f64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_f64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FABS]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(f64) = G_BITCAST %0(i64)
    %2:_(f64) = G_FNEG %1
    %3:_(f64) = G_FABS %2
    %4:_(i64) = G_BITCAST %3(f64)
    $vgpr0_vgpr1 = COPY %4(i64)

...
---
name:            test_v2f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_v2f16
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(<2 x f16>) = G_FABS [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FABS]](<2 x f16>)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %2:_(<2 x f16>) = G_FNEG %1
    %3:_(<2 x f16>) = G_FABS %2
    %4:_(<2 x i16>) = G_BITCAST %3(<2 x f16>)
    $vgpr0 = COPY %4(<2 x i16>)

...
---
name:            test_v3f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_v3f32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; CHECK-NEXT: [[FABS:%[0-9]+]]:_(<3 x f32>) = G_FABS [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[FABS]](<3 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST1]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %2:_(<3 x f32>) = G_FNEG %1
    %3:_(<3 x f32>) = G_FABS %2
    %4:_(<3 x i32>) = G_BITCAST %3(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %4(<3 x i32>)

...
