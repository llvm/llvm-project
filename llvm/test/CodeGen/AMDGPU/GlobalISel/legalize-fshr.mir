# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -O0 -run-pass=legalizer %s -o - | FileCheck -check-prefix=SI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer  %s -o - | FileCheck -check-prefix=VI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -O0 -run-pass=legalizer  %s -o - | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -O0 -run-pass=legalizer  %s -o - | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -O0 -run-pass=legalizer  %s -o - | FileCheck -check-prefix=GFX9  %s

---
name: test_fshr_s32_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fshr_s32_s32
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[COPY]], [[COPY1]], [[COPY2]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[FSHR]](i32)
    ;
    ; VI-LABEL: name: test_fshr_s32_s32
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[COPY]], [[COPY1]], [[COPY2]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[FSHR]](i32)
    ;
    ; GFX9-LABEL: name: test_fshr_s32_s32
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[COPY]], [[COPY1]], [[COPY2]](i32)
    ; GFX9-NEXT: $vgpr0 = COPY [[FSHR]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = G_FSHR %0, %1, %2(i32)
    $vgpr0 = COPY %3(i32)
...

---
name: test_fshr_v2s32_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; SI-LABEL: name: test_fshr_v2s32_v2s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; SI-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[UV]], [[UV2]], [[UV4]](i32)
    ; SI-NEXT: [[FSHR1:%[0-9]+]]:_(i32) = G_FSHR [[UV1]], [[UV3]], [[UV5]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[FSHR]](i32), [[FSHR1]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_fshr_v2s32_v2s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; VI-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[UV]], [[UV2]], [[UV4]](i32)
    ; VI-NEXT: [[FSHR1:%[0-9]+]]:_(i32) = G_FSHR [[UV1]], [[UV3]], [[UV5]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[FSHR]](i32), [[FSHR1]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fshr_v2s32_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX9-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[UV]], [[UV2]], [[UV4]](i32)
    ; GFX9-NEXT: [[FSHR1:%[0-9]+]]:_(i32) = G_FSHR [[UV1]], [[UV3]], [[UV5]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[FSHR]](i32), [[FSHR1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %3:_(<2 x i32>) = G_FSHR %0, %1, %2(<2 x i32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_fshr_s16_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fshr_s16_s16
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[TRUNC]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C2]](i32)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[AND1]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[ZEXT]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[AND]](i16)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C3]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[ZEXT1]](i32)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC1]], [[TRUNC2]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fshr_s16_s16
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; VI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[TRUNC2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C2]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND1]](i16)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[AND]](i16)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fshr_s16_s16
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; GFX9-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[TRUNC2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C2]](i16)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND1]](i16)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[AND]](i16)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i16) = G_TRUNC %0(i32)
    %4:_(i16) = G_TRUNC %1(i32)
    %5:_(i16) = G_TRUNC %2(i32)
    %6:_(i16) = G_FSHR %3, %4, %5(i16)
    %7:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fshr_v2s16_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fshr_v2s16_v2s16
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C1]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C2]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[AND]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[ZEXT]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C5]]
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[C4]](i32)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[AND1]](i16)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR2]], [[ZEXT1]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC]], [[TRUNC1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; SI-NEXT: [[XOR1:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[XOR1]], [[C2]]
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[AND3]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[ZEXT2]](i32)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; SI-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LSHR1]], [[COPY3]](i32)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[AND4]](i16)
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LSHR4]], [[ZEXT3]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC2]], [[TRUNC3]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C1]](i32)
    ; SI-NEXT: [[COPY4:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[BITCAST2]], [[COPY4]](i32)
    ; SI-NEXT: [[COPY5:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LSHR6]], [[COPY5]](i32)
    ; SI-NEXT: [[COPY6:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[COPY7:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[COPY7]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[COPY6]], [[SHL4]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[XOR2:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY2]], [[BITCAST3]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[XOR2]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; SI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C1]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C2]]
    ; SI-NEXT: [[XOR3:%[0-9]+]]:_(i16) = G_XOR [[TRUNC4]], [[C3]]
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[XOR3]], [[C2]]
    ; SI-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[AND5]](i16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT]], [[ZEXT4]](i32)
    ; SI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[SHL5]](i32)
    ; SI-NEXT: [[COPY8:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[SHL2]], [[C5]]
    ; SI-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[AND7]], [[COPY8]](i32)
    ; SI-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[AND6]](i16)
    ; SI-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LSHR8]], [[ZEXT5]](i32)
    ; SI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC6]], [[TRUNC7]]
    ; SI-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C2]]
    ; SI-NEXT: [[XOR4:%[0-9]+]]:_(i16) = G_XOR [[TRUNC5]], [[C3]]
    ; SI-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[XOR4]], [[C2]]
    ; SI-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[AND8]](i16)
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[OR1]](i16)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT1]], [[ZEXT6]](i32)
    ; SI-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[SHL6]](i32)
    ; SI-NEXT: [[COPY9:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[SHL3]], [[C5]]
    ; SI-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[AND10]], [[COPY9]](i32)
    ; SI-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[AND9]](i16)
    ; SI-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LSHR10]], [[ZEXT7]](i32)
    ; SI-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC8]], [[TRUNC9]]
    ; SI-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; SI-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXT9]], [[C1]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT8]], [[SHL7]]
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST5]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fshr_v2s16_v2s16
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; VI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C2]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[AND]](i16)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C]](i16)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[LSHR2]], [[AND1]](i16)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL]], [[LSHR3]]
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; VI-NEXT: [[XOR1:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[XOR1]], [[C2]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[AND2]](i16)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C]](i16)
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[LSHR4]], [[AND3]](i16)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL1]], [[LSHR5]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC4]], [[C]](i16)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC5]], [[C]](i16)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[C4]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[COPY3]], [[SHL4]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[XOR2:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY2]], [[BITCAST3]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[XOR2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; VI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C2]]
    ; VI-NEXT: [[XOR3:%[0-9]+]]:_(i16) = G_XOR [[TRUNC6]], [[C3]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[XOR3]], [[C2]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i16) = G_SHL [[OR]], [[AND4]](i16)
    ; VI-NEXT: [[LSHR8:%[0-9]+]]:_(i16) = G_LSHR [[SHL2]], [[C]](i16)
    ; VI-NEXT: [[LSHR9:%[0-9]+]]:_(i16) = G_LSHR [[LSHR8]], [[AND5]](i16)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL5]], [[LSHR9]]
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C2]]
    ; VI-NEXT: [[XOR4:%[0-9]+]]:_(i16) = G_XOR [[TRUNC7]], [[C3]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[XOR4]], [[C2]]
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[OR1]], [[AND6]](i16)
    ; VI-NEXT: [[LSHR10:%[0-9]+]]:_(i16) = G_LSHR [[SHL3]], [[C]](i16)
    ; VI-NEXT: [[LSHR11:%[0-9]+]]:_(i16) = G_LSHR [[LSHR10]], [[AND7]](i16)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL6]], [[LSHR11]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL7]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST5]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fshr_v2s16_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(<2 x i16>) = G_AND [[COPY2]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C1]](i16), [[C1]](i16)
    ; GFX9-NEXT: [[XOR:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY2]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(<2 x i16>) = G_AND [[XOR]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C2]](i16), [[C2]](i16)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(<2 x i16>) = G_SHL [[COPY]], [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(<2 x i16>) = G_SHL [[SHL]], [[AND1]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[COPY1]], [[AND]](<2 x i16>)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; GFX9-NEXT: $vgpr0 = COPY [[OR]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = COPY $vgpr2
    %3:_(<2 x i16>) = G_FSHR %0, %1, %2(<2 x i16>)
    $vgpr0 = COPY %3(<2 x i16>)
...

---
name: test_fshr_s64_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; SI-LABEL: name: test_fshr_s64_s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i64) = COPY $vgpr4_vgpr5
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 63
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[COPY2]], [[C]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i64) = G_XOR [[COPY2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[XOR]], [[C]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[C2]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[AND1]](i64)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[SHL]], [[TRUNC]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[AND]](i64)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY1]], [[TRUNC1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[OR]](i64)
    ;
    ; VI-LABEL: name: test_fshr_s64_s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i64) = COPY $vgpr4_vgpr5
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 63
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[COPY2]], [[C]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; VI-NEXT: [[XOR:%[0-9]+]]:_(i64) = G_XOR [[COPY2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[XOR]], [[C]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[C2]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[AND1]](i64)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[SHL]], [[TRUNC]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[AND]](i64)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY1]], [[TRUNC1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[OR]](i64)
    ;
    ; GFX9-LABEL: name: test_fshr_s64_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i64) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 63
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[COPY2]], [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; GFX9-NEXT: [[XOR:%[0-9]+]]:_(i64) = G_XOR [[COPY2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[XOR]], [[C]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[C2]](i32)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[AND1]](i64)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[SHL]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[AND]](i64)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY1]], [[TRUNC1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[OR]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(i64) = COPY $vgpr4_vgpr5
    %3:_(i64) = G_FSHR %0, %1, %2(i64)
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: test_fshr_s8_s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fshr_s8_s8
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i32) = G_XOR [[COPY2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[XOR]], [[C]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C2]](i32)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND1]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C3]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[AND]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_fshr_s8_s8
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; VI-NEXT: [[XOR:%[0-9]+]]:_(i32) = G_XOR [[COPY2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[XOR]], [[C]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C2]](i16)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[AND1]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C3]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND2]](i16)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[AND]](i32)
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C3]]
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C3]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[AND4]], [[AND3]](i16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SHL1]](i16)
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[ANYEXT]], [[ANYEXT1]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-LABEL: name: test_fshr_s8_s8
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; GFX9-NEXT: [[XOR:%[0-9]+]]:_(i32) = G_XOR [[COPY2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[XOR]], [[C]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C2]](i16)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[AND1]](i32)
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C3]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND2]](i16)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[AND]](i32)
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C3]]
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C3]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[AND4]], [[AND3]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SHL1]](i16)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[ANYEXT]], [[ANYEXT1]]
    ; GFX9-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i8) = G_TRUNC %0(i32)
    %4:_(i8) = G_TRUNC %1(i32)
    %5:_(i8) = G_TRUNC %2(i32)
    %6:_(i8) = G_FSHR %3, %4, %5(i8)
    %7:_(i32) = G_ANYEXT %6(i8)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fshr_s24_s24
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fshr_s24_s24
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C2]]
    ; SI-NEXT: [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[C1]](i32)
    ; SI-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(f32) = G_AMDGPU_RCP_IFLAG [[UITOFP]](f32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41EFFFFFC0000000
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[AMDGPU_RCP_IFLAG]], [[C3]]
    ; SI-NEXT: [[FPTOUI:%[0-9]+]]:_(i32) = G_FPTOUI [[FMUL]](f32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C4]], [[C1]]
    ; SI-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SUB]], [[FPTOUI]]
    ; SI-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[FPTOUI]], [[MUL]]
    ; SI-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[FPTOUI]], [[UMULH]]
    ; SI-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[ADD]]
    ; SI-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UMULH1]], [[C1]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[AND]], [[MUL1]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SUB1]](i32), [[C1]]
    ; SI-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C1]]
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[SUB2]], [[SUB1]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SELECT]](i32), [[C1]]
    ; SI-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[SELECT]], [[C1]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SUB3]], [[SELECT]]
    ; SI-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[C]], [[SELECT1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C5]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SUB4]], [[C2]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND1]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[SELECT1]], [[C2]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C2]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND3]], [[AND2]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_fshr_s24_s24
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C2]]
    ; VI-NEXT: [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[C1]](i32)
    ; VI-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(f32) = G_AMDGPU_RCP_IFLAG [[UITOFP]](f32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41EFFFFFC0000000
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[AMDGPU_RCP_IFLAG]], [[C3]]
    ; VI-NEXT: [[FPTOUI:%[0-9]+]]:_(i32) = G_FPTOUI [[FMUL]](f32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C4]], [[C1]]
    ; VI-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SUB]], [[FPTOUI]]
    ; VI-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[FPTOUI]], [[MUL]]
    ; VI-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[FPTOUI]], [[UMULH]]
    ; VI-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[ADD]]
    ; VI-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UMULH1]], [[C1]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[AND]], [[MUL1]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SUB1]](i32), [[C1]]
    ; VI-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C1]]
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[SUB2]], [[SUB1]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SELECT]](i32), [[C1]]
    ; VI-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[SELECT]], [[C1]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SUB3]], [[SELECT]]
    ; VI-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[C]], [[SELECT1]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C5]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SUB4]], [[C2]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND1]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[SELECT1]], [[C2]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C2]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND3]], [[AND2]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-LABEL: name: test_fshr_s24_s24
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C2]]
    ; GFX9-NEXT: [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[C1]](i32)
    ; GFX9-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(f32) = G_AMDGPU_RCP_IFLAG [[UITOFP]](f32)
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41EFFFFFC0000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[AMDGPU_RCP_IFLAG]], [[C3]]
    ; GFX9-NEXT: [[FPTOUI:%[0-9]+]]:_(i32) = G_FPTOUI [[FMUL]](f32)
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C4]], [[C1]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SUB]], [[FPTOUI]]
    ; GFX9-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[FPTOUI]], [[MUL]]
    ; GFX9-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[FPTOUI]], [[UMULH]]
    ; GFX9-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[ADD]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UMULH1]], [[C1]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[AND]], [[MUL1]]
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SUB1]](i32), [[C1]]
    ; GFX9-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C1]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[SUB2]], [[SUB1]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SELECT]](i32), [[C1]]
    ; GFX9-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[SELECT]], [[C1]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SUB3]], [[SELECT]]
    ; GFX9-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[C]], [[SELECT1]]
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C5]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SUB4]], [[C2]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND1]](i32)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[SELECT1]], [[C2]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C2]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND3]], [[AND2]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; GFX9-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i24) = G_TRUNC %0(i32)
    %4:_(i24) = G_TRUNC %1(i32)
    %5:_(i24) = G_TRUNC %2(i32)
    %6:_(i24) = G_FSHR %3, %4, %5(i24)
    %7:_(i32) = G_ANYEXT %6(i24)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fshr_v3s16_v3s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; SI-LABEL: name: test_fshr_v3s16_v3s16
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; SI-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr3
    ; SI-NEXT: [[COPY4:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr4
    ; SI-NEXT: [[COPY5:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr5
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[COPY2]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[COPY3]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[C1]], [[C2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[C1]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C2]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[AND]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[ZEXT]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C5]]
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[C4]](i32)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[AND1]](i16)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR2]], [[ZEXT1]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC]], [[TRUNC1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[C1]], [[C2]]
    ; SI-NEXT: [[XOR1:%[0-9]+]]:_(i16) = G_XOR [[C1]], [[C3]]
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[XOR1]], [[C2]]
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[AND3]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[ZEXT2]](i32)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; SI-NEXT: [[COPY6:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LSHR1]], [[COPY6]](i32)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[AND4]](i16)
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LSHR4]], [[ZEXT3]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC2]], [[TRUNC3]]
    ; SI-NEXT: [[COPY7:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[BITCAST2]], [[COPY7]](i32)
    ; SI-NEXT: [[COPY8:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LSHR1]], [[COPY8]](i32)
    ; SI-NEXT: [[COPY9:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[COPY10:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[COPY10]], [[C]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[COPY9]], [[SHL4]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[XOR2:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY4]], [[BITCAST4]]
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[XOR2]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C2]]
    ; SI-NEXT: [[XOR3:%[0-9]+]]:_(i16) = G_XOR [[TRUNC4]], [[C3]]
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[XOR3]], [[C2]]
    ; SI-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[AND5]](i16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT]], [[ZEXT4]](i32)
    ; SI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[SHL5]](i32)
    ; SI-NEXT: [[COPY11:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[SHL2]], [[C5]]
    ; SI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[AND7]], [[COPY11]](i32)
    ; SI-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[AND6]](i16)
    ; SI-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LSHR7]], [[ZEXT5]](i32)
    ; SI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC6]], [[TRUNC7]]
    ; SI-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C2]]
    ; SI-NEXT: [[XOR4:%[0-9]+]]:_(i16) = G_XOR [[TRUNC5]], [[C3]]
    ; SI-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[XOR4]], [[C2]]
    ; SI-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[AND8]](i16)
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[OR1]](i16)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT1]], [[ZEXT6]](i32)
    ; SI-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[SHL6]](i32)
    ; SI-NEXT: [[COPY12:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[SHL3]], [[C5]]
    ; SI-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[AND10]], [[COPY12]](i32)
    ; SI-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[AND9]](i16)
    ; SI-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LSHR9]], [[ZEXT7]](i32)
    ; SI-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR10]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC8]], [[TRUNC9]]
    ; SI-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[C1]], [[C2]]
    ; SI-NEXT: [[XOR5:%[0-9]+]]:_(i16) = G_XOR [[C1]], [[C3]]
    ; SI-NEXT: [[AND12:%[0-9]+]]:_(i16) = G_AND [[XOR5]], [[C2]]
    ; SI-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[AND11]](i16)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[BITCAST1]], [[ZEXT8]](i32)
    ; SI-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[SHL7]](i32)
    ; SI-NEXT: [[COPY13:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND13:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C5]]
    ; SI-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[AND13]], [[COPY13]](i32)
    ; SI-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[AND12]](i16)
    ; SI-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LSHR11]], [[ZEXT9]](i32)
    ; SI-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR12]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC10]], [[TRUNC11]]
    ; SI-NEXT: [[COPY14:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[BITCAST3]], [[COPY14]](i32)
    ; SI-NEXT: [[COPY15:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[COPY16:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[COPY16]], [[C]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[COPY15]], [[SHL9]]
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; SI-NEXT: [[XOR6:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY5]], [[BITCAST6]]
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[XOR6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[AND14:%[0-9]+]]:_(i16) = G_AND [[TRUNC12]], [[C2]]
    ; SI-NEXT: [[XOR7:%[0-9]+]]:_(i16) = G_XOR [[TRUNC12]], [[C3]]
    ; SI-NEXT: [[AND15:%[0-9]+]]:_(i16) = G_AND [[XOR7]], [[C2]]
    ; SI-NEXT: [[ZEXT10:%[0-9]+]]:_(i32) = G_ZEXT [[AND14]](i16)
    ; SI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[OR5]](i16)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT2]], [[ZEXT10]](i32)
    ; SI-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[SHL10]](i32)
    ; SI-NEXT: [[COPY17:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND16:%[0-9]+]]:_(i32) = G_AND [[SHL8]], [[C5]]
    ; SI-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[AND16]], [[COPY17]](i32)
    ; SI-NEXT: [[ZEXT11:%[0-9]+]]:_(i32) = G_ZEXT [[AND15]](i16)
    ; SI-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LSHR13]], [[ZEXT11]](i32)
    ; SI-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR14]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC13]], [[TRUNC14]]
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[ZEXT12:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; SI-NEXT: [[ZEXT13:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[ZEXT13]], [[C]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[ZEXT12]], [[SHL11]]
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; SI-NEXT: [[ZEXT14:%[0-9]+]]:_(i32) = G_ZEXT [[OR7]](i16)
    ; SI-NEXT: [[AND17:%[0-9]+]]:_(i32) = G_AND [[BITCAST8]], [[C5]]
    ; SI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[AND17]], [[C]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[ZEXT14]], [[SHL12]]
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; SI-NEXT: [[AND18:%[0-9]+]]:_(i32) = G_AND [[BITCAST9]], [[C5]]
    ; SI-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[AND18]], [[C]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[LSHR15]], [[SHL13]]
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST10]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST11]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST12]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fshr_v3s16_v3s16
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; VI-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr3
    ; VI-NEXT: [[COPY4:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr4
    ; VI-NEXT: [[COPY5:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr5
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[COPY2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[COPY3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[C1]], [[C2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; VI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[C1]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C2]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[AND]](i16)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C1]](i16)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[LSHR2]], [[AND1]](i16)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL]], [[LSHR3]]
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[C1]], [[C2]]
    ; VI-NEXT: [[XOR1:%[0-9]+]]:_(i16) = G_XOR [[C1]], [[C3]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[XOR1]], [[C2]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[AND2]](i16)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC4]], [[C1]](i16)
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[LSHR4]], [[AND3]](i16)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL1]], [[LSHR5]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC3]], [[C1]](i16)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC4]], [[C1]](i16)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[COPY6:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[C4]], [[C]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[COPY6]], [[SHL4]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[XOR2:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY4]], [[BITCAST4]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[XOR2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C2]]
    ; VI-NEXT: [[XOR3:%[0-9]+]]:_(i16) = G_XOR [[TRUNC6]], [[C3]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[XOR3]], [[C2]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i16) = G_SHL [[OR]], [[AND4]](i16)
    ; VI-NEXT: [[LSHR7:%[0-9]+]]:_(i16) = G_LSHR [[SHL2]], [[C1]](i16)
    ; VI-NEXT: [[LSHR8:%[0-9]+]]:_(i16) = G_LSHR [[LSHR7]], [[AND5]](i16)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL5]], [[LSHR8]]
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C2]]
    ; VI-NEXT: [[XOR4:%[0-9]+]]:_(i16) = G_XOR [[TRUNC7]], [[C3]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[XOR4]], [[C2]]
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[OR1]], [[AND6]](i16)
    ; VI-NEXT: [[LSHR9:%[0-9]+]]:_(i16) = G_LSHR [[SHL3]], [[C1]](i16)
    ; VI-NEXT: [[LSHR10:%[0-9]+]]:_(i16) = G_LSHR [[LSHR9]], [[AND7]](i16)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL6]], [[LSHR10]]
    ; VI-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[C1]], [[C2]]
    ; VI-NEXT: [[XOR5:%[0-9]+]]:_(i16) = G_XOR [[C1]], [[C3]]
    ; VI-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[XOR5]], [[C2]]
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[AND8]](i16)
    ; VI-NEXT: [[LSHR11:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC5]], [[C1]](i16)
    ; VI-NEXT: [[LSHR12:%[0-9]+]]:_(i16) = G_LSHR [[LSHR11]], [[AND9]](i16)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL7]], [[LSHR12]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i16) = G_SHL [[TRUNC5]], [[C1]](i16)
    ; VI-NEXT: [[COPY7:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[COPY8:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[COPY8]], [[C]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[COPY7]], [[SHL9]]
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; VI-NEXT: [[XOR6:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY5]], [[BITCAST6]]
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[XOR6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[AND10:%[0-9]+]]:_(i16) = G_AND [[TRUNC8]], [[C2]]
    ; VI-NEXT: [[XOR7:%[0-9]+]]:_(i16) = G_XOR [[TRUNC8]], [[C3]]
    ; VI-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[XOR7]], [[C2]]
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i16) = G_SHL [[OR5]], [[AND10]](i16)
    ; VI-NEXT: [[LSHR13:%[0-9]+]]:_(i16) = G_LSHR [[SHL8]], [[C1]](i16)
    ; VI-NEXT: [[LSHR14:%[0-9]+]]:_(i16) = G_LSHR [[LSHR13]], [[AND11]](i16)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL10]], [[LSHR14]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL11]]
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR7]](i16)
    ; VI-NEXT: [[AND12:%[0-9]+]]:_(i32) = G_AND [[BITCAST8]], [[C4]]
    ; VI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[AND12]], [[C]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL12]]
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; VI-NEXT: [[AND13:%[0-9]+]]:_(i32) = G_AND [[BITCAST9]], [[C4]]
    ; VI-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[AND13]], [[C]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[LSHR15]], [[SHL13]]
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST10]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST11]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST12]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fshr_v3s16_v3s16
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr3
    ; GFX9-NEXT: [[COPY4:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr4
    ; GFX9-NEXT: [[COPY5:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr5
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(<2 x i16>) = G_AND [[COPY4]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C1]](i16), [[C1]](i16)
    ; GFX9-NEXT: [[XOR:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY4]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(<2 x i16>) = G_AND [[XOR]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C2]](i16), [[C2]](i16)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(<2 x i16>) = G_SHL [[COPY]], [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(<2 x i16>) = G_SHL [[SHL]], [[AND1]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[COPY2]], [[AND]](<2 x i16>)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; GFX9-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(<2 x i16>) = G_AND [[COPY5]], [[BUILD_VECTOR3]]
    ; GFX9-NEXT: [[BUILD_VECTOR4:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C1]](i16), [[C1]](i16)
    ; GFX9-NEXT: [[XOR1:%[0-9]+]]:_(<2 x i16>) = G_XOR [[COPY5]], [[BUILD_VECTOR4]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(<2 x i16>) = G_AND [[XOR1]], [[BUILD_VECTOR3]]
    ; GFX9-NEXT: [[BUILD_VECTOR5:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C2]](i16), [[C2]](i16)
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(<2 x i16>) = G_SHL [[COPY1]], [[BUILD_VECTOR5]](<2 x i16>)
    ; GFX9-NEXT: [[SHL3:%[0-9]+]]:_(<2 x i16>) = G_SHL [[SHL2]], [[AND3]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[COPY3]], [[AND2]](<2 x i16>)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[SHL3]], [[LSHR1]]
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[OR1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C3]](i32)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR6:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR7:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[OR]](<2 x i16>)
    ; GFX9-NEXT: $vgpr1 = COPY [[BUILD_VECTOR7]](<2 x i16>)
    ; GFX9-NEXT: $vgpr2 = COPY [[BUILD_VECTOR6]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = COPY $vgpr2
    %3:_(<2 x i16>) = COPY $vgpr3
    %4:_(<2 x i16>) = COPY $vgpr4
    %5:_(<2 x i16>) = COPY $vgpr5
    %6:_(<2 x i16>) = G_IMPLICIT_DEF
    %7:_(<6 x i16>) = G_CONCAT_VECTORS %0(<2 x i16>), %1(<2 x i16>), %6(<2 x i16>)
    %8:_(<3 x i16>), %9:_(<3 x i16>) = G_UNMERGE_VALUES %7(<6 x i16>)
    %10:_(<6 x i16>) = G_CONCAT_VECTORS %2(<2 x i16>), %3(<2 x i16>), %6(<2 x i16>)
    %11:_(<3 x i16>), %12:_(<3 x i16>) = G_UNMERGE_VALUES %10(<6 x i16>)
    %13:_(<6 x i16>) = G_CONCAT_VECTORS %4(<2 x i16>), %5(<2 x i16>), %6(<2 x i16>)
    %14:_(<3 x i16>), %15:_(<3 x i16>) = G_UNMERGE_VALUES %13(<6 x i16>)
    %16:_(<3 x i16>) = G_FSHR %8, %11, %14(<3 x i16>)
    %17:_(<3 x i16>) = G_IMPLICIT_DEF
    %18:_(<6 x i16>) = G_CONCAT_VECTORS %16(<3 x i16>), %17(<3 x i16>)
    %19:_(<2 x i16>), %20:_(<2 x i16>), %21:_(<2 x i16>) = G_UNMERGE_VALUES %18(<6 x i16>)
    $vgpr0 = COPY %19(<2 x i16>)
    $vgpr1 = COPY %20(<2 x i16>)
    $vgpr2 = COPY %21(<2 x i16>)
...

---
name: test_fshr_v4s16_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; SI-LABEL: name: test_fshr_v4s16_v4s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY2]](<4 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C1]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C2]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[AND]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[ZEXT]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C5]]
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[C4]](i32)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[AND1]](i16)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR2]], [[ZEXT1]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC]], [[TRUNC1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; SI-NEXT: [[XOR1:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[XOR1]], [[C2]]
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[AND3]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[ZEXT2]](i32)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; SI-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LSHR1]], [[COPY3]](i32)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[AND4]](i16)
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LSHR4]], [[ZEXT3]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC2]], [[TRUNC3]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C1]](i32)
    ; SI-NEXT: [[COPY4:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[BITCAST2]], [[COPY4]](i32)
    ; SI-NEXT: [[COPY5:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LSHR6]], [[COPY5]](i32)
    ; SI-NEXT: [[COPY6:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[COPY7:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[COPY7]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[COPY6]], [[SHL4]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[XOR2:%[0-9]+]]:_(<2 x i16>) = G_XOR [[UV4]], [[BITCAST3]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[XOR2]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; SI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C1]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C2]]
    ; SI-NEXT: [[XOR3:%[0-9]+]]:_(i16) = G_XOR [[TRUNC4]], [[C3]]
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[XOR3]], [[C2]]
    ; SI-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[AND5]](i16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT]], [[ZEXT4]](i32)
    ; SI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[SHL5]](i32)
    ; SI-NEXT: [[COPY8:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[SHL2]], [[C5]]
    ; SI-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[AND7]], [[COPY8]](i32)
    ; SI-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[AND6]](i16)
    ; SI-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LSHR8]], [[ZEXT5]](i32)
    ; SI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC6]], [[TRUNC7]]
    ; SI-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C2]]
    ; SI-NEXT: [[XOR4:%[0-9]+]]:_(i16) = G_XOR [[TRUNC5]], [[C3]]
    ; SI-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[XOR4]], [[C2]]
    ; SI-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[AND8]](i16)
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[OR1]](i16)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT1]], [[ZEXT6]](i32)
    ; SI-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[SHL6]](i32)
    ; SI-NEXT: [[COPY9:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[SHL3]], [[C5]]
    ; SI-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[AND10]], [[COPY9]](i32)
    ; SI-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[AND9]](i16)
    ; SI-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LSHR10]], [[ZEXT7]](i32)
    ; SI-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC8]], [[TRUNC9]]
    ; SI-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; SI-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXT9]], [[C1]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT8]], [[SHL7]]
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C1]](i32)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C1]](i32)
    ; SI-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; SI-NEXT: [[XOR5:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; SI-NEXT: [[AND12:%[0-9]+]]:_(i16) = G_AND [[XOR5]], [[C2]]
    ; SI-NEXT: [[ZEXT10:%[0-9]+]]:_(i32) = G_ZEXT [[AND11]](i16)
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[BITCAST6]], [[ZEXT10]](i32)
    ; SI-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[SHL8]](i32)
    ; SI-NEXT: [[COPY10:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND13:%[0-9]+]]:_(i32) = G_AND [[BITCAST7]], [[C5]]
    ; SI-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[AND13]], [[COPY10]](i32)
    ; SI-NEXT: [[ZEXT11:%[0-9]+]]:_(i32) = G_ZEXT [[AND12]](i16)
    ; SI-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LSHR14]], [[ZEXT11]](i32)
    ; SI-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR15]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC10]], [[TRUNC11]]
    ; SI-NEXT: [[AND14:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; SI-NEXT: [[XOR6:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; SI-NEXT: [[AND15:%[0-9]+]]:_(i16) = G_AND [[XOR6]], [[C2]]
    ; SI-NEXT: [[ZEXT12:%[0-9]+]]:_(i32) = G_ZEXT [[AND14]](i16)
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[LSHR12]], [[ZEXT12]](i32)
    ; SI-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[SHL9]](i32)
    ; SI-NEXT: [[COPY11:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LSHR13]], [[COPY11]](i32)
    ; SI-NEXT: [[ZEXT13:%[0-9]+]]:_(i32) = G_ZEXT [[AND15]](i16)
    ; SI-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LSHR16]], [[ZEXT13]](i32)
    ; SI-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR17]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC12]], [[TRUNC13]]
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C1]](i32)
    ; SI-NEXT: [[COPY12:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[BITCAST8]], [[COPY12]](i32)
    ; SI-NEXT: [[COPY13:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LSHR18]], [[COPY13]](i32)
    ; SI-NEXT: [[COPY14:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[COPY15:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[COPY15]], [[C1]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[COPY14]], [[SHL12]]
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; SI-NEXT: [[XOR7:%[0-9]+]]:_(<2 x i16>) = G_XOR [[UV5]], [[BITCAST9]]
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[XOR7]](<2 x i16>)
    ; SI-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; SI-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C1]](i32)
    ; SI-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR19]](i32)
    ; SI-NEXT: [[AND16:%[0-9]+]]:_(i16) = G_AND [[TRUNC14]], [[C2]]
    ; SI-NEXT: [[XOR8:%[0-9]+]]:_(i16) = G_XOR [[TRUNC14]], [[C3]]
    ; SI-NEXT: [[AND17:%[0-9]+]]:_(i16) = G_AND [[XOR8]], [[C2]]
    ; SI-NEXT: [[ZEXT14:%[0-9]+]]:_(i32) = G_ZEXT [[AND16]](i16)
    ; SI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[OR6]](i16)
    ; SI-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT2]], [[ZEXT14]](i32)
    ; SI-NEXT: [[TRUNC16:%[0-9]+]]:_(i16) = G_TRUNC [[SHL13]](i32)
    ; SI-NEXT: [[COPY16:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND18:%[0-9]+]]:_(i32) = G_AND [[SHL10]], [[C5]]
    ; SI-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[AND18]], [[COPY16]](i32)
    ; SI-NEXT: [[ZEXT15:%[0-9]+]]:_(i32) = G_ZEXT [[AND17]](i16)
    ; SI-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LSHR20]], [[ZEXT15]](i32)
    ; SI-NEXT: [[TRUNC17:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR21]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC16]], [[TRUNC17]]
    ; SI-NEXT: [[AND19:%[0-9]+]]:_(i16) = G_AND [[TRUNC15]], [[C2]]
    ; SI-NEXT: [[XOR9:%[0-9]+]]:_(i16) = G_XOR [[TRUNC15]], [[C3]]
    ; SI-NEXT: [[AND20:%[0-9]+]]:_(i16) = G_AND [[XOR9]], [[C2]]
    ; SI-NEXT: [[ZEXT16:%[0-9]+]]:_(i32) = G_ZEXT [[AND19]](i16)
    ; SI-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[OR7]](i16)
    ; SI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ANYEXT3]], [[ZEXT16]](i32)
    ; SI-NEXT: [[TRUNC18:%[0-9]+]]:_(i16) = G_TRUNC [[SHL14]](i32)
    ; SI-NEXT: [[COPY17:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; SI-NEXT: [[AND21:%[0-9]+]]:_(i32) = G_AND [[SHL11]], [[C5]]
    ; SI-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[AND21]], [[COPY17]](i32)
    ; SI-NEXT: [[ZEXT17:%[0-9]+]]:_(i32) = G_ZEXT [[AND20]](i16)
    ; SI-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LSHR22]], [[ZEXT17]](i32)
    ; SI-NEXT: [[TRUNC19:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR23]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i16) = disjoint G_OR [[TRUNC18]], [[TRUNC19]]
    ; SI-NEXT: [[ZEXT18:%[0-9]+]]:_(i32) = G_ZEXT [[OR9]](i16)
    ; SI-NEXT: [[ZEXT19:%[0-9]+]]:_(i32) = G_ZEXT [[OR10]](i16)
    ; SI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[ZEXT19]], [[C1]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[ZEXT18]], [[SHL15]]
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR11]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST11]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_fshr_v4s16_v4s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY2]](<4 x i16>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; VI-NEXT: [[XOR:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[XOR]], [[C2]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[AND]](i16)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C]](i16)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[LSHR2]], [[AND1]](i16)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL]], [[LSHR3]]
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; VI-NEXT: [[XOR1:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[XOR1]], [[C2]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[AND2]](i16)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C]](i16)
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[LSHR4]], [[AND3]](i16)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL1]], [[LSHR5]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC4]], [[C]](i16)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC5]], [[C]](i16)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[C4]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[COPY3]], [[SHL4]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[XOR2:%[0-9]+]]:_(<2 x i16>) = G_XOR [[UV4]], [[BITCAST3]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[XOR2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; VI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C2]]
    ; VI-NEXT: [[XOR3:%[0-9]+]]:_(i16) = G_XOR [[TRUNC6]], [[C3]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[XOR3]], [[C2]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i16) = G_SHL [[OR]], [[AND4]](i16)
    ; VI-NEXT: [[LSHR8:%[0-9]+]]:_(i16) = G_LSHR [[SHL2]], [[C]](i16)
    ; VI-NEXT: [[LSHR9:%[0-9]+]]:_(i16) = G_LSHR [[LSHR8]], [[AND5]](i16)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL5]], [[LSHR9]]
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C2]]
    ; VI-NEXT: [[XOR4:%[0-9]+]]:_(i16) = G_XOR [[TRUNC7]], [[C3]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[XOR4]], [[C2]]
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[OR1]], [[AND6]](i16)
    ; VI-NEXT: [[LSHR10:%[0-9]+]]:_(i16) = G_LSHR [[SHL3]], [[C]](i16)
    ; VI-NEXT: [[LSHR11:%[0-9]+]]:_(i16) = G_LSHR [[LSHR10]], [[AND7]](i16)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL6]], [[LSHR11]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL7]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; VI-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR12]](i32)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR13]](i32)
    ; VI-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; VI-NEXT: [[XOR5:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; VI-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[XOR5]], [[C2]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i16) = G_SHL [[TRUNC8]], [[AND8]](i16)
    ; VI-NEXT: [[LSHR14:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC10]], [[C]](i16)
    ; VI-NEXT: [[LSHR15:%[0-9]+]]:_(i16) = G_LSHR [[LSHR14]], [[AND9]](i16)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL8]], [[LSHR15]]
    ; VI-NEXT: [[AND10:%[0-9]+]]:_(i16) = G_AND [[C]], [[C2]]
    ; VI-NEXT: [[XOR6:%[0-9]+]]:_(i16) = G_XOR [[C]], [[C3]]
    ; VI-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[XOR6]], [[C2]]
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i16) = G_SHL [[TRUNC9]], [[AND10]](i16)
    ; VI-NEXT: [[LSHR16:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC11]], [[C]](i16)
    ; VI-NEXT: [[LSHR17:%[0-9]+]]:_(i16) = G_LSHR [[LSHR16]], [[AND11]](i16)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL9]], [[LSHR17]]
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; VI-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR18]](i32)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i16) = G_SHL [[TRUNC12]], [[C]](i16)
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i16) = G_SHL [[TRUNC13]], [[C]](i16)
    ; VI-NEXT: [[COPY4:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[COPY5:%[0-9]+]]:_(i32) = COPY [[C4]](i32)
    ; VI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[COPY5]], [[C1]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[COPY4]], [[SHL12]]
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; VI-NEXT: [[XOR7:%[0-9]+]]:_(<2 x i16>) = G_XOR [[UV5]], [[BITCAST9]]
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[XOR7]](<2 x i16>)
    ; VI-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; VI-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR19]](i32)
    ; VI-NEXT: [[AND12:%[0-9]+]]:_(i16) = G_AND [[TRUNC14]], [[C2]]
    ; VI-NEXT: [[XOR8:%[0-9]+]]:_(i16) = G_XOR [[TRUNC14]], [[C3]]
    ; VI-NEXT: [[AND13:%[0-9]+]]:_(i16) = G_AND [[XOR8]], [[C2]]
    ; VI-NEXT: [[SHL13:%[0-9]+]]:_(i16) = G_SHL [[OR6]], [[AND12]](i16)
    ; VI-NEXT: [[LSHR20:%[0-9]+]]:_(i16) = G_LSHR [[SHL10]], [[C]](i16)
    ; VI-NEXT: [[LSHR21:%[0-9]+]]:_(i16) = G_LSHR [[LSHR20]], [[AND13]](i16)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL13]], [[LSHR21]]
    ; VI-NEXT: [[AND14:%[0-9]+]]:_(i16) = G_AND [[TRUNC15]], [[C2]]
    ; VI-NEXT: [[XOR9:%[0-9]+]]:_(i16) = G_XOR [[TRUNC15]], [[C3]]
    ; VI-NEXT: [[AND15:%[0-9]+]]:_(i16) = G_AND [[XOR9]], [[C2]]
    ; VI-NEXT: [[SHL14:%[0-9]+]]:_(i16) = G_SHL [[OR7]], [[AND14]](i16)
    ; VI-NEXT: [[LSHR22:%[0-9]+]]:_(i16) = G_LSHR [[SHL11]], [[C]](i16)
    ; VI-NEXT: [[LSHR23:%[0-9]+]]:_(i16) = G_LSHR [[LSHR22]], [[AND15]](i16)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i16) = disjoint G_OR [[SHL14]], [[LSHR23]]
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR9]](i16)
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[OR10]](i16)
    ; VI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C1]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL15]]
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR11]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST11]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_fshr_v4s16_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY2]](<4 x i16>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(<2 x i16>) = G_AND [[UV4]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -1
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C1]](i16), [[C1]](i16)
    ; GFX9-NEXT: [[XOR:%[0-9]+]]:_(<2 x i16>) = G_XOR [[UV4]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(<2 x i16>) = G_AND [[XOR]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C2]](i16), [[C2]](i16)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(<2 x i16>) = G_SHL [[UV]], [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(<2 x i16>) = G_SHL [[SHL]], [[AND1]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[UV2]], [[AND]](<2 x i16>)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[SHL1]], [[LSHR]]
    ; GFX9-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(<2 x i16>) = G_AND [[UV5]], [[BUILD_VECTOR3]]
    ; GFX9-NEXT: [[BUILD_VECTOR4:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C1]](i16), [[C1]](i16)
    ; GFX9-NEXT: [[XOR1:%[0-9]+]]:_(<2 x i16>) = G_XOR [[UV5]], [[BUILD_VECTOR4]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(<2 x i16>) = G_AND [[XOR1]], [[BUILD_VECTOR3]]
    ; GFX9-NEXT: [[BUILD_VECTOR5:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C2]](i16), [[C2]](i16)
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(<2 x i16>) = G_SHL [[UV1]], [[BUILD_VECTOR5]](<2 x i16>)
    ; GFX9-NEXT: [[SHL3:%[0-9]+]]:_(<2 x i16>) = G_SHL [[SHL2]], [[AND3]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[UV3]], [[AND2]](<2 x i16>)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[SHL3]], [[LSHR1]]
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[OR]](<2 x i16>), [[OR1]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x i16>) = COPY $vgpr4_vgpr5
    %3:_(<4 x i16>) = G_FSHR %0, %1, %2(<4 x i16>)
    $vgpr0_vgpr1 = COPY %3(<4 x i16>)
...
