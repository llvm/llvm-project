# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=gfx900 -run-pass=regbankselect -verify-machineinstrs -regbankselect-fast -o - %s  | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx900 -run-pass=regbankselect -verify-machineinstrs -regbankselect-greedy -o - %s  | FileCheck %s

---
name: smax_s32_ss
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: smax_s32_ss
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:sgpr(i32) = G_SMAX [[COPY]], [[COPY1]]
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = G_SMAX %0, %1
...

---
name: smax_s32_sv
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $vgpr0

    ; CHECK-LABEL: name: smax_s32_sv
    ; CHECK: liveins: $sgpr0, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(i32) = G_SMAX [[COPY2]], [[COPY1]]
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $vgpr0
    %2:_(i32) = G_SMAX %0, %1
...

---
name: smax_s32_vs
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $vgpr0

    ; CHECK-LABEL: name: smax_s32_vs
    ; CHECK: liveins: $sgpr0, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(i32) = G_SMAX [[COPY]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[SMAX]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $sgpr0
    %2:_(i32) = G_SMAX %0, %1
    $vgpr0 = COPY %2(i32)

...

---
name: smax_s32_vv
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: smax_s32_vv
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(i32) = G_SMAX [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $vgpr0 = COPY [[SMAX]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = G_SMAX %0, %1
    $vgpr0 = COPY %2(i32)
...

# FIXME: This should use VGPR instruction
---
name: smax_s32_ss_vgpr_use
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: smax_s32_ss_vgpr_use
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:sgpr(i32) = G_SMAX [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $vgpr0 = COPY [[SMAX]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = G_SMAX %0, %1
    $vgpr0 = COPY %2(i32)
...

---
name: smax_s16_ss
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: smax_s16_ss
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY1]](i32)
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:sgpr(i32) = G_SEXT [[TRUNC]](i16)
    ; CHECK-NEXT: [[SEXT1:%[0-9]+]]:sgpr(i32) = G_SEXT [[TRUNC1]](i16)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:sgpr(i32) = G_SMAX [[SEXT]], [[SEXT1]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:sgpr(i16) = G_TRUNC [[SMAX]](i32)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[TRUNC2]](i16)
    ; CHECK-NEXT: $sgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16) = G_SMAX %2, %3
    %5:_(i32) = G_ANYEXT %4(i16)
    $sgpr0 = COPY %5(i32)

...

---
name: smax_s16_ss_vgpr_use
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: smax_s16_ss_vgpr_use
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY1]](i32)
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:sgpr(i32) = G_SEXT [[TRUNC]](i16)
    ; CHECK-NEXT: [[SEXT1:%[0-9]+]]:sgpr(i32) = G_SEXT [[TRUNC1]](i16)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:sgpr(i32) = G_SMAX [[SEXT]], [[SEXT1]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:sgpr(i16) = G_TRUNC [[SMAX]](i32)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[TRUNC2]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16) = G_SMAX %2, %3
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...

---
name: smax_v2s16_ss
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: smax_v2s16_ss
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(<2 x i16>) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(<2 x i16>) = COPY $sgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:sgpr(i32) = G_SEXT_INREG [[BITCAST]], 16
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:sgpr(i32) = G_ASHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:sgpr(i32) = G_SEXT_INREG [[BITCAST1]], 16
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:sgpr(i32) = G_ASHR [[BITCAST1]], [[C1]](i32)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:sgpr(i32) = G_SMAX [[SEXT_INREG]], [[SEXT_INREG1]]
    ; CHECK-NEXT: [[SMAX1:%[0-9]+]]:sgpr(i32) = G_SMAX [[ASHR]], [[ASHR1]]
    ; CHECK-NEXT: [[BUILD_VECTOR_TRUNC:%[0-9]+]]:sgpr(<2 x i16>) = G_BUILD_VECTOR_TRUNC [[SMAX]](i32), [[SMAX1]](i32)
    ; CHECK-NEXT: $sgpr0 = COPY [[BUILD_VECTOR_TRUNC]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $sgpr0
    %1:_(<2 x i16>) = COPY $sgpr1
    %2:_(<2 x i16>) = G_SMAX %0, %1
    $sgpr0 = COPY %2(<2 x i16>)
...

---
name: smax_v2s16_sv
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $vgpr0

    ; CHECK-LABEL: name: smax_v2s16_sv
    ; CHECK: liveins: $sgpr0, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(<2 x i16>) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(<2 x i16>) = COPY [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(<2 x i16>) = G_SMAX [[COPY2]], [[COPY1]]
    ; CHECK-NEXT: $vgpr0 = COPY [[SMAX]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $sgpr0
    %1:_(<2 x i16>) = COPY $vgpr0
    %2:_(<2 x i16>) = G_SMAX %0, %1
    $vgpr0 = COPY %2(<2 x i16>)
...

---
name: smax_v2s16_vs
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $vgpr0

    ; CHECK-LABEL: name: smax_v2s16_vs
    ; CHECK: liveins: $sgpr0, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(<2 x i16>) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(<2 x i16>) = COPY [[COPY1]](<2 x i16>)
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(<2 x i16>) = G_SMAX [[COPY]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[SMAX]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $sgpr0
    %2:_(<2 x i16>) = G_SMAX %0, %1
    $vgpr0 = COPY %2(<2 x i16>)
...

---
name: smax_v2s16_vv
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: smax_v2s16_vv
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(<2 x i16>) = COPY $vgpr1
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(<2 x i16>) = G_SMAX [[COPY]], [[COPY1]]
    ; CHECK-NEXT: $vgpr0 = COPY [[SMAX]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = G_SMAX %0, %1
    $vgpr0 = COPY %2(<2 x i16>)
...
