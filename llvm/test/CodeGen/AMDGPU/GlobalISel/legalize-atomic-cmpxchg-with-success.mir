# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=hawaii -O0 -run-pass=legalizer %s -o - | FileCheck %s

---
name: test_atomic_cmpxchg_with_success_s32_global
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3

    ; CHECK-LABEL: name: test_atomic_cmpxchg_with_success_s32_global
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[COPY2]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[AMDGPU_ATOMIC_CMPXCHG:%[0-9]+]]:_(i32) = G_AMDGPU_ATOMIC_CMPXCHG [[COPY]](p1), [[BUILD_VECTOR]] :: (load store syncscope("agent-one-as") monotonic monotonic (i32), addrspace 1)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[AMDGPU_ATOMIC_CMPXCHG]](i32), [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[AMDGPU_ATOMIC_CMPXCHG]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY3]](i32), implicit [[ICMP]](i1)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(i32) = COPY $vgpr3
    %3:_(i32), %4:_(i1) = G_ATOMIC_CMPXCHG_WITH_SUCCESS %0(p1), %1, %2 :: (load store syncscope("agent-one-as") monotonic monotonic (i32), addrspace 1)
    S_ENDPGM 0, implicit %3(i32), implicit %4(i1)

...

---
name: test_atomic_cmpxchg_with_success_s32_flat
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3

    ; CHECK-LABEL: name: test_atomic_cmpxchg_with_success_s32_flat
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[COPY2]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[AMDGPU_ATOMIC_CMPXCHG:%[0-9]+]]:_(i32) = G_AMDGPU_ATOMIC_CMPXCHG [[COPY]](p0), [[BUILD_VECTOR]] :: (load store syncscope("agent-one-as") monotonic monotonic (i32))
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[AMDGPU_ATOMIC_CMPXCHG]](i32), [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[AMDGPU_ATOMIC_CMPXCHG]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY3]](i32), implicit [[ICMP]](i1)
    %0:_(p0) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(i32) = COPY $vgpr3
    %3:_(i32), %4:_(i1) = G_ATOMIC_CMPXCHG_WITH_SUCCESS %0(p0), %1, %2 :: (load store syncscope("agent-one-as") monotonic monotonic (i32))
    S_ENDPGM 0, implicit %3(i32), implicit %4(i1)

...

---
name: test_atomic_cmpxchg_with_success_s32_local
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_atomic_cmpxchg_with_success_s32_local
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p3) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[ATOMIC_CMPXCHG:%[0-9]+]]:_(i32) = G_ATOMIC_CMPXCHG [[COPY]](p3), [[COPY1]], [[COPY2]] :: (load store syncscope("agent-one-as") monotonic monotonic (i32), addrspace 3)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[ATOMIC_CMPXCHG]](i32), [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[ATOMIC_CMPXCHG]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY3]](i32), implicit [[ICMP]](i1)
    %0:_(p3) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32), %4:_(i1) = G_ATOMIC_CMPXCHG_WITH_SUCCESS %0(p3), %1, %2 :: (load store syncscope("agent-one-as") monotonic monotonic (i32), addrspace 3)
    S_ENDPGM 0, implicit %3(i32), implicit %4(i1)

...

---
name: test_atomic_cmpxchg_with_success_s64_global
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; CHECK-LABEL: name: test_atomic_cmpxchg_with_success_s64_global
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i64) = COPY $vgpr4_vgpr5
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[COPY2]](i64), [[COPY1]](i64)
    ; CHECK-NEXT: [[AMDGPU_ATOMIC_CMPXCHG:%[0-9]+]]:_(i64) = G_AMDGPU_ATOMIC_CMPXCHG [[COPY]](p1), [[BUILD_VECTOR]] :: (load store syncscope("agent-one-as") monotonic monotonic (i64), addrspace 1)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[AMDGPU_ATOMIC_CMPXCHG]](i64), [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i64) = COPY [[AMDGPU_ATOMIC_CMPXCHG]](i64)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY3]](i64), implicit [[ICMP]](i1)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(i64) = COPY $vgpr4_vgpr5
    %3:_(i64), %4:_(i1) = G_ATOMIC_CMPXCHG_WITH_SUCCESS %0(p1), %1, %2 :: (load store syncscope("agent-one-as") monotonic monotonic (i64), addrspace 1)
    S_ENDPGM 0, implicit %3(i64), implicit %4(i1)

...

---
name: test_atomic_cmpxchg_with_success_s64_local
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1_vgpr2, $vgpr3_vgpr4

    ; CHECK-LABEL: name: test_atomic_cmpxchg_with_success_s64_local
    ; CHECK: liveins: $vgpr0, $vgpr1_vgpr2, $vgpr3_vgpr4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p3) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i64) = COPY $vgpr3_vgpr4
    ; CHECK-NEXT: [[ATOMIC_CMPXCHG:%[0-9]+]]:_(i64) = G_ATOMIC_CMPXCHG [[COPY]](p3), [[COPY1]], [[COPY2]] :: (load store syncscope("agent-one-as") monotonic monotonic (i64), addrspace 3)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[ATOMIC_CMPXCHG]](i64), [[COPY1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i64) = COPY [[ATOMIC_CMPXCHG]](i64)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[COPY3]](i64), implicit [[ICMP]](i1)
    %0:_(p3) = COPY $vgpr0
    %1:_(i64) = COPY $vgpr1_vgpr2
    %2:_(i64) = COPY $vgpr3_vgpr4
    %3:_(i64), %4:_(i1) = G_ATOMIC_CMPXCHG_WITH_SUCCESS %0(p3), %1, %2 :: (load store syncscope("agent-one-as") monotonic monotonic (i64), addrspace 3)
    S_ENDPGM 0, implicit %3(i64), implicit %4(i1)

...
