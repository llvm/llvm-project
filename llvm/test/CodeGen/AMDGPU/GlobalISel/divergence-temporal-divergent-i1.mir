# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -global-isel -mtriple=amdgcn-mesa-amdpal -mcpu=gfx1010 -run-pass=amdgpu-global-isel-divergence-lowering -verify-machineinstrs %s -o - | FileCheck -check-prefix=GFX10 %s

---
name: temporal_divergent_i1_phi
legalized: true
tracksRegLiveness: true
body: |
  ; GFX10-LABEL: name: temporal_divergent_i1_phi
  ; GFX10: bb.0:
  ; GFX10-NEXT:   successors: %bb.1(0x80000000)
  ; GFX10-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
  ; GFX10-NEXT:   [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
  ; GFX10-NEXT:   [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
  ; GFX10-NEXT:   [[MV:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
  ; GFX10-NEXT:   [[C:%[0-9]+]]:_(i1) = G_CONSTANT i1 true
  ; GFX10-NEXT:   [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
  ; GFX10-NEXT:   [[DEF:%[0-9]+]]:sreg_32(i1) = IMPLICIT_DEF
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.1:
  ; GFX10-NEXT:   successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[PHI:%[0-9]+]]:sreg_32(i1) = PHI [[DEF]](i1), %bb.0, %25(i1), %bb.1
  ; GFX10-NEXT:   [[PHI1:%[0-9]+]]:_(i32) = G_PHI %7(i32), %bb.1, [[C1]](i32), %bb.0
  ; GFX10-NEXT:   [[PHI2:%[0-9]+]]:_(i32) = G_PHI [[C1]](i32), %bb.0, %9(i32), %bb.1
  ; GFX10-NEXT:   [[PHI3:%[0-9]+]]:_(i1) = G_PHI [[C]](i1), %bb.0, %11(i1), %bb.1
  ; GFX10-NEXT:   [[COPY3:%[0-9]+]]:sreg_32(i1) = COPY [[PHI3]](i1)
  ; GFX10-NEXT:   [[COPY4:%[0-9]+]]:sreg_32(i1) = COPY [[PHI]](i1)
  ; GFX10-NEXT:   [[C2:%[0-9]+]]:_(i1) = G_CONSTANT i1 true
  ; GFX10-NEXT:   [[XOR:%[0-9]+]]:_(i1) = G_XOR [[PHI3]], [[C2]]
  ; GFX10-NEXT:   [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[PHI2]](i32)
  ; GFX10-NEXT:   [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
  ; GFX10-NEXT:   [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UITOFP]](f32), [[BITCAST]]
  ; GFX10-NEXT:   [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
  ; GFX10-NEXT:   [[ADD:%[0-9]+]]:_(i32) = G_ADD [[PHI2]], [[C3]]
  ; GFX10-NEXT:   [[INT:%[0-9]+]]:sreg_32_xm0_xexec(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), [[FCMP]](i1), [[PHI1]](i32)
  ; GFX10-NEXT:   [[S_ANDN2_B32_:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY4]](i1), $exec_lo, implicit-def $scc
  ; GFX10-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[COPY3]](i1), implicit-def $scc
  ; GFX10-NEXT:   [[S_OR_B32_:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_]](i1), [[S_AND_B32_]](i1), implicit-def $scc
  ; GFX10-NEXT:   SI_LOOP [[INT]](i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
  ; GFX10-NEXT:   G_BR %bb.2
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.2:
  ; GFX10-NEXT:   [[PHI4:%[0-9]+]]:_(i32) = G_PHI [[INT]](i32), %bb.1
  ; GFX10-NEXT:   [[COPY5:%[0-9]+]]:sreg_32(i1) = COPY [[S_OR_B32_]](i1)
  ; GFX10-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[PHI4]](i32)
  ; GFX10-NEXT:   [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
  ; GFX10-NEXT:   [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
  ; GFX10-NEXT:   [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[C5]](f32)
  ; GFX10-NEXT:   [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[C4]](f32)
  ; GFX10-NEXT:   [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[COPY5]](i1), [[BITCAST1]], [[BITCAST2]]
  ; GFX10-NEXT:   G_STORE [[SELECT]](i32), [[MV]](p0) :: (store (i32))
  ; GFX10-NEXT:   SI_RETURN
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2

    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(p0) = G_MERGE_VALUES %1(i32), %2(i32)
    %4:_(i1) = G_CONSTANT i1 true
    %5:_(i32) = G_CONSTANT i32 0

  bb.1:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)

    %6:_(i32) = G_PHI %7(i32), %bb.1, %5(i32), %bb.0
    %8:_(i32) = G_PHI %5(i32), %bb.0, %9(i32), %bb.1
    %10:_(i1) = G_PHI %4(i1), %bb.0, %11(i1), %bb.1
    %12:_(i1) = G_CONSTANT i1 true
    %11:_(i1) = G_XOR %10, %12
    %13:_(f32) = G_UITOFP %8(i32)
    %14:_(f32) = G_BITCAST %0(i32)
    %15:_(i1) = G_FCMP floatpred(ogt), %13(f32), %14
    %16:_(i32) = G_CONSTANT i32 1
    %9:_(i32) = G_ADD %8, %16
    %7:sreg_32_xm0_xexec(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), %15(i1), %6(i32)
    SI_LOOP %7(i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.2

  bb.2:
    %17:_(i1) = G_PHI %10(i1), %bb.1
    %18:_(i32) = G_PHI %7(i32), %bb.1
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %18(i32)
    %19:_(f32) = G_FCONSTANT float 0.000000e+00
    %20:_(f32) = G_FCONSTANT float 1.000000e+00
    %21:_(i32) = G_BITCAST %20(f32)
    %22:_(i32) = G_BITCAST %19(f32)
    %23:_(i32) = G_SELECT %17(i1), %21, %22
    G_STORE %23(i32), %3(p0) :: (store (i32))
    SI_RETURN




...

---
name: temporal_divergent_i1_non_phi
legalized: true
tracksRegLiveness: true
body: |
  ; GFX10-LABEL: name: temporal_divergent_i1_non_phi
  ; GFX10: bb.0:
  ; GFX10-NEXT:   successors: %bb.1(0x80000000)
  ; GFX10-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
  ; GFX10-NEXT:   [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
  ; GFX10-NEXT:   [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
  ; GFX10-NEXT:   [[MV:%[0-9]+]]:_(p0) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
  ; GFX10-NEXT:   [[C:%[0-9]+]]:_(i1) = G_CONSTANT i1 true
  ; GFX10-NEXT:   [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
  ; GFX10-NEXT:   [[DEF:%[0-9]+]]:sreg_32(i1) = IMPLICIT_DEF
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.1:
  ; GFX10-NEXT:   successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[PHI:%[0-9]+]]:sreg_32(i1) = PHI [[DEF]](i1), %bb.0, %25(i1), %bb.1
  ; GFX10-NEXT:   [[PHI1:%[0-9]+]]:_(i32) = G_PHI %7(i32), %bb.1, [[C1]](i32), %bb.0
  ; GFX10-NEXT:   [[PHI2:%[0-9]+]]:_(i32) = G_PHI [[C1]](i32), %bb.0, %9(i32), %bb.1
  ; GFX10-NEXT:   [[PHI3:%[0-9]+]]:_(i1) = G_PHI [[C]](i1), %bb.0, %11(i1), %bb.1
  ; GFX10-NEXT:   [[COPY3:%[0-9]+]]:sreg_32(i1) = COPY [[PHI]](i1)
  ; GFX10-NEXT:   [[C2:%[0-9]+]]:_(i1) = G_CONSTANT i1 true
  ; GFX10-NEXT:   [[XOR:%[0-9]+]]:_(i1) = G_XOR [[PHI3]], [[C2]]
  ; GFX10-NEXT:   [[COPY4:%[0-9]+]]:sreg_32(i1) = COPY [[XOR]](i1)
  ; GFX10-NEXT:   [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[PHI2]](i32)
  ; GFX10-NEXT:   [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
  ; GFX10-NEXT:   [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UITOFP]](f32), [[BITCAST]]
  ; GFX10-NEXT:   [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
  ; GFX10-NEXT:   [[ADD:%[0-9]+]]:_(i32) = G_ADD [[PHI2]], [[C3]]
  ; GFX10-NEXT:   [[INT:%[0-9]+]]:sreg_32_xm0_xexec(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), [[FCMP]](i1), [[PHI1]](i32)
  ; GFX10-NEXT:   [[S_ANDN2_B32_:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY3]](i1), $exec_lo, implicit-def $scc
  ; GFX10-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[COPY4]](i1), implicit-def $scc
  ; GFX10-NEXT:   [[S_OR_B32_:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_]](i1), [[S_AND_B32_]](i1), implicit-def $scc
  ; GFX10-NEXT:   SI_LOOP [[INT]](i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
  ; GFX10-NEXT:   G_BR %bb.2
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.2:
  ; GFX10-NEXT:   [[PHI4:%[0-9]+]]:_(i32) = G_PHI [[INT]](i32), %bb.1
  ; GFX10-NEXT:   [[COPY5:%[0-9]+]]:sreg_32(i1) = COPY [[S_OR_B32_]](i1)
  ; GFX10-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[PHI4]](i32)
  ; GFX10-NEXT:   [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
  ; GFX10-NEXT:   [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
  ; GFX10-NEXT:   [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[C5]](f32)
  ; GFX10-NEXT:   [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[C4]](f32)
  ; GFX10-NEXT:   [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[COPY5]](i1), [[BITCAST1]], [[BITCAST2]]
  ; GFX10-NEXT:   G_STORE [[SELECT]](i32), [[MV]](p0) :: (store (i32))
  ; GFX10-NEXT:   SI_RETURN
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2

    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(p0) = G_MERGE_VALUES %1(i32), %2(i32)
    %4:_(i1) = G_CONSTANT i1 true
    %5:_(i32) = G_CONSTANT i32 0

  bb.1:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)

    %6:_(i32) = G_PHI %7(i32), %bb.1, %5(i32), %bb.0
    %8:_(i32) = G_PHI %5(i32), %bb.0, %9(i32), %bb.1
    %10:_(i1) = G_PHI %4(i1), %bb.0, %11(i1), %bb.1
    %12:_(i1) = G_CONSTANT i1 true
    %11:_(i1) = G_XOR %10, %12
    %13:_(f32) = G_UITOFP %8(i32)
    %14:_(f32) = G_BITCAST %0(i32)
    %15:_(i1) = G_FCMP floatpred(ogt), %13(f32), %14
    %16:_(i32) = G_CONSTANT i32 1
    %9:_(i32) = G_ADD %8, %16
    %7:sreg_32_xm0_xexec(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), %15(i1), %6(i32)
    SI_LOOP %7(i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.2

  bb.2:
    %17:_(i1) = G_PHI %11(i1), %bb.1
    %18:_(i32) = G_PHI %7(i32), %bb.1
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %18(i32)
    %19:_(f32) = G_FCONSTANT float 0.000000e+00
    %20:_(f32) = G_FCONSTANT float 1.000000e+00
    %21:_(i32) = G_BITCAST %20(f32)
    %22:_(i32) = G_BITCAST %19(f32)
    %23:_(i32) = G_SELECT %17(i1), %21, %22
    G_STORE %23(i32), %3(p0) :: (store (i32))
    SI_RETURN




...

---
name: loop_with_1break
legalized: true
tracksRegLiveness: true
body: |
  ; GFX10-LABEL: name: loop_with_1break
  ; GFX10: bb.0:
  ; GFX10-NEXT:   successors: %bb.1(0x80000000)
  ; GFX10-NEXT:   liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $vgpr0, $vgpr1, $vgpr2
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
  ; GFX10-NEXT:   [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
  ; GFX10-NEXT:   [[MV:%[0-9]+]]:_(p1) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
  ; GFX10-NEXT:   [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
  ; GFX10-NEXT:   [[COPY3:%[0-9]+]]:_(i32) = COPY $sgpr0
  ; GFX10-NEXT:   [[COPY4:%[0-9]+]]:_(i32) = COPY $sgpr1
  ; GFX10-NEXT:   [[MV1:%[0-9]+]]:_(p1) = G_MERGE_VALUES [[COPY3]](i32), [[COPY4]](i32)
  ; GFX10-NEXT:   [[COPY5:%[0-9]+]]:_(i32) = COPY $sgpr2
  ; GFX10-NEXT:   [[COPY6:%[0-9]+]]:_(i32) = COPY $sgpr3
  ; GFX10-NEXT:   [[MV2:%[0-9]+]]:_(p1) = G_MERGE_VALUES [[COPY5]](i32), [[COPY6]](i32)
  ; GFX10-NEXT:   [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
  ; GFX10-NEXT:   [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
  ; GFX10-NEXT:   [[DEF1:%[0-9]+]]:sreg_32(i1) = IMPLICIT_DEF
  ; GFX10-NEXT:   [[DEF2:%[0-9]+]]:sreg_32_xm0_xexec(i1) = IMPLICIT_DEF
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.1:
  ; GFX10-NEXT:   successors: %bb.3(0x50000000), %bb.5(0x30000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[PHI:%[0-9]+]]:sreg_32_xm0_xexec(i1) = PHI [[DEF2]](i1), %bb.0, %53(i1), %bb.5
  ; GFX10-NEXT:   [[PHI1:%[0-9]+]]:sreg_32(i1) = PHI [[DEF1]](i1), %bb.0, %42(i1), %bb.5
  ; GFX10-NEXT:   [[PHI2:%[0-9]+]]:_(i32) = G_PHI %13(i32), %bb.5, [[C]](i32), %bb.0
  ; GFX10-NEXT:   [[PHI3:%[0-9]+]]:_(i32) = G_PHI [[C]](i32), %bb.0, %15(i32), %bb.5
  ; GFX10-NEXT:   [[COPY7:%[0-9]+]]:sreg_32_xm0_xexec(i1) = COPY [[PHI]](i1)
  ; GFX10-NEXT:   [[COPY8:%[0-9]+]]:sreg_32(i1) = COPY [[PHI1]](i1)
  ; GFX10-NEXT:   [[C1:%[0-9]+]]:_(i1) = G_CONSTANT i1 true
  ; GFX10-NEXT:   [[COPY9:%[0-9]+]]:sreg_32(i1) = COPY [[C1]](i1)
  ; GFX10-NEXT:   [[SEXT:%[0-9]+]]:_(i64) = G_SEXT [[PHI3]](i32)
  ; GFX10-NEXT:   [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
  ; GFX10-NEXT:   [[SHL:%[0-9]+]]:_(i64) = G_SHL [[SEXT]], [[C2]](i32)
  ; GFX10-NEXT:   [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[MV1]], [[SHL]](i64)
  ; GFX10-NEXT:   [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32), addrspace 1)
  ; GFX10-NEXT:   [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
  ; GFX10-NEXT:   [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[LOAD]](i32), [[C3]]
  ; GFX10-NEXT:   [[S_ANDN2_B32_:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY8]](i1), $exec_lo, implicit-def $scc
  ; GFX10-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[COPY9]](i1), implicit-def $scc
  ; GFX10-NEXT:   [[S_OR_B32_:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_]](i1), [[S_AND_B32_]](i1), implicit-def $scc
  ; GFX10-NEXT:   [[COPY10:%[0-9]+]]:sreg_32(i1) = COPY [[S_OR_B32_]](i1)
  ; GFX10-NEXT:   G_BRCOND [[ICMP]](i1), %bb.3
  ; GFX10-NEXT:   G_BR %bb.5
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.2:
  ; GFX10-NEXT:   successors: %bb.4(0x80000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
  ; GFX10-NEXT:   G_STORE [[C4]](i32), [[MV2]](p1) :: (store (i32), addrspace 1)
  ; GFX10-NEXT:   G_BR %bb.4
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.3:
  ; GFX10-NEXT:   successors: %bb.5(0x80000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[C5:%[0-9]+]]:_(i1) = G_CONSTANT i1 false
  ; GFX10-NEXT:   [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
  ; GFX10-NEXT:   [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[SEXT]], [[C6]](i32)
  ; GFX10-NEXT:   [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[MV]], [[SHL1]](i64)
  ; GFX10-NEXT:   [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i32), addrspace 1)
  ; GFX10-NEXT:   [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
  ; GFX10-NEXT:   [[ADD:%[0-9]+]]:_(i32) = G_ADD [[LOAD1]], [[C7]]
  ; GFX10-NEXT:   G_STORE [[ADD]](i32), [[PTR_ADD1]](p1) :: (store (i32), addrspace 1)
  ; GFX10-NEXT:   [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[PHI3]], [[C7]]
  ; GFX10-NEXT:   [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[PHI3]](i32), [[COPY2]]
  ; GFX10-NEXT:   [[COPY11:%[0-9]+]]:sreg_32(i1) = COPY [[ICMP1]](i1)
  ; GFX10-NEXT:   [[S_ANDN2_B32_1:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY10]](i1), $exec_lo, implicit-def $scc
  ; GFX10-NEXT:   [[S_AND_B32_1:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[COPY11]](i1), implicit-def $scc
  ; GFX10-NEXT:   [[S_OR_B32_1:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_1]](i1), [[S_AND_B32_1]](i1), implicit-def $scc
  ; GFX10-NEXT:   G_BR %bb.5
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.4:
  ; GFX10-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %34(i32)
  ; GFX10-NEXT:   S_ENDPGM 0
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.5:
  ; GFX10-NEXT:   successors: %bb.6(0x04000000), %bb.1(0x7c000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[PHI4:%[0-9]+]]:sreg_32(i1) = PHI [[S_OR_B32_]](i1), %bb.1, [[S_OR_B32_1]](i1), %bb.3
  ; GFX10-NEXT:   [[PHI5:%[0-9]+]]:_(i32) = G_PHI [[ADD1]](i32), %bb.3, [[DEF]](i32), %bb.1
  ; GFX10-NEXT:   [[PHI6:%[0-9]+]]:_(i1) = G_PHI [[C5]](i1), %bb.3, [[C1]](i1), %bb.1
  ; GFX10-NEXT:   [[COPY12:%[0-9]+]]:sreg_32_xm0_xexec(i1) = COPY [[PHI6]](i1)
  ; GFX10-NEXT:   [[COPY13:%[0-9]+]]:sreg_32(i1) = COPY [[PHI4]](i1)
  ; GFX10-NEXT:   [[INT:%[0-9]+]]:sreg_32_xm0_xexec(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), [[COPY13]](i1), [[PHI2]](i32)
  ; GFX10-NEXT:   [[S_ANDN2_B32_2:%[0-9]+]]:sreg_32_xm0_xexec(i1) = S_ANDN2_B32 [[COPY7]](i1), $exec_lo, implicit-def $scc
  ; GFX10-NEXT:   [[S_AND_B32_2:%[0-9]+]]:sreg_32_xm0_xexec(i1) = S_AND_B32 $exec_lo, [[COPY12]](i1), implicit-def $scc
  ; GFX10-NEXT:   [[S_OR_B32_2:%[0-9]+]]:sreg_32_xm0_xexec(i1) = S_OR_B32 [[S_ANDN2_B32_2]](i1), [[S_AND_B32_2]](i1), implicit-def $scc
  ; GFX10-NEXT:   SI_LOOP [[INT]](i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
  ; GFX10-NEXT:   G_BR %bb.6
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT: bb.6:
  ; GFX10-NEXT:   successors: %bb.2(0x40000000), %bb.4(0x40000000)
  ; GFX10-NEXT: {{  $}}
  ; GFX10-NEXT:   [[PHI7:%[0-9]+]]:_(i32) = G_PHI [[INT]](i32), %bb.5
  ; GFX10-NEXT:   [[COPY14:%[0-9]+]]:sreg_32_xm0_xexec(i1) = COPY [[S_OR_B32_2]](i1)
  ; GFX10-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[PHI7]](i32)
  ; GFX10-NEXT:   [[SI_IF:%[0-9]+]]:sreg_32_xm0_xexec(i32) = SI_IF [[COPY14]](i1), %bb.4, implicit-def $exec, implicit-def $scc, implicit $exec
  ; GFX10-NEXT:   G_BR %bb.2
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $vgpr0, $vgpr1, $vgpr2

    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(p1) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i32) = COPY $vgpr2
    %4:_(i32) = COPY $sgpr0
    %5:_(i32) = COPY $sgpr1
    %6:_(p1) = G_MERGE_VALUES %4(i32), %5(i32)
    %7:_(i32) = COPY $sgpr2
    %8:_(i32) = COPY $sgpr3
    %9:_(p1) = G_MERGE_VALUES %7(i32), %8(i32)
    %10:_(i32) = G_CONSTANT i32 0
    %11:_(i32) = G_IMPLICIT_DEF

  bb.1:
    successors: %bb.3(0x50000000), %bb.5(0x30000000)

    %12:_(i32) = G_PHI %13(i32), %bb.5, %10(i32), %bb.0
    %14:_(i32) = G_PHI %10(i32), %bb.0, %15(i32), %bb.5
    %16:_(i1) = G_CONSTANT i1 true
    %17:_(i64) = G_SEXT %14(i32)
    %18:_(i32) = G_CONSTANT i32 2
    %19:_(i64) = G_SHL %17, %18(i32)
    %20:_(p1) = G_PTR_ADD %6, %19(i64)
    %21:_(i32) = G_LOAD %20(p1) :: (load (i32), addrspace 1)
    %22:_(i32) = G_CONSTANT i32 0
    %23:_(i1) = G_ICMP intpred(ne), %21(i32), %22
    G_BRCOND %23(i1), %bb.3
    G_BR %bb.5

  bb.2:
    successors: %bb.4(0x80000000)

    %24:_(i32) = G_CONSTANT i32 10
    G_STORE %24(i32), %9(p1) :: (store (i32), addrspace 1)
    G_BR %bb.4

  bb.3:
    successors: %bb.5(0x80000000)

    %25:_(i1) = G_CONSTANT i1 false
    %26:_(i32) = G_CONSTANT i32 2
    %27:_(i64) = G_SHL %17, %26(i32)
    %28:_(p1) = G_PTR_ADD %2, %27(i64)
    %29:_(i32) = G_LOAD %28(p1) :: (load (i32), addrspace 1)
    %30:_(i32) = G_CONSTANT i32 1
    %31:_(i32) = G_ADD %29, %30
    G_STORE %31(i32), %28(p1) :: (store (i32), addrspace 1)
    %32:_(i32) = G_ADD %14, %30
    %33:_(i1) = G_ICMP intpred(ult), %14(i32), %3
    G_BR %bb.5

  bb.4:
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %34(i32)
    S_ENDPGM 0

  bb.5:
    successors: %bb.6(0x04000000), %bb.1(0x7c000000)

    %15:_(i32) = G_PHI %32(i32), %bb.3, %11(i32), %bb.1
    %35:_(i1) = G_PHI %25(i1), %bb.3, %16(i1), %bb.1
    %36:_(i1) = G_PHI %33(i1), %bb.3, %16(i1), %bb.1
    %13:sreg_32_xm0_xexec(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), %36(i1), %12(i32)
    SI_LOOP %13(i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.6

  bb.6:
    successors: %bb.2(0x40000000), %bb.4(0x40000000)

    %37:sreg_32_xm0_xexec(i1) = G_PHI %35(i1), %bb.5
    %38:_(i32) = G_PHI %13(i32), %bb.5
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %38(i32)
    %34:sreg_32_xm0_xexec(i32) = SI_IF %37(i1), %bb.4, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.2












...
