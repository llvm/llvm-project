# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -run-pass=amdgpu-prelegalizer-combiner -simplify-mir -verify-machineinstrs -o - %s | FileCheck %s

---
name: no_fold_add_into_select_s32_0_multi_use
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: no_fold_add_into_select_s32_0_multi_use
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    ; CHECK-NEXT: %thirty:_(i32) = G_CONSTANT i32 30
    ; CHECK-NEXT: %add:_(i32) = G_ADD %select, %thirty
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(i32), implicit %select(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %add:_(i32) = G_ADD %select, %thirty
    S_ENDPGM 0, implicit %add(i32), implicit %select(i32)
...

---
name: no_fold_add_into_select_s32_1_multi_use
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: no_fold_add_into_select_s32_1_multi_use
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    ; CHECK-NEXT: %thirty:_(i32) = G_CONSTANT i32 30
    ; CHECK-NEXT: %add:_(i32) = G_ADD %select, %thirty
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(i32), implicit %select(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %add:_(i32) = G_ADD %thirty, %select
    S_ENDPGM 0, implicit %add(i32), implicit %select(i32)
...

---
name: no_fold_sub_into_select_s32_nonconst_rhs
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: no_fold_sub_into_select_s32_nonconst_rhs
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    ; CHECK-NEXT: %sub:_(i32) = G_SUB %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %sub(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %sub:_(i32) = G_SUB %select, %variable
    S_ENDPGM 0, implicit %sub(i32)
...

---
name: no_fold_sub_into_select_s32_nonconst_lhs
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: no_fold_sub_into_select_s32_nonconst_lhs
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    ; CHECK-NEXT: %sub:_(i32) = G_SUB %variable, %select
    ; CHECK-NEXT: S_ENDPGM 0, implicit %sub(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %sub:_(i32) = G_SUB %variable, %select
    S_ENDPGM 0, implicit %sub(i32)
...

---
name: fold_add_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_add_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: %add:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %add:_(i32) = G_ADD %select, %thirty
    S_ENDPGM 0, implicit %add(i32)
...

---
name: fold_add_into_select_s32_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_add_into_select_s32_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: %add:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %add:_(i32) = G_ADD %thirty, %select
    S_ENDPGM 0, implicit %add(i32)
...

---
name: fold_add_into_select_v2s32_splat
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-LABEL: name: fold_add_into_select_v2s32_splat
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %reg1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: %cond:_(<2 x i1>) = G_ICMP intpred(eq), %reg0(<2 x i32>), %reg1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; CHECK-NEXT: %add:_(<2 x i32>) = G_SELECT %cond(<2 x i1>), [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(<2 x i32>)
    %reg0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %reg1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %cond:_(<2 x i1>) = G_ICMP intpred(eq), %reg0(<2 x i32>), %reg1
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %ten_vec:_(<2 x i32>) = G_BUILD_VECTOR %ten(i32), %ten(i32)
    %twenty_vec:_(<2 x i32>) = G_BUILD_VECTOR %twenty(i32), %twenty(i32)
    %select:_(<2 x i32>) = G_SELECT %cond(<2 x i1>), %ten_vec, %twenty_vec
    %thirty:_(i32) = G_CONSTANT i32 30
    %thirty_vec:_(<2 x i32>) = G_BUILD_VECTOR %thirty(i32), %thirty(i32)
    %add:_(<2 x i32>) = G_ADD %select, %thirty_vec
    S_ENDPGM 0, implicit %add(<2 x i32>)
...

---
name: fold_add_into_select_v2s32_nonsplat
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-LABEL: name: fold_add_into_select_v2s32_nonsplat
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %reg1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: %cond:_(<2 x i1>) = G_ICMP intpred(eq), %reg0(<2 x i32>), %reg1
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %thirty:_(i32) = G_CONSTANT i32 30
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), %thirty(i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), %twenty(i32)
    ; CHECK-NEXT: %add:_(<2 x i32>) = G_SELECT %cond(<2 x i1>), [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(<2 x i32>)
    %reg0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %reg1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %cond:_(<2 x i1>) = G_ICMP intpred(eq), %reg0(<2 x i32>), %reg1
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %const_vec0:_(<2 x i32>) = G_BUILD_VECTOR %ten(i32), %twenty(i32)
    %const_vec1:_(<2 x i32>) = G_BUILD_VECTOR %twenty(i32), %ten(i32)
    %select:_(<2 x i32>) = G_SELECT %cond(<2 x i1>), %const_vec0, %const_vec1
    %thirty:_(i32) = G_CONSTANT i32 30
    %const_vec3:_(<2 x i32>) = G_BUILD_VECTOR %thirty(i32), %ten(i32)
    %add:_(<2 x i32>) = G_ADD %select, %const_vec3
    S_ENDPGM 0, implicit %add(<2 x i32>)
...

---
name: fold_add_into_select_v2s32_nonsplat_undef
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-LABEL: name: fold_add_into_select_v2s32_nonsplat_undef
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %reg1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: %cond:_(<2 x i1>) = G_ICMP intpred(eq), %reg0(<2 x i32>), %reg1
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %const_vec0:_(<2 x i32>) = G_BUILD_VECTOR %undef(i32), %twenty(i32)
    ; CHECK-NEXT: %const_vec1:_(<2 x i32>) = G_BUILD_VECTOR %twenty(i32), %undef(i32)
    ; CHECK-NEXT: %thirty:_(i32) = G_CONSTANT i32 30
    ; CHECK-NEXT: %const_vec3:_(<2 x i32>) = G_BUILD_VECTOR %thirty(i32), %undef(i32)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(<2 x i32>) = G_ADD %const_vec0, %const_vec3
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(<2 x i32>) = G_ADD %const_vec1, %const_vec3
    ; CHECK-NEXT: %add:_(<2 x i32>) = G_SELECT %cond(<2 x i1>), [[ADD]], [[ADD1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(<2 x i32>)
    %reg0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %reg1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %cond:_(<2 x i1>) = G_ICMP intpred(eq), %reg0(<2 x i32>), %reg1
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %undef:_(i32) = G_IMPLICIT_DEF
    %const_vec0:_(<2 x i32>) = G_BUILD_VECTOR %undef(i32), %twenty(i32)
    %const_vec1:_(<2 x i32>) = G_BUILD_VECTOR %twenty(i32), %undef(i32)
    %select:_(<2 x i32>) = G_SELECT %cond(<2 x i1>), %const_vec0, %const_vec1
    %thirty:_(i32) = G_CONSTANT i32 30
    %const_vec3:_(<2 x i32>) = G_BUILD_VECTOR %thirty(i32), %undef(i32)
    %add:_(<2 x i32>) = G_ADD %select, %const_vec3
    S_ENDPGM 0, implicit %add(<2 x i32>)
...

---
name: fold_sub_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_sub_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -20
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -10
    ; CHECK-NEXT: %sub:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %sub(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %sub:_(i32) = G_SUB %select, %thirty
    S_ENDPGM 0, implicit %sub(i32)
...

---
name: fold_sub_into_select_s32_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_sub_into_select_s32_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %sub:_(i32) = G_SELECT %cond(i1), %twenty, %ten
    ; CHECK-NEXT: S_ENDPGM 0, implicit %sub(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %sub:_(i32) = G_SUB %thirty, %select
    S_ENDPGM 0, implicit %sub(i32)
...

---
name: fold_ptr_add_into_select_p3_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_ptr_add_into_select_p3_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(p3) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(p3) = G_CONSTANT i32 50
    ; CHECK-NEXT: %ptr_add:_(p3) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %ptr_add(p3)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(p3) = G_CONSTANT i32 10
    %twenty:_(p3) = G_CONSTANT i32 20
    %select:_(p3) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %ptr_add:_(p3) = G_PTR_ADD %select, %thirty(i32)
    S_ENDPGM 0, implicit %ptr_add(p3)
...

---
name: fold_ptr_add_into_select_p3_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_ptr_add_into_select_p3_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(p3) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(p3) = G_CONSTANT i32 50
    ; CHECK-NEXT: %ptr_add:_(p3) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %ptr_add(p3)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(p3) = G_CONSTANT i32 30
    %ptr_add:_(p3) = G_PTR_ADD %thirty, %select(i32)
    S_ENDPGM 0, implicit %ptr_add(p3)
...

---
name: fold_shl_into_select_s64_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_shl_into_select_s64_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1280
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 2560
    ; CHECK-NEXT: %shl:_(i64) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %shl(i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i64) = G_CONSTANT i64 10
    %twenty:_(i64) = G_CONSTANT i64 20
    %select:_(i64) = G_SELECT %cond(i1), %ten, %twenty
    %seven:_(i32) = G_CONSTANT i32 7
    %shl:_(i64) = G_SHL %select, %seven(i32)
    S_ENDPGM 0, implicit %shl(i64)
...

---
name: fold_shl_into_select_s64_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_shl_into_select_s64_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8192
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 524288
    ; CHECK-NEXT: %shl:_(i64) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %shl(i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %sixteen:_(i32) = G_CONSTANT i32 16
    %select:_(i32) = G_SELECT %cond(i1), %ten, %sixteen
    %eight:_(i64) = G_CONSTANT i64 8
    %shl:_(i64) = G_SHL %eight, %select(i32)
    S_ENDPGM 0, implicit %shl(i64)
...

---
name: fold_and_variable_into_select_zero_neg1_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_and_variable_into_select_zero_neg1_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(ne), %reg(i32), %zero
    ; CHECK-NEXT: %select:_(i32) = G_SEXT %cond(i1)
    ; CHECK-NEXT: %and:_(i32) = G_AND %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %and(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %select:_(i32) = G_SELECT %cond(i1), %zero, %neg1
    %and:_(i32) = G_AND %select, %variable
    S_ENDPGM 0, implicit %and(i32)
...

---
name: fold_and_variable_into_select_neg1_zero_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_and_variable_into_select_neg1_zero_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %select:_(i32) = G_SEXT %cond(i1)
    ; CHECK-NEXT: %and:_(i32) = G_AND %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %and(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %select:_(i32) = G_SELECT %cond(i1), %neg1, %zero
    %and:_(i32) = G_AND %select, %variable
    S_ENDPGM 0, implicit %and(i32)
...

---
name: fold_or_variable_into_select_zero_neg1_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_or_variable_into_select_zero_neg1_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(ne), %reg(i32), %zero
    ; CHECK-NEXT: %select:_(i32) = G_SEXT %cond(i1)
    ; CHECK-NEXT: %or:_(i32) = G_OR %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %or(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %select:_(i32) = G_SELECT %cond(i1), %zero, %neg1
    %or:_(i32) = G_OR %select, %variable
    S_ENDPGM 0, implicit %or(i32)
...

---
name: fold_or_variable_into_select_neg1_zero_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_or_variable_into_select_neg1_zero_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %select:_(i32) = G_SEXT %cond(i1)
    ; CHECK-NEXT: %or:_(i32) = G_OR %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %or(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %select:_(i32) = G_SELECT %cond(i1), %neg1, %zero
    %or:_(i32) = G_OR %select, %variable
    S_ENDPGM 0, implicit %or(i32)
...

---
name: fold_and_variable_into_select_undef_neg1_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_and_variable_into_select_undef_neg1_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %neg1:_(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %undef, %neg1
    ; CHECK-NEXT: %and:_(i32) = G_AND %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %and(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %undef:_(i32) = G_IMPLICIT_DEF
    %neg1:_(i32) = G_CONSTANT i32 -1
    %select:_(i32) = G_SELECT %cond(i1), %undef, %neg1
    %and:_(i32) = G_AND %select, %variable
    S_ENDPGM 0, implicit %and(i32)
...

---
name: fold_and_variable_into_select_undef_zero_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_and_variable_into_select_undef_zero_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %undef, %zero
    ; CHECK-NEXT: %and:_(i32) = G_AND %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %and(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %undef:_(i32) = G_IMPLICIT_DEF
    %select:_(i32) = G_SELECT %cond(i1), %undef, %zero
    %and:_(i32) = G_AND %select, %variable
    S_ENDPGM 0, implicit %and(i32)
...

---
name: fold_or_variable_into_select_neg1_fpzero_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: fold_or_variable_into_select_neg1_fpzero_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %neg1:_(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: %fpzero:_(f32) = G_FCONSTANT float 0.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %fpzero(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %neg1, [[BITCAST]]
    ; CHECK-NEXT: %or:_(i32) = G_OR %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %or(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %fpzero:_(f32) = G_FCONSTANT float 0.000000e+00
    %6:_(i32) = G_BITCAST %fpzero(f32)
    %select:_(i32) = G_SELECT %cond(i1), %neg1, %6
    %or:_(i32) = G_OR %select, %variable
    S_ENDPGM 0, implicit %or(i32)
...

---
name: no_fold_or_variable_into_select_neg1_fpnegzero_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: no_fold_or_variable_into_select_neg1_fpnegzero_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %neg1:_(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: %fpzero:_(f32) = G_FCONSTANT float -0.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %fpzero(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %neg1, [[BITCAST]]
    ; CHECK-NEXT: %or:_(i32) = G_OR %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %or(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %fpzero:_(f32) = G_FCONSTANT float -0.000000e+00
    %6:_(i32) = G_BITCAST %fpzero(f32)
    %select:_(i32) = G_SELECT %cond(i1), %neg1, %6
    %or:_(i32) = G_OR %select, %variable
    S_ENDPGM 0, implicit %or(i32)
...

---
name: no_fold_or_variable_into_select_neg1_other_const_s32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: no_fold_or_variable_into_select_neg1_other_const_s32
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %variable:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %otherconst:_(i32) = G_CONSTANT i32 123
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT %cond(i1)
    ; CHECK-NEXT: %select:_(i32) = G_OR [[SEXT]], %otherconst
    ; CHECK-NEXT: %or:_(i32) = G_OR %select, %variable
    ; CHECK-NEXT: S_ENDPGM 0, implicit %or(i32)
    %reg:_(i32) = COPY $vgpr0
    %variable:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %neg1:_(i32) = G_CONSTANT i32 -1
    %otherconst:_(i32) = G_CONSTANT i32 123
    %select:_(i32) = G_SELECT %cond(i1), %neg1, %otherconst
    %or:_(i32) = G_OR %select, %variable
    S_ENDPGM 0, implicit %or(i32)
...

---
name: fold_xor_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_xor_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %xor:_(i32) = G_SELECT %cond(i1), %twenty, %ten
    ; CHECK-NEXT: S_ENDPGM 0, implicit %xor(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %xor:_(i32) = G_XOR %select, %thirty
    S_ENDPGM 0, implicit %xor(i32)
...

---
name: fold_sdiv_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_sdiv_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; CHECK-NEXT: %sdiv:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %sdiv(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %hundred:_(i32) = G_CONSTANT i32 100
    %fortytwo:_(i32) = G_CONSTANT i32 42
    %select:_(i32) = G_SELECT %cond(i1), %hundred, %fortytwo
    %two:_(i32) = G_CONSTANT i32 2
    %sdiv:_(i32) = G_SDIV %select, %two
    S_ENDPGM 0, implicit %sdiv(i32)
...

---
name: fold_srem_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_srem_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %srem:_(i32) = G_ZEXT %cond(i1)
    ; CHECK-NEXT: S_ENDPGM 0, implicit %srem(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %hundred:_(i32) = G_CONSTANT i32 100
    %fortytwo:_(i32) = G_CONSTANT i32 42
    %select:_(i32) = G_SELECT %cond(i1), %hundred, %fortytwo
    %three:_(i32) = G_CONSTANT i32 3
    %srem:_(i32) = G_SREM %select, %three
    S_ENDPGM 0, implicit %srem(i32)
...

---
name: fold_udiv_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_udiv_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[SELECT]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %hundred:_(i32) = G_CONSTANT i32 100
    %fortytwo:_(i32) = G_CONSTANT i32 42
    %select:_(i32) = G_SELECT %cond(i1), %hundred, %fortytwo
    %two:_(i32) = G_CONSTANT i32 2
    %udiv:_(i32) = G_UDIV %select, %two
    S_ENDPGM 0, implicit %udiv(i32)
...

---
name: fold_urem_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_urem_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %udiv:_(i32) = G_ZEXT %cond(i1)
    ; CHECK-NEXT: S_ENDPGM 0, implicit %udiv(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %hundred:_(i32) = G_CONSTANT i32 100
    %fortytwo:_(i32) = G_CONSTANT i32 42
    %select:_(i32) = G_SELECT %cond(i1), %hundred, %fortytwo
    %three:_(i32) = G_CONSTANT i32 3
    %udiv:_(i32) = G_UREM %select, %three
    S_ENDPGM 0, implicit %udiv(i32)
...

---
name: fold_lshr_into_select_s64_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_lshr_into_select_s64_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 5
    ; CHECK-NEXT: %lshr:_(i64) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %lshr(i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i64) = G_CONSTANT i64 10
    %twenty:_(i64) = G_CONSTANT i64 20
    %select:_(i64) = G_SELECT %cond(i1), %ten, %twenty
    %two:_(i32) = G_CONSTANT i32 2
    %lshr:_(i64) = G_LSHR %select, %two(i32)
    S_ENDPGM 0, implicit %lshr(i64)
...

---
name: fold_lshr_into_select_s64_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_lshr_into_select_s64_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1012
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 253
    ; CHECK-NEXT: %lshr:_(i64) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %lshr(i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %three:_(i32) = G_CONSTANT i32 3
    %five:_(i32) = G_CONSTANT i32 5
    %select:_(i32) = G_SELECT %cond(i1), %three, %five
    %val:_(i64) = G_CONSTANT i64 8096
    %lshr:_(i64) = G_LSHR %val, %select(i32)
    S_ENDPGM 0, implicit %lshr(i64)
...

---
name: fold_ashr_into_select_s64_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_ashr_into_select_s64_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 5
    ; CHECK-NEXT: %ashr:_(i64) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %ashr(i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i64) = G_CONSTANT i64 10
    %twenty:_(i64) = G_CONSTANT i64 20
    %select:_(i64) = G_SELECT %cond(i1), %ten, %twenty
    %two:_(i32) = G_CONSTANT i32 2
    %ashr:_(i64) = G_ASHR %select, %two(i32)
    S_ENDPGM 0, implicit %ashr(i64)
...

---
name: fold_ashr_into_select_s64_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_ashr_into_select_s64_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1012
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -253
    ; CHECK-NEXT: %ashr:_(i64) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %ashr(i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %three:_(i32) = G_CONSTANT i32 3
    %five:_(i32) = G_CONSTANT i32 5
    %select:_(i32) = G_SELECT %cond(i1), %three, %five
    %val:_(i64) = G_CONSTANT i64 -8096
    %ashr:_(i64) = G_ASHR %val, %select(i32)
    S_ENDPGM 0, implicit %ashr(i64)
...

---
name: fold_smin_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_smin_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    ; CHECK-NEXT: S_ENDPGM 0, implicit %select(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %smin:_(i32) = G_SMIN %select, %thirty
    S_ENDPGM 0, implicit %smin(i32)
...

---
name: fold_smax_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_smax_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %thirty:_(i32) = G_CONSTANT i32 30
    ; CHECK-NEXT: S_ENDPGM 0, implicit %thirty(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %smax:_(i32) = G_SMAX %select, %thirty
    S_ENDPGM 0, implicit %smax(i32)
...

---
name: fold_umin_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_umin_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %ten:_(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: %twenty:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    ; CHECK-NEXT: S_ENDPGM 0, implicit %select(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %umin:_(i32) = G_UMIN %select, %thirty
    S_ENDPGM 0, implicit %umin(i32)
...

---
name: fold_umax_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_umax_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %thirty:_(i32) = G_CONSTANT i32 30
    ; CHECK-NEXT: S_ENDPGM 0, implicit %thirty(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %umax:_(i32) = G_UMAX %select, %thirty
    S_ENDPGM 0, implicit %umax(i32)
...

---
name: fold_fadd_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fadd_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fadd:_(f32) = nnan G_FADD [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fadd(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fadd:_(f32) = nnan G_FADD %9, %sixteen
    %11:_(i32) = G_BITCAST %fadd(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fadd_into_select_s32_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fadd_into_select_s32_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fadd:_(f32) = nnan G_FADD [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fadd(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fadd:_(f32) = nnan G_FADD %sixteen, %9
    %11:_(i32) = G_BITCAST %fadd(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fsub_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fsub_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fsub:_(f32) = nnan G_FSUB [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fsub(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fsub:_(f32) = nnan G_FSUB %9, %sixteen
    %11:_(i32) = G_BITCAST %fsub(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fmul_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fmul_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fmul:_(f32) = nnan G_FMUL [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fmul(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fmul:_(f32) = nnan G_FMUL %9, %sixteen
    %11:_(i32) = G_BITCAST %fmul(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fdiv_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fdiv_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fdiv:_(f32) = nnan G_FDIV [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fdiv(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fdiv:_(f32) = nnan G_FDIV %9, %sixteen
    %11:_(i32) = G_BITCAST %fdiv(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_frem_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_frem_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %frem:_(f32) = nnan G_FREM [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %frem(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %frem:_(f32) = nnan G_FREM %9, %sixteen
    %11:_(i32) = G_BITCAST %frem(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fpow_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fpow_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fpow:_(f32) = nnan G_FPOW [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fpow(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fpow:_(f32) = nnan G_FPOW %9, %sixteen
    %11:_(i32) = G_BITCAST %fpow(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fminnum_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fminnum_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fminnum:_(f32) = nnan G_FMINNUM [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fminnum(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fminnum:_(f32) = nnan G_FMINNUM %9, %sixteen
    %11:_(i32) = G_BITCAST %fminnum(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fminnum_ieee_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fminnum_ieee_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fminnum_ieee:_(f32) = nnan G_FMINNUM_IEEE [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fminnum_ieee(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fminnum_ieee:_(f32) = nnan G_FMINNUM_IEEE %9, %sixteen
    %11:_(i32) = G_BITCAST %fminnum_ieee(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fmaxnum_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fmaxnum_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %three:_(f32) = G_FCONSTANT float 3.000000e+00
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fmaxnum:_(f32) = nnan G_FMAXNUM [[BITCAST2]], %three
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fmaxnum(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %three:_(f32) = G_FCONSTANT float 3.000000e+00
    %9:_(f32) = G_BITCAST %select(i32)
    %fmaxnum:_(f32) = nnan G_FMAXNUM %9, %three
    %11:_(i32) = G_BITCAST %fmaxnum(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fmaxnum_ieee_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fmaxnum_ieee_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %three:_(f32) = G_FCONSTANT float 3.000000e+00
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fmaxnum_ieee:_(f32) = nnan G_FMAXNUM_IEEE [[BITCAST2]], %three
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fmaxnum_ieee(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %three:_(f32) = G_FCONSTANT float 3.000000e+00
    %9:_(f32) = G_BITCAST %select(i32)
    %fmaxnum_ieee:_(f32) = nnan G_FMAXNUM_IEEE %9, %three
    %11:_(i32) = G_BITCAST %fmaxnum_ieee(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fminimum_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fminimum_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fminimum:_(f32) = nnan G_FMINIMUM [[BITCAST2]], %sixteen
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fminimum(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fminimum:_(f32) = nnan G_FMINIMUM %9, %sixteen
    %11:_(i32) = G_BITCAST %fminimum(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fmaximum_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fmaximum_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %three:_(f32) = G_FCONSTANT float 3.000000e+00
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fmaximum:_(f32) = nnan G_FMAXIMUM [[BITCAST2]], %three
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fmaximum(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %three:_(f32) = G_FCONSTANT float 3.000000e+00
    %9:_(f32) = G_BITCAST %select(i32)
    %fmaximum:_(f32) = nnan G_FMAXIMUM %9, %three
    %11:_(i32) = G_BITCAST %fmaximum(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fcopysign_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fcopysign_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fcopysign:_(f32) = nnan G_FCOPYSIGN [[BITCAST2]], %sixteen(f32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fcopysign(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fcopysign:_(f32) = nnan G_FCOPYSIGN %9, %sixteen(f32)
    %11:_(i32) = G_BITCAST %fcopysign(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fcopysign_into_select_s32_s64_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fcopysign_into_select_s32_s64_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f32) = G_FCONSTANT float 2.000000e+00
    ; CHECK-NEXT: %four:_(f32) = G_FCONSTANT float 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %two(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %four(f32)
    ; CHECK-NEXT: %select:_(i32) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f64) = G_FCONSTANT double 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %select(i32)
    ; CHECK-NEXT: %fcopysign:_(f32) = nnan G_FCOPYSIGN [[BITCAST2]], %sixteen(f64)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST %fcopysign(f32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f32) = G_FCONSTANT float 2.000000e+00
    %four:_(f32) = G_FCONSTANT float 4.000000e+00
    %5:_(i32) = G_BITCAST %two(f32)
    %6:_(i32) = G_BITCAST %four(f32)
    %select:_(i32) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f64) = G_FCONSTANT double 1.600000e+01
    %9:_(f32) = G_BITCAST %select(i32)
    %fcopysign:_(f32) = nnan G_FCOPYSIGN %9, %sixteen(f64)
    %11:_(i32) = G_BITCAST %fcopysign(f32)
    S_ENDPGM 0, implicit %11(i32)
...

---
name: fold_fcopysign_into_select_s64_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_fcopysign_into_select_s64_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: %two:_(f64) = G_FCONSTANT double 2.000000e+00
    ; CHECK-NEXT: %four:_(f64) = G_FCONSTANT double 4.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i64) = G_BITCAST %two(f64)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST %four(f64)
    ; CHECK-NEXT: %select:_(i64) = G_SELECT %cond(i1), [[BITCAST]], [[BITCAST1]]
    ; CHECK-NEXT: %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f64) = G_BITCAST %select(i64)
    ; CHECK-NEXT: %fcopysign:_(f64) = nnan G_FCOPYSIGN [[BITCAST2]], %sixteen(f32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST %fcopysign(f64)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST3]](i64)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %two:_(f64) = G_FCONSTANT double 2.000000e+00
    %four:_(f64) = G_FCONSTANT double 4.000000e+00
    %5:_(i64) = G_BITCAST %two(f64)
    %6:_(i64) = G_BITCAST %four(f64)
    %select:_(i64) = G_SELECT %cond(i1), %5, %6
    %sixteen:_(f32) = G_FCONSTANT float 1.600000e+01
    %9:_(f64) = G_BITCAST %select(i64)
    %fcopysign:_(f64) = nnan G_FCOPYSIGN %9, %sixteen(f32)
    %11:_(i64) = G_BITCAST %fcopysign(f64)
    S_ENDPGM 0, implicit %11(i64)
...

# Test handling of intermediate copy between add and select.
---
name: fold_add_copy_into_select_s32_0
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_add_copy_into_select_s32_0
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: %add:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %copy_select:_(i32) = COPY %select(i32)
    %add:_(i32) = G_ADD %copy_select, %thirty
    S_ENDPGM 0, implicit %add(i32)
...

---
name: fold_add_copy_into_select_s32_1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: fold_add_copy_into_select_s32_1
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 40
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 50
    ; CHECK-NEXT: %add:_(i32) = G_SELECT %cond(i1), [[C]], [[C1]]
    ; CHECK-NEXT: S_ENDPGM 0, implicit %add(i32)
    %reg:_(i32) = COPY $vgpr0
    %zero:_(i32) = G_CONSTANT i32 0
    %cond:_(i1) = G_ICMP intpred(eq), %reg(i32), %zero
    %ten:_(i32) = G_CONSTANT i32 10
    %twenty:_(i32) = G_CONSTANT i32 20
    %select:_(i32) = G_SELECT %cond(i1), %ten, %twenty
    %thirty:_(i32) = G_CONSTANT i32 30
    %copy_select:_(i32) = COPY %select(i32)
    %add:_(i32) = G_ADD %thirty, %copy_select
    S_ENDPGM 0, implicit %add(i32)
...
