# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -run-pass=amdgpu-regbanklegalize %s -verify-machineinstrs -o - | FileCheck %s

---
name: uniform_in_vgpr
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: uniform_in_vgpr
    ; CHECK: liveins: $sgpr0, $sgpr1, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST]](f32)
    ; CHECK-NEXT: [[FPTOUI:%[0-9]+]]:vgpr(i32) = G_FPTOUI [[COPY4]](f32)
    ; CHECK-NEXT: [[AMDGPU_READANYLANE:%[0-9]+]]:sgpr(i32) = G_AMDGPU_READANYLANE [[FPTOUI]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:sgpr(i32) = G_ADD [[AMDGPU_READANYLANE]], [[COPY1]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(i32) = COPY [[ADD]](i32)
    ; CHECK-NEXT: G_STORE [[COPY5]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:vgpr(i32) = COPY $vgpr0
    %3:vgpr(i32) = COPY $vgpr1
    %4:vgpr(p1) = G_MERGE_VALUES %2(i32), %3(i32)
    %5:sgpr(f32) = G_BITCAST %0(i32)
    %6:sgpr(i32) = G_FPTOUI %5(f32)
    %7:sgpr(i32) = G_ADD %6, %1
    G_STORE %7(i32), %4(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: back_to_back_uniform_in_vgpr
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $sgpr2, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: back_to_back_uniform_in_vgpr
    ; CHECK: liveins: $sgpr0, $sgpr1, $sgpr2, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY3]](i32), [[COPY4]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST]](f32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST1]](f32)
    ; CHECK-NEXT: [[FADD:%[0-9]+]]:vgpr(f32) = G_FADD [[COPY5]], [[COPY6]]
    ; CHECK-NEXT: [[FPTOUI:%[0-9]+]]:vgpr(i32) = G_FPTOUI [[FADD]](f32)
    ; CHECK-NEXT: [[AMDGPU_READANYLANE:%[0-9]+]]:sgpr(i32) = G_AMDGPU_READANYLANE [[FPTOUI]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:sgpr(i32) = G_ADD [[AMDGPU_READANYLANE]], [[COPY2]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(i32) = COPY [[ADD]](i32)
    ; CHECK-NEXT: G_STORE [[COPY7]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:vgpr(i32) = COPY $vgpr0
    %4:vgpr(i32) = COPY $vgpr1
    %5:vgpr(p1) = G_MERGE_VALUES %3(i32), %4(i32)
    %6:sgpr(f32) = G_BITCAST %0(i32)
    %7:sgpr(f32) = G_BITCAST %1(i32)
    %8:sgpr(f32) = G_FADD %6, %7
    %9:sgpr(i32) = G_FPTOUI %8(f32)
    %10:sgpr(i32) = G_ADD %9, %2
    G_STORE %10(i32), %5(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: buffer_load_uniform
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $sgpr4, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: buffer_load_uniform
    ; CHECK: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $sgpr4, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:sgpr(i32) = COPY $sgpr3
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:sgpr(<4 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32), [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:sgpr(i32) = COPY $sgpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY5]](i32), [[COPY6]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:vgpr(i32) = COPY [[COPY4]](i32)
    ; CHECK-NEXT: [[AMDGPU_BUFFER_LOAD:%[0-9]+]]:vgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD [[BUILD_VECTOR]](<4 x i32>), [[COPY7]](i32), [[COPY8]], [[C]], 0, 0, 0 :: (dereferenceable load (<4 x i32>), align 1, addrspace 8)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:vgpr(i32), [[UV1:%[0-9]+]]:vgpr(i32), [[UV2:%[0-9]+]]:vgpr(i32), [[UV3:%[0-9]+]]:vgpr(i32) = G_UNMERGE_VALUES [[AMDGPU_BUFFER_LOAD]](<4 x i32>)
    ; CHECK-NEXT: [[AMDGPU_READANYLANE:%[0-9]+]]:sgpr(i32) = G_AMDGPU_READANYLANE [[UV]]
    ; CHECK-NEXT: [[AMDGPU_READANYLANE1:%[0-9]+]]:sgpr(i32) = G_AMDGPU_READANYLANE [[UV1]]
    ; CHECK-NEXT: [[AMDGPU_READANYLANE2:%[0-9]+]]:sgpr(i32) = G_AMDGPU_READANYLANE [[UV2]]
    ; CHECK-NEXT: [[AMDGPU_READANYLANE3:%[0-9]+]]:sgpr(i32) = G_AMDGPU_READANYLANE [[UV3]]
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:sgpr(<4 x i32>) = G_BUILD_VECTOR [[AMDGPU_READANYLANE]](i32), [[AMDGPU_READANYLANE1]](i32), [[AMDGPU_READANYLANE2]](i32), [[AMDGPU_READANYLANE3]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:sgpr(i32), [[UV5:%[0-9]+]]:sgpr(i32), [[UV6:%[0-9]+]]:sgpr(i32), [[UV7:%[0-9]+]]:sgpr(i32) = G_UNMERGE_VALUES [[BUILD_VECTOR1]](<4 x i32>)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:sgpr(i32) = G_ADD [[UV5]], [[C1]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:vgpr(i32) = COPY [[ADD]](i32)
    ; CHECK-NEXT: G_STORE [[COPY9]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:sgpr(i32) = COPY $sgpr3
    %4:sgpr(<4 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32), %2(i32), %3(i32)
    %5:sgpr(i32) = COPY $sgpr4
    %6:vgpr(i32) = COPY $vgpr0
    %7:vgpr(i32) = COPY $vgpr1
    %8:vgpr(p1) = G_MERGE_VALUES %6(i32), %7(i32)
    %9:sgpr(i32) = G_CONSTANT i32 0
    %10:sgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD %4(<4 x i32>), %9(i32), %5, %9, 0, 0, 0 :: (dereferenceable load (<4 x i32>), align 1, addrspace 8)
    %11:sgpr(i32) = G_CONSTANT i32 1
    %12:sgpr(i32), %13:sgpr(i32), %14:sgpr(i32), %15:sgpr(i32) = G_UNMERGE_VALUES %10(<4 x i32>)
    %16:sgpr(i32) = G_ADD %13, %11
    G_STORE %16(i32), %8(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: buffer_load_divergent
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: buffer_load_divergent
    ; CHECK: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3, $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:sgpr(i32) = COPY $sgpr3
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:sgpr(<4 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32), [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY5]](i32), [[COPY6]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
    ; CHECK-NEXT: [[AMDGPU_BUFFER_LOAD:%[0-9]+]]:vgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD [[BUILD_VECTOR]](<4 x i32>), [[COPY7]](i32), [[COPY4]], [[C]], 0, 0, 0 :: (dereferenceable load (<4 x i32>), align 1, addrspace 8)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:vgpr(i32), [[UV1:%[0-9]+]]:vgpr(i32), [[UV2:%[0-9]+]]:vgpr(i32), [[UV3:%[0-9]+]]:vgpr(i32) = G_UNMERGE_VALUES [[AMDGPU_BUFFER_LOAD]](<4 x i32>)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:vgpr(i32) = COPY [[C1]](i32)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:vgpr(i32) = G_ADD [[UV1]], [[COPY8]]
    ; CHECK-NEXT: G_STORE [[ADD]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:sgpr(i32) = COPY $sgpr3
    %4:sgpr(<4 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32), %2(i32), %3(i32)
    %5:vgpr(i32) = COPY $vgpr0
    %6:vgpr(i32) = COPY $vgpr1
    %7:vgpr(i32) = COPY $vgpr2
    %8:vgpr(p1) = G_MERGE_VALUES %6(i32), %7(i32)
    %9:sgpr(i32) = G_CONSTANT i32 0
    %10:vgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD %4(<4 x i32>), %9(i32), %5, %9, 0, 0, 0 :: (dereferenceable load (<4 x i32>), align 1, addrspace 8)
    %11:sgpr(i32) = G_CONSTANT i32 1
    %12:vgpr(i32), %13:vgpr(i32), %14:vgpr(i32), %15:vgpr(i32) = G_UNMERGE_VALUES %10(<4 x i32>)
    %16:vgpr(i32) = G_ADD %13, %11
    G_STORE %16(i32), %8(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: vgpr_and_i64
legalized: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; CHECK-LABEL: name: vgpr_and_i64
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:vgpr(i64) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(i32) = COPY $vgpr5
    ; CHECK-NEXT: [[MV2:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY4]](i32), [[COPY5]](i32)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:vgpr(i32), [[UV1:%[0-9]+]]:vgpr(i32) = G_UNMERGE_VALUES [[MV]](i64)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:vgpr(i32), [[UV3:%[0-9]+]]:vgpr(i32) = G_UNMERGE_VALUES [[MV1]](i64)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vgpr(i32) = G_AND [[UV]], [[UV2]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:vgpr(i32) = G_AND [[UV1]], [[UV3]]
    ; CHECK-NEXT: [[MV3:%[0-9]+]]:vgpr(i64) = G_MERGE_VALUES [[AND]](i32), [[AND1]](i32)
    ; CHECK-NEXT: G_STORE [[MV3]](i64), [[MV2]](p1) :: (store (i64), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:vgpr(i32) = COPY $vgpr2
    %4:vgpr(i32) = COPY $vgpr3
    %5:vgpr(i64) = G_MERGE_VALUES %3(i32), %4(i32)
    %6:vgpr(i32) = COPY $vgpr4
    %7:vgpr(i32) = COPY $vgpr5
    %8:vgpr(p1) = G_MERGE_VALUES %6(i32), %7(i32)
    %9:vgpr(i64) = G_AND %2, %5
    G_STORE %9(i64), %8(p1) :: (store (i64), addrspace 1)
    S_ENDPGM 0
...

---
name: abs_sgpr_i16
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: abs_sgpr_i16
    ; CHECK: liveins: $sgpr0, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:sgpr(i32) = G_SEXT [[TRUNC]](i16)
    ; CHECK-NEXT: [[ABS:%[0-9]+]]:sgpr(i32) = G_ABS [[SEXT]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:sgpr(i16) = G_TRUNC [[ABS]](i32)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[TRUNC1]](i16)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[ANYEXT]](i32)
    ; CHECK-NEXT: G_STORE [[COPY3]](i32), [[MV]](p1) :: (store (i16), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i16) = G_TRUNC %0(i32)
    %2:vgpr(i32) = COPY $vgpr0
    %3:vgpr(i32) = COPY $vgpr1
    %4:vgpr(p1) = G_MERGE_VALUES %2(i32), %3(i32)
    %5:sgpr(i16) = G_ABS %1
    %6:sgpr(i32) = G_ANYEXT %5(i16)
    G_STORE %6(i32), %4(p1) :: (store (i16), addrspace 1)
    S_ENDPGM 0
...

---
name: uniform_i1_phi
legalized: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: uniform_i1_phi
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x30000000), %bb.2(0x50000000)
  ; CHECK-NEXT:   liveins: $sgpr0, $sgpr1, $vgpr0, $vgpr1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
  ; CHECK-NEXT:   [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 6
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(uge), [[COPY2]](i32), [[C]]
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[ICMP1:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(ne), [[COPY3]](i32), [[C1]]
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:sgpr(i32) = G_AND [[ICMP1]], [[C2]]
  ; CHECK-NEXT:   G_BRCOND [[AND]](i32), %bb.2
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[ICMP2:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(ult), [[COPY2]](i32), [[C3]]
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:sgpr(i32) = G_PHI [[ICMP]](i32), %bb.0, [[ICMP2]](i32), %bb.1
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AND1:%[0-9]+]]:sgpr(i32) = G_AND [[PHI]], [[C4]]
  ; CHECK-NEXT:   [[C5:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 -1
  ; CHECK-NEXT:   [[C6:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[SELECT:%[0-9]+]]:sgpr(i32) = G_SELECT [[AND1]](i32), [[C5]], [[C6]]
  ; CHECK-NEXT:   [[C7:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:sgpr(i32) = G_ADD [[SELECT]], [[C7]]
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:vgpr(i32) = COPY [[ADD]](i32)
  ; CHECK-NEXT:   G_STORE [[COPY4]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
  ; CHECK-NEXT:   S_ENDPGM 0
  bb.0:
    successors: %bb.1(0x30000000), %bb.2(0x50000000)
    liveins: $sgpr0, $sgpr1, $vgpr0, $vgpr1

    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(p1) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:sgpr(i32) = COPY $sgpr0
    %4:sgpr(i32) = COPY $sgpr1
    %5:sgpr(i32) = G_CONSTANT i32 6
    %6:sgpr(i1) = G_ICMP intpred(uge), %3(i32), %5
    %7:sgpr(i32) = G_CONSTANT i32 0
    %8:sgpr(i1) = G_ICMP intpred(ne), %4(i32), %7
    G_BRCOND %8(i1), %bb.2
    G_BR %bb.1

  bb.1:
    successors: %bb.2(0x80000000)

    %9:sgpr(i32) = G_CONSTANT i32 1
    %10:sgpr(i1) = G_ICMP intpred(ult), %3(i32), %9

  bb.2:
    %11:sgpr(i1) = G_PHI %6(i1), %bb.0, %10(i1), %bb.1
    %12:sgpr(i32) = G_SEXT %11(i1)
    %13:sgpr(i32) = G_CONSTANT i32 2
    %14:sgpr(i32) = G_ADD %12, %13
    G_STORE %14(i32), %2(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0




...

---
name: vcc_to_scc
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $sgpr2, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: vcc_to_scc
    ; CHECK: liveins: $sgpr0, $sgpr1, $sgpr2, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY3]](i32), [[COPY4]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(f32) = G_FCONSTANT float 0.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST]](f32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(f32) = COPY [[C]](f32)
    ; CHECK-NEXT: [[FCMP:%[0-9]+]]:vcc(i1) = G_FCMP floatpred(oeq), [[COPY5]](f32), [[COPY6]]
    ; CHECK-NEXT: [[AMDGPU_COPY_SCC_VCC:%[0-9]+]]:sgpr(i32) = G_AMDGPU_COPY_SCC_VCC [[FCMP]](i1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:sgpr(i32) = G_AND [[AMDGPU_COPY_SCC_VCC]], [[C1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:sgpr(i32) = G_SELECT [[AND]](i32), [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(i32) = COPY [[SELECT]](i32)
    ; CHECK-NEXT: G_STORE [[COPY7]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:vgpr(i32) = COPY $vgpr0
    %4:vgpr(i32) = COPY $vgpr1
    %5:vgpr(p1) = G_MERGE_VALUES %3(i32), %4(i32)
    %6:sgpr(f32) = G_FCONSTANT float 0.000000e+00
    %7:sgpr(f32) = G_BITCAST %0(i32)
    %8:sgpr(i1) = G_FCMP floatpred(oeq), %7(f32), %6
    %9:sgpr(i32) = G_SELECT %8(i1), %1, %2
    G_STORE %9(i32), %5(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: scc_to_vcc
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; CHECK-LABEL: name: scc_to_vcc
    ; CHECK: liveins: $sgpr0, $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY3]](i32), [[COPY4]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(eq), [[COPY]](i32), [[C]]
    ; CHECK-NEXT: [[AMDGPU_COPY_VCC_SCC:%[0-9]+]]:vcc(i1) = G_AMDGPU_COPY_VCC_SCC [[ICMP]](i32)
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:vgpr(i32) = G_SELECT [[AMDGPU_COPY_VCC_SCC]](i1), [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: G_STORE [[SELECT]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:vgpr(i32) = COPY $vgpr0
    %2:vgpr(i32) = COPY $vgpr1
    %3:vgpr(i32) = COPY $vgpr2
    %4:vgpr(i32) = COPY $vgpr3
    %5:vgpr(p1) = G_MERGE_VALUES %3(i32), %4(i32)
    %6:sgpr(i32) = G_CONSTANT i32 0
    %7:sgpr(i1) = G_ICMP intpred(eq), %0(i32), %6
    %8:vgpr(i32) = G_SELECT %7(i1), %1, %2
    G_STORE %8(i32), %5(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: vgpr_to_vcc_trunc
legalized: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4

    ; CHECK-LABEL: name: vgpr_to_vcc_trunc
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr4
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY3]](i32), [[COPY4]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:vgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vgpr(i32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:vgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(ne), [[AND]](i32), [[C1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:vgpr(i32) = G_SELECT [[ICMP]](i1), [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: G_STORE [[SELECT]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(i32) = COPY $vgpr4
    %5:vgpr(p1) = G_MERGE_VALUES %3(i32), %4(i32)
    %6:vcc(i1) = G_TRUNC %0(i32)
    %7:vgpr(i32) = G_SELECT %6(i1), %1, %2
    G_STORE %7(i32), %5(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: zext
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: zext
    ; CHECK: liveins: $sgpr0, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(eq), [[COPY]](i32), [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:sgpr(i32) = G_AND [[ICMP]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:sgpr(i32) = G_SELECT [[AND]](i32), [[C1]], [[C2]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[SELECT]](i32)
    ; CHECK-NEXT: G_STORE [[COPY3]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:vgpr(i32) = COPY $vgpr0
    %2:vgpr(i32) = COPY $vgpr1
    %3:vgpr(p1) = G_MERGE_VALUES %1(i32), %2(i32)
    %4:sgpr(i32) = G_CONSTANT i32 10
    %5:sgpr(i1) = G_ICMP intpred(eq), %0(i32), %4
    %6:sgpr(i32) = G_ZEXT %5(i1)
    G_STORE %6(i32), %3(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: sext
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: sext
    ; CHECK: liveins: $sgpr0, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(eq), [[COPY]](i32), [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:sgpr(i32) = G_AND [[ICMP]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[C3:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:sgpr(i32) = G_SELECT [[AND]](i32), [[C2]], [[C3]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[SELECT]](i32)
    ; CHECK-NEXT: G_STORE [[COPY3]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:vgpr(i32) = COPY $vgpr0
    %2:vgpr(i32) = COPY $vgpr1
    %3:vgpr(p1) = G_MERGE_VALUES %1(i32), %2(i32)
    %4:sgpr(i32) = G_CONSTANT i32 10
    %5:sgpr(i1) = G_ICMP intpred(eq), %0(i32), %4
    %6:sgpr(i32) = G_SEXT %5(i1)
    G_STORE %6(i32), %3(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: and_i1_vcc
legalized: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; CHECK-LABEL: name: and_i1_vcc
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(uge), [[COPY]](i32), [[COPY4]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(i32) = COPY [[C1]](i32)
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:vcc(i1) = G_ICMP intpred(uge), [[COPY1]](i32), [[COPY5]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vcc(i1) = G_AND [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:vgpr(i32) = G_SELECT [[AND]](i1), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: G_STORE [[SELECT]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(p1) = G_MERGE_VALUES %2(i32), %3(i32)
    %5:sgpr(i32) = G_CONSTANT i32 10
    %6:vcc(i1) = G_ICMP intpred(uge), %0(i32), %5
    %7:sgpr(i32) = G_CONSTANT i32 20
    %8:vcc(i1) = G_ICMP intpred(uge), %1(i32), %7
    %9:vcc(i1) = G_AND %6, %8
    %10:vgpr(i32) = G_SELECT %9(i1), %0, %1
    G_STORE %10(i32), %4(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: and_i1_scc
legalized: true
body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $vgpr0, $vgpr1

    ; CHECK-LABEL: name: and_i1_scc
    ; CHECK: liveins: $sgpr0, $sgpr1, $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 10
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(uge), [[COPY]](i32), [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(uge), [[COPY1]](i32), [[C1]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:sgpr(i32) = G_AND [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:sgpr(i32) = G_AND [[AND]], [[C2]]
    ; CHECK-NEXT: [[SELECT:%[0-9]+]]:sgpr(i32) = G_SELECT [[AND1]](i32), [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY [[SELECT]](i32)
    ; CHECK-NEXT: G_STORE [[COPY4]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
    ; CHECK-NEXT: S_ENDPGM 0
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:vgpr(i32) = COPY $vgpr0
    %3:vgpr(i32) = COPY $vgpr1
    %4:vgpr(p1) = G_MERGE_VALUES %2(i32), %3(i32)
    %5:sgpr(i32) = G_CONSTANT i32 10
    %6:sgpr(i1) = G_ICMP intpred(uge), %0(i32), %5
    %7:sgpr(i32) = G_CONSTANT i32 20
    %8:sgpr(i1) = G_ICMP intpred(uge), %1(i32), %7
    %9:sgpr(i1) = G_AND %6, %8
    %10:sgpr(i32) = G_SELECT %9(i1), %0, %1
    G_STORE %10(i32), %4(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: divergent_phi_with_uniform_inputs
legalized: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: divergent_phi_with_uniform_inputs
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[COPY]](i32), [[COPY3]]
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:sreg_32_xm0_xexec(i1) = COPY [[ICMP]](i1)
  ; CHECK-NEXT:   [[SI_IF:%[0-9]+]]:sreg_32_xm0_xexec(i32) = SI_IF [[COPY4]](i1), %bb.2, implicit-def $exec, implicit-def $scc, implicit $exec
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:vgpr(i32) = G_PHI [[C]](i32), %bb.0, [[C1]](i32), %bb.1
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:sgpr(i32) = COPY [[SI_IF]](i32)
  ; CHECK-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[COPY5]](i32)
  ; CHECK-NEXT:   G_STORE [[PHI]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
  ; CHECK-NEXT:   S_ENDPGM 0
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $vgpr0, $vgpr1, $vgpr2

    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(p1) = G_MERGE_VALUES %1(i32), %2(i32)
    %4:sgpr(i32) = G_CONSTANT i32 0
    %5:vcc(i1) = G_ICMP intpred(eq), %0(i32), %4
    %6:sreg_32_xm0_xexec(i1) = COPY %5(i1)
    %7:sreg_32_xm0_xexec(i32) = SI_IF %6(i1), %bb.2, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.1

  bb.1:
    successors: %bb.2(0x80000000)

    %8:sgpr(i32) = G_CONSTANT i32 1

  bb.2:
    %9:vgpr(i32) = G_PHI %4(i32), %bb.0, %8(i32), %bb.1
    %10:sgpr(i32) = COPY %7(i32)
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %10(i32)
    G_STORE %9(i32), %3(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: divergent_because_of_temporal_divergent_use
legalized: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: divergent_because_of_temporal_divergent_use
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY1]](i32), [[COPY2]](i32)
  ; CHECK-NEXT:   [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 -1
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x04000000), %bb.1(0x7c000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:sgpr(i32) = G_PHI %7(i32), %bb.1, [[C1]](i32), %bb.0
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:sgpr(i32) = G_PHI [[C]](i32), %bb.0, %9(i32), %bb.1
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:sgpr(i32) = G_ADD [[PHI1]], [[C2]]
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[ADD]](i32)
  ; CHECK-NEXT:   [[UITOFP:%[0-9]+]]:vgpr(f32) = G_UITOFP [[COPY3]](i32)
  ; CHECK-NEXT:   [[BITCAST:%[0-9]+]]:vgpr(f32) = G_BITCAST [[COPY]](i32)
  ; CHECK-NEXT:   [[FCMP:%[0-9]+]]:vcc(i1) = G_FCMP floatpred(ogt), [[UITOFP]](f32), [[BITCAST]]
  ; CHECK-NEXT:   [[INT:%[0-9]+]]:sgpr(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), [[FCMP]](i1), [[PHI]](i32)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:sreg_32_xm0_xexec(i32) = COPY [[INT]](i32)
  ; CHECK-NEXT:   SI_LOOP [[COPY4]](i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:vgpr(i32) = G_PHI [[ADD]](i32), %bb.1
  ; CHECK-NEXT:   [[PHI3:%[0-9]+]]:sgpr(i32) = G_PHI [[INT]](i32), %bb.1
  ; CHECK-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[PHI3]](i32)
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 10
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:vgpr(i32) = COPY [[C3]](i32)
  ; CHECK-NEXT:   [[MUL:%[0-9]+]]:vgpr(i32) = G_MUL [[PHI2]], [[COPY5]]
  ; CHECK-NEXT:   G_STORE [[MUL]](i32), [[MV]](p1) :: (store (i32), addrspace 1)
  ; CHECK-NEXT:   S_ENDPGM 0
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2

    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(p1) = G_MERGE_VALUES %1(i32), %2(i32)
    %4:sgpr(i32) = G_CONSTANT i32 -1
    %5:sgpr(i32) = G_CONSTANT i32 0

  bb.1:
    successors: %bb.2(0x04000000), %bb.1(0x7c000000)

    %6:sgpr(i32) = G_PHI %7(i32), %bb.1, %5(i32), %bb.0
    %8:sgpr(i32) = G_PHI %4(i32), %bb.0, %9(i32), %bb.1
    %10:sgpr(i32) = G_CONSTANT i32 1
    %9:sgpr(i32) = G_ADD %8, %10
    %11:sgpr(f32) = G_UITOFP %9(i32)
    %12:vgpr(f32) = G_BITCAST %0(i32)
    %13:vcc(i1) = G_FCMP floatpred(ogt), %11(f32), %12
    %7:sgpr(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), %13(i1), %6(i32)
    %14:sreg_32_xm0_xexec(i32) = COPY %7(i32)
    SI_LOOP %14(i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.2

  bb.2:
    %15:vgpr(i32) = G_PHI %9(i32), %bb.1
    %16:sgpr(i32) = G_PHI %7(i32), %bb.1
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %16(i32)
    %17:sgpr(i32) = G_CONSTANT i32 10
    %18:vgpr(i32) = G_MUL %15, %17
    G_STORE %18(i32), %3(p1) :: (store (i32), addrspace 1)
    S_ENDPGM 0
...

---
name: loop_with_2breaks
legalized: true
tracksRegLiveness: true
body: |
  ; CHECK-LABEL: name: loop_with_2breaks
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
  ; CHECK-NEXT:   [[MV:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
  ; CHECK-NEXT:   [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
  ; CHECK-NEXT:   [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr3
  ; CHECK-NEXT:   [[MV1:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
  ; CHECK-NEXT:   [[COPY4:%[0-9]+]]:vgpr(i32) = COPY $vgpr4
  ; CHECK-NEXT:   [[COPY5:%[0-9]+]]:vgpr(i32) = COPY $vgpr5
  ; CHECK-NEXT:   [[MV2:%[0-9]+]]:vgpr(p1) = G_MERGE_VALUES [[COPY4]](i32), [[COPY5]](i32)
  ; CHECK-NEXT:   [[DEF:%[0-9]+]]:sgpr(i32) = G_IMPLICIT_DEF
  ; CHECK-NEXT:   [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[DEF1:%[0-9]+]]:sreg_32(i1) = IMPLICIT_DEF
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.2(0x40000000), %bb.3(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:sreg_32(i1) = PHI [[DEF1]](i1), %bb.0, %13(i1), %bb.3
  ; CHECK-NEXT:   [[PHI1:%[0-9]+]]:sgpr(i32) = G_PHI %15(i32), %bb.3, [[C]](i32), %bb.0
  ; CHECK-NEXT:   [[PHI2:%[0-9]+]]:sgpr(i32) = G_PHI [[C]](i32), %bb.0, %17(i32), %bb.3
  ; CHECK-NEXT:   [[COPY6:%[0-9]+]]:sreg_32(i1) = COPY [[PHI]](i1)
  ; CHECK-NEXT:   [[C1:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 31
  ; CHECK-NEXT:   [[ASHR:%[0-9]+]]:sgpr(i32) = G_ASHR [[PHI2]], [[C1]](i32)
  ; CHECK-NEXT:   [[MV3:%[0-9]+]]:sgpr(i64) = G_MERGE_VALUES [[PHI2]](i32), [[ASHR]](i32)
  ; CHECK-NEXT:   [[C2:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[SHL:%[0-9]+]]:sgpr(i64) = G_SHL [[MV3]], [[C2]](i32)
  ; CHECK-NEXT:   [[COPY7:%[0-9]+]]:vgpr(i64) = COPY [[SHL]](i64)
  ; CHECK-NEXT:   [[PTR_ADD:%[0-9]+]]:vgpr(p1) = G_PTR_ADD [[MV1]], [[COPY7]](i64)
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:vgpr(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32), addrspace 1)
  ; CHECK-NEXT:   [[C3:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[COPY8:%[0-9]+]]:vgpr(i32) = COPY [[C3]](i32)
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(ne), [[LOAD]](i32), [[COPY8]]
  ; CHECK-NEXT:   [[COPY9:%[0-9]+]]:sreg_32_xm0_xexec(i1) = COPY [[ICMP]](i1)
  ; CHECK-NEXT:   [[C4:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AMDGPU_COPY_VCC_SCC:%[0-9]+]]:sreg_32(i1) = G_AMDGPU_COPY_VCC_SCC [[C4]](i32)
  ; CHECK-NEXT:   [[S_ANDN2_B32_:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY6]](i1), $exec_lo, implicit-def $scc
  ; CHECK-NEXT:   [[S_AND_B32_:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[AMDGPU_COPY_VCC_SCC]](i1), implicit-def $scc
  ; CHECK-NEXT:   [[S_OR_B32_:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_]](i1), [[S_AND_B32_]](i1), implicit-def $scc
  ; CHECK-NEXT:   [[COPY10:%[0-9]+]]:sreg_32(i1) = COPY [[S_OR_B32_]](i1)
  ; CHECK-NEXT:   [[SI_IF:%[0-9]+]]:sreg_32_xm0_xexec(i32) = SI_IF [[COPY9]](i1), %bb.3, implicit-def $exec, implicit-def $scc, implicit $exec
  ; CHECK-NEXT:   G_BR %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   successors: %bb.4(0x40000000), %bb.5(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C5:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[SHL1:%[0-9]+]]:sgpr(i64) = G_SHL [[MV3]], [[C5]](i32)
  ; CHECK-NEXT:   [[COPY11:%[0-9]+]]:vgpr(i64) = COPY [[SHL1]](i64)
  ; CHECK-NEXT:   [[PTR_ADD1:%[0-9]+]]:vgpr(p1) = G_PTR_ADD [[MV2]], [[COPY11]](i64)
  ; CHECK-NEXT:   [[LOAD1:%[0-9]+]]:vgpr(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i32), addrspace 1)
  ; CHECK-NEXT:   [[C6:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
  ; CHECK-NEXT:   [[COPY12:%[0-9]+]]:vgpr(i32) = COPY [[C6]](i32)
  ; CHECK-NEXT:   [[ICMP1:%[0-9]+]]:vcc(i1) = G_ICMP intpred(ne), [[LOAD1]](i32), [[COPY12]]
  ; CHECK-NEXT:   [[COPY13:%[0-9]+]]:sreg_32_xm0_xexec(i1) = COPY [[ICMP1]](i1)
  ; CHECK-NEXT:   [[C7:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[AMDGPU_COPY_VCC_SCC1:%[0-9]+]]:sreg_32(i1) = G_AMDGPU_COPY_VCC_SCC [[C7]](i32)
  ; CHECK-NEXT:   [[COPY14:%[0-9]+]]:sreg_32(i1) = COPY [[AMDGPU_COPY_VCC_SCC1]](i1)
  ; CHECK-NEXT:   [[SI_IF1:%[0-9]+]]:sreg_32_xm0_xexec(i32) = SI_IF [[COPY13]](i1), %bb.5, implicit-def $exec, implicit-def $scc, implicit $exec
  ; CHECK-NEXT:   G_BR %bb.4
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3:
  ; CHECK-NEXT:   successors: %bb.6(0x04000000), %bb.1(0x7c000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI3:%[0-9]+]]:sreg_32(i1) = PHI [[S_OR_B32_]](i1), %bb.1, %45(i1), %bb.5
  ; CHECK-NEXT:   [[PHI4:%[0-9]+]]:sgpr(i32) = G_PHI %46(i32), %bb.5, [[DEF]](i32), %bb.1
  ; CHECK-NEXT:   [[COPY15:%[0-9]+]]:sreg_32(i1) = COPY [[PHI3]](i1)
  ; CHECK-NEXT:   [[COPY16:%[0-9]+]]:sgpr(i32) = COPY [[SI_IF]](i32)
  ; CHECK-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[COPY16]](i32)
  ; CHECK-NEXT:   [[COPY17:%[0-9]+]]:vcc(i1) = COPY [[COPY15]](i1)
  ; CHECK-NEXT:   [[INT:%[0-9]+]]:sgpr(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), [[COPY17]](i1), [[PHI1]](i32)
  ; CHECK-NEXT:   [[COPY18:%[0-9]+]]:sreg_32_xm0_xexec(i32) = COPY [[INT]](i32)
  ; CHECK-NEXT:   SI_LOOP [[COPY18]](i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
  ; CHECK-NEXT:   G_BR %bb.6
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.4:
  ; CHECK-NEXT:   successors: %bb.5(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[C8:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 2
  ; CHECK-NEXT:   [[SHL2:%[0-9]+]]:sgpr(i64) = G_SHL [[MV3]], [[C8]](i32)
  ; CHECK-NEXT:   [[COPY19:%[0-9]+]]:vgpr(i64) = COPY [[SHL2]](i64)
  ; CHECK-NEXT:   [[PTR_ADD2:%[0-9]+]]:vgpr(p1) = G_PTR_ADD [[MV]], [[COPY19]](i64)
  ; CHECK-NEXT:   [[LOAD2:%[0-9]+]]:vgpr(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i32), addrspace 1)
  ; CHECK-NEXT:   [[C9:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 1
  ; CHECK-NEXT:   [[COPY20:%[0-9]+]]:vgpr(i32) = COPY [[C9]](i32)
  ; CHECK-NEXT:   [[ADD:%[0-9]+]]:vgpr(i32) = G_ADD [[LOAD2]], [[COPY20]]
  ; CHECK-NEXT:   G_STORE [[ADD]](i32), [[PTR_ADD2]](p1) :: (store (i32), addrspace 1)
  ; CHECK-NEXT:   [[ADD1:%[0-9]+]]:sgpr(i32) = G_ADD [[PHI2]], [[C9]]
  ; CHECK-NEXT:   [[C10:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 100
  ; CHECK-NEXT:   [[ICMP2:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(ult), [[PHI2]](i32), [[C10]]
  ; CHECK-NEXT:   [[AND:%[0-9]+]]:sgpr(i32) = G_AND [[ICMP2]], [[C9]]
  ; CHECK-NEXT:   [[AMDGPU_COPY_VCC_SCC2:%[0-9]+]]:sreg_32(i1) = G_AMDGPU_COPY_VCC_SCC [[AND]](i32)
  ; CHECK-NEXT:   [[S_ANDN2_B32_1:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY14]](i1), $exec_lo, implicit-def $scc
  ; CHECK-NEXT:   [[S_AND_B32_1:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[AMDGPU_COPY_VCC_SCC2]](i1), implicit-def $scc
  ; CHECK-NEXT:   [[S_OR_B32_1:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_1]](i1), [[S_AND_B32_1]](i1), implicit-def $scc
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.5:
  ; CHECK-NEXT:   successors: %bb.3(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI5:%[0-9]+]]:sreg_32(i1) = PHI [[AMDGPU_COPY_VCC_SCC1]](i1), %bb.2, [[S_OR_B32_1]](i1), %bb.4
  ; CHECK-NEXT:   [[PHI6:%[0-9]+]]:sgpr(i32) = G_PHI [[ADD1]](i32), %bb.4, [[DEF]](i32), %bb.2
  ; CHECK-NEXT:   [[COPY21:%[0-9]+]]:sreg_32(i1) = COPY [[PHI5]](i1)
  ; CHECK-NEXT:   [[COPY22:%[0-9]+]]:sreg_32(i1) = COPY [[COPY21]](i1)
  ; CHECK-NEXT:   [[COPY23:%[0-9]+]]:sgpr(i32) = COPY [[SI_IF1]](i32)
  ; CHECK-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[COPY23]](i32)
  ; CHECK-NEXT:   [[S_ANDN2_B32_2:%[0-9]+]]:sreg_32(i1) = S_ANDN2_B32 [[COPY10]](i1), $exec_lo, implicit-def $scc
  ; CHECK-NEXT:   [[S_AND_B32_2:%[0-9]+]]:sreg_32(i1) = S_AND_B32 $exec_lo, [[COPY22]](i1), implicit-def $scc
  ; CHECK-NEXT:   [[S_OR_B32_2:%[0-9]+]]:sreg_32(i1) = S_OR_B32 [[S_ANDN2_B32_2]](i1), [[S_AND_B32_2]](i1), implicit-def $scc
  ; CHECK-NEXT:   G_BR %bb.3
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.6:
  ; CHECK-NEXT:   [[PHI7:%[0-9]+]]:sgpr(i32) = G_PHI [[INT]](i32), %bb.3
  ; CHECK-NEXT:   G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), [[PHI7]](i32)
  ; CHECK-NEXT:   S_ENDPGM 0
  bb.0:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(p1) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:vgpr(i32) = COPY $vgpr2
    %4:vgpr(i32) = COPY $vgpr3
    %5:vgpr(p1) = G_MERGE_VALUES %3(i32), %4(i32)
    %6:vgpr(i32) = COPY $vgpr4
    %7:vgpr(i32) = COPY $vgpr5
    %8:vgpr(p1) = G_MERGE_VALUES %6(i32), %7(i32)
    %9:sgpr(i32) = G_IMPLICIT_DEF
    %10:sgpr(i32) = G_CONSTANT i32 0
    %11:sreg_32(i1) = IMPLICIT_DEF

  bb.1:
    successors: %bb.2(0x40000000), %bb.3(0x40000000)

    %12:sreg_32(i1) = PHI %11(i1), %bb.0, %13(i1), %bb.3
    %14:sgpr(i32) = G_PHI %15(i32), %bb.3, %10(i32), %bb.0
    %16:sgpr(i32) = G_PHI %10(i32), %bb.0, %17(i32), %bb.3
    %18:sreg_32(i1) = COPY %12(i1)
    %19:sgpr(i64) = G_SEXT %16(i32)
    %20:sgpr(i32) = G_CONSTANT i32 2
    %21:sgpr(i64) = G_SHL %19, %20(i32)
    %22:vgpr(p1) = G_PTR_ADD %5, %21(i64)
    %23:vgpr(i32) = G_LOAD %22(p1) :: (load (i32), addrspace 1)
    %24:sgpr(i32) = G_CONSTANT i32 0
    %25:vcc(i1) = G_ICMP intpred(ne), %23(i32), %24
    %26:sreg_32_xm0_xexec(i1) = COPY %25(i1)
    %27:sgpr(i1) = G_CONSTANT i1 true
    %28:sreg_32(i1) = COPY %27(i1)
    %29:sreg_32(i1) = S_ANDN2_B32 %18(i1), $exec_lo, implicit-def $scc
    %30:sreg_32(i1) = S_AND_B32 $exec_lo, %28(i1), implicit-def $scc
    %31:sreg_32(i1) = S_OR_B32 %29(i1), %30(i1), implicit-def $scc
    %32:sreg_32(i1) = COPY %31(i1)
    %33:sreg_32_xm0_xexec(i32) = SI_IF %26(i1), %bb.3, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.2

  bb.2:
    successors: %bb.4(0x40000000), %bb.5(0x40000000)

    %34:sgpr(i32) = G_CONSTANT i32 2
    %35:sgpr(i64) = G_SHL %19, %34(i32)
    %36:vgpr(p1) = G_PTR_ADD %8, %35(i64)
    %37:vgpr(i32) = G_LOAD %36(p1) :: (load (i32), addrspace 1)
    %38:sgpr(i32) = G_CONSTANT i32 0
    %39:vcc(i1) = G_ICMP intpred(ne), %37(i32), %38
    %40:sreg_32_xm0_xexec(i1) = COPY %39(i1)
    %41:sgpr(i1) = G_CONSTANT i1 true
    %42:sreg_32(i1) = COPY %41(i1)
    %43:sreg_32(i1) = COPY %42(i1)
    %44:sreg_32_xm0_xexec(i32) = SI_IF %40(i1), %bb.5, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.4

  bb.3:
    successors: %bb.6(0x04000000), %bb.1(0x7c000000)

    %13:sreg_32(i1) = PHI %31(i1), %bb.1, %45(i1), %bb.5
    %17:sgpr(i32) = G_PHI %46(i32), %bb.5, %9(i32), %bb.1
    %47:sreg_32(i1) = COPY %13(i1)
    %48:sgpr(i32) = COPY %33(i32)
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %48(i32)
    %49:vcc(i1) = COPY %47(i1)
    %15:sgpr(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.if.break), %49(i1), %14(i32)
    %50:sreg_32_xm0_xexec(i32) = COPY %15(i32)
    SI_LOOP %50(i32), %bb.1, implicit-def $exec, implicit-def $scc, implicit $exec
    G_BR %bb.6

  bb.4:
    successors: %bb.5(0x80000000)

    %51:sgpr(i32) = G_CONSTANT i32 2
    %52:sgpr(i64) = G_SHL %19, %51(i32)
    %53:vgpr(p1) = G_PTR_ADD %2, %52(i64)
    %54:vgpr(i32) = G_LOAD %53(p1) :: (load (i32), addrspace 1)
    %55:sgpr(i32) = G_CONSTANT i32 1
    %56:vgpr(i32) = G_ADD %54, %55
    G_STORE %56(i32), %53(p1) :: (store (i32), addrspace 1)
    %57:sgpr(i32) = G_ADD %16, %55
    %58:sgpr(i32) = G_CONSTANT i32 100
    %59:sgpr(i1) = G_ICMP intpred(ult), %16(i32), %58
    %60:sreg_32(i1) = COPY %59(i1)
    %61:sreg_32(i1) = S_ANDN2_B32 %43(i1), $exec_lo, implicit-def $scc
    %62:sreg_32(i1) = S_AND_B32 $exec_lo, %60(i1), implicit-def $scc
    %63:sreg_32(i1) = S_OR_B32 %61(i1), %62(i1), implicit-def $scc

  bb.5:
    successors: %bb.3(0x80000000)

    %64:sreg_32(i1) = PHI %42(i1), %bb.2, %63(i1), %bb.4
    %46:sgpr(i32) = G_PHI %57(i32), %bb.4, %9(i32), %bb.2
    %65:sreg_32(i1) = COPY %64(i1)
    %66:sreg_32(i1) = COPY %65(i1)
    %67:sgpr(i32) = COPY %44(i32)
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %67(i32)
    %68:sreg_32(i1) = S_ANDN2_B32 %32(i1), $exec_lo, implicit-def $scc
    %69:sreg_32(i1) = S_AND_B32 $exec_lo, %66(i1), implicit-def $scc
    %45:sreg_32(i1) = S_OR_B32 %68(i1), %69(i1), implicit-def $scc
    G_BR %bb.3

  bb.6:
    %70:sgpr(i32) = G_PHI %15(i32), %bb.3
    G_INTRINSIC_W_SIDE_EFFECTS intrinsic(@llvm.amdgcn.end.cf), %70(i32)
    S_ENDPGM 0
...
