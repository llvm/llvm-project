# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=SI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=VI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s

---
name: test_copysign_s16_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_s16_s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST3]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s16_s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST3]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s16_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST3]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f16) = G_BITCAST %3(i16)
    %6:_(f16) = G_FCOPYSIGN %4, %5(f16)
    %7:_(i16) = G_BITCAST %6(f16)
    %8:_(i32) = G_ANYEXT %7(i16)
    $vgpr0 = COPY %8(i32)
...

---
name: test_copysign_s32_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_s32_s32
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s32_s32
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s32_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FCOPYSIGN %2, %3(f32)
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_copysign_s64_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_copysign_s64_s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST3]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; VI-LABEL: name: test_copysign_s64_s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST3]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; GFX9-LABEL: name: test_copysign_s64_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST3]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(f64) = G_FCOPYSIGN %2, %3(f64)
    %5:_(i64) = G_BITCAST %4(f64)
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_copysign_s64_s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2

    ; SI-LABEL: name: test_copysign_s64_s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[BITCAST3]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[C2]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; VI-LABEL: name: test_copysign_s64_s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[BITCAST3]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[C2]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; GFX9-LABEL: name: test_copysign_s64_s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[BITCAST3]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[C2]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f64) = G_FCOPYSIGN %2, %3(f32)
    %5:_(i64) = G_BITCAST %4(f64)
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_copysign_s32_s64
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1_vgpr2

    ; SI-LABEL: name: test_copysign_s32_s64
    ; SI: liveins: $vgpr0, $vgpr1_vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR]](i64)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[TRUNC]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s32_s64
    ; VI: liveins: $vgpr0, $vgpr1_vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR]](i64)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[TRUNC]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s32_s64
    ; GFX9: liveins: $vgpr0, $vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR]](i64)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[TRUNC]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i64) = COPY $vgpr1_vgpr2
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(f32) = G_FCOPYSIGN %2, %3(f64)
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_copysign_s16_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_s16_s32
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s16_s32
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s16_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(f16) = G_BITCAST %2(i16)
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f16) = G_FCOPYSIGN %3, %4(f32)
    %6:_(i16) = G_BITCAST %5(f16)
    %7:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %7(i32)
...

---
name: test_copysign_s32_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_s32_s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST3]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SHL]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s32_s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST3]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SHL]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s32_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST3]](i16)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SHL]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(f32) = G_BITCAST %0(i32)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f32) = G_FCOPYSIGN %3, %4(f16)
    %6:_(i32) = G_BITCAST %5(f32)
    $vgpr0 = COPY %6(i32)
...

---
name: test_copysign_s64_s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2

    ; SI-LABEL: name: test_copysign_s64_s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[BITCAST3]](i16)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 48
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[C2]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; VI-LABEL: name: test_copysign_s64_s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[BITCAST3]](i16)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 48
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[C2]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; GFX9-LABEL: name: test_copysign_s64_s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[BITCAST3]](i16)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 48
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[C2]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST4]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(f64) = G_BITCAST %0(i64)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f64) = G_FCOPYSIGN %3, %4(f16)
    %6:_(i64) = G_BITCAST %5(f64)
    $vgpr0_vgpr1 = COPY %6(i64)
...

---
name: test_copysign_s16_s64
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1_vgpr2

    ; SI-LABEL: name: test_copysign_s16_s64
    ; SI: liveins: $vgpr0, $vgpr1_vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 48
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i64)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s16_s64
    ; VI: liveins: $vgpr0, $vgpr1_vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 48
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i64)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s16_s64
    ; GFX9: liveins: $vgpr0, $vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr1_vgpr2
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 48
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i64)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i64) = COPY $vgpr1_vgpr2
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(f16) = G_BITCAST %2(i16)
    %4:_(f64) = G_BITCAST %1(i64)
    %5:_(f16) = G_FCOPYSIGN %3, %4(f64)
    %6:_(i16) = G_BITCAST %5(f16)
    %7:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %7(i32)
...

---
name: test_copysign_v2s16_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_v2s16_v2s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 32768
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[C]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[C]], [[SHL]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32767
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[C2]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[C2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(<2 x i16>) = G_AND [[BITCAST4]], [[BITCAST3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(<2 x i16>) = G_AND [[BITCAST5]], [[BITCAST2]]
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR2]](<2 x i16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST6]](<2 x f16>)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST7]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_copysign_v2s16_v2s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 32768
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[C]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[C]], [[SHL]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32767
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[C2]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[C2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(<2 x i16>) = G_AND [[BITCAST4]], [[BITCAST3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(<2 x i16>) = G_AND [[BITCAST5]], [[BITCAST2]]
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR2]](<2 x i16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST6]](<2 x f16>)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST7]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_copysign_v2s16_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C1]](i16), [[C1]](i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(<2 x i16>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(<2 x i16>) = G_AND [[BITCAST3]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(<2 x i16>) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST4]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %3:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %4:_(<2 x f16>) = G_FCOPYSIGN %2, %3(<2 x f16>)
    %5:_(<2 x i16>) = G_BITCAST %4(<2 x f16>)
    $vgpr0 = COPY %5(<2 x i16>)
...

---
name: test_copysign_v2s32_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_copysign_v2s32_v2s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST3]], [[BUILD_VECTOR]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(<2 x i32>) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[OR]](<2 x i32>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST4]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_copysign_v2s32_v2s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST3]], [[BUILD_VECTOR]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(<2 x i32>) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[OR]](<2 x i32>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST4]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_copysign_v2s32_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST3]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(<2 x i32>) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[OR]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST4]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = G_FCOPYSIGN %2, %3(<2 x f32>)
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_copysign_v2s64_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7

    ; SI-LABEL: name: test_copysign_v2s64_v2s64
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST]](<2 x f64>)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST1]](<2 x f64>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST2]](<2 x i64>)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[UV]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[UV1]], [[C1]]
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i64>)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[UV2]], [[C]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[UV3]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND2]]
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND1]], [[AND3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR]](i64), [[OR1]](i64)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[BUILD_VECTOR]](<2 x i64>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST4]](<2 x f64>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_copysign_v2s64_v2s64
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST]](<2 x f64>)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST1]](<2 x f64>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST2]](<2 x i64>)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[UV]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[UV1]], [[C1]]
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i64>)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[UV2]], [[C]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[UV3]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND2]]
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND1]], [[AND3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR]](i64), [[OR1]](i64)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[BUILD_VECTOR]](<2 x i64>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST4]](<2 x f64>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_copysign_v2s64_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST]](<2 x f64>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST1]](<2 x f64>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST2]](<2 x i64>)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[UV]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[UV1]], [[C1]]
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i64>)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[UV2]], [[C]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[UV3]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND2]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND1]], [[AND3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR]](i64), [[OR1]](i64)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[BUILD_VECTOR]](<2 x i64>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST4]](<2 x f64>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<2 x f64>) = G_BITCAST %0(<2 x i64>)
    %3:_(<2 x f64>) = G_BITCAST %1(<2 x i64>)
    %4:_(<2 x f64>) = G_FCOPYSIGN %2, %3(<2 x f64>)
    %5:_(<2 x i64>) = G_BITCAST %4(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<2 x i64>)
...

---
name: test_copysign_v2s64_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5

    ; SI-LABEL: name: test_copysign_v2s64_v2s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST]](<2 x f64>)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST2]](<2 x i64>)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[UV]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[UV1]], [[C1]]
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i32>)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[UV2]](i32)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[UV3]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[COPY2]](i32)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[SHL1]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND2]]
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND1]], [[AND3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR]](i64), [[OR1]](i64)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[BUILD_VECTOR]](<2 x i64>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST4]](<2 x f64>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_copysign_v2s64_v2s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST]](<2 x f64>)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST2]](<2 x i64>)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[UV]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[UV1]], [[C1]]
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i32>)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[UV2]](i32)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[UV3]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[COPY2]](i32)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[SHL1]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND2]]
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND1]], [[AND3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR]](i64), [[OR1]](i64)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[BUILD_VECTOR]](<2 x i64>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST4]](<2 x f64>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_copysign_v2s64_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST]](<2 x f64>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST2]](<2 x i64>)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[UV]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[UV1]], [[C1]]
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i32>)
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[UV2]](i32)
    ; GFX9-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[UV3]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[ZEXT]], [[COPY2]](i32)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[SHL]], [[C]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[SHL1]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND2]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND1]], [[AND3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR]](i64), [[OR1]](i64)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[BUILD_VECTOR]](<2 x i64>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST4]](<2 x f64>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %2:_(<2 x f64>) = G_BITCAST %0(<2 x i64>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f64>) = G_FCOPYSIGN %2, %3(<2 x f32>)
    %5:_(<2 x i64>) = G_BITCAST %4(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<2 x i64>)
...


---
name: test_copysign_v2s32_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3_vgpr4_vgpr5

    ; SI-LABEL: name: test_copysign_v2s32_v2s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr2_vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST1]](<2 x f64>)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i64>)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY2]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C2]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR]](i64)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR1]](i64)
    ; SI-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[TRUNC]](i32), [[TRUNC1]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(<2 x i32>) = G_AND [[BUILD_VECTOR2]], [[BUILD_VECTOR]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(<2 x i32>) = disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[OR]](<2 x i32>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST4]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_copysign_v2s32_v2s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr2_vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST1]](<2 x f64>)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i64>)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C2]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR]](i64)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR1]](i64)
    ; VI-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[TRUNC]](i32), [[TRUNC1]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(<2 x i32>) = G_AND [[BUILD_VECTOR2]], [[BUILD_VECTOR]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(<2 x i32>) = disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[OR]](<2 x i32>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST4]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_copysign_v2s32_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr2_vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C1]](i32), [[C1]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BITCAST1]](<2 x f64>)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(<2 x i32>) = G_AND [[BITCAST2]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[BITCAST3]](<2 x i64>)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY2]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C2]](i32)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR]](i64)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[LSHR1]](i64)
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[TRUNC]](i32), [[TRUNC1]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(<2 x i32>) = G_AND [[BUILD_VECTOR2]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(<2 x i32>) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[OR]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BITCAST4]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i64>) = COPY $vgpr2_vgpr3_vgpr4_vgpr5
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f64>) = G_BITCAST %1(<2 x i64>)
    %4:_(<2 x f32>) = G_FCOPYSIGN %2, %3(<2 x f64>)
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_copysign_s32_s32_flagss
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_s32_s32_flagss
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s32_s32_flagss
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s32_s32_flagss
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = nnan G_FCOPYSIGN %2, %3(f32)
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...


---
name: test_copysign_s32_s16_flags
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; SI-LABEL: name: test_copysign_s32_s16_flags
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST3]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SHL]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s32_s16_flags
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST3]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SHL]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s32_s16_flags
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST3]](i16)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SHL]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(f32) = G_BITCAST %0(i32)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f32) = nnan G_FCOPYSIGN %3, %4(f16)
    %6:_(i32) = G_BITCAST %5(f32)
    $vgpr0 = COPY %6(i32)
...


---
name: test_copysign_s16_s32_flags
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_copysign_s16_s32_flags
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_copysign_s16_s32_flags
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_copysign_s16_s32_flags
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST1]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C2]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = nnan disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST5]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(f16) = G_BITCAST %2(i16)
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f16) = nnan G_FCOPYSIGN %3, %4(f32)
    %6:_(i16) = G_BITCAST %5(f16)
    %7:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %7(i32)
...
