# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=amdgcn -mcpu=hawaii  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX7 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=fiji  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX8 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx900  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx1010  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx1100  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx1150  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s

---
name: test_fcmp_s32
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: test_fcmp_s32
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f32), [[BITCAST1]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C]], [[COPY]]
    ; GFX7-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    ;
    ; GFX8-LABEL: name: test_fcmp_s32
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f32), [[BITCAST1]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C]], [[COPY]]
    ; GFX8-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    ;
    ; GFX9-LABEL: name: test_fcmp_s32
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f32), [[BITCAST1]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C]], [[COPY]]
    ; GFX9-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    %0:_(i32) = G_CONSTANT i32 0
    %1:_(i32) = COPY $vgpr0
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(i1) = G_FCMP floatpred(oeq), %2(f32), %3
    %5:_(i32) = G_SELECT %4(i1), %0, %1
    $vgpr0 = COPY %5(i32)
...

---
name: test_fcmp_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: test_fcmp_s64
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[C]](i64)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f64), [[BITCAST1]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[FCMP]](i1), [[C]], [[COPY]]
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[SELECT]](i64)
    ;
    ; GFX8-LABEL: name: test_fcmp_s64
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[C]](i64)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f64), [[BITCAST1]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[FCMP]](i1), [[C]], [[COPY]]
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[SELECT]](i64)
    ;
    ; GFX9-LABEL: name: test_fcmp_s64
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[C]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f64), [[BITCAST1]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[FCMP]](i1), [[C]], [[COPY]]
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[SELECT]](i64)
    %0:_(i64) = G_CONSTANT i64 0
    %1:_(i64) = COPY $vgpr0_vgpr1
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(i1) = G_FCMP floatpred(oeq), %2(f64), %3
    %5:_(i64) = G_SELECT %4(i1), %0, %1
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_fcmp_s16
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: test_fcmp_s16
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[C]](i16)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX7-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX7-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[FPEXT]](f32), [[FPEXT1]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[FCMP]](i1), [[C]], [[TRUNC]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_fcmp_s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[C]](i16)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f16), [[BITCAST1]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[FCMP]](i1), [[C]], [[TRUNC]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fcmp_s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[C]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST]](f16), [[BITCAST1]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[FCMP]](i1), [[C]], [[TRUNC]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i16) = G_CONSTANT i16 0
    %1:_(i32) = COPY $vgpr0
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(f16) = G_BITCAST %0(i16)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(i1) = G_FCMP floatpred(oeq), %3(f16), %4
    %6:_(i16) = G_SELECT %5(i1), %0, %2
    %7:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fcmp_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: test_fcmp_v2s32
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST1]](f32), [[UV]]
    ; GFX7-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST2]](f32), [[UV1]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_fcmp_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST1]](f32), [[UV]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST2]](f32), [[UV1]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fcmp_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST1]](f32), [[UV]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST2]](f32), [[UV1]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = G_CONSTANT i32 0
    %1:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %0(i32)
    %2:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = G_BITCAST %2(<2 x i32>)
    %5:_(<2 x i1>) = G_FCMP floatpred(oeq), %3(<2 x f32>), %4
    %6:_(<2 x i32>) = G_ANYEXT %5(<2 x i1>)
    S_NOP 0, implicit %6(<2 x i32>)
...

---
name: test_fcmp_v2s32_flags
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: test_fcmp_v2s32_flags
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nnan G_FCMP floatpred(oeq), [[BITCAST1]](f32), [[UV]]
    ; GFX7-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = nnan G_FCMP floatpred(oeq), [[BITCAST2]](f32), [[UV1]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_fcmp_v2s32_flags
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nnan G_FCMP floatpred(oeq), [[BITCAST1]](f32), [[UV]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = nnan G_FCMP floatpred(oeq), [[BITCAST2]](f32), [[UV1]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fcmp_v2s32_flags
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[C]](i32)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nnan G_FCMP floatpred(oeq), [[BITCAST1]](f32), [[UV]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = nnan G_FCMP floatpred(oeq), [[BITCAST2]](f32), [[UV1]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = G_CONSTANT i32 0
    %1:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %0(i32)
    %2:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = G_BITCAST %2(<2 x i32>)
    %5:_(<2 x i1>) = nnan G_FCMP floatpred(oeq), %3(<2 x f32>), %4
    %6:_(<2 x i32>) = G_ANYEXT %5(<2 x i1>)
    S_NOP 0, implicit %6(<2 x i32>)
...

---
name: test_fcmp_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; GFX7-LABEL: name: test_fcmp_v3s32
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[DEF:%[0-9]+]]:_(<3 x f32>) = G_IMPLICIT_DEF
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[DEF]](<3 x f32>)
    ; GFX7-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV]](f32), [[UV3]]
    ; GFX7-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV1]](f32), [[UV4]]
    ; GFX7-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV2]](f32), [[UV5]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX7-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP2]](i1)
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX8-LABEL: name: test_fcmp_v3s32
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[DEF:%[0-9]+]]:_(<3 x f32>) = G_IMPLICIT_DEF
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[DEF]](<3 x f32>)
    ; GFX8-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV]](f32), [[UV3]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV1]](f32), [[UV4]]
    ; GFX8-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV2]](f32), [[UV5]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP2]](i1)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_fcmp_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<3 x f32>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[DEF]](<3 x f32>)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV]](f32), [[UV3]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV1]](f32), [[UV4]]
    ; GFX9-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV2]](f32), [[UV5]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP2]](i1)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    %0:_(<3 x f32>) = G_IMPLICIT_DEF
    %1:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %2:_(<3 x f32>) = G_BITCAST %1(<3 x i32>)
    %3:_(<3 x i1>) = G_FCMP floatpred(oeq), %0(<3 x f32>), %2
    %4:_(<3 x i32>) = G_ANYEXT %3(<3 x i1>)
    S_NOP 0, implicit %4(<3 x i32>)

...

---
name: test_fcmp_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; GFX7-LABEL: name: test_fcmp_v4s32
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[DEF:%[0-9]+]]:_(p1) = G_IMPLICIT_DEF
    ; GFX7-NEXT: [[LOAD:%[0-9]+]]:_(<4 x f32>) = G_LOAD [[DEF]](p1) :: (volatile load (<4 x f32>))
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[LOAD]](<4 x f32>)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV]](f32), [[UV4]]
    ; GFX7-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV1]](f32), [[UV5]]
    ; GFX7-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV2]](f32), [[UV6]]
    ; GFX7-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV3]](f32), [[UV7]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX7-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP2]](i1)
    ; GFX7-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP3]](i1)
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    ;
    ; GFX8-LABEL: name: test_fcmp_v4s32
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[DEF:%[0-9]+]]:_(p1) = G_IMPLICIT_DEF
    ; GFX8-NEXT: [[LOAD:%[0-9]+]]:_(<4 x f32>) = G_LOAD [[DEF]](p1) :: (volatile load (<4 x f32>))
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[LOAD]](<4 x f32>)
    ; GFX8-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV]](f32), [[UV4]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV1]](f32), [[UV5]]
    ; GFX8-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV2]](f32), [[UV6]]
    ; GFX8-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV3]](f32), [[UV7]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP2]](i1)
    ; GFX8-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP3]](i1)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    ;
    ; GFX9-LABEL: name: test_fcmp_v4s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(p1) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[LOAD:%[0-9]+]]:_(<4 x f32>) = G_LOAD [[DEF]](p1) :: (volatile load (<4 x f32>))
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[LOAD]](<4 x f32>)
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV]](f32), [[UV4]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV1]](f32), [[UV5]]
    ; GFX9-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV2]](f32), [[UV6]]
    ; GFX9-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[UV3]](f32), [[UV7]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP]](i1)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP1]](i1)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP2]](i1)
    ; GFX9-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[FCMP3]](i1)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    %0:_(p1) = G_IMPLICIT_DEF
    %1:_(<4 x f32>) = G_LOAD %0(p1) :: (volatile load (<4 x f32>))
    %2:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %3:_(<4 x f32>) = G_BITCAST %2(<4 x i32>)
    %4:_(<4 x i1>) = G_FCMP floatpred(oeq), %1(<4 x f32>), %3
    %5:_(<4 x i32>) = G_ANYEXT %4(<4 x i1>)
    S_NOP 0, implicit %5(<4 x i32>)

...

---
name: test_icmp_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-LABEL: name: test_icmp_v2s16
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %26(i16)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %32(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %27(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %33(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX7-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX7-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[FPEXT]](f32), [[FPEXT1]]
    ; GFX7-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX7-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX7-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[FPEXT2]](f32), [[FPEXT3]]
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY3]](<2 x i32>)
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[UV]], [[UV2]]
    ; GFX7-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[FCMP1]](i1), [[UV1]], [[UV3]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT]](i32), [[SELECT1]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v2s16
    ; GFX8: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %22(i16)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %28(i16)
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %23(i16)
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX8-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST2]](f16), [[BITCAST3]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST4]](f16), [[BITCAST5]]
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY3]](<2 x i32>)
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[UV]], [[UV2]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[FCMP1]](i1), [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT]](i32), [[SELECT1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %22(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %28(i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %23(i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST2]](f16), [[BITCAST3]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oeq), [[BITCAST4]](f16), [[BITCAST5]]
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY3]](<2 x i32>)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[UV]], [[UV2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[FCMP1]](i1), [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT]](i32), [[SELECT1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %3:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %4:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %5:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %6:_(<2 x i1>) = G_FCMP floatpred(oeq), %4(<2 x f16>), %5
    %7:_(<2 x i32>) = G_SELECT %6(<2 x i1>), %2, %3
    $vgpr0_vgpr1 = COPY %7(<2 x i32>)
...
