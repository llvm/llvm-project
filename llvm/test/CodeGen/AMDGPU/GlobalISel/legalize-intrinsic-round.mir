# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX6 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX8 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s

---
name: test_intrinsic_round_s32
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_intrinsic_round_s32
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[FSUB]]
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_s32
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_s32
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_INTRINSIC_ROUND %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)
...

---
name: test_intrinsic_round_s32_flags
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_intrinsic_round_s32_flags
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = nsz G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nsz G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f32) = nsz G_FABS [[FSUB]]
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nsz G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = nsz G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_s32_flags
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = nsz G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nsz G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f32) = nsz G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nsz G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = nsz G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_s32_flags
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = nsz G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nsz G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f32) = nsz G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = nsz G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = nsz G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = nsz G_INTRINSIC_ROUND %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)
...

---
name: test_intrinsic_round_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; GFX6-LABEL: name: test_intrinsic_round_s64
    ; GFX6: liveins: $vgpr0_vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST1]](i64)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.ubfe), [[UV1]](i32), [[C]](i32), [[C1]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1023
    ; GFX6-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[INT]], [[C2]]
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C3]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4503599627370495
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[C5]](i32), [[AND]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f64) = G_BITCAST [[MV]](i64)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[C4]], [[SUB]](i32)
    ; GFX6-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; GFX6-NEXT: [[XOR:%[0-9]+]]:_(i64) = G_XOR [[ASHR]], [[C6]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST1]], [[XOR]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f64) = G_BITCAST [[AND1]](i64)
    ; GFX6-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 51
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SUB]](i32), [[C5]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(sgt), [[SUB]](i32), [[C7]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f64) = G_SELECT [[ICMP]](i1), [[BITCAST2]], [[BITCAST3]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f64) = G_SELECT [[ICMP1]](i1), [[BITCAST]], [[SELECT]]
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[SELECT1]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[BITCAST]], [[FNEG]]
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[FADD]]
    ; GFX6-NEXT: [[C8:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f64), [[C8]]
    ; GFX6-NEXT: [[C9:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX6-NEXT: [[C10:%[0-9]+]]:_(f64) = G_FCONSTANT double 0.000000e+00
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(f64) = G_SELECT [[FCMP]](i1), [[C9]], [[C10]]
    ; GFX6-NEXT: [[C11:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX6-NEXT: [[C12:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT2]](f64)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[BITCAST4]], [[C12]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[BITCAST5]], [[C11]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[SELECT1]], [[BITCAST6]]
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(i64) = G_BITCAST [[FADD1]](f64)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST7]](i64)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_s64
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f64) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX8-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[BITCAST]], [[FNEG]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[FADD]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f64), [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f64) = G_FCONSTANT double 0.000000e+00
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f64) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT]](f64)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST1]], [[C4]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C3]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[FADD1]](f64)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST4]](i64)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_s64
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f64) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[BITCAST]], [[FNEG]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[FADD]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f64), [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f64) = G_FCONSTANT double 0.000000e+00
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f64) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT]](f64)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C3]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[FADD1]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST4]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(f64) = G_BITCAST %0(i64)
    %2:_(f64) = G_INTRINSIC_ROUND %1
    %3:_(i64) = G_BITCAST %2(f64)
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: test_intrinsic_round_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; GFX6-LABEL: name: test_intrinsic_round_v2s32
    ; GFX6: liveins: $vgpr0_vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[UV]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[INTRINSIC_TRUNC]]
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[FSUB]]
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](f32)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX6-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[UV1]]
    ; GFX6-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[INTRINSIC_TRUNC1]]
    ; GFX6-NEXT: [[FABS1:%[0-9]+]]:_(f32) = G_FABS [[FSUB1]]
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f32), [[C]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT1]](f32)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](f32)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C4]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C3]]
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i32) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f32) = G_BITCAST [[OR1]](i32)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST6]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST7]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[UV]]
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[UV1]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[INTRINSIC_TRUNC1]]
    ; GFX8-NEXT: [[FABS1:%[0-9]+]]:_(f32) = G_FABS [[FSUB1]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f32), [[C]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT1]](f32)
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](f32)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C4]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C3]]
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(f32) = G_BITCAST [[OR1]](i32)
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST6]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST7]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[UV]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f32) = G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 5.000000e-01
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f32), [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](f32)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C3]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[OR]](i32)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[UV1]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[INTRINSIC_TRUNC1]]
    ; GFX9-NEXT: [[FABS1:%[0-9]+]]:_(f32) = G_FABS [[FSUB1]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f32), [[C]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT1]](f32)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](f32)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C4]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C3]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i32) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(f32) = G_BITCAST [[OR1]](i32)
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST6]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST7]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %2:_(<2 x f32>) = G_INTRINSIC_ROUND %1
    %3:_(<2 x i32>) = G_BITCAST %2(<2 x f32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_intrinsic_round_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; GFX6-LABEL: name: test_intrinsic_round_v2s64
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[UV]](f64)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST1]](i64)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.ubfe), [[UV3]](i32), [[C]](i32), [[C1]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 1023
    ; GFX6-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[INT]], [[C2]]
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C3]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4503599627370495
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[C5]](i32), [[AND]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f64) = G_BITCAST [[MV]](i64)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[C4]], [[SUB]](i32)
    ; GFX6-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; GFX6-NEXT: [[XOR:%[0-9]+]]:_(i64) = G_XOR [[ASHR]], [[C6]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST1]], [[XOR]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f64) = G_BITCAST [[AND1]](i64)
    ; GFX6-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 51
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SUB]](i32), [[C5]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(sgt), [[SUB]](i32), [[C7]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f64) = G_SELECT [[ICMP]](i1), [[BITCAST2]], [[BITCAST3]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[SELECT1]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[UV]], [[FNEG]]
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[FADD]]
    ; GFX6-NEXT: [[C8:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f64), [[C8]]
    ; GFX6-NEXT: [[C9:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX6-NEXT: [[C10:%[0-9]+]]:_(f64) = G_FCONSTANT double 0.000000e+00
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(f64) = G_SELECT [[FCMP]](i1), [[C9]], [[C10]]
    ; GFX6-NEXT: [[C11:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX6-NEXT: [[C12:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT2]](f64)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[UV]](f64)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[BITCAST4]], [[C12]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[BITCAST5]], [[C11]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[SELECT1]], [[BITCAST6]]
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(i64) = G_BITCAST [[UV1]](f64)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST7]](i64)
    ; GFX6-NEXT: [[INT1:%[0-9]+]]:_(i32) = G_INTRINSIC intrinsic(@llvm.amdgcn.ubfe), [[UV5]](i32), [[C]](i32), [[C1]](i32)
    ; GFX6-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[INT1]], [[C2]]
    ; GFX6-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV5]], [[C3]]
    ; GFX6-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[C5]](i32), [[AND4]](i32)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(f64) = G_BITCAST [[MV1]](i64)
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i64) = G_ASHR [[C4]], [[SUB1]](i32)
    ; GFX6-NEXT: [[XOR1:%[0-9]+]]:_(i64) = G_XOR [[ASHR1]], [[C6]]
    ; GFX6-NEXT: [[AND5:%[0-9]+]]:_(i64) = G_AND [[BITCAST7]], [[XOR1]]
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(f64) = G_BITCAST [[AND5]](i64)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SUB1]](i32), [[C5]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(sgt), [[SUB1]](i32), [[C7]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(f64) = G_SELECT [[ICMP2]](i1), [[BITCAST8]], [[BITCAST9]]
    ; GFX6-NEXT: [[SELECT4:%[0-9]+]]:_(f64) = G_SELECT [[ICMP3]](i1), [[UV1]], [[SELECT3]]
    ; GFX6-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[SELECT4]]
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f64) = G_FADD [[UV1]], [[FNEG1]]
    ; GFX6-NEXT: [[FABS1:%[0-9]+]]:_(f64) = G_FABS [[FADD2]]
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f64), [[C8]]
    ; GFX6-NEXT: [[SELECT5:%[0-9]+]]:_(f64) = G_SELECT [[FCMP1]](i1), [[C9]], [[C10]]
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT5]](f64)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(i64) = G_BITCAST [[UV1]](f64)
    ; GFX6-NEXT: [[AND6:%[0-9]+]]:_(i64) = G_AND [[BITCAST10]], [[C12]]
    ; GFX6-NEXT: [[AND7:%[0-9]+]]:_(i64) = G_AND [[BITCAST11]], [[C11]]
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND6]], [[AND7]]
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f64) = G_BITCAST [[OR1]](i64)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f64) = G_FADD [[SELECT4]], [[BITCAST12]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FADD1]](f64), [[FADD3]](f64)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST13]](<2 x i64>)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_v2s64
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f64) = G_INTRINSIC_TRUNC [[UV]]
    ; GFX8-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[UV]], [[FNEG]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[FADD]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f64), [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f64) = G_FCONSTANT double 0.000000e+00
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f64) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT]](f64)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[UV]](f64)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST1]], [[C4]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C3]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f64) = G_INTRINSIC_TRUNC [[UV1]]
    ; GFX8-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[INTRINSIC_TRUNC1]]
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f64) = G_FADD [[UV1]], [[FNEG1]]
    ; GFX8-NEXT: [[FABS1:%[0-9]+]]:_(f64) = G_FABS [[FADD2]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f64), [[C]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f64) = G_SELECT [[FCMP1]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT1]](f64)
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[UV1]](f64)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[BITCAST4]], [[C4]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[BITCAST5]], [[C3]]
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(f64) = G_BITCAST [[OR1]](i64)
    ; GFX8-NEXT: [[FADD3:%[0-9]+]]:_(f64) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST6]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FADD1]](f64), [[FADD3]](f64)
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST7]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f64) = G_INTRINSIC_TRUNC [[UV]]
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[UV]], [[FNEG]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f64) = G_FABS [[FADD]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f64), [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f64) = G_FCONSTANT double 0.000000e+00
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f64) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT]](f64)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[UV]](f64)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[BITCAST2]], [[C3]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f64) = G_BITCAST [[OR]](i64)
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f64) = G_INTRINSIC_TRUNC [[UV1]]
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[INTRINSIC_TRUNC1]]
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f64) = G_FADD [[UV1]], [[FNEG1]]
    ; GFX9-NEXT: [[FABS1:%[0-9]+]]:_(f64) = G_FABS [[FADD2]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f64), [[C]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f64) = G_SELECT [[FCMP1]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT1]](f64)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[UV1]](f64)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i64) = G_AND [[BITCAST4]], [[C4]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i64) = G_AND [[BITCAST5]], [[C3]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i64) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(f64) = G_BITCAST [[OR1]](i64)
    ; GFX9-NEXT: [[FADD3:%[0-9]+]]:_(f64) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST6]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FADD1]](f64), [[FADD3]](f64)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST7]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x f64>) = G_BITCAST %0(<2 x i64>)
    %2:_(<2 x f64>) = G_INTRINSIC_ROUND %1
    %3:_(<2 x i64>) = G_BITCAST %2(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3(<2 x i64>)
...

---
name: test_intrinsic_round_s16
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_intrinsic_round_s16
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC]](f32)
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC]]
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT1]], [[FPEXT2]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC1]]
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[FABS]](f16)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[C]](f16)
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT3]](f32), [[FPEXT4]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST1]], [[C4]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C3]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT5]], [[FPEXT6]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST4]](i16)
    ; GFX6-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST1]], [[C4]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C3]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST4]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST2]], [[C3]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST3]]
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST4]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_INTRINSIC_ROUND %2
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_intrinsic_round_v2s16
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_intrinsic_round_v2s16
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC]](f32)
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC]]
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT1]], [[FPEXT2]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC1]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[FABS]](f16)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT3]](f32), [[FPEXT4]]
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST5]], [[C5]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST6]], [[C4]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST7]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT5]], [[FPEXT6]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC1]](f32)
    ; GFX6-NEXT: [[FNEG1:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC3]]
    ; GFX6-NEXT: [[FPEXT8:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[FPEXT9:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG1]](f16)
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT8]], [[FPEXT9]]
    ; GFX6-NEXT: [[FPTRUNC4:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; GFX6-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC4]]
    ; GFX6-NEXT: [[FPEXT10:%[0-9]+]]:_(f32) = G_FPEXT [[FABS1]](f16)
    ; GFX6-NEXT: [[FPEXT11:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT10]](f32), [[FPEXT11]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST8]], [[C5]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C4]]
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX6-NEXT: [[FPEXT12:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[FPEXT13:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST10]](f16)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FPEXT12]], [[FPEXT13]]
    ; GFX6-NEXT: [[FPTRUNC5:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC5]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR2]](i32)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST13]](<2 x f16>)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST14]](<2 x i16>)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_v2s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST1]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST1]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST5]], [[C5]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST6]], [[C4]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST7]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST2]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[INTRINSIC_TRUNC1]]
    ; GFX8-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FSUB1]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f16), [[C1]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX8-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST8]], [[C5]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C4]]
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX8-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST10]]
    ; GFX8-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX8-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX8-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR2]](i32)
    ; GFX8-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST13]](<2 x f16>)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST14]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_v2s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST1]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST5]], [[C5]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST6]], [[C4]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST7]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST2]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[INTRINSIC_TRUNC1]]
    ; GFX9-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FSUB1]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f16), [[C1]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST8]], [[C5]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C4]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST10]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST11]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %2:_(<2 x f16>) = G_INTRINSIC_ROUND %1
    %3:_(<2 x i16>) = G_BITCAST %2(<2 x f16>)
    $vgpr0 = COPY %3(<2 x i16>)
...

---
name: test_intrinsic_round_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2
    ; GFX6-LABEL: name: test_intrinsic_round_v3s16
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC]](f32)
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC]]
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT1]], [[FPEXT2]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC1]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[FABS]](f16)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT3]](f32), [[FPEXT4]]
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST5]], [[C5]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST6]], [[C4]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST7]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT5]], [[FPEXT6]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC1]](f32)
    ; GFX6-NEXT: [[FNEG1:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC3]]
    ; GFX6-NEXT: [[FPEXT8:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[FPEXT9:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG1]](f16)
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT8]], [[FPEXT9]]
    ; GFX6-NEXT: [[FPTRUNC4:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; GFX6-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC4]]
    ; GFX6-NEXT: [[FPEXT10:%[0-9]+]]:_(f32) = G_FPEXT [[FABS1]](f16)
    ; GFX6-NEXT: [[FPEXT11:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT10]](f32), [[FPEXT11]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST3]](f16)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST8]], [[C5]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C4]]
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX6-NEXT: [[FPEXT12:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[FPEXT13:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST10]](f16)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FPEXT12]], [[FPEXT13]]
    ; GFX6-NEXT: [[FPTRUNC5:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX6-NEXT: [[FPEXT14:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC2:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT14]]
    ; GFX6-NEXT: [[FPTRUNC6:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC2]](f32)
    ; GFX6-NEXT: [[FNEG2:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC6]]
    ; GFX6-NEXT: [[FPEXT15:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FPEXT16:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG2]](f16)
    ; GFX6-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FPEXT15]], [[FPEXT16]]
    ; GFX6-NEXT: [[FPTRUNC7:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD4]](f32)
    ; GFX6-NEXT: [[FABS2:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC7]]
    ; GFX6-NEXT: [[FPEXT17:%[0-9]+]]:_(f32) = G_FPEXT [[FABS2]](f16)
    ; GFX6-NEXT: [[FPEXT18:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT17]](f32), [[FPEXT18]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(f16) = G_SELECT [[FCMP2]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT2]](f16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX6-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[BITCAST11]], [[C5]]
    ; GFX6-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[BITCAST12]], [[C4]]
    ; GFX6-NEXT: [[OR2:%[0-9]+]]:_(i16) = disjoint G_OR [[AND4]], [[AND5]]
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST [[OR2]](i16)
    ; GFX6-NEXT: [[FPEXT19:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC6]](f16)
    ; GFX6-NEXT: [[FPEXT20:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; GFX6-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FPEXT19]], [[FPEXT20]]
    ; GFX6-NEXT: [[FPTRUNC8:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD5]](f32)
    ; GFX6-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX6-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC5]](f16)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC8]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST17]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST19:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; GFX6-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; GFX6-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[BITCAST14]], [[C6]]
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND6]], [[C]](i32)
    ; GFX6-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX6-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; GFX6-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST15]], [[C6]]
    ; GFX6-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C]](i32)
    ; GFX6-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[LSHR1]], [[SHL2]]
    ; GFX6-NEXT: [[BITCAST21:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST19]](<2 x i16>), [[BITCAST20]](<2 x i16>), [[BITCAST21]](<2 x i16>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_v3s16
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST2]]
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST5]], [[C5]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST6]], [[C4]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST7]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST3]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[INTRINSIC_TRUNC1]]
    ; GFX8-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FSUB1]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f16), [[C1]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX8-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST3]](f16)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST8]], [[C5]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C4]]
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX8-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST10]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC2:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST4]]
    ; GFX8-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[INTRINSIC_TRUNC2]]
    ; GFX8-NEXT: [[FABS2:%[0-9]+]]:_(f16) = G_FABS [[FSUB2]]
    ; GFX8-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS2]](f16), [[C1]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(f16) = G_SELECT [[FCMP2]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT2]](f16)
    ; GFX8-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX8-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[BITCAST11]], [[C5]]
    ; GFX8-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[BITCAST12]], [[C4]]
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i16) = disjoint G_OR [[AND4]], [[AND5]]
    ; GFX8-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST [[OR2]](i16)
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC2]], [[BITCAST13]]
    ; GFX8-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX8-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX8-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX8-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX8-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX8-NEXT: [[BITCAST17:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX8-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FADD2]](f16)
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST17]](i16)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX8-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX8-NEXT: [[BITCAST19:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; GFX8-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; GFX8-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX8-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[BITCAST14]], [[C6]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND6]], [[C]](i32)
    ; GFX8-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX8-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; GFX8-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST15]], [[C6]]
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C]](i32)
    ; GFX8-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[LSHR1]], [[SHL2]]
    ; GFX8-NEXT: [[BITCAST21:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; GFX8-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST19]](<2 x i16>), [[BITCAST20]](<2 x i16>), [[BITCAST21]](<2 x i16>)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_v3s16
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST2]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST5]], [[C5]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST6]], [[C4]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST7]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST3]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[INTRINSIC_TRUNC1]]
    ; GFX9-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FSUB1]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f16), [[C1]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST3]](f16)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST8]], [[C5]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C4]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST10]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC2:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST4]]
    ; GFX9-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[INTRINSIC_TRUNC2]]
    ; GFX9-NEXT: [[FABS2:%[0-9]+]]:_(f16) = G_FABS [[FSUB2]]
    ; GFX9-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS2]](f16), [[C1]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(f16) = G_SELECT [[FCMP2]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT2]](f16)
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX9-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[BITCAST11]], [[C5]]
    ; GFX9-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[BITCAST12]], [[C4]]
    ; GFX9-NEXT: [[OR2:%[0-9]+]]:_(i16) = disjoint G_OR [[AND4]], [[AND5]]
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST [[OR2]](i16)
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC2]], [[BITCAST13]]
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; GFX9-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX9-NEXT: [[BITCAST17:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX9-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FADD2]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[BITCAST16]](i16), [[BITCAST17]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[BITCAST18]](i16), [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i16>), %2:_(<3 x i16>) = G_UNMERGE_VALUES %0(<6 x i16>)
    %3:_(<3 x f16>) = G_BITCAST %1(<3 x i16>)
    %4:_(<3 x f16>) = G_INTRINSIC_ROUND %3
    %5:_(<3 x i16>) = G_IMPLICIT_DEF
    %6:_(<3 x i16>) = G_BITCAST %4(<3 x f16>)
    %7:_(<6 x i16>) = G_CONCAT_VECTORS %6(<3 x i16>), %5(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %7(<6 x i16>)
...

---
name: test_intrinsic_round_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; GFX6-LABEL: name: test_intrinsic_round_v4s16
    ; GFX6: liveins: $vgpr0_vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %109(i16)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %115(i16)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %110(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %116(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC]](f32)
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC]]
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT1]], [[FPEXT2]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC1]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[FABS]](f16)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT3]](f32), [[FPEXT4]]
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C5]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST10]], [[C4]]
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT5]], [[FPEXT6]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC1]](f32)
    ; GFX6-NEXT: [[FNEG1:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC3]]
    ; GFX6-NEXT: [[FPEXT8:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[FPEXT9:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG1]](f16)
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT8]], [[FPEXT9]]
    ; GFX6-NEXT: [[FPTRUNC4:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; GFX6-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC4]]
    ; GFX6-NEXT: [[FPEXT10:%[0-9]+]]:_(f32) = G_FPEXT [[FABS1]](f16)
    ; GFX6-NEXT: [[FPEXT11:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT10]](f32), [[FPEXT11]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST3]](f16)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST12]], [[C5]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST13]], [[C4]]
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX6-NEXT: [[FPEXT12:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[FPEXT13:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST14]](f16)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FPEXT12]], [[FPEXT13]]
    ; GFX6-NEXT: [[FPTRUNC5:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX6-NEXT: [[FPEXT14:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC2:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT14]]
    ; GFX6-NEXT: [[FPTRUNC6:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC2]](f32)
    ; GFX6-NEXT: [[FNEG2:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC6]]
    ; GFX6-NEXT: [[FPEXT15:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[FPEXT16:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG2]](f16)
    ; GFX6-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FPEXT15]], [[FPEXT16]]
    ; GFX6-NEXT: [[FPTRUNC7:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD4]](f32)
    ; GFX6-NEXT: [[FABS2:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC7]]
    ; GFX6-NEXT: [[FPEXT17:%[0-9]+]]:_(f32) = G_FPEXT [[FABS2]](f16)
    ; GFX6-NEXT: [[FPEXT18:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT17]](f32), [[FPEXT18]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(f16) = G_SELECT [[FCMP2]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT2]](f16)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX6-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[BITCAST15]], [[C5]]
    ; GFX6-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[BITCAST16]], [[C4]]
    ; GFX6-NEXT: [[OR2:%[0-9]+]]:_(i16) = disjoint G_OR [[AND4]], [[AND5]]
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(f16) = G_BITCAST [[OR2]](i16)
    ; GFX6-NEXT: [[FPEXT19:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC6]](f16)
    ; GFX6-NEXT: [[FPEXT20:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST17]](f16)
    ; GFX6-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FPEXT19]], [[FPEXT20]]
    ; GFX6-NEXT: [[FPTRUNC8:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD5]](f32)
    ; GFX6-NEXT: [[FPEXT21:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[INTRINSIC_TRUNC3:%[0-9]+]]:_(f32) = G_INTRINSIC_TRUNC [[FPEXT21]]
    ; GFX6-NEXT: [[FPTRUNC9:%[0-9]+]]:_(f16) = G_FPTRUNC [[INTRINSIC_TRUNC3]](f32)
    ; GFX6-NEXT: [[FNEG3:%[0-9]+]]:_(f16) = G_FNEG [[FPTRUNC9]]
    ; GFX6-NEXT: [[FPEXT22:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FPEXT23:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG3]](f16)
    ; GFX6-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FPEXT22]], [[FPEXT23]]
    ; GFX6-NEXT: [[FPTRUNC10:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD6]](f32)
    ; GFX6-NEXT: [[FABS3:%[0-9]+]]:_(f16) = G_FABS [[FPTRUNC10]]
    ; GFX6-NEXT: [[FPEXT24:%[0-9]+]]:_(f32) = G_FPEXT [[FABS3]](f16)
    ; GFX6-NEXT: [[FPEXT25:%[0-9]+]]:_(f32) = G_FPEXT [[C1]](f16)
    ; GFX6-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FPEXT24]](f32), [[FPEXT25]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(f16) = G_SELECT [[FCMP3]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT3]](f16)
    ; GFX6-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX6-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[BITCAST18]], [[C5]]
    ; GFX6-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[BITCAST19]], [[C4]]
    ; GFX6-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[AND6]], [[AND7]]
    ; GFX6-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST [[OR3]](i16)
    ; GFX6-NEXT: [[FPEXT26:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC9]](f16)
    ; GFX6-NEXT: [[FPEXT27:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST20]](f16)
    ; GFX6-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[FPEXT26]], [[FPEXT27]]
    ; GFX6-NEXT: [[FPTRUNC11:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; GFX6-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC5]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR4]](i32)
    ; GFX6-NEXT: [[BITCAST24:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC8]](f16)
    ; GFX6-NEXT: [[BITCAST25:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC11]](f16)
    ; GFX6-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST24]](i16)
    ; GFX6-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST25]](i16)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX6-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX6-NEXT: [[BITCAST26:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR5]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST23]](<2 x f16>), [[BITCAST26]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST27:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST27]](<4 x i16>)
    ;
    ; GFX8-LABEL: name: test_intrinsic_round_v4s16
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %65(i16)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %71(i16)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %66(i16)
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %72(i16)
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX8-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST1]]
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST1]], [[INTRINSIC_TRUNC]]
    ; GFX8-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX8-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C5]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST10]], [[C4]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX8-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST11]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST3]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[INTRINSIC_TRUNC1]]
    ; GFX8-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FSUB1]]
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f16), [[C1]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX8-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST3]](f16)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST12]], [[C5]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST13]], [[C4]]
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX8-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST14]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC2:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST2]]
    ; GFX8-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[INTRINSIC_TRUNC2]]
    ; GFX8-NEXT: [[FABS2:%[0-9]+]]:_(f16) = G_FABS [[FSUB2]]
    ; GFX8-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS2]](f16), [[C1]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(f16) = G_SELECT [[FCMP2]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT2]](f16)
    ; GFX8-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX8-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[BITCAST15]], [[C5]]
    ; GFX8-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[BITCAST16]], [[C4]]
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i16) = disjoint G_OR [[AND4]], [[AND5]]
    ; GFX8-NEXT: [[BITCAST17:%[0-9]+]]:_(f16) = G_BITCAST [[OR2]](i16)
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC2]], [[BITCAST17]]
    ; GFX8-NEXT: [[INTRINSIC_TRUNC3:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST4]]
    ; GFX8-NEXT: [[FSUB3:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[INTRINSIC_TRUNC3]]
    ; GFX8-NEXT: [[FABS3:%[0-9]+]]:_(f16) = G_FABS [[FSUB3]]
    ; GFX8-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS3]](f16), [[C1]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(f16) = G_SELECT [[FCMP3]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT3]](f16)
    ; GFX8-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX8-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[BITCAST18]], [[C5]]
    ; GFX8-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[BITCAST19]], [[C4]]
    ; GFX8-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[AND6]], [[AND7]]
    ; GFX8-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST [[OR3]](i16)
    ; GFX8-NEXT: [[FADD3:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC3]], [[BITCAST20]]
    ; GFX8-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX8-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX8-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX8-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR4]](i32)
    ; GFX8-NEXT: [[BITCAST24:%[0-9]+]]:_(i16) = G_BITCAST [[FADD2]](f16)
    ; GFX8-NEXT: [[BITCAST25:%[0-9]+]]:_(i16) = G_BITCAST [[FADD3]](f16)
    ; GFX8-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST24]](i16)
    ; GFX8-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST25]](i16)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX8-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX8-NEXT: [[BITCAST26:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR5]](i32)
    ; GFX8-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST23]](<2 x f16>), [[BITCAST26]](<2 x f16>)
    ; GFX8-NEXT: [[BITCAST27:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST27]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_intrinsic_round_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %65(i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %71(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %66(i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %72(i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[INTRINSIC_TRUNC:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST1]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST1]], [[INTRINSIC_TRUNC]]
    ; GFX9-NEXT: [[FABS:%[0-9]+]]:_(f16) = G_FABS [[FSUB]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3800
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS]](f16), [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f16) = G_SELECT [[FCMP]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT]](f16)
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST1]](f16)
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[BITCAST9]], [[C5]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[BITCAST10]], [[C4]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = disjoint G_OR [[AND]], [[AND1]]
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST [[OR]](i16)
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC]], [[BITCAST11]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC1:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST3]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[INTRINSIC_TRUNC1]]
    ; GFX9-NEXT: [[FABS1:%[0-9]+]]:_(f16) = G_FABS [[FSUB1]]
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS1]](f16), [[C1]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f16) = G_SELECT [[FCMP1]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT1]](f16)
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST3]](f16)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[BITCAST12]], [[C5]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[BITCAST13]], [[C4]]
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i16) = disjoint G_OR [[AND2]], [[AND3]]
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST [[OR1]](i16)
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC1]], [[BITCAST14]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC2:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST2]]
    ; GFX9-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[INTRINSIC_TRUNC2]]
    ; GFX9-NEXT: [[FABS2:%[0-9]+]]:_(f16) = G_FABS [[FSUB2]]
    ; GFX9-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS2]](f16), [[C1]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(f16) = G_SELECT [[FCMP2]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT2]](f16)
    ; GFX9-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST2]](f16)
    ; GFX9-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[BITCAST15]], [[C5]]
    ; GFX9-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[BITCAST16]], [[C4]]
    ; GFX9-NEXT: [[OR2:%[0-9]+]]:_(i16) = disjoint G_OR [[AND4]], [[AND5]]
    ; GFX9-NEXT: [[BITCAST17:%[0-9]+]]:_(f16) = G_BITCAST [[OR2]](i16)
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC2]], [[BITCAST17]]
    ; GFX9-NEXT: [[INTRINSIC_TRUNC3:%[0-9]+]]:_(f16) = G_INTRINSIC_TRUNC [[BITCAST4]]
    ; GFX9-NEXT: [[FSUB3:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[INTRINSIC_TRUNC3]]
    ; GFX9-NEXT: [[FABS3:%[0-9]+]]:_(f16) = G_FABS [[FSUB3]]
    ; GFX9-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(oge), [[FABS3]](f16), [[C1]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(f16) = G_SELECT [[FCMP3]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[SELECT3]](f16)
    ; GFX9-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST4]](f16)
    ; GFX9-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[BITCAST18]], [[C5]]
    ; GFX9-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[BITCAST19]], [[C4]]
    ; GFX9-NEXT: [[OR3:%[0-9]+]]:_(i16) = disjoint G_OR [[AND6]], [[AND7]]
    ; GFX9-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST [[OR3]](i16)
    ; GFX9-NEXT: [[FADD3:%[0-9]+]]:_(f16) = G_FADD [[INTRINSIC_TRUNC3]], [[BITCAST20]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD2]](f16), [[FADD3]](f16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST21:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST21]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %2:_(<4 x f16>) = G_INTRINSIC_ROUND %1
    %3:_(<4 x i16>) = G_BITCAST %2(<4 x f16>)
    $vgpr0_vgpr1 = COPY %3(<4 x i16>)
...
