# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_f16_poszero_nsz
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f16_poszero_nsz
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %input:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %input(i16)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FCANONICALIZE]](f16)
    ; CHECK-NEXT: %res:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY %res(i32)
    %0:_(i32) = COPY $vgpr0
    %input:_(i16) = G_TRUNC %0(i32)
    %cst:_(f16) = G_FCONSTANT half 0xH0000
    %3:_(f16) = G_BITCAST %input(i16)
    %sub:_(f16) = nsz G_FSUB %cst, %3
    %5:_(i16) = G_BITCAST %sub(f16)
    %res:_(i32) = G_ANYEXT %5(i16)
    $vgpr0 = COPY %res(i32)
...

---
name:            test_f16_poszero_nonsz_nofold
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f16_poszero_nonsz_nofold
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %input:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: %cst:_(f16) = G_FCONSTANT half 0xH0000
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %input(i16)
    ; CHECK-NEXT: %sub:_(f16) = G_FSUB %cst, [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %sub(f16)
    ; CHECK-NEXT: %res:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY %res(i32)
    %0:_(i32) = COPY $vgpr0
    %input:_(i16) = G_TRUNC %0(i32)
    %cst:_(f16) = G_FCONSTANT half 0xH0000
    %3:_(f16) = G_BITCAST %input(i16)
    %sub:_(f16) = G_FSUB %cst, %3
    %5:_(i16) = G_BITCAST %sub(f16)
    %res:_(i32) = G_ANYEXT %5(i16)
    $vgpr0 = COPY %res(i32)
...

---
name:            test_f16_negzero
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f16_negzero
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %input:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %input(i16)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FCANONICALIZE]](f16)
    ; CHECK-NEXT: %res:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY %res(i32)
    %0:_(i32) = COPY $vgpr0
    %input:_(i16) = G_TRUNC %0(i32)
    %cst:_(f16) = G_FCONSTANT half 0xH8000
    %3:_(f16) = G_BITCAST %input(i16)
    %sub:_(f16) = G_FSUB %cst, %3
    %5:_(i16) = G_BITCAST %sub(f16)
    %res:_(i32) = G_ANYEXT %5(i16)
    $vgpr0 = COPY %res(i32)
...

---
name:            test_f32_poszero_nsz
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f32_poszero_nsz
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %input(i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FCANONICALIZE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %input:_(i32) = COPY $vgpr0
    %cst:_(f32) = G_FCONSTANT float 0.000000e+00
    %2:_(f32) = G_BITCAST %input(i32)
    %sub:_(f32) = nsz G_FSUB %cst, %2
    %4:_(i32) = G_BITCAST %sub(f32)
    $vgpr0 = COPY %4(i32)
...

---
name:            test_f32_poszero_nonsz_nofold
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f32_poszero_nonsz_nofold
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %cst:_(f32) = G_FCONSTANT float 0.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %input(i32)
    ; CHECK-NEXT: %sub:_(f32) = G_FSUB %cst, [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %sub(f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %input:_(i32) = COPY $vgpr0
    %cst:_(f32) = G_FCONSTANT float 0.000000e+00
    %2:_(f32) = G_BITCAST %input(i32)
    %sub:_(f32) = G_FSUB %cst, %2
    %4:_(i32) = G_BITCAST %sub(f32)
    $vgpr0 = COPY %4(i32)
...

---
name:            test_f32_negzero
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_f32_negzero
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %input(i32)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FCANONICALIZE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %input:_(i32) = COPY $vgpr0
    %cst:_(f32) = G_FCONSTANT float -0.000000e+00
    %2:_(f32) = G_BITCAST %input(i32)
    %sub:_(f32) = G_FSUB %cst, %2
    %4:_(i32) = G_BITCAST %sub(f32)
    $vgpr0 = COPY %4(i32)
...

---
name:            test_f64_poszero_nsz
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_f64_poszero_nsz
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %input(i64)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FCANONICALIZE]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %input:_(i64) = COPY $vgpr0_vgpr1
    %cst:_(f64) = G_FCONSTANT double 0.000000e+00
    %2:_(f64) = G_BITCAST %input(i64)
    %sub:_(f64) = nsz G_FSUB %cst, %2
    %4:_(i64) = G_BITCAST %sub(f64)
    $vgpr0_vgpr1 = COPY %4(i64)
...

---
name:            test_f64_poszero_nonsz_nofold
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_f64_poszero_nonsz_nofold
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %cst:_(f64) = G_FCONSTANT double 0.000000e+00
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %input(i64)
    ; CHECK-NEXT: %sub:_(f64) = G_FSUB %cst, [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST %sub(f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %input:_(i64) = COPY $vgpr0_vgpr1
    %cst:_(f64) = G_FCONSTANT double 0.000000e+00
    %2:_(f64) = G_BITCAST %input(i64)
    %sub:_(f64) = G_FSUB %cst, %2
    %4:_(i64) = G_BITCAST %sub(f64)
    $vgpr0_vgpr1 = COPY %4(i64)
...

---
name:            test_f64_negzero
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_f64_negzero
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %input(i64)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FCANONICALIZE]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %input:_(i64) = COPY $vgpr0_vgpr1
    %cst:_(f64) = G_FCONSTANT double -0.000000e+00
    %2:_(f64) = G_BITCAST %input(i64)
    %sub:_(f64) = G_FSUB %cst, %2
    %4:_(i64) = G_BITCAST %sub(f64)
    $vgpr0_vgpr1 = COPY %4(i64)
...

---
name:            test_v4f16_poszero_nsz
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_v4f16_poszero_nsz
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST %input(<4 x i16>)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(<4 x f16>) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<4 x f16>) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[FCANONICALIZE]](<4 x f16>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](<4 x i16>)
    %input:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %cst:_(f16) = G_FCONSTANT half 0xH0000
    %veccst:_(<4 x f16>) = G_BUILD_VECTOR %cst(f16), %cst(f16), %cst(f16), %cst(f16)
    %3:_(<4 x f16>) = G_BITCAST %input(<4 x i16>)
    %sub:_(<4 x f16>) = nsz G_FSUB %veccst, %3
    %5:_(<4 x i16>) = G_BITCAST %sub(<4 x f16>)
    $vgpr0_vgpr1 = COPY %5(<4 x i16>)
...

---
name:            test_v4f16_poszero_nonsz_nofold
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_v4f16_poszero_nonsz_nofold
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %cst:_(f16) = G_FCONSTANT half 0xH0000
    ; CHECK-NEXT: %veccst:_(<4 x f16>) = G_BUILD_VECTOR %cst(f16), %cst(f16), %cst(f16), %cst(f16)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST %input(<4 x i16>)
    ; CHECK-NEXT: %sub:_(<4 x f16>) = G_FSUB %veccst, [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x i16>) = G_BITCAST %sub(<4 x f16>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](<4 x i16>)
    %input:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %cst:_(f16) = G_FCONSTANT half 0xH0000
    %veccst:_(<4 x f16>) = G_BUILD_VECTOR %cst(f16), %cst(f16), %cst(f16), %cst(f16)
    %3:_(<4 x f16>) = G_BITCAST %input(<4 x i16>)
    %sub:_(<4 x f16>) = G_FSUB %veccst, %3
    %5:_(<4 x i16>) = G_BITCAST %sub(<4 x f16>)
    $vgpr0_vgpr1 = COPY %5(<4 x i16>)
...

---
name:            test_v4f16_negzero
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_v4f16_negzero
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST %input(<4 x i16>)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(<4 x f16>) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<4 x f16>) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[FCANONICALIZE]](<4 x f16>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](<4 x i16>)
    %input:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %cst:_(f16) = G_FCONSTANT half 0xH8000
    %veccst:_(<4 x f16>) = G_BUILD_VECTOR %cst(f16), %cst(f16), %cst(f16), %cst(f16)
    %3:_(<4 x f16>) = G_BITCAST %input(<4 x i16>)
    %sub:_(<4 x f16>) = G_FSUB %veccst, %3
    %5:_(<4 x i16>) = G_BITCAST %sub(<4 x f16>)
    $vgpr0_vgpr1 = COPY %5(<4 x i16>)
...

---
name:            test_v4f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_v4f32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(<4 x f32>) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<4 x f32>) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[FCANONICALIZE]](<4 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST1]](<4 x i32>)
    %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %cst:_(f32) = G_FCONSTANT float 0.000000e+00
    %veccst:_(<4 x f32>) = G_BUILD_VECTOR %cst(f32), %cst(f32), %cst(f32), %cst(f32)
    %3:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    %sub:_(<4 x f32>) = nsz G_FSUB %veccst, %3
    %5:_(<4 x i32>) = G_BITCAST %sub(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<4 x i32>)
...

---
name:            test_v4f32_negzero
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_v4f32_negzero
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(<4 x f32>) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<4 x f32>) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[FCANONICALIZE]](<4 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST1]](<4 x i32>)
    %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %cst:_(f32) = G_FCONSTANT float -0.000000e+00
    %veccst:_(<4 x f32>) = G_BUILD_VECTOR %cst(f32), %cst(f32), %cst(f32), %cst(f32)
    %3:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    %sub:_(<4 x f32>) = G_FSUB %veccst, %3
    %5:_(<4 x i32>) = G_BITCAST %sub(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<4 x i32>)
...

---
name:            test_v4f32_negzero_undef_elt
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_v4f32_negzero_undef_elt
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: %cst:_(f32) = G_FCONSTANT float -0.000000e+00
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %cst(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %cst(f32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST %cst(f32)
    ; CHECK-NEXT: %veccst:_(<4 x i32>) = G_BUILD_VECTOR [[BITCAST]](i32), %undef(i32), [[BITCAST1]](i32), [[BITCAST2]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x f32>) = G_BITCAST %veccst(<4 x i32>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    ; CHECK-NEXT: %sub:_(<4 x f32>) = G_FSUB [[BITCAST3]], [[BITCAST4]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<4 x i32>) = G_BITCAST %sub(<4 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<4 x i32>)
    %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %cst:_(f32) = G_FCONSTANT float -0.000000e+00
    %undef:_(i32) = G_IMPLICIT_DEF
    %3:_(i32) = G_BITCAST %cst(f32)
    %4:_(i32) = G_BITCAST %cst(f32)
    %5:_(i32) = G_BITCAST %cst(f32)
    %veccst:_(<4 x i32>) = G_BUILD_VECTOR %3(i32), %undef(i32), %4(i32), %5(i32)
    %7:_(<4 x f32>) = G_BITCAST %veccst(<4 x i32>)
    %8:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    %sub:_(<4 x f32>) = G_FSUB %7, %8
    %10:_(<4 x i32>) = G_BITCAST %sub(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %10(<4 x i32>)
...

---
name:            test_v4f32_poszero_undef_elt
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_v4f32_poszero_undef_elt
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: %cst:_(f32) = G_FCONSTANT float 0.000000e+00
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST %cst(f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %cst(f32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST %cst(f32)
    ; CHECK-NEXT: %veccst:_(<4 x i32>) = G_BUILD_VECTOR [[BITCAST]](i32), %undef(i32), [[BITCAST1]](i32), [[BITCAST2]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x f32>) = G_BITCAST %veccst(<4 x i32>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    ; CHECK-NEXT: %sub:_(<4 x f32>) = nsz G_FSUB [[BITCAST3]], [[BITCAST4]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<4 x i32>) = G_BITCAST %sub(<4 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<4 x i32>)
    %input:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %cst:_(f32) = G_FCONSTANT float 0.000000e+00
    %undef:_(i32) = G_IMPLICIT_DEF
    %3:_(i32) = G_BITCAST %cst(f32)
    %4:_(i32) = G_BITCAST %cst(f32)
    %5:_(i32) = G_BITCAST %cst(f32)
    %veccst:_(<4 x i32>) = G_BUILD_VECTOR %3(i32), %undef(i32), %4(i32), %5(i32)
    %7:_(<4 x f32>) = G_BITCAST %veccst(<4 x i32>)
    %8:_(<4 x f32>) = G_BITCAST %input(<4 x i32>)
    %sub:_(<4 x f32>) = nsz G_FSUB %7, %8
    %10:_(<4 x i32>) = G_BITCAST %sub(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %10(<4 x i32>)
...

---
name:            test_v2f64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_v2f64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST %input(<2 x i64>)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(<2 x f64>) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<2 x f64>) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[FCANONICALIZE]](<2 x f64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST1]](<2 x i64>)
    %input:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %cst:_(f64) = G_FCONSTANT double 0.000000e+00
    %veccst:_(<2 x f64>) = G_BUILD_VECTOR %cst(f64), %cst(f64)
    %3:_(<2 x f64>) = G_BITCAST %input(<2 x i64>)
    %sub:_(<2 x f64>) = nsz G_FSUB %veccst, %3
    %5:_(<2 x i64>) = G_BITCAST %sub(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<2 x i64>)
...

---
name:            test_v2f64_negzero
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_v2f64_negzero
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %input:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST %input(<2 x i64>)
    ; CHECK-NEXT: [[FNEG:%[0-9]+]]:_(<2 x f64>) = G_FNEG [[BITCAST]]
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<2 x f64>) = G_FCANONICALIZE [[FNEG]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[FCANONICALIZE]](<2 x f64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST1]](<2 x i64>)
    %input:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %cst:_(f64) = G_FCONSTANT double -0.000000e+00
    %veccst:_(<2 x f64>) = G_BUILD_VECTOR %cst(f64), %cst(f64)
    %3:_(<2 x f64>) = G_BITCAST %input(<2 x i64>)
    %sub:_(<2 x f64>) = G_FSUB %veccst, %3
    %5:_(<2 x i64>) = G_BITCAST %sub(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<2 x i64>)
...
