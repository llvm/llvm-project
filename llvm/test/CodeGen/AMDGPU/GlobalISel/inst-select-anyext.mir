# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN
# RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN
# RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=GCN

---

name: anyext_sgpr_s16_to_sgpr_s32
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_sgpr_s16_to_sgpr_s32
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: $sgpr0 = COPY [[COPY]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i16) = G_TRUNC %0(i32)
    %2:sgpr(i32) = G_ANYEXT %1(i16)
    $sgpr0 = COPY %2(i32)

...

---
name: anyext_sgpr_s32_to_sgpr_s64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_sgpr_s32_to_sgpr_s64
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY $sgpr0
    ; GCN-NEXT: [[DEF:%[0-9]+]]:sreg_32_xm0 = IMPLICIT_DEF
    ; GCN-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY]], %subreg.sub0, [[DEF]], %subreg.sub1
    ; GCN-NEXT: S_ENDPGM 0, implicit [[REG_SEQUENCE]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i64) = G_ANYEXT %0(i32)
    S_ENDPGM 0, implicit %1(i64)

...

---
name: anyext_sgpr_s16_to_sgpr_s64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_sgpr_s16_to_sgpr_s64
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY]], %subreg.sub0, [[DEF]], %subreg.sub1
    ; GCN-NEXT: S_ENDPGM 0, implicit [[REG_SEQUENCE]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i16) = G_TRUNC %0(i32)
    %2:sgpr(i64) = G_ANYEXT %1(i16)
    S_ENDPGM 0, implicit %2(i64)

...

---
name: anyext_vgpr_s32_to_vgpr_s64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: anyext_vgpr_s32_to_vgpr_s64
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[REG_SEQUENCE:%[0-9]+]]:vreg_64 = REG_SEQUENCE [[COPY]], %subreg.sub0, [[DEF]], %subreg.sub1
    ; GCN-NEXT: S_ENDPGM 0, implicit [[REG_SEQUENCE]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i64) = G_ANYEXT %0(i32)
    S_ENDPGM 0, implicit %1(i64)

...

---
name: anyext_vgpr_s16_to_vgpr_s64
legalized:       true
regBankSelected: true
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i16) = G_TRUNC %0
    %2:vgpr(i64) = G_ANYEXT %1
    S_ENDPGM 0, implicit %2

...

# vcc is an invalid extension source
# ---

# name: anyext_vcc_s1_to_vgpr_s32
# legalized:       true
# regBankSelected: true
# body: |
#   bb.0:
#     liveins: $vgpr0

#     %0:vgpr(i32) = COPY $vgpr0
#     %1:vcc(i1) = G_ICMP intpred(eq), %0, %0
#     %2:vgpr(i32) = G_ANYEXT %1
#     $vgpr0 = COPY %2
# ...

---

name: anyext_sgpr_s1_to_sgpr_s16
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $sgpr0

    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i16) = G_TRUNC %0(i32)
    %2:vgpr(i64) = G_ANYEXT %1(i16)
    S_ENDPGM 0, implicit %2(i64)
...

---

name: anyext_sgpr_s1_to_sgpr_s32
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_sgpr_s1_to_sgpr_s32
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: $sgpr0 = COPY [[COPY]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i1) = G_TRUNC %0(i32)
    %2:sgpr(i32) = G_ANYEXT %1(i1)
    $sgpr0 = COPY %2(i32)
...

---

name: anyext_sgpr_s1_to_sgpr_s64
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_sgpr_s1_to_sgpr_s64
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[DEF:%[0-9]+]]:sreg_32 = IMPLICIT_DEF
    ; GCN-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY]], %subreg.sub0, [[DEF]], %subreg.sub1
    ; GCN-NEXT: $sgpr0_sgpr1 = COPY [[REG_SEQUENCE]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i1) = G_TRUNC %0(i32)
    %2:sgpr(i64) = G_ANYEXT %1(i1)
    $sgpr0_sgpr1 = COPY %2(i64)
...

---

name: anyext_vgpr_s1_to_vgpr_s16
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: anyext_vgpr_s1_to_vgpr_s16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 65535
    ; GCN-NEXT: [[V_AND_B32_e64_:%[0-9]+]]:vgpr_32 = V_AND_B32_e64 [[S_MOV_B32_]], [[COPY]], implicit $exec
    ; GCN-NEXT: $vgpr0 = COPY [[V_AND_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i1) = G_TRUNC %0(i32)
    %2:vgpr(i16) = G_ANYEXT %1(i1)
    %3:vgpr(i32) = G_ZEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---

name: anyext_vgpr_s1_to_vgpr_s32
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: anyext_vgpr_s1_to_vgpr_s32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: $vgpr0 = COPY [[COPY]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i1) = G_TRUNC %0(i32)
    %2:vgpr(i32) = G_ANYEXT %1(i1)
    $vgpr0 = COPY %2(i32)
...

---

name: anyext_sgpr_s1_to_vgpr_s32
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_sgpr_s1_to_vgpr_s32
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: $sgpr0 = COPY [[COPY]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i1) = G_TRUNC %0(i32)
    %2:sgpr(i32) = G_ANYEXT %1(i1)
    $sgpr0 = COPY %2(i32)
...

---

name: anyext_vgpr_s16_to_vgpr_s32
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: anyext_vgpr_s16_to_vgpr_s32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: $vgpr0 = COPY [[COPY]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i16) = G_TRUNC %0(i32)
    %2:vgpr(i32) = G_ANYEXT %1(i16)
    $vgpr0 = COPY %2(i32)

...

# The source register already has an assigned register class that
# should not be interpreted as vcc.
---

name: anyext_regclass_sgpr_s1_to_sgpr_s32
legalized:       true
regBankSelected: true
body: |
  bb.0:
    liveins: $sgpr0

    ; GCN-LABEL: name: anyext_regclass_sgpr_s1_to_sgpr_s32
    ; GCN: liveins: $sgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: $sgpr0 = COPY [[COPY]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sreg_32(i1) = G_TRUNC %0(i32)
    %2:sgpr(i32) = G_ANYEXT %1(i1)
    $sgpr0 = COPY %2(i32)
...
