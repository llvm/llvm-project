# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=amdgcn -mcpu=hawaii  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX7 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=fiji  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX8 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx900  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx1010  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s
# RUN: llc -O0 -mtriple=amdgcn -mcpu=gfx1100  -run-pass=legalizer -verify-machineinstrs -o - %s | FileCheck -check-prefix=GFX9 %s

---
name: test_icmp_s32
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: test_icmp_s32
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[COPY]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX7-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_s32
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[COPY]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX8-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_s32
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[COPY]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX9-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    %0:_(i32) = G_CONSTANT i32 0
    %1:_(i32) = COPY $vgpr0
    %2:_(i1) = G_ICMP intpred(ne), %0(i32), %1
    %3:_(i32) = G_SELECT %2(i1), %0, %1
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: test_icmp_s64
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i64), [[COPY]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[SELECT]](i64)
    ;
    ; GFX8-LABEL: name: test_icmp_s64
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i64), [[COPY]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[SELECT]](i64)
    ;
    ; GFX9-LABEL: name: test_icmp_s64
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i64), [[COPY]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[SELECT]](i64)
    %0:_(i64) = G_CONSTANT i64 0
    %1:_(i64) = COPY $vgpr0_vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(i64), %1
    %3:_(i64) = G_SELECT %2(i1), %0, %1
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: test_icmp_s16
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: test_icmp_s16
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C2]]
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C1]](i32), [[AND]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C]], [[TRUNC]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i16), [[TRUNC]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C]], [[TRUNC]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i16), [[TRUNC]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C]], [[TRUNC]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i16) = G_CONSTANT i16 0
    %1:_(i32) = COPY $vgpr0
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(i1) = G_ICMP intpred(ne), %0(i16), %2
    %4:_(i16) = G_SELECT %3(i1), %0, %2
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_icmp_s8
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: test_icmp_s8
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[AND]]
    ; GFX7-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[TRUNC]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_s8
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[AND]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[TRUNC]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_s8
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[AND]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[TRUNC]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i8) = G_CONSTANT i8 0
    %1:_(i32) = COPY $vgpr0
    %2:_(i8) = G_TRUNC %1(i32)
    %3:_(i1) = G_ICMP intpred(ne), %0(i8), %2
    %4:_(i8) = G_SELECT %3(i1), %0, %2
    %5:_(i32) = G_ANYEXT %4(i8)
    $vgpr0 = COPY %5(i32)
...

---
name: test_icmp_s24
body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: test_icmp_s24
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[AND]]
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX7-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_s24
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[AND]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX8-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_s24
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[AND]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[COPY]]
    ; GFX9-NEXT: $vgpr0 = COPY [[SELECT]](i32)
    %0:_(i24) = G_CONSTANT i24 0
    %1:_(i32) = COPY $vgpr0
    %2:_(i24) = G_TRUNC %1(i32)
    %3:_(i1) = G_ICMP intpred(ne), %0(i24), %2
    %4:_(i24) = G_SELECT %3(i1), %0, %2
    %5:_(i32) = G_ANYEXT %4(i24)
    $vgpr0 = COPY %5(i32)
...

---
name: test_icmp_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: test_icmp_v2s32
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[UV]]
    ; GFX7-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[UV1]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX7-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[UV]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[UV1]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[UV]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i32), [[UV1]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = G_CONSTANT i32 0
    %1:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %0(i32)
    %2:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %3:_(<2 x i1>) = G_ICMP intpred(ne), %1(<2 x i32>), %2
    %4:_(<2 x i32>) = G_ZEXT %3(<2 x i1>)
    S_NOP 0, implicit %4(<2 x i32>)
...

---
name: test_icmp_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; GFX7-LABEL: name: test_icmp_v3s32
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[DEF:%[0-9]+]]:_(<3 x i32>) = G_IMPLICIT_DEF
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[DEF]](<3 x i32>)
    ; GFX7-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[UV3]]
    ; GFX7-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[UV4]]
    ; GFX7-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV2]](i32), [[UV5]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX7-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP2]](i1)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C]]
    ; GFX7-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C]]
    ; GFX7-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32), [[AND2]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v3s32
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[DEF:%[0-9]+]]:_(<3 x i32>) = G_IMPLICIT_DEF
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[DEF]](<3 x i32>)
    ; GFX8-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[UV3]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[UV4]]
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV2]](i32), [[UV5]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP2]](i1)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32), [[AND2]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<3 x i32>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[DEF]](<3 x i32>)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[UV3]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[UV4]]
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV2]](i32), [[UV5]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C]]
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C]]
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP2]](i1)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32), [[AND2]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    %0:_(<3 x i32>) = G_IMPLICIT_DEF
    %1:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %2:_(<3 x i1>) = G_ICMP intpred(ne), %0(<3 x i32>), %1
    %3:_(<3 x i32>) = G_ZEXT %2(<3 x i1>)
    S_NOP 0, implicit %3(<3 x i32>)
...

---
name: test_icmp_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; GFX7-LABEL: name: test_icmp_v4s32
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[DEF:%[0-9]+]]:_(p1) = G_IMPLICIT_DEF
    ; GFX7-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[DEF]](p1) :: (volatile load (<4 x i32>))
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[UV4]]
    ; GFX7-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[UV5]]
    ; GFX7-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV2]](i32), [[UV6]]
    ; GFX7-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV3]](i32), [[UV7]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX7-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP2]](i1)
    ; GFX7-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP3]](i1)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C]]
    ; GFX7-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C]]
    ; GFX7-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C]]
    ; GFX7-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ANYEXT3]], [[C]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32), [[AND2]](i32), [[AND3]](i32)
    ; GFX7-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v4s32
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[DEF:%[0-9]+]]:_(p1) = G_IMPLICIT_DEF
    ; GFX8-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[DEF]](p1) :: (volatile load (<4 x i32>))
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX8-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[UV4]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[UV5]]
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV2]](i32), [[UV6]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV3]](i32), [[UV7]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP2]](i1)
    ; GFX8-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP3]](i1)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ANYEXT3]], [[C]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32), [[AND2]](i32), [[AND3]](i32)
    ; GFX8-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v4s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(p1) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[DEF]](p1) :: (volatile load (<4 x i32>))
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[UV4]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[UV5]]
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV2]](i32), [[UV6]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV3]](i32), [[UV7]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C]]
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C]]
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP2]](i1)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C]]
    ; GFX9-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP3]](i1)
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ANYEXT3]], [[C]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32), [[AND2]](i32), [[AND3]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    %0:_(p1) = G_IMPLICIT_DEF
    %1:_(<4 x i32>) = G_LOAD %0(p1) :: (volatile load (<4 x i32>))
    %2:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %3:_(<4 x i1>) = G_ICMP intpred(ne), %1(<4 x i32>), %2
    %4:_(<4 x i32>) = G_ZEXT %3(<4 x i1>)
    S_NOP 0, implicit %4(<4 x i32>)

...

---
name: test_icmp_p0
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-LABEL: name: test_icmp_p0
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p0), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p0
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p0), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p0
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p0), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p0) = COPY $vgpr0_vgpr1
    %1:_(p0) = COPY $vgpr0_vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p0), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_p1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-LABEL: name: test_icmp_p1
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p1), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p1
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p1), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p1
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p1), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p1) = COPY $vgpr0_vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p1), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_p2
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX7-LABEL: name: test_icmp_p2
    ; GFX7: liveins: $vgpr0, $vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p2) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p2) = COPY $vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p2), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p2
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p2) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p2) = COPY $vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p2), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p2
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p2) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p2) = COPY $vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p2), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p2) = COPY $vgpr0
    %1:_(p2) = COPY $vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p2), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_p3
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX7-LABEL: name: test_icmp_p3
    ; GFX7: liveins: $vgpr0, $vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p3) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p3) = COPY $vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p3), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p3
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p3) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p3) = COPY $vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p3), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p3
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p3) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p3) = COPY $vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p3), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p3) = COPY $vgpr0
    %1:_(p3) = COPY $vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p3), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_p4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-LABEL: name: test_icmp_p4
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p4) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p4) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p4), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p4
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p4) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p4) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p4), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p4
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p4) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p4) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p4), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p4) = COPY $vgpr0_vgpr1
    %1:_(p4) = COPY $vgpr0_vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p4), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_p5
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX7-LABEL: name: test_icmp_p5
    ; GFX7: liveins: $vgpr0, $vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p5) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p5) = COPY $vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p5), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p5
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p5) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p5) = COPY $vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p5), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p5
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p5) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p5) = COPY $vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p5), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p5) = COPY $vgpr0
    %1:_(p5) = COPY $vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p5), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_p999
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-LABEL: name: test_icmp_p999
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p999), [[COPY1]]
    ; GFX7-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX7-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_icmp_p999
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p999), [[COPY1]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_icmp_p999
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](p999), [[COPY1]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT]](i32)
    %0:_(p999) = COPY $vgpr0_vgpr1
    %1:_(p999) = COPY $vgpr0_vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(p999), %1
    %3:_(i32) = G_SEXT %2(i1)
    $vgpr0 = COPY %3(i32)
...

---
name: test_icmp_v2p3
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-LABEL: name: test_icmp_v2p3
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x p3>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x p3>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(p3), [[UV1:%[0-9]+]]:_(p3) = G_UNMERGE_VALUES [[COPY]](<2 x p3>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(p3), [[UV3:%[0-9]+]]:_(p3) = G_UNMERGE_VALUES [[COPY1]](<2 x p3>)
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](p3), [[UV2]]
    ; GFX7-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](p3), [[UV3]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX7-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX7-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v2p3
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x p3>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x p3>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(p3), [[UV1:%[0-9]+]]:_(p3) = G_UNMERGE_VALUES [[COPY]](<2 x p3>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(p3), [[UV3:%[0-9]+]]:_(p3) = G_UNMERGE_VALUES [[COPY1]](<2 x p3>)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](p3), [[UV2]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](p3), [[UV3]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v2p3
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x p3>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x p3>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(p3), [[UV1:%[0-9]+]]:_(p3) = G_UNMERGE_VALUES [[COPY]](<2 x p3>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(p3), [[UV3:%[0-9]+]]:_(p3) = G_UNMERGE_VALUES [[COPY1]](<2 x p3>)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](p3), [[UV2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](p3), [[UV3]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x p3>) = COPY $vgpr0_vgpr1
    %1:_(<2 x p3>) = COPY $vgpr0_vgpr1
    %2:_(<2 x i1>) = G_ICMP intpred(ne), %0(<2 x p3>), %1
    %3:_(<2 x i32>) = G_SEXT %2(<2 x i1>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_icmp_v2p999
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX7-LABEL: name: test_icmp_v2p999
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x p999>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x p999>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(p999), [[UV1:%[0-9]+]]:_(p999) = G_UNMERGE_VALUES [[COPY]](<2 x p999>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(p999), [[UV3:%[0-9]+]]:_(p999) = G_UNMERGE_VALUES [[COPY1]](<2 x p999>)
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](p999), [[UV2]]
    ; GFX7-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](p999), [[UV3]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX7-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX7-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v2p999
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x p999>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x p999>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(p999), [[UV1:%[0-9]+]]:_(p999) = G_UNMERGE_VALUES [[COPY]](<2 x p999>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(p999), [[UV3:%[0-9]+]]:_(p999) = G_UNMERGE_VALUES [[COPY1]](<2 x p999>)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](p999), [[UV2]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](p999), [[UV3]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v2p999
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x p999>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x p999>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(p999), [[UV1:%[0-9]+]]:_(p999) = G_UNMERGE_VALUES [[COPY]](<2 x p999>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(p999), [[UV3:%[0-9]+]]:_(p999) = G_UNMERGE_VALUES [[COPY1]](<2 x p999>)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](p999), [[UV2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](p999), [[UV3]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x p999>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x p999>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<2 x i1>) = G_ICMP intpred(ne), %0(<2 x p999>), %1
    %3:_(<2 x i32>) = G_SEXT %2(<2 x i1>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_icmp_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-LABEL: name: test_icmp_v2s16
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; GFX7-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[AND]](i32), [[AND1]]
    ; GFX7-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[LSHR]](i32), [[LSHR1]]
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY3]](<2 x i32>)
    ; GFX7-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[UV]], [[UV2]]
    ; GFX7-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[UV1]], [[UV3]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT]](i32), [[SELECT1]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_icmp_v2s16
    ; GFX8: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[TRUNC2]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[TRUNC3]]
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY3]](<2 x i32>)
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[UV]], [[UV2]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT]](i32), [[SELECT1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_icmp_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[TRUNC2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[TRUNC3]]
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY3]](<2 x i32>)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[UV]], [[UV2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT]](i32), [[SELECT1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %3:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %4:_(<2 x i1>) = G_ICMP intpred(ne), %0(<2 x i16>), %1
    %5:_(<2 x i32>) = G_SELECT %4(<2 x i1>), %2, %3
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_icmp_s33
body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: test_icmp_s33
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX7-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i64), [[C]]
    ; GFX7-NEXT: S_ENDPGM 0, implicit [[ICMP]](i1)
    ;
    ; GFX8-LABEL: name: test_icmp_s33
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i64), [[C]]
    ; GFX8-NEXT: S_ENDPGM 0, implicit [[ICMP]](i1)
    ;
    ; GFX9-LABEL: name: test_icmp_s33
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[C]](i64), [[C]]
    ; GFX9-NEXT: S_ENDPGM 0, implicit [[ICMP]](i1)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i33) = G_TRUNC %0(i64)
    %2:_(i33) = G_CONSTANT i33 0
    %3:_(i1) = G_ICMP intpred(ne), %2(i33), %2
    S_ENDPGM 0, implicit %3(i1)
...
