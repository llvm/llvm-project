# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer %s -o - | FileCheck %s --check-prefix=GFX8
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx906 -O0 -run-pass=legalizer %s -o - | FileCheck %s --check-prefix=GFX9

---
name: test_smulh_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulh_s32
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[COPY]], [[COPY1]]
    ; GFX8-NEXT: $vgpr0 = COPY [[SMULH]](i32)
    ;
    ; GFX9-LABEL: name: test_smulh_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[COPY]], [[COPY1]]
    ; GFX9-NEXT: $vgpr0 = COPY [[SMULH]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = G_SMULH %0, %1
    $vgpr0 = COPY %2(i32)
...

---
name: test_smulh_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX8-LABEL: name: test_smulh_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[UV]], [[UV2]]
    ; GFX8-NEXT: [[SMULH1:%[0-9]+]]:_(i32) = G_SMULH [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SMULH]](i32), [[SMULH1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_smulh_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[UV]], [[UV2]]
    ; GFX9-NEXT: [[SMULH1:%[0-9]+]]:_(i32) = G_SMULH [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SMULH]](i32), [[SMULH1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = G_SMULH %0, %1
    $vgpr0_vgpr1 = COPY %2(<2 x i32>)
...

---
name: test_smulh_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulh_s16
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 16
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 16
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ASHR]], 16
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT_INREG2]](i32)
    ;
    ; GFX9-LABEL: name: test_smulh_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 16
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 16
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ASHR]], 16
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT_INREG2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16) = G_SMULH %2, %3
    %5:_(i32) = G_SEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_smulh_s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulh_s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[C]](i16)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[C]](i16)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[C]](i16)
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i16) = G_MUL [[ASHR]], [[ASHR1]]
    ; GFX8-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[MUL]], [[C]](i16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR2]](i16)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 8
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT_INREG]](i32)
    ;
    ; GFX9-LABEL: name: test_smulh_s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG]](i32)
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG1]](i32)
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i16) = G_MUL [[TRUNC]], [[TRUNC1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[MUL]], [[C]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR]](i16)
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 8
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT_INREG2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8) = G_TRUNC %0(i32)
    %3:_(i8) = G_TRUNC %1(i32)
    %4:_(i8) = G_SMULH %2, %3
    %5:_(i32) = G_SEXT %4(i8)
    $vgpr0 = COPY %5(i32)
...

---
name: test_smulh_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-LABEL: name: test_smulh_v2s16
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV]], 16
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV2]], 16
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV1]], 16
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV3]], 16
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG2]], [[SEXT_INREG3]]
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[MUL1]], [[C]](i32)
    ; GFX8-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ASHR]], 16
    ; GFX8-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ASHR1]], 16
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG4]](i32), [[SEXT_INREG5]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_smulh_v2s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV]], 16
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV2]], 16
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV1]], 16
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV3]], 16
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG2]], [[SEXT_INREG3]]
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[MUL1]], [[C]](i32)
    ; GFX9-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ASHR]], 16
    ; GFX9-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ASHR1]], 16
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG4]](i32), [[SEXT_INREG5]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i16>) = G_TRUNC %0(<2 x i32>)
    %3:_(<2 x i16>) = G_TRUNC %1(<2 x i32>)
    %4:_(<2 x i16>) = G_SMULH %2, %3
    %5:_(<2 x i32>) = G_SEXT %4(<2 x i16>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_smulh_v2s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX8-LABEL: name: test_smulh_v2s8
    ; GFX8: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX8-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[C]](i16)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[C]](i16)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[C]](i16)
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i16) = G_MUL [[ASHR]], [[ASHR1]]
    ; GFX8-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[MUL]], [[C]](i16)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[C]](i16)
    ; GFX8-NEXT: [[ASHR3:%[0-9]+]]:_(i16) = G_ASHR [[SHL2]], [[C]](i16)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[COPY3]](i32)
    ; GFX8-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC3]], [[C]](i16)
    ; GFX8-NEXT: [[ASHR4:%[0-9]+]]:_(i16) = G_ASHR [[SHL3]], [[C]](i16)
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i16) = G_MUL [[ASHR3]], [[ASHR4]]
    ; GFX8-NEXT: [[ASHR5:%[0-9]+]]:_(i16) = G_ASHR [[MUL1]], [[C]](i16)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[ASHR2]], [[C1]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[ASHR5]], [[C1]]
    ; GFX8-NEXT: [[SHL4:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL4]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_smulh_v2s8
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG]](i32)
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG1]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY2]], 8
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG2]](i32)
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY3]], 8
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG3]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(<2 x i16>) = G_MUL [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C]](i16), [[C]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(<2 x i16>) = G_ASHR [[MUL]], [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[ASHR]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C2]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C2]]
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C]](i16)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %4:_(i8) = G_TRUNC %0(i32)
    %5:_(i8) = G_TRUNC %1(i32)
    %6:_(i8) = G_TRUNC %2(i32)
    %7:_(i8) = G_TRUNC %3(i32)
    %8:_(<2 x i8>) = G_BUILD_VECTOR %4(i8), %5(i8)
    %9:_(<2 x i8>) = G_BUILD_VECTOR %6(i8), %7(i8)
    %10:_(<2 x i8>) = G_SMULH %8, %9
    %11:_(i8), %12:_(i8) = G_UNMERGE_VALUES %10(<2 x i8>)
    %13:_(i16) = G_MERGE_VALUES %11(i8), %12(i8)
    %14:_(i32) = G_ANYEXT %13(i16)
    $vgpr0 = COPY %14(i32)

...

---
name: test_smulh_v4s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; GFX8-LABEL: name: test_smulh_v4s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX8-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C2]](i32)
    ; GFX8-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX8-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C1]](i32)
    ; GFX8-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C2]](i32)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[C3]](i16)
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i16) = G_MUL [[ASHR]], [[ASHR1]]
    ; GFX8-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[MUL]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR3:%[0-9]+]]:_(i16) = G_ASHR [[SHL2]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX8-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC3]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR4:%[0-9]+]]:_(i16) = G_ASHR [[SHL3]], [[C3]](i16)
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i16) = G_MUL [[ASHR3]], [[ASHR4]]
    ; GFX8-NEXT: [[ASHR5:%[0-9]+]]:_(i16) = G_ASHR [[MUL1]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[SHL4:%[0-9]+]]:_(i16) = G_SHL [[TRUNC4]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR6:%[0-9]+]]:_(i16) = G_ASHR [[SHL4]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX8-NEXT: [[SHL5:%[0-9]+]]:_(i16) = G_SHL [[TRUNC5]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR7:%[0-9]+]]:_(i16) = G_ASHR [[SHL5]], [[C3]](i16)
    ; GFX8-NEXT: [[MUL2:%[0-9]+]]:_(i16) = G_MUL [[ASHR6]], [[ASHR7]]
    ; GFX8-NEXT: [[ASHR8:%[0-9]+]]:_(i16) = G_ASHR [[MUL2]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX8-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[TRUNC6]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR9:%[0-9]+]]:_(i16) = G_ASHR [[SHL6]], [[C3]](i16)
    ; GFX8-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX8-NEXT: [[SHL7:%[0-9]+]]:_(i16) = G_SHL [[TRUNC7]], [[C3]](i16)
    ; GFX8-NEXT: [[ASHR10:%[0-9]+]]:_(i16) = G_ASHR [[SHL7]], [[C3]](i16)
    ; GFX8-NEXT: [[MUL3:%[0-9]+]]:_(i16) = G_MUL [[ASHR9]], [[ASHR10]]
    ; GFX8-NEXT: [[ASHR11:%[0-9]+]]:_(i16) = G_ASHR [[MUL3]], [[C3]](i16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR2]](i16)
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C4]]
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR5]](i16)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C4]]
    ; GFX8-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL8]]
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR8]](i16)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ANYEXT2]], [[C4]]
    ; GFX8-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C1]](i32)
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL9]]
    ; GFX8-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR11]](i16)
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ANYEXT3]], [[C4]]
    ; GFX8-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL10]]
    ; GFX8-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; GFX9-LABEL: name: test_smulh_v4s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C2]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX9-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C1]](i32)
    ; GFX9-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C2]](i32)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG]](i32)
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR]], 8
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG1]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG2]](i32)
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR3]], 8
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG3]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(<2 x i16>) = G_MUL [[BUILD_VECTOR]], [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C3]](i16), [[C3]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(<2 x i16>) = G_ASHR [[MUL]], [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR1]], 8
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG4]](i32)
    ; GFX9-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR2]], 8
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG5]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-NEXT: [[SEXT_INREG6:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR4]], 8
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG6]](i32)
    ; GFX9-NEXT: [[SEXT_INREG7:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR5]], 8
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[SEXT_INREG7]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR4:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(<2 x i16>) = G_MUL [[BUILD_VECTOR3]], [[BUILD_VECTOR4]]
    ; GFX9-NEXT: [[BUILD_VECTOR5:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[C3]](i16), [[C3]](i16)
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(<2 x i16>) = G_ASHR [[MUL1]], [[BUILD_VECTOR5]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[ASHR]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[ASHR1]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C1]](i32)
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR6]], [[C4]]
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C4]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C1]](i32)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LSHR7]], [[C4]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; GFX9-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; GFX9-NEXT: $vgpr0 = COPY [[OR2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8), %3:_(i8), %4:_(i8), %5:_(i8) = G_UNMERGE_VALUES %0(i32)
    %6:_(i8), %7:_(i8), %8:_(i8), %9:_(i8) = G_UNMERGE_VALUES %1(i32)
    %10:_(<4 x i8>) = G_BUILD_VECTOR %2(i8), %3(i8), %4(i8), %5(i8)
    %11:_(<4 x i8>) = G_BUILD_VECTOR %6(i8), %7(i8), %8(i8), %9(i8)
    %12:_(<4 x i8>) = G_SMULH %10, %11
    %13:_(i8), %14:_(i8), %15:_(i8), %16:_(i8) = G_UNMERGE_VALUES %12(<4 x i8>)
    %17:_(i32) = G_MERGE_VALUES %13(i8), %14(i8), %15(i8), %16(i8)
    $vgpr0 = COPY %17(i32)
...
