# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefixes=SI,GCN  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefixes=VI,GCN %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck -check-prefixes=GFX9,GCN  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefixes=GFX9,GCN  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefixes=GFX9,GCN  %s

---
name: test_fsqrt_s32
body: |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: test_fsqrt_s32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GCN-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x39F0000000000000
    ; GCN-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[C]](f32), [[BITCAST]]
    ; GCN-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41F0000000000000
    ; GCN-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[C1]]
    ; GCN-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[FMUL]], [[BITCAST]]
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[SELECT]](f32)
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; GCN-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; GCN-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[BITCAST1]], [[C2]]
    ; GCN-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[ADD]](i32)
    ; GCN-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; GCN-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT]], [[SELECT]]
    ; GCN-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GCN-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[BITCAST1]], [[C3]]
    ; GCN-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[ADD1]](i32)
    ; GCN-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST3]]
    ; GCN-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT]], [[SELECT]]
    ; GCN-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GCN-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ole), [[FMA]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[BITCAST2]], [[INT]]
    ; GCN-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FMA1]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[BITCAST3]], [[SELECT1]]
    ; GCN-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3EF0000000000000
    ; GCN-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[SELECT2]], [[C5]]
    ; GCN-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[FMUL1]], [[SELECT2]]
    ; GCN-NEXT: [[IS_FPCLASS:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[SELECT]](f32), 608
    ; GCN-NEXT: [[SELECT4:%[0-9]+]]:_(f32) = G_SELECT [[IS_FPCLASS]](i1), [[SELECT]], [[SELECT3]]
    ; GCN-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[SELECT4]](f32)
    ; GCN-NEXT: $vgpr0 = COPY [[BITCAST4]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FSQRT %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)
...

---
name: test_fsqrt_s64
body: |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: test_fsqrt_s64
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GCN-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 0x1000000000000000
    ; GCN-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GCN-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f64), [[C]]
    ; GCN-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 256
    ; GCN-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C2]], [[C1]]
    ; GCN-NEXT: [[FLDEXP:%[0-9]+]]:_(f64) = G_FLDEXP [[BITCAST]], [[SELECT]](i32)
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[FLDEXP]](f64)
    ; GCN-NEXT: [[C3:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GCN-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT]], [[C3]]
    ; GCN-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[FLDEXP]], [[INT]]
    ; GCN-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[FMUL]]
    ; GCN-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL1]], [[C3]]
    ; GCN-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMUL1]], [[FMA]], [[FMUL1]]
    ; GCN-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FMUL]], [[FMA]], [[FMUL]]
    ; GCN-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[FMA1]]
    ; GCN-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA1]], [[FLDEXP]]
    ; GCN-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FMA3]], [[FMA2]], [[FMA1]]
    ; GCN-NEXT: [[FNEG2:%[0-9]+]]:_(f64) = G_FNEG [[FMA4]]
    ; GCN-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG2]], [[FMA4]], [[FLDEXP]]
    ; GCN-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[FMA5]], [[FMA2]], [[FMA4]]
    ; GCN-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 -128
    ; GCN-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C4]], [[C1]]
    ; GCN-NEXT: [[FLDEXP1:%[0-9]+]]:_(f64) = G_FLDEXP [[FMA6]], [[SELECT1]](i32)
    ; GCN-NEXT: [[IS_FPCLASS:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[FLDEXP]](f64), 608
    ; GCN-NEXT: [[SELECT2:%[0-9]+]]:_(f64) = G_SELECT [[IS_FPCLASS]](i1), [[FLDEXP]], [[FLDEXP1]]
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT2]](f64)
    ; GCN-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(f64) = G_BITCAST %0(i64)
    %2:_(f64) = G_FSQRT %1
    %3:_(i64) = G_BITCAST %2(f64)
    $vgpr0_vgpr1 = COPY %3(i64)

...

---
name: test_fsqrt_s64_ninf
body: |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: test_fsqrt_s64_ninf
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GCN-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 0x1000000000000000
    ; GCN-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GCN-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f64), [[C]]
    ; GCN-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 256
    ; GCN-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C2]], [[C1]]
    ; GCN-NEXT: [[FLDEXP:%[0-9]+]]:_(f64) = ninf G_FLDEXP [[BITCAST]], [[SELECT]](i32)
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[FLDEXP]](f64)
    ; GCN-NEXT: [[C3:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GCN-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT]], [[C3]]
    ; GCN-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[FLDEXP]], [[INT]]
    ; GCN-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[FMUL]]
    ; GCN-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL1]], [[C3]]
    ; GCN-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMUL1]], [[FMA]], [[FMUL1]]
    ; GCN-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FMUL]], [[FMA]], [[FMUL]]
    ; GCN-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[FMA1]]
    ; GCN-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA1]], [[FLDEXP]]
    ; GCN-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FMA3]], [[FMA2]], [[FMA1]]
    ; GCN-NEXT: [[FNEG2:%[0-9]+]]:_(f64) = G_FNEG [[FMA4]]
    ; GCN-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG2]], [[FMA4]], [[FLDEXP]]
    ; GCN-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[FMA5]], [[FMA2]], [[FMA4]]
    ; GCN-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 -128
    ; GCN-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C4]], [[C1]]
    ; GCN-NEXT: [[FLDEXP1:%[0-9]+]]:_(f64) = ninf G_FLDEXP [[FMA6]], [[SELECT1]](i32)
    ; GCN-NEXT: [[IS_FPCLASS:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[FLDEXP]](f64), 608
    ; GCN-NEXT: [[SELECT2:%[0-9]+]]:_(f64) = ninf G_SELECT [[IS_FPCLASS]](i1), [[FLDEXP]], [[FLDEXP1]]
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[SELECT2]](f64)
    ; GCN-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(f64) = G_BITCAST %0(i64)
    %2:_(f64) = ninf G_FSQRT %1
    %3:_(i64) = G_BITCAST %2(f64)
    $vgpr0_vgpr1 = COPY %3(i64)

...
---
name: test_fsqrt_s16
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fsqrt_s16
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fsqrt_s16
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fsqrt_s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST]]
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FSQRT %2
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fsqrt_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; GCN-LABEL: name: test_fsqrt_v2s32
    ; GCN: liveins: $vgpr0_vgpr1
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GCN-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GCN-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x39F0000000000000
    ; GCN-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[C]](f32), [[UV]]
    ; GCN-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41F0000000000000
    ; GCN-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[C1]]
    ; GCN-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[FMUL]], [[UV]]
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[SELECT]](f32)
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; GCN-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; GCN-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[BITCAST1]], [[C2]]
    ; GCN-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[ADD]](i32)
    ; GCN-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; GCN-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT]], [[SELECT]]
    ; GCN-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GCN-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[BITCAST1]], [[C3]]
    ; GCN-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[ADD1]](i32)
    ; GCN-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST3]]
    ; GCN-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT]], [[SELECT]]
    ; GCN-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GCN-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ole), [[FMA]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[BITCAST2]], [[INT]]
    ; GCN-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FMA1]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[BITCAST3]], [[SELECT1]]
    ; GCN-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3EF0000000000000
    ; GCN-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[SELECT2]], [[C5]]
    ; GCN-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[FMUL1]], [[SELECT2]]
    ; GCN-NEXT: [[IS_FPCLASS:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[SELECT]](f32), 608
    ; GCN-NEXT: [[SELECT4:%[0-9]+]]:_(f32) = G_SELECT [[IS_FPCLASS]](i1), [[SELECT]], [[SELECT3]]
    ; GCN-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[C]](f32), [[UV1]]
    ; GCN-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[C1]]
    ; GCN-NEXT: [[SELECT5:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[FMUL2]], [[UV1]]
    ; GCN-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[SELECT5]](f32)
    ; GCN-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[INT1]](f32)
    ; GCN-NEXT: [[ADD2:%[0-9]+]]:_(i32) = G_ADD [[BITCAST4]], [[C2]]
    ; GCN-NEXT: [[BITCAST5:%[0-9]+]]:_(f32) = G_BITCAST [[ADD2]](i32)
    ; GCN-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST5]]
    ; GCN-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT1]], [[SELECT5]]
    ; GCN-NEXT: [[ADD3:%[0-9]+]]:_(i32) = G_ADD [[BITCAST4]], [[C3]]
    ; GCN-NEXT: [[BITCAST6:%[0-9]+]]:_(f32) = G_BITCAST [[ADD3]](i32)
    ; GCN-NEXT: [[FNEG3:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST6]]
    ; GCN-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FNEG3]], [[INT1]], [[SELECT5]]
    ; GCN-NEXT: [[FCMP4:%[0-9]+]]:_(i1) = G_FCMP floatpred(ole), [[FMA2]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT6:%[0-9]+]]:_(f32) = G_SELECT [[FCMP4]](i1), [[BITCAST5]], [[INT1]]
    ; GCN-NEXT: [[FCMP5:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FMA3]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT7:%[0-9]+]]:_(f32) = G_SELECT [[FCMP5]](i1), [[BITCAST6]], [[SELECT6]]
    ; GCN-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[SELECT7]], [[C5]]
    ; GCN-NEXT: [[SELECT8:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[FMUL3]], [[SELECT7]]
    ; GCN-NEXT: [[IS_FPCLASS1:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[SELECT5]](f32), 608
    ; GCN-NEXT: [[SELECT9:%[0-9]+]]:_(f32) = G_SELECT [[IS_FPCLASS1]](i1), [[SELECT5]], [[SELECT8]]
    ; GCN-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[SELECT4]](f32), [[SELECT9]](f32)
    ; GCN-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GCN-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST7]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %2:_(<2 x f32>) = G_FSQRT %1
    %3:_(<2 x i32>) = G_BITCAST %2(<2 x f32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_fsqrt_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; GCN-LABEL: name: test_fsqrt_v3s32
    ; GCN: liveins: $vgpr0_vgpr1_vgpr2
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GCN-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GCN-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x39F0000000000000
    ; GCN-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[C]](f32), [[UV]]
    ; GCN-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41F0000000000000
    ; GCN-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[C1]]
    ; GCN-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[FMUL]], [[UV]]
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[SELECT]](f32)
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; GCN-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; GCN-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[BITCAST1]], [[C2]]
    ; GCN-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[ADD]](i32)
    ; GCN-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; GCN-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT]], [[SELECT]]
    ; GCN-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GCN-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[BITCAST1]], [[C3]]
    ; GCN-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[ADD1]](i32)
    ; GCN-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST3]]
    ; GCN-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT]], [[SELECT]]
    ; GCN-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GCN-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ole), [[FMA]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[BITCAST2]], [[INT]]
    ; GCN-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FMA1]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[BITCAST3]], [[SELECT1]]
    ; GCN-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3EF0000000000000
    ; GCN-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[SELECT2]], [[C5]]
    ; GCN-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[FMUL1]], [[SELECT2]]
    ; GCN-NEXT: [[IS_FPCLASS:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[SELECT]](f32), 608
    ; GCN-NEXT: [[SELECT4:%[0-9]+]]:_(f32) = G_SELECT [[IS_FPCLASS]](i1), [[SELECT]], [[SELECT3]]
    ; GCN-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[C]](f32), [[UV1]]
    ; GCN-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[C1]]
    ; GCN-NEXT: [[SELECT5:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[FMUL2]], [[UV1]]
    ; GCN-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[SELECT5]](f32)
    ; GCN-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[INT1]](f32)
    ; GCN-NEXT: [[ADD2:%[0-9]+]]:_(i32) = G_ADD [[BITCAST4]], [[C2]]
    ; GCN-NEXT: [[BITCAST5:%[0-9]+]]:_(f32) = G_BITCAST [[ADD2]](i32)
    ; GCN-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST5]]
    ; GCN-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT1]], [[SELECT5]]
    ; GCN-NEXT: [[ADD3:%[0-9]+]]:_(i32) = G_ADD [[BITCAST4]], [[C3]]
    ; GCN-NEXT: [[BITCAST6:%[0-9]+]]:_(f32) = G_BITCAST [[ADD3]](i32)
    ; GCN-NEXT: [[FNEG3:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST6]]
    ; GCN-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FNEG3]], [[INT1]], [[SELECT5]]
    ; GCN-NEXT: [[FCMP4:%[0-9]+]]:_(i1) = G_FCMP floatpred(ole), [[FMA2]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT6:%[0-9]+]]:_(f32) = G_SELECT [[FCMP4]](i1), [[BITCAST5]], [[INT1]]
    ; GCN-NEXT: [[FCMP5:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FMA3]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT7:%[0-9]+]]:_(f32) = G_SELECT [[FCMP5]](i1), [[BITCAST6]], [[SELECT6]]
    ; GCN-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[SELECT7]], [[C5]]
    ; GCN-NEXT: [[SELECT8:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[FMUL3]], [[SELECT7]]
    ; GCN-NEXT: [[IS_FPCLASS1:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[SELECT5]](f32), 608
    ; GCN-NEXT: [[SELECT9:%[0-9]+]]:_(f32) = G_SELECT [[IS_FPCLASS1]](i1), [[SELECT5]], [[SELECT8]]
    ; GCN-NEXT: [[FCMP6:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[C]](f32), [[UV2]]
    ; GCN-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[C1]]
    ; GCN-NEXT: [[SELECT10:%[0-9]+]]:_(f32) = G_SELECT [[FCMP6]](i1), [[FMUL4]], [[UV2]]
    ; GCN-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[SELECT10]](f32)
    ; GCN-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[INT2]](f32)
    ; GCN-NEXT: [[ADD4:%[0-9]+]]:_(i32) = G_ADD [[BITCAST7]], [[C2]]
    ; GCN-NEXT: [[BITCAST8:%[0-9]+]]:_(f32) = G_BITCAST [[ADD4]](i32)
    ; GCN-NEXT: [[FNEG4:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST8]]
    ; GCN-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG4]], [[INT2]], [[SELECT10]]
    ; GCN-NEXT: [[ADD5:%[0-9]+]]:_(i32) = G_ADD [[BITCAST7]], [[C3]]
    ; GCN-NEXT: [[BITCAST9:%[0-9]+]]:_(f32) = G_BITCAST [[ADD5]](i32)
    ; GCN-NEXT: [[FNEG5:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST9]]
    ; GCN-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG5]], [[INT2]], [[SELECT10]]
    ; GCN-NEXT: [[FCMP7:%[0-9]+]]:_(i1) = G_FCMP floatpred(ole), [[FMA4]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT11:%[0-9]+]]:_(f32) = G_SELECT [[FCMP7]](i1), [[BITCAST8]], [[INT2]]
    ; GCN-NEXT: [[FCMP8:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[FMA5]](f32), [[C4]]
    ; GCN-NEXT: [[SELECT12:%[0-9]+]]:_(f32) = G_SELECT [[FCMP8]](i1), [[BITCAST9]], [[SELECT11]]
    ; GCN-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[SELECT12]], [[C5]]
    ; GCN-NEXT: [[SELECT13:%[0-9]+]]:_(f32) = G_SELECT [[FCMP6]](i1), [[FMUL5]], [[SELECT12]]
    ; GCN-NEXT: [[IS_FPCLASS2:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[SELECT10]](f32), 608
    ; GCN-NEXT: [[SELECT14:%[0-9]+]]:_(f32) = G_SELECT [[IS_FPCLASS2]](i1), [[SELECT10]], [[SELECT13]]
    ; GCN-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[SELECT4]](f32), [[SELECT9]](f32), [[SELECT14]](f32)
    ; GCN-NEXT: [[BITCAST10:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GCN-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST10]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %2:_(<3 x f32>) = G_FSQRT %1
    %3:_(<3 x i32>) = G_BITCAST %2(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<3 x i32>)
...

---
name: test_fsqrt_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; GCN-LABEL: name: test_fsqrt_v2s64
    ; GCN: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GCN-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GCN-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 0x1000000000000000
    ; GCN-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GCN-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f64), [[C]]
    ; GCN-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 256
    ; GCN-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C2]], [[C1]]
    ; GCN-NEXT: [[FLDEXP:%[0-9]+]]:_(f64) = G_FLDEXP [[UV]], [[SELECT]](i32)
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[FLDEXP]](f64)
    ; GCN-NEXT: [[C3:%[0-9]+]]:_(f64) = G_FCONSTANT double 5.000000e-01
    ; GCN-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT]], [[C3]]
    ; GCN-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[FLDEXP]], [[INT]]
    ; GCN-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[FMUL]]
    ; GCN-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL1]], [[C3]]
    ; GCN-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMUL1]], [[FMA]], [[FMUL1]]
    ; GCN-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FMUL]], [[FMA]], [[FMUL]]
    ; GCN-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[FMA1]]
    ; GCN-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA1]], [[FLDEXP]]
    ; GCN-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FMA3]], [[FMA2]], [[FMA1]]
    ; GCN-NEXT: [[FNEG2:%[0-9]+]]:_(f64) = G_FNEG [[FMA4]]
    ; GCN-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG2]], [[FMA4]], [[FLDEXP]]
    ; GCN-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[FMA5]], [[FMA2]], [[FMA4]]
    ; GCN-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 -128
    ; GCN-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[FCMP]](i1), [[C4]], [[C1]]
    ; GCN-NEXT: [[FLDEXP1:%[0-9]+]]:_(f64) = G_FLDEXP [[FMA6]], [[SELECT1]](i32)
    ; GCN-NEXT: [[IS_FPCLASS:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[FLDEXP]](f64), 608
    ; GCN-NEXT: [[SELECT2:%[0-9]+]]:_(f64) = G_SELECT [[IS_FPCLASS]](i1), [[FLDEXP]], [[FLDEXP1]]
    ; GCN-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f64), [[C]]
    ; GCN-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[FCMP1]](i1), [[C2]], [[C1]]
    ; GCN-NEXT: [[FLDEXP2:%[0-9]+]]:_(f64) = G_FLDEXP [[UV1]], [[SELECT3]](i32)
    ; GCN-NEXT: [[INT1:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[FLDEXP2]](f64)
    ; GCN-NEXT: [[FMUL2:%[0-9]+]]:_(f64) = G_FMUL [[INT1]], [[C3]]
    ; GCN-NEXT: [[FMUL3:%[0-9]+]]:_(f64) = G_FMUL [[FLDEXP2]], [[INT1]]
    ; GCN-NEXT: [[FNEG3:%[0-9]+]]:_(f64) = G_FNEG [[FMUL2]]
    ; GCN-NEXT: [[FMA7:%[0-9]+]]:_(f64) = G_FMA [[FNEG3]], [[FMUL3]], [[C3]]
    ; GCN-NEXT: [[FMA8:%[0-9]+]]:_(f64) = G_FMA [[FMUL3]], [[FMA7]], [[FMUL3]]
    ; GCN-NEXT: [[FMA9:%[0-9]+]]:_(f64) = G_FMA [[FMUL2]], [[FMA7]], [[FMUL2]]
    ; GCN-NEXT: [[FNEG4:%[0-9]+]]:_(f64) = G_FNEG [[FMA8]]
    ; GCN-NEXT: [[FMA10:%[0-9]+]]:_(f64) = G_FMA [[FNEG4]], [[FMA8]], [[FLDEXP2]]
    ; GCN-NEXT: [[FMA11:%[0-9]+]]:_(f64) = G_FMA [[FMA10]], [[FMA9]], [[FMA8]]
    ; GCN-NEXT: [[FNEG5:%[0-9]+]]:_(f64) = G_FNEG [[FMA11]]
    ; GCN-NEXT: [[FMA12:%[0-9]+]]:_(f64) = G_FMA [[FNEG5]], [[FMA11]], [[FLDEXP2]]
    ; GCN-NEXT: [[FMA13:%[0-9]+]]:_(f64) = G_FMA [[FMA12]], [[FMA9]], [[FMA11]]
    ; GCN-NEXT: [[SELECT4:%[0-9]+]]:_(i32) = G_SELECT [[FCMP1]](i1), [[C4]], [[C1]]
    ; GCN-NEXT: [[FLDEXP3:%[0-9]+]]:_(f64) = G_FLDEXP [[FMA13]], [[SELECT4]](i32)
    ; GCN-NEXT: [[IS_FPCLASS1:%[0-9]+]]:_(i1) = G_IS_FPCLASS [[FLDEXP2]](f64), 608
    ; GCN-NEXT: [[SELECT5:%[0-9]+]]:_(f64) = G_SELECT [[IS_FPCLASS1]](i1), [[FLDEXP2]], [[FLDEXP3]]
    ; GCN-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[SELECT2]](f64), [[SELECT5]](f64)
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GCN-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST1]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x f64>) = G_BITCAST %0(<2 x i64>)
    %2:_(<2 x f64>) = G_FSQRT %1
    %3:_(<2 x i64>) = G_BITCAST %2(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3(<2 x i64>)
...

---
name: test_fsqrt_v2s16
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fsqrt_v2s16
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %12(i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %13(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT1]](f32)
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT1]](f32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST5]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST6]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST7]](<2 x f16>)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST8]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fsqrt_v2s16
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %8(i16)
    ; VI-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %9(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[FSQRT1:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST2]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT]](f16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST5]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST6]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST7]](<2 x f16>)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST8]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fsqrt_v2s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %8(i16)
    ; GFX9-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %9(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[FSQRT1:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST2]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FSQRT]](f16), [[FSQRT1]](f16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST5]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %2:_(<2 x f16>) = G_FSQRT %1
    %3:_(<2 x i16>) = G_BITCAST %2(<2 x f16>)
    $vgpr0 = COPY %3(<2 x i16>)
...

---
name: test_fsqrt_v3s16
body: |
  bb.0:

    ; SI-LABEL: name: test_fsqrt_v3s16
    ; SI: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT1]](f32)
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT1]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT2]](f32)
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT2]](f32)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST7]](i16)
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST8]](i16)
    ; SI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST9]](i16)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; SI-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_fsqrt_v3s16
    ; VI: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST]]
    ; VI-NEXT: [[FSQRT1:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST2]]
    ; VI-NEXT: [[FSQRT2:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST1]]
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT]](f16)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT1]](f16)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT2]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST7]](i16)
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST8]](i16)
    ; VI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST9]](i16)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; VI-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_fsqrt_v3s16
    ; GFX9: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST]]
    ; GFX9-NEXT: [[FSQRT1:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST2]]
    ; GFX9-NEXT: [[FSQRT2:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT]](f16)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT1]](f16)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT2]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST7]](i16)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST8]](i16)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST9]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    %0:_(<3 x f16>) = G_IMPLICIT_DEF
    %1:_(<3 x f16>) = G_FSQRT %0
    %2:_(<3 x i16>) = G_BITCAST %1(<3 x f16>)
    %3:_(<3 x i32>) = G_ANYEXT %2(<3 x i16>)
    S_NOP 0, implicit %3(<3 x i32>)
...

---
name: test_fsqrt_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_fsqrt_v4s16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %31(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT1]](f32)
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT1]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT2]](f32)
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT2]](f32)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[INT3:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[FPEXT3]](f32)
    ; SI-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT3]](f32)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST9]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST13]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST11]](<2 x f16>), [[BITCAST14]](<2 x f16>)
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST15]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_fsqrt_v4s16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %16(i16)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %22(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %17(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %23(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST1]]
    ; VI-NEXT: [[FSQRT1:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST3]]
    ; VI-NEXT: [[FSQRT2:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST2]]
    ; VI-NEXT: [[FSQRT3:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST4]]
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT]](f16)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST9]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT2]](f16)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FSQRT3]](f16)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST13]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST11]](<2 x f16>), [[BITCAST14]](<2 x f16>)
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST15]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_fsqrt_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %16(i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %22(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %17(i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %23(i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[FSQRT:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST1]]
    ; GFX9-NEXT: [[FSQRT1:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST3]]
    ; GFX9-NEXT: [[FSQRT2:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST2]]
    ; GFX9-NEXT: [[FSQRT3:%[0-9]+]]:_(f16) = G_FSQRT [[BITCAST4]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FSQRT]](f16), [[FSQRT1]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FSQRT2]](f16), [[FSQRT3]](f16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST9]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %2:_(<4 x f16>) = G_FSQRT %1
    %3:_(<4 x i16>) = G_BITCAST %2(<4 x f16>)
    $vgpr0_vgpr1 = COPY %3(<4 x i16>)
...
