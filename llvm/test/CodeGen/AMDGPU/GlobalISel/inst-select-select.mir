# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=tahiti -run-pass=instruction-select -verify-machineinstrs -global-isel %s -o - | FileCheck %s -check-prefixes=GCN

---
name:            select_s32_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2, $sgpr3

    ; GCN-LABEL: name: select_s32_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY $sgpr3
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B32_:%[0-9]+]]:sreg_32 = S_CSELECT_B32 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B32_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:sgpr(i32) = COPY $sgpr3
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(i32) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(i32)

...

---
name:            select_s64_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5

    ; GCN-LABEL: name: select_s64_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY $sgpr2_sgpr3
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_64 = COPY $sgpr4_sgpr5
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B64_:%[0-9]+]]:sreg_64 = S_CSELECT_B64 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B64_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i64) = COPY $sgpr2_sgpr3
    %3:sgpr(i64) = COPY $sgpr4_sgpr5
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(i64) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(i64)

...

---
name:            select_p0_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5

    ; GCN-LABEL: name: select_p0_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY $sgpr2_sgpr3
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_64 = COPY $sgpr4_sgpr5
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B64_:%[0-9]+]]:sreg_64 = S_CSELECT_B64 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B64_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(p0) = COPY $sgpr2_sgpr3
    %3:sgpr(p0) = COPY $sgpr4_sgpr5
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(p0) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(p0)

...

---
name:            select_p1_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5

    ; GCN-LABEL: name: select_p1_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY $sgpr2_sgpr3
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_64 = COPY $sgpr4_sgpr5
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B64_:%[0-9]+]]:sreg_64 = S_CSELECT_B64 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B64_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(p1) = COPY $sgpr2_sgpr3
    %3:sgpr(p1) = COPY $sgpr4_sgpr5
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(p1) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(p1)

...

---
name:            select_p999_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5

    ; GCN-LABEL: name: select_p999_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY $sgpr2_sgpr3
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_64 = COPY $sgpr4_sgpr5
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B64_:%[0-9]+]]:sreg_64 = S_CSELECT_B64 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B64_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(p999) = COPY $sgpr2_sgpr3
    %3:sgpr(p999) = COPY $sgpr4_sgpr5
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(p999) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(p999)

...

---
name:            select_v4s16_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5

    ; GCN-LABEL: name: select_v4s16_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2_sgpr3, $sgpr4_sgpr5
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY $sgpr2_sgpr3
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_64 = COPY $sgpr4_sgpr5
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B64_:%[0-9]+]]:sreg_64 = S_CSELECT_B64 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B64_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(<4 x i16>) = COPY $sgpr2_sgpr3
    %3:sgpr(<4 x i16>) = COPY $sgpr4_sgpr5
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(<4 x i16>) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(<4 x i16>)

...

---
name:            select_s16_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2, $sgpr3

    ; GCN-LABEL: name: select_s16_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY $sgpr3
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY2]], [[COPY3]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B32_:%[0-9]+]]:sreg_32 = S_CSELECT_B32 [[COPY]], [[COPY1]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B32_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:sgpr(i32) = COPY $sgpr3
    %4:sgpr(i16) = G_TRUNC %0(i32)
    %5:sgpr(i16) = G_TRUNC %1(i32)
    %6:sgpr(i32) = G_ICMP intpred(eq), %2(i32), %3
    %7:sgpr(i16) = G_SELECT %6(i32), %4, %5
    S_ENDPGM 0, implicit %7(i16)

...

---
name:            select_v2s16_scc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2, $sgpr3

    ; GCN-LABEL: name: select_v2s16_scc
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY $sgpr3
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B32_:%[0-9]+]]:sreg_32 = S_CSELECT_B32 [[COPY2]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B32_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(<2 x i16>) = COPY $sgpr2
    %3:sgpr(<2 x i16>) = COPY $sgpr3
    %4:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %5:sgpr(<2 x i16>) = G_SELECT %4(i32), %2, %3
    S_ENDPGM 0, implicit %5(<2 x i16>)

...

---
name:            select_s32_vcc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_s32_vcc
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY3]], 0, [[COPY2]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %5:vgpr(i32) = G_SELECT %4(i1), %2, %3
    S_ENDPGM 0, implicit %5(i32)

...

---
name:            select_s16_vcc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_s16_vcc
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY2]], [[COPY3]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY1]], 0, [[COPY]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(i16) = G_TRUNC %0(i32)
    %5:vgpr(i16) = G_TRUNC %1(i32)
    %6:vcc(i1) = G_ICMP intpred(eq), %2(i32), %3
    %7:vgpr(i16) = G_SELECT %6(i1), %4, %5
    S_ENDPGM 0, implicit %7(i16)

...

---
name:            select_v2s16_vcc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_v2s16_vcc
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY3]], 0, [[COPY2]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(<2 x i16>) = COPY $vgpr2
    %3:vgpr(<2 x i16>) = COPY $vgpr3
    %4:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %5:vgpr(<2 x i16>) = G_SELECT %4(i1), %2, %3
    S_ENDPGM 0, implicit %5(<2 x i16>)

...

---
name:            select_p3_vcc
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_p3_vcc
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY3]], 0, [[COPY2]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(p3) = COPY $vgpr2
    %3:vgpr(p3) = COPY $vgpr3
    %4:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %5:vgpr(p3) = G_SELECT %4(i1), %2, %3
    S_ENDPGM 0, implicit %5(p3)

...

# Fold source modifiers into VOP select
---
name:            select_s32_vcc_fneg_lhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_s32_vcc_fneg_lhs
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GCN-NEXT: [[V_XOR_B32_e64_:%[0-9]+]]:vgpr_32 = V_XOR_B32_e64 [[S_MOV_B32_]], [[COPY2]], implicit $exec
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY3]], 0, [[V_XOR_B32_e64_]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(f32) = G_BITCAST %2(i32)
    %5:vgpr(f32) = G_FNEG %4
    %6:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %7:vgpr(i32) = G_BITCAST %5(f32)
    %8:vgpr(i32) = G_SELECT %6(i1), %7, %3
    S_ENDPGM 0, implicit %8(i32)

...

---
name:            select_s32_vcc_fneg_rhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_s32_vcc_fneg_rhs
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GCN-NEXT: [[V_XOR_B32_e64_:%[0-9]+]]:vgpr_32 = V_XOR_B32_e64 [[S_MOV_B32_]], [[COPY3]], implicit $exec
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[V_XOR_B32_e64_]], 0, [[COPY2]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(f32) = G_BITCAST %3(i32)
    %5:vgpr(f32) = G_FNEG %4
    %6:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %7:vgpr(i32) = G_BITCAST %5(f32)
    %8:vgpr(i32) = G_SELECT %6(i1), %2, %7
    S_ENDPGM 0, implicit %8(i32)

...

---
name:            select_s32_vcc_fneg_fabs_lhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_s32_vcc_fneg_fabs_lhs
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GCN-NEXT: [[V_OR_B32_e64_:%[0-9]+]]:vgpr_32 = V_OR_B32_e64 [[S_MOV_B32_]], [[COPY3]], implicit $exec
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY2]], 0, [[V_OR_B32_e64_]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(f32) = G_BITCAST %3(i32)
    %5:vgpr(f32) = G_FABS %4
    %6:vgpr(f32) = G_FNEG %5
    %7:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %8:vgpr(i32) = G_BITCAST %6(f32)
    %9:vgpr(i32) = G_SELECT %7(i1), %8, %2
    S_ENDPGM 0, implicit %9(i32)

...

# Make sure we don't try to fold source modifiers into non-32 bit value.
---
name:            select_s16_vcc_fneg_lhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_s16_vcc_fneg_lhs
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 32768
    ; GCN-NEXT: [[V_XOR_B32_e64_:%[0-9]+]]:vgpr_32 = V_XOR_B32_e64 [[S_MOV_B32_]], [[COPY]], implicit $exec
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY2]], [[COPY3]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY1]], 0, [[V_XOR_B32_e64_]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(i32) = COPY $vgpr2
    %3:vgpr(i32) = COPY $vgpr3
    %4:vgpr(i16) = G_TRUNC %0(i32)
    %5:vgpr(i16) = G_TRUNC %1(i32)
    %6:vgpr(f16) = G_BITCAST %4(i16)
    %7:vgpr(f16) = G_FNEG %6
    %8:vcc(i1) = G_ICMP intpred(eq), %2(i32), %3
    %9:vgpr(i16) = G_BITCAST %7(f16)
    %10:vgpr(i16) = G_SELECT %8(i1), %9, %5
    S_ENDPGM 0, implicit %10(i16)

...


# Make sure we don't try to fold source modifiers into a vector
---
name:            select_v2s16_vcc_fneg_lhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; GCN-LABEL: name: select_v2s16_vcc_fneg_lhs
    ; GCN: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:vgpr_32 = COPY $vgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:vgpr_32 = COPY $vgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:vgpr_32 = COPY $vgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147516416
    ; GCN-NEXT: [[V_XOR_B32_e64_:%[0-9]+]]:vgpr_32 = V_XOR_B32_e64 [[S_MOV_B32_]], [[COPY2]], implicit $exec
    ; GCN-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 [[COPY]], [[COPY1]], implicit $exec
    ; GCN-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, [[COPY2]], 0, [[V_XOR_B32_e64_]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; GCN-NEXT: S_ENDPGM 0, implicit [[V_CNDMASK_B32_e64_]]
    %0:vgpr(i32) = COPY $vgpr0
    %1:vgpr(i32) = COPY $vgpr1
    %2:vgpr(<2 x i16>) = COPY $vgpr2
    %3:vgpr(<2 x i16>) = COPY $vgpr3
    %4:vgpr(<2 x f16>) = G_BITCAST %3(<2 x i16>)
    %5:vgpr(<2 x f16>) = G_FNEG %4
    %6:vcc(i1) = G_ICMP intpred(eq), %0(i32), %1
    %7:vgpr(<2 x i16>) = G_BITCAST %5(<2 x f16>)
    %8:vgpr(<2 x i16>) = G_SELECT %6(i1), %7, %3
    S_ENDPGM 0, implicit %8(<2 x i16>)

...

# Make sure we don't try to fold source modifiers into a scalar select

---
name:            select_s32_scc_fneg_lhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2, $sgpr3

    ; GCN-LABEL: name: select_s32_scc_fneg_lhs
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY $sgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GCN-NEXT: [[S_XOR_B32_:%[0-9]+]]:sreg_32 = S_XOR_B32 [[COPY2]], [[S_MOV_B32_]], implicit-def dead $scc
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B32_:%[0-9]+]]:sreg_32 = S_CSELECT_B32 [[S_XOR_B32_]], [[COPY3]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B32_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:sgpr(i32) = COPY $sgpr3
    %4:sgpr(f32) = G_BITCAST %2(i32)
    %5:sgpr(f32) = G_FNEG %4
    %6:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %7:sgpr(i32) = G_BITCAST %5(f32)
    %8:sgpr(i32) = G_SELECT %6(i32), %7, %3
    S_ENDPGM 0, implicit %8(i32)

...

---
name:            select_s32_scc_fneg_rhs
legalized:       true
regBankSelected: true

body: |
  bb.0:
    liveins:  $sgpr0, $sgpr1, $sgpr2, $sgpr3

    ; GCN-LABEL: name: select_s32_scc_fneg_rhs
    ; GCN: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:sreg_32 = COPY $sgpr0
    ; GCN-NEXT: [[COPY1:%[0-9]+]]:sreg_32 = COPY $sgpr1
    ; GCN-NEXT: [[COPY2:%[0-9]+]]:sreg_32 = COPY $sgpr2
    ; GCN-NEXT: [[COPY3:%[0-9]+]]:sreg_32 = COPY $sgpr3
    ; GCN-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GCN-NEXT: [[S_XOR_B32_:%[0-9]+]]:sreg_32 = S_XOR_B32 [[COPY3]], [[S_MOV_B32_]], implicit-def dead $scc
    ; GCN-NEXT: S_CMP_EQ_U32 [[COPY]], [[COPY1]], implicit-def $scc
    ; GCN-NEXT: [[COPY4:%[0-9]+]]:sreg_32 = COPY $scc
    ; GCN-NEXT: $scc = COPY [[COPY4]]
    ; GCN-NEXT: [[S_CSELECT_B32_:%[0-9]+]]:sreg_32 = S_CSELECT_B32 [[COPY2]], [[S_XOR_B32_]], implicit $scc
    ; GCN-NEXT: S_ENDPGM 0, implicit [[S_CSELECT_B32_]]
    %0:sgpr(i32) = COPY $sgpr0
    %1:sgpr(i32) = COPY $sgpr1
    %2:sgpr(i32) = COPY $sgpr2
    %3:sgpr(i32) = COPY $sgpr3
    %4:sgpr(f32) = G_BITCAST %3(i32)
    %5:sgpr(f32) = G_FNEG %4
    %6:sgpr(i32) = G_ICMP intpred(eq), %0(i32), %1
    %7:sgpr(i32) = G_BITCAST %5(f32)
    %8:sgpr(i32) = G_SELECT %6(i32), %2, %7
    S_ENDPGM 0, implicit %8(i32)

...
