# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer -global-isel-abort=0 %s -o - | FileCheck %s

---
name: test_bitcast_s32_to_v2s16
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_s32_to_v2s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $vgpr0
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[COPY]](s32)
    ; CHECK: $vgpr0 = COPY [[BITCAST]](<2 x s16>)
    %0:_(s32) = COPY $vgpr0
    %1:_(<2 x s16>) = G_BITCAST %0
    $vgpr0 = COPY %1
...

---
name: test_bitcast_v2s16_to_s32
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_v2s16_to_s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s16>) = COPY $vgpr0
    ; CHECK: [[BITCAST:%[0-9]+]]:_(s32) = G_BITCAST [[COPY]](<2 x s16>)
    ; CHECK: $vgpr0 = COPY [[BITCAST]](s32)
    %0:_(<2 x s16>) = COPY $vgpr0
    %1:_(s32) = G_BITCAST %0
    $vgpr0 = COPY %1
...

---
name: test_bitcast_v2s32_to_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(s64) = G_BITCAST [[COPY]](<2 x s32>)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](s64)
    %0:_(<2 x s32>) = COPY $vgpr0_vgpr1
    %1:_(s64) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_s64_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s64_to_v2s32
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s32>) = G_BITCAST [[COPY]](s64)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x s32>)
    %0:_(s64) = COPY $vgpr0_vgpr1
    %1:_(<2 x s32>) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_v2s64_to_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v2s64_to_v4s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<4 x s32>) = G_BITCAST [[COPY]](<2 x s64>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<4 x s32>)
    %0:_(<2 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x s32>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1
...

---
name: test_bitcast_v4s32_to_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v4s32_to_v2s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s64>) = G_BITCAST [[COPY]](<4 x s32>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x s64>)
    %0:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x s64>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1
...

---
name: test_bitcast_v4s16_to_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v4s16_to_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s16>) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(s64) = G_BITCAST [[COPY]](<4 x s16>)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](s64)
    %0:_(<4 x s16>) = COPY $vgpr0_vgpr1
    %1:_(s64) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_s64_to_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s64_to_v4s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<4 x s16>) = G_BITCAST [[COPY]](s64)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](<4 x s16>)
    %0:_(s64) = COPY $vgpr0_vgpr1
    %1:_(<4 x s16>) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_v2s64_to_v8s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v2s64_to_v8s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<8 x s16>) = G_BITCAST [[COPY]](<2 x s64>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x s16>)
    %0:_(<2 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<8 x s16>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1
...

---
name: test_bitcast_v8s16_to_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s16_to_v2s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s64>) = G_BITCAST [[COPY]](<8 x s16>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x s64>)
    %0:_(<8 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x s64>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1
...

---
name: test_bitcast_p0_to_p1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p0_to_p1
    ; CHECK: [[COPY:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(p1) = G_BITCAST [[COPY]](p0)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](p1)
    %0:_(p0) = COPY $vgpr0_vgpr1
    %1:_(p1) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_p1_to_p0
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p1_to_p0
    ; CHECK: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(p0) = G_BITCAST [[COPY]](p1)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](p0)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p0) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_p999_to_p0
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p999_to_p0
    ; CHECK: [[COPY:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(p0) = G_BITCAST [[COPY]](p999)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](p0)
    %0:_(p999) = COPY $vgpr0_vgpr1
    %1:_(p0) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_p123_to_p999
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p123_to_p999
    ; CHECK: [[COPY:%[0-9]+]]:_(p123) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(p999) = G_BITCAST [[COPY]](p123)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BITCAST]](p999)
    %0:_(p123) = COPY $vgpr0_vgpr1
    %1:_(p999) = G_BITCAST %0
    $vgpr0_vgpr1 = COPY %1
...

---
name: test_bitcast_v4s64_to_v8s32
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v4s64_to_v8s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<8 x s32>) = G_BITCAST [[COPY]](<4 x s64>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<8 x s32>)
    %0:_(<4 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x s32>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1
...

---
name: test_bitcast_v8s32_to_v4s64
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v8s32_to_v4s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<4 x s64>) = G_BITCAST [[COPY]](<8 x s32>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x s64>)
    %0:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<4 x s64>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1
...

---
name: test_bitcast_v8s64_to_v16s32
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v8s64_to_v16s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<16 x s32>) = G_BITCAST [[COPY]](<8 x s64>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[BITCAST]](<16 x s32>)
    %0:_(<8 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x s32>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY %1
...

---
name: test_bitcast_v16s32_to_v8s64
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s32_to_v8s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<8 x s64>) = G_BITCAST [[COPY]](<16 x s32>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[BITCAST]](<8 x s64>)
    %0:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<8 x s64>) = G_BITCAST %0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY %1
...

---
name: test_bitcast_v32s32_to_v16s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31

    ; CHECK-LABEL: name: test_bitcast_v32s32_to_v16s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<32 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<16 x s64>) = G_BITCAST [[COPY]](<32 x s32>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<16 x s64>)
    %0:_(<32 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    %1:_(<16 x s64>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v16s64_to_v32s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31

    ; CHECK-LABEL: name: test_bitcast_v16s64_to_v32s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<32 x s32>) = G_BITCAST [[COPY]](<16 x s64>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<32 x s32>)
    %0:_(<16 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    %1:_(<32 x s32>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_s24_to_v3s8
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_s24_to_v3s8
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $vgpr0
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C1]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C2]](s32)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LSHR]](s32)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[LSHR1]](s32)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; CHECK: [[COPY5:%[0-9]+]]:_(s32) = COPY [[COPY2]](s32)
    ; CHECK: [[COPY6:%[0-9]+]]:_(s32) = COPY [[COPY3]](s32)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x s32>) = G_BUILD_VECTOR [[COPY4]](s32), [[COPY5]](s32), [[COPY6]](s32)
    ; CHECK: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x s32>)
    %0:_(s32) = COPY $vgpr0
    %1:_(s24) = G_TRUNC %0
    %2:_(<3 x s8>) = G_BITCAST %1
    %3:_(<3 x s32>) = G_ANYEXT %2
    $vgpr0_vgpr1_vgpr2 = COPY %3
...

---
name: test_bitcast_s48_to_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s48_to_v3s16
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $vgpr0_vgpr1
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](s64)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[UV]], [[C]](s32)
    ; CHECK: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[UV1]], [[C]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[UV]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C1]]
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LSHR]](s32)
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C1]]
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[AND1]], [[C]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[AND]], [[SHL]]
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[OR]](s32)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[UV1]](s32)
    ; CHECK: [[AND2:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C1]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[C2]], [[C]](s32)
    ; CHECK: [[OR1:%[0-9]+]]:_(s32) = G_OR [[AND2]], [[SHL1]]
    ; CHECK: [[BITCAST1:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[OR1]](s32)
    ; CHECK: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x s16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x s16>), [[BITCAST1]](<2 x s16>)
    ; CHECK: [[EXTRACT:%[0-9]+]]:_(<3 x s16>) = G_EXTRACT [[CONCAT_VECTORS]](<4 x s16>), 0
    ; CHECK: [[DEF:%[0-9]+]]:_(<4 x s16>) = G_IMPLICIT_DEF
    ; CHECK: [[INSERT:%[0-9]+]]:_(<4 x s16>) = G_INSERT [[DEF]], [[EXTRACT]](<3 x s16>), 0
    ; CHECK: [[UV2:%[0-9]+]]:_(<2 x s16>), [[UV3:%[0-9]+]]:_(<2 x s16>) = G_UNMERGE_VALUES [[INSERT]](<4 x s16>)
    ; CHECK: [[BITCAST2:%[0-9]+]]:_(s32) = G_BITCAST [[UV2]](<2 x s16>)
    ; CHECK: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST2]], [[C]](s32)
    ; CHECK: [[BITCAST3:%[0-9]+]]:_(s32) = G_BITCAST [[UV3]](<2 x s16>)
    ; CHECK: [[LSHR3:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST3]], [[C]](s32)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[BITCAST2]](s32)
    ; CHECK: [[COPY5:%[0-9]+]]:_(s32) = COPY [[LSHR2]](s32)
    ; CHECK: [[COPY6:%[0-9]+]]:_(s32) = COPY [[BITCAST3]](s32)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x s32>) = G_BUILD_VECTOR [[COPY4]](s32), [[COPY5]](s32), [[COPY6]](s32)
    ; CHECK: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x s32>)
    %0:_(s64) = COPY $vgpr0_vgpr1
    %1:_(s48) = G_TRUNC %0
    %2:_(<3 x s16>) = G_BITCAST %1
    %3:_(<3 x s32>) = G_ANYEXT %2
    $vgpr0_vgpr1_vgpr2 = COPY %3
...

---
name: test_bitcast_v3s8_to_s24
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s8_to_s24
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32), [[UV2:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<3 x s32>)
    ; CHECK: [[DEF:%[0-9]+]]:_(s32) = G_IMPLICIT_DEF
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 255
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[UV]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s16) = G_AND [[TRUNC]], [[C]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[UV1]](s32)
    ; CHECK: [[AND1:%[0-9]+]]:_(s16) = G_AND [[TRUNC1]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 8
    ; CHECK: [[SHL:%[0-9]+]]:_(s16) = G_SHL [[AND1]], [[C1]](s16)
    ; CHECK: [[OR:%[0-9]+]]:_(s16) = G_OR [[AND]], [[SHL]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[UV2]](s32)
    ; CHECK: [[AND2:%[0-9]+]]:_(s16) = G_AND [[TRUNC2]], [[C]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s16) = G_TRUNC [[DEF]](s32)
    ; CHECK: [[AND3:%[0-9]+]]:_(s16) = G_AND [[TRUNC3]], [[C]]
    ; CHECK: [[SHL1:%[0-9]+]]:_(s16) = G_SHL [[AND3]], [[C1]](s16)
    ; CHECK: [[OR1:%[0-9]+]]:_(s16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[OR]](s16)
    ; CHECK: [[ZEXT1:%[0-9]+]]:_(s32) = G_ZEXT [[OR1]](s16)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[SHL2:%[0-9]+]]:_(s32) = G_SHL [[ZEXT1]], [[C2]](s32)
    ; CHECK: [[OR2:%[0-9]+]]:_(s32) = G_OR [[ZEXT]], [[SHL2]]
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[OR2]](s32)
    ; CHECK: $vgpr0 = COPY [[COPY1]](s32)
    %0:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x s8>) = G_TRUNC %0
    %2:_(s24) = G_BITCAST %1
    %3:_(s32) = G_ANYEXT %2
    $vgpr0 = COPY %3
...

---
name: test_bitcast_v3s16_to_s48
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s16_to_s48
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32), [[UV2:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<3 x s32>)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[UV]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[COPY1]], [[C]]
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[UV1]](s32)
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY2]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[AND1]], [[C1]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[AND]], [[SHL]]
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[UV2]](s32)
    ; CHECK: [[AND2:%[0-9]+]]:_(s32) = G_AND [[COPY3]], [[C]]
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[C2]], [[C1]](s32)
    ; CHECK: [[OR1:%[0-9]+]]:_(s32) = G_OR [[AND2]], [[SHL1]]
    ; CHECK: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[OR]](s32), [[OR1]](s32)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s64) = COPY [[MV]](s64)
    ; CHECK: $vgpr0_vgpr1 = COPY [[COPY4]](s64)
    %0:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x s16>) = G_TRUNC %0
    %2:_(s48) = G_BITCAST %1
    %3:_(s64) = G_ANYEXT %2
    $vgpr0_vgpr1 = COPY %3
...

---
name: test_bitcast_s16_to_v2s8
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_s16_to_v2s8
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY $vgpr0
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 8
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C1]](s32)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; CHECK: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[COPY]], [[C2]](s32)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[COPY]](s32)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s32) = COPY [[LSHR]](s32)
    ; CHECK: [[COPY3:%[0-9]+]]:_(s32) = COPY [[COPY1]](s32)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s32) = COPY [[COPY2]](s32)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x s32>) = G_BUILD_VECTOR [[COPY3]](s32), [[COPY4]](s32)
    ; CHECK: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x s32>)
    %0:_(s32) = COPY $vgpr0
    %1:_(s16) = G_TRUNC %0
    %2:_(<2 x s8>) = G_BITCAST %1
    %3:_(<2 x s32>) = G_ANYEXT %2
    $vgpr0_vgpr1 = COPY %3
...

---
name: test_bitcast_v2s8_to_s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s8_to_s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $vgpr0_vgpr1
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<2 x s32>)
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 255
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[UV]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s16) = G_AND [[TRUNC]], [[C]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[UV1]](s32)
    ; CHECK: [[AND1:%[0-9]+]]:_(s16) = G_AND [[TRUNC1]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 8
    ; CHECK: [[SHL:%[0-9]+]]:_(s16) = G_SHL [[AND1]], [[C1]](s16)
    ; CHECK: [[OR:%[0-9]+]]:_(s16) = G_OR [[AND]], [[SHL]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[OR]](s16)
    ; CHECK: $vgpr0 = COPY [[ANYEXT]](s32)
    %0:_(<2 x s32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x s8>) = G_TRUNC %0
    %2:_(s16) = G_BITCAST %1
    %3:_(s32) = G_ANYEXT %2
    $vgpr0 = COPY %3
...

---

name: test_bitcast_v2s16_to_v4s8
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_v2s16_to_v4s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s16>) = COPY $vgpr0
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<4 x s8>) = G_BITCAST [[COPY]](<2 x s16>)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<4 x s8>)
    ; CHECK: [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<4 x s8>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s8)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s8)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s8)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s8)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s8)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s8)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s8)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s8)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s8>) = G_BUILD_VECTOR [[TRUNC]](s8), [[TRUNC1]](s8), [[TRUNC2]](s8), [[TRUNC3]](s8)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(<4 x s32>) = G_ANYEXT [[BUILD_VECTOR]](<4 x s8>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[ANYEXT8]](<4 x s32>)
    %0:_(<2 x s16>) = COPY $vgpr0
    %1:_(<4 x s8>) = G_BITCAST %0
    %2:_(<4 x s8>) = G_ADD %1, %1
    %3:_(<4 x s32>) = G_ANYEXT %2
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3
...

---
name: test_bitcast_v4s8_to_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v4s8_to_v2s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<4 x s8>) = G_TRUNC [[COPY]](<4 x s32>)
    ; CHECK: [[ADD:%[0-9]+]]:_(<4 x s8>) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[ADD]](<4 x s8>)
    ; CHECK: $vgpr0 = COPY [[BITCAST]](<2 x s16>)
    %0:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x s8>) = G_TRUNC %0
    %2:_(<4 x s8>) = G_ADD %1, %1
    %3:_(<2 x s16>) = G_BITCAST %2
    $vgpr0 = COPY %3
...

---
name: test_bitcast_v2s16_to_v8s4
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_v2s16_to_v8s4
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s16>) = COPY $vgpr0
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<8 x s4>) = G_BITCAST [[COPY]](<2 x s16>)
    ; CHECK: [[UV:%[0-9]+]]:_(s4), [[UV1:%[0-9]+]]:_(s4), [[UV2:%[0-9]+]]:_(s4), [[UV3:%[0-9]+]]:_(s4), [[UV4:%[0-9]+]]:_(s4), [[UV5:%[0-9]+]]:_(s4), [[UV6:%[0-9]+]]:_(s4), [[UV7:%[0-9]+]]:_(s4) = G_UNMERGE_VALUES [[BITCAST]](<8 x s4>)
    ; CHECK: [[UV8:%[0-9]+]]:_(s4), [[UV9:%[0-9]+]]:_(s4), [[UV10:%[0-9]+]]:_(s4), [[UV11:%[0-9]+]]:_(s4), [[UV12:%[0-9]+]]:_(s4), [[UV13:%[0-9]+]]:_(s4), [[UV14:%[0-9]+]]:_(s4), [[UV15:%[0-9]+]]:_(s4) = G_UNMERGE_VALUES [[BITCAST]](<8 x s4>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s4)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s4)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s4) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s4)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s4)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s4) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s4)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s4)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s4) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s4)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s4)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s4) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s4)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s4)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s4) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s4)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s4)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s4) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s4)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s4)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s4) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s4)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s4)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s4) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s4>) = G_BUILD_VECTOR [[TRUNC]](s4), [[TRUNC1]](s4), [[TRUNC2]](s4), [[TRUNC3]](s4), [[TRUNC4]](s4), [[TRUNC5]](s4), [[TRUNC6]](s4), [[TRUNC7]](s4)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(<8 x s32>) = G_ANYEXT [[BUILD_VECTOR]](<8 x s4>)
    ; CHECK: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[ANYEXT16]](<8 x s32>)
    %0:_(<2 x s16>) = COPY $vgpr0
    %1:_(<8 x s4>) = G_BITCAST %0
    %2:_(<8 x s4>) = G_ADD %1, %1
    %3:_(<8 x s32>) = G_ANYEXT %2
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3
...

---
name: test_bitcast_v8s4_to_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s4_to_v2s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<8 x s4>) = G_TRUNC [[COPY]](<8 x s32>)
    ; CHECK: [[ADD:%[0-9]+]]:_(<8 x s4>) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[ADD]](<8 x s4>)
    ; CHECK: $vgpr0 = COPY [[BITCAST]](<2 x s16>)
    %0:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x s4>) = G_TRUNC %0
    %2:_(<8 x s4>) = G_ADD %1, %1
    %3:_(<2 x s16>) = G_BITCAST %2
    $vgpr0 = COPY %3
...

---
name: test_bitcast_v4s16_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v4s16_to_v2s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s16>) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s32>) = G_BITCAST [[COPY]](<4 x s16>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<2 x s32>)
    %0:_(<4 x s16>) = COPY $vgpr0_vgpr1
    %1:_(<2 x s32>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v2s32_to_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_v4s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<4 x s16>) = G_BITCAST [[COPY]](<2 x s32>)
    ; CHECK: [[UV:%[0-9]+]]:_(<2 x s16>), [[UV1:%[0-9]+]]:_(<2 x s16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x s16>)
    ; CHECK: [[BITCAST1:%[0-9]+]]:_(s32) = G_BITCAST [[UV]](<2 x s16>)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[BITCAST1]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST1]], [[C]](s32)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[LSHR]](s32)
    ; CHECK: [[BITCAST2:%[0-9]+]]:_(s32) = G_BITCAST [[UV1]](<2 x s16>)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[BITCAST2]](s32)
    ; CHECK: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST2]], [[C]](s32)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s16) = G_TRUNC [[LSHR1]](s32)
    ; CHECK: [[UV2:%[0-9]+]]:_(<2 x s16>), [[UV3:%[0-9]+]]:_(<2 x s16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x s16>)
    ; CHECK: [[BITCAST3:%[0-9]+]]:_(s32) = G_BITCAST [[UV2]](<2 x s16>)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s16) = G_TRUNC [[BITCAST3]](s32)
    ; CHECK: [[LSHR2:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST3]], [[C]](s32)
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s16) = G_TRUNC [[LSHR2]](s32)
    ; CHECK: [[BITCAST4:%[0-9]+]]:_(s32) = G_BITCAST [[UV3]](<2 x s16>)
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s16) = G_TRUNC [[BITCAST4]](s32)
    ; CHECK: [[LSHR3:%[0-9]+]]:_(s32) = G_LSHR [[BITCAST4]], [[C]](s32)
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s16) = G_TRUNC [[LSHR3]](s32)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[TRUNC]], [[TRUNC4]]
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[TRUNC1]], [[TRUNC5]]
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[TRUNC2]], [[TRUNC6]]
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[TRUNC3]], [[TRUNC7]]
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[ADD]](s16)
    ; CHECK: [[ZEXT1:%[0-9]+]]:_(s32) = G_ZEXT [[ADD1]](s16)
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[ZEXT1]], [[C]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[ZEXT]], [[SHL]]
    ; CHECK: [[BITCAST5:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[OR]](s32)
    ; CHECK: [[ZEXT2:%[0-9]+]]:_(s32) = G_ZEXT [[ADD2]](s16)
    ; CHECK: [[ZEXT3:%[0-9]+]]:_(s32) = G_ZEXT [[ADD3]](s16)
    ; CHECK: [[SHL1:%[0-9]+]]:_(s32) = G_SHL [[ZEXT3]], [[C]](s32)
    ; CHECK: [[OR1:%[0-9]+]]:_(s32) = G_OR [[ZEXT2]], [[SHL1]]
    ; CHECK: [[BITCAST6:%[0-9]+]]:_(<2 x s16>) = G_BITCAST [[OR1]](s32)
    ; CHECK: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x s16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x s16>), [[BITCAST6]](<2 x s16>)
    ; CHECK: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<4 x s16>)
    %0:_(<2 x s32>) = COPY $vgpr0_vgpr1
    %1:_(<4 x s16>) = G_BITCAST %0
    %2:_(<4 x s16>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2

...

---
name: test_bitcast_v2s32_to_v8s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_v8s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<8 x s8>) = G_BITCAST [[COPY]](<2 x s32>)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<8 x s8>)
    ; CHECK: [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8), [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8), [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<8 x s8>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s8)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s8)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s8)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s8)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s8)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s8)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s8)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s8)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s8)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s8)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s8)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s8)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s8)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s8)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s8)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s8)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s8>) = G_BUILD_VECTOR [[TRUNC]](s8), [[TRUNC1]](s8), [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8), [[TRUNC6]](s8), [[TRUNC7]](s8)
    ; CHECK: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<8 x s8>)
    %0:_(<2 x s32>) = COPY $vgpr0_vgpr1
    %1:_(<8 x s8>) = G_BITCAST %0
    %2:_(<8 x s8>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2

...

---
name: test_bitcast_v8s8_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v8s8_to_v2s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<8 x s8>) = G_TRUNC [[COPY]](<8 x s32>)
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s32>) = G_BITCAST [[TRUNC]](<8 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<2 x s32>)
    %0:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x s8>) = G_TRUNC %0
    %2:_(<2 x s32>) = G_BITCAST %1
    S_ENDPGM 0, implicit %2
...

---
name: test_bitcast_v8s8_to_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v8s8_to_s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32), [[UV2:%[0-9]+]]:_(s32), [[UV3:%[0-9]+]]:_(s32), [[UV4:%[0-9]+]]:_(s32), [[UV5:%[0-9]+]]:_(s32), [[UV6:%[0-9]+]]:_(s32), [[UV7:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](<8 x s32>)
    ; CHECK: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 255
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[UV]](s32)
    ; CHECK: [[AND:%[0-9]+]]:_(s16) = G_AND [[TRUNC]], [[C]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[UV1]](s32)
    ; CHECK: [[AND1:%[0-9]+]]:_(s16) = G_AND [[TRUNC1]], [[C]]
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 8
    ; CHECK: [[SHL:%[0-9]+]]:_(s16) = G_SHL [[AND1]], [[C1]](s16)
    ; CHECK: [[OR:%[0-9]+]]:_(s16) = G_OR [[AND]], [[SHL]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[UV2]](s32)
    ; CHECK: [[AND2:%[0-9]+]]:_(s16) = G_AND [[TRUNC2]], [[C]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s16) = G_TRUNC [[UV3]](s32)
    ; CHECK: [[AND3:%[0-9]+]]:_(s16) = G_AND [[TRUNC3]], [[C]]
    ; CHECK: [[SHL1:%[0-9]+]]:_(s16) = G_SHL [[AND3]], [[C1]](s16)
    ; CHECK: [[OR1:%[0-9]+]]:_(s16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s16) = G_TRUNC [[UV4]](s32)
    ; CHECK: [[AND4:%[0-9]+]]:_(s16) = G_AND [[TRUNC4]], [[C]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s16) = G_TRUNC [[UV5]](s32)
    ; CHECK: [[AND5:%[0-9]+]]:_(s16) = G_AND [[TRUNC5]], [[C]]
    ; CHECK: [[SHL2:%[0-9]+]]:_(s16) = G_SHL [[AND5]], [[C1]](s16)
    ; CHECK: [[OR2:%[0-9]+]]:_(s16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s16) = G_TRUNC [[UV6]](s32)
    ; CHECK: [[AND6:%[0-9]+]]:_(s16) = G_AND [[TRUNC6]], [[C]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s16) = G_TRUNC [[UV7]](s32)
    ; CHECK: [[AND7:%[0-9]+]]:_(s16) = G_AND [[TRUNC7]], [[C]]
    ; CHECK: [[SHL3:%[0-9]+]]:_(s16) = G_SHL [[AND7]], [[C1]](s16)
    ; CHECK: [[OR3:%[0-9]+]]:_(s16) = G_OR [[AND6]], [[SHL3]]
    ; CHECK: [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[OR]](s16)
    ; CHECK: [[ZEXT1:%[0-9]+]]:_(s32) = G_ZEXT [[OR1]](s16)
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[SHL4:%[0-9]+]]:_(s32) = G_SHL [[ZEXT1]], [[C2]](s32)
    ; CHECK: [[OR4:%[0-9]+]]:_(s32) = G_OR [[ZEXT]], [[SHL4]]
    ; CHECK: [[ZEXT2:%[0-9]+]]:_(s32) = G_ZEXT [[OR2]](s16)
    ; CHECK: [[ZEXT3:%[0-9]+]]:_(s32) = G_ZEXT [[OR3]](s16)
    ; CHECK: [[SHL5:%[0-9]+]]:_(s32) = G_SHL [[ZEXT3]], [[C2]](s32)
    ; CHECK: [[OR5:%[0-9]+]]:_(s32) = G_OR [[ZEXT2]], [[SHL5]]
    ; CHECK: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES [[OR4]](s32), [[OR5]](s32)
    ; CHECK: S_ENDPGM 0, implicit [[MV]](s64)
    %0:_(<8 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x s8>) = G_TRUNC %0
    %2:_(s64) = G_BITCAST %1
    S_ENDPGM 0, implicit %2
...

---
name: test_bitcast_v2s32_to_v16s4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_v16s4
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s32>) = COPY $vgpr0_vgpr1
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<16 x s4>) = G_BITCAST [[COPY]](<2 x s32>)
    ; CHECK: [[UV:%[0-9]+]]:_(s4), [[UV1:%[0-9]+]]:_(s4), [[UV2:%[0-9]+]]:_(s4), [[UV3:%[0-9]+]]:_(s4), [[UV4:%[0-9]+]]:_(s4), [[UV5:%[0-9]+]]:_(s4), [[UV6:%[0-9]+]]:_(s4), [[UV7:%[0-9]+]]:_(s4), [[UV8:%[0-9]+]]:_(s4), [[UV9:%[0-9]+]]:_(s4), [[UV10:%[0-9]+]]:_(s4), [[UV11:%[0-9]+]]:_(s4), [[UV12:%[0-9]+]]:_(s4), [[UV13:%[0-9]+]]:_(s4), [[UV14:%[0-9]+]]:_(s4), [[UV15:%[0-9]+]]:_(s4) = G_UNMERGE_VALUES [[BITCAST]](<16 x s4>)
    ; CHECK: [[UV16:%[0-9]+]]:_(s4), [[UV17:%[0-9]+]]:_(s4), [[UV18:%[0-9]+]]:_(s4), [[UV19:%[0-9]+]]:_(s4), [[UV20:%[0-9]+]]:_(s4), [[UV21:%[0-9]+]]:_(s4), [[UV22:%[0-9]+]]:_(s4), [[UV23:%[0-9]+]]:_(s4), [[UV24:%[0-9]+]]:_(s4), [[UV25:%[0-9]+]]:_(s4), [[UV26:%[0-9]+]]:_(s4), [[UV27:%[0-9]+]]:_(s4), [[UV28:%[0-9]+]]:_(s4), [[UV29:%[0-9]+]]:_(s4), [[UV30:%[0-9]+]]:_(s4), [[UV31:%[0-9]+]]:_(s4) = G_UNMERGE_VALUES [[BITCAST]](<16 x s4>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s4)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV16]](s4)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s4) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s4)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV17]](s4)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s4) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s4)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV18]](s4)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s4) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s4)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV19]](s4)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s4) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s4)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV20]](s4)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s4) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s4)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV21]](s4)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s4) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s4)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV22]](s4)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s4) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s4)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV23]](s4)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s4) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s4)
    ; CHECK: [[ANYEXT17:%[0-9]+]]:_(s16) = G_ANYEXT [[UV24]](s4)
    ; CHECK: [[ADD8:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT16]], [[ANYEXT17]]
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s4) = G_TRUNC [[ADD8]](s16)
    ; CHECK: [[ANYEXT18:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s4)
    ; CHECK: [[ANYEXT19:%[0-9]+]]:_(s16) = G_ANYEXT [[UV25]](s4)
    ; CHECK: [[ADD9:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT18]], [[ANYEXT19]]
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s4) = G_TRUNC [[ADD9]](s16)
    ; CHECK: [[ANYEXT20:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s4)
    ; CHECK: [[ANYEXT21:%[0-9]+]]:_(s16) = G_ANYEXT [[UV26]](s4)
    ; CHECK: [[ADD10:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT20]], [[ANYEXT21]]
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s4) = G_TRUNC [[ADD10]](s16)
    ; CHECK: [[ANYEXT22:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s4)
    ; CHECK: [[ANYEXT23:%[0-9]+]]:_(s16) = G_ANYEXT [[UV27]](s4)
    ; CHECK: [[ADD11:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT22]], [[ANYEXT23]]
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s4) = G_TRUNC [[ADD11]](s16)
    ; CHECK: [[ANYEXT24:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s4)
    ; CHECK: [[ANYEXT25:%[0-9]+]]:_(s16) = G_ANYEXT [[UV28]](s4)
    ; CHECK: [[ADD12:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT24]], [[ANYEXT25]]
    ; CHECK: [[TRUNC12:%[0-9]+]]:_(s4) = G_TRUNC [[ADD12]](s16)
    ; CHECK: [[ANYEXT26:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s4)
    ; CHECK: [[ANYEXT27:%[0-9]+]]:_(s16) = G_ANYEXT [[UV29]](s4)
    ; CHECK: [[ADD13:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT26]], [[ANYEXT27]]
    ; CHECK: [[TRUNC13:%[0-9]+]]:_(s4) = G_TRUNC [[ADD13]](s16)
    ; CHECK: [[ANYEXT28:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s4)
    ; CHECK: [[ANYEXT29:%[0-9]+]]:_(s16) = G_ANYEXT [[UV30]](s4)
    ; CHECK: [[ADD14:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT28]], [[ANYEXT29]]
    ; CHECK: [[TRUNC14:%[0-9]+]]:_(s4) = G_TRUNC [[ADD14]](s16)
    ; CHECK: [[ANYEXT30:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s4)
    ; CHECK: [[ANYEXT31:%[0-9]+]]:_(s16) = G_ANYEXT [[UV31]](s4)
    ; CHECK: [[ADD15:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT30]], [[ANYEXT31]]
    ; CHECK: [[TRUNC15:%[0-9]+]]:_(s4) = G_TRUNC [[ADD15]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s4>) = G_BUILD_VECTOR [[TRUNC]](s4), [[TRUNC1]](s4), [[TRUNC2]](s4), [[TRUNC3]](s4), [[TRUNC4]](s4), [[TRUNC5]](s4), [[TRUNC6]](s4), [[TRUNC7]](s4), [[TRUNC8]](s4), [[TRUNC9]](s4), [[TRUNC10]](s4), [[TRUNC11]](s4), [[TRUNC12]](s4), [[TRUNC13]](s4), [[TRUNC14]](s4), [[TRUNC15]](s4)
    ; CHECK: [[ANYEXT32:%[0-9]+]]:_(<16 x s16>) = G_ANYEXT [[BUILD_VECTOR]](<16 x s4>)
    ; CHECK: S_ENDPGM 0, implicit [[ANYEXT32]](<16 x s16>)
    %0:_(<2 x s32>) = COPY $vgpr0_vgpr1
    %1:_(<16 x s4>) = G_BITCAST %0
    %2:_(<16 x s4>) = G_ADD %1, %1
    %3:_(<16 x s16>) = G_ANYEXT %2
    S_ENDPGM 0, implicit %3

...

---
name: test_bitcast_v16s4_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v16s4_to_v2s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<16 x s4>) = G_TRUNC [[COPY]](<16 x s16>)
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s32>) = G_BITCAST [[TRUNC]](<16 x s4>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<2 x s32>)
    %0:_(<16 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<16 x s4>) = G_TRUNC %0
    %2:_(<2 x s32>) = G_BITCAST %1
    S_ENDPGM 0, implicit %2
...

---
name: test_bitcast_s64_to_v8s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s64_to_v8s8
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY $vgpr0_vgpr1
    ; CHECK: [[UV:%[0-9]+]]:_(s32), [[UV1:%[0-9]+]]:_(s32) = G_UNMERGE_VALUES [[COPY]](s64)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s16) = G_TRUNC [[UV]](s32)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; CHECK: [[LSHR:%[0-9]+]]:_(s32) = G_LSHR [[UV]], [[C]](s32)
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s16) = G_TRUNC [[LSHR]](s32)
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s16) = G_TRUNC [[UV1]](s32)
    ; CHECK: [[LSHR1:%[0-9]+]]:_(s32) = G_LSHR [[UV1]], [[C]](s32)
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s16) = G_TRUNC [[LSHR1]](s32)
    ; CHECK: [[C1:%[0-9]+]]:_(s16) = G_CONSTANT i16 8
    ; CHECK: [[LSHR2:%[0-9]+]]:_(s16) = G_LSHR [[TRUNC]], [[C1]](s16)
    ; CHECK: [[LSHR3:%[0-9]+]]:_(s16) = G_LSHR [[TRUNC1]], [[C1]](s16)
    ; CHECK: [[LSHR4:%[0-9]+]]:_(s16) = G_LSHR [[TRUNC2]], [[C1]](s16)
    ; CHECK: [[LSHR5:%[0-9]+]]:_(s16) = G_LSHR [[TRUNC3]], [[C1]](s16)
    ; CHECK: [[COPY1:%[0-9]+]]:_(s16) = COPY [[TRUNC]](s16)
    ; CHECK: [[COPY2:%[0-9]+]]:_(s16) = COPY [[TRUNC]](s16)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[COPY1]], [[COPY2]]
    ; CHECK: [[COPY3:%[0-9]+]]:_(s16) = COPY [[LSHR2]](s16)
    ; CHECK: [[COPY4:%[0-9]+]]:_(s16) = COPY [[LSHR2]](s16)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[COPY3]], [[COPY4]]
    ; CHECK: [[COPY5:%[0-9]+]]:_(s16) = COPY [[TRUNC1]](s16)
    ; CHECK: [[COPY6:%[0-9]+]]:_(s16) = COPY [[TRUNC1]](s16)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[COPY5]], [[COPY6]]
    ; CHECK: [[COPY7:%[0-9]+]]:_(s16) = COPY [[LSHR3]](s16)
    ; CHECK: [[COPY8:%[0-9]+]]:_(s16) = COPY [[LSHR3]](s16)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[COPY7]], [[COPY8]]
    ; CHECK: [[COPY9:%[0-9]+]]:_(s16) = COPY [[TRUNC2]](s16)
    ; CHECK: [[COPY10:%[0-9]+]]:_(s16) = COPY [[TRUNC2]](s16)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[COPY9]], [[COPY10]]
    ; CHECK: [[COPY11:%[0-9]+]]:_(s16) = COPY [[LSHR4]](s16)
    ; CHECK: [[COPY12:%[0-9]+]]:_(s16) = COPY [[LSHR4]](s16)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[COPY11]], [[COPY12]]
    ; CHECK: [[COPY13:%[0-9]+]]:_(s16) = COPY [[TRUNC3]](s16)
    ; CHECK: [[COPY14:%[0-9]+]]:_(s16) = COPY [[TRUNC3]](s16)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[COPY13]], [[COPY14]]
    ; CHECK: [[COPY15:%[0-9]+]]:_(s16) = COPY [[LSHR5]](s16)
    ; CHECK: [[COPY16:%[0-9]+]]:_(s16) = COPY [[LSHR5]](s16)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[COPY15]], [[COPY16]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD]](s16)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD1]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD2]](s16)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD3]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD4]](s16)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD5]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD6]](s16)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s32) = G_ANYEXT [[ADD7]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x s32>) = G_BUILD_VECTOR [[ANYEXT]](s32), [[ANYEXT1]](s32), [[ANYEXT2]](s32), [[ANYEXT3]](s32), [[ANYEXT4]](s32), [[ANYEXT5]](s32), [[ANYEXT6]](s32), [[ANYEXT7]](s32)
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(<8 x s8>) = G_TRUNC [[BUILD_VECTOR]](<8 x s32>)
    ; CHECK: S_ENDPGM 0, implicit [[TRUNC4]](<8 x s8>)
    %0:_(s64) = COPY $vgpr0_vgpr1
    %1:_(<8 x s8>) = G_BITCAST %0
    %2:_(<8 x s8>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2

...

---
name: test_bitcast_v3s32_to_v12s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s32_to_v12s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<12 x s8>) = G_BITCAST [[COPY]](<3 x s32>)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8), [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<12 x s8>)
    ; CHECK: [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8), [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8), [[UV16:%[0-9]+]]:_(s8), [[UV17:%[0-9]+]]:_(s8), [[UV18:%[0-9]+]]:_(s8), [[UV19:%[0-9]+]]:_(s8), [[UV20:%[0-9]+]]:_(s8), [[UV21:%[0-9]+]]:_(s8), [[UV22:%[0-9]+]]:_(s8), [[UV23:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<12 x s8>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s8)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s8)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s8)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s8)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s8)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s8)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s8)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s8)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s8)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV16]](s8)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s8)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV17]](s8)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s8)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV18]](s8)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s8)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV19]](s8)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s8)
    ; CHECK: [[ANYEXT17:%[0-9]+]]:_(s16) = G_ANYEXT [[UV20]](s8)
    ; CHECK: [[ADD8:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT16]], [[ANYEXT17]]
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s8) = G_TRUNC [[ADD8]](s16)
    ; CHECK: [[ANYEXT18:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s8)
    ; CHECK: [[ANYEXT19:%[0-9]+]]:_(s16) = G_ANYEXT [[UV21]](s8)
    ; CHECK: [[ADD9:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT18]], [[ANYEXT19]]
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s8) = G_TRUNC [[ADD9]](s16)
    ; CHECK: [[ANYEXT20:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s8)
    ; CHECK: [[ANYEXT21:%[0-9]+]]:_(s16) = G_ANYEXT [[UV22]](s8)
    ; CHECK: [[ADD10:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT20]], [[ANYEXT21]]
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s8) = G_TRUNC [[ADD10]](s16)
    ; CHECK: [[ANYEXT22:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s8)
    ; CHECK: [[ANYEXT23:%[0-9]+]]:_(s16) = G_ANYEXT [[UV23]](s8)
    ; CHECK: [[ADD11:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT22]], [[ANYEXT23]]
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s8) = G_TRUNC [[ADD11]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<12 x s8>) = G_BUILD_VECTOR [[TRUNC]](s8), [[TRUNC1]](s8), [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8), [[TRUNC6]](s8), [[TRUNC7]](s8), [[TRUNC8]](s8), [[TRUNC9]](s8), [[TRUNC10]](s8), [[TRUNC11]](s8)
    ; CHECK: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<12 x s8>)
    %0:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<12 x s8>) = G_BITCAST %0
    %2:_(<12 x s8>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2

...

---
name: test_bitcast_v12s8_to_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11

    ; CHECK-LABEL: name: test_bitcast_v12s8_to_v3s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[COPY1:%[0-9]+]]:_(<4 x s32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK: [[COPY2:%[0-9]+]]:_(<4 x s32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; CHECK: [[CONCAT_VECTORS:%[0-9]+]]:_(<12 x s32>) = G_CONCAT_VECTORS [[COPY]](<4 x s32>), [[COPY1]](<4 x s32>), [[COPY2]](<4 x s32>)
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<12 x s8>) = G_TRUNC [[CONCAT_VECTORS]](<12 x s32>)
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<3 x s32>) = G_BITCAST [[TRUNC]](<12 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<3 x s32>)
    %0:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x s32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<4 x s32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    %3:_(<12 x s32>) = G_CONCAT_VECTORS %0, %1, %2
    %4:_(<12 x s8>) = G_TRUNC %3
    %5:_(<3 x s32>) = G_BITCAST %4
    S_ENDPGM 0, implicit %5
...

---
name: test_bitcast_v6s8_to_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v6s8_to_v3s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<6 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<6 x s8>) = G_TRUNC [[COPY]](<6 x s32>)
    ; CHECK: [[ADD:%[0-9]+]]:_(<6 x s8>) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<3 x s16>) = G_BITCAST [[ADD]](<6 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<3 x s16>)
    %0:_(<6 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<6 x s8>) = G_TRUNC %0
    %2:_(<6 x s8>) = G_ADD %1, %1
    %3:_(<3 x s16>) = G_BITCAST %2
    S_ENDPGM 0, implicit %3
...

---
name: test_bitcast_v3s16_to_v6s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s16_to_v6s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<3 x s16>) = G_TRUNC [[COPY]](<3 x s32>)
    ; CHECK: [[ADD:%[0-9]+]]:_(<3 x s16>) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<6 x s8>) = G_BITCAST [[ADD]](<3 x s16>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<6 x s8>)
    %0:_(<3 x s32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x s16>) = G_TRUNC %0
    %2:_(<3 x s16>) = G_ADD %1, %1
    %3:_(<6 x s8>) = G_BITCAST %2
    S_ENDPGM 0, implicit %3
...

---
name: test_bitcast_v2s64_to_v16s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v2s64_to_v16s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<2 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<16 x s8>) = G_BITCAST [[COPY]](<2 x s64>)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8), [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8), [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8), [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<16 x s8>)
    ; CHECK: [[UV16:%[0-9]+]]:_(s8), [[UV17:%[0-9]+]]:_(s8), [[UV18:%[0-9]+]]:_(s8), [[UV19:%[0-9]+]]:_(s8), [[UV20:%[0-9]+]]:_(s8), [[UV21:%[0-9]+]]:_(s8), [[UV22:%[0-9]+]]:_(s8), [[UV23:%[0-9]+]]:_(s8), [[UV24:%[0-9]+]]:_(s8), [[UV25:%[0-9]+]]:_(s8), [[UV26:%[0-9]+]]:_(s8), [[UV27:%[0-9]+]]:_(s8), [[UV28:%[0-9]+]]:_(s8), [[UV29:%[0-9]+]]:_(s8), [[UV30:%[0-9]+]]:_(s8), [[UV31:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<16 x s8>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s8)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV16]](s8)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s8)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV17]](s8)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s8)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV18]](s8)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s8)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV19]](s8)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s8)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV20]](s8)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s8)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV21]](s8)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s8)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV22]](s8)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s8)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV23]](s8)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s8)
    ; CHECK: [[ANYEXT17:%[0-9]+]]:_(s16) = G_ANYEXT [[UV24]](s8)
    ; CHECK: [[ADD8:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT16]], [[ANYEXT17]]
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s8) = G_TRUNC [[ADD8]](s16)
    ; CHECK: [[ANYEXT18:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s8)
    ; CHECK: [[ANYEXT19:%[0-9]+]]:_(s16) = G_ANYEXT [[UV25]](s8)
    ; CHECK: [[ADD9:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT18]], [[ANYEXT19]]
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s8) = G_TRUNC [[ADD9]](s16)
    ; CHECK: [[ANYEXT20:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s8)
    ; CHECK: [[ANYEXT21:%[0-9]+]]:_(s16) = G_ANYEXT [[UV26]](s8)
    ; CHECK: [[ADD10:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT20]], [[ANYEXT21]]
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s8) = G_TRUNC [[ADD10]](s16)
    ; CHECK: [[ANYEXT22:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s8)
    ; CHECK: [[ANYEXT23:%[0-9]+]]:_(s16) = G_ANYEXT [[UV27]](s8)
    ; CHECK: [[ADD11:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT22]], [[ANYEXT23]]
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s8) = G_TRUNC [[ADD11]](s16)
    ; CHECK: [[ANYEXT24:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s8)
    ; CHECK: [[ANYEXT25:%[0-9]+]]:_(s16) = G_ANYEXT [[UV28]](s8)
    ; CHECK: [[ADD12:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT24]], [[ANYEXT25]]
    ; CHECK: [[TRUNC12:%[0-9]+]]:_(s8) = G_TRUNC [[ADD12]](s16)
    ; CHECK: [[ANYEXT26:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s8)
    ; CHECK: [[ANYEXT27:%[0-9]+]]:_(s16) = G_ANYEXT [[UV29]](s8)
    ; CHECK: [[ADD13:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT26]], [[ANYEXT27]]
    ; CHECK: [[TRUNC13:%[0-9]+]]:_(s8) = G_TRUNC [[ADD13]](s16)
    ; CHECK: [[ANYEXT28:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s8)
    ; CHECK: [[ANYEXT29:%[0-9]+]]:_(s16) = G_ANYEXT [[UV30]](s8)
    ; CHECK: [[ADD14:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT28]], [[ANYEXT29]]
    ; CHECK: [[TRUNC14:%[0-9]+]]:_(s8) = G_TRUNC [[ADD14]](s16)
    ; CHECK: [[ANYEXT30:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s8)
    ; CHECK: [[ANYEXT31:%[0-9]+]]:_(s16) = G_ANYEXT [[UV31]](s8)
    ; CHECK: [[ADD15:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT30]], [[ANYEXT31]]
    ; CHECK: [[TRUNC15:%[0-9]+]]:_(s8) = G_TRUNC [[ADD15]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s8>) = G_BUILD_VECTOR [[TRUNC]](s8), [[TRUNC1]](s8), [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8), [[TRUNC6]](s8), [[TRUNC7]](s8), [[TRUNC8]](s8), [[TRUNC9]](s8), [[TRUNC10]](s8), [[TRUNC11]](s8), [[TRUNC12]](s8), [[TRUNC13]](s8), [[TRUNC14]](s8), [[TRUNC15]](s8)
    ; CHECK: [[ANYEXT32:%[0-9]+]]:_(<16 x s32>) = G_ANYEXT [[BUILD_VECTOR]](<16 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[ANYEXT32]](<16 x s32>)
    %0:_(<2 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<16 x s8>) = G_BITCAST %0
    %2:_(<16 x s8>) = G_ADD %1, %1
    %3:_(<16 x s32>) = G_ANYEXT %2
    S_ENDPGM 0, implicit %3
...

---
name: test_bitcast_v16s8_to_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s8_to_v2s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<16 x s8>) = G_TRUNC [[COPY]](<16 x s32>)
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<2 x s64>) = G_BITCAST [[TRUNC]](<16 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<2 x s64>)
    %0:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x s8>) = G_TRUNC %0
    %2:_(<2 x s64>) = G_BITCAST %1
    S_ENDPGM 0, implicit %2
...

---
name: test_bitcast_v4s32_to_v16s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-LABEL: name: test_bitcast_v4s32_to_v16s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<16 x s8>) = G_BITCAST [[COPY]](<4 x s32>)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8), [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8), [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8), [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<16 x s8>)
    ; CHECK: [[UV16:%[0-9]+]]:_(s8), [[UV17:%[0-9]+]]:_(s8), [[UV18:%[0-9]+]]:_(s8), [[UV19:%[0-9]+]]:_(s8), [[UV20:%[0-9]+]]:_(s8), [[UV21:%[0-9]+]]:_(s8), [[UV22:%[0-9]+]]:_(s8), [[UV23:%[0-9]+]]:_(s8), [[UV24:%[0-9]+]]:_(s8), [[UV25:%[0-9]+]]:_(s8), [[UV26:%[0-9]+]]:_(s8), [[UV27:%[0-9]+]]:_(s8), [[UV28:%[0-9]+]]:_(s8), [[UV29:%[0-9]+]]:_(s8), [[UV30:%[0-9]+]]:_(s8), [[UV31:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<16 x s8>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s8)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV16]](s8)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s8)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV17]](s8)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s8)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV18]](s8)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s8)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV19]](s8)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s8)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV20]](s8)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s8)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV21]](s8)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s8)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV22]](s8)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s8)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV23]](s8)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s8)
    ; CHECK: [[ANYEXT17:%[0-9]+]]:_(s16) = G_ANYEXT [[UV24]](s8)
    ; CHECK: [[ADD8:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT16]], [[ANYEXT17]]
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s8) = G_TRUNC [[ADD8]](s16)
    ; CHECK: [[ANYEXT18:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s8)
    ; CHECK: [[ANYEXT19:%[0-9]+]]:_(s16) = G_ANYEXT [[UV25]](s8)
    ; CHECK: [[ADD9:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT18]], [[ANYEXT19]]
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s8) = G_TRUNC [[ADD9]](s16)
    ; CHECK: [[ANYEXT20:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s8)
    ; CHECK: [[ANYEXT21:%[0-9]+]]:_(s16) = G_ANYEXT [[UV26]](s8)
    ; CHECK: [[ADD10:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT20]], [[ANYEXT21]]
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s8) = G_TRUNC [[ADD10]](s16)
    ; CHECK: [[ANYEXT22:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s8)
    ; CHECK: [[ANYEXT23:%[0-9]+]]:_(s16) = G_ANYEXT [[UV27]](s8)
    ; CHECK: [[ADD11:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT22]], [[ANYEXT23]]
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s8) = G_TRUNC [[ADD11]](s16)
    ; CHECK: [[ANYEXT24:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s8)
    ; CHECK: [[ANYEXT25:%[0-9]+]]:_(s16) = G_ANYEXT [[UV28]](s8)
    ; CHECK: [[ADD12:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT24]], [[ANYEXT25]]
    ; CHECK: [[TRUNC12:%[0-9]+]]:_(s8) = G_TRUNC [[ADD12]](s16)
    ; CHECK: [[ANYEXT26:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s8)
    ; CHECK: [[ANYEXT27:%[0-9]+]]:_(s16) = G_ANYEXT [[UV29]](s8)
    ; CHECK: [[ADD13:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT26]], [[ANYEXT27]]
    ; CHECK: [[TRUNC13:%[0-9]+]]:_(s8) = G_TRUNC [[ADD13]](s16)
    ; CHECK: [[ANYEXT28:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s8)
    ; CHECK: [[ANYEXT29:%[0-9]+]]:_(s16) = G_ANYEXT [[UV30]](s8)
    ; CHECK: [[ADD14:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT28]], [[ANYEXT29]]
    ; CHECK: [[TRUNC14:%[0-9]+]]:_(s8) = G_TRUNC [[ADD14]](s16)
    ; CHECK: [[ANYEXT30:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s8)
    ; CHECK: [[ANYEXT31:%[0-9]+]]:_(s16) = G_ANYEXT [[UV31]](s8)
    ; CHECK: [[ADD15:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT30]], [[ANYEXT31]]
    ; CHECK: [[TRUNC15:%[0-9]+]]:_(s8) = G_TRUNC [[ADD15]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s8>) = G_BUILD_VECTOR [[TRUNC]](s8), [[TRUNC1]](s8), [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8), [[TRUNC6]](s8), [[TRUNC7]](s8), [[TRUNC8]](s8), [[TRUNC9]](s8), [[TRUNC10]](s8), [[TRUNC11]](s8), [[TRUNC12]](s8), [[TRUNC13]](s8), [[TRUNC14]](s8), [[TRUNC15]](s8)
    ; CHECK: [[ANYEXT32:%[0-9]+]]:_(<16 x s32>) = G_ANYEXT [[BUILD_VECTOR]](<16 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[ANYEXT32]](<16 x s32>)
    %0:_(<4 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<16 x s8>) = G_BITCAST %0
    %2:_(<16 x s8>) = G_ADD %1, %1
    %3:_(<16 x s32>) = G_ANYEXT %2
    S_ENDPGM 0, implicit %3
...

---
name: test_bitcast_v16s8_to_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s8_to_v4s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<16 x s8>) = G_TRUNC [[COPY]](<16 x s32>)
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<4 x s32>) = G_BITCAST [[TRUNC]](<16 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<4 x s32>)
    %0:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x s8>) = G_TRUNC %0
    %2:_(<4 x s32>) = G_BITCAST %1
    S_ENDPGM 0, implicit %2
...

---
name: test_bitcast_v8s16_to_v16s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s16_to_v16s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<8 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<16 x s8>) = G_BITCAST [[COPY]](<8 x s16>)
    ; CHECK: [[UV:%[0-9]+]]:_(s8), [[UV1:%[0-9]+]]:_(s8), [[UV2:%[0-9]+]]:_(s8), [[UV3:%[0-9]+]]:_(s8), [[UV4:%[0-9]+]]:_(s8), [[UV5:%[0-9]+]]:_(s8), [[UV6:%[0-9]+]]:_(s8), [[UV7:%[0-9]+]]:_(s8), [[UV8:%[0-9]+]]:_(s8), [[UV9:%[0-9]+]]:_(s8), [[UV10:%[0-9]+]]:_(s8), [[UV11:%[0-9]+]]:_(s8), [[UV12:%[0-9]+]]:_(s8), [[UV13:%[0-9]+]]:_(s8), [[UV14:%[0-9]+]]:_(s8), [[UV15:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<16 x s8>)
    ; CHECK: [[UV16:%[0-9]+]]:_(s8), [[UV17:%[0-9]+]]:_(s8), [[UV18:%[0-9]+]]:_(s8), [[UV19:%[0-9]+]]:_(s8), [[UV20:%[0-9]+]]:_(s8), [[UV21:%[0-9]+]]:_(s8), [[UV22:%[0-9]+]]:_(s8), [[UV23:%[0-9]+]]:_(s8), [[UV24:%[0-9]+]]:_(s8), [[UV25:%[0-9]+]]:_(s8), [[UV26:%[0-9]+]]:_(s8), [[UV27:%[0-9]+]]:_(s8), [[UV28:%[0-9]+]]:_(s8), [[UV29:%[0-9]+]]:_(s8), [[UV30:%[0-9]+]]:_(s8), [[UV31:%[0-9]+]]:_(s8) = G_UNMERGE_VALUES [[BITCAST]](<16 x s8>)
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s16) = G_ANYEXT [[UV]](s8)
    ; CHECK: [[ANYEXT1:%[0-9]+]]:_(s16) = G_ANYEXT [[UV16]](s8)
    ; CHECK: [[ADD:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT]], [[ANYEXT1]]
    ; CHECK: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[ADD]](s16)
    ; CHECK: [[ANYEXT2:%[0-9]+]]:_(s16) = G_ANYEXT [[UV1]](s8)
    ; CHECK: [[ANYEXT3:%[0-9]+]]:_(s16) = G_ANYEXT [[UV17]](s8)
    ; CHECK: [[ADD1:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT2]], [[ANYEXT3]]
    ; CHECK: [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[ADD1]](s16)
    ; CHECK: [[ANYEXT4:%[0-9]+]]:_(s16) = G_ANYEXT [[UV2]](s8)
    ; CHECK: [[ANYEXT5:%[0-9]+]]:_(s16) = G_ANYEXT [[UV18]](s8)
    ; CHECK: [[ADD2:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT4]], [[ANYEXT5]]
    ; CHECK: [[TRUNC2:%[0-9]+]]:_(s8) = G_TRUNC [[ADD2]](s16)
    ; CHECK: [[ANYEXT6:%[0-9]+]]:_(s16) = G_ANYEXT [[UV3]](s8)
    ; CHECK: [[ANYEXT7:%[0-9]+]]:_(s16) = G_ANYEXT [[UV19]](s8)
    ; CHECK: [[ADD3:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT6]], [[ANYEXT7]]
    ; CHECK: [[TRUNC3:%[0-9]+]]:_(s8) = G_TRUNC [[ADD3]](s16)
    ; CHECK: [[ANYEXT8:%[0-9]+]]:_(s16) = G_ANYEXT [[UV4]](s8)
    ; CHECK: [[ANYEXT9:%[0-9]+]]:_(s16) = G_ANYEXT [[UV20]](s8)
    ; CHECK: [[ADD4:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT8]], [[ANYEXT9]]
    ; CHECK: [[TRUNC4:%[0-9]+]]:_(s8) = G_TRUNC [[ADD4]](s16)
    ; CHECK: [[ANYEXT10:%[0-9]+]]:_(s16) = G_ANYEXT [[UV5]](s8)
    ; CHECK: [[ANYEXT11:%[0-9]+]]:_(s16) = G_ANYEXT [[UV21]](s8)
    ; CHECK: [[ADD5:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT10]], [[ANYEXT11]]
    ; CHECK: [[TRUNC5:%[0-9]+]]:_(s8) = G_TRUNC [[ADD5]](s16)
    ; CHECK: [[ANYEXT12:%[0-9]+]]:_(s16) = G_ANYEXT [[UV6]](s8)
    ; CHECK: [[ANYEXT13:%[0-9]+]]:_(s16) = G_ANYEXT [[UV22]](s8)
    ; CHECK: [[ADD6:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT12]], [[ANYEXT13]]
    ; CHECK: [[TRUNC6:%[0-9]+]]:_(s8) = G_TRUNC [[ADD6]](s16)
    ; CHECK: [[ANYEXT14:%[0-9]+]]:_(s16) = G_ANYEXT [[UV7]](s8)
    ; CHECK: [[ANYEXT15:%[0-9]+]]:_(s16) = G_ANYEXT [[UV23]](s8)
    ; CHECK: [[ADD7:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT14]], [[ANYEXT15]]
    ; CHECK: [[TRUNC7:%[0-9]+]]:_(s8) = G_TRUNC [[ADD7]](s16)
    ; CHECK: [[ANYEXT16:%[0-9]+]]:_(s16) = G_ANYEXT [[UV8]](s8)
    ; CHECK: [[ANYEXT17:%[0-9]+]]:_(s16) = G_ANYEXT [[UV24]](s8)
    ; CHECK: [[ADD8:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT16]], [[ANYEXT17]]
    ; CHECK: [[TRUNC8:%[0-9]+]]:_(s8) = G_TRUNC [[ADD8]](s16)
    ; CHECK: [[ANYEXT18:%[0-9]+]]:_(s16) = G_ANYEXT [[UV9]](s8)
    ; CHECK: [[ANYEXT19:%[0-9]+]]:_(s16) = G_ANYEXT [[UV25]](s8)
    ; CHECK: [[ADD9:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT18]], [[ANYEXT19]]
    ; CHECK: [[TRUNC9:%[0-9]+]]:_(s8) = G_TRUNC [[ADD9]](s16)
    ; CHECK: [[ANYEXT20:%[0-9]+]]:_(s16) = G_ANYEXT [[UV10]](s8)
    ; CHECK: [[ANYEXT21:%[0-9]+]]:_(s16) = G_ANYEXT [[UV26]](s8)
    ; CHECK: [[ADD10:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT20]], [[ANYEXT21]]
    ; CHECK: [[TRUNC10:%[0-9]+]]:_(s8) = G_TRUNC [[ADD10]](s16)
    ; CHECK: [[ANYEXT22:%[0-9]+]]:_(s16) = G_ANYEXT [[UV11]](s8)
    ; CHECK: [[ANYEXT23:%[0-9]+]]:_(s16) = G_ANYEXT [[UV27]](s8)
    ; CHECK: [[ADD11:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT22]], [[ANYEXT23]]
    ; CHECK: [[TRUNC11:%[0-9]+]]:_(s8) = G_TRUNC [[ADD11]](s16)
    ; CHECK: [[ANYEXT24:%[0-9]+]]:_(s16) = G_ANYEXT [[UV12]](s8)
    ; CHECK: [[ANYEXT25:%[0-9]+]]:_(s16) = G_ANYEXT [[UV28]](s8)
    ; CHECK: [[ADD12:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT24]], [[ANYEXT25]]
    ; CHECK: [[TRUNC12:%[0-9]+]]:_(s8) = G_TRUNC [[ADD12]](s16)
    ; CHECK: [[ANYEXT26:%[0-9]+]]:_(s16) = G_ANYEXT [[UV13]](s8)
    ; CHECK: [[ANYEXT27:%[0-9]+]]:_(s16) = G_ANYEXT [[UV29]](s8)
    ; CHECK: [[ADD13:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT26]], [[ANYEXT27]]
    ; CHECK: [[TRUNC13:%[0-9]+]]:_(s8) = G_TRUNC [[ADD13]](s16)
    ; CHECK: [[ANYEXT28:%[0-9]+]]:_(s16) = G_ANYEXT [[UV14]](s8)
    ; CHECK: [[ANYEXT29:%[0-9]+]]:_(s16) = G_ANYEXT [[UV30]](s8)
    ; CHECK: [[ADD14:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT28]], [[ANYEXT29]]
    ; CHECK: [[TRUNC14:%[0-9]+]]:_(s8) = G_TRUNC [[ADD14]](s16)
    ; CHECK: [[ANYEXT30:%[0-9]+]]:_(s16) = G_ANYEXT [[UV15]](s8)
    ; CHECK: [[ANYEXT31:%[0-9]+]]:_(s16) = G_ANYEXT [[UV31]](s8)
    ; CHECK: [[ADD15:%[0-9]+]]:_(s16) = G_ADD [[ANYEXT30]], [[ANYEXT31]]
    ; CHECK: [[TRUNC15:%[0-9]+]]:_(s8) = G_TRUNC [[ADD15]](s16)
    ; CHECK: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x s8>) = G_BUILD_VECTOR [[TRUNC]](s8), [[TRUNC1]](s8), [[TRUNC2]](s8), [[TRUNC3]](s8), [[TRUNC4]](s8), [[TRUNC5]](s8), [[TRUNC6]](s8), [[TRUNC7]](s8), [[TRUNC8]](s8), [[TRUNC9]](s8), [[TRUNC10]](s8), [[TRUNC11]](s8), [[TRUNC12]](s8), [[TRUNC13]](s8), [[TRUNC14]](s8), [[TRUNC15]](s8)
    ; CHECK: [[ANYEXT32:%[0-9]+]]:_(<16 x s32>) = G_ANYEXT [[BUILD_VECTOR]](<16 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[ANYEXT32]](<16 x s32>)
    %0:_(<8 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<16 x s8>) = G_BITCAST %0
    %2:_(<16 x s8>) = G_ADD %1, %1
    %3:_(<16 x s32>) = G_ANYEXT %2
    S_ENDPGM 0, implicit %3
...

---
name: test_bitcast_v16s8_to_v8s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s8_to_v8s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK: [[TRUNC:%[0-9]+]]:_(<16 x s8>) = G_TRUNC [[COPY]](<16 x s32>)
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<8 x s16>) = G_BITCAST [[TRUNC]](<16 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<8 x s16>)
    %0:_(<16 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x s8>) = G_TRUNC %0
    %2:_(<8 x s16>) = G_BITCAST %1
    S_ENDPGM 0, implicit %2
...

---
name: test_bitcast_v3s64_to_v6s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v3s64_to_v6s32
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<6 x s32>) = G_BITCAST [[COPY]](<3 x s64>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<6 x s32>)
    %0:_(<3 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<6 x s32>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v6s32_to_v3s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v6s32_to_v3s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<6 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<3 x s64>) = G_BITCAST [[COPY]](<6 x s32>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<3 x s64>)
    %0:_(<6 x s32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<3 x s64>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v3s64_to_v12s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v3s64_to_v12s16
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<12 x s16>) = G_BITCAST [[COPY]](<3 x s64>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<12 x s16>)
    %0:_(<3 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<12 x s16>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v12s16_to_v3s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v12s16_to_v3s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<12 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<3 x s64>) = G_BITCAST [[COPY]](<12 x s16>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<3 x s64>)
    %0:_(<12 x s16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<3 x s64>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v3s64_to_v24s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v3s64_to_v24s8
    ; CHECK: [[COPY:%[0-9]+]]:_(<3 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<24 x s8>) = G_BITCAST [[COPY]](<3 x s64>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<24 x s8>)
    %0:_(<3 x s64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<24 x s8>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...

---
name: test_bitcast_v24s8_to_v3s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v24s8_to_v3s64
    ; CHECK: [[COPY:%[0-9]+]]:_(<24 x s8>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK: [[BITCAST:%[0-9]+]]:_(<3 x s64>) = G_BITCAST [[COPY]](<24 x s8>)
    ; CHECK: S_ENDPGM 0, implicit [[BITCAST]](<3 x s64>)
    %0:_(<24 x s8>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<3 x s64>) = G_BITCAST %0
    S_ENDPGM 0, implicit %1
...
