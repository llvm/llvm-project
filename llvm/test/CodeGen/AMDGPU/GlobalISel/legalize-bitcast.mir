# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck %s

---
name: test_bitcast_s32_to_v2s16
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_s32_to_v2s16
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    %0:_(i32) = COPY $vgpr0
    %1:_(<2 x i16>) = G_BITCAST %0(i32)
    $vgpr0 = COPY %1(<2 x i16>)
...

---
name: test_bitcast_v2s16_to_s32
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_v2s16_to_s32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST]](i32)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(i32) = G_BITCAST %0(<2 x i16>)
    $vgpr0 = COPY %1(i32)
...

---
name: test_bitcast_v2s32_to_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_s64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i64) = G_BITCAST [[COPY]](<2 x i32>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](i64)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_BITCAST %0(<2 x i32>)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_bitcast_s64_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s64_to_v2s32
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x i32>)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_BITCAST %0(i64)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_bitcast_v2s64_to_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v2s64_to_v4s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[COPY]](<2 x i64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<4 x i32>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x i32>) = G_BITCAST %0(<2 x i64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<4 x i32>)
...

---
name: test_bitcast_v4s32_to_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v4s32_to_v2s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[COPY]](<4 x i32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x i64>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = G_BITCAST %0(<4 x i32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_bitcast_s128_to_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_s128_to_v4s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[COPY]](i128)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<4 x i32>)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x i32>) = G_BITCAST %0(i128)
    S_ENDPGM 0, implicit %1(<4 x i32>)
...

---
name: test_bitcast_v4s32_to_s128
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v4s32_to_s128
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[COPY]](<4 x i32>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](i128)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i128) = G_BITCAST %0(<4 x i32>)
    S_ENDPGM 0, implicit %1(i128)
...

---
name: test_bitcast_v4s16_to_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v4s16_to_s64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i64) = G_BITCAST [[COPY]](<4 x i16>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](i64)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_BITCAST %0(<4 x i16>)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_bitcast_s64_to_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s64_to_v4s16
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<4 x i16>)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_BITCAST %0(i64)
    $vgpr0_vgpr1 = COPY %1(<4 x i16>)
...

---
name: test_bitcast_v2s64_to_v8s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v2s64_to_v8s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[COPY]](<2 x i64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<8 x i16>) = G_BITCAST %0(<2 x i64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<8 x i16>)
...

---
name: test_bitcast_v8s16_to_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s16_to_v2s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[COPY]](<8 x i16>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x i64>)
    %0:_(<8 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = G_BITCAST %0(<8 x i16>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_bitcast_p0_to_p1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p0_to_p1
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(p1) = G_BITCAST [[COPY]](p0)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](p1)
    %0:_(p0) = COPY $vgpr0_vgpr1
    %1:_(p1) = G_BITCAST %0(p0)
    $vgpr0_vgpr1 = COPY %1(p1)
...

---
name: test_bitcast_p1_to_p0
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p1_to_p0
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(p0) = G_BITCAST [[COPY]](p1)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](p0)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p0) = G_BITCAST %0(p1)
    $vgpr0_vgpr1 = COPY %1(p0)
...

---
name: test_bitcast_p999_to_p0
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p999_to_p0
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p999) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(p0) = G_BITCAST [[COPY]](p999)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](p0)
    %0:_(p999) = COPY $vgpr0_vgpr1
    %1:_(p0) = G_BITCAST %0(p999)
    $vgpr0_vgpr1 = COPY %1(p0)
...

---
name: test_bitcast_p123_to_p999
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_p123_to_p999
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p123) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(p999) = G_BITCAST [[COPY]](p123)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](p999)
    %0:_(p123) = COPY $vgpr0_vgpr1
    %1:_(p999) = G_BITCAST %0(p123)
    $vgpr0_vgpr1 = COPY %1(p999)
...

---
name: test_bitcast_v4s64_to_v8s32
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v4s64_to_v8s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i32>) = G_BITCAST [[COPY]](<4 x i64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<8 x i32>)
    %0:_(<4 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x i32>) = G_BITCAST %0(<4 x i64>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<8 x i32>)
...

---
name: test_bitcast_v8s32_to_v4s64
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v8s32_to_v4s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x i64>) = G_BITCAST [[COPY]](<8 x i32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x i64>)
    %0:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<4 x i64>) = G_BITCAST %0(<8 x i32>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<4 x i64>)
...

---
name: test_bitcast_v8s64_to_v16s32
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v8s64_to_v16s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<16 x i32>) = G_BITCAST [[COPY]](<8 x i64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[BITCAST]](<16 x i32>)
    %0:_(<8 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x i32>) = G_BITCAST %0(<8 x i64>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY %1(<16 x i32>)
...

---
name: test_bitcast_v16s32_to_v8s64
tracksRegLiveness: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s32_to_v8s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i64>) = G_BITCAST [[COPY]](<16 x i32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[BITCAST]](<8 x i64>)
    %0:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<8 x i64>) = G_BITCAST %0(<16 x i32>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY %1(<8 x i64>)
...

---
name: test_bitcast_v32s32_to_v16s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31

    ; CHECK-LABEL: name: test_bitcast_v32s32_to_v16s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<16 x i64>) = G_BITCAST [[COPY]](<32 x i32>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<16 x i64>)
    %0:_(<32 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    %1:_(<16 x i64>) = G_BITCAST %0(<32 x i32>)
    S_ENDPGM 0, implicit %1(<16 x i64>)
...

---
name: test_bitcast_v16s64_to_v32s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31

    ; CHECK-LABEL: name: test_bitcast_v16s64_to_v32s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<32 x i32>) = G_BITCAST [[COPY]](<16 x i64>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<32 x i32>)
    %0:_(<16 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    %1:_(<32 x i32>) = G_BITCAST %0(<16 x i64>)
    S_ENDPGM 0, implicit %1(<32 x i32>)
...

---
name: test_bitcast_s24_to_v3s8
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_s24_to_v3s8
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[LSHR]](i32), [[LSHR1]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    %0:_(i32) = COPY $vgpr0
    %1:_(i24) = G_TRUNC %0(i32)
    %2:_(<3 x i8>) = G_BITCAST %1(i24)
    %3:_(<3 x i32>) = G_ANYEXT %2(<3 x i8>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<3 x i32>)
...

---
name: test_bitcast_s48_to_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s48_to_v3s16
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[LSHR]](i32), [[UV1]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i48) = G_TRUNC %0(i64)
    %2:_(<3 x i16>) = G_BITCAST %1(i48)
    %3:_(<3 x i32>) = G_ANYEXT %2(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<3 x i32>)
...

---
name: test_bitcast_v3s8_to_s24
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s8_to_s24
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C1]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[OR2]](i32)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i8>) = G_TRUNC %0(<3 x i32>)
    %2:_(i24) = G_BITCAST %1(<3 x i8>)
    %3:_(i32) = G_ANYEXT %2(i24)
    $vgpr0 = COPY %3(i32)
...

---
name: test_bitcast_v3s16_to_s48
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s16_to_s48
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[UV2]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[C2]], [[C1]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR]](i32), [[OR1]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i16>) = G_TRUNC %0(<3 x i32>)
    %2:_(i48) = G_BITCAST %1(<3 x i16>)
    %3:_(i64) = G_ANYEXT %2(i48)
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: test_bitcast_s16_to_v2s8
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_s16_to_v2s8
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[LSHR]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(<2 x i8>) = G_BITCAST %1(i16)
    %3:_(<2 x i32>) = G_ANYEXT %2(<2 x i8>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_bitcast_v2s8_to_s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s8_to_s16
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i8>) = G_TRUNC %0(<2 x i32>)
    %2:_(i16) = G_BITCAST %1(<2 x i8>)
    %3:_(i32) = G_ANYEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---

name: test_bitcast_v2s16_to_v4s8
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_v2s16_to_v4s8
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[COPY2]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[COPY3]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[COPY4]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<4 x i32>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<4 x i8>) = G_BITCAST %0(<2 x i16>)
    %2:_(<4 x i8>) = G_ADD %1, %1
    %3:_(<4 x i32>) = G_ANYEXT %2(<4 x i8>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3(<4 x i32>)
...

---
name: test_bitcast_v4s8_to_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v4s8_to_v2s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[COPY1]], [[TRUNC]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[COPY2]], [[TRUNC1]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[COPY3]], [[TRUNC2]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[COPY4]], [[TRUNC3]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[ADD1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[ADD2]], [[C]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[ADD3]], [[C]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C1]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x i8>) = G_TRUNC %0(<4 x i32>)
    %2:_(<4 x i8>) = G_ADD %1, %1
    %3:_(<2 x i16>) = G_BITCAST %2(<4 x i8>)
    $vgpr0 = COPY %3(<2 x i16>)
...

---
name: test_bitcast_v2s16_to_v8s4
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_bitcast_v2s16_to_v8s4
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C1]](i32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C3]](i32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C4]](i32)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C5]](i32)
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C6]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[COPY2]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[COPY3]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[COPY4]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[COPY5]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[COPY6]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i16) = COPY [[TRUNC6]](i16)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[COPY7]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i16) = COPY [[TRUNC7]](i16)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[COPY8]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<8 x i32>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<8 x i4>) = G_BITCAST %0(<2 x i16>)
    %2:_(<8 x i4>) = G_ADD %1, %1
    %3:_(<8 x i32>) = G_ANYEXT %2(<8 x i4>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(<8 x i32>)
...

---
name: test_bitcast_v8s4_to_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s4_to_v2s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<8 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[COPY1]], [[TRUNC]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[COPY2]], [[TRUNC1]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[COPY3]], [[TRUNC2]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[COPY4]], [[TRUNC3]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[COPY5]], [[TRUNC4]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[COPY6]], [[TRUNC5]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i16) = COPY [[TRUNC6]](i16)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[COPY7]], [[TRUNC6]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i16) = COPY [[TRUNC7]](i16)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[COPY8]], [[TRUNC7]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[ADD1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 4
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[ADD2]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND2]], [[C2]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[OR]], [[SHL1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[ADD3]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 12
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C3]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[OR1]], [[SHL2]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[ADD4]], [[C]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[ADD5]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C1]](i16)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL3]]
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[ADD6]], [[C]]
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i16) = G_SHL [[AND6]], [[C2]](i16)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i16) = G_OR [[OR3]], [[SHL4]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[ADD7]], [[C]]
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C3]](i16)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i16) = G_OR [[OR4]], [[SHL5]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR5]](i16)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C4]](i32)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL6]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    %0:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x i4>) = G_TRUNC %0(<8 x i32>)
    %2:_(<8 x i4>) = G_ADD %1, %1
    %3:_(<2 x i16>) = G_BITCAST %2(<8 x i4>)
    $vgpr0 = COPY %3(<2 x i16>)
...

---
name: test_bitcast_v4s16_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v4s16_to_v2s32
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[COPY]](<4 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<2 x i32>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_BITCAST %0(<4 x i16>)
    S_ENDPGM 0, implicit %1(<2 x i32>)
...

---
name: test_bitcast_v2s32_to_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_v4s16
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x i16>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[TRUNC4]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[TRUNC5]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[TRUNC6]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[TRUNC7]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_BITCAST %0(<2 x i32>)
    %2:_(<4 x i16>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2(<4 x i16>)

...

---
name: test_bitcast_v2s32_to_v8s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_v8s8
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C1]](i32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C2]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[COPY2]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[COPY3]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[COPY4]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[COPY5]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[COPY6]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i16) = COPY [[TRUNC6]](i16)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[COPY7]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i16) = COPY [[TRUNC7]](i16)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[COPY8]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(<8 x i8>) = G_TRUNC [[BUILD_VECTOR]](<8 x i32>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[TRUNC8]](<8 x i8>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<8 x i8>) = G_BITCAST %0(<2 x i32>)
    %2:_(<8 x i8>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2(<8 x i8>)

...

---
name: test_bitcast_v8s8_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v8s8_to_v2s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<8 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i8) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i8) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i8) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i8) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[UV2]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C2]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C3]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i8) = COPY [[TRUNC2]](i8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i8) = COPY [[TRUNC3]](i8)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV4]], [[C]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[UV5]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C1]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL3]]
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[UV6]], [[C]]
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND6]], [[C2]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[OR3]], [[SHL4]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[UV7]], [[C]]
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C3]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[OR4]], [[SHL5]]
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x i8>) = G_TRUNC %0(<8 x i32>)
    %2:_(<2 x i32>) = G_BITCAST %1(<8 x i8>)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: test_bitcast_v8s8_to_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v8s8_to_s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<8 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C1]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C]]
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C1]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C1]](i16)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL3]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C2]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL5]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR4]](i32), [[OR5]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[MV]](i64)
    %0:_(<8 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<8 x i8>) = G_TRUNC %0(<8 x i32>)
    %2:_(i64) = G_BITCAST %1(<8 x i8>)
    S_ENDPGM 0, implicit %2(i64)
...

---
name: test_bitcast_v2s32_to_v16s4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v2s32_to_v16s4
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C1]](i32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C2]](i32)
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C3]](i32)
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C4]](i32)
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C5]](i32)
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C6]](i32)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C3]](i32)
    ; CHECK-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C4]](i32)
    ; CHECK-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C5]](i32)
    ; CHECK-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C6]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[COPY2]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[COPY3]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[COPY4]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[COPY5]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[COPY6]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i16) = COPY [[TRUNC6]](i16)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[COPY7]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i16) = COPY [[TRUNC7]](i16)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[COPY8]]
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(i16) = COPY [[TRUNC8]](i16)
    ; CHECK-NEXT: [[ADD8:%[0-9]+]]:_(i16) = G_ADD [[TRUNC8]], [[COPY9]]
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(i16) = COPY [[TRUNC9]](i16)
    ; CHECK-NEXT: [[ADD9:%[0-9]+]]:_(i16) = G_ADD [[TRUNC9]], [[COPY10]]
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(i16) = COPY [[TRUNC10]](i16)
    ; CHECK-NEXT: [[ADD10:%[0-9]+]]:_(i16) = G_ADD [[TRUNC10]], [[COPY11]]
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(i16) = COPY [[TRUNC11]](i16)
    ; CHECK-NEXT: [[ADD11:%[0-9]+]]:_(i16) = G_ADD [[TRUNC11]], [[COPY12]]
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR10]](i32)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(i16) = COPY [[TRUNC12]](i16)
    ; CHECK-NEXT: [[ADD12:%[0-9]+]]:_(i16) = G_ADD [[TRUNC12]], [[COPY13]]
    ; CHECK-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(i16) = COPY [[TRUNC13]](i16)
    ; CHECK-NEXT: [[ADD13:%[0-9]+]]:_(i16) = G_ADD [[TRUNC13]], [[COPY14]]
    ; CHECK-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR12]](i32)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(i16) = COPY [[TRUNC14]](i16)
    ; CHECK-NEXT: [[ADD14:%[0-9]+]]:_(i16) = G_ADD [[TRUNC14]], [[COPY15]]
    ; CHECK-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR13]](i32)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(i16) = COPY [[TRUNC15]](i16)
    ; CHECK-NEXT: [[ADD15:%[0-9]+]]:_(i16) = G_ADD [[TRUNC15]], [[COPY16]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C3]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C3]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C3]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT4]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CHECK-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT7]], [[C3]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT6]], [[SHL3]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CHECK-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[ADD8]](i16)
    ; CHECK-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[ADD9]](i16)
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT9]], [[C3]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT8]], [[SHL4]]
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; CHECK-NEXT: [[ZEXT10:%[0-9]+]]:_(i32) = G_ZEXT [[ADD10]](i16)
    ; CHECK-NEXT: [[ZEXT11:%[0-9]+]]:_(i32) = G_ZEXT [[ADD11]](i16)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT11]], [[C3]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT10]], [[SHL5]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CHECK-NEXT: [[ZEXT12:%[0-9]+]]:_(i32) = G_ZEXT [[ADD12]](i16)
    ; CHECK-NEXT: [[ZEXT13:%[0-9]+]]:_(i32) = G_ZEXT [[ADD13]](i16)
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXT13]], [[C3]](i32)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[ZEXT12]], [[SHL6]]
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; CHECK-NEXT: [[ZEXT14:%[0-9]+]]:_(i32) = G_ZEXT [[ADD14]](i16)
    ; CHECK-NEXT: [[ZEXT15:%[0-9]+]]:_(i32) = G_ZEXT [[ADD15]](i16)
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXT15]], [[C3]](i32)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[ZEXT14]], [[SHL7]]
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<16 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>), [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>), [[BITCAST7]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<16 x i16>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<16 x i4>) = G_BITCAST %0(<2 x i32>)
    %2:_(<16 x i4>) = G_ADD %1, %1
    %3:_(<16 x i16>) = G_ANYEXT %2(<16 x i4>)
    S_ENDPGM 0, implicit %3(<16 x i16>)

...

---
name: test_bitcast_v16s4_to_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7

    ; CHECK-LABEL: name: test_bitcast_v16s4_to_v2s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<16 x i16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV5]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i4) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i4) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i4) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i4) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i4) = G_TRUNC [[BITCAST2]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i4) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i4) = G_TRUNC [[BITCAST3]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i4) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C3]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LSHR1]], [[C1]]
    ; CHECK-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[OR2]], [[SHL3]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LSHR2]], [[C1]]
    ; CHECK-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[OR3]], [[SHL4]]
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C1]]
    ; CHECK-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND6]], [[C6]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[OR4]], [[SHL5]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[LSHR3]], [[C1]]
    ; CHECK-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[OR5]], [[SHL6]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i4) = COPY [[TRUNC]](i4)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i4) = COPY [[TRUNC1]](i4)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i4) = COPY [[TRUNC2]](i4)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i4) = COPY [[TRUNC3]](i4)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i4) = COPY [[TRUNC4]](i4)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i4) = COPY [[TRUNC5]](i4)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i4) = COPY [[TRUNC6]](i4)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i4) = COPY [[TRUNC7]](i4)
    ; CHECK-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C1]]
    ; CHECK-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[LSHR4]], [[C1]]
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND9]], [[C2]](i32)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND8]], [[SHL7]]
    ; CHECK-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C1]]
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND10]], [[C3]](i32)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[OR7]], [[SHL8]]
    ; CHECK-NEXT: [[AND11:%[0-9]+]]:_(i32) = G_AND [[LSHR5]], [[C1]]
    ; CHECK-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND11]], [[C4]](i32)
    ; CHECK-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[OR8]], [[SHL9]]
    ; CHECK-NEXT: [[AND12:%[0-9]+]]:_(i32) = G_AND [[BITCAST6]], [[C1]]
    ; CHECK-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[AND12]], [[C]](i32)
    ; CHECK-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[OR9]], [[SHL10]]
    ; CHECK-NEXT: [[AND13:%[0-9]+]]:_(i32) = G_AND [[LSHR6]], [[C1]]
    ; CHECK-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[AND13]], [[C5]](i32)
    ; CHECK-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[OR10]], [[SHL11]]
    ; CHECK-NEXT: [[AND14:%[0-9]+]]:_(i32) = G_AND [[BITCAST7]], [[C1]]
    ; CHECK-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[AND14]], [[C6]](i32)
    ; CHECK-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[OR11]], [[SHL12]]
    ; CHECK-NEXT: [[AND15:%[0-9]+]]:_(i32) = G_AND [[LSHR7]], [[C1]]
    ; CHECK-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[AND15]], [[C7]](i32)
    ; CHECK-NEXT: [[OR13:%[0-9]+]]:_(i32) = G_OR [[OR12]], [[SHL13]]
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR6]](i32), [[OR13]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<16 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<16 x i4>) = G_TRUNC %0(<16 x i16>)
    %2:_(<2 x i32>) = G_BITCAST %1(<16 x i4>)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: test_bitcast_s64_to_v8s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_s64_to_v8s8
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C1]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[LSHR2]], [[LSHR2]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[TRUNC1]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[LSHR3]], [[LSHR3]]
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[TRUNC2]]
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[LSHR4]], [[LSHR4]]
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[TRUNC3]]
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[LSHR5]], [[LSHR5]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(<8 x i8>) = G_TRUNC [[BUILD_VECTOR]](<8 x i32>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[TRUNC4]](<8 x i8>)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(<8 x i8>) = G_BITCAST %0(i64)
    %2:_(<8 x i8>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2(<8 x i8>)

...

---
name: test_bitcast_v3s32_to_v12s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s32_to_v12s8
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C1]](i32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C2]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[COPY2]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[COPY3]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[COPY4]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[COPY5]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[COPY6]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i16) = COPY [[TRUNC6]](i16)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[COPY7]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i16) = COPY [[TRUNC7]](i16)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[COPY8]]
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(i16) = COPY [[TRUNC8]](i16)
    ; CHECK-NEXT: [[ADD8:%[0-9]+]]:_(i16) = G_ADD [[TRUNC8]], [[COPY9]]
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(i16) = COPY [[TRUNC9]](i16)
    ; CHECK-NEXT: [[ADD9:%[0-9]+]]:_(i16) = G_ADD [[TRUNC9]], [[COPY10]]
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(i16) = COPY [[TRUNC10]](i16)
    ; CHECK-NEXT: [[ADD10:%[0-9]+]]:_(i16) = G_ADD [[TRUNC10]], [[COPY11]]
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(i16) = COPY [[TRUNC11]](i16)
    ; CHECK-NEXT: [[ADD11:%[0-9]+]]:_(i16) = G_ADD [[TRUNC11]], [[COPY12]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[ANYEXT8:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD8]](i16)
    ; CHECK-NEXT: [[ANYEXT9:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD9]](i16)
    ; CHECK-NEXT: [[ANYEXT10:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD10]](i16)
    ; CHECK-NEXT: [[ANYEXT11:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD11]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<12 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32), [[ANYEXT8]](i32), [[ANYEXT9]](i32), [[ANYEXT10]](i32), [[ANYEXT11]](i32)
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(<12 x i8>) = G_TRUNC [[BUILD_VECTOR]](<12 x i32>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[TRUNC12]](<12 x i8>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<12 x i8>) = G_BITCAST %0(<3 x i32>)
    %2:_(<12 x i8>) = G_ADD %1, %1
    S_ENDPGM 0, implicit %2(<12 x i8>)

...

---
name: test_bitcast_v12s8_to_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11

    ; CHECK-LABEL: name: test_bitcast_v12s8_to_v3s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[UV2]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C2]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C3]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<4 x i32>)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV4]], [[C]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[UV5]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C1]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL3]]
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[UV6]], [[C]]
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND6]], [[C2]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[OR3]], [[SHL4]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[UV7]], [[C]]
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C3]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[OR4]], [[SHL5]]
    ; CHECK-NEXT: [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32), [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<4 x i32>)
    ; CHECK-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[UV8]], [[C]]
    ; CHECK-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[UV9]], [[C]]
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND9]], [[C1]](i32)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[AND8]], [[SHL6]]
    ; CHECK-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[UV10]], [[C]]
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND10]], [[C2]](i32)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[OR6]], [[SHL7]]
    ; CHECK-NEXT: [[AND11:%[0-9]+]]:_(i32) = G_AND [[UV11]], [[C]]
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND11]], [[C3]](i32)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[OR7]], [[SHL8]]
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    %3:_(<12 x i32>) = G_CONCAT_VECTORS %0(<4 x i32>), %1(<4 x i32>), %2(<4 x i32>)
    %4:_(<12 x i8>) = G_TRUNC %3(<12 x i32>)
    %5:_(<3 x i32>) = G_BITCAST %4(<12 x i8>)
    S_ENDPGM 0, implicit %5(<3 x i32>)
...

---
name: test_bitcast_v6s8_to_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v6s8_to_v3s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<6 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<6 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[COPY1]], [[TRUNC]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[COPY2]], [[TRUNC1]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[COPY3]], [[TRUNC2]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[COPY4]], [[TRUNC3]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[COPY5]], [[TRUNC4]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[COPY6]], [[TRUNC5]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[ADD]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[ADD1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[ADD2]], [[C]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[ADD3]], [[C]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C1]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[ADD4]], [[C]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[ADD5]], [[C]]
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C1]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL3]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C2]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL4]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT2]], [[C2]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT1]], [[SHL5]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>), [[BITCAST2]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<6 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<6 x i8>) = G_TRUNC %0(<6 x i32>)
    %2:_(<6 x i8>) = G_ADD %1, %1
    %3:_(<3 x i16>) = G_BITCAST %2(<6 x i8>)
    %4:_(<6 x i16>) = G_CONCAT_VECTORS %3(<3 x i16>), %3(<3 x i16>)
    S_ENDPGM 0, implicit %4(<6 x i16>)
...

---
name: test_bitcast_v3s16_to_v6s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_bitcast_v3s16_to_v6s8
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[COPY1]], [[TRUNC]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[COPY2]], [[TRUNC1]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[COPY3]], [[TRUNC2]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[ADD]], [[C]](i16)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i16) = G_LSHR [[ADD1]], [[C]](i16)
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[ADD2]], [[C]](i16)
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR]](i16)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR1]](i16)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C1]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR2]](i16)
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C1]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT4]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>), [[BITCAST2]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i16>) = G_TRUNC %0(<3 x i32>)
    %2:_(<3 x i16>) = G_ADD %1, %1
    %3:_(<6 x i8>) = G_BITCAST %2(<3 x i16>)
    %4:_(<6 x i16>) = G_ANYEXT %3(<6 x i8>)
    S_ENDPGM 0, implicit %4(<6 x i16>)
...

---
name: test_bitcast_v2s64_to_v16s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v2s64_to_v16s8
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV3]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C1]](i16)
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[UV4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[UV5]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC4]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR9:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC5]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR10:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC6]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR11:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC7]], [[C1]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[LSHR2]], [[LSHR2]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[TRUNC1]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[LSHR3]], [[LSHR3]]
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[TRUNC2]]
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[LSHR4]], [[LSHR4]]
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[TRUNC3]]
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[LSHR5]], [[LSHR5]]
    ; CHECK-NEXT: [[ADD8:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[TRUNC4]]
    ; CHECK-NEXT: [[ADD9:%[0-9]+]]:_(i16) = G_ADD [[LSHR8]], [[LSHR8]]
    ; CHECK-NEXT: [[ADD10:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[TRUNC5]]
    ; CHECK-NEXT: [[ADD11:%[0-9]+]]:_(i16) = G_ADD [[LSHR9]], [[LSHR9]]
    ; CHECK-NEXT: [[ADD12:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[TRUNC6]]
    ; CHECK-NEXT: [[ADD13:%[0-9]+]]:_(i16) = G_ADD [[LSHR10]], [[LSHR10]]
    ; CHECK-NEXT: [[ADD14:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[TRUNC7]]
    ; CHECK-NEXT: [[ADD15:%[0-9]+]]:_(i16) = G_ADD [[LSHR11]], [[LSHR11]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[ANYEXT8:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD8]](i16)
    ; CHECK-NEXT: [[ANYEXT9:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD9]](i16)
    ; CHECK-NEXT: [[ANYEXT10:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD10]](i16)
    ; CHECK-NEXT: [[ANYEXT11:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD11]](i16)
    ; CHECK-NEXT: [[ANYEXT12:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD12]](i16)
    ; CHECK-NEXT: [[ANYEXT13:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD13]](i16)
    ; CHECK-NEXT: [[ANYEXT14:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD14]](i16)
    ; CHECK-NEXT: [[ANYEXT15:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD15]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32), [[ANYEXT8]](i32), [[ANYEXT9]](i32), [[ANYEXT10]](i32), [[ANYEXT11]](i32), [[ANYEXT12]](i32), [[ANYEXT13]](i32), [[ANYEXT14]](i32), [[ANYEXT15]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<16 x i32>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<16 x i8>) = G_BITCAST %0(<2 x i64>)
    %2:_(<16 x i8>) = G_ADD %1, %1
    %3:_(<16 x i32>) = G_ANYEXT %2(<16 x i8>)
    S_ENDPGM 0, implicit %3(<16 x i32>)
...

---
name: test_bitcast_v16s8_to_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s8_to_v2s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32), [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32), [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32), [[UV12:%[0-9]+]]:_(i32), [[UV13:%[0-9]+]]:_(i32), [[UV14:%[0-9]+]]:_(i32), [[UV15:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<16 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i8) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i8) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i8) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i8) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i8) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i8) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i8) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i8) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC8]], [[C]]
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC9]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC10]], [[C]]
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC11]], [[C]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C1]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC12]], [[C]]
    ; CHECK-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC13]], [[C]]
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C1]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC14]], [[C]]
    ; CHECK-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC15]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C1]](i16)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL3]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C2]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL5]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR4]](i32), [[OR5]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i8) = COPY [[TRUNC2]](i8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i8) = COPY [[TRUNC3]](i8)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i8) = COPY [[TRUNC6]](i8)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i8) = COPY [[TRUNC7]](i8)
    ; CHECK-NEXT: [[TRUNC16:%[0-9]+]]:_(i16) = G_TRUNC [[UV8]](i32)
    ; CHECK-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[TRUNC16]], [[C]]
    ; CHECK-NEXT: [[TRUNC17:%[0-9]+]]:_(i16) = G_TRUNC [[UV9]](i32)
    ; CHECK-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[TRUNC17]], [[C]]
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[AND9]], [[C1]](i16)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i16) = G_OR [[AND8]], [[SHL6]]
    ; CHECK-NEXT: [[TRUNC18:%[0-9]+]]:_(i16) = G_TRUNC [[UV10]](i32)
    ; CHECK-NEXT: [[AND10:%[0-9]+]]:_(i16) = G_AND [[TRUNC18]], [[C]]
    ; CHECK-NEXT: [[TRUNC19:%[0-9]+]]:_(i16) = G_TRUNC [[UV11]](i32)
    ; CHECK-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[TRUNC19]], [[C]]
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i16) = G_SHL [[AND11]], [[C1]](i16)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i16) = G_OR [[AND10]], [[SHL7]]
    ; CHECK-NEXT: [[TRUNC20:%[0-9]+]]:_(i16) = G_TRUNC [[UV12]](i32)
    ; CHECK-NEXT: [[AND12:%[0-9]+]]:_(i16) = G_AND [[TRUNC20]], [[C]]
    ; CHECK-NEXT: [[TRUNC21:%[0-9]+]]:_(i16) = G_TRUNC [[UV13]](i32)
    ; CHECK-NEXT: [[AND13:%[0-9]+]]:_(i16) = G_AND [[TRUNC21]], [[C]]
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i16) = G_SHL [[AND13]], [[C1]](i16)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i16) = G_OR [[AND12]], [[SHL8]]
    ; CHECK-NEXT: [[TRUNC22:%[0-9]+]]:_(i16) = G_TRUNC [[UV14]](i32)
    ; CHECK-NEXT: [[AND14:%[0-9]+]]:_(i16) = G_AND [[TRUNC22]], [[C]]
    ; CHECK-NEXT: [[TRUNC23:%[0-9]+]]:_(i16) = G_TRUNC [[UV15]](i32)
    ; CHECK-NEXT: [[AND15:%[0-9]+]]:_(i16) = G_AND [[TRUNC23]], [[C]]
    ; CHECK-NEXT: [[SHL9:%[0-9]+]]:_(i16) = G_SHL [[AND15]], [[C1]](i16)
    ; CHECK-NEXT: [[OR9:%[0-9]+]]:_(i16) = G_OR [[AND14]], [[SHL9]]
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[OR6]](i16)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[OR7]](i16)
    ; CHECK-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C2]](i32)
    ; CHECK-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[ZEXT4]], [[SHL10]]
    ; CHECK-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[OR8]](i16)
    ; CHECK-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[OR9]](i16)
    ; CHECK-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[ZEXT7]], [[C2]](i32)
    ; CHECK-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[ZEXT6]], [[SHL11]]
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR10]](i32), [[OR11]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[MV]](i64), [[MV1]](i64)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i64>)
    %0:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x i8>) = G_TRUNC %0(<16 x i32>)
    %2:_(<2 x i64>) = G_BITCAST %1(<16 x i8>)
    S_ENDPGM 0, implicit %2(<2 x i64>)
...

---
name: test_bitcast_v4s32_to_v16s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-LABEL: name: test_bitcast_v4s32_to_v16s8
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C1]](i32)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[C2]](i32)
    ; CHECK-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[UV3]], [[C]](i32)
    ; CHECK-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[UV3]], [[C1]](i32)
    ; CHECK-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[UV3]], [[C2]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[COPY1]]
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC1]](i16)
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[COPY2]]
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i16) = COPY [[TRUNC2]](i16)
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[COPY3]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i16) = COPY [[TRUNC3]](i16)
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[COPY4]]
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i16) = COPY [[TRUNC4]](i16)
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[COPY5]]
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i16) = COPY [[TRUNC5]](i16)
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[COPY6]]
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i16) = COPY [[TRUNC6]](i16)
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[COPY7]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i16) = COPY [[TRUNC7]](i16)
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[COPY8]]
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(i16) = COPY [[TRUNC8]](i16)
    ; CHECK-NEXT: [[ADD8:%[0-9]+]]:_(i16) = G_ADD [[TRUNC8]], [[COPY9]]
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(i16) = COPY [[TRUNC9]](i16)
    ; CHECK-NEXT: [[ADD9:%[0-9]+]]:_(i16) = G_ADD [[TRUNC9]], [[COPY10]]
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(i16) = COPY [[TRUNC10]](i16)
    ; CHECK-NEXT: [[ADD10:%[0-9]+]]:_(i16) = G_ADD [[TRUNC10]], [[COPY11]]
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(i16) = COPY [[TRUNC11]](i16)
    ; CHECK-NEXT: [[ADD11:%[0-9]+]]:_(i16) = G_ADD [[TRUNC11]], [[COPY12]]
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(i16) = COPY [[TRUNC12]](i16)
    ; CHECK-NEXT: [[ADD12:%[0-9]+]]:_(i16) = G_ADD [[TRUNC12]], [[COPY13]]
    ; CHECK-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(i16) = COPY [[TRUNC13]](i16)
    ; CHECK-NEXT: [[ADD13:%[0-9]+]]:_(i16) = G_ADD [[TRUNC13]], [[COPY14]]
    ; CHECK-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR10]](i32)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(i16) = COPY [[TRUNC14]](i16)
    ; CHECK-NEXT: [[ADD14:%[0-9]+]]:_(i16) = G_ADD [[TRUNC14]], [[COPY15]]
    ; CHECK-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(i16) = COPY [[TRUNC15]](i16)
    ; CHECK-NEXT: [[ADD15:%[0-9]+]]:_(i16) = G_ADD [[TRUNC15]], [[COPY16]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[ANYEXT8:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD8]](i16)
    ; CHECK-NEXT: [[ANYEXT9:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD9]](i16)
    ; CHECK-NEXT: [[ANYEXT10:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD10]](i16)
    ; CHECK-NEXT: [[ANYEXT11:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD11]](i16)
    ; CHECK-NEXT: [[ANYEXT12:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD12]](i16)
    ; CHECK-NEXT: [[ANYEXT13:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD13]](i16)
    ; CHECK-NEXT: [[ANYEXT14:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD14]](i16)
    ; CHECK-NEXT: [[ANYEXT15:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD15]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32), [[ANYEXT8]](i32), [[ANYEXT9]](i32), [[ANYEXT10]](i32), [[ANYEXT11]](i32), [[ANYEXT12]](i32), [[ANYEXT13]](i32), [[ANYEXT14]](i32), [[ANYEXT15]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<16 x i32>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<16 x i8>) = G_BITCAST %0(<4 x i32>)
    %2:_(<16 x i8>) = G_ADD %1, %1
    %3:_(<16 x i32>) = G_ANYEXT %2(<16 x i8>)
    S_ENDPGM 0, implicit %3(<16 x i32>)
...

---
name: test_bitcast_v16s8_to_v4s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s8_to_v4s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32), [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32), [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32), [[UV12:%[0-9]+]]:_(i32), [[UV13:%[0-9]+]]:_(i32), [[UV14:%[0-9]+]]:_(i32), [[UV15:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<16 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i8) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i8) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i8) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i8) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[UV2]], [[C]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C2]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C]]
    ; CHECK-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C3]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i8) = COPY [[TRUNC2]](i8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i8) = COPY [[TRUNC3]](i8)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i8) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i8) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i8) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i8) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV4]], [[C]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[UV5]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C1]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL3]]
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[UV6]], [[C]]
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND6]], [[C2]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[OR3]], [[SHL4]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[UV7]], [[C]]
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C3]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[OR4]], [[SHL5]]
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i8) = COPY [[TRUNC2]](i8)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i8) = COPY [[TRUNC3]](i8)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(i8) = COPY [[TRUNC6]](i8)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(i8) = COPY [[TRUNC7]](i8)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i8) = G_TRUNC [[UV8]](i32)
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i8) = G_TRUNC [[UV9]](i32)
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i8) = G_TRUNC [[UV10]](i32)
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i8) = G_TRUNC [[UV11]](i32)
    ; CHECK-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[UV8]], [[C]]
    ; CHECK-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[UV9]], [[C]]
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND9]], [[C1]](i32)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[AND8]], [[SHL6]]
    ; CHECK-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[UV10]], [[C]]
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND10]], [[C2]](i32)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[OR6]], [[SHL7]]
    ; CHECK-NEXT: [[AND11:%[0-9]+]]:_(i32) = G_AND [[UV11]], [[C]]
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND11]], [[C3]](i32)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[OR7]], [[SHL8]]
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(i8) = COPY [[TRUNC2]](i8)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(i8) = COPY [[TRUNC3]](i8)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:_(i8) = COPY [[TRUNC6]](i8)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:_(i8) = COPY [[TRUNC7]](i8)
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:_(i8) = COPY [[TRUNC10]](i8)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:_(i8) = COPY [[TRUNC11]](i8)
    ; CHECK-NEXT: [[AND12:%[0-9]+]]:_(i32) = G_AND [[UV12]], [[C]]
    ; CHECK-NEXT: [[AND13:%[0-9]+]]:_(i32) = G_AND [[UV13]], [[C]]
    ; CHECK-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND13]], [[C1]](i32)
    ; CHECK-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[AND12]], [[SHL9]]
    ; CHECK-NEXT: [[AND14:%[0-9]+]]:_(i32) = G_AND [[UV14]], [[C]]
    ; CHECK-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[AND14]], [[C2]](i32)
    ; CHECK-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[OR9]], [[SHL10]]
    ; CHECK-NEXT: [[AND15:%[0-9]+]]:_(i32) = G_AND [[UV15]], [[C]]
    ; CHECK-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[AND15]], [[C3]](i32)
    ; CHECK-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[OR10]], [[SHL11]]
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    %0:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x i8>) = G_TRUNC %0(<16 x i32>)
    %2:_(<4 x i32>) = G_BITCAST %1(<16 x i8>)
    S_ENDPGM 0, implicit %2(<4 x i32>)
...

---
name: test_bitcast_v8s16_to_v16s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s16_to_v16s8
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<8 x i16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC4]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR9:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC5]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR10:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC6]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR11:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC7]], [[C1]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[LSHR4]], [[LSHR4]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[TRUNC1]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[LSHR5]], [[LSHR5]]
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[TRUNC2]]
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[LSHR6]], [[LSHR6]]
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[TRUNC3]]
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[LSHR7]], [[LSHR7]]
    ; CHECK-NEXT: [[ADD8:%[0-9]+]]:_(i16) = G_ADD [[TRUNC4]], [[TRUNC4]]
    ; CHECK-NEXT: [[ADD9:%[0-9]+]]:_(i16) = G_ADD [[LSHR8]], [[LSHR8]]
    ; CHECK-NEXT: [[ADD10:%[0-9]+]]:_(i16) = G_ADD [[TRUNC5]], [[TRUNC5]]
    ; CHECK-NEXT: [[ADD11:%[0-9]+]]:_(i16) = G_ADD [[LSHR9]], [[LSHR9]]
    ; CHECK-NEXT: [[ADD12:%[0-9]+]]:_(i16) = G_ADD [[TRUNC6]], [[TRUNC6]]
    ; CHECK-NEXT: [[ADD13:%[0-9]+]]:_(i16) = G_ADD [[LSHR10]], [[LSHR10]]
    ; CHECK-NEXT: [[ADD14:%[0-9]+]]:_(i16) = G_ADD [[TRUNC7]], [[TRUNC7]]
    ; CHECK-NEXT: [[ADD15:%[0-9]+]]:_(i16) = G_ADD [[LSHR11]], [[LSHR11]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ANYEXT3:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[ANYEXT4:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ANYEXT5:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[ANYEXT6:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ANYEXT7:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[ANYEXT8:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD8]](i16)
    ; CHECK-NEXT: [[ANYEXT9:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD9]](i16)
    ; CHECK-NEXT: [[ANYEXT10:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD10]](i16)
    ; CHECK-NEXT: [[ANYEXT11:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD11]](i16)
    ; CHECK-NEXT: [[ANYEXT12:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD12]](i16)
    ; CHECK-NEXT: [[ANYEXT13:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD13]](i16)
    ; CHECK-NEXT: [[ANYEXT14:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD14]](i16)
    ; CHECK-NEXT: [[ANYEXT15:%[0-9]+]]:_(i32) = G_ANYEXT [[ADD15]](i16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32), [[ANYEXT3]](i32), [[ANYEXT4]](i32), [[ANYEXT5]](i32), [[ANYEXT6]](i32), [[ANYEXT7]](i32), [[ANYEXT8]](i32), [[ANYEXT9]](i32), [[ANYEXT10]](i32), [[ANYEXT11]](i32), [[ANYEXT12]](i32), [[ANYEXT13]](i32), [[ANYEXT14]](i32), [[ANYEXT15]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<16 x i32>)
    %0:_(<8 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<16 x i8>) = G_BITCAST %0(<8 x i16>)
    %2:_(<16 x i8>) = G_ADD %1, %1
    %3:_(<16 x i32>) = G_ANYEXT %2(<16 x i8>)
    S_ENDPGM 0, implicit %3(<16 x i32>)
...

---
name: test_bitcast_v16s8_to_v8s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15

    ; CHECK-LABEL: name: test_bitcast_v16s8_to_v8s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32), [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32), [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32), [[UV12:%[0-9]+]]:_(i32), [[UV13:%[0-9]+]]:_(i32), [[UV14:%[0-9]+]]:_(i32), [[UV15:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<16 x i32>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i8) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i8) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C]]
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i8) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i8) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[UV2]](i32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C]]
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C1]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i8) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i8) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC10]], [[C]]
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC11]], [[C]]
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C1]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(i8) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[TRUNC13:%[0-9]+]]:_(i8) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC14]], [[C]]
    ; CHECK-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC15]], [[C]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C1]](i16)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL3]]
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY16:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY17:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY18:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY19:%[0-9]+]]:_(i8) = COPY [[TRUNC12]](i8)
    ; CHECK-NEXT: [[COPY20:%[0-9]+]]:_(i8) = COPY [[TRUNC13]](i8)
    ; CHECK-NEXT: [[TRUNC16:%[0-9]+]]:_(i8) = G_TRUNC [[UV8]](i32)
    ; CHECK-NEXT: [[TRUNC17:%[0-9]+]]:_(i8) = G_TRUNC [[UV9]](i32)
    ; CHECK-NEXT: [[TRUNC18:%[0-9]+]]:_(i16) = G_TRUNC [[UV8]](i32)
    ; CHECK-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[TRUNC18]], [[C]]
    ; CHECK-NEXT: [[TRUNC19:%[0-9]+]]:_(i16) = G_TRUNC [[UV9]](i32)
    ; CHECK-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[TRUNC19]], [[C]]
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i16) = G_SHL [[AND9]], [[C1]](i16)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i16) = G_OR [[AND8]], [[SHL4]]
    ; CHECK-NEXT: [[COPY21:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY22:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY23:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY24:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY25:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY26:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY27:%[0-9]+]]:_(i8) = COPY [[TRUNC12]](i8)
    ; CHECK-NEXT: [[COPY28:%[0-9]+]]:_(i8) = COPY [[TRUNC13]](i8)
    ; CHECK-NEXT: [[COPY29:%[0-9]+]]:_(i8) = COPY [[TRUNC16]](i8)
    ; CHECK-NEXT: [[COPY30:%[0-9]+]]:_(i8) = COPY [[TRUNC17]](i8)
    ; CHECK-NEXT: [[TRUNC20:%[0-9]+]]:_(i8) = G_TRUNC [[UV10]](i32)
    ; CHECK-NEXT: [[TRUNC21:%[0-9]+]]:_(i8) = G_TRUNC [[UV11]](i32)
    ; CHECK-NEXT: [[TRUNC22:%[0-9]+]]:_(i16) = G_TRUNC [[UV10]](i32)
    ; CHECK-NEXT: [[AND10:%[0-9]+]]:_(i16) = G_AND [[TRUNC22]], [[C]]
    ; CHECK-NEXT: [[TRUNC23:%[0-9]+]]:_(i16) = G_TRUNC [[UV11]](i32)
    ; CHECK-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[TRUNC23]], [[C]]
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i16) = G_SHL [[AND11]], [[C1]](i16)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i16) = G_OR [[AND10]], [[SHL5]]
    ; CHECK-NEXT: [[COPY31:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY32:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY33:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY34:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY35:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY36:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY37:%[0-9]+]]:_(i8) = COPY [[TRUNC12]](i8)
    ; CHECK-NEXT: [[COPY38:%[0-9]+]]:_(i8) = COPY [[TRUNC13]](i8)
    ; CHECK-NEXT: [[COPY39:%[0-9]+]]:_(i8) = COPY [[TRUNC16]](i8)
    ; CHECK-NEXT: [[COPY40:%[0-9]+]]:_(i8) = COPY [[TRUNC17]](i8)
    ; CHECK-NEXT: [[COPY41:%[0-9]+]]:_(i8) = COPY [[TRUNC20]](i8)
    ; CHECK-NEXT: [[COPY42:%[0-9]+]]:_(i8) = COPY [[TRUNC21]](i8)
    ; CHECK-NEXT: [[TRUNC24:%[0-9]+]]:_(i8) = G_TRUNC [[UV12]](i32)
    ; CHECK-NEXT: [[TRUNC25:%[0-9]+]]:_(i8) = G_TRUNC [[UV13]](i32)
    ; CHECK-NEXT: [[TRUNC26:%[0-9]+]]:_(i16) = G_TRUNC [[UV12]](i32)
    ; CHECK-NEXT: [[AND12:%[0-9]+]]:_(i16) = G_AND [[TRUNC26]], [[C]]
    ; CHECK-NEXT: [[TRUNC27:%[0-9]+]]:_(i16) = G_TRUNC [[UV13]](i32)
    ; CHECK-NEXT: [[AND13:%[0-9]+]]:_(i16) = G_AND [[TRUNC27]], [[C]]
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[AND13]], [[C1]](i16)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i16) = G_OR [[AND12]], [[SHL6]]
    ; CHECK-NEXT: [[COPY43:%[0-9]+]]:_(i8) = COPY [[TRUNC]](i8)
    ; CHECK-NEXT: [[COPY44:%[0-9]+]]:_(i8) = COPY [[TRUNC1]](i8)
    ; CHECK-NEXT: [[COPY45:%[0-9]+]]:_(i8) = COPY [[TRUNC4]](i8)
    ; CHECK-NEXT: [[COPY46:%[0-9]+]]:_(i8) = COPY [[TRUNC5]](i8)
    ; CHECK-NEXT: [[COPY47:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY48:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY49:%[0-9]+]]:_(i8) = COPY [[TRUNC12]](i8)
    ; CHECK-NEXT: [[COPY50:%[0-9]+]]:_(i8) = COPY [[TRUNC13]](i8)
    ; CHECK-NEXT: [[COPY51:%[0-9]+]]:_(i8) = COPY [[TRUNC16]](i8)
    ; CHECK-NEXT: [[COPY52:%[0-9]+]]:_(i8) = COPY [[TRUNC17]](i8)
    ; CHECK-NEXT: [[COPY53:%[0-9]+]]:_(i8) = COPY [[TRUNC20]](i8)
    ; CHECK-NEXT: [[COPY54:%[0-9]+]]:_(i8) = COPY [[TRUNC21]](i8)
    ; CHECK-NEXT: [[COPY55:%[0-9]+]]:_(i8) = COPY [[TRUNC24]](i8)
    ; CHECK-NEXT: [[COPY56:%[0-9]+]]:_(i8) = COPY [[TRUNC25]](i8)
    ; CHECK-NEXT: [[TRUNC28:%[0-9]+]]:_(i16) = G_TRUNC [[UV14]](i32)
    ; CHECK-NEXT: [[AND14:%[0-9]+]]:_(i16) = G_AND [[TRUNC28]], [[C]]
    ; CHECK-NEXT: [[TRUNC29:%[0-9]+]]:_(i16) = G_TRUNC [[UV15]](i32)
    ; CHECK-NEXT: [[AND15:%[0-9]+]]:_(i16) = G_AND [[TRUNC29]], [[C]]
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i16) = G_SHL [[AND15]], [[C1]](i16)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i16) = G_OR [[AND14]], [[SHL7]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C2]](i32)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL8]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; CHECK-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C2]](i32)
    ; CHECK-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL9]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[OR4]](i16)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[OR5]](i16)
    ; CHECK-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C2]](i32)
    ; CHECK-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[ZEXT4]], [[SHL10]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; CHECK-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[OR6]](i16)
    ; CHECK-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[OR7]](i16)
    ; CHECK-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[ZEXT7]], [[C2]](i32)
    ; CHECK-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[ZEXT6]], [[SHL11]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR11]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>), [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<8 x i16>)
    %0:_(<16 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15
    %1:_(<16 x i8>) = G_TRUNC %0(<16 x i32>)
    %2:_(<8 x i16>) = G_BITCAST %1(<16 x i8>)
    S_ENDPGM 0, implicit %2(<8 x i16>)
...

---
name: test_bitcast_v3s64_to_v6s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v3s64_to_v6s32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i32>) = G_BITCAST [[COPY]](<3 x i64>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<6 x i32>)
    %0:_(<3 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<6 x i32>) = G_BITCAST %0(<3 x i64>)
    S_ENDPGM 0, implicit %1(<6 x i32>)
...

---
name: test_bitcast_v6s32_to_v3s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v6s32_to_v3s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<6 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x i64>) = G_BITCAST [[COPY]](<6 x i32>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<3 x i64>)
    %0:_(<6 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<3 x i64>) = G_BITCAST %0(<6 x i32>)
    S_ENDPGM 0, implicit %1(<3 x i64>)
...

---
name: test_bitcast_v3s64_to_v12s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v3s64_to_v12s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<12 x i16>) = G_BITCAST [[COPY]](<3 x i64>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<12 x i16>)
    %0:_(<3 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<12 x i16>) = G_BITCAST %0(<3 x i64>)
    S_ENDPGM 0, implicit %1(<12 x i16>)
...

---
name: test_bitcast_v12s16_to_v3s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v12s16_to_v3s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<12 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x i64>) = G_BITCAST [[COPY]](<12 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BITCAST]](<3 x i64>)
    %0:_(<12 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<3 x i64>) = G_BITCAST %0(<12 x i16>)
    S_ENDPGM 0, implicit %1(<3 x i64>)
...

---
name: test_bitcast_v3s64_to_v24s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5

    ; CHECK-LABEL: name: test_bitcast_v3s64_to_v24s8
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<3 x i64>)
    ; CHECK-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[UV3]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV3]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV4]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C1]](i16)
    ; CHECK-NEXT: [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[UV5]](i32)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[UV5]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[UV6]](i32)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[UV6]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC4]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR9:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC5]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR10:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC6]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR11:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC7]], [[C1]](i16)
    ; CHECK-NEXT: [[UV7:%[0-9]+]]:_(i32), [[UV8:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV2]](i64)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[UV7]](i32)
    ; CHECK-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[UV7]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR12]](i32)
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[UV8]](i32)
    ; CHECK-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[UV8]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR13]](i32)
    ; CHECK-NEXT: [[LSHR14:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC8]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR15:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC9]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR16:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC10]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR17:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC11]], [[C1]](i16)
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C2]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR2]](i16)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT]], [[C]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR3]](i16)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL1]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV4]], [[C2]]
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR4]](i16)
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT2]], [[C]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND1]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR5]](i16)
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[LSHR1]], [[SHL3]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[UV5]], [[C2]]
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR8]](i16)
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT4]], [[C]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL4]]
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR9]](i16)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[LSHR6]], [[SHL5]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[UV6]], [[C2]]
    ; CHECK-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR10]](i16)
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXT6]], [[C]](i32)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[AND3]], [[SHL6]]
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; CHECK-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR11]](i16)
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXT7]], [[C]](i32)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[LSHR7]], [[SHL7]]
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV7]], [[C2]]
    ; CHECK-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR14]](i16)
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[ZEXT8]], [[C]](i32)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL8]]
    ; CHECK-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; CHECK-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR15]](i16)
    ; CHECK-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXT9]], [[C]](i32)
    ; CHECK-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[LSHR12]], [[SHL9]]
    ; CHECK-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[UV8]], [[C2]]
    ; CHECK-NEXT: [[ZEXT10:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR16]](i16)
    ; CHECK-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXT10]], [[C]](i32)
    ; CHECK-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[AND5]], [[SHL10]]
    ; CHECK-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; CHECK-NEXT: [[ZEXT11:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR17]](i16)
    ; CHECK-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[ZEXT11]], [[C]](i32)
    ; CHECK-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[LSHR13]], [[SHL11]]
    ; CHECK-NEXT: [[BITCAST11:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR11]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<24 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>), [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>), [[BITCAST7]](<2 x i16>), [[BITCAST8]](<2 x i16>), [[BITCAST9]](<2 x i16>), [[BITCAST10]](<2 x i16>), [[BITCAST11]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<24 x i16>)
    %0:_(<3 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<24 x i8>) = G_BITCAST %0(<3 x i64>)
    %2:_(<24 x i16>) = G_ANYEXT %1(<24 x i8>)
    S_ENDPGM 0, implicit %2(<24 x i16>)
...

---
name: test_bitcast_v24s8_to_v3s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11

    ; CHECK-LABEL: name: test_bitcast_v24s8_to_v3s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<12 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<12 x i16>) = COPY $vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<12 x i16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C2]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C1]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C2]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C1]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C1]]
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C2]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C1]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C1]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C2]](i16)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL3]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL5]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR4]](i32), [[OR5]](i32)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV5]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; CHECK-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>), [[UV8:%[0-9]+]]:_(<2 x i16>), [[UV9:%[0-9]+]]:_(<2 x i16>), [[UV10:%[0-9]+]]:_(<2 x i16>), [[UV11:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<12 x i16>)
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; CHECK-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; CHECK-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; CHECK-NEXT: [[AND8:%[0-9]+]]:_(i16) = G_AND [[TRUNC8]], [[C1]]
    ; CHECK-NEXT: [[AND9:%[0-9]+]]:_(i16) = G_AND [[TRUNC9]], [[C1]]
    ; CHECK-NEXT: [[SHL6:%[0-9]+]]:_(i16) = G_SHL [[AND9]], [[C2]](i16)
    ; CHECK-NEXT: [[OR6:%[0-9]+]]:_(i16) = G_OR [[AND8]], [[SHL6]]
    ; CHECK-NEXT: [[AND10:%[0-9]+]]:_(i16) = G_AND [[TRUNC10]], [[C1]]
    ; CHECK-NEXT: [[AND11:%[0-9]+]]:_(i16) = G_AND [[TRUNC11]], [[C1]]
    ; CHECK-NEXT: [[SHL7:%[0-9]+]]:_(i16) = G_SHL [[AND11]], [[C2]](i16)
    ; CHECK-NEXT: [[OR7:%[0-9]+]]:_(i16) = G_OR [[AND10]], [[SHL7]]
    ; CHECK-NEXT: [[AND12:%[0-9]+]]:_(i16) = G_AND [[TRUNC12]], [[C1]]
    ; CHECK-NEXT: [[AND13:%[0-9]+]]:_(i16) = G_AND [[TRUNC13]], [[C1]]
    ; CHECK-NEXT: [[SHL8:%[0-9]+]]:_(i16) = G_SHL [[AND13]], [[C2]](i16)
    ; CHECK-NEXT: [[OR8:%[0-9]+]]:_(i16) = G_OR [[AND12]], [[SHL8]]
    ; CHECK-NEXT: [[AND14:%[0-9]+]]:_(i16) = G_AND [[TRUNC14]], [[C1]]
    ; CHECK-NEXT: [[AND15:%[0-9]+]]:_(i16) = G_AND [[TRUNC15]], [[C1]]
    ; CHECK-NEXT: [[SHL9:%[0-9]+]]:_(i16) = G_SHL [[AND15]], [[C2]](i16)
    ; CHECK-NEXT: [[OR9:%[0-9]+]]:_(i16) = G_OR [[AND14]], [[SHL9]]
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[OR6]](i16)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[OR7]](i16)
    ; CHECK-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C]](i32)
    ; CHECK-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[ZEXT4]], [[SHL10]]
    ; CHECK-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[OR8]](i16)
    ; CHECK-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[OR9]](i16)
    ; CHECK-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[ZEXT7]], [[C]](i32)
    ; CHECK-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[ZEXT6]], [[SHL11]]
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR10]](i32), [[OR11]](i32)
    ; CHECK-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[UV8]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC16:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; CHECK-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC17:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; CHECK-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[UV9]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC18:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; CHECK-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC19:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; CHECK-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[UV10]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC20:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; CHECK-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC21:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR10]](i32)
    ; CHECK-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[UV11]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC22:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST11]](i32)
    ; CHECK-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST11]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC23:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; CHECK-NEXT: [[AND16:%[0-9]+]]:_(i16) = G_AND [[TRUNC16]], [[C1]]
    ; CHECK-NEXT: [[AND17:%[0-9]+]]:_(i16) = G_AND [[TRUNC17]], [[C1]]
    ; CHECK-NEXT: [[SHL12:%[0-9]+]]:_(i16) = G_SHL [[AND17]], [[C2]](i16)
    ; CHECK-NEXT: [[OR12:%[0-9]+]]:_(i16) = G_OR [[AND16]], [[SHL12]]
    ; CHECK-NEXT: [[AND18:%[0-9]+]]:_(i16) = G_AND [[TRUNC18]], [[C1]]
    ; CHECK-NEXT: [[AND19:%[0-9]+]]:_(i16) = G_AND [[TRUNC19]], [[C1]]
    ; CHECK-NEXT: [[SHL13:%[0-9]+]]:_(i16) = G_SHL [[AND19]], [[C2]](i16)
    ; CHECK-NEXT: [[OR13:%[0-9]+]]:_(i16) = G_OR [[AND18]], [[SHL13]]
    ; CHECK-NEXT: [[AND20:%[0-9]+]]:_(i16) = G_AND [[TRUNC20]], [[C1]]
    ; CHECK-NEXT: [[AND21:%[0-9]+]]:_(i16) = G_AND [[TRUNC21]], [[C1]]
    ; CHECK-NEXT: [[SHL14:%[0-9]+]]:_(i16) = G_SHL [[AND21]], [[C2]](i16)
    ; CHECK-NEXT: [[OR14:%[0-9]+]]:_(i16) = G_OR [[AND20]], [[SHL14]]
    ; CHECK-NEXT: [[AND22:%[0-9]+]]:_(i16) = G_AND [[TRUNC22]], [[C1]]
    ; CHECK-NEXT: [[AND23:%[0-9]+]]:_(i16) = G_AND [[TRUNC23]], [[C1]]
    ; CHECK-NEXT: [[SHL15:%[0-9]+]]:_(i16) = G_SHL [[AND23]], [[C2]](i16)
    ; CHECK-NEXT: [[OR15:%[0-9]+]]:_(i16) = G_OR [[AND22]], [[SHL15]]
    ; CHECK-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[OR12]](i16)
    ; CHECK-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[OR13]](i16)
    ; CHECK-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[ZEXT9]], [[C]](i32)
    ; CHECK-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[ZEXT8]], [[SHL16]]
    ; CHECK-NEXT: [[ZEXT10:%[0-9]+]]:_(i32) = G_ZEXT [[OR14]](i16)
    ; CHECK-NEXT: [[ZEXT11:%[0-9]+]]:_(i32) = G_ZEXT [[OR15]](i16)
    ; CHECK-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXT11]], [[C]](i32)
    ; CHECK-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[ZEXT10]], [[SHL17]]
    ; CHECK-NEXT: [[MV2:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[OR16]](i32), [[OR17]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i64>) = G_BUILD_VECTOR [[MV]](i64), [[MV1]](i64), [[MV2]](i64)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<3 x i64>)
    %0:_(<12 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5
    %1:_(<12 x i16>) = COPY $vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11
    %2:_(<24 x i16>) = G_CONCAT_VECTORS %0(<12 x i16>), %1(<12 x i16>)
    %3:_(<24 x i8>) = G_TRUNC %2(<24 x i16>)
    %4:_(<3 x i64>) = G_BITCAST %3(<24 x i8>)
    S_ENDPGM 0, implicit %4(<3 x i64>)
...

---
name: test_bitcast_v4s16_to_v8s8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_bitcast_v4s16_to_v8s8
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[C1]](i16)
    ; CHECK-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[C1]](i16)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[TRUNC]], [[TRUNC]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[LSHR2]], [[LSHR2]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[TRUNC1]], [[TRUNC1]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[LSHR3]], [[LSHR3]]
    ; CHECK-NEXT: [[ADD4:%[0-9]+]]:_(i16) = G_ADD [[TRUNC2]], [[TRUNC2]]
    ; CHECK-NEXT: [[ADD5:%[0-9]+]]:_(i16) = G_ADD [[LSHR4]], [[LSHR4]]
    ; CHECK-NEXT: [[ADD6:%[0-9]+]]:_(i16) = G_ADD [[TRUNC3]], [[TRUNC3]]
    ; CHECK-NEXT: [[ADD7:%[0-9]+]]:_(i16) = G_ADD [[LSHR5]], [[LSHR5]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CHECK-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[ADD4]](i16)
    ; CHECK-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[ADD5]](i16)
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT5]], [[C]](i32)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT4]], [[SHL2]]
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CHECK-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[ADD6]](i16)
    ; CHECK-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[ADD7]](i16)
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT7]], [[C]](i32)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT6]], [[SHL3]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<8 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<8 x i8>) = G_BITCAST %0(<4 x i16>)
    %2:_(<8 x i8>) = G_ADD %1, %1
    %3:_(<8 x i16>) = G_ANYEXT %2(<8 x i8>)
    S_ENDPGM 0, implicit %3(<8 x i16>)
...

---
name: test_bitcast_v8s8_to_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_bitcast_v8s8_to_v4s16
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<8 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<8 x i16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; CHECK-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; CHECK-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; CHECK-NEXT: [[TRUNC8:%[0-9]+]]:_(i8) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[TRUNC9:%[0-9]+]]:_(i8) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; CHECK-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C2]](i16)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[TRUNC10:%[0-9]+]]:_(i8) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[TRUNC11:%[0-9]+]]:_(i8) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C1]]
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C1]]
    ; CHECK-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C2]](i16)
    ; CHECK-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:_(i8) = COPY [[TRUNC10]](i8)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:_(i8) = COPY [[TRUNC11]](i8)
    ; CHECK-NEXT: [[TRUNC12:%[0-9]+]]:_(i8) = G_TRUNC [[BITCAST2]](i32)
    ; CHECK-NEXT: [[TRUNC13:%[0-9]+]]:_(i8) = G_TRUNC [[LSHR2]](i32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:_(i16) = G_AND [[TRUNC4]], [[C1]]
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:_(i16) = G_AND [[TRUNC5]], [[C1]]
    ; CHECK-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND5]], [[C2]](i16)
    ; CHECK-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND4]], [[SHL2]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:_(i8) = COPY [[TRUNC8]](i8)
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:_(i8) = COPY [[TRUNC9]](i8)
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:_(i8) = COPY [[TRUNC10]](i8)
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:_(i8) = COPY [[TRUNC11]](i8)
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:_(i8) = COPY [[TRUNC12]](i8)
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:_(i8) = COPY [[TRUNC13]](i8)
    ; CHECK-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC6]], [[C1]]
    ; CHECK-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC7]], [[C1]]
    ; CHECK-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C2]](i16)
    ; CHECK-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL3]]
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i16) = G_ADD [[OR]], [[OR]]
    ; CHECK-NEXT: [[ADD1:%[0-9]+]]:_(i16) = G_ADD [[OR1]], [[OR1]]
    ; CHECK-NEXT: [[ADD2:%[0-9]+]]:_(i16) = G_ADD [[OR2]], [[OR2]]
    ; CHECK-NEXT: [[ADD3:%[0-9]+]]:_(i16) = G_ADD [[OR3]], [[OR3]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ADD]](i16)
    ; CHECK-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[ADD1]](i16)
    ; CHECK-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; CHECK-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; CHECK-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[ADD2]](i16)
    ; CHECK-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[ADD3]](i16)
    ; CHECK-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; CHECK-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL5]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CHECK-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<8 x i16>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<8 x i8>) = G_TRUNC %0(<8 x i16>)
    %2:_(<4 x i16>) = G_BITCAST %1(<8 x i8>)
    %3:_(<4 x i16>) = G_ADD %2, %2
    S_ENDPGM 0, implicit %3(<4 x i16>)
...

---
name: test_bitcast_v64s32_to_v32s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31

    ; CHECK-LABEL: name: test_bitcast_v64s32_to_v32s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<32 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i32>), [[UV1:%[0-9]+]]:_(<2 x i32>), [[UV2:%[0-9]+]]:_(<2 x i32>), [[UV3:%[0-9]+]]:_(<2 x i32>), [[UV4:%[0-9]+]]:_(<2 x i32>), [[UV5:%[0-9]+]]:_(<2 x i32>), [[UV6:%[0-9]+]]:_(<2 x i32>), [[UV7:%[0-9]+]]:_(<2 x i32>), [[UV8:%[0-9]+]]:_(<2 x i32>), [[UV9:%[0-9]+]]:_(<2 x i32>), [[UV10:%[0-9]+]]:_(<2 x i32>), [[UV11:%[0-9]+]]:_(<2 x i32>), [[UV12:%[0-9]+]]:_(<2 x i32>), [[UV13:%[0-9]+]]:_(<2 x i32>), [[UV14:%[0-9]+]]:_(<2 x i32>), [[UV15:%[0-9]+]]:_(<2 x i32>) = G_UNMERGE_VALUES [[COPY]](<32 x i32>)
    ; CHECK-NEXT: [[UV16:%[0-9]+]]:_(<2 x i32>), [[UV17:%[0-9]+]]:_(<2 x i32>), [[UV18:%[0-9]+]]:_(<2 x i32>), [[UV19:%[0-9]+]]:_(<2 x i32>), [[UV20:%[0-9]+]]:_(<2 x i32>), [[UV21:%[0-9]+]]:_(<2 x i32>), [[UV22:%[0-9]+]]:_(<2 x i32>), [[UV23:%[0-9]+]]:_(<2 x i32>), [[UV24:%[0-9]+]]:_(<2 x i32>), [[UV25:%[0-9]+]]:_(<2 x i32>), [[UV26:%[0-9]+]]:_(<2 x i32>), [[UV27:%[0-9]+]]:_(<2 x i32>), [[UV28:%[0-9]+]]:_(<2 x i32>), [[UV29:%[0-9]+]]:_(<2 x i32>), [[UV30:%[0-9]+]]:_(<2 x i32>), [[UV31:%[0-9]+]]:_(<2 x i32>) = G_UNMERGE_VALUES [[COPY]](<32 x i32>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i64) = G_BITCAST [[UV]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[UV1]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[UV2]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[UV3]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[UV4]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[UV5]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(i64) = G_BITCAST [[UV6]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(i64) = G_BITCAST [[UV7]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST8:%[0-9]+]]:_(i64) = G_BITCAST [[UV8]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST9:%[0-9]+]]:_(i64) = G_BITCAST [[UV9]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST10:%[0-9]+]]:_(i64) = G_BITCAST [[UV10]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST11:%[0-9]+]]:_(i64) = G_BITCAST [[UV11]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST12:%[0-9]+]]:_(i64) = G_BITCAST [[UV12]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST13:%[0-9]+]]:_(i64) = G_BITCAST [[UV13]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST14:%[0-9]+]]:_(i64) = G_BITCAST [[UV14]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST15:%[0-9]+]]:_(i64) = G_BITCAST [[UV15]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST16:%[0-9]+]]:_(i64) = G_BITCAST [[UV16]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST17:%[0-9]+]]:_(i64) = G_BITCAST [[UV17]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST18:%[0-9]+]]:_(i64) = G_BITCAST [[UV18]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST19:%[0-9]+]]:_(i64) = G_BITCAST [[UV19]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST20:%[0-9]+]]:_(i64) = G_BITCAST [[UV20]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST21:%[0-9]+]]:_(i64) = G_BITCAST [[UV21]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST22:%[0-9]+]]:_(i64) = G_BITCAST [[UV22]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST23:%[0-9]+]]:_(i64) = G_BITCAST [[UV23]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST24:%[0-9]+]]:_(i64) = G_BITCAST [[UV24]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST25:%[0-9]+]]:_(i64) = G_BITCAST [[UV25]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST26:%[0-9]+]]:_(i64) = G_BITCAST [[UV26]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST27:%[0-9]+]]:_(i64) = G_BITCAST [[UV27]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST28:%[0-9]+]]:_(i64) = G_BITCAST [[UV28]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST29:%[0-9]+]]:_(i64) = G_BITCAST [[UV29]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST30:%[0-9]+]]:_(i64) = G_BITCAST [[UV30]](<2 x i32>)
    ; CHECK-NEXT: [[BITCAST31:%[0-9]+]]:_(i64) = G_BITCAST [[UV31]](<2 x i32>)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<16 x i64>) = G_BUILD_VECTOR [[BITCAST]](i64), [[BITCAST1]](i64), [[BITCAST2]](i64), [[BITCAST3]](i64), [[BITCAST4]](i64), [[BITCAST5]](i64), [[BITCAST6]](i64), [[BITCAST7]](i64), [[BITCAST8]](i64), [[BITCAST9]](i64), [[BITCAST10]](i64), [[BITCAST11]](i64), [[BITCAST12]](i64), [[BITCAST13]](i64), [[BITCAST14]](i64), [[BITCAST15]](i64)
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<16 x i64>) = G_BUILD_VECTOR [[BITCAST16]](i64), [[BITCAST17]](i64), [[BITCAST18]](i64), [[BITCAST19]](i64), [[BITCAST20]](i64), [[BITCAST21]](i64), [[BITCAST22]](i64), [[BITCAST23]](i64), [[BITCAST24]](i64), [[BITCAST25]](i64), [[BITCAST26]](i64), [[BITCAST27]](i64), [[BITCAST28]](i64), [[BITCAST29]](i64), [[BITCAST30]](i64), [[BITCAST31]](i64)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<16 x i64>), implicit [[BUILD_VECTOR1]](<16 x i64>)
    %0:_(<32 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15_vgpr16_vgpr17_vgpr18_vgpr19_vgpr20_vgpr21_vgpr22_vgpr23_vgpr24_vgpr25_vgpr26_vgpr27_vgpr28_vgpr29_vgpr30_vgpr31
    %1:_(<64 x i32>) = G_CONCAT_VECTORS %0(<32 x i32>), %0(<32 x i32>)
    %2:_(<32 x i64>) = G_BITCAST %1(<64 x i32>)
    %3:_(<16 x i64>), %4:_(<16 x i64>) = G_UNMERGE_VALUES %2(<32 x i64>)
    S_ENDPGM 0, implicit %3(<16 x i64>), implicit %4(<16 x i64>)
...
