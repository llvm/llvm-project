# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=hawaii -O0 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX7 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX8 %s

---
name: bswap_s16

body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: bswap_s16
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND]], [[COPY1]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[TRUNC1]], [[TRUNC]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: bswap_s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(i16) = G_BSWAP [[TRUNC]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BSWAP]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i16) = G_BSWAP %1
    %3:_(i32) = G_ANYEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---
name: bswap_s32

body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: bswap_s32
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[COPY]]
    ; GFX7-NEXT: $vgpr0 = COPY [[BSWAP]](i32)
    ;
    ; GFX8-LABEL: name: bswap_s32
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[COPY]]
    ; GFX8-NEXT: $vgpr0 = COPY [[BSWAP]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_BSWAP %0
    $vgpr0 = COPY %1(i32)
...

---
name: bswap_v2s16

body: |
  bb.0:
    liveins: $vgpr0
    ; GFX7-LABEL: name: bswap_v2s16
    ; GFX7: liveins: $vgpr0
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[C1]](i32)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C2]]
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[AND]], [[COPY1]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[TRUNC1]], [[TRUNC]]
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[COPY2]](i32)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; GFX7-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[COPY3]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[TRUNC3]], [[TRUNC2]]
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; GFX7-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ;
    ; GFX8-LABEL: name: bswap_v2s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(<2 x i16>) = G_BSWAP [[COPY]]
    ; GFX8-NEXT: $vgpr0 = COPY [[BSWAP]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = G_BSWAP %0
    $vgpr0 = COPY %1(<2 x i16>)
...

---
name: bswap_v3s16

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-LABEL: name: bswap_v3s16
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; GFX7-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND]], [[COPY3]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[TRUNC1]], [[TRUNC]]
    ; GFX7-NEXT: [[COPY4:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX7-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[COPY1]], [[COPY4]](i32)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; GFX7-NEXT: [[COPY5:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX7-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C1]]
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[COPY5]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[TRUNC3]], [[TRUNC2]]
    ; GFX7-NEXT: [[COPY6:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX7-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[COPY2]], [[COPY6]](i32)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[SHL2]](i32)
    ; GFX7-NEXT: [[COPY7:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX7-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C1]]
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[COPY7]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[TRUNC5]], [[TRUNC4]]
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX7-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[OR1]](i16)
    ; GFX7-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[OR2]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ; GFX7-NEXT: $vgpr1 = COPY [[ANYEXT1]](i32)
    ; GFX7-NEXT: $vgpr2 = COPY [[ANYEXT2]](i32)
    ;
    ; GFX8-LABEL: name: bswap_v3s16
    ; GFX8: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[C2]], [[C1]](i32)
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(<2 x i16>) = G_BSWAP [[BITCAST]]
    ; GFX8-NEXT: [[BSWAP1:%[0-9]+]]:_(<2 x i16>) = G_BSWAP [[BITCAST1]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[BSWAP]](<2 x i16>)
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C1]](i32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[BSWAP1]](<2 x i16>)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[LSHR]](i32)
    ; GFX8-NEXT: $vgpr2 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i16) = G_TRUNC %0(i32)
    %4:_(i16) = G_TRUNC %1(i32)
    %5:_(i16) = G_TRUNC %2(i32)
    %6:_(<3 x i16>) = G_BUILD_VECTOR %3(i16), %4(i16), %5(i16)
    %7:_(<3 x i16>) = G_BSWAP %6
    %8:_(i16), %9:_(i16), %10:_(i16) = G_UNMERGE_VALUES %7(<3 x i16>)
    %11:_(i32) = G_ANYEXT %8(i16)
    %12:_(i32) = G_ANYEXT %9(i16)
    %13:_(i32) = G_ANYEXT %10(i16)
    $vgpr0 = COPY %11(i32)
    $vgpr1 = COPY %12(i32)
    $vgpr2 = COPY %13(i32)

...

---
name: bswap_v4s16

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: bswap_v4s16
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX7-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[C1]](i32)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX7-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C2]]
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND]], [[COPY1]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[TRUNC1]], [[TRUNC]]
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[COPY2]](i32)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; GFX7-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[COPY3]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX7-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[TRUNC3]], [[TRUNC2]]
    ; GFX7-NEXT: [[COPY4:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[BITCAST1]], [[COPY4]](i32)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[SHL2]](i32)
    ; GFX7-NEXT: [[COPY5:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C2]]
    ; GFX7-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[COPY5]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX7-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[TRUNC5]], [[TRUNC4]]
    ; GFX7-NEXT: [[COPY6:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LSHR1]], [[COPY6]](i32)
    ; GFX7-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[SHL3]](i32)
    ; GFX7-NEXT: [[COPY7:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; GFX7-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LSHR1]], [[COPY7]](i32)
    ; GFX7-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX7-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[TRUNC7]], [[TRUNC6]]
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; GFX7-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; GFX7-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; GFX7-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; GFX7-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX7-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL5]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; GFX7-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX8-LABEL: name: bswap_v4s16
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(<2 x i16>) = G_BSWAP [[UV]]
    ; GFX8-NEXT: [[BSWAP1:%[0-9]+]]:_(<2 x i16>) = G_BSWAP [[UV1]]
    ; GFX8-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BSWAP]](<2 x i16>), [[BSWAP1]](<2 x i16>)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_BSWAP %0
    $vgpr0_vgpr1 = COPY %1(<4 x i16>)
...

---
name: bswap_v2s32

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: bswap_v2s32
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX7-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV]]
    ; GFX7-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV1]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: bswap_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV]]
    ; GFX8-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV1]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_BSWAP %0
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: bswap_s64

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: bswap_s64
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX7-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV1]]
    ; GFX7-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV]]
    ; GFX7-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    ;
    ; GFX8-LABEL: name: bswap_s64
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV1]]
    ; GFX8-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV]]
    ; GFX8-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_BSWAP %0
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: bswap_v2s64

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-LABEL: name: bswap_v2s64
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; GFX7-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV3]]
    ; GFX7-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV2]]
    ; GFX7-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; GFX7-NEXT: [[BSWAP2:%[0-9]+]]:_(i32) = G_BSWAP [[UV5]]
    ; GFX7-NEXT: [[BSWAP3:%[0-9]+]]:_(i32) = G_BSWAP [[UV4]]
    ; GFX7-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP2]](i32), [[BSWAP3]](i32)
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[MV]](i64), [[MV1]](i64)
    ; GFX7-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; GFX8-LABEL: name: bswap_v2s64
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV3]]
    ; GFX8-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV2]]
    ; GFX8-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX8-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; GFX8-NEXT: [[BSWAP2:%[0-9]+]]:_(i32) = G_BSWAP [[UV5]]
    ; GFX8-NEXT: [[BSWAP3:%[0-9]+]]:_(i32) = G_BSWAP [[UV4]]
    ; GFX8-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP2]](i32), [[BSWAP3]](i32)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[MV]](i64), [[MV1]](i64)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = G_BSWAP %0
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: bswap_s48

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; GFX7-LABEL: name: bswap_s48
    ; GFX7: liveins: $vgpr0_vgpr1
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX7-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV1]]
    ; GFX7-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV]]
    ; GFX7-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[MV]], [[C]](i32)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; GFX8-LABEL: name: bswap_s48
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX8-NEXT: [[BSWAP:%[0-9]+]]:_(i32) = G_BSWAP [[UV1]]
    ; GFX8-NEXT: [[BSWAP1:%[0-9]+]]:_(i32) = G_BSWAP [[UV]]
    ; GFX8-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[BSWAP]](i32), [[BSWAP1]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[MV]], [[C]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i48) = G_TRUNC %0(i64)
    %2:_(i48) = G_BSWAP %1
    %3:_(i64) = G_ANYEXT %2(i48)
    $vgpr0_vgpr1 = COPY %3(i64)
...
