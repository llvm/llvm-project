# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck %s

---
name: test_sadde_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_sadde_s32
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY2]](i32), [[C]]
    ; CHECK-NEXT: [[SADDE:%[0-9]+]]:_(i32), [[SADDE1:%[0-9]+]]:_(i1) = G_SADDE [[COPY]], [[COPY1]], [[ICMP]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[SADDE1]](i1)
    ; CHECK-NEXT: $vgpr0 = COPY [[SADDE]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = G_CONSTANT i32 0
    %4:_(i1) = G_ICMP intpred(eq), %2(i32), %3
    %5:_(i32), %6:_(i1) = G_SADDE %0, %1, %4
    %7:_(i32) = G_ZEXT %6(i1)
    $vgpr0 = COPY %5(i32)
    $vgpr1 = COPY %7(i32)
...

---
name: test_sadde_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; CHECK-LABEL: name: test_sadde_v2s32
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY2]](<2 x i32>)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV]](i32), [[C]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV1]](i32), [[C]]
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; CHECK-NEXT: [[SADDE:%[0-9]+]]:_(i32), [[SADDE1:%[0-9]+]]:_(i1) = G_SADDE [[UV2]], [[UV4]], [[ICMP]]
    ; CHECK-NEXT: [[SADDE2:%[0-9]+]]:_(i32), [[SADDE3:%[0-9]+]]:_(i1) = G_SADDE [[UV3]], [[UV5]], [[ICMP1]]
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SADDE]](i32), [[SADDE2]](i32)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SADDE1]](i1)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[SADDE3]](i1)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ; CHECK-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %3:_(i32) = G_CONSTANT i32 0
    %4:_(<2 x i32>) = G_BUILD_VECTOR %3(i32), %3(i32)
    %5:_(<2 x i1>) = G_ICMP intpred(eq), %2(<2 x i32>), %4
    %6:_(<2 x i32>), %7:_(<2 x i1>) = G_SADDE %0, %1, %5
    %8:_(<2 x i32>) = G_ZEXT %7(<2 x i1>)
    $vgpr0_vgpr1 = COPY %6(<2 x i32>)
    $vgpr2_vgpr3 = COPY %8(<2 x i32>)
...

---
name: test_sadde_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_sadde_s16
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C]]
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG %13, 16
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[SEXT_INREG1]](i32)
    ; CHECK-NEXT: [[UADDE:%[0-9]+]]:_(i32), [[UADDE1:%[0-9]+]]:_(i1) = G_UADDE [[SEXT_INREG]], [[COPY2]], [[ICMP]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UADDE]](i32), [[SEXT_INREG1]]
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP1]](i1)
    ; CHECK-NEXT: $vgpr0 = COPY [[UADDE]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = G_CONSTANT i32 0
    %4:_(i1) = G_ICMP intpred(eq), %2(i32), %3
    %5:_(i16) = G_TRUNC %0(i32)
    %6:_(i16) = G_TRUNC %1(i32)
    %7:_(i16), %8:_(i1) = G_SADDE %6, %7, %4
    %9:_(i32) = G_ANYEXT %7(i16)
    %10:_(i32) = G_ZEXT %8(i1)
    $vgpr0 = COPY %9(i32)
    $vgpr1 = COPY %10(i32)
...

---
name: test_sadde_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4

    ; CHECK-LABEL: name: test_sadde_s64
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY2]](i32), [[C]]
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; CHECK-NEXT: [[UADDE:%[0-9]+]]:_(i32), [[UADDE1:%[0-9]+]]:_(i1) = G_UADDE [[UV]], [[UV2]], [[ICMP]]
    ; CHECK-NEXT: [[SADDE:%[0-9]+]]:_(i32), [[SADDE1:%[0-9]+]]:_(i1) = G_SADDE [[UV1]], [[UV3]], [[UADDE1]]
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDE]](i32), [[SADDE]](i32)
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[SADDE1]](i1)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    ; CHECK-NEXT: $vgpr2 = COPY [[ZEXT]](i32)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(i32) = COPY $vgpr4
    %3:_(i32) = G_CONSTANT i32 0
    %4:_(i1) = G_ICMP intpred(eq), %2(i32), %3
    %5:_(i64), %6:_(i1) = G_SADDE %0, %1, %4
    %7:_(i32) = G_ZEXT %6(i1)
    $vgpr0_vgpr1 = COPY %5(i64)
    $vgpr2 = COPY %7(i32)
...
