# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -enable-unsafe-fp-math -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefix=GFX10
# RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -enable-unsafe-fp-math -run-pass=instruction-select -verify-machineinstrs %s -o - | FileCheck %s -check-prefix=GFX11

---
name:            fract_f64_neg
legalized:       true
regBankSelected: true
tracksRegLiveness: true

body: |
  bb.1:
    liveins: $sgpr0_sgpr1

    ; GFX10-LABEL: name: fract_f64_neg
    ; GFX10: liveins: $sgpr0_sgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX10-NEXT: early-clobber %3:sgpr_128 = S_LOAD_DWORDX4_IMM_ec [[COPY]], 36, 0 :: (dereferenceable invariant load (<2 x i64>), align 4, addrspace 4)
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:sreg_64 = COPY %3.sub0_sub1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY %3.sub2_sub3
    ; GFX10-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY2]], 0, 0 :: (load (f64), addrspace 1)
    ; GFX10-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO -9223372036854775808
    ; GFX10-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub1
    ; GFX10-NEXT: [[S_XOR_B32_:%[0-9]+]]:sreg_32 = S_XOR_B32 [[COPY3]], [[S_MOV_B32_]], implicit-def dead $scc
    ; GFX10-NEXT: [[COPY4:%[0-9]+]]:sreg_32_xm0 = COPY [[S_XOR_B32_]]
    ; GFX10-NEXT: [[COPY5:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub0
    ; GFX10-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY5]], %subreg.sub0, [[COPY4]], %subreg.sub1
    ; GFX10-NEXT: [[COPY6:%[0-9]+]]:vreg_64 = COPY [[S_MOV_B]]
    ; GFX10-NEXT: [[COPY7:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]]
    ; GFX10-NEXT: [[V_ADD_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[COPY6]], 0, [[COPY7]], 0, 0, implicit $mode, implicit $exec
    ; GFX10-NEXT: [[V_FLOOR_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_FLOOR_F64_e64 0, [[V_ADD_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX10-NEXT: [[V_ADD_F64_e64_1:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[V_ADD_F64_e64_]], 1, [[V_FLOOR_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX10-NEXT: [[COPY8:%[0-9]+]]:sreg_64_xexec_xnull = COPY [[COPY1]]
    ; GFX10-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; GFX10-NEXT: GLOBAL_STORE_DWORDX2_SADDR [[V_MOV_B32_e32_]], [[V_ADD_F64_e64_1]], [[COPY8]], 0, 0, implicit $exec :: (store (f64), addrspace 1)
    ; GFX10-NEXT: S_ENDPGM 0
    ;
    ; GFX11-LABEL: name: fract_f64_neg
    ; GFX11: liveins: $sgpr0_sgpr1
    ; GFX11-NEXT: {{  $}}
    ; GFX11-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX11-NEXT: [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]], 36, 0 :: (dereferenceable invariant load (<2 x i64>), align 4, addrspace 4)
    ; GFX11-NEXT: [[COPY1:%[0-9]+]]:sreg_64 = COPY [[S_LOAD_DWORDX4_IMM]].sub0_sub1
    ; GFX11-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY [[S_LOAD_DWORDX4_IMM]].sub2_sub3
    ; GFX11-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY2]], 0, 0 :: (load (f64), addrspace 1)
    ; GFX11-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO -9223372036854775808
    ; GFX11-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GFX11-NEXT: [[COPY3:%[0-9]+]]:sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub1
    ; GFX11-NEXT: [[S_XOR_B32_:%[0-9]+]]:sreg_32 = S_XOR_B32 [[COPY3]], [[S_MOV_B32_]], implicit-def dead $scc
    ; GFX11-NEXT: [[COPY4:%[0-9]+]]:sreg_32_xm0 = COPY [[S_XOR_B32_]]
    ; GFX11-NEXT: [[COPY5:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub0
    ; GFX11-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY5]], %subreg.sub0, [[COPY4]], %subreg.sub1
    ; GFX11-NEXT: [[COPY6:%[0-9]+]]:vreg_64 = COPY [[S_MOV_B]]
    ; GFX11-NEXT: [[COPY7:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]]
    ; GFX11-NEXT: [[V_ADD_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[COPY6]], 0, [[COPY7]], 0, 0, implicit $mode, implicit $exec
    ; GFX11-NEXT: [[V_FLOOR_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_FLOOR_F64_e64 0, [[V_ADD_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX11-NEXT: [[V_ADD_F64_e64_1:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[V_ADD_F64_e64_]], 1, [[V_FLOOR_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX11-NEXT: [[COPY8:%[0-9]+]]:sreg_64_xexec_xnull = COPY [[COPY1]]
    ; GFX11-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; GFX11-NEXT: GLOBAL_STORE_DWORDX2_SADDR [[V_MOV_B32_e32_]], [[V_ADD_F64_e64_1]], [[COPY8]], 0, 0, implicit $exec :: (store (f64), addrspace 1)
    ; GFX11-NEXT: S_ENDPGM 0
    %0:sgpr(p4) = COPY $sgpr0_sgpr1
    %1:sgpr(i64) = G_CONSTANT i64 36
    %2:sgpr(p4) = G_PTR_ADD %0, %1(i64)
    %3:sgpr(<2 x i64>) = G_LOAD %2(p4) :: (dereferenceable invariant load (<2 x i64>), align 4, addrspace 4)
    %4:sgpr(i64), %5:sgpr(i64) = G_UNMERGE_VALUES %3(<2 x i64>)
    %6:sgpr(p1) = G_INTTOPTR %5(i64)
    %7:sgpr(f64) = G_LOAD %6(p1) :: (load (f64), addrspace 1)
    %8:sgpr(f64) = G_FCONSTANT double -0.000000e+00
    %9:sgpr(f64) = G_FNEG %7
    %10:sgpr(i64) = G_BITCAST %8(f64)
    %11:vgpr(i64) = COPY %10(i64)
    %12:sgpr(i64) = G_BITCAST %9(f64)
    %13:vgpr(i64) = COPY %12(i64)
    %14:vgpr(f64) = G_BITCAST %11(i64)
    %15:vgpr(f64) = G_BITCAST %13(i64)
    %16:vgpr(f64) = G_FADD %14, %15
    %17:vgpr(f64) = G_FFLOOR %16
    %18:vgpr(f64) = G_FNEG %17
    %19:vgpr(f64) = G_FADD %16, %18
    %20:sgpr(p1) = G_INTTOPTR %4(i64)
    %21:vgpr(p1) = COPY %20(p1)
    G_STORE %19(f64), %21(p1) :: (store (f64), addrspace 1)
    S_ENDPGM 0
...

---
name:            fract_f64_neg_abs
legalized:       true
regBankSelected: true
tracksRegLiveness: true

body: |
  bb.1:
    liveins: $sgpr0_sgpr1

    ; GFX10-LABEL: name: fract_f64_neg_abs
    ; GFX10: liveins: $sgpr0_sgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX10-NEXT: early-clobber %3:sgpr_128 = S_LOAD_DWORDX4_IMM_ec [[COPY]], 36, 0 :: (dereferenceable invariant load (<2 x i64>), align 4, addrspace 4)
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:sreg_64 = COPY %3.sub0_sub1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY %3.sub2_sub3
    ; GFX10-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY2]], 0, 0 :: (load (f64), addrspace 1)
    ; GFX10-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO -9223372036854775808
    ; GFX10-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub1
    ; GFX10-NEXT: [[S_OR_B32_:%[0-9]+]]:sreg_32 = S_OR_B32 [[COPY3]], [[S_MOV_B32_]], implicit-def dead $scc
    ; GFX10-NEXT: [[COPY4:%[0-9]+]]:sreg_32_xm0 = COPY [[S_OR_B32_]]
    ; GFX10-NEXT: [[COPY5:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub0
    ; GFX10-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY5]], %subreg.sub0, [[COPY4]], %subreg.sub1
    ; GFX10-NEXT: [[COPY6:%[0-9]+]]:vreg_64 = COPY [[S_MOV_B]]
    ; GFX10-NEXT: [[COPY7:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]]
    ; GFX10-NEXT: [[V_ADD_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[COPY6]], 0, [[COPY7]], 0, 0, implicit $mode, implicit $exec
    ; GFX10-NEXT: [[V_FLOOR_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_FLOOR_F64_e64 0, [[V_ADD_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX10-NEXT: [[V_ADD_F64_e64_1:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[V_ADD_F64_e64_]], 1, [[V_FLOOR_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX10-NEXT: [[COPY8:%[0-9]+]]:sreg_64_xexec_xnull = COPY [[COPY1]]
    ; GFX10-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; GFX10-NEXT: GLOBAL_STORE_DWORDX2_SADDR [[V_MOV_B32_e32_]], [[V_ADD_F64_e64_1]], [[COPY8]], 0, 0, implicit $exec :: (store (f64), addrspace 1)
    ; GFX10-NEXT: S_ENDPGM 0
    ;
    ; GFX11-LABEL: name: fract_f64_neg_abs
    ; GFX11: liveins: $sgpr0_sgpr1
    ; GFX11-NEXT: {{  $}}
    ; GFX11-NEXT: [[COPY:%[0-9]+]]:sreg_64 = COPY $sgpr0_sgpr1
    ; GFX11-NEXT: [[S_LOAD_DWORDX4_IMM:%[0-9]+]]:sgpr_128 = S_LOAD_DWORDX4_IMM [[COPY]], 36, 0 :: (dereferenceable invariant load (<2 x i64>), align 4, addrspace 4)
    ; GFX11-NEXT: [[COPY1:%[0-9]+]]:sreg_64 = COPY [[S_LOAD_DWORDX4_IMM]].sub0_sub1
    ; GFX11-NEXT: [[COPY2:%[0-9]+]]:sreg_64 = COPY [[S_LOAD_DWORDX4_IMM]].sub2_sub3
    ; GFX11-NEXT: [[S_LOAD_DWORDX2_IMM:%[0-9]+]]:sreg_64_xexec = S_LOAD_DWORDX2_IMM [[COPY2]], 0, 0 :: (load (f64), addrspace 1)
    ; GFX11-NEXT: [[S_MOV_B:%[0-9]+]]:sreg_64 = S_MOV_B64_IMM_PSEUDO -9223372036854775808
    ; GFX11-NEXT: [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 2147483648
    ; GFX11-NEXT: [[COPY3:%[0-9]+]]:sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub1
    ; GFX11-NEXT: [[S_OR_B32_:%[0-9]+]]:sreg_32 = S_OR_B32 [[COPY3]], [[S_MOV_B32_]], implicit-def dead $scc
    ; GFX11-NEXT: [[COPY4:%[0-9]+]]:sreg_32_xm0 = COPY [[S_OR_B32_]]
    ; GFX11-NEXT: [[COPY5:%[0-9]+]]:sreg_32_xexec_hi_and_sreg_32_xm0 = COPY [[S_LOAD_DWORDX2_IMM]].sub0
    ; GFX11-NEXT: [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE [[COPY5]], %subreg.sub0, [[COPY4]], %subreg.sub1
    ; GFX11-NEXT: [[COPY6:%[0-9]+]]:vreg_64 = COPY [[S_MOV_B]]
    ; GFX11-NEXT: [[COPY7:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]]
    ; GFX11-NEXT: [[V_ADD_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[COPY6]], 0, [[COPY7]], 0, 0, implicit $mode, implicit $exec
    ; GFX11-NEXT: [[V_FLOOR_F64_e64_:%[0-9]+]]:vreg_64 = nofpexcept V_FLOOR_F64_e64 0, [[V_ADD_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX11-NEXT: [[V_ADD_F64_e64_1:%[0-9]+]]:vreg_64 = nofpexcept V_ADD_F64_e64 0, [[V_ADD_F64_e64_]], 1, [[V_FLOOR_F64_e64_]], 0, 0, implicit $mode, implicit $exec
    ; GFX11-NEXT: [[COPY8:%[0-9]+]]:sreg_64_xexec_xnull = COPY [[COPY1]]
    ; GFX11-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; GFX11-NEXT: GLOBAL_STORE_DWORDX2_SADDR [[V_MOV_B32_e32_]], [[V_ADD_F64_e64_1]], [[COPY8]], 0, 0, implicit $exec :: (store (f64), addrspace 1)
    ; GFX11-NEXT: S_ENDPGM 0
    %0:sgpr(p4) = COPY $sgpr0_sgpr1
    %1:sgpr(i64) = G_CONSTANT i64 36
    %2:sgpr(p4) = G_PTR_ADD %0, %1(i64)
    %3:sgpr(<2 x i64>) = G_LOAD %2(p4) :: (dereferenceable invariant load (<2 x i64>), align 4, addrspace 4)
    %4:sgpr(i64), %5:sgpr(i64) = G_UNMERGE_VALUES %3(<2 x i64>)
    %6:sgpr(p1) = G_INTTOPTR %5(i64)
    %7:sgpr(f64) = G_LOAD %6(p1) :: (load (f64), addrspace 1)
    %8:sgpr(f64) = G_FABS %7
    %9:sgpr(f64) = G_FCONSTANT double -0.000000e+00
    %10:sgpr(f64) = G_FNEG %8
    %11:sgpr(i64) = G_BITCAST %9(f64)
    %12:vgpr(i64) = COPY %11(i64)
    %13:sgpr(i64) = G_BITCAST %10(f64)
    %14:vgpr(i64) = COPY %13(i64)
    %15:vgpr(f64) = G_BITCAST %12(i64)
    %16:vgpr(f64) = G_BITCAST %14(i64)
    %17:vgpr(f64) = G_FADD %15, %16
    %18:vgpr(f64) = G_FFLOOR %17
    %19:vgpr(f64) = G_FNEG %18
    %20:vgpr(f64) = G_FADD %17, %19
    %21:sgpr(p1) = G_INTTOPTR %4(i64)
    %22:vgpr(p1) = COPY %21(p1)
    G_STORE %20(f64), %22(p1) :: (store (f64), addrspace 1)
    S_ENDPGM 0
...
