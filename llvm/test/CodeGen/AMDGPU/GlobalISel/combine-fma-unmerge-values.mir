# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -global-isel -mtriple=amdgcn -mcpu=gfx1010 -enable-unsafe-fp-math -run-pass=amdgpu-prelegalizer-combiner %s -o - | FileCheck -check-prefix=GFX10 %s

# Test that we fold correct element from G_UNMERGE_VALUES into fma

---
name: test_f32_add_mul
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3

    ; GFX10-LABEL: name: test_f32_add_mul
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMA]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %ptr:_(p1) = COPY $vgpr2_vgpr3
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_FMUL %6, %7
    %9:_(f32) = G_BITCAST %el1(i32)
    %10:_(f32) = G_FADD %8, %9
    %11:_(i32) = G_BITCAST %10(f32)
    $vgpr0 = COPY %11(i32)
...

---
name: test_f32_add_mul_rhs
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3

    ; GFX10-LABEL: name: test_f32_add_mul_rhs
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMA]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %ptr:_(p1) = COPY $vgpr2_vgpr3
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_FMUL %6, %7
    %9:_(f32) = G_BITCAST %el1(i32)
    %10:_(f32) = G_FADD %9, %8
    %11:_(i32) = G_BITCAST %10(f32)
    $vgpr0 = COPY %11(i32)
...

---
name: test_f16_f32_add_ext_mul
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $sgpr0, $sgpr1, $vgpr0_vgpr1

    ; GFX10-LABEL: name: test_f16_f32_add_ext_mul
    ; GFX10: liveins: $sgpr0, $sgpr1, $vgpr0_vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX10-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FPEXT]], [[FPEXT1]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMA]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i32) = COPY $sgpr1
    %3:_(i16) = G_TRUNC %2(i32)
    %ptr:_(p1) = COPY $vgpr0_vgpr1
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %8:_(f16) = G_BITCAST %1(i16)
    %9:_(f16) = G_BITCAST %3(i16)
    %10:_(f16) = nnan ninf nsz arcp contract afn reassoc G_FMUL %8, %9
    %11:_(f32) = G_FPEXT %10(f16)
    %12:_(f32) = G_BITCAST %el1(i32)
    %13:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FADD %11, %12
    %14:_(i32) = G_BITCAST %13(f32)
    $vgpr0 = COPY %14(i32)
...

---
name: test_f16_f32_add_ext_mul_rhs
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $sgpr0, $sgpr1, $vgpr0_vgpr1

    ; GFX10-LABEL: name: test_f16_f32_add_ext_mul_rhs
    ; GFX10: liveins: $sgpr0, $sgpr1, $vgpr0_vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX10-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FPEXT]], [[FPEXT1]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMA]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i32) = COPY $sgpr1
    %3:_(i16) = G_TRUNC %2(i32)
    %ptr:_(p1) = COPY $vgpr0_vgpr1
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %8:_(f16) = G_BITCAST %1(i16)
    %9:_(f16) = G_BITCAST %3(i16)
    %10:_(f16) = nnan ninf nsz arcp contract afn reassoc G_FMUL %8, %9
    %11:_(f32) = G_FPEXT %10(f16)
    %12:_(f32) = G_BITCAST %el1(i32)
    %13:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FADD %12, %11
    %14:_(i32) = G_BITCAST %13(f32)
    $vgpr0 = COPY %14(i32)
...

---
name: test_f32_add_fma_mul
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4_vgpr5

    ; GFX10-LABEL: name: test_f32_add_fma_mul
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4_vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr4_vgpr5
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY3]](i32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[BITCAST1]], [[BITCAST4]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[BITCAST2]], [[BITCAST3]], [[FMA]]
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMA1]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %ptr:_(p1) = COPY $vgpr4_vgpr5
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %8:_(f32) = G_BITCAST %2(i32)
    %9:_(f32) = G_BITCAST %3(i32)
    %10:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FMUL %8, %9
    %11:_(f32) = G_BITCAST %0(i32)
    %12:_(f32) = G_BITCAST %1(i32)
    %13:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FMA %11, %12, %10
    %14:_(f32) = G_BITCAST %el1(i32)
    %15:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FADD %13, %14
    %16:_(i32) = G_BITCAST %15(f32)
    $vgpr0 = COPY %16(i32)
...

---
name: test_f32_add_fma_mul_rhs
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4_vgpr5

    ; GFX10-LABEL: name: test_f32_add_fma_mul_rhs
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4_vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr4_vgpr5
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY3]](i32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[BITCAST1]], [[BITCAST4]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[BITCAST2]], [[BITCAST3]], [[FMA]]
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMA1]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %ptr:_(p1) = COPY $vgpr4_vgpr5
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %8:_(f32) = G_BITCAST %2(i32)
    %9:_(f32) = G_BITCAST %3(i32)
    %10:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FMUL %8, %9
    %11:_(f32) = G_BITCAST %0(i32)
    %12:_(f32) = G_BITCAST %1(i32)
    %13:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FMA %11, %12, %10
    %14:_(f32) = G_BITCAST %el1(i32)
    %15:_(f32) = nnan ninf nsz arcp contract afn reassoc G_FADD %14, %13
    %16:_(i32) = G_BITCAST %15(f32)
    $vgpr0 = COPY %16(i32)
...

---
name: test_f16_f32_add_fma_ext_mul
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4, $vgpr5

    ; GFX10-LABEL: name: test_f16_f32_add_fma_ext_mul
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4, $vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr5
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY3]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX10-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FPEXT]], [[FPEXT1]], [[BITCAST4]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[BITCAST2]], [[BITCAST3]], [[FMA]]
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMA1]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %ptr:_(p1) = COPY $vgpr2_vgpr3
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %6:_(i32) = COPY $vgpr4
    %7:_(i16) = G_TRUNC %6(i32)
    %8:_(i32) = COPY $vgpr5
    %9:_(i16) = G_TRUNC %8(i32)
    %10:_(f16) = G_BITCAST %7(i16)
    %11:_(f16) = G_BITCAST %9(i16)
    %12:_(f16) = G_FMUL %10, %11
    %13:_(f32) = G_FPEXT %12(f16)
    %14:_(f32) = G_BITCAST %0(i32)
    %15:_(f32) = G_BITCAST %1(i32)
    %16:_(f32) = G_FMA %14, %15, %13
    %17:_(f32) = G_BITCAST %el1(i32)
    %18:_(f32) = G_FADD %16, %17
    %19:_(i32) = G_BITCAST %18(f32)
    $vgpr0 = COPY %19(i32)
...

---
name: test_f16_f32_add_ext_fma_mul
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4, $vgpr5

    ; GFX10-LABEL: name: test_f16_f32_add_ext_fma_mul
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3, $vgpr4, $vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr5
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[COPY3]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX10-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX10-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX10-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FPEXT2]], [[FPEXT3]], [[BITCAST4]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FPEXT]], [[FPEXT1]], [[FMA]]
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMA1]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i32) = COPY $vgpr1
    %3:_(i16) = G_TRUNC %2(i32)
    %ptr:_(p1) = COPY $vgpr2_vgpr3
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %8:_(i32) = COPY $vgpr4
    %9:_(i16) = G_TRUNC %8(i32)
    %10:_(i32) = COPY $vgpr5
    %11:_(i16) = G_TRUNC %10(i32)
    %12:_(f16) = G_BITCAST %9(i16)
    %13:_(f16) = G_BITCAST %11(i16)
    %14:_(f16) = G_FMUL %12, %13
    %15:_(f16) = G_BITCAST %1(i16)
    %16:_(f16) = G_BITCAST %3(i16)
    %17:_(f16) = G_FMUL %15, %16
    %18:_(f16) = G_FADD %17, %14
    %19:_(f32) = G_FPEXT %18(f16)
    %20:_(f32) = G_BITCAST %el1(i32)
    %21:_(f32) = G_FADD %19, %20
    %22:_(i32) = G_BITCAST %21(f32)
    $vgpr0 = COPY %22(i32)
...

---
name: test_f16_f32_add_fma_ext_mul_rhs
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; GFX10-LABEL: name: test_f16_f32_add_fma_ext_mul_rhs
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr5
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY3]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX10-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FPEXT]], [[FPEXT1]], [[BITCAST4]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[BITCAST2]], [[BITCAST3]], [[FMA]]
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMA1]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %ptr:_(p1) = COPY $vgpr0_vgpr1
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %4:_(i32) = COPY $vgpr2
    %5:_(i32) = COPY $vgpr3
    %6:_(i32) = COPY $vgpr4
    %7:_(i16) = G_TRUNC %6(i32)
    %8:_(i32) = COPY $vgpr5
    %9:_(i16) = G_TRUNC %8(i32)
    %10:_(f16) = G_BITCAST %7(i16)
    %11:_(f16) = G_BITCAST %9(i16)
    %12:_(f16) = G_FMUL %10, %11
    %13:_(f32) = G_FPEXT %12(f16)
    %14:_(f32) = G_BITCAST %4(i32)
    %15:_(f32) = G_BITCAST %5(i32)
    %16:_(f32) = G_FMA %14, %15, %13
    %17:_(f32) = G_BITCAST %el1(i32)
    %18:_(f32) = G_FADD %17, %16
    %19:_(i32) = G_BITCAST %18(f32)
    $vgpr0 = COPY %19(i32)
...

---
name: test_f16_f32_add_ext_fma_mul_rhs
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; GFX10-LABEL: name: test_f16_f32_add_ext_fma_mul_rhs
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr5
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[COPY3]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX10-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX10-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX10-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FPEXT2]], [[FPEXT3]], [[BITCAST4]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FPEXT]], [[FPEXT1]], [[FMA]]
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[FMA1]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST5]](i32)
    %ptr:_(p1) = COPY $vgpr0_vgpr1
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %4:_(i32) = COPY $vgpr2
    %5:_(i16) = G_TRUNC %4(i32)
    %6:_(i32) = COPY $vgpr3
    %7:_(i16) = G_TRUNC %6(i32)
    %8:_(i32) = COPY $vgpr4
    %9:_(i16) = G_TRUNC %8(i32)
    %10:_(i32) = COPY $vgpr5
    %11:_(i16) = G_TRUNC %10(i32)
    %12:_(f16) = G_BITCAST %9(i16)
    %13:_(f16) = G_BITCAST %11(i16)
    %14:_(f16) = G_FMUL %12, %13
    %15:_(f16) = G_BITCAST %5(i16)
    %16:_(f16) = G_BITCAST %7(i16)
    %17:_(f16) = G_FMUL %15, %16
    %18:_(f16) = G_FADD %17, %14
    %19:_(f32) = G_FPEXT %18(f16)
    %20:_(f32) = G_BITCAST %el1(i32)
    %21:_(f32) = G_FADD %20, %19
    %22:_(i32) = G_BITCAST %21(f32)
    $vgpr0 = COPY %22(i32)
...

---
name: test_f32_sub_mul
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3

    ; GFX10-LABEL: name: test_f32_sub_mul
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST2]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[BITCAST1]], [[FNEG]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMA]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %ptr:_(p1) = COPY $vgpr0_vgpr1
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_FMUL %6, %7
    %9:_(f32) = G_BITCAST %el1(i32)
    %10:_(f32) = G_FSUB %8, %9
    %11:_(i32) = G_BITCAST %10(f32)
    $vgpr0 = COPY %11(i32)
...

---
name: test_f32_sub_mul_rhs
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
body: |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3

    ; GFX10-LABEL: name: test_f32_sub_mul_rhs
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: %ptr:_(p1) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX10-NEXT: %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST %el1(i32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[BITCAST1]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMA]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %ptr:_(p1) = COPY $vgpr2_vgpr3
    %vec:_(<2 x i32>) = G_LOAD %ptr(p1) :: (load (<2 x i32>), addrspace 1)
    %el0:_(i32), %el1:_(i32) = G_UNMERGE_VALUES %vec(<2 x i32>)
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_FMUL %6, %7
    %9:_(f32) = G_BITCAST %el1(i32)
    %10:_(f32) = G_FSUB %9, %8
    %11:_(i32) = G_BITCAST %10(f32)
    $vgpr0 = COPY %11(i32)
...
