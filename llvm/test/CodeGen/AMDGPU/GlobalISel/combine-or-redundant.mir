# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_const_const_1
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_const_const_1
    ; CHECK: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: $sgpr0 = COPY [[C]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0
    %0:_(i32) = G_CONSTANT i32 255
    %1:_(i32) = G_CONSTANT i32 15
    %2:_(i32) = G_OR %0, %1
    $sgpr0 = COPY %2(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0
...

---
name:            test_const_const_2
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_const_const_2
    ; CHECK: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: $vgpr0 = COPY [[C]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %0:_(i32) = G_CONSTANT i32 15
    %1:_(i32) = G_CONSTANT i32 255
    %2:_(i32) = G_OR %0, %1
    $vgpr0 = COPY %2(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...

---
name:            test_const_const_3
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: test_const_const_3
    ; CHECK: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1431655765
    ; CHECK-NEXT: $vgpr0 = COPY [[C]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %0:_(i32) = G_CONSTANT i32 1431655765
    %1:_(i32) = G_CONSTANT i32 1145324612
    %2:_(i32) = G_OR %1, %0
    $vgpr0 = COPY %2(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...

---
name:            test_or_or
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_or_or
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[COPY]], [[C]]
    ; CHECK-NEXT: $vgpr0 = COPY [[OR]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_CONSTANT i32 255
    %2:_(i32) = G_CONSTANT i32 15
    %3:_(i32) = G_OR %0, %1
    %4:_(i32) = G_OR %3, %2
    $vgpr0 = COPY %4(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...

---
name:            test_shl_xor_or
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: test_shl_xor_or
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C]](i32)
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(i32) = G_XOR [[SHL]], [[C1]]
    ; CHECK-NEXT: $sgpr0 = COPY [[XOR]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = G_CONSTANT i32 5
    %2:_(i32) = G_CONSTANT i32 -1
    %3:_(i32) = G_CONSTANT i32 31
    %4:_(i32) = G_SHL %0, %1(i32)
    %5:_(i32) = G_XOR %4, %2
    %6:_(i32) = G_OR %5, %3
    $sgpr0 = COPY %6(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0
...

---
name:            test_lshr_xor_or
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_lshr_xor_or
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(i32) = G_XOR [[LSHR]], [[C1]]
    ; CHECK-NEXT: $vgpr0 = COPY [[XOR]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_CONSTANT i32 5
    %2:_(i32) = G_CONSTANT i32 -1
    %3:_(i32) = G_CONSTANT i32 -134217728
    %4:_(i32) = G_LSHR %0, %1(i32)
    %5:_(i32) = G_XOR %4, %2
    %6:_(i32) = G_OR %5, %3
    $vgpr0 = COPY %6(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...

---
name:            test_or_non_const
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: test_or_non_const
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -1
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(i32) = G_XOR [[LSHR]], [[C1]]
    ; CHECK-NEXT: $sgpr0 = COPY [[XOR]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = G_CONSTANT i32 16
    %3:_(i32) = G_CONSTANT i32 -1
    %4:_(i32) = G_CONSTANT i32 -65536
    %5:_(i32) = G_LSHR %0, %2(i32)
    %6:_(i32) = G_XOR %5, %3
    %7:_(i32) = G_AND %1, %4
    %8:_(i32) = G_OR %6, %7
    $sgpr0 = COPY %8(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0
...
---
name:            vector_const_splat_const_splat
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: vector_const_splat_const_splat
    ; CHECK: %mask:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: %c2:_(<2 x i16>) = G_BUILD_VECTOR %mask(i16), %mask(i16)
    ; CHECK-NEXT: $vgpr0 = COPY %c2(<2 x i16>)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %mask:_(i16) = G_CONSTANT i16 255
    %fifteen:_(i16) = G_CONSTANT i16 15
    %c1:_(<2 x i16>) = G_BUILD_VECTOR %fifteen(i16), %fifteen(i16)
    %c2:_(<2 x i16>) = G_BUILD_VECTOR %mask(i16), %mask(i16)
    %and:_(<2 x i16>) = G_OR %c1, %c2
    $vgpr0 = COPY %and(<2 x i16>)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...
---
name:            vector_const_valid_not_splat
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: vector_const_valid_not_splat
    ; CHECK: %mask:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: %c2:_(<2 x i16>) = G_BUILD_VECTOR %mask(i16), %mask(i16)
    ; CHECK-NEXT: $vgpr0 = COPY %c2(<2 x i16>)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %fifteen:_(i16) = G_CONSTANT i16 15
    %sixteen:_(i16) = G_CONSTANT i16 16
    %mask:_(i16) = G_CONSTANT i16 255
    %c1:_(<2 x i16>) = G_BUILD_VECTOR %fifteen(i16), %sixteen(i16)
    %c2:_(<2 x i16>) = G_BUILD_VECTOR %mask(i16), %mask(i16)
    %and:_(<2 x i16>) = G_OR %c1, %c2
    $vgpr0 = COPY %and(<2 x i16>)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...
---
name:            vector_dont_combine_const_too_wide
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: vector_dont_combine_const_too_wide
    ; CHECK: %fifteen:_(i16) = G_CONSTANT i16 15
    ; CHECK-NEXT: %too_wide:_(i16) = G_CONSTANT i16 257
    ; CHECK-NEXT: %mask:_(i16) = G_CONSTANT i16 255
    ; CHECK-NEXT: %c1:_(<2 x i16>) = G_BUILD_VECTOR %fifteen(i16), %too_wide(i16)
    ; CHECK-NEXT: %c2:_(<2 x i16>) = G_BUILD_VECTOR %mask(i16), %mask(i16)
    ; CHECK-NEXT: %and:_(<2 x i16>) = G_OR %c1, %c2
    ; CHECK-NEXT: $vgpr0 = COPY %and(<2 x i16>)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0
    %fifteen:_(i16) = G_CONSTANT i16 15
    %too_wide:_(i16) = G_CONSTANT i16 257
    %mask:_(i16) = G_CONSTANT i16 255
    %c1:_(<2 x i16>) = G_BUILD_VECTOR %fifteen(i16), %too_wide(i16)
    %c2:_(<2 x i16>) = G_BUILD_VECTOR %mask(i16), %mask(i16)
    %and:_(<2 x i16>) = G_OR %c1, %c2
    $vgpr0 = COPY %and(<2 x i16>)
    SI_RETURN_TO_EPILOG implicit $vgpr0
...
