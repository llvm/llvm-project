# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=amdgcn-amd-mesa3d -mcpu=gfx1010 -run-pass=amdgpu-regbank-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_smin3
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_smin3
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[AMDGPU_SMIN3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMIN3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_SMIN3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %2:vgpr(s32) = COPY $vgpr2
    %11:vgpr(s32) = G_SMIN %0, %1
    %12:vgpr(s32) = G_SMIN %11, %2
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_smin3_with_constants
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_smin3_with_constants
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AMDGPU_SMIN3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMIN3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_SMIN3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %10:vgpr(s32) = G_SMIN %0, %1
    %11:sgpr(s32) = G_CONSTANT i32 7
    %13:vgpr(s32) = COPY %11(s32)
    %12:vgpr(s32) = G_SMIN %10, %13
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_smin3_smin_umin
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_smin3_smin_umin
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[SMIN:%[0-9]+]]:vgpr(s32) = G_SMIN [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[UMIN:%[0-9]+]]:vgpr(s32) = G_UMIN [[SMIN]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[UMIN]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %10:vgpr(s32) = G_SMIN %0, %1
    %11:sgpr(s32) = G_CONSTANT i32 7
    %13:vgpr(s32) = COPY %11(s32)
    %12:vgpr(s32) = G_UMIN %10, %13
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_smin3_v2i16
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; CHECK-LABEL: name: test_smin3_v2i16
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(s32) = COPY $vgpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(s32) = COPY $vgpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(s32) = COPY $vgpr5
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY2]], 16
    ; CHECK-NEXT: [[SEXT_INREG2:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY1]], 16
    ; CHECK-NEXT: [[SEXT_INREG3:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY3]], 16
    ; CHECK-NEXT: [[SEXT_INREG4:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY4]], 16
    ; CHECK-NEXT: [[AMDGPU_SMIN3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMIN3 [[SEXT_INREG]], [[SEXT_INREG1]], [[SEXT_INREG4]]
    ; CHECK-NEXT: [[SEXT_INREG5:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY5]], 16
    ; CHECK-NEXT: [[AMDGPU_SMIN3_1:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMIN3 [[SEXT_INREG2]], [[SEXT_INREG3]], [[SEXT_INREG5]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_SMIN3_]](s32)
    ; CHECK-NEXT: $vgpr1 = COPY [[AMDGPU_SMIN3_1]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0, implicit $vgpr1
    %11:vgpr(s32) = COPY $vgpr0
    %12:vgpr(s32) = COPY $vgpr1
    %14:vgpr(s32) = COPY $vgpr2
    %15:vgpr(s32) = COPY $vgpr3
    %17:vgpr(s32) = COPY $vgpr4
    %18:vgpr(s32) = COPY $vgpr5
    %47:vgpr(s32) = G_SEXT_INREG %11, 16
    %48:vgpr(s32) = G_SEXT_INREG %14, 16
    %49:vgpr(s32) = G_SMIN %47, %48
    %44:vgpr(s32) = G_SEXT_INREG %12, 16
    %45:vgpr(s32) = G_SEXT_INREG %15, 16
    %46:vgpr(s32) = G_SMIN %44, %45
    %36:vgpr(s32) = G_SEXT_INREG %17, 16
    %37:vgpr(s32) = G_SMIN %49, %36
    %33:vgpr(s32) = G_SEXT_INREG %18, 16
    %34:vgpr(s32) = G_SMIN %46, %33
    $vgpr0 = COPY %37(s32)
    $vgpr1 = COPY %34(s32)
    SI_RETURN implicit $vgpr0, implicit $vgpr1

...
---
name:            test_smax3
alignment:       1
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_smax3
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[AMDGPU_SMAX3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMAX3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_SMAX3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %2:vgpr(s32) = COPY $vgpr2
    %11:vgpr(s32) = G_SMAX %0, %1
    %12:vgpr(s32) = G_SMAX %11, %2
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_smax3_with_constants
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_smax3_with_constants
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AMDGPU_SMAX3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMAX3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_SMAX3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %10:vgpr(s32) = G_SMAX %0, %1
    %11:sgpr(s32) = G_CONSTANT i32 7
    %13:vgpr(s32) = COPY %11(s32)
    %12:vgpr(s32) = G_SMAX %10, %13
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_smin3_smax_umax
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_smin3_smax_umax
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[SMAX:%[0-9]+]]:vgpr(s32) = G_SMAX [[COPY]], [[COPY1]]
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[UMAX:%[0-9]+]]:vgpr(s32) = G_UMAX [[SMAX]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[UMAX]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %10:vgpr(s32) = G_SMAX %0, %1
    %11:sgpr(s32) = G_CONSTANT i32 7
    %13:vgpr(s32) = COPY %11(s32)
    %12:vgpr(s32) = G_UMAX %10, %13
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_smax3_v2i16
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; CHECK-LABEL: name: test_smax3_v2i16
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(s32) = COPY $vgpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(s32) = COPY $vgpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(s32) = COPY $vgpr5
    ; CHECK-NEXT: [[SEXT_INREG:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY]], 16
    ; CHECK-NEXT: [[SEXT_INREG1:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY2]], 16
    ; CHECK-NEXT: [[SEXT_INREG2:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY1]], 16
    ; CHECK-NEXT: [[SEXT_INREG3:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY3]], 16
    ; CHECK-NEXT: [[SEXT_INREG4:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY4]], 16
    ; CHECK-NEXT: [[AMDGPU_SMAX3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMAX3 [[SEXT_INREG]], [[SEXT_INREG1]], [[SEXT_INREG4]]
    ; CHECK-NEXT: [[SEXT_INREG5:%[0-9]+]]:vgpr(s32) = G_SEXT_INREG [[COPY5]], 16
    ; CHECK-NEXT: [[AMDGPU_SMAX3_1:%[0-9]+]]:vgpr(s32) = G_AMDGPU_SMAX3 [[SEXT_INREG2]], [[SEXT_INREG3]], [[SEXT_INREG5]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_SMAX3_]](s32)
    ; CHECK-NEXT: $vgpr1 = COPY [[AMDGPU_SMAX3_1]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0, implicit $vgpr1
    %11:vgpr(s32) = COPY $vgpr0
    %12:vgpr(s32) = COPY $vgpr1
    %14:vgpr(s32) = COPY $vgpr2
    %15:vgpr(s32) = COPY $vgpr3
    %17:vgpr(s32) = COPY $vgpr4
    %18:vgpr(s32) = COPY $vgpr5
    %47:vgpr(s32) = G_SEXT_INREG %11, 16
    %48:vgpr(s32) = G_SEXT_INREG %14, 16
    %49:vgpr(s32) = G_SMAX %47, %48
    %44:vgpr(s32) = G_SEXT_INREG %12, 16
    %45:vgpr(s32) = G_SEXT_INREG %15, 16
    %46:vgpr(s32) = G_SMAX %44, %45
    %36:vgpr(s32) = G_SEXT_INREG %17, 16
    %37:vgpr(s32) = G_SMAX %49, %36
    %33:vgpr(s32) = G_SEXT_INREG %18, 16
    %34:vgpr(s32) = G_SMAX %46, %33
    $vgpr0 = COPY %37(s32)
    $vgpr1 = COPY %34(s32)
    SI_RETURN implicit $vgpr0, implicit $vgpr1

...
---
name:            test_umin3
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_umin3
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[AMDGPU_UMIN3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMIN3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_UMIN3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %2:vgpr(s32) = COPY $vgpr2
    %11:vgpr(s32) = G_UMIN %0, %1
    %12:vgpr(s32) = G_UMIN %11, %2
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_umin3_with_constants
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_umin3_with_constants
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AMDGPU_UMIN3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMIN3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_UMIN3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %10:vgpr(s32) = G_UMIN %0, %1
    %11:sgpr(s32) = G_CONSTANT i32 7
    %13:vgpr(s32) = COPY %11(s32)
    %12:vgpr(s32) = G_UMIN %10, %13
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_umin3_v2i16
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; CHECK-LABEL: name: test_umin3_v2i16
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(s32) = COPY $vgpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(s32) = COPY $vgpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(s32) = COPY $vgpr5
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vgpr(s32) = G_AND [[COPY]], [[COPY6]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:vgpr(s32) = G_AND [[COPY2]], [[COPY7]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:vgpr(s32) = G_AND [[COPY1]], [[COPY8]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:vgpr(s32) = G_AND [[COPY3]], [[COPY9]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:vgpr(s32) = G_AND [[COPY4]], [[COPY10]]
    ; CHECK-NEXT: [[AMDGPU_UMIN3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMIN3 [[AND]], [[AND1]], [[AND4]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:vgpr(s32) = G_AND [[COPY5]], [[COPY11]]
    ; CHECK-NEXT: [[AMDGPU_UMIN3_1:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMIN3 [[AND2]], [[AND3]], [[AND5]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_UMIN3_]](s32)
    ; CHECK-NEXT: $vgpr1 = COPY [[AMDGPU_UMIN3_1]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0, implicit $vgpr1
    %11:vgpr(s32) = COPY $vgpr0
    %12:vgpr(s32) = COPY $vgpr1
    %14:vgpr(s32) = COPY $vgpr2
    %15:vgpr(s32) = COPY $vgpr3
    %17:vgpr(s32) = COPY $vgpr4
    %18:vgpr(s32) = COPY $vgpr5
    %50:sgpr(s32) = G_CONSTANT i32 65535
    %51:vgpr(s32) = COPY %50(s32)
    %47:vgpr(s32) = G_AND %11, %51
    %52:vgpr(s32) = COPY %50(s32)
    %48:vgpr(s32) = G_AND %14, %52
    %49:vgpr(s32) = G_UMIN %47, %48
    %53:vgpr(s32) = COPY %50(s32)
    %44:vgpr(s32) = G_AND %12, %53
    %54:vgpr(s32) = COPY %50(s32)
    %45:vgpr(s32) = G_AND %15, %54
    %46:vgpr(s32) = G_UMIN %44, %45
    %55:vgpr(s32) = COPY %50(s32)
    %36:vgpr(s32) = G_AND %17, %55
    %37:vgpr(s32) = G_UMIN %49, %36
    %56:vgpr(s32) = COPY %50(s32)
    %33:vgpr(s32) = G_AND %18, %56
    %34:vgpr(s32) = G_UMIN %46, %33
    $vgpr0 = COPY %37(s32)
    $vgpr1 = COPY %34(s32)
    SI_RETURN implicit $vgpr0, implicit $vgpr1

...
---
name:            test_umax3
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_umax3
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[AMDGPU_UMAX3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMAX3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_UMAX3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %2:vgpr(s32) = COPY $vgpr2
    %11:vgpr(s32) = G_UMAX %0, %1
    %12:vgpr(s32) = G_UMAX %11, %2
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_umax3_with_constants
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_umax3_with_constants
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 7
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AMDGPU_UMAX3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMAX3 [[COPY]], [[COPY1]], [[COPY2]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_UMAX3_]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr(s32) = COPY $vgpr0
    %1:vgpr(s32) = COPY $vgpr1
    %10:vgpr(s32) = G_UMAX %0, %1
    %11:sgpr(s32) = G_CONSTANT i32 7
    %13:vgpr(s32) = COPY %11(s32)
    %12:vgpr(s32) = G_UMAX %10, %13
    $vgpr0 = COPY %12(s32)
    SI_RETURN implicit $vgpr0

...
---
name:            test_umax3_v2i16
alignment:       1
legalized:       true
body:             |
  bb.1:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5

    ; CHECK-LABEL: name: test_umax3_v2i16
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3, $vgpr4, $vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(s32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(s32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(s32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(s32) = COPY $vgpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(s32) = COPY $vgpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(s32) = COPY $vgpr5
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(s32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vgpr(s32) = G_AND [[COPY]], [[COPY6]]
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:vgpr(s32) = G_AND [[COPY2]], [[COPY7]]
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND2:%[0-9]+]]:vgpr(s32) = G_AND [[COPY1]], [[COPY8]]
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND3:%[0-9]+]]:vgpr(s32) = G_AND [[COPY3]], [[COPY9]]
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND4:%[0-9]+]]:vgpr(s32) = G_AND [[COPY4]], [[COPY10]]
    ; CHECK-NEXT: [[AMDGPU_UMAX3_:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMAX3 [[AND]], [[AND1]], [[AND4]]
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:vgpr(s32) = COPY [[C]](s32)
    ; CHECK-NEXT: [[AND5:%[0-9]+]]:vgpr(s32) = G_AND [[COPY5]], [[COPY11]]
    ; CHECK-NEXT: [[AMDGPU_UMAX3_1:%[0-9]+]]:vgpr(s32) = G_AMDGPU_UMAX3 [[AND2]], [[AND3]], [[AND5]]
    ; CHECK-NEXT: $vgpr0 = COPY [[AMDGPU_UMAX3_]](s32)
    ; CHECK-NEXT: $vgpr1 = COPY [[AMDGPU_UMAX3_1]](s32)
    ; CHECK-NEXT: SI_RETURN implicit $vgpr0, implicit $vgpr1
    %11:vgpr(s32) = COPY $vgpr0
    %12:vgpr(s32) = COPY $vgpr1
    %14:vgpr(s32) = COPY $vgpr2
    %15:vgpr(s32) = COPY $vgpr3
    %17:vgpr(s32) = COPY $vgpr4
    %18:vgpr(s32) = COPY $vgpr5
    %50:sgpr(s32) = G_CONSTANT i32 65535
    %51:vgpr(s32) = COPY %50(s32)
    %47:vgpr(s32) = G_AND %11, %51
    %52:vgpr(s32) = COPY %50(s32)
    %48:vgpr(s32) = G_AND %14, %52
    %49:vgpr(s32) = G_UMAX %47, %48
    %53:vgpr(s32) = COPY %50(s32)
    %44:vgpr(s32) = G_AND %12, %53
    %54:vgpr(s32) = COPY %50(s32)
    %45:vgpr(s32) = G_AND %15, %54
    %46:vgpr(s32) = G_UMAX %44, %45
    %55:vgpr(s32) = COPY %50(s32)
    %36:vgpr(s32) = G_AND %17, %55
    %37:vgpr(s32) = G_UMAX %49, %36
    %56:vgpr(s32) = COPY %50(s32)
    %33:vgpr(s32) = G_AND %18, %56
    %34:vgpr(s32) = G_UMAX %46, %33
    $vgpr0 = COPY %37(s32)
    $vgpr1 = COPY %34(s32)
    SI_RETURN implicit $vgpr0, implicit $vgpr1

...
