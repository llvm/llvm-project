# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-amd-amdhsa -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name: test_fcanonicalize
tracksRegLiveness: true
legalized: true
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fcanonicalize
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FCANONICALIZE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FCANONICALIZE %1
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...

---
name: test_fconstant
tracksRegLiveness: true
legalized: true
body: |
  bb.0:

    ; CHECK-LABEL: name: test_fconstant
    ; CHECK: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+10
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[C]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST]](i32)
    %0:_(f32) = G_FCONSTANT float 1.000000e+10
    %1:_(f32) = G_FCANONICALIZE %0
    %2:_(i32) = G_BITCAST %1(f32)
    $vgpr0 = COPY %2(i32)
...

# FIXME: Mode fields are redundant and not considered.
---
name: test_denormal_fconstant
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    fp64-fp16-output-denormals: false
    fp64-fp16-input-denormals: false
body: |
  bb.0:

    ; CHECK-LABEL: name: test_denormal_fconstant
    ; CHECK: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.618950e-319
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i64) = G_BITCAST [[C]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](i64)
    %0:_(f64) = G_FCONSTANT double 1.618950e-319
    %1:_(f64) = G_FCANONICALIZE %0
    %2:_(i64) = G_BITCAST %1(f64)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name: test_fminnum_with_fminnum_argument_s32_ieee_mode_on
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fminnum_with_fminnum_argument_s32_ieee_mode_on
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; CHECK-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMINNUM_IEEE]], [[FCANONICALIZE2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_FCANONICALIZE %4
    %6:_(f32) = G_FMINNUM_IEEE %3, %5
    %7:_(i32) = COPY $vgpr2
    %8:_(f32) = G_FCANONICALIZE %6
    %9:_(f32) = G_BITCAST %7(i32)
    %10:_(f32) = G_FCANONICALIZE %9
    %11:_(f32) = G_FMINNUM_IEEE %8, %10
    %12:_(i32) = G_BITCAST %11(f32)
    $vgpr0 = COPY %12(i32)
...

---
name: test_fminnum_with_fmaxnum_argument_s32_ieee_mode_on
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fminnum_with_fmaxnum_argument_s32_ieee_mode_on
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMAXNUM_IEEE]], [[FCANONICALIZE2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_FCANONICALIZE %4
    %6:_(f32) = G_FMAXNUM_IEEE %3, %5
    %7:_(i32) = COPY $vgpr2
    %8:_(f32) = G_FCANONICALIZE %6
    %9:_(f32) = G_BITCAST %7(i32)
    %10:_(f32) = G_FCANONICALIZE %9
    %11:_(f32) = G_FMINNUM_IEEE %8, %10
    %12:_(i32) = G_BITCAST %11(f32)
    $vgpr0 = COPY %12(i32)
...

---
name: test_fmaxnum_with_fmaxnum_argument_s32_ieee_mode_on
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fmaxnum_with_fmaxnum_argument_s32_ieee_mode_on
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FMAXNUM_IEEE]], [[FCANONICALIZE2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAXNUM_IEEE1]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_FCANONICALIZE %4
    %6:_(f32) = G_FMAXNUM_IEEE %3, %5
    %7:_(i32) = COPY $vgpr2
    %8:_(f32) = G_FCANONICALIZE %6
    %9:_(f32) = G_BITCAST %7(i32)
    %10:_(f32) = G_FCANONICALIZE %9
    %11:_(f32) = G_FMAXNUM_IEEE %8, %10
    %12:_(i32) = G_BITCAST %11(f32)
    $vgpr0 = COPY %12(i32)
...

---
name: test_fmaxnum_with_fminnum_argument_s32_ieee_mode_on
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: test_fmaxnum_with_fminnum_argument_s32_ieee_mode_on
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FMINNUM_IEEE]], [[FCANONICALIZE2]]
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAXNUM_IEEE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_FCANONICALIZE %4
    %6:_(f32) = G_FMINNUM_IEEE %3, %5
    %7:_(i32) = COPY $vgpr2
    %8:_(f32) = G_FCANONICALIZE %6
    %9:_(f32) = G_BITCAST %7(i32)
    %10:_(f32) = G_FCANONICALIZE %9
    %11:_(f32) = G_FMAXNUM_IEEE %8, %10
    %12:_(i32) = G_BITCAST %11(f32)
    $vgpr0 = COPY %12(i32)
...

---
name: test_multiple_uses
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_multiple_uses
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FMINNUM_IEEE]], [[FMINNUM_IEEE]]
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMAXNUM_IEEE]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_FCANONICALIZE %4
    %6:_(f32) = G_FMINNUM_IEEE %3, %5
    %7:_(f32) = G_FCANONICALIZE %6
    %8:_(f32) = G_FCANONICALIZE %6
    %9:_(f32) = G_FMAXNUM_IEEE %7, %8
    %10:_(i32) = G_BITCAST %9(f32)
    $vgpr0 = COPY %10(i32)
...

---
name: test_splat_padded_with_undef
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0 :
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_splat_padded_with_undef
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: %two:_(f16) = G_FCONSTANT half 0xH4000
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i16) = G_BITCAST %two(f16)
    ; CHECK-NEXT: %two_s32:_(i32) = G_ANYEXT [[BITCAST]](i16)
    ; CHECK-NEXT: %two_splat:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %two_s32(i32), %two_s32(i32)
    ; CHECK-NEXT: %zero:_(f16) = G_FCONSTANT half 0xH0000
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %zero(f16)
    ; CHECK-NEXT: %zero_s32:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %zero_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %zero_s32(i32), %undef(i32)
    ; CHECK-NEXT: %one:_(f16) = G_FCONSTANT half 0xH3C00
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST %one(f16)
    ; CHECK-NEXT: %one_s32:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; CHECK-NEXT: %one_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %one_s32(i32), %undef(i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f16>) = G_BITCAST %two_splat(<2 x i16>)
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(<2 x f16>) = G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x f16>) = G_BITCAST %zero_undef(<2 x i16>)
    ; CHECK-NEXT: %zero_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST5]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMAXNUM_IEEE %zero_undef_fcan, [[FMUL]]
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x f16>) = G_BITCAST %one_undef(<2 x i16>)
    ; CHECK-NEXT: %one_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST6]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE %one_undef_fcan, [[FMAXNUM_IEEE]]
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FMINNUM_IEEE]](<2 x f16>)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST7]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %two:_(f16) = G_FCONSTANT half 0xH4000
    %2:_(i16) = G_BITCAST %two(f16)
    %two_s32:_(i32) = G_ANYEXT %2(i16)
    %two_splat:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %two_s32(i32), %two_s32(i32)
    %zero:_(f16) = G_FCONSTANT half 0xH0000
    %6:_(i16) = G_BITCAST %zero(f16)
    %zero_s32:_(i32) = G_ANYEXT %6(i16)
    %undef:_(i32) = G_IMPLICIT_DEF
    %zero_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %zero_s32(i32), %undef(i32)
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %11:_(i16) = G_BITCAST %one(f16)
    %one_s32:_(i32) = G_ANYEXT %11(i16)
    %one_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %one_s32(i32), %undef(i32)
    %14:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %15:_(<2 x f16>) = G_BITCAST %two_splat(<2 x i16>)
    %16:_(<2 x f16>) = G_FMUL %14, %15
    %17:_(<2 x f16>) = G_BITCAST %zero_undef(<2 x i16>)
    %zero_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE %17
    %19:_(<2 x f16>) = G_FCANONICALIZE %16
    %20:_(<2 x f16>) = G_FMAXNUM_IEEE %zero_undef_fcan, %19
    %21:_(<2 x f16>) = G_BITCAST %one_undef(<2 x i16>)
    %one_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE %21
    %23:_(<2 x f16>) = G_FCANONICALIZE %20
    %24:_(<2 x f16>) = G_FMINNUM_IEEE %one_undef_fcan, %23
    %25:_(<2 x i16>) = G_BITCAST %24(<2 x f16>)
    $vgpr0 = COPY %25(<2 x i16>)
...

---
name: test_splat_SNaN_and_QNaN_padded_with_undef
tracksRegLiveness: true
legalized: true
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0 :
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_splat_SNaN_and_QNaN_padded_with_undef
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: %two:_(f16) = G_FCONSTANT half 0xH4000
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i16) = G_BITCAST %two(f16)
    ; CHECK-NEXT: %two_s32:_(i32) = G_ANYEXT [[BITCAST]](i16)
    ; CHECK-NEXT: %two_splat:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %two_s32(i32), %two_s32(i32)
    ; CHECK-NEXT: %snan:_(f16) = G_FCONSTANT half 0xH7C01
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %snan(f16)
    ; CHECK-NEXT: %snan_s32:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: %undef:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %snan_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %snan_s32(i32), %undef(i32)
    ; CHECK-NEXT: %qnan:_(f16) = G_FCONSTANT half 0xH7E01
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST %qnan(f16)
    ; CHECK-NEXT: %qnan_s32:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; CHECK-NEXT: %qnan_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %qnan_s32(i32), %undef(i32)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x f16>) = G_BITCAST %two_splat(<2 x i16>)
    ; CHECK-NEXT: [[FMUL:%[0-9]+]]:_(<2 x f16>) = G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x f16>) = G_BITCAST %snan_undef(<2 x i16>)
    ; CHECK-NEXT: %snan_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST5]]
    ; CHECK-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMAXNUM_IEEE %snan_undef_fcan, [[FMUL]]
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x f16>) = G_BITCAST %qnan_undef(<2 x i16>)
    ; CHECK-NEXT: %qnan_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST6]]
    ; CHECK-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE %qnan_undef_fcan, [[FMAXNUM_IEEE]]
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FMINNUM_IEEE]](<2 x f16>)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST7]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %two:_(f16) = G_FCONSTANT half 0xH4000
    %2:_(i16) = G_BITCAST %two(f16)
    %two_s32:_(i32) = G_ANYEXT %2(i16)
    %two_splat:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %two_s32(i32), %two_s32(i32)
    %snan:_(f16) = G_FCONSTANT half 0xH7C01
    %6:_(i16) = G_BITCAST %snan(f16)
    %snan_s32:_(i32) = G_ANYEXT %6(i16)
    %undef:_(i32) = G_IMPLICIT_DEF
    %snan_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %snan_s32(i32), %undef(i32)
    %qnan:_(f16) = G_FCONSTANT half 0xH7E01
    %11:_(i16) = G_BITCAST %qnan(f16)
    %qnan_s32:_(i32) = G_ANYEXT %11(i16)
    %qnan_undef:_(<2 x i16>) = G_BUILD_VECTOR_TRUNC %qnan_s32(i32), %undef(i32)
    %14:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %15:_(<2 x f16>) = G_BITCAST %two_splat(<2 x i16>)
    %16:_(<2 x f16>) = G_FMUL %14, %15
    %17:_(<2 x f16>) = G_BITCAST %snan_undef(<2 x i16>)
    %snan_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE %17
    %19:_(<2 x f16>) = G_FCANONICALIZE %16
    %20:_(<2 x f16>) = G_FMAXNUM_IEEE %snan_undef_fcan, %19
    %21:_(<2 x f16>) = G_BITCAST %qnan_undef(<2 x i16>)
    %qnan_undef_fcan:_(<2 x f16>) = G_FCANONICALIZE %21
    %23:_(<2 x f16>) = G_FCANONICALIZE %20
    %24:_(<2 x f16>) = G_FMINNUM_IEEE %qnan_undef_fcan, %23
    %25:_(<2 x i16>) = G_BITCAST %24(<2 x f16>)
    $vgpr0 = COPY %25(<2 x i16>)
...

---
name: test_fcanonicalize_log
tracksRegLiveness: true
legalized: true
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fcanonicalize_log
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.log), [[BITCAST]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.log), %1(f32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...

---
name: test_fcanonicalize_exp2
tracksRegLiveness: true
legalized: true
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fcanonicalize_exp2
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[BITCAST]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), %1(f32)
    %3:_(f32) = G_FCANONICALIZE %2
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...
