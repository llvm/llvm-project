# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer %s -o - | FileCheck %s --check-prefix=GFX8
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx906 -O0 -run-pass=legalizer %s -o - | FileCheck %s --check-prefix=GFX9

---
name: test_umulo_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_umulo_s32
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[COPY]], [[COPY1]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[COPY]], [[COPY1]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH]](i32), [[C]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[MUL]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_umulo_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[COPY]], [[COPY1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[COPY]], [[COPY1]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH]](i32), [[C]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[MUL]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32), %3:_(i1) = G_UMULO %0, %1
    %4:_(i32) = G_ZEXT %3(i1)
    $vgpr0 = COPY %2(i32)
    $vgpr1 = COPY %4(i32)
...

---
name: test_umulo_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX8-LABEL: name: test_umulo_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[UV]], [[UV2]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV]], [[UV2]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH]](i32), [[C]]
    ; GFX8-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH1]](i32), [[C]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[MUL]](i32), [[MUL1]](i32)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX8-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ; GFX8-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_umulo_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[UV]], [[UV2]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV]], [[UV2]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH]](i32), [[C]]
    ; GFX9-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH1]](i32), [[C]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[MUL]](i32), [[MUL1]](i32)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND]](i32), [[AND1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ; GFX9-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>), %3:_(<2 x i1>) = G_UMULO %0, %1
    %4:_(<2 x i32>) = G_ZEXT %3(<2 x i1>)
    $vgpr0_vgpr1 = COPY %2(<2 x i32>)
    $vgpr2_vgpr3 = COPY %4(<2 x i32>)
...

---
name: test_umulo_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX8-LABEL: name: test_umulo_s64
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV2]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV]], [[UV3]]
    ; GFX8-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[UV]], [[UV2]]
    ; GFX8-NEXT: [[UADDO:%[0-9]+]]:_(i32), [[UADDO1:%[0-9]+]]:_(i1) = G_UADDO [[MUL]], [[MUL1]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO1]](i1)
    ; GFX8-NEXT: [[UADDO2:%[0-9]+]]:_(i32), [[UADDO3:%[0-9]+]]:_(i1) = G_UADDO [[UADDO]], [[UMULH]]
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO3]](i1)
    ; GFX8-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[ZEXT]], [[ZEXT1]]
    ; GFX8-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[UV1]], [[UV2]]
    ; GFX8-NEXT: [[UMULH2:%[0-9]+]]:_(i32) = G_UMULH [[UV]], [[UV3]]
    ; GFX8-NEXT: [[UADDO4:%[0-9]+]]:_(i32), [[UADDO5:%[0-9]+]]:_(i1) = G_UADDO [[MUL2]], [[UMULH1]]
    ; GFX8-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO5]](i1)
    ; GFX8-NEXT: [[UADDO6:%[0-9]+]]:_(i32), [[UADDO7:%[0-9]+]]:_(i1) = G_UADDO [[UADDO4]], [[UMULH2]]
    ; GFX8-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO7]](i1)
    ; GFX8-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[ZEXT2]], [[ZEXT3]]
    ; GFX8-NEXT: [[UADDO8:%[0-9]+]]:_(i32), [[UADDO9:%[0-9]+]]:_(i1) = G_UADDO [[UADDO6]], [[ADD]]
    ; GFX8-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO9]](i1)
    ; GFX8-NEXT: [[ADD2:%[0-9]+]]:_(i32) = G_ADD [[ADD1]], [[ZEXT4]]
    ; GFX8-NEXT: [[UMULH3:%[0-9]+]]:_(i32) = G_UMULH [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[ADD3:%[0-9]+]]:_(i32) = G_ADD [[UMULH3]], [[ADD2]]
    ; GFX8-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDO8]](i32), [[ADD3]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX8-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_1:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV4]](i32), [[UV6]], [[C]]
    ; GFX8-NEXT: [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_]](i64)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[UV9]](i32)
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_2:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_3:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV4]](i32), [[UV7]], [[ANYEXT]]
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_4:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_5:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV5]](i32), [[UV6]], [[AMDGPU_MAD_U64_U32_2]]
    ; GFX8-NEXT: [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_4]](i64)
    ; GFX8-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV8]](i32), [[UV10]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MV]](i64), [[C]]
    ; GFX8-NEXT: [[ZEXT5:%[0-9]+]]:_(i64) = G_ZEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[MV1]](i64)
    ; GFX8-NEXT: $vgpr2_vgpr3 = COPY [[ZEXT5]](i64)
    ;
    ; GFX9-LABEL: name: test_umulo_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV2]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV]], [[UV3]]
    ; GFX9-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[UV]], [[UV2]]
    ; GFX9-NEXT: [[UADDO:%[0-9]+]]:_(i32), [[UADDO1:%[0-9]+]]:_(i1) = G_UADDO [[MUL]], [[MUL1]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO1]](i1)
    ; GFX9-NEXT: [[UADDO2:%[0-9]+]]:_(i32), [[UADDO3:%[0-9]+]]:_(i1) = G_UADDO [[UADDO]], [[UMULH]]
    ; GFX9-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO3]](i1)
    ; GFX9-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[ZEXT]], [[ZEXT1]]
    ; GFX9-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[UV1]], [[UV2]]
    ; GFX9-NEXT: [[UMULH2:%[0-9]+]]:_(i32) = G_UMULH [[UV]], [[UV3]]
    ; GFX9-NEXT: [[UADDO4:%[0-9]+]]:_(i32), [[UADDO5:%[0-9]+]]:_(i1) = G_UADDO [[MUL2]], [[UMULH1]]
    ; GFX9-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO5]](i1)
    ; GFX9-NEXT: [[UADDO6:%[0-9]+]]:_(i32), [[UADDO7:%[0-9]+]]:_(i1) = G_UADDO [[UADDO4]], [[UMULH2]]
    ; GFX9-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO7]](i1)
    ; GFX9-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[ZEXT2]], [[ZEXT3]]
    ; GFX9-NEXT: [[UADDO8:%[0-9]+]]:_(i32), [[UADDO9:%[0-9]+]]:_(i1) = G_UADDO [[UADDO6]], [[ADD]]
    ; GFX9-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO9]](i1)
    ; GFX9-NEXT: [[ADD2:%[0-9]+]]:_(i32) = G_ADD [[ADD1]], [[ZEXT4]]
    ; GFX9-NEXT: [[UMULH3:%[0-9]+]]:_(i32) = G_UMULH [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[ADD3:%[0-9]+]]:_(i32) = G_ADD [[UMULH3]], [[ADD2]]
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDO8]](i32), [[ADD3]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_1:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV4]](i32), [[UV6]], [[C]]
    ; GFX9-NEXT: [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_]](i64)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[UV9]](i32)
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_2:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_3:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV4]](i32), [[UV7]], [[ANYEXT]]
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_4:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_5:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV5]](i32), [[UV6]], [[AMDGPU_MAD_U64_U32_2]]
    ; GFX9-NEXT: [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_4]](i64)
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV8]](i32), [[UV10]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MV]](i64), [[C]]
    ; GFX9-NEXT: [[ZEXT5:%[0-9]+]]:_(i64) = G_ZEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[MV1]](i64)
    ; GFX9-NEXT: $vgpr2_vgpr3 = COPY [[ZEXT5]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(i64), %3:_(i1) = G_UMULO %0, %1
    %4:_(i64) = G_ZEXT %3(i1)
    $vgpr0_vgpr1 = COPY %2(i64)
    $vgpr2_vgpr3 = COPY %4(i64)
...

---
name: test_umulo_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7

    ; GFX8-LABEL: name: test_umulo_v2s64
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY1]](<2 x i64>)
    ; GFX8-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; GFX8-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV2]](i64)
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV5]], [[UV6]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV4]], [[UV7]]
    ; GFX8-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[UV4]], [[UV6]]
    ; GFX8-NEXT: [[UADDO:%[0-9]+]]:_(i32), [[UADDO1:%[0-9]+]]:_(i1) = G_UADDO [[MUL]], [[MUL1]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO1]](i1)
    ; GFX8-NEXT: [[UADDO2:%[0-9]+]]:_(i32), [[UADDO3:%[0-9]+]]:_(i1) = G_UADDO [[UADDO]], [[UMULH]]
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO3]](i1)
    ; GFX8-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[ZEXT]], [[ZEXT1]]
    ; GFX8-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[UV5]], [[UV7]]
    ; GFX8-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[UV5]], [[UV6]]
    ; GFX8-NEXT: [[UMULH2:%[0-9]+]]:_(i32) = G_UMULH [[UV4]], [[UV7]]
    ; GFX8-NEXT: [[UADDO4:%[0-9]+]]:_(i32), [[UADDO5:%[0-9]+]]:_(i1) = G_UADDO [[MUL2]], [[UMULH1]]
    ; GFX8-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO5]](i1)
    ; GFX8-NEXT: [[UADDO6:%[0-9]+]]:_(i32), [[UADDO7:%[0-9]+]]:_(i1) = G_UADDO [[UADDO4]], [[UMULH2]]
    ; GFX8-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO7]](i1)
    ; GFX8-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[ZEXT2]], [[ZEXT3]]
    ; GFX8-NEXT: [[UADDO8:%[0-9]+]]:_(i32), [[UADDO9:%[0-9]+]]:_(i1) = G_UADDO [[UADDO6]], [[ADD]]
    ; GFX8-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO9]](i1)
    ; GFX8-NEXT: [[ADD2:%[0-9]+]]:_(i32) = G_ADD [[ADD1]], [[ZEXT4]]
    ; GFX8-NEXT: [[UMULH3:%[0-9]+]]:_(i32) = G_UMULH [[UV5]], [[UV7]]
    ; GFX8-NEXT: [[ADD3:%[0-9]+]]:_(i32) = G_ADD [[UMULH3]], [[ADD2]]
    ; GFX8-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDO8]](i32), [[ADD3]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; GFX8-NEXT: [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV2]](i64)
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_1:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV8]](i32), [[UV10]], [[C]]
    ; GFX8-NEXT: [[UV12:%[0-9]+]]:_(i32), [[UV13:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_]](i64)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[UV13]](i32)
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_2:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_3:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV8]](i32), [[UV11]], [[ANYEXT]]
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_4:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_5:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV9]](i32), [[UV10]], [[AMDGPU_MAD_U64_U32_2]]
    ; GFX8-NEXT: [[UV14:%[0-9]+]]:_(i32), [[UV15:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_4]](i64)
    ; GFX8-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV12]](i32), [[UV14]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MV]](i64), [[C]]
    ; GFX8-NEXT: [[UV16:%[0-9]+]]:_(i32), [[UV17:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; GFX8-NEXT: [[UV18:%[0-9]+]]:_(i32), [[UV19:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV3]](i64)
    ; GFX8-NEXT: [[MUL3:%[0-9]+]]:_(i32) = G_MUL [[UV17]], [[UV18]]
    ; GFX8-NEXT: [[MUL4:%[0-9]+]]:_(i32) = G_MUL [[UV16]], [[UV19]]
    ; GFX8-NEXT: [[UMULH4:%[0-9]+]]:_(i32) = G_UMULH [[UV16]], [[UV18]]
    ; GFX8-NEXT: [[UADDO10:%[0-9]+]]:_(i32), [[UADDO11:%[0-9]+]]:_(i1) = G_UADDO [[MUL3]], [[MUL4]]
    ; GFX8-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO11]](i1)
    ; GFX8-NEXT: [[UADDO12:%[0-9]+]]:_(i32), [[UADDO13:%[0-9]+]]:_(i1) = G_UADDO [[UADDO10]], [[UMULH4]]
    ; GFX8-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO13]](i1)
    ; GFX8-NEXT: [[ADD4:%[0-9]+]]:_(i32) = G_ADD [[ZEXT5]], [[ZEXT6]]
    ; GFX8-NEXT: [[MUL5:%[0-9]+]]:_(i32) = G_MUL [[UV17]], [[UV19]]
    ; GFX8-NEXT: [[UMULH5:%[0-9]+]]:_(i32) = G_UMULH [[UV17]], [[UV18]]
    ; GFX8-NEXT: [[UMULH6:%[0-9]+]]:_(i32) = G_UMULH [[UV16]], [[UV19]]
    ; GFX8-NEXT: [[UADDO14:%[0-9]+]]:_(i32), [[UADDO15:%[0-9]+]]:_(i1) = G_UADDO [[MUL5]], [[UMULH5]]
    ; GFX8-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO15]](i1)
    ; GFX8-NEXT: [[UADDO16:%[0-9]+]]:_(i32), [[UADDO17:%[0-9]+]]:_(i1) = G_UADDO [[UADDO14]], [[UMULH6]]
    ; GFX8-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO17]](i1)
    ; GFX8-NEXT: [[ADD5:%[0-9]+]]:_(i32) = G_ADD [[ZEXT7]], [[ZEXT8]]
    ; GFX8-NEXT: [[UADDO18:%[0-9]+]]:_(i32), [[UADDO19:%[0-9]+]]:_(i1) = G_UADDO [[UADDO16]], [[ADD4]]
    ; GFX8-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO19]](i1)
    ; GFX8-NEXT: [[ADD6:%[0-9]+]]:_(i32) = G_ADD [[ADD5]], [[ZEXT9]]
    ; GFX8-NEXT: [[UMULH7:%[0-9]+]]:_(i32) = G_UMULH [[UV17]], [[UV19]]
    ; GFX8-NEXT: [[ADD7:%[0-9]+]]:_(i32) = G_ADD [[UMULH7]], [[ADD6]]
    ; GFX8-NEXT: [[MV2:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDO18]](i32), [[ADD7]](i32)
    ; GFX8-NEXT: [[UV20:%[0-9]+]]:_(i32), [[UV21:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; GFX8-NEXT: [[UV22:%[0-9]+]]:_(i32), [[UV23:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV3]](i64)
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_6:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_7:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV20]](i32), [[UV22]], [[C]]
    ; GFX8-NEXT: [[UV24:%[0-9]+]]:_(i32), [[UV25:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_6]](i64)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[UV25]](i32)
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_8:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_9:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV20]](i32), [[UV23]], [[ANYEXT1]]
    ; GFX8-NEXT: [[AMDGPU_MAD_U64_U32_10:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_11:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV21]](i32), [[UV22]], [[AMDGPU_MAD_U64_U32_8]]
    ; GFX8-NEXT: [[UV26:%[0-9]+]]:_(i32), [[UV27:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_10]](i64)
    ; GFX8-NEXT: [[MV3:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV24]](i32), [[UV26]](i32)
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MV2]](i64), [[C]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[MV1]](i64), [[MV3]](i64)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[ANYEXT2]], [[C1]]
    ; GFX8-NEXT: [[ANYEXT3:%[0-9]+]]:_(i64) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[ANYEXT3]], [[C1]]
    ; GFX8-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[AND]](i64), [[AND1]](i64)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ; GFX8-NEXT: $vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR1]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_umulo_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY1]](<2 x i64>)
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV2]](i64)
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV5]], [[UV6]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV4]], [[UV7]]
    ; GFX9-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[UV4]], [[UV6]]
    ; GFX9-NEXT: [[UADDO:%[0-9]+]]:_(i32), [[UADDO1:%[0-9]+]]:_(i1) = G_UADDO [[MUL]], [[MUL1]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO1]](i1)
    ; GFX9-NEXT: [[UADDO2:%[0-9]+]]:_(i32), [[UADDO3:%[0-9]+]]:_(i1) = G_UADDO [[UADDO]], [[UMULH]]
    ; GFX9-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO3]](i1)
    ; GFX9-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[ZEXT]], [[ZEXT1]]
    ; GFX9-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[UV5]], [[UV7]]
    ; GFX9-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[UV5]], [[UV6]]
    ; GFX9-NEXT: [[UMULH2:%[0-9]+]]:_(i32) = G_UMULH [[UV4]], [[UV7]]
    ; GFX9-NEXT: [[UADDO4:%[0-9]+]]:_(i32), [[UADDO5:%[0-9]+]]:_(i1) = G_UADDO [[MUL2]], [[UMULH1]]
    ; GFX9-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO5]](i1)
    ; GFX9-NEXT: [[UADDO6:%[0-9]+]]:_(i32), [[UADDO7:%[0-9]+]]:_(i1) = G_UADDO [[UADDO4]], [[UMULH2]]
    ; GFX9-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO7]](i1)
    ; GFX9-NEXT: [[ADD1:%[0-9]+]]:_(i32) = G_ADD [[ZEXT2]], [[ZEXT3]]
    ; GFX9-NEXT: [[UADDO8:%[0-9]+]]:_(i32), [[UADDO9:%[0-9]+]]:_(i1) = G_UADDO [[UADDO6]], [[ADD]]
    ; GFX9-NEXT: [[ZEXT4:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO9]](i1)
    ; GFX9-NEXT: [[ADD2:%[0-9]+]]:_(i32) = G_ADD [[ADD1]], [[ZEXT4]]
    ; GFX9-NEXT: [[UMULH3:%[0-9]+]]:_(i32) = G_UMULH [[UV5]], [[UV7]]
    ; GFX9-NEXT: [[ADD3:%[0-9]+]]:_(i32) = G_ADD [[UMULH3]], [[ADD2]]
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDO8]](i32), [[ADD3]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV]](i64)
    ; GFX9-NEXT: [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV2]](i64)
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_1:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV8]](i32), [[UV10]], [[C]]
    ; GFX9-NEXT: [[UV12:%[0-9]+]]:_(i32), [[UV13:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_]](i64)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[UV13]](i32)
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_2:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_3:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV8]](i32), [[UV11]], [[ANYEXT]]
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_4:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_5:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV9]](i32), [[UV10]], [[AMDGPU_MAD_U64_U32_2]]
    ; GFX9-NEXT: [[UV14:%[0-9]+]]:_(i32), [[UV15:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_4]](i64)
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV12]](i32), [[UV14]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MV]](i64), [[C]]
    ; GFX9-NEXT: [[UV16:%[0-9]+]]:_(i32), [[UV17:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; GFX9-NEXT: [[UV18:%[0-9]+]]:_(i32), [[UV19:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV3]](i64)
    ; GFX9-NEXT: [[MUL3:%[0-9]+]]:_(i32) = G_MUL [[UV17]], [[UV18]]
    ; GFX9-NEXT: [[MUL4:%[0-9]+]]:_(i32) = G_MUL [[UV16]], [[UV19]]
    ; GFX9-NEXT: [[UMULH4:%[0-9]+]]:_(i32) = G_UMULH [[UV16]], [[UV18]]
    ; GFX9-NEXT: [[UADDO10:%[0-9]+]]:_(i32), [[UADDO11:%[0-9]+]]:_(i1) = G_UADDO [[MUL3]], [[MUL4]]
    ; GFX9-NEXT: [[ZEXT5:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO11]](i1)
    ; GFX9-NEXT: [[UADDO12:%[0-9]+]]:_(i32), [[UADDO13:%[0-9]+]]:_(i1) = G_UADDO [[UADDO10]], [[UMULH4]]
    ; GFX9-NEXT: [[ZEXT6:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO13]](i1)
    ; GFX9-NEXT: [[ADD4:%[0-9]+]]:_(i32) = G_ADD [[ZEXT5]], [[ZEXT6]]
    ; GFX9-NEXT: [[MUL5:%[0-9]+]]:_(i32) = G_MUL [[UV17]], [[UV19]]
    ; GFX9-NEXT: [[UMULH5:%[0-9]+]]:_(i32) = G_UMULH [[UV17]], [[UV18]]
    ; GFX9-NEXT: [[UMULH6:%[0-9]+]]:_(i32) = G_UMULH [[UV16]], [[UV19]]
    ; GFX9-NEXT: [[UADDO14:%[0-9]+]]:_(i32), [[UADDO15:%[0-9]+]]:_(i1) = G_UADDO [[MUL5]], [[UMULH5]]
    ; GFX9-NEXT: [[ZEXT7:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO15]](i1)
    ; GFX9-NEXT: [[UADDO16:%[0-9]+]]:_(i32), [[UADDO17:%[0-9]+]]:_(i1) = G_UADDO [[UADDO14]], [[UMULH6]]
    ; GFX9-NEXT: [[ZEXT8:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO17]](i1)
    ; GFX9-NEXT: [[ADD5:%[0-9]+]]:_(i32) = G_ADD [[ZEXT7]], [[ZEXT8]]
    ; GFX9-NEXT: [[UADDO18:%[0-9]+]]:_(i32), [[UADDO19:%[0-9]+]]:_(i1) = G_UADDO [[UADDO16]], [[ADD4]]
    ; GFX9-NEXT: [[ZEXT9:%[0-9]+]]:_(i32) = G_ZEXT [[UADDO19]](i1)
    ; GFX9-NEXT: [[ADD6:%[0-9]+]]:_(i32) = G_ADD [[ADD5]], [[ZEXT9]]
    ; GFX9-NEXT: [[UMULH7:%[0-9]+]]:_(i32) = G_UMULH [[UV17]], [[UV19]]
    ; GFX9-NEXT: [[ADD7:%[0-9]+]]:_(i32) = G_ADD [[UMULH7]], [[ADD6]]
    ; GFX9-NEXT: [[MV2:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UADDO18]](i32), [[ADD7]](i32)
    ; GFX9-NEXT: [[UV20:%[0-9]+]]:_(i32), [[UV21:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV1]](i64)
    ; GFX9-NEXT: [[UV22:%[0-9]+]]:_(i32), [[UV23:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[UV3]](i64)
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_6:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_7:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV20]](i32), [[UV22]], [[C]]
    ; GFX9-NEXT: [[UV24:%[0-9]+]]:_(i32), [[UV25:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_6]](i64)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[UV25]](i32)
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_8:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_9:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV20]](i32), [[UV23]], [[ANYEXT1]]
    ; GFX9-NEXT: [[AMDGPU_MAD_U64_U32_10:%[0-9]+]]:_(i64), [[AMDGPU_MAD_U64_U32_11:%[0-9]+]]:_(i1) = G_AMDGPU_MAD_U64_U32 [[UV21]](i32), [[UV22]], [[AMDGPU_MAD_U64_U32_8]]
    ; GFX9-NEXT: [[UV26:%[0-9]+]]:_(i32), [[UV27:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[AMDGPU_MAD_U64_U32_10]](i64)
    ; GFX9-NEXT: [[MV3:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV24]](i32), [[UV26]](i32)
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MV2]](i64), [[C]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[MV1]](i64), [[MV3]](i64)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[ANYEXT2]], [[C1]]
    ; GFX9-NEXT: [[ANYEXT3:%[0-9]+]]:_(i64) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[ANYEXT3]], [[C1]]
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[AND]](i64), [[AND1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ; GFX9-NEXT: $vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR1]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<2 x i64>), %3:_(<2 x i1>) = G_UMULO %0, %1
    %4:_(<2 x i64>) = G_ZEXT %3(<2 x i1>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(<2 x i64>)
    $vgpr4_vgpr5_vgpr6_vgpr7 = COPY %4(<2 x i64>)
...

---
name: test_umulo_s24
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_umulo_s24
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX8-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[AND1]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH]](i32), [[C1]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i1) = G_OR [[ICMP]], [[ICMP1]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[AND3]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_umulo_s24
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16777215
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX9-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[AND1]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UMULH]](i32), [[C1]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i1) = G_OR [[ICMP]], [[ICMP1]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[AND3]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i24) = G_TRUNC %0(i32)
    %3:_(i24) = G_TRUNC %1(i32)
    %4:_(i24), %5:_(i1) = G_UMULO %2, %3
    %6:_(i32) = G_ZEXT %4(i24)
    %7:_(i32) = G_ZEXT %5(i1)
    $vgpr0 = COPY %6(i32)
    $vgpr1 = COPY %7(i32)
...


---
name: test_umulo_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_umulo_s16
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[AND3]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_umulo_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[AND3]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16), %5:_(i1) = G_UMULO %2, %3
    %6:_(i32) = G_ZEXT %4(i16)
    %7:_(i32) = G_ZEXT %5(i1)
    $vgpr0 = COPY %6(i32)
    $vgpr1 = COPY %7(i32)
...

---
name: test_umulo_s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_umulo_s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[AND3]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_umulo_s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[AND3]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ZEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8) = G_TRUNC %0(i32)
    %3:_(i8) = G_TRUNC %1(i32)
    %4:_(i8), %5:_(i1) = G_UMULO %2, %3
    %6:_(i32) = G_ZEXT %4(i8)
    %7:_(i32) = G_ZEXT %5(i1)
    $vgpr0 = COPY %6(i32)
    $vgpr1 = COPY %7(i32)
...

---
name: test_umulo_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-LABEL: name: test_umulo_v2s16
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV2]], [[C]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C]]
    ; GFX8-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[AND3]], [[AND4]]
    ; GFX8-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[AND5]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX8-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX8-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND6]](i32), [[AND7]](i32)
    ; GFX8-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C]]
    ; GFX8-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND8]](i32), [[AND9]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    ; GFX8-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_umulo_v2s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[UV]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[UV2]], [[C]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[UV1]], [[C]]
    ; GFX9-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[UV3]], [[C]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[AND3]], [[AND4]]
    ; GFX9-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[AND5]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[ANYEXT]], [[C1]]
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[ANYEXT1]], [[C1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND6]](i32), [[AND7]](i32)
    ; GFX9-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C]]
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[AND8]](i32), [[AND9]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    ; GFX9-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i16>) = G_TRUNC %0(<2 x i32>)
    %3:_(<2 x i16>) = G_TRUNC %1(<2 x i32>)
    %4:_(<2 x i16>), %5:_(<2 x i1>) = G_UMULO %2, %3
    %6:_(<2 x i32>) = G_ZEXT %5(<2 x i1>)
    %7:_(<2 x i32>) = G_ZEXT %4(<2 x i16>)
    $vgpr0_vgpr1 = COPY %7(<2 x i32>)
    $vgpr2_vgpr3 = COPY %6(<2 x i32>)
...


---
name: test_umulo_v2s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX8-LABEL: name: test_umulo_v2s8
    ; GFX8: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX8-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX8-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[COPY3]], [[C]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[AND3]], [[AND4]]
    ; GFX8-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[AND5]]
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[MUL]](i32)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX8-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C1]]
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[MUL1]](i32)
    ; GFX8-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C2]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ANYEXT1]](i32)
    ; GFX8-NEXT: $vgpr2 = COPY [[ANYEXT2]](i32)
    ;
    ; GFX9-LABEL: name: test_umulo_v2s8
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY2]], [[C]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX9-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[COPY3]], [[C]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[AND3]], [[AND4]]
    ; GFX9-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[AND5]]
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[MUL]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND6:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C1]]
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[MUL1]](i32)
    ; GFX9-NEXT: [[AND7:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND7]], [[C2]](i16)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND6]], [[SHL]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ANYEXT1]](i32)
    ; GFX9-NEXT: $vgpr2 = COPY [[ANYEXT2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %4:_(i8) = G_TRUNC %0(i32)
    %5:_(i8) = G_TRUNC %1(i32)
    %6:_(i8) = G_TRUNC %2(i32)
    %7:_(i8) = G_TRUNC %3(i32)
    %8:_(<2 x i8>) = G_BUILD_VECTOR %4(i8), %5(i8)
    %9:_(<2 x i8>) = G_BUILD_VECTOR %6(i8), %7(i8)
    %10:_(<2 x i8>), %11:_(<2 x i1>) = G_UMULO %8, %9
    %12:_(<2 x i32>) = G_ZEXT %11(<2 x i1>)
    %13:_(i8), %14:_(i8) = G_UNMERGE_VALUES %10(<2 x i8>)
    %15:_(i1), %16:_(i1) = G_UNMERGE_VALUES %11(<2 x i1>)
    %17:_(i16) = G_MERGE_VALUES %13(i8), %14(i8)
    %18:_(i32) = G_ANYEXT %17(i16)
    %19:_(i32) = G_ANYEXT %15(i1)
    %20:_(i32) = G_ANYEXT %16(i1)
    $vgpr0 = COPY %18(i32)
    $vgpr1 = COPY %19(i32)
    $vgpr2 = COPY %20(i32)
...

---
name: test_umulo_v4s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; GFX8-LABEL: name: test_umulo_v4s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX8-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C2]](i32)
    ; GFX8-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX8-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C1]](i32)
    ; GFX8-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C2]](i32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C3]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C3]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C3]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C3]]
    ; GFX8-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LSHR3]], [[C3]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[AND3]], [[AND4]]
    ; GFX8-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LSHR1]], [[C3]]
    ; GFX8-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LSHR4]], [[C3]]
    ; GFX8-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[AND5]], [[AND6]]
    ; GFX8-NEXT: [[MUL3:%[0-9]+]]:_(i32) = G_MUL [[LSHR2]], [[LSHR5]]
    ; GFX8-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C3]]
    ; GFX8-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C3]]
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND8]], [[C]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND7]], [[SHL]]
    ; GFX8-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[MUL2]], [[C3]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND9]], [[C1]](i32)
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; GFX8-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[MUL3]], [[C3]]
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND10]], [[C2]](i32)
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_umulo_v4s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C2]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX9-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C1]](i32)
    ; GFX9-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C2]](i32)
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C3]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C3]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[AND]], [[AND1]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C3]]
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[AND2]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C3]]
    ; GFX9-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LSHR3]], [[C3]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[AND3]], [[AND4]]
    ; GFX9-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LSHR1]], [[C3]]
    ; GFX9-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LSHR4]], [[C3]]
    ; GFX9-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[AND5]], [[AND6]]
    ; GFX9-NEXT: [[MUL3:%[0-9]+]]:_(i32) = G_MUL [[LSHR2]], [[LSHR5]]
    ; GFX9-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C3]]
    ; GFX9-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C3]]
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND8]], [[C]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND7]], [[SHL]]
    ; GFX9-NEXT: [[AND9:%[0-9]+]]:_(i32) = G_AND [[MUL2]], [[C3]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND9]], [[C1]](i32)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; GFX9-NEXT: [[AND10:%[0-9]+]]:_(i32) = G_AND [[MUL3]], [[C3]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND10]], [[C2]](i32)
    ; GFX9-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8), %3:_(i8), %4:_(i8), %5:_(i8) = G_UNMERGE_VALUES %0(i32)
    %6:_(i8), %7:_(i8), %8:_(i8), %9:_(i8) = G_UNMERGE_VALUES %1(i32)
    %10:_(<4 x i8>) = G_BUILD_VECTOR %2(i8), %3(i8), %4(i8), %5(i8)
    %11:_(<4 x i8>) = G_BUILD_VECTOR %6(i8), %7(i8), %8(i8), %9(i8)
    %12:_(<4 x i8>), %13:_(<4 x i1>) = G_UMULO %10, %11
    %14:_(i8), %15:_(i8), %16:_(i8), %17:_(i8) = G_UNMERGE_VALUES %12(<4 x i8>)
    %18:_(i1), %19:_(i1), %20:_(i1), %21:_(i1) = G_UNMERGE_VALUES %13(<4 x i1>)
    %22:_(i32) = G_MERGE_VALUES %14(i8), %15(i8), %16(i8), %17(i8)
    %23:_(i32) = G_ANYEXT %18(i1)
    $vgpr0 = COPY %22(i32)
    $vgpr1 = COPY %23(i32)
...
