# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 2
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1010 -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:  constant_fold_lshr_s32_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: constant_fold_lshr_s32_s32
    ; CHECK: %shift:_(i32) = G_CONSTANT i32 16294962
    ; CHECK-NEXT: $vgpr0 = COPY %shift(i32)
    %val:_(i32) = G_CONSTANT i32 -123456789
    %shift_amt:_(i32) = G_CONSTANT i32 8
    %shift:_(i32) = G_LSHR %val, %shift_amt(i32)
    $vgpr0 = COPY %shift(i32)

...

---
name:  constant_fold_lshr_s16_s16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: constant_fold_lshr_s16_s16
    ; CHECK: %ext:_(i32) = G_CONSTANT i32 3324
    ; CHECK-NEXT: $vgpr0 = COPY %ext(i32)
    %val:_(i16) = G_CONSTANT i16 -12345
    %shift_amt:_(i16) = G_CONSTANT i16 4
    %shift:_(i16) = G_LSHR %val, %shift_amt(i16)
    %ext:_(i32) = G_ANYEXT %shift(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:  constant_fold_lshr_s64_s32
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: constant_fold_lshr_s64_s32
    ; CHECK: %shift:_(i64) = G_CONSTANT i64 72057594037445682
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY %shift(i64)
    %val:_(i64) = G_CONSTANT i64 -123456789
    %shift_amt:_(i32) = G_CONSTANT i32 8
    %shift:_(i64) = G_LSHR %val, %shift_amt(i32)
    $vgpr0_vgpr1 = COPY %shift(i64)

...

---
name:  constant_fold_lshr_v2s16_v2s16
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: constant_fold_lshr_v2s16_v2s16
    ; CHECK: %val0:_(i16) = G_CONSTANT i16 1234
    ; CHECK-NEXT: %val1:_(i16) = G_CONSTANT i16 -5678
    ; CHECK-NEXT: %val:_(<2 x i16>) = G_BUILD_VECTOR %val0(i16), %val1(i16)
    ; CHECK-NEXT: %shift_amt_elt:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: %shift_amt:_(<2 x i16>) = G_BUILD_VECTOR %shift_amt_elt(i16), %shift_amt_elt(i16)
    ; CHECK-NEXT: %shift:_(<2 x i16>) = G_LSHR %val, %shift_amt(<2 x i16>)
    ; CHECK-NEXT: $vgpr0 = COPY %shift(<2 x i16>)
    %val0:_(i16) = G_CONSTANT i16 1234
    %val1:_(i16) = G_CONSTANT i16 -5678
    %val:_(<2 x i16>) = G_BUILD_VECTOR %val0(i16), %val1(i16)
    %shift_amt_elt:_(i16) = G_CONSTANT i16 8
    %shift_amt:_(<2 x i16>) = G_BUILD_VECTOR %shift_amt_elt(i16), %shift_amt_elt(i16)
    %shift:_(<2 x i16>) = G_LSHR %val, %shift_amt(<2 x i16>)
    $vgpr0 = COPY %shift(<2 x i16>)

...

---
name:  constant_fold_lshr_v2s16_v2s16_undef_amt_elt
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: constant_fold_lshr_v2s16_v2s16_undef_amt_elt
    ; CHECK: %val0:_(i16) = G_CONSTANT i16 1234
    ; CHECK-NEXT: %val1:_(i16) = G_CONSTANT i16 -5678
    ; CHECK-NEXT: %val:_(<2 x i16>) = G_BUILD_VECTOR %val0(i16), %val1(i16)
    ; CHECK-NEXT: %shift_amt_elt:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: %undef:_(i16) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %shift_amt:_(<2 x i16>) = G_BUILD_VECTOR %shift_amt_elt(i16), %undef(i16)
    ; CHECK-NEXT: %shift:_(<2 x i16>) = G_LSHR %val, %shift_amt(<2 x i16>)
    ; CHECK-NEXT: $vgpr0 = COPY %shift(<2 x i16>)
    %val0:_(i16) = G_CONSTANT i16 1234
    %val1:_(i16) = G_CONSTANT i16 -5678
    %val:_(<2 x i16>) = G_BUILD_VECTOR %val0(i16), %val1(i16)
    %shift_amt_elt:_(i16) = G_CONSTANT i16 8
    %undef:_(i16) = G_IMPLICIT_DEF
    %shift_amt:_(<2 x i16>) = G_BUILD_VECTOR %shift_amt_elt(i16), %undef(i16)
    %shift:_(<2 x i16>) = G_LSHR %val, %shift_amt(<2 x i16>)
    $vgpr0 = COPY %shift(<2 x i16>)

...

---
name:  constant_fold_lshr_v2s16_v2s16_undef_val_elt
legalized:       true
tracksRegLiveness: true
body:             |
  bb.0:
    ; CHECK-LABEL: name: constant_fold_lshr_v2s16_v2s16_undef_val_elt
    ; CHECK: %val0:_(i16) = G_CONSTANT i16 -1234
    ; CHECK-NEXT: %undef:_(i16) = G_IMPLICIT_DEF
    ; CHECK-NEXT: %val:_(<2 x i16>) = G_BUILD_VECTOR %val0(i16), %undef(i16)
    ; CHECK-NEXT: %shift_amt_elt:_(i16) = G_CONSTANT i16 8
    ; CHECK-NEXT: %shift_amt:_(<2 x i16>) = G_BUILD_VECTOR %shift_amt_elt(i16), %shift_amt_elt(i16)
    ; CHECK-NEXT: %shift:_(<2 x i16>) = G_LSHR %val, %shift_amt(<2 x i16>)
    ; CHECK-NEXT: $vgpr0 = COPY %shift(<2 x i16>)
    %val0:_(i16) = G_CONSTANT i16 -1234
    %undef:_(i16) = G_IMPLICIT_DEF
    %val:_(<2 x i16>) = G_BUILD_VECTOR %val0(i16), %undef(i16)
    %shift_amt_elt:_(i16) = G_CONSTANT i16 8
    %shift_amt:_(<2 x i16>) = G_BUILD_VECTOR %shift_amt_elt(i16), %shift_amt_elt(i16)
    %shift:_(<2 x i16>) = G_LSHR %val, %shift_amt(<2 x i16>)
    $vgpr0 = COPY %shift(<2 x i16>)

...
