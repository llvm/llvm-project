# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -O0 -run-pass=legalizer -global-isel-abort=0 -pass-remarks-missed='gisel.*'  %s 2> %t.err -o - | FileCheck -check-prefix=SI %s
# RUN: FileCheck -check-prefix=ERR %s < %t.err

#  Unaligned access is assumed on for HSA, but not mesa
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=bonaire -O0 -run-pass=legalizer -global-isel-abort=0  %s -o - | FileCheck -check-prefix=CI-HSA %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=bonaire -O0 -run-pass=legalizer -global-isel-abort=0  %s -o - | FileCheck -check-prefix=CI-MESA %s

# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefix=VI %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 -O0 -run-pass=legalizer  -global-isel-abort=0 -pass-remarks-missed='gisel.*' 2> %t.err %s -o - | FileCheck -check-prefix=GFX9-HSA %s
# RUN: FileCheck -check-prefix=ERR %s < %t.err

# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-MESA %s

# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1010 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-HSA %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-MESA %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-HSA %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-MESA %s
# RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1200 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-HSA %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1200 -O0 -run-pass=legalizer  -global-isel-abort=0 %s -o - | FileCheck -check-prefixes=GFX9-MESA %s

# ERR-NOT: remark
# ERR: remark: <unknown>:0:0: unable to legalize instruction: %{{[0-9]+}}:_(<2 x i32>) = G_LOAD %{{[0-9]+}}:_(p1) :: (load (<2 x i16>), align 1, addrspace 1) (in function: test_extload_global_v2s32_from_v2s16_align1)
# ERR-NEXT: remark: <unknown>:0:0: unable to legalize instruction: %{{[0-9]+}}:_(<2 x i32>) = G_LOAD %{{[0-9]+}}:_(p1) :: (load (<2 x i16>), align 2, addrspace 1) (in function: test_extload_global_v2s32_from_v2s16_align2)
# ERR-NEXT: remark: <unknown>:0:0: unable to legalize instruction: %{{[0-9]+}}:_(<2 x i32>) = G_LOAD %{{[0-9]+}}:_(p1) :: (load (<2 x i16>), addrspace 1) (in function: test_extload_global_v2s32_from_v2s16_align4)
# ERR-NEXT: remark: <unknown>:0:0: unable to legalize instruction: %{{[0-9]+}}:_(<3 x i32>) = G_LOAD %{{[0-9]+}}:_(p1) :: (load (<3 x i16>), align 4, addrspace 1) (in function: test_extload_global_v3s32_from_v3s16_align4)
# ERR-NEXT: remark: <unknown>:0:0: unable to legalize instruction: %{{[0-9]+}}:_(<4 x i32>) = G_LOAD %{{[0-9]+}}:_(p1) :: (load (<4 x i16>), align 4, addrspace 1) (in function: test_extload_global_v4s32_from_v4s16_align4)
# ERR-NOT: remark

---
name: test_load_global_s1_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s1_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; SI-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s1_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s1_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s1_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; VI-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s1_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s1_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[AND]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i1) = G_LOAD %0(p1) :: (load (i1), addrspace 1)
    %2:_(i32) = G_ZEXT %1(i1)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s2_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s2_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; SI-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s2_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s2_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s2_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; VI-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s2_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; GFX9-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[AND]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s2_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; GFX9-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[AND]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i2) = G_LOAD %0(p1) :: (load (i2), addrspace 1)
    %2:_(i32) = G_ZEXT %1(i2)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s8_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s8_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s8_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s8_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s8_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s8_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s8_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i8) = G_LOAD %0(p1) :: (load (i8), align 4, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i8)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s8_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s8_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s8_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s8_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s8_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s8_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s8_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i8) = G_LOAD %0(p1) :: (load (i8), addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i8)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i16) = G_LOAD %0(p1) :: (load (i16), align 4, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i16)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i16) = G_LOAD %0(p1) :: (load (i16), addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i16)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i16) = G_LOAD %0(p1) :: (load (i16), align 1, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i16)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s32_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s32_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s32_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s32_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s32_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s32_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s32_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i32), addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_load_global_s32_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s32_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s32_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s32_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s32_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s32_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s32_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i32), align 2, addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_load_global_s32_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s32_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s32_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s32_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s32_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s32_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s32_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR2]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i32), align 1, addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_load_global_s24_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s24_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 8, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s24_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 8, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s24_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 8, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s24_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 8, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s24_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s24_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i24) = G_LOAD %0(p1) :: (load (i24), align 8, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i24)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s24_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s24_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s24_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s24_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s24_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s24_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s24_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i24) = G_LOAD %0(p1) :: (load (i24), align 4, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i24)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s24_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s24_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s24_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s24_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s24_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s24_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s24_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i24) = G_LOAD %0(p1) :: (load (i24), align 2, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i24)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s24_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s24_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; SI-NEXT: $vgpr0 = COPY [[OR1]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s24_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s24_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR1]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s24_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; VI-NEXT: $vgpr0 = COPY [[OR1]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s24_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s24_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR1]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i24) = G_LOAD %0(p1) :: (load (i24), align 1, addrspace 1)
    %2:_(i32) = G_ANYEXT %1(i24)
    $vgpr0 = COPY %2(i32)
...

---
name: test_load_global_s48_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s48_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 281474976710655
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[LOAD]], [[C]]
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[AND]](i64)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s48_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 281474976710655
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[LOAD]], [[C]]
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[AND]](i64)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s48_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 281474976710655
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[LOAD]], [[C]]
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[AND]](i64)
    ;
    ; VI-LABEL: name: test_load_global_s48_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 281474976710655
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[LOAD]], [[C]]
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[AND]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s48_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 281474976710655
    ; GFX9-HSA-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[LOAD]], [[C]]
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[AND]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s48_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 281474976710655
    ; GFX9-MESA-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[LOAD]], [[C]]
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[AND]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i48) = G_LOAD %0(p1) :: (load (i48), align 8, addrspace 1)
    %2:_(i64) = G_ZEXT %1(i48)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name: test_load_global_s64_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s64_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s64_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s64_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; VI-LABEL: name: test_load_global_s64_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s64_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s64_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i64), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_load_global_s64_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s64_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s64_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s64_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; VI-LABEL: name: test_load_global_s64_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s64_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s64_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i64), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_load_global_s64_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s64_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[OR2]](i64)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s64_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s64_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[OR2]](i64)
    ;
    ; VI-LABEL: name: test_load_global_s64_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[OR2]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s64_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s64_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[OR2]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i64), align 2, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_load_global_s64_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s64_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[OR6]](i64)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s64_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s64_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[OR6]](i64)
    ;
    ; VI-LABEL: name: test_load_global_s64_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[OR6]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s64_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i64) = G_LOAD [[COPY]](p1) :: (load (i64), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s64_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[OR6]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i64), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_load_global_s96_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s96_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s96_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s96_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; VI-LABEL: name: test_load_global_s96_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s96_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s96_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i96) = G_LOAD %0(p1) :: (load (i96), align 16, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(i96)
...

---
name: test_load_global_s96_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s96_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 8, align 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[LOAD1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s96_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s96_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; VI-LABEL: name: test_load_global_s96_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s96_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s96_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i96) = G_LOAD %0(p1) :: (load (i96), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(i96)
...

---
name: test_load_global_s96_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s96_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[LOAD1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s96_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s96_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; VI-LABEL: name: test_load_global_s96_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s96_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s96_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i96) = G_LOAD %0(p1) :: (load (i96), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(i96)
...

---
name: test_load_global_s96_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s96_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s96_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 2, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s96_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; VI-LABEL: name: test_load_global_s96_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s96_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s96_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i96) = G_LOAD %0(p1) :: (load (i96), align 2, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(i96)
...

---
name: test_load_global_s96_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s96_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s96_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s96_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; VI-LABEL: name: test_load_global_s96_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s96_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s96_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i96) = G_LOAD %0(p1) :: (load (i96), align 1, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(i96)
...

---
name: test_load_global_s160_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s160_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 16, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<5 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[LOAD1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i160) = G_BITCAST [[BUILD_VECTOR]](<5 x i32>)
    ; SI-NEXT: S_NOP 0, implicit [[BITCAST]](i160)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s160_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 16, addrspace 1)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<5 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[LOAD1]](i32)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i160) = G_BITCAST [[BUILD_VECTOR]](<5 x i32>)
    ; CI-HSA-NEXT: S_NOP 0, implicit [[BITCAST]](i160)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s160_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 16, addrspace 1)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<5 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[LOAD1]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i160) = G_BITCAST [[BUILD_VECTOR]](<5 x i32>)
    ; CI-MESA-NEXT: S_NOP 0, implicit [[BITCAST]](i160)
    ;
    ; VI-LABEL: name: test_load_global_s160_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 16, addrspace 1)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<5 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[LOAD1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i160) = G_BITCAST [[BUILD_VECTOR]](<5 x i32>)
    ; VI-NEXT: S_NOP 0, implicit [[BITCAST]](i160)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s160_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 16, addrspace 1)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<5 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i160) = G_BITCAST [[BUILD_VECTOR]](<5 x i32>)
    ; GFX9-HSA-NEXT: S_NOP 0, implicit [[BITCAST]](i160)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s160_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<5 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i160) = G_BITCAST [[BUILD_VECTOR]](<5 x i32>)
    ; GFX9-MESA-NEXT: S_NOP 0, implicit [[BITCAST]](i160)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i160) = G_LOAD %0(p1) :: (load (i160), align 4, addrspace 1)
    S_NOP 0, implicit %1(i160)
...

---
name: test_load_global_s224_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s224_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<2 x i32>) from unknown-address + 16, align 4, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i32) from unknown-address + 24, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<2 x i32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<7 x i32>) = G_BUILD_VECTOR [[UV2]](i32), [[UV3]](i32), [[UV4]](i32), [[UV5]](i32), [[UV]](i32), [[UV1]](i32), [[LOAD2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i224) = G_BITCAST [[BUILD_VECTOR]](<7 x i32>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i256) = G_IMPLICIT_DEF
    ; SI-NEXT: [[INSERT:%[0-9]+]]:_(i256) = G_INSERT [[DEF]], [[BITCAST]](i224), 0
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[INSERT]](i256)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s224_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 16, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<3 x i32>)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<7 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[UV4]](i32), [[UV5]](i32), [[UV6]](i32)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i224) = G_BITCAST [[BUILD_VECTOR]](<7 x i32>)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(i256) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[INSERT:%[0-9]+]]:_(i256) = G_INSERT [[DEF]], [[BITCAST]](i224), 0
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[INSERT]](i256)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s224_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 16, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<3 x i32>)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<7 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[UV4]](i32), [[UV5]](i32), [[UV6]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i224) = G_BITCAST [[BUILD_VECTOR]](<7 x i32>)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(i256) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[INSERT:%[0-9]+]]:_(i256) = G_INSERT [[DEF]], [[BITCAST]](i224), 0
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[INSERT]](i256)
    ;
    ; VI-LABEL: name: test_load_global_s224_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 16, align 4, addrspace 1)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<3 x i32>)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<7 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[UV4]](i32), [[UV5]](i32), [[UV6]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i224) = G_BITCAST [[BUILD_VECTOR]](<7 x i32>)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i256) = G_IMPLICIT_DEF
    ; VI-NEXT: [[INSERT:%[0-9]+]]:_(i256) = G_INSERT [[DEF]], [[BITCAST]](i224), 0
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[INSERT]](i256)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s224_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 16, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<7 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[UV4]](i32), [[UV5]](i32), [[UV6]](i32)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i224) = G_BITCAST [[BUILD_VECTOR]](<7 x i32>)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(i256) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[INSERT:%[0-9]+]]:_(i256) = G_INSERT [[DEF]], [[BITCAST]](i224), 0
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[INSERT]](i256)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s224_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 16, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<7 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32), [[UV3]](i32), [[UV4]](i32), [[UV5]](i32), [[UV6]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i224) = G_BITCAST [[BUILD_VECTOR]](<7 x i32>)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(i256) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[INSERT:%[0-9]+]]:_(i256) = G_INSERT [[DEF]], [[BITCAST]](i224), 0
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[INSERT]](i256)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i224) = G_LOAD %0(p1) :: (load (i224), align 4, addrspace 1)
    %2:_(i256) = G_IMPLICIT_DEF
    %3:_(i256) = G_INSERT %2, %1(i224), 0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(i256)

...

---
name: test_load_global_s128_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s128_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s128_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s128_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; VI-LABEL: name: test_load_global_s128_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s128_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s128_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i128) = G_LOAD %0(p1) :: (load (i128), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(i128)
...

---
name: test_load_global_s128_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s128_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s128_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s128_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; VI-LABEL: name: test_load_global_s128_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s128_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s128_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i128) = G_LOAD %0(p1) :: (load (i128), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(i128)
...

---
name: test_load_global_s128_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s128_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; SI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s128_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s128_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; CI-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; CI-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; VI-LABEL: name: test_load_global_s128_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; VI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s128_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s128_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; GFX9-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i128) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](i128)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i128) = G_LOAD %0(p1) :: (load (i128), align 1, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(i128)
...

---
name: test_load_global_s256_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s256_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 16, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i256) = G_BITCAST [[LOAD]](<8 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](i256)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s256_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 16, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i256) = G_BITCAST [[LOAD]](<8 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](i256)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s256_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 16, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i256) = G_BITCAST [[LOAD]](<8 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](i256)
    ;
    ; VI-LABEL: name: test_load_global_s256_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 16, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i256) = G_BITCAST [[LOAD]](<8 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](i256)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s256_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 16, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i256) = G_BITCAST [[LOAD]](<8 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](i256)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s256_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i256) = G_BITCAST [[LOAD]](<8 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](i256)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i256) = G_LOAD %0(p1) :: (load (i256), align 16, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(i256)
...

---
name: test_load_global_p1_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p1_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p1_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p1_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; VI-LABEL: name: test_load_global_p1_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p1_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p1_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p1) = G_LOAD %0(p1) :: (load (p1), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p1)
...

---
name: test_load_global_p1_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p1_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p1_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p1_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; VI-LABEL: name: test_load_global_p1_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p1_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p1_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p1) = G_LOAD %0(p1) :: (load (p1), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p1)
...

---
name: test_load_global_p1_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p1_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; SI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[OR6]](i64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p1)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p1_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p1_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; CI-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[OR6]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p1)
    ;
    ; VI-LABEL: name: test_load_global_p1_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; VI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[OR6]](i64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p1)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p1_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p1) = G_LOAD [[COPY]](p1) :: (load (p1), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p1)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p1_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p1) = G_INTTOPTR [[OR6]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p1)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p1) = G_LOAD %0(p1) :: (load (p1), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p1)
...

---
name: test_load_global_p3_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p3_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(p3) = G_LOAD [[COPY]](p1) :: (load (p3), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](p3)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p3_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p3) = G_LOAD [[COPY]](p1) :: (load (p3), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p3)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p3_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p3) = G_LOAD [[COPY]](p1) :: (load (p3), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](p3)
    ;
    ; VI-LABEL: name: test_load_global_p3_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(p3) = G_LOAD [[COPY]](p1) :: (load (p3), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](p3)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p3_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p3) = G_LOAD [[COPY]](p1) :: (load (p3), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p3)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p3_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p3) = G_LOAD [[COPY]](p1) :: (load (p3), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](p3)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p3) = G_LOAD %0(p1) :: (load (p3), addrspace 1)
    $vgpr0 = COPY %1(p3)
...

---
name: test_load_global_p4_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p4_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p4_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p4_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; VI-LABEL: name: test_load_global_p4_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p4_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p4_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p4) = G_LOAD %0(p1) :: (load (p4), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p4)
...

---
name: test_load_global_p4_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p4_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p4_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p4_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; VI-LABEL: name: test_load_global_p4_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p4_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p4_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p4) = G_LOAD %0(p1) :: (load (p4), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p4)
...

---
name: test_load_global_p4_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p4_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; SI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR2]](i64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p4_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p4_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; CI-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR2]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    ;
    ; VI-LABEL: name: test_load_global_p4_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; VI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR2]](i64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p4_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p4_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR2]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p4) = G_LOAD %0(p1) :: (load (p4), align 2, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p4)
...

---
name: test_load_global_p4_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p4_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; SI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR6]](i64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p4_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p4_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; CI-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR6]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    ;
    ; VI-LABEL: name: test_load_global_p4_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; VI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR6]](i64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p4_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p4) = G_LOAD [[COPY]](p1) :: (load (p4), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](p4)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p4_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p4) = G_INTTOPTR [[OR6]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[INTTOPTR]](p4)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p4) = G_LOAD %0(p1) :: (load (p4), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(p4)
...

---
name: test_load_global_p5_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p5_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p5_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p5_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; VI-LABEL: name: test_load_global_p5_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p5_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p5_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p5) = G_LOAD %0(p1) :: (load (p5), addrspace 1)
    $vgpr0 = COPY %1(p5)
...

---
name: test_load_global_p5_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p5_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p5_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p5_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    ;
    ; VI-LABEL: name: test_load_global_p5_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p5_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p5_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR]](i32)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p5) = G_LOAD %0(p1) :: (load (p5), align 2, addrspace 1)
    $vgpr0 = COPY %1(p5)
...

---
name: test_load_global_p5_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_p5_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR2]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    ;
    ; CI-HSA-LABEL: name: test_load_global_p5_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; CI-MESA-LABEL: name: test_load_global_p5_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR2]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    ;
    ; VI-LABEL: name: test_load_global_p5_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR2]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_p5_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(p5) = G_LOAD [[COPY]](p1) :: (load (p5), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](p5)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_p5_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[INTTOPTR:%[0-9]+]]:_(p5) = G_INTTOPTR [[OR2]](i32)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[INTTOPTR]](p5)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(p5) = G_LOAD %0(p1) :: (load (p5), align 1, addrspace 1)
    $vgpr0 = COPY %1(p5)
...

---
name: test_load_global_v2s8_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s8_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s8_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s8_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_v2s8_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s8_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s8_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i8>) = G_LOAD %0(p1) :: (load (<2 x i8>), align 4, addrspace 1)
    %2:_(i16) = G_BITCAST %1(<2 x i8>)
    %3:_(i32) = G_ANYEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---
name: test_load_global_v2s8_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s8_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s8_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s8_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_v2s8_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s8_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s8_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i8>) = G_LOAD %0(p1) :: (load (<2 x i8>), addrspace 1)
    %2:_(i16) = G_BITCAST %1(<2 x i8>)
    %3:_(i32) = G_ANYEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---
name: test_load_global_v2s8_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s8_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s8_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s8_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_load_global_v2s8_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s8_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s8_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i8>) = G_LOAD %0(p1) :: (load (<2 x i8>), align 1, addrspace 1)
    %2:_(i16) = G_BITCAST %1(<2 x i8>)
    %3:_(i32) = G_ANYEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---
name: test_load_global_v3s8_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s8_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C2]]
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C3]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[COPY1]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[TRUNC1]]
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C2]]
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[DEF]], [[C3]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC3]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; SI-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s8_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C2]]
    ; CI-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C3]]
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[COPY1]](i32)
    ; CI-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[TRUNC1]]
    ; CI-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C2]]
    ; CI-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[DEF]], [[C3]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; CI-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC3]]
    ; CI-HSA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CI-HSA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s8_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C2]]
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C3]]
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[COPY1]](i32)
    ; CI-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[TRUNC1]]
    ; CI-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C2]]
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[DEF]], [[C3]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; CI-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC3]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; CI-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; VI-LABEL: name: test_load_global_v3s8_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C2]]
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C3]](i16)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C2]]
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C2]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C3]](i16)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; VI-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s8_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-HSA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C2]]
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C2]]
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-HSA-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C3]](i16)
    ; GFX9-HSA-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C2]]
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; GFX9-HSA-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C2]]
    ; GFX9-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C3]](i16)
    ; GFX9-HSA-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; GFX9-HSA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; GFX9-HSA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; GFX9-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s8_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-MESA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C2]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C3]](i16)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C2]]
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; GFX9-MESA-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C2]]
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C3]](i16)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL1]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR]](i16)
    ; GFX9-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR2]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i8>) = G_LOAD %0(p1) :: (load (<3 x i8>), align 4, addrspace 1)
    %2:_(i24) = G_BITCAST %1(<3 x i8>)
    %3:_(i32) = G_ANYEXT %2(i24)
    $vgpr0 = COPY %3(i32)

...

---
name: test_load_global_v3s8_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s8_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C1]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C4]]
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C5]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[COPY1]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL2]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND]], [[TRUNC1]]
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C4]]
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[DEF]], [[C5]]
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL3]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC3]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C3]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; SI-NEXT: $vgpr0 = COPY [[OR4]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s8_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C2]](i32)
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C1]](i32)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C3]]
    ; CI-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C4]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[COPY1]](i32)
    ; CI-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL1]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND]], [[TRUNC1]]
    ; CI-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C3]]
    ; CI-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C2]](i32)
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[DEF]], [[C4]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; CI-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL2]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC3]]
    ; CI-HSA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; CI-HSA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CI-HSA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL3]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[OR3]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s8_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C4]]
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR]], [[C5]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[COPY1]](i32)
    ; CI-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL2]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND]], [[TRUNC1]]
    ; CI-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C4]]
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C1]](i32)
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[DEF]], [[C5]]
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; CI-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL3]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC3]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; CI-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR4]](i32)
    ;
    ; VI-LABEL: name: test_load_global_v3s8_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C4]]
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C4]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C5]](i16)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL2]]
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C4]]
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C4]]
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C5]](i16)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL3]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C3]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; VI-NEXT: $vgpr0 = COPY [[OR4]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s8_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-HSA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C3]]
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C3]]
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C4]](i16)
    ; GFX9-HSA-NEXT: [[OR1:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL1]]
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C3]]
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; GFX9-HSA-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C3]]
    ; GFX9-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C4]](i16)
    ; GFX9-HSA-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL2]]
    ; GFX9-HSA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR1]](i16)
    ; GFX9-HSA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; GFX9-HSA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL3]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[OR3]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s8_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-MESA-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C4]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C4]]
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C5]](i16)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL2]]
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC2]], [[C4]]
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[DEF]](i32)
    ; GFX9-MESA-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C4]]
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C5]](i16)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL3]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[OR2]](i16)
    ; GFX9-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[OR3]](i16)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR4]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i8>) = G_LOAD %0(p1) :: (load (<3 x i8>), align 1, addrspace 1)
    %2:_(i24) = G_BITCAST %1(<3 x i8>)
    %3:_(i32) = G_ANYEXT %2(i24)
    $vgpr0 = COPY %3(i32)
...

---
name: test_load_global_v4s8_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s8_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; SI-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s8_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s8_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; VI-LABEL: name: test_load_global_v4s8_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; VI-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s8_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[CONCAT_VECTORS]](<4 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[TRUNC4]](<4 x i8>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s8_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[CONCAT_VECTORS]](<4 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[TRUNC4]](<4 x i8>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i8>) = G_LOAD %0(p1) :: (load (<4 x i8>), addrspace 1)
    $vgpr0 = COPY %1(<4 x i8>)
...

---
name: test_load_global_v4s8_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s8_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C2]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C1]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C3]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; SI-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s8_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 2, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s8_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C2]](i32)
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C1]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C3]](i32)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; VI-LABEL: name: test_load_global_v4s8_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C1]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C3]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; VI-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s8_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[CONCAT_VECTORS]](<4 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[TRUNC4]](<4 x i8>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s8_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C2]](i32)
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[CONCAT_VECTORS]](<4 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[TRUNC4]](<4 x i8>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i8>) = G_LOAD %0(p1) :: (load (<4 x i8>), align 2, addrspace 1)
    $vgpr0 = COPY %1(<4 x i8>)
...

---
name: test_load_global_v4s8_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s8_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C1]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C3]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C4]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; SI-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s8_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s8_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C3]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C4]](i32)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; VI-LABEL: name: test_load_global_v4s8_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C3]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C4]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[BUILD_VECTOR]](<4 x i32>)
    ; VI-NEXT: $vgpr0 = COPY [[TRUNC]](<4 x i8>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s8_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[CONCAT_VECTORS]](<4 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[TRUNC4]](<4 x i8>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s8_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[OR2]], [[C4]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(<4 x i8>) = G_TRUNC [[CONCAT_VECTORS]](<4 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[TRUNC4]](<4 x i8>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i8>) = G_LOAD %0(p1) :: (load (<4 x i8>), align 1, addrspace 1)
    $vgpr0 = COPY %1(<4 x i8>)
...

---
name: test_load_global_v8s8_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v8s8_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v8s8_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v8s8_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v8s8_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v8s8_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v8s8_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<8 x i8>) = G_LOAD %0(p1) :: (load (<8 x i8>), addrspace 1)
    %2:_(<2 x i32>) = G_BITCAST %1(<8 x i8>)
    $vgpr0_vgpr1 = COPY %2(<2 x i32>)
...

---
name: test_load_global_v16s8_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v16s8_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v16s8_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v16s8_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v16s8_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v16s8_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v16s8_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<16 x i8>) = G_LOAD %0(p1) :: (load (<16 x i8>), addrspace 1)
    %2:_(<4 x i32>) = G_BITCAST %1(<16 x i8>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(<4 x i32>)
...

---
name: test_load_global_v32s8_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v32s8_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v32s8_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v32s8_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v32s8_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v32s8_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v32s8_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<32 x i8>) = G_LOAD %0(p1) :: (load (<32 x i8>), addrspace 1)
    %2:_(<8 x i32>) = G_BITCAST %1(<32 x i8>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %2(<8 x i32>)
...

---

name: test_load_global_v2s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v2s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i16>) = G_LOAD %0(p1) :: (load (<2 x i16>), addrspace 1)
    $vgpr0 = COPY %1(<2 x i16>)
...

---
name: test_load_global_v2s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C1]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C1]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v2s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i16>) = G_LOAD %0(p1) :: (load (<2 x i16>), align 2, addrspace 1)
    $vgpr0 = COPY %1(<2 x i16>)
...

---
name: test_load_global_v2s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C3]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL2]]
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C3]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C3]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v2s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C3]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL2]]
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i16>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i16>) = G_LOAD %0(p1) :: (load (<2 x i16>), align 1, addrspace 1)
    $vgpr0 = COPY %1(<2 x i16>)
...

---
name: test_load_global_v3s16_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s16_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL1]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[UV]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s16_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[UV]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s16_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[UV]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v3s16_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL1]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[UV]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s16_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[UV]](<2 x i16>), [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s16_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[UV]](<2 x i16>), [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i16>) = G_LOAD %0(p1) :: (load (<3 x i16>), align 8, addrspace 1)
    %2:_(<3 x i16>) = G_IMPLICIT_DEF
    %3:_(<6 x i16>) = G_CONCAT_VECTORS %1(<3 x i16>), %2(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<6 x i16>)
...

---
name: test_load_global_v3s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v3s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i16>) = G_LOAD %0(p1) :: (load (<3 x i16>), align 4, addrspace 1)
    %2:_(<3 x i16>) = G_IMPLICIT_DEF
    %3:_(<6 x i16>) = G_CONCAT_VECTORS %1(<3 x i16>), %2(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<6 x i16>)
...

---
name: test_load_global_v3s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v3s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i16>) = G_LOAD %0(p1) :: (load (<3 x i16>), align 2, addrspace 1)
    %2:_(<3 x i16>) = G_IMPLICIT_DEF
    %3:_(<6 x i16>) = G_CONCAT_VECTORS %1(<3 x i16>), %2(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<6 x i16>)
...

---
name: test_load_global_v3s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C4]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C5]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C5]]
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL3]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C5]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C5]]
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL4]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C4]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL5]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C3]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C3]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C2]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C4]](i32)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C5]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C5]]
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL3]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C5]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C5]]
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL4]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C4]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL5]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CI-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v3s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C4]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C5]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C5]]
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL3]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C5]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C5]]
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL4]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C4]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[LSHR]], [[SHL5]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST2]](<2 x i16>), [[BITCAST3]](<2 x i16>), [[BITCAST4]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C4]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i16>) = G_LOAD %0(p1) :: (load (<3 x i16>), align 1, addrspace 1)
    %2:_(<3 x i16>) = G_IMPLICIT_DEF
    %3:_(<6 x i16>) = G_CONCAT_VECTORS %1(<3 x i16>), %2(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<6 x i16>)
...

---
name: test_load_global_v4s16_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s16_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s16_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s16_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v4s16_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s16_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s16_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_LOAD %0(p1) :: (load (<4 x i16>), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<4 x i16>)
...

---
name: test_load_global_v4s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v4s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_LOAD %0(p1) :: (load (<4 x i16>), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<4 x i16>)
...

---
name: test_load_global_v4s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C3]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C3]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v4s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C3]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C3]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C4]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C3]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C3]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C4]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_LOAD %0(p1) :: (load (<4 x i16>), align 2, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<4 x i16>)
...

---
name: test_load_global_v4s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C5]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C5]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C6]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL4]]
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C5]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C6]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL5]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C5]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C5]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C6]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL4]]
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C5]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C6]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL5]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CI-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v4s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C5]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C5]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C6]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL4]]
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR4]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C5]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C6]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL5]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST]](<2 x i16>), [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<4 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[OR3]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = G_LOAD %0(p1) :: (load (<4 x i16>), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<4 x i16>)
...

---
name: test_load_global_v5s16_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v5s16_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v5s16_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v5s16_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v5s16_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v5s16_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-HSA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[UV8:%[0-9]+]]:_(<2 x i16>), [[UV9:%[0-9]+]]:_(<2 x i16>), [[UV10:%[0-9]+]]:_(<2 x i16>), [[UV11:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV12:%[0-9]+]]:_(<2 x i16>), [[UV13:%[0-9]+]]:_(<2 x i16>), [[UV14:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV12]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[UV4]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[UV9]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v5s16_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-MESA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[UV8:%[0-9]+]]:_(<2 x i16>), [[UV9:%[0-9]+]]:_(<2 x i16>), [[UV10:%[0-9]+]]:_(<2 x i16>), [[UV11:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV12:%[0-9]+]]:_(<2 x i16>), [[UV13:%[0-9]+]]:_(<2 x i16>), [[UV14:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV12]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[UV4]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[UV9]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<5 x i16>) = G_LOAD %0(p1) :: (load (<5 x i16>), align 16, addrspace 1)
    %2:_(<5 x i16>) = G_IMPLICIT_DEF
    %3:_(<10 x i16>) = G_CONCAT_VECTORS %1(<5 x i16>), %2(<5 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>) = G_UNMERGE_VALUES %3(<10 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)

...

---
name: test_load_global_v5s16_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v5s16_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST1]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v5s16_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v5s16_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v5s16_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v5s16_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v5s16_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<5 x i16>) = G_LOAD %0(p1) :: (load (<5 x i16>), align 8, addrspace 1)
    %2:_(<5 x i16>) = G_IMPLICIT_DEF
    %3:_(<10 x i16>) = G_CONCAT_VECTORS %1(<5 x i16>), %2(<5 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>) = G_UNMERGE_VALUES %3(<10 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)

...

---
name: test_load_global_v5s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v5s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i16>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[LOAD]](<4 x i16>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C2]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST1]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v5s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v5s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v5s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v5s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v5s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<5 x i16>) = G_LOAD %0(p1) :: (load (<5 x i16>), align 4, addrspace 1)
    %2:_(<5 x i16>) = G_IMPLICIT_DEF
    %3:_(<10 x i16>) = G_CONCAT_VECTORS %1(<5 x i16>), %2(<5 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>) = G_UNMERGE_VALUES %3(<10 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)

...

---
name: test_load_global_v5s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v5s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v5s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v5s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v5s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v5s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v5s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<5 x i16>) = G_LOAD %0(p1) :: (load (<5 x i16>), align 2, addrspace 1)
    %2:_(<5 x i16>) = G_IMPLICIT_DEF
    %3:_(<10 x i16>) = G_CONCAT_VECTORS %1(<5 x i16>), %2(<5 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>) = G_UNMERGE_VALUES %3(<10 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)

...

---
name: test_load_global_v5s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v5s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C6]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C6]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL5]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C6]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C6]]
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL6]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[OR4]], [[C6]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL7]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v5s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C4]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C4]]
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C4]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C4]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C4]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C4]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C5]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v5s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C6]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C6]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL5]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C6]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C6]]
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL6]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[OR4]], [[C6]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL7]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v5s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C6]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C6]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL5]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR5]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C6]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C6]]
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL6]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR6]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[OR4]], [[C6]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL7]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v5s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v5s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[OR3]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[OR4]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<6 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<6 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<5 x i16>) = G_LOAD %0(p1) :: (load (<5 x i16>), align 1, addrspace 1)
    %2:_(<5 x i16>) = G_IMPLICIT_DEF
    %3:_(<10 x i16>) = G_CONCAT_VECTORS %1(<5 x i16>), %2(<5 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>) = G_UNMERGE_VALUES %3(<10 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)

...

---
name: test_load_global_v6s16_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v6s16_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v6s16_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v6s16_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v6s16_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v6s16_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v6s16_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<6 x i16>) = G_LOAD %0(p1) :: (load (<6 x i16>), align 16, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<6 x i16>)
...

---
name: test_load_global_v6s16_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v6s16_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 8, align 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[LOAD1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v6s16_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v6s16_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v6s16_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v6s16_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v6s16_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<6 x i16>) = G_LOAD %0(p1) :: (load (<6 x i16>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<6 x i16>)
...

---
name: test_load_global_v6s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v6s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[LOAD1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v6s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v6s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v6s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v6s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v6s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<6 x i16>) = G_LOAD %0(p1) :: (load (<6 x i16>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<6 x i16>)
...

---
name: test_load_global_v6s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v6s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v6s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 2, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v6s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v6s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v6s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v6s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<6 x i16>) = G_LOAD %0(p1) :: (load (<6 x i16>), align 2, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<6 x i16>)
...

---
name: test_load_global_v6s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v6s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v6s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v6s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v6s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v6s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v6s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<6 x i16>) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST]](<6 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<6 x i16>) = G_LOAD %0(p1) :: (load (<6 x i16>), align 1, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<6 x i16>)
...

---
name: test_load_global_v7s16_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v7s16_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[UV2]](<2 x i16>)
    ; SI-NEXT: $vgpr3 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v7s16_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[UV2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr3 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v7s16_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[UV2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr3 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v7s16_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[UV]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[UV1]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[UV2]](<2 x i16>)
    ; VI-NEXT: $vgpr3 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v7s16_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-HSA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[UV8:%[0-9]+]]:_(<2 x i16>), [[UV9:%[0-9]+]]:_(<2 x i16>), [[UV10:%[0-9]+]]:_(<2 x i16>), [[UV11:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[UV12:%[0-9]+]]:_(<2 x i16>), [[UV13:%[0-9]+]]:_(<2 x i16>), [[UV14:%[0-9]+]]:_(<2 x i16>), [[UV15:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV16:%[0-9]+]]:_(<2 x i16>), [[UV17:%[0-9]+]]:_(<2 x i16>), [[UV18:%[0-9]+]]:_(<2 x i16>), [[UV19:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV16]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[UV4]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[UV9]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[UV14]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v7s16_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-MESA-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>), [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[UV8:%[0-9]+]]:_(<2 x i16>), [[UV9:%[0-9]+]]:_(<2 x i16>), [[UV10:%[0-9]+]]:_(<2 x i16>), [[UV11:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[UV12:%[0-9]+]]:_(<2 x i16>), [[UV13:%[0-9]+]]:_(<2 x i16>), [[UV14:%[0-9]+]]:_(<2 x i16>), [[UV15:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[BITCAST]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV16:%[0-9]+]]:_(<2 x i16>), [[UV17:%[0-9]+]]:_(<2 x i16>), [[UV18:%[0-9]+]]:_(<2 x i16>), [[UV19:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV16]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[UV4]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[UV9]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[UV14]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<7 x i16>) = G_LOAD %0(p1) :: (load (<7 x i16>), align 16, addrspace 1)
    %2:_(<7 x i16>) = G_IMPLICIT_DEF
    %3:_(<14 x i16>) = G_CONCAT_VECTORS %1(<7 x i16>), %2(<7 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>), %9:_(<2 x i16>), %10:_(<2 x i16>) = G_UNMERGE_VALUES %3(<14 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)
    $vgpr3 = COPY %7(<2 x i16>)

...

---
name: test_load_global_v7s16_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v7s16_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v7s16_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-HSA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-HSA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-HSA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v7s16_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-MESA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v7s16_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v7s16_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v7s16_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<7 x i16>) = G_LOAD %0(p1) :: (load (<7 x i16>), align 8, addrspace 1)
    %2:_(<7 x i16>) = G_IMPLICIT_DEF
    %3:_(<14 x i16>) = G_CONCAT_VECTORS %1(<7 x i16>), %2(<7 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>), %9:_(<2 x i16>), %10:_(<2 x i16>) = G_UNMERGE_VALUES %3(<14 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)
    $vgpr3 = COPY %7(<2 x i16>)

...

---
name: test_load_global_v7s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v7s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v7s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-HSA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-HSA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-HSA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v7s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-MESA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v7s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v7s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v7s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<7 x i16>) = G_LOAD %0(p1) :: (load (<7 x i16>), align 4, addrspace 1)
    %2:_(<7 x i16>) = G_IMPLICIT_DEF
    %3:_(<14 x i16>) = G_CONCAT_VECTORS %1(<7 x i16>), %2(<7 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>), %9:_(<2 x i16>), %10:_(<2 x i16>) = G_UNMERGE_VALUES %3(<14 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)
    $vgpr3 = COPY %7(<2 x i16>)

...

---
name: test_load_global_v7s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v7s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v7s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-HSA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-HSA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-HSA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v7s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-MESA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-MESA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v7s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v7s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v7s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<7 x i16>) = G_LOAD %0(p1) :: (load (<7 x i16>), align 2, addrspace 1)
    %2:_(<7 x i16>) = G_IMPLICIT_DEF
    %3:_(<14 x i16>) = G_CONCAT_VECTORS %1(<7 x i16>), %2(<7 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>), %9:_(<2 x i16>), %10:_(<2 x i16>) = G_UNMERGE_VALUES %3(<14 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)
    $vgpr3 = COPY %7(<2 x i16>)

...

---
name: test_load_global_v7s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v7s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C8]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C8]]
    ; SI-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C9]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL7]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C8]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C8]]
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C9]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL8]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[OR4]], [[C8]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[OR5]], [[C8]]
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C9]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL9]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[OR6]], [[C8]]
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C8]]
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C9]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL10]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; SI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; SI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v7s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; CI-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-HSA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[LOAD]], [[C6]]
    ; CI-HSA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LOAD1]], [[C6]]
    ; CI-HSA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CI-HSA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LOAD2]], [[C6]]
    ; CI-HSA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LOAD3]], [[C6]]
    ; CI-HSA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL1]]
    ; CI-HSA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; CI-HSA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LOAD4]], [[C6]]
    ; CI-HSA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LOAD5]], [[C6]]
    ; CI-HSA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL2]]
    ; CI-HSA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; CI-HSA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LOAD6]], [[C6]]
    ; CI-HSA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C6]]
    ; CI-HSA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C7]](i32)
    ; CI-HSA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL3]]
    ; CI-HSA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR3]](i32)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-HSA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v7s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CI-MESA-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CI-MESA-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C8]]
    ; CI-MESA-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C8]]
    ; CI-MESA-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C9]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL7]]
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; CI-MESA-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C8]]
    ; CI-MESA-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C8]]
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C9]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL8]]
    ; CI-MESA-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; CI-MESA-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[OR4]], [[C8]]
    ; CI-MESA-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[OR5]], [[C8]]
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C9]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL9]]
    ; CI-MESA-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; CI-MESA-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[OR6]], [[C8]]
    ; CI-MESA-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C8]]
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C9]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL10]]
    ; CI-MESA-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; CI-MESA-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v7s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[OR]], [[C8]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[OR1]], [[C8]]
    ; VI-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C9]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL7]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR7]](i32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[OR2]], [[C8]]
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[OR3]], [[C8]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C9]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL8]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR8]](i32)
    ; VI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[OR4]], [[C8]]
    ; VI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[OR5]], [[C8]]
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C9]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL9]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR9]](i32)
    ; VI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[OR6]], [[C8]]
    ; VI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C8]]
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C9]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL10]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR10]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ; VI-NEXT: $vgpr1 = COPY [[BITCAST2]](<2 x i16>)
    ; VI-NEXT: $vgpr2 = COPY [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: $vgpr3 = COPY [[BITCAST4]](<2 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v7s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD1]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-HSA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; GFX9-HSA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD2]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-HSA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-HSA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD3]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-HSA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-HSA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD4]](i32)
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-HSA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-HSA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD5]](i32)
    ; GFX9-HSA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-HSA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD6]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-HSA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v7s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 6
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[OR3]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[OR4]](i32)
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 10
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[OR6]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<8 x i16>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<8 x i16>)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr2 = COPY [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-MESA-NEXT: $vgpr3 = COPY [[BUILD_VECTOR3]](<2 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<7 x i16>) = G_LOAD %0(p1) :: (load (<7 x i16>), align 1, addrspace 1)
    %2:_(<7 x i16>) = G_IMPLICIT_DEF
    %3:_(<14 x i16>) = G_CONCAT_VECTORS %1(<7 x i16>), %2(<7 x i16>)
    %4:_(<2 x i16>), %5:_(<2 x i16>), %6:_(<2 x i16>), %7:_(<2 x i16>), %8:_(<2 x i16>), %9:_(<2 x i16>), %10:_(<2 x i16>) = G_UNMERGE_VALUES %3(<14 x i16>)
    $vgpr0 = COPY %4(<2 x i16>)
    $vgpr1 = COPY %5(<2 x i16>)
    $vgpr2 = COPY %6(<2 x i16>)
    $vgpr3 = COPY %7(<2 x i16>)

...

---
name: test_load_global_v8s16_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v8s16_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v8s16_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v8s16_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v8s16_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v8s16_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v8s16_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<8 x i16>) = G_LOAD %0(p1) :: (load (<8 x i16>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<8 x i16>)
...

---
name: test_load_global_v8s16_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v8s16_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v8s16_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v8s16_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; VI-LABEL: name: test_load_global_v8s16_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v8s16_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v8s16_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<8 x i16>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<8 x i16>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<8 x i16>) = G_LOAD %0(p1) :: (load (<8 x i16>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<8 x i16>)
...

---
name: test_load_global_v2s32_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s32_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s32_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s32_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v2s32_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s32_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s32_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i32>), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_load_global_v2s32_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s32_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s32_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s32_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v2s32_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s32_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s32_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i32>), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_load_global_v2s32_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s32_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s32_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s32_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v2s32_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s32_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s32_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i32>), align 2, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_load_global_v2s32_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s32_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s32_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s32_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v2s32_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s32_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s32_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i32>), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_load_global_v3s32_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s32_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s32_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s32_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v3s32_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s32_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s32_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i32>) = G_LOAD %0(p1) :: (load (<3 x i32>), align 16, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<3 x i32>)
...

---
name: test_load_global_v3s32_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s32_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[LOAD1]](i32)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s32_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s32_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v3s32_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s32_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s32_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i32>) = G_LOAD %0(p1) :: (load (<3 x i32>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<3 x i32>)
...

---
name: test_load_global_v4s32_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s32_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s32_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s32_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v4s32_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s32_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s32_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i32>) = G_LOAD %0(p1) :: (load (<4 x i32>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<4 x i32>)
...

---
name: test_load_global_v4s32_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s32_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s32_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s32_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v4s32_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s32_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s32_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i32>) = G_LOAD %0(p1) :: (load (<4 x i32>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<4 x i32>)
...

---
name: test_load_global_v4s32_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s32_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s32_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s32_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v4s32_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s32_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s32_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i32>) = G_LOAD %0(p1) :: (load (<4 x i32>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<4 x i32>)
...

---
name: test_load_global_v8s32_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v8s32_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v8s32_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v8s32_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v8s32_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v8s32_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v8s32_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<8 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<8 x i32>) = G_LOAD %0(p1) :: (load (<8 x i32>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<8 x i32>)
...

---
name: test_load_global_v16s32_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v16s32_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<16 x i32>) = G_LOAD [[COPY]](p1) :: (load (<16 x i32>), align 32, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[LOAD]](<16 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v16s32_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<16 x i32>) = G_LOAD [[COPY]](p1) :: (load (<16 x i32>), align 32, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[LOAD]](<16 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v16s32_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<16 x i32>) = G_LOAD [[COPY]](p1) :: (load (<16 x i32>), align 32, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[LOAD]](<16 x i32>)
    ;
    ; VI-LABEL: name: test_load_global_v16s32_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<16 x i32>) = G_LOAD [[COPY]](p1) :: (load (<16 x i32>), align 32, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[LOAD]](<16 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v16s32_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<16 x i32>) = G_LOAD [[COPY]](p1) :: (load (<16 x i32>), align 32, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[LOAD]](<16 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v16s32_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<16 x i32>) = G_LOAD [[COPY]](p1) :: (load (<16 x i32>), align 32, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY [[LOAD]](<16 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<16 x i32>) = G_LOAD %0(p1) :: (load (<16 x i32>), align 32, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7_vgpr8_vgpr9_vgpr10_vgpr11_vgpr12_vgpr13_vgpr14_vgpr15 = COPY %1(<16 x i32>)
...

---
name: test_load_global_v2s64_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s64_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s64_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s64_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v2s64_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s64_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s64_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i64>) = G_LOAD %0(p1) :: (load (<2 x i64>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_load_global_v2s64_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s64_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s64_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s64_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v2s64_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s64_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s64_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i64>) = G_LOAD %0(p1) :: (load (<2 x i64>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_load_global_v2s64_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s64_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s64_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s64_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v2s64_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s64_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s64_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i64>) = G_LOAD %0(p1) :: (load (<2 x i64>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_load_global_v2s64_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s64_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR3]](i32)
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR4]](i32)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C3]](i32)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[SHL5]], [[ZEXT1]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR2]](i64), [[OR5]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s64_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s64_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR3]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR4]](i32)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C3]](i32)
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[SHL5]], [[ZEXT1]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR2]](i64), [[OR5]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v2s64_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR3]](i32)
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR4]](i32)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C3]](i32)
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[SHL5]], [[ZEXT1]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR2]](i64), [[OR5]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s64_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s64_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR1]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[SHL2]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR3]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR4]](i32)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C3]](i32)
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[SHL5]], [[ZEXT1]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR2]](i64), [[OR5]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i64>) = G_LOAD %0(p1) :: (load (<2 x i64>), align 2, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_load_global_v2s64_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s64_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; SI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; SI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; SI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; SI-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s64_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s64_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; CI-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; CI-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; CI-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; CI-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; CI-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; CI-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; CI-MESA-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v2s64_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; VI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; VI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; VI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; VI-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; VI-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s64_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<2 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s64_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; GFX9-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; GFX9-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; GFX9-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; GFX9-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; GFX9-MESA-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i64>) = G_LOAD %0(p1) :: (load (<2 x i64>), align 1, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x i64>)
...

---
name: test_load_global_v2sp1_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2sp1_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2sp1_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2sp1_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; VI-LABEL: name: test_load_global_v2sp1_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2sp1_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2sp1_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p1>) = G_LOAD %0(p1) :: (load (<2 x p1>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x p1>)
...

---
name: test_load_global_v3s64_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s64_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<4 x i64>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64), [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[UV2]](i64), [[UV7]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s64_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<4 x i64>)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64), [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[UV2]](i64), [[UV7]](i64)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s64_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<4 x i64>)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64), [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[UV2]](i64), [[UV7]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v3s64_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<4 x i64>)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64), [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[UV2]](i64), [[UV7]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s64_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<4 x i64>)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64), [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[UV2]](i64), [[UV7]](i64)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s64_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<4 x i64>)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64), [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[UV2]](i64), [[UV7]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i64>) = G_LOAD %0(p1) :: (load (<3 x i64>), align 32, addrspace 1)
    %2:_(<4 x i64>) = G_IMPLICIT_DEF
    %3:_(<4 x i64>) = G_INSERT %2, %1(<3 x i64>), 0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(<4 x i64>)
...

---
name: test_load_global_v3s64_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s64_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s64_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, addrspace 1)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s64_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, addrspace 1)
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v3s64_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, addrspace 1)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s64_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, addrspace 1)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s64_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i64>) = G_LOAD %0(p1) :: (load (<3 x i64>), align 8, addrspace 1)
    %2:_(<4 x i64>) = G_IMPLICIT_DEF
    %3:_(<4 x i64>) = G_INSERT %2, %1(<3 x i64>), 0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(<4 x i64>)
...

---
name: test_load_global_v3s64_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v3s64_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; SI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; SI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; SI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; SI-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; SI-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; SI-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; SI-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; SI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; SI-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; SI-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; SI-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; SI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; SI-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; SI-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; SI-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; SI-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; SI-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; SI-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; SI-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; SI-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; SI-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; SI-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; SI-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; SI-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; SI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; SI-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[UV3]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v3s64_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v3s64_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; CI-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; CI-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; CI-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; CI-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; CI-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; CI-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; CI-MESA-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-MESA-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; CI-MESA-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; CI-MESA-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; CI-MESA-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; CI-MESA-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; CI-MESA-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; CI-MESA-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; CI-MESA-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; CI-MESA-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; CI-MESA-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; CI-MESA-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; CI-MESA-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; CI-MESA-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[UV3]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v3s64_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; VI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; VI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; VI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; VI-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; VI-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; VI-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; VI-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; VI-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; VI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; VI-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; VI-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; VI-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; VI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; VI-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; VI-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; VI-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; VI-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; VI-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; VI-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; VI-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; VI-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; VI-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; VI-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; VI-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; VI-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; VI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; VI-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; VI-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[UV3]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v3s64_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i64>) = G_LOAD [[COPY]](p1) :: (load (<2 x i64>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(i64) = G_LOAD [[PTR_ADD]](p1) :: (load (i64) from unknown-address + 16, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[LOAD]](<2 x i64>)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64), [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[UV]](i64), [[UV1]](i64), [[LOAD1]](i64), [[UV5]](i64)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v3s64_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; GFX9-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; GFX9-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; GFX9-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; GFX9-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; GFX9-MESA-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; GFX9-MESA-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-MESA-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; GFX9-MESA-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; GFX9-MESA-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; GFX9-MESA-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; GFX9-MESA-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; GFX9-MESA-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; GFX9-MESA-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; GFX9-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; GFX9-MESA-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; GFX9-MESA-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[UV3]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i64>) = G_LOAD %0(p1) :: (load (<3 x i64>), align 1, addrspace 1)
    %2:_(<4 x i64>) = G_IMPLICIT_DEF
    %3:_(<4 x i64>) = G_INSERT %2, %1(<3 x i64>), 0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(<4 x i64>)
...

---
name: test_load_global_v4s64_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s64_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s64_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s64_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v4s64_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s64_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s64_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i64>) = G_LOAD %0(p1) :: (load (<4 x i64>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<4 x i64>)
...

---
name: test_load_global_v4s64_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s64_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 8, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s64_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 8, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s64_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 8, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v4s64_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 8, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s64_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s64_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i64>) = G_LOAD %0(p1) :: (load (<4 x i64>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<4 x i64>)
...

---
name: test_load_global_v4s64_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4s64_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; SI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; SI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; SI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; SI-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; SI-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; SI-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; SI-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; SI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; SI-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; SI-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; SI-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; SI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; SI-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; SI-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; SI-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; SI-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; SI-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; SI-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; SI-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; SI-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; SI-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; SI-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; SI-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; SI-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; SI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; SI-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; SI-NEXT: [[C8:%[0-9]+]]:_(i64) = G_CONSTANT i64 24
    ; SI-NEXT: [[PTR_ADD23:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C8]](i64)
    ; SI-NEXT: [[ZEXTLOAD18:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD23]](p1) :: (load (i8) from unknown-address + 24, addrspace 1)
    ; SI-NEXT: [[PTR_ADD24:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD19:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD24]](p1) :: (load (i8) from unknown-address + 25, addrspace 1)
    ; SI-NEXT: [[SHL21:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD19]], [[C1]](i32)
    ; SI-NEXT: [[OR21:%[0-9]+]]:_(i32) = G_OR [[SHL21]], [[ZEXTLOAD18]]
    ; SI-NEXT: [[PTR_ADD25:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD20:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD25]](p1) :: (load (i8) from unknown-address + 26, addrspace 1)
    ; SI-NEXT: [[PTR_ADD26:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD25]], [[C]](i64)
    ; SI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD26]](p1) :: (load (i8) from unknown-address + 27, addrspace 1)
    ; SI-NEXT: [[SHL22:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; SI-NEXT: [[OR22:%[0-9]+]]:_(i32) = G_OR [[SHL22]], [[ZEXTLOAD20]]
    ; SI-NEXT: [[SHL23:%[0-9]+]]:_(i32) = G_SHL [[OR22]], [[C3]](i32)
    ; SI-NEXT: [[OR23:%[0-9]+]]:_(i32) = G_OR [[SHL23]], [[OR21]]
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i64) = G_ZEXT [[OR23]](i32)
    ; SI-NEXT: [[PTR_ADD27:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD21:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD27]](p1) :: (load (i8) from unknown-address + 28, addrspace 1)
    ; SI-NEXT: [[PTR_ADD28:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD22:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD28]](p1) :: (load (i8) from unknown-address + 29, addrspace 1)
    ; SI-NEXT: [[SHL24:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD22]], [[C1]](i32)
    ; SI-NEXT: [[OR24:%[0-9]+]]:_(i32) = G_OR [[SHL24]], [[ZEXTLOAD21]]
    ; SI-NEXT: [[PTR_ADD29:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD23:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD29]](p1) :: (load (i8) from unknown-address + 30, addrspace 1)
    ; SI-NEXT: [[PTR_ADD30:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD29]], [[C]](i64)
    ; SI-NEXT: [[LOAD7:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD30]](p1) :: (load (i8) from unknown-address + 31, addrspace 1)
    ; SI-NEXT: [[SHL25:%[0-9]+]]:_(i32) = G_SHL [[LOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR25:%[0-9]+]]:_(i32) = G_OR [[SHL25]], [[ZEXTLOAD23]]
    ; SI-NEXT: [[SHL26:%[0-9]+]]:_(i32) = G_SHL [[OR25]], [[C3]](i32)
    ; SI-NEXT: [[OR26:%[0-9]+]]:_(i32) = G_OR [[SHL26]], [[OR24]]
    ; SI-NEXT: [[ANYEXT3:%[0-9]+]]:_(i64) = G_ANYEXT [[OR26]](i32)
    ; SI-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; SI-NEXT: [[SHL27:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT3]], [[COPY3]](i32)
    ; SI-NEXT: [[OR27:%[0-9]+]]:_(i64) = G_OR [[SHL27]], [[ZEXT3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[OR27]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4s64_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4s64_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; CI-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; CI-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; CI-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; CI-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; CI-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; CI-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; CI-MESA-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; CI-MESA-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; CI-MESA-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; CI-MESA-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; CI-MESA-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; CI-MESA-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; CI-MESA-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; CI-MESA-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; CI-MESA-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; CI-MESA-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; CI-MESA-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; CI-MESA-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; CI-MESA-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; CI-MESA-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; CI-MESA-NEXT: [[C8:%[0-9]+]]:_(i64) = G_CONSTANT i64 24
    ; CI-MESA-NEXT: [[PTR_ADD23:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C8]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD18:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD23]](p1) :: (load (i8) from unknown-address + 24, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD24:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD19:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD24]](p1) :: (load (i8) from unknown-address + 25, addrspace 1)
    ; CI-MESA-NEXT: [[SHL21:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD19]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR21:%[0-9]+]]:_(i32) = G_OR [[SHL21]], [[ZEXTLOAD18]]
    ; CI-MESA-NEXT: [[PTR_ADD25:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD20:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD25]](p1) :: (load (i8) from unknown-address + 26, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD26:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD25]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD26]](p1) :: (load (i8) from unknown-address + 27, addrspace 1)
    ; CI-MESA-NEXT: [[SHL22:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR22:%[0-9]+]]:_(i32) = G_OR [[SHL22]], [[ZEXTLOAD20]]
    ; CI-MESA-NEXT: [[SHL23:%[0-9]+]]:_(i32) = G_SHL [[OR22]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR23:%[0-9]+]]:_(i32) = G_OR [[SHL23]], [[OR21]]
    ; CI-MESA-NEXT: [[ZEXT3:%[0-9]+]]:_(i64) = G_ZEXT [[OR23]](i32)
    ; CI-MESA-NEXT: [[PTR_ADD27:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD21:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD27]](p1) :: (load (i8) from unknown-address + 28, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD28:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD22:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD28]](p1) :: (load (i8) from unknown-address + 29, addrspace 1)
    ; CI-MESA-NEXT: [[SHL24:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD22]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR24:%[0-9]+]]:_(i32) = G_OR [[SHL24]], [[ZEXTLOAD21]]
    ; CI-MESA-NEXT: [[PTR_ADD29:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD23:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD29]](p1) :: (load (i8) from unknown-address + 30, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD30:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD29]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD7:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD30]](p1) :: (load (i8) from unknown-address + 31, addrspace 1)
    ; CI-MESA-NEXT: [[SHL25:%[0-9]+]]:_(i32) = G_SHL [[LOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR25:%[0-9]+]]:_(i32) = G_OR [[SHL25]], [[ZEXTLOAD23]]
    ; CI-MESA-NEXT: [[SHL26:%[0-9]+]]:_(i32) = G_SHL [[OR25]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR26:%[0-9]+]]:_(i32) = G_OR [[SHL26]], [[OR24]]
    ; CI-MESA-NEXT: [[ANYEXT3:%[0-9]+]]:_(i64) = G_ANYEXT [[OR26]](i32)
    ; CI-MESA-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; CI-MESA-NEXT: [[SHL27:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT3]], [[COPY3]](i32)
    ; CI-MESA-NEXT: [[OR27:%[0-9]+]]:_(i64) = G_OR [[SHL27]], [[ZEXT3]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[OR27]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_load_global_v4s64_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; VI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; VI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; VI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; VI-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; VI-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; VI-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; VI-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; VI-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; VI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; VI-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; VI-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; VI-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; VI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; VI-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; VI-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; VI-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; VI-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; VI-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; VI-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; VI-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; VI-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; VI-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; VI-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; VI-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; VI-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; VI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; VI-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; VI-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; VI-NEXT: [[C8:%[0-9]+]]:_(i64) = G_CONSTANT i64 24
    ; VI-NEXT: [[PTR_ADD23:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C8]](i64)
    ; VI-NEXT: [[ZEXTLOAD18:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD23]](p1) :: (load (i8) from unknown-address + 24, addrspace 1)
    ; VI-NEXT: [[PTR_ADD24:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD19:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD24]](p1) :: (load (i8) from unknown-address + 25, addrspace 1)
    ; VI-NEXT: [[SHL21:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD19]], [[C1]](i32)
    ; VI-NEXT: [[OR21:%[0-9]+]]:_(i32) = G_OR [[SHL21]], [[ZEXTLOAD18]]
    ; VI-NEXT: [[PTR_ADD25:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD20:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD25]](p1) :: (load (i8) from unknown-address + 26, addrspace 1)
    ; VI-NEXT: [[PTR_ADD26:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD25]], [[C]](i64)
    ; VI-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD26]](p1) :: (load (i8) from unknown-address + 27, addrspace 1)
    ; VI-NEXT: [[SHL22:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; VI-NEXT: [[OR22:%[0-9]+]]:_(i32) = G_OR [[SHL22]], [[ZEXTLOAD20]]
    ; VI-NEXT: [[SHL23:%[0-9]+]]:_(i32) = G_SHL [[OR22]], [[C3]](i32)
    ; VI-NEXT: [[OR23:%[0-9]+]]:_(i32) = G_OR [[SHL23]], [[OR21]]
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i64) = G_ZEXT [[OR23]](i32)
    ; VI-NEXT: [[PTR_ADD27:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD21:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD27]](p1) :: (load (i8) from unknown-address + 28, addrspace 1)
    ; VI-NEXT: [[PTR_ADD28:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD22:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD28]](p1) :: (load (i8) from unknown-address + 29, addrspace 1)
    ; VI-NEXT: [[SHL24:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD22]], [[C1]](i32)
    ; VI-NEXT: [[OR24:%[0-9]+]]:_(i32) = G_OR [[SHL24]], [[ZEXTLOAD21]]
    ; VI-NEXT: [[PTR_ADD29:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD23:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD29]](p1) :: (load (i8) from unknown-address + 30, addrspace 1)
    ; VI-NEXT: [[PTR_ADD30:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD29]], [[C]](i64)
    ; VI-NEXT: [[LOAD7:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD30]](p1) :: (load (i8) from unknown-address + 31, addrspace 1)
    ; VI-NEXT: [[SHL25:%[0-9]+]]:_(i32) = G_SHL [[LOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR25:%[0-9]+]]:_(i32) = G_OR [[SHL25]], [[ZEXTLOAD23]]
    ; VI-NEXT: [[SHL26:%[0-9]+]]:_(i32) = G_SHL [[OR25]], [[C3]](i32)
    ; VI-NEXT: [[OR26:%[0-9]+]]:_(i32) = G_OR [[SHL26]], [[OR24]]
    ; VI-NEXT: [[ANYEXT3:%[0-9]+]]:_(i64) = G_ANYEXT [[OR26]](i32)
    ; VI-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; VI-NEXT: [[SHL27:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT3]], [[COPY3]](i32)
    ; VI-NEXT: [[OR27:%[0-9]+]]:_(i64) = G_OR [[SHL27]], [[ZEXT3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[OR27]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4s64_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i64>) = G_LOAD [[COPY]](p1) :: (load (<4 x i64>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[LOAD]](<4 x i64>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4s64_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i64) = G_OR [[SHL6]], [[ZEXT]]
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[OR8]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[OR7]]
    ; GFX9-MESA-NEXT: [[ZEXT1:%[0-9]+]]:_(i64) = G_ZEXT [[OR9]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[ZEXTLOAD11]]
    ; GFX9-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[OR11]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[OR10]]
    ; GFX9-MESA-NEXT: [[ANYEXT1:%[0-9]+]]:_(i64) = G_ANYEXT [[OR12]](i32)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; GFX9-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT1]], [[COPY1]](i32)
    ; GFX9-MESA-NEXT: [[OR13:%[0-9]+]]:_(i64) = G_OR [[SHL13]], [[ZEXT1]]
    ; GFX9-MESA-NEXT: [[C7:%[0-9]+]]:_(i64) = G_CONSTANT i64 16
    ; GFX9-MESA-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C7]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[ZEXTLOAD12]]
    ; GFX9-MESA-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD14]]
    ; GFX9-MESA-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[OR15]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[OR14]]
    ; GFX9-MESA-NEXT: [[ZEXT2:%[0-9]+]]:_(i64) = G_ZEXT [[OR16]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[ZEXTLOAD15]]
    ; GFX9-MESA-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL18:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR18:%[0-9]+]]:_(i32) = G_OR [[SHL18]], [[ZEXTLOAD17]]
    ; GFX9-MESA-NEXT: [[SHL19:%[0-9]+]]:_(i32) = G_SHL [[OR18]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR19:%[0-9]+]]:_(i32) = G_OR [[SHL19]], [[OR17]]
    ; GFX9-MESA-NEXT: [[ANYEXT2:%[0-9]+]]:_(i64) = G_ANYEXT [[OR19]](i32)
    ; GFX9-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; GFX9-MESA-NEXT: [[SHL20:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT2]], [[COPY2]](i32)
    ; GFX9-MESA-NEXT: [[OR20:%[0-9]+]]:_(i64) = G_OR [[SHL20]], [[ZEXT2]]
    ; GFX9-MESA-NEXT: [[C8:%[0-9]+]]:_(i64) = G_CONSTANT i64 24
    ; GFX9-MESA-NEXT: [[PTR_ADD23:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C8]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD18:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD23]](p1) :: (load (i8) from unknown-address + 24, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD24:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD19:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD24]](p1) :: (load (i8) from unknown-address + 25, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL21:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD19]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR21:%[0-9]+]]:_(i32) = G_OR [[SHL21]], [[ZEXTLOAD18]]
    ; GFX9-MESA-NEXT: [[PTR_ADD25:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD20:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD25]](p1) :: (load (i8) from unknown-address + 26, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD26:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD25]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD6:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD26]](p1) :: (load (i8) from unknown-address + 27, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL22:%[0-9]+]]:_(i32) = G_SHL [[LOAD6]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR22:%[0-9]+]]:_(i32) = G_OR [[SHL22]], [[ZEXTLOAD20]]
    ; GFX9-MESA-NEXT: [[SHL23:%[0-9]+]]:_(i32) = G_SHL [[OR22]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR23:%[0-9]+]]:_(i32) = G_OR [[SHL23]], [[OR21]]
    ; GFX9-MESA-NEXT: [[ZEXT3:%[0-9]+]]:_(i64) = G_ZEXT [[OR23]](i32)
    ; GFX9-MESA-NEXT: [[PTR_ADD27:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD23]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD21:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD27]](p1) :: (load (i8) from unknown-address + 28, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD28:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD22:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD28]](p1) :: (load (i8) from unknown-address + 29, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL24:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD22]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR24:%[0-9]+]]:_(i32) = G_OR [[SHL24]], [[ZEXTLOAD21]]
    ; GFX9-MESA-NEXT: [[PTR_ADD29:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD27]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD23:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD29]](p1) :: (load (i8) from unknown-address + 30, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD30:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD29]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD7:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD30]](p1) :: (load (i8) from unknown-address + 31, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL25:%[0-9]+]]:_(i32) = G_SHL [[LOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR25:%[0-9]+]]:_(i32) = G_OR [[SHL25]], [[ZEXTLOAD23]]
    ; GFX9-MESA-NEXT: [[SHL26:%[0-9]+]]:_(i32) = G_SHL [[OR25]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR26:%[0-9]+]]:_(i32) = G_OR [[SHL26]], [[OR24]]
    ; GFX9-MESA-NEXT: [[ANYEXT3:%[0-9]+]]:_(i64) = G_ANYEXT [[OR26]](i32)
    ; GFX9-MESA-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY [[C5]](i32)
    ; GFX9-MESA-NEXT: [[SHL27:%[0-9]+]]:_(i64) = G_SHL [[ANYEXT3]], [[COPY3]](i32)
    ; GFX9-MESA-NEXT: [[OR27:%[0-9]+]]:_(i64) = G_OR [[SHL27]], [[ZEXT3]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[OR6]](i64), [[OR13]](i64), [[OR20]](i64), [[OR27]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i64>) = G_LOAD %0(p1) :: (load (<4 x i64>), align 1, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<4 x i64>)
...

---
name: test_load_global_v2s128_align32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2s128_align32
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i128>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<2 x i128>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2s128_align32
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i128>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<2 x i128>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2s128_align32
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i128>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<2 x i128>)
    ;
    ; VI-LABEL: name: test_load_global_v2s128_align32
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i128>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<2 x i128>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2s128_align32
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i128>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<2 x i128>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2s128_align32
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i128>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<2 x i128>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i128>) = G_LOAD %0(p1) :: (load (<2 x i128>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<2 x i128>)
...

---
name: test_load_global_v2p1_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p1_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p1_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p1_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; VI-LABEL: name: test_load_global_v2p1_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p1_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p1_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p1>) = G_LOAD %0(p1) :: (load (<2 x p1>), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x p1>)
...

---
name: test_load_global_v2p1_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p1_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p1_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p1_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; VI-LABEL: name: test_load_global_v2p1_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p1_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p1_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p1>) = G_LOAD %0(p1) :: (load (<2 x p1>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x p1>)
...

---
name: test_load_global_v2p1_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p1_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p1_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p1_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; VI-LABEL: name: test_load_global_v2p1_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p1_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p1_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p1>) = G_LOAD %0(p1) :: (load (<2 x p1>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x p1>)
...

---
name: test_load_global_v2p1_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p1_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; SI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p1_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p1_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; CI-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; CI-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; VI-LABEL: name: test_load_global_v2p1_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; VI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p1_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[LOAD]](<4 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p1_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; GFX9-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32), [[OR11]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p1>) = G_BITCAST [[BUILD_VECTOR]](<4 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST]](<2 x p1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p1>) = G_LOAD %0(p1) :: (load (<2 x p1>), align 1, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<2 x p1>)
...

---
name: test_load_global_v4p1_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v4p1_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 8, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x p1>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x p1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v4p1_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 8, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x p1>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x p1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v4p1_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 8, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x p1>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x p1>)
    ;
    ; VI-LABEL: name: test_load_global_v4p1_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 8, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x p1>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x p1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v4p1_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 8, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x p1>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x p1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v4p1_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<8 x i32>) = G_LOAD [[COPY]](p1) :: (load (<8 x i32>), align 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x p1>) = G_BITCAST [[LOAD]](<8 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST]](<4 x p1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x p1>) = G_LOAD %0(p1) :: (load (<4 x p1>), align 8, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %1(<4 x p1>)
...

---
name: test_load_global_v2p3_align8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p3_align8
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p3_align8
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p3_align8
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; VI-LABEL: name: test_load_global_v2p3_align8
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p3_align8
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p3_align8
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p3>) = G_LOAD %0(p1) :: (load (<2 x p3>), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x p3>)
...

---
name: test_load_global_v2p3_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p3_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p3_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p3_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; VI-LABEL: name: test_load_global_v2p3_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p3_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p3_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p3>) = G_LOAD %0(p1) :: (load (<2 x p3>), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x p3>)
...

---
name: test_load_global_v2p3_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v2p3_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[BUILD_VECTOR]](<2 x i32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v2p3_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v2p3_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[BUILD_VECTOR]](<2 x i32>)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; VI-LABEL: name: test_load_global_v2p3_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[BUILD_VECTOR]](<2 x i32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v2p3_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[LOAD]](<2 x i32>)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v2p3_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x p3>) = G_BITCAST [[BUILD_VECTOR]](<2 x i32>)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST]](<2 x p3>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x p3>) = G_LOAD %0(p1) :: (load (<2 x p3>), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x p3>)
...

---
name: test_ext_load_global_s32_from_1_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s32_from_1_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s32_from_1_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s32_from_1_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_ext_load_global_s32_from_1_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s32_from_1_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s32_from_1_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i8), align 4, addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_ext_load_global_s32_from_2_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s32_from_2_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s32_from_2_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s32_from_2_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_ext_load_global_s32_from_2_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s32_from_2_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s32_from_2_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i16), align 4, addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_ext_load_global_s32_from_s24_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s32_from_s24_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; SI-NEXT: $vgpr0 = COPY [[OR1]](i32)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s32_from_s24_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s32_from_s24_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR1]](i32)
    ;
    ; VI-LABEL: name: test_ext_load_global_s32_from_s24_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; VI-NEXT: $vgpr0 = COPY [[OR1]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s32_from_s24_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s32_from_s24_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[OR]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR1]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i24), align 1, addrspace 1)
    $vgpr0 = COPY %1(i32)
...
---
name: test_ext_load_global_s32_from_s24_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s32_from_s24_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s32_from_s24_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s32_from_s24_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; VI-LABEL: name: test_ext_load_global_s32_from_s24_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s32_from_s24_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[OR]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s32_from_s24_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 2, align 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[OR]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i24), align 2, addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_ext_load_global_s32_from_s24_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s32_from_s24_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s32_from_s24_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s32_from_s24_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_ext_load_global_s32_from_s24_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s32_from_s24_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s32_from_s24_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i24), align 4, addrspace 1)
    $vgpr0 = COPY %1(i32)
...

---
name: test_ext_load_global_s64_from_1_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1


    ; SI-LABEL: name: test_ext_load_global_s64_from_1_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s64_from_1_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s64_from_1_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; VI-LABEL: name: test_ext_load_global_s64_from_1_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s64_from_1_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s64_from_1_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i8), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_ext_load_global_s64_from_2_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s64_from_2_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s64_from_2_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s64_from_2_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; VI-LABEL: name: test_ext_load_global_s64_from_2_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s64_from_2_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s64_from_2_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i16), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_ext_load_global_s64_from_4_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s64_from_4_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s64_from_4_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s64_from_4_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; VI-LABEL: name: test_ext_load_global_s64_from_4_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s64_from_4_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s64_from_4_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i32), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_ext_load_global_s128_from_4_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s128_from_4_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[LOAD]](i32), [[DEF]](i32)
    ; SI-NEXT: [[DEF1:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; SI-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[MV]](i64), [[DEF1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV1]](i128)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s128_from_4_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[LOAD]](i32), [[DEF]](i32)
    ; CI-HSA-NEXT: [[DEF1:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; CI-HSA-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[MV]](i64), [[DEF1]](i64)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV1]](i128)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s128_from_4_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[LOAD]](i32), [[DEF]](i32)
    ; CI-MESA-NEXT: [[DEF1:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; CI-MESA-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[MV]](i64), [[DEF1]](i64)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV1]](i128)
    ;
    ; VI-LABEL: name: test_ext_load_global_s128_from_4_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[LOAD]](i32), [[DEF]](i32)
    ; VI-NEXT: [[DEF1:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; VI-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[MV]](i64), [[DEF1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV1]](i128)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s128_from_4_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[LOAD]](i32), [[DEF]](i32)
    ; GFX9-HSA-NEXT: [[DEF1:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; GFX9-HSA-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[MV]](i64), [[DEF1]](i64)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV1]](i128)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s128_from_4_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[LOAD]](i32), [[DEF]](i32)
    ; GFX9-MESA-NEXT: [[DEF1:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; GFX9-MESA-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[MV]](i64), [[DEF1]](i64)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV1]](i128)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i128) = G_LOAD %0(p1) :: (load (i32), addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(i128)
...

---
name: test_ext_load_global_s64_from_2_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s64_from_2_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s64_from_2_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s64_from_2_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; VI-LABEL: name: test_ext_load_global_s64_from_2_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s64_from_2_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s64_from_2_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i16), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_ext_load_global_s64_from_1_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_ext_load_global_s64_from_1_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-HSA-LABEL: name: test_ext_load_global_s64_from_1_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; CI-MESA-LABEL: name: test_ext_load_global_s64_from_1_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; VI-LABEL: name: test_ext_load_global_s64_from_1_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-HSA-LABEL: name: test_ext_load_global_s64_from_1_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    ;
    ; GFX9-MESA-LABEL: name: test_ext_load_global_s64_from_1_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i8), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LOAD]](i32)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[ANYEXT]](i64)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_LOAD %0(p1) :: (load (i8), align 4, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: test_extload_global_v2s32_from_v2s16_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_extload_global_v2s32_from_v2s16_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_extload_global_v2s32_from_v2s16_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_extload_global_v2s32_from_v2s16_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_extload_global_v2s32_from_v2s16_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_extload_global_v2s32_from_v2s16_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_extload_global_v2s32_from_v2s16_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 1, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i16>), align 1, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_extload_global_v2s32_from_v2s16_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_extload_global_v2s32_from_v2s16_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_extload_global_v2s32_from_v2s16_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_extload_global_v2s32_from_v2s16_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_extload_global_v2s32_from_v2s16_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_extload_global_v2s32_from_v2s16_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_extload_global_v2s32_from_v2s16_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), align 2, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i16>), align 2, addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_extload_global_v2s32_from_v2s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_extload_global_v2s32_from_v2s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_extload_global_v2s32_from_v2s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_extload_global_v2s32_from_v2s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_extload_global_v2s32_from_v2s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_extload_global_v2s32_from_v2s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_extload_global_v2s32_from_v2s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i16>), addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1 = COPY [[LOAD]](<2 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_LOAD %0(p1) :: (load (<2 x i16>), addrspace 1)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: test_extload_global_v3s32_from_v3s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_extload_global_v3s32_from_v3s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i16>), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_extload_global_v3s32_from_v3s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i16>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_extload_global_v3s32_from_v3s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i16>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_extload_global_v3s32_from_v3s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i16>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_extload_global_v3s32_from_v3s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i16>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_extload_global_v3s32_from_v3s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i16>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[LOAD]](<3 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<3 x i32>) = G_LOAD %0(p1) :: (load (<3 x i16>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2 = COPY %1(<3 x i32>)
...

---
name: test_extload_global_v4s32_from_v4s16_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_extload_global_v4s32_from_v4s16_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-HSA-LABEL: name: test_extload_global_v4s32_from_v4s16_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; CI-MESA-LABEL: name: test_extload_global_v4s32_from_v4s16_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; VI-LABEL: name: test_extload_global_v4s32_from_v4s16_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-HSA-LABEL: name: test_extload_global_v4s32_from_v4s16_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    ;
    ; GFX9-MESA-LABEL: name: test_extload_global_v4s32_from_v4s16_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i16>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[LOAD]](<4 x i32>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<4 x i32>) = G_LOAD %0(p1) :: (load (<4 x i16>), align 4, addrspace 1)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %1(<4 x i32>)
...

---
name: test_global_v2s96_align1
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_global_v2s96_align1
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; SI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; SI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; SI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; SI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; SI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; SI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; SI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; SI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; SI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; SI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; SI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; SI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; SI-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; SI-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; SI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; SI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[ZEXTLOAD12]]
    ; SI-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; SI-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; SI-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR13:%[0-9]+]]:_(i32) = G_OR [[SHL13]], [[ZEXTLOAD14]]
    ; SI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[OR13]], [[C3]](i32)
    ; SI-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[OR12]]
    ; SI-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C5]](i64)
    ; SI-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; SI-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; SI-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; SI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; SI-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD15]]
    ; SI-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; SI-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; SI-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; SI-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[ZEXTLOAD17]]
    ; SI-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[OR16]], [[C3]](i32)
    ; SI-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[OR15]]
    ; SI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR11]](i32), [[OR14]](i32), [[OR17]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; SI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-HSA-LABEL: name: test_global_v2s96_align1
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 1, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; CI-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-MESA-LABEL: name: test_global_v2s96_align1
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; CI-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; CI-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; CI-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; CI-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; CI-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; CI-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; CI-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; CI-MESA-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; CI-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[ZEXTLOAD12]]
    ; CI-MESA-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; CI-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR13:%[0-9]+]]:_(i32) = G_OR [[SHL13]], [[ZEXTLOAD14]]
    ; CI-MESA-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[OR13]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[OR12]]
    ; CI-MESA-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C5]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; CI-MESA-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD15]]
    ; CI-MESA-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; CI-MESA-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[ZEXTLOAD17]]
    ; CI-MESA-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[OR16]], [[C3]](i32)
    ; CI-MESA-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[OR15]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR11]](i32), [[OR14]](i32), [[OR17]](i32)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; VI-LABEL: name: test_global_v2s96_align1
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; VI-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; VI-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; VI-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; VI-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; VI-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; VI-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; VI-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; VI-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; VI-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; VI-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; VI-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; VI-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; VI-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; VI-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; VI-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; VI-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[ZEXTLOAD12]]
    ; VI-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; VI-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; VI-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR13:%[0-9]+]]:_(i32) = G_OR [[SHL13]], [[ZEXTLOAD14]]
    ; VI-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[OR13]], [[C3]](i32)
    ; VI-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[OR12]]
    ; VI-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C5]](i64)
    ; VI-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; VI-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; VI-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; VI-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; VI-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD15]]
    ; VI-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; VI-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; VI-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; VI-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[ZEXTLOAD17]]
    ; VI-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[OR16]], [[C3]](i32)
    ; VI-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[OR15]]
    ; VI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR11]](i32), [[OR14]](i32), [[OR17]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; VI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_global_v2s96_align1
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 1, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_global_v2s96_align1
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i8), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD]](p1) :: (load (i8) from unknown-address + 1, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i8) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i8) from unknown-address + 3, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[OR1]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[OR]]
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i8) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD4]](p1) :: (load (i8) from unknown-address + 5, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i8) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i8) from unknown-address + 7, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[OR4]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[OR3]]
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD6:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i8) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD7:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD8]](p1) :: (load (i8) from unknown-address + 9, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD7]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR6:%[0-9]+]]:_(i32) = G_OR [[SHL6]], [[ZEXTLOAD6]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD8:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i8) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i8) from unknown-address + 11, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR7:%[0-9]+]]:_(i32) = G_OR [[SHL7]], [[ZEXTLOAD8]]
    ; GFX9-MESA-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[OR7]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR8:%[0-9]+]]:_(i32) = G_OR [[SHL8]], [[OR6]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR2]](i32), [[OR5]](i32), [[OR8]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD11:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C6]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD9:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD11]](p1) :: (load (i8) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD12:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD10:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD12]](p1) :: (load (i8) from unknown-address + 13, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD10]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR9:%[0-9]+]]:_(i32) = G_OR [[SHL9]], [[ZEXTLOAD9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD13:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD11:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD13]](p1) :: (load (i8) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD14:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD13]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD14]](p1) :: (load (i8) from unknown-address + 15, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL10:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR10:%[0-9]+]]:_(i32) = G_OR [[SHL10]], [[ZEXTLOAD11]]
    ; GFX9-MESA-NEXT: [[SHL11:%[0-9]+]]:_(i32) = G_SHL [[OR10]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR11:%[0-9]+]]:_(i32) = G_OR [[SHL11]], [[OR9]]
    ; GFX9-MESA-NEXT: [[PTR_ADD15:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD12:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD15]](p1) :: (load (i8) from unknown-address + 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD16:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD13:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD16]](p1) :: (load (i8) from unknown-address + 17, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL12:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD13]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR12:%[0-9]+]]:_(i32) = G_OR [[SHL12]], [[ZEXTLOAD12]]
    ; GFX9-MESA-NEXT: [[PTR_ADD17:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD15]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD14:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD17]](p1) :: (load (i8) from unknown-address + 18, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD18:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD17]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD18]](p1) :: (load (i8) from unknown-address + 19, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL13:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR13:%[0-9]+]]:_(i32) = G_OR [[SHL13]], [[ZEXTLOAD14]]
    ; GFX9-MESA-NEXT: [[SHL14:%[0-9]+]]:_(i32) = G_SHL [[OR13]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR14:%[0-9]+]]:_(i32) = G_OR [[SHL14]], [[OR12]]
    ; GFX9-MESA-NEXT: [[PTR_ADD19:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD11]], [[C5]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD15:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD19]](p1) :: (load (i8) from unknown-address + 20, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD20:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD16:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD20]](p1) :: (load (i8) from unknown-address + 21, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL15:%[0-9]+]]:_(i32) = G_SHL [[ZEXTLOAD16]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR15:%[0-9]+]]:_(i32) = G_OR [[SHL15]], [[ZEXTLOAD15]]
    ; GFX9-MESA-NEXT: [[PTR_ADD21:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD19]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD17:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD21]](p1) :: (load (i8) from unknown-address + 22, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD22:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD21]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD22]](p1) :: (load (i8) from unknown-address + 23, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL16:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR16:%[0-9]+]]:_(i32) = G_OR [[SHL16]], [[ZEXTLOAD17]]
    ; GFX9-MESA-NEXT: [[SHL17:%[0-9]+]]:_(i32) = G_SHL [[OR16]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[OR17:%[0-9]+]]:_(i32) = G_OR [[SHL17]], [[OR15]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR11]](i32), [[OR14]](i32), [[OR17]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i96>) = G_LOAD %0(p1) :: (load (<2 x i96>), align 1, addrspace 1)
    %2:_(i96) = G_EXTRACT %1(<2 x i96>), 0
    %3:_(i96) = G_EXTRACT %1(<2 x i96>), 96
    $vgpr0_vgpr1_vgpr2 = COPY %2(i96)
    $vgpr3_vgpr4_vgpr5 = COPY %3(i96)
...

---
name: test_global_v2s96_align2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_global_v2s96_align2
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; SI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; SI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; SI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C2]](i64)
    ; SI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i16) from unknown-address + 16, addrspace 1)
    ; SI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; SI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i16) from unknown-address + 18, addrspace 1)
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; SI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C3]](i64)
    ; SI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i16) from unknown-address + 20, addrspace 1)
    ; SI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; SI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i16) from unknown-address + 22, addrspace 1)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; SI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR3]](i32), [[OR4]](i32), [[OR5]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; SI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-HSA-LABEL: name: test_global_v2s96_align2
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 2, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 2, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; CI-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-MESA-LABEL: name: test_global_v2s96_align2
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; CI-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; CI-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; CI-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; CI-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; CI-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; CI-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C2]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i16) from unknown-address + 16, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i16) from unknown-address + 18, addrspace 1)
    ; CI-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; CI-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C3]](i64)
    ; CI-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i16) from unknown-address + 20, addrspace 1)
    ; CI-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i16) from unknown-address + 22, addrspace 1)
    ; CI-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; CI-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; CI-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR3]](i32), [[OR4]](i32), [[OR5]](i32)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; VI-LABEL: name: test_global_v2s96_align2
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; VI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; VI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; VI-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; VI-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; VI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; VI-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; VI-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; VI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; VI-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C2]](i64)
    ; VI-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i16) from unknown-address + 16, addrspace 1)
    ; VI-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; VI-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i16) from unknown-address + 18, addrspace 1)
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; VI-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C3]](i64)
    ; VI-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i16) from unknown-address + 20, addrspace 1)
    ; VI-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; VI-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i16) from unknown-address + 22, addrspace 1)
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; VI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR3]](i32), [[OR4]](i32), [[OR5]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; VI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_global_v2s96_align2
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 2, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_global_v2s96_align2
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[COPY]](p1) :: (load (i16), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 2
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i16) from unknown-address + 2, addrspace 1)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[ZEXTLOAD]]
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 4
    ; GFX9-MESA-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD1:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD1]](p1) :: (load (i16) from unknown-address + 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i16) from unknown-address + 6, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LOAD1]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[SHL1]], [[ZEXTLOAD1]]
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; GFX9-MESA-NEXT: [[PTR_ADD3:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD2:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD3]](p1) :: (load (i16) from unknown-address + 8, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD4:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD3]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD4]](p1) :: (load (i16) from unknown-address + 10, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LOAD2]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[SHL2]], [[ZEXTLOAD2]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR]](i32), [[OR1]](i32), [[OR2]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD5:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C4]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD3:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD5]](p1) :: (load (i16) from unknown-address + 12, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD6:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD6]](p1) :: (load (i16) from unknown-address + 14, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[LOAD3]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR3:%[0-9]+]]:_(i32) = G_OR [[SHL3]], [[ZEXTLOAD3]]
    ; GFX9-MESA-NEXT: [[PTR_ADD7:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C2]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD4:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD7]](p1) :: (load (i16) from unknown-address + 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD8:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD7]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD4:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD8]](p1) :: (load (i16) from unknown-address + 18, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[LOAD4]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR4:%[0-9]+]]:_(i32) = G_OR [[SHL4]], [[ZEXTLOAD4]]
    ; GFX9-MESA-NEXT: [[PTR_ADD9:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD5]], [[C3]](i64)
    ; GFX9-MESA-NEXT: [[ZEXTLOAD5:%[0-9]+]]:_(i32) = G_ZEXTLOAD [[PTR_ADD9]](p1) :: (load (i16) from unknown-address + 20, addrspace 1)
    ; GFX9-MESA-NEXT: [[PTR_ADD10:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD9]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD5:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD10]](p1) :: (load (i16) from unknown-address + 22, addrspace 1)
    ; GFX9-MESA-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[LOAD5]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[OR5:%[0-9]+]]:_(i32) = G_OR [[SHL5]], [[ZEXTLOAD5]]
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[OR3]](i32), [[OR4]](i32), [[OR5]](i32)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i96>) = G_LOAD %0(p1) :: (load (<2 x i96>), align 2, addrspace 1)
    %2:_(i96) = G_EXTRACT %1(<2 x i96>), 0
    %3:_(i96) = G_EXTRACT %1(<2 x i96>), 96
    $vgpr0_vgpr1_vgpr2 = COPY %2(i96)
    $vgpr3_vgpr4_vgpr5 = COPY %3(i96)
...

---
name: test_global_v2s96_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_global_v2s96_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[COPY]](p1) :: (load (<2 x i32>), align 4, addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD]](p1) :: (load (i32) from unknown-address + 8, addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[LOAD1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[PTR_ADD1]](p1) :: (load (<2 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; SI-NEXT: [[PTR_ADD2:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD1]], [[C]](i64)
    ; SI-NEXT: [[LOAD3:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD2]](p1) :: (load (i32) from unknown-address + 20, addrspace 1)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD2]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV2]](i32), [[UV3]](i32), [[LOAD3]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; SI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-HSA-LABEL: name: test_global_v2s96_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; CI-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-MESA-LABEL: name: test_global_v2s96_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; VI-LABEL: name: test_global_v2s96_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; VI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_global_v2s96_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_global_v2s96_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i96>) = G_LOAD %0(p1) :: (load (<2 x i96>), align 4, addrspace 1)
    %2:_(i96) = G_EXTRACT %1(<2 x i96>), 0
    %3:_(i96) = G_EXTRACT %1(<2 x i96>), 96
    $vgpr0_vgpr1_vgpr2 = COPY %2(i96)
    $vgpr3_vgpr4_vgpr5 = COPY %3(i96)
...

---
name: test_global_v2s96_align16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_global_v2s96_align16
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(<4 x i32>) = G_LOAD [[COPY]](p1) :: (load (<4 x i32>), addrspace 1)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD]](<4 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV]](i32), [[UV1]](i32), [[UV2]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR]](<3 x i32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; SI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; SI-NEXT: [[LOAD1:%[0-9]+]]:_(<2 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<2 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 8
    ; SI-NEXT: [[PTR_ADD1:%[0-9]+]]:_(p1) = G_PTR_ADD [[PTR_ADD]], [[C1]](i64)
    ; SI-NEXT: [[LOAD2:%[0-9]+]]:_(i32) = G_LOAD [[PTR_ADD1]](p1) :: (load (i32) from unknown-address + 20, addrspace 1)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[LOAD1]](<2 x i32>)
    ; SI-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[UV4]](i32), [[UV5]](i32), [[LOAD2]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[BUILD_VECTOR1]](<3 x i32>)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; SI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-HSA-LABEL: name: test_global_v2s96_align16
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; CI-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; CI-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; CI-MESA-LABEL: name: test_global_v2s96_align16
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; CI-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; CI-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; CI-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; CI-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; CI-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; CI-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; CI-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; VI-LABEL: name: test_global_v2s96_align16
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; VI-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; VI-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; VI-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-HSA-LABEL: name: test_global_v2s96_align16
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-HSA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-HSA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-HSA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; GFX9-HSA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-HSA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-HSA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-HSA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    ;
    ; GFX9-MESA-LABEL: name: test_global_v2s96_align16
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[COPY]](p1) :: (load (<3 x i32>), align 16, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 12
    ; GFX9-MESA-NEXT: [[PTR_ADD:%[0-9]+]]:_(p1) = G_PTR_ADD [[COPY]], [[C]](i64)
    ; GFX9-MESA-NEXT: [[LOAD1:%[0-9]+]]:_(<3 x i32>) = G_LOAD [[PTR_ADD]](p1) :: (load (<3 x i32>) from unknown-address + 12, align 4, addrspace 1)
    ; GFX9-MESA-NEXT: [[BITCAST1:%[0-9]+]]:_(i96) = G_BITCAST [[LOAD1]](<3 x i32>)
    ; GFX9-MESA-NEXT: [[COPY1:%[0-9]+]]:_(i96) = COPY [[BITCAST]](i96)
    ; GFX9-MESA-NEXT: [[COPY2:%[0-9]+]]:_(i96) = COPY [[BITCAST1]](i96)
    ; GFX9-MESA-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[COPY1]](i96)
    ; GFX9-MESA-NEXT: $vgpr3_vgpr4_vgpr5 = COPY [[COPY2]](i96)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<2 x i96>) = G_LOAD %0(p1) :: (load (<2 x i96>), align 16, addrspace 1)
    %2:_(i96) = G_EXTRACT %1(<2 x i96>), 0
    %3:_(i96) = G_EXTRACT %1(<2 x i96>), 96
    $vgpr0_vgpr1_vgpr2 = COPY %2(i96)
    $vgpr3_vgpr4_vgpr5 = COPY %3(i96)
...

---
name: test_load_global_v32s1_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v32s1_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 6
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; SI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C7]](i32)
    ; SI-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 9
    ; SI-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C8]](i32)
    ; SI-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
    ; SI-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C9]](i32)
    ; SI-NEXT: [[C10:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; SI-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C10]](i32)
    ; SI-NEXT: [[C11:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; SI-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C11]](i32)
    ; SI-NEXT: [[C12:%[0-9]+]]:_(i32) = G_CONSTANT i32 13
    ; SI-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C12]](i32)
    ; SI-NEXT: [[C13:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; SI-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C13]](i32)
    ; SI-NEXT: [[C14:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; SI-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C14]](i32)
    ; SI-NEXT: [[C15:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C15]](i32)
    ; SI-NEXT: [[C16:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; SI-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C16]](i32)
    ; SI-NEXT: [[C17:%[0-9]+]]:_(i32) = G_CONSTANT i32 18
    ; SI-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C17]](i32)
    ; SI-NEXT: [[C18:%[0-9]+]]:_(i32) = G_CONSTANT i32 19
    ; SI-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C18]](i32)
    ; SI-NEXT: [[C19:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; SI-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C19]](i32)
    ; SI-NEXT: [[C20:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; SI-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C20]](i32)
    ; SI-NEXT: [[C21:%[0-9]+]]:_(i32) = G_CONSTANT i32 22
    ; SI-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C21]](i32)
    ; SI-NEXT: [[C22:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; SI-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C22]](i32)
    ; SI-NEXT: [[C23:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; SI-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C23]](i32)
    ; SI-NEXT: [[C24:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; SI-NEXT: [[LSHR24:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C24]](i32)
    ; SI-NEXT: [[C25:%[0-9]+]]:_(i32) = G_CONSTANT i32 26
    ; SI-NEXT: [[LSHR25:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C25]](i32)
    ; SI-NEXT: [[C26:%[0-9]+]]:_(i32) = G_CONSTANT i32 27
    ; SI-NEXT: [[LSHR26:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C26]](i32)
    ; SI-NEXT: [[C27:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; SI-NEXT: [[LSHR27:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C27]](i32)
    ; SI-NEXT: [[C28:%[0-9]+]]:_(i32) = G_CONSTANT i32 29
    ; SI-NEXT: [[LSHR28:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C28]](i32)
    ; SI-NEXT: [[C29:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; SI-NEXT: [[LSHR29:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C29]](i32)
    ; SI-NEXT: [[C30:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; SI-NEXT: [[LSHR30:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C30]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<32 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32), [[LSHR7]](i32), [[LSHR8]](i32), [[LSHR9]](i32), [[LSHR10]](i32), [[LSHR11]](i32), [[LSHR12]](i32), [[LSHR13]](i32), [[LSHR14]](i32), [[LSHR15]](i32), [[LSHR16]](i32), [[LSHR17]](i32), [[LSHR18]](i32), [[LSHR19]](i32), [[LSHR20]](i32), [[LSHR21]](i32), [[LSHR22]](i32), [[LSHR23]](i32), [[LSHR24]](i32), [[LSHR25]](i32), [[LSHR26]](i32), [[LSHR27]](i32), [[LSHR28]](i32), [[LSHR29]](i32), [[LSHR30]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(<32 x i1>) = G_TRUNC [[BUILD_VECTOR]](<32 x i32>)
    ; SI-NEXT: $vgpr0 = COPY [[TRUNC]](<32 x i1>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v32s1_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; CI-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CI-HSA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; CI-HSA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 6
    ; CI-HSA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; CI-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; CI-HSA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; CI-HSA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C7]](i32)
    ; CI-HSA-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 9
    ; CI-HSA-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C8]](i32)
    ; CI-HSA-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
    ; CI-HSA-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C9]](i32)
    ; CI-HSA-NEXT: [[C10:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; CI-HSA-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C10]](i32)
    ; CI-HSA-NEXT: [[C11:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CI-HSA-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C11]](i32)
    ; CI-HSA-NEXT: [[C12:%[0-9]+]]:_(i32) = G_CONSTANT i32 13
    ; CI-HSA-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C12]](i32)
    ; CI-HSA-NEXT: [[C13:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; CI-HSA-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C13]](i32)
    ; CI-HSA-NEXT: [[C14:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; CI-HSA-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C14]](i32)
    ; CI-HSA-NEXT: [[C15:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C15]](i32)
    ; CI-HSA-NEXT: [[C16:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; CI-HSA-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C16]](i32)
    ; CI-HSA-NEXT: [[C17:%[0-9]+]]:_(i32) = G_CONSTANT i32 18
    ; CI-HSA-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C17]](i32)
    ; CI-HSA-NEXT: [[C18:%[0-9]+]]:_(i32) = G_CONSTANT i32 19
    ; CI-HSA-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C18]](i32)
    ; CI-HSA-NEXT: [[C19:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CI-HSA-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C19]](i32)
    ; CI-HSA-NEXT: [[C20:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; CI-HSA-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C20]](i32)
    ; CI-HSA-NEXT: [[C21:%[0-9]+]]:_(i32) = G_CONSTANT i32 22
    ; CI-HSA-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C21]](i32)
    ; CI-HSA-NEXT: [[C22:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; CI-HSA-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C22]](i32)
    ; CI-HSA-NEXT: [[C23:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-HSA-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C23]](i32)
    ; CI-HSA-NEXT: [[C24:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; CI-HSA-NEXT: [[LSHR24:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C24]](i32)
    ; CI-HSA-NEXT: [[C25:%[0-9]+]]:_(i32) = G_CONSTANT i32 26
    ; CI-HSA-NEXT: [[LSHR25:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C25]](i32)
    ; CI-HSA-NEXT: [[C26:%[0-9]+]]:_(i32) = G_CONSTANT i32 27
    ; CI-HSA-NEXT: [[LSHR26:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C26]](i32)
    ; CI-HSA-NEXT: [[C27:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CI-HSA-NEXT: [[LSHR27:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C27]](i32)
    ; CI-HSA-NEXT: [[C28:%[0-9]+]]:_(i32) = G_CONSTANT i32 29
    ; CI-HSA-NEXT: [[LSHR28:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C28]](i32)
    ; CI-HSA-NEXT: [[C29:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; CI-HSA-NEXT: [[LSHR29:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C29]](i32)
    ; CI-HSA-NEXT: [[C30:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CI-HSA-NEXT: [[LSHR30:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C30]](i32)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<32 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32), [[LSHR7]](i32), [[LSHR8]](i32), [[LSHR9]](i32), [[LSHR10]](i32), [[LSHR11]](i32), [[LSHR12]](i32), [[LSHR13]](i32), [[LSHR14]](i32), [[LSHR15]](i32), [[LSHR16]](i32), [[LSHR17]](i32), [[LSHR18]](i32), [[LSHR19]](i32), [[LSHR20]](i32), [[LSHR21]](i32), [[LSHR22]](i32), [[LSHR23]](i32), [[LSHR24]](i32), [[LSHR25]](i32), [[LSHR26]](i32), [[LSHR27]](i32), [[LSHR28]](i32), [[LSHR29]](i32), [[LSHR30]](i32)
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(<32 x i1>) = G_TRUNC [[BUILD_VECTOR]](<32 x i32>)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[TRUNC]](<32 x i1>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v32s1_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; CI-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CI-MESA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; CI-MESA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 6
    ; CI-MESA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; CI-MESA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; CI-MESA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C7]](i32)
    ; CI-MESA-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 9
    ; CI-MESA-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C8]](i32)
    ; CI-MESA-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
    ; CI-MESA-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C9]](i32)
    ; CI-MESA-NEXT: [[C10:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; CI-MESA-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C10]](i32)
    ; CI-MESA-NEXT: [[C11:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CI-MESA-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C11]](i32)
    ; CI-MESA-NEXT: [[C12:%[0-9]+]]:_(i32) = G_CONSTANT i32 13
    ; CI-MESA-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C12]](i32)
    ; CI-MESA-NEXT: [[C13:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; CI-MESA-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C13]](i32)
    ; CI-MESA-NEXT: [[C14:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; CI-MESA-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C14]](i32)
    ; CI-MESA-NEXT: [[C15:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C15]](i32)
    ; CI-MESA-NEXT: [[C16:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; CI-MESA-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C16]](i32)
    ; CI-MESA-NEXT: [[C17:%[0-9]+]]:_(i32) = G_CONSTANT i32 18
    ; CI-MESA-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C17]](i32)
    ; CI-MESA-NEXT: [[C18:%[0-9]+]]:_(i32) = G_CONSTANT i32 19
    ; CI-MESA-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C18]](i32)
    ; CI-MESA-NEXT: [[C19:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CI-MESA-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C19]](i32)
    ; CI-MESA-NEXT: [[C20:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; CI-MESA-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C20]](i32)
    ; CI-MESA-NEXT: [[C21:%[0-9]+]]:_(i32) = G_CONSTANT i32 22
    ; CI-MESA-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C21]](i32)
    ; CI-MESA-NEXT: [[C22:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; CI-MESA-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C22]](i32)
    ; CI-MESA-NEXT: [[C23:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-MESA-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C23]](i32)
    ; CI-MESA-NEXT: [[C24:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; CI-MESA-NEXT: [[LSHR24:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C24]](i32)
    ; CI-MESA-NEXT: [[C25:%[0-9]+]]:_(i32) = G_CONSTANT i32 26
    ; CI-MESA-NEXT: [[LSHR25:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C25]](i32)
    ; CI-MESA-NEXT: [[C26:%[0-9]+]]:_(i32) = G_CONSTANT i32 27
    ; CI-MESA-NEXT: [[LSHR26:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C26]](i32)
    ; CI-MESA-NEXT: [[C27:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CI-MESA-NEXT: [[LSHR27:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C27]](i32)
    ; CI-MESA-NEXT: [[C28:%[0-9]+]]:_(i32) = G_CONSTANT i32 29
    ; CI-MESA-NEXT: [[LSHR28:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C28]](i32)
    ; CI-MESA-NEXT: [[C29:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; CI-MESA-NEXT: [[LSHR29:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C29]](i32)
    ; CI-MESA-NEXT: [[C30:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CI-MESA-NEXT: [[LSHR30:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C30]](i32)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<32 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32), [[LSHR7]](i32), [[LSHR8]](i32), [[LSHR9]](i32), [[LSHR10]](i32), [[LSHR11]](i32), [[LSHR12]](i32), [[LSHR13]](i32), [[LSHR14]](i32), [[LSHR15]](i32), [[LSHR16]](i32), [[LSHR17]](i32), [[LSHR18]](i32), [[LSHR19]](i32), [[LSHR20]](i32), [[LSHR21]](i32), [[LSHR22]](i32), [[LSHR23]](i32), [[LSHR24]](i32), [[LSHR25]](i32), [[LSHR26]](i32), [[LSHR27]](i32), [[LSHR28]](i32), [[LSHR29]](i32), [[LSHR30]](i32)
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(<32 x i1>) = G_TRUNC [[BUILD_VECTOR]](<32 x i32>)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[TRUNC]](<32 x i1>)
    ;
    ; VI-LABEL: name: test_load_global_v32s1_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 6
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; VI-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C7]](i32)
    ; VI-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 9
    ; VI-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C8]](i32)
    ; VI-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
    ; VI-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C9]](i32)
    ; VI-NEXT: [[C10:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; VI-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C10]](i32)
    ; VI-NEXT: [[C11:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; VI-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C11]](i32)
    ; VI-NEXT: [[C12:%[0-9]+]]:_(i32) = G_CONSTANT i32 13
    ; VI-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C12]](i32)
    ; VI-NEXT: [[C13:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; VI-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C13]](i32)
    ; VI-NEXT: [[C14:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; VI-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C14]](i32)
    ; VI-NEXT: [[C15:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C15]](i32)
    ; VI-NEXT: [[C16:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; VI-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C16]](i32)
    ; VI-NEXT: [[C17:%[0-9]+]]:_(i32) = G_CONSTANT i32 18
    ; VI-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C17]](i32)
    ; VI-NEXT: [[C18:%[0-9]+]]:_(i32) = G_CONSTANT i32 19
    ; VI-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C18]](i32)
    ; VI-NEXT: [[C19:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; VI-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C19]](i32)
    ; VI-NEXT: [[C20:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; VI-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C20]](i32)
    ; VI-NEXT: [[C21:%[0-9]+]]:_(i32) = G_CONSTANT i32 22
    ; VI-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C21]](i32)
    ; VI-NEXT: [[C22:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; VI-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C22]](i32)
    ; VI-NEXT: [[C23:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; VI-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C23]](i32)
    ; VI-NEXT: [[C24:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; VI-NEXT: [[LSHR24:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C24]](i32)
    ; VI-NEXT: [[C25:%[0-9]+]]:_(i32) = G_CONSTANT i32 26
    ; VI-NEXT: [[LSHR25:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C25]](i32)
    ; VI-NEXT: [[C26:%[0-9]+]]:_(i32) = G_CONSTANT i32 27
    ; VI-NEXT: [[LSHR26:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C26]](i32)
    ; VI-NEXT: [[C27:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; VI-NEXT: [[LSHR27:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C27]](i32)
    ; VI-NEXT: [[C28:%[0-9]+]]:_(i32) = G_CONSTANT i32 29
    ; VI-NEXT: [[LSHR28:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C28]](i32)
    ; VI-NEXT: [[C29:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; VI-NEXT: [[LSHR29:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C29]](i32)
    ; VI-NEXT: [[C30:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; VI-NEXT: [[LSHR30:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C30]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<32 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32), [[LSHR7]](i32), [[LSHR8]](i32), [[LSHR9]](i32), [[LSHR10]](i32), [[LSHR11]](i32), [[LSHR12]](i32), [[LSHR13]](i32), [[LSHR14]](i32), [[LSHR15]](i32), [[LSHR16]](i32), [[LSHR17]](i32), [[LSHR18]](i32), [[LSHR19]](i32), [[LSHR20]](i32), [[LSHR21]](i32), [[LSHR22]](i32), [[LSHR23]](i32), [[LSHR24]](i32), [[LSHR25]](i32), [[LSHR26]](i32), [[LSHR27]](i32), [[LSHR28]](i32), [[LSHR29]](i32), [[LSHR30]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(<32 x i1>) = G_TRUNC [[BUILD_VECTOR]](<32 x i32>)
    ; VI-NEXT: $vgpr0 = COPY [[TRUNC]](<32 x i1>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v32s1_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; GFX9-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; GFX9-HSA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; GFX9-HSA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; GFX9-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 6
    ; GFX9-HSA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; GFX9-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; GFX9-HSA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; GFX9-HSA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C7]](i32)
    ; GFX9-HSA-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 9
    ; GFX9-HSA-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C8]](i32)
    ; GFX9-HSA-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
    ; GFX9-HSA-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C9]](i32)
    ; GFX9-HSA-NEXT: [[C10:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; GFX9-HSA-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C10]](i32)
    ; GFX9-HSA-NEXT: [[C11:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; GFX9-HSA-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C11]](i32)
    ; GFX9-HSA-NEXT: [[C12:%[0-9]+]]:_(i32) = G_CONSTANT i32 13
    ; GFX9-HSA-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C12]](i32)
    ; GFX9-HSA-NEXT: [[C13:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; GFX9-HSA-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C13]](i32)
    ; GFX9-HSA-NEXT: [[C14:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; GFX9-HSA-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C14]](i32)
    ; GFX9-HSA-NEXT: [[C15:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C15]](i32)
    ; GFX9-HSA-NEXT: [[C16:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; GFX9-HSA-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C16]](i32)
    ; GFX9-HSA-NEXT: [[C17:%[0-9]+]]:_(i32) = G_CONSTANT i32 18
    ; GFX9-HSA-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C17]](i32)
    ; GFX9-HSA-NEXT: [[C18:%[0-9]+]]:_(i32) = G_CONSTANT i32 19
    ; GFX9-HSA-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C18]](i32)
    ; GFX9-HSA-NEXT: [[C19:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; GFX9-HSA-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C19]](i32)
    ; GFX9-HSA-NEXT: [[C20:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; GFX9-HSA-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C20]](i32)
    ; GFX9-HSA-NEXT: [[C21:%[0-9]+]]:_(i32) = G_CONSTANT i32 22
    ; GFX9-HSA-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C21]](i32)
    ; GFX9-HSA-NEXT: [[C22:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; GFX9-HSA-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C22]](i32)
    ; GFX9-HSA-NEXT: [[C23:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-HSA-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C23]](i32)
    ; GFX9-HSA-NEXT: [[C24:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; GFX9-HSA-NEXT: [[LSHR24:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C24]](i32)
    ; GFX9-HSA-NEXT: [[C25:%[0-9]+]]:_(i32) = G_CONSTANT i32 26
    ; GFX9-HSA-NEXT: [[LSHR25:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C25]](i32)
    ; GFX9-HSA-NEXT: [[C26:%[0-9]+]]:_(i32) = G_CONSTANT i32 27
    ; GFX9-HSA-NEXT: [[LSHR26:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C26]](i32)
    ; GFX9-HSA-NEXT: [[C27:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; GFX9-HSA-NEXT: [[LSHR27:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C27]](i32)
    ; GFX9-HSA-NEXT: [[C28:%[0-9]+]]:_(i32) = G_CONSTANT i32 29
    ; GFX9-HSA-NEXT: [[LSHR28:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C28]](i32)
    ; GFX9-HSA-NEXT: [[C29:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; GFX9-HSA-NEXT: [[LSHR29:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C29]](i32)
    ; GFX9-HSA-NEXT: [[C30:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-HSA-NEXT: [[LSHR30:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C30]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR10]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR12]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR13]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR14]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC16:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR15]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC17:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR16]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC18:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR17]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC19:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR18]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC20:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR19]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC21:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR20]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC22:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR21]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC23:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR22]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC24:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR23]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC25:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR24]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC26:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR25]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC27:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR26]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC28:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR27]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC29:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR28]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC30:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR29]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC31:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR30]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR4:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC8]](i16), [[TRUNC9]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR5:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC10]](i16), [[TRUNC11]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR6:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC12]](i16), [[TRUNC13]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR7:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC14]](i16), [[TRUNC15]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR8:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC16]](i16), [[TRUNC17]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR9:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC18]](i16), [[TRUNC19]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR10:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC20]](i16), [[TRUNC21]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR11:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC22]](i16), [[TRUNC23]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR12:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC24]](i16), [[TRUNC25]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR13:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC26]](i16), [[TRUNC27]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR14:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC28]](i16), [[TRUNC29]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR15:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC30]](i16), [[TRUNC31]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>), [[BUILD_VECTOR3]](<2 x i16>), [[BUILD_VECTOR4]](<2 x i16>), [[BUILD_VECTOR5]](<2 x i16>), [[BUILD_VECTOR6]](<2 x i16>), [[BUILD_VECTOR7]](<2 x i16>), [[BUILD_VECTOR8]](<2 x i16>), [[BUILD_VECTOR9]](<2 x i16>), [[BUILD_VECTOR10]](<2 x i16>), [[BUILD_VECTOR11]](<2 x i16>), [[BUILD_VECTOR12]](<2 x i16>), [[BUILD_VECTOR13]](<2 x i16>), [[BUILD_VECTOR14]](<2 x i16>), [[BUILD_VECTOR15]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC32:%[0-9]+]]:_(<32 x i1>) = G_TRUNC [[CONCAT_VECTORS]](<32 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[TRUNC32]](<32 x i1>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v32s1_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 3
    ; GFX9-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; GFX9-MESA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 5
    ; GFX9-MESA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 6
    ; GFX9-MESA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 7
    ; GFX9-MESA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; GFX9-MESA-NEXT: [[C7:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C7]](i32)
    ; GFX9-MESA-NEXT: [[C8:%[0-9]+]]:_(i32) = G_CONSTANT i32 9
    ; GFX9-MESA-NEXT: [[LSHR8:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C8]](i32)
    ; GFX9-MESA-NEXT: [[C9:%[0-9]+]]:_(i32) = G_CONSTANT i32 10
    ; GFX9-MESA-NEXT: [[LSHR9:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C9]](i32)
    ; GFX9-MESA-NEXT: [[C10:%[0-9]+]]:_(i32) = G_CONSTANT i32 11
    ; GFX9-MESA-NEXT: [[LSHR10:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C10]](i32)
    ; GFX9-MESA-NEXT: [[C11:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; GFX9-MESA-NEXT: [[LSHR11:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C11]](i32)
    ; GFX9-MESA-NEXT: [[C12:%[0-9]+]]:_(i32) = G_CONSTANT i32 13
    ; GFX9-MESA-NEXT: [[LSHR12:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C12]](i32)
    ; GFX9-MESA-NEXT: [[C13:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; GFX9-MESA-NEXT: [[LSHR13:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C13]](i32)
    ; GFX9-MESA-NEXT: [[C14:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; GFX9-MESA-NEXT: [[LSHR14:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C14]](i32)
    ; GFX9-MESA-NEXT: [[C15:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR15:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C15]](i32)
    ; GFX9-MESA-NEXT: [[C16:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; GFX9-MESA-NEXT: [[LSHR16:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C16]](i32)
    ; GFX9-MESA-NEXT: [[C17:%[0-9]+]]:_(i32) = G_CONSTANT i32 18
    ; GFX9-MESA-NEXT: [[LSHR17:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C17]](i32)
    ; GFX9-MESA-NEXT: [[C18:%[0-9]+]]:_(i32) = G_CONSTANT i32 19
    ; GFX9-MESA-NEXT: [[LSHR18:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C18]](i32)
    ; GFX9-MESA-NEXT: [[C19:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; GFX9-MESA-NEXT: [[LSHR19:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C19]](i32)
    ; GFX9-MESA-NEXT: [[C20:%[0-9]+]]:_(i32) = G_CONSTANT i32 21
    ; GFX9-MESA-NEXT: [[LSHR20:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C20]](i32)
    ; GFX9-MESA-NEXT: [[C21:%[0-9]+]]:_(i32) = G_CONSTANT i32 22
    ; GFX9-MESA-NEXT: [[LSHR21:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C21]](i32)
    ; GFX9-MESA-NEXT: [[C22:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; GFX9-MESA-NEXT: [[LSHR22:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C22]](i32)
    ; GFX9-MESA-NEXT: [[C23:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-MESA-NEXT: [[LSHR23:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C23]](i32)
    ; GFX9-MESA-NEXT: [[C24:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; GFX9-MESA-NEXT: [[LSHR24:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C24]](i32)
    ; GFX9-MESA-NEXT: [[C25:%[0-9]+]]:_(i32) = G_CONSTANT i32 26
    ; GFX9-MESA-NEXT: [[LSHR25:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C25]](i32)
    ; GFX9-MESA-NEXT: [[C26:%[0-9]+]]:_(i32) = G_CONSTANT i32 27
    ; GFX9-MESA-NEXT: [[LSHR26:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C26]](i32)
    ; GFX9-MESA-NEXT: [[C27:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; GFX9-MESA-NEXT: [[LSHR27:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C27]](i32)
    ; GFX9-MESA-NEXT: [[C28:%[0-9]+]]:_(i32) = G_CONSTANT i32 29
    ; GFX9-MESA-NEXT: [[LSHR28:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C28]](i32)
    ; GFX9-MESA-NEXT: [[C29:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; GFX9-MESA-NEXT: [[LSHR29:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C29]](i32)
    ; GFX9-MESA-NEXT: [[C30:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-MESA-NEXT: [[LSHR30:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C30]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR7]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR8]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR9]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR10]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC12:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR11]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC13:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR12]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC14:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR13]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC15:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR14]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC16:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR15]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC17:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR16]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC18:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR17]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC19:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR18]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC20:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR19]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC21:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR20]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC22:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR21]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC23:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR22]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC24:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR23]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC25:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR24]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC26:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR25]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC27:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR26]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC28:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR27]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC29:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR28]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC30:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR29]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC31:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR30]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR4:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC8]](i16), [[TRUNC9]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR5:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC10]](i16), [[TRUNC11]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR6:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC12]](i16), [[TRUNC13]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR7:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC14]](i16), [[TRUNC15]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR8:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC16]](i16), [[TRUNC17]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR9:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC18]](i16), [[TRUNC19]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR10:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC20]](i16), [[TRUNC21]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR11:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC22]](i16), [[TRUNC23]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR12:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC24]](i16), [[TRUNC25]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR13:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC26]](i16), [[TRUNC27]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR14:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC28]](i16), [[TRUNC29]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR15:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC30]](i16), [[TRUNC31]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<32 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>), [[BUILD_VECTOR3]](<2 x i16>), [[BUILD_VECTOR4]](<2 x i16>), [[BUILD_VECTOR5]](<2 x i16>), [[BUILD_VECTOR6]](<2 x i16>), [[BUILD_VECTOR7]](<2 x i16>), [[BUILD_VECTOR8]](<2 x i16>), [[BUILD_VECTOR9]](<2 x i16>), [[BUILD_VECTOR10]](<2 x i16>), [[BUILD_VECTOR11]](<2 x i16>), [[BUILD_VECTOR12]](<2 x i16>), [[BUILD_VECTOR13]](<2 x i16>), [[BUILD_VECTOR14]](<2 x i16>), [[BUILD_VECTOR15]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC32:%[0-9]+]]:_(<32 x i1>) = G_TRUNC [[CONCAT_VECTORS]](<32 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[TRUNC32]](<32 x i1>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<32 x i1>) = G_LOAD %0(p1) :: (load (<32 x i1>), addrspace 1)
    $vgpr0 = COPY %1(<32 x i1>)
...

---
name: test_load_global_v8s4_align4
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_v8s4_align4
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; SI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(<8 x i4>) = G_TRUNC [[BUILD_VECTOR]](<8 x i32>)
    ; SI-NEXT: $vgpr0 = COPY [[TRUNC]](<8 x i4>)
    ;
    ; CI-HSA-LABEL: name: test_load_global_v8s4_align4
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CI-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CI-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-HSA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; CI-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CI-HSA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; CI-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-HSA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; CI-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CI-HSA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; CI-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32)
    ; CI-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(<8 x i4>) = G_TRUNC [[BUILD_VECTOR]](<8 x i32>)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[TRUNC]](<8 x i4>)
    ;
    ; CI-MESA-LABEL: name: test_load_global_v8s4_align4
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; CI-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; CI-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; CI-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; CI-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; CI-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; CI-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; CI-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CI-MESA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; CI-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; CI-MESA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; CI-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; CI-MESA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; CI-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; CI-MESA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; CI-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32)
    ; CI-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(<8 x i4>) = G_TRUNC [[BUILD_VECTOR]](<8 x i32>)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[TRUNC]](<8 x i4>)
    ;
    ; VI-LABEL: name: test_load_global_v8s4_align4
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; VI-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<8 x i32>) = G_BUILD_VECTOR [[LOAD]](i32), [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32), [[LSHR3]](i32), [[LSHR4]](i32), [[LSHR5]](i32), [[LSHR6]](i32)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(<8 x i4>) = G_TRUNC [[BUILD_VECTOR]](<8 x i32>)
    ; VI-NEXT: $vgpr0 = COPY [[TRUNC]](<8 x i4>)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_v8s4_align4
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-HSA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; GFX9-HSA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-HSA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-HSA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-HSA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; GFX9-HSA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-HSA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-HSA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; GFX9-HSA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; GFX9-HSA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; GFX9-HSA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-HSA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; GFX9-HSA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; GFX9-HSA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX9-HSA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-HSA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-HSA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>), [[BUILD_VECTOR3]](<2 x i16>)
    ; GFX9-HSA-NEXT: [[TRUNC8:%[0-9]+]]:_(<8 x i4>) = G_TRUNC [[CONCAT_VECTORS]](<8 x i16>)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[TRUNC8]](<8 x i4>)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_v8s4_align4
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i32), addrspace 1)
    ; GFX9-MESA-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 4
    ; GFX9-MESA-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C]](i32)
    ; GFX9-MESA-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-MESA-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C1]](i32)
    ; GFX9-MESA-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 12
    ; GFX9-MESA-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C2]](i32)
    ; GFX9-MESA-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-MESA-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C3]](i32)
    ; GFX9-MESA-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 20
    ; GFX9-MESA-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C4]](i32)
    ; GFX9-MESA-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-MESA-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C5]](i32)
    ; GFX9-MESA-NEXT: [[C6:%[0-9]+]]:_(i32) = G_CONSTANT i32 28
    ; GFX9-MESA-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[LOAD]], [[C6]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[LOAD]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX9-MESA-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR6]](i32)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC]](i16), [[TRUNC1]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC4]](i16), [[TRUNC5]](i16)
    ; GFX9-MESA-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC6]](i16), [[TRUNC7]](i16)
    ; GFX9-MESA-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<8 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>), [[BUILD_VECTOR3]](<2 x i16>)
    ; GFX9-MESA-NEXT: [[TRUNC8:%[0-9]+]]:_(<8 x i4>) = G_TRUNC [[CONCAT_VECTORS]](<8 x i16>)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[TRUNC8]](<8 x i4>)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(<8 x i4>) = G_LOAD %0(p1) :: (load (<8 x i4>), addrspace 1)
    $vgpr0 = COPY %1(<8 x i4>)
...

# Make sure there's no crash on very high alignments
---
name: test_load_global_s32_align536870912
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_load_global_s32_align536870912
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 536870912, addrspace 1)
    ; SI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-HSA-LABEL: name: test_load_global_s32_align536870912
    ; CI-HSA: liveins: $vgpr0_vgpr1
    ; CI-HSA-NEXT: {{  $}}
    ; CI-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 536870912, addrspace 1)
    ; CI-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; CI-MESA-LABEL: name: test_load_global_s32_align536870912
    ; CI-MESA: liveins: $vgpr0_vgpr1
    ; CI-MESA-NEXT: {{  $}}
    ; CI-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; CI-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 536870912, addrspace 1)
    ; CI-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; VI-LABEL: name: test_load_global_s32_align536870912
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 536870912, addrspace 1)
    ; VI-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-HSA-LABEL: name: test_load_global_s32_align536870912
    ; GFX9-HSA: liveins: $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: {{  $}}
    ; GFX9-HSA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-HSA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 536870912, addrspace 1)
    ; GFX9-HSA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    ;
    ; GFX9-MESA-LABEL: name: test_load_global_s32_align536870912
    ; GFX9-MESA: liveins: $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: {{  $}}
    ; GFX9-MESA-NEXT: [[COPY:%[0-9]+]]:_(p1) = COPY $vgpr0_vgpr1
    ; GFX9-MESA-NEXT: [[LOAD:%[0-9]+]]:_(i32) = G_LOAD [[COPY]](p1) :: (load (i16), align 536870912, addrspace 1)
    ; GFX9-MESA-NEXT: $vgpr0 = COPY [[LOAD]](i32)
    %0:_(p1) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_LOAD %0(p1) :: (load (i16), align 536870912, addrspace 1)
    $vgpr0 = COPY %1(i32)

...
