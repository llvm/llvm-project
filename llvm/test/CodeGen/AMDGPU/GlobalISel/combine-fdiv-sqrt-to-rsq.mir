# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck -check-prefix=GCN %s

---
name:            rsq_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f16) = contract G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %rsq:_(f16) = contract G_FDIV %one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            rsq_f16_missing_contract0
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f16_missing_contract0
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f16) = G_FCONSTANT half 0xH3C00
    ; GCN-NEXT: %rsq:_(f16) = contract G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = G_FSQRT %2
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %rsq:_(f16) = contract G_FDIV %one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            rsq_f16_missing_contract1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f16_missing_contract1
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f16) = G_FCONSTANT half 0xH3C00
    ; GCN-NEXT: %rsq:_(f16) = G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %rsq:_(f16) = G_FDIV %one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            neg_rsq_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_f16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f16) = contract G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; GCN-NEXT: %rsq:_(f16) = contract G_FNEG [[INT]]
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %neg_one:_(f16) = G_FCONSTANT half 0xHBC00
    %rsq:_(f16) = contract G_FDIV %neg_one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            neg_rsq_f16_missing_contract0
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_f16_missing_contract0
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %neg_one:_(f16) = G_FCONSTANT half 0xHBC00
    ; GCN-NEXT: %rsq:_(f16) = contract G_FDIV %neg_one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = G_FSQRT %2
    %neg_one:_(f16) = G_FCONSTANT half 0xHBC00
    %rsq:_(f16) = contract G_FDIV %neg_one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            neg_rsq_f16_missing_contract1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_f16_missing_contract1
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %neg_one:_(f16) = G_FCONSTANT half 0xHBC00
    ; GCN-NEXT: %rsq:_(f16) = G_FDIV %neg_one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %neg_one:_(f16) = G_FCONSTANT half 0xHBC00
    %rsq:_(f16) = G_FDIV %neg_one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            rsq_f16_multi_use
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f16_multi_use
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f16) = G_FCONSTANT half 0xH3C00
    ; GCN-NEXT: %rsq:_(f16) = contract G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    ; GCN-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST %sqrt(f16)
    ; GCN-NEXT: S_ENDPGM 0, implicit [[BITCAST2]](i16)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %rsq:_(f16) = contract G_FDIV %one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)
    %8:_(i16) = G_BITCAST %sqrt(f16)
    S_ENDPGM 0, implicit %8(i16)

...

---
name:            rsq_f16_multi_use_missing_contract0
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f16_multi_use_missing_contract0
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f16) = G_FCONSTANT half 0xH3C00
    ; GCN-NEXT: %rsq:_(f16) = contract G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    ; GCN-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST %sqrt(f16)
    ; GCN-NEXT: S_ENDPGM 0, implicit [[BITCAST2]](i16)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = G_FSQRT %2
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %rsq:_(f16) = contract G_FDIV %one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)
    %8:_(i16) = G_BITCAST %sqrt(f16)
    S_ENDPGM 0, implicit %8(i16)

...

---
name:            rsq_f16_multi_use_missing_contract1
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f16_multi_use_missing_contract1
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %sqrt:_(f16) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f16) = G_FCONSTANT half 0xH3C00
    ; GCN-NEXT: %rsq:_(f16) = G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    ; GCN-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST %sqrt(f16)
    ; GCN-NEXT: S_ENDPGM 0, implicit [[BITCAST2]](i16)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %one:_(f16) = G_FCONSTANT half 0xH3C00
    %rsq:_(f16) = G_FDIV %one, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)
    %8:_(i16) = G_BITCAST %sqrt(f16)
    S_ENDPGM 0, implicit %8(i16)

...

---
name:            rsq_f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: %x:_(i32) = COPY $vgpr0
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %x(i32)
    ; GCN-NEXT: %sqrt:_(f32) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GCN-NEXT: %rsq:_(f32) = contract G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %rsq(f32)
    ; GCN-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %x:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %x(i32)
    %sqrt:_(f32) = contract G_FSQRT %1
    %one:_(f32) = G_FCONSTANT float 1.000000e+00
    %rsq:_(f32) = contract G_FDIV %one, %sqrt
    %5:_(i32) = G_BITCAST %rsq(f32)
    $vgpr0 = COPY %5(i32)

...

---
name:            neg_rsq_f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_f32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: %x:_(i32) = COPY $vgpr0
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %x(i32)
    ; GCN-NEXT: %sqrt:_(f32) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %neg_one:_(f32) = G_FCONSTANT float -1.000000e+00
    ; GCN-NEXT: %rsq:_(f32) = contract G_FDIV %neg_one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %rsq(f32)
    ; GCN-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %x:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %x(i32)
    %sqrt:_(f32) = contract G_FSQRT %1
    %neg_one:_(f32) = G_FCONSTANT float -1.000000e+00
    %rsq:_(f32) = contract G_FDIV %neg_one, %sqrt
    %5:_(i32) = G_BITCAST %rsq(f32)
    $vgpr0 = COPY %5(i32)

...

---
name:            afn_rsq_f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: afn_rsq_f32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: %x:_(i32) = COPY $vgpr0
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %x(i32)
    ; GCN-NEXT: %sqrt:_(f32) = contract afn G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GCN-NEXT: %rsq:_(f32) = contract afn G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %rsq(f32)
    ; GCN-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %x:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %x(i32)
    %sqrt:_(f32) = contract afn G_FSQRT %1
    %one:_(f32) = G_FCONSTANT float 1.000000e+00
    %rsq:_(f32) = contract afn G_FDIV %one, %sqrt
    %5:_(i32) = G_BITCAST %rsq(f32)
    $vgpr0 = COPY %5(i32)

...

---
name:            afn_rsq_f32_multi_use
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: afn_rsq_f32_multi_use
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: %x:_(i32) = COPY $vgpr0
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %x(i32)
    ; GCN-NEXT: %sqrt:_(f32) = contract afn G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GCN-NEXT: %rsq:_(f32) = contract afn G_FDIV %one, %sqrt
    ; GCN-NEXT: %ret:_(f32) = G_FSUB %sqrt, %rsq
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %ret(f32)
    ; GCN-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %x:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %x(i32)
    %sqrt:_(f32) = contract afn G_FSQRT %1
    %one:_(f32) = G_FCONSTANT float 1.000000e+00
    %rsq:_(f32) = contract afn G_FDIV %one, %sqrt
    %ret:_(f32) = G_FSUB %sqrt, %rsq
    %6:_(i32) = G_BITCAST %ret(f32)
    $vgpr0 = COPY %6(i32)

...

---
name:            afn_neg_rsq_f32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: afn_neg_rsq_f32
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: %x:_(i32) = COPY $vgpr0
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST %x(i32)
    ; GCN-NEXT: %sqrt:_(f32) = contract afn G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %neg_one:_(f32) = G_FCONSTANT float -1.000000e+00
    ; GCN-NEXT: %rsq:_(f32) = contract afn G_FDIV %neg_one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST %rsq(f32)
    ; GCN-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %x:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %x(i32)
    %sqrt:_(f32) = contract afn G_FSQRT %1
    %neg_one:_(f32) = G_FCONSTANT float -1.000000e+00
    %rsq:_(f32) = contract afn G_FDIV %neg_one, %sqrt
    %5:_(i32) = G_BITCAST %rsq(f32)
    $vgpr0 = COPY %5(i32)

...


---
name:            rsq_f64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_f64
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i64) = G_ANYEXT [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %x(i64)
    ; GCN-NEXT: %sqrt:_(f64) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GCN-NEXT: %rsq:_(f64) = contract G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST %rsq(f64)
    ; GCN-NEXT: %ext:_(i32) = G_TRUNC [[BITCAST1]](i64)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i64) = G_ANYEXT %0(i32)
    %2:_(f64) = G_BITCAST %x(i64)
    %sqrt:_(f64) = contract G_FSQRT %2
    %one:_(f64) = G_FCONSTANT double 1.000000e+00
    %rsq:_(f64) = contract G_FDIV %one, %sqrt
    %6:_(i64) = G_BITCAST %rsq(f64)
    %ext:_(i32) = G_TRUNC %6(i64)
    $vgpr0 = COPY %ext(i32)

...

---
name:            neg_rsq_f64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_f64
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i64) = G_ANYEXT [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %x(i64)
    ; GCN-NEXT: %sqrt:_(f64) = contract G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %neg_one:_(f64) = G_FCONSTANT double -1.000000e+00
    ; GCN-NEXT: %rsq:_(f64) = contract G_FDIV %neg_one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST %rsq(f64)
    ; GCN-NEXT: %ext:_(i32) = G_TRUNC [[BITCAST1]](i64)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i64) = G_ANYEXT %0(i32)
    %2:_(f64) = G_BITCAST %x(i64)
    %sqrt:_(f64) = contract G_FSQRT %2
    %neg_one:_(f64) = G_FCONSTANT double -1.000000e+00
    %rsq:_(f64) = contract G_FDIV %neg_one, %sqrt
    %6:_(i64) = G_BITCAST %rsq(f64)
    %ext:_(i32) = G_TRUNC %6(i64)
    $vgpr0 = COPY %ext(i32)

...

---
name:            afn_rsq_f64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: afn_rsq_f64
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i64) = G_ANYEXT [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %x(i64)
    ; GCN-NEXT: %sqrt:_(f64) = contract afn G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %one:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GCN-NEXT: %rsq:_(f64) = contract afn G_FDIV %one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST %rsq(f64)
    ; GCN-NEXT: %ext:_(i32) = G_TRUNC [[BITCAST1]](i64)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i64) = G_ANYEXT %0(i32)
    %2:_(f64) = G_BITCAST %x(i64)
    %sqrt:_(f64) = contract afn G_FSQRT %2
    %one:_(f64) = G_FCONSTANT double 1.000000e+00
    %rsq:_(f64) = contract afn G_FDIV %one, %sqrt
    %6:_(i64) = G_BITCAST %rsq(f64)
    %ext:_(i32) = G_TRUNC %6(i64)
    $vgpr0 = COPY %ext(i32)

...

---
name:            afn_neg_rsq_f64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: afn_neg_rsq_f64
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i64) = G_ANYEXT [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST %x(i64)
    ; GCN-NEXT: %sqrt:_(f64) = contract afn G_FSQRT [[BITCAST]]
    ; GCN-NEXT: %neg_one:_(f64) = G_FCONSTANT double -1.000000e+00
    ; GCN-NEXT: %rsq:_(f64) = contract afn G_FDIV %neg_one, %sqrt
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST %rsq(f64)
    ; GCN-NEXT: %ext:_(i32) = G_TRUNC [[BITCAST1]](i64)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i64) = G_ANYEXT %0(i32)
    %2:_(f64) = G_BITCAST %x(i64)
    %sqrt:_(f64) = contract afn G_FSQRT %2
    %neg_one:_(f64) = G_FCONSTANT double -1.000000e+00
    %rsq:_(f64) = contract afn G_FDIV %neg_one, %sqrt
    %6:_(i64) = G_BITCAST %rsq(f64)
    %ext:_(i32) = G_TRUNC %6(i64)
    $vgpr0 = COPY %ext(i32)

...


---
name:            rsq_fract_num_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_fract_num_f16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %fract:_(f16) = G_FCONSTANT half 0xH3800
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f16) = contract G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; GCN-NEXT: %rsq:_(f16) = contract G_FMUL [[INT]], %fract
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %fract:_(f16) = G_FCONSTANT half 0xH3800
    %rsq:_(f16) = contract G_FDIV %fract, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            neg_rsq_fract_num_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_fract_num_f16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %neg_fract:_(f16) = G_FCONSTANT half 0xHB800
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f16) = contract G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; GCN-NEXT: %rsq:_(f16) = contract G_FMUL [[INT]], %neg_fract
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %neg_fract:_(f16) = G_FCONSTANT half 0xHB800
    %rsq:_(f16) = contract G_FDIV %neg_fract, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)


...

---
name:            rsq_large_num_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: rsq_large_num_f16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %ten:_(f16) = G_FCONSTANT half 0xH4900
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f16) = contract G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; GCN-NEXT: %rsq:_(f16) = contract G_FMUL [[INT]], %ten
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %ten:_(f16) = G_FCONSTANT half 0xH4900
    %rsq:_(f16) = contract G_FDIV %ten, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...

---
name:            neg_rsq_large_num_f16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; GCN-LABEL: name: neg_rsq_large_num_f16
    ; GCN: liveins: $vgpr0
    ; GCN-NEXT: {{  $}}
    ; GCN-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GCN-NEXT: %x:_(i16) = G_TRUNC [[COPY]](i32)
    ; GCN-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %x(i16)
    ; GCN-NEXT: %neg_ten:_(f16) = G_FCONSTANT half 0xHC900
    ; GCN-NEXT: [[INT:%[0-9]+]]:_(f16) = contract G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; GCN-NEXT: %rsq:_(f16) = contract G_FMUL [[INT]], %neg_ten
    ; GCN-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST %rsq(f16)
    ; GCN-NEXT: %ext:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GCN-NEXT: $vgpr0 = COPY %ext(i32)
    %0:_(i32) = COPY $vgpr0
    %x:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %x(i16)
    %sqrt:_(f16) = contract G_FSQRT %2
    %neg_ten:_(f16) = G_FCONSTANT half 0xHC900
    %rsq:_(f16) = contract G_FDIV %neg_ten, %sqrt
    %6:_(i16) = G_BITCAST %rsq(f16)
    %ext:_(i32) = G_ANYEXT %6(i16)
    $vgpr0 = COPY %ext(i32)

...
