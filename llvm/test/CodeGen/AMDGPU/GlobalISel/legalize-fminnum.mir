# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=SI  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=VI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9  %s

---
name: test_fminnum_s32_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s32_ieee_mode_on
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s32_ieee_mode_on
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s32_ieee_mode_on
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMINNUM %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fminnum_s32_ieee_mode_off
machineFunctionInfo:
  mode:
    ieee: false
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s32_ieee_mode_off
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FMINNUM:%[0-9]+]]:_(f32) = G_FMINNUM [[BITCAST]], [[BITCAST1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s32_ieee_mode_off
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FMINNUM:%[0-9]+]]:_(f32) = G_FMINNUM [[BITCAST]], [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s32_ieee_mode_off
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FMINNUM:%[0-9]+]]:_(f32) = G_FMINNUM [[BITCAST]], [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMINNUM %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fminnum_s32_nnan
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s32_nnan
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = nnan G_FMINNUM_IEEE [[BITCAST]], [[BITCAST1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s32_nnan
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = nnan G_FMINNUM_IEEE [[BITCAST]], [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s32_nnan
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = nnan G_FMINNUM_IEEE [[BITCAST]], [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = nnan G_FMINNUM %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...


---
name: test_fminnum_s32_nnan_lhs
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s32_nnan_lhs
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = nnan COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s32_nnan_lhs
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = nnan COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s32_nnan_lhs
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = nnan COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = nnan COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMINNUM %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...


---
name: test_fminnum_s32_nnan_rhs
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s32_nnan_rhs
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = nnan COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s32_nnan_rhs
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = nnan COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s32_nnan_rhs
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = nnan COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = nnan COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMINNUM %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fminnum_s32_nnan_lhs_rhs
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s32_nnan_lhs_rhs
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = nnan COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = nnan COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s32_nnan_lhs_rhs
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = nnan COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = nnan COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s32_nnan_lhs_rhs
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = nnan COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = nnan COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = nnan COPY $vgpr0
    %1:_(i32) = nnan COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMINNUM %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fminnum_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fminnum_s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f64) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FMINNUM_IEEE]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; VI-LABEL: name: test_fminnum_s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f64) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FMINNUM_IEEE]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; GFX9-LABEL: name: test_fminnum_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f64) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f64) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FMINNUM_IEEE]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(f64) = G_FMINNUM %2, %3
    %5:_(i64) = G_BITCAST %4(f64)
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_fminnum_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f16) = G_BITCAST %3(i16)
    %6:_(f16) = G_FMINNUM %4, %5
    %7:_(i16) = G_BITCAST %6(f16)
    %8:_(i32) = G_ANYEXT %7(i16)
    $vgpr0 = COPY %8(i32)
...

---
name: test_fminnum_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fminnum_v2s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV2]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV1]]
    ; SI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV3]]
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMINNUM_IEEE]](f32), [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_fminnum_v2s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV2]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV1]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV3]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMINNUM_IEEE]](f32), [[FMINNUM_IEEE1]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fminnum_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV2]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV1]]
    ; GFX9-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[UV3]]
    ; GFX9-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMINNUM_IEEE]](f32), [[FMINNUM_IEEE1]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = G_FMINNUM %2, %3
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_fminnum_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_v2s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST12]](<2 x f16>)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST13]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fminnum_v2s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %16(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %22(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %17(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %23(i16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST2]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST3]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST4]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST5]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE]](f16)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST12]](<2 x f16>)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST13]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fminnum_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FMINNUM_IEEE]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %3:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %4:_(<2 x f16>) = G_FMINNUM %2, %3
    %5:_(<2 x i16>) = G_BITCAST %4(<2 x f16>)
    $vgpr0 = COPY %5(<2 x i16>)
...

---
name: test_fminnum_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-LABEL: name: test_fminnum_v3s16
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; SI-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC4]](i16)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC5]](i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST7]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST8]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST9]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE2:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT4]], [[FPEXT5]]
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE2]](f32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST13]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST14]](i16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST10]], [[C1]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST11]], [[C1]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR2]], [[SHL2]]
    ; SI-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST15]](<2 x i16>), [[BITCAST16]](<2 x i16>), [[BITCAST17]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_fminnum_v3s16
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; VI-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC4]](i16)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC5]](i16)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST2]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST7]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST3]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST8]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[FCANONICALIZE4:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST4]]
    ; VI-NEXT: [[FCANONICALIZE5:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST9]]
    ; VI-NEXT: [[FMINNUM_IEEE2:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE4]], [[FCANONICALIZE5]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE]](f16)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE1]](f16)
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE2]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST13]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST14]](i16)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST10]], [[C1]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST11]], [[C1]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR2]], [[SHL2]]
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST15]](<2 x i16>), [[BITCAST16]](<2 x i16>), [[BITCAST17]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-LABEL: name: test_fminnum_v3s16
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC4]](i16)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC5]](i16)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(f16) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[BITCAST2]](f16), [[BITCAST3]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[BITCAST4]](f16), [[DEF]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[BITCAST7]](f16), [[BITCAST8]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR3:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[BITCAST9]](f16), [[DEF]](f16)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BUILD_VECTOR2]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BUILD_VECTOR1]]
    ; GFX9-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BUILD_VECTOR3]]
    ; GFX9-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %86(i16)
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %92(i16)
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %87(i16)
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FMINNUM_IEEE1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX9-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FMINNUM_IEEE]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[DEF1:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF1]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX9-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST10]](f16)
    ; GFX9-NEXT: [[BITCAST20:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST12]](f16)
    ; GFX9-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[BITCAST11]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR4:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[BITCAST19]](i16), [[BITCAST20]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR5:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[BITCAST21]](i16), [[TRUNC9]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR6:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC10]](i16), [[TRUNC11]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR4]](<2 x i16>), [[BUILD_VECTOR5]](<2 x i16>), [[BUILD_VECTOR6]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x i16>), %3:_(<3 x i16>) = G_UNMERGE_VALUES %0(<6 x i16>)
    %4:_(<3 x i16>), %5:_(<3 x i16>) = G_UNMERGE_VALUES %1(<6 x i16>)
    %6:_(<3 x f16>) = G_BITCAST %2(<3 x i16>)
    %7:_(<3 x f16>) = G_BITCAST %4(<3 x i16>)
    %8:_(<3 x f16>) = G_FMINNUM %6, %7
    %9:_(<3 x i16>) = G_IMPLICIT_DEF
    %10:_(<3 x i16>) = G_BITCAST %8(<3 x f16>)
    %11:_(<6 x i16>) = G_CONCAT_VECTORS %10(<3 x i16>), %9(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %11(<6 x i16>)

...

---
name: test_fminnum_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fminnum_v4s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; SI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; SI-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; SI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; SI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST10]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE2:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT4]], [[FPEXT5]]
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE2]](f32)
    ; SI-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; SI-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE3:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT6]], [[FPEXT7]]
    ; SI-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE3]](f32)
    ; SI-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST19]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST20]](<2 x f16>), [[BITCAST23]](<2 x f16>)
    ; SI-NEXT: [[BITCAST24:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST24]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_fminnum_v4s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %32(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %38(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %33(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %39(i16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %44(i16)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %49(i16)
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST2]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST10]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST4]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST12]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[FCANONICALIZE4:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST3]]
    ; VI-NEXT: [[FCANONICALIZE5:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST11]]
    ; VI-NEXT: [[FMINNUM_IEEE2:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE4]], [[FCANONICALIZE5]]
    ; VI-NEXT: [[FCANONICALIZE6:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST5]]
    ; VI-NEXT: [[FCANONICALIZE7:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST13]]
    ; VI-NEXT: [[FMINNUM_IEEE3:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE6]], [[FCANONICALIZE7]]
    ; VI-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE]](f16)
    ; VI-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST19]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE2]](f16)
    ; VI-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE3]](f16)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST20]](<2 x f16>), [[BITCAST23]](<2 x f16>)
    ; VI-NEXT: [[BITCAST24:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST24]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_fminnum_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[UV]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[UV2]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[UV1]]
    ; GFX9-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[UV3]]
    ; GFX9-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[FMINNUM_IEEE]](<2 x f16>), [[FMINNUM_IEEE1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %3:_(<4 x f16>) = G_BITCAST %1(<4 x i16>)
    %4:_(<4 x f16>) = G_FMINNUM %2, %3
    %5:_(<4 x i16>) = G_BITCAST %4(<4 x f16>)
    $vgpr0_vgpr1 = COPY %5(<4 x i16>)
...

---
name: test_fminnum_with_fminnum_argument_s32_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fminnum_with_fminnum_argument_s32_ieee_mode_on
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; SI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FMINNUM_IEEE]]
    ; SI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_with_fminnum_argument_s32_ieee_mode_on
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FMINNUM_IEEE]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_with_fminnum_argument_s32_ieee_mode_on
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FMINNUM_IEEE]]
    ; GFX9-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; GFX9-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMINNUM %2, %3
    %5:_(i32) = COPY $vgpr2
    %6:_(f32) = G_BITCAST %5(i32)
    %7:_(f32) = G_FMINNUM %4, %6
    %8:_(i32) = G_BITCAST %7(f32)
    $vgpr0 = COPY %8(i32)
...

---
name: test_fminnum_with_nonNaN_fminnum_argument_s32_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_with_nonNaN_fminnum_argument_s32_ieee_mode_on
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMINNUM_IEEE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_with_nonNaN_fminnum_argument_s32_ieee_mode_on
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMINNUM_IEEE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_with_nonNaN_fminnum_argument_s32_ieee_mode_on
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMINNUM_IEEE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE1]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_FCONSTANT float 0.000000e+00
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FMINNUM %2, %1
    %4:_(i32) = COPY $vgpr1
    %5:_(f32) = G_BITCAST %4(i32)
    %6:_(f32) = G_FMINNUM %3, %5
    %7:_(i32) = G_BITCAST %6(f32)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fminnum_with_fmaxnum_argument_s32_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; SI-LABEL: name: test_fminnum_with_fmaxnum_argument_s32_ieee_mode_on
    ; SI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; SI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FMAXNUM_IEEE]]
    ; SI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_with_fmaxnum_argument_s32_ieee_mode_on
    ; VI: liveins: $vgpr0, $vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FMAXNUM_IEEE]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_with_fmaxnum_argument_s32_ieee_mode_on
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[FMAXNUM_IEEE]]
    ; GFX9-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST2]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FMAXNUM %2, %3
    %5:_(i32) = COPY $vgpr2
    %6:_(f32) = G_BITCAST %5(i32)
    %7:_(f32) = G_FMINNUM %4, %6
    %8:_(i32) = G_BITCAST %7(f32)
    $vgpr0 = COPY %8(i32)
...

---
name: test_fminnum_with_nonNaN_fmaxnum_argument_s32_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_with_nonNaN_fmaxnum_argument_s32_ieee_mode_on
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMAXNUM_IEEE]], [[FCANONICALIZE1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_with_nonNaN_fmaxnum_argument_s32_ieee_mode_on
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMAXNUM_IEEE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_with_nonNaN_fmaxnum_argument_s32_ieee_mode_on
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FMAXNUM_IEEE:%[0-9]+]]:_(f32) = G_FMAXNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST1]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FMAXNUM_IEEE]], [[FCANONICALIZE1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_FCONSTANT float 0.000000e+00
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FMAXNUM %2, %1
    %4:_(i32) = COPY $vgpr1
    %5:_(f32) = G_BITCAST %4(i32)
    %6:_(f32) = G_FMINNUM %3, %5
    %7:_(i32) = G_BITCAST %6(f32)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fminnum_with_constant_argument_s32_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fminnum_with_constant_argument_s32_ieee_mode_on
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; VI-LABEL: name: test_fminnum_with_constant_argument_s32_ieee_mode_on
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX9-LABEL: name: test_fminnum_with_constant_argument_s32_ieee_mode_on
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f32) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[C]]
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FMINNUM_IEEE]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_FCONSTANT float 0.000000e+00
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_FMINNUM %2, %1
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...

---
name: test_fminnum_with_constant_vector_argument_v2s16_ieee_mode_on
machineFunctionInfo:
  mode:
    ieee: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fminnum_with_constant_vector_argument_v2s16_ieee_mode_on
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C1]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[C]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[C]](f16)
    ; SI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f32) = G_FMINNUM_IEEE [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMINNUM_IEEE1]](f32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST5]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST6]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST7]](<2 x f16>)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST8]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fminnum_with_constant_vector_argument_v2s16_ieee_mode_on
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %16(i16)
    ; VI-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %17(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C1]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[FCANONICALIZE1:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[C]]
    ; VI-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[FCANONICALIZE1]]
    ; VI-NEXT: [[FCANONICALIZE2:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[BITCAST2]]
    ; VI-NEXT: [[FCANONICALIZE3:%[0-9]+]]:_(f16) = G_FCANONICALIZE [[C]]
    ; VI-NEXT: [[FMINNUM_IEEE1:%[0-9]+]]:_(f16) = G_FMINNUM_IEEE [[FCANONICALIZE2]], [[FCANONICALIZE3]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE]](f16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i16) = G_BITCAST [[FMINNUM_IEEE1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST5]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST6]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST7]](<2 x f16>)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST8]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fminnum_with_constant_vector_argument_v2s16_ieee_mode_on
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH0000
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[C]](f16), [[C]](f16)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[FCANONICALIZE:%[0-9]+]]:_(<2 x f16>) = G_FCANONICALIZE [[BITCAST]]
    ; GFX9-NEXT: [[FMINNUM_IEEE:%[0-9]+]]:_(<2 x f16>) = G_FMINNUM_IEEE [[FCANONICALIZE]], [[BUILD_VECTOR]]
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FMINNUM_IEEE]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(f16) = G_FCONSTANT half 0xH0000
    %2:_(<2 x f16>) = G_BUILD_VECTOR %1(f16), %1(f16)
    %3:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %4:_(<2 x f16>) = G_FMINNUM %3, %2
    %5:_(<2 x i16>) = G_BITCAST %4(<2 x f16>)
    $vgpr0 = COPY %5(<2 x i16>)
...
