# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=SI  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=VI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9  %s

---
name: test_fsub_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fsub_s32
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[BITCAST1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FSUB]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fsub_s32
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FSUB]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fsub_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FSUB]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FSUB %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...
---
name: test_fsub_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fsub_s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[BITCAST]], [[FNEG]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FADD]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; VI-LABEL: name: test_fsub_s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[BITCAST]], [[FNEG]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FADD]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; GFX9-LABEL: name: test_fsub_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[BITCAST]], [[FNEG]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FADD]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(f64) = G_FSUB %2, %3
    %5:_(i64) = G_BITCAST %4(f64)
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_fsub_s64_fmf
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fsub_s64_fmf
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f64) = nnan nsz G_FADD [[BITCAST]], [[FNEG]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FADD]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; VI-LABEL: name: test_fsub_s64_fmf
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f64) = nnan nsz G_FADD [[BITCAST]], [[FNEG]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FADD]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; GFX9-LABEL: name: test_fsub_s64_fmf
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f64) = nnan nsz G_FADD [[BITCAST]], [[FNEG]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FADD]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(f64) = nnan nsz G_FSUB %2, %3
    %5:_(i64) = G_BITCAST %4(f64)
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_fsub_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fsub_s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST1]]
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fsub_s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST]], [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fsub_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST]], [[BITCAST1]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f16) = G_BITCAST %3(i16)
    %6:_(f16) = G_FSUB %4, %5
    %7:_(i16) = G_BITCAST %6(f16)
    %8:_(i32) = G_ANYEXT %7(i16)
    $vgpr0 = COPY %8(i32)

...

---
name: test_fsub_v2s32
body: |
  bb.0.entry:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fsub_v2s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[UV2]]
    ; SI-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[UV3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_fsub_v2s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[UV2]]
    ; VI-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[UV3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fsub_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[UV2]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = G_FSUB %2, %3
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_fsub_v2s32_flags
body: |
  bb.0.entry:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fsub_v2s32_flags
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nnan G_FSUB [[UV]], [[UV2]]
    ; SI-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = nnan G_FSUB [[UV1]], [[UV3]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_fsub_v2s32_flags
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nnan G_FSUB [[UV]], [[UV2]]
    ; VI-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = nnan G_FSUB [[UV1]], [[UV3]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fsub_v2s32_flags
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nnan G_FSUB [[UV]], [[UV2]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = nnan G_FSUB [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = nnan G_FSUB %2, %3
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_fsub_v3s32
body: |
  bb.0.entry:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5

    ; SI-LABEL: name: test_fsub_v3s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; SI-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; SI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[UV3]]
    ; SI-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[UV4]]
    ; SI-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[UV2]], [[UV5]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32), [[FSUB2]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_fsub_v3s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; VI-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[UV3]]
    ; VI-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[UV4]]
    ; VI-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[UV2]], [[UV5]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32), [[FSUB2]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_fsub_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[UV3]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[UV4]]
    ; GFX9-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[UV2]], [[UV5]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FSUB]](f32), [[FSUB1]](f32), [[FSUB2]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %3:_(<3 x f32>) = G_BITCAST %1(<3 x i32>)
    %4:_(<3 x f32>) = G_FSUB %2, %3
    %5:_(<3 x i32>) = G_BITCAST %4(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %5(<3 x i32>)
...

---
name: test_fsub_v2s64
body: |
  bb.0.entry:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7

    ; SI-LABEL: name: test_fsub_v2s64
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[UV2]]
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[UV]], [[FNEG]]
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[UV3]]
    ; SI-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[UV1]], [[FNEG1]]
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FADD]](f64), [[FADD1]](f64)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_fsub_v2s64
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[UV2]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[UV]], [[FNEG]]
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[UV3]]
    ; VI-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[UV1]], [[FNEG1]]
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FADD]](f64), [[FADD1]](f64)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_fsub_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[UV2]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f64) = G_FADD [[UV]], [[FNEG]]
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[UV3]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f64) = G_FADD [[UV1]], [[FNEG1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FADD]](f64), [[FADD1]](f64)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<2 x f64>) = G_BITCAST %0(<2 x i64>)
    %3:_(<2 x f64>) = G_BITCAST %1(<2 x i64>)
    %4:_(<2 x f64>) = G_FSUB %2, %3
    %5:_(<2 x i64>) = G_BITCAST %4(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<2 x i64>)
...

---
name: test_fsub_v2s16
body: |
  bb.0.entry:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fsub_v2s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(<2 x f16>) = G_FNEG [[BITCAST1]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %20(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %26(i16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FNEG]](<2 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; SI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST12]](<2 x f16>)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST13]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fsub_v2s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(<2 x f16>) = G_FNEG [[BITCAST1]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %13(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %14(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %20(i16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FNEG]](<2 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[BITCAST2]], [[BITCAST3]]
    ; VI-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[BITCAST4]], [[BITCAST5]]
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST12]](<2 x f16>)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST13]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fsub_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(<2 x f16>) = G_FNEG [[BITCAST1]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(<2 x f16>) = G_FADD [[BITCAST]], [[FNEG]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[FADD]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %3:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %4:_(<2 x f16>) = G_FSUB %2, %3
    %5:_(<2 x i16>) = G_BITCAST %4(<2 x f16>)
    $vgpr0 = COPY %5(<2 x i16>)
...

---
name: test_fsub_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-LABEL: name: test_fsub_v3s16
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; SI-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC4]](i16)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC5]](i16)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST7]]
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST8]]
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG1]](f16)
    ; SI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; SI-NEXT: [[FNEG2:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST9]]
    ; SI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG2]](f16)
    ; SI-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT4]], [[FPEXT5]]
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST13]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST14]](i16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST10]], [[C1]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST11]], [[C1]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR2]], [[SHL2]]
    ; SI-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST15]](<2 x i16>), [[BITCAST16]](<2 x i16>), [[BITCAST17]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_fsub_v3s16
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; VI-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC4]](i16)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC5]](i16)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[BITCAST7]]
    ; VI-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[BITCAST8]]
    ; VI-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[BITCAST9]]
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB]](f16)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB1]](f16)
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB2]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST12]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST13]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST14]](i16)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST10]], [[C1]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST11]], [[C1]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR2]], [[SHL2]]
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST15]](<2 x i16>), [[BITCAST16]](<2 x i16>), [[BITCAST17]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-LABEL: name: test_fsub_v3s16
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC4]](i16)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC5]](i16)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[BITCAST7]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[BITCAST8]]
    ; GFX9-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[BITCAST9]]
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST11]](i32)
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB]](f16)
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB1]](f16)
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB2]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[BITCAST12]](i16), [[BITCAST13]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[BITCAST14]](i16), [[TRUNC6]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC7]](i16), [[TRUNC8]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x i16>), %3:_(<3 x i16>) = G_UNMERGE_VALUES %0(<6 x i16>)
    %4:_(<3 x i16>), %5:_(<3 x i16>) = G_UNMERGE_VALUES %1(<6 x i16>)
    %6:_(<3 x f16>) = G_BITCAST %2(<3 x i16>)
    %7:_(<3 x f16>) = G_BITCAST %4(<3 x i16>)
    %8:_(<3 x f16>) = G_FSUB %6, %7
    %9:_(<3 x i16>) = G_IMPLICIT_DEF
    %10:_(<3 x i16>) = G_BITCAST %8(<3 x f16>)
    %11:_(<6 x i16>) = G_CONCAT_VECTORS %10(<3 x i16>), %9(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %11(<6 x i16>)

...

---
name: test_fsub_v4s16
body: |
  bb.0.entry:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fsub_v4s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %40(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %46(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %51(i16)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %56(i16)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; SI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; SI-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; SI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; SI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST10]]
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG]](f16)
    ; SI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT]], [[FPEXT1]]
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST12]]
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG1]](f16)
    ; SI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; SI-NEXT: [[FNEG2:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST11]]
    ; SI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG2]](f16)
    ; SI-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT4]], [[FPEXT5]]
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; SI-NEXT: [[FNEG3:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST13]]
    ; SI-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; SI-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[FNEG3]](f16)
    ; SI-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FPEXT6]], [[FPEXT7]]
    ; SI-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; SI-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST19]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST20]](<2 x f16>), [[BITCAST23]](<2 x f16>)
    ; SI-NEXT: [[BITCAST24:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST24]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_fsub_v4s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %31(i16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %40(i16)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; VI-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[BITCAST10]]
    ; VI-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[BITCAST12]]
    ; VI-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[BITCAST11]]
    ; VI-NEXT: [[FSUB3:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST5]], [[BITCAST13]]
    ; VI-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB]](f16)
    ; VI-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB1]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST19]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB2]](f16)
    ; VI-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FSUB3]](f16)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST20]](<2 x f16>), [[BITCAST23]](<2 x f16>)
    ; VI-NEXT: [[BITCAST24:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST24]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_fsub_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %31(i16)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %40(i16)
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST2]], [[BITCAST10]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST4]], [[BITCAST12]]
    ; GFX9-NEXT: [[FSUB2:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST3]], [[BITCAST11]]
    ; GFX9-NEXT: [[FSUB3:%[0-9]+]]:_(f16) = G_FSUB [[BITCAST5]], [[BITCAST13]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FSUB]](f16), [[FSUB1]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FSUB2]](f16), [[FSUB3]](f16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST18:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST18]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %3:_(<4 x f16>) = G_BITCAST %1(<4 x i16>)
    %4:_(<4 x f16>) = G_FSUB %2, %3
    %5:_(<4 x i16>) = G_BITCAST %4(<4 x f16>)
    $vgpr0_vgpr1 = COPY %5(<4 x i16>)
...
