# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer %s -o - | FileCheck %s --check-prefix=GFX8
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx906 -O0 -run-pass=legalizer %s -o - | FileCheck %s --check-prefix=GFX9

---
name: test_smulo_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulo_s32
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[COPY]], [[COPY1]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[COPY]], [[COPY1]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH]](i32), [[ASHR]]
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[MUL]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_smulo_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[COPY]], [[COPY1]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[COPY]], [[COPY1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH]](i32), [[ASHR]]
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[MUL]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32), %3:_(i1) = G_SMULO %0, %1
    %4:_(i32) = G_SEXT %3(i1)
    $vgpr0 = COPY %2(i32)
    $vgpr1 = COPY %4(i32)
...

---
name: test_smulo_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX8-LABEL: name: test_smulo_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[UV]], [[UV2]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV]], [[UV2]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH]](i32), [[ASHR]]
    ; GFX8-NEXT: [[SMULH1:%[0-9]+]]:_(i32) = G_SMULH [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV3]]
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[MUL1]], [[C]](i32)
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH1]](i32), [[ASHR1]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[MUL]](i32), [[MUL1]](i32)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX8-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ; GFX8-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_smulo_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[UV]], [[UV2]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[UV]], [[UV2]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH]](i32), [[ASHR]]
    ; GFX9-NEXT: [[SMULH1:%[0-9]+]]:_(i32) = G_SMULH [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UV1]], [[UV3]]
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[MUL1]], [[C]](i32)
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH1]](i32), [[ASHR1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[MUL]](i32), [[MUL1]](i32)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG]](i32), [[SEXT_INREG1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ; GFX9-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>), %3:_(<2 x i1>) = G_SMULO %0, %1
    %4:_(<2 x i32>) = G_SEXT %3(<2 x i1>)
    $vgpr0_vgpr1 = COPY %2(<2 x i32>)
    $vgpr2_vgpr3 = COPY %4(<2 x i32>)
...

---
name: test_smulo_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulo_s16
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 16
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 16
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT_INREG3]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_smulo_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 16
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 16
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT_INREG3]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16), %5:_(i1) = G_SMULO %2, %3
    %6:_(i32) = G_SEXT %4(i16)
    %7:_(i32) = G_SEXT %5(i1)
    $vgpr0 = COPY %6(i32)
    $vgpr1 = COPY %7(i32)
...

---
name: test_smulo_s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulo_s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT_INREG3]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_smulo_s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT_INREG3]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8) = G_TRUNC %0(i32)
    %3:_(i8) = G_TRUNC %1(i32)
    %4:_(i8), %5:_(i1) = G_SMULO %2, %3
    %6:_(i32) = G_SEXT %4(i8)
    %7:_(i32) = G_SEXT %5(i1)
    $vgpr0 = COPY %6(i32)
    $vgpr1 = COPY %7(i32)
...

---
name: test_smulo_v2s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-LABEL: name: test_smulo_v2s16
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV]], 16
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV2]], 16
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV1]], 16
    ; GFX8-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV3]], 16
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG3]], [[SEXT_INREG4]]
    ; GFX8-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL1]], 16
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[SEXT_INREG5]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: [[SEXT_INREG6:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX8-NEXT: [[SEXT_INREG7:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG6]](i32), [[SEXT_INREG7]](i32)
    ; GFX8-NEXT: [[SEXT_INREG8:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX8-NEXT: [[SEXT_INREG9:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL1]], 16
    ; GFX8-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG8]](i32), [[SEXT_INREG9]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    ; GFX8-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_smulo_v2s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV]], 16
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV2]], 16
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV1]], 16
    ; GFX9-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[UV3]], 16
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG3]], [[SEXT_INREG4]]
    ; GFX9-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL1]], 16
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[SEXT_INREG5]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[SEXT_INREG6:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT]], 1
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: [[SEXT_INREG7:%[0-9]+]]:_(i32) = G_SEXT_INREG [[ANYEXT1]], 1
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG6]](i32), [[SEXT_INREG7]](i32)
    ; GFX9-NEXT: [[SEXT_INREG8:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 16
    ; GFX9-NEXT: [[SEXT_INREG9:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL1]], 16
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SEXT_INREG8]](i32), [[SEXT_INREG9]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR1]](<2 x i32>)
    ; GFX9-NEXT: $vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i16>) = G_TRUNC %0(<2 x i32>)
    %3:_(<2 x i16>) = G_TRUNC %1(<2 x i32>)
    %4:_(<2 x i16>), %5:_(<2 x i1>) = G_SMULO %2, %3
    %6:_(<2 x i32>) = G_SEXT %5(<2 x i1>)
    %7:_(<2 x i32>) = G_SEXT %4(<2 x i16>)
    $vgpr0_vgpr1 = COPY %7(<2 x i32>)
    $vgpr2_vgpr3 = COPY %6(<2 x i32>)
...


---
name: test_smulo_v2s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX8-LABEL: name: test_smulo_v2s8
    ; GFX8: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX8-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY2]], 8
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX8-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY3]], 8
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG3]], [[SEXT_INREG4]]
    ; GFX8-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL1]], 8
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[SEXT_INREG5]]
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[MUL]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[MUL1]](i32)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ANYEXT1]](i32)
    ; GFX8-NEXT: $vgpr2 = COPY [[ANYEXT2]](i32)
    ;
    ; GFX9-LABEL: name: test_smulo_v2s8
    ; GFX9: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY2]], 8
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX9-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY3]], 8
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG3]], [[SEXT_INREG4]]
    ; GFX9-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL1]], 8
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL1]](i32), [[SEXT_INREG5]]
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[MUL]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[MUL1]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[AND1]], [[C1]](i16)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND]], [[SHL]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP1]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ANYEXT1]](i32)
    ; GFX9-NEXT: $vgpr2 = COPY [[ANYEXT2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %4:_(i8) = G_TRUNC %0(i32)
    %5:_(i8) = G_TRUNC %1(i32)
    %6:_(i8) = G_TRUNC %2(i32)
    %7:_(i8) = G_TRUNC %3(i32)
    %8:_(<2 x i8>) = G_BUILD_VECTOR %4(i8), %5(i8)
    %9:_(<2 x i8>) = G_BUILD_VECTOR %6(i8), %7(i8)
    %10:_(<2 x i8>), %11:_(<2 x i1>) = G_SMULO %8, %9
    %12:_(<2 x i32>) = G_SEXT %11(<2 x i1>)
    %13:_(i8), %14:_(i8) = G_UNMERGE_VALUES %10(<2 x i8>)
    %15:_(i1), %16:_(i1) = G_UNMERGE_VALUES %11(<2 x i1>)
    %17:_(i16) = G_MERGE_VALUES %13(i8), %14(i8)
    %18:_(i32) = G_ANYEXT %17(i16)
    %19:_(i32) = G_ANYEXT %15(i1)
    %20:_(i32) = G_ANYEXT %16(i1)
    $vgpr0 = COPY %18(i32)
    $vgpr1 = COPY %19(i32)
    $vgpr2 = COPY %20(i32)
...

---
name: test_smulo_v4s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; GFX8-LABEL: name: test_smulo_v4s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX8-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C2]](i32)
    ; GFX8-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX8-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C1]](i32)
    ; GFX8-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C2]](i32)
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR]], 8
    ; GFX8-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR3]], 8
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG3]], [[SEXT_INREG4]]
    ; GFX8-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR1]], 8
    ; GFX8-NEXT: [[SEXT_INREG6:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR4]], 8
    ; GFX8-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG5]], [[SEXT_INREG6]]
    ; GFX8-NEXT: [[SEXT_INREG7:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR2]], 8
    ; GFX8-NEXT: [[SEXT_INREG8:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR5]], 8
    ; GFX8-NEXT: [[MUL3:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG7]], [[SEXT_INREG8]]
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C3]]
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C3]]
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL2]], [[C3]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C1]](i32)
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL3]], [[C3]]
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_smulo_v4s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C1]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C2]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX9-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C1]](i32)
    ; GFX9-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C2]](i32)
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 8
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 8
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 8
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR]], 8
    ; GFX9-NEXT: [[SEXT_INREG4:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR3]], 8
    ; GFX9-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG3]], [[SEXT_INREG4]]
    ; GFX9-NEXT: [[SEXT_INREG5:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR1]], 8
    ; GFX9-NEXT: [[SEXT_INREG6:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR4]], 8
    ; GFX9-NEXT: [[MUL2:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG5]], [[SEXT_INREG6]]
    ; GFX9-NEXT: [[SEXT_INREG7:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR2]], 8
    ; GFX9-NEXT: [[SEXT_INREG8:%[0-9]+]]:_(i32) = G_SEXT_INREG [[LSHR5]], 8
    ; GFX9-NEXT: [[MUL3:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG7]], [[SEXT_INREG8]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[MUL]], [[C3]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[MUL1]], [[C3]]
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND]], [[SHL]]
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[MUL2]], [[C3]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C1]](i32)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[OR]], [[SHL1]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[MUL3]], [[C3]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C2]](i32)
    ; GFX9-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[OR1]], [[SHL2]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ICMP]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[OR2]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8), %3:_(i8), %4:_(i8), %5:_(i8) = G_UNMERGE_VALUES %0(i32)
    %6:_(i8), %7:_(i8), %8:_(i8), %9:_(i8) = G_UNMERGE_VALUES %1(i32)
    %10:_(<4 x i8>) = G_BUILD_VECTOR %2(i8), %3(i8), %4(i8), %5(i8)
    %11:_(<4 x i8>) = G_BUILD_VECTOR %6(i8), %7(i8), %8(i8), %9(i8)
    %12:_(<4 x i8>), %13:_(<4 x i1>) = G_SMULO %10, %11
    %14:_(i8), %15:_(i8), %16:_(i8), %17:_(i8) = G_UNMERGE_VALUES %12(<4 x i8>)
    %18:_(i1), %19:_(i1), %20:_(i1), %21:_(i1) = G_UNMERGE_VALUES %13(<4 x i1>)
    %22:_(i32) = G_MERGE_VALUES %14(i8), %15(i8), %16(i8), %17(i8)
    %23:_(i32) = G_ANYEXT %18(i1)
    $vgpr0 = COPY %22(i32)
    $vgpr1 = COPY %23(i32)
...
---
name: test_smulo_s24
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX8-LABEL: name: test_smulo_s24
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 24
    ; GFX8-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 24
    ; GFX8-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH]](i32), [[ASHR]]
    ; GFX8-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 24
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i1) = G_OR [[ICMP]], [[ICMP1]]
    ; GFX8-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 24
    ; GFX8-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[OR]](i1)
    ; GFX8-NEXT: $vgpr0 = COPY [[SEXT_INREG3]](i32)
    ; GFX8-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_smulo_s24
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SEXT_INREG:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY]], 24
    ; GFX9-NEXT: [[SEXT_INREG1:%[0-9]+]]:_(i32) = G_SEXT_INREG [[COPY1]], 24
    ; GFX9-NEXT: [[SMULH:%[0-9]+]]:_(i32) = G_SMULH [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SEXT_INREG]], [[SEXT_INREG1]]
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[MUL]], [[C]](i32)
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SMULH]](i32), [[ASHR]]
    ; GFX9-NEXT: [[SEXT_INREG2:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 24
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[MUL]](i32), [[SEXT_INREG2]]
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i1) = G_OR [[ICMP]], [[ICMP1]]
    ; GFX9-NEXT: [[SEXT_INREG3:%[0-9]+]]:_(i32) = G_SEXT_INREG [[MUL]], 24
    ; GFX9-NEXT: [[SEXT:%[0-9]+]]:_(i32) = G_SEXT [[OR]](i1)
    ; GFX9-NEXT: $vgpr0 = COPY [[SEXT_INREG3]](i32)
    ; GFX9-NEXT: $vgpr1 = COPY [[SEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i24) = G_TRUNC %0(i32)
    %3:_(i24) = G_TRUNC %1(i32)
    %4:_(i24), %5:_(i1) = G_SMULO %2, %3
    %6:_(i32) = G_SEXT %4(i24)
    %7:_(i32) = G_SEXT %5(i1)
    $vgpr0 = COPY %6(i32)
    $vgpr1 = COPY %7(i32)
...
