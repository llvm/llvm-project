# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -global-isel -mtriple=amdgcn -mcpu=tahiti -verify-machineinstrs -run-pass=legalizer %s -o - | FileCheck %s --check-prefixes=GFX,GFX6
# RUN: llc -global-isel -mtriple=amdgcn -mcpu=fiji -verify-machineinstrs -run-pass=legalizer %s -o - | FileCheck %s --check-prefixes=GFX,GFX8

---
name:            rotl_i15
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; GFX6-LABEL: name: rotl_i15
    ; GFX6: liveins: $sgpr0, $sgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 14
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 32767
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C2]]
    ; GFX6-NEXT: [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[C1]](i32)
    ; GFX6-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(f32) = G_AMDGPU_RCP_IFLAG [[UITOFP]](f32)
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41EFFFFFC0000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[AMDGPU_RCP_IFLAG]], [[C3]]
    ; GFX6-NEXT: [[FPTOUI:%[0-9]+]]:_(i32) = G_FPTOUI [[FMUL]](f32)
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C4]], [[C1]]
    ; GFX6-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SUB]], [[FPTOUI]]
    ; GFX6-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[FPTOUI]], [[MUL]]
    ; GFX6-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[FPTOUI]], [[UMULH]]
    ; GFX6-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[ADD]]
    ; GFX6-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UMULH1]], [[C1]]
    ; GFX6-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[AND]], [[MUL1]]
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SUB1]](i32), [[C1]]
    ; GFX6-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C1]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[SUB2]], [[SUB1]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SELECT]](i32), [[C1]]
    ; GFX6-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[SELECT]], [[C1]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SUB3]], [[SELECT]]
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SELECT1]], [[C2]]
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[AND1]](i32)
    ; GFX6-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[C]], [[SELECT1]]
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C2]]
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[C5]](i32)
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[SUB4]], [[C2]]
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[AND3]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[LSHR1]]
    ; GFX6-NEXT: $sgpr0 = COPY [[OR]](i32)
    ;
    ; GFX8-LABEL: name: rotl_i15
    ; GFX8: liveins: $sgpr0, $sgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 15
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 32767
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C1]]
    ; GFX8-NEXT: [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[C]](i32)
    ; GFX8-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(f32) = G_AMDGPU_RCP_IFLAG [[UITOFP]](f32)
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41EFFFFFC0000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[AMDGPU_RCP_IFLAG]], [[C2]]
    ; GFX8-NEXT: [[FPTOUI:%[0-9]+]]:_(i32) = G_FPTOUI [[FMUL]](f32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C3]], [[C]]
    ; GFX8-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SUB]], [[FPTOUI]]
    ; GFX8-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[FPTOUI]], [[MUL]]
    ; GFX8-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[FPTOUI]], [[UMULH]]
    ; GFX8-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[ADD]]
    ; GFX8-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UMULH1]], [[C]]
    ; GFX8-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[AND]], [[MUL1]]
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SUB1]](i32), [[C]]
    ; GFX8-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[SUB2]], [[SUB1]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SELECT]](i32), [[C]]
    ; GFX8-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[SELECT]], [[C]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SUB3]], [[SELECT]]
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[SELECT1]](i32)
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C4]]
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[AND1]](i16)
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 14
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(i16) = COPY [[TRUNC]](i16)
    ; GFX8-NEXT: [[SUB4:%[0-9]+]]:_(i16) = G_SUB [[C5]], [[COPY2]]
    ; GFX8-NEXT: [[C6:%[0-9]+]]:_(i16) = G_CONSTANT i16 1
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C4]]
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[AND2]], [[C6]](i16)
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[SUB4]], [[C4]]
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i16) = G_LSHR [[LSHR]], [[AND3]](i16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SHL]](i16)
    ; GFX8-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR1]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ANYEXT]], [[ANYEXT1]]
    ; GFX8-NEXT: $sgpr0 = COPY [[OR]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i15) = G_TRUNC %0(i32)
    %2:_(i32) = COPY $sgpr1
    %3:_(i15) = G_TRUNC %2(i32)
    %4:_(i15) = G_ROTL %1, %3(i15)
    %5:_(i32) = G_ANYEXT %4(i15)
    $sgpr0 = COPY %5(i32)

...
---
name:            rotl_i16
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; GFX6-LABEL: name: rotl_i16
    ; GFX6: liveins: $sgpr0, $sgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C1]], [[COPY1]]
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SUB]](i32)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[AND]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[ZEXT]](i32)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[AND1]](i16)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C2]]
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[ZEXT1]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[TRUNC2]], [[TRUNC3]]
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX6-NEXT: $sgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: rotl_i16
    ; GFX8: liveins: $sgpr0, $sgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX8-NEXT: [[SUB:%[0-9]+]]:_(i16) = G_SUB [[C]], [[TRUNC1]]
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[AND]](i16)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[SUB]], [[C1]]
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[AND1]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[SHL]], [[LSHR]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX8-NEXT: $sgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i32) = COPY $sgpr1
    %3:_(i16) = G_TRUNC %2(i32)
    %4:_(i16) = G_ROTL %1, %3(i16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $sgpr0 = COPY %5(i32)

...
---
name:            rotl_i32
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; GFX-LABEL: name: rotl_i32
    ; GFX: liveins: $sgpr0, $sgpr1
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; GFX-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[COPY]], [[COPY]], [[SUB]](i32)
    ; GFX-NEXT: $sgpr0 = COPY [[FSHR]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = G_ROTL %0, %1(i32)
    $sgpr0 = COPY %2(i32)

...
---
name:            rotl_i31
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; GFX-LABEL: name: rotl_i31
    ; GFX: liveins: $sgpr0, $sgpr1
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 30
    ; GFX-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C2]]
    ; GFX-NEXT: [[UITOFP:%[0-9]+]]:_(f32) = G_UITOFP [[C1]](i32)
    ; GFX-NEXT: [[AMDGPU_RCP_IFLAG:%[0-9]+]]:_(f32) = G_AMDGPU_RCP_IFLAG [[UITOFP]](f32)
    ; GFX-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x41EFFFFFC0000000
    ; GFX-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[AMDGPU_RCP_IFLAG]], [[C3]]
    ; GFX-NEXT: [[FPTOUI:%[0-9]+]]:_(i32) = G_FPTOUI [[FMUL]](f32)
    ; GFX-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C4]], [[C1]]
    ; GFX-NEXT: [[MUL:%[0-9]+]]:_(i32) = G_MUL [[SUB]], [[FPTOUI]]
    ; GFX-NEXT: [[UMULH:%[0-9]+]]:_(i32) = G_UMULH [[FPTOUI]], [[MUL]]
    ; GFX-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[FPTOUI]], [[UMULH]]
    ; GFX-NEXT: [[UMULH1:%[0-9]+]]:_(i32) = G_UMULH [[AND]], [[ADD]]
    ; GFX-NEXT: [[MUL1:%[0-9]+]]:_(i32) = G_MUL [[UMULH1]], [[C1]]
    ; GFX-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[AND]], [[MUL1]]
    ; GFX-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SUB1]](i32), [[C1]]
    ; GFX-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C1]]
    ; GFX-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[SUB2]], [[SUB1]]
    ; GFX-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(uge), [[SELECT]](i32), [[C1]]
    ; GFX-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[SELECT]], [[C1]]
    ; GFX-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SUB3]], [[SELECT]]
    ; GFX-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[SELECT1]], [[C2]]
    ; GFX-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[AND1]](i32)
    ; GFX-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[C]], [[SELECT1]]
    ; GFX-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C2]]
    ; GFX-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND2]], [[C5]](i32)
    ; GFX-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[SUB4]], [[C2]]
    ; GFX-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[AND3]](i32)
    ; GFX-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[SHL]], [[LSHR1]]
    ; GFX-NEXT: $sgpr0 = COPY [[OR]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i31) = G_TRUNC %0(i32)
    %3:_(i31) = G_TRUNC %1(i32)
    %4:_(i31) = G_ROTL %2, %3(i31)
    %5:_(i32) = G_ANYEXT %4(i31)
    $sgpr0 = COPY %5(i32)

...
---
name:            rotl_i64
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0_sgpr1, $sgpr2_sgpr3

    ; GFX-LABEL: name: rotl_i64
    ; GFX: liveins: $sgpr0_sgpr1, $sgpr2_sgpr3
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $sgpr0_sgpr1
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $sgpr2_sgpr3
    ; GFX-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 63
    ; GFX-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[C]](i64)
    ; GFX-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; GFX-NEXT: [[USUBO:%[0-9]+]]:_(i32), [[USUBO1:%[0-9]+]]:_(i1) = G_USUBO [[UV]], [[UV2]]
    ; GFX-NEXT: [[USUBE:%[0-9]+]]:_(i32), [[USUBE1:%[0-9]+]]:_(i1) = G_USUBE [[UV1]], [[UV3]], [[USUBO1]]
    ; GFX-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[USUBO]](i32), [[USUBE]](i32)
    ; GFX-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[COPY1]], [[C1]]
    ; GFX-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[AND]](i64)
    ; GFX-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[TRUNC]](i32)
    ; GFX-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C1]]
    ; GFX-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[AND1]](i64)
    ; GFX-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[TRUNC1]](i32)
    ; GFX-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[SHL]], [[LSHR]]
    ; GFX-NEXT: $sgpr0_sgpr1 = COPY [[OR]](i64)
    %0:_(i64) = COPY $sgpr0_sgpr1
    %1:_(i64) = COPY $sgpr2_sgpr3
    %2:_(i64) = G_ROTL %0, %1(i64)
    $sgpr0_sgpr1 = COPY %2(i64)

...
---
name:            rotl_v4i32
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $sgpr4_sgpr5_sgpr6_sgpr7

    ; GFX-LABEL: name: rotl_v4i32
    ; GFX: liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $sgpr4_sgpr5_sgpr6_sgpr7
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $sgpr4_sgpr5_sgpr6_sgpr7
    ; GFX-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; GFX-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<4 x i32>)
    ; GFX-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV4]]
    ; GFX-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[UV]], [[UV]], [[SUB]](i32)
    ; GFX-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV5]]
    ; GFX-NEXT: [[FSHR1:%[0-9]+]]:_(i32) = G_FSHR [[UV1]], [[UV1]], [[SUB1]](i32)
    ; GFX-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV6]]
    ; GFX-NEXT: [[FSHR2:%[0-9]+]]:_(i32) = G_FSHR [[UV2]], [[UV2]], [[SUB2]](i32)
    ; GFX-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV7]]
    ; GFX-NEXT: [[FSHR3:%[0-9]+]]:_(i32) = G_FSHR [[UV3]], [[UV3]], [[SUB3]](i32)
    ; GFX-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[FSHR]](i32), [[FSHR1]](i32), [[FSHR2]](i32), [[FSHR3]](i32)
    ; GFX-NEXT: $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[BUILD_VECTOR]](<4 x i32>)
    %0:_(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    %1:_(<4 x i32>) = COPY $sgpr4_sgpr5_sgpr6_sgpr7
    %2:_(<4 x i32>) = G_ROTL %0, %1(<4 x i32>)
    $sgpr0_sgpr1_sgpr2_sgpr3 = COPY %2(<4 x i32>)

...
---
name:            rotr_i16
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; GFX6-LABEL: name: rotr_i16
    ; GFX6: liveins: $sgpr0, $sgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[C1]], [[COPY1]]
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SUB]](i32)
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[AND]](i16)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C2]]
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[ZEXT]](i32)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[AND2]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[ZEXT1]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[SHL]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[TRUNC2]], [[TRUNC3]]
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX6-NEXT: $sgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: rotr_i16
    ; GFX8: liveins: $sgpr0, $sgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 15
    ; GFX8-NEXT: [[SUB:%[0-9]+]]:_(i16) = G_SUB [[C]], [[TRUNC1]]
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[AND]](i16)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[SUB]], [[C1]]
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[AND1]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[LSHR]], [[SHL]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX8-NEXT: $sgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i32) = COPY $sgpr1
    %3:_(i16) = G_TRUNC %2(i32)
    %4:_(i16) = G_ROTR %1, %3(i16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $sgpr0 = COPY %5(i32)

...
---
name:            rotr_i32
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; GFX-LABEL: name: rotr_i32
    ; GFX: liveins: $sgpr0, $sgpr1
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; GFX-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[COPY]], [[COPY]], [[COPY1]](i32)
    ; GFX-NEXT: $sgpr0 = COPY [[FSHR]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = G_ROTR %0, %1(i32)
    $sgpr0 = COPY %2(i32)

...
---
name:            rotr_i64
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0_sgpr1, $sgpr2_sgpr3

    ; GFX-LABEL: name: rotr_i64
    ; GFX: liveins: $sgpr0_sgpr1, $sgpr2_sgpr3
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $sgpr0_sgpr1
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $sgpr2_sgpr3
    ; GFX-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 63
    ; GFX-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[C]](i64)
    ; GFX-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](i64)
    ; GFX-NEXT: [[USUBO:%[0-9]+]]:_(i32), [[USUBO1:%[0-9]+]]:_(i1) = G_USUBO [[UV]], [[UV2]]
    ; GFX-NEXT: [[USUBE:%[0-9]+]]:_(i32), [[USUBE1:%[0-9]+]]:_(i1) = G_USUBE [[UV1]], [[UV3]], [[USUBO1]]
    ; GFX-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[USUBO]](i32), [[USUBE]](i32)
    ; GFX-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[COPY1]], [[C1]]
    ; GFX-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[AND]](i64)
    ; GFX-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[TRUNC]](i32)
    ; GFX-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C1]]
    ; GFX-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[AND1]](i64)
    ; GFX-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[TRUNC1]](i32)
    ; GFX-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; GFX-NEXT: $sgpr0_sgpr1 = COPY [[OR]](i64)
    %0:_(i64) = COPY $sgpr0_sgpr1
    %1:_(i64) = COPY $sgpr2_sgpr3
    %2:_(i64) = G_ROTR %0, %1(i64)
    $sgpr0_sgpr1 = COPY %2(i64)

...
---
name:            rotr_v4i32
legalized:       false
regBankSelected: false
selected:        false
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $sgpr4_sgpr5_sgpr6_sgpr7

    ; GFX-LABEL: name: rotr_v4i32
    ; GFX: liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $sgpr4_sgpr5_sgpr6_sgpr7
    ; GFX-NEXT: {{  $}}
    ; GFX-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    ; GFX-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $sgpr4_sgpr5_sgpr6_sgpr7
    ; GFX-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; GFX-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<4 x i32>)
    ; GFX-NEXT: [[FSHR:%[0-9]+]]:_(i32) = G_FSHR [[UV]], [[UV]], [[UV4]](i32)
    ; GFX-NEXT: [[FSHR1:%[0-9]+]]:_(i32) = G_FSHR [[UV1]], [[UV1]], [[UV5]](i32)
    ; GFX-NEXT: [[FSHR2:%[0-9]+]]:_(i32) = G_FSHR [[UV2]], [[UV2]], [[UV6]](i32)
    ; GFX-NEXT: [[FSHR3:%[0-9]+]]:_(i32) = G_FSHR [[UV3]], [[UV3]], [[UV7]](i32)
    ; GFX-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i32>) = G_BUILD_VECTOR [[FSHR]](i32), [[FSHR1]](i32), [[FSHR2]](i32), [[FSHR3]](i32)
    ; GFX-NEXT: $sgpr0_sgpr1_sgpr2_sgpr3 = COPY [[BUILD_VECTOR]](<4 x i32>)
    %0:_(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    %1:_(<4 x i32>) = COPY $sgpr4_sgpr5_sgpr6_sgpr7
    %2:_(<4 x i32>) = G_ROTR %0, %1(<4 x i32>)
    $sgpr0_sgpr1_sgpr2_sgpr3 = COPY %2(<4 x i32>)

...
