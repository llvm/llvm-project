# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-fast | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-greedy | FileCheck %s

---
name: class_ss
legalized: true

body: |
  bb.0:
    liveins: $sgpr0_sgpr1, $sgpr2
    ; CHECK-LABEL: name: class_ss
    ; CHECK: liveins: $sgpr0_sgpr1, $sgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i64) = COPY $sgpr0_sgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(f64) = COPY [[BITCAST]](f64)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vcc(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), [[COPY2]](f64), [[COPY3]](i32)
    %0:_(i64) = COPY $sgpr0_sgpr1
    %1:_(i32) = COPY $sgpr2
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), %2(f64), %1(i32)
...

---
name: class_sv
legalized: true

body: |
  bb.0:
    liveins: $sgpr0_sgpr1, $vgpr0

    ; CHECK-LABEL: name: class_sv
    ; CHECK: liveins: $sgpr0_sgpr1, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i64) = COPY $sgpr0_sgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(f64) = COPY [[BITCAST]](f64)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vcc(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), [[COPY2]](f64), [[COPY1]](i32)
    %0:_(i64) = COPY $sgpr0_sgpr1
    %1:_(i32) = COPY $vgpr0
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), %2(f64), %1(i32)
...

---
name: class_vs
legalized: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $sgpr0
    ; CHECK-LABEL: name: class_vs
    ; CHECK: liveins: $vgpr0_vgpr1, $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:vgpr(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vcc(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), [[BITCAST]](f64), [[COPY2]](i32)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $sgpr0
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), %2(f64), %1(i32)
...

---
name: class_vv
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: class_vv
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:vgpr(f64) = G_BITCAST [[COPY]](i64)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vcc(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), [[BITCAST]](f64), [[COPY1]](i32)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.class), %2(f64), %1(i32)
...
