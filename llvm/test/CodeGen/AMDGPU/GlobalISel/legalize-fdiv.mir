# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=SI  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=VI  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer -o - %s | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer -enable-unsafe-fp-math -o - %s | FileCheck -check-prefix=GFX9-UNSAFE %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer -o - %s | FileCheck -check-prefix=GFX10 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer -o - %s | FileCheck -check-prefix=GFX10 %s

---
name: test_fdiv_s16
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fdiv_s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[FPEXT1]](f32), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT6]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; VI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; VI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; VI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; VI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; VI-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; VI-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; VI-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; VI-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST3]], [[FADD1]]
    ; VI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; VI-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST1]](f16), [[BITCAST]](f16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i16) = G_BITCAST [[INT1]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST4]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX9-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; GFX9-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C]]
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX9-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST3]], [[FADD1]]
    ; GFX9-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST1]](f16), [[BITCAST]](f16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i16) = G_BITCAST [[INT1]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST4]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s16
    ; GFX9-UNSAFE: liveins: $vgpr0, $vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-UNSAFE-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST1]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(i16) = G_BITCAST [[FMUL]](f16)
    ; GFX9-UNSAFE-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST2]](i16)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(f16) = G_BITCAST %2(i16)
    %5:_(f16) = G_BITCAST %3(i16)
    %6:_(f16) = G_FDIV %4, %5
    %7:_(i16) = G_BITCAST %6(f16)
    %8:_(i32) = G_ANYEXT %7(i16)
    $vgpr0 = COPY %8(i32)
...

---
name: test_fdiv_s32_denorms_on
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fdiv_s32_denorms_on
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s32_denorms_on
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s32_denorms_on
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s32_denorms_on
    ; GFX9-UNSAFE: liveins: $vgpr0, $vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST1]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s32_denorms_on
    ; GFX10: liveins: $vgpr0, $vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FDIV %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fdiv_s32_denorms_off
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fdiv_s32_denorms_off
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s32_denorms_off
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; VI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s32_denorms_off
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s32_denorms_off
    ; GFX9-UNSAFE: liveins: $vgpr0, $vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST1]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s32_denorms_off
    ; GFX10: liveins: $vgpr0, $vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX10-NEXT: S_DENORM_MODE 15, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: S_DENORM_MODE 12, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = G_FDIV %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fdiv_s32_denorms_off_arcp
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fdiv_s32_denorms_off_arcp
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = arcp G_FNEG [[INT]]
    ; SI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = arcp G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s32_denorms_off_arcp
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = arcp G_FNEG [[INT]]
    ; VI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = arcp G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s32_denorms_off_arcp
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = arcp G_FNEG [[INT]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = arcp G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s32_denorms_off_arcp
    ; GFX9-UNSAFE: liveins: $vgpr0, $vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST1]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f32) = arcp G_FMUL [[BITCAST]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL]](f32)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s32_denorms_off_arcp
    ; GFX10: liveins: $vgpr0, $vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f32), [[BITCAST1]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = arcp G_FNEG [[INT]]
    ; GFX10-NEXT: S_DENORM_MODE 15, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = arcp G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = arcp G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = arcp G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: S_DENORM_MODE 12, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = arcp G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST1]](f32), [[BITCAST]](f32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(f32) = G_BITCAST %0(i32)
    %3:_(f32) = G_BITCAST %1(i32)
    %4:_(f32) = arcp G_FDIV %2, %3
    %5:_(i32) = G_BITCAST %4(f32)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fdiv_s64
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fdiv_s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 0
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; SI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 1
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST2]](i64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST1]](f64)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](i64)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[INT]](f64)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST4]](i64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[INT3]](f64)
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST5]](i64)
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV1]](i32), [[UV7]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV3]](i32), [[UV5]]
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i1) = G_XOR [[ICMP]], [[ICMP1]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[XOR]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST1]](f64), [[BITCAST]](f64)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST6]](i64)
    ;
    ; VI-LABEL: name: test_fdiv_s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 0
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 1
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST1]](f64), [[BITCAST]](f64)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; GFX9-LABEL: name: test_fdiv_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 0
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 1
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST1]](f64), [[BITCAST]](f64)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s64
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX9-UNSAFE-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST1]]
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST1]](f64)
    ; GFX9-UNSAFE-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMA]], [[INT]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA2]], [[FMA1]], [[FMA1]]
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[BITCAST]], [[FMA3]]
    ; GFX9-UNSAFE-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[BITCAST]]
    ; GFX9-UNSAFE-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FMA4]], [[FMA3]], [[FMUL]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[FMA5]](f64)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    ;
    ; GFX10-LABEL: name: test_fdiv_s64
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f64) = G_BITCAST [[COPY1]](i64)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 0
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX10-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[BITCAST]](f64), [[BITCAST1]](f64), 1
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST1]](f64), [[BITCAST]](f64)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(f64) = G_BITCAST %0(i64)
    %3:_(f64) = G_BITCAST %1(i64)
    %4:_(f64) = G_FDIV %2, %3
    %5:_(i64) = G_BITCAST %4(f64)
    $vgpr0_vgpr1 = COPY %5(i64)
...

---
name: test_fdiv_v2s32
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fdiv_v2s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; SI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; SI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; SI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_fdiv_v2s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; VI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; VI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; VI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; VI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; VI-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; VI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; VI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; VI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; VI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; VI-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; VI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; VI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; GFX9-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; GFX9-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; GFX9-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 3, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; GFX9-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; GFX9-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; GFX9-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; GFX9-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; GFX9-NEXT: S_SETREG_IMM32_B32 0, 2305, implicit-def $mode, implicit $mode
    ; GFX9-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; GFX9-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v2s32
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-UNSAFE-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-UNSAFE-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV2]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV3]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMUL]](f32), [[FMUL1]](f32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX10-LABEL: name: test_fdiv_v2s32
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX10-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX10-NEXT: S_DENORM_MODE 15, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: S_DENORM_MODE 12, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; GFX10-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; GFX10-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; GFX10-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; GFX10-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; GFX10-NEXT: S_DENORM_MODE 15, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; GFX10-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; GFX10-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; GFX10-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; GFX10-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; GFX10-NEXT: S_DENORM_MODE 12, implicit-def $mode, implicit $mode
    ; GFX10-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; GFX10-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = G_FDIV %2, %3
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_fdiv_v2s32_flags
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fdiv_v2s32_flags
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; SI-NEXT: [[INT11:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT7]]
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT9]], [[FMA6]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_fdiv_v2s32_flags
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT]]
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; VI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; VI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; VI-NEXT: [[INT11:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT7]]
    ; VI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; VI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT9]], [[FMA6]]
    ; VI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; VI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; VI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; VI-NEXT: [[INT12:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; VI-NEXT: [[INT13:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v2s32_flags
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; GFX9-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; GFX9-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; GFX9-NEXT: [[INT11:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT7]]
    ; GFX9-NEXT: [[FMA5:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; GFX9-NEXT: [[FMA6:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT9]], [[FMA6]]
    ; GFX9-NEXT: [[FMA7:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; GFX9-NEXT: [[FMA8:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; GFX9-NEXT: [[FMA9:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; GFX9-NEXT: [[INT12:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; GFX9-NEXT: [[INT13:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v2s32_flags
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX9-UNSAFE-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-UNSAFE-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV2]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[UV]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV3]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[UV1]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMUL]](f32), [[FMUL1]](f32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    ;
    ; GFX10-LABEL: name: test_fdiv_v2s32_flags
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX10-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV2]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV2]](f32), [[UV]](f32)
    ; GFX10-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 0
    ; GFX10-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV3]](f32), 1
    ; GFX10-NEXT: [[INT11:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; GFX10-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = nnan G_FNEG [[INT7]]
    ; GFX10-NEXT: [[FMA5:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; GFX10-NEXT: [[FMA6:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[INT9]], [[FMA6]]
    ; GFX10-NEXT: [[FMA7:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; GFX10-NEXT: [[FMA8:%[0-9]+]]:_(f32) = nnan G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; GFX10-NEXT: [[FMA9:%[0-9]+]]:_(f32) = nnan G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; GFX10-NEXT: [[INT12:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; GFX10-NEXT: [[INT13:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV3]](f32), [[UV1]](f32)
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST2]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %3:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %4:_(<2 x f32>) = nnan G_FDIV %2, %3
    %5:_(<2 x i32>) = G_BITCAST %4(<2 x f32>)
    $vgpr0_vgpr1 = COPY %5(<2 x i32>)
...

---
name: test_fdiv_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5

    ; SI-LABEL: name: test_fdiv_v3s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; SI-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV3]](f32), [[UV]](f32)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 0
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 1
    ; SI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV4]](f32), [[UV1]](f32)
    ; SI-NEXT: [[INT14:%[0-9]+]]:_(f32), [[INT15:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 0
    ; SI-NEXT: [[INT16:%[0-9]+]]:_(f32), [[INT17:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 1
    ; SI-NEXT: [[INT18:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT14]](f32)
    ; SI-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[INT14]]
    ; SI-NEXT: [[FMA10:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT18]], [[C]]
    ; SI-NEXT: [[FMA11:%[0-9]+]]:_(f32) = G_FMA [[FMA10]], [[INT18]], [[INT18]]
    ; SI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[INT16]], [[FMA11]]
    ; SI-NEXT: [[FMA12:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMUL2]], [[INT16]]
    ; SI-NEXT: [[FMA13:%[0-9]+]]:_(f32) = G_FMA [[FMA12]], [[FMA11]], [[FMUL2]]
    ; SI-NEXT: [[FMA14:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMA13]], [[INT16]]
    ; SI-NEXT: [[INT19:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA14]](f32), [[FMA11]](f32), [[FMA13]](f32), [[INT17]](i1)
    ; SI-NEXT: [[INT20:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT19]](f32), [[UV5]](f32), [[UV2]](f32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32), [[INT20]](f32)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_fdiv_v3s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; VI-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV3]](f32), [[UV]](f32)
    ; VI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 0
    ; VI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 1
    ; VI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; VI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; VI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; VI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; VI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; VI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; VI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; VI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV4]](f32), [[UV1]](f32)
    ; VI-NEXT: [[INT14:%[0-9]+]]:_(f32), [[INT15:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 0
    ; VI-NEXT: [[INT16:%[0-9]+]]:_(f32), [[INT17:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 1
    ; VI-NEXT: [[INT18:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT14]](f32)
    ; VI-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[INT14]]
    ; VI-NEXT: [[FMA10:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT18]], [[C]]
    ; VI-NEXT: [[FMA11:%[0-9]+]]:_(f32) = G_FMA [[FMA10]], [[INT18]], [[INT18]]
    ; VI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[INT16]], [[FMA11]]
    ; VI-NEXT: [[FMA12:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMUL2]], [[INT16]]
    ; VI-NEXT: [[FMA13:%[0-9]+]]:_(f32) = G_FMA [[FMA12]], [[FMA11]], [[FMUL2]]
    ; VI-NEXT: [[FMA14:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMA13]], [[INT16]]
    ; VI-NEXT: [[INT19:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA14]](f32), [[FMA11]](f32), [[FMA13]](f32), [[INT17]](i1)
    ; VI-NEXT: [[INT20:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT19]](f32), [[UV5]](f32), [[UV2]](f32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32), [[INT20]](f32)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV3]](f32), [[UV]](f32)
    ; GFX9-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 0
    ; GFX9-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 1
    ; GFX9-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; GFX9-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; GFX9-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; GFX9-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; GFX9-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; GFX9-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; GFX9-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; GFX9-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV4]](f32), [[UV1]](f32)
    ; GFX9-NEXT: [[INT14:%[0-9]+]]:_(f32), [[INT15:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 0
    ; GFX9-NEXT: [[INT16:%[0-9]+]]:_(f32), [[INT17:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 1
    ; GFX9-NEXT: [[INT18:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT14]](f32)
    ; GFX9-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[INT14]]
    ; GFX9-NEXT: [[FMA10:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT18]], [[C]]
    ; GFX9-NEXT: [[FMA11:%[0-9]+]]:_(f32) = G_FMA [[FMA10]], [[INT18]], [[INT18]]
    ; GFX9-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[INT16]], [[FMA11]]
    ; GFX9-NEXT: [[FMA12:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMUL2]], [[INT16]]
    ; GFX9-NEXT: [[FMA13:%[0-9]+]]:_(f32) = G_FMA [[FMA12]], [[FMA11]], [[FMUL2]]
    ; GFX9-NEXT: [[FMA14:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMA13]], [[INT16]]
    ; GFX9-NEXT: [[INT19:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA14]](f32), [[FMA11]](f32), [[FMA13]](f32), [[INT17]](i1)
    ; GFX9-NEXT: [[INT20:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT19]](f32), [[UV5]](f32), [[UV2]](f32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32), [[INT20]](f32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v3s32
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX9-UNSAFE-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX9-UNSAFE-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV3]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV4]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV5]](f32)
    ; GFX9-UNSAFE-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[INT2]]
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FMUL]](f32), [[FMUL1]](f32), [[FMUL2]](f32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    ;
    ; GFX10-LABEL: name: test_fdiv_v3s32
    ; GFX10: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX10-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f32), [[UV3]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[UV3]](f32), [[UV]](f32)
    ; GFX10-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 0
    ; GFX10-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f32), [[UV4]](f32), 1
    ; GFX10-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; GFX10-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; GFX10-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C]]
    ; GFX10-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; GFX10-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; GFX10-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; GFX10-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; GFX10-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; GFX10-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[UV4]](f32), [[UV1]](f32)
    ; GFX10-NEXT: [[INT14:%[0-9]+]]:_(f32), [[INT15:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 0
    ; GFX10-NEXT: [[INT16:%[0-9]+]]:_(f32), [[INT17:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV2]](f32), [[UV5]](f32), 1
    ; GFX10-NEXT: [[INT18:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT14]](f32)
    ; GFX10-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[INT14]]
    ; GFX10-NEXT: [[FMA10:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT18]], [[C]]
    ; GFX10-NEXT: [[FMA11:%[0-9]+]]:_(f32) = G_FMA [[FMA10]], [[INT18]], [[INT18]]
    ; GFX10-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[INT16]], [[FMA11]]
    ; GFX10-NEXT: [[FMA12:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMUL2]], [[INT16]]
    ; GFX10-NEXT: [[FMA13:%[0-9]+]]:_(f32) = G_FMA [[FMA12]], [[FMA11]], [[FMUL2]]
    ; GFX10-NEXT: [[FMA14:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMA13]], [[INT16]]
    ; GFX10-NEXT: [[INT19:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA14]](f32), [[FMA11]](f32), [[FMA13]](f32), [[INT17]](i1)
    ; GFX10-NEXT: [[INT20:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT19]](f32), [[UV5]](f32), [[UV2]](f32)
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[INT6]](f32), [[INT13]](f32), [[INT20]](f32)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX10-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST2]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %3:_(<3 x f32>) = G_BITCAST %1(<3 x i32>)
    %4:_(<3 x f32>) = G_FDIV %2, %3
    %5:_(<3 x i32>) = G_BITCAST %4(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %5(<3 x i32>)
...

---
name: test_fdiv_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7

    ; SI-LABEL: name: test_fdiv_v2s64
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 0
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; SI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 1
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[UV]](f64)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST2]](i64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[UV2]](f64)
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](i64)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[INT]](f64)
    ; SI-NEXT: [[UV8:%[0-9]+]]:_(i32), [[UV9:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST4]](i64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[INT3]](f64)
    ; SI-NEXT: [[UV10:%[0-9]+]]:_(i32), [[UV11:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST5]](i64)
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV5]](i32), [[UV11]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV7]](i32), [[UV9]]
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i1) = G_XOR [[ICMP]], [[ICMP1]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[XOR]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[UV2]](f64), [[UV]](f64)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f64), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 0
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[INT7]]
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f64)
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[INT9]], [[C]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[INT9]], [[FMA5]], [[INT9]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA6]], [[C]]
    ; SI-NEXT: [[INT10:%[0-9]+]]:_(f64), [[INT11:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 1
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f64) = G_FMA [[FMA6]], [[FMA7]], [[FMA6]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[INT10]], [[FMA8]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMUL1]], [[INT10]]
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i64) = G_BITCAST [[UV1]](f64)
    ; SI-NEXT: [[UV12:%[0-9]+]]:_(i32), [[UV13:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST6]](i64)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i64) = G_BITCAST [[UV3]](f64)
    ; SI-NEXT: [[UV14:%[0-9]+]]:_(i32), [[UV15:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST7]](i64)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(i64) = G_BITCAST [[INT7]](f64)
    ; SI-NEXT: [[UV16:%[0-9]+]]:_(i32), [[UV17:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST8]](i64)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i64) = G_BITCAST [[INT10]](f64)
    ; SI-NEXT: [[UV18:%[0-9]+]]:_(i32), [[UV19:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST9]](i64)
    ; SI-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV13]](i32), [[UV19]]
    ; SI-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV15]](i32), [[UV17]]
    ; SI-NEXT: [[XOR1:%[0-9]+]]:_(i1) = G_XOR [[ICMP2]], [[ICMP3]]
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f64), [[FMA8]](f64), [[FMUL1]](f64), [[XOR1]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f64), [[UV3]](f64), [[UV1]](f64)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[INT6]](f64), [[INT13]](f64)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST10]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_fdiv_v2s64
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 0
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 1
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[UV2]](f64), [[UV]](f64)
    ; VI-NEXT: [[INT7:%[0-9]+]]:_(f64), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 0
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[INT7]]
    ; VI-NEXT: [[INT9:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f64)
    ; VI-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[INT9]], [[C]]
    ; VI-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[INT9]], [[FMA5]], [[INT9]]
    ; VI-NEXT: [[FMA7:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA6]], [[C]]
    ; VI-NEXT: [[INT10:%[0-9]+]]:_(f64), [[INT11:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 1
    ; VI-NEXT: [[FMA8:%[0-9]+]]:_(f64) = G_FMA [[FMA6]], [[FMA7]], [[FMA6]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[INT10]], [[FMA8]]
    ; VI-NEXT: [[FMA9:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMUL1]], [[INT10]]
    ; VI-NEXT: [[INT12:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f64), [[FMA8]](f64), [[FMUL1]](f64), [[INT11]](i1)
    ; VI-NEXT: [[INT13:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f64), [[UV3]](f64), [[UV1]](f64)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[INT6]](f64), [[INT13]](f64)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 0
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 1
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[UV2]](f64), [[UV]](f64)
    ; GFX9-NEXT: [[INT7:%[0-9]+]]:_(f64), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 0
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[INT7]]
    ; GFX9-NEXT: [[INT9:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f64)
    ; GFX9-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[INT9]], [[C]]
    ; GFX9-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[INT9]], [[FMA5]], [[INT9]]
    ; GFX9-NEXT: [[FMA7:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA6]], [[C]]
    ; GFX9-NEXT: [[INT10:%[0-9]+]]:_(f64), [[INT11:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 1
    ; GFX9-NEXT: [[FMA8:%[0-9]+]]:_(f64) = G_FMA [[FMA6]], [[FMA7]], [[FMA6]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[INT10]], [[FMA8]]
    ; GFX9-NEXT: [[FMA9:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMUL1]], [[INT10]]
    ; GFX9-NEXT: [[INT12:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f64), [[FMA8]](f64), [[FMUL1]](f64), [[INT11]](i1)
    ; GFX9-NEXT: [[INT13:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f64), [[UV3]](f64), [[UV1]](f64)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[INT6]](f64), [[INT13]](f64)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v2s64
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; GFX9-UNSAFE-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX9-UNSAFE-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; GFX9-UNSAFE-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[UV2]]
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV2]](f64)
    ; GFX9-UNSAFE-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMA]], [[INT]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA2]], [[FMA1]], [[FMA1]]
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[UV]], [[FMA3]]
    ; GFX9-UNSAFE-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[UV]]
    ; GFX9-UNSAFE-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FMA4]], [[FMA3]], [[FMUL]]
    ; GFX9-UNSAFE-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[UV3]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[UV3]](f64)
    ; GFX9-UNSAFE-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[INT1]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA7:%[0-9]+]]:_(f64) = G_FMA [[FMA6]], [[INT1]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[FMA8:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA7]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA9:%[0-9]+]]:_(f64) = G_FMA [[FMA8]], [[FMA7]], [[FMA7]]
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[UV1]], [[FMA9]]
    ; GFX9-UNSAFE-NEXT: [[FMA10:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMUL1]], [[UV1]]
    ; GFX9-UNSAFE-NEXT: [[FMA11:%[0-9]+]]:_(f64) = G_FMA [[FMA10]], [[FMA9]], [[FMUL1]]
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FMA5]](f64), [[FMA11]](f64)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    ;
    ; GFX10-LABEL: name: test_fdiv_v2s64
    ; GFX10: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY]](<2 x i64>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f64>) = G_BITCAST [[COPY1]](<2 x i64>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(f64), [[UV1:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST]](<2 x f64>)
    ; GFX10-NEXT: [[UV2:%[0-9]+]]:_(f64), [[UV3:%[0-9]+]]:_(f64) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f64>)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 0
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX10-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV]](f64), [[UV2]](f64), 1
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[UV2]](f64), [[UV]](f64)
    ; GFX10-NEXT: [[INT7:%[0-9]+]]:_(f64), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 0
    ; GFX10-NEXT: [[FNEG1:%[0-9]+]]:_(f64) = G_FNEG [[INT7]]
    ; GFX10-NEXT: [[INT9:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f64)
    ; GFX10-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[INT9]], [[C]]
    ; GFX10-NEXT: [[FMA6:%[0-9]+]]:_(f64) = G_FMA [[INT9]], [[FMA5]], [[INT9]]
    ; GFX10-NEXT: [[FMA7:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMA6]], [[C]]
    ; GFX10-NEXT: [[INT10:%[0-9]+]]:_(f64), [[INT11:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[UV1]](f64), [[UV3]](f64), 1
    ; GFX10-NEXT: [[FMA8:%[0-9]+]]:_(f64) = G_FMA [[FMA6]], [[FMA7]], [[FMA6]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f64) = G_FMUL [[INT10]], [[FMA8]]
    ; GFX10-NEXT: [[FMA9:%[0-9]+]]:_(f64) = G_FMA [[FNEG1]], [[FMUL1]], [[INT10]]
    ; GFX10-NEXT: [[INT12:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f64), [[FMA8]](f64), [[FMUL1]](f64), [[INT11]](i1)
    ; GFX10-NEXT: [[INT13:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f64), [[UV3]](f64), [[UV1]](f64)
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[INT6]](f64), [[INT13]](f64)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; GFX10-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST2]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<2 x f64>) = G_BITCAST %0(<2 x i64>)
    %3:_(<2 x f64>) = G_BITCAST %1(<2 x i64>)
    %4:_(<2 x f64>) = G_FDIV %2, %3
    %5:_(<2 x i64>) = G_BITCAST %4(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %5(<2 x i64>)
...

---
name: test_fdiv_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fdiv_v2s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %45(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %51(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %46(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[FPEXT1]](f32), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT6]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT2]](f32), [[FPEXT3]](f32), 0
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT2]](f32), [[FPEXT3]](f32), 1
    ; SI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C1]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[FPEXT3]](f32), [[FPEXT2]](f32)
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT13]](f32)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST10]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST11]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST12]](<2 x f16>)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST13]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_fdiv_v2s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %54(i16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; VI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; VI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; VI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; VI-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; VI-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; VI-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST10]], [[C1]]
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; VI-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST11]], [[FADD1]]
    ; VI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; VI-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST3]](f16), [[BITCAST2]](f16)
    ; VI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; VI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT3]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT3]](f32)
    ; VI-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT2]], [[INT2]]
    ; VI-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FMUL5]]
    ; VI-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FPEXT2]]
    ; VI-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[FADD4]], [[INT2]]
    ; VI-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FMUL5]]
    ; VI-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FADD5]]
    ; VI-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL8]], [[FPEXT2]]
    ; VI-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FADD6]], [[INT2]]
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL9]](f32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST12]], [[C1]]
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; VI-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[BITCAST13]], [[FADD5]]
    ; VI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC1]](f16), [[BITCAST5]](f16), [[BITCAST4]](f16)
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[INT1]](f16)
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[INT3]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST14]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST16]](<2 x f16>)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST17]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %54(i16)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX9-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; GFX9-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST10]], [[C1]]
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX9-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST11]], [[FADD1]]
    ; GFX9-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST3]](f16), [[BITCAST2]](f16)
    ; GFX9-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX9-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT3]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT3]](f32)
    ; GFX9-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT2]], [[INT2]]
    ; GFX9-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FMUL5]]
    ; GFX9-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FPEXT2]]
    ; GFX9-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[FADD4]], [[INT2]]
    ; GFX9-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FMUL5]]
    ; GFX9-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FADD5]]
    ; GFX9-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL8]], [[FPEXT2]]
    ; GFX9-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FADD6]], [[INT2]]
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL9]](f32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST12]], [[C1]]
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; GFX9-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[BITCAST13]], [[FADD5]]
    ; GFX9-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC1]](f16), [[BITCAST5]](f16), [[BITCAST4]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[INT1]](f16), [[INT3]](f16)
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST14]](<2 x i16>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v2s16
    ; GFX9-UNSAFE: liveins: $vgpr0, $vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %14(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %20(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %15(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %21(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-UNSAFE-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX9-UNSAFE-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST3]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST2]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST5]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST4]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FMUL]](f16), [[FMUL1]](f16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[BITCAST10]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %3:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %4:_(<2 x f16>) = G_FDIV %2, %3
    %5:_(<2 x i16>) = G_BITCAST %4(<2 x f16>)
    $vgpr0 = COPY %5(<2 x i16>)
...

---
name: test_fdiv_v3s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_fdiv_v3s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %100(i16)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %105(i16)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %101(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[DEF1:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF1]](<4 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST %89(i16)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST %95(i16)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST %90(i16)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST10]](<2 x i16>)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST11]](i32)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST12]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST13]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST13]], [[C]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST7]](f16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[FPEXT1]](f32), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT6]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST9]](f16)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT2]](f32), [[FPEXT3]](f32), 0
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT2]](f32), [[FPEXT3]](f32), 1
    ; SI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C1]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[FPEXT3]](f32), [[FPEXT2]](f32)
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT13]](f32)
    ; SI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; SI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST8]](f16)
    ; SI-NEXT: [[INT14:%[0-9]+]]:_(f32), [[INT15:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT4]](f32), [[FPEXT5]](f32), 0
    ; SI-NEXT: [[INT16:%[0-9]+]]:_(f32), [[INT17:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT4]](f32), [[FPEXT5]](f32), 1
    ; SI-NEXT: [[INT18:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT14]](f32)
    ; SI-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[INT14]]
    ; SI-NEXT: [[FMA10:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT18]], [[C1]]
    ; SI-NEXT: [[FMA11:%[0-9]+]]:_(f32) = G_FMA [[FMA10]], [[INT18]], [[INT18]]
    ; SI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[INT16]], [[FMA11]]
    ; SI-NEXT: [[FMA12:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMUL2]], [[INT16]]
    ; SI-NEXT: [[FMA13:%[0-9]+]]:_(f32) = G_FMA [[FMA12]], [[FMA11]], [[FMUL2]]
    ; SI-NEXT: [[FMA14:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMA13]], [[INT16]]
    ; SI-NEXT: [[INT19:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA14]](f32), [[FMA11]](f32), [[FMA13]](f32), [[INT17]](i1)
    ; SI-NEXT: [[INT20:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT19]](f32), [[FPEXT5]](f32), [[FPEXT4]](f32)
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT20]](f32)
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST14]](i16)
    ; SI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST15]](i16)
    ; SI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST16]](i16)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; SI-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_fdiv_v3s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %103(i16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %108(i16)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %104(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[DEF1:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF1]](<4 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST %92(i16)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST %98(i16)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST %93(i16)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST10]](<2 x i16>)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST11]](i32)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST12]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST13]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST13]], [[C]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; VI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST7]](f16)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; VI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; VI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; VI-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; VI-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; VI-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST14]], [[C1]]
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; VI-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST15]], [[FADD1]]
    ; VI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; VI-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST7]](f16), [[BITCAST]](f16)
    ; VI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; VI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST9]](f16)
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT3]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT3]](f32)
    ; VI-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT2]], [[INT2]]
    ; VI-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FMUL5]]
    ; VI-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FPEXT2]]
    ; VI-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[FADD4]], [[INT2]]
    ; VI-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FMUL5]]
    ; VI-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FADD5]]
    ; VI-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL8]], [[FPEXT2]]
    ; VI-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FADD6]], [[INT2]]
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL9]](f32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST16]], [[C1]]
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; VI-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[BITCAST17]], [[FADD5]]
    ; VI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC1]](f16), [[BITCAST9]](f16), [[BITCAST2]](f16)
    ; VI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; VI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST8]](f16)
    ; VI-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT5]]
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT5]](f32)
    ; VI-NEXT: [[FMUL10:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[INT4]]
    ; VI-NEXT: [[FMUL11:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FMUL10]]
    ; VI-NEXT: [[FADD8:%[0-9]+]]:_(f32) = G_FADD [[FMUL11]], [[FPEXT4]]
    ; VI-NEXT: [[FMUL12:%[0-9]+]]:_(f32) = G_FMUL [[FADD8]], [[INT4]]
    ; VI-NEXT: [[FADD9:%[0-9]+]]:_(f32) = G_FADD [[FMUL12]], [[FMUL10]]
    ; VI-NEXT: [[FMUL13:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FADD9]]
    ; VI-NEXT: [[FADD10:%[0-9]+]]:_(f32) = G_FADD [[FMUL13]], [[FPEXT4]]
    ; VI-NEXT: [[FMUL14:%[0-9]+]]:_(f32) = G_FMUL [[FADD10]], [[INT4]]
    ; VI-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL14]](f32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST18]], [[C1]]
    ; VI-NEXT: [[BITCAST19:%[0-9]+]]:_(f32) = G_BITCAST [[AND2]](i32)
    ; VI-NEXT: [[FADD11:%[0-9]+]]:_(f32) = G_FADD [[BITCAST19]], [[FADD9]]
    ; VI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD11]](f32)
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC2]](f16), [[BITCAST8]](f16), [[BITCAST1]](f16)
    ; VI-NEXT: [[BITCAST20:%[0-9]+]]:_(i16) = G_BITCAST [[INT1]](f16)
    ; VI-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[INT3]](f16)
    ; VI-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[INT5]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST20]](i16)
    ; VI-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST21]](i16)
    ; VI-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST22]](i16)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; VI-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v3s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %103(i16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %108(i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %104(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[DEF1:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF1]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST %92(i16)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST %98(i16)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST %93(i16)
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST10]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST11]](i32)
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST12]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST13]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST13]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX9-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST7]](f16)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; GFX9-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST14]], [[C1]]
    ; GFX9-NEXT: [[BITCAST15:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX9-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST15]], [[FADD1]]
    ; GFX9-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST7]](f16), [[BITCAST]](f16)
    ; GFX9-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX9-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST9]](f16)
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT3]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT3]](f32)
    ; GFX9-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT2]], [[INT2]]
    ; GFX9-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FMUL5]]
    ; GFX9-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FPEXT2]]
    ; GFX9-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[FADD4]], [[INT2]]
    ; GFX9-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FMUL5]]
    ; GFX9-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FADD5]]
    ; GFX9-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL8]], [[FPEXT2]]
    ; GFX9-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FADD6]], [[INT2]]
    ; GFX9-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL9]](f32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST16]], [[C1]]
    ; GFX9-NEXT: [[BITCAST17:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; GFX9-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[BITCAST17]], [[FADD5]]
    ; GFX9-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC1]](f16), [[BITCAST9]](f16), [[BITCAST2]](f16)
    ; GFX9-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX9-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST8]](f16)
    ; GFX9-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT5]]
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT5]](f32)
    ; GFX9-NEXT: [[FMUL10:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL11:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FMUL10]]
    ; GFX9-NEXT: [[FADD8:%[0-9]+]]:_(f32) = G_FADD [[FMUL11]], [[FPEXT4]]
    ; GFX9-NEXT: [[FMUL12:%[0-9]+]]:_(f32) = G_FMUL [[FADD8]], [[INT4]]
    ; GFX9-NEXT: [[FADD9:%[0-9]+]]:_(f32) = G_FADD [[FMUL12]], [[FMUL10]]
    ; GFX9-NEXT: [[FMUL13:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FADD9]]
    ; GFX9-NEXT: [[FADD10:%[0-9]+]]:_(f32) = G_FADD [[FMUL13]], [[FPEXT4]]
    ; GFX9-NEXT: [[FMUL14:%[0-9]+]]:_(f32) = G_FMUL [[FADD10]], [[INT4]]
    ; GFX9-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL14]](f32)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST18]], [[C1]]
    ; GFX9-NEXT: [[BITCAST19:%[0-9]+]]:_(f32) = G_BITCAST [[AND2]](i32)
    ; GFX9-NEXT: [[FADD11:%[0-9]+]]:_(f32) = G_FADD [[BITCAST19]], [[FADD9]]
    ; GFX9-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD11]](f32)
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC2]](f16), [[BITCAST8]](f16), [[BITCAST1]](f16)
    ; GFX9-NEXT: [[BITCAST20:%[0-9]+]]:_(i16) = G_BITCAST [[INT1]](f16)
    ; GFX9-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[INT3]](f16)
    ; GFX9-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[INT5]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST20]](i16)
    ; GFX9-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST21]](i16)
    ; GFX9-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST22]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; GFX9-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v3s16
    ; GFX9-UNSAFE: liveins: $vgpr0, $vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; GFX9-UNSAFE-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %54(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %59(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %55(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-UNSAFE-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST6:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST5]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST6]](i32)
    ; GFX9-UNSAFE-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST6]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-UNSAFE-NEXT: [[DEF1:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; GFX9-UNSAFE-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF1]](<4 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST7:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST8:%[0-9]+]]:_(f16) = G_BITCAST %49(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST9:%[0-9]+]]:_(f16) = G_BITCAST %44(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST10:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST11:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST10]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST11]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST12:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST13:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST12]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST13]](i32)
    ; GFX9-UNSAFE-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST13]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST7]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST9]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST2]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[INT2:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST8]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST1]], [[INT2]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST14:%[0-9]+]]:_(i16) = G_BITCAST [[FMUL]](f16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FMUL1]](f16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FMUL2]](f16)
    ; GFX9-UNSAFE-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST14]](i16)
    ; GFX9-UNSAFE-NEXT: [[ANYEXT1:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST15]](i16)
    ; GFX9-UNSAFE-NEXT: [[ANYEXT2:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST16]](i16)
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[ANYEXT]](i32), [[ANYEXT1]](i32), [[ANYEXT2]](i32)
    ; GFX9-UNSAFE-NEXT: S_NOP 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    %0:_(<3 x f16>) = G_IMPLICIT_DEF
    %1:_(<3 x f16>) = G_IMPLICIT_DEF
    %2:_(<3 x f16>) = G_FDIV %0, %1
    %3:_(<3 x i16>) = G_BITCAST %2(<3 x f16>)
    %4:_(<3 x i32>) = G_ANYEXT %3(<3 x i16>)
    S_NOP 0, implicit %4(<3 x i32>)
...

---
name: test_fdiv_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_fdiv_v4s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %89(i16)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %95(i16)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %90(i16)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %96(i16)
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; SI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; SI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; SI-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %100(i16)
    ; SI-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %105(i16)
    ; SI-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %101(i16)
    ; SI-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %106(i16)
    ; SI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; SI-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; SI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; SI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; SI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; SI-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; SI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; SI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST10]](f16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[FPEXT1]](f32), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT6]](f32)
    ; SI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; SI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; SI-NEXT: [[INT7:%[0-9]+]]:_(f32), [[INT8:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT2]](f32), [[FPEXT3]](f32), 0
    ; SI-NEXT: [[INT9:%[0-9]+]]:_(f32), [[INT10:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT2]](f32), [[FPEXT3]](f32), 1
    ; SI-NEXT: [[INT11:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT7]](f32)
    ; SI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[INT7]]
    ; SI-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[INT11]], [[C1]]
    ; SI-NEXT: [[FMA6:%[0-9]+]]:_(f32) = G_FMA [[FMA5]], [[INT11]], [[INT11]]
    ; SI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[INT9]], [[FMA6]]
    ; SI-NEXT: [[FMA7:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMUL1]], [[INT9]]
    ; SI-NEXT: [[FMA8:%[0-9]+]]:_(f32) = G_FMA [[FMA7]], [[FMA6]], [[FMUL1]]
    ; SI-NEXT: [[FMA9:%[0-9]+]]:_(f32) = G_FMA [[FNEG1]], [[FMA8]], [[INT9]]
    ; SI-NEXT: [[INT12:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA9]](f32), [[FMA6]](f32), [[FMA8]](f32), [[INT10]](i1)
    ; SI-NEXT: [[INT13:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT12]](f32), [[FPEXT3]](f32), [[FPEXT2]](f32)
    ; SI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT13]](f32)
    ; SI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; SI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; SI-NEXT: [[INT14:%[0-9]+]]:_(f32), [[INT15:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT4]](f32), [[FPEXT5]](f32), 0
    ; SI-NEXT: [[INT16:%[0-9]+]]:_(f32), [[INT17:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT4]](f32), [[FPEXT5]](f32), 1
    ; SI-NEXT: [[INT18:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT14]](f32)
    ; SI-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[INT14]]
    ; SI-NEXT: [[FMA10:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[INT18]], [[C1]]
    ; SI-NEXT: [[FMA11:%[0-9]+]]:_(f32) = G_FMA [[FMA10]], [[INT18]], [[INT18]]
    ; SI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[INT16]], [[FMA11]]
    ; SI-NEXT: [[FMA12:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMUL2]], [[INT16]]
    ; SI-NEXT: [[FMA13:%[0-9]+]]:_(f32) = G_FMA [[FMA12]], [[FMA11]], [[FMUL2]]
    ; SI-NEXT: [[FMA14:%[0-9]+]]:_(f32) = G_FMA [[FNEG2]], [[FMA13]], [[INT16]]
    ; SI-NEXT: [[INT19:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA14]](f32), [[FMA11]](f32), [[FMA13]](f32), [[INT17]](i1)
    ; SI-NEXT: [[INT20:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT19]](f32), [[FPEXT5]](f32), [[FPEXT4]](f32)
    ; SI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT20]](f32)
    ; SI-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; SI-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; SI-NEXT: [[INT21:%[0-9]+]]:_(f32), [[INT22:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT6]](f32), [[FPEXT7]](f32), 0
    ; SI-NEXT: [[INT23:%[0-9]+]]:_(f32), [[INT24:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT6]](f32), [[FPEXT7]](f32), 1
    ; SI-NEXT: [[INT25:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT21]](f32)
    ; SI-NEXT: [[FNEG3:%[0-9]+]]:_(f32) = G_FNEG [[INT21]]
    ; SI-NEXT: [[FMA15:%[0-9]+]]:_(f32) = G_FMA [[FNEG3]], [[INT25]], [[C1]]
    ; SI-NEXT: [[FMA16:%[0-9]+]]:_(f32) = G_FMA [[FMA15]], [[INT25]], [[INT25]]
    ; SI-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[INT23]], [[FMA16]]
    ; SI-NEXT: [[FMA17:%[0-9]+]]:_(f32) = G_FMA [[FNEG3]], [[FMUL3]], [[INT23]]
    ; SI-NEXT: [[FMA18:%[0-9]+]]:_(f32) = G_FMA [[FMA17]], [[FMA16]], [[FMUL3]]
    ; SI-NEXT: [[FMA19:%[0-9]+]]:_(f32) = G_FMA [[FNEG3]], [[FMA18]], [[INT23]]
    ; SI-NEXT: [[INT26:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA19]](f32), [[FMA16]](f32), [[FMA18]](f32), [[INT24]](i1)
    ; SI-NEXT: [[INT27:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT26]](f32), [[FPEXT7]](f32), [[FPEXT6]](f32)
    ; SI-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT27]](f32)
    ; SI-NEXT: [[BITCAST18:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[BITCAST19:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; SI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST18]](i16)
    ; SI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST19]](i16)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; SI-NEXT: [[BITCAST20:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[BITCAST21:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC2]](f16)
    ; SI-NEXT: [[BITCAST22:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; SI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST21]](i16)
    ; SI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST22]](i16)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; SI-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST20]](<2 x f16>), [[BITCAST23]](<2 x f16>)
    ; SI-NEXT: [[BITCAST24:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST24]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_fdiv_v4s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %93(i16)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %99(i16)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %94(i16)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %100(i16)
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; VI-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; VI-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %104(i16)
    ; VI-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %109(i16)
    ; VI-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %105(i16)
    ; VI-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %110(i16)
    ; VI-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; VI-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; VI-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; VI-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; VI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; VI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST10]](f16)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; VI-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; VI-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; VI-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; VI-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; VI-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; VI-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; VI-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; VI-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST18]], [[C1]]
    ; VI-NEXT: [[BITCAST19:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; VI-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST19]], [[FADD1]]
    ; VI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; VI-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST10]](f16), [[BITCAST2]](f16)
    ; VI-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; VI-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; VI-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT3]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT3]](f32)
    ; VI-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT2]], [[INT2]]
    ; VI-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FMUL5]]
    ; VI-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FPEXT2]]
    ; VI-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[FADD4]], [[INT2]]
    ; VI-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FMUL5]]
    ; VI-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FADD5]]
    ; VI-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL8]], [[FPEXT2]]
    ; VI-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FADD6]], [[INT2]]
    ; VI-NEXT: [[BITCAST20:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL9]](f32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST20]], [[C1]]
    ; VI-NEXT: [[BITCAST21:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; VI-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[BITCAST21]], [[FADD5]]
    ; VI-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC1]](f16), [[BITCAST12]](f16), [[BITCAST4]](f16)
    ; VI-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; VI-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; VI-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT5]]
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT5]](f32)
    ; VI-NEXT: [[FMUL10:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[INT4]]
    ; VI-NEXT: [[FMUL11:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FMUL10]]
    ; VI-NEXT: [[FADD8:%[0-9]+]]:_(f32) = G_FADD [[FMUL11]], [[FPEXT4]]
    ; VI-NEXT: [[FMUL12:%[0-9]+]]:_(f32) = G_FMUL [[FADD8]], [[INT4]]
    ; VI-NEXT: [[FADD9:%[0-9]+]]:_(f32) = G_FADD [[FMUL12]], [[FMUL10]]
    ; VI-NEXT: [[FMUL13:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FADD9]]
    ; VI-NEXT: [[FADD10:%[0-9]+]]:_(f32) = G_FADD [[FMUL13]], [[FPEXT4]]
    ; VI-NEXT: [[FMUL14:%[0-9]+]]:_(f32) = G_FMUL [[FADD10]], [[INT4]]
    ; VI-NEXT: [[BITCAST22:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL14]](f32)
    ; VI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST22]], [[C1]]
    ; VI-NEXT: [[BITCAST23:%[0-9]+]]:_(f32) = G_BITCAST [[AND2]](i32)
    ; VI-NEXT: [[FADD11:%[0-9]+]]:_(f32) = G_FADD [[BITCAST23]], [[FADD9]]
    ; VI-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD11]](f32)
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC2]](f16), [[BITCAST11]](f16), [[BITCAST3]](f16)
    ; VI-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; VI-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; VI-NEXT: [[FNEG3:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT7]]
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT7]](f32)
    ; VI-NEXT: [[FMUL15:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT6]], [[INT6]]
    ; VI-NEXT: [[FMUL16:%[0-9]+]]:_(f32) = G_FMUL [[FNEG3]], [[FMUL15]]
    ; VI-NEXT: [[FADD12:%[0-9]+]]:_(f32) = G_FADD [[FMUL16]], [[FPEXT6]]
    ; VI-NEXT: [[FMUL17:%[0-9]+]]:_(f32) = G_FMUL [[FADD12]], [[INT6]]
    ; VI-NEXT: [[FADD13:%[0-9]+]]:_(f32) = G_FADD [[FMUL17]], [[FMUL15]]
    ; VI-NEXT: [[FMUL18:%[0-9]+]]:_(f32) = G_FMUL [[FNEG3]], [[FADD13]]
    ; VI-NEXT: [[FADD14:%[0-9]+]]:_(f32) = G_FADD [[FMUL18]], [[FPEXT6]]
    ; VI-NEXT: [[FMUL19:%[0-9]+]]:_(f32) = G_FMUL [[FADD14]], [[INT6]]
    ; VI-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL19]](f32)
    ; VI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST24]], [[C1]]
    ; VI-NEXT: [[BITCAST25:%[0-9]+]]:_(f32) = G_BITCAST [[AND3]](i32)
    ; VI-NEXT: [[FADD15:%[0-9]+]]:_(f32) = G_FADD [[BITCAST25]], [[FADD13]]
    ; VI-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD15]](f32)
    ; VI-NEXT: [[INT7:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC3]](f16), [[BITCAST13]](f16), [[BITCAST5]](f16)
    ; VI-NEXT: [[BITCAST26:%[0-9]+]]:_(i16) = G_BITCAST [[INT1]](f16)
    ; VI-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[INT3]](f16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST26]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST28:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[BITCAST29:%[0-9]+]]:_(i16) = G_BITCAST [[INT5]](f16)
    ; VI-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[INT7]](f16)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST29]](i16)
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST31:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST28]](<2 x f16>), [[BITCAST31]](<2 x f16>)
    ; VI-NEXT: [[BITCAST32:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST32]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_fdiv_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %93(i16)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %99(i16)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %94(i16)
    ; GFX9-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %100(i16)
    ; GFX9-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX9-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %104(i16)
    ; GFX9-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %109(i16)
    ; GFX9-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %105(i16)
    ; GFX9-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %110(i16)
    ; GFX9-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX9-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST10]](f16)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT1]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT1]](f32)
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[INT]]
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FMUL]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FADD]], [[INT]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL]]
    ; GFX9-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FNEG]], [[FADD1]]
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FPEXT]]
    ; GFX9-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[FADD2]], [[INT]]
    ; GFX9-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL4]](f32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -8388608
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST18]], [[C1]]
    ; GFX9-NEXT: [[BITCAST19:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX9-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[BITCAST19]], [[FADD1]]
    ; GFX9-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC]](f16), [[BITCAST10]](f16), [[BITCAST2]](f16)
    ; GFX9-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX9-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT3]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT3]](f32)
    ; GFX9-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT2]], [[INT2]]
    ; GFX9-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FMUL5]]
    ; GFX9-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FPEXT2]]
    ; GFX9-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[FADD4]], [[INT2]]
    ; GFX9-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FMUL5]]
    ; GFX9-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[FNEG1]], [[FADD5]]
    ; GFX9-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL8]], [[FPEXT2]]
    ; GFX9-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FADD6]], [[INT2]]
    ; GFX9-NEXT: [[BITCAST20:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL9]](f32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST20]], [[C1]]
    ; GFX9-NEXT: [[BITCAST21:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; GFX9-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[BITCAST21]], [[FADD5]]
    ; GFX9-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD7]](f32)
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC1]](f16), [[BITCAST12]](f16), [[BITCAST4]](f16)
    ; GFX9-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX9-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX9-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT5]]
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT5]](f32)
    ; GFX9-NEXT: [[FMUL10:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL11:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FMUL10]]
    ; GFX9-NEXT: [[FADD8:%[0-9]+]]:_(f32) = G_FADD [[FMUL11]], [[FPEXT4]]
    ; GFX9-NEXT: [[FMUL12:%[0-9]+]]:_(f32) = G_FMUL [[FADD8]], [[INT4]]
    ; GFX9-NEXT: [[FADD9:%[0-9]+]]:_(f32) = G_FADD [[FMUL12]], [[FMUL10]]
    ; GFX9-NEXT: [[FMUL13:%[0-9]+]]:_(f32) = G_FMUL [[FNEG2]], [[FADD9]]
    ; GFX9-NEXT: [[FADD10:%[0-9]+]]:_(f32) = G_FADD [[FMUL13]], [[FPEXT4]]
    ; GFX9-NEXT: [[FMUL14:%[0-9]+]]:_(f32) = G_FMUL [[FADD10]], [[INT4]]
    ; GFX9-NEXT: [[BITCAST22:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL14]](f32)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST22]], [[C1]]
    ; GFX9-NEXT: [[BITCAST23:%[0-9]+]]:_(f32) = G_BITCAST [[AND2]](i32)
    ; GFX9-NEXT: [[FADD11:%[0-9]+]]:_(f32) = G_FADD [[BITCAST23]], [[FADD9]]
    ; GFX9-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD11]](f32)
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC2]](f16), [[BITCAST11]](f16), [[BITCAST3]](f16)
    ; GFX9-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX9-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; GFX9-NEXT: [[FNEG3:%[0-9]+]]:_(f32) = G_FNEG [[FPEXT7]]
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FPEXT7]](f32)
    ; GFX9-NEXT: [[FMUL15:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT6]], [[INT6]]
    ; GFX9-NEXT: [[FMUL16:%[0-9]+]]:_(f32) = G_FMUL [[FNEG3]], [[FMUL15]]
    ; GFX9-NEXT: [[FADD12:%[0-9]+]]:_(f32) = G_FADD [[FMUL16]], [[FPEXT6]]
    ; GFX9-NEXT: [[FMUL17:%[0-9]+]]:_(f32) = G_FMUL [[FADD12]], [[INT6]]
    ; GFX9-NEXT: [[FADD13:%[0-9]+]]:_(f32) = G_FADD [[FMUL17]], [[FMUL15]]
    ; GFX9-NEXT: [[FMUL18:%[0-9]+]]:_(f32) = G_FMUL [[FNEG3]], [[FADD13]]
    ; GFX9-NEXT: [[FADD14:%[0-9]+]]:_(f32) = G_FADD [[FMUL18]], [[FPEXT6]]
    ; GFX9-NEXT: [[FMUL19:%[0-9]+]]:_(f32) = G_FMUL [[FADD14]], [[INT6]]
    ; GFX9-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[FMUL19]](f32)
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST24]], [[C1]]
    ; GFX9-NEXT: [[BITCAST25:%[0-9]+]]:_(f32) = G_BITCAST [[AND3]](i32)
    ; GFX9-NEXT: [[FADD15:%[0-9]+]]:_(f32) = G_FADD [[BITCAST25]], [[FADD13]]
    ; GFX9-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD15]](f32)
    ; GFX9-NEXT: [[INT7:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[FPTRUNC3]](f16), [[BITCAST13]](f16), [[BITCAST5]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[INT1]](f16), [[INT3]](f16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[INT5]](f16), [[INT7]](f16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX9-NEXT: [[BITCAST26:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST26]](<4 x i16>)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_v4s16
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX9-UNSAFE-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %28(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %34(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %35(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-UNSAFE-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST9:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST8]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST9]](i32)
    ; GFX9-UNSAFE-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST9]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-UNSAFE-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST10:%[0-9]+]]:_(f16) = G_BITCAST %39(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %44(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %40(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %45(i16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST14:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST15:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST14]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST15]](i32)
    ; GFX9-UNSAFE-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST15]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST16:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST17:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST16]](<2 x i16>)
    ; GFX9-UNSAFE-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST17]](i32)
    ; GFX9-UNSAFE-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST17]], [[C]](i32)
    ; GFX9-UNSAFE-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST10]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST2]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[INT1:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST12]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST4]], [[INT1]]
    ; GFX9-UNSAFE-NEXT: [[INT2:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST11]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[INT2]]
    ; GFX9-UNSAFE-NEXT: [[INT3:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST13]](f16)
    ; GFX9-UNSAFE-NEXT: [[FMUL3:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[INT3]]
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FMUL]](f16), [[FMUL1]](f16)
    ; GFX9-UNSAFE-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FMUL2]](f16), [[FMUL3]](f16)
    ; GFX9-UNSAFE-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX9-UNSAFE-NEXT: [[BITCAST18:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST18]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %3:_(<4 x f16>) = G_BITCAST %1(<4 x i16>)
    %4:_(<4 x f16>) = G_FDIV %2, %3
    %5:_(<4 x i16>) = G_BITCAST %4(<4 x f16>)
    $vgpr0_vgpr1 = COPY %5(<4 x i16>)
...

---
name: test_fdiv_s16_constant_one_rcp
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fdiv_s16_constant_one_rcp
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xH3C00
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[C]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[FPEXT1]](f32), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT6]](f32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s16_constant_one_rcp
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s16_constant_one_rcp
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s16_constant_one_rcp
    ; GFX9-UNSAFE: liveins: $vgpr0
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GFX9-UNSAFE-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s16_constant_one_rcp
    ; GFX10: liveins: $vgpr0
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GFX10-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX10-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(f16) = G_FCONSTANT half 0xH3C00
    %1:_(i32) = COPY $vgpr0
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(f16) = G_BITCAST %2(i16)
    %4:_(f16) = G_FDIV %0, %3
    %5:_(i16) = G_BITCAST %4(f16)
    %6:_(i32) = G_ANYEXT %5(i16)
    $vgpr0 = COPY %6(i32)
...

---
name: test_fdiv_s16_constant_negative_one_rcp
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fdiv_s16_constant_negative_one_rcp
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[C:%[0-9]+]]:_(f16) = G_FCONSTANT half 0xHBC00
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; SI-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[C]](f16)
    ; SI-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[FPEXT]](f32), [[FPEXT1]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[FPEXT1]](f32), [[FPEXT]](f32)
    ; SI-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT6]](f32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; SI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; SI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s16_constant_negative_one_rcp
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FNEG]](f16)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s16_constant_negative_one_rcp
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FNEG]](f16)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s16_constant_negative_one_rcp
    ; GFX9-UNSAFE: liveins: $vgpr0
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-UNSAFE-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FNEG]](f16)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GFX9-UNSAFE-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s16_constant_negative_one_rcp
    ; GFX10: liveins: $vgpr0
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f16) = G_FNEG [[BITCAST]]
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FNEG]](f16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[INT]](f16)
    ; GFX10-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX10-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(f16) = G_FCONSTANT half 0xHBC00
    %1:_(i32) = COPY $vgpr0
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(f16) = G_BITCAST %2(i16)
    %4:_(f16) = G_FDIV %0, %3
    %5:_(i16) = G_BITCAST %4(f16)
    %6:_(i32) = G_ANYEXT %5(i16)
    $vgpr0 = COPY %6(i32)
...

---
name: test_fdiv_s32_constant_one_rcp
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fdiv_s32_constant_one_rcp
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s32_constant_one_rcp
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s32_constant_one_rcp
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s32_constant_one_rcp
    ; GFX9-UNSAFE: liveins: $vgpr0
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s32_constant_one_rcp
    ; GFX10: liveins: $vgpr0
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(f32) = G_FCONSTANT float 1.000000e+00
    %1:_(i32) = COPY $vgpr0
    %2:_(f32) = G_BITCAST %1(i32)
    %3:_(f32) = G_FDIV %0, %2
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...

---
name: test_fdiv_s32_constant_negative_one_rcp
body: |
  bb.0:
    liveins: $vgpr0

    ; SI-LABEL: name: test_fdiv_s32_constant_negative_one_rcp
    ; SI: liveins: $vgpr0
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float -1.000000e+00
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; SI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; VI-LABEL: name: test_fdiv_s32_constant_negative_one_rcp
    ; VI: liveins: $vgpr0
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float -1.000000e+00
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; VI-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX9-LABEL: name: test_fdiv_s32_constant_negative_one_rcp
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float -1.000000e+00
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; GFX9-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s32_constant_negative_one_rcp
    ; GFX9-UNSAFE: liveins: $vgpr0
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-UNSAFE-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[BITCAST]]
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[FNEG]](f32)
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT]](f32)
    ; GFX9-UNSAFE-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX10-LABEL: name: test_fdiv_s32_constant_negative_one_rcp
    ; GFX10: liveins: $vgpr0
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float -1.000000e+00
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX10-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f32), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 0
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f32), [[INT3:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f32), [[BITCAST]](f32), 1
    ; GFX10-NEXT: [[INT4:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f32)
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[INT4]], [[C1]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[FMA]], [[INT4]], [[INT4]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[INT2]], [[FMA1]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMUL]], [[INT2]]
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[FMA2]], [[FMA1]], [[FMUL]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[FNEG]], [[FMA3]], [[INT2]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f32), [[FMA1]](f32), [[FMA3]](f32), [[INT3]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f32), [[BITCAST]](f32), [[C]](f32)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[INT6]](f32)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(f32) = G_FCONSTANT float -1.000000e+00
    %1:_(i32) = COPY $vgpr0
    %2:_(f32) = G_BITCAST %1(i32)
    %3:_(f32) = G_FDIV %0, %2
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...

---
name: test_fdiv_s64_constant_one_rcp
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
    fp64-fp16-output-denormals: true
    fp64-fp16-input-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_fdiv_s64_constant_one_rcp
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; SI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[C]](f64)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST1]](i64)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST2]](i64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[INT]](f64)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](i64)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[INT3]](f64)
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST4]](i64)
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV1]](i32), [[UV7]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV3]](i32), [[UV5]]
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i1) = G_XOR [[ICMP]], [[ICMP1]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[XOR]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; VI-LABEL: name: test_fdiv_s64_constant_one_rcp
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    ;
    ; GFX9-LABEL: name: test_fdiv_s64_constant_one_rcp
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s64_constant_one_rcp
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-UNSAFE-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST]]
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f64)
    ; GFX9-UNSAFE-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMA]], [[INT]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA2]], [[FMA1]], [[FMA1]]
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[C]], [[FMA3]]
    ; GFX9-UNSAFE-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FMA4]], [[FMA3]], [[FMUL]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FMA5]](f64)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    ;
    ; GFX10-LABEL: name: test_fdiv_s64_constant_one_rcp
    ; GFX10: liveins: $vgpr0_vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C]]
    ; GFX10-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(f64) = G_FCONSTANT double 1.000000e+00
    %1:_(i64) = COPY $vgpr0_vgpr1
    %2:_(f64) = G_BITCAST %1(i64)
    %3:_(f64) = G_FDIV %0, %2
    %4:_(i64) = G_BITCAST %3(f64)
    $vgpr0_vgpr1 = COPY %4(i64)
...

---
name: test_fdiv_s64_constant_negative_one_rcp
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; SI-LABEL: name: test_fdiv_s64_constant_negative_one_rcp
    ; SI: liveins: $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double -1.000000e+00
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; SI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; SI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; SI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; SI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C1]]
    ; SI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; SI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C1]]
    ; SI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; SI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; SI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; SI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[C]](f64)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST1]](i64)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i64) = G_BITCAST [[BITCAST]](f64)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST2]](i64)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i64) = G_BITCAST [[INT]](f64)
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST3]](i64)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i64) = G_BITCAST [[INT3]](f64)
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(i32), [[UV7:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[BITCAST4]](i64)
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV1]](i32), [[UV7]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV3]](i32), [[UV5]]
    ; SI-NEXT: [[XOR:%[0-9]+]]:_(i1) = G_XOR [[ICMP]], [[ICMP1]]
    ; SI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[XOR]](i1)
    ; SI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](i64)
    ;
    ; VI-LABEL: name: test_fdiv_s64_constant_negative_one_rcp
    ; VI: liveins: $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double -1.000000e+00
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; VI-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; VI-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; VI-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; VI-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C1]]
    ; VI-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; VI-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C1]]
    ; VI-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; VI-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; VI-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; VI-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; VI-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; VI-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    ;
    ; GFX9-LABEL: name: test_fdiv_s64_constant_negative_one_rcp
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double -1.000000e+00
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C1]]
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C1]]
    ; GFX9-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX9-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX9-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    ;
    ; GFX9-UNSAFE-LABEL: name: test_fdiv_s64_constant_negative_one_rcp
    ; GFX9-UNSAFE: liveins: $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: {{  $}}
    ; GFX9-UNSAFE-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double -1.000000e+00
    ; GFX9-UNSAFE-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-UNSAFE-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX9-UNSAFE-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[BITCAST]]
    ; GFX9-UNSAFE-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX9-UNSAFE-NEXT: [[INT:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f64)
    ; GFX9-UNSAFE-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT]], [[C1]]
    ; GFX9-UNSAFE-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[FMA]], [[INT]], [[INT]]
    ; GFX9-UNSAFE-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C1]]
    ; GFX9-UNSAFE-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA2]], [[FMA1]], [[FMA1]]
    ; GFX9-UNSAFE-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[C]], [[FMA3]]
    ; GFX9-UNSAFE-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[C]]
    ; GFX9-UNSAFE-NEXT: [[FMA5:%[0-9]+]]:_(f64) = G_FMA [[FMA4]], [[FMA3]], [[FMUL]]
    ; GFX9-UNSAFE-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FMA5]](f64)
    ; GFX9-UNSAFE-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    ;
    ; GFX10-LABEL: name: test_fdiv_s64_constant_negative_one_rcp
    ; GFX10: liveins: $vgpr0_vgpr1
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(f64) = G_FCONSTANT double -1.000000e+00
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f64) = G_BITCAST [[COPY]](i64)
    ; GFX10-NEXT: [[C1:%[0-9]+]]:_(f64) = G_FCONSTANT double 1.000000e+00
    ; GFX10-NEXT: [[INT:%[0-9]+]]:_(f64), [[INT1:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 0
    ; GFX10-NEXT: [[FNEG:%[0-9]+]]:_(f64) = G_FNEG [[INT]]
    ; GFX10-NEXT: [[INT2:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[INT]](f64)
    ; GFX10-NEXT: [[FMA:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[INT2]], [[C1]]
    ; GFX10-NEXT: [[FMA1:%[0-9]+]]:_(f64) = G_FMA [[INT2]], [[FMA]], [[INT2]]
    ; GFX10-NEXT: [[FMA2:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMA1]], [[C1]]
    ; GFX10-NEXT: [[INT3:%[0-9]+]]:_(f64), [[INT4:%[0-9]+]]:_(i1) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.scale), [[C]](f64), [[BITCAST]](f64), 1
    ; GFX10-NEXT: [[FMA3:%[0-9]+]]:_(f64) = G_FMA [[FMA1]], [[FMA2]], [[FMA1]]
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f64) = G_FMUL [[INT3]], [[FMA3]]
    ; GFX10-NEXT: [[FMA4:%[0-9]+]]:_(f64) = G_FMA [[FNEG]], [[FMUL]], [[INT3]]
    ; GFX10-NEXT: [[INT5:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[FMA4]](f64), [[FMA3]](f64), [[FMUL]](f64), [[INT4]](i1)
    ; GFX10-NEXT: [[INT6:%[0-9]+]]:_(f64) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fixup), [[INT5]](f64), [[BITCAST]](f64), [[C]](f64)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[INT6]](f64)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(f64) = G_FCONSTANT double -1.000000e+00
    %1:_(i64) = COPY $vgpr0_vgpr1
    %2:_(f64) = G_BITCAST %1(i64)
    %3:_(f64) = G_FDIV %0, %2
    %4:_(i64) = G_BITCAST %3(f64)
    $vgpr0_vgpr1 = COPY %4(i64)
...
