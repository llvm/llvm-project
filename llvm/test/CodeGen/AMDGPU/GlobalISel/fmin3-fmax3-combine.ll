; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -global-isel -mtriple=amdgcn-amd-mesa3d -mcpu=gfx1010 -verify-machineinstrs < %s | FileCheck -check-prefix=GFX10 %s

define float @test_fmin3(float %a, float %b, float %c) {
; GFX10-LABEL: test_fmin3:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_max_f32_e32 v0, v0, v0
; GFX10-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX10-NEXT:    v_max_f32_e32 v2, v2, v2
; GFX10-NEXT:    v_min3_f32 v0, v0, v1, v2
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %min1 = call float @llvm.minnum.f32(float %a, float %b)
  %min2 = call float @llvm.minnum.f32(float %min1, float %c)
  ret float %min2
}

define float @test_fmin3_nnan(float %a, float %b, float %c) {
; GFX10-LABEL: test_fmin3_nnan:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_min3_f32 v0, v0, v1, v2
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %min1 = call nnan float @llvm.minnum.f32(float %a, float %b)
  %min2 = call nnan float @llvm.minnum.f32(float %min1, float %c)
  ret float %min2
}

define float @test_fmin3_with_constants_nnan(float %a, float %b) {
; GFX10-LABEL: test_fmin3_with_constants_nnan:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_min3_f32 v0, v0, v1, 0x40e00000
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %min1 = call nnan float @llvm.minnum.f32(float %a, float %b)
  %min2 = call nnan float @llvm.minnum.f32(float %min1, float 7.0)
  ret float %min2
}

define <2 x float> @test_fmin3_v2f32_nnan(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; GFX10-LABEL: test_fmin3_v2f32_nnan:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_min3_f32 v0, v0, v2, v4
; GFX10-NEXT:    v_min3_f32 v1, v1, v3, v5
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %min1 = call nnan <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)
  %min2 = call nnan <2 x float> @llvm.minnum.v2f32(<2 x float> %min1, <2 x float> %c)
  ret <2 x float> %min2
}

define float @test_fmax3(float %a, float %b, float %c) {
; GFX10-LABEL: test_fmax3:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_max_f32_e32 v0, v0, v0
; GFX10-NEXT:    v_max_f32_e32 v1, v1, v1
; GFX10-NEXT:    v_max_f32_e32 v2, v2, v2
; GFX10-NEXT:    v_max3_f32 v0, v0, v1, v2
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %max1 = call float @llvm.maxnum.f32(float %a, float %b)
  %max2 = call float @llvm.maxnum.f32(float %max1, float %c)
  ret float %max2
}

define float @test_fmax3_nnan(float %a, float %b, float %c) {
; GFX10-LABEL: test_fmax3_nnan:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_max3_f32 v0, v0, v1, v2
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %max1 = call nnan float @llvm.maxnum.f32(float %a, float %b)
  %max2 = call nnan float @llvm.maxnum.f32(float %max1, float %c)
  ret float %max2
}

define float @test_fmax3_with_constants_nnan(float %a, float %b) {
; GFX10-LABEL: test_fmax3_with_constants_nnan:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_max3_f32 v0, v0, v1, 0x40e00000
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %max1 = call nnan float @llvm.maxnum.f32(float %a, float %b)
  %max2 = call nnan float @llvm.maxnum.f32(float %max1, float 7.0)
  ret float %max2
}

define <2 x float> @test_fmax3_v2f32_nnan(<2 x float> %a, <2 x float> %b, <2 x float> %c) {
; GFX10-LABEL: test_fmax3_v2f32_nnan:
; GFX10:       ; %bb.0:
; GFX10-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX10-NEXT:    v_max3_f32 v0, v0, v2, v4
; GFX10-NEXT:    v_max3_f32 v1, v1, v3, v5
; GFX10-NEXT:    s_setpc_b64 s[30:31]
  %min1 = call nnan <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)
  %min2 = call nnan <2 x float> @llvm.maxnum.v2f32(<2 x float> %min1, <2 x float> %c)
  ret <2 x float> %min2
}

declare float @llvm.minnum.f32(float, float)
declare float @llvm.maxnum.f32(float, float)
declare <2 x float> @llvm.minnum.v2f32(<2 x float> %a, <2 x float> %b)
declare <2 x float> @llvm.maxnum.v2f32(<2 x float> %a, <2 x float> %b)
