# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-fast | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-greedy | FileCheck %s

---
name: brcond_vcc_cond
legalized: true
body:             |
  ; CHECK-LABEL: name: brcond_vcc_cond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0, $vgpr1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(ne), [[COPY]](i32), [[COPY1]]
  ; CHECK-NEXT:   G_BRCOND [[ICMP]](i1), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0, $vgpr1

    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(i32), %1
    G_BRCOND %2(i1), %bb.1

  bb.1:

...

---
name: brcond_scc_cond
legalized: true
body:             |
  ; CHECK-LABEL: name: brcond_scc_cond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $sgpr0, $sgpr1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
  ; CHECK-NEXT:   [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(ne), [[COPY]](i32), [[COPY1]]
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:sgpr(i1) = G_TRUNC [[ICMP]](i32)
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:sgpr(i32) = G_ZEXT [[TRUNC]](i1)
  ; CHECK-NEXT:   G_BRCOND [[ZEXT]](i32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $sgpr0, $sgpr1

    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i1) = G_ICMP intpred(ne), %0(i32), %1
    G_BRCOND %2(i1), %bb.1

  bb.1:

...

---
name: brcond_sgpr_cond
legalized: true
body:             |
  ; CHECK-LABEL: name: brcond_sgpr_cond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $sgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:sgpr(i1) = G_TRUNC [[COPY]](i32)
  ; CHECK-NEXT:   [[ZEXT:%[0-9]+]]:sgpr(i32) = G_ZEXT [[TRUNC]](i1)
  ; CHECK-NEXT:   G_BRCOND [[ZEXT]](i32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $sgpr0

    %0:_(i32) = COPY $sgpr0
    %1:_(i1) = G_TRUNC %0(i32)
    G_BRCOND %1(i1), %bb.1

  bb.1:

...

---
name: brcond_vgpr_cond
legalized: true
body:             |
  ; CHECK-LABEL: name: brcond_vgpr_cond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:vgpr(i1) = G_TRUNC [[COPY]](i32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vcc(i1) = COPY [[TRUNC]](i1)
  ; CHECK-NEXT:   G_BRCOND [[COPY1]](i1), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0

    %0:_(i32) = COPY $vgpr0
    %1:_(i1) = G_TRUNC %0(i32)
    G_BRCOND %1(i1), %bb.1

  bb.1:

...


# The terminator that needs handling is the only instruction in the
# block.

---
name: empty_block_vgpr_brcond
legalized: true
body:             |
  ; CHECK-LABEL: name: empty_block_vgpr_brcond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:vgpr(i1) = G_TRUNC [[COPY]](i32)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vcc(i1) = COPY [[TRUNC]](i1)
  ; CHECK-NEXT:   G_BRCOND [[COPY1]](i1), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0

    %0:_(i32) = COPY $vgpr0
    %1:_(i1) = G_TRUNC %0(i32)

  bb.1:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    G_BRCOND %1(i1), %bb.1

  bb.2:


...


# Make sure the first instruction in the block isn't skipped.
---
name: copy_first_inst_brcond
legalized: true
body:             |
  ; CHECK-LABEL: name: copy_first_inst_brcond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:vgpr(i1) = G_TRUNC [[COPY]](i32)
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vcc(i1) = COPY [[TRUNC]](i1)
  ; CHECK-NEXT:   G_BRCOND [[COPY1]](i1), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0

    %0:_(i32) = COPY $vgpr0

  bb.1:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    %1:_(i1) = G_TRUNC %0(i32)
    G_BRCOND %1(i1), %bb.1

  bb.2:


...

# Extra instruction separates brcond from the condition def
---
name: copy_middle_inst_brcond
legalized: true
body:             |
  ; CHECK-LABEL: name: copy_middle_inst_brcond
  ; CHECK: bb.0.entry:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $vgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:vgpr(i1) = G_TRUNC [[COPY]](i32)
  ; CHECK-NEXT:   S_NOP 0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:vcc(i1) = COPY [[TRUNC]](i1)
  ; CHECK-NEXT:   G_BRCOND [[COPY1]](i1), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  bb.0.entry:
    successors: %bb.1(0x80000000)
    liveins: $vgpr0

    %0:_(i32) = COPY $vgpr0

  bb.1:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)

    %1:_(i1) = G_TRUNC %0(i32)
    S_NOP 0
    G_BRCOND %1(i1), %bb.1

  bb.2:


...
