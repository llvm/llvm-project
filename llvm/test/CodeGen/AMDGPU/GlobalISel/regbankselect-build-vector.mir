# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=gfx908 -run-pass=regbankselect -regbankselect-fast -verify-machineinstrs -o - %s | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx908 -run-pass=regbankselect -regbankselect-greedy -verify-machineinstrs -o - %s | FileCheck %s

---
name: build_vector_v2s32_ss
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1
    ; CHECK-LABEL: name: build_vector_v2s32_ss
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:sgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
...

---
name: build_vector_v2s32_sv
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $vgpr0
    ; CHECK-LABEL: name: build_vector_v2s32_sv
    ; CHECK: liveins: $sgpr0, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY2]](i32), [[COPY1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $vgpr0
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
...

---
name: build_vector_v2s32_vs
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $sgpr0
    ; CHECK-LABEL: name: build_vector_v2s32_vs
    ; CHECK: liveins: $vgpr0, $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY2]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $sgpr0
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
...

---
name: build_vector_v2s32_vv
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: build_vector_v2s32_vv
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
...

---
name: build_vector_v2s32_aa
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $agpr0, $agpr1

    ; CHECK-LABEL: name: build_vector_v2s32_aa
    ; CHECK: liveins: $agpr0, $agpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr1
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:agpr(<2 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $agpr1
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: build_vector_v2s32_va
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $agpr0

    ; CHECK-LABEL: name: build_vector_v2s32_va
    ; CHECK: liveins: $vgpr0, $agpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY2]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $agpr0
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: build_vector_v2s32_av
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $agpr0

    ; CHECK-LABEL: name: build_vector_v2s32_av
    ; CHECK: liveins: $vgpr0, $agpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY2]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $vgpr0
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: build_vector_v2s32_sa
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $agpr0

    ; CHECK-LABEL: name: build_vector_v2s32_sa
    ; CHECK: liveins: $sgpr0, $agpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $agpr0
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: build_vector_v2s32_as
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $agpr0

    ; CHECK-LABEL: name: build_vector_v2s32_as
    ; CHECK: liveins: $sgpr0, $agpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:vgpr(<2 x i32>) = G_BUILD_VECTOR [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<2 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $sgpr0
    %2:_(<2 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(<2 x i32>)
...

---
name: build_vector_v3s32_aaa
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $agpr0, $agpr1, $agpr2

    ; CHECK-LABEL: name: build_vector_v3s32_aaa
    ; CHECK: liveins: $agpr0, $agpr1, $agpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:agpr(i32) = COPY $agpr2
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:agpr(<3 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32), [[COPY2]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<3 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $agpr1
    %2:_(i32) = COPY $agpr2
    %3:_(<3 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32), %2(i32)
    S_ENDPGM 0, implicit %3(<3 x i32>)
...

---
name: build_vector_v4s32_aaaa
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $agpr0, $agpr1, $agpr2

    ; CHECK-LABEL: name: build_vector_v4s32_aaaa
    ; CHECK: liveins: $agpr0, $agpr1, $agpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:agpr(i32) = COPY $agpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:agpr(i32) = COPY $agpr2
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:agpr(<4 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32), [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<4 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $agpr1
    %2:_(i32) = COPY $agpr2
    %3:_(i32) = COPY $agpr2
    %4:_(<4 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32), %2(i32), %3(i32)
    S_ENDPGM 0, implicit %4(<4 x i32>)
...

---
name: build_vector_v8s32_aaaaaaaa
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $agpr0, $agpr1, $agpr2, $agpr3, $agpr4, $agpr5, $agpr6, $agpr7

    ; CHECK-LABEL: name: build_vector_v8s32_aaaaaaaa
    ; CHECK: liveins: $agpr0, $agpr1, $agpr2, $agpr3, $agpr4, $agpr5, $agpr6, $agpr7
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:agpr(i32) = COPY $agpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:agpr(i32) = COPY $agpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:agpr(i32) = COPY $agpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:agpr(i32) = COPY $agpr5
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:agpr(i32) = COPY $agpr6
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:agpr(i32) = COPY $agpr7
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:agpr(<8 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32), [[COPY2]](i32), [[COPY3]](i32), [[COPY4]](i32), [[COPY5]](i32), [[COPY6]](i32), [[COPY7]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<8 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $agpr1
    %2:_(i32) = COPY $agpr2
    %3:_(i32) = COPY $agpr3
    %4:_(i32) = COPY $agpr4
    %5:_(i32) = COPY $agpr5
    %6:_(i32) = COPY $agpr6
    %7:_(i32) = COPY $agpr7
    %8:_(<8 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32), %2(i32), %3(i32), %4(i32), %5(i32), %6(i32), %7(i32)
    S_ENDPGM 0, implicit %8(<8 x i32>)
...

---
name: build_vector_v16s32_aaaaaaaaaaaaaaaa
tracksRegLiveness: true
legalized: true

body: |
  bb.0:
    liveins: $agpr0, $agpr1, $agpr2, $agpr3, $agpr4, $agpr5, $agpr6, $agpr7, $agpr8, $agpr9, $agpr10, $agpr11, $agpr12, $agpr13, $agpr14, $agpr15

    ; CHECK-LABEL: name: build_vector_v16s32_aaaaaaaaaaaaaaaa
    ; CHECK: liveins: $agpr0, $agpr1, $agpr2, $agpr3, $agpr4, $agpr5, $agpr6, $agpr7, $agpr8, $agpr9, $agpr10, $agpr11, $agpr12, $agpr13, $agpr14, $agpr15
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:agpr(i32) = COPY $agpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:agpr(i32) = COPY $agpr3
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:agpr(i32) = COPY $agpr4
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:agpr(i32) = COPY $agpr5
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:agpr(i32) = COPY $agpr6
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:agpr(i32) = COPY $agpr7
    ; CHECK-NEXT: [[COPY8:%[0-9]+]]:agpr(i32) = COPY $agpr8
    ; CHECK-NEXT: [[COPY9:%[0-9]+]]:agpr(i32) = COPY $agpr9
    ; CHECK-NEXT: [[COPY10:%[0-9]+]]:agpr(i32) = COPY $agpr10
    ; CHECK-NEXT: [[COPY11:%[0-9]+]]:agpr(i32) = COPY $agpr11
    ; CHECK-NEXT: [[COPY12:%[0-9]+]]:agpr(i32) = COPY $agpr12
    ; CHECK-NEXT: [[COPY13:%[0-9]+]]:agpr(i32) = COPY $agpr13
    ; CHECK-NEXT: [[COPY14:%[0-9]+]]:agpr(i32) = COPY $agpr14
    ; CHECK-NEXT: [[COPY15:%[0-9]+]]:agpr(i32) = COPY $agpr15
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:agpr(<16 x i32>) = G_BUILD_VECTOR [[COPY]](i32), [[COPY1]](i32), [[COPY2]](i32), [[COPY3]](i32), [[COPY4]](i32), [[COPY5]](i32), [[COPY6]](i32), [[COPY7]](i32), [[COPY8]](i32), [[COPY9]](i32), [[COPY10]](i32), [[COPY11]](i32), [[COPY12]](i32), [[COPY13]](i32), [[COPY14]](i32), [[COPY15]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[BUILD_VECTOR]](<16 x i32>)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $agpr1
    %2:_(i32) = COPY $agpr2
    %3:_(i32) = COPY $agpr3
    %4:_(i32) = COPY $agpr4
    %5:_(i32) = COPY $agpr5
    %6:_(i32) = COPY $agpr6
    %7:_(i32) = COPY $agpr7
    %8:_(i32) = COPY $agpr8
    %9:_(i32) = COPY $agpr9
    %10:_(i32) = COPY $agpr10
    %11:_(i32) = COPY $agpr11
    %12:_(i32) = COPY $agpr12
    %13:_(i32) = COPY $agpr13
    %14:_(i32) = COPY $agpr14
    %15:_(i32) = COPY $agpr15
    %16:_(<16 x i32>) = G_BUILD_VECTOR %0(i32), %1(i32), %2(i32), %3(i32), %4(i32), %5(i32), %6(i32), %7(i32), %8(i32), %9(i32), %10(i32), %11(i32), %12(i32), %13(i32), %14(i32), %15(i32)
    S_ENDPGM 0, implicit %16(<16 x i32>)
...
