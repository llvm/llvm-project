# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX6 %s
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX8 %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX9 %s

---
name: sshlsat_s7
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX6-LABEL: name: sshlsat_s7
    ; GFX6: liveins: $vgpr0, $vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 127
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 25
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C1]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[AND]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C1]](i32)
    ; GFX6-NEXT: $vgpr0 = COPY [[ASHR1]](i32)
    ;
    ; GFX8-LABEL: name: sshlsat_s7
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 127
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 9
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C1]](i16)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[AND]](i16)
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i16), [[C4]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SELECT1]], [[C1]](i16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR1]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: sshlsat_s7
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 127
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 9
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C1]](i16)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[AND]](i16)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i16), [[C4]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SELECT1]], [[C1]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i7) = G_TRUNC %0(i32)
    %3:_(i7) = G_TRUNC %1(i32)
    %4:_(i7) = G_SSHLSAT %2, %3(i7)
    %5:_(i32) = G_ANYEXT %4(i7)
    $vgpr0 = COPY %5(i32)
...

---
name: sshlsat_s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX6-LABEL: name: sshlsat_s8
    ; GFX6: liveins: $vgpr0, $vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C1]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[AND]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C1]](i32)
    ; GFX6-NEXT: $vgpr0 = COPY [[ASHR1]](i32)
    ;
    ; GFX8-LABEL: name: sshlsat_s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C1]](i16)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[AND]](i16)
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i16), [[C4]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SELECT1]], [[C1]](i16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR1]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: sshlsat_s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C1]](i16)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[AND]](i16)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i16), [[C4]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SELECT1]], [[C1]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[ASHR1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8) = G_TRUNC %0(i32)
    %3:_(i8) = G_TRUNC %1(i32)
    %4:_(i8) = G_SSHLSAT %2, %3(i8)
    %5:_(i32) = G_ANYEXT %4(i8)
    $vgpr0 = COPY %5(i32)
...

---
name: sshlsat_v2s8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX6-LABEL: name: sshlsat_v2s8
    ; GFX6: liveins: $vgpr0, $vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 24
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C2]]
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C1]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[AND]](i32)
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C5]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C3]], [[C4]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C1]](i32)
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR1]], [[C2]]
    ; GFX6-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[C1]](i32)
    ; GFX6-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[SHL2]], [[AND1]](i32)
    ; GFX6-NEXT: [[ASHR2:%[0-9]+]]:_(i32) = G_ASHR [[SHL3]], [[AND1]](i32)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL2]](i32), [[C5]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C3]], [[C4]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL2]](i32), [[ASHR2]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL3]]
    ; GFX6-NEXT: [[ASHR3:%[0-9]+]]:_(i32) = G_ASHR [[SELECT3]], [[C1]](i32)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[ASHR1]](i32)
    ; GFX6-NEXT: [[C6:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C6]]
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[C]](i32)
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ASHR3]], [[C2]]
    ; GFX6-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[COPY2]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[SHL4]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[TRUNC1]]
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX6-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: sshlsat_v2s8
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C2]](i16)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[AND]](i16)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i16), [[C5]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C3]], [[C4]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SELECT1]], [[C2]](i16)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C1]]
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[C2]](i16)
    ; GFX8-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[SHL2]], [[AND1]](i16)
    ; GFX8-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[SHL3]], [[AND1]](i16)
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL2]](i16), [[C5]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C3]], [[C4]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL2]](i16), [[ASHR2]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL3]]
    ; GFX8-NEXT: [[ASHR3:%[0-9]+]]:_(i16) = G_ASHR [[SELECT3]], [[C2]](i16)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[ASHR1]], [[C1]]
    ; GFX8-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[ASHR3]], [[C1]]
    ; GFX8-NEXT: [[SHL4:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C2]](i16)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL4]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: sshlsat_v2s8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 8
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[C]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[COPY1]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 8
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[C2]](i16)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[SHL]], [[AND]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[AND]](i16)
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i16), [[C5]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C3]], [[C4]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SELECT1]], [[C2]](i16)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC3]], [[C1]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[C2]](i16)
    ; GFX9-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[SHL2]], [[AND1]](i16)
    ; GFX9-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[SHL3]], [[AND1]](i16)
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL2]](i16), [[C5]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C3]], [[C4]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL2]](i16), [[ASHR2]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL3]]
    ; GFX9-NEXT: [[ASHR3:%[0-9]+]]:_(i16) = G_ASHR [[SELECT3]], [[C2]](i16)
    ; GFX9-NEXT: [[AND2:%[0-9]+]]:_(i16) = G_AND [[ASHR1]], [[C1]]
    ; GFX9-NEXT: [[AND3:%[0-9]+]]:_(i16) = G_AND [[ASHR3]], [[C1]]
    ; GFX9-NEXT: [[SHL4:%[0-9]+]]:_(i16) = G_SHL [[AND3]], [[C2]](i16)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i16) = G_OR [[AND2]], [[SHL4]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[OR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(<2 x i8>) = G_BITCAST %2(i16)
    %5:_(<2 x i8>) = G_BITCAST %3(i16)
    %6:_(<2 x i8>) = G_SSHLSAT %4, %5(<2 x i8>)
    %7:_(i16) = G_BITCAST %6(<2 x i8>)
    %8:_(i32) = G_ANYEXT %7(i16)
    $vgpr0 = COPY %8(i32)
...

---
name: sshlsat_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX6-LABEL: name: sshlsat_s16
    ; GFX6: liveins: $vgpr0, $vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[C1]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[AND]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C1]](i32)
    ; GFX6-NEXT: $vgpr0 = COPY [[ASHR1]](i32)
    ;
    ; GFX8-LABEL: name: sshlsat_s16
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC1]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC1]](i16)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C2]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT1]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: sshlsat_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC1]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC1]](i16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[SELECT1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16) = G_SSHLSAT %2, %3(i16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: sshlsat_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX6-LABEL: name: sshlsat_v2s16
    ; GFX6: liveins: $vgpr0, $vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[AND]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C]](i32)
    ; GFX6-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[C]](i32)
    ; GFX6-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[SHL2]], [[LSHR1]](i32)
    ; GFX6-NEXT: [[ASHR2:%[0-9]+]]:_(i32) = G_ASHR [[SHL3]], [[LSHR1]](i32)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL2]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL2]](i32), [[ASHR2]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL3]]
    ; GFX6-NEXT: [[ASHR3:%[0-9]+]]:_(i32) = G_ASHR [[SELECT3]], [[C]](i32)
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ASHR1]], [[C1]]
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ASHR3]], [[C1]]
    ; GFX6-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND1]], [[SHL4]]
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST2]](<2 x i16>)
    ;
    ; GFX8-LABEL: name: sshlsat_v2s16
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC2]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC2]](i16)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[TRUNC3]](i16)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[TRUNC3]](i16)
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC1]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[ASHR1]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT1]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT3]](i16)
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL2]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST2]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: sshlsat_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC2]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC2]](i16)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[TRUNC3]](i16)
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[TRUNC3]](i16)
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC1]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[ASHR1]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[SELECT1]](i16), [[SELECT3]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = G_SSHLSAT %0, %1(<2 x i16>)
    $vgpr0 = COPY %2(<2 x i16>)
...

---
name: sshlsat_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; GFX6-LABEL: name: sshlsat_v3s16
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[LSHR1]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[LSHR1]](i32)
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C3]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C]](i32)
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C4]]
    ; GFX6-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[C]](i32)
    ; GFX6-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[SHL2]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR2:%[0-9]+]]:_(i32) = G_ASHR [[SHL3]], [[AND]](i32)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL2]](i32), [[C3]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL2]](i32), [[ASHR2]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL3]]
    ; GFX6-NEXT: [[ASHR3:%[0-9]+]]:_(i32) = G_ASHR [[SELECT3]], [[C]](i32)
    ; GFX6-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[BITCAST1]], [[C]](i32)
    ; GFX6-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[SHL4]], [[LSHR2]](i32)
    ; GFX6-NEXT: [[ASHR4:%[0-9]+]]:_(i32) = G_ASHR [[SHL5]], [[LSHR2]](i32)
    ; GFX6-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL4]](i32), [[C3]]
    ; GFX6-NEXT: [[SELECT4:%[0-9]+]]:_(i32) = G_SELECT [[ICMP4]](i1), [[C1]], [[C2]]
    ; GFX6-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL4]](i32), [[ASHR4]]
    ; GFX6-NEXT: [[SELECT5:%[0-9]+]]:_(i32) = G_SELECT [[ICMP5]](i1), [[SELECT4]], [[SHL5]]
    ; GFX6-NEXT: [[ASHR5:%[0-9]+]]:_(i32) = G_ASHR [[SELECT5]], [[C]](i32)
    ; GFX6-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX6-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[ASHR1]], [[C4]]
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ASHR3]], [[C4]]
    ; GFX6-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND1]], [[SHL6]]
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ASHR5]], [[C4]]
    ; GFX6-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C4]]
    ; GFX6-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[AND4]], [[C]](i32)
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND3]], [[SHL7]]
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; GFX6-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C4]]
    ; GFX6-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C]](i32)
    ; GFX6-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR3]], [[SHL8]]
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>), [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX8-LABEL: name: sshlsat_v3s16
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX8-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC3]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC3]](i16)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[TRUNC4]](i16)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[TRUNC4]](i16)
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC1]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[ASHR1]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[TRUNC5]](i16)
    ; GFX8-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[SHL2]], [[TRUNC5]](i16)
    ; GFX8-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC2]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT4:%[0-9]+]]:_(i16) = G_SELECT [[ICMP4]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC2]](i16), [[ASHR2]]
    ; GFX8-NEXT: [[SELECT5:%[0-9]+]]:_(i16) = G_SELECT [[ICMP5]](i1), [[SELECT4]], [[SHL2]]
    ; GFX8-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX8-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX8-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT1]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT3]](i16)
    ; GFX8-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL3]]
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT5]](i16)
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C4]]
    ; GFX8-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[AND]], [[C]](i32)
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL4]]
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C4]]
    ; GFX8-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; GFX8-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR3]], [[SHL5]]
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; GFX8-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>), [[BITCAST7]](<2 x i16>)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-LABEL: name: sshlsat_v3s16
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC3]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC3]](i16)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[TRUNC4]](i16)
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[TRUNC4]](i16)
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC1]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[ASHR1]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[TRUNC5]](i16)
    ; GFX9-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[SHL2]], [[TRUNC5]](i16)
    ; GFX9-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC2]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT4:%[0-9]+]]:_(i16) = G_SELECT [[ICMP4]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC2]](i16), [[ASHR2]]
    ; GFX9-NEXT: [[SELECT5:%[0-9]+]]:_(i16) = G_SELECT [[ICMP5]](i1), [[SELECT4]], [[SHL2]]
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[SELECT1]](i16), [[SELECT3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[SELECT5]](i16), [[TRUNC6]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC7]](i16), [[TRUNC8]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i16>), %2:_(<3 x i16>) = G_UNMERGE_VALUES %0(<6 x i16>)
    %3:_(<3 x i16>) = G_SSHLSAT %1, %2(<3 x i16>)
    %4:_(<3 x i16>) = G_IMPLICIT_DEF
    %5:_(<6 x i16>) = G_CONCAT_VECTORS %3(<3 x i16>), %4(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %5(<6 x i16>)
...

---
name: sshlsat_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX6-LABEL: name: sshlsat_v4s16
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX6-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX6-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[BITCAST]], [[C]](i32)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[SHL]], [[AND]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[AND]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL1]]
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SELECT1]], [[C]](i32)
    ; GFX6-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[LSHR]], [[C]](i32)
    ; GFX6-NEXT: [[SHL3:%[0-9]+]]:_(i32) = G_SHL [[SHL2]], [[LSHR2]](i32)
    ; GFX6-NEXT: [[ASHR2:%[0-9]+]]:_(i32) = G_ASHR [[SHL3]], [[LSHR2]](i32)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL2]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL2]](i32), [[ASHR2]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL3]]
    ; GFX6-NEXT: [[ASHR3:%[0-9]+]]:_(i32) = G_ASHR [[SELECT3]], [[C]](i32)
    ; GFX6-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C1]]
    ; GFX6-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[BITCAST1]], [[C]](i32)
    ; GFX6-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[SHL4]], [[AND1]](i32)
    ; GFX6-NEXT: [[ASHR4:%[0-9]+]]:_(i32) = G_ASHR [[SHL5]], [[AND1]](i32)
    ; GFX6-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL4]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT4:%[0-9]+]]:_(i32) = G_SELECT [[ICMP4]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL4]](i32), [[ASHR4]]
    ; GFX6-NEXT: [[SELECT5:%[0-9]+]]:_(i32) = G_SELECT [[ICMP5]](i1), [[SELECT4]], [[SHL5]]
    ; GFX6-NEXT: [[ASHR5:%[0-9]+]]:_(i32) = G_ASHR [[SELECT5]], [[C]](i32)
    ; GFX6-NEXT: [[SHL6:%[0-9]+]]:_(i32) = G_SHL [[LSHR1]], [[C]](i32)
    ; GFX6-NEXT: [[SHL7:%[0-9]+]]:_(i32) = G_SHL [[SHL6]], [[LSHR3]](i32)
    ; GFX6-NEXT: [[ASHR6:%[0-9]+]]:_(i32) = G_ASHR [[SHL7]], [[LSHR3]](i32)
    ; GFX6-NEXT: [[ICMP6:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[SHL6]](i32), [[C4]]
    ; GFX6-NEXT: [[SELECT6:%[0-9]+]]:_(i32) = G_SELECT [[ICMP6]](i1), [[C2]], [[C3]]
    ; GFX6-NEXT: [[ICMP7:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[SHL6]](i32), [[ASHR6]]
    ; GFX6-NEXT: [[SELECT7:%[0-9]+]]:_(i32) = G_SELECT [[ICMP7]](i1), [[SELECT6]], [[SHL7]]
    ; GFX6-NEXT: [[ASHR7:%[0-9]+]]:_(i32) = G_ASHR [[SELECT7]], [[C]](i32)
    ; GFX6-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[ASHR1]], [[C1]]
    ; GFX6-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[ASHR3]], [[C1]]
    ; GFX6-NEXT: [[SHL8:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL8]]
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[ASHR5]], [[C1]]
    ; GFX6-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[ASHR7]], [[C1]]
    ; GFX6-NEXT: [[SHL9:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C]](i32)
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL9]]
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX8-LABEL: name: sshlsat_v4s16
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX8-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX8-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX8-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; GFX8-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX8-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC4]](i16)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC4]](i16)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[TRUNC5]](i16)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[TRUNC5]](i16)
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC1]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[ASHR1]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX8-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[TRUNC6]](i16)
    ; GFX8-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[SHL2]], [[TRUNC6]](i16)
    ; GFX8-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC2]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT4:%[0-9]+]]:_(i16) = G_SELECT [[ICMP4]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC2]](i16), [[ASHR2]]
    ; GFX8-NEXT: [[SELECT5:%[0-9]+]]:_(i16) = G_SELECT [[ICMP5]](i1), [[SELECT4]], [[SHL2]]
    ; GFX8-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC3]], [[TRUNC7]](i16)
    ; GFX8-NEXT: [[ASHR3:%[0-9]+]]:_(i16) = G_ASHR [[SHL3]], [[TRUNC7]](i16)
    ; GFX8-NEXT: [[ICMP6:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC3]](i16), [[C3]]
    ; GFX8-NEXT: [[SELECT6:%[0-9]+]]:_(i16) = G_SELECT [[ICMP6]](i1), [[C1]], [[C2]]
    ; GFX8-NEXT: [[ICMP7:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC3]](i16), [[ASHR3]]
    ; GFX8-NEXT: [[SELECT7:%[0-9]+]]:_(i16) = G_SELECT [[ICMP7]](i1), [[SELECT6]], [[SHL3]]
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT1]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT3]](i16)
    ; GFX8-NEXT: [[SHL4:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL4]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT5]](i16)
    ; GFX8-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[SELECT7]](i16)
    ; GFX8-NEXT: [[SHL5:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX8-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL5]]
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; GFX8-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: sshlsat_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i16) = G_SHL [[TRUNC]], [[TRUNC4]](i16)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i16) = G_ASHR [[SHL]], [[TRUNC4]](i16)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i16) = G_CONSTANT i16 -32768
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i16) = G_CONSTANT i16 32767
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i16) = G_CONSTANT i16 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i16) = G_SELECT [[ICMP]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC]](i16), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i16) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i16) = G_SHL [[TRUNC1]], [[TRUNC5]](i16)
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i16) = G_ASHR [[SHL1]], [[TRUNC5]](i16)
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC1]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i16) = G_SELECT [[ICMP2]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC1]](i16), [[ASHR1]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i16) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i16) = G_SHL [[TRUNC2]], [[TRUNC6]](i16)
    ; GFX9-NEXT: [[ASHR2:%[0-9]+]]:_(i16) = G_ASHR [[SHL2]], [[TRUNC6]](i16)
    ; GFX9-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC2]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT4:%[0-9]+]]:_(i16) = G_SELECT [[ICMP4]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC2]](i16), [[ASHR2]]
    ; GFX9-NEXT: [[SELECT5:%[0-9]+]]:_(i16) = G_SELECT [[ICMP5]](i1), [[SELECT4]], [[SHL2]]
    ; GFX9-NEXT: [[SHL3:%[0-9]+]]:_(i16) = G_SHL [[TRUNC3]], [[TRUNC7]](i16)
    ; GFX9-NEXT: [[ASHR3:%[0-9]+]]:_(i16) = G_ASHR [[SHL3]], [[TRUNC7]](i16)
    ; GFX9-NEXT: [[ICMP6:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[TRUNC3]](i16), [[C3]]
    ; GFX9-NEXT: [[SELECT6:%[0-9]+]]:_(i16) = G_SELECT [[ICMP6]](i1), [[C1]], [[C2]]
    ; GFX9-NEXT: [[ICMP7:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[TRUNC3]](i16), [[ASHR3]]
    ; GFX9-NEXT: [[SELECT7:%[0-9]+]]:_(i16) = G_SELECT [[ICMP7]](i1), [[SELECT6]], [[SHL3]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[SELECT1]](i16), [[SELECT3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[SELECT5]](i16), [[SELECT7]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x i16>) = G_SSHLSAT %0, %1(<4 x i16>)
    $vgpr0_vgpr1 = COPY %2(<4 x i16>)
...

---
name: sshlsat_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; GFX6-LABEL: name: sshlsat_s32
    ; GFX6: liveins: $vgpr0, $vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[COPY1]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL]], [[COPY1]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[COPY]](i32), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX6-NEXT: $vgpr0 = COPY [[SELECT1]](i32)
    ;
    ; GFX8-LABEL: name: sshlsat_s32
    ; GFX8: liveins: $vgpr0, $vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[COPY1]](i32)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL]], [[COPY1]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[COPY]](i32), [[C2]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](i32), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: $vgpr0 = COPY [[SELECT1]](i32)
    ;
    ; GFX9-LABEL: name: sshlsat_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY]], [[COPY1]](i32)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL]], [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[COPY]](i32), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](i32), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: $vgpr0 = COPY [[SELECT1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = G_SSHLSAT %0, %1(i32)
    $vgpr0 = COPY %2(i32)
...

---
name: sshlsat_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX6-LABEL: name: sshlsat_v2s32
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[UV]], [[UV2]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL]], [[UV2]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV]](i32), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[UV1]], [[UV3]](i32)
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[UV3]](i32)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV1]](i32), [[C2]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C]], [[C1]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[ASHR1]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT1]](i32), [[SELECT3]](i32)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: sshlsat_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[UV]], [[UV2]](i32)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL]], [[UV2]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV]](i32), [[C2]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[UV1]], [[UV3]](i32)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[UV3]](i32)
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV1]](i32), [[C2]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[ASHR1]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT1]](i32), [[SELECT3]](i32)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: sshlsat_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[UV]], [[UV2]](i32)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[SHL]], [[UV2]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -2147483648
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 2147483647
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV]](i32), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i32) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i32), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i32) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[UV1]], [[UV3]](i32)
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[SHL1]], [[UV3]](i32)
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV1]](i32), [[C2]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i32) = G_SELECT [[ICMP2]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i32), [[ASHR1]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i32) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[SELECT1]](i32), [[SELECT3]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = G_SSHLSAT %0, %1(<2 x i32>)
    $vgpr0_vgpr1 = COPY %2(<2 x i32>)
...

---
name: sshlsat_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; GFX6-LABEL: name: sshlsat_s64
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[COPY1]](i64)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[TRUNC]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[SHL]], [[TRUNC]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[COPY]](i64), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](i64), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[SELECT1]](i64)
    ;
    ; GFX8-LABEL: name: sshlsat_s64
    ; GFX8: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[COPY1]](i64)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[TRUNC]](i32)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[SHL]], [[TRUNC]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[COPY]](i64), [[C2]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](i64), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[SELECT1]](i64)
    ;
    ; GFX9-LABEL: name: sshlsat_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[COPY1]](i64)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[COPY]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[SHL]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[COPY]](i64), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[COPY]](i64), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[SELECT1]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(i64) = G_SSHLSAT %0, %1(i64)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name: sshlsat_v2s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7

    ; GFX6-LABEL: name: sshlsat_v2s64
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY1]](<2 x i64>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[UV2]](i64)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV]], [[TRUNC]](i32)
    ; GFX6-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[SHL]], [[TRUNC]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX6-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV]](i64), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX6-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i64), [[ASHR]]
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[UV3]](i64)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[TRUNC1]](i32)
    ; GFX6-NEXT: [[ASHR1:%[0-9]+]]:_(i64) = G_ASHR [[SHL1]], [[TRUNC1]](i32)
    ; GFX6-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV1]](i64), [[C2]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[C]], [[C1]]
    ; GFX6-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i64), [[ASHR1]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[SELECT1]](i64), [[SELECT3]](i64)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; GFX8-LABEL: name: sshlsat_v2s64
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX8-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY1]](<2 x i64>)
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[UV2]](i64)
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV]], [[TRUNC]](i32)
    ; GFX8-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[SHL]], [[TRUNC]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX8-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV]](i64), [[C2]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i64), [[ASHR]]
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX8-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[UV3]](i64)
    ; GFX8-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[TRUNC1]](i32)
    ; GFX8-NEXT: [[ASHR1:%[0-9]+]]:_(i64) = G_ASHR [[SHL1]], [[TRUNC1]](i32)
    ; GFX8-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV1]](i64), [[C2]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[C]], [[C1]]
    ; GFX8-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i64), [[ASHR1]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[SELECT1]](i64), [[SELECT3]](i64)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: sshlsat_v2s64
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY1]](<2 x i64>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[UV2]](i64)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[SHL]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -9223372036854775808
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 9223372036854775807
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV]](i64), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV]](i64), [[ASHR]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[SELECT]], [[SHL]]
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i32) = G_TRUNC [[UV3]](i64)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[TRUNC1]](i32)
    ; GFX9-NEXT: [[ASHR1:%[0-9]+]]:_(i64) = G_ASHR [[SHL1]], [[TRUNC1]](i32)
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(slt), [[UV1]](i64), [[C2]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[C]], [[C1]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(ne), [[UV1]](i64), [[ASHR1]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[SELECT2]], [[SHL1]]
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[SELECT1]](i64), [[SELECT3]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i64>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<2 x i64>) = G_SSHLSAT %0, %1(<2 x i64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(<2 x i64>)
...
