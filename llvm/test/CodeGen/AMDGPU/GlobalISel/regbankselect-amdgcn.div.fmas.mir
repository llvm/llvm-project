# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect -verify-machineinstrs -regbankselect-fast -o - %s  | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect -verify-machineinstrs -regbankselect-greedy -o - %s | FileCheck %s

---
name: div_fmas_sss_scc
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; CHECK-LABEL: name: div_fmas_sss_scc
    ; CHECK: liveins: $sgpr0, $sgpr1, $sgpr2, $sgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:sgpr(i32) = COPY $sgpr3
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:sgpr(i32) = G_ICMP intpred(eq), [[COPY3]](i32), [[C]]
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i1) = G_TRUNC [[ICMP]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST]](f32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST1]](f32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST2]](f32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vcc(i1) = COPY [[TRUNC]](i1)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vgpr(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[COPY4]](f32), [[COPY5]](f32), [[COPY6]](f32), [[COPY7]](i1)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = COPY $sgpr2
    %3:_(i32) = COPY $sgpr3
    %4:_(i32) = G_CONSTANT i32 0
    %5:_(i1) = G_ICMP intpred(eq), %3(i32), %4
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_BITCAST %2(i32)
    %9:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), %6(f32), %7(f32), %8(f32), %5(i1)
...

---
name: div_fmas_sss_vcc
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1, $sgpr2, $vgpr0
    ; CHECK-LABEL: name: div_fmas_sss_vcc
    ; CHECK: liveins: $sgpr0, $sgpr1, $sgpr2, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[COPY3]](i32), [[COPY4]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST]](f32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST1]](f32)
    ; CHECK-NEXT: [[COPY7:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST2]](f32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vgpr(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[COPY5]](f32), [[COPY6]](f32), [[COPY7]](f32), [[ICMP]](i1)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i32) = COPY $sgpr2
    %3:_(i32) = COPY $vgpr0
    %4:_(i32) = G_CONSTANT i32 0
    %5:_(i1) = G_ICMP intpred(eq), %3(i32), %4
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_BITCAST %2(i32)
    %9:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), %6(f32), %7(f32), %8(f32), %5(i1)
...

---
name: div_fmas_vss_vcc
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $sgpr0, $sgpr1
    ; CHECK-LABEL: name: div_fmas_vss_vcc
    ; CHECK: liveins: $vgpr0, $vgpr1, $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:sgpr(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[COPY3]](i32), [[COPY4]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:vgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[COPY5:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST1]](f32)
    ; CHECK-NEXT: [[COPY6:%[0-9]+]]:vgpr(f32) = COPY [[BITCAST2]](f32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vgpr(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[BITCAST]](f32), [[COPY5]](f32), [[COPY6]](f32), [[ICMP]](i1)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $sgpr0
    %2:_(i32) = COPY $sgpr1
    %3:_(i32) = COPY $vgpr1
    %4:_(i32) = G_CONSTANT i32 0
    %5:_(i1) = G_ICMP intpred(eq), %3(i32), %4
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_BITCAST %2(i32)
    %9:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), %6(f32), %7(f32), %8(f32), %5(i1)
...

---
name: div_fmas_vvv_vcc
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; CHECK-LABEL: name: div_fmas_vvv_vcc
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY $vgpr2
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY $vgpr3
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[COPY4:%[0-9]+]]:vgpr(i32) = COPY [[C]](i32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[COPY3]](i32), [[COPY4]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:vgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:vgpr(f32) = G_BITCAST [[COPY1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:vgpr(f32) = G_BITCAST [[COPY2]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:vgpr(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), [[BITCAST]](f32), [[BITCAST1]](f32), [[BITCAST2]](f32), [[ICMP]](i1)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(i32) = COPY $vgpr3
    %4:_(i32) = G_CONSTANT i32 0
    %5:_(i1) = G_ICMP intpred(eq), %3(i32), %4
    %6:_(f32) = G_BITCAST %0(i32)
    %7:_(f32) = G_BITCAST %1(i32)
    %8:_(f32) = G_BITCAST %2(i32)
    %9:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.div.fmas), %6(f32), %7(f32), %8(f32), %5(i1)
...
