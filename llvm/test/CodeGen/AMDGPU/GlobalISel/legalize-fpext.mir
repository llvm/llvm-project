# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck %s

---
name: test_fpext_f16_to_f32
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_f16_to_f32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[FPEXT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f32) = G_FPEXT %2(f16)
    %4:_(i32) = G_BITCAST %3(f32)
    $vgpr0 = COPY %4(i32)
...

---
name: test_fpext_v2f16_to_v2f32
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_v2f16_to_v2f32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %8(i16)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = nnan G_FPEXT [[BITCAST1]](f16)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %9(i16)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = nnan G_FPEXT [[BITCAST2]](f16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FPEXT]](f32), [[FPEXT1]](f32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %2:_(<2 x f32>) = nnan G_FPEXT %1(<2 x f16>)
    %3:_(<2 x i32>) = G_BITCAST %2(<2 x f32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_fpext_v2f16_to_v2f32_w_flags
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_v2f16_to_v2f32_w_flags
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %8(i16)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = nnan G_FPEXT [[BITCAST1]](f16)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %9(i16)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = nnan G_FPEXT [[BITCAST2]](f16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FPEXT]](f32), [[FPEXT1]](f32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %2:_(<2 x f32>) = nnan G_FPEXT %1(<2 x f16>)
    %3:_(<2 x i32>) = G_BITCAST %2(<2 x f32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_fpext_v3f16_to_v3f32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-LABEL: name: test_fpext_v3f16_to_v3f32
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; CHECK-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FPEXT]](f32), [[FPEXT1]](f32), [[FPEXT2]](f32)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST5]](<3 x i32>)
    %0:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i16>), %2:_(<3 x i16>) = G_UNMERGE_VALUES %0(<6 x i16>)
    %3:_(<3 x f16>) = G_BITCAST %1(<3 x i16>)
    %4:_(<3 x f32>) = G_FPEXT %3(<3 x f16>)
    %5:_(<3 x i32>) = G_BITCAST %4(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %5(<3 x i32>)
...

---
name: test_fpext_v4f16_to_v4f32
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_v4f16_to_v4f32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(<4 x f16>) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[DEF]](<4 x f16>)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST %13(i16)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %14(i16)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %20(i16)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST4]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST5]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST5]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; CHECK-NEXT: [[BITCAST7:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST6]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST7]](i32)
    ; CHECK-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST7]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; CHECK-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; CHECK-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FPEXT]](f32), [[FPEXT1]](f32), [[FPEXT2]](f32), [[FPEXT3]](f32)
    ; CHECK-NEXT: [[BITCAST8:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST8]](<4 x i32>)
    %0:_(<4 x f16>) = G_IMPLICIT_DEF
    %1:_(<4 x f32>) = G_FPEXT %0(<4 x f16>)
    %2:_(<4 x i32>) = G_BITCAST %1(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(<4 x i32>)
...

---
name: test_fpext_f32_to_f64
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_f32_to_f64
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f64) = G_FPEXT [[BITCAST]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FPEXT]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f64) = G_FPEXT %1(f32)
    %3:_(i64) = G_BITCAST %2(f64)
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: test_fpext_v2f32_to_v2f64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: test_fpext_v2f32_to_v2f64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f64) = G_FPEXT [[UV]](f32)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f64) = G_FPEXT [[UV1]](f32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FPEXT]](f64), [[FPEXT1]](f64)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST1]](<2 x i64>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %2:_(<2 x f64>) = G_FPEXT %1(<2 x f32>)
    %3:_(<2 x i64>) = G_BITCAST %2(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3(<2 x i64>)
...

---
name: test_fpext_v3f32_to_v3f64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; CHECK-LABEL: name: test_fpext_v3f32_to_v3f64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f64) = G_FPEXT [[UV]](f32)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f64) = G_FPEXT [[UV1]](f32)
    ; CHECK-NEXT: [[FPEXT2:%[0-9]+]]:_(f64) = G_FPEXT [[UV2]](f32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f64>) = G_BUILD_VECTOR [[FPEXT]](f64), [[FPEXT1]](f64), [[FPEXT2]](f64)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x i64>) = G_BITCAST [[BUILD_VECTOR]](<3 x f64>)
    ; CHECK-NEXT: S_NOP 0, implicit [[BITCAST1]](<3 x i64>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %2:_(<3 x f64>) = G_FPEXT %1(<3 x f32>)
    %3:_(<3 x i64>) = G_BITCAST %2(<3 x f64>)
    S_NOP 0, implicit %3(<3 x i64>)

...

---
name: test_fpext_v4f32_to_v4f64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3

    ; CHECK-LABEL: name: test_fpext_v4f32_to_v4f64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f64) = G_FPEXT [[UV]](f32)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f64) = G_FPEXT [[UV1]](f32)
    ; CHECK-NEXT: [[FPEXT2:%[0-9]+]]:_(f64) = G_FPEXT [[UV2]](f32)
    ; CHECK-NEXT: [[FPEXT3:%[0-9]+]]:_(f64) = G_FPEXT [[UV3]](f32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f64>) = G_BUILD_VECTOR [[FPEXT]](f64), [[FPEXT1]](f64), [[FPEXT2]](f64), [[FPEXT3]](f64)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x i64>) = G_BITCAST [[BUILD_VECTOR]](<4 x f64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BITCAST1]](<4 x i64>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x f32>) = G_BITCAST %0(<4 x i32>)
    %2:_(<4 x f64>) = G_FPEXT %1(<4 x f32>)
    %3:_(<4 x i64>) = G_BITCAST %2(<4 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(<4 x i64>)
...

---
name: test_fpext_f16_to_f64
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_f16_to_f64
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f64) = G_FPEXT [[FPEXT]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(i64) = G_BITCAST [[FPEXT1]](f64)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](i64)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f64) = G_FPEXT %2(f16)
    %4:_(i64) = G_BITCAST %3(f64)
    $vgpr0_vgpr1 = COPY %4(i64)
...

---
name: test_fpext_v2f16_to_v2f64
body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: test_fpext_v2f16_to_v2f64
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST %10(i16)
    ; CHECK-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = nnan G_FPEXT [[BITCAST1]](f16)
    ; CHECK-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST %11(i16)
    ; CHECK-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; CHECK-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST3]](<2 x i16>)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; CHECK-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; CHECK-NEXT: [[FPEXT1:%[0-9]+]]:_(f64) = G_FPEXT [[FPEXT]](f32)
    ; CHECK-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = nnan G_FPEXT [[BITCAST2]](f16)
    ; CHECK-NEXT: [[FPEXT3:%[0-9]+]]:_(f64) = G_FPEXT [[FPEXT2]](f32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f64>) = G_BUILD_VECTOR [[FPEXT1]](f64), [[FPEXT3]](f64)
    ; CHECK-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i64>) = G_BITCAST [[BUILD_VECTOR]](<2 x f64>)
    ; CHECK-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST5]](<2 x i64>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %2:_(<2 x f64>) = nnan G_FPEXT %1(<2 x f16>)
    %3:_(<2 x i64>) = G_BITCAST %2(<2 x f64>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3(<2 x i64>)
...
