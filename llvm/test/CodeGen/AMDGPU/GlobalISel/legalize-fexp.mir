# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX6 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX8 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -run-pass=legalizer %s -o - | FileCheck  -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck  -check-prefix=GFX9 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck  -check-prefix=GFX9 %s

---
name: test_fexp_s32
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_fexp_s32
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[C]]
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; GFX6-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[C]], [[FNEG]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX6-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[C1]], [[FMA]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FSUB]], [[FMA1]]
    ; GFX6-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX6-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[BITCAST]](f32), [[C4]]
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX8-LABEL: name: test_fexp_s32
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -4096
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[BITCAST]], [[BITCAST2]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7140000000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST2]], [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3F347652A0000000
    ; GFX8-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FSUB]], [[C2]]
    ; GFX8-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FSUB]], [[C1]]
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL1]]
    ; GFX8-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST2]], [[C2]]
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FADD]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FADD1]]
    ; GFX8-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX8-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD2]](f32)
    ; GFX8-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C4]], [[FLDEXP]]
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[BITCAST]](f32), [[C5]]
    ; GFX8-NEXT: [[C6:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C6]], [[SELECT]]
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](f32)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX9-LABEL: name: test_fexp_s32
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[C]]
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[C]], [[FNEG]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[BITCAST]], [[C1]], [[FMA]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FSUB]], [[FMA1]]
    ; GFX9-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX9-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[BITCAST]](f32), [[C4]]
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FEXP %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)
...

---
name: test_fexp_s32_nnan
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_fexp_s32_nnan
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[C]]
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f32) = nnan G_FNEG [[FMUL]]
    ; GFX6-NEXT: [[FMA:%[0-9]+]]:_(f32) = nnan G_FMA [[BITCAST]], [[C]], [[FNEG]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX6-NEXT: [[FMA1:%[0-9]+]]:_(f32) = nnan G_FMA [[BITCAST]], [[C1]], [[FMA]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = nnan G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nnan G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FSUB]], [[FMA1]]
    ; GFX6-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX6-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = nnan G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[BITCAST]](f32), [[C4]]
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = nnan G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    ;
    ; GFX8-LABEL: name: test_fexp_s32_nnan
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -4096
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nnan G_FSUB [[BITCAST]], [[BITCAST2]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7140000000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST2]], [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3F347652A0000000
    ; GFX8-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[FSUB]], [[C2]]
    ; GFX8-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = nnan G_FMUL [[FSUB]], [[C1]]
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL2]], [[FMUL1]]
    ; GFX8-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST2]], [[C2]]
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL3]], [[FADD]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = nnan G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = nnan G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f32) = nnan G_FADD [[FSUB1]], [[FADD1]]
    ; GFX8-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX8-NEXT: [[INT:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD2]](f32)
    ; GFX8-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = nnan G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C4]], [[FLDEXP]]
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[BITCAST]](f32), [[C5]]
    ; GFX8-NEXT: [[C6:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = nnan G_SELECT [[FCMP1]](i1), [[C6]], [[SELECT]]
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](f32)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX9-LABEL: name: test_fexp_s32_nnan
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[C]]
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = nnan G_FNEG [[FMUL]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = nnan G_FMA [[BITCAST]], [[C]], [[FNEG]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = nnan G_FMA [[BITCAST]], [[C1]], [[FMA]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = nnan G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = nnan G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FSUB]], [[FMA1]]
    ; GFX9-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = nnan G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX9-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = nnan G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[BITCAST]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[BITCAST]](f32), [[C4]]
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = nnan G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](f32)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = nnan G_FEXP %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)
...

---
name: test_fexp_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; GFX6-LABEL: name: test_fexp_v2s32
    ; GFX6: liveins: $vgpr0_vgpr1
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[C]]
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; GFX6-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C]], [[FNEG]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX6-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C1]], [[FMA]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FSUB]], [[FMA1]]
    ; GFX6-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX6-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV]](f32), [[C4]]
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[C]]
    ; GFX6-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FMUL1]]
    ; GFX6-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C]], [[FNEG1]]
    ; GFX6-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C1]], [[FMA2]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN1:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL1]]
    ; GFX6-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL1]], [[INTRINSIC_ROUNDEVEN1]]
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FMA3]]
    ; GFX6-NEXT: [[FPTOSI1:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN1]](f32)
    ; GFX6-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD1]](f32)
    ; GFX6-NEXT: [[FLDEXP1:%[0-9]+]]:_(f32) = G_FLDEXP [[INT1]], [[FPTOSI1]](i32)
    ; GFX6-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[C3]], [[FLDEXP1]]
    ; GFX6-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV1]](f32), [[C4]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[C5]], [[SELECT2]]
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(f32) = COPY [[SELECT3]](f32)
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[COPY1]](f32), [[COPY2]](f32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](<2 x i32>)
    ;
    ; GFX8-LABEL: name: test_fexp_v2s32
    ; GFX8: liveins: $vgpr0_vgpr1
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -4096
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[BITCAST2]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7140000000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST2]], [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3F347652A0000000
    ; GFX8-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FSUB]], [[C2]]
    ; GFX8-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FSUB]], [[C1]]
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL1]]
    ; GFX8-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST2]], [[C2]]
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FADD]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FADD1]]
    ; GFX8-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX8-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD2]](f32)
    ; GFX8-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C4]], [[FLDEXP]]
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV]](f32), [[C5]]
    ; GFX8-NEXT: [[C6:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C6]], [[SELECT]]
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](f32)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; GFX8-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[BITCAST4]]
    ; GFX8-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST4]], [[C1]]
    ; GFX8-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FSUB2]], [[C2]]
    ; GFX8-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FSUB2]], [[C1]]
    ; GFX8-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FMUL5]]
    ; GFX8-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST4]], [[C2]]
    ; GFX8-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FADD3]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN1:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL4]]
    ; GFX8-NEXT: [[FSUB3:%[0-9]+]]:_(f32) = G_FSUB [[FMUL4]], [[INTRINSIC_ROUNDEVEN1]]
    ; GFX8-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FSUB3]], [[FADD4]]
    ; GFX8-NEXT: [[FPTOSI1:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN1]](f32)
    ; GFX8-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD5]](f32)
    ; GFX8-NEXT: [[FLDEXP1:%[0-9]+]]:_(f32) = G_FLDEXP [[INT1]], [[FPTOSI1]](i32)
    ; GFX8-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[C4]], [[FLDEXP1]]
    ; GFX8-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV1]](f32), [[C5]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[C6]], [[SELECT2]]
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(f32) = COPY [[SELECT3]](f32)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[COPY1]](f32), [[COPY2]](f32)
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX8-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST5]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_fexp_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[C]]
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C]], [[FNEG]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C1]], [[FMA]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FSUB]], [[FMA1]]
    ; GFX9-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX9-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV]](f32), [[C4]]
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[C]]
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FMUL1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C]], [[FNEG1]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C1]], [[FMA2]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN1:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL1]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL1]], [[INTRINSIC_ROUNDEVEN1]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FMA3]]
    ; GFX9-NEXT: [[FPTOSI1:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN1]](f32)
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD1]](f32)
    ; GFX9-NEXT: [[FLDEXP1:%[0-9]+]]:_(f32) = G_FLDEXP [[INT1]], [[FPTOSI1]](i32)
    ; GFX9-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[C3]], [[FLDEXP1]]
    ; GFX9-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV1]](f32), [[C4]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[C5]], [[SELECT2]]
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(f32) = COPY [[SELECT3]](f32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[COPY1]](f32), [[COPY2]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST1]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %2:_(<2 x f32>) = G_FEXP %1
    %3:_(<2 x i32>) = G_BITCAST %2(<2 x f32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...

---
name: test_fexp_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; GFX6-LABEL: name: test_fexp_v3s32
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[C]]
    ; GFX6-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; GFX6-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C]], [[FNEG]]
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX6-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C1]], [[FMA]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX6-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FSUB]], [[FMA1]]
    ; GFX6-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX6-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX6-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX6-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX6-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX6-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX6-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV]](f32), [[C4]]
    ; GFX6-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX6-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[C]]
    ; GFX6-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FMUL1]]
    ; GFX6-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C]], [[FNEG1]]
    ; GFX6-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C1]], [[FMA2]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN1:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL1]]
    ; GFX6-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL1]], [[INTRINSIC_ROUNDEVEN1]]
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FMA3]]
    ; GFX6-NEXT: [[FPTOSI1:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN1]](f32)
    ; GFX6-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD1]](f32)
    ; GFX6-NEXT: [[FLDEXP1:%[0-9]+]]:_(f32) = G_FLDEXP [[INT1]], [[FPTOSI1]](i32)
    ; GFX6-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[C3]], [[FLDEXP1]]
    ; GFX6-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV1]](f32), [[C4]]
    ; GFX6-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[C5]], [[SELECT2]]
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(f32) = COPY [[SELECT3]](f32)
    ; GFX6-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[C]]
    ; GFX6-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[FMUL2]]
    ; GFX6-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[UV2]], [[C]], [[FNEG2]]
    ; GFX6-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[UV2]], [[C1]], [[FMA4]]
    ; GFX6-NEXT: [[INTRINSIC_ROUNDEVEN2:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL2]]
    ; GFX6-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[FMUL2]], [[INTRINSIC_ROUNDEVEN2]]
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FSUB2]], [[FMA5]]
    ; GFX6-NEXT: [[FPTOSI2:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN2]](f32)
    ; GFX6-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD2]](f32)
    ; GFX6-NEXT: [[FLDEXP2:%[0-9]+]]:_(f32) = G_FLDEXP [[INT2]], [[FPTOSI2]](i32)
    ; GFX6-NEXT: [[FCMP4:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV2]](f32), [[C2]]
    ; GFX6-NEXT: [[SELECT4:%[0-9]+]]:_(f32) = G_SELECT [[FCMP4]](i1), [[C3]], [[FLDEXP2]]
    ; GFX6-NEXT: [[FCMP5:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV2]](f32), [[C4]]
    ; GFX6-NEXT: [[SELECT5:%[0-9]+]]:_(f32) = G_SELECT [[FCMP5]](i1), [[C5]], [[SELECT4]]
    ; GFX6-NEXT: [[COPY3:%[0-9]+]]:_(f32) = COPY [[SELECT5]](f32)
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[COPY1]](f32), [[COPY2]](f32), [[COPY3]](f32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST1]](<3 x i32>)
    ;
    ; GFX8-LABEL: name: test_fexp_v3s32
    ; GFX8: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX8-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 -4096
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](f32)
    ; GFX8-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[AND]](i32)
    ; GFX8-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[UV]], [[BITCAST2]]
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7140000000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST2]], [[C1]]
    ; GFX8-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3F347652A0000000
    ; GFX8-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FSUB]], [[C2]]
    ; GFX8-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FSUB]], [[C1]]
    ; GFX8-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[FMUL1]]
    ; GFX8-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST2]], [[C2]]
    ; GFX8-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[FADD]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX8-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX8-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FADD1]]
    ; GFX8-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX8-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD2]](f32)
    ; GFX8-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX8-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX8-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX8-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C4]], [[FLDEXP]]
    ; GFX8-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX8-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV]](f32), [[C5]]
    ; GFX8-NEXT: [[C6:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX8-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C6]], [[SELECT]]
    ; GFX8-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](f32)
    ; GFX8-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C]]
    ; GFX8-NEXT: [[BITCAST4:%[0-9]+]]:_(f32) = G_BITCAST [[AND1]](i32)
    ; GFX8-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[UV1]], [[BITCAST4]]
    ; GFX8-NEXT: [[FMUL4:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST4]], [[C1]]
    ; GFX8-NEXT: [[FMUL5:%[0-9]+]]:_(f32) = G_FMUL [[FSUB2]], [[C2]]
    ; GFX8-NEXT: [[FMUL6:%[0-9]+]]:_(f32) = G_FMUL [[FSUB2]], [[C1]]
    ; GFX8-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL6]], [[FMUL5]]
    ; GFX8-NEXT: [[FMUL7:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST4]], [[C2]]
    ; GFX8-NEXT: [[FADD4:%[0-9]+]]:_(f32) = G_FADD [[FMUL7]], [[FADD3]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN1:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL4]]
    ; GFX8-NEXT: [[FSUB3:%[0-9]+]]:_(f32) = G_FSUB [[FMUL4]], [[INTRINSIC_ROUNDEVEN1]]
    ; GFX8-NEXT: [[FADD5:%[0-9]+]]:_(f32) = G_FADD [[FSUB3]], [[FADD4]]
    ; GFX8-NEXT: [[FPTOSI1:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN1]](f32)
    ; GFX8-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD5]](f32)
    ; GFX8-NEXT: [[FLDEXP1:%[0-9]+]]:_(f32) = G_FLDEXP [[INT1]], [[FPTOSI1]](i32)
    ; GFX8-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[C4]], [[FLDEXP1]]
    ; GFX8-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV1]](f32), [[C5]]
    ; GFX8-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[C6]], [[SELECT2]]
    ; GFX8-NEXT: [[COPY2:%[0-9]+]]:_(f32) = COPY [[SELECT3]](f32)
    ; GFX8-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](f32)
    ; GFX8-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C]]
    ; GFX8-NEXT: [[BITCAST6:%[0-9]+]]:_(f32) = G_BITCAST [[AND2]](i32)
    ; GFX8-NEXT: [[FSUB4:%[0-9]+]]:_(f32) = G_FSUB [[UV2]], [[BITCAST6]]
    ; GFX8-NEXT: [[FMUL8:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST6]], [[C1]]
    ; GFX8-NEXT: [[FMUL9:%[0-9]+]]:_(f32) = G_FMUL [[FSUB4]], [[C2]]
    ; GFX8-NEXT: [[FMUL10:%[0-9]+]]:_(f32) = G_FMUL [[FSUB4]], [[C1]]
    ; GFX8-NEXT: [[FADD6:%[0-9]+]]:_(f32) = G_FADD [[FMUL10]], [[FMUL9]]
    ; GFX8-NEXT: [[FMUL11:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST6]], [[C2]]
    ; GFX8-NEXT: [[FADD7:%[0-9]+]]:_(f32) = G_FADD [[FMUL11]], [[FADD6]]
    ; GFX8-NEXT: [[INTRINSIC_ROUNDEVEN2:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL8]]
    ; GFX8-NEXT: [[FSUB5:%[0-9]+]]:_(f32) = G_FSUB [[FMUL8]], [[INTRINSIC_ROUNDEVEN2]]
    ; GFX8-NEXT: [[FADD8:%[0-9]+]]:_(f32) = G_FADD [[FSUB5]], [[FADD7]]
    ; GFX8-NEXT: [[FPTOSI2:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN2]](f32)
    ; GFX8-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD8]](f32)
    ; GFX8-NEXT: [[FLDEXP2:%[0-9]+]]:_(f32) = G_FLDEXP [[INT2]], [[FPTOSI2]](i32)
    ; GFX8-NEXT: [[FCMP4:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV2]](f32), [[C3]]
    ; GFX8-NEXT: [[SELECT4:%[0-9]+]]:_(f32) = G_SELECT [[FCMP4]](i1), [[C4]], [[FLDEXP2]]
    ; GFX8-NEXT: [[FCMP5:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV2]](f32), [[C5]]
    ; GFX8-NEXT: [[SELECT5:%[0-9]+]]:_(f32) = G_SELECT [[FCMP5]](i1), [[C6]], [[SELECT4]]
    ; GFX8-NEXT: [[COPY3:%[0-9]+]]:_(f32) = COPY [[SELECT5]](f32)
    ; GFX8-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[COPY1]](f32), [[COPY2]](f32), [[COPY3]](f32)
    ; GFX8-NEXT: [[BITCAST7:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX8-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST7]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_fexp_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[C]]
    ; GFX9-NEXT: [[FNEG:%[0-9]+]]:_(f32) = G_FNEG [[FMUL]]
    ; GFX9-NEXT: [[FMA:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C]], [[FNEG]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3E54AE0BE0000000
    ; GFX9-NEXT: [[FMA1:%[0-9]+]]:_(f32) = G_FMA [[UV]], [[C1]], [[FMA]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL]]
    ; GFX9-NEXT: [[FSUB:%[0-9]+]]:_(f32) = G_FSUB [[FMUL]], [[INTRINSIC_ROUNDEVEN]]
    ; GFX9-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FSUB]], [[FMA1]]
    ; GFX9-NEXT: [[FPTOSI:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN]](f32)
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD]](f32)
    ; GFX9-NEXT: [[FLDEXP:%[0-9]+]]:_(f32) = G_FLDEXP [[INT]], [[FPTOSI]](i32)
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(f32) = G_FCONSTANT float 0xC059D1DA00000000
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(f32) = G_FCONSTANT float 0.000000e+00
    ; GFX9-NEXT: [[FCMP:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(f32) = G_SELECT [[FCMP]](i1), [[C3]], [[FLDEXP]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x40562E4300000000
    ; GFX9-NEXT: [[FCMP1:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV]](f32), [[C4]]
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x7FF0000000000000
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(f32) = G_SELECT [[FCMP1]](i1), [[C5]], [[SELECT]]
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(f32) = COPY [[SELECT1]](f32)
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[C]]
    ; GFX9-NEXT: [[FNEG1:%[0-9]+]]:_(f32) = G_FNEG [[FMUL1]]
    ; GFX9-NEXT: [[FMA2:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C]], [[FNEG1]]
    ; GFX9-NEXT: [[FMA3:%[0-9]+]]:_(f32) = G_FMA [[UV1]], [[C1]], [[FMA2]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN1:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL1]]
    ; GFX9-NEXT: [[FSUB1:%[0-9]+]]:_(f32) = G_FSUB [[FMUL1]], [[INTRINSIC_ROUNDEVEN1]]
    ; GFX9-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FSUB1]], [[FMA3]]
    ; GFX9-NEXT: [[FPTOSI1:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN1]](f32)
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD1]](f32)
    ; GFX9-NEXT: [[FLDEXP1:%[0-9]+]]:_(f32) = G_FLDEXP [[INT1]], [[FPTOSI1]](i32)
    ; GFX9-NEXT: [[FCMP2:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV1]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(f32) = G_SELECT [[FCMP2]](i1), [[C3]], [[FLDEXP1]]
    ; GFX9-NEXT: [[FCMP3:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV1]](f32), [[C4]]
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(f32) = G_SELECT [[FCMP3]](i1), [[C5]], [[SELECT2]]
    ; GFX9-NEXT: [[COPY2:%[0-9]+]]:_(f32) = COPY [[SELECT3]](f32)
    ; GFX9-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[C]]
    ; GFX9-NEXT: [[FNEG2:%[0-9]+]]:_(f32) = G_FNEG [[FMUL2]]
    ; GFX9-NEXT: [[FMA4:%[0-9]+]]:_(f32) = G_FMA [[UV2]], [[C]], [[FNEG2]]
    ; GFX9-NEXT: [[FMA5:%[0-9]+]]:_(f32) = G_FMA [[UV2]], [[C1]], [[FMA4]]
    ; GFX9-NEXT: [[INTRINSIC_ROUNDEVEN2:%[0-9]+]]:_(f32) = G_INTRINSIC_ROUNDEVEN [[FMUL2]]
    ; GFX9-NEXT: [[FSUB2:%[0-9]+]]:_(f32) = G_FSUB [[FMUL2]], [[INTRINSIC_ROUNDEVEN2]]
    ; GFX9-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FSUB2]], [[FMA5]]
    ; GFX9-NEXT: [[FPTOSI2:%[0-9]+]]:_(i32) = G_FPTOSI [[INTRINSIC_ROUNDEVEN2]](f32)
    ; GFX9-NEXT: [[INT2:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FADD2]](f32)
    ; GFX9-NEXT: [[FLDEXP2:%[0-9]+]]:_(f32) = G_FLDEXP [[INT2]], [[FPTOSI2]](i32)
    ; GFX9-NEXT: [[FCMP4:%[0-9]+]]:_(i1) = G_FCMP floatpred(olt), [[UV2]](f32), [[C2]]
    ; GFX9-NEXT: [[SELECT4:%[0-9]+]]:_(f32) = G_SELECT [[FCMP4]](i1), [[C3]], [[FLDEXP2]]
    ; GFX9-NEXT: [[FCMP5:%[0-9]+]]:_(i1) = G_FCMP floatpred(ogt), [[UV2]](f32), [[C4]]
    ; GFX9-NEXT: [[SELECT5:%[0-9]+]]:_(f32) = G_SELECT [[FCMP5]](i1), [[C5]], [[SELECT4]]
    ; GFX9-NEXT: [[COPY3:%[0-9]+]]:_(f32) = COPY [[SELECT5]](f32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[COPY1]](f32), [[COPY2]](f32), [[COPY3]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST1]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %2:_(<3 x f32>) = G_FEXP %1
    %3:_(<3 x i32>) = G_BITCAST %2(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %3(<3 x i32>)
...

---
name: test_fexp_s16
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_fexp_s16
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[C]]
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL]](f32)
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX6-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX8-LABEL: name: test_fexp_s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX8-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX8-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[C]]
    ; GFX8-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL]](f32)
    ; GFX8-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; GFX8-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX8-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_fexp_s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX9-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[C]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL]](f32)
    ; GFX9-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FEXP %2
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_fexp_v2s16
body: |
  bb.0:
    liveins: $vgpr0

    ; GFX6-LABEL: name: test_fexp_v2s16
    ; GFX6: liveins: $vgpr0
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT %5(f16)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[C]]
    ; GFX6-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL]](f32)
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT %6(f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT1]], [[C]]
    ; GFX6-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT1]](f32)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST1]](i16)
    ; GFX6-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX8-LABEL: name: test_fexp_v2s16
    ; GFX8: liveins: $vgpr0
    ; GFX8-NEXT: {{  $}}
    ; GFX8-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX8-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT %5(f16)
    ; GFX8-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX8-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[C]]
    ; GFX8-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL]](f32)
    ; GFX8-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; GFX8-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT %6(f16)
    ; GFX8-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT1]], [[C]]
    ; GFX8-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL1]](f32)
    ; GFX8-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT1]](f32)
    ; GFX8-NEXT: [[BITCAST:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC]](f16)
    ; GFX8-NEXT: [[BITCAST1:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX8-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST]](i16)
    ; GFX8-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST1]](i16)
    ; GFX8-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX8-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C1]](i32)
    ; GFX8-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX8-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX8-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX8-NEXT: $vgpr0 = COPY [[BITCAST3]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_fexp_v2s16
    ; GFX9: liveins: $vgpr0
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT %5(f16)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(f32) = G_FCONSTANT float 0x3FF7154760000000
    ; GFX9-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[C]]
    ; GFX9-NEXT: [[INT:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL]](f32)
    ; GFX9-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT]](f32)
    ; GFX9-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT %6(f16)
    ; GFX9-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT1]], [[C]]
    ; GFX9-NEXT: [[INT1:%[0-9]+]]:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.exp2), [[FMUL1]](f32)
    ; GFX9-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[INT1]](f32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FPTRUNC]](f16), [[FPTRUNC1]](f16)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[BITCAST]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x f16>) = G_FEXP %1
    %2:_(<2 x i16>) = G_BITCAST %1(<2 x f16>)
    $vgpr0 = COPY %2(<2 x i16>)
...
