# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=gfx908 -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-fast | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx908 -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-greedy | FileCheck %s

---
name: merge_s64_s32_s32_ss
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $sgpr1
    ; CHECK-LABEL: name: merge_s64_s32_s32_ss
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i64) = COPY $sgpr0_sgpr1
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:sgpr(i32) = G_EXTRACT [[COPY]](i64), 0
    ; CHECK-NEXT: [[EXTRACT1:%[0-9]+]]:sgpr(i32) = G_EXTRACT [[COPY]](i64), 32
    ; CHECK-NEXT: [[MV:%[0-9]+]]:sgpr(i64) = G_MERGE_VALUES [[EXTRACT]](i32), [[EXTRACT1]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[MV]](i64)
    %0:_(i64) = COPY $sgpr0_sgpr1
    %1:_(i32) = G_EXTRACT %0(i64), 0
    %2:_(i32) = G_EXTRACT %0(i64), 32
    %3:_(i64) = G_MERGE_VALUES %1(i32), %2(i32)
    S_ENDPGM 0, implicit %3(i64)
...

---
name: merge_s64_s32_s32_s64
legalized: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1
    ; CHECK-LABEL: name: merge_s64_s32_s32_s64
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[EXTRACT:%[0-9]+]]:vgpr(i32) = G_EXTRACT [[COPY]](i64), 0
    ; CHECK-NEXT: [[EXTRACT1:%[0-9]+]]:vgpr(i32) = G_EXTRACT [[COPY]](i64), 32
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(i64) = G_MERGE_VALUES [[EXTRACT]](i32), [[EXTRACT1]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[MV]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_EXTRACT %0(i64), 0
    %2:_(i32) = G_EXTRACT %0(i64), 32
    %3:_(i64) = G_MERGE_VALUES %1(i32), %2(i32)
    S_ENDPGM 0, implicit %3(i64)
...

---
name: merge_s64_s32_s32_aa
legalized: true

body: |
  bb.0:
    liveins: $agpr0, $agpr1
    ; CHECK-LABEL: name: merge_s64_s32_s32_aa
    ; CHECK: liveins: $agpr0, $agpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:agpr(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[MV]](i64)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $agpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(i64)
...

---
name: merge_s64_s32_s32_sa
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $agpr0
    ; CHECK-LABEL: name: merge_s64_s32_s32_sa
    ; CHECK: liveins: $sgpr0, $agpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(i64) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[MV]](i64)
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $agpr0
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(i64)
...

---
name: merge_s64_s32_s32_as
legalized: true

body: |
  bb.0:
    liveins: $sgpr0, $agpr0
    ; CHECK-LABEL: name: merge_s64_s32_s32_as
    ; CHECK: liveins: $sgpr0, $agpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:agpr(i32) = COPY $agpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY]](i32)
    ; CHECK-NEXT: [[COPY3:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:vgpr(i64) = G_MERGE_VALUES [[COPY2]](i32), [[COPY3]](i32)
    ; CHECK-NEXT: S_ENDPGM 0, implicit [[MV]](i64)
    %0:_(i32) = COPY $agpr0
    %1:_(i32) = COPY $sgpr0
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    S_ENDPGM 0, implicit %2(i64)
...
