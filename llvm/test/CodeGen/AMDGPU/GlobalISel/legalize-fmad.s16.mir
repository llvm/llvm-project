# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX6 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX7 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX10 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX10 %s

---
name: test_fmad_s16_flush
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: false
    fp64-fp16-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s16_flush
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX6-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s16_flush
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD]](f16)
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX10-LABEL: name: test_fmad_s16_flush
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX10-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX10-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr1
    %3:_(i16) = G_TRUNC %0(i32)
    %4:_(i16) = G_TRUNC %1(i32)
    %5:_(i16) = G_TRUNC %2(i32)
    %6:_(f16) = G_BITCAST %3(i16)
    %7:_(f16) = G_BITCAST %4(i16)
    %8:_(f16) = G_BITCAST %5(i16)
    %9:_(f16) = G_FMAD %6, %7, %8
    %10:_(i16) = G_BITCAST %9(f16)
    %11:_(i32) = G_ANYEXT %10(i16)
    $vgpr0 = COPY %11(i32)
...

---
name: test_fmad_v2s16_flush
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: false
    fp64-fp16-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_v2s16_flush
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %31(i16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST6]](f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[FPEXT5]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT6]], [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST17]](<2 x f16>)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST18]](<2 x i16>)
    ;
    ; GFX7-LABEL: name: test_fmad_v2s16_flush
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %16(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %22(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %17(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %23(i16)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %27(i16)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST3]], [[BITCAST4]], [[BITCAST11]]
    ; GFX7-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %28(i16)
    ; GFX7-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[FMAD1:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST5]], [[BITCAST6]], [[BITCAST12]]
    ; GFX7-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD]](f16)
    ; GFX7-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD1]](f16)
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX7-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX7-NEXT: [[BITCAST18:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST17]](<2 x f16>)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST18]](<2 x i16>)
    ;
    ; GFX10-LABEL: name: test_fmad_v2s16_flush
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; GFX10-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; GFX10-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX10-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX10-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX10-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX10-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; GFX10-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX10-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX10-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST11]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[BITCAST6]]
    ; GFX10-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[FMUL1]], [[BITCAST12]]
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX10-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST15]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = COPY $vgpr2
    %3:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %4:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %5:_(<2 x f16>) = G_BITCAST %2(<2 x i16>)
    %6:_(<2 x f16>) = G_FMAD %3, %4, %5
    %7:_(<2 x i16>) = G_BITCAST %6(<2 x f16>)
    $vgpr0 = COPY %7(<2 x i16>)
...

---
name: test_fmad_v4s16_flush
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: false
    fp64-fp16-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; GFX6-LABEL: name: test_fmad_v4s16_flush
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %60(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %66(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %61(i16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %67(i16)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %71(i16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %76(i16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %72(i16)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %77(i16)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX6-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %81(i16)
    ; GFX6-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %86(i16)
    ; GFX6-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %82(i16)
    ; GFX6-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %87(i16)
    ; GFX6-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX6-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX6-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX6-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST19]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[FPEXT5]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST21]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT6]], [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[FPEXT8:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FPEXT9:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX6-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT8]], [[FPEXT9]]
    ; GFX6-NEXT: [[FPTRUNC4:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL2]](f32)
    ; GFX6-NEXT: [[FPEXT10:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC4]](f16)
    ; GFX6-NEXT: [[FPEXT11:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST20]](f16)
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT10]], [[FPEXT11]]
    ; GFX6-NEXT: [[FPTRUNC5:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; GFX6-NEXT: [[FPEXT12:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST6]](f16)
    ; GFX6-NEXT: [[FPEXT13:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST14]](f16)
    ; GFX6-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT12]], [[FPEXT13]]
    ; GFX6-NEXT: [[FPTRUNC6:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL3]](f32)
    ; GFX6-NEXT: [[FPEXT14:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC6]](f16)
    ; GFX6-NEXT: [[FPEXT15:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST22]](f16)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FPEXT14]], [[FPEXT15]]
    ; GFX6-NEXT: [[FPTRUNC7:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX6-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[BITCAST28:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST28]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST29:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC5]](f16)
    ; GFX6-NEXT: [[BITCAST31:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC7]](f16)
    ; GFX6-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; GFX6-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST31]](i16)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX6-NEXT: [[BITCAST32:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST29]](<2 x f16>), [[BITCAST32]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST33:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST33]](<4 x i16>)
    ;
    ; GFX7-LABEL: name: test_fmad_v4s16_flush
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %32(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %38(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %33(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %39(i16)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX7-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX7-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %44(i16)
    ; GFX7-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %49(i16)
    ; GFX7-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX7-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX7-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX7-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %54(i16)
    ; GFX7-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %59(i16)
    ; GFX7-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX7-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX7-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX7-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST3]], [[BITCAST11]], [[BITCAST19]]
    ; GFX7-NEXT: [[FMAD1:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST5]], [[BITCAST13]], [[BITCAST21]]
    ; GFX7-NEXT: [[FMAD2:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST4]], [[BITCAST12]], [[BITCAST20]]
    ; GFX7-NEXT: [[FMAD3:%[0-9]+]]:_(f16) = G_FMAD [[BITCAST6]], [[BITCAST14]], [[BITCAST22]]
    ; GFX7-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD]](f16)
    ; GFX7-NEXT: [[BITCAST28:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD1]](f16)
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST28]](i16)
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX7-NEXT: [[BITCAST29:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX7-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD2]](f16)
    ; GFX7-NEXT: [[BITCAST31:%[0-9]+]]:_(i16) = G_BITCAST [[FMAD3]](f16)
    ; GFX7-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; GFX7-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST31]](i16)
    ; GFX7-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX7-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX7-NEXT: [[BITCAST32:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; GFX7-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST29]](<2 x f16>), [[BITCAST32]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST33:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST33]](<4 x i16>)
    ;
    ; GFX10-LABEL: name: test_fmad_v4s16_flush
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX10-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX10-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX10-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX10-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX10-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX10-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; GFX10-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; GFX10-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX10-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX10-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX10-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX10-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX10-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX10-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; GFX10-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %62(i16)
    ; GFX10-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX10-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %63(i16)
    ; GFX10-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX10-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX10-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX10-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[BITCAST11]]
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST19]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[BITCAST13]]
    ; GFX10-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[FMUL1]], [[BITCAST21]]
    ; GFX10-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST4]], [[BITCAST12]]
    ; GFX10-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[FMUL2]], [[BITCAST20]]
    ; GFX10-NEXT: [[FMUL3:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST6]], [[BITCAST14]]
    ; GFX10-NEXT: [[FADD3:%[0-9]+]]:_(f16) = G_FADD [[FMUL3]], [[BITCAST22]]
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX10-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD2]](f16), [[FADD3]](f16)
    ; GFX10-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST27:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST27]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x i16>) = COPY $vgpr4_vgpr5
    %3:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %4:_(<4 x f16>) = G_BITCAST %1(<4 x i16>)
    %5:_(<4 x f16>) = G_BITCAST %2(<4 x i16>)
    %6:_(<4 x f16>) = G_FMAD %3, %4, %5
    %7:_(<4 x i16>) = G_BITCAST %6(<4 x f16>)
    $vgpr0_vgpr1 = COPY %7(<4 x i16>)
...


---
name: test_fmad_s16_denorm
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s16_denorm
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX6-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s16_denorm
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX10-LABEL: name: test_fmad_s16_denorm
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX10-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX10-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr1
    %3:_(i16) = G_TRUNC %0(i32)
    %4:_(i16) = G_TRUNC %1(i32)
    %5:_(i16) = G_TRUNC %2(i32)
    %6:_(f16) = G_BITCAST %3(i16)
    %7:_(f16) = G_BITCAST %4(i16)
    %8:_(f16) = G_BITCAST %5(i16)
    %9:_(f16) = G_FMAD %6, %7, %8
    %10:_(i16) = G_BITCAST %9(f16)
    %11:_(i32) = G_ANYEXT %10(i16)
    $vgpr0 = COPY %11(i32)
...

---
name: test_fmad_s16_denorm_flags
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s16_denorm_flags
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST]](f16)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST1]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST2]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX6-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s16_denorm_flags
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX7-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX7-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX10-LABEL: name: test_fmad_s16_denorm_flags
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[COPY2]](i32)
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC]](i16)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC1]](i16)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(f16) = G_BITCAST [[TRUNC2]](i16)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX10-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[BITCAST3]](i16)
    ; GFX10-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr1
    %3:_(i16) = G_TRUNC %0(i32)
    %4:_(i16) = G_TRUNC %1(i32)
    %5:_(i16) = G_TRUNC %2(i32)
    %6:_(f16) = G_BITCAST %3(i16)
    %7:_(f16) = G_BITCAST %4(i16)
    %8:_(f16) = G_BITCAST %5(i16)
    %9:_(f16) = nnan G_FMAD %6, %7, %8
    %10:_(i16) = G_BITCAST %9(f16)
    %11:_(i32) = G_ANYEXT %10(i16)
    $vgpr0 = COPY %11(i32)
...

---
name: test_fmad_v2s16_denorm
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_v2s16_denorm
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %31(i16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST6]](f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[FPEXT5]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT6]], [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST17]](<2 x f16>)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST18]](<2 x i16>)
    ;
    ; GFX7-LABEL: name: test_fmad_v2s16_denorm
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; GFX7-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX7-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST11]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[BITCAST6]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[FMUL1]], [[BITCAST12]]
    ; GFX7-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX7-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX7-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX7-NEXT: [[BITCAST18:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST17]](<2 x f16>)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST18]](<2 x i16>)
    ;
    ; GFX10-LABEL: name: test_fmad_v2s16_denorm
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; GFX10-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; GFX10-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX10-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX10-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX10-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX10-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; GFX10-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX10-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX10-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST11]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[BITCAST6]]
    ; GFX10-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[FMUL1]], [[BITCAST12]]
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX10-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST15]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = COPY $vgpr2
    %3:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %4:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %5:_(<2 x f16>) = G_BITCAST %2(<2 x i16>)
    %6:_(<2 x f16>) = G_FMAD %3, %4, %5
    %7:_(<2 x i16>) = G_BITCAST %6(<2 x f16>)
    $vgpr0 = COPY %7(<2 x i16>)
...

---
name: test_fmad_v2s16_denorm_flags
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_v2s16_denorm_flags
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %31(i16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %41(i16)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST6]](f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT4]], [[FPEXT5]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT6]], [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST17]](<2 x f16>)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST18]](<2 x i16>)
    ;
    ; GFX7-LABEL: name: test_fmad_v2s16_denorm_flags
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; GFX7-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX7-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL]], [[BITCAST11]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST5]], [[BITCAST6]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL1]], [[BITCAST12]]
    ; GFX7-NEXT: [[BITCAST15:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX7-NEXT: [[BITCAST16:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST15]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST16]](i16)
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX7-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX7-NEXT: [[BITCAST18:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST17]](<2 x f16>)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST18]](<2 x i16>)
    ;
    ; GFX10-LABEL: name: test_fmad_v2s16_denorm_flags
    ; GFX10: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr2
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY1]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[COPY2]](<2 x i16>)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %18(i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %24(i16)
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %19(i16)
    ; GFX10-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %25(i16)
    ; GFX10-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX10-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX10-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX10-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX10-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %29(i16)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST3]], [[BITCAST4]]
    ; GFX10-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %30(i16)
    ; GFX10-NEXT: [[BITCAST13:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BITCAST2]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST14:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST13]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST14]](i32)
    ; GFX10-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST14]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL]], [[BITCAST11]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST5]], [[BITCAST6]]
    ; GFX10-NEXT: [[FADD1:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL1]], [[BITCAST12]]
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX10-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[BUILD_VECTOR]](<2 x f16>)
    ; GFX10-NEXT: $vgpr0 = COPY [[BITCAST15]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = COPY $vgpr2
    %3:_(<2 x f16>) = G_BITCAST %0(<2 x i16>)
    %4:_(<2 x f16>) = G_BITCAST %1(<2 x i16>)
    %5:_(<2 x f16>) = G_BITCAST %2(<2 x i16>)
    %6:_(<2 x f16>) = nnan G_FMAD %3, %4, %5
    %7:_(<2 x i16>) = G_BITCAST %6(<2 x f16>)
    $vgpr0 = COPY %7(<2 x i16>)
...

---
name: test_fmad_v4s16_denorm
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; GFX6-LABEL: name: test_fmad_v4s16_denorm
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %60(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %66(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %61(i16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %67(i16)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %71(i16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %76(i16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %72(i16)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %77(i16)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX6-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %81(i16)
    ; GFX6-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %86(i16)
    ; GFX6-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %82(i16)
    ; GFX6-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %87(i16)
    ; GFX6-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX6-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX6-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX6-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST19]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT4]], [[FPEXT5]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST21]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FPEXT6]], [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[FPEXT8:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FPEXT9:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX6-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT8]], [[FPEXT9]]
    ; GFX6-NEXT: [[FPTRUNC4:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL2]](f32)
    ; GFX6-NEXT: [[FPEXT10:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC4]](f16)
    ; GFX6-NEXT: [[FPEXT11:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST20]](f16)
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FPEXT10]], [[FPEXT11]]
    ; GFX6-NEXT: [[FPTRUNC5:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; GFX6-NEXT: [[FPEXT12:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST6]](f16)
    ; GFX6-NEXT: [[FPEXT13:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST14]](f16)
    ; GFX6-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[FPEXT12]], [[FPEXT13]]
    ; GFX6-NEXT: [[FPTRUNC6:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL3]](f32)
    ; GFX6-NEXT: [[FPEXT14:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC6]](f16)
    ; GFX6-NEXT: [[FPEXT15:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST22]](f16)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FPEXT14]], [[FPEXT15]]
    ; GFX6-NEXT: [[FPTRUNC7:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX6-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[BITCAST28:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST28]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST29:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC5]](f16)
    ; GFX6-NEXT: [[BITCAST31:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC7]](f16)
    ; GFX6-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; GFX6-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST31]](i16)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX6-NEXT: [[BITCAST32:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST29]](<2 x f16>), [[BITCAST32]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST33:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST33]](<4 x i16>)
    ;
    ; GFX7-LABEL: name: test_fmad_v4s16_denorm
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; GFX7-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; GFX7-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX7-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX7-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX7-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; GFX7-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %62(i16)
    ; GFX7-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX7-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %63(i16)
    ; GFX7-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX7-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX7-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX7-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[BITCAST11]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST19]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[BITCAST13]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[FMUL1]], [[BITCAST21]]
    ; GFX7-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST4]], [[BITCAST12]]
    ; GFX7-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[FMUL2]], [[BITCAST20]]
    ; GFX7-NEXT: [[FMUL3:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST6]], [[BITCAST14]]
    ; GFX7-NEXT: [[FADD3:%[0-9]+]]:_(f16) = G_FADD [[FMUL3]], [[BITCAST22]]
    ; GFX7-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX7-NEXT: [[BITCAST28:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST28]](i16)
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX7-NEXT: [[BITCAST29:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX7-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[FADD2]](f16)
    ; GFX7-NEXT: [[BITCAST31:%[0-9]+]]:_(i16) = G_BITCAST [[FADD3]](f16)
    ; GFX7-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; GFX7-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST31]](i16)
    ; GFX7-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX7-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX7-NEXT: [[BITCAST32:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; GFX7-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST29]](<2 x f16>), [[BITCAST32]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST33:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST33]](<4 x i16>)
    ;
    ; GFX10-LABEL: name: test_fmad_v4s16_denorm
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX10-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX10-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX10-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX10-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX10-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX10-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; GFX10-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; GFX10-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX10-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX10-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX10-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX10-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX10-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX10-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; GFX10-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %62(i16)
    ; GFX10-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX10-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %63(i16)
    ; GFX10-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX10-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX10-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX10-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST3]], [[BITCAST11]]
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = G_FADD [[FMUL]], [[BITCAST19]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST5]], [[BITCAST13]]
    ; GFX10-NEXT: [[FADD1:%[0-9]+]]:_(f16) = G_FADD [[FMUL1]], [[BITCAST21]]
    ; GFX10-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST4]], [[BITCAST12]]
    ; GFX10-NEXT: [[FADD2:%[0-9]+]]:_(f16) = G_FADD [[FMUL2]], [[BITCAST20]]
    ; GFX10-NEXT: [[FMUL3:%[0-9]+]]:_(f16) = G_FMUL [[BITCAST6]], [[BITCAST14]]
    ; GFX10-NEXT: [[FADD3:%[0-9]+]]:_(f16) = G_FADD [[FMUL3]], [[BITCAST22]]
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX10-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD2]](f16), [[FADD3]](f16)
    ; GFX10-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST27:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST27]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x i16>) = COPY $vgpr4_vgpr5
    %3:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %4:_(<4 x f16>) = G_BITCAST %1(<4 x i16>)
    %5:_(<4 x f16>) = G_BITCAST %2(<4 x i16>)
    %6:_(<4 x f16>) = G_FMAD %3, %4, %5
    %7:_(<4 x i16>) = G_BITCAST %6(<4 x f16>)
    $vgpr0_vgpr1 = COPY %7(<4 x i16>)
...


---
name: test_fmad_v4s16_denorm_flags
machineFunctionInfo:
  mode:
    fp64-fp16-input-denormals: true
    fp64-fp16-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; GFX6-LABEL: name: test_fmad_v4s16_denorm_flags
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %60(i16)
    ; GFX6-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %66(i16)
    ; GFX6-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %61(i16)
    ; GFX6-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %67(i16)
    ; GFX6-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX6-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX6-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX6-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX6-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %71(i16)
    ; GFX6-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %76(i16)
    ; GFX6-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %72(i16)
    ; GFX6-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %77(i16)
    ; GFX6-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX6-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX6-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX6-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX6-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %81(i16)
    ; GFX6-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %86(i16)
    ; GFX6-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %82(i16)
    ; GFX6-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %87(i16)
    ; GFX6-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX6-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX6-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX6-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX6-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX6-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX6-NEXT: [[FPEXT:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST3]](f16)
    ; GFX6-NEXT: [[FPEXT1:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST11]](f16)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT]], [[FPEXT1]]
    ; GFX6-NEXT: [[FPTRUNC:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL]](f32)
    ; GFX6-NEXT: [[FPEXT2:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC]](f16)
    ; GFX6-NEXT: [[FPEXT3:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST19]](f16)
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT2]], [[FPEXT3]]
    ; GFX6-NEXT: [[FPTRUNC1:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD]](f32)
    ; GFX6-NEXT: [[FPEXT4:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST5]](f16)
    ; GFX6-NEXT: [[FPEXT5:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST13]](f16)
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT4]], [[FPEXT5]]
    ; GFX6-NEXT: [[FPTRUNC2:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL1]](f32)
    ; GFX6-NEXT: [[FPEXT6:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC2]](f16)
    ; GFX6-NEXT: [[FPEXT7:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST21]](f16)
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT6]], [[FPEXT7]]
    ; GFX6-NEXT: [[FPTRUNC3:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD1]](f32)
    ; GFX6-NEXT: [[FPEXT8:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST4]](f16)
    ; GFX6-NEXT: [[FPEXT9:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST12]](f16)
    ; GFX6-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT8]], [[FPEXT9]]
    ; GFX6-NEXT: [[FPTRUNC4:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL2]](f32)
    ; GFX6-NEXT: [[FPEXT10:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC4]](f16)
    ; GFX6-NEXT: [[FPEXT11:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST20]](f16)
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT10]], [[FPEXT11]]
    ; GFX6-NEXT: [[FPTRUNC5:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD2]](f32)
    ; GFX6-NEXT: [[FPEXT12:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST6]](f16)
    ; GFX6-NEXT: [[FPEXT13:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST14]](f16)
    ; GFX6-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = nnan G_FMUL [[FPEXT12]], [[FPEXT13]]
    ; GFX6-NEXT: [[FPTRUNC6:%[0-9]+]]:_(f16) = G_FPTRUNC [[FMUL3]](f32)
    ; GFX6-NEXT: [[FPEXT14:%[0-9]+]]:_(f32) = G_FPEXT [[FPTRUNC6]](f16)
    ; GFX6-NEXT: [[FPEXT15:%[0-9]+]]:_(f32) = G_FPEXT [[BITCAST22]](f16)
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = nnan G_FADD [[FPEXT14]], [[FPEXT15]]
    ; GFX6-NEXT: [[FPTRUNC7:%[0-9]+]]:_(f16) = G_FPTRUNC [[FADD3]](f32)
    ; GFX6-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC1]](f16)
    ; GFX6-NEXT: [[BITCAST28:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC3]](f16)
    ; GFX6-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; GFX6-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST28]](i16)
    ; GFX6-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX6-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX6-NEXT: [[BITCAST29:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX6-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC5]](f16)
    ; GFX6-NEXT: [[BITCAST31:%[0-9]+]]:_(i16) = G_BITCAST [[FPTRUNC7]](f16)
    ; GFX6-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; GFX6-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST31]](i16)
    ; GFX6-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX6-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX6-NEXT: [[BITCAST32:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; GFX6-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST29]](<2 x f16>), [[BITCAST32]](<2 x f16>)
    ; GFX6-NEXT: [[BITCAST33:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST33]](<4 x i16>)
    ;
    ; GFX7-LABEL: name: test_fmad_v4s16_denorm_flags
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX7-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX7-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX7-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX7-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX7-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX7-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX7-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX7-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; GFX7-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; GFX7-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX7-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX7-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX7-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX7-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX7-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX7-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; GFX7-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %62(i16)
    ; GFX7-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX7-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %63(i16)
    ; GFX7-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX7-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX7-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX7-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX7-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX7-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST3]], [[BITCAST11]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL]], [[BITCAST19]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST5]], [[BITCAST13]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL1]], [[BITCAST21]]
    ; GFX7-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST4]], [[BITCAST12]]
    ; GFX7-NEXT: [[FADD2:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL2]], [[BITCAST20]]
    ; GFX7-NEXT: [[FMUL3:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST6]], [[BITCAST14]]
    ; GFX7-NEXT: [[FADD3:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL3]], [[BITCAST22]]
    ; GFX7-NEXT: [[BITCAST27:%[0-9]+]]:_(i16) = G_BITCAST [[FADD]](f16)
    ; GFX7-NEXT: [[BITCAST28:%[0-9]+]]:_(i16) = G_BITCAST [[FADD1]](f16)
    ; GFX7-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST27]](i16)
    ; GFX7-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST28]](i16)
    ; GFX7-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; GFX7-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; GFX7-NEXT: [[BITCAST29:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR]](i32)
    ; GFX7-NEXT: [[BITCAST30:%[0-9]+]]:_(i16) = G_BITCAST [[FADD2]](f16)
    ; GFX7-NEXT: [[BITCAST31:%[0-9]+]]:_(i16) = G_BITCAST [[FADD3]](f16)
    ; GFX7-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST30]](i16)
    ; GFX7-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[BITCAST31]](i16)
    ; GFX7-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; GFX7-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; GFX7-NEXT: [[BITCAST32:%[0-9]+]]:_(<2 x f16>) = G_BITCAST [[OR1]](i32)
    ; GFX7-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BITCAST29]](<2 x f16>), [[BITCAST32]](<2 x f16>)
    ; GFX7-NEXT: [[BITCAST33:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST33]](<4 x i16>)
    ;
    ; GFX10-LABEL: name: test_fmad_v4s16_denorm_flags
    ; GFX10: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX10-NEXT: {{  $}}
    ; GFX10-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX10-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX10-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr4_vgpr5
    ; GFX10-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY]](<4 x i16>)
    ; GFX10-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY1]](<4 x i16>)
    ; GFX10-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f16>) = G_BITCAST [[COPY2]](<4 x i16>)
    ; GFX10-NEXT: [[UV:%[0-9]+]]:_(<2 x f16>), [[UV1:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST3:%[0-9]+]]:_(f16) = G_BITCAST %36(i16)
    ; GFX10-NEXT: [[BITCAST4:%[0-9]+]]:_(f16) = G_BITCAST %42(i16)
    ; GFX10-NEXT: [[BITCAST5:%[0-9]+]]:_(f16) = G_BITCAST %37(i16)
    ; GFX10-NEXT: [[BITCAST6:%[0-9]+]]:_(f16) = G_BITCAST %43(i16)
    ; GFX10-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST8:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST7]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST8]](i32)
    ; GFX10-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX10-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST8]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX10-NEXT: [[BITCAST9:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST10:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST9]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST10]](i32)
    ; GFX10-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST10]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; GFX10-NEXT: [[UV2:%[0-9]+]]:_(<2 x f16>), [[UV3:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST11:%[0-9]+]]:_(f16) = G_BITCAST %47(i16)
    ; GFX10-NEXT: [[BITCAST12:%[0-9]+]]:_(f16) = G_BITCAST %52(i16)
    ; GFX10-NEXT: [[BITCAST13:%[0-9]+]]:_(f16) = G_BITCAST %48(i16)
    ; GFX10-NEXT: [[BITCAST14:%[0-9]+]]:_(f16) = G_BITCAST %53(i16)
    ; GFX10-NEXT: [[BITCAST15:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV3]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST16:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST15]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST16]](i32)
    ; GFX10-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST16]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX10-NEXT: [[BITCAST17:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV2]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST18:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST17]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST18]](i32)
    ; GFX10-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST18]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX10-NEXT: [[UV4:%[0-9]+]]:_(<2 x f16>), [[UV5:%[0-9]+]]:_(<2 x f16>) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f16>)
    ; GFX10-NEXT: [[BITCAST19:%[0-9]+]]:_(f16) = G_BITCAST %57(i16)
    ; GFX10-NEXT: [[BITCAST20:%[0-9]+]]:_(f16) = G_BITCAST %62(i16)
    ; GFX10-NEXT: [[BITCAST21:%[0-9]+]]:_(f16) = G_BITCAST %58(i16)
    ; GFX10-NEXT: [[BITCAST22:%[0-9]+]]:_(f16) = G_BITCAST %63(i16)
    ; GFX10-NEXT: [[BITCAST23:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV5]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST24:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST23]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC8:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST24]](i32)
    ; GFX10-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST24]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC9:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR4]](i32)
    ; GFX10-NEXT: [[BITCAST25:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[UV4]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST26:%[0-9]+]]:_(i32) = G_BITCAST [[BITCAST25]](<2 x i16>)
    ; GFX10-NEXT: [[TRUNC10:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST26]](i32)
    ; GFX10-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST26]], [[C]](i32)
    ; GFX10-NEXT: [[TRUNC11:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR5]](i32)
    ; GFX10-NEXT: [[FMUL:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST3]], [[BITCAST11]]
    ; GFX10-NEXT: [[FADD:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL]], [[BITCAST19]]
    ; GFX10-NEXT: [[FMUL1:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST5]], [[BITCAST13]]
    ; GFX10-NEXT: [[FADD1:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL1]], [[BITCAST21]]
    ; GFX10-NEXT: [[FMUL2:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST4]], [[BITCAST12]]
    ; GFX10-NEXT: [[FADD2:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL2]], [[BITCAST20]]
    ; GFX10-NEXT: [[FMUL3:%[0-9]+]]:_(f16) = nnan G_FMUL [[BITCAST6]], [[BITCAST14]]
    ; GFX10-NEXT: [[FADD3:%[0-9]+]]:_(f16) = nnan G_FADD [[FMUL3]], [[BITCAST22]]
    ; GFX10-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD]](f16), [[FADD1]](f16)
    ; GFX10-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x f16>) = G_BUILD_VECTOR [[FADD2]](f16), [[FADD3]](f16)
    ; GFX10-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x f16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x f16>), [[BUILD_VECTOR1]](<2 x f16>)
    ; GFX10-NEXT: [[BITCAST27:%[0-9]+]]:_(<4 x i16>) = G_BITCAST [[CONCAT_VECTORS]](<4 x f16>)
    ; GFX10-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST27]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x i16>) = COPY $vgpr4_vgpr5
    %3:_(<4 x f16>) = G_BITCAST %0(<4 x i16>)
    %4:_(<4 x f16>) = G_BITCAST %1(<4 x i16>)
    %5:_(<4 x f16>) = G_BITCAST %2(<4 x i16>)
    %6:_(<4 x f16>) = nnan G_FMAD %3, %4, %5
    %7:_(<4 x i16>) = G_BITCAST %6(<4 x f16>)
    $vgpr0_vgpr1 = COPY %7(<4 x i16>)
...
