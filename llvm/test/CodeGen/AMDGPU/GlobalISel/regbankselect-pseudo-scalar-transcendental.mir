# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-fast | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=gfx1200 -run-pass=regbankselect %s -verify-machineinstrs -o - -regbankselect-greedy | FileCheck %s

---
name:            v_s_exp_f32
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_exp_f32
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[FEXP2_:%[0-9]+]]:sgpr(f32) = G_FEXP2 [[FEXP2_]]
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(i32) = G_BITCAST [[FEXP2_]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(f32) = G_FEXP2 %1
    %2:_(i32) = G_BITCAST %1(f32)
    $vgpr0 = COPY %2(i32)
...
---
name:            v_s_exp_f16
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_exp_f16
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FEXP2_:%[0-9]+]]:sgpr(f16) = G_FEXP2 [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i16) = G_BITCAST [[FEXP2_]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FEXP2 %2
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...
---
name:            v_s_log_f32
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_log_f32
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FLOG2_:%[0-9]+]]:sgpr(f32) = G_FLOG2 [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i32) = G_BITCAST [[FLOG2_]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FLOG2 %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)

...
---
name:            v_s_log_f16
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_log_f16
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FLOG2_:%[0-9]+]]:sgpr(f16) = G_FLOG2 [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i16) = G_BITCAST [[FLOG2_]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FLOG2 %2
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...
---
name:            v_s_rcp_f32
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_rcp_f32
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:sgpr(f32) = nnan ninf nsz arcp contract afn reassoc G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = nnan ninf nsz arcp contract afn reassoc G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), %1(f32)
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)

...
---
name:            v_s_rcp_f16
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_rcp_f16
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:sgpr(f16) = nnan ninf nsz arcp contract afn reassoc G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), [[BITCAST]](f16)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i16) = G_BITCAST [[INT]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = nnan ninf nsz arcp contract afn reassoc G_INTRINSIC intrinsic(@llvm.amdgcn.rcp), %2(f16)
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...
---
name:            v_s_rsq_f32
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_rsq_f32
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:sgpr(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), %1(f32)
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)

...
---
name:            v_s_rsq_f16
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_rsq_f16
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:sgpr(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), [[BITCAST]](f16)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i16) = G_BITCAST [[INT]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.rsq), %2(f16)
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...
---
name:            v_s_sqrt_f32
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_sqrt_f32
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[FSQRT:%[0-9]+]]:sgpr(f32) = G_FSQRT [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i32) = G_BITCAST [[FSQRT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_FSQRT %1
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)

...
---
name:            v_s_sqrt_f16
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_s_sqrt_f16
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[FSQRT:%[0-9]+]]:sgpr(f16) = G_FSQRT [[BITCAST]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i16) = G_BITCAST [[FSQRT]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_FSQRT %2
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...
---
name:            v_amdgcn_sqrt_f32
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_amdgcn_sqrt_f32
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f32) = G_BITCAST [[COPY]](i32)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:sgpr(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[BITCAST]](f32)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i32) = G_BITCAST [[INT]](f32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(f32) = G_BITCAST %0(i32)
    %2:_(f32) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), %1(f32)
    %3:_(i32) = G_BITCAST %2(f32)
    $vgpr0 = COPY %3(i32)

...
---
name:            v_amdgcn_sqrt_f16
legalized:       true
body:             |
  bb.0:
    liveins: $sgpr0

    ; CHECK-LABEL: name: v_amdgcn_sqrt_f16
    ; CHECK: liveins: $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:sgpr(i16) = G_TRUNC [[COPY]](i32)
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:sgpr(f16) = G_BITCAST [[TRUNC]](i16)
    ; CHECK-NEXT: [[INT:%[0-9]+]]:sgpr(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), [[BITCAST]](f16)
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:sgpr(i16) = G_BITCAST [[INT]](f16)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:sgpr(i32) = G_ANYEXT [[BITCAST1]](i16)
    ; CHECK-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $sgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(f16) = G_BITCAST %1(i16)
    %3:_(f16) = G_INTRINSIC intrinsic(@llvm.amdgcn.sqrt), %2(f16)
    %4:_(i16) = G_BITCAST %3(f16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)

...
