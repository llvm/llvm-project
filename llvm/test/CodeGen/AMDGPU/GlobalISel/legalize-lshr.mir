# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -O0 -run-pass=legalizer -o - %s | FileCheck -check-prefix=SI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer -o - %s | FileCheck -check-prefix=VI %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx900 -O0 -run-pass=legalizer -o - %s | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -O0 -run-pass=legalizer -o - %s | FileCheck -check-prefix=GFX9  %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -O0 -run-pass=legalizer -o - %s | FileCheck -check-prefix=GFX9  %s

---
name: test_lshr_s32_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_lshr_s32_s32
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[COPY1]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    ;
    ; VI-LABEL: name: test_lshr_s32_s32
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[COPY1]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    ;
    ; GFX9-LABEL: name: test_lshr_s32_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[COPY]], [[COPY1]](i32)
    ; GFX9-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = G_LSHR %0, %1(i32)
    $vgpr0 = COPY %2(i32)
...
---
name: test_lshr_s64_s64
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_lshr_s64_s64
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[COPY1]](i64)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[TRUNC]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; VI-LABEL: name: test_lshr_s64_s64
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[COPY1]](i64)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[TRUNC]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; GFX9-LABEL: name: test_lshr_s64_s64
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i64) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC [[COPY1]](i64)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[TRUNC]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = COPY $vgpr2_vgpr3
    %2:_(i64) = G_LSHR %0, %1(i64)
    $vgpr0_vgpr1 = COPY %2(i64)
...
---
name: test_lshr_s64_s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2

    ; SI-LABEL: name: test_lshr_s64_s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[COPY1]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; VI-LABEL: name: test_lshr_s64_s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[COPY1]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; GFX9-LABEL: name: test_lshr_s64_s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[COPY1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(i64) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...
---
name: test_lshr_s64_s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2

    ; SI-LABEL: name: test_lshr_s64_s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[AND]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; VI-LABEL: name: test_lshr_s64_s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[AND]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    ;
    ; GFX9-LABEL: name: test_lshr_s64_s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[COPY]], [[AND]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[LSHR]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = COPY $vgpr2
    %2:_(i16) = G_TRUNC %1(i32)
    %3:_(i64) = G_LSHR %0, %2(i16)
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: test_lshr_s16_s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_lshr_s16_s32
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND]], [[COPY1]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    ;
    ; VI-LABEL: name: test_lshr_s16_s32
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC1]](i16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_lshr_s16_s32
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC1]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_LSHR %2, %1(i32)
    %4:_(i32) = G_ANYEXT %3(i16)
    $vgpr0 = COPY %4(i32)
...

---
name: test_lshr_s16_s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_lshr_s16_s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    ;
    ; VI-LABEL: name: test_lshr_s16_s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC1]](i16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_lshr_s16_s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC1]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i16) = G_TRUNC %1(i32)
    %4:_(i16) = G_LSHR %2, %3(i16)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_lshr_s16_i8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_lshr_s16_i8
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C1]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    ;
    ; VI-LABEL: name: test_lshr_s16_i8
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[AND]](i16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_lshr_s16_i8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[AND]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i16) = G_TRUNC %0(i32)
    %3:_(i8) = G_TRUNC %1(i32)
    %4:_(i16) = G_LSHR %2, %3(i8)
    %5:_(i32) = G_ANYEXT %4(i16)
    $vgpr0 = COPY %5(i32)
...

---
name: test_lshr_i8_i8
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_lshr_i8_i8
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY1]], [[C]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[LSHR]](i32)
    ;
    ; VI-LABEL: name: test_lshr_i8_i8
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[AND1]], [[AND]](i16)
    ; VI-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; VI-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    ;
    ; GFX9-LABEL: name: test_lshr_i8_i8
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[COPY1]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i16) = G_CONSTANT i16 255
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i16) = G_AND [[TRUNC]], [[C]]
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[COPY]](i32)
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i16) = G_AND [[TRUNC1]], [[C]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i16) = G_LSHR [[AND1]], [[AND]](i16)
    ; GFX9-NEXT: [[ANYEXT:%[0-9]+]]:_(i32) = G_ANYEXT [[LSHR]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[ANYEXT]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i8) = G_TRUNC %0(i32)
    %3:_(i8) = G_TRUNC %1(i32)
    %4:_(i8) = G_LSHR %2, %3(i8)
    %5:_(i32) = G_ANYEXT %4(i8)
    $vgpr0 = COPY %5(i32)
...

---
name: test_lshr_v2s32_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_lshr_v2s32_v2s32
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[UV2]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[UV3]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[LSHR]](i32), [[LSHR1]](i32)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; VI-LABEL: name: test_lshr_v2s32_v2s32
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[UV2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[UV3]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[LSHR]](i32), [[LSHR1]](i32)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    ;
    ; GFX9-LABEL: name: test_lshr_v2s32_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[UV2]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[UV3]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[LSHR]](i32), [[LSHR1]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = G_LSHR %0, %1(<2 x i32>)
    $vgpr0_vgpr1 = COPY %2(<2 x i32>)
...

---
name: test_lshr_v3s32_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5

    ; SI-LABEL: name: test_lshr_v3s32_v3s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; SI-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<3 x i32>)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[UV3]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[UV4]](i32)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[UV5]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; VI-LABEL: name: test_lshr_v3s32_v3s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; VI-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<3 x i32>)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[UV3]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[UV4]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[UV5]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    ;
    ; GFX9-LABEL: name: test_lshr_v3s32_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<3 x i32>)
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(i32), [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<3 x i32>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[UV]], [[UV3]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[UV1]], [[UV4]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[UV2]], [[UV5]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x i32>) = G_BUILD_VECTOR [[LSHR]](i32), [[LSHR1]](i32), [[LSHR2]](i32)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BUILD_VECTOR]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x i32>) = G_LSHR %0, %1(<3 x i32>)
    $vgpr0_vgpr1_vgpr2 = COPY %2(<3 x i32>)
...

---
name: test_lshr_v2s64_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5

    ; SI-LABEL: name: test_lshr_v2s64_v2s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[UV2]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[UV3]](i32)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[LSHR]](i64), [[LSHR1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; VI-LABEL: name: test_lshr_v2s64_v2s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[UV2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[UV3]](i32)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[LSHR]](i64), [[LSHR1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    ;
    ; GFX9-LABEL: name: test_lshr_v2s64_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[UV2]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[UV3]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i64>) = G_BUILD_VECTOR [[LSHR]](i64), [[LSHR1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BUILD_VECTOR]](<2 x i64>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %2:_(<2 x i64>) = G_LSHR %0, %1(<2 x i32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(<2 x i64>)
...

---
name: test_lshr_v3s64_v3s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10

    ; SI-LABEL: name: test_lshr_v3s64_v3s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<4 x i64>)
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr8_vgpr9_vgpr10
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<3 x i32>)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[UV4]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[UV5]](i32)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV2]], [[UV6]](i32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV7:%[0-9]+]]:_(i64), [[UV8:%[0-9]+]]:_(i64), [[UV9:%[0-9]+]]:_(i64), [[UV10:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[LSHR]](i64), [[LSHR1]](i64), [[LSHR2]](i64), [[UV10]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; VI-LABEL: name: test_lshr_v3s64_v3s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<4 x i64>)
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr8_vgpr9_vgpr10
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<3 x i32>)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[UV4]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[UV5]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV2]], [[UV6]](i32)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV7:%[0-9]+]]:_(i64), [[UV8:%[0-9]+]]:_(i64), [[UV9:%[0-9]+]]:_(i64), [[UV10:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[LSHR]](i64), [[LSHR1]](i64), [[LSHR2]](i64), [[UV10]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    ;
    ; GFX9-LABEL: name: test_lshr_v3s64_v3s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64), [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<4 x i64>)
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr8_vgpr9_vgpr10
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i32), [[UV5:%[0-9]+]]:_(i32), [[UV6:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<3 x i32>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[UV4]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[UV5]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV2]], [[UV6]](i32)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i64>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV7:%[0-9]+]]:_(i64), [[UV8:%[0-9]+]]:_(i64), [[UV9:%[0-9]+]]:_(i64), [[UV10:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[DEF]](<4 x i64>)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x i64>) = G_BUILD_VECTOR [[LSHR]](i64), [[LSHR1]](i64), [[LSHR2]](i64), [[UV10]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<4 x i64>)
    %0:_(<4 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<3 x i64>) = G_EXTRACT %0(<4 x i64>), 0
    %2:_(<3 x i32>) = COPY $vgpr8_vgpr9_vgpr10
    %3:_(<3 x i64>) = G_LSHR %1, %2(<3 x i32>)
    %4:_(<4 x i64>) = G_IMPLICIT_DEF
    %5:_(<4 x i64>) = G_INSERT %4, %3(<3 x i64>), 0
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %5(<4 x i64>)
...

---
name: test_lshr_v2s16_v2s16
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; SI-LABEL: name: test_lshr_v2s16_v2s16
    ; SI: liveins: $vgpr0, $vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[LSHR1]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LSHR2]], [[C1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[LSHR3]], [[C1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND3]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND2]], [[SHL]]
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST2]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_lshr_v2s16_v2s16
    ; VI: liveins: $vgpr0, $vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[COPY1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC2]](i16)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[TRUNC3]](i16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR2]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR3]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST2]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_lshr_v2s16_v2s16
    ; GFX9: liveins: $vgpr0, $vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr1
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[COPY]], [[COPY1]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0 = COPY [[LSHR]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = COPY $vgpr1
    %2:_(<2 x i16>) = G_LSHR %0, %1(<2 x i16>)
    $vgpr0 = COPY %2(<2 x i16>)
...

---
name: test_lshr_v2s16_v2s32
body: |
  bb.0:
    liveins: $vgpr0, $vgpr0_vgpr1

    ; SI-LABEL: name: test_lshr_v2s16_v2s32
    ; SI: liveins: $vgpr0, $vgpr0_vgpr1
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[AND]], [[UV]](i32)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[UV1]](i32)
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[LSHR1]], [[C1]]
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[LSHR2]], [[C1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND2]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND1]], [[SHL]]
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ;
    ; VI-LABEL: name: test_lshr_v2s16_v2s32
    ; VI: liveins: $vgpr0, $vgpr0_vgpr1
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC2]](i16)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[TRUNC3]](i16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR1]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR2]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    ;
    ; GFX9-LABEL: name: test_lshr_v2s16_v2s32
    ; GFX9: liveins: $vgpr0, $vgpr0_vgpr1
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[UV]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC2]](i16)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[UV1]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[LSHR1]](i16), [[LSHR2]](i16)
    ; GFX9-NEXT: $vgpr0 = COPY [[BUILD_VECTOR]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %2:_(<2 x i16>) = G_LSHR %0, %1(<2 x i32>)
    $vgpr0 = COPY %2(<2 x i16>)
...

---
name: test_lshr_v3s16_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_lshr_v3s16_v3s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[LSHR1]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[AND3]], [[AND2]](i32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV5]](<2 x i16>)
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LSHR2]], [[C1]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LSHR3]], [[C1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL]]
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LSHR4]], [[C1]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR5]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL1]]
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_lshr_v3s16_v3s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC3]](i16)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[TRUNC4]](i16)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[TRUNC5]](i16)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV5]](<2 x i16>)
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR2]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR3]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR4]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[LSHR5]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST5]](<2 x i16>), [[BITCAST6]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_lshr_v3s16_v3s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[UV4]], [[UV6]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC1]](i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[LSHR]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV8:%[0-9]+]]:_(<2 x i16>), [[UV9:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV9]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[LSHR1]](i16), [[TRUNC4]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<3 x i16>) = G_EXTRACT %0(<4 x i16>), 0
    %3:_(<3 x i16>) = G_EXTRACT %1(<4 x i16>), 0
    %4:_(<3 x i16>) = G_LSHR %2, %3(<3 x i16>)
    %5:_(<4 x i16>) = G_IMPLICIT_DEF
    %6:_(<4 x i16>) = G_INSERT %5, %4(<3 x i16>), 0
    $vgpr0_vgpr1 = COPY %6(<4 x i16>)
...

---
name: test_ashr_v3s16_v3s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-LABEL: name: test_ashr_v3s16_v3s16
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[LSHR1]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[AND3]], [[AND2]](i32)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LSHR2]], [[C1]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LSHR3]], [[C1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL]]
    ; SI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LSHR4]], [[C1]]
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C1]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL1]]
    ; SI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[AND8:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C1]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND8]], [[C]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR5]], [[SHL2]]
    ; SI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST6]](<2 x i16>), [[BITCAST7]](<2 x i16>), [[BITCAST8]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; VI-LABEL: name: test_ashr_v3s16_v3s16
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV4]](<2 x i16>)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC3]](i16)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[TRUNC4]](i16)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[TRUNC5]](i16)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; VI-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV6]](<2 x i16>)
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST4]], [[C]](i32)
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR2]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR3]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST6:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR4]](i16)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST4]], [[C1]]
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST7:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST5]], [[C1]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i32) = G_SHL [[AND1]], [[C]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i32) = G_OR [[LSHR5]], [[SHL2]]
    ; VI-NEXT: [[BITCAST8:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR2]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BITCAST6]](<2 x i16>), [[BITCAST7]](<2 x i16>), [[BITCAST8]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    ;
    ; GFX9-LABEL: name: test_ashr_v3s16_v3s16
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>), [[UV2:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; GFX9-NEXT: [[UV3:%[0-9]+]]:_(<2 x i16>), [[UV4:%[0-9]+]]:_(<2 x i16>), [[UV5:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<6 x i16>)
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(<2 x i16>), [[UV7:%[0-9]+]]:_(<2 x i16>), [[UV8:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; GFX9-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV7]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; GFX9-NEXT: [[UV9:%[0-9]+]]:_(<2 x i16>), [[UV10:%[0-9]+]]:_(<2 x i16>), [[UV11:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<6 x i16>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[UV3]], [[UV9]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC1]](i16)
    ; GFX9-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[LSHR]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(<4 x i16>) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[UV12:%[0-9]+]]:_(<2 x i16>), [[UV13:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[DEF]](<4 x i16>)
    ; GFX9-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV12]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; GFX9-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; GFX9-NEXT: [[BITCAST4:%[0-9]+]]:_(i32) = G_BITCAST [[UV13]](<2 x i16>)
    ; GFX9-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST4]](i32)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC2]](i16), [[TRUNC3]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[LSHR1]](i16), [[TRUNC4]](i16)
    ; GFX9-NEXT: [[BUILD_VECTOR2:%[0-9]+]]:_(<2 x i16>) = G_BUILD_VECTOR [[TRUNC5]](i16), [[TRUNC6]](i16)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<6 x i16>) = G_CONCAT_VECTORS [[BUILD_VECTOR]](<2 x i16>), [[BUILD_VECTOR1]](<2 x i16>), [[BUILD_VECTOR2]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[CONCAT_VECTORS]](<6 x i16>)
    %0:_(<6 x i16>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<6 x i16>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x i16>), %3:_(<3 x i16>) = G_UNMERGE_VALUES %0(<6 x i16>)
    %4:_(<3 x i16>), %5:_(<3 x i16>) = G_UNMERGE_VALUES %1(<6 x i16>)
    %6:_(<3 x i16>) = G_LSHR %2, %4(<3 x i16>)
    %7:_(<3 x i16>) = G_IMPLICIT_DEF
    %8:_(<6 x i16>) = G_CONCAT_VECTORS %6(<3 x i16>), %7(<3 x i16>)
    $vgpr0_vgpr1_vgpr2 = COPY %8(<6 x i16>)
...

---
name: test_lshr_v4s16_v4s16
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; SI-LABEL: name: test_lshr_v4s16_v4s16
    ; SI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; SI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; SI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; SI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; SI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; SI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST2]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i32) = G_LSHR [[AND1]], [[AND]](i32)
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i32) = G_LSHR [[LSHR]], [[LSHR2]](i32)
    ; SI-NEXT: [[AND2:%[0-9]+]]:_(i32) = G_AND [[BITCAST3]], [[C1]]
    ; SI-NEXT: [[AND3:%[0-9]+]]:_(i32) = G_AND [[BITCAST1]], [[C1]]
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i32) = G_LSHR [[AND3]], [[AND2]](i32)
    ; SI-NEXT: [[LSHR7:%[0-9]+]]:_(i32) = G_LSHR [[LSHR1]], [[LSHR3]](i32)
    ; SI-NEXT: [[AND4:%[0-9]+]]:_(i32) = G_AND [[LSHR4]], [[C1]]
    ; SI-NEXT: [[AND5:%[0-9]+]]:_(i32) = G_AND [[LSHR5]], [[C1]]
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[AND5]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[AND4]], [[SHL]]
    ; SI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; SI-NEXT: [[AND6:%[0-9]+]]:_(i32) = G_AND [[LSHR6]], [[C1]]
    ; SI-NEXT: [[AND7:%[0-9]+]]:_(i32) = G_AND [[LSHR7]], [[C1]]
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[AND7]], [[C]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[AND6]], [[SHL1]]
    ; SI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; SI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>)
    ; SI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; VI-LABEL: name: test_lshr_v4s16_v4s16
    ; VI: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; VI-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; VI-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[UV]](<2 x i16>)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR]](i32)
    ; VI-NEXT: [[BITCAST1:%[0-9]+]]:_(i32) = G_BITCAST [[UV1]](<2 x i16>)
    ; VI-NEXT: [[TRUNC2:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST1]], [[C]](i32)
    ; VI-NEXT: [[TRUNC3:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR1]](i32)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; VI-NEXT: [[BITCAST2:%[0-9]+]]:_(i32) = G_BITCAST [[UV2]](<2 x i16>)
    ; VI-NEXT: [[TRUNC4:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST2]](i32)
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST2]], [[C]](i32)
    ; VI-NEXT: [[TRUNC5:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR2]](i32)
    ; VI-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[UV3]](<2 x i16>)
    ; VI-NEXT: [[TRUNC6:%[0-9]+]]:_(i16) = G_TRUNC [[BITCAST3]](i32)
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST3]], [[C]](i32)
    ; VI-NEXT: [[TRUNC7:%[0-9]+]]:_(i16) = G_TRUNC [[LSHR3]](i32)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC]], [[TRUNC4]](i16)
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC1]], [[TRUNC5]](i16)
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC2]], [[TRUNC6]](i16)
    ; VI-NEXT: [[LSHR7:%[0-9]+]]:_(i16) = G_LSHR [[TRUNC3]], [[TRUNC7]](i16)
    ; VI-NEXT: [[ZEXT:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR4]](i16)
    ; VI-NEXT: [[ZEXT1:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR5]](i16)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[ZEXT1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[ZEXT]], [[SHL]]
    ; VI-NEXT: [[BITCAST4:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; VI-NEXT: [[ZEXT2:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR6]](i16)
    ; VI-NEXT: [[ZEXT3:%[0-9]+]]:_(i32) = G_ZEXT [[LSHR7]](i16)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i32) = G_SHL [[ZEXT3]], [[C]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i32) = G_OR [[ZEXT2]], [[SHL1]]
    ; VI-NEXT: [[BITCAST5:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR1]](i32)
    ; VI-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[BITCAST4]](<2 x i16>), [[BITCAST5]](<2 x i16>)
    ; VI-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    ;
    ; GFX9-LABEL: name: test_lshr_v4s16_v4s16
    ; GFX9: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr0_vgpr1
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i16>) = COPY $vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(<2 x i16>), [[UV1:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY]](<4 x i16>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(<2 x i16>), [[UV3:%[0-9]+]]:_(<2 x i16>) = G_UNMERGE_VALUES [[COPY1]](<4 x i16>)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[UV]], [[UV2]](<2 x i16>)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(<2 x i16>) = G_LSHR [[UV1]], [[UV3]](<2 x i16>)
    ; GFX9-NEXT: [[CONCAT_VECTORS:%[0-9]+]]:_(<4 x i16>) = G_CONCAT_VECTORS [[LSHR]](<2 x i16>), [[LSHR1]](<2 x i16>)
    ; GFX9-NEXT: $vgpr0_vgpr1 = COPY [[CONCAT_VECTORS]](<4 x i16>)
    %0:_(<4 x i16>) = COPY $vgpr0_vgpr1
    %1:_(<4 x i16>) = COPY $vgpr2_vgpr3
    %2:_(<4 x i16>) = G_LSHR %0, %1(<4 x i16>)
    $vgpr0_vgpr1 = COPY %2(<4 x i16>)
...

---
name: test_lshr_s128_s128
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s128
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[COPY1]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY1]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[SUB1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[SUB]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s128
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[COPY1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY1]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[SUB1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[SUB]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s128
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[COPY1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY1]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[SUB]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = COPY $vgpr4
    %2:_(i128) = G_ZEXT %1(i32)
    %3:_(i128) = G_LSHR %0, %2(i128)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %3(i128)
...

---
name: test_lshr_s128_s132
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s132
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[COPY1]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY1]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[SUB1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[SUB]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s132
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[COPY1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY1]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[SUB1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[SUB]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s132
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr4
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[COPY1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[COPY1]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[SUB]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = COPY $vgpr4
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...

---
name: test_lshr_s128_s32_0
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s32_0
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[COPY]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s32_0
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[COPY]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s32_0
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[COPY]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = G_CONSTANT i32 0
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...


---
name: test_lshr_s128_s32_23
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s32_23
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 41
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s32_23
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 41
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s32_23
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 23
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 41
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = G_CONSTANT i32 23
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...

---
name: test_lshr_s128_s32_31
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s32_31
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 33
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s32_31
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 33
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s32_31
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 33
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = G_CONSTANT i32 31
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...

---
name: test_lshr_s128_s32_32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s32_32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s32_32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s32_32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 32
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = G_CONSTANT i32 32
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...

---
name: test_lshr_s128_s32_33
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s32_33
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 33
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s32_33
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 33
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s32_33
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 33
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV1]], [[C1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR]], [[SHL]]
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[OR]](i64), [[LSHR1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = G_CONSTANT i32 33
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...

---
name: test_lshr_s128_s32_127
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; SI-LABEL: name: test_lshr_s128_s32_127
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 63
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[LSHR]](i64), [[C1]](i64)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; VI-LABEL: name: test_lshr_s128_s32_127
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 63
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[LSHR]](i64), [[C1]](i64)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    ;
    ; GFX9-LABEL: name: test_lshr_s128_s32_127
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](i128)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 63
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV1]], [[C]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[LSHR]](i64), [[C1]](i64)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[MV]](i128)
    %0:_(i128) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = G_CONSTANT i32 127
    %2:_(i128) = G_LSHR %0, %1(i32)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %2(i128)
...

---
name: test_lshr_s256_s256
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8

    ; SI-LABEL: name: test_lshr_s256_s256
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i256) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr8
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 128
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i128), [[UV1:%[0-9]+]]:_(i128) = G_UNMERGE_VALUES [[COPY]](i256)
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; SI-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C2]]
    ; SI-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[COPY1]]
    ; SI-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C2]]
    ; SI-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV3]], [[COPY1]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV2]], [[COPY1]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV3]], [[SUB3]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV3]], [[SUB2]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[UV2]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[LSHR]], [[C3]]
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; SI-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C2]]
    ; SI-NEXT: [[SUB5:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[COPY1]]
    ; SI-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C2]]
    ; SI-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[COPY1]](i32)
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i64) = G_LSHR [[UV4]], [[COPY1]](i32)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV5]], [[SUB5]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i64) = G_OR [[LSHR4]], [[SHL1]]
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[SUB4]](i32)
    ; SI-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP4]](i1), [[OR1]], [[LSHR5]]
    ; SI-NEXT: [[SELECT4:%[0-9]+]]:_(i64) = G_SELECT [[ICMP5]](i1), [[UV4]], [[SELECT3]]
    ; SI-NEXT: [[SELECT5:%[0-9]+]]:_(i64) = G_SELECT [[ICMP4]](i1), [[LSHR3]], [[C3]]
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; SI-NEXT: [[SUB6:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C2]]
    ; SI-NEXT: [[SUB7:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[SUB1]]
    ; SI-NEXT: [[ICMP6:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SUB1]](i32), [[C2]]
    ; SI-NEXT: [[ICMP7:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SUB1]](i32), [[C1]]
    ; SI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[UV6]], [[SUB1]](i32)
    ; SI-NEXT: [[LSHR6:%[0-9]+]]:_(i64) = G_LSHR [[UV6]], [[SUB7]](i32)
    ; SI-NEXT: [[SHL3:%[0-9]+]]:_(i64) = G_SHL [[UV7]], [[SUB1]](i32)
    ; SI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[LSHR6]], [[SHL3]]
    ; SI-NEXT: [[SHL4:%[0-9]+]]:_(i64) = G_SHL [[UV6]], [[SUB6]](i32)
    ; SI-NEXT: [[SELECT6:%[0-9]+]]:_(i64) = G_SELECT [[ICMP6]](i1), [[SHL2]], [[C3]]
    ; SI-NEXT: [[SELECT7:%[0-9]+]]:_(i64) = G_SELECT [[ICMP6]](i1), [[OR2]], [[SHL4]]
    ; SI-NEXT: [[SELECT8:%[0-9]+]]:_(i64) = G_SELECT [[ICMP7]](i1), [[UV7]], [[SELECT7]]
    ; SI-NEXT: [[OR3:%[0-9]+]]:_(i64) = G_OR [[SELECT4]], [[SELECT6]]
    ; SI-NEXT: [[OR4:%[0-9]+]]:_(i64) = G_OR [[SELECT5]], [[SELECT8]]
    ; SI-NEXT: [[UV8:%[0-9]+]]:_(i64), [[UV9:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; SI-NEXT: [[SUB8:%[0-9]+]]:_(i32) = G_SUB [[SUB]], [[C2]]
    ; SI-NEXT: [[SUB9:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[SUB]]
    ; SI-NEXT: [[ICMP8:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SUB]](i32), [[C2]]
    ; SI-NEXT: [[ICMP9:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SUB]](i32), [[C1]]
    ; SI-NEXT: [[LSHR7:%[0-9]+]]:_(i64) = G_LSHR [[UV9]], [[SUB]](i32)
    ; SI-NEXT: [[LSHR8:%[0-9]+]]:_(i64) = G_LSHR [[UV8]], [[SUB]](i32)
    ; SI-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[UV9]], [[SUB9]](i32)
    ; SI-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[LSHR8]], [[SHL5]]
    ; SI-NEXT: [[LSHR9:%[0-9]+]]:_(i64) = G_LSHR [[UV9]], [[SUB8]](i32)
    ; SI-NEXT: [[SELECT9:%[0-9]+]]:_(i64) = G_SELECT [[ICMP8]](i1), [[OR5]], [[LSHR9]]
    ; SI-NEXT: [[SELECT10:%[0-9]+]]:_(i64) = G_SELECT [[ICMP9]](i1), [[UV8]], [[SELECT9]]
    ; SI-NEXT: [[SELECT11:%[0-9]+]]:_(i64) = G_SELECT [[ICMP8]](i1), [[LSHR7]], [[C3]]
    ; SI-NEXT: [[SELECT12:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR3]], [[SELECT10]]
    ; SI-NEXT: [[SELECT13:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR4]], [[SELECT11]]
    ; SI-NEXT: [[UV10:%[0-9]+]]:_(i64), [[UV11:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; SI-NEXT: [[SELECT14:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV10]], [[SELECT12]]
    ; SI-NEXT: [[SELECT15:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV11]], [[SELECT13]]
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT14]](i64), [[SELECT15]](i64)
    ; SI-NEXT: [[SELECT16:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[SELECT1]], [[C3]]
    ; SI-NEXT: [[SELECT17:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[SELECT2]], [[C3]]
    ; SI-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT16]](i64), [[SELECT17]](i64)
    ; SI-NEXT: [[MV2:%[0-9]+]]:_(i256) = G_MERGE_VALUES [[MV]](i128), [[MV1]](i128)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[MV2]](i256)
    ;
    ; VI-LABEL: name: test_lshr_s256_s256
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i256) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr8
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 128
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i128), [[UV1:%[0-9]+]]:_(i128) = G_UNMERGE_VALUES [[COPY]](i256)
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; VI-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C2]]
    ; VI-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[COPY1]]
    ; VI-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C2]]
    ; VI-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV3]], [[COPY1]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV2]], [[COPY1]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV3]], [[SUB3]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV3]], [[SUB2]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[UV2]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[LSHR]], [[C3]]
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; VI-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C2]]
    ; VI-NEXT: [[SUB5:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[COPY1]]
    ; VI-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C2]]
    ; VI-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[COPY1]](i32)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i64) = G_LSHR [[UV4]], [[COPY1]](i32)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV5]], [[SUB5]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i64) = G_OR [[LSHR4]], [[SHL1]]
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[SUB4]](i32)
    ; VI-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP4]](i1), [[OR1]], [[LSHR5]]
    ; VI-NEXT: [[SELECT4:%[0-9]+]]:_(i64) = G_SELECT [[ICMP5]](i1), [[UV4]], [[SELECT3]]
    ; VI-NEXT: [[SELECT5:%[0-9]+]]:_(i64) = G_SELECT [[ICMP4]](i1), [[LSHR3]], [[C3]]
    ; VI-NEXT: [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; VI-NEXT: [[SUB6:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C2]]
    ; VI-NEXT: [[SUB7:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[SUB1]]
    ; VI-NEXT: [[ICMP6:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SUB1]](i32), [[C2]]
    ; VI-NEXT: [[ICMP7:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SUB1]](i32), [[C1]]
    ; VI-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[UV6]], [[SUB1]](i32)
    ; VI-NEXT: [[LSHR6:%[0-9]+]]:_(i64) = G_LSHR [[UV6]], [[SUB7]](i32)
    ; VI-NEXT: [[SHL3:%[0-9]+]]:_(i64) = G_SHL [[UV7]], [[SUB1]](i32)
    ; VI-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[LSHR6]], [[SHL3]]
    ; VI-NEXT: [[SHL4:%[0-9]+]]:_(i64) = G_SHL [[UV6]], [[SUB6]](i32)
    ; VI-NEXT: [[SELECT6:%[0-9]+]]:_(i64) = G_SELECT [[ICMP6]](i1), [[SHL2]], [[C3]]
    ; VI-NEXT: [[SELECT7:%[0-9]+]]:_(i64) = G_SELECT [[ICMP6]](i1), [[OR2]], [[SHL4]]
    ; VI-NEXT: [[SELECT8:%[0-9]+]]:_(i64) = G_SELECT [[ICMP7]](i1), [[UV7]], [[SELECT7]]
    ; VI-NEXT: [[OR3:%[0-9]+]]:_(i64) = G_OR [[SELECT4]], [[SELECT6]]
    ; VI-NEXT: [[OR4:%[0-9]+]]:_(i64) = G_OR [[SELECT5]], [[SELECT8]]
    ; VI-NEXT: [[UV8:%[0-9]+]]:_(i64), [[UV9:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; VI-NEXT: [[SUB8:%[0-9]+]]:_(i32) = G_SUB [[SUB]], [[C2]]
    ; VI-NEXT: [[SUB9:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[SUB]]
    ; VI-NEXT: [[ICMP8:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SUB]](i32), [[C2]]
    ; VI-NEXT: [[ICMP9:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SUB]](i32), [[C1]]
    ; VI-NEXT: [[LSHR7:%[0-9]+]]:_(i64) = G_LSHR [[UV9]], [[SUB]](i32)
    ; VI-NEXT: [[LSHR8:%[0-9]+]]:_(i64) = G_LSHR [[UV8]], [[SUB]](i32)
    ; VI-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[UV9]], [[SUB9]](i32)
    ; VI-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[LSHR8]], [[SHL5]]
    ; VI-NEXT: [[LSHR9:%[0-9]+]]:_(i64) = G_LSHR [[UV9]], [[SUB8]](i32)
    ; VI-NEXT: [[SELECT9:%[0-9]+]]:_(i64) = G_SELECT [[ICMP8]](i1), [[OR5]], [[LSHR9]]
    ; VI-NEXT: [[SELECT10:%[0-9]+]]:_(i64) = G_SELECT [[ICMP9]](i1), [[UV8]], [[SELECT9]]
    ; VI-NEXT: [[SELECT11:%[0-9]+]]:_(i64) = G_SELECT [[ICMP8]](i1), [[LSHR7]], [[C3]]
    ; VI-NEXT: [[SELECT12:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR3]], [[SELECT10]]
    ; VI-NEXT: [[SELECT13:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR4]], [[SELECT11]]
    ; VI-NEXT: [[UV10:%[0-9]+]]:_(i64), [[UV11:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; VI-NEXT: [[SELECT14:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV10]], [[SELECT12]]
    ; VI-NEXT: [[SELECT15:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV11]], [[SELECT13]]
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT14]](i64), [[SELECT15]](i64)
    ; VI-NEXT: [[SELECT16:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[SELECT1]], [[C3]]
    ; VI-NEXT: [[SELECT17:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[SELECT2]], [[C3]]
    ; VI-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT16]](i64), [[SELECT17]](i64)
    ; VI-NEXT: [[MV2:%[0-9]+]]:_(i256) = G_MERGE_VALUES [[MV]](i128), [[MV1]](i128)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[MV2]](i256)
    ;
    ; GFX9-LABEL: name: test_lshr_s256_s256
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i256) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr8
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 128
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i128), [[UV1:%[0-9]+]]:_(i128) = G_UNMERGE_VALUES [[COPY]](i256)
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[COPY1]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i64), [[UV3:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; GFX9-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C2]]
    ; GFX9-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[COPY1]]
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C2]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV3]], [[COPY1]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV2]], [[COPY1]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV3]], [[SUB3]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV3]], [[SUB2]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[UV2]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[LSHR]], [[C3]]
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; GFX9-NEXT: [[SUB4:%[0-9]+]]:_(i32) = G_SUB [[COPY1]], [[C2]]
    ; GFX9-NEXT: [[SUB5:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[COPY1]]
    ; GFX9-NEXT: [[ICMP4:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[COPY1]](i32), [[C2]]
    ; GFX9-NEXT: [[ICMP5:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[COPY1]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[COPY1]](i32)
    ; GFX9-NEXT: [[LSHR4:%[0-9]+]]:_(i64) = G_LSHR [[UV4]], [[COPY1]](i32)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV5]], [[SUB5]](i32)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i64) = G_OR [[LSHR4]], [[SHL1]]
    ; GFX9-NEXT: [[LSHR5:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[SUB4]](i32)
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP4]](i1), [[OR1]], [[LSHR5]]
    ; GFX9-NEXT: [[SELECT4:%[0-9]+]]:_(i64) = G_SELECT [[ICMP5]](i1), [[UV4]], [[SELECT3]]
    ; GFX9-NEXT: [[SELECT5:%[0-9]+]]:_(i64) = G_SELECT [[ICMP4]](i1), [[LSHR3]], [[C3]]
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; GFX9-NEXT: [[SUB6:%[0-9]+]]:_(i32) = G_SUB [[SUB1]], [[C2]]
    ; GFX9-NEXT: [[SUB7:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[SUB1]]
    ; GFX9-NEXT: [[ICMP6:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SUB1]](i32), [[C2]]
    ; GFX9-NEXT: [[ICMP7:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SUB1]](i32), [[C1]]
    ; GFX9-NEXT: [[SHL2:%[0-9]+]]:_(i64) = G_SHL [[UV6]], [[SUB1]](i32)
    ; GFX9-NEXT: [[LSHR6:%[0-9]+]]:_(i64) = G_LSHR [[UV6]], [[SUB7]](i32)
    ; GFX9-NEXT: [[SHL3:%[0-9]+]]:_(i64) = G_SHL [[UV7]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR2:%[0-9]+]]:_(i64) = G_OR [[LSHR6]], [[SHL3]]
    ; GFX9-NEXT: [[SHL4:%[0-9]+]]:_(i64) = G_SHL [[UV6]], [[SUB6]](i32)
    ; GFX9-NEXT: [[SELECT6:%[0-9]+]]:_(i64) = G_SELECT [[ICMP6]](i1), [[SHL2]], [[C3]]
    ; GFX9-NEXT: [[SELECT7:%[0-9]+]]:_(i64) = G_SELECT [[ICMP6]](i1), [[OR2]], [[SHL4]]
    ; GFX9-NEXT: [[SELECT8:%[0-9]+]]:_(i64) = G_SELECT [[ICMP7]](i1), [[UV7]], [[SELECT7]]
    ; GFX9-NEXT: [[OR3:%[0-9]+]]:_(i64) = G_OR [[SELECT4]], [[SELECT6]]
    ; GFX9-NEXT: [[OR4:%[0-9]+]]:_(i64) = G_OR [[SELECT5]], [[SELECT8]]
    ; GFX9-NEXT: [[UV8:%[0-9]+]]:_(i64), [[UV9:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; GFX9-NEXT: [[SUB8:%[0-9]+]]:_(i32) = G_SUB [[SUB]], [[C2]]
    ; GFX9-NEXT: [[SUB9:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[SUB]]
    ; GFX9-NEXT: [[ICMP8:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SUB]](i32), [[C2]]
    ; GFX9-NEXT: [[ICMP9:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SUB]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR7:%[0-9]+]]:_(i64) = G_LSHR [[UV9]], [[SUB]](i32)
    ; GFX9-NEXT: [[LSHR8:%[0-9]+]]:_(i64) = G_LSHR [[UV8]], [[SUB]](i32)
    ; GFX9-NEXT: [[SHL5:%[0-9]+]]:_(i64) = G_SHL [[UV9]], [[SUB9]](i32)
    ; GFX9-NEXT: [[OR5:%[0-9]+]]:_(i64) = G_OR [[LSHR8]], [[SHL5]]
    ; GFX9-NEXT: [[LSHR9:%[0-9]+]]:_(i64) = G_LSHR [[UV9]], [[SUB8]](i32)
    ; GFX9-NEXT: [[SELECT9:%[0-9]+]]:_(i64) = G_SELECT [[ICMP8]](i1), [[OR5]], [[LSHR9]]
    ; GFX9-NEXT: [[SELECT10:%[0-9]+]]:_(i64) = G_SELECT [[ICMP9]](i1), [[UV8]], [[SELECT9]]
    ; GFX9-NEXT: [[SELECT11:%[0-9]+]]:_(i64) = G_SELECT [[ICMP8]](i1), [[LSHR7]], [[C3]]
    ; GFX9-NEXT: [[SELECT12:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR3]], [[SELECT10]]
    ; GFX9-NEXT: [[SELECT13:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR4]], [[SELECT11]]
    ; GFX9-NEXT: [[UV10:%[0-9]+]]:_(i64), [[UV11:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; GFX9-NEXT: [[SELECT14:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV10]], [[SELECT12]]
    ; GFX9-NEXT: [[SELECT15:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV11]], [[SELECT13]]
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT14]](i64), [[SELECT15]](i64)
    ; GFX9-NEXT: [[SELECT16:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[SELECT1]], [[C3]]
    ; GFX9-NEXT: [[SELECT17:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[SELECT2]], [[C3]]
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT16]](i64), [[SELECT17]](i64)
    ; GFX9-NEXT: [[MV2:%[0-9]+]]:_(i256) = G_MERGE_VALUES [[MV]](i128), [[MV1]](i128)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[MV2]](i256)
    %0:_(i256) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(i32) = COPY $vgpr8
    %2:_(i256) = G_ZEXT %1(i32)
    %3:_(i256) = G_LSHR %0, %2(i256)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %3(i256)
...

---
name: test_lshr_v2s128_v2s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr4_vgpr5

    ; SI-LABEL: name: test_lshr_v2s128_v2s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr4_vgpr5
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i128>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i128), [[UV1:%[0-9]+]]:_(i128) = G_UNMERGE_VALUES [[COPY]](<2 x i128>)
    ; SI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[UV2]], [[C]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV2]]
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[UV2]](i32), [[C]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV2]](i32), [[C1]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[UV2]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV4]], [[UV2]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV5]], [[SUB1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[SUB]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV4]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; SI-NEXT: [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; SI-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[UV3]], [[C]]
    ; SI-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV3]]
    ; SI-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[UV3]](i32), [[C]]
    ; SI-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV3]](i32), [[C1]]
    ; SI-NEXT: [[LSHR3:%[0-9]+]]:_(i64) = G_LSHR [[UV7]], [[UV3]](i32)
    ; SI-NEXT: [[LSHR4:%[0-9]+]]:_(i64) = G_LSHR [[UV6]], [[UV3]](i32)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV7]], [[SUB3]](i32)
    ; SI-NEXT: [[OR1:%[0-9]+]]:_(i64) = G_OR [[LSHR4]], [[SHL1]]
    ; SI-NEXT: [[LSHR5:%[0-9]+]]:_(i64) = G_LSHR [[UV7]], [[SUB2]](i32)
    ; SI-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[OR1]], [[LSHR5]]
    ; SI-NEXT: [[SELECT4:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[UV6]], [[SELECT3]]
    ; SI-NEXT: [[SELECT5:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[LSHR3]], [[C2]]
    ; SI-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT4]](i64), [[SELECT5]](i64)
    ; SI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i128>) = G_BUILD_VECTOR [[MV]](i128), [[MV1]](i128)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<2 x i128>)
    ;
    ; VI-LABEL: name: test_lshr_v2s128_v2s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr4_vgpr5
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(<2 x i128>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i128), [[UV1:%[0-9]+]]:_(i128) = G_UNMERGE_VALUES [[COPY]](<2 x i128>)
    ; VI-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[UV2]], [[C]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV2]]
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[UV2]](i32), [[C]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV2]](i32), [[C1]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[UV2]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV4]], [[UV2]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV5]], [[SUB1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[SUB]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV4]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; VI-NEXT: [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; VI-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[UV3]], [[C]]
    ; VI-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV3]]
    ; VI-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[UV3]](i32), [[C]]
    ; VI-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV3]](i32), [[C1]]
    ; VI-NEXT: [[LSHR3:%[0-9]+]]:_(i64) = G_LSHR [[UV7]], [[UV3]](i32)
    ; VI-NEXT: [[LSHR4:%[0-9]+]]:_(i64) = G_LSHR [[UV6]], [[UV3]](i32)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV7]], [[SUB3]](i32)
    ; VI-NEXT: [[OR1:%[0-9]+]]:_(i64) = G_OR [[LSHR4]], [[SHL1]]
    ; VI-NEXT: [[LSHR5:%[0-9]+]]:_(i64) = G_LSHR [[UV7]], [[SUB2]](i32)
    ; VI-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[OR1]], [[LSHR5]]
    ; VI-NEXT: [[SELECT4:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[UV6]], [[SELECT3]]
    ; VI-NEXT: [[SELECT5:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[LSHR3]], [[C2]]
    ; VI-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT4]](i64), [[SELECT5]](i64)
    ; VI-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i128>) = G_BUILD_VECTOR [[MV]](i128), [[MV1]](i128)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<2 x i128>)
    ;
    ; GFX9-LABEL: name: test_lshr_v2s128_v2s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7, $vgpr4_vgpr5
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(<2 x i128>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i128), [[UV1:%[0-9]+]]:_(i128) = G_UNMERGE_VALUES [[COPY]](<2 x i128>)
    ; GFX9-NEXT: [[UV2:%[0-9]+]]:_(i32), [[UV3:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY1]](<2 x i32>)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[UV4:%[0-9]+]]:_(i64), [[UV5:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV]](i128)
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[UV2]], [[C]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV2]]
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[UV2]](i32), [[C]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV2]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[UV2]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[UV4]], [[UV2]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[UV5]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[UV5]], [[SUB]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[UV4]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C2]]
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; GFX9-NEXT: [[UV6:%[0-9]+]]:_(i64), [[UV7:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[UV1]](i128)
    ; GFX9-NEXT: [[SUB2:%[0-9]+]]:_(i32) = G_SUB [[UV3]], [[C]]
    ; GFX9-NEXT: [[SUB3:%[0-9]+]]:_(i32) = G_SUB [[C]], [[UV3]]
    ; GFX9-NEXT: [[ICMP2:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[UV3]](i32), [[C]]
    ; GFX9-NEXT: [[ICMP3:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[UV3]](i32), [[C1]]
    ; GFX9-NEXT: [[LSHR3:%[0-9]+]]:_(i64) = G_LSHR [[UV7]], [[UV3]](i32)
    ; GFX9-NEXT: [[LSHR4:%[0-9]+]]:_(i64) = G_LSHR [[UV6]], [[UV3]](i32)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[UV7]], [[SUB3]](i32)
    ; GFX9-NEXT: [[OR1:%[0-9]+]]:_(i64) = G_OR [[LSHR4]], [[SHL1]]
    ; GFX9-NEXT: [[LSHR5:%[0-9]+]]:_(i64) = G_LSHR [[UV7]], [[SUB2]](i32)
    ; GFX9-NEXT: [[SELECT3:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[OR1]], [[LSHR5]]
    ; GFX9-NEXT: [[SELECT4:%[0-9]+]]:_(i64) = G_SELECT [[ICMP3]](i1), [[UV6]], [[SELECT3]]
    ; GFX9-NEXT: [[SELECT5:%[0-9]+]]:_(i64) = G_SELECT [[ICMP2]](i1), [[LSHR3]], [[C2]]
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT4]](i64), [[SELECT5]](i64)
    ; GFX9-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i128>) = G_BUILD_VECTOR [[MV]](i128), [[MV1]](i128)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY [[BUILD_VECTOR]](<2 x i128>)
    %0:_(<2 x i128>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7
    %1:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %2:_(<2 x i128>) = G_LSHR %0, %1(<2 x i32>)
    $vgpr0_vgpr1_vgpr2_vgpr3_vgpr4_vgpr5_vgpr6_vgpr7 = COPY %2(<2 x i128>)
...

---
name: test_lshr_s65_s32
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3

    ; SI-LABEL: name: test_lshr_s65_s32
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC %23(i64)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; SI-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[TRUNC]], [[C2]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[TRUNC]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[TRUNC]](i32), [[C2]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[TRUNC]](i32), [[C3]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[TRUNC]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[TRUNC]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C4]]
    ; SI-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC1]](i96)
    ;
    ; VI-LABEL: name: test_lshr_s65_s32
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC %23(i64)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; VI-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[TRUNC]], [[C2]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[TRUNC]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[TRUNC]](i32), [[C2]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[TRUNC]](i32), [[C3]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[TRUNC]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[TRUNC]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C4]]
    ; VI-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC1]](i96)
    ;
    ; GFX9-LABEL: name: test_lshr_s65_s32
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC %23(i64)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[TRUNC]], [[C2]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[TRUNC]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[TRUNC]](i32), [[C2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[TRUNC]](i32), [[C3]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C4]]
    ; GFX9-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC1]](i96)
    %0:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(i32) = COPY $vgpr3
    %2:_(i65) = G_TRUNC %0(i96)
    %3:_(i65) = G_LSHR %2, %3(i65)
    %4:_(i96) = G_ANYEXT %3(i65)
    $vgpr0_vgpr1_vgpr2 = COPY %4(i96)
...

---
name: test_lshr_s65_s32_constant8
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2

    ; SI-LABEL: name: test_lshr_s65_s32_constant8
    ; SI: liveins: $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC %23(i64)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; SI-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; SI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[TRUNC]], [[C2]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[TRUNC]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[TRUNC]](i32), [[C2]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[TRUNC]](i32), [[C3]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[TRUNC]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[TRUNC]](i32)
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C4]]
    ; SI-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; SI-NEXT: [[TRUNC1:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC1]](i96)
    ;
    ; VI-LABEL: name: test_lshr_s65_s32_constant8
    ; VI: liveins: $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC %23(i64)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; VI-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; VI-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[TRUNC]], [[C2]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[TRUNC]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[TRUNC]](i32), [[C2]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[TRUNC]](i32), [[C3]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[TRUNC]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[TRUNC]](i32)
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C4]]
    ; VI-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; VI-NEXT: [[TRUNC1:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC1]](i96)
    ;
    ; GFX9-LABEL: name: test_lshr_s65_s32_constant8
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i32) = G_TRUNC %23(i64)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[TRUNC]], [[C2]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C2]], [[TRUNC]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[TRUNC]](i32), [[C2]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[TRUNC]](i32), [[C3]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[TRUNC]](i32)
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C4]]
    ; GFX9-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; GFX9-NEXT: [[TRUNC1:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC1]](i96)
    %0:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(i32) = G_CONSTANT i32 8
    %2:_(i65) = G_TRUNC %0(i96)
    %3:_(i65) = G_LSHR %2, %3(i65)
    %4:_(i96) = G_ANYEXT %3(i65)
    $vgpr0_vgpr1_vgpr2 = COPY %4(i96)
...

---
name: test_lshr_s65_s32_known_pow2
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3

    ; SI-LABEL: name: test_lshr_s65_s32_known_pow2
    ; SI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3
    ; SI-NEXT: {{  $}}
    ; SI-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; SI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; SI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; SI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[C]], [[COPY1]](i32)
    ; SI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; SI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; SI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; SI-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; SI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; SI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; SI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C1]]
    ; SI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C2]]
    ; SI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; SI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[SHL]], [[C3]]
    ; SI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C3]], [[SHL]]
    ; SI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; SI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SHL]](i32), [[C3]]
    ; SI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SHL]](i32), [[C4]]
    ; SI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SHL]](i32)
    ; SI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[SHL]](i32)
    ; SI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; SI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL1]]
    ; SI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; SI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; SI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; SI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; SI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C5]]
    ; SI-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; SI-NEXT: [[TRUNC:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; SI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC]](i96)
    ;
    ; VI-LABEL: name: test_lshr_s65_s32_known_pow2
    ; VI: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3
    ; VI-NEXT: {{  $}}
    ; VI-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; VI-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; VI-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; VI-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[C]], [[COPY1]](i32)
    ; VI-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; VI-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; VI-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; VI-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; VI-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; VI-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; VI-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C1]]
    ; VI-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C2]]
    ; VI-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; VI-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[SHL]], [[C3]]
    ; VI-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C3]], [[SHL]]
    ; VI-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; VI-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SHL]](i32), [[C3]]
    ; VI-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SHL]](i32), [[C4]]
    ; VI-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SHL]](i32)
    ; VI-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[SHL]](i32)
    ; VI-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; VI-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL1]]
    ; VI-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; VI-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; VI-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; VI-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; VI-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C5]]
    ; VI-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; VI-NEXT: [[TRUNC:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; VI-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC]](i96)
    ;
    ; GFX9-LABEL: name: test_lshr_s65_s32_known_pow2
    ; GFX9: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3
    ; GFX9-NEXT: {{  $}}
    ; GFX9-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX9-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr3
    ; GFX9-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; GFX9-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[C]], [[COPY1]](i32)
    ; GFX9-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; GFX9-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; GFX9-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; GFX9-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; GFX9-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; GFX9-NEXT: [[C2:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; GFX9-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C1]]
    ; GFX9-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C2]]
    ; GFX9-NEXT: [[C3:%[0-9]+]]:_(i32) = G_CONSTANT i32 64
    ; GFX9-NEXT: [[SUB:%[0-9]+]]:_(i32) = G_SUB [[SHL]], [[C3]]
    ; GFX9-NEXT: [[SUB1:%[0-9]+]]:_(i32) = G_SUB [[C3]], [[SHL]]
    ; GFX9-NEXT: [[C4:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; GFX9-NEXT: [[ICMP:%[0-9]+]]:_(i1) = G_ICMP intpred(ult), [[SHL]](i32), [[C3]]
    ; GFX9-NEXT: [[ICMP1:%[0-9]+]]:_(i1) = G_ICMP intpred(eq), [[SHL]](i32), [[C4]]
    ; GFX9-NEXT: [[LSHR:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SHL]](i32)
    ; GFX9-NEXT: [[LSHR1:%[0-9]+]]:_(i64) = G_LSHR [[AND]], [[SHL]](i32)
    ; GFX9-NEXT: [[SHL1:%[0-9]+]]:_(i64) = G_SHL [[AND1]], [[SUB1]](i32)
    ; GFX9-NEXT: [[OR:%[0-9]+]]:_(i64) = G_OR [[LSHR1]], [[SHL1]]
    ; GFX9-NEXT: [[C5:%[0-9]+]]:_(i64) = G_CONSTANT i64 0
    ; GFX9-NEXT: [[LSHR2:%[0-9]+]]:_(i64) = G_LSHR [[AND1]], [[SUB]](i32)
    ; GFX9-NEXT: [[SELECT:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[OR]], [[LSHR2]]
    ; GFX9-NEXT: [[SELECT1:%[0-9]+]]:_(i64) = G_SELECT [[ICMP1]](i1), [[AND]], [[SELECT]]
    ; GFX9-NEXT: [[SELECT2:%[0-9]+]]:_(i64) = G_SELECT [[ICMP]](i1), [[LSHR]], [[C5]]
    ; GFX9-NEXT: [[MV2:%[0-9]+]]:_(i128) = G_MERGE_VALUES [[SELECT1]](i64), [[SELECT2]](i64)
    ; GFX9-NEXT: [[TRUNC:%[0-9]+]]:_(i96) = G_TRUNC [[MV2]](i128)
    ; GFX9-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[TRUNC]](i96)
    %0:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(i32) = COPY $vgpr3
    %2:_(i32) = G_CONSTANT i32 1
    %3:_(i32) = G_SHL %2, %1(i32)
    %4:_(i65) = G_TRUNC %0(i96)
    %5:_(i65) = G_LSHR %4, %3(i32)
    %6:_(i96) = G_ANYEXT %5(i65)
    $vgpr0_vgpr1_vgpr2 = COPY %6(i96)
...
