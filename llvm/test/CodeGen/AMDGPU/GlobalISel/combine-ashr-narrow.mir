# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-amd-amdhsa -run-pass=amdgpu-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            narrow_ashr_s64_32_s64amt
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_32_s64amt
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV1]](i32), [[ASHR]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_CONSTANT i64 32
    %2:_(i64) = G_ASHR %0, %1(i64)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s64_32
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_32
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV1]](i32), [[ASHR]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 32
    %2:_(i64) = G_ASHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s64_33
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_33
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 1
    ; CHECK-NEXT: [[ASHR1:%[0-9]+]]:_(i32) = G_ASHR [[UV1]], [[C1]](i32)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[ASHR1]](i32), [[ASHR]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 33
    %2:_(i64) = G_ASHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s64_31
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_31
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i64) = G_ASHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[ASHR]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 31
    %2:_(i64) = G_ASHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s64_63
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_63
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 31
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[UV1]], [[C]](i32)
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[ASHR]](i32), [[ASHR]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[MV]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 63
    %2:_(i64) = G_ASHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s64_64
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[DEF]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 64
    %2:_(i64) = G_ASHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s64_65
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_s64_65
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(i64) = G_IMPLICIT_DEF
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[DEF]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 65
    %2:_(i64) = G_ASHR %0, %1(i32)
    $vgpr0_vgpr1 = COPY %2(i64)
...

---
name:            narrow_ashr_s32_16
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: narrow_ashr_s32_16
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[ASHR]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_CONSTANT i32 16
    %2:_(i32) = G_ASHR %0, %1(i32)
    $vgpr0 = COPY %2(i32)
...

---
name:            narrow_ashr_s32_17
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: narrow_ashr_s32_17
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i32) = G_ASHR [[COPY]], [[C]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[ASHR]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_CONSTANT i32 17
    %2:_(i32) = G_ASHR %0, %1(i32)
    $vgpr0 = COPY %2(i32)
...

---
name:            narrow_ashr_v2s32_17
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: narrow_ashr_v2s32_17
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 17
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[C]](i32), [[C]](i32)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(<2 x i32>) = G_ASHR [[COPY]], [[BUILD_VECTOR]](<2 x i32>)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[ASHR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CONSTANT i32 17
    %2:_(<2 x i32>) = G_BUILD_VECTOR %1(i32), %1(i32)
    %3:_(<2 x i32>) = G_ASHR %0, %2(<2 x i32>)
    $vgpr0_vgpr1 = COPY %3(<2 x i32>)
...
