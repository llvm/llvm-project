# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect -regbankselect-fast -verify-machineinstrs -o - %s | FileCheck %s
# RUN: llc -mtriple=amdgcn -mcpu=fiji -run-pass=regbankselect -regbankselect-greedy -verify-machineinstrs -o - %s | FileCheck %s

---
name: buffer_load_ss
legalized: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $sgpr4

    ; CHECK-LABEL: name: buffer_load_ss
    ; CHECK: liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $sgpr4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr4
    ; CHECK-NEXT: [[AMDGPU_S_BUFFER_LOAD:%[0-9]+]]:sgpr(<4 x i32>) = G_AMDGPU_S_BUFFER_LOAD [[COPY]](<4 x i32>), [[COPY1]](i32), 0
    %0:_(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    %1:_(i32) = COPY $sgpr4
    %2:_(<4 x i32>) = G_AMDGPU_S_BUFFER_LOAD %0(<4 x i32>), %1(i32), 0

...

---
name: buffer_load_sv
legalized: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $vgpr0

    ; CHECK-LABEL: name: buffer_load_sv
    ; CHECK: liveins: $sgpr0_sgpr1_sgpr2_sgpr3, $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:sgpr(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:vgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[AMDGPU_BUFFER_LOAD:%[0-9]+]]:vgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD [[COPY]](<4 x i32>), [[C1]](i32), [[COPY1]], [[C]], 0, 0, 0 :: (dereferenceable invariant load (i128), align 4)
    %0:_(<4 x i32>) = COPY $sgpr0_sgpr1_sgpr2_sgpr3
    %1:_(i32) = COPY $vgpr0
    %2:_(<4 x i32>) = G_AMDGPU_S_BUFFER_LOAD %0(<4 x i32>), %1(i32), 0

...

---
name: buffer_load_vs
legalized: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $sgpr0

    ; CHECK-LABEL: name: buffer_load_vs
    ; CHECK: successors: %bb.1(0x80000000)
    ; CHECK-NEXT: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $sgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:sgpr(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:vgpr(i32) = COPY [[COPY1]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:vgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:sreg_64_xexec = IMPLICIT_DEF
    ; CHECK-NEXT: [[S_MOV_B64_:%[0-9]+]]:sreg_64_xexec = S_MOV_B64 $exec
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .1:
    ; CHECK-NEXT: successors: %bb.2(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[PHI:%[0-9]+]]:sreg_64_xexec = PHI [[DEF]], %bb.0, %9, %bb.2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:vgpr_32(i32), [[UV1:%[0-9]+]]:vgpr_32(i32), [[UV2:%[0-9]+]]:vgpr_32(i32), [[UV3:%[0-9]+]]:vgpr_32(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV]](i32), implicit $exec
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_1:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV1]](i32), implicit $exec
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_2:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV2]](i32), implicit $exec
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_3:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV3]](i32), implicit $exec
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:sgpr(<4 x i32>) = G_BUILD_VECTOR [[V_READFIRSTLANE_B32_]](i32), [[V_READFIRSTLANE_B32_1]](i32), [[V_READFIRSTLANE_B32_2]](i32), [[V_READFIRSTLANE_B32_3]](i32)
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:vgpr(i64), [[UV5:%[0-9]+]]:vgpr(i64) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[UV6:%[0-9]+]]:sgpr(i64), [[UV7:%[0-9]+]]:sgpr(i64) = G_UNMERGE_VALUES [[BUILD_VECTOR]](<4 x i32>)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[UV6]](i64), [[UV4]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[UV7]](i64), [[UV5]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vcc(i1) = G_AND [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: [[INTRINSIC_CONVERGENT:%[0-9]+]]:sreg_64_xexec(i64) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.ballot), [[AND]](i1)
    ; CHECK-NEXT: [[S_AND_SAVEEXEC_B64_:%[0-9]+]]:sreg_64_xexec = S_AND_SAVEEXEC_B64 killed [[INTRINSIC_CONVERGENT]](i64), implicit-def $exec, implicit-def $scc, implicit $exec
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .2:
    ; CHECK-NEXT: successors: %bb.3(0x40000000), %bb.1(0x40000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[AMDGPU_BUFFER_LOAD:%[0-9]+]]:vgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD [[BUILD_VECTOR]](<4 x i32>), [[C1]](i32), [[COPY2]], [[C]], 0, 0, 0 :: (dereferenceable invariant load (i128), align 4)
    ; CHECK-NEXT: $exec = S_XOR_B64_term $exec, [[S_AND_SAVEEXEC_B64_]], implicit-def $scc
    ; CHECK-NEXT: SI_WATERFALL_LOOP %bb.1, implicit $exec
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .3:
    ; CHECK-NEXT: successors: %bb.4(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $exec = S_MOV_B64_term [[S_MOV_B64_]]
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .4:
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = COPY $sgpr0
    %2:_(<4 x i32>) = G_AMDGPU_S_BUFFER_LOAD %0(<4 x i32>), %1(i32), 0

...

---
name: buffer_load_vv
legalized: true
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4

    ; CHECK-LABEL: name: buffer_load_vv
    ; CHECK: successors: %bb.1(0x80000000)
    ; CHECK-NEXT: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:vgpr(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:vgpr(i32) = COPY $vgpr4
    ; CHECK-NEXT: [[C:%[0-9]+]]:sgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C1:%[0-9]+]]:vgpr(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:sreg_64_xexec = IMPLICIT_DEF
    ; CHECK-NEXT: [[S_MOV_B64_:%[0-9]+]]:sreg_64_xexec = S_MOV_B64 $exec
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .1:
    ; CHECK-NEXT: successors: %bb.2(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[PHI:%[0-9]+]]:sreg_64_xexec = PHI [[DEF]], %bb.0, %8, %bb.2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:vgpr_32(i32), [[UV1:%[0-9]+]]:vgpr_32(i32), [[UV2:%[0-9]+]]:vgpr_32(i32), [[UV3:%[0-9]+]]:vgpr_32(i32) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV]](i32), implicit $exec
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_1:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV1]](i32), implicit $exec
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_2:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV2]](i32), implicit $exec
    ; CHECK-NEXT: [[V_READFIRSTLANE_B32_3:%[0-9]+]]:sreg_32_xm0(i32) = V_READFIRSTLANE_B32 [[UV3]](i32), implicit $exec
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:sgpr(<4 x i32>) = G_BUILD_VECTOR [[V_READFIRSTLANE_B32_]](i32), [[V_READFIRSTLANE_B32_1]](i32), [[V_READFIRSTLANE_B32_2]](i32), [[V_READFIRSTLANE_B32_3]](i32)
    ; CHECK-NEXT: [[UV4:%[0-9]+]]:vgpr(i64), [[UV5:%[0-9]+]]:vgpr(i64) = G_UNMERGE_VALUES [[COPY]](<4 x i32>)
    ; CHECK-NEXT: [[UV6:%[0-9]+]]:sgpr(i64), [[UV7:%[0-9]+]]:sgpr(i64) = G_UNMERGE_VALUES [[BUILD_VECTOR]](<4 x i32>)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[UV6]](i64), [[UV4]]
    ; CHECK-NEXT: [[ICMP1:%[0-9]+]]:vcc(i1) = G_ICMP intpred(eq), [[UV7]](i64), [[UV5]]
    ; CHECK-NEXT: [[AND:%[0-9]+]]:vcc(i1) = G_AND [[ICMP]], [[ICMP1]]
    ; CHECK-NEXT: [[INTRINSIC_CONVERGENT:%[0-9]+]]:sreg_64_xexec(i64) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.ballot), [[AND]](i1)
    ; CHECK-NEXT: [[S_AND_SAVEEXEC_B64_:%[0-9]+]]:sreg_64_xexec = S_AND_SAVEEXEC_B64 killed [[INTRINSIC_CONVERGENT]](i64), implicit-def $exec, implicit-def $scc, implicit $exec
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .2:
    ; CHECK-NEXT: successors: %bb.3(0x40000000), %bb.1(0x40000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[AMDGPU_BUFFER_LOAD:%[0-9]+]]:vgpr(<4 x i32>) = G_AMDGPU_BUFFER_LOAD [[BUILD_VECTOR]](<4 x i32>), [[C1]](i32), [[COPY1]], [[C]], 0, 0, 0 :: (dereferenceable invariant load (i128), align 4)
    ; CHECK-NEXT: $exec = S_XOR_B64_term $exec, [[S_AND_SAVEEXEC_B64_]], implicit-def $scc
    ; CHECK-NEXT: SI_WATERFALL_LOOP %bb.1, implicit $exec
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .3:
    ; CHECK-NEXT: successors: %bb.4(0x80000000)
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: $exec = S_MOV_B64_term [[S_MOV_B64_]]
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: .4:
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(i32) = COPY $vgpr4
    %2:_(<4 x i32>) = G_AMDGPU_S_BUFFER_LOAD %0(<4 x i32>), %1(i32), 0

...
