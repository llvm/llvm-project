# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=tahiti -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX6 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX7 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1010 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX101 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1030 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX103 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1031 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX103 %s
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=gfx1100 -run-pass=legalizer %s -o - | FileCheck -check-prefix=GFX103 %s

---
name: test_fmad_s32_flush
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s32_flush
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX6-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s32_flush
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX101-LABEL: name: test_fmad_s32_flush
    ; GFX101: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX101-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; GFX101-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX103-LABEL: name: test_fmad_s32_flush
    ; GFX103: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX103-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(f32) = G_BITCAST %0(i32)
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_BITCAST %2(i32)
    %6:_(f32) = G_FMAD %3, %4, %5
    %7:_(i32) = G_BITCAST %6(f32)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fmad_s32_flags_flush
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s32_flags_flush
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX6-NEXT: [[FMAD:%[0-9]+]]:_(f32) = nnan G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s32_flags_flush
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f32) = nnan G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX101-LABEL: name: test_fmad_s32_flags_flush
    ; GFX101: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX101-NEXT: [[FMAD:%[0-9]+]]:_(f32) = nnan G_FMAD [[BITCAST]], [[BITCAST1]], [[BITCAST2]]
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FMAD]](f32)
    ; GFX101-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX103-LABEL: name: test_fmad_s32_flags_flush
    ; GFX103: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX103-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(f32) = G_BITCAST %0(i32)
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_BITCAST %2(i32)
    %6:_(f32) = nnan G_FMAD %3, %4, %5
    %7:_(i32) = G_BITCAST %6(f32)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fmad_v2s32_flush
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; GFX6-LABEL: name: test_fmad_v2s32_flush
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX6-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV2]], [[UV4]]
    ; GFX6-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV3]], [[UV5]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    ;
    ; GFX7-LABEL: name: test_fmad_v2s32_flush
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV2]], [[UV4]]
    ; GFX7-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV3]], [[UV5]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    ;
    ; GFX101-LABEL: name: test_fmad_v2s32_flush
    ; GFX101: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX101-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX101-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX101-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX101-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV2]], [[UV4]]
    ; GFX101-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV3]], [[UV5]]
    ; GFX101-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32)
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX101-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    ;
    ; GFX103-LABEL: name: test_fmad_v2s32_flush
    ; GFX103: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX103-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX103-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX103-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV2]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV4]]
    ; GFX103-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV3]]
    ; GFX103-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV5]]
    ; GFX103-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX103-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %3:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %4:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %5:_(<2 x f32>) = G_BITCAST %2(<2 x i32>)
    %6:_(<2 x f32>) = G_FMAD %3, %4, %5
    %7:_(<2 x i32>) = G_BITCAST %6(<2 x f32>)
    $vgpr0_vgpr1 = COPY %7(<2 x i32>)
...

---
name: test_fmad_v3s32_flush
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8

    ; GFX6-LABEL: name: test_fmad_v3s32_flush
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX6-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX6-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX6-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV3]], [[UV6]]
    ; GFX6-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV4]], [[UV7]]
    ; GFX6-NEXT: [[FMAD2:%[0-9]+]]:_(f32) = G_FMAD [[UV2]], [[UV5]], [[UV8]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32), [[FMAD2]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    ;
    ; GFX7-LABEL: name: test_fmad_v3s32_flush
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX7-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX7-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV3]], [[UV6]]
    ; GFX7-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV4]], [[UV7]]
    ; GFX7-NEXT: [[FMAD2:%[0-9]+]]:_(f32) = G_FMAD [[UV2]], [[UV5]], [[UV8]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32), [[FMAD2]](f32)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX7-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    ;
    ; GFX101-LABEL: name: test_fmad_v3s32_flush
    ; GFX101: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX101-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX101-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX101-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX101-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV3]], [[UV6]]
    ; GFX101-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV4]], [[UV7]]
    ; GFX101-NEXT: [[FMAD2:%[0-9]+]]:_(f32) = G_FMAD [[UV2]], [[UV5]], [[UV8]]
    ; GFX101-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32), [[FMAD2]](f32)
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX101-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    ;
    ; GFX103-LABEL: name: test_fmad_v3s32_flush
    ; GFX103: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX103-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX103-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX103-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV3]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV6]]
    ; GFX103-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV4]]
    ; GFX103-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV7]]
    ; GFX103-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV5]]
    ; GFX103-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV8]]
    ; GFX103-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32)
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX103-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    %3:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %4:_(<3 x f32>) = G_BITCAST %1(<3 x i32>)
    %5:_(<3 x f32>) = G_BITCAST %2(<3 x i32>)
    %6:_(<3 x f32>) = G_FMAD %3, %4, %5
    %7:_(<3 x i32>) = G_BITCAST %6(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %7(<3 x i32>)
...

---
name: test_fmad_v4s32_flush
machineFunctionInfo:
  mode:
    fp32-input-denormals: false
    fp32-output-denormals: false

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11

    ; GFX6-LABEL: name: test_fmad_v4s32_flush
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX6-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX6-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV4]], [[UV8]]
    ; GFX6-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV5]], [[UV9]]
    ; GFX6-NEXT: [[FMAD2:%[0-9]+]]:_(f32) = G_FMAD [[UV2]], [[UV6]], [[UV10]]
    ; GFX6-NEXT: [[FMAD3:%[0-9]+]]:_(f32) = G_FMAD [[UV3]], [[UV7]], [[UV11]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32), [[FMAD2]](f32), [[FMAD3]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    ;
    ; GFX7-LABEL: name: test_fmad_v4s32_flush
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX7-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX7-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV4]], [[UV8]]
    ; GFX7-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV5]], [[UV9]]
    ; GFX7-NEXT: [[FMAD2:%[0-9]+]]:_(f32) = G_FMAD [[UV2]], [[UV6]], [[UV10]]
    ; GFX7-NEXT: [[FMAD3:%[0-9]+]]:_(f32) = G_FMAD [[UV3]], [[UV7]], [[UV11]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32), [[FMAD2]](f32), [[FMAD3]](f32)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX7-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    ;
    ; GFX101-LABEL: name: test_fmad_v4s32_flush
    ; GFX101: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX101-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX101-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX101-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX101-NEXT: [[FMAD:%[0-9]+]]:_(f32) = G_FMAD [[UV]], [[UV4]], [[UV8]]
    ; GFX101-NEXT: [[FMAD1:%[0-9]+]]:_(f32) = G_FMAD [[UV1]], [[UV5]], [[UV9]]
    ; GFX101-NEXT: [[FMAD2:%[0-9]+]]:_(f32) = G_FMAD [[UV2]], [[UV6]], [[UV10]]
    ; GFX101-NEXT: [[FMAD3:%[0-9]+]]:_(f32) = G_FMAD [[UV3]], [[UV7]], [[UV11]]
    ; GFX101-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FMAD]](f32), [[FMAD1]](f32), [[FMAD2]](f32), [[FMAD3]](f32)
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX101-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    ;
    ; GFX103-LABEL: name: test_fmad_v4s32_flush
    ; GFX103: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX103-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX103-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX103-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV4]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV8]]
    ; GFX103-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV5]]
    ; GFX103-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV9]]
    ; GFX103-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV6]]
    ; GFX103-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV10]]
    ; GFX103-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[UV3]], [[UV7]]
    ; GFX103-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[UV11]]
    ; GFX103-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32), [[FADD3]](f32)
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX103-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    %3:_(<4 x f32>) = G_BITCAST %0(<4 x i32>)
    %4:_(<4 x f32>) = G_BITCAST %1(<4 x i32>)
    %5:_(<4 x f32>) = G_BITCAST %2(<4 x i32>)
    %6:_(<4 x f32>) = G_FMAD %3, %4, %5
    %7:_(<4 x i32>) = G_BITCAST %6(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %7(<4 x i32>)
...

---
name: test_fmad_s32_denorm
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s32_denorm
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s32_denorm
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX101-LABEL: name: test_fmad_s32_denorm
    ; GFX101: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX101-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX101-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX101-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX103-LABEL: name: test_fmad_s32_denorm
    ; GFX103: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX103-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(f32) = G_BITCAST %0(i32)
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_BITCAST %2(i32)
    %6:_(f32) = G_FMAD %3, %4, %5
    %7:_(i32) = G_BITCAST %6(f32)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fmad_s32_flags_denorm
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; GFX6-LABEL: name: test_fmad_s32_flags_denorm
    ; GFX6: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX6-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX7-LABEL: name: test_fmad_s32_flags_denorm
    ; GFX7: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX7-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX101-LABEL: name: test_fmad_s32_flags_denorm
    ; GFX101: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX101-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX101-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX101-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    ;
    ; GFX103-LABEL: name: test_fmad_s32_flags_denorm
    ; GFX103: liveins: $vgpr0, $vgpr1, $vgpr2
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY $vgpr2
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(f32) = G_BITCAST [[COPY]](i32)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(f32) = G_BITCAST [[COPY1]](i32)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(f32) = G_BITCAST [[COPY2]](i32)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = nnan G_FMUL [[BITCAST]], [[BITCAST1]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = nnan G_FADD [[FMUL]], [[BITCAST2]]
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(i32) = G_BITCAST [[FADD]](f32)
    ; GFX103-NEXT: $vgpr0 = COPY [[BITCAST3]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i32) = COPY $vgpr2
    %3:_(f32) = G_BITCAST %0(i32)
    %4:_(f32) = G_BITCAST %1(i32)
    %5:_(f32) = G_BITCAST %2(i32)
    %6:_(f32) = nnan G_FMAD %3, %4, %5
    %7:_(i32) = G_BITCAST %6(f32)
    $vgpr0 = COPY %7(i32)
...

---
name: test_fmad_v2s32_denorm
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; GFX6-LABEL: name: test_fmad_v2s32_denorm
    ; GFX6: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX6-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV2]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV4]]
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV3]]
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV5]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    ;
    ; GFX7-LABEL: name: test_fmad_v2s32_denorm
    ; GFX7: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX7-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV2]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV4]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV3]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV5]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX7-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    ;
    ; GFX101-LABEL: name: test_fmad_v2s32_denorm
    ; GFX101: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX101-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX101-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX101-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX101-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV2]]
    ; GFX101-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV4]]
    ; GFX101-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV3]]
    ; GFX101-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV5]]
    ; GFX101-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX101-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    ;
    ; GFX103-LABEL: name: test_fmad_v2s32_denorm
    ; GFX103: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr4_vgpr5
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY]](<2 x i32>)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY1]](<2 x i32>)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(<2 x f32>) = G_BITCAST [[COPY2]](<2 x i32>)
    ; GFX103-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<2 x f32>)
    ; GFX103-NEXT: [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<2 x f32>)
    ; GFX103-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<2 x f32>)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV2]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV4]]
    ; GFX103-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV3]]
    ; GFX103-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV5]]
    ; GFX103-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32)
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(<2 x i32>) = G_BITCAST [[BUILD_VECTOR]](<2 x f32>)
    ; GFX103-NEXT: $vgpr0_vgpr1 = COPY [[BITCAST3]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %2:_(<2 x i32>) = COPY $vgpr4_vgpr5
    %3:_(<2 x f32>) = G_BITCAST %0(<2 x i32>)
    %4:_(<2 x f32>) = G_BITCAST %1(<2 x i32>)
    %5:_(<2 x f32>) = G_BITCAST %2(<2 x i32>)
    %6:_(<2 x f32>) = G_FMAD %3, %4, %5
    %7:_(<2 x i32>) = G_BITCAST %6(<2 x f32>)
    $vgpr0_vgpr1 = COPY %7(<2 x i32>)
...

---
name: test_fmad_v3s32_denorm
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8

    ; GFX6-LABEL: name: test_fmad_v3s32_denorm
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX6-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX6-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV3]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV6]]
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV4]]
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV7]]
    ; GFX6-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV5]]
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV8]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    ;
    ; GFX7-LABEL: name: test_fmad_v3s32_denorm
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX7-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX7-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV3]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV6]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV4]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV7]]
    ; GFX7-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV5]]
    ; GFX7-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV8]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX7-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    ;
    ; GFX101-LABEL: name: test_fmad_v3s32_denorm
    ; GFX101: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX101-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX101-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX101-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX101-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV3]]
    ; GFX101-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV6]]
    ; GFX101-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV4]]
    ; GFX101-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV7]]
    ; GFX101-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV5]]
    ; GFX101-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV8]]
    ; GFX101-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32)
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX101-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    ;
    ; GFX103-LABEL: name: test_fmad_v3s32_denorm
    ; GFX103: liveins: $vgpr0_vgpr1_vgpr2, $vgpr3_vgpr4_vgpr5, $vgpr6_vgpr7_vgpr8
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY]](<3 x i32>)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY1]](<3 x i32>)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(<3 x f32>) = G_BITCAST [[COPY2]](<3 x i32>)
    ; GFX103-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<3 x f32>)
    ; GFX103-NEXT: [[UV3:%[0-9]+]]:_(f32), [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<3 x f32>)
    ; GFX103-NEXT: [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32), [[UV8:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<3 x f32>)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV3]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV6]]
    ; GFX103-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV4]]
    ; GFX103-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV7]]
    ; GFX103-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV5]]
    ; GFX103-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV8]]
    ; GFX103-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<3 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32)
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(<3 x i32>) = G_BITCAST [[BUILD_VECTOR]](<3 x f32>)
    ; GFX103-NEXT: $vgpr0_vgpr1_vgpr2 = COPY [[BITCAST3]](<3 x i32>)
    %0:_(<3 x i32>) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(<3 x i32>) = COPY $vgpr3_vgpr4_vgpr5
    %2:_(<3 x i32>) = COPY $vgpr6_vgpr7_vgpr8
    %3:_(<3 x f32>) = G_BITCAST %0(<3 x i32>)
    %4:_(<3 x f32>) = G_BITCAST %1(<3 x i32>)
    %5:_(<3 x f32>) = G_BITCAST %2(<3 x i32>)
    %6:_(<3 x f32>) = G_FMAD %3, %4, %5
    %7:_(<3 x i32>) = G_BITCAST %6(<3 x f32>)
    $vgpr0_vgpr1_vgpr2 = COPY %7(<3 x i32>)
...

---
name: test_fmad_v4s32_denorm
machineFunctionInfo:
  mode:
    fp32-input-denormals: true
    fp32-output-denormals: true

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11

    ; GFX6-LABEL: name: test_fmad_v4s32_denorm
    ; GFX6: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX6-NEXT: {{  $}}
    ; GFX6-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX6-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX6-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX6-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX6-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX6-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX6-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX6-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX6-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX6-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV4]]
    ; GFX6-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV8]]
    ; GFX6-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV5]]
    ; GFX6-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV9]]
    ; GFX6-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV6]]
    ; GFX6-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV10]]
    ; GFX6-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[UV3]], [[UV7]]
    ; GFX6-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[UV11]]
    ; GFX6-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32), [[FADD3]](f32)
    ; GFX6-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX6-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    ;
    ; GFX7-LABEL: name: test_fmad_v4s32_denorm
    ; GFX7: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX7-NEXT: {{  $}}
    ; GFX7-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX7-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX7-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX7-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX7-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX7-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX7-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX7-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX7-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX7-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV4]]
    ; GFX7-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV8]]
    ; GFX7-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV5]]
    ; GFX7-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV9]]
    ; GFX7-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV6]]
    ; GFX7-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV10]]
    ; GFX7-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[UV3]], [[UV7]]
    ; GFX7-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[UV11]]
    ; GFX7-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32), [[FADD3]](f32)
    ; GFX7-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX7-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    ;
    ; GFX101-LABEL: name: test_fmad_v4s32_denorm
    ; GFX101: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX101-NEXT: {{  $}}
    ; GFX101-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX101-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX101-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX101-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX101-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX101-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX101-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX101-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX101-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX101-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV4]]
    ; GFX101-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV8]]
    ; GFX101-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV5]]
    ; GFX101-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV9]]
    ; GFX101-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV6]]
    ; GFX101-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV10]]
    ; GFX101-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[UV3]], [[UV7]]
    ; GFX101-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[UV11]]
    ; GFX101-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32), [[FADD3]](f32)
    ; GFX101-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX101-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    ;
    ; GFX103-LABEL: name: test_fmad_v4s32_denorm
    ; GFX103: liveins: $vgpr0_vgpr1_vgpr2_vgpr3, $vgpr4_vgpr5_vgpr6_vgpr7, $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX103-NEXT: {{  $}}
    ; GFX103-NEXT: [[COPY:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; GFX103-NEXT: [[COPY1:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    ; GFX103-NEXT: [[COPY2:%[0-9]+]]:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    ; GFX103-NEXT: [[BITCAST:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY]](<4 x i32>)
    ; GFX103-NEXT: [[BITCAST1:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY1]](<4 x i32>)
    ; GFX103-NEXT: [[BITCAST2:%[0-9]+]]:_(<4 x f32>) = G_BITCAST [[COPY2]](<4 x i32>)
    ; GFX103-NEXT: [[UV:%[0-9]+]]:_(f32), [[UV1:%[0-9]+]]:_(f32), [[UV2:%[0-9]+]]:_(f32), [[UV3:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST]](<4 x f32>)
    ; GFX103-NEXT: [[UV4:%[0-9]+]]:_(f32), [[UV5:%[0-9]+]]:_(f32), [[UV6:%[0-9]+]]:_(f32), [[UV7:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST1]](<4 x f32>)
    ; GFX103-NEXT: [[UV8:%[0-9]+]]:_(f32), [[UV9:%[0-9]+]]:_(f32), [[UV10:%[0-9]+]]:_(f32), [[UV11:%[0-9]+]]:_(f32) = G_UNMERGE_VALUES [[BITCAST2]](<4 x f32>)
    ; GFX103-NEXT: [[FMUL:%[0-9]+]]:_(f32) = G_FMUL [[UV]], [[UV4]]
    ; GFX103-NEXT: [[FADD:%[0-9]+]]:_(f32) = G_FADD [[FMUL]], [[UV8]]
    ; GFX103-NEXT: [[FMUL1:%[0-9]+]]:_(f32) = G_FMUL [[UV1]], [[UV5]]
    ; GFX103-NEXT: [[FADD1:%[0-9]+]]:_(f32) = G_FADD [[FMUL1]], [[UV9]]
    ; GFX103-NEXT: [[FMUL2:%[0-9]+]]:_(f32) = G_FMUL [[UV2]], [[UV6]]
    ; GFX103-NEXT: [[FADD2:%[0-9]+]]:_(f32) = G_FADD [[FMUL2]], [[UV10]]
    ; GFX103-NEXT: [[FMUL3:%[0-9]+]]:_(f32) = G_FMUL [[UV3]], [[UV7]]
    ; GFX103-NEXT: [[FADD3:%[0-9]+]]:_(f32) = G_FADD [[FMUL3]], [[UV11]]
    ; GFX103-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x f32>) = G_BUILD_VECTOR [[FADD]](f32), [[FADD1]](f32), [[FADD2]](f32), [[FADD3]](f32)
    ; GFX103-NEXT: [[BITCAST3:%[0-9]+]]:_(<4 x i32>) = G_BITCAST [[BUILD_VECTOR]](<4 x f32>)
    ; GFX103-NEXT: $vgpr0_vgpr1_vgpr2_vgpr3 = COPY [[BITCAST3]](<4 x i32>)
    %0:_(<4 x i32>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<4 x i32>) = COPY $vgpr4_vgpr5_vgpr6_vgpr7
    %2:_(<4 x i32>) = COPY $vgpr8_vgpr9_vgpr10_vgpr11
    %3:_(<4 x f32>) = G_BITCAST %0(<4 x i32>)
    %4:_(<4 x f32>) = G_BITCAST %1(<4 x i32>)
    %5:_(<4 x f32>) = G_BITCAST %2(<4 x i32>)
    %6:_(<4 x f32>) = G_FMAD %3, %4, %5
    %7:_(<4 x i32>) = G_BITCAST %6(<4 x f32>)
    $vgpr0_vgpr1_vgpr2_vgpr3 = COPY %7(<4 x i32>)
...
