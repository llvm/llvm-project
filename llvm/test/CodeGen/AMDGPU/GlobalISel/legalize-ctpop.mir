# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-mesa-mesa3d -mcpu=fiji -O0 -run-pass=legalizer %s -o - | FileCheck %s

---
name: ctpop_s8_s8
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: ctpop_s8_s8
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 255
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[CTPOP]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[COPY1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i8) = G_TRUNC %0(i32)
    %2:_(i8) = G_CTPOP %1(i8)
    %3:_(i32) = G_ZEXT %2(i8)
    $vgpr0 = COPY %3(i32)
...

---
name: ctpop_s9_s9
body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: ctpop_s9_s9
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 511
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[CTPOP]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[COPY1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i9) = G_TRUNC %0(i32)
    %2:_(i9) = G_CTPOP %1(i9)
    %3:_(i32) = G_ZEXT %2(i9)
    $vgpr0 = COPY %3(i32)
...

---
name: ctpop_s32_s32

body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: ctpop_s32_s32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[COPY]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[CTPOP]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = G_CTPOP %0(i32)
    $vgpr0 = COPY %1(i32)
...

---
name: ctpop_s32_s64

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; CHECK-LABEL: name: ctpop_s32_s64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[COPY]](i64)
    ; CHECK-NEXT: $vgpr0 = COPY [[CTPOP]](i32)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i32) = G_CTPOP %0(i64)
    $vgpr0 = COPY %1(i32)
...

---
name: ctpop_s64_s64

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; CHECK-LABEL: name: ctpop_s64_s64
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[COPY]](i64)
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[CTPOP]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[ZEXT]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i64) = G_CTPOP %0(i64)
    $vgpr0_vgpr1 = COPY %1(i64)
...

---
name: ctpop_s16_s32

body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: ctpop_s16_s32
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[COPY]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[CTPOP]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_CTPOP %0(i32)
    %2:_(i32) = G_ZEXT %1(i16)
    $vgpr0 = COPY %2(i32)
...

---
name: ctpop_s16_s16

body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: ctpop_s16_s16
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[CTPOP]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[COPY1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i16) = G_TRUNC %0(i32)
    %2:_(i16) = G_CTPOP %1(i16)
    %3:_(i32) = G_ZEXT %2(i16)
    $vgpr0 = COPY %3(i32)
...

---
name: ctpop_v2s32_v2s32

body: |
  bb.0:
    liveins: $vgpr0_vgpr1
    ; CHECK-LABEL: name: ctpop_v2s32_v2s32
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](<2 x i32>)
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[UV]](i32)
    ; CHECK-NEXT: [[CTPOP1:%[0-9]+]]:_(i32) = G_CTPOP [[UV1]](i32)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[CTPOP]](i32), [[CTPOP1]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %1:_(<2 x i32>) = G_CTPOP %0(<2 x i32>)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: ctpop_v2s32_v2s64

body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-LABEL: name: ctpop_v2s32_v2s64
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i64), [[UV1:%[0-9]+]]:_(i64) = G_UNMERGE_VALUES [[COPY]](<2 x i64>)
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[UV]](i64)
    ; CHECK-NEXT: [[CTPOP1:%[0-9]+]]:_(i32) = G_CTPOP [[UV1]](i64)
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<2 x i32>) = G_BUILD_VECTOR [[CTPOP]](i32), [[CTPOP1]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[BUILD_VECTOR]](<2 x i32>)
    %0:_(<2 x i64>) = COPY $vgpr0_vgpr1_vgpr2_vgpr3
    %1:_(<2 x i32>) = G_CTPOP %0(<2 x i64>)
    $vgpr0_vgpr1 = COPY %1(<2 x i32>)
...

---
name: ctpop_v2s16_v2s16

body: |
  bb.0:
    liveins: $vgpr0
    ; CHECK-LABEL: name: ctpop_v2s16_v2s16
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<2 x i16>) = COPY $vgpr0
    ; CHECK-NEXT: [[BITCAST:%[0-9]+]]:_(i32) = G_BITCAST [[COPY]](<2 x i16>)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 16
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i32) = G_LSHR [[BITCAST]], [[C]](i32)
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i32) = G_CONSTANT i32 65535
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[BITCAST]], [[C1]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[CTPOP]](i32)
    ; CHECK-NEXT: [[CTPOP1:%[0-9]+]]:_(i32) = G_CTPOP [[LSHR]](i32)
    ; CHECK-NEXT: [[COPY2:%[0-9]+]]:_(i32) = COPY [[CTPOP1]](i32)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i32) = G_SHL [[COPY2]], [[C]](i32)
    ; CHECK-NEXT: [[OR:%[0-9]+]]:_(i32) = G_OR [[COPY1]], [[SHL]]
    ; CHECK-NEXT: [[BITCAST1:%[0-9]+]]:_(<2 x i16>) = G_BITCAST [[OR]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[BITCAST1]](<2 x i16>)
    %0:_(<2 x i16>) = COPY $vgpr0
    %1:_(<2 x i16>) = G_CTPOP %0(<2 x i16>)
    $vgpr0 = COPY %1(<2 x i16>)
...

---
name: ctpop_s7_s7

body: |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: ctpop_s7_s7
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 127
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i32) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i32)
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY [[CTPOP]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[COPY1]](i32)
    %0:_(i32) = COPY $vgpr0
    %1:_(i7) = G_TRUNC %0(i32)
    %2:_(i7) = G_CTPOP %1(i7)
    %3:_(i32) = G_ZEXT %2(i7)
    $vgpr0 = COPY %3(i32)
...

---
name: ctpop_s33_s33

body: |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: ctpop_s33_s33
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 8589934591
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[COPY]], [[C]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i64)
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(i64) = G_ZEXT [[CTPOP]](i32)
    ; CHECK-NEXT: $vgpr0_vgpr1 = COPY [[ZEXT]](i64)
    %0:_(i64) = COPY $vgpr0_vgpr1
    %1:_(i33) = G_TRUNC %0(i64)
    %2:_(i33) = G_CTPOP %1(i33)
    %3:_(i64) = G_ANYEXT %2(i33)
    $vgpr0_vgpr1 = COPY %3(i64)
...

---
name: ctpop_s65_s65
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-LABEL: name: ctpop_s65_s65
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i64)
    ; CHECK-NEXT: [[CTPOP1:%[0-9]+]]:_(i32) = G_CTPOP [[AND1]](i64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[CTPOP1]], [[CTPOP]]
    ; CHECK-NEXT: $vgpr0 = COPY [[ADD]](i32)
    %0:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(i65) = G_TRUNC %0(i96)
    %2:_(i65) = G_CTPOP %1(i65)
    %3:_(i32) = G_TRUNC %2(i65)
    $vgpr0 = COPY %3(i32)
...

---
name: ctpop_s32_s65
body: |
  bb.0:
    liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-LABEL: name: ctpop_s32_s65
    ; CHECK: liveins: $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32), [[UV2:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[COPY]](i96)
    ; CHECK-NEXT: [[DEF:%[0-9]+]]:_(i32) = G_IMPLICIT_DEF
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV]](i32), [[UV1]](i32)
    ; CHECK-NEXT: [[MV1:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[UV2]](i32), [[DEF]](i32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i64) = G_CONSTANT i64 -1
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(i64) = G_CONSTANT i64 1
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(i64) = G_AND [[MV]], [[C]]
    ; CHECK-NEXT: [[AND1:%[0-9]+]]:_(i64) = G_AND [[MV1]], [[C1]]
    ; CHECK-NEXT: [[CTPOP:%[0-9]+]]:_(i32) = G_CTPOP [[AND]](i64)
    ; CHECK-NEXT: [[CTPOP1:%[0-9]+]]:_(i32) = G_CTPOP [[AND1]](i64)
    ; CHECK-NEXT: [[ADD:%[0-9]+]]:_(i32) = G_ADD [[CTPOP1]], [[CTPOP]]
    ; CHECK-NEXT: $vgpr0 = COPY [[ADD]](i32)
    %0:_(i96) = COPY $vgpr0_vgpr1_vgpr2
    %1:_(i65) = G_TRUNC %0(i96)
    %2:_(i32) = G_CTPOP %1(i65)
    $vgpr0 = COPY %2(i32)
...
