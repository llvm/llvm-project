# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn-amd-amdhsa -run-pass=amdgpu-postlegalizer-combiner %s -o - | FileCheck %s

---
name:            basic_i64_2x5
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0_vgpr1

    ; CHECK-LABEL: name: basic_i64_2x5
    ; CHECK: liveins: $vgpr0_vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s64) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %zero:_(s64) = G_CONSTANT i64 0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1023
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s64) = G_AND %reg, [[C]]
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), [[AND]](s64), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s64) = COPY $vgpr0_vgpr1
    %mask:_(s64) = G_CONSTANT i64 31
    %reg_mask:_(s64) = G_AND %reg, %mask
    %k:_(s64) = G_CONSTANT i64 5
    %bfx:_(s64) = G_UBFX %reg, %k, %k
    %x:_(s64) = G_OR %reg_mask, %bfx
    %zero:_(s64) = G_CONSTANT i64 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            basic_i32_2x5
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: basic_i32_2x5
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1023
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %reg, [[C]]
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), [[AND]](s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg, %mask
    %k:_(s32) = G_CONSTANT i32 5
    %bfx:_(s32) = G_UBFX %reg, %k, %k
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            basic_ne_i32_2x5
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: basic_ne_i32_2x5
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 1023
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %reg, [[C]]
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(ne), [[AND]](s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg, %mask
    %k:_(s32) = G_CONSTANT i32 5
    %bfx:_(s32) = G_UBFX %reg, %k, %k
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(ne), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            basic_i32_5x5
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: basic_i32_5x5
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 33554431
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND %reg, [[C]]
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), [[AND]](s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg, %mask
    %five:_(s32) = G_CONSTANT i32 5
    %bfx1:_(s32) = G_UBFX %reg, %five, %five
    %x1:_(s32) = G_OR %reg_mask, %bfx1
    %k2:_(s32) = G_CONSTANT i32 10
    %bfx2:_(s32) = G_UBFX %reg, %k2, %five
    %x2:_(s32) = G_OR %x1, %bfx2
    %k3:_(s32) = G_CONSTANT i32 15
    %bfx3:_(s32) = G_UBFX %reg, %k3, %five
    %x3:_(s32) = G_OR %x2, %bfx3
    %k4:_(s32) = G_CONSTANT i32 20
    %bfx4:_(s32) = G_UBFX %reg, %k4, %five
    %x4:_(s32) = G_OR %x3, %bfx4
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x4, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            basic_i16_2x5
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: basic_i16_2x5
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %reg_trunc:_(s16) = G_TRUNC %reg(s32)
    ; CHECK-NEXT: %zero:_(s16) = G_CONSTANT i16 0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s16) = G_CONSTANT i16 1023
    ; CHECK-NEXT: [[AND:%[0-9]+]]:_(s16) = G_AND %reg_trunc, [[C]]
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), [[AND]](s16), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %reg_trunc:_(s16) = G_TRUNC %reg
    %mask:_(s16) = G_CONSTANT i16 31
    %reg_mask:_(s16) = G_AND %reg_trunc, %mask
    %k:_(s16) = G_CONSTANT i16 5
    %bfx:_(s16) = G_UBFX %reg_trunc, %k, %k
    %x:_(s16) = G_OR %reg_mask, %bfx
    %zero:_(s16) = G_CONSTANT i16 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            unsupported_sbfx
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: unsupported_sbfx
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %mask:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %reg_mask:_(s32) = G_AND %reg, %mask
    ; CHECK-NEXT: %k:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: %bfx:_(s32) = G_SBFX %reg, %k(s32), %k
    ; CHECK-NEXT: %x:_(s32) = G_OR %reg_mask, %bfx
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), %x(s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg, %mask
    %k:_(s32) = G_CONSTANT i32 5
    %bfx:_(s32) = G_SBFX %reg, %k, %k
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            unsupported_src_changes
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: unsupported_src_changes
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %reg2:_(s32) = COPY $vgpr1
    ; CHECK-NEXT: %mask:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %reg_mask:_(s32) = G_AND %reg2, %mask
    ; CHECK-NEXT: %k:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: %bfx:_(s32) = G_SBFX %reg, %k(s32), %k
    ; CHECK-NEXT: %x:_(s32) = G_OR %reg_mask, %bfx
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), %x(s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %reg2:_(s32) = COPY $vgpr1
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg2, %mask
    %k:_(s32) = G_CONSTANT i32 5
    %bfx:_(s32) = G_SBFX %reg, %k, %k
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            unsupported_holes_in_mask
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: unsupported_holes_in_mask
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %reg2:_(s32) = COPY $vgpr1
    ; CHECK-NEXT: %mask:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %reg_mask:_(s32) = G_AND %reg2, %mask
    ; CHECK-NEXT: %k:_(s32) = G_CONSTANT i32 6
    ; CHECK-NEXT: %bfx:_(s32) = G_UBFX %reg, %k(s32), %k
    ; CHECK-NEXT: %x:_(s32) = G_OR %reg_mask, %bfx
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), %x(s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %reg2:_(s32) = COPY $vgpr1
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg2, %mask
    %k:_(s32) = G_CONSTANT i32 6
    %bfx:_(s32) = G_UBFX %reg, %k, %k
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            unsupported_bfx_out_of_range
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: unsupported_bfx_out_of_range
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %reg2:_(s32) = COPY $vgpr1
    ; CHECK-NEXT: %mask:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %reg_mask:_(s32) = G_AND %reg2, %mask
    ; CHECK-NEXT: %width:_(s32) = G_CONSTANT i32 12
    ; CHECK-NEXT: %off:_(s32) = G_CONSTANT i32 26
    ; CHECK-NEXT: %bfx:_(s32) = G_UBFX %reg, %off(s32), %width
    ; CHECK-NEXT: %x:_(s32) = G_OR %reg_mask, %bfx
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(eq), %x(s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %reg2:_(s32) = COPY $vgpr1
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg2, %mask
    %width:_(s32) = G_CONSTANT i32 12
    %off:_(s32) = G_CONSTANT i32 26
    %bfx:_(s32) = G_UBFX %reg, %off, %width
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(eq), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...

---
name:            unsupported_cc
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; CHECK-LABEL: name: unsupported_cc
    ; CHECK: liveins: $vgpr0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %reg:_(s32) = COPY $vgpr0
    ; CHECK-NEXT: %mask:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %reg_mask:_(s32) = G_AND %reg, %mask
    ; CHECK-NEXT: %k:_(s32) = G_CONSTANT i32 5
    ; CHECK-NEXT: %bfx:_(s32) = G_UBFX %reg, %k(s32), %k
    ; CHECK-NEXT: %x:_(s32) = G_OR %reg_mask, %bfx
    ; CHECK-NEXT: %zero:_(s32) = G_CONSTANT i32 0
    ; CHECK-NEXT: %cmp:_(s1) = G_ICMP intpred(ule), %x(s32), %zero
    ; CHECK-NEXT: %res:_(s32) = G_ZEXT %cmp(s1)
    ; CHECK-NEXT: $vgpr0 = COPY %res(s32)
    %reg:_(s32) = COPY $vgpr0
    %mask:_(s32) = G_CONSTANT i32 31
    %reg_mask:_(s32) = G_AND %reg, %mask
    %k:_(s32) = G_CONSTANT i32 5
    %bfx:_(s32) = G_UBFX %reg, %k, %k
    %x:_(s32) = G_OR %reg_mask, %bfx
    %zero:_(s32) = G_CONSTANT i32 0
    %cmp:_(s1) = G_ICMP intpred(ule), %x, %zero
    %res:_(s32) = G_ZEXT %cmp
    $vgpr0 = COPY %res
...
