# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_ashr_i44
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_ashr_i44
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i44) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i44) = G_CONSTANT i44 43
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i44) = G_ASHR [[TRUNC]], [[C]](i44)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[ASHR]](i44)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: $vgpr0 = COPY [[UV]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[UV1]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i44) = G_TRUNC %2(i64)
    %4:_(i44) = G_CONSTANT i44 22
    %5:_(i44) = G_ASHR %3, %4(i44)
    %6:_(i44) = G_ASHR %5, %4(i44)
    %7:_(i64) = G_ANYEXT %6(i44)
    %8:_(i32), %9:_(i32) = G_UNMERGE_VALUES %7(i64)
    $vgpr0 = COPY %8(i32)
    $vgpr1 = COPY %9(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1

...
---
name:            test_ashr_i55
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: test_ashr_i55
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i55) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i55) = G_CONSTANT i55 53
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(i55) = G_ASHR [[TRUNC]], [[C]](i55)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[ASHR]](i55)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: $sgpr0 = COPY [[UV]](i32)
    ; CHECK-NEXT: $sgpr1 = COPY [[UV1]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i55) = G_TRUNC %2(i64)
    %4:_(i55) = G_CONSTANT i55 50
    %5:_(i55) = G_CONSTANT i55 3
    %6:_(i55) = G_ASHR %3, %4(i55)
    %7:_(i55) = G_ASHR %6, %5(i55)
    %8:_(i64) = G_ANYEXT %7(i55)
    %9:_(i32), %10:_(i32) = G_UNMERGE_VALUES %8(i64)
    $sgpr0 = COPY %9(i32)
    $sgpr1 = COPY %10(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1

...
---
name:            test_lshr_i44
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: test_lshr_i44
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $sgpr0 = COPY [[C]](i32)
    ; CHECK-NEXT: $sgpr1 = COPY [[C]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i44) = G_TRUNC %2(i64)
    %4:_(i44) = G_CONSTANT i44 22
    %5:_(i44) = G_LSHR %3, %4(i44)
    %6:_(i44) = G_LSHR %5, %4(i44)
    %7:_(i64) = G_ANYEXT %6(i44)
    %8:_(i32), %9:_(i32) = G_UNMERGE_VALUES %7(i64)
    $sgpr0 = COPY %8(i32)
    $sgpr1 = COPY %9(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1

...
---
name:            test_lshr_i55
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_lshr_i55
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i55) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i55) = G_CONSTANT i55 53
    ; CHECK-NEXT: [[LSHR:%[0-9]+]]:_(i55) = G_LSHR [[TRUNC]], [[C]](i55)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[LSHR]](i55)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: $vgpr0 = COPY [[UV]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[UV1]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i55) = G_TRUNC %2(i64)
    %4:_(i55) = G_CONSTANT i55 50
    %5:_(i55) = G_CONSTANT i55 3
    %6:_(i55) = G_LSHR %3, %4(i55)
    %7:_(i55) = G_LSHR %6, %5(i55)
    %8:_(i64) = G_ANYEXT %7(i55)
    %9:_(i32), %10:_(i32) = G_UNMERGE_VALUES %8(i64)
    $vgpr0 = COPY %9(i32)
    $vgpr1 = COPY %10(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1

...
---
name:            test_shl_i44
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: test_shl_i44
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i32) = G_CONSTANT i32 0
    ; CHECK-NEXT: $vgpr0 = COPY [[C]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[C]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i44) = G_TRUNC %2(i64)
    %4:_(i44) = G_CONSTANT i44 22
    %5:_(i44) = G_SHL %3, %4(i44)
    %6:_(i44) = G_SHL %5, %4(i44)
    %7:_(i64) = G_ANYEXT %6(i44)
    %8:_(i32), %9:_(i32) = G_UNMERGE_VALUES %7(i64)
    $vgpr0 = COPY %8(i32)
    $vgpr1 = COPY %9(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1

...
---
name:            test_shl_i55
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: test_shl_i55
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i55) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i55) = G_CONSTANT i55 53
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(i55) = G_SHL [[TRUNC]], [[C]](i55)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[SHL]](i55)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: $sgpr0 = COPY [[UV]](i32)
    ; CHECK-NEXT: $sgpr1 = COPY [[UV1]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i55) = G_TRUNC %2(i64)
    %4:_(i55) = G_CONSTANT i55 50
    %5:_(i55) = G_CONSTANT i55 3
    %6:_(i55) = G_SHL %3, %4(i55)
    %7:_(i55) = G_SHL %6, %5(i55)
    %8:_(i64) = G_ANYEXT %7(i55)
    %9:_(i32), %10:_(i32) = G_UNMERGE_VALUES %8(i64)
    $sgpr0 = COPY %9(i32)
    $sgpr1 = COPY %10(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1

...
---
name:            sshlsat_i44
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $sgpr0, $sgpr1

    ; CHECK-LABEL: name: sshlsat_i44
    ; CHECK: liveins: $sgpr0, $sgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $sgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $sgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i44) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i44) = G_CONSTANT i44 43
    ; CHECK-NEXT: [[SSHLSAT:%[0-9]+]]:_(i44) = G_SSHLSAT [[TRUNC]], [[C]](i44)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[SSHLSAT]](i44)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: [[INTRINSIC_CONVERGENT:%[0-9]+]]:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), [[UV]](i32)
    ; CHECK-NEXT: $sgpr0 = COPY [[INTRINSIC_CONVERGENT]](i32)
    ; CHECK-NEXT: [[INTRINSIC_CONVERGENT1:%[0-9]+]]:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), [[UV1]](i32)
    ; CHECK-NEXT: $sgpr1 = COPY [[INTRINSIC_CONVERGENT1]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1
    %0:_(i32) = COPY $sgpr0
    %1:_(i32) = COPY $sgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i44) = G_TRUNC %2(i64)
    %4:_(i44) = G_CONSTANT i44 22
    %5:_(i44) = G_SSHLSAT %3, %4(i44)
    %6:_(i44) = G_SSHLSAT %5, %4(i44)
    %7:_(i64) = G_ANYEXT %6(i44)
    %8:_(i32), %9:_(i32) = G_UNMERGE_VALUES %7(i64)
    %10:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), %8(i32)
    $sgpr0 = COPY %10(i32)
    %11:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), %9(i32)
    $sgpr1 = COPY %11(i32)
    SI_RETURN_TO_EPILOG implicit $sgpr0, implicit $sgpr1

...
---
name:            sshlsat_i55
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: sshlsat_i55
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i55) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i55) = G_CONSTANT i55 53
    ; CHECK-NEXT: [[SSHLSAT:%[0-9]+]]:_(i55) = G_SSHLSAT [[TRUNC]], [[C]](i55)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[SSHLSAT]](i55)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: [[INTRINSIC_CONVERGENT:%[0-9]+]]:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), [[UV]](i32)
    ; CHECK-NEXT: $vgpr0 = COPY [[INTRINSIC_CONVERGENT]](i32)
    ; CHECK-NEXT: [[INTRINSIC_CONVERGENT1:%[0-9]+]]:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), [[UV1]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[INTRINSIC_CONVERGENT1]](i32)
    ; CHECK-NEXT: SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i55) = G_TRUNC %2(i64)
    %4:_(i55) = G_CONSTANT i55 50
    %5:_(i55) = G_CONSTANT i55 3
    %6:_(i55) = G_SSHLSAT %3, %4(i55)
    %7:_(i55) = G_SSHLSAT %6, %5(i55)
    %8:_(i64) = G_ANYEXT %7(i55)
    %9:_(i32), %10:_(i32) = G_UNMERGE_VALUES %8(i64)
    %11:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), %9(i32)
    $vgpr0 = COPY %11(i32)
    %12:_(i32) = G_INTRINSIC_CONVERGENT intrinsic(@llvm.amdgcn.readfirstlane), %10(i32)
    $vgpr1 = COPY %12(i32)
    SI_RETURN_TO_EPILOG implicit $vgpr0, implicit $vgpr1

...
---
name:            ushlsat_i44
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1, $sgpr30_sgpr31

    ; CHECK-LABEL: name: ushlsat_i44
    ; CHECK: liveins: $vgpr0, $vgpr1, $sgpr30_sgpr31
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i44) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i44) = G_CONSTANT i44 22
    ; CHECK-NEXT: [[USHLSAT:%[0-9]+]]:_(i44) = G_USHLSAT [[TRUNC]], [[C]](i44)
    ; CHECK-NEXT: [[USHLSAT1:%[0-9]+]]:_(i44) = G_USHLSAT [[USHLSAT]], [[C]](i44)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[USHLSAT1]](i44)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: $vgpr0 = COPY [[UV]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[UV1]](i32)
    ; CHECK-NEXT: S_SETPC_B64_return undef $sgpr30_sgpr31, implicit $vgpr0, implicit $vgpr1
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i44) = G_TRUNC %2(i64)
    %4:_(i44) = G_CONSTANT i44 22
    %5:_(i44) = G_USHLSAT %3, %4(i44)
    %6:_(i44) = G_USHLSAT %5, %4(i44)
    %7:_(i64) = G_ANYEXT %6(i44)
    %8:_(i32), %9:_(i32) = G_UNMERGE_VALUES %7(i64)
    $vgpr0 = COPY %8(i32)
    $vgpr1 = COPY %9(i32)
    S_SETPC_B64_return undef $sgpr30_sgpr31, implicit $vgpr0, implicit $vgpr1

...
---
name:            ushlsat_i55
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: ushlsat_i55
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: [[COPY1:%[0-9]+]]:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: [[MV:%[0-9]+]]:_(i64) = G_MERGE_VALUES [[COPY]](i32), [[COPY1]](i32)
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(i55) = G_TRUNC [[MV]](i64)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(i55) = G_CONSTANT i55 53
    ; CHECK-NEXT: [[USHLSAT:%[0-9]+]]:_(i55) = G_USHLSAT [[TRUNC]], [[C]](i55)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(i64) = G_ANYEXT [[USHLSAT]](i55)
    ; CHECK-NEXT: [[UV:%[0-9]+]]:_(i32), [[UV1:%[0-9]+]]:_(i32) = G_UNMERGE_VALUES [[ANYEXT]](i64)
    ; CHECK-NEXT: $vgpr0 = COPY [[UV]](i32)
    ; CHECK-NEXT: $vgpr1 = COPY [[UV1]](i32)
    ; CHECK-NEXT: S_SETPC_B64_return undef $sgpr30_sgpr31, implicit $vgpr0, implicit $vgpr1
    %0:_(i32) = COPY $vgpr0
    %1:_(i32) = COPY $vgpr1
    %2:_(i64) = G_MERGE_VALUES %0(i32), %1(i32)
    %3:_(i55) = G_TRUNC %2(i64)
    %4:_(i55) = G_CONSTANT i55 50
    %5:_(i55) = G_CONSTANT i55 3
    %6:_(i55) = G_USHLSAT %3, %4(i55)
    %7:_(i55) = G_USHLSAT %6, %5(i55)
    %8:_(i64) = G_ANYEXT %7(i55)
    %9:_(i32), %10:_(i32) = G_UNMERGE_VALUES %8(i64)
    $vgpr0 = COPY %9(i32)
    $vgpr1 = COPY %10(i32)
    S_SETPC_B64_return undef $sgpr30_sgpr31, implicit $vgpr0, implicit $vgpr1

...
