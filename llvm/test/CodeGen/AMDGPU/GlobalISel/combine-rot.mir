# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=amdgcn -run-pass=amdgpu-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

---
name: rotl_i32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: rotl_i32
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: %or:_(i32) = G_ROTL %a, %amt(i32)
    ; CHECK-NEXT: $vgpr2 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt:_(i32) = COPY $vgpr1
    %bw:_(i32) = G_CONSTANT i32 32
    %shl:_(i32) = G_SHL %a, %amt(i32)
    %sub:_(i32) = G_SUB %bw, %amt
    %lshr:_(i32) = G_LSHR %a, %sub(i32)
    %or:_(i32) = G_OR %shl, %lshr
    $vgpr2 = COPY %or(i32)
...

---
name: rotl_v2i32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5

    ; CHECK-LABEL: name: rotl_v2i32
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3, $vgpr4_vgpr5
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %amt:_(<2 x i32>) = COPY $vgpr2_vgpr3
    ; CHECK-NEXT: %or:_(<2 x i32>) = G_ROTL %a, %amt(<2 x i32>)
    ; CHECK-NEXT: $vgpr4_vgpr5 = COPY %or(<2 x i32>)
    %a:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %amt:_(<2 x i32>) = COPY $vgpr2_vgpr3
    %scalar_bw:_(i32) = G_CONSTANT i32 32
    %bw:_(<2 x i32>) = G_BUILD_VECTOR %scalar_bw(i32), %scalar_bw(i32)
    %shl:_(<2 x i32>) = G_SHL %a, %amt(<2 x i32>)
    %sub:_(<2 x i32>) = G_SUB %bw, %amt
    %lshr:_(<2 x i32>) = G_LSHR %a, %sub(<2 x i32>)
    %or:_(<2 x i32>) = G_OR %shl, %lshr
    $vgpr4_vgpr5 = COPY %or(<2 x i32>)
...

---
name: rotl_commute_i32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: rotl_commute_i32
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: %or:_(i32) = G_ROTL %a, %amt(i32)
    ; CHECK-NEXT: $vgpr2 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt:_(i32) = COPY $vgpr1
    %bw:_(i32) = G_CONSTANT i32 32
    %shl:_(i32) = G_SHL %a, %amt(i32)
    %sub:_(i32) = G_SUB %bw, %amt
    %lshr:_(i32) = G_LSHR %a, %sub(i32)
    %or:_(i32) = G_OR %lshr, %shl
    $vgpr2 = COPY %or(i32)
...

---
name: rotr_i32
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: rotr_i32
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: %or:_(i32) = G_ROTR %a, %amt(i32)
    ; CHECK-NEXT: $vgpr2 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt:_(i32) = COPY $vgpr1
    %bw:_(i32) = G_CONSTANT i32 32
    %lshr:_(i32) = G_LSHR %a, %amt(i32)
    %sub:_(i32) = G_SUB %bw, %amt
    %shl:_(i32) = G_SHL %a, %sub(i32)
    %or:_(i32) = G_OR %shl, %lshr
    $vgpr2 = COPY %or(i32)
...

---
name: rot_i32_const
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: rot_i32_const
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt1:_(i32) = G_CONSTANT i32 12
    ; CHECK-NEXT: %or:_(i32) = G_ROTR %a, %amt1(i32)
    ; CHECK-NEXT: $vgpr1 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt0:_(i32) = G_CONSTANT i32 20
    %amt1:_(i32) = G_CONSTANT i32 12
    %shl:_(i32) = G_SHL %a, %amt0(i32)
    %lshr:_(i32) = G_LSHR %a, %amt1(i32)
    %or:_(i32) = G_OR %shl, %lshr
    $vgpr1 = COPY %or(i32)
...

---
name: rot_v2i32_const
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0_vgpr1, $vgpr2_vgpr3

    ; CHECK-LABEL: name: rot_v2i32_const
    ; CHECK: liveins: $vgpr0_vgpr1, $vgpr2_vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(<2 x i32>) = COPY $vgpr0_vgpr1
    ; CHECK-NEXT: %scalar_amt1:_(i32) = G_CONSTANT i32 12
    ; CHECK-NEXT: %amt1:_(<2 x i32>) = G_BUILD_VECTOR %scalar_amt1(i32), %scalar_amt1(i32)
    ; CHECK-NEXT: %or:_(<2 x i32>) = G_ROTR %a, %amt1(<2 x i32>)
    ; CHECK-NEXT: $vgpr2_vgpr3 = COPY %or(<2 x i32>)
    %a:_(<2 x i32>) = COPY $vgpr0_vgpr1
    %scalar_amt0:_(i32) = G_CONSTANT i32 20
    %amt0:_(<2 x i32>) = G_BUILD_VECTOR %scalar_amt0(i32), %scalar_amt0(i32)
    %scalar_amt1:_(i32) = G_CONSTANT i32 12
    %amt1:_(<2 x i32>) = G_BUILD_VECTOR %scalar_amt1(i32), %scalar_amt1(i32)
    %shl:_(<2 x i32>) = G_SHL %a, %amt0(<2 x i32>)
    %lshr:_(<2 x i32>) = G_LSHR %a, %amt1(<2 x i32>)
    %or:_(<2 x i32>) = G_OR %shl, %lshr
    $vgpr2_vgpr3 = COPY %or(<2 x i32>)
...

---
name: rot_i32_bad_const
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; CHECK-LABEL: name: rot_i32_bad_const
    ; CHECK: liveins: $vgpr0, $vgpr1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt0:_(i32) = G_CONSTANT i32 20
    ; CHECK-NEXT: %amt1:_(i32) = G_CONSTANT i32 11
    ; CHECK-NEXT: %shl:_(i32) = G_SHL %a, %amt0(i32)
    ; CHECK-NEXT: %lshr:_(i32) = G_LSHR %a, %amt1(i32)
    ; CHECK-NEXT: %or:_(i32) = G_OR %shl, %lshr
    ; CHECK-NEXT: $vgpr1 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt0:_(i32) = G_CONSTANT i32 20
    %amt1:_(i32) = G_CONSTANT i32 11
    %shl:_(i32) = G_SHL %a, %amt0(i32)
    %lshr:_(i32) = G_LSHR %a, %amt1(i32)
    %or:_(i32) = G_OR %shl, %lshr
    $vgpr1 = COPY %or(i32)
...


---
name: rotl_i32_bad_bw
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2

    ; CHECK-LABEL: name: rotl_i32_bad_bw
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: %bw:_(i32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %shl:_(i32) = G_SHL %a, %amt(i32)
    ; CHECK-NEXT: %sub:_(i32) = G_SUB %bw, %amt
    ; CHECK-NEXT: %lshr:_(i32) = G_LSHR %a, %sub(i32)
    ; CHECK-NEXT: %or:_(i32) = G_OR %shl, %lshr
    ; CHECK-NEXT: $vgpr2 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt:_(i32) = COPY $vgpr1
    %bw:_(i32) = G_CONSTANT i32 31
    %shl:_(i32) = G_SHL %a, %amt(i32)
    %sub:_(i32) = G_SUB %bw, %amt
    %lshr:_(i32) = G_LSHR %a, %sub(i32)
    %or:_(i32) = G_OR %shl, %lshr
    $vgpr2 = COPY %or(i32)
...

---
name: rotl_i32_bad_amt_reg
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3

    ; CHECK-LABEL: name: rotl_i32_bad_amt_reg
    ; CHECK: liveins: $vgpr0, $vgpr1, $vgpr2, $vgpr3
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %a:_(i32) = COPY $vgpr0
    ; CHECK-NEXT: %amt:_(i32) = COPY $vgpr1
    ; CHECK-NEXT: %amt1:_(i32) = COPY $vgpr2
    ; CHECK-NEXT: %bw:_(i32) = G_CONSTANT i32 32
    ; CHECK-NEXT: %shl:_(i32) = G_SHL %a, %amt(i32)
    ; CHECK-NEXT: %sub:_(i32) = G_SUB %bw, %amt1
    ; CHECK-NEXT: %lshr:_(i32) = G_LSHR %a, %sub(i32)
    ; CHECK-NEXT: %or:_(i32) = G_OR %shl, %lshr
    ; CHECK-NEXT: $vgpr3 = COPY %or(i32)
    %a:_(i32) = COPY $vgpr0
    %amt:_(i32) = COPY $vgpr1
    %amt1:_(i32) = COPY $vgpr2
    %bw:_(i32) = G_CONSTANT i32 32
    %shl:_(i32) = G_SHL %a, %amt(i32)
    %sub:_(i32) = G_SUB %bw, %amt1
    %lshr:_(i32) = G_LSHR %a, %sub(i32)
    %or:_(i32) = G_OR %shl, %lshr
    $vgpr3 = COPY %or(i32)
...
