; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc -mtriple=amdgcn-amd-amdpal -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn-amd-amdpal -mcpu=gfx1100 < %s | FileCheck -check-prefix=GFX11 %s

define i16 @v_underflow_compare_fold_i16(i16 %a, i16 %b) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i16:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_u16_e32 v1, v0, v1
; GFX9-NEXT:    v_min_u16_e32 v0, v1, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i16:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_nc_u16 v0.h, v0.l, v1.l
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_min_u16 v0.l, v0.h, v0.l
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i16 %a, %b
  %cond = call i16 @llvm.umin.i16(i16 %sub, i16 %a)
  ret i16 %cond
}

define i32 @v_underflow_compare_fold_i32(i32 %a, i32 %b) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_u32_e32 v1, v0, v1
; GFX9-NEXT:    v_min_u32_e32 v0, v1, v0
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i32:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_nc_u32_e32 v1, v0, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_min_u32_e32 v0, v1, v0
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i32 %a, %b
  %cond = call i32 @llvm.umin.i32(i32 %sub, i32 %a)
  ret i32 %cond
}

define i32 @v_underflow_compare_fold_i32_commute(i32 %a, i32 %b) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i32_commute:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_u32_e32 v1, v0, v1
; GFX9-NEXT:    v_min_u32_e32 v0, v0, v1
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i32_commute:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_nc_u32_e32 v1, v0, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_min_u32_e32 v0, v0, v1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i32 %a, %b
  %cond = call i32 @llvm.umin.i32(i32 %a, i32 %sub)
  ret i32 %cond
}

define i32 @v_underflow_compare_fold_i32_multi_use(i32 %a, i32 %b, ptr addrspace(1) %ptr) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i32_multi_use:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_u32_e32 v1, v0, v1
; GFX9-NEXT:    v_min_u32_e32 v0, v1, v0
; GFX9-NEXT:    global_store_dword v[2:3], v1, off
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i32_multi_use:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_nc_u32_e32 v1, v0, v1
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1)
; GFX11-NEXT:    v_min_u32_e32 v0, v1, v0
; GFX11-NEXT:    global_store_b32 v[2:3], v1, off
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i32 %a, %b
  store i32 %sub, ptr addrspace(1) %ptr
  %cond = call i32 @llvm.umin.i32(i32 %sub, i32 %a)
  ret i32 %cond
}

define i64 @v_underflow_compare_fold_i64(i64 %a, i64 %b) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i64:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_co_u32_e32 v2, vcc, v0, v2
; GFX9-NEXT:    v_subb_co_u32_e32 v3, vcc, v1, v3, vcc
; GFX9-NEXT:    v_cmp_lt_u64_e32 vcc, v[2:3], v[0:1]
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v0, v2, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v1, v3, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i64:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_co_u32 v2, vcc_lo, v0, v2
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_sub_co_ci_u32_e64 v3, null, v1, v3, vcc_lo
; GFX11-NEXT:    v_cmp_lt_u64_e32 vcc_lo, v[2:3], v[0:1]
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v0, v2 :: v_dual_cndmask_b32 v1, v1, v3
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i64 %a, %b
  %cond = call i64 @llvm.umin.i64(i64 %sub, i64 %a)
  ret i64 %cond
}

define i64 @v_underflow_compare_fold_i64_commute(i64 %a, i64 %b) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i64_commute:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_co_u32_e32 v2, vcc, v0, v2
; GFX9-NEXT:    v_subb_co_u32_e32 v3, vcc, v1, v3, vcc
; GFX9-NEXT:    v_cmp_lt_u64_e32 vcc, v[0:1], v[2:3]
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v2, v0, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v3, v1, vcc
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i64_commute:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_co_u32 v2, vcc_lo, v0, v2
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_sub_co_ci_u32_e64 v3, null, v1, v3, vcc_lo
; GFX11-NEXT:    v_cmp_lt_u64_e32 vcc_lo, v[0:1], v[2:3]
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v2, v0 :: v_dual_cndmask_b32 v1, v3, v1
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i64 %a, %b
  %cond = call i64 @llvm.umin.i64(i64 %a, i64 %sub)
  ret i64 %cond
}

define i64 @v_underflow_compare_fold_i64_multi_use(i64 %a, i64 %b, ptr addrspace(1) %ptr) #0 {
; GFX9-LABEL: v_underflow_compare_fold_i64_multi_use:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX9-NEXT:    v_sub_co_u32_e32 v2, vcc, v0, v2
; GFX9-NEXT:    v_subb_co_u32_e32 v3, vcc, v1, v3, vcc
; GFX9-NEXT:    v_cmp_lt_u64_e32 vcc, v[2:3], v[0:1]
; GFX9-NEXT:    global_store_dwordx2 v[4:5], v[2:3], off
; GFX9-NEXT:    v_cndmask_b32_e32 v0, v0, v2, vcc
; GFX9-NEXT:    v_cndmask_b32_e32 v1, v1, v3, vcc
; GFX9-NEXT:    s_waitcnt vmcnt(0)
; GFX9-NEXT:    s_setpc_b64 s[30:31]
;
; GFX11-LABEL: v_underflow_compare_fold_i64_multi_use:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_waitcnt vmcnt(0) expcnt(0) lgkmcnt(0)
; GFX11-NEXT:    v_sub_co_u32 v2, vcc_lo, v0, v2
; GFX11-NEXT:    s_delay_alu instid0(VALU_DEP_1) | instskip(NEXT) | instid1(VALU_DEP_1)
; GFX11-NEXT:    v_sub_co_ci_u32_e64 v3, null, v1, v3, vcc_lo
; GFX11-NEXT:    v_cmp_lt_u64_e32 vcc_lo, v[2:3], v[0:1]
; GFX11-NEXT:    global_store_b64 v[4:5], v[2:3], off
; GFX11-NEXT:    v_dual_cndmask_b32 v0, v0, v2 :: v_dual_cndmask_b32 v1, v1, v3
; GFX11-NEXT:    s_setpc_b64 s[30:31]
  %sub = sub i64 %a, %b
  store i64 %sub, ptr addrspace(1) %ptr
  %cond = call i64 @llvm.umin.i64(i64 %sub, i64 %a)
  ret i64 %cond
}

define amdgpu_ps i16 @s_underflow_compare_fold_i16(i16 inreg %a, i16 inreg %b) #0 {
; GFX9-LABEL: s_underflow_compare_fold_i16:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_sub_i32 s1, s0, s1
; GFX9-NEXT:    s_and_b32 s0, 0xffff, s0
; GFX9-NEXT:    s_and_b32 s1, s1, 0xffff
; GFX9-NEXT:    s_min_u32 s0, s1, s0
; GFX9-NEXT:    ; return to shader part epilog
;
; GFX11-LABEL: s_underflow_compare_fold_i16:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_sub_i32 s1, s0, s1
; GFX11-NEXT:    s_and_b32 s0, 0xffff, s0
; GFX11-NEXT:    s_and_b32 s1, s1, 0xffff
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_min_u32 s0, s1, s0
; GFX11-NEXT:    ; return to shader part epilog
  %sub = sub i16 %a, %b
  %cond = call i16 @llvm.umin.i16(i16 %sub, i16 %a)
  ret i16 %cond
}

define amdgpu_ps i32 @s_underflow_compare_fold_i32(i32 inreg %a, i32 inreg %b) #0 {
; GFX9-LABEL: s_underflow_compare_fold_i32:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_sub_i32 s1, s0, s1
; GFX9-NEXT:    s_min_u32 s0, s1, s0
; GFX9-NEXT:    ; return to shader part epilog
;
; GFX11-LABEL: s_underflow_compare_fold_i32:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_sub_i32 s1, s0, s1
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    s_min_u32 s0, s1, s0
; GFX11-NEXT:    ; return to shader part epilog
  %sub = sub i32 %a, %b
  %cond = call i32 @llvm.umin.i32(i32 %sub, i32 %a)
  ret i32 %cond
}

define amdgpu_ps i64 @s_underflow_compare_fold_i64(i64 inreg %a, i64 inreg %b) #0 {
; GFX9-LABEL: s_underflow_compare_fold_i64:
; GFX9:       ; %bb.0:
; GFX9-NEXT:    s_sub_u32 s2, s0, s2
; GFX9-NEXT:    v_mov_b32_e32 v0, s0
; GFX9-NEXT:    s_subb_u32 s3, s1, s3
; GFX9-NEXT:    v_mov_b32_e32 v1, s1
; GFX9-NEXT:    v_cmp_lt_u64_e32 vcc, s[2:3], v[0:1]
; GFX9-NEXT:    s_and_b64 s[4:5], vcc, exec
; GFX9-NEXT:    s_cselect_b32 s1, s3, s1
; GFX9-NEXT:    s_cselect_b32 s0, s2, s0
; GFX9-NEXT:    ; return to shader part epilog
;
; GFX11-LABEL: s_underflow_compare_fold_i64:
; GFX11:       ; %bb.0:
; GFX11-NEXT:    s_sub_u32 s2, s0, s2
; GFX11-NEXT:    s_subb_u32 s3, s1, s3
; GFX11-NEXT:    s_delay_alu instid0(SALU_CYCLE_1)
; GFX11-NEXT:    v_cmp_lt_u64_e64 s4, s[2:3], s[0:1]
; GFX11-NEXT:    s_and_b32 s4, s4, exec_lo
; GFX11-NEXT:    s_cselect_b32 s0, s2, s0
; GFX11-NEXT:    s_cselect_b32 s1, s3, s1
; GFX11-NEXT:    ; return to shader part epilog
  %sub = sub i64 %a, %b
  %cond = call i64 @llvm.umin.i64(i64 %sub, i64 %a)
  ret i64 %cond
}

attributes #0 = { nounwind }
