; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define half @bitcast_i16_to_f16(i16 %a, i32 %b) {
; SI-LABEL: bitcast_i16_to_f16:
; VI-LABEL: bitcast_i16_to_f16:
; GFX9-LABEL: bitcast_i16_to_f16:
; GFX11-TRUE16-LABEL: bitcast_i16_to_f16:
; GFX11-FAKE16-LABEL: bitcast_i16_to_f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i16 %a, 3
  %a2 = bitcast i16 %a1 to half
  br label %end

cmp.false:
  %a3 = bitcast i16 %a to half
  br label %end

end:
  %phi = phi half [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret half %phi
}

define inreg half @bitcast_i16_to_f16_scalar(i16 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i16_to_f16_scalar:
; VI-LABEL: bitcast_i16_to_f16_scalar:
; GFX9-LABEL: bitcast_i16_to_f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i16_to_f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i16_to_f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i16 %a, 3
  %a2 = bitcast i16 %a1 to half
  br label %end

cmp.false:
  %a3 = bitcast i16 %a to half
  br label %end

end:
  %phi = phi half [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret half %phi
}

define i16 @bitcast_f16_to_i16(half %a, i32 %b) {
; SI-LABEL: bitcast_f16_to_i16:
; VI-LABEL: bitcast_f16_to_i16:
; GFX9-LABEL: bitcast_f16_to_i16:
; GFX11-TRUE16-LABEL: bitcast_f16_to_i16:
; GFX11-FAKE16-LABEL: bitcast_f16_to_i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd half %a, 0xH0200
  %a2 = bitcast half %a1 to i16
  br label %end

cmp.false:
  %a3 = bitcast half %a to i16
  br label %end

end:
  %phi = phi i16 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i16 %phi
}

define inreg i16 @bitcast_f16_to_i16_scalar(half inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f16_to_i16_scalar:
; VI-LABEL: bitcast_f16_to_i16_scalar:
; GFX9-LABEL: bitcast_f16_to_i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f16_to_i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f16_to_i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd half %a, 0xH0200
  %a2 = bitcast half %a1 to i16
  br label %end

cmp.false:
  %a3 = bitcast half %a to i16
  br label %end

end:
  %phi = phi i16 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i16 %phi
}

define bfloat @bitcast_i16_to_bf16(i16 %a, i32 %b) {
; SI-LABEL: bitcast_i16_to_bf16:
; VI-LABEL: bitcast_i16_to_bf16:
; GFX9-LABEL: bitcast_i16_to_bf16:
; GFX11-TRUE16-LABEL: bitcast_i16_to_bf16:
; GFX11-FAKE16-LABEL: bitcast_i16_to_bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i16 %a, 3
  %a2 = bitcast i16 %a1 to bfloat
  br label %end

cmp.false:
  %a3 = bitcast i16 %a to bfloat
  br label %end

end:
  %phi = phi bfloat [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret bfloat %phi
}

define inreg bfloat @bitcast_i16_to_bf16_scalar(i16 inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_i16_to_bf16_scalar:
; VI-LABEL: bitcast_i16_to_bf16_scalar:
; GFX9-LABEL: bitcast_i16_to_bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_i16_to_bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_i16_to_bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add i16 %a, 3
  %a2 = bitcast i16 %a1 to bfloat
  br label %end

cmp.false:
  %a3 = bitcast i16 %a to bfloat
  br label %end

end:
  %phi = phi bfloat [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret bfloat %phi
}

define i16 @bitcast_bf16_to_i16(bfloat %a, i32 %b) {
; SI-LABEL: bitcast_bf16_to_i16:
; VI-LABEL: bitcast_bf16_to_i16:
; GFX9-LABEL: bitcast_bf16_to_i16:
; GFX11-TRUE16-LABEL: bitcast_bf16_to_i16:
; GFX11-FAKE16-LABEL: bitcast_bf16_to_i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd bfloat %a, 0xR40C0
  %a2 = bitcast bfloat %a1 to i16
  br label %end

cmp.false:
  %a3 = bitcast bfloat %a to i16
  br label %end

end:
  %phi = phi i16 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i16 %phi
}

define inreg i16 @bitcast_bf16_to_i16_scalar(bfloat inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_bf16_to_i16_scalar:
; VI-LABEL: bitcast_bf16_to_i16_scalar:
; GFX9-LABEL: bitcast_bf16_to_i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_bf16_to_i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_bf16_to_i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd bfloat %a, 0xR40C0
  %a2 = bitcast bfloat %a1 to i16
  br label %end

cmp.false:
  %a3 = bitcast bfloat %a to i16
  br label %end

end:
  %phi = phi i16 [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret i16 %phi
}

define bfloat @bitcast_f16_to_bf16(half %a, i32 %b) {
; SI-LABEL: bitcast_f16_to_bf16:
; VI-LABEL: bitcast_f16_to_bf16:
; GFX9-LABEL: bitcast_f16_to_bf16:
; GFX11-TRUE16-LABEL: bitcast_f16_to_bf16:
; GFX11-FAKE16-LABEL: bitcast_f16_to_bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd half %a, 0xH0200
  %a2 = bitcast half %a1 to bfloat
  br label %end

cmp.false:
  %a3 = bitcast half %a to bfloat
  br label %end

end:
  %phi = phi bfloat [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret bfloat %phi
}

define inreg bfloat @bitcast_f16_to_bf16_scalar(half inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_f16_to_bf16_scalar:
; VI-LABEL: bitcast_f16_to_bf16_scalar:
; GFX9-LABEL: bitcast_f16_to_bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_f16_to_bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_f16_to_bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd half %a, 0xH0200
  %a2 = bitcast half %a1 to bfloat
  br label %end

cmp.false:
  %a3 = bitcast half %a to bfloat
  br label %end

end:
  %phi = phi bfloat [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret bfloat %phi
}

define half @bitcast_bf16_to_f16(bfloat %a, i32 %b) {
; SI-LABEL: bitcast_bf16_to_f16:
; VI-LABEL: bitcast_bf16_to_f16:
; GFX9-LABEL: bitcast_bf16_to_f16:
; GFX11-TRUE16-LABEL: bitcast_bf16_to_f16:
; GFX11-FAKE16-LABEL: bitcast_bf16_to_f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd bfloat %a, 0xR40C0
  %a2 = bitcast bfloat %a1 to half
  br label %end

cmp.false:
  %a3 = bitcast bfloat %a to half
  br label %end

end:
  %phi = phi half [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret half %phi
}

define inreg half @bitcast_bf16_to_f16_scalar(bfloat inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_bf16_to_f16_scalar:
; VI-LABEL: bitcast_bf16_to_f16_scalar:
; GFX9-LABEL: bitcast_bf16_to_f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_bf16_to_f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_bf16_to_f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd bfloat %a, 0xR40C0
  %a2 = bitcast bfloat %a1 to half
  br label %end

cmp.false:
  %a3 = bitcast bfloat %a to half
  br label %end

end:
  %phi = phi half [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret half %phi
}
