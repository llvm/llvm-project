; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define <8 x float> @bitcast_v8i32_to_v8f32(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v8f32:
; VI-LABEL: bitcast_v8i32_to_v8f32:
; GFX9-LABEL: bitcast_v8i32_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v8i32_to_v8f32_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v8f32_scalar:
; VI-LABEL: bitcast_v8i32_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <8 x i32> @bitcast_v8f32_to_v8i32(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v8i32:
; VI-LABEL: bitcast_v8f32_to_v8i32:
; GFX9-LABEL: bitcast_v8f32_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v8f32_to_v8i32_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v8i32_scalar:
; VI-LABEL: bitcast_v8f32_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <4 x i64> @bitcast_v8i32_to_v4i64(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v4i64:
; VI-LABEL: bitcast_v8i32_to_v4i64:
; GFX9-LABEL: bitcast_v8i32_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v8i32_to_v4i64_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v4i64_scalar:
; VI-LABEL: bitcast_v8i32_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <8 x i32> @bitcast_v4i64_to_v8i32(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v8i32:
; VI-LABEL: bitcast_v4i64_to_v8i32:
; GFX9-LABEL: bitcast_v4i64_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v4i64_to_v8i32_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v8i32_scalar:
; VI-LABEL: bitcast_v4i64_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <4 x double> @bitcast_v8i32_to_v4f64(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v4f64:
; VI-LABEL: bitcast_v8i32_to_v4f64:
; GFX9-LABEL: bitcast_v8i32_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v8i32_to_v4f64_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v4f64_scalar:
; VI-LABEL: bitcast_v8i32_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <8 x i32> @bitcast_v4f64_to_v8i32(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v8i32:
; VI-LABEL: bitcast_v4f64_to_v8i32:
; GFX9-LABEL: bitcast_v4f64_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v4f64_to_v8i32_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v8i32_scalar:
; VI-LABEL: bitcast_v4f64_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <16 x i16> @bitcast_v8i32_to_v16i16(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v16i16:
; VI-LABEL: bitcast_v8i32_to_v16i16:
; GFX9-LABEL: bitcast_v8i32_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v8i32_to_v16i16_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v16i16_scalar:
; VI-LABEL: bitcast_v8i32_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <8 x i32> @bitcast_v16i16_to_v8i32(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v8i32:
; VI-LABEL: bitcast_v16i16_to_v8i32:
; GFX9-LABEL: bitcast_v16i16_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v16i16_to_v8i32_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v8i32_scalar:
; VI-LABEL: bitcast_v16i16_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <16 x half> @bitcast_v8i32_to_v16f16(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v16f16:
; VI-LABEL: bitcast_v8i32_to_v16f16:
; GFX9-LABEL: bitcast_v8i32_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v8i32_to_v16f16_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v16f16_scalar:
; VI-LABEL: bitcast_v8i32_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <8 x i32> @bitcast_v16f16_to_v8i32(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v8i32:
; VI-LABEL: bitcast_v16f16_to_v8i32:
; GFX9-LABEL: bitcast_v16f16_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v16f16_to_v8i32_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v8i32_scalar:
; VI-LABEL: bitcast_v16f16_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <16 x bfloat> @bitcast_v8i32_to_v16bf16(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v16bf16:
; VI-LABEL: bitcast_v8i32_to_v16bf16:
; GFX9-LABEL: bitcast_v8i32_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v8i32_to_v16bf16_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v16bf16_scalar:
; VI-LABEL: bitcast_v8i32_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define <8 x i32> @bitcast_v16bf16_to_v8i32(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v8i32:
; VI-LABEL: bitcast_v16bf16_to_v8i32:
; GFX9-LABEL: bitcast_v16bf16_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v16bf16_to_v8i32_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v8i32_scalar:
; VI-LABEL: bitcast_v16bf16_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <32 x i8> @bitcast_v8i32_to_v32i8(<8 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v8i32_to_v32i8:
; VI-LABEL: bitcast_v8i32_to_v32i8:
; GFX9-LABEL: bitcast_v8i32_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v8i32_to_v32i8_scalar(<8 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8i32_to_v32i8_scalar:
; VI-LABEL: bitcast_v8i32_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v8i32_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8i32_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8i32_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <8 x i32> %a, splat (i32 3)
  %a2 = bitcast <8 x i32> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x i32> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <8 x i32> @bitcast_v32i8_to_v8i32(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v8i32:
; VI-LABEL: bitcast_v32i8_to_v8i32:
; GFX9-LABEL: bitcast_v32i8_to_v8i32:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v8i32:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v8i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define inreg <8 x i32> @bitcast_v32i8_to_v8i32_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v8i32_scalar:
; VI-LABEL: bitcast_v32i8_to_v8i32_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v8i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v8i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v8i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <8 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <8 x i32>
  br label %end

end:
  %phi = phi <8 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x i32> %phi
}

define <4 x i64> @bitcast_v8f32_to_v4i64(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v4i64:
; VI-LABEL: bitcast_v8f32_to_v4i64:
; GFX9-LABEL: bitcast_v8f32_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v8f32_to_v4i64_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v4i64_scalar:
; VI-LABEL: bitcast_v8f32_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <8 x float> @bitcast_v4i64_to_v8f32(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v8f32:
; VI-LABEL: bitcast_v4i64_to_v8f32:
; GFX9-LABEL: bitcast_v4i64_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v4i64_to_v8f32_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v8f32_scalar:
; VI-LABEL: bitcast_v4i64_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <4 x double> @bitcast_v8f32_to_v4f64(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v4f64:
; VI-LABEL: bitcast_v8f32_to_v4f64:
; GFX9-LABEL: bitcast_v8f32_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v8f32_to_v4f64_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v4f64_scalar:
; VI-LABEL: bitcast_v8f32_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <8 x float> @bitcast_v4f64_to_v8f32(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v8f32:
; VI-LABEL: bitcast_v4f64_to_v8f32:
; GFX9-LABEL: bitcast_v4f64_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v4f64_to_v8f32_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v8f32_scalar:
; VI-LABEL: bitcast_v4f64_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <16 x i16> @bitcast_v8f32_to_v16i16(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v16i16:
; VI-LABEL: bitcast_v8f32_to_v16i16:
; GFX9-LABEL: bitcast_v8f32_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v8f32_to_v16i16_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v16i16_scalar:
; VI-LABEL: bitcast_v8f32_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <8 x float> @bitcast_v16i16_to_v8f32(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v8f32:
; VI-LABEL: bitcast_v16i16_to_v8f32:
; GFX9-LABEL: bitcast_v16i16_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v16i16_to_v8f32_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v8f32_scalar:
; VI-LABEL: bitcast_v16i16_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <16 x half> @bitcast_v8f32_to_v16f16(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v16f16:
; VI-LABEL: bitcast_v8f32_to_v16f16:
; GFX9-LABEL: bitcast_v8f32_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v8f32_to_v16f16_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v16f16_scalar:
; VI-LABEL: bitcast_v8f32_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <8 x float> @bitcast_v16f16_to_v8f32(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v8f32:
; VI-LABEL: bitcast_v16f16_to_v8f32:
; GFX9-LABEL: bitcast_v16f16_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v16f16_to_v8f32_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v8f32_scalar:
; VI-LABEL: bitcast_v16f16_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <16 x bfloat> @bitcast_v8f32_to_v16bf16(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v16bf16:
; VI-LABEL: bitcast_v8f32_to_v16bf16:
; GFX9-LABEL: bitcast_v8f32_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v8f32_to_v16bf16_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v16bf16_scalar:
; VI-LABEL: bitcast_v8f32_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define <8 x float> @bitcast_v16bf16_to_v8f32(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v8f32:
; VI-LABEL: bitcast_v16bf16_to_v8f32:
; GFX9-LABEL: bitcast_v16bf16_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v16bf16_to_v8f32_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v8f32_scalar:
; VI-LABEL: bitcast_v16bf16_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <32 x i8> @bitcast_v8f32_to_v32i8(<8 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v8f32_to_v32i8:
; VI-LABEL: bitcast_v8f32_to_v32i8:
; GFX9-LABEL: bitcast_v8f32_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v8f32_to_v32i8_scalar(<8 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v8f32_to_v32i8_scalar:
; VI-LABEL: bitcast_v8f32_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v8f32_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v8f32_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v8f32_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <8 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <8 x float> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <8 x float> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <8 x float> @bitcast_v32i8_to_v8f32(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v8f32:
; VI-LABEL: bitcast_v32i8_to_v8f32:
; GFX9-LABEL: bitcast_v32i8_to_v8f32:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v8f32:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v8f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define inreg <8 x float> @bitcast_v32i8_to_v8f32_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v8f32_scalar:
; VI-LABEL: bitcast_v32i8_to_v8f32_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v8f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v8f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v8f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <8 x float>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <8 x float>
  br label %end

end:
  %phi = phi <8 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <8 x float> %phi
}

define <4 x double> @bitcast_v4i64_to_v4f64(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v4f64:
; VI-LABEL: bitcast_v4i64_to_v4f64:
; GFX9-LABEL: bitcast_v4i64_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v4i64_to_v4f64_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v4f64_scalar:
; VI-LABEL: bitcast_v4i64_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <4 x i64> @bitcast_v4f64_to_v4i64(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v4i64:
; VI-LABEL: bitcast_v4f64_to_v4i64:
; GFX9-LABEL: bitcast_v4f64_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v4f64_to_v4i64_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v4i64_scalar:
; VI-LABEL: bitcast_v4f64_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <16 x i16> @bitcast_v4i64_to_v16i16(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v16i16:
; VI-LABEL: bitcast_v4i64_to_v16i16:
; GFX9-LABEL: bitcast_v4i64_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v4i64_to_v16i16_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v16i16_scalar:
; VI-LABEL: bitcast_v4i64_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <4 x i64> @bitcast_v16i16_to_v4i64(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v4i64:
; VI-LABEL: bitcast_v16i16_to_v4i64:
; GFX9-LABEL: bitcast_v16i16_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v16i16_to_v4i64_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v4i64_scalar:
; VI-LABEL: bitcast_v16i16_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <16 x half> @bitcast_v4i64_to_v16f16(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v16f16:
; VI-LABEL: bitcast_v4i64_to_v16f16:
; GFX9-LABEL: bitcast_v4i64_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v4i64_to_v16f16_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v16f16_scalar:
; VI-LABEL: bitcast_v4i64_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <4 x i64> @bitcast_v16f16_to_v4i64(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v4i64:
; VI-LABEL: bitcast_v16f16_to_v4i64:
; GFX9-LABEL: bitcast_v16f16_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v16f16_to_v4i64_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v4i64_scalar:
; VI-LABEL: bitcast_v16f16_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <16 x bfloat> @bitcast_v4i64_to_v16bf16(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v16bf16:
; VI-LABEL: bitcast_v4i64_to_v16bf16:
; GFX9-LABEL: bitcast_v4i64_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v4i64_to_v16bf16_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v16bf16_scalar:
; VI-LABEL: bitcast_v4i64_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define <4 x i64> @bitcast_v16bf16_to_v4i64(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v4i64:
; VI-LABEL: bitcast_v16bf16_to_v4i64:
; GFX9-LABEL: bitcast_v16bf16_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v16bf16_to_v4i64_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v4i64_scalar:
; VI-LABEL: bitcast_v16bf16_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <32 x i8> @bitcast_v4i64_to_v32i8(<4 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v4i64_to_v32i8:
; VI-LABEL: bitcast_v4i64_to_v32i8:
; GFX9-LABEL: bitcast_v4i64_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v4i64_to_v32i8_scalar(<4 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4i64_to_v32i8_scalar:
; VI-LABEL: bitcast_v4i64_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v4i64_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4i64_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4i64_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <4 x i64> %a, splat (i64 3)
  %a2 = bitcast <4 x i64> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x i64> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <4 x i64> @bitcast_v32i8_to_v4i64(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v4i64:
; VI-LABEL: bitcast_v32i8_to_v4i64:
; GFX9-LABEL: bitcast_v32i8_to_v4i64:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v4i64:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v4i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define inreg <4 x i64> @bitcast_v32i8_to_v4i64_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v4i64_scalar:
; VI-LABEL: bitcast_v32i8_to_v4i64_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v4i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v4i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v4i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <4 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <4 x i64>
  br label %end

end:
  %phi = phi <4 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x i64> %phi
}

define <16 x i16> @bitcast_v4f64_to_v16i16(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v16i16:
; VI-LABEL: bitcast_v4f64_to_v16i16:
; GFX9-LABEL: bitcast_v4f64_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v4f64_to_v16i16_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v16i16_scalar:
; VI-LABEL: bitcast_v4f64_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <4 x double> @bitcast_v16i16_to_v4f64(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v4f64:
; VI-LABEL: bitcast_v16i16_to_v4f64:
; GFX9-LABEL: bitcast_v16i16_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v16i16_to_v4f64_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v4f64_scalar:
; VI-LABEL: bitcast_v16i16_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <16 x half> @bitcast_v4f64_to_v16f16(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v16f16:
; VI-LABEL: bitcast_v4f64_to_v16f16:
; GFX9-LABEL: bitcast_v4f64_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v4f64_to_v16f16_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v16f16_scalar:
; VI-LABEL: bitcast_v4f64_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <4 x double> @bitcast_v16f16_to_v4f64(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v4f64:
; VI-LABEL: bitcast_v16f16_to_v4f64:
; GFX9-LABEL: bitcast_v16f16_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v16f16_to_v4f64_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v4f64_scalar:
; VI-LABEL: bitcast_v16f16_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <16 x bfloat> @bitcast_v4f64_to_v16bf16(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v16bf16:
; VI-LABEL: bitcast_v4f64_to_v16bf16:
; GFX9-LABEL: bitcast_v4f64_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v4f64_to_v16bf16_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v16bf16_scalar:
; VI-LABEL: bitcast_v4f64_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define <4 x double> @bitcast_v16bf16_to_v4f64(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v4f64:
; VI-LABEL: bitcast_v16bf16_to_v4f64:
; GFX9-LABEL: bitcast_v16bf16_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v16bf16_to_v4f64_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v4f64_scalar:
; VI-LABEL: bitcast_v16bf16_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <32 x i8> @bitcast_v4f64_to_v32i8(<4 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v4f64_to_v32i8:
; VI-LABEL: bitcast_v4f64_to_v32i8:
; GFX9-LABEL: bitcast_v4f64_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v4f64_to_v32i8_scalar(<4 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v4f64_to_v32i8_scalar:
; VI-LABEL: bitcast_v4f64_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v4f64_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v4f64_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v4f64_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <4 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <4 x double> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <4 x double> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <4 x double> @bitcast_v32i8_to_v4f64(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v4f64:
; VI-LABEL: bitcast_v32i8_to_v4f64:
; GFX9-LABEL: bitcast_v32i8_to_v4f64:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v4f64:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v4f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define inreg <4 x double> @bitcast_v32i8_to_v4f64_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v4f64_scalar:
; VI-LABEL: bitcast_v32i8_to_v4f64_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v4f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v4f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v4f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <4 x double>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <4 x double>
  br label %end

end:
  %phi = phi <4 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <4 x double> %phi
}

define <16 x half> @bitcast_v16i16_to_v16f16(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v16f16:
; VI-LABEL: bitcast_v16i16_to_v16f16:
; GFX9-LABEL: bitcast_v16i16_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v16i16_to_v16f16_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v16f16_scalar:
; VI-LABEL: bitcast_v16i16_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <16 x i16> @bitcast_v16f16_to_v16i16(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v16i16:
; VI-LABEL: bitcast_v16f16_to_v16i16:
; GFX9-LABEL: bitcast_v16f16_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v16f16_to_v16i16_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v16i16_scalar:
; VI-LABEL: bitcast_v16f16_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <16 x bfloat> @bitcast_v16i16_to_v16bf16(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v16bf16:
; VI-LABEL: bitcast_v16i16_to_v16bf16:
; GFX9-LABEL: bitcast_v16i16_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v16i16_to_v16bf16_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v16bf16_scalar:
; VI-LABEL: bitcast_v16i16_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define <16 x i16> @bitcast_v16bf16_to_v16i16(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v16i16:
; VI-LABEL: bitcast_v16bf16_to_v16i16:
; GFX9-LABEL: bitcast_v16bf16_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v16bf16_to_v16i16_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v16i16_scalar:
; VI-LABEL: bitcast_v16bf16_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <32 x i8> @bitcast_v16i16_to_v32i8(<16 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v16i16_to_v32i8:
; VI-LABEL: bitcast_v16i16_to_v32i8:
; GFX9-LABEL: bitcast_v16i16_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v16i16_to_v32i8_scalar(<16 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16i16_to_v32i8_scalar:
; VI-LABEL: bitcast_v16i16_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v16i16_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16i16_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16i16_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <16 x i16> %a, splat (i16 3)
  %a2 = bitcast <16 x i16> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <16 x i16> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <16 x i16> @bitcast_v32i8_to_v16i16(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v16i16:
; VI-LABEL: bitcast_v32i8_to_v16i16:
; GFX9-LABEL: bitcast_v32i8_to_v16i16:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v16i16:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v16i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define inreg <16 x i16> @bitcast_v32i8_to_v16i16_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v16i16_scalar:
; VI-LABEL: bitcast_v32i8_to_v16i16_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v16i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v16i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v16i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <16 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <16 x i16>
  br label %end

end:
  %phi = phi <16 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x i16> %phi
}

define <16 x bfloat> @bitcast_v16f16_to_v16bf16(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v16bf16:
; VI-LABEL: bitcast_v16f16_to_v16bf16:
; GFX9-LABEL: bitcast_v16f16_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v16f16_to_v16bf16_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v16bf16_scalar:
; VI-LABEL: bitcast_v16f16_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define <16 x half> @bitcast_v16bf16_to_v16f16(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v16f16:
; VI-LABEL: bitcast_v16bf16_to_v16f16:
; GFX9-LABEL: bitcast_v16bf16_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v16bf16_to_v16f16_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v16f16_scalar:
; VI-LABEL: bitcast_v16bf16_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <32 x i8> @bitcast_v16f16_to_v32i8(<16 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v16f16_to_v32i8:
; VI-LABEL: bitcast_v16f16_to_v32i8:
; GFX9-LABEL: bitcast_v16f16_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v16f16_to_v32i8_scalar(<16 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16f16_to_v32i8_scalar:
; VI-LABEL: bitcast_v16f16_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v16f16_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16f16_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16f16_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <16 x half> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <16 x half> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <16 x half> @bitcast_v32i8_to_v16f16(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v16f16:
; VI-LABEL: bitcast_v32i8_to_v16f16:
; GFX9-LABEL: bitcast_v32i8_to_v16f16:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v16f16:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v16f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define inreg <16 x half> @bitcast_v32i8_to_v16f16_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v16f16_scalar:
; VI-LABEL: bitcast_v32i8_to_v16f16_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v16f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v16f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v16f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <16 x half>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <16 x half>
  br label %end

end:
  %phi = phi <16 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x half> %phi
}

define <32 x i8> @bitcast_v16bf16_to_v32i8(<16 x bfloat> %a, i32 %b) {
; SI-LABEL: bitcast_v16bf16_to_v32i8:
; VI-LABEL: bitcast_v16bf16_to_v32i8:
; GFX9-LABEL: bitcast_v16bf16_to_v32i8:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v32i8:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v32i8:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define inreg <32 x i8> @bitcast_v16bf16_to_v32i8_scalar(<16 x bfloat> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v16bf16_to_v32i8_scalar:
; VI-LABEL: bitcast_v16bf16_to_v32i8_scalar:
; GFX9-LABEL: bitcast_v16bf16_to_v32i8_scalar:
; GFX11-TRUE16-LABEL: bitcast_v16bf16_to_v32i8_scalar:
; GFX11-FAKE16-LABEL: bitcast_v16bf16_to_v32i8_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <16 x bfloat> %a, splat (bfloat 0xR40C0)
  %a2 = bitcast <16 x bfloat> %a1 to <32 x i8>
  br label %end

cmp.false:
  %a3 = bitcast <16 x bfloat> %a to <32 x i8>
  br label %end

end:
  %phi = phi <32 x i8> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <32 x i8> %phi
}

define <16 x bfloat> @bitcast_v32i8_to_v16bf16(<32 x i8> %a, i32 %b) {
; SI-LABEL: bitcast_v32i8_to_v16bf16:
; VI-LABEL: bitcast_v32i8_to_v16bf16:
; GFX9-LABEL: bitcast_v32i8_to_v16bf16:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v16bf16:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v16bf16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}

define inreg <16 x bfloat> @bitcast_v32i8_to_v16bf16_scalar(<32 x i8> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v32i8_to_v16bf16_scalar:
; VI-LABEL: bitcast_v32i8_to_v16bf16_scalar:
; GFX9-LABEL: bitcast_v32i8_to_v16bf16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v32i8_to_v16bf16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v32i8_to_v16bf16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <32 x i8> %a, splat (i8 3)
  %a2 = bitcast <32 x i8> %a1 to <16 x bfloat>
  br label %end

cmp.false:
  %a3 = bitcast <32 x i8> %a to <16 x bfloat>
  br label %end

end:
  %phi = phi <16 x bfloat> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <16 x bfloat> %phi
}
