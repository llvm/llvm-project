; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -O0 -mtriple=amdgcn-amd-amdpal -mcpu=gfx900 -verify-machineinstrs < %s | FileCheck -check-prefix=GCN %s

; Ensure NOOP shaders compile at OptNone.

; Confirm registers reserved in SIMachineFunctionInfo are those expected during
; lowering, even when e.g. spilling is required due to being at OptNone.

target triple = "amdgcn-amd-amdpal"

define amdgpu_vs void @noop_vs() {
; GCN-LABEL: noop_vs:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}

define amdgpu_ls void @noop_ls() {
; GCN-LABEL: noop_ls:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}

define amdgpu_hs void @noop_hs() {
; GCN-LABEL: noop_hs:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}

define amdgpu_es void @noop_es() {
; GCN-LABEL: noop_es:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}

define amdgpu_gs void @noop_gs() {
; GCN-LABEL: noop_gs:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}

define amdgpu_ps void @noop_ps() {
; GCN-LABEL: noop_ps:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}

define amdgpu_cs void @noop_cs() {
; GCN-LABEL: noop_cs:
; GCN:       ; %bb.0: ; %entry
; GCN-NEXT:    s_endpgm
entry:
  ret void
}
