# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc %s -mtriple=amdgcn -mcpu=gfx900 -run-pass=si-peephole-sdwa -o - | FileCheck -check-prefix=gfx9 %s

---
name: change-compare-to-vopc # carry-in def is a comparison that can be changed to VOPC
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; gfx9-LABEL: name: change-compare-to-vopc
    ; gfx9: liveins: $vgpr0
    ; gfx9-NEXT: {{  $}}
    ; gfx9-NEXT: [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[DEF1:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: $vcc = V_CMP_EQ_U32_e64 undef [[DEF]], 1, implicit $exec
    ; gfx9-NEXT: [[V_LSHRREV_B32_e64_:%[0-9]+]]:vgpr_32 = V_LSHRREV_B32_e64 16, undef [[DEF1]], implicit $exec
    ; gfx9-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_sdwa:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_sdwa 0, [[V_MOV_B32_e32_]], 0, undef [[DEF1]], 0, 6, 0, 6, 5, implicit $vcc, implicit $exec
    ; gfx9-NEXT: $vgpr0 = COPY [[V_CNDMASK_B32_sdwa]]
    ; gfx9-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr_32 = IMPLICIT_DEF
    %1:vgpr_32 = IMPLICIT_DEF
    %2:sreg_64_xexec = V_CMP_EQ_U32_e64 undef %0, 1, implicit $exec
    %3:vgpr_32 = V_LSHRREV_B32_e64 16, undef %1, implicit $exec
    %4:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, %3, killed %2, implicit $exec
    $vgpr0 = COPY %4
    SI_RETURN implicit $vgpr0
...

...
---
name: carry-copy-non-compare # copy of carry-in necessary because def. instr. cannot be changed to write to VCC
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; gfx9-LABEL: name: carry-copy-non-compare
    ; gfx9: liveins: $vgpr0
    ; gfx9-NEXT: {{  $}}
    ; gfx9-NEXT: [[DEF:%[0-9]+]]:sreg_64_xexec = IMPLICIT_DEF
    ; gfx9-NEXT: [[DEF1:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[V_PK_MAX_F16_:%[0-9]+]]:vgpr_32 = V_PK_MAX_F16 8, undef [[DEF1]], 8, undef [[DEF1]], 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; gfx9-NEXT: [[V_LSHRREV_B32_e64_:%[0-9]+]]:vgpr_32 = V_LSHRREV_B32_e64 16, undef [[V_PK_MAX_F16_]], implicit $exec
    ; gfx9-NEXT: $vcc = COPY killed undef [[DEF]]
    ; gfx9-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_sdwa:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_sdwa 0, [[V_MOV_B32_e32_]], 0, undef [[V_PK_MAX_F16_]], 0, 6, 0, 6, 5, implicit $vcc, implicit $exec
    ; gfx9-NEXT: $vgpr0 = COPY [[V_CNDMASK_B32_sdwa]]
    ; gfx9-NEXT: SI_RETURN implicit $vgpr0
    %0:sreg_64_xexec = IMPLICIT_DEF
    %1:vgpr_32 = IMPLICIT_DEF
    %2:vgpr_32 = V_PK_MAX_F16 8, undef %1, 8, undef %1, 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    %3:vgpr_32 = V_LSHRREV_B32_e64 16, undef %2, implicit $exec
    %4:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, %3, killed undef %0, implicit $exec
    $vgpr0 = COPY %4
    SI_RETURN implicit $vgpr0
...

...
---
name: carry-copy-multiuse # copy of carry-in necessary because of second use
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0, $vgpr1

    ; gfx9-LABEL: name: carry-copy-multiuse
    ; gfx9: liveins: $vgpr0, $vgpr1
    ; gfx9-NEXT: {{  $}}
    ; gfx9-NEXT: [[DEF:%[0-9]+]]:sreg_64_xexec = IMPLICIT_DEF
    ; gfx9-NEXT: [[DEF1:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[V_PK_MAX_F16_:%[0-9]+]]:vgpr_32 = V_PK_MAX_F16 8, undef [[DEF1]], 8, undef [[DEF1]], 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    ; gfx9-NEXT: [[V_LSHRREV_B32_e64_:%[0-9]+]]:vgpr_32 = V_LSHRREV_B32_e64 16, [[V_PK_MAX_F16_]], implicit $exec
    ; gfx9-NEXT: $vcc = COPY killed undef [[DEF]]
    ; gfx9-NEXT: [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_sdwa:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_sdwa 0, [[V_MOV_B32_e32_]], 0, [[V_PK_MAX_F16_]], 0, 6, 0, 6, 5, implicit $vcc, implicit $exec
    ; gfx9-NEXT: $vgpr0 = COPY [[V_CNDMASK_B32_sdwa]]
    ; gfx9-NEXT: $vgpr1 = COPY [[DEF]]
    ; gfx9-NEXT: SI_RETURN implicit $vgpr0
    %0:sreg_64_xexec = IMPLICIT_DEF
    %1:vgpr_32 = IMPLICIT_DEF
    %2:vgpr_32 = V_PK_MAX_F16 8, undef %1, 8, undef %1, 0, 0, 0, 0, 0, implicit $mode, implicit $exec
    %3:vgpr_32 = V_LSHRREV_B32_e64 16, %2, implicit $exec
    %4:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, %3, killed undef %0, implicit $exec
    $vgpr0 = COPY %4
    $vgpr1 = COPY %0
    SI_RETURN implicit $vgpr0
...

...
---
name: live-vcc # cannot convert because of live VCC
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; gfx9-LABEL: name: live-vcc
    ; gfx9: liveins: $vgpr0
    ; gfx9-NEXT: {{  $}}
    ; gfx9-NEXT: [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[DEF1:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 undef [[DEF]], 1, implicit $exec
    ; gfx9-NEXT: [[V_LSHRREV_B32_e64_:%[0-9]+]]:vgpr_32 = V_LSHRREV_B32_e64 16, undef [[DEF1]], implicit $exec
    ; gfx9-NEXT: V_CMP_EQ_U32_e32 1, undef [[DEF1]], implicit-def $vcc, implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, [[V_LSHRREV_B32_e64_]], [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_e32_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e32 killed [[V_LSHRREV_B32_e64_]], killed [[V_LSHRREV_B32_e64_]], implicit $vcc, implicit $exec
    ; gfx9-NEXT: $vgpr0 = COPY [[V_CNDMASK_B32_e64_]]
    ; gfx9-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr_32 = IMPLICIT_DEF
    %2:vgpr_32 = IMPLICIT_DEF
    %3:sreg_64_xexec = V_CMP_EQ_U32_e64 undef %0, 1, implicit $exec
    %5:vgpr_32 = V_LSHRREV_B32_e64 16, undef %2, implicit $exec
    V_CMP_EQ_U32_e32 1, undef %2, implicit-def $vcc, implicit $exec
    %6:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, %5, %3, implicit $exec
    %7:vgpr_32 = V_CNDMASK_B32_e32 killed %5, killed %5, implicit $vcc, implicit $exec
    $vgpr0 = COPY %6
    SI_RETURN implicit $vgpr0
...

...
---
name: cannot-shrink-source-mods # cannot shrink because of source modifiers
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $vgpr0

    ; gfx9-LABEL: name: cannot-shrink-source-mods
    ; gfx9: liveins: $vgpr0
    ; gfx9-NEXT: {{  $}}
    ; gfx9-NEXT: [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[DEF1:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[V_CMP_EQ_U32_e64_:%[0-9]+]]:sreg_64_xexec = V_CMP_EQ_U32_e64 undef [[DEF]], 0, implicit $exec
    ; gfx9-NEXT: [[V_LSHRREV_B32_e64_:%[0-9]+]]:vgpr_32 = V_LSHRREV_B32_e64 16, undef [[DEF1]], implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 1, 0, 0, [[V_LSHRREV_B32_e64_]], killed [[V_CMP_EQ_U32_e64_]], implicit $exec
    ; gfx9-NEXT: $vgpr0 = COPY [[V_CNDMASK_B32_e64_]]
    ; gfx9-NEXT: SI_RETURN implicit $vgpr0
    %0:vgpr_32 = IMPLICIT_DEF
    %1:vgpr_32 = IMPLICIT_DEF
    %2:sreg_64_xexec = V_CMP_EQ_U32_e64 undef %0, 0, implicit $exec
    %3:vgpr_32 = V_LSHRREV_B32_e64 16, undef %1, implicit $exec
    %4:vgpr_32 = V_CNDMASK_B32_e64 1, 0, 0, %3, killed %2, implicit $exec
    $vgpr0 = COPY %4
    SI_RETURN implicit $vgpr0
...

...
---
name: missing-carry-def
tracksRegLiveness: true
registers:
  - { id: 0, class: sreg_64_xexec }
body:             |
  bb.0:
    liveins: $vgpr0

    ; gfx9-LABEL: name: missing-carry-def
    ; gfx9: liveins: $vgpr0
    ; gfx9-NEXT: {{  $}}
    ; gfx9-NEXT: [[DEF:%[0-9]+]]:vgpr_32 = IMPLICIT_DEF
    ; gfx9-NEXT: [[V_LSHRREV_B32_e64_:%[0-9]+]]:vgpr_32 = V_LSHRREV_B32_e64 16, undef [[DEF]], implicit $exec
    ; gfx9-NEXT: [[V_CNDMASK_B32_e64_:%[0-9]+]]:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, [[V_LSHRREV_B32_e64_]], undef %0:sreg_64_xexec, implicit $exec
    ; gfx9-NEXT: $vgpr0 = COPY [[V_CNDMASK_B32_e64_]]
    ; gfx9-NEXT: SI_RETURN implicit $vgpr0
    %1:vgpr_32 = IMPLICIT_DEF
    %2:vgpr_32 = V_LSHRREV_B32_e64 16, undef %1, implicit $exec
    %3:vgpr_32 = V_CNDMASK_B32_e64 0, 0, 0, %2, undef %0, implicit $exec
    $vgpr0 = COPY %3
    SI_RETURN implicit $vgpr0
...
