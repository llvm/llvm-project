; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=amdgcn -mcpu=tonga -amdgpu-opt-vgpr-liverange=true -verify-machineinstrs < %s | FileCheck -check-prefix=SI %s

; a normal if-else
define amdgpu_ps float @else1(i32 %z, float %v) #0 {
; SI-LABEL: else1:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_cmp_gt_i32_e32 vcc, 6, v0
; SI-NEXT:    ; implicit-def: $vgpr0
; SI-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; SI-NEXT:    s_xor_b64 s[0:1], exec, s[0:1]
; SI-NEXT:  ; %bb.1: ; %else
; SI-NEXT:    v_mul_f32_e32 v0, 0x40400000, v1
; SI-NEXT:    ; implicit-def: $vgpr1
; SI-NEXT:  ; %bb.2: ; %Flow
; SI-NEXT:    s_or_saveexec_b64 s[0:1], s[0:1]
; SI-NEXT:    s_xor_b64 exec, exec, s[0:1]
; SI-NEXT:  ; %bb.3: ; %if
; SI-NEXT:    v_add_f32_e32 v0, v1, v1
; SI-NEXT:  ; %bb.4: ; %end
; SI-NEXT:    s_or_b64 exec, exec, s[0:1]
; SI-NEXT:    ; return to shader part epilog
main_body:
  %cc = icmp sgt i32 %z, 5
  br i1 %cc, label %if, label %else

if:
  %v.if = fmul float %v, 2.0
  br label %end

else:
  %v.else = fmul float %v, 3.0
  br label %end

end:
  %r = phi float [ %v.if, %if ], [ %v.else, %else ]
  ret float %r
}


; %v was used after if-else
define amdgpu_ps float @else2(i32 %z, float %v) #0 {
; SI-LABEL: else2:
; SI:       ; %bb.0: ; %main_body
; SI-NEXT:    v_cmp_gt_i32_e32 vcc, 6, v0
; SI-NEXT:    ; implicit-def: $vgpr0
; SI-NEXT:    s_and_saveexec_b64 s[0:1], vcc
; SI-NEXT:    s_xor_b64 s[0:1], exec, s[0:1]
; SI-NEXT:  ; %bb.1: ; %else
; SI-NEXT:    v_mul_f32_e32 v0, 0x40400000, v1
; SI-NEXT:  ; %bb.2: ; %Flow
; SI-NEXT:    s_or_saveexec_b64 s[0:1], s[0:1]
; SI-NEXT:    s_xor_b64 exec, exec, s[0:1]
; SI-NEXT:  ; %bb.3: ; %if
; SI-NEXT:    v_add_f32_e32 v1, v1, v1
; SI-NEXT:    v_mov_b32_e32 v0, v1
; SI-NEXT:  ; %bb.4: ; %end
; SI-NEXT:    s_or_b64 exec, exec, s[0:1]
; SI-NEXT:    v_add_f32_e32 v0, v1, v0
; SI-NEXT:    ; return to shader part epilog
main_body:
  %cc = icmp sgt i32 %z, 5
  br i1 %cc, label %if, label %else

if:
  %v.if = fmul float %v, 2.0
  br label %end

else:
  %v.else = fmul float %v, 3.0
  br label %end

end:
  %r0 = phi float [ %v.if, %if ], [ %v, %else ]
  %r1 = phi float [ %v.if, %if ], [ %v.else, %else ]
  %r2 = fadd float %r0, %r1
  ret float %r2
}

; if-else inside loop, %x can be optimized, but %v cannot be.
define amdgpu_ps float @else3(i32 %z, float %v, i32 inreg %bound, i32 %x0) #0 {
; SI-LABEL: else3:
; SI:       ; %bb.0: ; %entry
; SI-NEXT:    v_cmp_gt_i32_e32 vcc, 6, v0
; SI-NEXT:    s_mov_b32 s1, 0
; SI-NEXT:    s_branch BB2_2
; SI-NEXT:  BB2_1: ; %if.end
; SI-NEXT:    ; in Loop: Header=BB2_2 Depth=1
; SI-NEXT:    s_or_b64 exec, exec, s[4:5]
; SI-NEXT:    s_add_i32 s1, s1, 1
; SI-NEXT:    s_cmp_lt_i32 s1, s0
; SI-NEXT:    v_add_u32_e64 v2, s[2:3], 1, v0
; SI-NEXT:    s_cbranch_scc0 BB2_6
; SI-NEXT:  BB2_2: ; %for.body
; SI-NEXT:    ; =>This Inner Loop Header: Depth=1
; SI-NEXT:    ; implicit-def: $vgpr0
; SI-NEXT:    ; implicit-def: $vgpr3
; SI-NEXT:    s_and_saveexec_b64 s[2:3], vcc
; SI-NEXT:    s_xor_b64 s[2:3], exec, s[2:3]
; SI-NEXT:  ; %bb.3: ; %else
; SI-NEXT:    ; in Loop: Header=BB2_2 Depth=1
; SI-NEXT:    v_mul_lo_u32 v0, v2, 3
; SI-NEXT:    v_mul_f32_e32 v3, v1, v2
; SI-NEXT:    ; implicit-def: $vgpr2
; SI-NEXT:  ; %bb.4: ; %Flow
; SI-NEXT:    ; in Loop: Header=BB2_2 Depth=1
; SI-NEXT:    s_or_saveexec_b64 s[4:5], s[2:3]
; SI-NEXT:    s_xor_b64 exec, exec, s[4:5]
; SI-NEXT:    s_cbranch_execz BB2_1
; SI-NEXT:  ; %bb.5: ; %if
; SI-NEXT:    ; in Loop: Header=BB2_2 Depth=1
; SI-NEXT:    v_mul_f32_e32 v3, s1, v1
; SI-NEXT:    v_add_u32_e64 v0, s[2:3], 1, v2
; SI-NEXT:    s_branch BB2_1
; SI-NEXT:  BB2_6: ; %for.end
; SI-NEXT:    v_add_f32_e32 v0, v0, v3
; SI-NEXT:    ; return to shader part epilog
entry:
;  %break = icmp sgt i32 %bound, 0
;  br i1 %break, label %for.body, label %for.end
  br label %for.body

for.body:
  %i = phi i32 [ 0, %entry ], [ %inc, %if.end ]
  %x = phi i32 [ %x0, %entry ], [ %xinc, %if.end ]
  %cc = icmp sgt i32 %z, 5
  br i1 %cc, label %if, label %else

if:
  %i.tmp = bitcast i32 %i to float
  %v.if = fmul float %v, %i.tmp
  %x.if = add i32 %x, 1
  br label %if.end

else:
  %x.tmp = bitcast i32 %x to float
  %v.else = fmul float %v, %x.tmp
  %x.else = mul i32 %x, 3
  br label %if.end

if.end:
  %v.endif = phi float [ %v.if, %if ], [ %v.else, %else ]
  %x.endif = phi i32 [ %x.if, %if ], [ %x.else, %else ]

  %xinc = add i32 %x.endif, 1
  %inc = add i32 %i, 1
  %cond = icmp slt i32 %inc, %bound
  br i1 %cond, label %for.body, label %for.end

for.end:
  %x_float = bitcast i32 %x.endif to float
  %r = fadd float %x_float, %v.endif
  ret float %r
}

attributes #0 = { nounwind }
