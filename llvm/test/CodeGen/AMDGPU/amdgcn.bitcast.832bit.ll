; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5

; RUN: llc -mtriple=amdgcn -mcpu=tahiti < %s | FileCheck -check-prefix=SI %s
; RUN: llc -mtriple=amdgcn -mcpu=tonga < %s | FileCheck -check-prefix=VI %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx900 < %s | FileCheck -check-prefix=GFX9 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=+real-true16 < %s | FileCheck -check-prefix=GFX11-TRUE16 %s
; RUN: llc -mtriple=amdgcn -mcpu=gfx1100 -mattr=-real-true16 < %s | FileCheck -check-prefix=GFX11-FAKE16 %s

define <26 x float> @bitcast_v26i32_to_v26f32(<26 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v26i32_to_v26f32:
; VI-LABEL: bitcast_v26i32_to_v26f32:
; GFX9-LABEL: bitcast_v26i32_to_v26f32:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v26f32:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v26f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define inreg <26 x float> @bitcast_v26i32_to_v26f32_scalar(<26 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26i32_to_v26f32_scalar:
; VI-LABEL: bitcast_v26i32_to_v26f32_scalar:
; GFX9-LABEL: bitcast_v26i32_to_v26f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v26f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v26f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define <26 x i32> @bitcast_v26f32_to_v26i32(<26 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v26f32_to_v26i32:
; VI-LABEL: bitcast_v26f32_to_v26i32:
; GFX9-LABEL: bitcast_v26f32_to_v26i32:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v26i32:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v26i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define inreg <26 x i32> @bitcast_v26f32_to_v26i32_scalar(<26 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26f32_to_v26i32_scalar:
; VI-LABEL: bitcast_v26f32_to_v26i32_scalar:
; GFX9-LABEL: bitcast_v26f32_to_v26i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v26i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v26i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define <13 x i64> @bitcast_v26i32_to_v13i64(<26 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v26i32_to_v13i64:
; VI-LABEL: bitcast_v26i32_to_v13i64:
; GFX9-LABEL: bitcast_v26i32_to_v13i64:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v13i64:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v13i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define inreg <13 x i64> @bitcast_v26i32_to_v13i64_scalar(<26 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26i32_to_v13i64_scalar:
; VI-LABEL: bitcast_v26i32_to_v13i64_scalar:
; GFX9-LABEL: bitcast_v26i32_to_v13i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v13i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v13i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define <26 x i32> @bitcast_v13i64_to_v26i32(<13 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v13i64_to_v26i32:
; VI-LABEL: bitcast_v13i64_to_v26i32:
; GFX9-LABEL: bitcast_v13i64_to_v26i32:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v26i32:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v26i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define inreg <26 x i32> @bitcast_v13i64_to_v26i32_scalar(<13 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13i64_to_v26i32_scalar:
; VI-LABEL: bitcast_v13i64_to_v26i32_scalar:
; GFX9-LABEL: bitcast_v13i64_to_v26i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v26i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v26i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define <13 x double> @bitcast_v26i32_to_v13f64(<26 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v26i32_to_v13f64:
; VI-LABEL: bitcast_v26i32_to_v13f64:
; GFX9-LABEL: bitcast_v26i32_to_v13f64:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v13f64:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v13f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define inreg <13 x double> @bitcast_v26i32_to_v13f64_scalar(<26 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26i32_to_v13f64_scalar:
; VI-LABEL: bitcast_v26i32_to_v13f64_scalar:
; GFX9-LABEL: bitcast_v26i32_to_v13f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v13f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v13f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define <26 x i32> @bitcast_v13f64_to_v26i32(<13 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v13f64_to_v26i32:
; VI-LABEL: bitcast_v13f64_to_v26i32:
; GFX9-LABEL: bitcast_v13f64_to_v26i32:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v26i32:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v26i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define inreg <26 x i32> @bitcast_v13f64_to_v26i32_scalar(<13 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13f64_to_v26i32_scalar:
; VI-LABEL: bitcast_v13f64_to_v26i32_scalar:
; GFX9-LABEL: bitcast_v13f64_to_v26i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v26i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v26i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define <52 x i16> @bitcast_v26i32_to_v52i16(<26 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v26i32_to_v52i16:
; VI-LABEL: bitcast_v26i32_to_v52i16:
; GFX9-LABEL: bitcast_v26i32_to_v52i16:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v52i16:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v52i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define inreg <52 x i16> @bitcast_v26i32_to_v52i16_scalar(<26 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26i32_to_v52i16_scalar:
; VI-LABEL: bitcast_v26i32_to_v52i16_scalar:
; GFX9-LABEL: bitcast_v26i32_to_v52i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v52i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v52i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define <26 x i32> @bitcast_v52i16_to_v26i32(<52 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v52i16_to_v26i32:
; VI-LABEL: bitcast_v52i16_to_v26i32:
; GFX9-LABEL: bitcast_v52i16_to_v26i32:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v26i32:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v26i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define inreg <26 x i32> @bitcast_v52i16_to_v26i32_scalar(<52 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52i16_to_v26i32_scalar:
; VI-LABEL: bitcast_v52i16_to_v26i32_scalar:
; GFX9-LABEL: bitcast_v52i16_to_v26i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v26i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v26i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define <52 x half> @bitcast_v26i32_to_v52f16(<26 x i32> %a, i32 %b) {
; SI-LABEL: bitcast_v26i32_to_v52f16:
; VI-LABEL: bitcast_v26i32_to_v52f16:
; GFX9-LABEL: bitcast_v26i32_to_v52f16:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v52f16:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v52f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define inreg <52 x half> @bitcast_v26i32_to_v52f16_scalar(<26 x i32> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26i32_to_v52f16_scalar:
; VI-LABEL: bitcast_v26i32_to_v52f16_scalar:
; GFX9-LABEL: bitcast_v26i32_to_v52f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26i32_to_v52f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26i32_to_v52f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <26 x i32> %a, splat (i32 3)
  %a2 = bitcast <26 x i32> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <26 x i32> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define <26 x i32> @bitcast_v52f16_to_v26i32(<52 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v52f16_to_v26i32:
; VI-LABEL: bitcast_v52f16_to_v26i32:
; GFX9-LABEL: bitcast_v52f16_to_v26i32:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v26i32:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v26i32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define inreg <26 x i32> @bitcast_v52f16_to_v26i32_scalar(<52 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52f16_to_v26i32_scalar:
; VI-LABEL: bitcast_v52f16_to_v26i32_scalar:
; GFX9-LABEL: bitcast_v52f16_to_v26i32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v26i32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v26i32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <26 x i32>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <26 x i32>
  br label %end

end:
  %phi = phi <26 x i32> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x i32> %phi
}

define <13 x i64> @bitcast_v26f32_to_v13i64(<26 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v26f32_to_v13i64:
; VI-LABEL: bitcast_v26f32_to_v13i64:
; GFX9-LABEL: bitcast_v26f32_to_v13i64:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v13i64:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v13i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define inreg <13 x i64> @bitcast_v26f32_to_v13i64_scalar(<26 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26f32_to_v13i64_scalar:
; VI-LABEL: bitcast_v26f32_to_v13i64_scalar:
; GFX9-LABEL: bitcast_v26f32_to_v13i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v13i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v13i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define <26 x float> @bitcast_v13i64_to_v26f32(<13 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v13i64_to_v26f32:
; VI-LABEL: bitcast_v13i64_to_v26f32:
; GFX9-LABEL: bitcast_v13i64_to_v26f32:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v26f32:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v26f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define inreg <26 x float> @bitcast_v13i64_to_v26f32_scalar(<13 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13i64_to_v26f32_scalar:
; VI-LABEL: bitcast_v13i64_to_v26f32_scalar:
; GFX9-LABEL: bitcast_v13i64_to_v26f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v26f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v26f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define <13 x double> @bitcast_v26f32_to_v13f64(<26 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v26f32_to_v13f64:
; VI-LABEL: bitcast_v26f32_to_v13f64:
; GFX9-LABEL: bitcast_v26f32_to_v13f64:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v13f64:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v13f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define inreg <13 x double> @bitcast_v26f32_to_v13f64_scalar(<26 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26f32_to_v13f64_scalar:
; VI-LABEL: bitcast_v26f32_to_v13f64_scalar:
; GFX9-LABEL: bitcast_v26f32_to_v13f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v13f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v13f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define <26 x float> @bitcast_v13f64_to_v26f32(<13 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v13f64_to_v26f32:
; VI-LABEL: bitcast_v13f64_to_v26f32:
; GFX9-LABEL: bitcast_v13f64_to_v26f32:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v26f32:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v26f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define inreg <26 x float> @bitcast_v13f64_to_v26f32_scalar(<13 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13f64_to_v26f32_scalar:
; VI-LABEL: bitcast_v13f64_to_v26f32_scalar:
; GFX9-LABEL: bitcast_v13f64_to_v26f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v26f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v26f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define <52 x i16> @bitcast_v26f32_to_v52i16(<26 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v26f32_to_v52i16:
; VI-LABEL: bitcast_v26f32_to_v52i16:
; GFX9-LABEL: bitcast_v26f32_to_v52i16:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v52i16:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v52i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define inreg <52 x i16> @bitcast_v26f32_to_v52i16_scalar(<26 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26f32_to_v52i16_scalar:
; VI-LABEL: bitcast_v26f32_to_v52i16_scalar:
; GFX9-LABEL: bitcast_v26f32_to_v52i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v52i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v52i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define <26 x float> @bitcast_v52i16_to_v26f32(<52 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v52i16_to_v26f32:
; VI-LABEL: bitcast_v52i16_to_v26f32:
; GFX9-LABEL: bitcast_v52i16_to_v26f32:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v26f32:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v26f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define inreg <26 x float> @bitcast_v52i16_to_v26f32_scalar(<52 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52i16_to_v26f32_scalar:
; VI-LABEL: bitcast_v52i16_to_v26f32_scalar:
; GFX9-LABEL: bitcast_v52i16_to_v26f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v26f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v26f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define <52 x half> @bitcast_v26f32_to_v52f16(<26 x float> %a, i32 %b) {
; SI-LABEL: bitcast_v26f32_to_v52f16:
; VI-LABEL: bitcast_v26f32_to_v52f16:
; GFX9-LABEL: bitcast_v26f32_to_v52f16:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v52f16:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v52f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define inreg <52 x half> @bitcast_v26f32_to_v52f16_scalar(<26 x float> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v26f32_to_v52f16_scalar:
; VI-LABEL: bitcast_v26f32_to_v52f16_scalar:
; GFX9-LABEL: bitcast_v26f32_to_v52f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v26f32_to_v52f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v26f32_to_v52f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <26 x float> %a, splat (float 1.000000e+00)
  %a2 = bitcast <26 x float> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <26 x float> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define <26 x float> @bitcast_v52f16_to_v26f32(<52 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v52f16_to_v26f32:
; VI-LABEL: bitcast_v52f16_to_v26f32:
; GFX9-LABEL: bitcast_v52f16_to_v26f32:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v26f32:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v26f32:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define inreg <26 x float> @bitcast_v52f16_to_v26f32_scalar(<52 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52f16_to_v26f32_scalar:
; VI-LABEL: bitcast_v52f16_to_v26f32_scalar:
; GFX9-LABEL: bitcast_v52f16_to_v26f32_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v26f32_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v26f32_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <26 x float>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <26 x float>
  br label %end

end:
  %phi = phi <26 x float> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <26 x float> %phi
}

define <13 x double> @bitcast_v13i64_to_v13f64(<13 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v13i64_to_v13f64:
; VI-LABEL: bitcast_v13i64_to_v13f64:
; GFX9-LABEL: bitcast_v13i64_to_v13f64:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v13f64:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v13f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define inreg <13 x double> @bitcast_v13i64_to_v13f64_scalar(<13 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13i64_to_v13f64_scalar:
; VI-LABEL: bitcast_v13i64_to_v13f64_scalar:
; GFX9-LABEL: bitcast_v13i64_to_v13f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v13f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v13f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define <13 x i64> @bitcast_v13f64_to_v13i64(<13 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v13f64_to_v13i64:
; VI-LABEL: bitcast_v13f64_to_v13i64:
; GFX9-LABEL: bitcast_v13f64_to_v13i64:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v13i64:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v13i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define inreg <13 x i64> @bitcast_v13f64_to_v13i64_scalar(<13 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13f64_to_v13i64_scalar:
; VI-LABEL: bitcast_v13f64_to_v13i64_scalar:
; GFX9-LABEL: bitcast_v13f64_to_v13i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v13i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v13i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define <52 x i16> @bitcast_v13i64_to_v52i16(<13 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v13i64_to_v52i16:
; VI-LABEL: bitcast_v13i64_to_v52i16:
; GFX9-LABEL: bitcast_v13i64_to_v52i16:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v52i16:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v52i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define inreg <52 x i16> @bitcast_v13i64_to_v52i16_scalar(<13 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13i64_to_v52i16_scalar:
; VI-LABEL: bitcast_v13i64_to_v52i16_scalar:
; GFX9-LABEL: bitcast_v13i64_to_v52i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v52i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v52i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define <13 x i64> @bitcast_v52i16_to_v13i64(<52 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v52i16_to_v13i64:
; VI-LABEL: bitcast_v52i16_to_v13i64:
; GFX9-LABEL: bitcast_v52i16_to_v13i64:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v13i64:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v13i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define inreg <13 x i64> @bitcast_v52i16_to_v13i64_scalar(<52 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52i16_to_v13i64_scalar:
; VI-LABEL: bitcast_v52i16_to_v13i64_scalar:
; GFX9-LABEL: bitcast_v52i16_to_v13i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v13i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v13i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define <52 x half> @bitcast_v13i64_to_v52f16(<13 x i64> %a, i32 %b) {
; SI-LABEL: bitcast_v13i64_to_v52f16:
; VI-LABEL: bitcast_v13i64_to_v52f16:
; GFX9-LABEL: bitcast_v13i64_to_v52f16:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v52f16:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v52f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define inreg <52 x half> @bitcast_v13i64_to_v52f16_scalar(<13 x i64> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13i64_to_v52f16_scalar:
; VI-LABEL: bitcast_v13i64_to_v52f16_scalar:
; GFX9-LABEL: bitcast_v13i64_to_v52f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13i64_to_v52f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13i64_to_v52f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <13 x i64> %a, splat (i64 3)
  %a2 = bitcast <13 x i64> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <13 x i64> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define <13 x i64> @bitcast_v52f16_to_v13i64(<52 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v52f16_to_v13i64:
; VI-LABEL: bitcast_v52f16_to_v13i64:
; GFX9-LABEL: bitcast_v52f16_to_v13i64:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v13i64:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v13i64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define inreg <13 x i64> @bitcast_v52f16_to_v13i64_scalar(<52 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52f16_to_v13i64_scalar:
; VI-LABEL: bitcast_v52f16_to_v13i64_scalar:
; GFX9-LABEL: bitcast_v52f16_to_v13i64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v13i64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v13i64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <13 x i64>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <13 x i64>
  br label %end

end:
  %phi = phi <13 x i64> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x i64> %phi
}

define <52 x i16> @bitcast_v13f64_to_v52i16(<13 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v13f64_to_v52i16:
; VI-LABEL: bitcast_v13f64_to_v52i16:
; GFX9-LABEL: bitcast_v13f64_to_v52i16:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v52i16:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v52i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define inreg <52 x i16> @bitcast_v13f64_to_v52i16_scalar(<13 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13f64_to_v52i16_scalar:
; VI-LABEL: bitcast_v13f64_to_v52i16_scalar:
; GFX9-LABEL: bitcast_v13f64_to_v52i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v52i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v52i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define <13 x double> @bitcast_v52i16_to_v13f64(<52 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v52i16_to_v13f64:
; VI-LABEL: bitcast_v52i16_to_v13f64:
; GFX9-LABEL: bitcast_v52i16_to_v13f64:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v13f64:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v13f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define inreg <13 x double> @bitcast_v52i16_to_v13f64_scalar(<52 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52i16_to_v13f64_scalar:
; VI-LABEL: bitcast_v52i16_to_v13f64_scalar:
; GFX9-LABEL: bitcast_v52i16_to_v13f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v13f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v13f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define <52 x half> @bitcast_v13f64_to_v52f16(<13 x double> %a, i32 %b) {
; SI-LABEL: bitcast_v13f64_to_v52f16:
; VI-LABEL: bitcast_v13f64_to_v52f16:
; GFX9-LABEL: bitcast_v13f64_to_v52f16:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v52f16:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v52f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define inreg <52 x half> @bitcast_v13f64_to_v52f16_scalar(<13 x double> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v13f64_to_v52f16_scalar:
; VI-LABEL: bitcast_v13f64_to_v52f16_scalar:
; GFX9-LABEL: bitcast_v13f64_to_v52f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v13f64_to_v52f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v13f64_to_v52f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <13 x double> %a, splat (double 1.000000e+00)
  %a2 = bitcast <13 x double> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <13 x double> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define <13 x double> @bitcast_v52f16_to_v13f64(<52 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v52f16_to_v13f64:
; VI-LABEL: bitcast_v52f16_to_v13f64:
; GFX9-LABEL: bitcast_v52f16_to_v13f64:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v13f64:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v13f64:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define inreg <13 x double> @bitcast_v52f16_to_v13f64_scalar(<52 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52f16_to_v13f64_scalar:
; VI-LABEL: bitcast_v52f16_to_v13f64_scalar:
; GFX9-LABEL: bitcast_v52f16_to_v13f64_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v13f64_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v13f64_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <13 x double>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <13 x double>
  br label %end

end:
  %phi = phi <13 x double> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <13 x double> %phi
}

define <52 x half> @bitcast_v52i16_to_v52f16(<52 x i16> %a, i32 %b) {
; SI-LABEL: bitcast_v52i16_to_v52f16:
; VI-LABEL: bitcast_v52i16_to_v52f16:
; GFX9-LABEL: bitcast_v52i16_to_v52f16:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v52f16:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v52f16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define inreg <52 x half> @bitcast_v52i16_to_v52f16_scalar(<52 x i16> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52i16_to_v52f16_scalar:
; VI-LABEL: bitcast_v52i16_to_v52f16_scalar:
; GFX9-LABEL: bitcast_v52i16_to_v52f16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52i16_to_v52f16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52i16_to_v52f16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = add <52 x i16> %a, splat (i16 3)
  %a2 = bitcast <52 x i16> %a1 to <52 x half>
  br label %end

cmp.false:
  %a3 = bitcast <52 x i16> %a to <52 x half>
  br label %end

end:
  %phi = phi <52 x half> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x half> %phi
}

define <52 x i16> @bitcast_v52f16_to_v52i16(<52 x half> %a, i32 %b) {
; SI-LABEL: bitcast_v52f16_to_v52i16:
; VI-LABEL: bitcast_v52f16_to_v52i16:
; GFX9-LABEL: bitcast_v52f16_to_v52i16:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v52i16:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v52i16:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}

define inreg <52 x i16> @bitcast_v52f16_to_v52i16_scalar(<52 x half> inreg %a, i32 inreg %b) {
; SI-LABEL: bitcast_v52f16_to_v52i16_scalar:
; VI-LABEL: bitcast_v52f16_to_v52i16_scalar:
; GFX9-LABEL: bitcast_v52f16_to_v52i16_scalar:
; GFX11-TRUE16-LABEL: bitcast_v52f16_to_v52i16_scalar:
; GFX11-FAKE16-LABEL: bitcast_v52f16_to_v52i16_scalar:
  %cmp = icmp eq i32 %b, 0
  br i1 %cmp, label %cmp.true, label %cmp.false

cmp.true:
  %a1 = fadd <52 x half> %a, splat (half 0xH0200)
  %a2 = bitcast <52 x half> %a1 to <52 x i16>
  br label %end

cmp.false:
  %a3 = bitcast <52 x half> %a to <52 x i16>
  br label %end

end:
  %phi = phi <52 x i16> [ %a2, %cmp.true ], [ %a3, %cmp.false ]
  ret <52 x i16> %phi
}
