; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=i686-linux-gnu < %s | FileCheck %s --check-prefix=I686

define float @min(float nofpclass(nan zero) %a, float nofpclass(nan zero) %b) {
; I686-LABEL: min:
; I686:       # %bb.0: # %entry
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    ja .LBB0_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fldz
; I686-NEXT:  .LBB0_2: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.minimum.f32(float %a, float %b)
  ret float %0
}

define float @minN(float nofpclass(nan nzero) %a, float nofpclass(nan nzero) %b) {
; I686-LABEL: minN:
; I686:       # %bb.0: # %entry
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    ja .LBB1_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fldz
; I686-NEXT:  .LBB1_2: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.minimum.f32(float %a, float %b)
  ret float %0
}

define float @minP(float nofpclass(nan pzero) %a, float nofpclass(nan pzero) %b) {
; I686-LABEL: minP:
; I686:       # %bb.0: # %entry
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    ja .LBB2_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fldz
; I686-NEXT:  .LBB2_2: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.minimum.f32(float %a, float %b)
  ret float %0
}

define float @minNP(float nofpclass(nan nzero) %a, float nofpclass(nan pzero) %b) {
; I686-LABEL: minNP:
; I686:       # %bb.0: # %entry
; I686-NEXT:    subl $8, %esp
; I686-NEXT:    .cfi_def_cfa_offset 12
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fsts {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fsts (%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    fld %st(1)
; I686-NEXT:    ja .LBB3_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    fld %st(0)
; I686-NEXT:  .LBB3_2: # %entry
; I686-NEXT:    xorl %eax, %eax
; I686-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; I686-NEXT:    jo .LBB3_4
; I686-NEXT:  # %bb.3: # %entry
; I686-NEXT:    fstp %st(2)
; I686-NEXT:    fld %st(1)
; I686-NEXT:    fxch %st(2)
; I686-NEXT:  .LBB3_4: # %entry
; I686-NEXT:    cmpl (%esp), %eax
; I686-NEXT:    jo .LBB3_6
; I686-NEXT:  # %bb.5: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(2)
; I686-NEXT:    fxch %st(1)
; I686-NEXT:  .LBB3_6: # %entry
; I686-NEXT:    fstp %st(2)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(2)
; I686-NEXT:    fucom %st(2)
; I686-NEXT:    fstp %st(2)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    jne .LBB3_7
; I686-NEXT:  # %bb.8: # %entry
; I686-NEXT:    jp .LBB3_11
; I686-NEXT:  # %bb.9: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    jmp .LBB3_10
; I686-NEXT:  .LBB3_7:
; I686-NEXT:    fstp %st(0)
; I686-NEXT:  .LBB3_10: # %entry
; I686-NEXT:    fldz
; I686-NEXT:  .LBB3_11: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    addl $8, %esp
; I686-NEXT:    .cfi_def_cfa_offset 4
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.minimum.f32(float %a, float %b)
  ret float %0
}

define float @max(float nofpclass(nan zero) %a, float nofpclass(nan zero) %b) {
; I686-LABEL: max:
; I686:       # %bb.0: # %entry
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    ja .LBB4_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(1)
; I686-NEXT:  .LBB4_2: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.maximum.f32(float %a, float %b)
  ret float %0
}

define float @maxN(float nofpclass(nan nzero) %a, float nofpclass(nan nzero) %b) {
; I686-LABEL: maxN:
; I686:       # %bb.0: # %entry
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    ja .LBB5_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(1)
; I686-NEXT:  .LBB5_2: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.maximum.f32(float %a, float %b)
  ret float %0
}

define float @maxP(float nofpclass(nan pzero) %a, float nofpclass(nan pzero) %b) {
; I686-LABEL: maxP:
; I686:       # %bb.0: # %entry
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    ja .LBB6_2
; I686-NEXT:  # %bb.1: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(1)
; I686-NEXT:  .LBB6_2: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.maximum.f32(float %a, float %b)
  ret float %0
}

define float @maxNP(float nofpclass(nan nzero) %a, float nofpclass(nan pzero) %b) {
; I686-LABEL: maxNP:
; I686:       # %bb.0: # %entry
; I686-NEXT:    subl $8, %esp
; I686-NEXT:    .cfi_def_cfa_offset 12
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fsts {{[0-9]+}}(%esp)
; I686-NEXT:    flds {{[0-9]+}}(%esp)
; I686-NEXT:    fsts (%esp)
; I686-NEXT:    fxch %st(1)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    fld %st(0)
; I686-NEXT:    jbe .LBB7_1
; I686-NEXT:  # %bb.2: # %entry
; I686-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I686-NEXT:    jne .LBB7_3
; I686-NEXT:  .LBB7_4: # %entry
; I686-NEXT:    cmpl $0, (%esp)
; I686-NEXT:    je .LBB7_6
; I686-NEXT:  .LBB7_5: # %entry
; I686-NEXT:    fstp %st(2)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(1)
; I686-NEXT:    fxch %st(2)
; I686-NEXT:  .LBB7_6: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(1)
; I686-NEXT:    fucom %st(1)
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fnstsw %ax
; I686-NEXT:    # kill: def $ah killed $ah killed $ax
; I686-NEXT:    sahf
; I686-NEXT:    jne .LBB7_7
; I686-NEXT:  # %bb.8: # %entry
; I686-NEXT:    jp .LBB7_11
; I686-NEXT:  # %bb.9: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    jmp .LBB7_10
; I686-NEXT:  .LBB7_1: # %entry
; I686-NEXT:    fstp %st(0)
; I686-NEXT:    fld %st(1)
; I686-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; I686-NEXT:    je .LBB7_4
; I686-NEXT:  .LBB7_3: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    fld %st(0)
; I686-NEXT:    fxch %st(1)
; I686-NEXT:    cmpl $0, (%esp)
; I686-NEXT:    jne .LBB7_5
; I686-NEXT:    jmp .LBB7_6
; I686-NEXT:  .LBB7_7:
; I686-NEXT:    fstp %st(1)
; I686-NEXT:  .LBB7_10: # %entry
; I686-NEXT:    fldz
; I686-NEXT:    fxch %st(1)
; I686-NEXT:  .LBB7_11: # %entry
; I686-NEXT:    fstp %st(1)
; I686-NEXT:    addl $8, %esp
; I686-NEXT:    .cfi_def_cfa_offset 4
; I686-NEXT:    retl
entry:
  %0 = tail call float @llvm.maximum.f32(float %a, float %b)
  ret float %0
}
