# NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
# NOTE: This MIR test is required because the support for 64 bit memory ops is missing in i686 mode, Due to distinction between float/int types, support is expected in near future and there is this RFC in place https://discourse.llvm.org/t/rfc-globalisel-adding-fp-type-information-to-llt/83349. Once this support is introduced this test must be dropped and integrated into the LLVM IR tests.
# RUN: llc -O2 -mtriple=i686-linux-gnu -mattr=+x87,-sse,-sse2 -start-after=legalizer -disable-gisel-legality-check -global-isel -verify-machineinstrs %s -o - | FileCheck %s --check-prefixes GISEL-X86

--- |
  ; ModuleID = 'c2.ll'
  source_filename = "c2.ll"
  target datalayout = "e-m:e-p:32:32-p270:32:32-p271:32:32-p272:64:64-i128:128-f64:32:64-f80:32-n8:16:32-S128"
  target triple = "i686-unknown-linux-gnu"

  ; Function Attrs: nounwind
  define i1 @fcmp_float_oeq(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_oeq:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    sete %cl
  ; GISEL-X86-NEXT:    setnp %al
  ; GISEL-X86-NEXT:    andb %cl, %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp oeq float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ogt(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ogt:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    seta %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ogt float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_oge(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_oge:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setae %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp oge float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_olt(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_olt:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    seta %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp olt float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ole(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ole:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setae %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ole float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_one(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_one:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setne %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp one float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ord(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ord:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setnp %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ord float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_uno(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_uno:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setp %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp uno float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ueq(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ueq:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    sete %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ueq float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ugt(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ugt:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setb %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ugt float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_uge(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_uge:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setbe %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp uge float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ult(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ult:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setb %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ult float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_ule(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_ule:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setbe %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ule float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_float_une(float %x, float %y) #0 {
  ; GISEL-X86-LABEL: fcmp_float_une:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    flds {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setne %cl
  ; GISEL-X86-NEXT:    setp %al
  ; GISEL-X86-NEXT:    orb %cl, %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp une float %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_oeq(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_oeq:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    sete %cl
  ; GISEL-X86-NEXT:    setnp %al
  ; GISEL-X86-NEXT:    andb %cl, %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp oeq double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ogt(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ogt:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    seta %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ogt double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_oge(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_oge:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setae %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp oge double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_olt(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_olt:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    seta %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp olt double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ole(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ole:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setae %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ole double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_one(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_one:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setne %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp one double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ord(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ord:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setnp %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ord double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_uno(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_uno:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setp %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp uno double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ueq(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ueq:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    sete %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ueq double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ugt(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ugt:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setb %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ugt double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_uge(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_uge:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setbe %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp uge double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ult(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ult:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setb %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ult double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_ule(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_ule:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setbe %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp ule double %x, %y
    ret i1 %1
  }

  ; Function Attrs: nounwind
  define i1 @fcmp_double_une(double %x, double %y) #0 {
  ; GISEL-X86-LABEL: fcmp_double_une:
  ; GISEL-X86:       # %bb.0:
  ; GISEL-X86-NEXT:    subl $12, %esp
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fldl {{[0-9]+}}(%esp)
  ; GISEL-X86-NEXT:    fxch %st(1)
  ; GISEL-X86-NEXT:    fucompi %st(1), %st
  ; GISEL-X86-NEXT:    fstp %st(0)
  ; GISEL-X86-NEXT:    setne %cl
  ; GISEL-X86-NEXT:    setp %al
  ; GISEL-X86-NEXT:    orb %cl, %al
  ; GISEL-X86-NEXT:    addl $12, %esp
  ; GISEL-X86-NEXT:    retl
    %1 = fcmp une double %x, %y
    ret i1 %1
  }

  attributes #0 = { nounwind "target-features"="+x87,-sse,-sse2" }

...
---
name:            fcmp_float_oeq
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(oeq), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ogt
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ogt), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_oge
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(oge), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_olt
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(olt), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ole
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ole), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_one
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(one), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ord
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ord), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_uno
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(uno), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ueq
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ueq), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ugt
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ugt), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_uge
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(uge), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ult
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ult), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_ule
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(ule), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_float_une
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 4, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %2:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %0:_(s32) = G_LOAD %2(p0) :: (invariant load (s32) from %fixed-stack.1, align 16)
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %1:_(s32) = G_LOAD %3(p0) :: (invariant load (s32) from %fixed-stack.0)
    %6:_(s8) = G_FCMP floatpred(une), %0(s32), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_oeq
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(oeq), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ogt
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ogt), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_oge
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(oge), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_olt
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(olt), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ole
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ole), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_one
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(one), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ord
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ord), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_uno
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(uno), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ueq
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ueq), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ugt
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ugt), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_uge
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(uge), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ult
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ult), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_ule
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(ule), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al

...
---
name:            fcmp_double_une
alignment:       16
exposesReturnsTwice: false
legalized:       true
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
noPhis:          false
isSSA:           true
noVRegs:         false
hasFakeUses:     false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: _, preferred-register: '', flags: [  ] }
  - { id: 1, class: _, preferred-register: '', flags: [  ] }
  - { id: 2, class: _, preferred-register: '', flags: [  ] }
  - { id: 3, class: _, preferred-register: '', flags: [  ] }
  - { id: 4, class: _, preferred-register: '', flags: [  ] }
  - { id: 5, class: _, preferred-register: '', flags: [  ] }
  - { id: 6, class: _, preferred-register: '', flags: [  ] }
  - { id: 7, class: _, preferred-register: '', flags: [  ] }
  - { id: 8, class: _, preferred-register: '', flags: [  ] }
  - { id: 9, class: _, preferred-register: '', flags: [  ] }
  - { id: 10, class: _, preferred-register: '', flags: [  ] }
  - { id: 11, class: _, preferred-register: '', flags: [  ] }
  - { id: 12, class: _, preferred-register: '', flags: [  ] }
  - { id: 13, class: _, preferred-register: '', flags: [  ] }
liveins:         []
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  isCalleeSavedInfoValid: false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 8, size: 8, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo:
  amxProgModel:    None
body:             |
  bb.1 (%ir-block.0):
    %3:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %2:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0, align 8)
    %1:_(s64) = G_LOAD %3(p0) :: (invariant load (s64) from %fixed-stack.0 + 8, basealign 8)
    %6:_(s8) = G_FCMP floatpred(une), %2(s64), %1
    $al = COPY %6(s8)
    RET 0, implicit $al
...
