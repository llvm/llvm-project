# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=i686-linux-gnu -run-pass=regbankselect,instruction-select %s -o - | FileCheck %s --check-prefixes GISEL-I686

---
name:            test_sincos_f32
alignment:       16
legalized:       true
fixedStack:
  - { id: 0, type: default, offset: 0, size: 4, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 4, alignment: 4,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1:
    ; GISEL-I686-LABEL: name: test_sincos_f32
    ; GISEL-I686: [[MOV32rm:%[0-9]+]]:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (invariant load (s32) from %fixed-stack.0, align 16)
    ; GISEL-I686-NEXT: [[LEA32r:%[0-9]+]]:gr32 = LEA32r %stack.0, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: [[LEA32r1:%[0-9]+]]:gr32 = LEA32r %stack.1, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: ADJCALLSTACKDOWN32 12, 0, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: [[COPY:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY]], 1, $noreg, 0, $noreg, [[MOV32rm]] :: (store (s32) into stack, align 1)
    ; GISEL-I686-NEXT: [[COPY1:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY1]], 1, $noreg, 4, $noreg, [[LEA32r]] :: (store (s32) into stack + 4, align 1)
    ; GISEL-I686-NEXT: [[COPY2:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY2]], 1, $noreg, 8, $noreg, [[LEA32r1]] :: (store (s32) into stack + 8, align 1)
    ; GISEL-I686-NEXT: CALLpcrel32 &sincosf, csr_32, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: ADJCALLSTACKUP32 12, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: [[LD_Fp32m:%[0-9]+]]:rfp32 = nofpexcept LD_Fp32m %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $fpsw, implicit $fpcw :: (load (s32) from %stack.0)
    ; GISEL-I686-NEXT: [[LD_Fp32m1:%[0-9]+]]:rfp32 = nofpexcept LD_Fp32m %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $fpsw, implicit $fpcw :: (load (s32) from %stack.1)
    ; GISEL-I686-NEXT: $fp0 = COPY [[LD_Fp32m]]
    ; GISEL-I686-NEXT: $fp1 = COPY [[LD_Fp32m1]]
    ; GISEL-I686-NEXT: RET 0, implicit $fp0, implicit $fp1
    %1:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %0:_(s32) = G_LOAD %1(p0) :: (invariant load (s32) from %fixed-stack.0, align 16)
    %4:_(p0) = G_FRAME_INDEX %stack.0
    %5:_(p0) = G_FRAME_INDEX %stack.1
    ADJCALLSTACKDOWN32 12, 0, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    %6:_(p0) = COPY $esp
    %7:_(s32) = G_CONSTANT i32 0
    %8:_(p0) = G_PTR_ADD %6, %7(s32)
    G_STORE %0(s32), %8(p0) :: (store (s32) into stack, align 1)
    %9:_(p0) = COPY $esp
    %10:_(s32) = G_CONSTANT i32 4
    %11:_(p0) = G_PTR_ADD %9, %10(s32)
    G_STORE %4(p0), %11(p0) :: (store (s32) into stack + 4, align 1)
    %12:_(p0) = COPY $esp
    %13:_(s32) = G_CONSTANT i32 8
    %14:_(p0) = G_PTR_ADD %12, %13(s32)
    G_STORE %5(p0), %14(p0) :: (store (s32) into stack + 8, align 1)
    CALLpcrel32 &sincosf, csr_32, implicit $esp, implicit $ssp
    ADJCALLSTACKUP32 12, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    %2:_(s32) = G_LOAD %4(p0) :: (load (s32) from %stack.0)
    %3:_(s32) = G_LOAD %5(p0) :: (load (s32) from %stack.1)
    $fp0 = COPY %2(s32)
    $fp1 = COPY %3(s32)
    RET 0, implicit $fp0, implicit $fp1
...
---
name:            test_sincos_f64
alignment:       16
legalized:       true
fixedStack:
  - { id: 0, type: default, offset: 0, size: 8, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 8, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1:
    ; GISEL-I686-LABEL: name: test_sincos_f64
    ; GISEL-I686: [[LEA32r:%[0-9]+]]:gr32 = LEA32r %fixed-stack.0, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: [[MOV32rm:%[0-9]+]]:gr32 = MOV32rm %fixed-stack.0, 1, $noreg, 0, $noreg :: (invariant load (s32) from %fixed-stack.0, align 16)
    ; GISEL-I686-NEXT: [[MOV32rm1:%[0-9]+]]:gr32 = MOV32rm [[LEA32r]], 1, $noreg, 4, $noreg :: (invariant load (s32) from %fixed-stack.0 + 4, basealign 16)
    ; GISEL-I686-NEXT: [[LEA32r1:%[0-9]+]]:gr32 = LEA32r %stack.0, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: [[LEA32r2:%[0-9]+]]:gr32 = LEA32r %stack.1, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: ADJCALLSTACKDOWN32 16, 0, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: [[COPY:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: [[MOV32r0_:%[0-9]+]]:gr32_nosp = MOV32r0 implicit-def dead $eflags
    ; GISEL-I686-NEXT: [[LEA32r3:%[0-9]+]]:gr32 = LEA32r [[COPY]], 1, [[MOV32r0_]], 0, $noreg
    ; GISEL-I686-NEXT: MOV32mr [[COPY]], 1, $noreg, 0, $noreg, [[MOV32rm]] :: (store (s32) into stack, align 1)
    ; GISEL-I686-NEXT: MOV32mr [[LEA32r3]], 1, $noreg, 4, $noreg, [[MOV32rm1]] :: (store (s32) into stack + 4, align 1)
    ; GISEL-I686-NEXT: [[COPY1:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY1]], 1, $noreg, 8, $noreg, [[LEA32r1]] :: (store (s32) into stack + 8, align 1)
    ; GISEL-I686-NEXT: [[COPY2:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY2]], 1, $noreg, 12, $noreg, [[LEA32r2]] :: (store (s32) into stack + 12, align 1)
    ; GISEL-I686-NEXT: CALLpcrel32 &sincos, csr_32, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: ADJCALLSTACKUP32 16, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: $fp0 = IMPLICIT_DEF
    ; GISEL-I686-NEXT: $fp1 = IMPLICIT_DEF
    ; GISEL-I686-NEXT: RET 0, implicit $fp0, implicit $fp1
    %1:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %25:_(s32) = G_LOAD %1(p0) :: (invariant load (s32) from %fixed-stack.0, align 16)
    %17:_(s32) = G_CONSTANT i32 4
    %26:_(p0) = G_PTR_ADD %1, %17(s32)
    %27:_(s32) = G_LOAD %26(p0) :: (invariant load (s32) from %fixed-stack.0 + 4, basealign 16)
    %4:_(p0) = G_FRAME_INDEX %stack.0
    %5:_(p0) = G_FRAME_INDEX %stack.1
    ADJCALLSTACKDOWN32 16, 0, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    %6:_(p0) = COPY $esp
    %7:_(s32) = G_CONSTANT i32 0
    %8:_(p0) = G_PTR_ADD %6, %7(s32)
    G_STORE %25(s32), %8(p0) :: (store (s32) into stack, align 1)
    %24:_(p0) = G_PTR_ADD %8, %17(s32)
    G_STORE %27(s32), %24(p0) :: (store (s32) into stack + 4, align 1)
    %9:_(p0) = COPY $esp
    %10:_(s32) = G_CONSTANT i32 8
    %11:_(p0) = G_PTR_ADD %9, %10(s32)
    G_STORE %4(p0), %11(p0) :: (store (s32) into stack + 8, align 1)
    %12:_(p0) = COPY $esp
    %13:_(s32) = G_CONSTANT i32 12
    %14:_(p0) = G_PTR_ADD %12, %13(s32)
    G_STORE %5(p0), %14(p0) :: (store (s32) into stack + 12, align 1)
    CALLpcrel32 &sincos, csr_32, implicit $esp, implicit $ssp
    ADJCALLSTACKUP32 16, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    $fp0 = IMPLICIT_DEF
    $fp1 = IMPLICIT_DEF
    RET 0, implicit $fp0, implicit $fp1
...
---
name:            test_sincos_f80
alignment:       16
legalized:       true
fixedStack:
  - { id: 0, type: default, offset: 0, size: 10, alignment: 16, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 10, alignment: 16,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, name: '', type: default, offset: 0, size: 10, alignment: 16,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.1:
    ; GISEL-I686-LABEL: name: test_sincos_f80
    ; GISEL-I686: [[LD_Fp80m:%[0-9]+]]:rfp80 = nofpexcept LD_Fp80m %fixed-stack.0, 1, $noreg, 0, $noreg, implicit-def dead $fpsw, implicit $fpcw :: (invariant load (s80) from %fixed-stack.0, align 16)
    ; GISEL-I686-NEXT: [[LEA32r:%[0-9]+]]:gr32 = LEA32r %stack.0, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: [[LEA32r1:%[0-9]+]]:gr32 = LEA32r %stack.1, 1, $noreg, 0, $noreg
    ; GISEL-I686-NEXT: ADJCALLSTACKDOWN32 20, 0, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: [[COPY:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: nofpexcept ST_FpP80m [[COPY]], 1, $noreg, 0, $noreg, [[LD_Fp80m]], implicit-def dead $fpsw, implicit $fpcw :: (store (s80) into stack, align 1)
    ; GISEL-I686-NEXT: [[COPY1:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY1]], 1, $noreg, 12, $noreg, [[LEA32r]] :: (store (s32) into stack + 12, align 1)
    ; GISEL-I686-NEXT: [[COPY2:%[0-9]+]]:gr32 = COPY $esp
    ; GISEL-I686-NEXT: MOV32mr [[COPY2]], 1, $noreg, 16, $noreg, [[LEA32r1]] :: (store (s32) into stack + 16, align 1)
    ; GISEL-I686-NEXT: CALLpcrel32 &sincosl, csr_32, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: ADJCALLSTACKUP32 20, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    ; GISEL-I686-NEXT: [[LD_Fp80m1:%[0-9]+]]:rfp80 = nofpexcept LD_Fp80m %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $fpsw, implicit $fpcw :: (load (s80) from %stack.0, align 16)
    ; GISEL-I686-NEXT: [[LD_Fp80m2:%[0-9]+]]:rfp80 = nofpexcept LD_Fp80m %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $fpsw, implicit $fpcw :: (load (s80) from %stack.1, align 16)
    ; GISEL-I686-NEXT: $fp0 = COPY [[LD_Fp80m1]]
    ; GISEL-I686-NEXT: $fp1 = COPY [[LD_Fp80m2]]
    ; GISEL-I686-NEXT: RET 0, implicit $fp0, implicit $fp1
    %1:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %0:_(s80) = G_LOAD %1(p0) :: (invariant load (s80) from %fixed-stack.0, align 16)
    %4:_(p0) = G_FRAME_INDEX %stack.0
    %5:_(p0) = G_FRAME_INDEX %stack.1
    ADJCALLSTACKDOWN32 20, 0, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    %6:_(p0) = COPY $esp
    %7:_(s32) = G_CONSTANT i32 0
    %8:_(p0) = G_PTR_ADD %6, %7(s32)
    G_STORE %0(s80), %8(p0) :: (store (s80) into stack, align 1)
    %9:_(p0) = COPY $esp
    %10:_(s32) = G_CONSTANT i32 12
    %11:_(p0) = G_PTR_ADD %9, %10(s32)
    G_STORE %4(p0), %11(p0) :: (store (s32) into stack + 12, align 1)
    %12:_(p0) = COPY $esp
    %13:_(s32) = G_CONSTANT i32 16
    %14:_(p0) = G_PTR_ADD %12, %13(s32)
    G_STORE %5(p0), %14(p0) :: (store (s32) into stack + 16, align 1)
    CALLpcrel32 &sincosl, csr_32, implicit $esp, implicit $ssp
    ADJCALLSTACKUP32 20, 0, implicit-def $esp, implicit-def $eflags, implicit-def $ssp, implicit $esp, implicit $ssp
    %2:_(s80) = G_LOAD %4(p0) :: (load (s80) from %stack.0, align 16)
    %3:_(s80) = G_LOAD %5(p0) :: (load (s80) from %stack.1, align 16)
    $fp0 = COPY %2(s80)
    $fp1 = COPY %3(s80)
    RET 0, implicit $fp0, implicit $fp1
...
