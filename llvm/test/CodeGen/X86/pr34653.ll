; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc %s -O0 -mtriple=x86_64-unknown-unknown -mattr=+avx512f -o - | FileCheck %s

declare fastcc <38 x double> @test()

define void @pr34653() {
; CHECK-LABEL: pr34653:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    .cfi_offset %rbp, -16
; CHECK-NEXT:    movq %rsp, %rbp
; CHECK-NEXT:    .cfi_def_cfa_register %rbp
; CHECK-NEXT:    andq $-512, %rsp # imm = 0xFE00
; CHECK-NEXT:    subq $1536, %rsp # imm = 0x600
; CHECK-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; CHECK-NEXT:    callq test
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm0
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm1
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm2
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm3
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm4
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm5
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm6
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm7
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm8
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm9
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm10
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm11
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm12
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm13
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm14
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm15
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm0
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm0
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovupd {{[0-9]+}}(%rsp), %xmm0
; CHECK-NEXT:    vmovsd {{.*#+}} xmm16 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm17 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm18 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm19 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm20 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm21 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm22 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm23 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm24 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm25 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm26 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm27 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm28 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm29 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm30 = mem[0],zero
; CHECK-NEXT:    vmovsd {{.*#+}} xmm31 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    vmovsd %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 8-byte Spill
; CHECK-NEXT:    vmovsd {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 8-byte Reload
; CHECK-NEXT:    # xmm0 = mem[0],zero
; CHECK-NEXT:    movq %rbp, %rsp
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    .cfi_def_cfa %rsp, 8
; CHECK-NEXT:    retq
entry:
  %v = call fastcc <38 x double> @test()
  %v.0 = extractelement <38 x double> %v, i32 0
  ret void
}

