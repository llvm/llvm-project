; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown | FileCheck %s

; This tests that we only look at the call site for ABI attributes, so f and f2 should codegen differently

define void @b(i8* byval(i8) %p) {
; CHECK-LABEL: b:
; CHECK:       # %bb.0:
; CHECK-NEXT:    retq
    ret void
}

define void @f(i8 %p) {
; CHECK-LABEL: f:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    movb {{[0-9]+}}(%rsp), %al
; CHECK-NEXT:    movb %al, (%rsp)
; CHECK-NEXT:    callq b@PLT
; CHECK-NEXT:    addq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
    %a = alloca i8
    ;store i8 %p, i8* %a
    call void @b(i8* byval(i8) %a)
    ret void
}

define void @f2(i8 %p) {
; CHECK-LABEL: f2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    leaq {{[0-9]+}}(%rsp), %rdi
; CHECK-NEXT:    callq b@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
    %a = alloca i8
    ;store i8 %p, i8* %a
    call void @b(i8* %a)
    ret void
}

