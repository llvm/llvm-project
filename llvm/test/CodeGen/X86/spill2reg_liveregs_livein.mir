# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc %s -o - -mtriple=x86_64-unknown-linux -enable-spill2reg -mattr=+sse4.1 --run-pass=spill2reg -simplify-mir -spill2reg-mem-instrs=0 -spill2reg-vec-instrs=99999 | FileCheck %s

# Check that spill2reg doesn't use $xmm0 and $xmm2 if they are livein.
# Instead it should use $xmm1 and $xmm3.

--- |
  @D0 = dso_local local_unnamed_addr global i32 0, align 4
  @D1 = dso_local local_unnamed_addr global i32 0, align 4
  @U0 = dso_local local_unnamed_addr global i32 0, align 4
  @U1 = dso_local local_unnamed_addr global i32 0, align 4
  define void @func() { ret void }
...
---
name: func
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    4
stack:
  - { id: 0, type: spill-slot, size: 4, alignment: 4 }
  - { id: 1, type: spill-slot, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: func
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $xmm0, $xmm2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   $eax = MOV32rm $rip, 1, $noreg, @D0, $noreg :: (dereferenceable load (s32) from @D0)
  ; CHECK-NEXT:   $xmm1 = MOVDI2PDIrr $eax
  ; CHECK-NEXT:   $eax = MOV32rm $rip, 1, $noreg, @D1, $noreg :: (dereferenceable load (s32) from @D1)
  ; CHECK-NEXT:   $xmm3 = MOVDI2PDIrr $eax
  ; CHECK-NEXT:   $eax = MOVPDI2DIrr $xmm1
  ; CHECK-NEXT:   MOV32mr $rip, 1, $noreg, @U0, $noreg, killed renamable $eax :: (store (s32) into @U0)
  ; CHECK-NEXT:   $eax = MOVPDI2DIrr $xmm3
  ; CHECK-NEXT:   MOV32mr $rip, 1, $noreg, @U1, $noreg, killed renamable $eax :: (store (s32) into @U1)
  ; CHECK-NEXT:   JMP_1 %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   liveins: $xmm0, $xmm2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   RET 0
  bb.0:
    successors: %bb.1
    liveins: $xmm0, $xmm2

    $eax = MOV32rm $rip, 1, $noreg, @D0, $noreg :: (dereferenceable load (s32) from @D0)
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.0)
    $eax = MOV32rm $rip, 1, $noreg, @D1, $noreg :: (dereferenceable load (s32) from @D1)
    MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.1)

    $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %stack.0)
    MOV32mr $rip, 1, $noreg, @U0, $noreg, killed renamable $eax :: (store (s32) into @U0)
    $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load (s32) from %stack.1)
    MOV32mr $rip, 1, $noreg, @U1, $noreg, killed renamable $eax :: (store (s32) into @U1)
    JMP_1 %bb.1

  bb.1:
    liveins: $xmm0, $xmm2
    RET 0

...
