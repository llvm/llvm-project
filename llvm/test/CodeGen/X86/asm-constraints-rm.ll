; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --filter "^\t#" --version 4
; RUN: llc -mtriple=x86_64-unknown-linux-gnu -regalloc=greedy < %s | FileCheck --check-prefix=GREEDY-X86_64 %s
; RUN: llc -mtriple=i386-unknown-linux-gnu -regalloc=greedy   < %s | FileCheck --check-prefix=GREEDY-I386 %s
; RUN: llc -mtriple=x86_64-unknown-linux-gnu -regalloc=basic  < %s | FileCheck --check-prefix=BASIC-X86_64 %s
; RUN: llc -mtriple=i386-unknown-linux-gnu -regalloc=basic    < %s | FileCheck --check-prefix=BASIC-I386 %s
; RUN: llc -mtriple=x86_64-unknown-linux-gnu -regalloc=fast   < %s | FileCheck --check-prefix=FAST-X86_64 %s
; RUN: llc -mtriple=i386-unknown-linux-gnu -regalloc=fast     < %s | FileCheck --check-prefix=FAST-I386 %s

; The Greedy register allocator should use registers when there isn't register
; pressure.

define dso_local i32 @test1(ptr nocapture noundef readonly %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test1:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'rm' input no pressure -> %eax %ecx
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test1:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'rm' input no pressure -> %ecx %edx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test1:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' input no pressure -> -{{[0-9]+}}(%rsp) -{{[0-9]+}}(%rsp)
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test1:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' input no pressure -> {{[0-9]+}}(%esp) (%esp)
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test1:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' input no pressure -> -{{[0-9]+}}(%rsp) -{{[0-9]+}}(%rsp)
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test1:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' input no pressure -> {{[0-9]+}}(%esp) (%esp)
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  %d = getelementptr inbounds i8, ptr %ptr, i64 12
  %i1 = load i32, ptr %d, align 4
  tail call void asm sideeffect "# 'rm' input no pressure -> $0 $1", "rm,rm,~{dirflag},~{fpsr},~{flags}"(i32 %i, i32 %i1) #1
  %i2 = load i32, ptr %ptr, align 4
  ret i32 %i2
}

define dso_local i32 @test2(ptr nocapture noundef readonly %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test2:
; GREEDY-X86_64:    #APP # 8-byte Folded Reload
; GREEDY-X86_64:    # 'rm' input pressure -> -{{[0-9]+}}(%rsp) -{{[0-9]+}}(%rsp)
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test2:
; GREEDY-I386:    #APP # 8-byte Folded Reload
; GREEDY-I386:    # 'rm' input pressure -> {{[0-9]+}}(%esp) (%esp)
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test2:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' input pressure -> -{{[0-9]+}}(%rsp) -{{[0-9]+}}(%rsp)
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test2:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' input pressure -> {{[0-9]+}}(%esp) (%esp)
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test2:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' input pressure -> -{{[0-9]+}}(%rsp) -{{[0-9]+}}(%rsp)
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test2:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' input pressure -> {{[0-9]+}}(%esp) {{[0-9]+}}(%esp)
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  %d = getelementptr inbounds i8, ptr %ptr, i64 12
  %i1 = load i32, ptr %d, align 4
  tail call void asm sideeffect "# 'rm' input pressure -> $0 $1", "rm,rm,~{ax},~{cx},~{dx},~{si},~{di},~{r8},~{r9},~{r10},~{r11},~{bx},~{bp},~{r14},~{r15},~{r12},~{r13},~{dirflag},~{fpsr},~{flags}"(i32 %i, i32 %i1) #1
  %i2 = load i32, ptr %ptr, align 4
  ret i32 %i2
}

define dso_local i32 @test3(ptr noundef %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test3:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'rm' output no pressure -> %eax %ecx
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test3:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'rm' output no pressure -> %ecx %edx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test3:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' output no pressure -> 4(%rdi) 12(%rdi)
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test3:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' output no pressure -> 4(%eax) 12(%eax)
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test3:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' output no pressure -> 4(%rdi) 12(%rdi)
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test3:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' output no pressure -> 4(%eax) 12(%eax)
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %d = getelementptr inbounds i8, ptr %ptr, i64 12
  tail call void asm sideeffect "# 'rm' output no pressure -> $0 $1", "=*rm,=*rm,~{dirflag},~{fpsr},~{flags}"(ptr nonnull elementtype(i32) %b, ptr nonnull elementtype(i32) %d) #1
  %i = load i32, ptr %ptr, align 4
  ret i32 %i
}

define dso_local i32 @test4(ptr noundef %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test4:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # tied 'rm' no pressure -> %eax %ecx %eax %ecx
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test4:
; GREEDY-I386:    #APP
; GREEDY-I386:    # tied 'rm' no pressure -> %ecx %edx %ecx %edx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test4:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # tied 'rm' no pressure -> %eax %ecx %eax %ecx
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test4:
; BASIC-I386:    #APP
; BASIC-I386:    # tied 'rm' no pressure -> %eax %ecx %eax %ecx
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test4:
; FAST-X86_64:    #APP
; FAST-X86_64:    # tied 'rm' no pressure -> %ecx %eax %ecx %eax
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test4:
; FAST-I386:    #APP
; FAST-I386:    # tied 'rm' no pressure -> %edx %ecx %edx %ecx
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  %d = getelementptr inbounds i8, ptr %ptr, i64 12
  %i1 = load i32, ptr %d, align 4
  tail call void asm sideeffect "# tied 'rm' no pressure -> $0 $1 $2 $3", "=*rm,=*rm,0,1,~{dirflag},~{fpsr},~{flags}"(ptr nonnull elementtype(i32) %b, ptr nonnull elementtype(i32) %d, i32 %i, i32 %i1) #1
  %i2 = load i32, ptr %ptr, align 4
  ret i32 %i2
}

define dso_local i32 @test5(ptr nocapture noundef readonly %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test5:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'rm' input -> %eax
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test5:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'rm' input -> %ecx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test5:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' input -> -{{[0-9]+}}(%rsp)
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test5:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' input -> (%esp)
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test5:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' input -> -{{[0-9]+}}(%rsp)
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test5:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' input -> (%esp)
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  tail call void asm sideeffect "# 'rm' input -> $0", "rm,~{dirflag},~{fpsr},~{flags}"(i32 %i) #1
  %i1 = load i32, ptr %ptr, align 4
  ret i32 %i1
}

define dso_local i32 @test6(ptr nocapture noundef readonly %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test6:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'rm' and 'r' input -> %eax %ecx
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test6:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'rm' and 'r' input -> %ecx %edx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test6:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' and 'r' input -> -{{[0-9]+}}(%rsp) %ecx
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test6:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' and 'r' input -> (%esp) %ecx
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test6:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' and 'r' input -> -{{[0-9]+}}(%rsp) %eax
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test6:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' and 'r' input -> (%esp) %ecx
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  %d = getelementptr inbounds i8, ptr %ptr, i64 12
  %i1 = load i32, ptr %d, align 4
  tail call void asm sideeffect "# 'rm' and 'r' input -> $0 $1", "rm,r,~{dirflag},~{fpsr},~{flags}"(i32 %i, i32 %i1) #1
  %i2 = load i32, ptr %ptr, align 4
  ret i32 %i2
}

define dso_local i32 @test7(ptr noundef %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test7:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'rm' output -> %eax
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test7:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'rm' output -> %ecx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test7:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' output -> 4(%rdi)
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test7:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' output -> 4(%eax)
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test7:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' output -> 4(%rdi)
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test7:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' output -> 4(%eax)
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  tail call void asm sideeffect "# 'rm' output -> $0", "=*rm,~{dirflag},~{fpsr},~{flags}"(ptr nonnull elementtype(i32) %b) #1
  %i = load i32, ptr %ptr, align 4
  ret i32 %i
}

define dso_local i32 @test8(ptr noundef %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test8:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'rm' tied -> %eax
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test8:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'rm' tied -> %ecx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test8:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'rm' tied -> %eax
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test8:
; BASIC-I386:    #APP
; BASIC-I386:    # 'rm' tied -> %eax
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test8:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'rm' tied -> %eax
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test8:
; FAST-I386:    #APP
; FAST-I386:    # 'rm' tied -> %ecx
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  tail call void asm sideeffect "# 'rm' tied -> $0", "=*rm,0,~{dirflag},~{fpsr},~{flags}"(ptr nonnull elementtype(i32) %b, i32 %i) #1
  %i1 = load i32, ptr %ptr, align 4
  ret i32 %i1
}

define dso_local i32 @test9(ptr nocapture noundef %ptr) local_unnamed_addr #0 {
; GREEDY-X86_64-LABEL: test9:
; GREEDY-X86_64:    #APP
; GREEDY-X86_64:    # 'r' output == input location -> %eax
; GREEDY-X86_64:    #NO_APP
;
; GREEDY-I386-LABEL: test9:
; GREEDY-I386:    #APP
; GREEDY-I386:    # 'r' output == input location -> %ecx
; GREEDY-I386:    #NO_APP
;
; BASIC-X86_64-LABEL: test9:
; BASIC-X86_64:    #APP
; BASIC-X86_64:    # 'r' output == input location -> %eax
; BASIC-X86_64:    #NO_APP
;
; BASIC-I386-LABEL: test9:
; BASIC-I386:    #APP
; BASIC-I386:    # 'r' output == input location -> %eax
; BASIC-I386:    #NO_APP
;
; FAST-X86_64-LABEL: test9:
; FAST-X86_64:    #APP
; FAST-X86_64:    # 'r' output == input location -> %eax
; FAST-X86_64:    #NO_APP
;
; FAST-I386-LABEL: test9:
; FAST-I386:    #APP
; FAST-I386:    # 'r' output == input location -> %ecx
; FAST-I386:    #NO_APP
entry:
  %b = getelementptr inbounds i8, ptr %ptr, i64 4
  %i = load i32, ptr %b, align 4
  %i1 = tail call i32 asm sideeffect "# 'r' output == input location -> $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %i) #1
  store i32 %i1, ptr %b, align 4
  %i2 = load i32, ptr %ptr, align 4
  ret i32 %i2
}

attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
