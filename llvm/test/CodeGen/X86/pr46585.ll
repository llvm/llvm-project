; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-apple-macosx | FileCheck %s

@global = external local_unnamed_addr global i8
@global.1 = external local_unnamed_addr global i64

define void @spam() local_unnamed_addr {
; CHECK-LABEL: spam:
; CHECK:       ## %bb.0: ## %bb
; CHECK-NEXT:    movq _global@GOTPCREL(%rip), %rax
; CHECK-NEXT:    movzbl (%rax), %eax
; CHECK-NEXT:    andb $1, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    movd %eax, %xmm0
; CHECK-NEXT:    pxor %xmm1, %xmm1
; CHECK-NEXT:    pxor %xmm2, %xmm2
; CHECK-NEXT:    pcmpgtb %xmm0, %xmm2
; CHECK-NEXT:    punpcklbw {{.*#+}} xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1],xmm2[2],xmm1[2],xmm2[3],xmm1[3],xmm2[4],xmm1[4],xmm2[5],xmm1[5],xmm2[6],xmm1[6],xmm2[7],xmm1[7]
; CHECK-NEXT:    punpcklwd {{.*#+}} xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1],xmm2[2],xmm1[2],xmm2[3],xmm1[3]
; CHECK-NEXT:    punpckldq {{.*#+}} xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; CHECK-NEXT:    pmovmskb %xmm2, %eax
; CHECK-NEXT:    testb %al, %al
; CHECK-NEXT:    je LBB0_2
; CHECK-NEXT:  ## %bb.1: ## %bb9
; CHECK-NEXT:    movq _global.1@GOTPCREL(%rip), %rax
; CHECK-NEXT:    movq $1, (%rax)
; CHECK-NEXT:  LBB0_2: ## %bb8
; CHECK-NEXT:    retq
bb:
  %tmp = load i8, ptr @global, align 1
  %tmp1 = and i8 %tmp, 1
  %tmp2 = insertelement <8 x i8> undef, i8 %tmp1, i32 0
  %tmp3 = ashr <8 x i8> %tmp2, <i8 7, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0>
  %tmp4 = shufflevector <8 x i8> %tmp3, <8 x i8> undef, <8 x i32> zeroinitializer
  %tmp5 = icmp slt <8 x i8> %tmp4, zeroinitializer
  %tmp6 = bitcast <8 x i1> %tmp5 to i8
  %tmp7 = icmp eq i8 %tmp6, 0
  br i1 %tmp7, label %bb8, label %bb9

bb8:                                              ; preds = %bb9, %bb
  ret void

bb9:                                              ; preds = %bb
  store i64 1, ptr @global.1, align 8
  br label %bb8
}
