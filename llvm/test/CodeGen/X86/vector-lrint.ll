; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=i686-unknown -mattr=sse2 | FileCheck %s --check-prefix=X86-SSE2
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=i686-unknown -mattr=avx | FileCheck %s --check-prefix=X86-AVX
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=i686-unknown -mattr=avx512f | FileCheck %s --check-prefix=X86-AVX
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=x86_64-unknown | FileCheck %s --check-prefix=X64-SSE
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=x86_64-unknown -mattr=avx | FileCheck %s --check-prefix=X64-AVX
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=x86_64-unknown -mattr=avx512f | FileCheck %s --check-prefix=X64-AVX
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=x86_64-unknown | FileCheck %s --check-prefix=X64-SSE
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=x86_64-unknown -mattr=avx | FileCheck %s --check-prefix=X64-AVX
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=x86_64-unknown -mattr=avx512f | FileCheck %s --check-prefix=X64-AVX

define <1 x iXLen> @lrint_v1f32(<1 x float> %x) {
; X86-SSE2-LABEL: lrint_v1f32:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    cvtss2si {{[0-9]+}}(%esp), %eax
; X86-SSE2-NEXT:    retl
;
; X86-AVX-LABEL: lrint_v1f32:
; X86-AVX:       # %bb.0:
; X86-AVX-NEXT:    vcvtss2si {{[0-9]+}}(%esp), %eax
; X86-AVX-NEXT:    retl
  %a = call <1 x iXLen> @llvm.lrint.v1iXLen.v1f32(<1 x float> %x)
  ret <1 x iXLen> %a
}
declare <1 x iXLen> @llvm.lrint.v1iXLen.v1f32(<1 x float>)

define <2 x iXLen> @lrint_v2f32(<2 x float> %x) {
; X86-SSE2-LABEL: lrint_v2f32:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    movaps %xmm0, %xmm1
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm1 = xmm1[3,3],xmm0[3,3]
; X86-SSE2-NEXT:    cvtss2si %xmm1, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm1
; X86-SSE2-NEXT:    movaps %xmm0, %xmm2
; X86-SSE2-NEXT:    unpckhpd {{.*#+}} xmm2 = xmm2[1],xmm0[1]
; X86-SSE2-NEXT:    cvtss2si %xmm2, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm2
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; X86-SSE2-NEXT:    cvtss2si %xmm0, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm1
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm0 = xmm0[1,1,1,1]
; X86-SSE2-NEXT:    cvtss2si %xmm0, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm0
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; X86-SSE2-NEXT:    punpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; X86-SSE2-NEXT:    movdqa %xmm1, %xmm0
; X86-SSE2-NEXT:    retl
;
; X86-AVX-LABEL: lrint_v2f32:
; X86-AVX:       # %bb.0:
; X86-AVX-NEXT:    vmovshdup {{.*#+}} xmm1 = xmm0[1,1,3,3]
; X86-AVX-NEXT:    vcvtss2si %xmm1, %eax
; X86-AVX-NEXT:    vcvtss2si %xmm0, %ecx
; X86-AVX-NEXT:    vmovd %ecx, %xmm1
; X86-AVX-NEXT:    vpinsrd $1, %eax, %xmm1, %xmm1
; X86-AVX-NEXT:    vshufpd {{.*#+}} xmm2 = xmm0[1,0]
; X86-AVX-NEXT:    vcvtss2si %xmm2, %eax
; X86-AVX-NEXT:    vpinsrd $2, %eax, %xmm1, %xmm1
; X86-AVX-NEXT:    vshufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; X86-AVX-NEXT:    vcvtss2si %xmm0, %eax
; X86-AVX-NEXT:    vpinsrd $3, %eax, %xmm1, %xmm0
; X86-AVX-NEXT:    retl
  %a = call <2 x iXLen> @llvm.lrint.v2iXLen.v2f32(<2 x float> %x)
  ret <2 x iXLen> %a
}
declare <2 x iXLen> @llvm.lrint.v2iXLen.v2f32(<2 x float>)

define <4 x iXLen> @lrint_v4f32(<4 x float> %x) {
; X86-SSE2-LABEL: lrint_v4f32:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    movaps %xmm0, %xmm1
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm1 = xmm1[3,3],xmm0[3,3]
; X86-SSE2-NEXT:    cvtss2si %xmm1, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm1
; X86-SSE2-NEXT:    movaps %xmm0, %xmm2
; X86-SSE2-NEXT:    unpckhpd {{.*#+}} xmm2 = xmm2[1],xmm0[1]
; X86-SSE2-NEXT:    cvtss2si %xmm2, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm2
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; X86-SSE2-NEXT:    cvtss2si %xmm0, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm1
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm0 = xmm0[1,1,1,1]
; X86-SSE2-NEXT:    cvtss2si %xmm0, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm0
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; X86-SSE2-NEXT:    punpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; X86-SSE2-NEXT:    movdqa %xmm1, %xmm0
; X86-SSE2-NEXT:    retl
;
; X86-AVX-LABEL: lrint_v4f32:
; X86-AVX:       # %bb.0:
; X86-AVX-NEXT:    vmovshdup {{.*#+}} xmm1 = xmm0[1,1,3,3]
; X86-AVX-NEXT:    vcvtss2si %xmm1, %eax
; X86-AVX-NEXT:    vcvtss2si %xmm0, %ecx
; X86-AVX-NEXT:    vmovd %ecx, %xmm1
; X86-AVX-NEXT:    vpinsrd $1, %eax, %xmm1, %xmm1
; X86-AVX-NEXT:    vshufpd {{.*#+}} xmm2 = xmm0[1,0]
; X86-AVX-NEXT:    vcvtss2si %xmm2, %eax
; X86-AVX-NEXT:    vpinsrd $2, %eax, %xmm1, %xmm1
; X86-AVX-NEXT:    vshufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; X86-AVX-NEXT:    vcvtss2si %xmm0, %eax
; X86-AVX-NEXT:    vpinsrd $3, %eax, %xmm1, %xmm0
; X86-AVX-NEXT:    retl
  %a = call <4 x iXLen> @llvm.lrint.v4iXLen.v4f32(<4 x float> %x)
  ret <4 x iXLen> %a
}
declare <4 x iXLen> @llvm.lrint.v4iXLen.v4f32(<4 x float>)

define <8 x iXLen> @lrint_v8f32(<8 x float> %x) {
; X86-SSE2-LABEL: lrint_v8f32:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    movaps %xmm0, %xmm2
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm0 = xmm0[3,3,3,3]
; X86-SSE2-NEXT:    cvtss2si %xmm0, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm0
; X86-SSE2-NEXT:    movaps %xmm2, %xmm3
; X86-SSE2-NEXT:    unpckhpd {{.*#+}} xmm3 = xmm3[1],xmm2[1]
; X86-SSE2-NEXT:    cvtss2si %xmm3, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm3
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm3 = xmm3[0],xmm0[0],xmm3[1],xmm0[1]
; X86-SSE2-NEXT:    cvtss2si %xmm2, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm0
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm2 = xmm2[1,1,1,1]
; X86-SSE2-NEXT:    cvtss2si %xmm2, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm2
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm0 = xmm0[0],xmm2[0],xmm0[1],xmm2[1]
; X86-SSE2-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm3[0]
; X86-SSE2-NEXT:    movaps %xmm1, %xmm2
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm2 = xmm2[3,3],xmm1[3,3]
; X86-SSE2-NEXT:    cvtss2si %xmm2, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm2
; X86-SSE2-NEXT:    movaps %xmm1, %xmm3
; X86-SSE2-NEXT:    unpckhpd {{.*#+}} xmm3 = xmm3[1],xmm1[1]
; X86-SSE2-NEXT:    cvtss2si %xmm3, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm3
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm3 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
; X86-SSE2-NEXT:    cvtss2si %xmm1, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm2
; X86-SSE2-NEXT:    shufps {{.*#+}} xmm1 = xmm1[1,1,1,1]
; X86-SSE2-NEXT:    cvtss2si %xmm1, %eax
; X86-SSE2-NEXT:    movd %eax, %xmm1
; X86-SSE2-NEXT:    punpckldq {{.*#+}} xmm2 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; X86-SSE2-NEXT:    punpcklqdq {{.*#+}} xmm2 = xmm2[0],xmm3[0]
; X86-SSE2-NEXT:    movdqa %xmm2, %xmm1
; X86-SSE2-NEXT:    retl
  %a = call <8 x iXLen> @llvm.lrint.v8iXLen.v8f32(<8 x float> %x)
  ret <8 x iXLen> %a
}
declare <8 x iXLen> @llvm.lrint.v8iXLen.v8f32(<8 x float>)

define <16 x iXLen> @lrint_v16iXLen_v16f32(<16 x float> %x) {
  %a = call <16 x iXLen> @llvm.lrint.v16iXLen.v16f32(<16 x float> %x)
  ret <16 x iXLen> %a
}
declare <16 x iXLen> @llvm.lrint.v16iXLen.v16f32(<16 x float>)

define <1 x i64> @lrint_v1f64(<1 x double> %x) {
; X86-SSE2-LABEL: lrint_v1f64:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    pushl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_offset 8
; X86-SSE2-NEXT:    .cfi_offset %ebp, -8
; X86-SSE2-NEXT:    movl %esp, %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_register %ebp
; X86-SSE2-NEXT:    andl $-8, %esp
; X86-SSE2-NEXT:    subl $8, %esp
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-SSE2-NEXT:    movsd %xmm0, (%esp)
; X86-SSE2-NEXT:    fldl (%esp)
; X86-SSE2-NEXT:    fistpll (%esp)
; X86-SSE2-NEXT:    movq {{.*#+}} xmm0 = mem[0],zero
; X86-SSE2-NEXT:    movd %xmm0, %eax
; X86-SSE2-NEXT:    pshufd {{.*#+}} xmm0 = xmm0[1,1,1,1]
; X86-SSE2-NEXT:    movd %xmm0, %edx
; X86-SSE2-NEXT:    movl %ebp, %esp
; X86-SSE2-NEXT:    popl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa %esp, 4
; X86-SSE2-NEXT:    retl
;
; X86-AVX-LABEL: lrint_v1f64:
; X86-AVX:       # %bb.0:
; X86-AVX-NEXT:    pushl %ebp
; X86-AVX-NEXT:    .cfi_def_cfa_offset 8
; X86-AVX-NEXT:    .cfi_offset %ebp, -8
; X86-AVX-NEXT:    movl %esp, %ebp
; X86-AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86-AVX-NEXT:    andl $-8, %esp
; X86-AVX-NEXT:    subl $8, %esp
; X86-AVX-NEXT:    vmovsd {{.*#+}} xmm0 = mem[0],zero
; X86-AVX-NEXT:    vmovsd %xmm0, (%esp)
; X86-AVX-NEXT:    fldl (%esp)
; X86-AVX-NEXT:    fistpll (%esp)
; X86-AVX-NEXT:    vmovq {{.*#+}} xmm0 = mem[0],zero
; X86-AVX-NEXT:    vmovd %xmm0, %eax
; X86-AVX-NEXT:    vpextrd $1, %xmm0, %edx
; X86-AVX-NEXT:    movl %ebp, %esp
; X86-AVX-NEXT:    popl %ebp
; X86-AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86-AVX-NEXT:    retl
;
; X64-SSE-LABEL: lrint_v1f64:
; X64-SSE:       # %bb.0:
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    retq
;
; X64-AVX-LABEL: lrint_v1f64:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vcvtsd2si %xmm0, %rax
; X64-AVX-NEXT:    retq
  %a = call <1 x i64> @llvm.lrint.v1i64.v1f64(<1 x double> %x)
  ret <1 x i64> %a
}
declare <1 x i64> @llvm.lrint.v1i64.v1f64(<1 x double>)

define <2 x i64> @lrint_v2f64(<2 x double> %x) {
; X86-SSE2-LABEL: lrint_v2f64:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    pushl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_offset 8
; X86-SSE2-NEXT:    .cfi_offset %ebp, -8
; X86-SSE2-NEXT:    movl %esp, %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_register %ebp
; X86-SSE2-NEXT:    andl $-8, %esp
; X86-SSE2-NEXT:    subl $16, %esp
; X86-SSE2-NEXT:    movhps %xmm0, (%esp)
; X86-SSE2-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl (%esp)
; X86-SSE2-NEXT:    fistpll (%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; X86-SSE2-NEXT:    movl %ebp, %esp
; X86-SSE2-NEXT:    popl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa %esp, 4
; X86-SSE2-NEXT:    retl
;
; X86-AVX-LABEL: lrint_v2f64:
; X86-AVX:       # %bb.0:
; X86-AVX-NEXT:    pushl %ebp
; X86-AVX-NEXT:    .cfi_def_cfa_offset 8
; X86-AVX-NEXT:    .cfi_offset %ebp, -8
; X86-AVX-NEXT:    movl %esp, %ebp
; X86-AVX-NEXT:    .cfi_def_cfa_register %ebp
; X86-AVX-NEXT:    andl $-8, %esp
; X86-AVX-NEXT:    subl $16, %esp
; X86-AVX-NEXT:    vmovlps %xmm0, {{[0-9]+}}(%esp)
; X86-AVX-NEXT:    vmovhps %xmm0, (%esp)
; X86-AVX-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-AVX-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-AVX-NEXT:    fldl (%esp)
; X86-AVX-NEXT:    fistpll (%esp)
; X86-AVX-NEXT:    vmovd {{.*#+}} xmm0 = mem[0],zero,zero,zero
; X86-AVX-NEXT:    vpinsrd $1, {{[0-9]+}}(%esp), %xmm0, %xmm0
; X86-AVX-NEXT:    vpinsrd $2, (%esp), %xmm0, %xmm0
; X86-AVX-NEXT:    vpinsrd $3, {{[0-9]+}}(%esp), %xmm0, %xmm0
; X86-AVX-NEXT:    movl %ebp, %esp
; X86-AVX-NEXT:    popl %ebp
; X86-AVX-NEXT:    .cfi_def_cfa %esp, 4
; X86-AVX-NEXT:    retl
;
; X64-SSE-LABEL: lrint_v2f64:
; X64-SSE:       # %bb.0:
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    movq %rax, %xmm1
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm0 = xmm0[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm1 = xmm1[0],xmm0[0]
; X64-SSE-NEXT:    movdqa %xmm1, %xmm0
; X64-SSE-NEXT:    retq
;
; X64-AVX-LABEL: lrint_v2f64:
; X64-AVX:       # %bb.0:
; X64-AVX-NEXT:    vcvtsd2si %xmm0, %rax
; X64-AVX-NEXT:    vmovq %rax, %xmm1
; X64-AVX-NEXT:    vshufpd {{.*#+}} xmm0 = xmm0[1,0]
; X64-AVX-NEXT:    vcvtsd2si %xmm0, %rax
; X64-AVX-NEXT:    vmovq %rax, %xmm0
; X64-AVX-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm1[0],xmm0[0]
; X64-AVX-NEXT:    retq
  %a = call <2 x i64> @llvm.lrint.v2i64.v2f64(<2 x double> %x)
  ret <2 x i64> %a
}
declare <2 x i64> @llvm.lrint.v2i64.v2f64(<2 x double>)

define <4 x i64> @lrint_v4f64(<4 x double> %x) {
; X86-SSE2-LABEL: lrint_v4f64:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    pushl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_offset 8
; X86-SSE2-NEXT:    .cfi_offset %ebp, -8
; X86-SSE2-NEXT:    movl %esp, %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_register %ebp
; X86-SSE2-NEXT:    andl $-8, %esp
; X86-SSE2-NEXT:    subl $32, %esp
; X86-SSE2-NEXT:    movhps %xmm0, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movhps %xmm1, (%esp)
; X86-SSE2-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl (%esp)
; X86-SSE2-NEXT:    fistpll (%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; X86-SSE2-NEXT:    movl %ebp, %esp
; X86-SSE2-NEXT:    popl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa %esp, 4
; X86-SSE2-NEXT:    retl
;
; X64-SSE-LABEL: lrint_v4f64:
; X64-SSE:       # %bb.0:
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    movq %rax, %xmm2
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm0 = xmm0[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm2 = xmm2[0],xmm0[0]
; X64-SSE-NEXT:    cvtsd2si %xmm1, %rax
; X64-SSE-NEXT:    movq %rax, %xmm3
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm1, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm3 = xmm3[0],xmm0[0]
; X64-SSE-NEXT:    movdqa %xmm2, %xmm0
; X64-SSE-NEXT:    movdqa %xmm3, %xmm1
; X64-SSE-NEXT:    retq
  %a = call <4 x i64> @llvm.lrint.v4i64.v4f64(<4 x double> %x)
  ret <4 x i64> %a
}
declare <4 x i64> @llvm.lrint.v4i64.v4f64(<4 x double>)

define <8 x i64> @lrint_v8f64(<8 x double> %x) {
; X86-SSE2-LABEL: lrint_v8f64:
; X86-SSE2:       # %bb.0:
; X86-SSE2-NEXT:    pushl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_offset 8
; X86-SSE2-NEXT:    .cfi_offset %ebp, -8
; X86-SSE2-NEXT:    movl %esp, %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa_register %ebp
; X86-SSE2-NEXT:    andl $-16, %esp
; X86-SSE2-NEXT:    subl $80, %esp
; X86-SSE2-NEXT:    movaps 8(%ebp), %xmm3
; X86-SSE2-NEXT:    movhps %xmm0, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movhps %xmm1, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movhps %xmm2, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movlps %xmm2, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movhps %xmm3, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movlps %xmm3, {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    fistpll {{[0-9]+}}(%esp)
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm1 = xmm1[0],xmm2[0]
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm3 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm2 = xmm2[0],xmm3[0]
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm4 = mem[0],zero
; X86-SSE2-NEXT:    movsd {{.*#+}} xmm3 = mem[0],zero
; X86-SSE2-NEXT:    movlhps {{.*#+}} xmm3 = xmm3[0],xmm4[0]
; X86-SSE2-NEXT:    movl %ebp, %esp
; X86-SSE2-NEXT:    popl %ebp
; X86-SSE2-NEXT:    .cfi_def_cfa %esp, 4
; X86-SSE2-NEXT:    retl
;
; X64-SSE-LABEL: lrint_v8f64:
; X64-SSE:       # %bb.0:
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    movq %rax, %xmm4
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm0 = xmm0[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm0, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm4 = xmm4[0],xmm0[0]
; X64-SSE-NEXT:    cvtsd2si %xmm1, %rax
; X64-SSE-NEXT:    movq %rax, %xmm5
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm1, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm5 = xmm5[0],xmm0[0]
; X64-SSE-NEXT:    cvtsd2si %xmm2, %rax
; X64-SSE-NEXT:    movq %rax, %xmm6
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm2 = xmm2[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm2, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm6 = xmm6[0],xmm0[0]
; X64-SSE-NEXT:    cvtsd2si %xmm3, %rax
; X64-SSE-NEXT:    movq %rax, %xmm7
; X64-SSE-NEXT:    unpckhpd {{.*#+}} xmm3 = xmm3[1,1]
; X64-SSE-NEXT:    cvtsd2si %xmm3, %rax
; X64-SSE-NEXT:    movq %rax, %xmm0
; X64-SSE-NEXT:    punpcklqdq {{.*#+}} xmm7 = xmm7[0],xmm0[0]
; X64-SSE-NEXT:    movdqa %xmm4, %xmm0
; X64-SSE-NEXT:    movdqa %xmm5, %xmm1
; X64-SSE-NEXT:    movdqa %xmm6, %xmm2
; X64-SSE-NEXT:    movdqa %xmm7, %xmm3
; X64-SSE-NEXT:    retq
  %a = call <8 x i64> @llvm.lrint.v8i64.v8f64(<8 x double> %x)
  ret <8 x i64> %a
}
declare <8 x i64> @llvm.lrint.v8i64.v8f64(<8 x double>)
