; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -O2 -mtriple=x86_64-linux-android \
; RUN:     -enable-legalize-types-checking | FileCheck %s --check-prefix=ANDROID
; RUN: llc < %s -O2 -mtriple=x86_64-linux-gnu \
; RUN:     -enable-legalize-types-checking | FileCheck %s --check-prefix=GNU
; RUN: llc < %s -O2 -mtriple=i686-linux-gnu -mattr=sse2 \
; RUN:     -enable-legalize-types-checking | FileCheck %s --check-prefix=X86

; Check all soft floating point library function calls.


define ppc_fp128 @use_acosppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_acosppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq acosl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_acosppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq acosl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_acosppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll acosl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.acos.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_asinppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_asinppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq asinl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_asinppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq asinl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_asinppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll asinl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.asin.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_atanppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_atanppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq atanl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_atanppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq atanl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_atanppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll atanl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.atan.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_atan2ppc_fp128(ppc_fp128 %a, ppc_fp128 %b) nounwind {
; ANDROID-LABEL: use_atan2ppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq atan2l@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_atan2ppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq atan2l@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_atan2ppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $108, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm3 = mem[0],zero
; X86-NEXT:    movsd %xmm3, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm3 = mem[0],zero
; X86-NEXT:    movlps %xmm3, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm2, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm2 = mem[0],zero
; X86-NEXT:    movlps %xmm2, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll atan2l
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $108, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.atan2.ppcf128(ppc_fp128 %a, ppc_fp128 %b)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_coshppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_coshppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq coshl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_coshppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq coshl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_coshppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll coshl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.cosh.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_sinhppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_sinhppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq sinhl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_sinhppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq sinhl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_sinhppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll sinhl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.sinh.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_tanppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_tanppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq tanl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_tanppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq tanl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_tanppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll tanl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.tan.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

define ppc_fp128 @use_tanhppc_fp128(ppc_fp128 %a) nounwind {
; ANDROID-LABEL: use_tanhppc_fp128:
; ANDROID:       # %bb.0:
; ANDROID-NEXT:    pushq %rax
; ANDROID-NEXT:    callq tanhl@PLT
; ANDROID-NEXT:    popq %rax
; ANDROID-NEXT:    retq
;
; GNU-LABEL: use_tanhppc_fp128:
; GNU:       # %bb.0:
; GNU-NEXT:    pushq %rax
; GNU-NEXT:    callq tanhl@PLT
; GNU-NEXT:    popq %rax
; GNU-NEXT:    retq
;
; X86-LABEL: use_tanhppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $76, %esp
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movsd %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm1 = mem[0],zero
; X86-NEXT:    movlps %xmm1, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, (%esp)
; X86-NEXT:    calll tanhl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; X86-NEXT:    movlps %xmm0, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $76, %esp
; X86-NEXT:    retl
  %x = call ppc_fp128 @llvm.tanh.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}
