; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s --mtriple=x86_64 | FileCheck %s

define <1 x float> @load_atomic_vector1_float(ptr %src) {
; CHECK-LABEL: load_atomic_vector1_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movss {{.*#+}} xmm0 = mem[0],zero,zero,zero
; CHECK-NEXT:    retq
  %ret = load atomic <1 x float>, ptr %src acquire, align 4
  ret <1 x float> %ret
}

define <2 x float> @load_atomic_vector2_float(ptr %src) {
; CHECK-LABEL: load_atomic_vector2_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    movq %rdi, %rsi
; CHECK-NEXT:    movq %rsp, %rdx
; CHECK-NEXT:    movl $8, %edi
; CHECK-NEXT:    movl $2, %ecx
; CHECK-NEXT:    callq __atomic_load@PLT
; CHECK-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %ret = load atomic <2 x float>, ptr %src acquire, align 4
  ret <2 x float> %ret
}

define <1 x double> @load_atomic_vector1_double(ptr %src) {
; CHECK-LABEL: load_atomic_vector1_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    movq %rdi, %rsi
; CHECK-NEXT:    movq %rsp, %rdx
; CHECK-NEXT:    movl $8, %edi
; CHECK-NEXT:    movl $2, %ecx
; CHECK-NEXT:    callq __atomic_load@PLT
; CHECK-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %ret = load atomic <1 x double>, ptr %src acquire, align 4
  ret <1 x double> %ret
}

define <2 x double> @load_atomic_vector2_double(ptr %src) {
; CHECK-LABEL: load_atomic_vector2_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    movq %rdi, %rsi
; CHECK-NEXT:    movq %rsp, %rdx
; CHECK-NEXT:    movl $16, %edi
; CHECK-NEXT:    movl $2, %ecx
; CHECK-NEXT:    callq __atomic_load@PLT
; CHECK-NEXT:    movaps (%rsp), %xmm0
; CHECK-NEXT:    addq $24, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %ret = load atomic <2 x double>, ptr %src acquire, align 4
  ret <2 x double> %ret
}

define <2 x half> @load_atomic_vector_half(ptr %src) {
; CHECK-LABEL: load_atomic_vector_half:
; CHECK:       # %bb.0:
; CHECK-NEXT:    movl (%rdi), %eax
; CHECK-NEXT:    movd %eax, %xmm0
; CHECK-NEXT:    retq
  %ret = load atomic <2 x half>, ptr %src acquire, align 4
  ret <2 x half> %ret
}

define <2 x float> @load_atomic_vector_bfloat(ptr %src) {
; CHECK-LABEL: load_atomic_vector_bfloat:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    movq %rdi, %rsi
; CHECK-NEXT:    movq %rsp, %rdx
; CHECK-NEXT:    movl $8, %edi
; CHECK-NEXT:    movl $2, %ecx
; CHECK-NEXT:    callq __atomic_load@PLT
; CHECK-NEXT:    movsd {{.*#+}} xmm0 = mem[0],zero
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %ret = load atomic <2 x float>, ptr %src acquire, align 4
  ret <2 x float> %ret
}

define <2 x fp128> @load_atomic_vector_fp128(ptr %src) {
; CHECK-LABEL: load_atomic_vector_fp128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $40, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    movq %rdi, %rsi
; CHECK-NEXT:    movq %rsp, %rdx
; CHECK-NEXT:    movl $32, %edi
; CHECK-NEXT:    movl $2, %ecx
; CHECK-NEXT:    callq __atomic_load@PLT
; CHECK-NEXT:    movaps (%rsp), %xmm0
; CHECK-NEXT:    movaps {{[0-9]+}}(%rsp), %xmm1
; CHECK-NEXT:    addq $40, %rsp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
  %ret = load atomic <2 x fp128>, ptr %src acquire, align 4
  ret <2 x fp128> %ret
}
