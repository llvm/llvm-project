# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 4
# RUN: llc -mtriple=x86_64-pc-linux-gnu -run-pass=register-coalescer -verify-coalescing -o - %s | FileCheck %s

# Check for "Live range continues after dead def flag".

# There are 2 copies of undef, but the registers also appear to be
# live due to block live outs, and thus were not deleted as
# eliminateUndefCopy only considered the live range, and not the undef
# flag.
#
# removePartialRedundancy would move the COPY undef %0 in bb.1 to
# bb.0.  The live range of %1 would then be extended to be live out of
# %bb.1 for the backedge phi. This would then fail the verifier, since
# the dead flag was no longer valid. This was fixed by directly
# considering the undef flag to avoid considering this special case.

---
name: partial_redundancy_coalesce_undef_copy_live_out
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: partial_redundancy_coalesce_undef_copy_live_out
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $rdi
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gr32 = COPY $rdi
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   dead [[XOR32ri:%[0-9]+]]:gr32 = XOR32ri undef [[XOR32ri]], 1, implicit-def dead $eflags
  ; CHECK-NEXT:   dead [[MOV32rr:%[0-9]+]]:gr32 = MOV32rr [[COPY]]
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gr32 = IMPLICIT_DEF
  ; CHECK-NEXT:   JMP_1 %bb.1
  bb.0:
    liveins: $rdi

    %0:gr32 = COPY $rdi

  bb.1:
    %1:gr32 = COPY undef %0
    dead %1:gr32 = XOR32ri %1, 1, implicit-def dead $eflags
    dead %2:gr32 = MOV32rr killed %0
    %0:gr32 = COPY killed undef %1
    JMP_1 %bb.1

...
