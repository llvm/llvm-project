# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc %s -o - -mtriple=x86_64-unknown-linux -enable-spill2reg -mattr=+sse4.1 --run-pass=spill2reg -simplify-mir -spill2reg-mem-instrs=0 -spill2reg-vec-instrs=99999 | FileCheck %s

# Check that the traversal works correctly when an MBB (like BB0) contains
# a reload (reload1), but it is also an intermediate block in the path from
# another reload (reload2) to a spill (spill1).
# In the following example we need to make sure that we don't skip the
# instructions of BB1 under reload1 during the bottom-up traversal from
# reload2 to the spill.

# BB0:
#   [stack.0] = ... ; spill
# BB1:
#   ... = [stack.0] ; reload1
#   call            ; clobbers xmm regs
# BB2:
#   ... = [stack.0] ; reload2

--- |
  @D0 = dso_local local_unnamed_addr global i32 0, align 4
  @U0 = dso_local local_unnamed_addr global i32 0, align 4
  declare void @foo()
  define void @func() { ret void }
...
---
name: func
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
frameInfo:
  maxAlignment:    4
stack:
  - { id: 0, type: spill-slot, size: 4, alignment: 4 }
machineFunctionInfo: {}
body:             |
  ; CHECK-LABEL: name: func
  ; CHECK: bb.0:
  ; CHECK-NEXT:   $eax = MOV32rm $rip, 1, $noreg, @D0, $noreg :: (dereferenceable load (s32) from @D0)
  ; CHECK-NEXT:   MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.0)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   MOV32mr $rip, 1, $noreg, @U0, $noreg, killed renamable $eax :: (store (s32) into @U0)
  ; CHECK-NEXT:   CALL64pcrel32 @foo, csr_64, implicit $rsp, implicit-def $rsp
  ; CHECK-NEXT:   JMP_1 %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %stack.0)
  ; CHECK-NEXT:   MOV32mr $rip, 1, $noreg, @U0, $noreg, killed renamable $eax :: (store (s32) into @U0)
  ; CHECK-NEXT:   RET 0



  bb.0:
    successors: %bb.1
    $eax = MOV32rm $rip, 1, $noreg, @D0, $noreg :: (dereferenceable load (s32) from @D0)
    ; spill
    MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %stack.0)

  bb.1:
    successors: %bb.2
    ; reload1
    $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %stack.0)
    MOV32mr $rip, 1, $noreg, @U0, $noreg, killed renamable $eax :: (store (s32) into @U0)

    ; The call clobbers all xmm regs
    CALL64pcrel32 @foo, csr_64, implicit $rsp, implicit-def $rsp
    JMP_1 %bb.2

  bb.2:
    ; reload2
    $eax = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (load (s32) from %stack.0)
    MOV32mr $rip, 1, $noreg, @U0, $noreg, killed renamable $eax :: (store (s32) into @U0)
    RET 0
...
