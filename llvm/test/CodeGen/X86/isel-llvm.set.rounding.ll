; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-- -mattr=-sse | FileCheck %s --check-prefixes=X86-NOSSE,SDAG-X86-NOSSE
; RUN: llc < %s -mtriple=i686-- -fast-isel -fast-isel-abort=1 -mattr=-sse | FileCheck %s --check-prefixes=X86-NOSSE,FASTISEL-X86-NOSSE
; RUN: llc < %s -mtriple=i686-- -global-isel -global-isel-abort=1 -mattr=-sse | FileCheck %s --check-prefixes=GISEL-X86-NOSSE
; RUN: llc < %s -mtriple=x86_64-- -mattr=-sse | FileCheck %s --check-prefixes=X64-NOSSE,SDAG-X64-NOSSE
; RUN: llc < %s -mtriple=x86_64-- -fast-isel -fast-isel-abort=1 -mattr=-sse | FileCheck %s --check-prefixes=X64-NOSSE,FASTISEL-X64-NOSSE
; RUN: llc < %s -mtriple=x86_64-- -global-isel -global-isel-abort=1 -mattr=-sse | FileCheck %s --check-prefixes=GISEL-X64-NOSSE
; RUN: llc < %s -mtriple=i686-- | FileCheck %s --check-prefixes=X86,SDAG-X86
; RUN: llc < %s -mtriple=i686-- -fast-isel -fast-isel-abort=1 | FileCheck %s --check-prefixes=X86,FASTISEL-X86
; RUN: llc < %s -mtriple=i686-- -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes=GISEL-X86
; RUN: llc < %s -mtriple=x86_64-- | FileCheck %s --check-prefixes=X64,SDAG-X64
; RUN: llc < %s -mtriple=x86_64-- -fast-isel -fast-isel-abort=1 | FileCheck %s --check-prefixes=X64,FASTISEL-X64
; RUN: llc < %s -mtriple=x86_64-- -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes=GISEL-X64

declare void @llvm.set.rounding(i32 %x)

define void @func_01() nounwind {
; X86-NOSSE-LABEL: func_01:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %eax
; X86-NOSSE-NEXT:    fnstcw (%esp)
; X86-NOSSE-NEXT:    orb $12, {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    fldcw (%esp)
; X86-NOSSE-NEXT:    popl %eax
; X86-NOSSE-NEXT:    retl
;
; GISEL-X86-NOSSE-LABEL: func_01:
; GISEL-X86-NOSSE:       # %bb.0:
; GISEL-X86-NOSSE-NEXT:    pushl %eax
; GISEL-X86-NOSSE-NEXT:    fnstcw (%esp)
; GISEL-X86-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NOSSE-NEXT:    andw (%esp), %ax
; GISEL-X86-NOSSE-NEXT:    orw $24576, %ax # imm = 0x6000
; GISEL-X86-NOSSE-NEXT:    movw %ax, (%esp)
; GISEL-X86-NOSSE-NEXT:    fldcw (%esp)
; GISEL-X86-NOSSE-NEXT:    popl %eax
; GISEL-X86-NOSSE-NEXT:    retl
;
; X64-NOSSE-LABEL: func_01:
; X64-NOSSE:       # %bb.0:
; X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    orb $12, -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    retq
;
; GISEL-X64-NOSSE-LABEL: func_01:
; GISEL-X64-NOSSE:       # %bb.0:
; GISEL-X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NOSSE-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NOSSE-NEXT:    orw $24576, %ax # imm = 0x6000
; GISEL-X64-NOSSE-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    retq
;
; X86-LABEL: func_01:
; X86:       # %bb.0:
; X86-NEXT:    pushl %eax
; X86-NEXT:    fnstcw (%esp)
; X86-NEXT:    orb $12, {{[0-9]+}}(%esp)
; X86-NEXT:    fldcw (%esp)
; X86-NEXT:    popl %eax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: func_01:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %eax
; GISEL-X86-NEXT:    fnstcw (%esp)
; GISEL-X86-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NEXT:    andw (%esp), %ax
; GISEL-X86-NEXT:    orw $24576, %ax # imm = 0x6000
; GISEL-X86-NEXT:    movw %ax, (%esp)
; GISEL-X86-NEXT:    fldcw (%esp)
; GISEL-X86-NEXT:    popl %eax
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: func_01:
; X64:       # %bb.0:
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    orb $12, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    orb $96, -{{[0-9]+}}(%rsp)
; X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: func_01:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NEXT:    orw $24576, %ax # imm = 0x6000
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; GISEL-X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $24576, %eax # imm = 0x6000
; GISEL-X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    retq
  call void @llvm.set.rounding(i32 0)  ; TowardZero (CW[11-10] = 11)
  ret void
}

define void @func_02() nounwind {
; X86-NOSSE-LABEL: func_02:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %eax
; X86-NOSSE-NEXT:    fnstcw (%esp)
; X86-NOSSE-NEXT:    andb $-13, {{[0-9]+}}(%esp)
; X86-NOSSE-NEXT:    fldcw (%esp)
; X86-NOSSE-NEXT:    popl %eax
; X86-NOSSE-NEXT:    retl
;
; GISEL-X86-NOSSE-LABEL: func_02:
; GISEL-X86-NOSSE:       # %bb.0:
; GISEL-X86-NOSSE-NEXT:    pushl %eax
; GISEL-X86-NOSSE-NEXT:    fnstcw (%esp)
; GISEL-X86-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NOSSE-NEXT:    andw (%esp), %ax
; GISEL-X86-NOSSE-NEXT:    orw $0, %ax
; GISEL-X86-NOSSE-NEXT:    movw %ax, (%esp)
; GISEL-X86-NOSSE-NEXT:    fldcw (%esp)
; GISEL-X86-NOSSE-NEXT:    popl %eax
; GISEL-X86-NOSSE-NEXT:    retl
;
; X64-NOSSE-LABEL: func_02:
; X64-NOSSE:       # %bb.0:
; X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    andb $-13, -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    retq
;
; GISEL-X64-NOSSE-LABEL: func_02:
; GISEL-X64-NOSSE:       # %bb.0:
; GISEL-X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NOSSE-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NOSSE-NEXT:    orw $0, %ax
; GISEL-X64-NOSSE-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    retq
;
; X86-LABEL: func_02:
; X86:       # %bb.0:
; X86-NEXT:    pushl %eax
; X86-NEXT:    fnstcw (%esp)
; X86-NEXT:    andb $-13, {{[0-9]+}}(%esp)
; X86-NEXT:    fldcw (%esp)
; X86-NEXT:    popl %eax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: func_02:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %eax
; GISEL-X86-NEXT:    fnstcw (%esp)
; GISEL-X86-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NEXT:    andw (%esp), %ax
; GISEL-X86-NEXT:    orw $0, %ax
; GISEL-X86-NEXT:    movw %ax, (%esp)
; GISEL-X86-NEXT:    fldcw (%esp)
; GISEL-X86-NEXT:    popl %eax
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: func_02:
; X64:       # %bb.0:
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    andb $-13, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    andb $-97, -{{[0-9]+}}(%rsp)
; X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: func_02:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NEXT:    orw $0, %ax
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; GISEL-X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $0, %eax
; GISEL-X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    retq
  call void @llvm.set.rounding(i32 1)  ; ToNearestTiesToEven (CW[11-10] = 00)
  ret void
}

define void @func_03() nounwind {
; X86-NOSSE-LABEL: func_03:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %eax
; X86-NOSSE-NEXT:    fnstcw (%esp)
; X86-NOSSE-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X86-NOSSE-NEXT:    andl (%esp), %eax
; X86-NOSSE-NEXT:    orl $2048, %eax # imm = 0x800
; X86-NOSSE-NEXT:    movw %ax, (%esp)
; X86-NOSSE-NEXT:    fldcw (%esp)
; X86-NOSSE-NEXT:    popl %eax
; X86-NOSSE-NEXT:    retl
;
; GISEL-X86-NOSSE-LABEL: func_03:
; GISEL-X86-NOSSE:       # %bb.0:
; GISEL-X86-NOSSE-NEXT:    pushl %eax
; GISEL-X86-NOSSE-NEXT:    fnstcw (%esp)
; GISEL-X86-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NOSSE-NEXT:    andw (%esp), %ax
; GISEL-X86-NOSSE-NEXT:    orw $16384, %ax # imm = 0x4000
; GISEL-X86-NOSSE-NEXT:    movw %ax, (%esp)
; GISEL-X86-NOSSE-NEXT:    fldcw (%esp)
; GISEL-X86-NOSSE-NEXT:    popl %eax
; GISEL-X86-NOSSE-NEXT:    retl
;
; X64-NOSSE-LABEL: func_03:
; X64-NOSSE:       # %bb.0:
; X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X64-NOSSE-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; X64-NOSSE-NEXT:    orl $2048, %eax # imm = 0x800
; X64-NOSSE-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    retq
;
; GISEL-X64-NOSSE-LABEL: func_03:
; GISEL-X64-NOSSE:       # %bb.0:
; GISEL-X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NOSSE-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NOSSE-NEXT:    orw $16384, %ax # imm = 0x4000
; GISEL-X64-NOSSE-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    retq
;
; X86-LABEL: func_03:
; X86:       # %bb.0:
; X86-NEXT:    pushl %eax
; X86-NEXT:    fnstcw (%esp)
; X86-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X86-NEXT:    andl (%esp), %eax
; X86-NEXT:    orl $2048, %eax # imm = 0x800
; X86-NEXT:    movw %ax, (%esp)
; X86-NEXT:    fldcw (%esp)
; X86-NEXT:    popl %eax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: func_03:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %eax
; GISEL-X86-NEXT:    fnstcw (%esp)
; GISEL-X86-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NEXT:    andw (%esp), %ax
; GISEL-X86-NEXT:    orw $16384, %ax # imm = 0x4000
; GISEL-X86-NEXT:    movw %ax, (%esp)
; GISEL-X86-NEXT:    fldcw (%esp)
; GISEL-X86-NEXT:    popl %eax
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: func_03:
; X64:       # %bb.0:
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $2048, %eax # imm = 0x800
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $16384, %eax # imm = 0x4000
; X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: func_03:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NEXT:    orw $16384, %ax # imm = 0x4000
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; GISEL-X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $16384, %eax # imm = 0x4000
; GISEL-X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    retq
  call void @llvm.set.rounding(i32 2)  ; Upward (CW[11-10] = 10)
  ret void
}

define void @func_04() nounwind {
; X86-NOSSE-LABEL: func_04:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %eax
; X86-NOSSE-NEXT:    fnstcw (%esp)
; X86-NOSSE-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X86-NOSSE-NEXT:    andl (%esp), %eax
; X86-NOSSE-NEXT:    orl $1024, %eax # imm = 0x400
; X86-NOSSE-NEXT:    movw %ax, (%esp)
; X86-NOSSE-NEXT:    fldcw (%esp)
; X86-NOSSE-NEXT:    popl %eax
; X86-NOSSE-NEXT:    retl
;
; GISEL-X86-NOSSE-LABEL: func_04:
; GISEL-X86-NOSSE:       # %bb.0:
; GISEL-X86-NOSSE-NEXT:    pushl %eax
; GISEL-X86-NOSSE-NEXT:    fnstcw (%esp)
; GISEL-X86-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NOSSE-NEXT:    andw (%esp), %ax
; GISEL-X86-NOSSE-NEXT:    orw $8192, %ax # imm = 0x2000
; GISEL-X86-NOSSE-NEXT:    movw %ax, (%esp)
; GISEL-X86-NOSSE-NEXT:    fldcw (%esp)
; GISEL-X86-NOSSE-NEXT:    popl %eax
; GISEL-X86-NOSSE-NEXT:    retl
;
; X64-NOSSE-LABEL: func_04:
; X64-NOSSE:       # %bb.0:
; X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X64-NOSSE-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; X64-NOSSE-NEXT:    orl $1024, %eax # imm = 0x400
; X64-NOSSE-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    retq
;
; GISEL-X64-NOSSE-LABEL: func_04:
; GISEL-X64-NOSSE:       # %bb.0:
; GISEL-X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NOSSE-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NOSSE-NEXT:    orw $8192, %ax # imm = 0x2000
; GISEL-X64-NOSSE-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    retq
;
; X86-LABEL: func_04:
; X86:       # %bb.0:
; X86-NEXT:    pushl %eax
; X86-NEXT:    fnstcw (%esp)
; X86-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X86-NEXT:    andl (%esp), %eax
; X86-NEXT:    orl $1024, %eax # imm = 0x400
; X86-NEXT:    movw %ax, (%esp)
; X86-NEXT:    fldcw (%esp)
; X86-NEXT:    popl %eax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: func_04:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %eax
; GISEL-X86-NEXT:    fnstcw (%esp)
; GISEL-X86-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NEXT:    andw (%esp), %ax
; GISEL-X86-NEXT:    orw $8192, %ax # imm = 0x2000
; GISEL-X86-NEXT:    movw %ax, (%esp)
; GISEL-X86-NEXT:    fldcw (%esp)
; GISEL-X86-NEXT:    popl %eax
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: func_04:
; X64:       # %bb.0:
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl $-3073, %eax # imm = 0xF3FF
; X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $1024, %eax # imm = 0x400
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $8192, %eax # imm = 0x2000
; X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: func_04:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NEXT:    orw $8192, %ax # imm = 0x2000
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; GISEL-X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $8192, %eax # imm = 0x2000
; GISEL-X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    retq
  call void @llvm.set.rounding(i32 3)  ; Downward (CW[11-10] = 01)
  ret void
}

define void @func_05(i32 %x) nounwind {
; X86-NOSSE-LABEL: func_05:
; X86-NOSSE:       # %bb.0:
; X86-NOSSE-NEXT:    pushl %eax
; X86-NOSSE-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NOSSE-NEXT:    leal 4(%eax,%eax), %ecx
; X86-NOSSE-NEXT:    movl $201, %eax
; X86-NOSSE-NEXT:    # kill: def $cl killed $cl killed $ecx
; X86-NOSSE-NEXT:    shll %cl, %eax
; X86-NOSSE-NEXT:    andl $3072, %eax # imm = 0xC00
; X86-NOSSE-NEXT:    fnstcw (%esp)
; X86-NOSSE-NEXT:    movl $-3073, %ecx # imm = 0xF3FF
; X86-NOSSE-NEXT:    andl (%esp), %ecx
; X86-NOSSE-NEXT:    orl %eax, %ecx
; X86-NOSSE-NEXT:    movw %cx, (%esp)
; X86-NOSSE-NEXT:    fldcw (%esp)
; X86-NOSSE-NEXT:    popl %eax
; X86-NOSSE-NEXT:    retl
;
; GISEL-X86-NOSSE-LABEL: func_05:
; GISEL-X86-NOSSE:       # %bb.0:
; GISEL-X86-NOSSE-NEXT:    pushl %eax
; GISEL-X86-NOSSE-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NOSSE-NEXT:    fnstcw (%esp)
; GISEL-X86-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NOSSE-NEXT:    andw (%esp), %ax
; GISEL-X86-NOSSE-NEXT:    addl %ecx, %ecx
; GISEL-X86-NOSSE-NEXT:    addl $4, %ecx
; GISEL-X86-NOSSE-NEXT:    movw $201, %dx
; GISEL-X86-NOSSE-NEXT:    # kill: def $cl killed $cl killed $ecx
; GISEL-X86-NOSSE-NEXT:    shlw %cl, %dx
; GISEL-X86-NOSSE-NEXT:    andw $3072, %dx # imm = 0xC00
; GISEL-X86-NOSSE-NEXT:    orw %ax, %dx
; GISEL-X86-NOSSE-NEXT:    movw %dx, (%esp)
; GISEL-X86-NOSSE-NEXT:    fldcw (%esp)
; GISEL-X86-NOSSE-NEXT:    popl %eax
; GISEL-X86-NOSSE-NEXT:    retl
;
; X64-NOSSE-LABEL: func_05:
; X64-NOSSE:       # %bb.0:
; X64-NOSSE-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NOSSE-NEXT:    leal 4(%rdi,%rdi), %ecx
; X64-NOSSE-NEXT:    movl $201, %eax
; X64-NOSSE-NEXT:    # kill: def $cl killed $cl killed $ecx
; X64-NOSSE-NEXT:    shll %cl, %eax
; X64-NOSSE-NEXT:    andl $3072, %eax # imm = 0xC00
; X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    movl $-3073, %ecx # imm = 0xF3FF
; X64-NOSSE-NEXT:    andl -{{[0-9]+}}(%rsp), %ecx
; X64-NOSSE-NEXT:    orl %eax, %ecx
; X64-NOSSE-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NOSSE-NEXT:    retq
;
; GISEL-X64-NOSSE-LABEL: func_05:
; GISEL-X64-NOSSE:       # %bb.0:
; GISEL-X64-NOSSE-NEXT:    # kill: def $edi killed $edi def $rdi
; GISEL-X64-NOSSE-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NOSSE-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NOSSE-NEXT:    leal (%rdi,%rdi), %ecx
; GISEL-X64-NOSSE-NEXT:    addl $4, %ecx
; GISEL-X64-NOSSE-NEXT:    movw $201, %dx
; GISEL-X64-NOSSE-NEXT:    # kill: def $cl killed $cl killed $ecx
; GISEL-X64-NOSSE-NEXT:    shlw %cl, %dx
; GISEL-X64-NOSSE-NEXT:    andw $3072, %dx # imm = 0xC00
; GISEL-X64-NOSSE-NEXT:    orw %ax, %dx
; GISEL-X64-NOSSE-NEXT:    movw %dx, -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NOSSE-NEXT:    retq
;
; X86-LABEL: func_05:
; X86:       # %bb.0:
; X86-NEXT:    pushl %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    leal 4(%eax,%eax), %ecx
; X86-NEXT:    movl $201, %eax
; X86-NEXT:    # kill: def $cl killed $cl killed $ecx
; X86-NEXT:    shll %cl, %eax
; X86-NEXT:    andl $3072, %eax # imm = 0xC00
; X86-NEXT:    fnstcw (%esp)
; X86-NEXT:    movl $-3073, %ecx # imm = 0xF3FF
; X86-NEXT:    andl (%esp), %ecx
; X86-NEXT:    orl %eax, %ecx
; X86-NEXT:    movw %cx, (%esp)
; X86-NEXT:    fldcw (%esp)
; X86-NEXT:    popl %eax
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: func_05:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    pushl %eax
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    fnstcw (%esp)
; GISEL-X86-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X86-NEXT:    andw (%esp), %ax
; GISEL-X86-NEXT:    addl %ecx, %ecx
; GISEL-X86-NEXT:    addl $4, %ecx
; GISEL-X86-NEXT:    movw $201, %dx
; GISEL-X86-NEXT:    # kill: def $cl killed $cl killed $ecx
; GISEL-X86-NEXT:    shlw %cl, %dx
; GISEL-X86-NEXT:    andw $3072, %dx # imm = 0xC00
; GISEL-X86-NEXT:    orw %ax, %dx
; GISEL-X86-NEXT:    movw %dx, (%esp)
; GISEL-X86-NEXT:    fldcw (%esp)
; GISEL-X86-NEXT:    popl %eax
; GISEL-X86-NEXT:    retl
;
; X64-LABEL: func_05:
; X64:       # %bb.0:
; X64-NEXT:    # kill: def $edi killed $edi def $rdi
; X64-NEXT:    leal 4(%rdi,%rdi), %ecx
; X64-NEXT:    movl $201, %eax
; X64-NEXT:    # kill: def $cl killed $cl killed $ecx
; X64-NEXT:    shll %cl, %eax
; X64-NEXT:    andl $3072, %eax # imm = 0xC00
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl $-3073, %ecx # imm = 0xF3FF
; X64-NEXT:    andl -{{[0-9]+}}(%rsp), %ecx
; X64-NEXT:    orl %eax, %ecx
; X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl $-24577, %ecx # imm = 0x9FFF
; X64-NEXT:    andl -{{[0-9]+}}(%rsp), %ecx
; X64-NEXT:    leal (%rcx,%rax,8), %eax
; X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: func_05:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    # kill: def $edi killed $edi def $rdi
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movw $-3073, %ax # imm = 0xF3FF
; GISEL-X64-NEXT:    andw -{{[0-9]+}}(%rsp), %ax
; GISEL-X64-NEXT:    leal (%rdi,%rdi), %ecx
; GISEL-X64-NEXT:    addl $4, %ecx
; GISEL-X64-NEXT:    movw $201, %dx
; GISEL-X64-NEXT:    # kill: def $cl killed $cl killed $ecx
; GISEL-X64-NEXT:    shlw %cl, %dx
; GISEL-X64-NEXT:    andw $3072, %dx # imm = 0xC00
; GISEL-X64-NEXT:    movzwl %dx, %ecx
; GISEL-X64-NEXT:    leal (,%rcx,8), %edx
; GISEL-X64-NEXT:    orw %ax, %cx
; GISEL-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    stmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl $-24577, %eax # imm = 0x9FFF
; GISEL-X64-NEXT:    andl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl %edx, %eax
; GISEL-X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    ldmxcsr -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    retq
  call void @llvm.set.rounding(i32 %x)  ; Downward
  ret void
}

attributes #0 = { nounwind "use-soft-float"="true" }
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; FASTISEL-X64: {{.*}}
; FASTISEL-X64-NOSSE: {{.*}}
; FASTISEL-X86: {{.*}}
; FASTISEL-X86-NOSSE: {{.*}}
; SDAG-X64: {{.*}}
; SDAG-X64-NOSSE: {{.*}}
; SDAG-X86: {{.*}}
; SDAG-X86-NOSSE: {{.*}}
