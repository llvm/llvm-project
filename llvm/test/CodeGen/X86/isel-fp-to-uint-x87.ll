; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-- -mattr=+x87,-sse,-sse2 -global-isel=0 | FileCheck %s --check-prefixes X64,SDAG-X64
; RUN: llc < %s -mtriple=x86_64-- -mattr=+x87,-sse,-sse2 -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes X64,GISEL-X64

define void @test_float_to_uint64(float %f, ptr %result) {
; SDAG-X64-LABEL: test_float_to_uint64:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    flds {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SDAG-X64-NEXT:    xorl %eax, %eax
; SDAG-X64-NEXT:    fucomi %st(1), %st
; SDAG-X64-NEXT:    setbe %al
; SDAG-X64-NEXT:    fldz
; SDAG-X64-NEXT:    fcmovbe %st(1), %st
; SDAG-X64-NEXT:    fstp %st(1)
; SDAG-X64-NEXT:    fsubrp %st, %st(1)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %ecx
; SDAG-X64-NEXT:    orl $3072, %ecx # imm = 0xC00
; SDAG-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    shlq $63, %rax
; SDAG-X64-NEXT:    xorq -{{[0-9]+}}(%rsp), %rax
; SDAG-X64-NEXT:    movq %rax, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_float_to_uint64:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    flds {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; GISEL-X64-NEXT:    fld %st(0)
; GISEL-X64-NEXT:    fsubrs {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldz
; GISEL-X64-NEXT:    fucompi %st(1), %st
; GISEL-X64-NEXT:    fstp %st(0)
; GISEL-X64-NEXT:    seta %al
; GISEL-X64-NEXT:    xorb $1, %al
; GISEL-X64-NEXT:    movzbl %al, %eax
; GISEL-X64-NEXT:    andq $1, %rax
; GISEL-X64-NEXT:    movq %rax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fildll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fmulp %st, %st(1)
; GISEL-X64-NEXT:    fsubr %st, %st(1)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fxch %st(1)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %ecx
; GISEL-X64-NEXT:    orl $3072, %ecx # imm = 0xC00
; GISEL-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    addq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    movq %rax, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui float %f to i64
  store i64 %conv, ptr %result, align 8
  ret void
}

define void @test_double_to_uint64(double %d, ptr %result) {
; SDAG-X64-LABEL: test_double_to_uint64:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SDAG-X64-NEXT:    xorl %eax, %eax
; SDAG-X64-NEXT:    fucomi %st(1), %st
; SDAG-X64-NEXT:    setbe %al
; SDAG-X64-NEXT:    fldz
; SDAG-X64-NEXT:    fcmovbe %st(1), %st
; SDAG-X64-NEXT:    fstp %st(1)
; SDAG-X64-NEXT:    fsubrp %st, %st(1)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %ecx
; SDAG-X64-NEXT:    orl $3072, %ecx # imm = 0xC00
; SDAG-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    shlq $63, %rax
; SDAG-X64-NEXT:    xorq -{{[0-9]+}}(%rsp), %rax
; SDAG-X64-NEXT:    movq %rax, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_double_to_uint64:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldl {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; GISEL-X64-NEXT:    fld %st(0)
; GISEL-X64-NEXT:    fsubrl {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldz
; GISEL-X64-NEXT:    fucompi %st(1), %st
; GISEL-X64-NEXT:    fstp %st(0)
; GISEL-X64-NEXT:    seta %al
; GISEL-X64-NEXT:    xorb $1, %al
; GISEL-X64-NEXT:    movzbl %al, %eax
; GISEL-X64-NEXT:    andq $1, %rax
; GISEL-X64-NEXT:    movq %rax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fildll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fmulp %st, %st(1)
; GISEL-X64-NEXT:    fsubr %st, %st(1)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fxch %st(1)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %ecx
; GISEL-X64-NEXT:    orl $3072, %ecx # imm = 0xC00
; GISEL-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    addq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    movq %rax, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui double %d to i64
  store i64 %conv, ptr %result, align 8
  ret void
}

define void @test_long_double_to_uint64(x86_fp80 %ld, ptr %result) {
; SDAG-X64-LABEL: test_long_double_to_uint64:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; SDAG-X64-NEXT:    xorl %eax, %eax
; SDAG-X64-NEXT:    fucomi %st(1), %st
; SDAG-X64-NEXT:    setbe %al
; SDAG-X64-NEXT:    fldz
; SDAG-X64-NEXT:    fcmovbe %st(1), %st
; SDAG-X64-NEXT:    fstp %st(1)
; SDAG-X64-NEXT:    fsubrp %st, %st(1)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %ecx
; SDAG-X64-NEXT:    orl $3072, %ecx # imm = 0xC00
; SDAG-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    shlq $63, %rax
; SDAG-X64-NEXT:    xorq -{{[0-9]+}}(%rsp), %rax
; SDAG-X64-NEXT:    movq %rax, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_long_double_to_uint64:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldt {{\.?LCPI[0-9]+_[0-9]+}}(%rip)
; GISEL-X64-NEXT:    fld %st(1)
; GISEL-X64-NEXT:    fsub %st(1), %st
; GISEL-X64-NEXT:    fldz
; GISEL-X64-NEXT:    fucompi %st(1), %st
; GISEL-X64-NEXT:    fstp %st(0)
; GISEL-X64-NEXT:    seta %al
; GISEL-X64-NEXT:    xorb $1, %al
; GISEL-X64-NEXT:    movzbl %al, %eax
; GISEL-X64-NEXT:    andq $1, %rax
; GISEL-X64-NEXT:    movq %rax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fildll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fmulp %st, %st(1)
; GISEL-X64-NEXT:    fsubr %st, %st(1)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fxch %st(1)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %ecx
; GISEL-X64-NEXT:    orl $3072, %ecx # imm = 0xC00
; GISEL-X64-NEXT:    movw %cx, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    addq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    movq %rax, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui x86_fp80 %ld to i64
  store i64 %conv, ptr %result, align 8
  ret void
}

define void @test_float_to_uint32(float %f, ptr %result) {
; SDAG-X64-LABEL: test_float_to_uint32:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    flds {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; SDAG-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    movl %eax, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_float_to_uint32:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    flds {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    movl %eax, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui float %f to i32
  store i32 %conv, ptr %result, align 4
  ret void
}

define void @test_double_to_uint32(double %d, ptr %result) {
; SDAG-X64-LABEL: test_double_to_uint32:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; SDAG-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    movl %eax, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_double_to_uint32:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    movl %eax, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui double %d to i32
  store i32 %conv, ptr %result, align 4
  ret void
}

define void @test_long_double_to_uint32(x86_fp80 %ld, ptr %result) {
; SDAG-X64-LABEL: test_long_double_to_uint32:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; SDAG-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    movl %eax, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_long_double_to_uint32:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpll -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movq -{{[0-9]+}}(%rsp), %rax
; GISEL-X64-NEXT:    movl %eax, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui x86_fp80 %ld to i32
  store i32 %conv, ptr %result, align 4
  ret void
}

define void @test_float_to_uint16(float %f, ptr %result) {
; X64-LABEL: test_float_to_uint16:
; X64:       # %bb.0: # %entry
; X64-NEXT:    flds {{[0-9]+}}(%rsp)
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $3072, %eax # imm = 0xC00
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    fistpl -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    movw %ax, (%rdi)
; X64-NEXT:    retq
entry:
  %conv = fptoui float %f to i16
  store i16 %conv, ptr %result, align 2
  ret void
}

define void @test_double_to_uint16(double %d, ptr %result) {
; X64-LABEL: test_double_to_uint16:
; X64:       # %bb.0: # %entry
; X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $3072, %eax # imm = 0xC00
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    fistpl -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    movw %ax, (%rdi)
; X64-NEXT:    retq
entry:
  %conv = fptoui double %d to i16
  store i16 %conv, ptr %result, align 2
  ret void
}

define void @test_long_double_to_uint16(x86_fp80 %ld, ptr %result) {
; X64-LABEL: test_long_double_to_uint16:
; X64:       # %bb.0: # %entry
; X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    orl $3072, %eax # imm = 0xC00
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    fistpl -{{[0-9]+}}(%rsp)
; X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; X64-NEXT:    movw %ax, (%rdi)
; X64-NEXT:    retq
entry:
  %conv = fptoui x86_fp80 %ld to i16
  store i16 %conv, ptr %result, align 2
  ret void
}

define void @test_float_to_uint8(float %f, ptr %result) {
; SDAG-X64-LABEL: test_float_to_uint8:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    flds {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; SDAG-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistps -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzbl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    movb %al, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_float_to_uint8:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    flds {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpl -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    movb %al, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui float %f to i8
  store i8 %conv, ptr %result, align 1
  ret void
}

define void @test_double_to_uint8(double %d, ptr %result) {
; SDAG-X64-LABEL: test_double_to_uint8:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; SDAG-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistps -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzbl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    movb %al, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_double_to_uint8:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    fldl {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpl -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    movb %al, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui double %d to i8
  store i8 %conv, ptr %result, align 1
  ret void
}

define void @test_long_double_to_uint8(x86_fp80 %ld, ptr %result) {
; SDAG-X64-LABEL: test_long_double_to_uint8:
; SDAG-X64:       # %bb.0: # %entry
; SDAG-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; SDAG-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fistps -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    movzbl -{{[0-9]+}}(%rsp), %eax
; SDAG-X64-NEXT:    movb %al, (%rdi)
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_long_double_to_uint8:
; GISEL-X64:       # %bb.0: # %entry
; GISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fnstcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movzwl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    orl $3072, %eax # imm = 0xC00
; GISEL-X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fistpl -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fldcw -{{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    movl -{{[0-9]+}}(%rsp), %eax
; GISEL-X64-NEXT:    movb %al, (%rdi)
; GISEL-X64-NEXT:    retq
entry:
  %conv = fptoui x86_fp80 %ld to i8
  store i8 %conv, ptr %result, align 1
  ret void
}