; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=x86_64-pc-windows-msvc -mcpu=corei7 < %s | FileCheck %s --check-prefixes=X64
; RUN: llc -mtriple=i686-pc-windows-msvc < %s | FileCheck %s --check-prefixes=X86

; Non-volatile registers are used to pass the first few parameters.
declare void @boring()
declare preserve_nonecc void @continuation6(ptr, ptr, ptr, ptr, ptr, ptr)
define preserve_nonecc void @entry6(ptr %a, ptr %b, ptr %c, ptr %d, ptr %e, ptr %f) {
; X64-LABEL: entry6:
; X64:       # %bb.0:
; X64-NEXT:    subq $40, %rsp
; X64-NEXT:    .seh_stackalloc 40
; X64-NEXT:    .seh_endprologue
; X64-NEXT:    callq boring
; X64-NEXT:    nop
; X64-NEXT:    .seh_startepilogue
; X64-NEXT:    addq $40, %rsp
; X64-NEXT:    .seh_endepilogue
; X64-NEXT:    jmp continuation6 # TAILCALL
; X64-NEXT:    .seh_endproc
;
; X86-LABEL: entry6:
; X86:       # %bb.0:
; X86-NEXT:    pushl %esi
; X86-NEXT:    pushl %ebp
; X86-NEXT:    subl $8, %esp
; X86-NEXT:    movl %eax, {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Spill
; X86-NEXT:    movl %edx, (%esp) # 4-byte Spill
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ebx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:    calll _boring
; X86-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %ebx, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %ebp, {{[0-9]+}}(%esp)
; X86-NEXT:    movl (%esp), %edx # 4-byte Reload
; X86-NEXT:    movl {{[-0-9]+}}(%e{{[sb]}}p), %eax # 4-byte Reload
; X86-NEXT:    addl $8, %esp
; X86-NEXT:    popl %ebp
; X86-NEXT:    popl %esi
; X86-NEXT:    jmp _continuation6 # TAILCALL
  call void @boring()
  musttail call preserve_nonecc void @continuation6(ptr %a, ptr %b, ptr %c, ptr %d, ptr %e, ptr %f)
  ret void
}

declare preserve_nonecc void @continuation1(ptr)
define preserve_nonecc void @entry1(ptr %a) {
; X64-LABEL: entry1:
; X64:       # %bb.0:
; X64-NEXT:    subq $40, %rsp
; X64-NEXT:    .seh_stackalloc 40
; X64-NEXT:    .seh_endprologue
; X64-NEXT:    callq boring
; X64-NEXT:    nop
; X64-NEXT:    .seh_startepilogue
; X64-NEXT:    addq $40, %rsp
; X64-NEXT:    .seh_endepilogue
; X64-NEXT:    jmp continuation1 # TAILCALL
; X64-NEXT:    .seh_endproc
;
; X86-LABEL: entry1:
; X86:       # %bb.0:
; X86-NEXT:    calll _boring
; X86-NEXT:    jmp _continuation1 # TAILCALL
  call void @boring()
  musttail call preserve_nonecc void @continuation1(ptr %a)
  ret void
}
