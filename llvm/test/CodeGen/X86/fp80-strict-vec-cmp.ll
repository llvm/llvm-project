; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx512f | FileCheck %s

define <1 x i1> @test_oeq_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_oeq_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    andb %cl, %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"oeq", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ogt_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ogt_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ogt", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_oge_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_oge_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"oge", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_olt_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_olt_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"olt", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ole_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ole_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ole", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_one_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_one_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"one", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ord_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ord_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ueq_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ueq_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ugt_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ugt_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ugt", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_uge_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_uge_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"uge", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ult_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ult_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ult", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ule_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ule_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ule", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_une_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_une_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    orb %cl, %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"une", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_uno_q_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_uno_q_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"uno", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_oeq_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_oeq_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    andb %cl, %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"oeq", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ogt_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ogt_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ogt", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_oge_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_oge_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"oge", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_olt_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_olt_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"olt", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ole_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ole_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ole", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_one_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_one_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"one", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ord_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ord_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ueq_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ueq_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ugt_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ugt_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ugt", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_uge_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_uge_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"uge", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ult_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ult_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ult", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_ule_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_ule_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"ule", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_une_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_une_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    orb %cl, %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"une", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <1 x i1> @test_uno_s_v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b) {
; CHECK-LABEL: test_uno_s_v1f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    retq
  %cond = tail call <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80> %a, <1 x x86_fp80> %b, metadata !"uno", metadata !"fpexcept.strict")
  ret <1 x i1> %cond
}

define <4 x i1> @test_oeq_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_oeq_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    andb %cl, %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %dl
; CHECK-NEXT:    andb %cl, %dl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %sil
; CHECK-NEXT:    andb %cl, %sil
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    andl $1, %esi
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %esi, %k1
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    andb %al, %cl
; CHECK-NEXT:    kmovw %ecx, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"oeq", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ogt_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ogt_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ogt", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_oge_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_oge_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"oge", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_olt_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_olt_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"olt", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ole_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ole_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ole", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_one_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_one_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setne %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setne %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"one", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ord_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ord_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ueq_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ueq_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ugt_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ugt_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ugt", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_uge_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_uge_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"uge", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ult_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ult_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ult", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ule_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ule_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ule", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_une_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_une_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    orb %cl, %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %dl
; CHECK-NEXT:    orb %cl, %dl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %sil
; CHECK-NEXT:    orb %cl, %sil
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    andl $1, %esi
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %esi, %k1
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    setne %cl
; CHECK-NEXT:    orb %al, %cl
; CHECK-NEXT:    kmovw %ecx, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"une", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_uno_q_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_uno_q_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fucompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"uno", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_oeq_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_oeq_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    andb %cl, %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %dl
; CHECK-NEXT:    andb %cl, %dl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    sete %sil
; CHECK-NEXT:    andb %cl, %sil
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    andl $1, %esi
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %esi, %k1
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    andb %al, %cl
; CHECK-NEXT:    kmovw %ecx, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"oeq", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ogt_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ogt_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ogt", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_oge_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_oge_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"oge", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_olt_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_olt_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    seta %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    seta %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"olt", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ole_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ole_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setae %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setae %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ole", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_one_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_one_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setne %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setne %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"one", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ord_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ord_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ueq_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ueq_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setnp %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ord", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ugt_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ugt_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ugt", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_uge_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_uge_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"uge", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ult_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ult_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setb %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setb %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ult", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_ule_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_ule_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setbe %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setbe %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"ule", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_une_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_une_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    orb %cl, %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %dl
; CHECK-NEXT:    orb %cl, %dl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    setne %sil
; CHECK-NEXT:    orb %cl, %sil
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    andl $1, %esi
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %esi, %k1
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    setne %cl
; CHECK-NEXT:    orb %al, %cl
; CHECK-NEXT:    kmovw %ecx, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"une", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

define <4 x i1> @test_uno_s_v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b) {
; CHECK-LABEL: test_uno_s_v4f80:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %cl
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    fldt {{[0-9]+}}(%rsp)
; CHECK-NEXT:    setp %dl
; CHECK-NEXT:    andl $1, %edx
; CHECK-NEXT:    fcompi %st(1), %st
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    kmovw %eax, %k0
; CHECK-NEXT:    kmovw %ecx, %k1
; CHECK-NEXT:    kshiftlw $1, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $2, %k0, %k0
; CHECK-NEXT:    kmovw %edx, %k1
; CHECK-NEXT:    setp %al
; CHECK-NEXT:    kmovw %eax, %k2
; CHECK-NEXT:    kshiftlw $1, %k2, %k2
; CHECK-NEXT:    korw %k2, %k1, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    kshiftrw $14, %k1, %k1
; CHECK-NEXT:    korw %k0, %k1, %k1
; CHECK-NEXT:    vpternlogd {{.*#+}} zmm0 {%k1} {z} = -1
; CHECK-NEXT:    # kill: def $xmm0 killed $xmm0 killed $zmm0
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
  %cond = tail call <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80> %a, <4 x x86_fp80> %b, metadata !"uno", metadata !"fpexcept.strict")
  ret <4 x i1> %cond
}

declare <1 x i1> @llvm.experimental.constrained.fcmp.v1f80(<1 x x86_fp80>, <1 x x86_fp80>, metadata, metadata)
declare <1 x i1> @llvm.experimental.constrained.fcmps.v1f80(<1 x x86_fp80>, <1 x x86_fp80>, metadata, metadata)
declare <4 x i1> @llvm.experimental.constrained.fcmp.v4f80(<4 x x86_fp80>, <4 x x86_fp80>, metadata, metadata)
declare <4 x i1> @llvm.experimental.constrained.fcmps.v4f80(<4 x x86_fp80>, <4 x x86_fp80>, metadata, metadata)
