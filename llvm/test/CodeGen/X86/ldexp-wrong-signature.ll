; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s
; RUN: llc < %s -mtriple=i386-pc-win32 | FileCheck %s -check-prefix=CHECK-WIN

define float @ldexpf_too_many_args(float %a, i32 %b, i32 %c) {
; CHECK-LABEL: ldexpf_too_many_args:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    callq ldexpf@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
;
; CHECK-WIN-LABEL: ldexpf_too_many_args:
; CHECK-WIN:       # %bb.0:
; CHECK-WIN-NEXT:    subl $12, %esp
; CHECK-WIN-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-WIN-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-WIN-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-WIN-NEXT:    movl %ecx, {{[0-9]+}}(%esp)
; CHECK-WIN-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; CHECK-WIN-NEXT:    fstps (%esp)
; CHECK-WIN-NEXT:    calll _ldexpf
; CHECK-WIN-NEXT:    addl $12, %esp
; CHECK-WIN-NEXT:    retl
  %result = call float @ldexpf(float %a, i32 %b, i32 %c) #0
  ret float %result
}

define float @ldexp_wrong_fp_type(float %a, i32 %b) {
; CHECK-LABEL: ldexp_wrong_fp_type:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    callq ldexp@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
;
; CHECK-WIN-LABEL: ldexp_wrong_fp_type:
; CHECK-WIN:       # %bb.0:
; CHECK-WIN-NEXT:    subl $8, %esp
; CHECK-WIN-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-WIN-NEXT:    movl {{[0-9]+}}(%esp), %eax
; CHECK-WIN-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; CHECK-WIN-NEXT:    fstps (%esp)
; CHECK-WIN-NEXT:    calll _ldexp
; CHECK-WIN-NEXT:    addl $8, %esp
; CHECK-WIN-NEXT:    retl
  %result = call float @ldexp(float %a, i32 %b) #0
  ret float %result
}

declare float @ldexpf(float, i32, i32) #0
declare float @ldexp(float, i32) #0

attributes #0 = { nounwind readnone }
