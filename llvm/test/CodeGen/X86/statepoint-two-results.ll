; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs < %s | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"

define void @quux() gc "statepoint-example" {
; CHECK-LABEL: quux:
; CHECK:       # %bb.0: # %bb1
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    movl $4, %esi
; CHECK-NEXT:    callq wombat@PLT
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
bb1:
  %tmp = call token (i64, i32, ptr addrspace(1) (ptr addrspace(1), i32)*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0(i64 2882400000, i32 0, ptr addrspace(1) (ptr addrspace(1), i32)* nonnull elementtype(ptr addrspace(1) (ptr addrspace(1), i32)) @wombat, i32 2, i32 0, ptr addrspace(1) undef, i32 4, i32 0, i32 0) [ "gc-live"() ]
  %tmp2 = tail call ptr addrspace(1) @llvm.experimental.gc.result.p1(token %tmp)
  br label %bb2

bb2:
  %tmp5 = tail call ptr addrspace(1) @llvm.experimental.gc.result.p1(token %tmp)
  ret void
}

declare ptr addrspace(1) @wombat(ptr addrspace(1), i32)

; Function Attrs: nounwind readnone
declare ptr addrspace(1) @llvm.experimental.gc.result.p1(token) #0
declare token @llvm.experimental.gc.statepoint.p0(i64, i32, ptr addrspace(1) (ptr addrspace(1), i32)*, i32, i32, ...)
attributes #0 = { nounwind readnone }
