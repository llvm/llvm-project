; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-- -mattr=+x87,-sse,-sse2 -global-isel=0 | FileCheck %s --check-prefixes X64,SDAG-X64
; RUN: llc < %s -mtriple=x86_64-- -mattr=+x87,-sse,-sse2 -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes X64,GISEL-X64

define void @test_ui32_to_fp(i32 %x, ptr %p) {
; X64-LABEL: test_ui32_to_fp:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    movq %rax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fildll -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstps (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i32 %x to float
  store float %conv, ptr %p, align 4
  ret void
}

define void @test_ui32_to_fp_double(i32 %x, ptr %p) {
; X64-LABEL: test_ui32_to_fp_double:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    movq %rax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fildll -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstpl (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i32 %x to double
  store double %conv, ptr %p, align 8
  ret void
}

define void @test_ui32_to_fp_x86_fp80(i32 %x, ptr %p) {
; X64-LABEL: test_ui32_to_fp_x86_fp80:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    movq %rax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fildll -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstpt (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i32 %x to x86_fp80
  store x86_fp80 %conv, ptr %p, align 16
  ret void
}

define void @test_ui16_to_fp(i16 %x, ptr %p) {
; X64-LABEL: test_ui16_to_fp:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fildl -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstps (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i16 %x to float
  store float %conv, ptr %p, align 4
  ret void
}

define void @test_ui16_to_fp_double(i16 %x, ptr %p) {
; X64-LABEL: test_ui16_to_fp_double:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fildl -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstpl (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i16 %x to double
  store double %conv, ptr %p, align 8
  ret void
}

define void @test_ui16_to_fp_x86_fp80(i16 %x, ptr %p) {
; X64-LABEL: test_ui16_to_fp_x86_fp80:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    movl %eax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    fildl -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstpt (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i16 %x to x86_fp80
  store x86_fp80 %conv, ptr %p, align 16
  ret void
}

define void @test_ui8_to_fp(i8 %x, ptr %p) {
; X64-LABEL: test_ui8_to_fp:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movzbl %dil, %eax
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    filds -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstps (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i8 %x to float
  store float %conv, ptr %p, align 4
  ret void
}

define void @test_ui8_to_fp_double(i8 %x, ptr %p) {
; X64-LABEL: test_ui8_to_fp_double:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movzbl %dil, %eax
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    filds -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstpl (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i8 %x to double
  store double %conv, ptr %p, align 8
  ret void
}

define void @test_ui8_to_fp_x86_fp80(i8 %x, ptr %p) {
; X64-LABEL: test_ui8_to_fp_x86_fp80:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movzbl %dil, %eax
; X64-NEXT:    movw %ax, -{{[0-9]+}}(%rsp)
; X64-NEXT:    filds -{{[0-9]+}}(%rsp)
; X64-NEXT:    fstpt (%rsi)
; X64-NEXT:    retq
entry:
  %conv = uitofp i8 %x to x86_fp80
  store x86_fp80 %conv, ptr %p, align 16
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; GISEL-X64: {{.*}}
; SDAG-X64: {{.*}}
