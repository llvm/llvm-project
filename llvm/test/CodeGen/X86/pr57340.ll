; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown | FileCheck %s

define void @main.41() local_unnamed_addr #1 {
; CHECK-LABEL: main.41:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vpbroadcastw (%rax), %xmm0
; CHECK-NEXT:    vmovdqu (%rax), %ymm1
; CHECK-NEXT:    vinserti128 $1, %xmm0, %ymm0, %ymm2
; CHECK-NEXT:    vpmovsxbw {{.*#+}} ymm3 = [31,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]
; CHECK-NEXT:    vpermi2w %ymm2, %ymm1, %ymm3
; CHECK-NEXT:    vmovdqu (%rax), %xmm10
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm1 = [2,3,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
; CHECK-NEXT:    vpshufb %xmm1, %xmm10, %xmm2
; CHECK-NEXT:    vcvtph2ps %xmm2, %xmm2
; CHECK-NEXT:    vpshufb %xmm1, %xmm3, %xmm4
; CHECK-NEXT:    vcvtph2ps %xmm4, %xmm4
; CHECK-NEXT:    vucomiss %xmm4, %xmm2
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k0
; CHECK-NEXT:    kshiftlw $15, %k0, %k0
; CHECK-NEXT:    kshiftrw $14, %k0, %k0
; CHECK-NEXT:    vpmovzxwq {{.*#+}} xmm0 = xmm0[0],zero,zero,zero,xmm0[1],zero,zero,zero
; CHECK-NEXT:    vcvtph2ps %xmm0, %xmm0
; CHECK-NEXT:    vpmovzxwq {{.*#+}} xmm4 = xmm10[0],zero,zero,zero,xmm10[1],zero,zero,zero
; CHECK-NEXT:    vcvtph2ps %xmm4, %xmm11
; CHECK-NEXT:    vucomiss %xmm0, %xmm11
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    andl $1, %eax
; CHECK-NEXT:    kmovw %eax, %k1
; CHECK-NEXT:    korw %k0, %k1, %k0
; CHECK-NEXT:    movw $-5, %ax
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm4 = [4,5,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
; CHECK-NEXT:    vpshufb %xmm4, %xmm3, %xmm5
; CHECK-NEXT:    vcvtph2ps %xmm5, %xmm5
; CHECK-NEXT:    vucomiss %xmm5, %xmm0
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $13, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-9, %ax
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    vpsrlq $48, %xmm3, %xmm5
; CHECK-NEXT:    vcvtph2ps %xmm5, %xmm6
; CHECK-NEXT:    vpsrlq $48, %xmm10, %xmm5
; CHECK-NEXT:    vcvtph2ps %xmm5, %xmm5
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vucomiss %xmm6, %xmm5
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $12, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-17, %ax
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm6 = [8,9,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpshufb %xmm6, %xmm3, %xmm7
; CHECK-NEXT:    vcvtph2ps %xmm7, %xmm7
; CHECK-NEXT:    vucomiss %xmm7, %xmm0
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $11, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-33, %ax
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm7 = [10,11,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
; CHECK-NEXT:    vpshufb %xmm7, %xmm10, %xmm8
; CHECK-NEXT:    vcvtph2ps %xmm8, %xmm8
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpshufb %xmm7, %xmm3, %xmm9
; CHECK-NEXT:    vcvtph2ps %xmm9, %xmm9
; CHECK-NEXT:    vucomiss %xmm9, %xmm8
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $10, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-65, %ax
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    vmovdqa {{.*#+}} xmm9 = [12,13,128,128,128,128,128,128,128,128,128,128,128,128,128,128]
; CHECK-NEXT:    vpshufb %xmm9, %xmm3, %xmm12
; CHECK-NEXT:    vcvtph2ps %xmm12, %xmm12
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vucomiss %xmm12, %xmm0
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $9, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-129, %ax
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpsrldq {{.*#+}} xmm12 = xmm3[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; CHECK-NEXT:    vcvtph2ps %xmm12, %xmm12
; CHECK-NEXT:    vpsrldq {{.*#+}} xmm10 = xmm10[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; CHECK-NEXT:    vcvtph2ps %xmm10, %xmm10
; CHECK-NEXT:    vucomiss %xmm12, %xmm10
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $8, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-257, %ax # imm = 0xFEFF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    vextracti128 $1, %ymm3, %xmm3
; CHECK-NEXT:    vpmovzxwq {{.*#+}} xmm12 = xmm3[0],zero,zero,zero,xmm3[1],zero,zero,zero
; CHECK-NEXT:    vcvtph2ps %xmm12, %xmm12
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vucomiss %xmm12, %xmm11
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $7, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-513, %ax # imm = 0xFDFF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpshufb %xmm1, %xmm3, %xmm1
; CHECK-NEXT:    vcvtph2ps %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm2
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $6, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-1025, %ax # imm = 0xFBFF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpshufb %xmm4, %xmm3, %xmm1
; CHECK-NEXT:    vcvtph2ps %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $5, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-2049, %ax # imm = 0xF7FF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpsrlq $48, %xmm3, %xmm1
; CHECK-NEXT:    vcvtph2ps %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm5
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $4, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-4097, %ax # imm = 0xEFFF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpshufb %xmm6, %xmm3, %xmm1
; CHECK-NEXT:    vcvtph2ps %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $3, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-8193, %ax # imm = 0xDFFF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vpshufb %xmm7, %xmm3, %xmm1
; CHECK-NEXT:    vcvtph2ps %xmm1, %xmm1
; CHECK-NEXT:    vucomiss %xmm1, %xmm8
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    kshiftrw $2, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    movw $-16385, %ax # imm = 0xBFFF
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    vpshufb %xmm9, %xmm3, %xmm1
; CHECK-NEXT:    vcvtph2ps %xmm1, %xmm1
; CHECK-NEXT:    kandw %k1, %k0, %k0
; CHECK-NEXT:    vucomiss %xmm1, %xmm0
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $14, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k0
; CHECK-NEXT:    kshiftlw $1, %k0, %k0
; CHECK-NEXT:    vpsrldq {{.*#+}} xmm0 = xmm3[14,15],zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero,zero
; CHECK-NEXT:    vcvtph2ps %xmm0, %xmm0
; CHECK-NEXT:    kshiftrw $1, %k0, %k0
; CHECK-NEXT:    vucomiss %xmm0, %xmm10
; CHECK-NEXT:    setnp %al
; CHECK-NEXT:    sete %cl
; CHECK-NEXT:    testb %al, %cl
; CHECK-NEXT:    setne %al
; CHECK-NEXT:    kmovd %eax, %k1
; CHECK-NEXT:    kshiftlw $15, %k1, %k1
; CHECK-NEXT:    korw %k1, %k0, %k1
; CHECK-NEXT:    vmovdqu8 {{.*#+}} xmm0 {%k1} {z} = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
; CHECK-NEXT:    vmovdqa %xmm0, (%rax)
; CHECK-NEXT:    vzeroupper
; CHECK-NEXT:    retq
entry:
  %.pre = load half, ptr undef, align 16
  %vector.recur.init = insertelement <16 x half> poison, half %.pre, i64 15
  %wide.load = load <16 x half>, ptr undef, align 2
  %0 = shufflevector <16 x half> %vector.recur.init, <16 x half> %wide.load, <16 x i32> <i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30>
  %1 = fcmp oeq <16 x half> %wide.load, %0
  %2 = zext <16 x i1> %1 to <16 x i8>
  store <16 x i8> %2, ptr undef, align 16
  ret void
}

attributes #1 = { nounwind uwtable "target-cpu"="skx" }
