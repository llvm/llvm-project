; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-linux-gnu -mattr=avxneconvert | FileCheck %s --check-prefixes=FTZDAZ
; RUN: llc < %s -mtriple=x86_64-linux-gnu -denormal-fp-math-bf16=ieee -mattr=avxneconvert | FileCheck %s --check-prefixes=NOFTZDAZ
; RUN: llc < %s -mtriple=x86_64-linux-gnu -denormal-fp-math-bf16=preserve-sign -mattr=avxneconvert | FileCheck %s --check-prefixes=FTZDAZ
; RUN: llc < %s -mtriple=x86_64-linux-gnu -denormal-fp-math=ieee -mattr=avxneconvert | FileCheck %s --check-prefixes=FTZDAZ
; RUN: llc < %s -mtriple=x86_64-linux-gnu -denormal-fp-math=ieee -denormal-fp-math-bf16=ieee -mattr=avxneconvert | FileCheck %s --check-prefixes=NOFTZDAZ

define void @add_default_attr(ptr %pa, ptr %pb, ptr %pc) nounwind {
; FTZDAZ-LABEL: add_default_attr:
; FTZDAZ:       # %bb.0:
; FTZDAZ-NEXT:    movzwl (%rsi), %eax
; FTZDAZ-NEXT:    shll $16, %eax
; FTZDAZ-NEXT:    vmovd %eax, %xmm0
; FTZDAZ-NEXT:    movzwl (%rdi), %eax
; FTZDAZ-NEXT:    shll $16, %eax
; FTZDAZ-NEXT:    vmovd %eax, %xmm1
; FTZDAZ-NEXT:    vaddss %xmm0, %xmm1, %xmm0
; FTZDAZ-NEXT:    {vex} vcvtneps2bf16 %xmm0, %xmm0
; FTZDAZ-NEXT:    vpextrw $0, %xmm0, (%rdx)
; FTZDAZ-NEXT:    retq
;
; NOFTZDAZ-LABEL: add_default_attr:
; NOFTZDAZ:       # %bb.0:
; NOFTZDAZ-NEXT:    pushq %rbx
; NOFTZDAZ-NEXT:    movq %rdx, %rbx
; NOFTZDAZ-NEXT:    movzwl (%rsi), %eax
; NOFTZDAZ-NEXT:    shll $16, %eax
; NOFTZDAZ-NEXT:    vmovd %eax, %xmm0
; NOFTZDAZ-NEXT:    movzwl (%rdi), %eax
; NOFTZDAZ-NEXT:    shll $16, %eax
; NOFTZDAZ-NEXT:    vmovd %eax, %xmm1
; NOFTZDAZ-NEXT:    vaddss %xmm0, %xmm1, %xmm0
; NOFTZDAZ-NEXT:    callq __truncsfbf2@PLT
; NOFTZDAZ-NEXT:    vpextrw $0, %xmm0, (%rbx)
; NOFTZDAZ-NEXT:    popq %rbx
; NOFTZDAZ-NEXT:    retq
  %a = load bfloat, ptr %pa
  %b = load bfloat, ptr %pb
  %add = fadd bfloat %a, %b
  store bfloat %add, ptr %pc
  ret void
}

define void @add_no_ftz_daz_attr(ptr %pa, ptr %pb, ptr %pc) nounwind "denormal-fp-math-bf16"="ieee,ieee" {
; FTZDAZ-LABEL: add_no_ftz_daz_attr:
; FTZDAZ:       # %bb.0:
; FTZDAZ-NEXT:    movzwl (%rsi), %eax
; FTZDAZ-NEXT:    shll $16, %eax
; FTZDAZ-NEXT:    vmovd %eax, %xmm0
; FTZDAZ-NEXT:    movzwl (%rdi), %eax
; FTZDAZ-NEXT:    shll $16, %eax
; FTZDAZ-NEXT:    vmovd %eax, %xmm1
; FTZDAZ-NEXT:    vaddss %xmm0, %xmm1, %xmm0
; FTZDAZ-NEXT:    {vex} vcvtneps2bf16 %xmm0, %xmm0
; FTZDAZ-NEXT:    vpextrw $0, %xmm0, (%rdx)
; FTZDAZ-NEXT:    retq
;
; NOFTZDAZ-LABEL: add_no_ftz_daz_attr:
; NOFTZDAZ:       # %bb.0:
; NOFTZDAZ-NEXT:    pushq %rbx
; NOFTZDAZ-NEXT:    movq %rdx, %rbx
; NOFTZDAZ-NEXT:    movzwl (%rsi), %eax
; NOFTZDAZ-NEXT:    shll $16, %eax
; NOFTZDAZ-NEXT:    vmovd %eax, %xmm0
; NOFTZDAZ-NEXT:    movzwl (%rdi), %eax
; NOFTZDAZ-NEXT:    shll $16, %eax
; NOFTZDAZ-NEXT:    vmovd %eax, %xmm1
; NOFTZDAZ-NEXT:    vaddss %xmm0, %xmm1, %xmm0
; NOFTZDAZ-NEXT:    callq __truncsfbf2@PLT
; NOFTZDAZ-NEXT:    vpextrw $0, %xmm0, (%rbx)
; NOFTZDAZ-NEXT:    popq %rbx
; NOFTZDAZ-NEXT:    retq
  %a = load bfloat, ptr %pa
  %b = load bfloat, ptr %pb
  %add = fadd bfloat %a, %b
  store bfloat %add, ptr %pc
  ret void
}
