; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i386-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=CHECK,X86
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=-sse2 | FileCheck %s --check-prefixes=CHECK,X64
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=-sse2,+avoid-mfence | FileCheck %s --check-prefix=X64-NO-MFENCE

; It doesn't matter if an x86-64 target has specified "no-sse2"; we still can use mfence.

define void @test() {
; CHECK-LABEL: test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mfence
; CHECK-NEXT:    ret{{[l|q]}}
  fence seq_cst
  ret void
}

define i32 @fence(ptr %ptr) {
; X86-LABEL: fence:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    mfence
; X86-NEXT:    movl (%eax), %eax
; X86-NEXT:    retl
;
; X64-LABEL: fence:
; X64:       # %bb.0:
; X64-NEXT:    mfence
; X64-NEXT:    movl (%rdi), %eax
; X64-NEXT:    retq
;
; X64-NO-MFENCE-LABEL: fence:
; X64-NO-MFENCE:       # %bb.0:
; X64-NO-MFENCE-NEXT:    lock orl $0, -{{[0-9]+}}(%rsp)
; X64-NO-MFENCE-NEXT:    movl (%rdi), %eax
; X64-NO-MFENCE-NEXT:    retq
  %atomic = atomicrmw add ptr %ptr, i32 0 seq_cst
  ret i32 %atomic
}

define void @mfence() nounwind {
; X32-LABEL: mfence:
; X32:       # %bb.0:
; X32-NEXT:    mfence
; X32-NEXT:    retl
;
; X64-LABEL: mfence:
; X64:       # %bb.0:
; X64-NEXT:    mfence
; X64-NEXT:    retq
;
; X64-NO-MFENCE-LABEL: mfence:
; X64-NO-MFENCE:       # %bb.0:
; X64-NO-MFENCE-NEXT:    mfence
; X64-NO-MFENCE-NEXT:    retq
  call void @llvm.x86.sse2.mfence()
  ret void
}
declare void @llvm.x86.sse2.mfence() nounwind readnone

