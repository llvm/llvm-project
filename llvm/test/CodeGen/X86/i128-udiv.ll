; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i686-- | FileCheck %s --check-prefix=X86
; RUN: llc < %s -mtriple=x86_64-- | FileCheck %s --check-prefix=X64

; Make sure none of these crash, and that the power-of-two transformations
; trigger correctly.

define i128 @test1(i128 %x) nounwind {
; X86-LABEL: test1:
; X86:       # %bb.0:
; X86-NEXT:    pushl %ebp
; X86-NEXT:    movl %esp, %ebp
; X86-NEXT:    andl $-16, %esp
; X86-NEXT:    subl $16, %esp
; X86-NEXT:    movl 8(%ebp), %eax
; X86-NEXT:    movl 32(%ebp), %ecx
; X86-NEXT:    movl 36(%ebp), %edx
; X86-NEXT:    shrdl $2, %edx, %ecx
; X86-NEXT:    shrl $2, %edx
; X86-NEXT:    movl %edx, 4(%eax)
; X86-NEXT:    movl %ecx, (%eax)
; X86-NEXT:    movl $0, 12(%eax)
; X86-NEXT:    movl $0, 8(%eax)
; X86-NEXT:    movl %ebp, %esp
; X86-NEXT:    popl %ebp
; X86-NEXT:    retl $4
;
; X64-LABEL: test1:
; X64:       # %bb.0:
; X64-NEXT:    movq %rsi, %rax
; X64-NEXT:    shrq $2, %rax
; X64-NEXT:    xorl %edx, %edx
; X64-NEXT:    retq
  %tmp = udiv i128 %x, 73786976294838206464
  ret i128 %tmp
}

define i128 @test2(i128 %x) nounwind {
; X86-LABEL: test2:
; X86 doesn't have __divti3, so the urem is expanded into a loop.
; X86: udiv-do-while
;
; X64-LABEL: test2:
; X64:       # %bb.0:
; X64-NEXT:    shrq $2, %rsi
; X64-NEXT:    movl $4, %ecx
; X64-NEXT:    movq %rsi, %rax
; X64-NEXT:    mulq %rcx
; X64-NEXT:    movq %rax, %rcx
; X64-NEXT:    movq %rdx, %rdi
; X64-NEXT:    movl $17, %edx
; X64-NEXT:    movq %rsi, %rax
; X64-NEXT:    mulq %rdx
; X64-NEXT:    addq %rcx, %rdx
; X64-NEXT:    adcq $0, %rdi
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    xorl %edx, %edx
; X64-NEXT:    retq
  %tmp = udiv i128 %x, -73786976294838206464
  ret i128 %tmp
}

define i128 @test3(i128 %x) nounwind {
; X86-LABEL: test3:
; X86 doesn't have __divti3, so the urem is expanded into a loop.
; X86: udiv-do-while
;
; X64-LABEL: test3:
; X64:       # %bb.0:
; X64-NEXT:    movabsq $4611686018427387905, %r9 # imm = 0x4000000000000001
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    mulq %r9
; X64-NEXT:    movq %rax, %rcx
; X64-NEXT:    movq %rdx, %r8
; X64-NEXT:    movl $5, %r10d
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    mulq %r10
; X64-NEXT:    movq %rdx, %rdi
; X64-NEXT:    addq %rcx, %rdi
; X64-NEXT:    adcq $0, %r8
; X64-NEXT:    movq %rsi, %rax
; X64-NEXT:    mulq %r9
; X64-NEXT:    movq %rdx, %rcx
; X64-NEXT:    movq %rax, %r9
; X64-NEXT:    movq %rsi, %rax
; X64-NEXT:    mulq %r10
; X64-NEXT:    addq %rdi, %rax
; X64-NEXT:    adcq %r8, %rdx
; X64-NEXT:    adcq $0, %rcx
; X64-NEXT:    addq %r9, %rdx
; X64-NEXT:    adcq $0, %rcx
; X64-NEXT:    shrq $62, %rcx
; X64-NEXT:    movq %rcx, %rax
; X64-NEXT:    xorl %edx, %edx
; X64-NEXT:    retq
  %tmp = udiv i128 %x, -73786976294838206467
  ret i128 %tmp
}
