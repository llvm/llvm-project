; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=i686-linux-gnu | FileCheck %s --check-prefixes=X86,SDAG-X86
; RUN: llc < %s -mtriple=i686-linux-gnu -fast-isel -fast-isel-abort=1 | FileCheck %s --check-prefixes=X86,FASTISEL-X86
; RUN: llc < %s -mtriple=i686-linux-gnu -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes=GISEL-X86
; RUN: llc < %s -mtriple=x86_64-linux-gnu | FileCheck %s --check-prefixes=SDAG-X64
; RUN: llc < %s -mtriple=x86_64-linux-gnu -fast-isel -fast-isel-abort=1 | FileCheck %s --check-prefixes=FASTISEL-X64
; RUN: llc < %s -mtriple=x86_64-linux-gnu -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes=GISEL-X64

define i64 @test_llround_i64_f32(float %x) nounwind {
; X86-LABEL: test_llround_i64_f32:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fstps (%esp)
; X86-NEXT:    calll llroundf
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_llround_i64_f32:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    subl $12, %esp
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl %eax, (%esp)
; GISEL-X86-NEXT:    calll llroundf
; GISEL-X86-NEXT:    addl $12, %esp
; GISEL-X86-NEXT:    retl
;
; SDAG-X64-LABEL: test_llround_i64_f32:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    jmp llroundf@PLT # TAILCALL
;
; FASTISEL-X64-LABEL: test_llround_i64_f32:
; FASTISEL-X64:       # %bb.0:
; FASTISEL-X64-NEXT:    pushq %rax
; FASTISEL-X64-NEXT:    callq llroundf@PLT
; FASTISEL-X64-NEXT:    popq %rcx
; FASTISEL-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_llround_i64_f32:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    pushq %rax
; GISEL-X64-NEXT:    callq llroundf
; GISEL-X64-NEXT:    popq %rcx
; GISEL-X64-NEXT:    retq
  %conv = call i64 @llvm.llround.i64.f32(float %x)
  ret i64 %conv
}

define i64 @test_llround_i64_f64(double %x) nounwind {
; X86-LABEL: test_llround_i64_f64:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl (%esp)
; X86-NEXT:    calll llround
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_llround_i64_f64:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    subl $12, %esp
; GISEL-X86-NEXT:    leal {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl 4(%eax), %eax
; GISEL-X86-NEXT:    xorl %edx, %edx
; GISEL-X86-NEXT:    addl %esp, %edx
; GISEL-X86-NEXT:    movl %ecx, (%esp)
; GISEL-X86-NEXT:    movl %eax, 4(%edx)
; GISEL-X86-NEXT:    calll llround
; GISEL-X86-NEXT:    addl $12, %esp
; GISEL-X86-NEXT:    retl
;
; SDAG-X64-LABEL: test_llround_i64_f64:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    jmp llround@PLT # TAILCALL
;
; FASTISEL-X64-LABEL: test_llround_i64_f64:
; FASTISEL-X64:       # %bb.0:
; FASTISEL-X64-NEXT:    pushq %rax
; FASTISEL-X64-NEXT:    callq llround@PLT
; FASTISEL-X64-NEXT:    popq %rcx
; FASTISEL-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_llround_i64_f64:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    pushq %rax
; GISEL-X64-NEXT:    callq llround
; GISEL-X64-NEXT:    popq %rcx
; GISEL-X64-NEXT:    retq
  %conv = call i64 @llvm.llround.i64.f64(double %x)
  ret i64 %conv
}

define i64 @test_llround_i64_f80(x86_fp80 %x) nounwind {
; X86-LABEL: test_llround_i64_f80:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    fldt {{[0-9]+}}(%esp)
; X86-NEXT:    fstpt (%esp)
; X86-NEXT:    calll llroundl
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_llround_i64_f80:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    subl $12, %esp
; GISEL-X86-NEXT:    fldt {{[0-9]+}}(%esp)
; GISEL-X86-NEXT:    fstpt (%esp)
; GISEL-X86-NEXT:    calll llroundl
; GISEL-X86-NEXT:    addl $12, %esp
; GISEL-X86-NEXT:    retl
;
; SDAG-X64-LABEL: test_llround_i64_f80:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    jmp llroundl@PLT # TAILCALL
;
; FASTISEL-X64-LABEL: test_llround_i64_f80:
; FASTISEL-X64:       # %bb.0:
; FASTISEL-X64-NEXT:    subq $24, %rsp
; FASTISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; FASTISEL-X64-NEXT:    fstpt (%rsp)
; FASTISEL-X64-NEXT:    callq llroundl@PLT
; FASTISEL-X64-NEXT:    addq $24, %rsp
; FASTISEL-X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_llround_i64_f80:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    subq $24, %rsp
; GISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fstpt (%rsp)
; GISEL-X64-NEXT:    callq llroundl
; GISEL-X64-NEXT:    addq $24, %rsp
; GISEL-X64-NEXT:    retq
  %conv = call i64 @llvm.llround.i64.f80(x86_fp80 %x)
  ret i64 %conv
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; FASTISEL-X86: {{.*}}
; SDAG-X86: {{.*}}
