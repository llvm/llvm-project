; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse | FileCheck %s --check-prefixes=SSE
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefixes=SSE2
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+ssse3 | FileCheck %s --check-prefixes=SSSE3
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse4.1 | FileCheck %s --check-prefixes=SSE41
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx | FileCheck %s --check-prefixes=AVX1
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx2 | FileCheck %s --check-prefixes=AVX2

define <2 x i64> @test1(ptr%ptr) {
; SSE-LABEL: test1:
; SSE:       # %bb.0: # %entry
; SSE-NEXT:    movzbl (%rdi), %eax
; SSE-NEXT:    movzbl %al, %ecx
; SSE-NEXT:    shrb %al
; SSE-NEXT:    movzbl %al, %eax
; SSE-NEXT:    negl %eax
; SSE-NEXT:    movd %eax, %xmm1
; SSE-NEXT:    andl $1, %ecx
; SSE-NEXT:    negl %ecx
; SSE-NEXT:    movd %ecx, %xmm0
; SSE-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE-NEXT:    retq
;
; SSE2-LABEL: test1:
; SSE2:       # %bb.0: # %entry
; SSE2-NEXT:    movzbl (%rdi), %eax
; SSE2-NEXT:    movzbl %al, %ecx
; SSE2-NEXT:    shrb %al
; SSE2-NEXT:    movzbl %al, %eax
; SSE2-NEXT:    negl %eax
; SSE2-NEXT:    movd %eax, %xmm1
; SSE2-NEXT:    andl $1, %ecx
; SSE2-NEXT:    negl %ecx
; SSE2-NEXT:    movd %ecx, %xmm0
; SSE2-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE2-NEXT:    retq
;
; SSSE3-LABEL: test1:
; SSSE3:       # %bb.0: # %entry
; SSSE3-NEXT:    movzbl (%rdi), %eax
; SSSE3-NEXT:    movzbl %al, %ecx
; SSSE3-NEXT:    shrb %al
; SSSE3-NEXT:    movzbl %al, %eax
; SSSE3-NEXT:    negl %eax
; SSSE3-NEXT:    movd %eax, %xmm1
; SSSE3-NEXT:    andl $1, %ecx
; SSSE3-NEXT:    negl %ecx
; SSSE3-NEXT:    movd %ecx, %xmm0
; SSSE3-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSSE3-NEXT:    retq
;
; SSE41-LABEL: test1:
; SSE41:       # %bb.0: # %entry
; SSE41-NEXT:    movzbl (%rdi), %eax
; SSE41-NEXT:    movzbl %al, %ecx
; SSE41-NEXT:    shrb %al
; SSE41-NEXT:    movzbl %al, %eax
; SSE41-NEXT:    negl %eax
; SSE41-NEXT:    movd %eax, %xmm1
; SSE41-NEXT:    andl $1, %ecx
; SSE41-NEXT:    negl %ecx
; SSE41-NEXT:    movd %ecx, %xmm0
; SSE41-NEXT:    punpcklqdq {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE41-NEXT:    retq
;
; AVX1-LABEL: test1:
; AVX1:       # %bb.0: # %entry
; AVX1-NEXT:    movzbl (%rdi), %eax
; AVX1-NEXT:    movzbl %al, %ecx
; AVX1-NEXT:    shrb %al
; AVX1-NEXT:    movzbl %al, %eax
; AVX1-NEXT:    negl %eax
; AVX1-NEXT:    vmovd %eax, %xmm0
; AVX1-NEXT:    andl $1, %ecx
; AVX1-NEXT:    negl %ecx
; AVX1-NEXT:    vmovd %ecx, %xmm1
; AVX1-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm1[0],xmm0[0]
; AVX1-NEXT:    retq
;
; AVX2-LABEL: test1:
; AVX2:       # %bb.0: # %entry
; AVX2-NEXT:    movzbl (%rdi), %eax
; AVX2-NEXT:    movzbl %al, %ecx
; AVX2-NEXT:    shrb %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    negl %eax
; AVX2-NEXT:    vmovd %eax, %xmm0
; AVX2-NEXT:    andl $1, %ecx
; AVX2-NEXT:    negl %ecx
; AVX2-NEXT:    vmovd %ecx, %xmm1
; AVX2-NEXT:    vpunpcklqdq {{.*#+}} xmm0 = xmm1[0],xmm0[0]
; AVX2-NEXT:    retq
entry:
 %X = load <2 x i1>, ptr %ptr
 %Y = sext <2 x i1> %X to <2 x i64>
 ret <2 x i64> %Y
}

