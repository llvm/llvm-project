; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; We don't handle fp16 and fp128 types for "-global-isel" so we allow fallbacks in these cases to SDAG.
; RUN: llc < %s -mtriple=i686-linux-gnu -global-isel=0 | FileCheck %s --check-prefixes=X86,SDAG-X86
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -global-isel=0 | FileCheck %s --check-prefixes=X64,SDAG-X64
; RUN: llc < %s -mtriple=i686-linux-gnu -global-isel -global-isel-abort=2 | FileCheck %s --check-prefixes=X86,GISEL-X86
; RUN: llc < %s -mtriple=x86_64-linux-gnu -global-isel -global-isel-abort=2 | FileCheck %s --check-prefixes=X64,GISEL-X64

define half @use_tanf16(half %a) nounwind {
; X86-LABEL: use_tanf16:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl %eax, (%esp)
; X86-NEXT:    calll __gnu_h2f_ieee
; X86-NEXT:    fstps (%esp)
; X86-NEXT:    calll tanf
; X86-NEXT:    fstps (%esp)
; X86-NEXT:    calll __gnu_f2h_ieee
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; X64-LABEL: use_tanf16:
; X64:       # %bb.0:
; X64-NEXT:    pushq %rax
; X64-NEXT:    callq __extendhfsf2@PLT
; X64-NEXT:    callq tanf@PLT
; X64-NEXT:    callq __truncsfhf2@PLT
; X64-NEXT:    popq %rax
; X64-NEXT:    retq
  %x = call half @llvm.tan.f16(half %a)
  ret half %x
}

define float @use_tanf32(float %a) nounwind {
; SDAG-X86-LABEL: use_tanf32:
; SDAG-X86:       # %bb.0:
; SDAG-X86-NEXT:    subl $12, %esp
; SDAG-X86-NEXT:    flds {{[0-9]+}}(%esp)
; SDAG-X86-NEXT:    fstps (%esp)
; SDAG-X86-NEXT:    calll tanf
; SDAG-X86-NEXT:    addl $12, %esp
; SDAG-X86-NEXT:    retl
;
; SDAG-X64-LABEL: use_tanf32:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    jmp tanf@PLT # TAILCALL
;
; GISEL-X86-LABEL: use_tanf32:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    subl $12, %esp
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl %eax, (%esp)
; GISEL-X86-NEXT:    calll tanf
; GISEL-X86-NEXT:    addl $12, %esp
; GISEL-X86-NEXT:    retl
;
; GISEL-X64-LABEL: use_tanf32:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    pushq %rax
; GISEL-X64-NEXT:    callq tanf
; GISEL-X64-NEXT:    popq %rax
; GISEL-X64-NEXT:    retq
  %x = call float @llvm.tan.f32(float %a)
  ret float %x
}

define double @use_tanf64(double %a) nounwind {
; SDAG-X86-LABEL: use_tanf64:
; SDAG-X86:       # %bb.0:
; SDAG-X86-NEXT:    subl $12, %esp
; SDAG-X86-NEXT:    fldl {{[0-9]+}}(%esp)
; SDAG-X86-NEXT:    fstpl (%esp)
; SDAG-X86-NEXT:    calll tan
; SDAG-X86-NEXT:    addl $12, %esp
; SDAG-X86-NEXT:    retl
;
; SDAG-X64-LABEL: use_tanf64:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    jmp tan@PLT # TAILCALL
;
; GISEL-X86-LABEL: use_tanf64:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    subl $12, %esp
; GISEL-X86-NEXT:    leal {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; GISEL-X86-NEXT:    movl 4(%eax), %eax
; GISEL-X86-NEXT:    xorl %edx, %edx
; GISEL-X86-NEXT:    addl %esp, %edx
; GISEL-X86-NEXT:    movl %ecx, (%esp)
; GISEL-X86-NEXT:    movl %eax, 4(%edx)
; GISEL-X86-NEXT:    calll tan
; GISEL-X86-NEXT:    addl $12, %esp
; GISEL-X86-NEXT:    retl
;
; GISEL-X64-LABEL: use_tanf64:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    pushq %rax
; GISEL-X64-NEXT:    callq tan
; GISEL-X64-NEXT:    popq %rax
; GISEL-X64-NEXT:    retq
  %x = call double @llvm.tan.f64(double %a)
  ret double %x
}

define x86_fp80 @use_tanf80(x86_fp80 %a) nounwind {
; X86-LABEL: use_tanf80:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    fldt {{[0-9]+}}(%esp)
; X86-NEXT:    fstpt (%esp)
; X86-NEXT:    calll tanl
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; SDAG-X64-LABEL: use_tanf80:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    subq $24, %rsp
; SDAG-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; SDAG-X64-NEXT:    fstpt (%rsp)
; SDAG-X64-NEXT:    callq tanl@PLT
; SDAG-X64-NEXT:    addq $24, %rsp
; SDAG-X64-NEXT:    retq
;
; GISEL-X64-LABEL: use_tanf80:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    subq $24, %rsp
; GISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fstpt (%rsp)
; GISEL-X64-NEXT:    callq tanl
; GISEL-X64-NEXT:    addq $24, %rsp
; GISEL-X64-NEXT:    retq
  %x = call x86_fp80 @llvm.tan.f80(x86_fp80 %a)
  ret x86_fp80 %x
}

define fp128 @use_tanfp128(fp128 %a) nounwind {
; X86-LABEL: use_tanfp128:
; X86:       # %bb.0:
; X86-NEXT:    pushl %edi
; X86-NEXT:    pushl %esi
; X86-NEXT:    subl $20, %esp
; X86-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    leal {{[0-9]+}}(%esp), %eax
; X86-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NEXT:    pushl {{[0-9]+}}(%esp)
; X86-NEXT:    pushl %eax
; X86-NEXT:    calll tanl
; X86-NEXT:    addl $28, %esp
; X86-NEXT:    movl (%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X86-NEXT:    movl %edi, 12(%esi)
; X86-NEXT:    movl %edx, 8(%esi)
; X86-NEXT:    movl %ecx, 4(%esi)
; X86-NEXT:    movl %eax, (%esi)
; X86-NEXT:    movl %esi, %eax
; X86-NEXT:    addl $20, %esp
; X86-NEXT:    popl %esi
; X86-NEXT:    popl %edi
; X86-NEXT:    retl $4
;
; SDAG-X64-LABEL: use_tanfp128:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    jmp tanf128@PLT # TAILCALL
;
; GISEL-X64-LABEL: use_tanfp128:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    pushq %rax
; GISEL-X64-NEXT:    callq tanf128
; GISEL-X64-NEXT:    popq %rax
; GISEL-X64-NEXT:    retq
  %x = call fp128 @llvm.tan.f128(fp128 %a)
  ret fp128 %x
}

define ppc_fp128 @use_tanppc_fp128(ppc_fp128 %a) nounwind {
; X86-LABEL: use_tanppc_fp128:
; X86:       # %bb.0:
; X86-NEXT:    subl $92, %esp
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl %ecx, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl %ecx, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl (%esp)
; X86-NEXT:    calll tanl
; X86-NEXT:    fxch %st(1)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl %ecx, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X86-NEXT:    movl %ecx, {{[0-9]+}}(%esp)
; X86-NEXT:    movl %eax, {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    addl $92, %esp
; X86-NEXT:    retl
;
; X64-LABEL: use_tanppc_fp128:
; X64:       # %bb.0:
; X64-NEXT:    pushq %rax
; X64-NEXT:    callq tanl@PLT
; X64-NEXT:    popq %rax
; X64-NEXT:    retq
  %x = call ppc_fp128 @llvm.tan.ppcf128(ppc_fp128 %a)
  ret ppc_fp128 %x
}

declare half @llvm.tan.f16(half)
declare float @llvm.tan.f32(float)
declare double @llvm.tan.f64(double)
declare x86_fp80 @llvm.tan.f80(x86_fp80)
declare fp128 @llvm.tan.f128(fp128)
declare ppc_fp128 @llvm.tan.ppcf128(ppc_fp128)
