; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --no_x86_scrub_sp
; RUN: llc -mtriple=x86_64-linux-android -verify-machineinstrs < %s | FileCheck -check-prefix=CHECK-X64 %s
; RUN: llc -mtriple=i686-linux-android -verify-machineinstrs < %s | FileCheck -check-prefix=CHECK-X86 %s
; RUN: llc -mtriple=x86_64-linux-gnux32 -verify-machineinstrs < %s | FileCheck -check-prefix=CHECK-X32 %s

define i32 @foo() local_unnamed_addr #0 {
; CHECK-X64-LABEL: foo:
; CHECK-X64:       # %bb.0:
; CHECK-X64-NEXT:    movabsq $-2399997952, %r11 # imm = 0xFFFFFFFF70F2F000
; CHECK-X64-NEXT:    addq %rsp, %r11
; CHECK-X64-NEXT:    .cfi_def_cfa_register %r11
; CHECK-X64-NEXT:    .cfi_adjust_cfa_offset 2399997952
; CHECK-X64-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-X64-NEXT:    subq $4096, %rsp # imm = 0x1000
; CHECK-X64-NEXT:    movq $0, (%rsp)
; CHECK-X64-NEXT:    cmpq %r11, %rsp
; CHECK-X64-NEXT:    jne .LBB0_1
; CHECK-X64-NEXT:  # %bb.2:
; CHECK-X64-NEXT:    subq $1944, %rsp # imm = 0x798
; CHECK-X64-NEXT:    .cfi_def_cfa_register %rsp
; CHECK-X64-NEXT:    .cfi_def_cfa_offset 2399999904
; CHECK-X64-NEXT:    movl $1, 280(%rsp)
; CHECK-X64-NEXT:    movl $1, 28680(%rsp)
; CHECK-X64-NEXT:    movl -112(%rsp), %eax
; CHECK-X64-NEXT:    movl $2399999896, %ecx # imm = 0x8F0D1798
; CHECK-X64-NEXT:    addq %rcx, %rsp
; CHECK-X64-NEXT:    .cfi_def_cfa_offset 8
; CHECK-X64-NEXT:    retq
;
; CHECK-X86-LABEL: foo:
; CHECK-X86:       # %bb.0:
; CHECK-X86-NEXT:    movl %esp, %eax
; CHECK-X86-NEXT:    subl $2399997952, %eax # imm = 0x8F0D1000
; CHECK-X86-NEXT:    .cfi_def_cfa_register %eax
; CHECK-X86-NEXT:    .cfi_adjust_cfa_offset 2399997952
; CHECK-X86-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-X86-NEXT:    subl $4096, %esp # imm = 0x1000
; CHECK-X86-NEXT:    movl $0, (%esp)
; CHECK-X86-NEXT:    cmpl %eax, %esp
; CHECK-X86-NEXT:    jne .LBB0_1
; CHECK-X86-NEXT:  # %bb.2:
; CHECK-X86-NEXT:    subl $2076, %esp # imm = 0x81C
; CHECK-X86-NEXT:    .cfi_def_cfa_register %esp
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 2400000032
; CHECK-X86-NEXT:    movl $1, 408(%esp)
; CHECK-X86-NEXT:    movl $1, 28808(%esp)
; CHECK-X86-NEXT:    movl 16(%esp), %eax
; CHECK-X86-NEXT:    movl $2400000028, %ecx # imm = 0x8F0D181C
; CHECK-X86-NEXT:    addl %ecx, %esp
; CHECK-X86-NEXT:    .cfi_def_cfa_offset 4
; CHECK-X86-NEXT:    retl
;
; CHECK-X32-LABEL: foo:
; CHECK-X32:       # %bb.0:
; CHECK-X32-NEXT:    movl %esp, %r11d
; CHECK-X32-NEXT:    subl $2399997952, %r11d # imm = 0x8F0D1000
; CHECK-X32-NEXT:    .cfi_def_cfa_register %r11
; CHECK-X32-NEXT:    .cfi_adjust_cfa_offset 2399997952
; CHECK-X32-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-X32-NEXT:    subl $4096, %esp # imm = 0x1000
; CHECK-X32-NEXT:    movq $0, (%esp)
; CHECK-X32-NEXT:    cmpl %r11d, %esp
; CHECK-X32-NEXT:    jne .LBB0_1
; CHECK-X32-NEXT:  # %bb.2:
; CHECK-X32-NEXT:    subl $1944, %esp # imm = 0x798
; CHECK-X32-NEXT:    .cfi_def_cfa_register %rsp
; CHECK-X32-NEXT:    .cfi_def_cfa_offset 2399999904
; CHECK-X32-NEXT:    movl $1, 280(%esp)
; CHECK-X32-NEXT:    movl $1, 28680(%esp)
; CHECK-X32-NEXT:    movl -112(%esp), %eax
; CHECK-X32-NEXT:    movl $2399999896, %ecx # imm = 0x8F0D1798
; CHECK-X32-NEXT:    addl %ecx, %esp
; CHECK-X32-NEXT:    .cfi_def_cfa_offset 8
; CHECK-X32-NEXT:    retq
  %a = alloca i32, i64 600000000, align 16
  %b0 = getelementptr inbounds i32, ptr %a, i64 98
  %b1 = getelementptr inbounds i32, ptr %a, i64 7198
  store volatile i32 1, ptr %b0
  store volatile i32 1, ptr %b1
  %c = load volatile i32, ptr %a
  ret i32 %c
}

attributes #0 =  {"probe-stack"="inline-asm"}
