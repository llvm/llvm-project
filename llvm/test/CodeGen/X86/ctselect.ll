; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-linux-gnu -mattr=+cmov | FileCheck %s --check-prefix=X64
; RUN: llc < %s -mtriple=i386-unknown-linux-gnu -mattr=+cmov | FileCheck %s --check-prefix=X32
; RUN: llc < %s -mtriple=i386-unknown-linux-gnu -mattr=-cmov | FileCheck %s --check-prefix=X32-NOCMOV

; Test basic ct.select functionality for scalar types

define i8 @test_ctselect_i8(i1 %cond, i8 %a, i8 %b) {
; X64-LABEL: test_ctselect_i8:
; X64:       # %bb.0:
; X64-NEXT:    movl %edx, %eax
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovnel %esi, %eax
; X64-NEXT:    # kill: def $al killed $al killed $eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_i8:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    # kill: def $al killed $al killed $eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_i8:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    movzbl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movzbl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %ah
; X32-NOCMOV-NEXT:    movb %ah, %ch
; X32-NOCMOV-NEXT:    negb %ch
; X32-NOCMOV-NEXT:    movb %dl, %al
; X32-NOCMOV-NEXT:    andb %ch, %al
; X32-NOCMOV-NEXT:    notb %ch
; X32-NOCMOV-NEXT:    andb %cl, %ch
; X32-NOCMOV-NEXT:    orb %ch, %al
; X32-NOCMOV-NEXT:    retl
  %result = call i8 @llvm.ct.select.i8(i1 %cond, i8 %a, i8 %b)
  ret i8 %result
}

define i16 @test_ctselect_i16(i1 %cond, i16 %a, i16 %b) {
; X64-LABEL: test_ctselect_i16:
; X64:       # %bb.0:
; X64-NEXT:    movl %edx, %eax
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovnel %esi, %eax
; X64-NEXT:    # kill: def $ax killed $ax killed $eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_i16:
; X32:       # %bb.0:
; X32-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnew {{[0-9]+}}(%esp), %ax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_i16:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movzwl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movzwl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbw %bh, %si
; X32-NOCMOV-NEXT:    negw %si
; X32-NOCMOV-NEXT:    movw %dx, %ax
; X32-NOCMOV-NEXT:    andw %si, %ax
; X32-NOCMOV-NEXT:    notw %si
; X32-NOCMOV-NEXT:    andw %cx, %si
; X32-NOCMOV-NEXT:    orw %si, %ax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call i16 @llvm.ct.select.i16(i1 %cond, i16 %a, i16 %b)
  ret i16 %result
}

define i32 @test_ctselect_i32(i1 %cond, i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_i32:
; X64:       # %bb.0:
; X64-NEXT:    movl %edx, %eax
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovnel %esi, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_i32:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_i32:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i64 @test_ctselect_i64(i1 %cond, i64 %a, i64 %b) {
; X64-LABEL: test_ctselect_i64:
; X64:       # %bb.0:
; X64-NEXT:    movq %rdx, %rax
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovneq %rsi, %rax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_i64:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %edx
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_i64:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebp
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    pushl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 16
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 20
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -20
; X32-NOCMOV-NEXT:    .cfi_offset %edi, -16
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebp, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %esi
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edi
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %ebp
; X32-NOCMOV-NEXT:    negl %ebp
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %ebp, %eax
; X32-NOCMOV-NEXT:    notl %ebp
; X32-NOCMOV-NEXT:    andl %ecx, %ebp
; X32-NOCMOV-NEXT:    orl %ebp, %eax
; X32-NOCMOV-NEXT:    movb %bl, %cl
; X32-NOCMOV-NEXT:    movzbl %cl, %ebp
; X32-NOCMOV-NEXT:    negl %ebp
; X32-NOCMOV-NEXT:    movl %edi, %edx
; X32-NOCMOV-NEXT:    andl %ebp, %edx
; X32-NOCMOV-NEXT:    notl %ebp
; X32-NOCMOV-NEXT:    andl %esi, %ebp
; X32-NOCMOV-NEXT:    orl %ebp, %edx
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 16
; X32-NOCMOV-NEXT:    popl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebp
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call i64 @llvm.ct.select.i64(i1 %cond, i64 %a, i64 %b)
  ret i64 %result
}

define float @test_ctselect_f32(i1 %cond, float %a, float %b) {
; X64-LABEL: test_ctselect_f32:
; X64:       # %bb.0:
; X64-NEXT:    movd %xmm0, %eax
; X64-NEXT:    movd %xmm1, %ecx
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovnel %eax, %ecx
; X64-NEXT:    movd %ecx, %xmm0
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_f32:
; X32:       # %bb.0:
; X32-NEXT:    pushl %edi
; X32-NEXT:    .cfi_def_cfa_offset 8
; X32-NEXT:    pushl %esi
; X32-NEXT:    .cfi_def_cfa_offset 12
; X32-NEXT:    pushl %eax
; X32-NEXT:    .cfi_def_cfa_offset 16
; X32-NEXT:    .cfi_offset %esi, -12
; X32-NEXT:    .cfi_offset %edi, -8
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    sete %al
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NEXT:    movb %al, %ah
; X32-NEXT:    movzbl %ah, %edi
; X32-NEXT:    negl %edi
; X32-NEXT:    movl %edx, %esi
; X32-NEXT:    andl %edi, %esi
; X32-NEXT:    notl %edi
; X32-NEXT:    andl %ecx, %edi
; X32-NEXT:    orl %edi, %esi
; X32-NEXT:    movl %esi, (%esp)
; X32-NEXT:    flds (%esp)
; X32-NEXT:    addl $4, %esp
; X32-NEXT:    .cfi_def_cfa_offset 12
; X32-NEXT:    popl %esi
; X32-NEXT:    .cfi_def_cfa_offset 8
; X32-NEXT:    popl %edi
; X32-NEXT:    .cfi_def_cfa_offset 4
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_f32:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    pushl %eax
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 16
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %edi, -8
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %al
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movb %al, %ah
; X32-NOCMOV-NEXT:    movzbl %ah, %edi
; X32-NOCMOV-NEXT:    negl %edi
; X32-NOCMOV-NEXT:    movl %edx, %esi
; X32-NOCMOV-NEXT:    andl %edi, %esi
; X32-NOCMOV-NEXT:    notl %edi
; X32-NOCMOV-NEXT:    andl %ecx, %edi
; X32-NOCMOV-NEXT:    orl %edi, %esi
; X32-NOCMOV-NEXT:    movl %esi, (%esp)
; X32-NOCMOV-NEXT:    flds (%esp)
; X32-NOCMOV-NEXT:    addl $4, %esp
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call float @llvm.ct.select.f32(i1 %cond, float %a, float %b)
  ret float %result
}

define double @test_ctselect_f64(i1 %cond, double %a, double %b) {
; X64-LABEL: test_ctselect_f64:
; X64:       # %bb.0:
; X64-NEXT:    movq %xmm0, %rax
; X64-NEXT:    movq %xmm1, %rcx
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovneq %rax, %rcx
; X64-NEXT:    movq %rcx, %xmm0
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_f64:
; X32:       # %bb.0:
; X32-NEXT:    pushl %edi
; X32-NEXT:    .cfi_def_cfa_offset 8
; X32-NEXT:    pushl %esi
; X32-NEXT:    .cfi_def_cfa_offset 12
; X32-NEXT:    subl $8, %esp
; X32-NEXT:    .cfi_def_cfa_offset 20
; X32-NEXT:    .cfi_offset %esi, -12
; X32-NEXT:    .cfi_offset %edi, -8
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    sete %al
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NEXT:    movb %al, %ah
; X32-NEXT:    movzbl %ah, %edi
; X32-NEXT:    negl %edi
; X32-NEXT:    movl %edx, %esi
; X32-NEXT:    andl %edi, %esi
; X32-NEXT:    notl %edi
; X32-NEXT:    andl %ecx, %edi
; X32-NEXT:    orl %edi, %esi
; X32-NEXT:    movl %esi, (%esp)
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NEXT:    movb %al, %ah
; X32-NEXT:    movzbl %ah, %edi
; X32-NEXT:    negl %edi
; X32-NEXT:    movl %edx, %esi
; X32-NEXT:    andl %edi, %esi
; X32-NEXT:    notl %edi
; X32-NEXT:    andl %ecx, %edi
; X32-NEXT:    orl %edi, %esi
; X32-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; X32-NEXT:    fldl (%esp)
; X32-NEXT:    addl $8, %esp
; X32-NEXT:    .cfi_def_cfa_offset 12
; X32-NEXT:    popl %esi
; X32-NEXT:    .cfi_def_cfa_offset 8
; X32-NEXT:    popl %edi
; X32-NEXT:    .cfi_def_cfa_offset 4
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_f64:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    subl $8, %esp
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 20
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %edi, -8
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %al
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movb %al, %ah
; X32-NOCMOV-NEXT:    movzbl %ah, %edi
; X32-NOCMOV-NEXT:    negl %edi
; X32-NOCMOV-NEXT:    movl %edx, %esi
; X32-NOCMOV-NEXT:    andl %edi, %esi
; X32-NOCMOV-NEXT:    notl %edi
; X32-NOCMOV-NEXT:    andl %ecx, %edi
; X32-NOCMOV-NEXT:    orl %edi, %esi
; X32-NOCMOV-NEXT:    movl %esi, (%esp)
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movb %al, %ah
; X32-NOCMOV-NEXT:    movzbl %ah, %edi
; X32-NOCMOV-NEXT:    negl %edi
; X32-NOCMOV-NEXT:    movl %edx, %esi
; X32-NOCMOV-NEXT:    andl %edi, %esi
; X32-NOCMOV-NEXT:    notl %edi
; X32-NOCMOV-NEXT:    andl %ecx, %edi
; X32-NOCMOV-NEXT:    orl %edi, %esi
; X32-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    fldl (%esp)
; X32-NOCMOV-NEXT:    addl $8, %esp
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call double @llvm.ct.select.f64(i1 %cond, double %a, double %b)
  ret double %result
}

define ptr @test_ctselect_ptr(i1 %cond, ptr %a, ptr %b) {
; X64-LABEL: test_ctselect_ptr:
; X64:       # %bb.0:
; X64-NEXT:    movq %rdx, %rax
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovneq %rsi, %rax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_ptr:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_ptr:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call ptr @llvm.ct.select.p0(i1 %cond, ptr %a, ptr %b)
  ret ptr %result
}

; Test with constant conditions
define i32 @test_ctselect_const_true(i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_const_true:
; X64:       # %bb.0:
; X64-NEXT:    movl %esi, %eax
; X64-NEXT:    movb $1, %cl
; X64-NEXT:    testb %cl, %cl
; X64-NEXT:    cmovnel %edi, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_const_true:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movb $1, %cl
; X32-NEXT:    testb %cl, %cl
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_const_true:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movb $1, %al
; X32-NOCMOV-NEXT:    testb %al, %al
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call i32 @llvm.ct.select.i32(i1 true, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_const_false(i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_const_false:
; X64:       # %bb.0:
; X64-NEXT:    movl %esi, %eax
; X64-NEXT:    xorl %ecx, %ecx
; X64-NEXT:    testb %cl, %cl
; X64-NEXT:    cmovnel %edi, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_const_false:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    xorl %ecx, %ecx
; X32-NEXT:    testb %cl, %cl
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_const_false:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    xorl %eax, %eax
; X32-NOCMOV-NEXT:    testb %al, %al
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %result = call i32 @llvm.ct.select.i32(i1 false, i32 %a, i32 %b)
  ret i32 %result
}

; Test with comparison conditions
define i32 @test_ctselect_icmp_eq(i32 %x, i32 %y, i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_icmp_eq:
; X64:       # %bb.0:
; X64-NEXT:    movl %ecx, %eax
; X64-NEXT:    cmpl %esi, %edi
; X64-NEXT:    sete %cl
; X64-NEXT:    testb %cl, %cl
; X64-NEXT:    cmovnel %edx, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_icmp_eq:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    cmpl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    sete %cl
; X32-NEXT:    testb %cl, %cl
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_icmp_eq:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    sete %al
; X32-NOCMOV-NEXT:    testb %al, %al
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %cond = icmp eq i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_icmp_ne(i32 %x, i32 %y, i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_icmp_ne:
; X64:       # %bb.0:
; X64-NEXT:    movl %ecx, %eax
; X64-NEXT:    cmpl %esi, %edi
; X64-NEXT:    setne %cl
; X64-NEXT:    testb %cl, %cl
; X64-NEXT:    cmovnel %edx, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_icmp_ne:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    cmpl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    setne %cl
; X32-NEXT:    testb %cl, %cl
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_icmp_ne:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    setne %al
; X32-NOCMOV-NEXT:    testb %al, %al
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %cond = icmp ne i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_icmp_slt(i32 %x, i32 %y, i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_icmp_slt:
; X64:       # %bb.0:
; X64-NEXT:    movl %ecx, %eax
; X64-NEXT:    cmpl %esi, %edi
; X64-NEXT:    setl %cl
; X64-NEXT:    testb %cl, %cl
; X64-NEXT:    cmovnel %edx, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_icmp_slt:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    cmpl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    setl %cl
; X32-NEXT:    testb %cl, %cl
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_icmp_slt:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    setl %al
; X32-NOCMOV-NEXT:    testb %al, %al
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %cond = icmp slt i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_icmp_ult(i32 %x, i32 %y, i32 %a, i32 %b) {
; X64-LABEL: test_ctselect_icmp_ult:
; X64:       # %bb.0:
; X64-NEXT:    movl %ecx, %eax
; X64-NEXT:    cmpl %esi, %edi
; X64-NEXT:    setb %cl
; X64-NEXT:    testb %cl, %cl
; X64-NEXT:    cmovnel %edx, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_icmp_ult:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    cmpl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    setb %cl
; X32-NEXT:    testb %cl, %cl
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_icmp_ult:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    cmpl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    setb %al
; X32-NOCMOV-NEXT:    testb %al, %al
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %cond = icmp ult i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define float @test_ctselect_fcmp_oeq(float %x, float %y, float %a, float %b) {
; X64-LABEL: test_ctselect_fcmp_oeq:
; X64:       # %bb.0:
; X64-NEXT:    movd %xmm2, %eax
; X64-NEXT:    movd %xmm3, %ecx
; X64-NEXT:    ucomiss %xmm1, %xmm0
; X64-NEXT:    setnp %dl
; X64-NEXT:    sete %sil
; X64-NEXT:    testb %dl, %sil
; X64-NEXT:    cmovnel %eax, %ecx
; X64-NEXT:    movd %ecx, %xmm0
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_fcmp_oeq:
; X32:       # %bb.0:
; X32-NEXT:    pushl %edi
; X32-NEXT:    .cfi_def_cfa_offset 8
; X32-NEXT:    pushl %esi
; X32-NEXT:    .cfi_def_cfa_offset 12
; X32-NEXT:    pushl %eax
; X32-NEXT:    .cfi_def_cfa_offset 16
; X32-NEXT:    .cfi_offset %esi, -12
; X32-NEXT:    .cfi_offset %edi, -8
; X32-NEXT:    flds {{[0-9]+}}(%esp)
; X32-NEXT:    flds {{[0-9]+}}(%esp)
; X32-NEXT:    fucompi %st(1), %st
; X32-NEXT:    fstp %st(0)
; X32-NEXT:    setnp %al
; X32-NEXT:    sete %cl
; X32-NEXT:    testb %al, %cl
; X32-NEXT:    sete %al
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NEXT:    movb %al, %ah
; X32-NEXT:    movzbl %ah, %edi
; X32-NEXT:    negl %edi
; X32-NEXT:    movl %edx, %esi
; X32-NEXT:    andl %edi, %esi
; X32-NEXT:    notl %edi
; X32-NEXT:    andl %ecx, %edi
; X32-NEXT:    orl %edi, %esi
; X32-NEXT:    movl %esi, (%esp)
; X32-NEXT:    flds (%esp)
; X32-NEXT:    addl $4, %esp
; X32-NEXT:    .cfi_def_cfa_offset 12
; X32-NEXT:    popl %esi
; X32-NEXT:    .cfi_def_cfa_offset 8
; X32-NEXT:    popl %edi
; X32-NEXT:    .cfi_def_cfa_offset 4
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_fcmp_oeq:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    pushl %eax
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 16
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %edi, -8
; X32-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    fucompp
; X32-NOCMOV-NEXT:    fnstsw %ax
; X32-NOCMOV-NEXT:    # kill: def $ah killed $ah killed $ax
; X32-NOCMOV-NEXT:    sahf
; X32-NOCMOV-NEXT:    setnp %al
; X32-NOCMOV-NEXT:    sete %cl
; X32-NOCMOV-NEXT:    testb %al, %cl
; X32-NOCMOV-NEXT:    sete %al
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    movb %al, %ah
; X32-NOCMOV-NEXT:    movzbl %ah, %edi
; X32-NOCMOV-NEXT:    negl %edi
; X32-NOCMOV-NEXT:    movl %edx, %esi
; X32-NOCMOV-NEXT:    andl %edi, %esi
; X32-NOCMOV-NEXT:    notl %edi
; X32-NOCMOV-NEXT:    andl %ecx, %edi
; X32-NOCMOV-NEXT:    orl %edi, %esi
; X32-NOCMOV-NEXT:    movl %esi, (%esp)
; X32-NOCMOV-NEXT:    flds (%esp)
; X32-NOCMOV-NEXT:    addl $4, %esp
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %cond = fcmp oeq float %x, %y
  %result = call float @llvm.ct.select.f32(i1 %cond, float %a, float %b)
  ret float %result
}

; Test with memory operands
define i32 @test_ctselect_load(i1 %cond, ptr %p1, ptr %p2) {
; X64-LABEL: test_ctselect_load:
; X64:       # %bb.0:
; X64-NEXT:    movl (%rdx), %eax
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovnel (%rsi), %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_load:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl (%eax), %eax
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel (%ecx), %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_load:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl (%ecx), %ecx
; X32-NOCMOV-NEXT:    movl (%eax), %edx
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %esi
; X32-NOCMOV-NEXT:    negl %esi
; X32-NOCMOV-NEXT:    movl %edx, %eax
; X32-NOCMOV-NEXT:    andl %esi, %eax
; X32-NOCMOV-NEXT:    notl %esi
; X32-NOCMOV-NEXT:    andl %ecx, %esi
; X32-NOCMOV-NEXT:    orl %esi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %a = load i32, ptr %p1
  %b = load i32, ptr %p2
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

; Test nested ctselect calls
define i32 @test_ctselect_nested(i1 %cond1, i1 %cond2, i32 %a, i32 %b, i32 %c) {
; X64-LABEL: test_ctselect_nested:
; X64:       # %bb.0:
; X64-NEXT:    movl %r8d, %eax
; X64-NEXT:    testb $1, %sil
; X64-NEXT:    cmovnel %edx, %ecx
; X64-NEXT:    testb $1, %dil
; X64-NEXT:    cmovnel %ecx, %eax
; X64-NEXT:    retq
;
; X32-LABEL: test_ctselect_nested:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel {{[0-9]+}}(%esp), %ecx
; X32-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NEXT:    cmovnel %ecx, %eax
; X32-NEXT:    retl
;
; X32-NOCMOV-LABEL: test_ctselect_nested:
; X32-NOCMOV:       # %bb.0:
; X32-NOCMOV-NEXT:    pushl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    pushl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    pushl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 16
; X32-NOCMOV-NEXT:    .cfi_offset %esi, -16
; X32-NOCMOV-NEXT:    .cfi_offset %edi, -12
; X32-NOCMOV-NEXT:    .cfi_offset %ebx, -8
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %bl
; X32-NOCMOV-NEXT:    movb %bl, %bh
; X32-NOCMOV-NEXT:    movzbl %bh, %edi
; X32-NOCMOV-NEXT:    negl %edi
; X32-NOCMOV-NEXT:    movl %edx, %esi
; X32-NOCMOV-NEXT:    andl %edi, %esi
; X32-NOCMOV-NEXT:    notl %edi
; X32-NOCMOV-NEXT:    andl %eax, %edi
; X32-NOCMOV-NEXT:    orl %edi, %esi
; X32-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; X32-NOCMOV-NEXT:    sete %dl
; X32-NOCMOV-NEXT:    movb %dl, %dh
; X32-NOCMOV-NEXT:    movzbl %dh, %edi
; X32-NOCMOV-NEXT:    negl %edi
; X32-NOCMOV-NEXT:    movl %ecx, %eax
; X32-NOCMOV-NEXT:    andl %edi, %eax
; X32-NOCMOV-NEXT:    notl %edi
; X32-NOCMOV-NEXT:    andl %esi, %edi
; X32-NOCMOV-NEXT:    orl %edi, %eax
; X32-NOCMOV-NEXT:    popl %esi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 12
; X32-NOCMOV-NEXT:    popl %edi
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 8
; X32-NOCMOV-NEXT:    popl %ebx
; X32-NOCMOV-NEXT:    .cfi_def_cfa_offset 4
; X32-NOCMOV-NEXT:    retl
  %inner = call i32 @llvm.ct.select.i32(i1 %cond2, i32 %a, i32 %b)
  %result = call i32 @llvm.ct.select.i32(i1 %cond1, i32 %inner, i32 %c)
  ret i32 %result
}

; Declare the intrinsics
declare i8 @llvm.ct.select.i8(i1, i8, i8)
declare i16 @llvm.ct.select.i16(i1, i16, i16)
declare i32 @llvm.ct.select.i32(i1, i32, i32)
declare i64 @llvm.ct.select.i64(i1, i64, i64)
declare float @llvm.ct.select.f32(i1, float, float)
declare double @llvm.ct.select.f64(i1, double, double)
declare ptr @llvm.ct.select.p0(i1, ptr, ptr)
