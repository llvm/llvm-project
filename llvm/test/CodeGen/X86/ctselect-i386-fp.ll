; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i386-unknown-linux-gnu -mattr=-cmov | FileCheck %s --check-prefix=I386-NOCMOV
; RUN: llc < %s -mtriple=i386-unknown-linux-gnu -mattr=+cmov | FileCheck %s --check-prefix=I386-CMOV
; RUN: llc < %s -mtriple=i386-unknown-linux-gnu -mattr=-cmov -verify-machineinstrs | FileCheck %s --check-prefix=I386-NOCMOV

; Comprehensive CTSELECT tests for i386 targets with floating-point types
; - Without CMOV: constant-time implementation using FP->int conversion + existing post-RA CTSELECT
; - With CMOV: CMOV-based implementation
; - Verifies security properties: no conditional branches, constant execution time
; Strategy: FP values stored to memory, converted to integers, CTSELECT on integers, converted back to FP

; Test basic f32 functionality
define float @test_ctselect_f32_basic(i1 %cond, float %a, float %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_basic:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    pushl %eax
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    flds (%esp)
; I386-NOCMOV-NEXT:    addl $4, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_basic:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    pushl %eax
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    flds (%esp)
; I386-CMOV-NEXT:    addl $4, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %result = call float @llvm.ct.select.f32(i1 %cond, float %a, float %b)
  ret float %result
}

; Test f32 with different condition codes
define float @test_ctselect_f32_eq(float %x, float %y, float %a, float %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_eq:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    pushl %eax
; I386-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    fucompp
; I386-NOCMOV-NEXT:    fnstsw %ax
; I386-NOCMOV-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NOCMOV-NEXT:    sahf
; I386-NOCMOV-NEXT:    setnp %al
; I386-NOCMOV-NEXT:    sete %cl
; I386-NOCMOV-NEXT:    testb %al, %cl
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    flds (%esp)
; I386-NOCMOV-NEXT:    addl $4, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_eq:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    pushl %eax
; I386-CMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    fucompi %st(1), %st
; I386-CMOV-NEXT:    fstp %st(0)
; I386-CMOV-NEXT:    setnp %al
; I386-CMOV-NEXT:    sete %cl
; I386-CMOV-NEXT:    testb %al, %cl
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    flds (%esp)
; I386-CMOV-NEXT:    addl $4, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %cmp = fcmp oeq float %x, %y
  %result = call float @llvm.ct.select.f32(i1 %cmp, float %a, float %b)
  ret float %result
}

; Test basic f64 functionality
define double @test_ctselect_f64_basic(i1 %cond, double %a, double %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f64_basic:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    subl $8, %esp
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    fldl (%esp)
; I386-NOCMOV-NEXT:    addl $8, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f64_basic:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    subl $8, %esp
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    fldl (%esp)
; I386-CMOV-NEXT:    addl $8, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %result = call double @llvm.ct.select.f64(i1 %cond, double %a, double %b)
  ret double %result
}

; Test basic x86_fp80 functionality
define x86_fp80 @test_ctselect_f80_basic(i1 %cond, x86_fp80 %a, x86_fp80 %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f80_basic:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    subl $12, %esp
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    fldt (%esp)
; I386-NOCMOV-NEXT:    addl $12, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f80_basic:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    subl $12, %esp
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    fldt (%esp)
; I386-CMOV-NEXT:    addl $12, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %result = call x86_fp80 @llvm.ct.select.f80(i1 %cond, x86_fp80 %a, x86_fp80 %b)
  ret x86_fp80 %result
}

; Test f32 with complex conditions
define float @test_ctselect_f32_gt(float %x, float %y, float %a, float %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_gt:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    pushl %eax
; I386-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    fucompp
; I386-NOCMOV-NEXT:    fnstsw %ax
; I386-NOCMOV-NEXT:    # kill: def $ah killed $ah killed $ax
; I386-NOCMOV-NEXT:    sahf
; I386-NOCMOV-NEXT:    seta %al
; I386-NOCMOV-NEXT:    testb %al, %al
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    flds (%esp)
; I386-NOCMOV-NEXT:    addl $4, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_gt:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    pushl %eax
; I386-CMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    fucompi %st(1), %st
; I386-CMOV-NEXT:    fstp %st(0)
; I386-CMOV-NEXT:    seta %al
; I386-CMOV-NEXT:    testb %al, %al
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    flds (%esp)
; I386-CMOV-NEXT:    addl $4, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %cmp = fcmp ogt float %x, %y
  %result = call float @llvm.ct.select.f32(i1 %cmp, float %a, float %b)
  ret float %result
}

; Test constant-time properties: verify no branches in generated code
define float @test_ctselect_f32_no_branches(i1 %cond, float %a, float %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_no_branches:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    pushl %eax
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    flds (%esp)
; I386-NOCMOV-NEXT:    addl $4, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_no_branches:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    pushl %eax
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    flds (%esp)
; I386-CMOV-NEXT:    addl $4, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %result = call float @llvm.ct.select.f32(i1 %cond, float %a, float %b)
  ret float %result
}

; Test that BUNDLE directives are present for constant-time guarantees
define float @test_ctselect_f32_bundled(i1 %cond, float %a, float %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_bundled:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    pushl %eax
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    flds (%esp)
; I386-NOCMOV-NEXT:    addl $4, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_bundled:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    pushl %eax
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    flds (%esp)
; I386-CMOV-NEXT:    addl $4, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %result = call float @llvm.ct.select.f32(i1 %cond, float %a, float %b)
  ret float %result
}

; Test edge case: NaN handling
define float @test_ctselect_f32_nan(i1 %cond) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_nan:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    subl $12, %esp
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; I386-NOCMOV-NEXT:    fldz
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    fxch %st(1)
; I386-NOCMOV-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    fstps (%esp)
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl (%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    addl $12, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_nan:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    subl $12, %esp
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; I386-CMOV-NEXT:    fldz
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    fxch %st(1)
; I386-CMOV-NEXT:    fstps {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    fstps (%esp)
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl (%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    flds {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    addl $12, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %nan = bitcast i32 2139095040 to float  ; 0x7F800000 = +inf
  %zero = bitcast i32 0 to float
  %result = call float @llvm.ct.select.f32(i1 %cond, float %nan, float %zero)
  ret float %result
}

; Test memory alignment for f80
define x86_fp80 @test_ctselect_f80_alignment(i1 %cond, x86_fp80 %a, x86_fp80 %b) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f80_alignment:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    subl $12, %esp
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    fldt (%esp)
; I386-NOCMOV-NEXT:    addl $12, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f80_alignment:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    subl $12, %esp
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    fldt (%esp)
; I386-CMOV-NEXT:    addl $12, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %result = call x86_fp80 @llvm.ct.select.f80(i1 %cond, x86_fp80 %a, x86_fp80 %b)
  ret x86_fp80 %result
}

; Stress test: multiple CTSELECT operations
define float @test_ctselect_f32_multiple(i1 %cond1, i1 %cond2, float %a, float %b, float %c, float %d) nounwind {
; I386-NOCMOV-LABEL: test_ctselect_f32_multiple:
; I386-NOCMOV:       # %bb.0:
; I386-NOCMOV-NEXT:    pushl %edi
; I386-NOCMOV-NEXT:    pushl %esi
; I386-NOCMOV-NEXT:    subl $8, %esp
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-NOCMOV-NEXT:    sete %al
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-NOCMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-NOCMOV-NEXT:    movb %al, %ah
; I386-NOCMOV-NEXT:    movzbl %ah, %edi
; I386-NOCMOV-NEXT:    negl %edi
; I386-NOCMOV-NEXT:    movl %edx, %esi
; I386-NOCMOV-NEXT:    andl %edi, %esi
; I386-NOCMOV-NEXT:    notl %edi
; I386-NOCMOV-NEXT:    andl %ecx, %edi
; I386-NOCMOV-NEXT:    orl %edi, %esi
; I386-NOCMOV-NEXT:    movl %esi, (%esp)
; I386-NOCMOV-NEXT:    flds (%esp)
; I386-NOCMOV-NEXT:    addl $8, %esp
; I386-NOCMOV-NEXT:    popl %esi
; I386-NOCMOV-NEXT:    popl %edi
; I386-NOCMOV-NEXT:    retl
;
; I386-CMOV-LABEL: test_ctselect_f32_multiple:
; I386-CMOV:       # %bb.0:
; I386-CMOV-NEXT:    pushl %edi
; I386-CMOV-NEXT:    pushl %esi
; I386-CMOV-NEXT:    subl $8, %esp
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    testb $1, {{[0-9]+}}(%esp)
; I386-CMOV-NEXT:    sete %al
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; I386-CMOV-NEXT:    movl {{[0-9]+}}(%esp), %edx
; I386-CMOV-NEXT:    movb %al, %ah
; I386-CMOV-NEXT:    movzbl %ah, %edi
; I386-CMOV-NEXT:    negl %edi
; I386-CMOV-NEXT:    movl %edx, %esi
; I386-CMOV-NEXT:    andl %edi, %esi
; I386-CMOV-NEXT:    notl %edi
; I386-CMOV-NEXT:    andl %ecx, %edi
; I386-CMOV-NEXT:    orl %edi, %esi
; I386-CMOV-NEXT:    movl %esi, (%esp)
; I386-CMOV-NEXT:    flds (%esp)
; I386-CMOV-NEXT:    addl $8, %esp
; I386-CMOV-NEXT:    popl %esi
; I386-CMOV-NEXT:    popl %edi
; I386-CMOV-NEXT:    retl
  %sel1 = call float @llvm.ct.select.f32(i1 %cond1, float %a, float %b)
  %sel2 = call float @llvm.ct.select.f32(i1 %cond2, float %sel1, float %c)
  ret float %sel2
}

; Declare intrinsics
declare float @llvm.ct.select.f32(i1, float, float)
declare double @llvm.ct.select.f64(i1, double, double)
declare x86_fp80 @llvm.ct.select.f80(i1, x86_fp80, x86_fp80)
