; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-linux-gnu | FileCheck %s --check-prefixes=X64,DAG-X64
; RUN: llc < %s -mtriple=x86_64-linux-gnu -fast-isel | FileCheck %s --check-prefixes=X64,FASTISEL-X64
; RUN: llc < %s -mtriple=i686-linux-gnu | FileCheck %s --check-prefixes=X86
; RUN: llc < %s -mtriple=i686-linux-gnu -fast-isel | FileCheck %s --check-prefixes=X86
; RUN: llc < %s -mtriple=x86_64-linux-gnu -global-isel -global-isel-abort=2 | FileCheck %s --check-prefixes=GISEL-X64
; RUN: llc < %s -mtriple=i686-linux-gnu -global-isel -global-isel-abort=2 | FileCheck %s --check-prefixes=X86

define float @trunc_f32(float %a) nounwind readnone {
; DAG-X64-LABEL: trunc_f32:
; DAG-X64:       # %bb.0:
; DAG-X64-NEXT:    jmp truncf@PLT # TAILCALL
;
; FASTISEL-X64-LABEL: trunc_f32:
; FASTISEL-X64:       # %bb.0:
; FASTISEL-X64-NEXT:    pushq %rax
; FASTISEL-X64-NEXT:    callq truncf@PLT
; FASTISEL-X64-NEXT:    popq %rax
; FASTISEL-X64-NEXT:    retq
;
; X86-LABEL: trunc_f32:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    flds {{[0-9]+}}(%esp)
; X86-NEXT:    fstps (%esp)
; X86-NEXT:    calll truncf
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; GISEL-X64-LABEL: trunc_f32:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    jmp truncf@PLT # TAILCALL
  %c = call float @llvm.trunc.f32(float %a)
  ret float %c
}

define double @trunc_f64(double %a) nounwind readnone {
; DAG-X64-LABEL: trunc_f64:
; DAG-X64:       # %bb.0:
; DAG-X64-NEXT:    jmp trunc@PLT # TAILCALL
;
; FASTISEL-X64-LABEL: trunc_f64:
; FASTISEL-X64:       # %bb.0:
; FASTISEL-X64-NEXT:    pushq %rax
; FASTISEL-X64-NEXT:    callq trunc@PLT
; FASTISEL-X64-NEXT:    popq %rax
; FASTISEL-X64-NEXT:    retq
;
; X86-LABEL: trunc_f64:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    fldl {{[0-9]+}}(%esp)
; X86-NEXT:    fstpl (%esp)
; X86-NEXT:    calll trunc
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; GISEL-X64-LABEL: trunc_f64:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    jmp trunc@PLT # TAILCALL
  %c = call double @llvm.trunc.f64(double %a)
  ret double %c
}

define x86_fp80 @trunc_f80(x86_fp80   %a) nounwind readnone {
; X64-LABEL: trunc_f80:
; X64:       # %bb.0:
; X64-NEXT:    subq $24, %rsp
; X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; X64-NEXT:    fstpt (%rsp)
; X64-NEXT:    callq truncl@PLT
; X64-NEXT:    addq $24, %rsp
; X64-NEXT:    retq
;
; X86-LABEL: trunc_f80:
; X86:       # %bb.0:
; X86-NEXT:    subl $12, %esp
; X86-NEXT:    fldt {{[0-9]+}}(%esp)
; X86-NEXT:    fstpt (%esp)
; X86-NEXT:    calll truncl
; X86-NEXT:    addl $12, %esp
; X86-NEXT:    retl
;
; GISEL-X64-LABEL: trunc_f80:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    subq $24, %rsp
; GISEL-X64-NEXT:    fldt {{[0-9]+}}(%rsp)
; GISEL-X64-NEXT:    fstpt (%rsp)
; GISEL-X64-NEXT:    callq truncl@PLT
; GISEL-X64-NEXT:    addq $24, %rsp
; GISEL-X64-NEXT:    retq
  %c = call x86_fp80   @llvm.trunc.f80(x86_fp80   %a)
  ret x86_fp80   %c
}

