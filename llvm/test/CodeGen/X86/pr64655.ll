; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-- -mcpu=x86-64-v3 | FileCheck %s --check-prefixes=AVX2
; RUN: llc < %s -mtriple=x86_64-- -mcpu=x86-64-v4 | FileCheck %s --check-prefixes=AVX512

define void @f(ptr %0) {
; AVX2-LABEL: f:
; AVX2:       # %bb.0:
; AVX2-NEXT:    movzbl (%rdi), %eax
; AVX2-NEXT:    movl %eax, %ecx
; AVX2-NEXT:    movl %eax, %edx
; AVX2-NEXT:    movl %eax, %esi
; AVX2-NEXT:    movl %eax, %r8d
; AVX2-NEXT:    movl %eax, %r9d
; AVX2-NEXT:    vmovd %eax, %xmm0
; AVX2-NEXT:    # kill: def $al killed $al killed $eax
; AVX2-NEXT:    movl $1, %r10d
; AVX2-NEXT:    vpinsrw $1, %r10d, %xmm0, %xmm0
; AVX2-NEXT:    shrb $2, %r9b
; AVX2-NEXT:    movzbl %r9b, %r9d
; AVX2-NEXT:    vpinsrw $2, %r9d, %xmm0, %xmm0
; AVX2-NEXT:    shrb $3, %r8b
; AVX2-NEXT:    movzbl %r8b, %r8d
; AVX2-NEXT:    vpinsrw $3, %r8d, %xmm0, %xmm0
; AVX2-NEXT:    shrb $4, %sil
; AVX2-NEXT:    movzbl %sil, %esi
; AVX2-NEXT:    vpinsrw $4, %esi, %xmm0, %xmm0
; AVX2-NEXT:    shrb $5, %dl
; AVX2-NEXT:    movzbl %dl, %edx
; AVX2-NEXT:    vpinsrw $5, %edx, %xmm0, %xmm0
; AVX2-NEXT:    shrb $6, %cl
; AVX2-NEXT:    movzbl %cl, %ecx
; AVX2-NEXT:    vpinsrw $6, %ecx, %xmm0, %xmm0
; AVX2-NEXT:    shrb $7, %al
; AVX2-NEXT:    movzbl %al, %eax
; AVX2-NEXT:    vpinsrw $7, %eax, %xmm0, %xmm0
; AVX2-NEXT:    vpsllw $15, %xmm0, %xmm0
; AVX2-NEXT:    vpacksswb %xmm0, %xmm0, %xmm0
; AVX2-NEXT:    vpmovmskb %xmm0, %eax
; AVX2-NEXT:    movb %al, (%rdi)
; AVX2-NEXT:    retq
;
; AVX512-LABEL: f:
; AVX512:       # %bb.0:
; AVX512-NEXT:    kmovb (%rdi), %k0
; AVX512-NEXT:    movb $-3, %al
; AVX512-NEXT:    kmovd %eax, %k1
; AVX512-NEXT:    kandb %k1, %k0, %k0
; AVX512-NEXT:    movb $1, %al
; AVX512-NEXT:    kmovd %eax, %k1
; AVX512-NEXT:    kshiftlb $7, %k1, %k1
; AVX512-NEXT:    kshiftrb $6, %k1, %k1
; AVX512-NEXT:    korb %k1, %k0, %k0
; AVX512-NEXT:    kmovb %k0, (%rdi)
; AVX512-NEXT:    retq
  %2 = load <8 x i1>, ptr %0
  %3 = insertelement <8 x i1> %2, i1 true, i32 1
  store <8 x i1> %3, ptr %0
  ret void
}
