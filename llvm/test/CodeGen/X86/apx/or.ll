; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+ndd -verify-machineinstrs | FileCheck %s

define i8 @or8rr(i8 noundef %a, i8 noundef %b) {
; CHECK-LABEL: or8rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl %esi, %edi, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %or = or i8 %a, %b
    ret i8 %or
}

define i16 @or16rr(i16 noundef %a, i16 noundef %b) {
; CHECK-LABEL: or16rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl %esi, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %or = or i16 %a, %b
    ret i16 %or
}

define i32 @or32rr(i32 noundef %a, i32 noundef %b) {
; CHECK-LABEL: or32rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl %esi, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %or = or i32 %a, %b
    ret i32 %or
}

define i64 @or64rr(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: or64rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq %rsi, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %or = or i64 %a, %b
    ret i64 %or
}

define i8 @or8rm(i8 noundef %a, ptr %b) {
; CHECK-LABEL: or8rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orb (%rsi), %dil, %al
; CHECK-NEXT:    retq
entry:
    %t = load i8, ptr %b
    %or = or i8 %a, %t
    ret i8 %or
}

define i16 @or16rm(i16 noundef %a, ptr %b) {
; CHECK-LABEL: or16rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw (%rsi), %di, %ax
; CHECK-NEXT:    retq
entry:
    %t = load i16, ptr %b
    %or = or i16 %a, %t
    ret i16 %or
}

define i32 @or32rm(i32 noundef %a, ptr %b) {
; CHECK-LABEL: or32rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl (%rsi), %edi, %eax
; CHECK-NEXT:    retq
entry:
    %t = load i32, ptr %b
    %or = or i32 %a, %t
    ret i32 %or
}

define i64 @or64rm(i64 noundef %a, ptr %b) {
; CHECK-LABEL: or64rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq (%rsi), %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %t = load i64, ptr %b
    %or = or i64 %a, %t
    ret i64 %or
}

define i16 @or16ri8(i16 noundef %a) {
; CHECK-LABEL: or16ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $123, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %or = or i16 %a, 123
    ret i16 %or
}

define i32 @or32ri8(i32 noundef %a) {
; CHECK-LABEL: or32ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $123, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %or = or i32 %a, 123
    ret i32 %or
}

define i64 @or64ri8(i64 noundef %a) {
; CHECK-LABEL: or64ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq $123, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %or = or i64 %a, 123
    ret i64 %or
}

define i8 @or8ri(i8 noundef %a) {
; CHECK-LABEL: or8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orb $123, %dil, %al
; CHECK-NEXT:    retq
entry:
    %or = or i8 %a, 123
    ret i8 %or
}

define i16 @or16ri(i16 noundef %a) {
; CHECK-LABEL: or16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $1234, %edi, %eax # imm = 0x4D2
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %or = or i16 %a, 1234
    ret i16 %or
}

define i32 @or32ri(i32 noundef %a) {
; CHECK-LABEL: or32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $123456, %edi, %eax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
    %or = or i32 %a, 123456
    ret i32 %or
}

define i64 @or64ri(i64 noundef %a) {
; CHECK-LABEL: or64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq $123456, %rdi, %rax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
    %or = or i64 %a, 123456
    ret i64 %or
}

define i8 @or8mr(ptr %a, i8 noundef %b) {
; CHECK-LABEL: or8mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orb %sil, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %or = or i8 %t, %b
  ret i8 %or
}

define i16 @or16mr(ptr %a, i16 noundef %b) {
; CHECK-LABEL: or16mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw %si, (%rdi), %ax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %or = or i16 %t, %b
  ret i16 %or
}

define i32 @or32mr(ptr %a, i32 noundef %b) {
; CHECK-LABEL: or32mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl %esi, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %or = or i32 %t, %b
  ret i32 %or
}

define i64 @or64mr(ptr %a, i64 noundef %b) {
; CHECK-LABEL: or64mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq %rsi, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %or = or i64 %t, %b
  ret i64 %or
}

define i16 @or16mi8(ptr %a) {
; CHECK-LABEL: or16mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    orl $123, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %or = or i16 %t, 123
  ret i16 %or
}

define i32 @or32mi8(ptr %a) {
; CHECK-LABEL: or32mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $123, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %or = or i32 %t, 123
  ret i32 %or
}

define i64 @or64mi8(ptr %a) {
; CHECK-LABEL: or64mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq $123, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %or = or i64 %t, 123
  ret i64 %or
}

define i8 @or8mi(ptr %a) {
; CHECK-LABEL: or8mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orb $123, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %or = or i8 %t, 123
  ret i8 %or
}

define i16 @or16mi(ptr %a) {
; CHECK-LABEL: or16mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    orl $1234, %eax # imm = 0x4D2
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %or = or i16 %t, 1234
  ret i16 %or
}

define i32 @or32mi(ptr %a) {
; CHECK-LABEL: or32mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $123456, (%rdi), %eax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %or = or i32 %t, 123456
  ret i32 %or
}

define i64 @or64mi(ptr %a) {
; CHECK-LABEL: or64mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq $123456, (%rdi), %rax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %or = or i64 %t, 123456
  ret i64 %or
}

@d64 = dso_local global i64 0

define i1 @orflag8rr(i8 %a, i8 %b) {
; CHECK-LABEL: orflag8rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notb %sil, %al
; CHECK-NEXT:    orb %al, %dil, %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movb %cl, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i8 %b, -1
  %v0 = or i8 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i8 %v0, 0
  store i8 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag16rr(i16 %a, i16 %b) {
; CHECK-LABEL: orflag16rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notl %esi, %eax
; CHECK-NEXT:    orw %ax, %di, %cx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i16 %b, -1
  %v0 = or i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag32rr(i32 %a, i32 %b) {
; CHECK-LABEL: orflag32rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orl %esi, %edi, %ecx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = or i32 %a, %b  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag64rr(i64 %a, i64 %b) {
; CHECK-LABEL: orflag64rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orq %rsi, %rdi, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = or i64 %a, %b  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag8rm(ptr %ptr, i8 %b) {
; CHECK-LABEL: orflag8rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notb %sil, %al
; CHECK-NEXT:    orb (%rdi), %al, %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movb %cl, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i8, ptr %ptr
  %xor = xor i8 %b, -1
  %v0 = or i8 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i8 %v0, 0
  store i8 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag16rm(ptr %ptr, i16 %b) {
; CHECK-LABEL: orflag16rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    notl %esi, %eax
; CHECK-NEXT:    orw (%rdi), %ax, %cx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i16, ptr %ptr
  %xor = xor i16 %b, -1
  %v0 = or i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag32rm(ptr %ptr, i32 %b) {
; CHECK-LABEL: orflag32rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orl (%rdi), %esi, %ecx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i32, ptr %ptr
  %v0 = or i32 %a, %b  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag64rm(ptr %ptr, i64 %b) {
; CHECK-LABEL: orflag64rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orq (%rdi), %rsi, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i64, ptr %ptr
  %v0 = or i64 %a, %b  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag8ri(i8 %a) {
; CHECK-LABEL: orflag8ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orb $-124, %dil, %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movb %cl, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i8 123, -1
  %v0 = or i8 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i8 %v0, 0
  store i8 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag16ri(i16 %a) {
; CHECK-LABEL: orflag16ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orw $-1235, %di, %cx # imm = 0xFB2D
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i16 1234, -1
  %v0 = or i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag32ri(i32 %a) {
; CHECK-LABEL: orflag32ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orl $123456, %edi, %ecx # imm = 0x1E240
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = or i32 %a, 123456  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag64ri(i64 %a) {
; CHECK-LABEL: orflag64ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orq $123456, %rdi, %rcx # imm = 0x1E240
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = or i64 %a, 123456  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag16ri8(i16 %a) {
; CHECK-LABEL: orflag16ri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orw $-124, %di, %cx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i16 123, -1
  %v0 = or i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag32ri8(i32 %a) {
; CHECK-LABEL: orflag32ri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orl $123, %edi, %ecx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = or i32 %a, 123  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @orflag64ri8(i64 %a) {
; CHECK-LABEL: orflag64ri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    orq $123, %rdi, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = or i64 %a, 123  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define void @or8mr_legacy(ptr %a, i8 noundef %b) {
; CHECK-LABEL: or8mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orb %sil, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %or = or i8 %t, %b
  store i8 %or, ptr %a
  ret void
}

define void @or16mr_legacy(ptr %a, i16 noundef %b) {
; CHECK-LABEL: or16mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw %si, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %or = or i16 %t, %b
  store i16 %or, ptr %a
  ret void
}

define void @or32mr_legacy(ptr %a, i32 noundef %b) {
; CHECK-LABEL: or32mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl %esi, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %or = or i32 %t, %b
  store i32 %or, ptr %a
  ret void
}

define void @or64mr_legacy(ptr %a, i64 noundef %b) {
; CHECK-LABEL: or64mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq %rsi, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %or = or i64 %t, %b
  store i64 %or, ptr %a
  ret void
}

define void @or8mi_legacy(ptr %a) {
; CHECK-LABEL: or8mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orb $123, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %or = or i8 %t, 123
  store i8 %or, ptr %a
  ret void
}

define void @or16mi_legacy(ptr %a) {
; CHECK-LABEL: or16mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orw $1234, (%rdi) # imm = 0x4D2
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %or = or i16 %t, 1234
  store i16 %or, ptr %a
  ret void
}

define void @or32mi_legacy(ptr %a) {
; CHECK-LABEL: or32mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orl $123456, (%rdi) # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %or = or i32 %t, 123456
  store i32 %or, ptr %a
  ret void
}

define void @or64mi_legacy(ptr %a) {
; CHECK-LABEL: or64mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    orq $123456, (%rdi) # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %or = or i64 %t, 123456
  store i64 %or, ptr %a
  ret void
}
