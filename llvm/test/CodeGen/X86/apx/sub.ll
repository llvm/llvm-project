; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+ndd -verify-machineinstrs | FileCheck %s

define i8 @sub8rr(i8 noundef %a, i8 noundef %b) {
; CHECK-LABEL: sub8rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subb %sil, %dil, %al
; CHECK-NEXT:    retq
entry:
    %sub = sub i8 %a, %b
    ret i8 %sub
}

define i16 @sub16rr(i16 noundef %a, i16 noundef %b) {
; CHECK-LABEL: sub16rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subl %esi, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = sub i16 %a, %b
    ret i16 %sub
}

define i32 @sub32rr(i32 noundef %a, i32 noundef %b) {
; CHECK-LABEL: sub32rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subl %esi, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %sub = sub i32 %a, %b
    ret i32 %sub
}

define i64 @sub64rr(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: sub64rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq %rsi, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %sub = sub i64 %a, %b
    ret i64 %sub
}

define i8 @sub8rm(i8 noundef %a, ptr %ptr) {
; CHECK-LABEL: sub8rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subb (%rsi), %dil, %al
; CHECK-NEXT:    retq
entry:
    %b = load i8, ptr %ptr
    %sub = sub i8 %a, %b
    ret i8 %sub
}

define i16 @sub16rm(i16 noundef %a, ptr %ptr) {
; CHECK-LABEL: sub16rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subw (%rsi), %di, %ax
; CHECK-NEXT:    retq
entry:
    %b = load i16, ptr %ptr
    %sub = sub i16 %a, %b
    ret i16 %sub
}

define i32 @sub32rm(i32 noundef %a, ptr %ptr) {
; CHECK-LABEL: sub32rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subl (%rsi), %edi, %eax
; CHECK-NEXT:    retq
entry:
    %b = load i32, ptr %ptr
    %sub = sub i32 %a, %b
    ret i32 %sub
}

define i64 @sub64rm(i64 noundef %a, ptr %ptr) {
; CHECK-LABEL: sub64rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq (%rsi), %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %b = load i64, ptr %ptr
    %sub = sub i64 %a, %b
    ret i64 %sub
}

define i16 @sub16ri8(i16 noundef %a) {
; CHECK-LABEL: sub16ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-123, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = sub i16 %a, 123
    ret i16 %sub
}

define i32 @sub32ri8(i32 noundef %a) {
; CHECK-LABEL: sub32ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-123, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %sub = sub i32 %a, 123
    ret i32 %sub
}

define i64 @sub64ri8(i64 noundef %a) {
; CHECK-LABEL: sub64ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $-123, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %sub = sub i64 %a, 123
    ret i64 %sub
}

define i8 @sub8ri(i8 noundef %a) {
; CHECK-LABEL: sub8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb $-123, %dil, %al
; CHECK-NEXT:    retq
entry:
    %sub = sub i8 %a, 123
    ret i8 %sub
}

define i16 @sub16ri(i16 noundef %a) {
; CHECK-LABEL: sub16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-1234, %edi, %eax # imm = 0xFB2E
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = sub i16 %a, 1234
    ret i16 %sub
}

define i32 @sub32ri(i32 noundef %a) {
; CHECK-LABEL: sub32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-123456, %edi, %eax # imm = 0xFFFE1DC0
; CHECK-NEXT:    retq
entry:
    %sub = sub i32 %a, 123456
    ret i32 %sub
}

define i64 @sub64ri(i64 noundef %a) {
; CHECK-LABEL: sub64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $-123456, %rdi, %rax # imm = 0xFFFE1DC0
; CHECK-NEXT:    retq
entry:
    %sub = sub i64 %a, 123456
    ret i64 %sub
}

define i8 @sub8mr(ptr %a, i8 noundef %b) {
; CHECK-LABEL: sub8mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subb %sil, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %sub = sub nsw i8 %t, %b
  ret i8 %sub
}

define i16 @sub16mr(ptr %a, i16 noundef %b) {
; CHECK-LABEL: sub16mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    subl %esi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %sub = sub nsw i16 %t, %b
  ret i16 %sub
}

define i32 @sub32mr(ptr %a, i32 noundef %b) {
; CHECK-LABEL: sub32mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subl %esi, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %sub = sub nsw i32 %t, %b
  ret i32 %sub
}

define i64 @sub64mr(ptr %a, i64 noundef %b) {
; CHECK-LABEL: sub64mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq %rsi, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %sub = sub nsw i64 %t, %b
  ret i64 %sub
}

define i16 @sub16mi8(ptr %a) {
; CHECK-LABEL: sub16mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    addl $-123, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %sub = sub nsw i16 %t, 123
  ret i16 %sub
}

define i32 @sub32mi8(ptr %a) {
; CHECK-LABEL: sub32mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-123, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %sub = sub nsw i32 %t, 123
  ret i32 %sub
}

define i64 @sub64mi8(ptr %a) {
; CHECK-LABEL: sub64mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $-123, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %sub = sub nsw i64 %t, 123
  ret i64 %sub
}

define i8 @sub8mi(ptr %a) {
; CHECK-LABEL: sub8mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb $-123, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %sub = sub nsw i8 %t, 123
  ret i8 %sub
}

define i16 @sub16mi(ptr %a) {
; CHECK-LABEL: sub16mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    addl $-1234, %eax # imm = 0xFB2E
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %sub = sub nsw i16 %t, 1234
  ret i16 %sub
}

define i32 @sub32mi(ptr %a) {
; CHECK-LABEL: sub32mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-123456, (%rdi), %eax # imm = 0xFFFE1DC0
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %sub = sub nsw i32 %t, 123456
  ret i32 %sub
}

define i64 @sub64mi(ptr %a) {
; CHECK-LABEL: sub64mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $-123456, (%rdi), %rax # imm = 0xFFFE1DC0
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %sub = sub nsw i64 %t, 123456
  ret i64 %sub
}

declare i8 @llvm.usub.sat.i8(i8, i8)
declare i16 @llvm.usub.sat.i16(i16, i16)
declare i32 @llvm.usub.sat.i32(i32, i32)
declare i64 @llvm.usub.sat.i64(i64, i64)

define i8 @subflag8rr(i8 noundef %a, i8 noundef %b) {
; CHECK-LABEL: subflag8rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subb %sil, %dil, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = call i8 @llvm.usub.sat.i8(i8 %a, i8 %b)
    ret i8 %sub
}

define i16 @subflag16rr(i16 noundef %a, i16 noundef %b) {
; CHECK-LABEL: subflag16rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subw %si, %di, %ax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = call i16 @llvm.usub.sat.i16(i16 %a, i16 %b)
    ret i16 %sub
}

define i32 @subflag32rr(i32 noundef %a, i32 noundef %b) {
; CHECK-LABEL: subflag32rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subl %esi, %edi, %eax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    retq
entry:
    %sub = call i32 @llvm.usub.sat.i32(i32 %a, i32 %b)
    ret i32 %sub
}

define i64 @subflag64rr(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: subflag64rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    subq %rsi, %rdi, %rcx
; CHECK-NEXT:    cmovaeq %rcx, %rax
; CHECK-NEXT:    retq
entry:
    %sub = call i64 @llvm.usub.sat.i64(i64 %a, i64 %b)
    ret i64 %sub
}

define i8 @subflag8rm(i8 noundef %a, ptr %b) {
; CHECK-LABEL: subflag8rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subb (%rsi), %dil, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %t = load i8, ptr %b
    %sub = call i8 @llvm.usub.sat.i8(i8 %a, i8 %t)
    ret i8 %sub
}

define i16 @subflag16rm(i16 noundef %a, ptr %b) {
; CHECK-LABEL: subflag16rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subw (%rsi), %di, %ax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %t = load i16, ptr %b
    %sub = call i16 @llvm.usub.sat.i16(i16 %a, i16 %t)
    ret i16 %sub
}

define i32 @subflag32rm(i32 noundef %a, ptr %b) {
; CHECK-LABEL: subflag32rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subl (%rsi), %edi, %eax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    retq
entry:
    %t = load i32, ptr %b
    %sub = call i32 @llvm.usub.sat.i32(i32 %a, i32 %t)
    ret i32 %sub
}

define i64 @subflag64rm(i64 noundef %a, ptr %b) {
; CHECK-LABEL: subflag64rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    subq (%rsi), %rdi, %rcx
; CHECK-NEXT:    cmovaeq %rcx, %rax
; CHECK-NEXT:    retq
entry:
    %t = load i64, ptr %b
    %sub = call i64 @llvm.usub.sat.i64(i64 %a, i64 %t)
    ret i64 %sub
}

define i16 @subflag16ri8(i16 noundef %a) {
; CHECK-LABEL: subflag16ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subw $123, %di, %ax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = call i16 @llvm.usub.sat.i16(i16 %a, i16 123)
    ret i16 %sub
}

define i32 @subflag32ri8(i32 noundef %a) {
; CHECK-LABEL: subflag32ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subl $123, %edi, %eax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    retq
entry:
    %sub = call i32 @llvm.usub.sat.i32(i32 %a, i32 123)
    ret i32 %sub
}

define i64 @subflag64ri8(i64 noundef %a) {
; CHECK-LABEL: subflag64ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    subq $123, %rdi, %rcx
; CHECK-NEXT:    cmovaeq %rcx, %rax
; CHECK-NEXT:    retq
entry:
    %sub = call i64 @llvm.usub.sat.i64(i64 %a, i64 123)
    ret i64 %sub
}

define i8 @subflag8ri(i8 noundef %a) {
; CHECK-LABEL: subflag8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subb $123, %dil, %al
; CHECK-NEXT:    movzbl %al, %eax
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = call i8 @llvm.usub.sat.i8(i8 %a, i8 123)
    ret i8 %sub
}

define i16 @subflag16ri(i16 noundef %a) {
; CHECK-LABEL: subflag16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subw $1234, %di, %ax # imm = 0x4D2
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %sub = call i16 @llvm.usub.sat.i16(i16 %a, i16 1234)
    ret i16 %sub
}

define i32 @subflag32ri(i32 noundef %a) {
; CHECK-LABEL: subflag32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %ecx, %ecx
; CHECK-NEXT:    subl $123456, %edi, %eax # imm = 0x1E240
; CHECK-NEXT:    cmovbl %ecx, %eax
; CHECK-NEXT:    retq
entry:
    %sub = call i32 @llvm.usub.sat.i32(i32 %a, i32 123456)
    ret i32 %sub
}

define i64 @subflag64ri(i64 noundef %a) {
; CHECK-LABEL: subflag64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %eax, %eax
; CHECK-NEXT:    subq $123456, %rdi, %rcx # imm = 0x1E240
; CHECK-NEXT:    cmovaeq %rcx, %rax
; CHECK-NEXT:    retq
entry:
    %sub = call i64 @llvm.usub.sat.i64(i64 %a, i64 123456)
    ret i64 %sub
}

@val = external hidden global i8

declare void @f()

define void @sub64ri_reloc(i64 %val) {
; CHECK-LABEL: sub64ri_reloc:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subq $val, %rdi, %rax
; CHECK-NEXT:    jbe .LBB41_2
; CHECK-NEXT:  # %bb.1: # %t
; CHECK-NEXT:    pushq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    callq f@PLT
; CHECK-NEXT:    popq %rax
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:  .LBB41_2: # %f
; CHECK-NEXT:    retq
  %cmp = icmp ugt i64 %val, ptrtoint (ptr @val to i64)
  br i1 %cmp, label %t, label %f

t:
  call void @f()
  ret void

f:
  ret void
}

define void @sub8mr_legacy(ptr %a, i8 noundef %b) {
; CHECK-LABEL: sub8mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subb %sil, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %sub = sub i8 %t, %b
  store i8 %sub, ptr %a
  ret void
}

define void @sub16mr_legacy(ptr %a, i16 noundef %b) {
; CHECK-LABEL: sub16mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subw %si, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %sub = sub i16 %t, %b
  store i16 %sub, ptr %a
  ret void
}

define void @sub32mr_legacy(ptr %a, i32 noundef %b) {
; CHECK-LABEL: sub32mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subl %esi, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %sub = sub i32 %t, %b
  store i32 %sub, ptr %a
  ret void
}

define void @sub64mr_legacy(ptr %a, i64 noundef %b) {
; CHECK-LABEL: sub64mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    subq %rsi, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %sub = sub i64 %t, %b
  store i64 %sub, ptr %a
  ret void
}

define void @sub8mi_legacy(ptr %a) {
; CHECK-LABEL: sub8mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addb $-123, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %sub = sub nsw i8 %t, 123
  store i8 %sub, ptr %a
  ret void
}

define void @sub16mi_legacy(ptr %a) {
; CHECK-LABEL: sub16mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addw $-1234, (%rdi) # imm = 0xFB2E
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %sub = sub nsw i16 %t, 1234
  store i16 %sub, ptr %a
  ret void
}

define void @sub32mi_legacy(ptr %a) {
; CHECK-LABEL: sub32mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addl $-123456, (%rdi) # imm = 0xFFFE1DC0
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %sub = sub nsw i32 %t, 123456
  store i32 %sub, ptr %a
  ret void
}

define void @sub64mi_legacy(ptr %a) {
; CHECK-LABEL: sub64mi_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addq $-123456, (%rdi) # imm = 0xFFFE1DC0
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %sub = sub nsw i64 %t, 123456
  store i64 %sub, ptr %a
  ret void
}
