; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown -mattr=+ndd -verify-machineinstrs | FileCheck %s

define i8 @xor8rr(i8 noundef %a, i8 noundef %b) {
; CHECK-LABEL: xor8rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %esi, %edi, %eax
; CHECK-NEXT:    # kill: def $al killed $al killed $eax
; CHECK-NEXT:    retq
entry:
    %xor = xor i8 %a, %b
    ret i8 %xor
}

define i16 @xor16rr(i16 noundef %a, i16 noundef %b) {
; CHECK-LABEL: xor16rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %esi, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %xor = xor i16 %a, %b
    ret i16 %xor
}

define i32 @xor32rr(i32 noundef %a, i32 noundef %b) {
; CHECK-LABEL: xor32rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %esi, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %xor = xor i32 %a, %b
    ret i32 %xor
}

define i64 @xor64rr(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: xor64rr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq %rsi, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %xor = xor i64 %a, %b
    ret i64 %xor
}

define i8 @xor8rm(i8 noundef %a, ptr %b) {
; CHECK-LABEL: xor8rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorb (%rsi), %dil, %al
; CHECK-NEXT:    retq
entry:
    %t = load i8, ptr %b
    %xor = xor i8 %a, %t
    ret i8 %xor
}

define i16 @xor16rm(i16 noundef %a, ptr %b) {
; CHECK-LABEL: xor16rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw (%rsi), %di, %ax
; CHECK-NEXT:    retq
entry:
    %t = load i16, ptr %b
    %xor = xor i16 %a, %t
    ret i16 %xor
}

define i32 @xor32rm(i32 noundef %a, ptr %b) {
; CHECK-LABEL: xor32rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl (%rsi), %edi, %eax
; CHECK-NEXT:    retq
entry:
    %t = load i32, ptr %b
    %xor = xor i32 %a, %t
    ret i32 %xor
}

define i64 @xor64rm(i64 noundef %a, ptr %b) {
; CHECK-LABEL: xor64rm:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq (%rsi), %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %t = load i64, ptr %b
    %xor = xor i64 %a, %t
    ret i64 %xor
}

define i16 @xor16ri8(i16 noundef %a) {
; CHECK-LABEL: xor16ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl $123, %edi, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %xor = xor i16 %a, 123
    ret i16 %xor
}

define i32 @xor32ri8(i32 noundef %a) {
; CHECK-LABEL: xor32ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl $123, %edi, %eax
; CHECK-NEXT:    retq
entry:
    %xor = xor i32 %a, 123
    ret i32 %xor
}

define i64 @xor64ri8(i64 noundef %a) {
; CHECK-LABEL: xor64ri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq $123, %rdi, %rax
; CHECK-NEXT:    retq
entry:
    %xor = xor i64 %a, 123
    ret i64 %xor
}

define i8 @xor8ri(i8 noundef %a) {
; CHECK-LABEL: xor8ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorb $123, %dil, %al
; CHECK-NEXT:    retq
entry:
    %xor = xor i8 %a, 123
    ret i8 %xor
}

define i16 @xor16ri(i16 noundef %a) {
; CHECK-LABEL: xor16ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl $1234, %edi, %eax # imm = 0x4D2
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
    %xor = xor i16 %a, 1234
    ret i16 %xor
}

define i32 @xor32ri(i32 noundef %a) {
; CHECK-LABEL: xor32ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl $123456, %edi, %eax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
    %xor = xor i32 %a, 123456
    ret i32 %xor
}

define i64 @xor64ri(i64 noundef %a) {
; CHECK-LABEL: xor64ri:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq $123456, %rdi, %rax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
    %xor = xor i64 %a, 123456
    ret i64 %xor
}

define i8 @xor8mr(ptr %a, i8 noundef %b) {
; CHECK-LABEL: xor8mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorb %sil, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %xor = xor i8 %t, %b
  ret i8 %xor
}

define i16 @xor16mr(ptr %a, i16 noundef %b) {
; CHECK-LABEL: xor16mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw %si, (%rdi), %ax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %xor = xor i16 %t, %b
  ret i16 %xor
}

define i32 @xor32mr(ptr %a, i32 noundef %b) {
; CHECK-LABEL: xor32mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %esi, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %xor = xor i32 %t, %b
  ret i32 %xor
}

define i64 @xor64mr(ptr %a, i64 noundef %b) {
; CHECK-LABEL: xor64mr:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq %rsi, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %xor = xor i64 %t, %b
  ret i64 %xor
}

define i16 @xor16mi8(ptr %a) {
; CHECK-LABEL: xor16mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    xorl $123, %eax
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %xor = xor i16 %t, 123
  ret i16 %xor
}

define i32 @xor32mi8(ptr %a) {
; CHECK-LABEL: xor32mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl $123, (%rdi), %eax
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %xor = xor i32 %t, 123
  ret i32 %xor
}

define i64 @xor64mi8(ptr %a) {
; CHECK-LABEL: xor64mi8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq $123, (%rdi), %rax
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %xor = xor i64 %t, 123
  ret i64 %xor
}

define i8 @xor8mi(ptr %a) {
; CHECK-LABEL: xor8mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorb $123, (%rdi), %al
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %xor = xor i8 %t, 123
  ret i8 %xor
}

define i16 @xor16mi(ptr %a) {
; CHECK-LABEL: xor16mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    movzwl (%rdi), %eax
; CHECK-NEXT:    xorl $1234, %eax # imm = 0x4D2
; CHECK-NEXT:    # kill: def $ax killed $ax killed $eax
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %xor = xor i16 %t, 1234
  ret i16 %xor
}

define i32 @xor32mi(ptr %a) {
; CHECK-LABEL: xor32mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl $123456, (%rdi), %eax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %xor = xor i32 %t, 123456
  ret i32 %xor
}

define i64 @xor64mi(ptr %a) {
; CHECK-LABEL: xor64mi:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq $123456, (%rdi), %rax # imm = 0x1E240
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %xor = xor i64 %t, 123456
  ret i64 %xor
}

@d64 = dso_local global i64 0

define i1 @xorflag8rr(i8 %a, i8 %b) {
; CHECK-LABEL: xorflag8rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %edi, %esi, %eax
; CHECK-NEXT:    xorb $-1, %al, %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movb %cl, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i8 %b, -1
  %v0 = xor i8 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i8 %v0, 0
  store i8 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag16rr(i16 %a, i16 %b) {
; CHECK-LABEL: xorflag16rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %edi, %esi, %eax
; CHECK-NEXT:    xorw $-1, %ax, %cx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i16 %b, -1
  %v0 = xor i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag32rr(i32 %a, i32 %b) {
; CHECK-LABEL: xorflag32rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl %esi, %edi, %ecx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = xor i32 %a, %b  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag64rr(i64 %a, i64 %b) {
; CHECK-LABEL: xorflag64rr:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorq %rsi, %rdi, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = xor i64 %a, %b  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag8rm(ptr %ptr, i8 %b) {
; CHECK-LABEL: xorflag8rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorb (%rdi), %sil, %al
; CHECK-NEXT:    xorb $-1, %al, %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movb %cl, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i8, ptr %ptr
  %xor = xor i8 %b, -1
  %v0 = xor i8 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i8 %v0, 0
  store i8 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag16rm(ptr %ptr, i16 %b) {
; CHECK-LABEL: xorflag16rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorw (%rdi), %si, %ax
; CHECK-NEXT:    xorw $-1, %ax, %cx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i16, ptr %ptr
  %xor = xor i16 %b, -1
  %v0 = xor i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag32rm(ptr %ptr, i32 %b) {
; CHECK-LABEL: xorflag32rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl (%rdi), %esi, %ecx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i32, ptr %ptr
  %v0 = xor i32 %a, %b  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag64rm(ptr %ptr, i64 %b) {
; CHECK-LABEL: xorflag64rm:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorq (%rdi), %rsi, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %a = load i64, ptr %ptr
  %v0 = xor i64 %a, %b  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag8ri(i8 %a) {
; CHECK-LABEL: xorflag8ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorb $-124, %dil, %cl
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movb %cl, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i8 123, -1
  %v0 = xor i8 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i8 %v0, 0
  store i8 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag16ri(i16 %a) {
; CHECK-LABEL: xorflag16ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorw $-1235, %di, %cx # imm = 0xFB2D
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i16 1234, -1
  %v0 = xor i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag32ri(i32 %a) {
; CHECK-LABEL: xorflag32ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl $123456, %edi, %ecx # imm = 0x1E240
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = xor i32 %a, 123456  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag64ri(i64 %a) {
; CHECK-LABEL: xorflag64ri:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorq $123456, %rdi, %rcx # imm = 0x1E240
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = xor i64 %a, 123456  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag16ri8(i16 %a) {
; CHECK-LABEL: xorflag16ri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorw $-124, %di, %cx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movw %cx, d64(%rip)
; CHECK-NEXT:    retq
  %xor = xor i16 123, -1
  %v0 = xor i16 %a, %xor  ; 0xff << 50
  %v1 = icmp eq i16 %v0, 0
  store i16 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag32ri8(i32 %a) {
; CHECK-LABEL: xorflag32ri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorl $123, %edi, %ecx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movl %ecx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = xor i32 %a, 123  ; 0xff << 50
  %v1 = icmp eq i32 %v0, 0
  store i32 %v0, ptr @d64
  ret i1 %v1
}

define i1 @xorflag64ri8(i64 %a) {
; CHECK-LABEL: xorflag64ri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xorq $123, %rdi, %rcx
; CHECK-NEXT:    sete %al
; CHECK-NEXT:    movq %rcx, d64(%rip)
; CHECK-NEXT:    retq
  %v0 = xor i64 %a, 123  ; 0xff << 50
  %v1 = icmp eq i64 %v0, 0
  store i64 %v0, ptr @d64
  ret i1 %v1
}

define void @xor8mr_legacy(ptr %a, i8 noundef %b) {
; CHECK-LABEL: xor8mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorb %sil, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i8, ptr %a
  %xor = xor i8 %t, %b
  store i8 %xor, ptr %a
  ret void
}

define void @xor16mr_legacy(ptr %a, i16 noundef %b) {
; CHECK-LABEL: xor16mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorw %si, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i16, ptr %a
  %xor = xor i16 %t, %b
  store i16 %xor, ptr %a
  ret void
}

define void @xor32mr_legacy(ptr %a, i32 noundef %b) {
; CHECK-LABEL: xor32mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorl %esi, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i32, ptr %a
  %xor = xor i32 %t, %b
  store i32 %xor, ptr %a
  ret void
}

define void @xor64mr_legacy(ptr %a, i64 noundef %b) {
; CHECK-LABEL: xor64mr_legacy:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xorq %rsi, (%rdi)
; CHECK-NEXT:    retq
entry:
  %t= load i64, ptr %a
  %xor = xor i64 %t, %b
  store i64 %xor, ptr %a
  ret void
}
