; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=i686-- -relocation-model=pic | FileCheck %s -check-prefix=PIC
; RUN: llc < %s -mtriple=i686-- -relocation-model=static | FileCheck %s -check-prefix=STATIC
;
; Make sure the common loop invariant A is hoisted up to preheader,
; since too many registers are needed to subsume it into the addressing modes.
; It's safe to sink A in when it's not pic.

@A = global [16 x [16 x i32]] zeroinitializer, align 32		; <ptr> [#uses=2]

define void @test(i32 %row, i32 %N.in) nounwind {
; PIC-LABEL: test:
; PIC:       # %bb.0: # %entry
; PIC-NEXT:    calll .L0$pb
; PIC-NEXT:  .L0$pb:
; PIC-NEXT:    popl %ecx
; PIC-NEXT:  .Ltmp0:
; PIC-NEXT:    addl $_GLOBAL_OFFSET_TABLE_+(.Ltmp0-.L0$pb), %ecx
; PIC-NEXT:    movl {{[0-9]+}}(%esp), %eax
; PIC-NEXT:    testl %eax, %eax
; PIC-NEXT:    jle .LBB0_3
; PIC-NEXT:  # %bb.1: # %cond_true.preheader
; PIC-NEXT:    movl {{[0-9]+}}(%esp), %edx
; PIC-NEXT:    shll $6, %edx
; PIC-NEXT:    movl A@GOT(%ecx), %ecx
; PIC-NEXT:    addl %edx, %ecx
; PIC-NEXT:    addl $8, %ecx
; PIC-NEXT:    xorl %edx, %edx
; PIC-NEXT:    .p2align 4
; PIC-NEXT:  .LBB0_2: # %cond_true
; PIC-NEXT:    # =>This Inner Loop Header: Depth=1
; PIC-NEXT:    movl $4, -4(%ecx,%edx,4)
; PIC-NEXT:    movl $5, (%ecx,%edx,4)
; PIC-NEXT:    incl %edx
; PIC-NEXT:    cmpl %edx, %eax
; PIC-NEXT:    jne .LBB0_2
; PIC-NEXT:  .LBB0_3: # %return
; PIC-NEXT:    retl
;
; STATIC-LABEL: test:
; STATIC:       # %bb.0: # %entry
; STATIC-NEXT:    movl {{[0-9]+}}(%esp), %eax
; STATIC-NEXT:    testl %eax, %eax
; STATIC-NEXT:    jle .LBB0_3
; STATIC-NEXT:  # %bb.1: # %cond_true.preheader
; STATIC-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; STATIC-NEXT:    shll $6, %ecx
; STATIC-NEXT:    xorl %edx, %edx
; STATIC-NEXT:    .p2align 4
; STATIC-NEXT:  .LBB0_2: # %cond_true
; STATIC-NEXT:    # =>This Inner Loop Header: Depth=1
; STATIC-NEXT:    movl $4, A+4(%ecx,%edx,4)
; STATIC-NEXT:    movl $5, A+8(%ecx,%edx,4)
; STATIC-NEXT:    incl %edx
; STATIC-NEXT:    cmpl %edx, %eax
; STATIC-NEXT:    jne .LBB0_2
; STATIC-NEXT:  .LBB0_3: # %return
; STATIC-NEXT:    retl
entry:
	%N = bitcast i32 %N.in to i32		; <i32> [#uses=1]
	%tmp5 = icmp sgt i32 %N.in, 0		; <i1> [#uses=1]
	br i1 %tmp5, label %cond_true, label %return

cond_true:		; preds = %cond_true, %entry
	%indvar = phi i32 [ 0, %entry ], [ %indvar.next, %cond_true ]		; <i32> [#uses=2]
	%i.0.0 = bitcast i32 %indvar to i32		; <i32> [#uses=2]
	%tmp2 = add i32 %i.0.0, 1		; <i32> [#uses=1]
	%tmp = getelementptr [16 x [16 x i32]], ptr @A, i32 0, i32 %row, i32 %tmp2		; <ptr> [#uses=1]
	store i32 4, ptr %tmp
	%tmp5.upgrd.1 = add i32 %i.0.0, 2		; <i32> [#uses=1]
	%tmp7 = getelementptr [16 x [16 x i32]], ptr @A, i32 0, i32 %row, i32 %tmp5.upgrd.1		; <ptr> [#uses=1]
	store i32 5, ptr %tmp7
	%indvar.next = add i32 %indvar, 1		; <i32> [#uses=2]
	%exitcond = icmp eq i32 %indvar.next, %N		; <i1> [#uses=1]
	br i1 %exitcond, label %return, label %cond_true

return:		; preds = %cond_true, %entry
	ret void
}
