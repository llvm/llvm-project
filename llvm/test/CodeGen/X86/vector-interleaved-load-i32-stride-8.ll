; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-- -mattr=+sse2 | FileCheck %s --check-prefixes=SSE,FALLBACK0
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx  | FileCheck %s --check-prefixes=AVX,AVX1,AVX1-ONLY,FALLBACK1
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx2 | FileCheck %s --check-prefixes=AVX,AVX1,AVX2,AVX2-ONLY,AVX2-SLOW,FALLBACK2
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx2,+fast-variable-crosslane-shuffle,+fast-variable-perlane-shuffle | FileCheck %s --check-prefixes=AVX,AVX1,AVX2,AVX2-ONLY,AVX2-FAST,FALLBACK3
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx2,+fast-variable-perlane-shuffle | FileCheck %s --check-prefixes=AVX,AVX1,AVX2,AVX2-ONLY,AVX2-FAST-PERLANE,FALLBACK4
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512F,AVX512F-SLOW,AVX512F-ONLY-SLOW,FALLBACK5
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+fast-variable-crosslane-shuffle,+fast-variable-perlane-shuffle | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512F,AVX512F-FAST,AVX512F-ONLY-FAST,FALLBACK6
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+avx512dq | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512F,AVX512F-SLOW,AVX512DQ-SLOW,FALLBACK7
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+avx512dq,+fast-variable-crosslane-shuffle,+fast-variable-perlane-shuffle | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512F,AVX512F-FAST,AVX512DQ-FAST,FALLBACK8
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+avx512bw | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512BW,AVX512BW-SLOW,AVX512BW-ONLY-SLOW,FALLBACK9
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+avx512bw,+fast-variable-crosslane-shuffle,+fast-variable-perlane-shuffle | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512BW,AVX512BW-FAST,AVX512BW-ONLY-FAST,FALLBACK10
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+avx512dq,+avx512bw | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512BW,AVX512BW-SLOW,AVX512DQBW-SLOW,FALLBACK11
; RUN: llc < %s -mtriple=x86_64-- -mattr=+avx512vl,+avx512dq,+avx512bw,+fast-variable-crosslane-shuffle,+fast-variable-perlane-shuffle | FileCheck %s --check-prefixes=AVX,AVX2,AVX512,AVX512BW,AVX512BW-FAST,AVX512DQBW-FAST,FALLBACK12

; These patterns are produced by LoopVectorizer for interleaved loads.

define void @load_i32_stride8_vf2(ptr %in.vec, ptr %out.vec0, ptr %out.vec1, ptr %out.vec2, ptr %out.vec3, ptr %out.vec4, ptr %out.vec5, ptr %out.vec6, ptr %out.vec7) nounwind {
; SSE-LABEL: load_i32_stride8_vf2:
; SSE:       # %bb.0:
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; SSE-NEXT:    movdqa (%rdi), %xmm0
; SSE-NEXT:    movdqa 16(%rdi), %xmm1
; SSE-NEXT:    movdqa 32(%rdi), %xmm2
; SSE-NEXT:    movdqa 48(%rdi), %xmm3
; SSE-NEXT:    movdqa %xmm0, %xmm4
; SSE-NEXT:    punpckldq {{.*#+}} xmm4 = xmm4[0],xmm2[0],xmm4[1],xmm2[1]
; SSE-NEXT:    pshufd {{.*#+}} xmm5 = xmm4[2,3,2,3]
; SSE-NEXT:    punpckhdq {{.*#+}} xmm0 = xmm0[2],xmm2[2],xmm0[3],xmm2[3]
; SSE-NEXT:    pshufd {{.*#+}} xmm2 = xmm0[2,3,2,3]
; SSE-NEXT:    movdqa %xmm1, %xmm6
; SSE-NEXT:    punpckldq {{.*#+}} xmm6 = xmm6[0],xmm3[0],xmm6[1],xmm3[1]
; SSE-NEXT:    pshufd {{.*#+}} xmm7 = xmm6[2,3,2,3]
; SSE-NEXT:    punpckhdq {{.*#+}} xmm1 = xmm1[2],xmm3[2],xmm1[3],xmm3[3]
; SSE-NEXT:    pshufd {{.*#+}} xmm3 = xmm1[2,3,2,3]
; SSE-NEXT:    movq %xmm4, (%rsi)
; SSE-NEXT:    movq %xmm5, (%rdx)
; SSE-NEXT:    movq %xmm0, (%rcx)
; SSE-NEXT:    movq %xmm2, (%r8)
; SSE-NEXT:    movq %xmm6, (%r9)
; SSE-NEXT:    movq %xmm7, (%r11)
; SSE-NEXT:    movq %xmm1, (%r10)
; SSE-NEXT:    movq %xmm3, (%rax)
; SSE-NEXT:    retq
;
; AVX1-ONLY-LABEL: load_i32_stride8_vf2:
; AVX1-ONLY:       # %bb.0:
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %ymm0
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %ymm1
; AVX1-ONLY-NEXT:    vmovdqa 32(%rdi), %xmm2
; AVX1-ONLY-NEXT:    vmovdqa (%rdi), %xmm3
; AVX1-ONLY-NEXT:    vpunpckldq {{.*#+}} xmm4 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
; AVX1-ONLY-NEXT:    vpshufd {{.*#+}} xmm5 = xmm3[1,1,1,1]
; AVX1-ONLY-NEXT:    vpblendw {{.*#+}} xmm5 = xmm5[0,1],xmm2[2,3],xmm5[4,5,6,7]
; AVX1-ONLY-NEXT:    vpunpckhdq {{.*#+}} xmm2 = xmm3[2],xmm2[2],xmm3[3],xmm2[3]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm3 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[4],ymm1[4],ymm0[5],ymm1[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm3, %xmm3
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm6 = ymm1[1,0],ymm0[1,0],ymm1[5,4],ymm0[5,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm6 = ymm6[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm6, %xmm6
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm7 = ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[6],ymm1[6],ymm0[7],ymm1[7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm7, %xmm7
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm0 = ymm1[3,0],ymm0[3,0],ymm1[7,4],ymm0[7,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm0, %xmm0
; AVX1-ONLY-NEXT:    vmovq %xmm4, (%rsi)
; AVX1-ONLY-NEXT:    vmovq %xmm5, (%rdx)
; AVX1-ONLY-NEXT:    vmovq %xmm2, (%rcx)
; AVX1-ONLY-NEXT:    vpextrq $1, %xmm2, (%r8)
; AVX1-ONLY-NEXT:    vmovlps %xmm3, (%r9)
; AVX1-ONLY-NEXT:    vmovlps %xmm6, (%r11)
; AVX1-ONLY-NEXT:    vmovlps %xmm7, (%r10)
; AVX1-ONLY-NEXT:    vmovlps %xmm0, (%rax)
; AVX1-ONLY-NEXT:    vzeroupper
; AVX1-ONLY-NEXT:    retq
;
; AVX2-ONLY-LABEL: load_i32_stride8_vf2:
; AVX2-ONLY:       # %bb.0:
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX2-ONLY-NEXT:    vmovaps 32(%rdi), %ymm0
; AVX2-ONLY-NEXT:    vmovaps (%rdi), %ymm1
; AVX2-ONLY-NEXT:    vmovdqa (%rdi), %xmm2
; AVX2-ONLY-NEXT:    vmovdqa 32(%rdi), %xmm3
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} xmm4 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} xmm5 = xmm2[1,1,1,1]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm5 = xmm5[0],xmm3[1],xmm5[2,3]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} xmm2 = xmm2[2],xmm3[2],xmm2[3],xmm3[3]
; AVX2-ONLY-NEXT:    vbroadcastss 48(%rdi), %xmm3
; AVX2-ONLY-NEXT:    vbroadcastss 16(%rdi), %ymm6
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm3 = xmm6[0],xmm3[0],xmm6[1],xmm3[1]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} ymm6 = ymm1[1,1,1,1,5,5,5,5]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm6 = ymm6[0],ymm0[1],ymm6[2,3,4],ymm0[5],ymm6[6,7]
; AVX2-ONLY-NEXT:    vextractf128 $1, %ymm6, %xmm6
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} ymm0 = ymm1[2],ymm0[2],ymm1[3],ymm0[3],ymm1[6],ymm0[6],ymm1[7],ymm0[7]
; AVX2-ONLY-NEXT:    vextractf128 $1, %ymm0, %xmm1
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[2,3,2,3,6,7,6,7]
; AVX2-ONLY-NEXT:    vextractf128 $1, %ymm0, %xmm0
; AVX2-ONLY-NEXT:    vmovq %xmm4, (%rsi)
; AVX2-ONLY-NEXT:    vmovq %xmm5, (%rdx)
; AVX2-ONLY-NEXT:    vmovq %xmm2, (%rcx)
; AVX2-ONLY-NEXT:    vpextrq $1, %xmm2, (%r8)
; AVX2-ONLY-NEXT:    vmovlps %xmm3, (%r9)
; AVX2-ONLY-NEXT:    vmovlps %xmm6, (%r11)
; AVX2-ONLY-NEXT:    vmovlps %xmm1, (%r10)
; AVX2-ONLY-NEXT:    vmovlps %xmm0, (%rax)
; AVX2-ONLY-NEXT:    vzeroupper
; AVX2-ONLY-NEXT:    retq
;
; AVX512F-SLOW-LABEL: load_i32_stride8_vf2:
; AVX512F-SLOW:       # %bb.0:
; AVX512F-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512F-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512F-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512F-SLOW-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-SLOW-NEXT:    vmovdqa 32(%rdi), %xmm1
; AVX512F-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm2 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
; AVX512F-SLOW-NEXT:    vpshufd {{.*#+}} xmm3 = xmm0[1,1,1,1]
; AVX512F-SLOW-NEXT:    vpblendd {{.*#+}} xmm3 = xmm3[0],xmm1[1],xmm3[2,3]
; AVX512F-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm0 = xmm0[2],xmm1[2],xmm0[3],xmm1[3]
; AVX512F-SLOW-NEXT:    vmovaps 32(%rdi), %ymm1
; AVX512F-SLOW-NEXT:    vmovaps (%rdi), %ymm4
; AVX512F-SLOW-NEXT:    vunpcklps {{.*#+}} ymm5 = ymm4[0],ymm1[0],ymm4[1],ymm1[1],ymm4[4],ymm1[4],ymm4[5],ymm1[5]
; AVX512F-SLOW-NEXT:    vextractf128 $1, %ymm5, %xmm5
; AVX512F-SLOW-NEXT:    vpermilps {{.*#+}} ymm6 = ymm4[1,1,1,1,5,5,5,5]
; AVX512F-SLOW-NEXT:    vblendps {{.*#+}} ymm6 = ymm6[0],ymm1[1],ymm6[2,3,4],ymm1[5],ymm6[6,7]
; AVX512F-SLOW-NEXT:    vextractf128 $1, %ymm6, %xmm6
; AVX512F-SLOW-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm4[2],ymm1[2],ymm4[3],ymm1[3],ymm4[6],ymm1[6],ymm4[7],ymm1[7]
; AVX512F-SLOW-NEXT:    vextractf128 $1, %ymm1, %xmm4
; AVX512F-SLOW-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[2,3,2,3,6,7,6,7]
; AVX512F-SLOW-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX512F-SLOW-NEXT:    vmovq %xmm2, (%rsi)
; AVX512F-SLOW-NEXT:    vmovq %xmm3, (%rdx)
; AVX512F-SLOW-NEXT:    vmovq %xmm0, (%rcx)
; AVX512F-SLOW-NEXT:    vpextrq $1, %xmm0, (%r8)
; AVX512F-SLOW-NEXT:    vmovlps %xmm5, (%r9)
; AVX512F-SLOW-NEXT:    vmovlps %xmm6, (%r11)
; AVX512F-SLOW-NEXT:    vmovlps %xmm4, (%r10)
; AVX512F-SLOW-NEXT:    vmovlps %xmm1, (%rax)
; AVX512F-SLOW-NEXT:    vzeroupper
; AVX512F-SLOW-NEXT:    retq
;
; AVX512F-FAST-LABEL: load_i32_stride8_vf2:
; AVX512F-FAST:       # %bb.0:
; AVX512F-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512F-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512F-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512F-FAST-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512F-FAST-NEXT:    vmovdqa 32(%rdi), %xmm1
; AVX512F-FAST-NEXT:    vpunpckldq {{.*#+}} xmm2 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
; AVX512F-FAST-NEXT:    vmovdqa {{.*#+}} xmm3 = <1,5,u,u>
; AVX512F-FAST-NEXT:    vpermi2d %xmm1, %xmm0, %xmm3
; AVX512F-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm0 = xmm0[2],xmm1[2],xmm0[3],xmm1[3]
; AVX512F-FAST-NEXT:    vmovdqa 32(%rdi), %ymm1
; AVX512F-FAST-NEXT:    vmovdqa (%rdi), %ymm4
; AVX512F-FAST-NEXT:    vpunpckldq {{.*#+}} ymm5 = ymm4[0],ymm1[0],ymm4[1],ymm1[1],ymm4[4],ymm1[4],ymm4[5],ymm1[5]
; AVX512F-FAST-NEXT:    vextracti128 $1, %ymm5, %xmm5
; AVX512F-FAST-NEXT:    vbroadcasti128 {{.*#+}} ymm6 = [5,13,5,5,5,13,5,5]
; AVX512F-FAST-NEXT:    # ymm6 = mem[0,1,0,1]
; AVX512F-FAST-NEXT:    vpermi2d %ymm1, %ymm4, %ymm6
; AVX512F-FAST-NEXT:    vextracti128 $1, %ymm6, %xmm6
; AVX512F-FAST-NEXT:    vpunpckhdq {{.*#+}} ymm1 = ymm4[2],ymm1[2],ymm4[3],ymm1[3],ymm4[6],ymm1[6],ymm4[7],ymm1[7]
; AVX512F-FAST-NEXT:    vextracti128 $1, %ymm1, %xmm4
; AVX512F-FAST-NEXT:    vpshufd {{.*#+}} ymm1 = ymm1[2,3,2,3,6,7,6,7]
; AVX512F-FAST-NEXT:    vextracti128 $1, %ymm1, %xmm1
; AVX512F-FAST-NEXT:    vmovq %xmm2, (%rsi)
; AVX512F-FAST-NEXT:    vmovq %xmm3, (%rdx)
; AVX512F-FAST-NEXT:    vmovq %xmm0, (%rcx)
; AVX512F-FAST-NEXT:    vpextrq $1, %xmm0, (%r8)
; AVX512F-FAST-NEXT:    vmovq %xmm5, (%r9)
; AVX512F-FAST-NEXT:    vmovq %xmm6, (%r11)
; AVX512F-FAST-NEXT:    vmovq %xmm4, (%r10)
; AVX512F-FAST-NEXT:    vmovq %xmm1, (%rax)
; AVX512F-FAST-NEXT:    vzeroupper
; AVX512F-FAST-NEXT:    retq
;
; AVX512BW-SLOW-LABEL: load_i32_stride8_vf2:
; AVX512BW-SLOW:       # %bb.0:
; AVX512BW-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512BW-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512BW-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512BW-SLOW-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512BW-SLOW-NEXT:    vmovdqa 32(%rdi), %xmm1
; AVX512BW-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm2 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
; AVX512BW-SLOW-NEXT:    vpshufd {{.*#+}} xmm3 = xmm0[1,1,1,1]
; AVX512BW-SLOW-NEXT:    vpblendd {{.*#+}} xmm3 = xmm3[0],xmm1[1],xmm3[2,3]
; AVX512BW-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm0 = xmm0[2],xmm1[2],xmm0[3],xmm1[3]
; AVX512BW-SLOW-NEXT:    vmovaps 32(%rdi), %ymm1
; AVX512BW-SLOW-NEXT:    vmovaps (%rdi), %ymm4
; AVX512BW-SLOW-NEXT:    vunpcklps {{.*#+}} ymm5 = ymm4[0],ymm1[0],ymm4[1],ymm1[1],ymm4[4],ymm1[4],ymm4[5],ymm1[5]
; AVX512BW-SLOW-NEXT:    vextractf128 $1, %ymm5, %xmm5
; AVX512BW-SLOW-NEXT:    vpermilps {{.*#+}} ymm6 = ymm4[1,1,1,1,5,5,5,5]
; AVX512BW-SLOW-NEXT:    vblendps {{.*#+}} ymm6 = ymm6[0],ymm1[1],ymm6[2,3,4],ymm1[5],ymm6[6,7]
; AVX512BW-SLOW-NEXT:    vextractf128 $1, %ymm6, %xmm6
; AVX512BW-SLOW-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm4[2],ymm1[2],ymm4[3],ymm1[3],ymm4[6],ymm1[6],ymm4[7],ymm1[7]
; AVX512BW-SLOW-NEXT:    vextractf128 $1, %ymm1, %xmm4
; AVX512BW-SLOW-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[2,3,2,3,6,7,6,7]
; AVX512BW-SLOW-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX512BW-SLOW-NEXT:    vmovq %xmm2, (%rsi)
; AVX512BW-SLOW-NEXT:    vmovq %xmm3, (%rdx)
; AVX512BW-SLOW-NEXT:    vmovq %xmm0, (%rcx)
; AVX512BW-SLOW-NEXT:    vpextrq $1, %xmm0, (%r8)
; AVX512BW-SLOW-NEXT:    vmovlps %xmm5, (%r9)
; AVX512BW-SLOW-NEXT:    vmovlps %xmm6, (%r11)
; AVX512BW-SLOW-NEXT:    vmovlps %xmm4, (%r10)
; AVX512BW-SLOW-NEXT:    vmovlps %xmm1, (%rax)
; AVX512BW-SLOW-NEXT:    vzeroupper
; AVX512BW-SLOW-NEXT:    retq
;
; AVX512BW-FAST-LABEL: load_i32_stride8_vf2:
; AVX512BW-FAST:       # %bb.0:
; AVX512BW-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512BW-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512BW-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512BW-FAST-NEXT:    vmovdqa (%rdi), %xmm0
; AVX512BW-FAST-NEXT:    vmovdqa 32(%rdi), %xmm1
; AVX512BW-FAST-NEXT:    vpunpckldq {{.*#+}} xmm2 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
; AVX512BW-FAST-NEXT:    vmovdqa {{.*#+}} xmm3 = <1,5,u,u>
; AVX512BW-FAST-NEXT:    vpermi2d %xmm1, %xmm0, %xmm3
; AVX512BW-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm0 = xmm0[2],xmm1[2],xmm0[3],xmm1[3]
; AVX512BW-FAST-NEXT:    vmovdqa 32(%rdi), %ymm1
; AVX512BW-FAST-NEXT:    vmovdqa (%rdi), %ymm4
; AVX512BW-FAST-NEXT:    vpunpckldq {{.*#+}} ymm5 = ymm4[0],ymm1[0],ymm4[1],ymm1[1],ymm4[4],ymm1[4],ymm4[5],ymm1[5]
; AVX512BW-FAST-NEXT:    vextracti128 $1, %ymm5, %xmm5
; AVX512BW-FAST-NEXT:    vbroadcasti128 {{.*#+}} ymm6 = [5,13,5,5,5,13,5,5]
; AVX512BW-FAST-NEXT:    # ymm6 = mem[0,1,0,1]
; AVX512BW-FAST-NEXT:    vpermi2d %ymm1, %ymm4, %ymm6
; AVX512BW-FAST-NEXT:    vextracti128 $1, %ymm6, %xmm6
; AVX512BW-FAST-NEXT:    vpunpckhdq {{.*#+}} ymm1 = ymm4[2],ymm1[2],ymm4[3],ymm1[3],ymm4[6],ymm1[6],ymm4[7],ymm1[7]
; AVX512BW-FAST-NEXT:    vextracti128 $1, %ymm1, %xmm4
; AVX512BW-FAST-NEXT:    vpshufd {{.*#+}} ymm1 = ymm1[2,3,2,3,6,7,6,7]
; AVX512BW-FAST-NEXT:    vextracti128 $1, %ymm1, %xmm1
; AVX512BW-FAST-NEXT:    vmovq %xmm2, (%rsi)
; AVX512BW-FAST-NEXT:    vmovq %xmm3, (%rdx)
; AVX512BW-FAST-NEXT:    vmovq %xmm0, (%rcx)
; AVX512BW-FAST-NEXT:    vpextrq $1, %xmm0, (%r8)
; AVX512BW-FAST-NEXT:    vmovq %xmm5, (%r9)
; AVX512BW-FAST-NEXT:    vmovq %xmm6, (%r11)
; AVX512BW-FAST-NEXT:    vmovq %xmm4, (%r10)
; AVX512BW-FAST-NEXT:    vmovq %xmm1, (%rax)
; AVX512BW-FAST-NEXT:    vzeroupper
; AVX512BW-FAST-NEXT:    retq
  %wide.vec = load <16 x i32>, ptr %in.vec, align 64

  %strided.vec0 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 0, i32 8>
  %strided.vec1 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 1, i32 9>
  %strided.vec2 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 2, i32 10>
  %strided.vec3 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 3, i32 11>
  %strided.vec4 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 4, i32 12>
  %strided.vec5 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 5, i32 13>
  %strided.vec6 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 6, i32 14>
  %strided.vec7 = shufflevector <16 x i32> %wide.vec, <16 x i32> poison, <2 x i32> <i32 7, i32 15>

  store <2 x i32> %strided.vec0, ptr %out.vec0, align 64
  store <2 x i32> %strided.vec1, ptr %out.vec1, align 64
  store <2 x i32> %strided.vec2, ptr %out.vec2, align 64
  store <2 x i32> %strided.vec3, ptr %out.vec3, align 64
  store <2 x i32> %strided.vec4, ptr %out.vec4, align 64
  store <2 x i32> %strided.vec5, ptr %out.vec5, align 64
  store <2 x i32> %strided.vec6, ptr %out.vec6, align 64
  store <2 x i32> %strided.vec7, ptr %out.vec7, align 64

  ret void
}

define void @load_i32_stride8_vf4(ptr %in.vec, ptr %out.vec0, ptr %out.vec1, ptr %out.vec2, ptr %out.vec3, ptr %out.vec4, ptr %out.vec5, ptr %out.vec6, ptr %out.vec7) nounwind {
; SSE-LABEL: load_i32_stride8_vf4:
; SSE:       # %bb.0:
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; SSE-NEXT:    movaps 112(%rdi), %xmm3
; SSE-NEXT:    movaps 80(%rdi), %xmm2
; SSE-NEXT:    movaps (%rdi), %xmm1
; SSE-NEXT:    movaps 16(%rdi), %xmm0
; SSE-NEXT:    movaps 32(%rdi), %xmm4
; SSE-NEXT:    movaps 48(%rdi), %xmm5
; SSE-NEXT:    movaps 96(%rdi), %xmm6
; SSE-NEXT:    movaps 64(%rdi), %xmm7
; SSE-NEXT:    movaps %xmm7, %xmm8
; SSE-NEXT:    unpcklps {{.*#+}} xmm8 = xmm8[0],xmm6[0],xmm8[1],xmm6[1]
; SSE-NEXT:    movaps %xmm1, %xmm9
; SSE-NEXT:    unpcklps {{.*#+}} xmm9 = xmm9[0],xmm4[0],xmm9[1],xmm4[1]
; SSE-NEXT:    movaps %xmm9, %xmm10
; SSE-NEXT:    movlhps {{.*#+}} xmm10 = xmm10[0],xmm8[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm9 = xmm9[1],xmm8[1]
; SSE-NEXT:    unpckhps {{.*#+}} xmm7 = xmm7[2],xmm6[2],xmm7[3],xmm6[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm1 = xmm1[2],xmm4[2],xmm1[3],xmm4[3]
; SSE-NEXT:    movaps %xmm1, %xmm4
; SSE-NEXT:    movlhps {{.*#+}} xmm4 = xmm4[0],xmm7[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1],xmm7[1]
; SSE-NEXT:    movaps %xmm2, %xmm6
; SSE-NEXT:    unpcklps {{.*#+}} xmm6 = xmm6[0],xmm3[0],xmm6[1],xmm3[1]
; SSE-NEXT:    movaps %xmm0, %xmm7
; SSE-NEXT:    unpcklps {{.*#+}} xmm7 = xmm7[0],xmm5[0],xmm7[1],xmm5[1]
; SSE-NEXT:    movaps %xmm7, %xmm8
; SSE-NEXT:    movlhps {{.*#+}} xmm8 = xmm8[0],xmm6[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm7 = xmm7[1],xmm6[1]
; SSE-NEXT:    unpckhps {{.*#+}} xmm2 = xmm2[2],xmm3[2],xmm2[3],xmm3[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm0 = xmm0[2],xmm5[2],xmm0[3],xmm5[3]
; SSE-NEXT:    movaps %xmm0, %xmm3
; SSE-NEXT:    movlhps {{.*#+}} xmm3 = xmm3[0],xmm2[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm0 = xmm0[1],xmm2[1]
; SSE-NEXT:    movaps %xmm10, (%rsi)
; SSE-NEXT:    movaps %xmm9, (%rdx)
; SSE-NEXT:    movaps %xmm4, (%rcx)
; SSE-NEXT:    movaps %xmm1, (%r8)
; SSE-NEXT:    movaps %xmm8, (%r9)
; SSE-NEXT:    movaps %xmm7, (%r11)
; SSE-NEXT:    movaps %xmm3, (%r10)
; SSE-NEXT:    movaps %xmm0, (%rax)
; SSE-NEXT:    retq
;
; AVX1-ONLY-LABEL: load_i32_stride8_vf4:
; AVX1-ONLY:       # %bb.0:
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %ymm0
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %ymm1
; AVX1-ONLY-NEXT:    vmovaps 64(%rdi), %ymm2
; AVX1-ONLY-NEXT:    vmovaps 96(%rdi), %ymm3
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %xmm5
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %xmm6
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm4 = xmm6[0],xmm5[0],xmm6[1],xmm5[1]
; AVX1-ONLY-NEXT:    vmovaps 96(%rdi), %xmm7
; AVX1-ONLY-NEXT:    vmovaps 64(%rdi), %xmm8
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm9 = xmm8[0],xmm7[0],xmm8[1],xmm7[1]
; AVX1-ONLY-NEXT:    vmovlhps {{.*#+}} xmm4 = xmm4[0],xmm9[0]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm10 = xmm6[1,1,1,1]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm10 = xmm10[0],xmm5[1],xmm10[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm9 = xmm10[0,1],xmm9[2,3]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm10 = xmm7[2,2,2,2]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm10 = xmm8[0,1,2],xmm10[3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm5 = xmm6[2],xmm5[2],xmm6[3],xmm5[3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm6 = xmm5[0,1],xmm10[2,3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm7 = xmm8[2],xmm7[2],xmm8[3],xmm7[3]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm5 = xmm5[1],xmm7[1]
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm7 = ymm3[0],ymm2[0],ymm3[2],ymm2[2]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm7 = ymm7[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm7, %xmm7
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm8 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[4],ymm1[4],ymm0[5],ymm1[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm8, %xmm8
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm7 = xmm8[0,1],xmm7[2,3]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm8 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[4],ymm3[4],ymm2[5],ymm3[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm8, %xmm8
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm10 = ymm1[1,0],ymm0[1,0],ymm1[5,4],ymm0[5,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm10 = ymm10[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm10, %xmm10
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm8 = xmm10[0,1],xmm8[2,3]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm10 = ymm3[1],ymm2[1],ymm3[3],ymm2[3]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm10 = ymm10[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm10, %xmm10
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm11 = ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[6],ymm1[6],ymm0[7],ymm1[7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm11, %xmm11
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm10 = xmm11[0,1],xmm10[2,3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm2 = ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[6],ymm3[6],ymm2[7],ymm3[7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm2, %xmm2
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm0 = ymm1[3,0],ymm0[3,0],ymm1[7,4],ymm0[7,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm0, %xmm0
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0,1],xmm2[2,3]
; AVX1-ONLY-NEXT:    vmovaps %xmm4, (%rsi)
; AVX1-ONLY-NEXT:    vmovaps %xmm9, (%rdx)
; AVX1-ONLY-NEXT:    vmovaps %xmm6, (%rcx)
; AVX1-ONLY-NEXT:    vmovaps %xmm5, (%r8)
; AVX1-ONLY-NEXT:    vmovaps %xmm7, (%r9)
; AVX1-ONLY-NEXT:    vmovaps %xmm8, (%r11)
; AVX1-ONLY-NEXT:    vmovaps %xmm10, (%r10)
; AVX1-ONLY-NEXT:    vmovaps %xmm0, (%rax)
; AVX1-ONLY-NEXT:    vzeroupper
; AVX1-ONLY-NEXT:    retq
;
; AVX2-ONLY-LABEL: load_i32_stride8_vf4:
; AVX2-ONLY:       # %bb.0:
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX2-ONLY-NEXT:    vmovdqa 32(%rdi), %ymm0
; AVX2-ONLY-NEXT:    vmovdqa (%rdi), %ymm2
; AVX2-ONLY-NEXT:    vmovdqa 96(%rdi), %ymm1
; AVX2-ONLY-NEXT:    vmovdqa 64(%rdi), %ymm3
; AVX2-ONLY-NEXT:    vmovaps 96(%rdi), %xmm6
; AVX2-ONLY-NEXT:    vbroadcastss %xmm6, %xmm4
; AVX2-ONLY-NEXT:    vmovaps (%rdi), %xmm7
; AVX2-ONLY-NEXT:    vmovaps 32(%rdi), %xmm8
; AVX2-ONLY-NEXT:    vmovaps 64(%rdi), %xmm9
; AVX2-ONLY-NEXT:    vbroadcastss %xmm9, %xmm5
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm4 = xmm5[0],xmm4[0],xmm5[1],xmm4[1]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm7[0],xmm8[0],xmm7[1],xmm8[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm4 = xmm5[0,1],xmm4[2,3]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm9[0],xmm6[0],xmm9[1],xmm6[1]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm10 = xmm7[1,1,1,1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm10 = xmm10[0],xmm8[1],xmm10[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm10[0,1],xmm5[2,3]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm10 = xmm6[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm10 = xmm9[0,1,2],xmm10[3]
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm7 = xmm7[2],xmm8[2],xmm7[3],xmm8[3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm8 = xmm7[0,1],xmm10[2,3]
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm6 = xmm9[2],xmm6[2],xmm9[3],xmm6[3]
; AVX2-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm6 = xmm7[1],xmm6[1]
; AVX2-ONLY-NEXT:    vpbroadcastd 48(%rdi), %xmm7
; AVX2-ONLY-NEXT:    vpbroadcastd 16(%rdi), %ymm9
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} xmm7 = xmm9[0],xmm7[0],xmm9[1],xmm7[1]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm9 = ymm3[0],ymm1[0],ymm3[1],ymm1[1],ymm3[4],ymm1[4],ymm3[5],ymm1[5]
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm9 = ymm9[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm7 = xmm7[0,1],xmm9[2,3]
; AVX2-ONLY-NEXT:    vpmovzxdq {{.*#+}} xmm9 = mem[0],zero,mem[1],zero
; AVX2-ONLY-NEXT:    vpbroadcastd 116(%rdi), %ymm10
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0,1,2],xmm10[3]
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm10 = ymm2[1,1,1,1,5,5,5,5]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm10 = ymm10[0],ymm0[1],ymm10[2,3,4],ymm0[5],ymm10[6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm10, %xmm10
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm9 = xmm10[0,1],xmm9[2,3]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm0 = ymm2[2],ymm0[2],ymm2[3],ymm0[3],ymm2[6],ymm0[6],ymm2[7],ymm0[7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm0, %xmm2
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm1 = ymm3[2],ymm1[2],ymm3[3],ymm1[3],ymm3[6],ymm1[6],ymm3[7],ymm1[7]
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm3 = ymm1[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm2 = xmm2[0,1],xmm3[2,3]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm1, %xmm1
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm0 = ymm0[2,3,2,3,6,7,6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm0, %xmm0
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vmovaps %xmm4, (%rsi)
; AVX2-ONLY-NEXT:    vmovaps %xmm5, (%rdx)
; AVX2-ONLY-NEXT:    vmovaps %xmm8, (%rcx)
; AVX2-ONLY-NEXT:    vmovaps %xmm6, (%r8)
; AVX2-ONLY-NEXT:    vmovdqa %xmm7, (%r9)
; AVX2-ONLY-NEXT:    vmovdqa %xmm9, (%r11)
; AVX2-ONLY-NEXT:    vmovdqa %xmm2, (%r10)
; AVX2-ONLY-NEXT:    vmovdqa %xmm0, (%rax)
; AVX2-ONLY-NEXT:    vzeroupper
; AVX2-ONLY-NEXT:    retq
;
; AVX512F-ONLY-SLOW-LABEL: load_i32_stride8_vf4:
; AVX512F-ONLY-SLOW:       # %bb.0:
; AVX512F-ONLY-SLOW-NEXT:    pushq %rbx
; AVX512F-ONLY-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512F-ONLY-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512F-ONLY-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 64(%rdi), %xmm2
; AVX512F-ONLY-SLOW-NEXT:    vmovd %xmm2, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa (%rdi), %xmm3
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 16(%rdi), %xmm4
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 32(%rdi), %xmm5
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 48(%rdi), %xmm1
; AVX512F-ONLY-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm0 = xmm3[0],xmm5[0],xmm3[1],xmm5[1]
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm0, %xmm0
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 96(%rdi), %xmm6
; AVX512F-ONLY-SLOW-NEXT:    vmovd %xmm6, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm0, %xmm0
; AVX512F-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm7 = xmm3[1,1,1,1]
; AVX512F-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm7 = xmm7[0],xmm5[1],xmm7[2,3]
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $1, %xmm2, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm7, %xmm7
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $1, %xmm6, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm7, %xmm7
; AVX512F-ONLY-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm3 = xmm3[2],xmm5[2],xmm3[3],xmm5[3]
; AVX512F-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm5 = xmm3[0,1],xmm2[2],xmm3[3]
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $2, %xmm6, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm5, %xmm5
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $3, %xmm2, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm2 = xmm3[2,3,2,3]
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm2, %xmm2
; AVX512F-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm2 = xmm2[0,1,2],xmm6[3]
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 80(%rdi), %xmm3
; AVX512F-ONLY-SLOW-NEXT:    vmovd %xmm3, %ebx
; AVX512F-ONLY-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm6 = xmm4[0],xmm1[0],xmm4[1],xmm1[1]
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm6, %xmm6
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa 112(%rdi), %xmm8
; AVX512F-ONLY-SLOW-NEXT:    vmovd %xmm8, %edi
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $3, %edi, %xmm6, %xmm6
; AVX512F-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm9 = xmm4[1,1,1,1]
; AVX512F-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0],xmm1[1],xmm9[2,3]
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $1, %xmm3, %edi
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $2, %edi, %xmm9, %xmm9
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $1, %xmm8, %edi
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $3, %edi, %xmm9, %xmm9
; AVX512F-ONLY-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm1 = xmm4[2],xmm1[2],xmm4[3],xmm1[3]
; AVX512F-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm4 = xmm1[0,1],xmm3[2],xmm1[3]
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $2, %xmm8, %edi
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $3, %edi, %xmm4, %xmm4
; AVX512F-ONLY-SLOW-NEXT:    vpextrd $3, %xmm3, %edi
; AVX512F-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm1 = xmm1[2,3,2,3]
; AVX512F-ONLY-SLOW-NEXT:    vpinsrd $2, %edi, %xmm1, %xmm1
; AVX512F-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1,2],xmm8[3]
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm0, (%rsi)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm7, (%rdx)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm5, (%rcx)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm2, (%r8)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm6, (%r9)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm9, (%r11)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm4, (%r10)
; AVX512F-ONLY-SLOW-NEXT:    vmovdqa %xmm1, (%rax)
; AVX512F-ONLY-SLOW-NEXT:    popq %rbx
; AVX512F-ONLY-SLOW-NEXT:    retq
;
; AVX512F-ONLY-FAST-LABEL: load_i32_stride8_vf4:
; AVX512F-ONLY-FAST:       # %bb.0:
; AVX512F-ONLY-FAST-NEXT:    pushq %rbx
; AVX512F-ONLY-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512F-ONLY-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512F-ONLY-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 64(%rdi), %xmm3
; AVX512F-ONLY-FAST-NEXT:    vmovd %xmm3, %ebx
; AVX512F-ONLY-FAST-NEXT:    vmovdqa (%rdi), %xmm4
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 16(%rdi), %xmm0
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 32(%rdi), %xmm5
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 48(%rdi), %xmm6
; AVX512F-ONLY-FAST-NEXT:    vpunpckldq {{.*#+}} xmm1 = xmm4[0],xmm5[0],xmm4[1],xmm5[1]
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm1, %xmm1
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 96(%rdi), %xmm7
; AVX512F-ONLY-FAST-NEXT:    vmovd %xmm7, %ebx
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $3, %ebx, %xmm1, %xmm1
; AVX512F-ONLY-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm8 = [21474836481,21474836481]
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm4, %xmm2
; AVX512F-ONLY-FAST-NEXT:    vpermt2d %xmm5, %xmm8, %xmm2
; AVX512F-ONLY-FAST-NEXT:    vpextrd $1, %xmm3, %ebx
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm2, %xmm2
; AVX512F-ONLY-FAST-NEXT:    vpextrd $1, %xmm7, %ebx
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $3, %ebx, %xmm2, %xmm2
; AVX512F-ONLY-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm9 = xmm4[2],xmm5[2],xmm4[3],xmm5[3]
; AVX512F-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0,1],xmm3[2],xmm9[3]
; AVX512F-ONLY-FAST-NEXT:    vpextrd $2, %xmm7, %ebx
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $3, %ebx, %xmm9, %xmm9
; AVX512F-ONLY-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm10 = [30064771075,30064771075]
; AVX512F-ONLY-FAST-NEXT:    vpermt2d %xmm5, %xmm10, %xmm4
; AVX512F-ONLY-FAST-NEXT:    vpextrd $3, %xmm3, %ebx
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm4, %xmm3
; AVX512F-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm3 = xmm3[0,1,2],xmm7[3]
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 80(%rdi), %xmm4
; AVX512F-ONLY-FAST-NEXT:    vmovd %xmm4, %ebx
; AVX512F-ONLY-FAST-NEXT:    vpunpckldq {{.*#+}} xmm5 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm5, %xmm5
; AVX512F-ONLY-FAST-NEXT:    vmovdqa 112(%rdi), %xmm7
; AVX512F-ONLY-FAST-NEXT:    vmovd %xmm7, %edi
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $3, %edi, %xmm5, %xmm5
; AVX512F-ONLY-FAST-NEXT:    vpermi2d %xmm6, %xmm0, %xmm8
; AVX512F-ONLY-FAST-NEXT:    vpextrd $1, %xmm4, %edi
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $2, %edi, %xmm8, %xmm8
; AVX512F-ONLY-FAST-NEXT:    vpextrd $1, %xmm7, %edi
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $3, %edi, %xmm8, %xmm8
; AVX512F-ONLY-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm11 = xmm0[2],xmm6[2],xmm0[3],xmm6[3]
; AVX512F-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm11 = xmm11[0,1],xmm4[2],xmm11[3]
; AVX512F-ONLY-FAST-NEXT:    vpextrd $2, %xmm7, %edi
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $3, %edi, %xmm11, %xmm11
; AVX512F-ONLY-FAST-NEXT:    vpermt2d %xmm6, %xmm10, %xmm0
; AVX512F-ONLY-FAST-NEXT:    vpextrd $3, %xmm4, %edi
; AVX512F-ONLY-FAST-NEXT:    vpinsrd $2, %edi, %xmm0, %xmm0
; AVX512F-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1,2],xmm7[3]
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm1, (%rsi)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm2, (%rdx)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm9, (%rcx)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm3, (%r8)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm5, (%r9)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm8, (%r11)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm11, (%r10)
; AVX512F-ONLY-FAST-NEXT:    vmovdqa %xmm0, (%rax)
; AVX512F-ONLY-FAST-NEXT:    popq %rbx
; AVX512F-ONLY-FAST-NEXT:    retq
;
; AVX512DQ-SLOW-LABEL: load_i32_stride8_vf4:
; AVX512DQ-SLOW:       # %bb.0:
; AVX512DQ-SLOW-NEXT:    pushq %rbx
; AVX512DQ-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512DQ-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512DQ-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512DQ-SLOW-NEXT:    vmovdqa 64(%rdi), %xmm1
; AVX512DQ-SLOW-NEXT:    vmovd %xmm1, %ebx
; AVX512DQ-SLOW-NEXT:    vmovdqa (%rdi), %xmm2
; AVX512DQ-SLOW-NEXT:    vmovdqa 16(%rdi), %xmm3
; AVX512DQ-SLOW-NEXT:    vmovdqa 32(%rdi), %xmm4
; AVX512DQ-SLOW-NEXT:    vmovdqa 48(%rdi), %xmm0
; AVX512DQ-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm5 = xmm2[0],xmm4[0],xmm2[1],xmm4[1]
; AVX512DQ-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm5, %xmm5
; AVX512DQ-SLOW-NEXT:    vmovdqa 96(%rdi), %xmm6
; AVX512DQ-SLOW-NEXT:    vmovd %xmm6, %ebx
; AVX512DQ-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm5, %xmm5
; AVX512DQ-SLOW-NEXT:    vpshufd {{.*#+}} xmm7 = xmm2[1,1,1,1]
; AVX512DQ-SLOW-NEXT:    vpblendd {{.*#+}} xmm7 = xmm7[0],xmm4[1],xmm7[2,3]
; AVX512DQ-SLOW-NEXT:    vpextrd $1, %xmm1, %ebx
; AVX512DQ-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm7, %xmm7
; AVX512DQ-SLOW-NEXT:    vpextrd $1, %xmm6, %ebx
; AVX512DQ-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm7, %xmm7
; AVX512DQ-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm2 = xmm2[2],xmm4[2],xmm2[3],xmm4[3]
; AVX512DQ-SLOW-NEXT:    vpblendd {{.*#+}} xmm4 = xmm2[0,1],xmm1[2],xmm2[3]
; AVX512DQ-SLOW-NEXT:    vpextrd $2, %xmm6, %ebx
; AVX512DQ-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm4, %xmm4
; AVX512DQ-SLOW-NEXT:    vpextrd $3, %xmm1, %ebx
; AVX512DQ-SLOW-NEXT:    vpshufd {{.*#+}} xmm1 = xmm2[2,3,2,3]
; AVX512DQ-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm1, %xmm1
; AVX512DQ-SLOW-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1,2],xmm6[3]
; AVX512DQ-SLOW-NEXT:    vmovdqa 80(%rdi), %xmm2
; AVX512DQ-SLOW-NEXT:    vmovd %xmm2, %ebx
; AVX512DQ-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm6 = xmm3[0],xmm0[0],xmm3[1],xmm0[1]
; AVX512DQ-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm6, %xmm6
; AVX512DQ-SLOW-NEXT:    vmovdqa 112(%rdi), %xmm8
; AVX512DQ-SLOW-NEXT:    vmovd %xmm8, %edi
; AVX512DQ-SLOW-NEXT:    vpinsrd $3, %edi, %xmm6, %xmm6
; AVX512DQ-SLOW-NEXT:    vpshufd {{.*#+}} xmm9 = xmm3[1,1,1,1]
; AVX512DQ-SLOW-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0],xmm0[1],xmm9[2,3]
; AVX512DQ-SLOW-NEXT:    vpextrd $1, %xmm2, %edi
; AVX512DQ-SLOW-NEXT:    vpinsrd $2, %edi, %xmm9, %xmm9
; AVX512DQ-SLOW-NEXT:    vpextrd $1, %xmm8, %edi
; AVX512DQ-SLOW-NEXT:    vpinsrd $3, %edi, %xmm9, %xmm9
; AVX512DQ-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm0 = xmm3[2],xmm0[2],xmm3[3],xmm0[3]
; AVX512DQ-SLOW-NEXT:    vpblendd {{.*#+}} xmm3 = xmm0[0,1],xmm2[2],xmm0[3]
; AVX512DQ-SLOW-NEXT:    vpextrd $2, %xmm8, %edi
; AVX512DQ-SLOW-NEXT:    vpinsrd $3, %edi, %xmm3, %xmm3
; AVX512DQ-SLOW-NEXT:    vpextrd $3, %xmm2, %edi
; AVX512DQ-SLOW-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[2,3,2,3]
; AVX512DQ-SLOW-NEXT:    vpinsrd $2, %edi, %xmm0, %xmm0
; AVX512DQ-SLOW-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1,2],xmm8[3]
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm5, (%rsi)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm7, (%rdx)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm4, (%rcx)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm1, (%r8)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm6, (%r9)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm9, (%r11)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm3, (%r10)
; AVX512DQ-SLOW-NEXT:    vmovdqa %xmm0, (%rax)
; AVX512DQ-SLOW-NEXT:    popq %rbx
; AVX512DQ-SLOW-NEXT:    retq
;
; AVX512DQ-FAST-LABEL: load_i32_stride8_vf4:
; AVX512DQ-FAST:       # %bb.0:
; AVX512DQ-FAST-NEXT:    pushq %rbx
; AVX512DQ-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512DQ-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512DQ-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512DQ-FAST-NEXT:    vmovdqa 64(%rdi), %xmm0
; AVX512DQ-FAST-NEXT:    vmovd %xmm0, %ebx
; AVX512DQ-FAST-NEXT:    vmovdqa (%rdi), %xmm1
; AVX512DQ-FAST-NEXT:    vmovdqa 16(%rdi), %xmm2
; AVX512DQ-FAST-NEXT:    vmovdqa 32(%rdi), %xmm3
; AVX512DQ-FAST-NEXT:    vmovdqa 48(%rdi), %xmm4
; AVX512DQ-FAST-NEXT:    vpunpckldq {{.*#+}} xmm5 = xmm1[0],xmm3[0],xmm1[1],xmm3[1]
; AVX512DQ-FAST-NEXT:    vpinsrd $2, %ebx, %xmm5, %xmm5
; AVX512DQ-FAST-NEXT:    vmovdqa 96(%rdi), %xmm6
; AVX512DQ-FAST-NEXT:    vmovd %xmm6, %ebx
; AVX512DQ-FAST-NEXT:    vpinsrd $3, %ebx, %xmm5, %xmm5
; AVX512DQ-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm7 = [21474836481,21474836481]
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm1, %xmm8
; AVX512DQ-FAST-NEXT:    vpermt2d %xmm3, %xmm7, %xmm8
; AVX512DQ-FAST-NEXT:    vpextrd $1, %xmm0, %ebx
; AVX512DQ-FAST-NEXT:    vpinsrd $2, %ebx, %xmm8, %xmm8
; AVX512DQ-FAST-NEXT:    vpextrd $1, %xmm6, %ebx
; AVX512DQ-FAST-NEXT:    vpinsrd $3, %ebx, %xmm8, %xmm8
; AVX512DQ-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm9 = xmm1[2],xmm3[2],xmm1[3],xmm3[3]
; AVX512DQ-FAST-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0,1],xmm0[2],xmm9[3]
; AVX512DQ-FAST-NEXT:    vpextrd $2, %xmm6, %ebx
; AVX512DQ-FAST-NEXT:    vpinsrd $3, %ebx, %xmm9, %xmm9
; AVX512DQ-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm10 = [30064771075,30064771075]
; AVX512DQ-FAST-NEXT:    vpermt2d %xmm3, %xmm10, %xmm1
; AVX512DQ-FAST-NEXT:    vpextrd $3, %xmm0, %ebx
; AVX512DQ-FAST-NEXT:    vpinsrd $2, %ebx, %xmm1, %xmm0
; AVX512DQ-FAST-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1,2],xmm6[3]
; AVX512DQ-FAST-NEXT:    vmovdqa 80(%rdi), %xmm1
; AVX512DQ-FAST-NEXT:    vmovd %xmm1, %ebx
; AVX512DQ-FAST-NEXT:    vpunpckldq {{.*#+}} xmm3 = xmm2[0],xmm4[0],xmm2[1],xmm4[1]
; AVX512DQ-FAST-NEXT:    vpinsrd $2, %ebx, %xmm3, %xmm3
; AVX512DQ-FAST-NEXT:    vmovdqa 112(%rdi), %xmm6
; AVX512DQ-FAST-NEXT:    vmovd %xmm6, %edi
; AVX512DQ-FAST-NEXT:    vpinsrd $3, %edi, %xmm3, %xmm3
; AVX512DQ-FAST-NEXT:    vpermi2d %xmm4, %xmm2, %xmm7
; AVX512DQ-FAST-NEXT:    vpextrd $1, %xmm1, %edi
; AVX512DQ-FAST-NEXT:    vpinsrd $2, %edi, %xmm7, %xmm7
; AVX512DQ-FAST-NEXT:    vpextrd $1, %xmm6, %edi
; AVX512DQ-FAST-NEXT:    vpinsrd $3, %edi, %xmm7, %xmm7
; AVX512DQ-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm11 = xmm2[2],xmm4[2],xmm2[3],xmm4[3]
; AVX512DQ-FAST-NEXT:    vpblendd {{.*#+}} xmm11 = xmm11[0,1],xmm1[2],xmm11[3]
; AVX512DQ-FAST-NEXT:    vpextrd $2, %xmm6, %edi
; AVX512DQ-FAST-NEXT:    vpinsrd $3, %edi, %xmm11, %xmm11
; AVX512DQ-FAST-NEXT:    vpermt2d %xmm4, %xmm10, %xmm2
; AVX512DQ-FAST-NEXT:    vpextrd $3, %xmm1, %edi
; AVX512DQ-FAST-NEXT:    vpinsrd $2, %edi, %xmm2, %xmm1
; AVX512DQ-FAST-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1,2],xmm6[3]
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm5, (%rsi)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm8, (%rdx)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm9, (%rcx)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm0, (%r8)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm3, (%r9)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm7, (%r11)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm11, (%r10)
; AVX512DQ-FAST-NEXT:    vmovdqa %xmm1, (%rax)
; AVX512DQ-FAST-NEXT:    popq %rbx
; AVX512DQ-FAST-NEXT:    retq
;
; AVX512BW-ONLY-SLOW-LABEL: load_i32_stride8_vf4:
; AVX512BW-ONLY-SLOW:       # %bb.0:
; AVX512BW-ONLY-SLOW-NEXT:    pushq %rbx
; AVX512BW-ONLY-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512BW-ONLY-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512BW-ONLY-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 64(%rdi), %xmm2
; AVX512BW-ONLY-SLOW-NEXT:    vmovd %xmm2, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa (%rdi), %xmm3
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 16(%rdi), %xmm4
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 32(%rdi), %xmm5
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 48(%rdi), %xmm1
; AVX512BW-ONLY-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm0 = xmm3[0],xmm5[0],xmm3[1],xmm5[1]
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm0, %xmm0
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 96(%rdi), %xmm6
; AVX512BW-ONLY-SLOW-NEXT:    vmovd %xmm6, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm0, %xmm0
; AVX512BW-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm7 = xmm3[1,1,1,1]
; AVX512BW-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm7 = xmm7[0],xmm5[1],xmm7[2,3]
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $1, %xmm2, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm7, %xmm7
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $1, %xmm6, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm7, %xmm7
; AVX512BW-ONLY-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm3 = xmm3[2],xmm5[2],xmm3[3],xmm5[3]
; AVX512BW-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm5 = xmm3[0,1],xmm2[2],xmm3[3]
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $2, %xmm6, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm5, %xmm5
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $3, %xmm2, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm2 = xmm3[2,3,2,3]
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm2, %xmm2
; AVX512BW-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm2 = xmm2[0,1,2],xmm6[3]
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 80(%rdi), %xmm3
; AVX512BW-ONLY-SLOW-NEXT:    vmovd %xmm3, %ebx
; AVX512BW-ONLY-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm6 = xmm4[0],xmm1[0],xmm4[1],xmm1[1]
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm6, %xmm6
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa 112(%rdi), %xmm8
; AVX512BW-ONLY-SLOW-NEXT:    vmovd %xmm8, %edi
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $3, %edi, %xmm6, %xmm6
; AVX512BW-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm9 = xmm4[1,1,1,1]
; AVX512BW-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0],xmm1[1],xmm9[2,3]
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $1, %xmm3, %edi
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $2, %edi, %xmm9, %xmm9
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $1, %xmm8, %edi
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $3, %edi, %xmm9, %xmm9
; AVX512BW-ONLY-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm1 = xmm4[2],xmm1[2],xmm4[3],xmm1[3]
; AVX512BW-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm4 = xmm1[0,1],xmm3[2],xmm1[3]
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $2, %xmm8, %edi
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $3, %edi, %xmm4, %xmm4
; AVX512BW-ONLY-SLOW-NEXT:    vpextrd $3, %xmm3, %edi
; AVX512BW-ONLY-SLOW-NEXT:    vpshufd {{.*#+}} xmm1 = xmm1[2,3,2,3]
; AVX512BW-ONLY-SLOW-NEXT:    vpinsrd $2, %edi, %xmm1, %xmm1
; AVX512BW-ONLY-SLOW-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1,2],xmm8[3]
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm0, (%rsi)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm7, (%rdx)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm5, (%rcx)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm2, (%r8)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm6, (%r9)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm9, (%r11)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm4, (%r10)
; AVX512BW-ONLY-SLOW-NEXT:    vmovdqa %xmm1, (%rax)
; AVX512BW-ONLY-SLOW-NEXT:    popq %rbx
; AVX512BW-ONLY-SLOW-NEXT:    retq
;
; AVX512BW-ONLY-FAST-LABEL: load_i32_stride8_vf4:
; AVX512BW-ONLY-FAST:       # %bb.0:
; AVX512BW-ONLY-FAST-NEXT:    pushq %rbx
; AVX512BW-ONLY-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512BW-ONLY-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512BW-ONLY-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 64(%rdi), %xmm3
; AVX512BW-ONLY-FAST-NEXT:    vmovd %xmm3, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa (%rdi), %xmm4
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 16(%rdi), %xmm0
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 32(%rdi), %xmm5
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 48(%rdi), %xmm6
; AVX512BW-ONLY-FAST-NEXT:    vpunpckldq {{.*#+}} xmm1 = xmm4[0],xmm5[0],xmm4[1],xmm5[1]
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm1, %xmm1
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 96(%rdi), %xmm7
; AVX512BW-ONLY-FAST-NEXT:    vmovd %xmm7, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $3, %ebx, %xmm1, %xmm1
; AVX512BW-ONLY-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm8 = [21474836481,21474836481]
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm4, %xmm2
; AVX512BW-ONLY-FAST-NEXT:    vpermt2d %xmm5, %xmm8, %xmm2
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $1, %xmm3, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm2, %xmm2
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $1, %xmm7, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $3, %ebx, %xmm2, %xmm2
; AVX512BW-ONLY-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm9 = xmm4[2],xmm5[2],xmm4[3],xmm5[3]
; AVX512BW-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0,1],xmm3[2],xmm9[3]
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $2, %xmm7, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $3, %ebx, %xmm9, %xmm9
; AVX512BW-ONLY-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm10 = [30064771075,30064771075]
; AVX512BW-ONLY-FAST-NEXT:    vpermt2d %xmm5, %xmm10, %xmm4
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $3, %xmm3, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm4, %xmm3
; AVX512BW-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm3 = xmm3[0,1,2],xmm7[3]
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 80(%rdi), %xmm4
; AVX512BW-ONLY-FAST-NEXT:    vmovd %xmm4, %ebx
; AVX512BW-ONLY-FAST-NEXT:    vpunpckldq {{.*#+}} xmm5 = xmm0[0],xmm6[0],xmm0[1],xmm6[1]
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $2, %ebx, %xmm5, %xmm5
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa 112(%rdi), %xmm7
; AVX512BW-ONLY-FAST-NEXT:    vmovd %xmm7, %edi
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $3, %edi, %xmm5, %xmm5
; AVX512BW-ONLY-FAST-NEXT:    vpermi2d %xmm6, %xmm0, %xmm8
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $1, %xmm4, %edi
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $2, %edi, %xmm8, %xmm8
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $1, %xmm7, %edi
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $3, %edi, %xmm8, %xmm8
; AVX512BW-ONLY-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm11 = xmm0[2],xmm6[2],xmm0[3],xmm6[3]
; AVX512BW-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm11 = xmm11[0,1],xmm4[2],xmm11[3]
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $2, %xmm7, %edi
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $3, %edi, %xmm11, %xmm11
; AVX512BW-ONLY-FAST-NEXT:    vpermt2d %xmm6, %xmm10, %xmm0
; AVX512BW-ONLY-FAST-NEXT:    vpextrd $3, %xmm4, %edi
; AVX512BW-ONLY-FAST-NEXT:    vpinsrd $2, %edi, %xmm0, %xmm0
; AVX512BW-ONLY-FAST-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1,2],xmm7[3]
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm1, (%rsi)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm2, (%rdx)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm9, (%rcx)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm3, (%r8)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm5, (%r9)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm8, (%r11)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm11, (%r10)
; AVX512BW-ONLY-FAST-NEXT:    vmovdqa %xmm0, (%rax)
; AVX512BW-ONLY-FAST-NEXT:    popq %rbx
; AVX512BW-ONLY-FAST-NEXT:    retq
;
; AVX512DQBW-SLOW-LABEL: load_i32_stride8_vf4:
; AVX512DQBW-SLOW:       # %bb.0:
; AVX512DQBW-SLOW-NEXT:    pushq %rbx
; AVX512DQBW-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512DQBW-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512DQBW-SLOW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512DQBW-SLOW-NEXT:    vmovdqa 64(%rdi), %xmm1
; AVX512DQBW-SLOW-NEXT:    vmovd %xmm1, %ebx
; AVX512DQBW-SLOW-NEXT:    vmovdqa (%rdi), %xmm2
; AVX512DQBW-SLOW-NEXT:    vmovdqa 16(%rdi), %xmm3
; AVX512DQBW-SLOW-NEXT:    vmovdqa 32(%rdi), %xmm4
; AVX512DQBW-SLOW-NEXT:    vmovdqa 48(%rdi), %xmm0
; AVX512DQBW-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm5 = xmm2[0],xmm4[0],xmm2[1],xmm4[1]
; AVX512DQBW-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm5, %xmm5
; AVX512DQBW-SLOW-NEXT:    vmovdqa 96(%rdi), %xmm6
; AVX512DQBW-SLOW-NEXT:    vmovd %xmm6, %ebx
; AVX512DQBW-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm5, %xmm5
; AVX512DQBW-SLOW-NEXT:    vpshufd {{.*#+}} xmm7 = xmm2[1,1,1,1]
; AVX512DQBW-SLOW-NEXT:    vpblendd {{.*#+}} xmm7 = xmm7[0],xmm4[1],xmm7[2,3]
; AVX512DQBW-SLOW-NEXT:    vpextrd $1, %xmm1, %ebx
; AVX512DQBW-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm7, %xmm7
; AVX512DQBW-SLOW-NEXT:    vpextrd $1, %xmm6, %ebx
; AVX512DQBW-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm7, %xmm7
; AVX512DQBW-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm2 = xmm2[2],xmm4[2],xmm2[3],xmm4[3]
; AVX512DQBW-SLOW-NEXT:    vpblendd {{.*#+}} xmm4 = xmm2[0,1],xmm1[2],xmm2[3]
; AVX512DQBW-SLOW-NEXT:    vpextrd $2, %xmm6, %ebx
; AVX512DQBW-SLOW-NEXT:    vpinsrd $3, %ebx, %xmm4, %xmm4
; AVX512DQBW-SLOW-NEXT:    vpextrd $3, %xmm1, %ebx
; AVX512DQBW-SLOW-NEXT:    vpshufd {{.*#+}} xmm1 = xmm2[2,3,2,3]
; AVX512DQBW-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm1, %xmm1
; AVX512DQBW-SLOW-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1,2],xmm6[3]
; AVX512DQBW-SLOW-NEXT:    vmovdqa 80(%rdi), %xmm2
; AVX512DQBW-SLOW-NEXT:    vmovd %xmm2, %ebx
; AVX512DQBW-SLOW-NEXT:    vpunpckldq {{.*#+}} xmm6 = xmm3[0],xmm0[0],xmm3[1],xmm0[1]
; AVX512DQBW-SLOW-NEXT:    vpinsrd $2, %ebx, %xmm6, %xmm6
; AVX512DQBW-SLOW-NEXT:    vmovdqa 112(%rdi), %xmm8
; AVX512DQBW-SLOW-NEXT:    vmovd %xmm8, %edi
; AVX512DQBW-SLOW-NEXT:    vpinsrd $3, %edi, %xmm6, %xmm6
; AVX512DQBW-SLOW-NEXT:    vpshufd {{.*#+}} xmm9 = xmm3[1,1,1,1]
; AVX512DQBW-SLOW-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0],xmm0[1],xmm9[2,3]
; AVX512DQBW-SLOW-NEXT:    vpextrd $1, %xmm2, %edi
; AVX512DQBW-SLOW-NEXT:    vpinsrd $2, %edi, %xmm9, %xmm9
; AVX512DQBW-SLOW-NEXT:    vpextrd $1, %xmm8, %edi
; AVX512DQBW-SLOW-NEXT:    vpinsrd $3, %edi, %xmm9, %xmm9
; AVX512DQBW-SLOW-NEXT:    vpunpckhdq {{.*#+}} xmm0 = xmm3[2],xmm0[2],xmm3[3],xmm0[3]
; AVX512DQBW-SLOW-NEXT:    vpblendd {{.*#+}} xmm3 = xmm0[0,1],xmm2[2],xmm0[3]
; AVX512DQBW-SLOW-NEXT:    vpextrd $2, %xmm8, %edi
; AVX512DQBW-SLOW-NEXT:    vpinsrd $3, %edi, %xmm3, %xmm3
; AVX512DQBW-SLOW-NEXT:    vpextrd $3, %xmm2, %edi
; AVX512DQBW-SLOW-NEXT:    vpshufd {{.*#+}} xmm0 = xmm0[2,3,2,3]
; AVX512DQBW-SLOW-NEXT:    vpinsrd $2, %edi, %xmm0, %xmm0
; AVX512DQBW-SLOW-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1,2],xmm8[3]
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm5, (%rsi)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm7, (%rdx)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm4, (%rcx)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm1, (%r8)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm6, (%r9)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm9, (%r11)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm3, (%r10)
; AVX512DQBW-SLOW-NEXT:    vmovdqa %xmm0, (%rax)
; AVX512DQBW-SLOW-NEXT:    popq %rbx
; AVX512DQBW-SLOW-NEXT:    retq
;
; AVX512DQBW-FAST-LABEL: load_i32_stride8_vf4:
; AVX512DQBW-FAST:       # %bb.0:
; AVX512DQBW-FAST-NEXT:    pushq %rbx
; AVX512DQBW-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512DQBW-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512DQBW-FAST-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512DQBW-FAST-NEXT:    vmovdqa 64(%rdi), %xmm0
; AVX512DQBW-FAST-NEXT:    vmovd %xmm0, %ebx
; AVX512DQBW-FAST-NEXT:    vmovdqa (%rdi), %xmm1
; AVX512DQBW-FAST-NEXT:    vmovdqa 16(%rdi), %xmm2
; AVX512DQBW-FAST-NEXT:    vmovdqa 32(%rdi), %xmm3
; AVX512DQBW-FAST-NEXT:    vmovdqa 48(%rdi), %xmm4
; AVX512DQBW-FAST-NEXT:    vpunpckldq {{.*#+}} xmm5 = xmm1[0],xmm3[0],xmm1[1],xmm3[1]
; AVX512DQBW-FAST-NEXT:    vpinsrd $2, %ebx, %xmm5, %xmm5
; AVX512DQBW-FAST-NEXT:    vmovdqa 96(%rdi), %xmm6
; AVX512DQBW-FAST-NEXT:    vmovd %xmm6, %ebx
; AVX512DQBW-FAST-NEXT:    vpinsrd $3, %ebx, %xmm5, %xmm5
; AVX512DQBW-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm7 = [21474836481,21474836481]
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm1, %xmm8
; AVX512DQBW-FAST-NEXT:    vpermt2d %xmm3, %xmm7, %xmm8
; AVX512DQBW-FAST-NEXT:    vpextrd $1, %xmm0, %ebx
; AVX512DQBW-FAST-NEXT:    vpinsrd $2, %ebx, %xmm8, %xmm8
; AVX512DQBW-FAST-NEXT:    vpextrd $1, %xmm6, %ebx
; AVX512DQBW-FAST-NEXT:    vpinsrd $3, %ebx, %xmm8, %xmm8
; AVX512DQBW-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm9 = xmm1[2],xmm3[2],xmm1[3],xmm3[3]
; AVX512DQBW-FAST-NEXT:    vpblendd {{.*#+}} xmm9 = xmm9[0,1],xmm0[2],xmm9[3]
; AVX512DQBW-FAST-NEXT:    vpextrd $2, %xmm6, %ebx
; AVX512DQBW-FAST-NEXT:    vpinsrd $3, %ebx, %xmm9, %xmm9
; AVX512DQBW-FAST-NEXT:    vpbroadcastq {{.*#+}} xmm10 = [30064771075,30064771075]
; AVX512DQBW-FAST-NEXT:    vpermt2d %xmm3, %xmm10, %xmm1
; AVX512DQBW-FAST-NEXT:    vpextrd $3, %xmm0, %ebx
; AVX512DQBW-FAST-NEXT:    vpinsrd $2, %ebx, %xmm1, %xmm0
; AVX512DQBW-FAST-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1,2],xmm6[3]
; AVX512DQBW-FAST-NEXT:    vmovdqa 80(%rdi), %xmm1
; AVX512DQBW-FAST-NEXT:    vmovd %xmm1, %ebx
; AVX512DQBW-FAST-NEXT:    vpunpckldq {{.*#+}} xmm3 = xmm2[0],xmm4[0],xmm2[1],xmm4[1]
; AVX512DQBW-FAST-NEXT:    vpinsrd $2, %ebx, %xmm3, %xmm3
; AVX512DQBW-FAST-NEXT:    vmovdqa 112(%rdi), %xmm6
; AVX512DQBW-FAST-NEXT:    vmovd %xmm6, %edi
; AVX512DQBW-FAST-NEXT:    vpinsrd $3, %edi, %xmm3, %xmm3
; AVX512DQBW-FAST-NEXT:    vpermi2d %xmm4, %xmm2, %xmm7
; AVX512DQBW-FAST-NEXT:    vpextrd $1, %xmm1, %edi
; AVX512DQBW-FAST-NEXT:    vpinsrd $2, %edi, %xmm7, %xmm7
; AVX512DQBW-FAST-NEXT:    vpextrd $1, %xmm6, %edi
; AVX512DQBW-FAST-NEXT:    vpinsrd $3, %edi, %xmm7, %xmm7
; AVX512DQBW-FAST-NEXT:    vpunpckhdq {{.*#+}} xmm11 = xmm2[2],xmm4[2],xmm2[3],xmm4[3]
; AVX512DQBW-FAST-NEXT:    vpblendd {{.*#+}} xmm11 = xmm11[0,1],xmm1[2],xmm11[3]
; AVX512DQBW-FAST-NEXT:    vpextrd $2, %xmm6, %edi
; AVX512DQBW-FAST-NEXT:    vpinsrd $3, %edi, %xmm11, %xmm11
; AVX512DQBW-FAST-NEXT:    vpermt2d %xmm4, %xmm10, %xmm2
; AVX512DQBW-FAST-NEXT:    vpextrd $3, %xmm1, %edi
; AVX512DQBW-FAST-NEXT:    vpinsrd $2, %edi, %xmm2, %xmm1
; AVX512DQBW-FAST-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1,2],xmm6[3]
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm5, (%rsi)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm8, (%rdx)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm9, (%rcx)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm0, (%r8)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm3, (%r9)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm7, (%r11)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm11, (%r10)
; AVX512DQBW-FAST-NEXT:    vmovdqa %xmm1, (%rax)
; AVX512DQBW-FAST-NEXT:    popq %rbx
; AVX512DQBW-FAST-NEXT:    retq
  %wide.vec = load <32 x i32>, ptr %in.vec, align 64

  %strided.vec0 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 0, i32 8, i32 16, i32 24>
  %strided.vec1 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 1, i32 9, i32 17, i32 25>
  %strided.vec2 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 2, i32 10, i32 18, i32 26>
  %strided.vec3 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 3, i32 11, i32 19, i32 27>
  %strided.vec4 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 4, i32 12, i32 20, i32 28>
  %strided.vec5 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 5, i32 13, i32 21, i32 29>
  %strided.vec6 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 6, i32 14, i32 22, i32 30>
  %strided.vec7 = shufflevector <32 x i32> %wide.vec, <32 x i32> poison, <4 x i32> <i32 7, i32 15, i32 23, i32 31>

  store <4 x i32> %strided.vec0, ptr %out.vec0, align 64
  store <4 x i32> %strided.vec1, ptr %out.vec1, align 64
  store <4 x i32> %strided.vec2, ptr %out.vec2, align 64
  store <4 x i32> %strided.vec3, ptr %out.vec3, align 64
  store <4 x i32> %strided.vec4, ptr %out.vec4, align 64
  store <4 x i32> %strided.vec5, ptr %out.vec5, align 64
  store <4 x i32> %strided.vec6, ptr %out.vec6, align 64
  store <4 x i32> %strided.vec7, ptr %out.vec7, align 64

  ret void
}

define void @load_i32_stride8_vf8(ptr %in.vec, ptr %out.vec0, ptr %out.vec1, ptr %out.vec2, ptr %out.vec3, ptr %out.vec4, ptr %out.vec5, ptr %out.vec6, ptr %out.vec7) nounwind {
; SSE-LABEL: load_i32_stride8_vf8:
; SSE:       # %bb.0:
; SSE-NEXT:    movaps 112(%rdi), %xmm2
; SSE-NEXT:    movaps 176(%rdi), %xmm3
; SSE-NEXT:    movaps %xmm3, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 144(%rdi), %xmm9
; SSE-NEXT:    movaps (%rdi), %xmm11
; SSE-NEXT:    movaps 32(%rdi), %xmm0
; SSE-NEXT:    movaps 96(%rdi), %xmm13
; SSE-NEXT:    movaps 64(%rdi), %xmm12
; SSE-NEXT:    movaps 160(%rdi), %xmm1
; SSE-NEXT:    movaps 128(%rdi), %xmm5
; SSE-NEXT:    movaps 224(%rdi), %xmm10
; SSE-NEXT:    movaps 192(%rdi), %xmm15
; SSE-NEXT:    movaps %xmm15, %xmm8
; SSE-NEXT:    unpcklps {{.*#+}} xmm8 = xmm8[0],xmm10[0],xmm8[1],xmm10[1]
; SSE-NEXT:    movaps %xmm5, %xmm6
; SSE-NEXT:    unpcklps {{.*#+}} xmm6 = xmm6[0],xmm1[0],xmm6[1],xmm1[1]
; SSE-NEXT:    movaps %xmm6, %xmm4
; SSE-NEXT:    movlhps {{.*#+}} xmm4 = xmm4[0],xmm8[0]
; SSE-NEXT:    movaps %xmm4, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm12, %xmm14
; SSE-NEXT:    unpcklps {{.*#+}} xmm14 = xmm14[0],xmm13[0],xmm14[1],xmm13[1]
; SSE-NEXT:    movaps %xmm11, %xmm7
; SSE-NEXT:    unpcklps {{.*#+}} xmm7 = xmm7[0],xmm0[0],xmm7[1],xmm0[1]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm6 = xmm6[1],xmm8[1]
; SSE-NEXT:    movaps %xmm7, %xmm4
; SSE-NEXT:    movlhps {{.*#+}} xmm4 = xmm4[0],xmm14[0]
; SSE-NEXT:    movaps %xmm4, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm7 = xmm7[1],xmm14[1]
; SSE-NEXT:    movaps 240(%rdi), %xmm4
; SSE-NEXT:    movaps %xmm4, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhps {{.*#+}} xmm15 = xmm15[2],xmm10[2],xmm15[3],xmm10[3]
; SSE-NEXT:    movaps 208(%rdi), %xmm10
; SSE-NEXT:    unpckhps {{.*#+}} xmm5 = xmm5[2],xmm1[2],xmm5[3],xmm1[3]
; SSE-NEXT:    movaps %xmm5, %xmm1
; SSE-NEXT:    movlhps {{.*#+}} xmm1 = xmm1[0],xmm15[0]
; SSE-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhps {{.*#+}} xmm12 = xmm12[2],xmm13[2],xmm12[3],xmm13[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm11 = xmm11[2],xmm0[2],xmm11[3],xmm0[3]
; SSE-NEXT:    movaps %xmm11, %xmm14
; SSE-NEXT:    movlhps {{.*#+}} xmm14 = xmm14[0],xmm12[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm5 = xmm5[1],xmm15[1]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm11 = xmm11[1],xmm12[1]
; SSE-NEXT:    movaps %xmm10, %xmm15
; SSE-NEXT:    unpcklps {{.*#+}} xmm15 = xmm15[0],xmm4[0],xmm15[1],xmm4[1]
; SSE-NEXT:    movaps %xmm9, %xmm12
; SSE-NEXT:    unpcklps {{.*#+}} xmm12 = xmm12[0],xmm3[0],xmm12[1],xmm3[1]
; SSE-NEXT:    movaps %xmm12, %xmm13
; SSE-NEXT:    movlhps {{.*#+}} xmm13 = xmm13[0],xmm15[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm12 = xmm12[1],xmm15[1]
; SSE-NEXT:    movaps 80(%rdi), %xmm0
; SSE-NEXT:    movaps %xmm0, %xmm15
; SSE-NEXT:    unpcklps {{.*#+}} xmm15 = xmm15[0],xmm2[0],xmm15[1],xmm2[1]
; SSE-NEXT:    movaps %xmm2, %xmm8
; SSE-NEXT:    movaps 16(%rdi), %xmm1
; SSE-NEXT:    movaps 48(%rdi), %xmm3
; SSE-NEXT:    movaps %xmm1, %xmm2
; SSE-NEXT:    unpcklps {{.*#+}} xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
; SSE-NEXT:    movaps %xmm2, %xmm4
; SSE-NEXT:    movlhps {{.*#+}} xmm4 = xmm4[0],xmm15[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm2 = xmm2[1],xmm15[1]
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm10 # 16-byte Folded Reload
; SSE-NEXT:    # xmm10 = xmm10[2],mem[2],xmm10[3],mem[3]
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm9 # 16-byte Folded Reload
; SSE-NEXT:    # xmm9 = xmm9[2],mem[2],xmm9[3],mem[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm0 = xmm0[2],xmm8[2],xmm0[3],xmm8[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm1 = xmm1[2],xmm3[2],xmm1[3],xmm3[3]
; SSE-NEXT:    movaps %xmm9, %xmm3
; SSE-NEXT:    movlhps {{.*#+}} xmm3 = xmm3[0],xmm10[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm9 = xmm9[1],xmm10[1]
; SSE-NEXT:    movaps %xmm1, %xmm10
; SSE-NEXT:    movlhps {{.*#+}} xmm10 = xmm10[0],xmm0[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1],xmm0[1]
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; SSE-NEXT:    movaps %xmm0, (%rsi)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; SSE-NEXT:    movaps %xmm0, 16(%rsi)
; SSE-NEXT:    movaps %xmm7, (%rdx)
; SSE-NEXT:    movaps %xmm6, 16(%rdx)
; SSE-NEXT:    movaps %xmm14, (%rcx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; SSE-NEXT:    movaps %xmm0, 16(%rcx)
; SSE-NEXT:    movaps %xmm11, (%r8)
; SSE-NEXT:    movaps %xmm5, 16(%r8)
; SSE-NEXT:    movaps %xmm4, (%r9)
; SSE-NEXT:    movaps %xmm13, 16(%r9)
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movaps %xmm2, (%rax)
; SSE-NEXT:    movaps %xmm12, 16(%rax)
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movaps %xmm10, (%rax)
; SSE-NEXT:    movaps %xmm3, 16(%rax)
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movaps %xmm9, 16(%rax)
; SSE-NEXT:    movaps %xmm1, (%rax)
; SSE-NEXT:    retq
;
; AVX1-ONLY-LABEL: load_i32_stride8_vf8:
; AVX1-ONLY:       # %bb.0:
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %ymm0
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %ymm1
; AVX1-ONLY-NEXT:    vmovaps 64(%rdi), %ymm2
; AVX1-ONLY-NEXT:    vmovaps 96(%rdi), %ymm3
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %xmm8
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %xmm10
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm4 = xmm10[0],xmm8[0],xmm10[1],xmm8[1]
; AVX1-ONLY-NEXT:    vmovaps 96(%rdi), %xmm9
; AVX1-ONLY-NEXT:    vmovaps 64(%rdi), %xmm11
; AVX1-ONLY-NEXT:    vmovaps 160(%rdi), %xmm12
; AVX1-ONLY-NEXT:    vmovaps 128(%rdi), %xmm13
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm13[0],xmm12[0],xmm13[1],xmm12[1]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm5, %ymm0, %ymm5
; AVX1-ONLY-NEXT:    vmovaps 224(%rdi), %xmm14
; AVX1-ONLY-NEXT:    vmovaps 192(%rdi), %xmm15
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm6 = xmm15[0],xmm14[0],xmm15[1],xmm14[1]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm7 = xmm6[0,1,0,1]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm7, %ymm0, %ymm7
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm5 = ymm5[0,1,2,3,4,5],ymm7[6,7]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm7 = xmm11[0],xmm9[0],xmm11[1],xmm9[1]
; AVX1-ONLY-NEXT:    vmovlhps {{.*#+}} xmm4 = xmm4[0],xmm7[0]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm4 = ymm4[0,1,2,3],ymm5[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm4, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm5 = xmm10[1,1,1,1]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm5[0],xmm8[1],xmm5[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm5[0,1],xmm7[2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm6, %ymm0, %ymm6
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm7 = xmm13[1,1,1,1]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm7 = xmm7[0],xmm12[1],xmm7[2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm7, %ymm0, %ymm7
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm7 = ymm7[0,1,2,3,4,5],ymm6[6,7]
; AVX1-ONLY-NEXT:    vmovaps 160(%rdi), %ymm6
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm5 = ymm5[0,1,2,3],ymm7[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovaps 128(%rdi), %ymm7
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm8 = xmm10[2],xmm8[2],xmm10[3],xmm8[3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm12 = xmm13[2],xmm12[2],xmm13[3],xmm12[3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm12, %ymm0, %ymm10
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm13 = xmm14[2,2,2,2]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm13 = xmm15[0,1,2],xmm13[3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm13, %ymm0, %ymm13
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm10 = ymm10[0,1,2,3,4,5],ymm13[6,7]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm13 = xmm9[2,2,2,2]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm13 = xmm11[0,1,2],xmm13[3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm13 = xmm8[0,1],xmm13[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm13 = ymm13[0,1,2,3],ymm10[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovaps 192(%rdi), %ymm10
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm9 = xmm11[2],xmm9[2],xmm11[3],xmm9[3]
; AVX1-ONLY-NEXT:    vmovaps 224(%rdi), %ymm11
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm8 = xmm8[1],xmm9[1]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm9 = xmm15[2],xmm14[2],xmm15[3],xmm14[3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm9, %ymm0, %ymm9
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm12 = xmm12[2,3,2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm12, %ymm0, %ymm12
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm9 = ymm12[0,1,2,3,4,5],ymm9[6,7]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm9 = ymm8[0,1,2,3],ymm9[4,5,6,7]
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm8 = ymm11[0],ymm10[0],ymm11[2],ymm10[2]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm12 = ymm7[0],ymm6[0],ymm7[1],ymm6[1],ymm7[4],ymm6[4],ymm7[5],ymm6[5]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm8 = ymm12[0,1],ymm8[2,0],ymm12[4,5],ymm8[6,4]
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm12 = ymm3[0],ymm2[0],ymm3[2],ymm2[2]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm12 = ymm12[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm12, %xmm12
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm14 = ymm0[0],ymm1[0],ymm0[1],ymm1[1],ymm0[4],ymm1[4],ymm0[5],ymm1[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm14, %xmm14
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm12 = xmm14[0,1],xmm12[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm12 = ymm12[0,1,2,3],ymm8[4,5,6,7]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm8 = ymm10[0],ymm11[0],ymm10[1],ymm11[1],ymm10[4],ymm11[4],ymm10[5],ymm11[5]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm14 = ymm6[1,0],ymm7[1,0],ymm6[5,4],ymm7[5,4]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm8 = ymm14[2,0],ymm8[2,3],ymm14[6,4],ymm8[6,7]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm14 = ymm2[0],ymm3[0],ymm2[1],ymm3[1],ymm2[4],ymm3[4],ymm2[5],ymm3[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm14, %xmm14
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm15 = ymm1[1,0],ymm0[1,0],ymm1[5,4],ymm0[5,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm15 = ymm15[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm15, %xmm15
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm14 = xmm15[0,1],xmm14[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm8 = ymm14[0,1,2,3],ymm8[4,5,6,7]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm14 = ymm11[1],ymm10[1],ymm11[3],ymm10[3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm15 = ymm7[2],ymm6[2],ymm7[3],ymm6[3],ymm7[6],ymm6[6],ymm7[7],ymm6[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm14 = ymm15[0,1],ymm14[2,0],ymm15[4,5],ymm14[6,4]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm15 = ymm3[1],ymm2[1],ymm3[3],ymm2[3]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm15 = ymm15[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm15, %xmm15
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm4 = ymm0[2],ymm1[2],ymm0[3],ymm1[3],ymm0[6],ymm1[6],ymm0[7],ymm1[7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm4, %xmm4
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm4 = xmm4[0,1],xmm15[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm4 = ymm4[0,1,2,3],ymm14[4,5,6,7]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm10 = ymm10[2],ymm11[2],ymm10[3],ymm11[3],ymm10[6],ymm11[6],ymm10[7],ymm11[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm6 = ymm6[3,0],ymm7[3,0],ymm6[7,4],ymm7[7,4]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm6 = ymm6[2,0],ymm10[2,3],ymm6[6,4],ymm10[6,7]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm2 = ymm2[2],ymm3[2],ymm2[3],ymm3[3],ymm2[6],ymm3[6],ymm2[7],ymm3[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm0 = ymm1[3,0],ymm0[3,0],ymm1[7,4],ymm0[7,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm2, %xmm1
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm0 = ymm0[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm0, %xmm0
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0,1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm6[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm1 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm1, (%rsi)
; AVX1-ONLY-NEXT:    vmovaps %ymm5, (%rdx)
; AVX1-ONLY-NEXT:    vmovaps %ymm13, (%rcx)
; AVX1-ONLY-NEXT:    vmovaps %ymm9, (%r8)
; AVX1-ONLY-NEXT:    vmovaps %ymm12, (%r9)
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    vmovaps %ymm8, (%rax)
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    vmovaps %ymm4, (%rax)
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    vmovaps %ymm0, (%rax)
; AVX1-ONLY-NEXT:    vzeroupper
; AVX1-ONLY-NEXT:    retq
;
; AVX2-ONLY-LABEL: load_i32_stride8_vf8:
; AVX2-ONLY:       # %bb.0:
; AVX2-ONLY-NEXT:    vmovaps 32(%rdi), %ymm0
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vmovdqa (%rdi), %ymm2
; AVX2-ONLY-NEXT:    vmovdqa 96(%rdi), %ymm1
; AVX2-ONLY-NEXT:    vmovdqa 64(%rdi), %ymm3
; AVX2-ONLY-NEXT:    vmovaps 160(%rdi), %xmm7
; AVX2-ONLY-NEXT:    vmovaps 128(%rdi), %xmm9
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm4 = xmm9[0],xmm7[0],xmm9[1],xmm7[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm4, %ymm0, %ymm4
; AVX2-ONLY-NEXT:    vmovaps 224(%rdi), %xmm8
; AVX2-ONLY-NEXT:    vbroadcastss %xmm8, %xmm5
; AVX2-ONLY-NEXT:    vmovaps 192(%rdi), %xmm10
; AVX2-ONLY-NEXT:    vbroadcastss %xmm10, %xmm6
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm6[0],xmm5[0],xmm6[1],xmm5[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm5, %ymm0, %ymm5
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm4 = ymm4[0,1,2,3,4,5],ymm5[6,7]
; AVX2-ONLY-NEXT:    vmovaps 96(%rdi), %xmm11
; AVX2-ONLY-NEXT:    vbroadcastss %xmm11, %xmm5
; AVX2-ONLY-NEXT:    vmovaps (%rdi), %xmm12
; AVX2-ONLY-NEXT:    vmovaps 32(%rdi), %xmm13
; AVX2-ONLY-NEXT:    vmovaps 64(%rdi), %xmm14
; AVX2-ONLY-NEXT:    vbroadcastss %xmm14, %xmm6
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm6[0],xmm5[0],xmm6[1],xmm5[1]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm6 = xmm12[0],xmm13[0],xmm12[1],xmm13[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm6[0,1],xmm5[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm4 = ymm5[0,1,2,3],ymm4[4,5,6,7]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm14[0],xmm11[0],xmm14[1],xmm11[1]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm6 = xmm12[1,1,1,1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm6 = xmm6[0],xmm13[1],xmm6[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm6[0,1],xmm5[2,3]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm6 = xmm10[0],xmm8[0],xmm10[1],xmm8[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm6, %ymm0, %ymm6
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm15 = xmm9[1,1,1,1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm15 = xmm15[0],xmm7[1],xmm15[2,3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm15, %ymm0, %ymm15
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm15 = ymm15[0,1,2,3,4,5],ymm6[6,7]
; AVX2-ONLY-NEXT:    vmovdqa 224(%rdi), %ymm6
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm5 = ymm5[0,1,2,3],ymm15[4,5,6,7]
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm15 = xmm9[2],xmm7[2],xmm9[3],xmm7[3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm15, %ymm0, %ymm7
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm9 = xmm8[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm9 = xmm10[0,1,2],xmm9[3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm9, %ymm0, %ymm9
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm7 = ymm7[0,1,2,3,4,5],ymm9[6,7]
; AVX2-ONLY-NEXT:    vmovdqa 192(%rdi), %ymm9
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm0 = xmm12[2],xmm13[2],xmm12[3],xmm13[3]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm12 = xmm11[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm12 = xmm14[0,1,2],xmm12[3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm12 = xmm0[0,1],xmm12[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm7 = ymm12[0,1,2,3],ymm7[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovdqa 160(%rdi), %ymm12
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm8 = xmm10[2],xmm8[2],xmm10[3],xmm8[3]
; AVX2-ONLY-NEXT:    vmovdqa 128(%rdi), %ymm13
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm8, %ymm0, %ymm8
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm10 = xmm15[2,3,2,3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm10, %ymm0, %ymm10
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm8 = ymm10[0,1,2,3,4,5],ymm8[6,7]
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm10 = xmm14[2],xmm11[2],xmm14[3],xmm11[3]
; AVX2-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm0 = xmm0[1],xmm10[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm8 = ymm0[0,1,2,3],ymm8[4,5,6,7]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm0 = ymm13[0],ymm12[0],ymm13[1],ymm12[1],ymm13[4],ymm12[4],ymm13[5],ymm12[5]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm11 = ymm9[0],ymm6[0],ymm9[1],ymm6[1],ymm9[4],ymm6[4],ymm9[5],ymm6[5]
; AVX2-ONLY-NEXT:    vpunpcklqdq {{.*#+}} ymm0 = ymm0[0],ymm11[0],ymm0[2],ymm11[2]
; AVX2-ONLY-NEXT:    vpbroadcastd 48(%rdi), %xmm10
; AVX2-ONLY-NEXT:    vpbroadcastd 16(%rdi), %ymm14
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} xmm10 = xmm14[0],xmm10[0],xmm14[1],xmm10[1]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm14 = ymm3[0],ymm1[0],ymm3[1],ymm1[1],ymm3[4],ymm1[4],ymm3[5],ymm1[5]
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm14 = ymm14[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm10 = xmm10[0,1],xmm14[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm10 = ymm10[0,1,2,3],ymm0[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 148(%rdi), %ymm0
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3,4],ymm12[5],ymm0[6,7]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3,4,5],ymm11[6,7]
; AVX2-ONLY-NEXT:    vpmovzxdq {{.*#+}} xmm11 = mem[0],zero,mem[1],zero
; AVX2-ONLY-NEXT:    vpbroadcastd 116(%rdi), %ymm14
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm11 = xmm11[0,1,2],xmm14[3]
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm14 = ymm2[1,1,1,1,5,5,5,5]
; AVX2-ONLY-NEXT:    vmovdqu {{[-0-9]+}}(%r{{[sb]}}p), %ymm15 # 32-byte Reload
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm14 = ymm14[0],ymm15[1],ymm14[2,3,4],ymm15[5],ymm14[6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm14, %xmm14
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm11 = xmm14[0,1],xmm11[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm0 = ymm11[0,1,2,3],ymm0[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 248(%rdi), %ymm11
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm9 = ymm9[0,1,2,3,4,5,6],ymm11[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm11 = ymm13[2],ymm12[2],ymm13[3],ymm12[3],ymm13[6],ymm12[6],ymm13[7],ymm12[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm2 = ymm2[2],ymm15[2],ymm2[3],ymm15[3],ymm2[6],ymm15[6],ymm2[7],ymm15[7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm2, %xmm12
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm1 = ymm3[2],ymm1[2],ymm3[3],ymm1[3],ymm3[6],ymm1[6],ymm3[7],ymm1[7]
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm3 = ymm1[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm3 = xmm12[0,1],xmm3[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm9 = ymm11[0,1,2,3,4,5],ymm9[6,7]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm3[0,1,2,3],ymm9[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 220(%rdi), %ymm9
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm6 = ymm9[2],ymm6[2],ymm9[3],ymm6[3],ymm9[6],ymm6[6],ymm9[7],ymm6[7]
; AVX2-ONLY-NEXT:    vpunpckhqdq {{.*#+}} ymm6 = ymm11[1],ymm6[1],ymm11[3],ymm6[3]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm1, %xmm1
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm2 = ymm2[2,3,2,3,6,7,6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm2, %xmm2
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm1 = xmm2[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm1 = ymm1[0,1,2,3],ymm6[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovaps %ymm4, (%rsi)
; AVX2-ONLY-NEXT:    vmovaps %ymm5, (%rdx)
; AVX2-ONLY-NEXT:    vmovaps %ymm7, (%rcx)
; AVX2-ONLY-NEXT:    vmovaps %ymm8, (%r8)
; AVX2-ONLY-NEXT:    vmovdqa %ymm10, (%r9)
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    vmovdqa %ymm0, (%rax)
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    vmovdqa %ymm3, (%rax)
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    vmovdqa %ymm1, (%rax)
; AVX2-ONLY-NEXT:    vzeroupper
; AVX2-ONLY-NEXT:    retq
;
; AVX512-LABEL: load_i32_stride8_vf8:
; AVX512:       # %bb.0:
; AVX512-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512-NEXT:    vmovdqa64 64(%rdi), %zmm1
; AVX512-NEXT:    vmovdqa64 128(%rdi), %zmm2
; AVX512-NEXT:    vmovdqa64 192(%rdi), %zmm3
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm4 = <u,u,u,u,0,8,16,24>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm4
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm5 = [0,8,16,24]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm5
; AVX512-NEXT:    vpblendd {{.*#+}} ymm4 = ymm5[0,1,2,3],ymm4[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm5 = <u,u,u,u,1,9,17,25>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm5
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm6 = [1,9,17,25]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm6
; AVX512-NEXT:    vpblendd {{.*#+}} ymm5 = ymm6[0,1,2,3],ymm5[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm6 = <u,u,u,u,2,10,18,26>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm6
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm7 = [2,10,18,26]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm7
; AVX512-NEXT:    vpblendd {{.*#+}} ymm6 = ymm7[0,1,2,3],ymm6[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm7 = <u,u,u,u,3,11,19,27>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm7
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm8 = [3,11,19,27]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm8
; AVX512-NEXT:    vpblendd {{.*#+}} ymm7 = ymm8[0,1,2,3],ymm7[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm8 = <u,u,u,u,4,12,20,28>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm8
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm9 = [4,12,20,28]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm9
; AVX512-NEXT:    vpblendd {{.*#+}} ymm8 = ymm9[0,1,2,3],ymm8[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm9 = <u,u,u,u,5,13,21,29>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm9
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm10 = [5,13,21,29]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm10
; AVX512-NEXT:    vpblendd {{.*#+}} ymm9 = ymm10[0,1,2,3],ymm9[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm10 = <u,u,u,u,6,14,22,30>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm10
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm11 = [6,14,22,30]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm11
; AVX512-NEXT:    vpblendd {{.*#+}} ymm10 = ymm11[0,1,2,3],ymm10[4,5,6,7]
; AVX512-NEXT:    vmovdqa {{.*#+}} ymm11 = <u,u,u,u,7,15,23,31>
; AVX512-NEXT:    vpermi2d %zmm3, %zmm2, %zmm11
; AVX512-NEXT:    vmovdqa {{.*#+}} xmm2 = [7,15,23,31]
; AVX512-NEXT:    vpermi2d %zmm1, %zmm0, %zmm2
; AVX512-NEXT:    vpblendd {{.*#+}} ymm0 = ymm2[0,1,2,3],ymm11[4,5,6,7]
; AVX512-NEXT:    vmovdqa %ymm4, (%rsi)
; AVX512-NEXT:    vmovdqa %ymm5, (%rdx)
; AVX512-NEXT:    vmovdqa %ymm6, (%rcx)
; AVX512-NEXT:    vmovdqa %ymm7, (%r8)
; AVX512-NEXT:    vmovdqa %ymm8, (%r9)
; AVX512-NEXT:    vmovdqa %ymm9, (%r11)
; AVX512-NEXT:    vmovdqa %ymm10, (%r10)
; AVX512-NEXT:    vmovdqa %ymm0, (%rax)
; AVX512-NEXT:    vzeroupper
; AVX512-NEXT:    retq
  %wide.vec = load <64 x i32>, ptr %in.vec, align 64

  %strided.vec0 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56>
  %strided.vec1 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57>
  %strided.vec2 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58>
  %strided.vec3 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59>
  %strided.vec4 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60>
  %strided.vec5 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61>
  %strided.vec6 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62>
  %strided.vec7 = shufflevector <64 x i32> %wide.vec, <64 x i32> poison, <8 x i32> <i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63>

  store <8 x i32> %strided.vec0, ptr %out.vec0, align 64
  store <8 x i32> %strided.vec1, ptr %out.vec1, align 64
  store <8 x i32> %strided.vec2, ptr %out.vec2, align 64
  store <8 x i32> %strided.vec3, ptr %out.vec3, align 64
  store <8 x i32> %strided.vec4, ptr %out.vec4, align 64
  store <8 x i32> %strided.vec5, ptr %out.vec5, align 64
  store <8 x i32> %strided.vec6, ptr %out.vec6, align 64
  store <8 x i32> %strided.vec7, ptr %out.vec7, align 64

  ret void
}

define void @load_i32_stride8_vf16(ptr %in.vec, ptr %out.vec0, ptr %out.vec1, ptr %out.vec2, ptr %out.vec3, ptr %out.vec4, ptr %out.vec5, ptr %out.vec6, ptr %out.vec7) nounwind {
; SSE-LABEL: load_i32_stride8_vf16:
; SSE:       # %bb.0:
; SSE-NEXT:    subq $296, %rsp # imm = 0x128
; SSE-NEXT:    movaps 288(%rdi), %xmm1
; SSE-NEXT:    movaps 352(%rdi), %xmm2
; SSE-NEXT:    movaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 320(%rdi), %xmm7
; SSE-NEXT:    movaps 416(%rdi), %xmm0
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 384(%rdi), %xmm4
; SSE-NEXT:    movaps %xmm4, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 480(%rdi), %xmm11
; SSE-NEXT:    movaps 448(%rdi), %xmm3
; SSE-NEXT:    movaps 160(%rdi), %xmm6
; SSE-NEXT:    movaps 128(%rdi), %xmm13
; SSE-NEXT:    movaps 224(%rdi), %xmm5
; SSE-NEXT:    movaps 192(%rdi), %xmm10
; SSE-NEXT:    movaps %xmm10, %xmm8
; SSE-NEXT:    unpcklps {{.*#+}} xmm8 = xmm8[0],xmm5[0],xmm8[1],xmm5[1]
; SSE-NEXT:    movaps %xmm13, %xmm9
; SSE-NEXT:    unpcklps {{.*#+}} xmm9 = xmm9[0],xmm6[0],xmm9[1],xmm6[1]
; SSE-NEXT:    movaps %xmm9, %xmm14
; SSE-NEXT:    movaps %xmm9, %xmm12
; SSE-NEXT:    movlhps {{.*#+}} xmm14 = xmm14[0],xmm8[0]
; SSE-NEXT:    movaps %xmm14, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm3, %xmm9
; SSE-NEXT:    unpcklps {{.*#+}} xmm9 = xmm9[0],xmm11[0],xmm9[1],xmm11[1]
; SSE-NEXT:    movaps %xmm4, %xmm14
; SSE-NEXT:    unpcklps {{.*#+}} xmm14 = xmm14[0],xmm0[0],xmm14[1],xmm0[1]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm12 = xmm12[1],xmm8[1]
; SSE-NEXT:    movaps %xmm12, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm14, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm9[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm14 = xmm14[1],xmm9[1]
; SSE-NEXT:    movaps %xmm14, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm7, %xmm8
; SSE-NEXT:    unpcklps {{.*#+}} xmm8 = xmm8[0],xmm2[0],xmm8[1],xmm2[1]
; SSE-NEXT:    movaps 256(%rdi), %xmm9
; SSE-NEXT:    movaps %xmm9, %xmm0
; SSE-NEXT:    unpcklps {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
; SSE-NEXT:    movaps %xmm1, %xmm4
; SSE-NEXT:    movaps %xmm0, %xmm1
; SSE-NEXT:    movlhps {{.*#+}} xmm1 = xmm1[0],xmm8[0]
; SSE-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm0 = xmm0[1],xmm8[1]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 96(%rdi), %xmm8
; SSE-NEXT:    movaps 64(%rdi), %xmm12
; SSE-NEXT:    movaps %xmm12, %xmm14
; SSE-NEXT:    unpcklps {{.*#+}} xmm14 = xmm14[0],xmm8[0],xmm14[1],xmm8[1]
; SSE-NEXT:    movaps (%rdi), %xmm2
; SSE-NEXT:    movaps 32(%rdi), %xmm15
; SSE-NEXT:    movaps %xmm2, %xmm1
; SSE-NEXT:    unpcklps {{.*#+}} xmm1 = xmm1[0],xmm15[0],xmm1[1],xmm15[1]
; SSE-NEXT:    movaps %xmm1, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm14[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1],xmm14[1]
; SSE-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhps {{.*#+}} xmm10 = xmm10[2],xmm5[2],xmm10[3],xmm5[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm13 = xmm13[2],xmm6[2],xmm13[3],xmm6[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm3 = xmm3[2],xmm11[2],xmm3[3],xmm11[3]
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm11 # 16-byte Reload
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm11 # 16-byte Folded Reload
; SSE-NEXT:    # xmm11 = xmm11[2],mem[2],xmm11[3],mem[3]
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm7 # 16-byte Folded Reload
; SSE-NEXT:    # xmm7 = xmm7[2],mem[2],xmm7[3],mem[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm9 = xmm9[2],xmm4[2],xmm9[3],xmm4[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm12 = xmm12[2],xmm8[2],xmm12[3],xmm8[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm2 = xmm2[2],xmm15[2],xmm2[3],xmm15[3]
; SSE-NEXT:    movaps %xmm13, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm10[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm13 = xmm13[1],xmm10[1]
; SSE-NEXT:    movaps %xmm13, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm11, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm3[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm11 = xmm11[1],xmm3[1]
; SSE-NEXT:    movaps %xmm11, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm9, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm7[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm9 = xmm9[1],xmm7[1]
; SSE-NEXT:    movaps %xmm9, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps %xmm2, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm12[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm2 = xmm2[1],xmm12[1]
; SSE-NEXT:    movaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 240(%rdi), %xmm1
; SSE-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 208(%rdi), %xmm12
; SSE-NEXT:    movaps %xmm12, %xmm0
; SSE-NEXT:    unpcklps {{.*#+}} xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
; SSE-NEXT:    movaps 176(%rdi), %xmm2
; SSE-NEXT:    movaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 144(%rdi), %xmm1
; SSE-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpcklps {{.*#+}} xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
; SSE-NEXT:    movaps %xmm1, %xmm2
; SSE-NEXT:    movlhps {{.*#+}} xmm2 = xmm2[0],xmm0[0]
; SSE-NEXT:    movaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm1 = xmm1[1],xmm0[1]
; SSE-NEXT:    movaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 368(%rdi), %xmm0
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 336(%rdi), %xmm3
; SSE-NEXT:    movaps %xmm3, %xmm1
; SSE-NEXT:    unpcklps {{.*#+}} xmm1 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; SSE-NEXT:    movaps 304(%rdi), %xmm0
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    movaps 272(%rdi), %xmm10
; SSE-NEXT:    movaps %xmm10, %xmm8
; SSE-NEXT:    unpcklps {{.*#+}} xmm8 = xmm8[0],xmm0[0],xmm8[1],xmm0[1]
; SSE-NEXT:    movaps %xmm8, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm8 = xmm8[1],xmm1[1]
; SSE-NEXT:    movaps 496(%rdi), %xmm14
; SSE-NEXT:    movaps 464(%rdi), %xmm2
; SSE-NEXT:    movaps %xmm2, %xmm1
; SSE-NEXT:    unpcklps {{.*#+}} xmm1 = xmm1[0],xmm14[0],xmm1[1],xmm14[1]
; SSE-NEXT:    movaps 432(%rdi), %xmm13
; SSE-NEXT:    movaps 400(%rdi), %xmm15
; SSE-NEXT:    movaps %xmm15, %xmm7
; SSE-NEXT:    unpcklps {{.*#+}} xmm7 = xmm7[0],xmm13[0],xmm7[1],xmm13[1]
; SSE-NEXT:    movaps %xmm7, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm1[0]
; SSE-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm7 = xmm7[1],xmm1[1]
; SSE-NEXT:    movaps 112(%rdi), %xmm11
; SSE-NEXT:    movaps 80(%rdi), %xmm1
; SSE-NEXT:    movaps %xmm1, %xmm0
; SSE-NEXT:    unpcklps {{.*#+}} xmm0 = xmm0[0],xmm11[0],xmm0[1],xmm11[1]
; SSE-NEXT:    movaps 16(%rdi), %xmm6
; SSE-NEXT:    movaps 48(%rdi), %xmm9
; SSE-NEXT:    movaps %xmm6, %xmm5
; SSE-NEXT:    unpcklps {{.*#+}} xmm5 = xmm5[0],xmm9[0],xmm5[1],xmm9[1]
; SSE-NEXT:    movaps %xmm5, %xmm4
; SSE-NEXT:    movlhps {{.*#+}} xmm4 = xmm4[0],xmm0[0]
; SSE-NEXT:    movaps %xmm4, (%rsp) # 16-byte Spill
; SSE-NEXT:    unpckhpd {{.*#+}} xmm5 = xmm5[1],xmm0[1]
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm12 # 16-byte Folded Reload
; SSE-NEXT:    # xmm12 = xmm12[2],mem[2],xmm12[3],mem[3]
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Folded Reload
; SSE-NEXT:    # xmm0 = xmm0[2],mem[2],xmm0[3],mem[3]
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Folded Reload
; SSE-NEXT:    # xmm3 = xmm3[2],mem[2],xmm3[3],mem[3]
; SSE-NEXT:    unpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm10 # 16-byte Folded Reload
; SSE-NEXT:    # xmm10 = xmm10[2],mem[2],xmm10[3],mem[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm2 = xmm2[2],xmm14[2],xmm2[3],xmm14[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm15 = xmm15[2],xmm13[2],xmm15[3],xmm13[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm1 = xmm1[2],xmm11[2],xmm1[3],xmm11[3]
; SSE-NEXT:    unpckhps {{.*#+}} xmm6 = xmm6[2],xmm9[2],xmm6[3],xmm9[3]
; SSE-NEXT:    movaps %xmm0, %xmm4
; SSE-NEXT:    movlhps {{.*#+}} xmm4 = xmm4[0],xmm12[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm0 = xmm0[1],xmm12[1]
; SSE-NEXT:    movaps %xmm0, %xmm9
; SSE-NEXT:    movaps %xmm10, %xmm0
; SSE-NEXT:    movlhps {{.*#+}} xmm0 = xmm0[0],xmm3[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm10 = xmm10[1],xmm3[1]
; SSE-NEXT:    movaps %xmm15, %xmm3
; SSE-NEXT:    movlhps {{.*#+}} xmm3 = xmm3[0],xmm2[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm15 = xmm15[1],xmm2[1]
; SSE-NEXT:    movaps %xmm6, %xmm2
; SSE-NEXT:    movlhps {{.*#+}} xmm2 = xmm2[0],xmm1[0]
; SSE-NEXT:    unpckhpd {{.*#+}} xmm6 = xmm6[1],xmm1[1]
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 32(%rsi)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 48(%rsi)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, (%rsi)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 16(%rsi)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 32(%rdx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 48(%rdx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, (%rdx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 16(%rdx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 32(%rcx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 48(%rcx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, (%rcx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 16(%rcx)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 32(%r8)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 48(%r8)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, (%r8)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 16(%r8)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 32(%r9)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 48(%r9)
; SSE-NEXT:    movaps (%rsp), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, (%r9)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 16(%r9)
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movaps %xmm7, 48(%rax)
; SSE-NEXT:    movaps %xmm8, 32(%rax)
; SSE-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm1 # 16-byte Reload
; SSE-NEXT:    movaps %xmm1, 16(%rax)
; SSE-NEXT:    movaps %xmm5, (%rax)
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movaps %xmm3, 48(%rax)
; SSE-NEXT:    movaps %xmm0, 32(%rax)
; SSE-NEXT:    movaps %xmm4, 16(%rax)
; SSE-NEXT:    movaps %xmm2, (%rax)
; SSE-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; SSE-NEXT:    movaps %xmm15, 48(%rax)
; SSE-NEXT:    movaps %xmm10, 32(%rax)
; SSE-NEXT:    movaps %xmm9, 16(%rax)
; SSE-NEXT:    movaps %xmm6, (%rax)
; SSE-NEXT:    addq $296, %rsp # imm = 0x128
; SSE-NEXT:    retq
;
; AVX1-ONLY-LABEL: load_i32_stride8_vf16:
; AVX1-ONLY:       # %bb.0:
; AVX1-ONLY-NEXT:    subq $584, %rsp # imm = 0x248
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %xmm0
; AVX1-ONLY-NEXT:    vmovaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %xmm9
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm0 = xmm9[0],xmm0[0],xmm9[1],xmm0[1]
; AVX1-ONLY-NEXT:    vmovaps 96(%rdi), %xmm1
; AVX1-ONLY-NEXT:    vmovaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 64(%rdi), %xmm2
; AVX1-ONLY-NEXT:    vmovaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm12 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; AVX1-ONLY-NEXT:    vmovlhps {{.*#+}} xmm0 = xmm0[0],xmm12[0]
; AVX1-ONLY-NEXT:    vmovaps 160(%rdi), %xmm8
; AVX1-ONLY-NEXT:    vmovaps 128(%rdi), %xmm6
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm6[0],xmm8[0],xmm6[1],xmm8[1]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX1-ONLY-NEXT:    vmovaps 224(%rdi), %xmm2
; AVX1-ONLY-NEXT:    vmovaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 192(%rdi), %xmm3
; AVX1-ONLY-NEXT:    vmovaps %xmm3, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm5 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm7 = xmm5[0,1,0,1]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm7, %ymm0, %ymm7
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3,4,5],ymm7[6,7]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 416(%rdi), %xmm10
; AVX1-ONLY-NEXT:    vmovaps 384(%rdi), %xmm11
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm0 = xmm11[0],xmm10[0],xmm11[1],xmm10[1]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm0, %ymm0, %ymm0
; AVX1-ONLY-NEXT:    vmovaps 480(%rdi), %xmm1
; AVX1-ONLY-NEXT:    vmovaps %xmm1, (%rsp) # 16-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 448(%rdi), %xmm2
; AVX1-ONLY-NEXT:    vmovaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm4 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm13 = xmm4[0,1,0,1]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm13, %ymm0, %ymm13
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm2 = ymm0[0,1,2,3,4,5],ymm13[6,7]
; AVX1-ONLY-NEXT:    vmovaps 288(%rdi), %xmm15
; AVX1-ONLY-NEXT:    vmovaps 256(%rdi), %xmm7
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm7[0],xmm15[0],xmm7[1],xmm15[1]
; AVX1-ONLY-NEXT:    vmovaps 352(%rdi), %xmm13
; AVX1-ONLY-NEXT:    vmovaps 320(%rdi), %xmm14
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} xmm0 = xmm14[0],xmm13[0],xmm14[1],xmm13[1]
; AVX1-ONLY-NEXT:    vmovlhps {{.*#+}} xmm1 = xmm1[0],xmm0[0]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3],ymm2[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm1, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm1 = xmm9[1,1,1,1]
; AVX1-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm1[0],xmm3[1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm1[0,1],xmm12[2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm5, %ymm0, %ymm2
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm5 = xmm6[1,1,1,1]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm5[0],xmm8[1],xmm5[2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm5, %ymm0, %ymm5
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm2 = ymm5[0,1,2,3,4,5],ymm2[6,7]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3],ymm2[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm1, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm1 = xmm7[1,1,1,1]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm1[0],xmm15[1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm1[0,1],xmm0[2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm4, %ymm0, %ymm1
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm2 = xmm11[1,1,1,1]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm2 = xmm2[0],xmm10[1],xmm2[2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm2, %ymm0, %ymm2
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm2[0,1,2,3,4,5],ymm1[6,7]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm0 = xmm9[2],xmm3[2],xmm9[3],xmm3[3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm1 = xmm6[2],xmm8[2],xmm6[3],xmm8[3]
; AVX1-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm12 # 16-byte Reload
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm2 = xmm12[2,2,2,2]
; AVX1-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm9 # 16-byte Reload
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm2 = xmm9[0,1,2],xmm2[3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm2, %ymm0, %ymm2
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm3
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm2 = ymm3[0,1,2,3,4,5],ymm2[6,7]
; AVX1-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm8 # 16-byte Reload
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm3 = xmm8[2,2,2,2]
; AVX1-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm6 # 16-byte Reload
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm3 = xmm6[0,1,2],xmm3[3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm3 = xmm0[0,1],xmm3[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm2 = ymm3[0,1,2,3],ymm2[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm2, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm2 = xmm7[2],xmm15[2],xmm7[3],xmm15[3]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm3 = xmm11[2],xmm10[2],xmm11[3],xmm10[3]
; AVX1-ONLY-NEXT:    vmovaps (%rsp), %xmm10 # 16-byte Reload
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm4 = xmm10[2,2,2,2]
; AVX1-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm7 # 16-byte Reload
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm4 = xmm7[0,1,2],xmm4[3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm4, %ymm0, %ymm4
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm3, %ymm0, %ymm5
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm4 = ymm5[0,1,2,3,4,5],ymm4[6,7]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm5 = xmm13[2,2,2,2]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm14[0,1,2],xmm5[3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm2[0,1],xmm5[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm4 = ymm5[0,1,2,3],ymm4[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm4, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm4 = xmm6[2],xmm8[2],xmm6[3],xmm8[3]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm0 = xmm0[1],xmm4[1]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm4 = xmm9[2],xmm12[2],xmm9[3],xmm12[3]
; AVX1-ONLY-NEXT:    vmovaps 288(%rdi), %ymm5
; AVX1-ONLY-NEXT:    vmovups %ymm5, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm4, %ymm0, %ymm4
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm1 = xmm1[2,3,2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3,4,5],ymm4[6,7]
; AVX1-ONLY-NEXT:    vmovaps 256(%rdi), %ymm4
; AVX1-ONLY-NEXT:    vmovups %ymm4, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 416(%rdi), %ymm6
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm0 = xmm14[2],xmm13[2],xmm14[3],xmm13[3]
; AVX1-ONLY-NEXT:    vmovaps 384(%rdi), %ymm8
; AVX1-ONLY-NEXT:    vmovups %ymm8, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm0 = xmm2[1],xmm0[1]
; AVX1-ONLY-NEXT:    vmovaps 448(%rdi), %ymm9
; AVX1-ONLY-NEXT:    vmovups %ymm9, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} xmm1 = xmm7[2],xmm10[2],xmm7[3],xmm10[3]
; AVX1-ONLY-NEXT:    vmovaps 480(%rdi), %ymm7
; AVX1-ONLY-NEXT:    vmovups %ymm7, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} xmm2 = xmm3[2,3,2,3]
; AVX1-ONLY-NEXT:    vinsertf128 $1, %xmm2, %ymm0, %ymm2
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm2[0,1,2,3,4,5],ymm1[6,7]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm0 = ymm7[0],ymm9[0],ymm7[2],ymm9[2]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm1 = ymm8[0],ymm6[0],ymm8[1],ymm6[1],ymm8[4],ymm6[4],ymm8[5],ymm6[5]
; AVX1-ONLY-NEXT:    vmovups %ymm6, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm2 = ymm1[0,1],ymm0[2,0],ymm1[4,5],ymm0[6,4]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm0 = ymm4[0],ymm5[0],ymm4[1],ymm5[1],ymm4[4],ymm5[4],ymm4[5],ymm5[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm0, %xmm3
; AVX1-ONLY-NEXT:    vmovaps 320(%rdi), %ymm10
; AVX1-ONLY-NEXT:    vmovaps 352(%rdi), %ymm9
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm4 = ymm9[0],ymm10[0],ymm9[2],ymm10[2]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm4 = ymm4[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm4, %xmm4
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm3 = xmm3[0,1],xmm4[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm3[0,1,2,3],ymm2[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm0, (%rsp) # 32-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 160(%rdi), %ymm7
; AVX1-ONLY-NEXT:    vmovaps 128(%rdi), %ymm8
; AVX1-ONLY-NEXT:    vmovaps 192(%rdi), %ymm15
; AVX1-ONLY-NEXT:    vmovaps 224(%rdi), %ymm11
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm2 = ymm11[0],ymm15[0],ymm11[2],ymm15[2]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm4 = ymm8[0],ymm7[0],ymm8[1],ymm7[1],ymm8[4],ymm7[4],ymm8[5],ymm7[5]
; AVX1-ONLY-NEXT:    vmovups %ymm8, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vmovups %ymm7, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm1 = ymm4[0,1],ymm2[2,0],ymm4[4,5],ymm2[6,4]
; AVX1-ONLY-NEXT:    vmovaps 64(%rdi), %ymm0
; AVX1-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vmovaps 96(%rdi), %ymm2
; AVX1-ONLY-NEXT:    vmovups %ymm2, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpcklpd {{.*#+}} ymm2 = ymm2[0],ymm0[0],ymm2[2],ymm0[2]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm2 = ymm2[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm2, %xmm0
; AVX1-ONLY-NEXT:    vmovaps (%rdi), %ymm14
; AVX1-ONLY-NEXT:    vmovaps 32(%rdi), %ymm13
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm12 = ymm14[0],ymm13[0],ymm14[1],ymm13[1],ymm14[4],ymm13[4],ymm14[5],ymm13[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm12, %xmm12
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm12[0,1],xmm0[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm4 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm3 # 32-byte Reload
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm0 = ymm3[0],ymm4[0],ymm3[1],ymm4[1],ymm3[4],ymm4[4],ymm3[5],ymm4[5]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm5 # 32-byte Reload
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm1 = ymm6[1,0],ymm5[1,0],ymm6[5,4],ymm5[5,4]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm6 = ymm1[2,0],ymm0[2,3],ymm1[6,4],ymm0[6,7]
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm1 = ymm10[0],ymm9[0],ymm10[1],ymm9[1],ymm10[4],ymm9[4],ymm10[5],ymm9[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm0 # 32-byte Reload
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm12 = ymm0[1,0],ymm2[1,0],ymm0[5,4],ymm2[5,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm12 = ymm12[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm12, %xmm12
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm12[0,1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3],ymm6[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm1, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm6 = ymm15[0],ymm11[0],ymm15[1],ymm11[1],ymm15[4],ymm11[4],ymm15[5],ymm11[5]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm1 = ymm7[1,0],ymm8[1,0],ymm7[5,4],ymm8[5,4]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm7 = ymm1[2,0],ymm6[2,3],ymm1[6,4],ymm6[6,7]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm6 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm8 # 32-byte Reload
; AVX1-ONLY-NEXT:    vunpcklps {{.*#+}} ymm1 = ymm6[0],ymm8[0],ymm6[1],ymm8[1],ymm6[4],ymm8[4],ymm6[5],ymm8[5]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm12 = ymm13[1,0],ymm14[1,0],ymm13[5,4],ymm14[5,4]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm12 = ymm12[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm12, %xmm12
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm12[0,1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3],ymm7[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups %ymm1, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm7 = ymm4[1],ymm3[1],ymm4[3],ymm3[3]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm4 # 32-byte Reload
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm5[2],ymm4[2],ymm5[3],ymm4[3],ymm5[6],ymm4[6],ymm5[7],ymm4[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm3 = ymm1[0,1],ymm7[2,0],ymm1[4,5],ymm7[6,4]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm2[2],ymm0[2],ymm2[3],ymm0[3],ymm2[6],ymm0[6],ymm2[7],ymm0[7]
; AVX1-ONLY-NEXT:    vmovaps %ymm0, %ymm5
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm12 = ymm9[1],ymm10[1],ymm9[3],ymm10[3]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm12 = ymm12[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm12, %xmm12
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm1[0,1],xmm12[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm7 = ymm1[0,1,2,3],ymm3[4,5,6,7]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm0 = ymm11[1],ymm15[1],ymm11[3],ymm15[3]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm3 # 32-byte Reload
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm3[2],ymm2[2],ymm3[3],ymm2[3],ymm3[6],ymm2[6],ymm3[7],ymm2[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm0 = ymm1[0,1],ymm0[2,0],ymm1[4,5],ymm0[6,4]
; AVX1-ONLY-NEXT:    vunpckhpd {{.*#+}} ymm1 = ymm8[1],ymm6[1],ymm8[3],ymm6[3]
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm1 = ymm1[0,1,2,0,4,5,6,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm12 = ymm14[2],ymm13[2],ymm14[3],ymm13[3],ymm14[6],ymm13[6],ymm14[7],ymm13[7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm12, %xmm12
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm12[0,1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm12 = ymm1[0,1,2,3],ymm0[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm0 # 32-byte Reload
; AVX1-ONLY-NEXT:    vunpckhps {{[-0-9]+}}(%r{{[sb]}}p), %ymm0, %ymm0 # 32-byte Folded Reload
; AVX1-ONLY-NEXT:    # ymm0 = ymm0[2],mem[2],ymm0[3],mem[3],ymm0[6],mem[6],ymm0[7],mem[7]
; AVX1-ONLY-NEXT:    vshufps $51, {{[-0-9]+}}(%r{{[sb]}}p), %ymm4, %ymm1 # 32-byte Folded Reload
; AVX1-ONLY-NEXT:    # ymm1 = ymm4[3,0],mem[3,0],ymm4[7,4],mem[7,4]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm0 = ymm1[2,0],ymm0[2,3],ymm1[6,4],ymm0[6,7]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm10[2],ymm9[2],ymm10[3],ymm9[3],ymm10[6],ymm9[6],ymm10[7],ymm9[7]
; AVX1-ONLY-NEXT:    vshufps $51, {{[-0-9]+}}(%r{{[sb]}}p), %ymm5, %ymm5 # 32-byte Folded Reload
; AVX1-ONLY-NEXT:    # ymm5 = ymm5[3,0],mem[3,0],ymm5[7,4],mem[7,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm1, %xmm1
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm5 = ymm5[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm5, %xmm5
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm1 = xmm5[0,1],xmm1[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm1[0,1,2,3],ymm0[4,5,6,7]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm1 = ymm15[2],ymm11[2],ymm15[3],ymm11[3],ymm15[6],ymm11[6],ymm15[7],ymm11[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm3 = ymm2[3,0],ymm3[3,0],ymm2[7,4],ymm3[7,4]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm1 = ymm3[2,0],ymm1[2,3],ymm3[6,4],ymm1[6,7]
; AVX1-ONLY-NEXT:    vunpckhps {{.*#+}} ymm3 = ymm6[2],ymm8[2],ymm6[3],ymm8[3],ymm6[6],ymm8[6],ymm6[7],ymm8[7]
; AVX1-ONLY-NEXT:    vshufps {{.*#+}} ymm2 = ymm13[3,0],ymm14[3,0],ymm13[7,4],ymm14[7,4]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm3, %xmm3
; AVX1-ONLY-NEXT:    vpermilps {{.*#+}} ymm2 = ymm2[2,0,2,3,6,4,6,7]
; AVX1-ONLY-NEXT:    vextractf128 $1, %ymm2, %xmm2
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} xmm2 = xmm2[0,1],xmm3[2,3]
; AVX1-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm2[0,1,2,3],ymm1[4,5,6,7]
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, 32(%rsi)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, (%rsi)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, 32(%rdx)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, (%rdx)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, 32(%rcx)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, (%rcx)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, 32(%r8)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, (%r8)
; AVX1-ONLY-NEXT:    vmovups (%rsp), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, 32(%r9)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, (%r9)
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, 32(%rax)
; AVX1-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX1-ONLY-NEXT:    vmovaps %ymm2, (%rax)
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    vmovaps %ymm7, 32(%rax)
; AVX1-ONLY-NEXT:    vmovaps %ymm12, (%rax)
; AVX1-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX1-ONLY-NEXT:    vmovaps %ymm0, 32(%rax)
; AVX1-ONLY-NEXT:    vmovaps %ymm1, (%rax)
; AVX1-ONLY-NEXT:    addq $584, %rsp # imm = 0x248
; AVX1-ONLY-NEXT:    vzeroupper
; AVX1-ONLY-NEXT:    retq
;
; AVX2-ONLY-LABEL: load_i32_stride8_vf16:
; AVX2-ONLY:       # %bb.0:
; AVX2-ONLY-NEXT:    subq $328, %rsp # imm = 0x148
; AVX2-ONLY-NEXT:    vmovaps 288(%rdi), %xmm0
; AVX2-ONLY-NEXT:    vmovaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vmovaps 256(%rdi), %xmm2
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm0 = xmm2[0],xmm0[0],xmm2[1],xmm0[1]
; AVX2-ONLY-NEXT:    vmovaps %xmm2, %xmm15
; AVX2-ONLY-NEXT:    vmovaps 352(%rdi), %xmm1
; AVX2-ONLY-NEXT:    vmovaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vbroadcastss %xmm1, %xmm1
; AVX2-ONLY-NEXT:    vmovaps 320(%rdi), %xmm2
; AVX2-ONLY-NEXT:    vmovaps %xmm2, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vbroadcastss %xmm2, %xmm2
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm2[0],xmm1[0],xmm2[1],xmm1[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vmovaps 416(%rdi), %xmm1
; AVX2-ONLY-NEXT:    vmovaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vmovaps 384(%rdi), %xmm13
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm13[0],xmm1[0],xmm13[1],xmm1[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX2-ONLY-NEXT:    vmovaps 480(%rdi), %xmm3
; AVX2-ONLY-NEXT:    vbroadcastss %xmm3, %xmm2
; AVX2-ONLY-NEXT:    vmovaps %xmm3, %xmm9
; AVX2-ONLY-NEXT:    vmovaps 448(%rdi), %xmm3
; AVX2-ONLY-NEXT:    vmovaps %xmm3, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vbroadcastss %xmm3, %xmm3
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm2 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm2, %ymm0, %ymm2
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3,4,5],ymm2[6,7]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vmovaps 160(%rdi), %xmm0
; AVX2-ONLY-NEXT:    vmovaps 128(%rdi), %xmm1
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm2 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; AVX2-ONLY-NEXT:    vmovaps %xmm1, %xmm4
; AVX2-ONLY-NEXT:    vmovaps %xmm1, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vmovaps %xmm0, %xmm5
; AVX2-ONLY-NEXT:    vmovaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm2, %ymm0, %ymm2
; AVX2-ONLY-NEXT:    vmovaps 224(%rdi), %xmm0
; AVX2-ONLY-NEXT:    vbroadcastss %xmm0, %xmm3
; AVX2-ONLY-NEXT:    vmovaps %xmm0, %xmm10
; AVX2-ONLY-NEXT:    vmovaps %xmm0, (%rsp) # 16-byte Spill
; AVX2-ONLY-NEXT:    vmovaps 192(%rdi), %xmm11
; AVX2-ONLY-NEXT:    vbroadcastss %xmm11, %xmm12
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm3 = xmm12[0],xmm3[0],xmm12[1],xmm3[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm3, %ymm0, %ymm3
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm2[0,1,2,3,4,5],ymm3[6,7]
; AVX2-ONLY-NEXT:    vmovaps 96(%rdi), %xmm12
; AVX2-ONLY-NEXT:    vbroadcastss %xmm12, %xmm2
; AVX2-ONLY-NEXT:    vmovaps 64(%rdi), %xmm14
; AVX2-ONLY-NEXT:    vbroadcastss %xmm14, %xmm3
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm0 = xmm3[0],xmm2[0],xmm3[1],xmm2[1]
; AVX2-ONLY-NEXT:    vmovaps (%rdi), %xmm8
; AVX2-ONLY-NEXT:    vmovaps 32(%rdi), %xmm7
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm6 = xmm8[0],xmm7[0],xmm8[1],xmm7[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm6[0,1],xmm0[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm0 = xmm8[1,1,1,1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0],xmm7[1],xmm0[2,3]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm14[0],xmm12[0],xmm14[1],xmm12[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm11[0],xmm10[0],xmm11[1],xmm10[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm6 = xmm4[1,1,1,1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm6 = xmm6[0],xmm5[1],xmm6[2,3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm6, %ymm0, %ymm6
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm6[0,1,2,3,4,5],ymm1[6,7]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm0 = xmm15[1,1,1,1]
; AVX2-ONLY-NEXT:    vmovaps %xmm15, %xmm10
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm5 # 16-byte Reload
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0],xmm5[1],xmm0[2,3]
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm15 # 16-byte Reload
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm3[0],xmm15[0],xmm3[1],xmm15[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm0 = xmm0[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vmovaps %xmm9, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm2 # 16-byte Reload
; AVX2-ONLY-NEXT:    vunpcklps {{.*#+}} xmm1 = xmm2[0],xmm9[0],xmm2[1],xmm9[1]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm6 = xmm13[1,1,1,1]
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm4 # 16-byte Reload
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm6 = xmm6[0],xmm4[1],xmm6[2,3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm6, %ymm0, %ymm6
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm6[0,1,2,3,4,5],ymm1[6,7]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm0 = xmm10[2],xmm5[2],xmm10[3],xmm5[3]
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm1 = xmm13[2],xmm4[2],xmm13[3],xmm4[3]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm6 = xmm9[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm6 = xmm2[0,1,2],xmm6[3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm6, %ymm0, %ymm6
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm13
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm6 = ymm13[0,1,2,3,4,5],ymm6[6,7]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm13 = xmm15[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm13 = xmm3[0,1,2],xmm13[3]
; AVX2-ONLY-NEXT:    vmovaps %xmm3, %xmm9
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm13 = xmm0[0,1],xmm13[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm6 = ymm13[0,1,2,3],ymm6[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm6, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm2 # 16-byte Reload
; AVX2-ONLY-NEXT:    vunpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm2, %xmm4 # 16-byte Folded Reload
; AVX2-ONLY-NEXT:    # xmm4 = xmm2[2],mem[2],xmm2[3],mem[3]
; AVX2-ONLY-NEXT:    vmovaps (%rsp), %xmm10 # 16-byte Reload
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm5 = xmm10[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm5 = xmm11[0,1,2],xmm5[3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm5, %ymm0, %ymm5
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm4, %ymm0, %ymm6
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm5 = ymm6[0,1,2,3,4,5],ymm5[6,7]
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm2 = xmm8[2],xmm7[2],xmm8[3],xmm7[3]
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm3 = xmm12[2,2,2,2]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm3 = xmm14[0,1,2],xmm3[3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} xmm3 = xmm2[0,1],xmm3[2,3]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm3 = ymm3[0,1,2,3],ymm5[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm3, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm3 = xmm9[2],xmm15[2],xmm9[3],xmm15[3]
; AVX2-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm0 = xmm0[1],xmm3[1]
; AVX2-ONLY-NEXT:    vmovaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3 # 16-byte Reload
; AVX2-ONLY-NEXT:    vunpckhps {{[-0-9]+}}(%r{{[sb]}}p), %xmm3, %xmm3 # 16-byte Folded Reload
; AVX2-ONLY-NEXT:    # xmm3 = xmm3[2],mem[2],xmm3[3],mem[3]
; AVX2-ONLY-NEXT:    vmovdqa 96(%rdi), %ymm5
; AVX2-ONLY-NEXT:    vmovdqu %ymm5, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm3, %ymm0, %ymm3
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm1 = xmm1[2,3,2,3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm1 = ymm1[0,1,2,3,4,5],ymm3[6,7]
; AVX2-ONLY-NEXT:    vmovdqa 64(%rdi), %ymm6
; AVX2-ONLY-NEXT:    vmovdqu %ymm6, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vmovdqa 224(%rdi), %ymm3
; AVX2-ONLY-NEXT:    vmovdqu %ymm3, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm0 = xmm11[2],xmm10[2],xmm11[3],xmm10[3]
; AVX2-ONLY-NEXT:    vmovdqa 192(%rdi), %ymm13
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm0, %ymm0, %ymm0
; AVX2-ONLY-NEXT:    vpermilps {{.*#+}} xmm1 = xmm4[2,3,2,3]
; AVX2-ONLY-NEXT:    vinsertf128 $1, %xmm1, %ymm0, %ymm1
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm1[0,1,2,3,4,5],ymm0[6,7]
; AVX2-ONLY-NEXT:    vmovdqa 160(%rdi), %ymm7
; AVX2-ONLY-NEXT:    vunpckhps {{.*#+}} xmm1 = xmm14[2],xmm12[2],xmm14[3],xmm12[3]
; AVX2-ONLY-NEXT:    vmovdqa 128(%rdi), %ymm12
; AVX2-ONLY-NEXT:    vunpckhpd {{.*#+}} xmm1 = xmm2[1],xmm1[1]
; AVX2-ONLY-NEXT:    vblendps {{.*#+}} ymm0 = ymm1[0,1,2,3],ymm0[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vpbroadcastd 48(%rdi), %xmm0
; AVX2-ONLY-NEXT:    vpbroadcastd 16(%rdi), %ymm1
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} xmm0 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm1 = ymm6[0],ymm5[0],ymm6[1],ymm5[1],ymm6[4],ymm5[4],ymm6[5],ymm5[5]
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm1 = ymm1[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm1 = ymm12[0],ymm7[0],ymm12[1],ymm7[1],ymm12[4],ymm7[4],ymm12[5],ymm7[5]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm8 = ymm13[0],ymm3[0],ymm13[1],ymm3[1],ymm13[4],ymm3[4],ymm13[5],ymm3[5]
; AVX2-ONLY-NEXT:    vpunpcklqdq {{.*#+}} ymm1 = ymm1[0],ymm8[0],ymm1[2],ymm8[2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm1[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovdqu %ymm0, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vpbroadcastd 304(%rdi), %xmm0
; AVX2-ONLY-NEXT:    vpbroadcastd 272(%rdi), %ymm1
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} xmm0 = xmm1[0],xmm0[0],xmm1[1],xmm0[1]
; AVX2-ONLY-NEXT:    vmovdqa 352(%rdi), %ymm9
; AVX2-ONLY-NEXT:    vmovdqa 320(%rdi), %ymm6
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm1 = ymm6[0],ymm9[0],ymm6[1],ymm9[1],ymm6[4],ymm9[4],ymm6[5],ymm9[5]
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm1 = ymm1[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm10 = xmm0[0,1],xmm1[2,3]
; AVX2-ONLY-NEXT:    vmovdqa 480(%rdi), %ymm15
; AVX2-ONLY-NEXT:    vmovdqa 448(%rdi), %ymm5
; AVX2-ONLY-NEXT:    vmovdqa 416(%rdi), %ymm2
; AVX2-ONLY-NEXT:    vmovdqa 384(%rdi), %ymm4
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm11 = ymm4[0],ymm2[0],ymm4[1],ymm2[1],ymm4[4],ymm2[4],ymm4[5],ymm2[5]
; AVX2-ONLY-NEXT:    vpunpckldq {{.*#+}} ymm0 = ymm5[0],ymm15[0],ymm5[1],ymm15[1],ymm5[4],ymm15[4],ymm5[5],ymm15[5]
; AVX2-ONLY-NEXT:    vpunpcklqdq {{.*#+}} ymm11 = ymm11[0],ymm0[0],ymm11[2],ymm0[2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm1 = ymm10[0,1,2,3],ymm11[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovdqu %ymm1, (%rsp) # 32-byte Spill
; AVX2-ONLY-NEXT:    vpbroadcastd 148(%rdi), %ymm11
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm11 = ymm11[0,1,2,3,4],ymm7[5],ymm11[6,7]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm8 = ymm11[0,1,2,3,4,5],ymm8[6,7]
; AVX2-ONLY-NEXT:    vpmovzxdq {{.*#+}} xmm11 = mem[0],zero,mem[1],zero
; AVX2-ONLY-NEXT:    vpbroadcastd 116(%rdi), %ymm14
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm11 = xmm11[0,1,2],xmm14[3]
; AVX2-ONLY-NEXT:    vmovdqa 32(%rdi), %ymm14
; AVX2-ONLY-NEXT:    vmovdqa (%rdi), %ymm1
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm10 = ymm1[1,1,1,1,5,5,5,5]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm10 = ymm10[0],ymm14[1],ymm10[2,3,4],ymm14[5],ymm10[6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm10, %xmm10
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm10 = xmm10[0,1],xmm11[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm10[0,1,2,3],ymm8[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovdqu %ymm3, {{[-0-9]+}}(%r{{[sb]}}p) # 32-byte Spill
; AVX2-ONLY-NEXT:    vpbroadcastd 404(%rdi), %ymm8
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm8 = ymm8[0,1,2,3,4],ymm2[5],ymm8[6,7]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm8[0,1,2,3,4,5],ymm0[6,7]
; AVX2-ONLY-NEXT:    vpmovzxdq {{.*#+}} xmm8 = mem[0],zero,mem[1],zero
; AVX2-ONLY-NEXT:    vpbroadcastd 372(%rdi), %ymm10
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm8 = xmm8[0,1,2],xmm10[3]
; AVX2-ONLY-NEXT:    vmovdqa 288(%rdi), %ymm10
; AVX2-ONLY-NEXT:    vmovdqa 256(%rdi), %ymm0
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm11 = ymm0[1,1,1,1,5,5,5,5]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm11 = ymm11[0],ymm10[1],ymm11[2,3,4],ymm10[5],ymm11[6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm11, %xmm11
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm8 = xmm11[0,1],xmm8[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm8 = ymm8[0,1,2,3],ymm3[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 248(%rdi), %ymm3
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm13[0,1,2,3,4,5,6],ymm3[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm7 = ymm12[2],ymm7[2],ymm12[3],ymm7[3],ymm12[6],ymm7[6],ymm12[7],ymm7[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm11 = ymm1[2],ymm14[2],ymm1[3],ymm14[3],ymm1[6],ymm14[6],ymm1[7],ymm14[7]
; AVX2-ONLY-NEXT:    vmovdqu {{[-0-9]+}}(%r{{[sb]}}p), %ymm1 # 32-byte Reload
; AVX2-ONLY-NEXT:    vpunpckhdq {{[-0-9]+}}(%r{{[sb]}}p), %ymm1, %ymm12 # 32-byte Folded Reload
; AVX2-ONLY-NEXT:    # ymm12 = ymm1[2],mem[2],ymm1[3],mem[3],ymm1[6],mem[6],ymm1[7],mem[7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm11, %xmm1
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm13 = ymm12[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm1 = xmm1[0,1],xmm13[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm7[0,1,2,3,4,5],ymm3[6,7]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm1 = ymm1[0,1,2,3],ymm3[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 504(%rdi), %ymm3
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm5[0,1,2,3,4,5,6],ymm3[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm2 = ymm4[2],ymm2[2],ymm4[3],ymm2[3],ymm4[6],ymm2[6],ymm4[7],ymm2[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm0 = ymm0[2],ymm10[2],ymm0[3],ymm10[3],ymm0[6],ymm10[6],ymm0[7],ymm10[7]
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm4 = ymm6[2],ymm9[2],ymm6[3],ymm9[3],ymm6[6],ymm9[6],ymm6[7],ymm9[7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm0, %xmm5
; AVX2-ONLY-NEXT:    vpermq {{.*#+}} ymm6 = ymm4[2,2,2,2]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm5 = xmm5[0,1],xmm6[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm2[0,1,2,3,4,5],ymm3[6,7]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm3 = ymm5[0,1,2,3],ymm3[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 220(%rdi), %ymm5
; AVX2-ONLY-NEXT:    vpunpckhdq {{[-0-9]+}}(%r{{[sb]}}p), %ymm5, %ymm5 # 32-byte Folded Reload
; AVX2-ONLY-NEXT:    # ymm5 = ymm5[2],mem[2],ymm5[3],mem[3],ymm5[6],mem[6],ymm5[7],mem[7]
; AVX2-ONLY-NEXT:    vpunpckhqdq {{.*#+}} ymm5 = ymm7[1],ymm5[1],ymm7[3],ymm5[3]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm12, %xmm6
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm7 = ymm11[2,3,2,3,6,7,6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm7, %xmm7
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm6 = xmm7[0,1],xmm6[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm5 = ymm6[0,1,2,3],ymm5[4,5,6,7]
; AVX2-ONLY-NEXT:    vpbroadcastd 476(%rdi), %ymm6
; AVX2-ONLY-NEXT:    vpunpckhdq {{.*#+}} ymm6 = ymm6[2],ymm15[2],ymm6[3],ymm15[3],ymm6[6],ymm15[6],ymm6[7],ymm15[7]
; AVX2-ONLY-NEXT:    vpunpckhqdq {{.*#+}} ymm2 = ymm2[1],ymm6[1],ymm2[3],ymm6[3]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm4, %xmm4
; AVX2-ONLY-NEXT:    vpshufd {{.*#+}} ymm0 = ymm0[2,3,2,3,6,7,6,7]
; AVX2-ONLY-NEXT:    vextracti128 $1, %ymm0, %xmm0
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} xmm0 = xmm0[0,1],xmm4[2,3]
; AVX2-ONLY-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm2[4,5,6,7]
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, 32(%rsi)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, (%rsi)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, 32(%rdx)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, (%rdx)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, 32(%rcx)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, (%rcx)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, 32(%r8)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, (%r8)
; AVX2-ONLY-NEXT:    vmovups (%rsp), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, 32(%r9)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, (%r9)
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    vmovdqa %ymm8, 32(%rax)
; AVX2-ONLY-NEXT:    vmovups {{[-0-9]+}}(%r{{[sb]}}p), %ymm2 # 32-byte Reload
; AVX2-ONLY-NEXT:    vmovaps %ymm2, (%rax)
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    vmovdqa %ymm3, 32(%rax)
; AVX2-ONLY-NEXT:    vmovdqa %ymm1, (%rax)
; AVX2-ONLY-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX2-ONLY-NEXT:    vmovdqa %ymm0, 32(%rax)
; AVX2-ONLY-NEXT:    vmovdqa %ymm5, (%rax)
; AVX2-ONLY-NEXT:    addq $328, %rsp # imm = 0x148
; AVX2-ONLY-NEXT:    vzeroupper
; AVX2-ONLY-NEXT:    retq
;
; AVX512F-LABEL: load_i32_stride8_vf16:
; AVX512F:       # %bb.0:
; AVX512F-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512F-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512F-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512F-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512F-NEXT:    vmovdqa64 64(%rdi), %zmm1
; AVX512F-NEXT:    vmovdqa64 128(%rdi), %zmm3
; AVX512F-NEXT:    vmovdqa64 192(%rdi), %zmm4
; AVX512F-NEXT:    vmovdqa64 320(%rdi), %zmm5
; AVX512F-NEXT:    vmovdqa64 256(%rdi), %zmm2
; AVX512F-NEXT:    vmovdqa64 448(%rdi), %zmm7
; AVX512F-NEXT:    vmovdqa64 384(%rdi), %zmm6
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm8 = [0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24]
; AVX512F-NEXT:    # zmm8 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm9
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm8, %zmm9
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm10
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm8, %zmm10
; AVX512F-NEXT:    movb $-64, %dil
; AVX512F-NEXT:    kmovw %edi, %k1
; AVX512F-NEXT:    vmovdqa64 %zmm9, %zmm10 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm9 = <u,u,u,u,0,8,16,24>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm9
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm8
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm8 = ymm8[0,1,2,3],ymm9[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm8, %zmm10, %zmm8
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm9 = [1,9,17,25,1,9,17,25,1,9,17,25,1,9,17,25]
; AVX512F-NEXT:    # zmm9 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm10
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm9, %zmm10
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm11
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm9, %zmm11
; AVX512F-NEXT:    vmovdqa64 %zmm10, %zmm11 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm10 = <u,u,u,u,1,9,17,25>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm10
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm9
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm9 = ymm9[0,1,2,3],ymm10[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm9, %zmm11, %zmm9
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm10 = [2,10,18,26,2,10,18,26,2,10,18,26,2,10,18,26]
; AVX512F-NEXT:    # zmm10 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm11
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm10, %zmm11
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm12
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm10, %zmm12
; AVX512F-NEXT:    vmovdqa64 %zmm11, %zmm12 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm11 = <u,u,u,u,2,10,18,26>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm11
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm10
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm10 = ymm10[0,1,2,3],ymm11[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm10, %zmm12, %zmm10
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm11 = [3,11,19,27,3,11,19,27,3,11,19,27,3,11,19,27]
; AVX512F-NEXT:    # zmm11 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm12
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm11, %zmm12
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm13
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm11, %zmm13
; AVX512F-NEXT:    vmovdqa64 %zmm12, %zmm13 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm12 = <u,u,u,u,3,11,19,27>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm12
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm11
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm11 = ymm11[0,1,2,3],ymm12[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm11, %zmm13, %zmm11
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm12 = [4,12,20,28,4,12,20,28,4,12,20,28,4,12,20,28]
; AVX512F-NEXT:    # zmm12 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm13
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm12, %zmm13
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm14
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm12, %zmm14
; AVX512F-NEXT:    vmovdqa64 %zmm13, %zmm14 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm13 = <u,u,u,u,4,12,20,28>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm13
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm12
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm12 = ymm12[0,1,2,3],ymm13[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm12, %zmm14, %zmm12
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm13 = [5,13,21,29,5,13,21,29,5,13,21,29,5,13,21,29]
; AVX512F-NEXT:    # zmm13 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm14
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm13, %zmm14
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm15
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm13, %zmm15
; AVX512F-NEXT:    vmovdqa64 %zmm14, %zmm15 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm14 = <u,u,u,u,5,13,21,29>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm14
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm13
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm13 = ymm13[0,1,2,3],ymm14[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm13, %zmm15, %zmm13
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm14 = [6,14,22,30,6,14,22,30,6,14,22,30,6,14,22,30]
; AVX512F-NEXT:    # zmm14 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm15
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm14, %zmm15
; AVX512F-NEXT:    vmovdqa64 %zmm2, %zmm16
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm14, %zmm16
; AVX512F-NEXT:    vmovdqa64 %zmm15, %zmm16 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm15 = <u,u,u,u,6,14,22,30>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm15
; AVX512F-NEXT:    vpermi2d %zmm1, %zmm0, %zmm14
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm14 = ymm14[0,1,2,3],ymm15[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm14, %zmm16, %zmm14
; AVX512F-NEXT:    vbroadcasti32x4 {{.*#+}} zmm15 = [7,15,23,31,7,15,23,31,7,15,23,31,7,15,23,31]
; AVX512F-NEXT:    # zmm15 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512F-NEXT:    vpermt2d %zmm7, %zmm15, %zmm6
; AVX512F-NEXT:    vpermt2d %zmm5, %zmm15, %zmm2
; AVX512F-NEXT:    vmovdqa64 %zmm6, %zmm2 {%k1}
; AVX512F-NEXT:    vmovdqa {{.*#+}} ymm5 = <u,u,u,u,7,15,23,31>
; AVX512F-NEXT:    vpermi2d %zmm4, %zmm3, %zmm5
; AVX512F-NEXT:    vpermt2d %zmm1, %zmm15, %zmm0
; AVX512F-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm5[4,5,6,7]
; AVX512F-NEXT:    vinserti64x4 $0, %ymm0, %zmm2, %zmm0
; AVX512F-NEXT:    vmovdqa64 %zmm8, (%rsi)
; AVX512F-NEXT:    vmovdqa64 %zmm9, (%rdx)
; AVX512F-NEXT:    vmovdqa64 %zmm10, (%rcx)
; AVX512F-NEXT:    vmovdqa64 %zmm11, (%r8)
; AVX512F-NEXT:    vmovdqa64 %zmm12, (%r9)
; AVX512F-NEXT:    vmovdqa64 %zmm13, (%r11)
; AVX512F-NEXT:    vmovdqa64 %zmm14, (%r10)
; AVX512F-NEXT:    vmovdqa64 %zmm0, (%rax)
; AVX512F-NEXT:    vzeroupper
; AVX512F-NEXT:    retq
;
; AVX512BW-LABEL: load_i32_stride8_vf16:
; AVX512BW:       # %bb.0:
; AVX512BW-NEXT:    movq {{[0-9]+}}(%rsp), %rax
; AVX512BW-NEXT:    movq {{[0-9]+}}(%rsp), %r10
; AVX512BW-NEXT:    movq {{[0-9]+}}(%rsp), %r11
; AVX512BW-NEXT:    vmovdqa64 (%rdi), %zmm0
; AVX512BW-NEXT:    vmovdqa64 64(%rdi), %zmm1
; AVX512BW-NEXT:    vmovdqa64 128(%rdi), %zmm3
; AVX512BW-NEXT:    vmovdqa64 192(%rdi), %zmm4
; AVX512BW-NEXT:    vmovdqa64 320(%rdi), %zmm5
; AVX512BW-NEXT:    vmovdqa64 256(%rdi), %zmm2
; AVX512BW-NEXT:    vmovdqa64 448(%rdi), %zmm7
; AVX512BW-NEXT:    vmovdqa64 384(%rdi), %zmm6
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm8 = [0,8,16,24,0,8,16,24,0,8,16,24,0,8,16,24]
; AVX512BW-NEXT:    # zmm8 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm9
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm8, %zmm9
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm10
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm8, %zmm10
; AVX512BW-NEXT:    movb $-64, %dil
; AVX512BW-NEXT:    kmovd %edi, %k1
; AVX512BW-NEXT:    vmovdqa64 %zmm9, %zmm10 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm9 = <u,u,u,u,0,8,16,24>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm9
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm8
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm8 = ymm8[0,1,2,3],ymm9[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm8, %zmm10, %zmm8
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm9 = [1,9,17,25,1,9,17,25,1,9,17,25,1,9,17,25]
; AVX512BW-NEXT:    # zmm9 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm10
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm9, %zmm10
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm11
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm9, %zmm11
; AVX512BW-NEXT:    vmovdqa64 %zmm10, %zmm11 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm10 = <u,u,u,u,1,9,17,25>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm10
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm9
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm9 = ymm9[0,1,2,3],ymm10[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm9, %zmm11, %zmm9
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm10 = [2,10,18,26,2,10,18,26,2,10,18,26,2,10,18,26]
; AVX512BW-NEXT:    # zmm10 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm11
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm10, %zmm11
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm12
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm10, %zmm12
; AVX512BW-NEXT:    vmovdqa64 %zmm11, %zmm12 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm11 = <u,u,u,u,2,10,18,26>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm11
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm10
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm10 = ymm10[0,1,2,3],ymm11[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm10, %zmm12, %zmm10
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm11 = [3,11,19,27,3,11,19,27,3,11,19,27,3,11,19,27]
; AVX512BW-NEXT:    # zmm11 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm12
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm11, %zmm12
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm13
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm11, %zmm13
; AVX512BW-NEXT:    vmovdqa64 %zmm12, %zmm13 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm12 = <u,u,u,u,3,11,19,27>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm12
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm11
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm11 = ymm11[0,1,2,3],ymm12[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm11, %zmm13, %zmm11
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm12 = [4,12,20,28,4,12,20,28,4,12,20,28,4,12,20,28]
; AVX512BW-NEXT:    # zmm12 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm13
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm12, %zmm13
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm14
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm12, %zmm14
; AVX512BW-NEXT:    vmovdqa64 %zmm13, %zmm14 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm13 = <u,u,u,u,4,12,20,28>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm13
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm12
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm12 = ymm12[0,1,2,3],ymm13[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm12, %zmm14, %zmm12
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm13 = [5,13,21,29,5,13,21,29,5,13,21,29,5,13,21,29]
; AVX512BW-NEXT:    # zmm13 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm14
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm13, %zmm14
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm15
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm13, %zmm15
; AVX512BW-NEXT:    vmovdqa64 %zmm14, %zmm15 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm14 = <u,u,u,u,5,13,21,29>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm14
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm13
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm13 = ymm13[0,1,2,3],ymm14[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm13, %zmm15, %zmm13
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm14 = [6,14,22,30,6,14,22,30,6,14,22,30,6,14,22,30]
; AVX512BW-NEXT:    # zmm14 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm15
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm14, %zmm15
; AVX512BW-NEXT:    vmovdqa64 %zmm2, %zmm16
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm14, %zmm16
; AVX512BW-NEXT:    vmovdqa64 %zmm15, %zmm16 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm15 = <u,u,u,u,6,14,22,30>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm15
; AVX512BW-NEXT:    vpermi2d %zmm1, %zmm0, %zmm14
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm14 = ymm14[0,1,2,3],ymm15[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm14, %zmm16, %zmm14
; AVX512BW-NEXT:    vbroadcasti32x4 {{.*#+}} zmm15 = [7,15,23,31,7,15,23,31,7,15,23,31,7,15,23,31]
; AVX512BW-NEXT:    # zmm15 = mem[0,1,2,3,0,1,2,3,0,1,2,3,0,1,2,3]
; AVX512BW-NEXT:    vpermt2d %zmm7, %zmm15, %zmm6
; AVX512BW-NEXT:    vpermt2d %zmm5, %zmm15, %zmm2
; AVX512BW-NEXT:    vmovdqa64 %zmm6, %zmm2 {%k1}
; AVX512BW-NEXT:    vmovdqa {{.*#+}} ymm5 = <u,u,u,u,7,15,23,31>
; AVX512BW-NEXT:    vpermi2d %zmm4, %zmm3, %zmm5
; AVX512BW-NEXT:    vpermt2d %zmm1, %zmm15, %zmm0
; AVX512BW-NEXT:    vpblendd {{.*#+}} ymm0 = ymm0[0,1,2,3],ymm5[4,5,6,7]
; AVX512BW-NEXT:    vinserti64x4 $0, %ymm0, %zmm2, %zmm0
; AVX512BW-NEXT:    vmovdqa64 %zmm8, (%rsi)
; AVX512BW-NEXT:    vmovdqa64 %zmm9, (%rdx)
; AVX512BW-NEXT:    vmovdqa64 %zmm10, (%rcx)
; AVX512BW-NEXT:    vmovdqa64 %zmm11, (%r8)
; AVX512BW-NEXT:    vmovdqa64 %zmm12, (%r9)
; AVX512BW-NEXT:    vmovdqa64 %zmm13, (%r11)
; AVX512BW-NEXT:    vmovdqa64 %zmm14, (%r10)
; AVX512BW-NEXT:    vmovdqa64 %zmm0, (%rax)
; AVX512BW-NEXT:    vzeroupper
; AVX512BW-NEXT:    retq
  %wide.vec = load <128 x i32>, ptr %in.vec, align 64

  %strided.vec0 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 72, i32 80, i32 88, i32 96, i32 104, i32 112, i32 120>
  %strided.vec1 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 1, i32 9, i32 17, i32 25, i32 33, i32 41, i32 49, i32 57, i32 65, i32 73, i32 81, i32 89, i32 97, i32 105, i32 113, i32 121>
  %strided.vec2 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 2, i32 10, i32 18, i32 26, i32 34, i32 42, i32 50, i32 58, i32 66, i32 74, i32 82, i32 90, i32 98, i32 106, i32 114, i32 122>
  %strided.vec3 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 3, i32 11, i32 19, i32 27, i32 35, i32 43, i32 51, i32 59, i32 67, i32 75, i32 83, i32 91, i32 99, i32 107, i32 115, i32 123>
  %strided.vec4 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 4, i32 12, i32 20, i32 28, i32 36, i32 44, i32 52, i32 60, i32 68, i32 76, i32 84, i32 92, i32 100, i32 108, i32 116, i32 124>
  %strided.vec5 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 5, i32 13, i32 21, i32 29, i32 37, i32 45, i32 53, i32 61, i32 69, i32 77, i32 85, i32 93, i32 101, i32 109, i32 117, i32 125>
  %strided.vec6 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 6, i32 14, i32 22, i32 30, i32 38, i32 46, i32 54, i32 62, i32 70, i32 78, i32 86, i32 94, i32 102, i32 110, i32 118, i32 126>
  %strided.vec7 = shufflevector <128 x i32> %wide.vec, <128 x i32> poison, <16 x i32> <i32 7, i32 15, i32 23, i32 31, i32 39, i32 47, i32 55, i32 63, i32 71, i32 79, i32 87, i32 95, i32 103, i32 111, i32 119, i32 127>

  store <16 x i32> %strided.vec0, ptr %out.vec0, align 64
  store <16 x i32> %strided.vec1, ptr %out.vec1, align 64
  store <16 x i32> %strided.vec2, ptr %out.vec2, align 64
  store <16 x i32> %strided.vec3, ptr %out.vec3, align 64
  store <16 x i32> %strided.vec4, ptr %out.vec4, align 64
  store <16 x i32> %strided.vec5, ptr %out.vec5, align 64
  store <16 x i32> %strided.vec6, ptr %out.vec6, align 64
  store <16 x i32> %strided.vec7, ptr %out.vec7, align 64

  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; AVX: {{.*}}
; AVX1: {{.*}}
; AVX2: {{.*}}
; AVX2-FAST: {{.*}}
; AVX2-FAST-PERLANE: {{.*}}
; AVX2-SLOW: {{.*}}
; FALLBACK0: {{.*}}
; FALLBACK1: {{.*}}
; FALLBACK10: {{.*}}
; FALLBACK11: {{.*}}
; FALLBACK12: {{.*}}
; FALLBACK2: {{.*}}
; FALLBACK3: {{.*}}
; FALLBACK4: {{.*}}
; FALLBACK5: {{.*}}
; FALLBACK6: {{.*}}
; FALLBACK7: {{.*}}
; FALLBACK8: {{.*}}
; FALLBACK9: {{.*}}
