; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-- -mattr=-x87 | FileCheck %s --check-prefixes=X64
; RUN: llc < %s -mtriple=x86_64-- -mattr=-x87 -fast-isel -fast-isel-abort=1 | FileCheck %s --check-prefixes=X64,FASTISEL-X64
; RUN: llc < %s -mtriple=x86_64-- -mattr=-x87 -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes=GISEL-X64
; RUN: llc < %s -mtriple=i686-- -mattr=-x87 | FileCheck %s --check-prefixes=X86
; RUN: llc < %s -mtriple=i686-- -mattr=-x87 -fast-isel -fast-isel-abort=1 | FileCheck %s --check-prefixes=FASTISEL-X86
; RUN: llc < %s -mtriple=i686-- -mattr=-x87 -global-isel -global-isel-abort=1 | FileCheck %s --check-prefixes=GISEL-X86

define float @test_float_abs(float %arg) {
; SDAG-X64-LABEL: test_float_abs:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SDAG-X64-NEXT:    retq
;
; X86-LABEL: test_float_abs:
; X86:       # %bb.0:
; X86-NEXT:    movl $2147483647, %eax # imm = 0x7FFFFFFF
; X86-NEXT:    andl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    retl
; X64-LABEL: test_float_abs:
; X64:       # %bb.0:
; X64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_float_abs:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    movd %xmm0, %eax
; GISEL-X64-NEXT:    andl {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %eax
; GISEL-X64-NEXT:    movd %eax, %xmm0
; GISEL-X64-NEXT:    retq
;
; X86-LABEL: test_float_abs:
; X86:       # %bb.0:
; X86-NEXT:    movl $2147483647, %eax # imm = 0x7FFFFFFF
; X86-NEXT:    andl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    retl
;
; FASTISEL-X86-LABEL: test_float_abs:
; FASTISEL-X86:       # %bb.0:
; FASTISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; FASTISEL-X86-NEXT:    andl $2147483647, %eax # imm = 0x7FFFFFFF
; FASTISEL-X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_float_abs:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl $2147483647, %eax # imm = 0x7FFFFFFF
; GISEL-X86-NEXT:    andl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    retl
    %abs = tail call float @llvm.fabs.f32(float %arg)
    ret float %abs
}

define double @test_double_abs(double %arg) {
; SDAG-X64-LABEL: test_double_abs:
; SDAG-X64:       # %bb.0:
; SDAG-X64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; SDAG-X64-NEXT:    retq
;
; X86-LABEL: test_double_abs:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl $2147483647, %edx # imm = 0x7FFFFFFF
; X86-NEXT:    andl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    retl
; X64-LABEL: test_double_abs:
; X64:       # %bb.0:
; X64-NEXT:    andps {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %xmm0
; X64-NEXT:    retq
;
; GISEL-X64-LABEL: test_double_abs:
; GISEL-X64:       # %bb.0:
; GISEL-X64-NEXT:    movq %xmm0, %rax
; GISEL-X64-NEXT:    andq {{\.?LCPI[0-9]+_[0-9]+}}(%rip), %rax
; GISEL-X64-NEXT:    movq %rax, %xmm0
; GISEL-X64-NEXT:    retq
;
; X86-LABEL: test_double_abs:
; X86:       # %bb.0:
; X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X86-NEXT:    movl $2147483647, %edx # imm = 0x7FFFFFFF
; X86-NEXT:    andl {{[0-9]+}}(%esp), %edx
; X86-NEXT:    retl
;
; FASTISEL-X86-LABEL: test_double_abs:
; FASTISEL-X86:       # %bb.0:
; FASTISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %edx
; FASTISEL-X86-NEXT:    movl {{[0-9]+}}(%esp), %eax
; FASTISEL-X86-NEXT:    andl $2147483647, %edx # imm = 0x7FFFFFFF
; FASTISEL-X86-NEXT:    retl
;
; GISEL-X86-LABEL: test_double_abs:
; GISEL-X86:       # %bb.0:
; GISEL-X86-NEXT:    movl $-1, %eax
; GISEL-X86-NEXT:    movl $2147483647, %edx # imm = 0x7FFFFFFF
; GISEL-X86-NEXT:    andl {{[0-9]+}}(%esp), %eax
; GISEL-X86-NEXT:    andl {{[0-9]+}}(%esp), %edx
; GISEL-X86-NEXT:    retl

    %abs = tail call double @llvm.fabs.f64(double %arg)
    ret double %abs
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; FASTISEL-X64: {{.*}}
