; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=x86_64-unknown | FileCheck %s --check-prefixes=X64

; Test for https://github.com/llvm/llvm-project/issues/123239

define i1 @test_ult_trunc_add(i64 %x) {
; X64-LABEL: test_ult_trunc_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    shrq $48, %rdi
; X64-NEXT:    addl $-65522, %edi # imm = 0xFFFF000E
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    cmpl $3, %eax
; X64-NEXT:    setb %al
; X64-NEXT:    retq
entry:
  %add = add i64 %x, 3940649673949184
  %shr = lshr i64 %add, 48
  %conv = trunc i64 %shr to i32
  %res = icmp ult i32 %conv, 3
  ret i1 %res
}

define i1 @test_ult_add(i64 %x) {
; X64-LABEL: test_ult_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    shrq $48, %rdi
; X64-NEXT:    addl $-65522, %edi # imm = 0xFFFF000E
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    cmpl $3, %eax
; X64-NEXT:    setb %al
; X64-NEXT:    retq
entry:
    %0 = add i64 3940649673949184, %x
    %1 = icmp ult i64 %0, 844424930131968
    ret i1 %1
}

define i1 @test_ugt_trunc_add(i64 %x) {
; X64-LABEL: test_ugt_trunc_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    shrq $48, %rdi
; X64-NEXT:    addl $-65522, %edi # imm = 0xFFFF000E
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    cmpl $4, %eax
; X64-NEXT:    setae %al
; X64-NEXT:    retq
entry:
  %add = add i64 %x, 3940649673949184
  %shr = lshr i64 %add, 48
  %conv = trunc i64 %shr to i32
  %res = icmp ugt i32 %conv, 3
  ret i1 %res
}

define i1 @test_ugt_add(i64 %x) {
; X64-LABEL: test_ugt_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movabsq $3940649673949184, %rax # imm = 0xE000000000000
; X64-NEXT:    addq %rdi, %rax
; X64-NEXT:    movabsq $844424930131968, %rcx # imm = 0x3000000000000
; X64-NEXT:    cmpq %rcx, %rax
; X64-NEXT:    seta %al
; X64-NEXT:    retq
entry:
    %0 = add i64 3940649673949184, %x
    %1 = icmp ugt i64 %0, 844424930131968
    ret i1 %1
}

define i1 @test_eq_trunc_add(i64 %x) {
; X64-LABEL: test_eq_trunc_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    shrq $48, %rdi
; X64-NEXT:    cmpl $65525, %edi # imm = 0xFFF5
; X64-NEXT:    sete %al
; X64-NEXT:    retq
entry:
  %add = add i64 %x, 3940649673949184
  %shr = lshr i64 %add, 48
  %conv = trunc i64 %shr to i32
  %res = icmp eq i32 %conv, 3
  ret i1 %res
}

define i1 @test_eq_add(i64 %x) {
; X64-LABEL: test_eq_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movabsq $-3096224743817216, %rax # imm = 0xFFF5000000000000
; X64-NEXT:    cmpq %rax, %rdi
; X64-NEXT:    sete %al
; X64-NEXT:    retq
entry:
    %0 = add i64 3940649673949184, %x
    %1 = icmp eq i64 %0, 844424930131968
    ret i1 %1
}

define i1 @test_ne_trunc_add(i64 %x) {
; X64-LABEL: test_ne_trunc_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    shrq $48, %rdi
; X64-NEXT:    cmpl $65525, %edi # imm = 0xFFF5
; X64-NEXT:    setne %al
; X64-NEXT:    retq
entry:
  %add = add i64 %x, 3940649673949184
  %shr = lshr i64 %add, 48
  %conv = trunc i64 %shr to i32
  %res = icmp ne i32 %conv, 3
  ret i1 %res
}

define i1 @test_ne_add(i64 %x) {
; X64-LABEL: test_ne_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    movabsq $-3096224743817216, %rax # imm = 0xFFF5000000000000
; X64-NEXT:    cmpq %rax, %rdi
; X64-NEXT:    setne %al
; X64-NEXT:    retq
entry:
    %0 = add i64 3940649673949184, %x
    %1 = icmp ne i64 %0, 844424930131968
    ret i1 %1
}

define i32 @test_trunc_add(i64 %x) {
; X64-LABEL: test_trunc_add:
; X64:       # %bb.0: # %entry
; X64-NEXT:    shrq $48, %rdi
; X64-NEXT:    addl $-65522, %edi # imm = 0xFFFF000E
; X64-NEXT:    movzwl %di, %eax
; X64-NEXT:    retq
entry:
  %add = add i64 %x, 3940649673949184
  %shr = lshr i64 %add, 48
  %conv = trunc i64 %shr to i32
  ret i32 %conv
}
