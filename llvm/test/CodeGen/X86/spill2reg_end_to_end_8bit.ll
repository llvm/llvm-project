; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc %s -o - -mtriple=x86_64-unknown-linux -enable-spill2reg -mattr=+sse4.1 | FileCheck %s
; RUN: llc %s -o - -mtriple=x86_64-unknown-linux -enable-spill2reg -mattr=+avx | FileCheck --check-prefix=AVX %s

; End-to-end check that Spill2Reg works with 8-bit registers.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@D0 = dso_local local_unnamed_addr global i8 0, align 4
@D1 = dso_local local_unnamed_addr global i8 0, align 4
@D2 = dso_local local_unnamed_addr global i8 0, align 4
@D3 = dso_local local_unnamed_addr global i8 0, align 4
@D4 = dso_local local_unnamed_addr global i8 0, align 4
@D5 = dso_local local_unnamed_addr global i8 0, align 4
@D6 = dso_local local_unnamed_addr global i8 0, align 4
@D7 = dso_local local_unnamed_addr global i8 0, align 4
@D8 = dso_local local_unnamed_addr global i8 0, align 4
@D9 = dso_local local_unnamed_addr global i8 0, align 4
@D10 = dso_local local_unnamed_addr global i8 0, align 4
@D11 = dso_local local_unnamed_addr global i8 0, align 4
@D12 = dso_local local_unnamed_addr global i8 0, align 4
@D13 = dso_local local_unnamed_addr global i8 0, align 4
@D14 = dso_local local_unnamed_addr global i8 0, align 4
@D15 = dso_local local_unnamed_addr global i8 0, align 4
@D16 = dso_local local_unnamed_addr global i8 0, align 4
@D17 = dso_local local_unnamed_addr global i8 0, align 4
@D18 = dso_local local_unnamed_addr global i8 0, align 4
@U0 = dso_local local_unnamed_addr global i8 0, align 4
@U1 = dso_local local_unnamed_addr global i8 0, align 4
@U2 = dso_local local_unnamed_addr global i8 0, align 4
@U3 = dso_local local_unnamed_addr global i8 0, align 4
@U4 = dso_local local_unnamed_addr global i8 0, align 4
@U5 = dso_local local_unnamed_addr global i8 0, align 4
@U6 = dso_local local_unnamed_addr global i8 0, align 4
@U7 = dso_local local_unnamed_addr global i8 0, align 4
@U8 = dso_local local_unnamed_addr global i8 0, align 4
@U9 = dso_local local_unnamed_addr global i8 0, align 4
@U10 = dso_local local_unnamed_addr global i8 0, align 4
@U11 = dso_local local_unnamed_addr global i8 0, align 4
@U12 = dso_local local_unnamed_addr global i8 0, align 4
@U13 = dso_local local_unnamed_addr global i8 0, align 4
@U14 = dso_local local_unnamed_addr global i8 0, align 4
@U15 = dso_local local_unnamed_addr global i8 0, align 4
@U16 = dso_local local_unnamed_addr global i8 0, align 4
@U17 = dso_local local_unnamed_addr global i8 0, align 4
@U18 = dso_local local_unnamed_addr global i8 0, align 4

; Function Attrs: mustprogress noinline nounwind uwtable
define dso_local void @_Z5spillv() local_unnamed_addr #0 {
; CHECK-LABEL: _Z5spillv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pushq %rbp
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    pushq %r15
; CHECK-NEXT:    .cfi_def_cfa_offset 24
; CHECK-NEXT:    pushq %r14
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    pushq %r13
; CHECK-NEXT:    .cfi_def_cfa_offset 40
; CHECK-NEXT:    pushq %r12
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    pushq %rbx
; CHECK-NEXT:    .cfi_def_cfa_offset 56
; CHECK-NEXT:    .cfi_offset %rbx, -56
; CHECK-NEXT:    .cfi_offset %r12, -48
; CHECK-NEXT:    .cfi_offset %r13, -40
; CHECK-NEXT:    .cfi_offset %r14, -32
; CHECK-NEXT:    .cfi_offset %r15, -24
; CHECK-NEXT:    .cfi_offset %rbp, -16
; CHECK-NEXT:    movb D0(%rip), %al
; CHECK-NEXT:    movb %al, {{[-0-9]+}}(%r{{[sb]}}p) # 1-byte Spill
; CHECK-NEXT:    movzbl D1(%rip), %ecx
; CHECK-NEXT:    movzbl D2(%rip), %edx
; CHECK-NEXT:    movzbl D3(%rip), %esi
; CHECK-NEXT:    movzbl D4(%rip), %edi
; CHECK-NEXT:    movzbl D5(%rip), %r8d
; CHECK-NEXT:    movzbl D6(%rip), %r9d
; CHECK-NEXT:    movzbl D7(%rip), %r10d
; CHECK-NEXT:    movzbl D8(%rip), %r11d
; CHECK-NEXT:    movzbl D9(%rip), %ebx
; CHECK-NEXT:    movzbl D10(%rip), %ebp
; CHECK-NEXT:    movzbl D11(%rip), %r14d
; CHECK-NEXT:    movzbl D12(%rip), %r15d
; CHECK-NEXT:    movzbl D13(%rip), %r12d
; CHECK-NEXT:    movzbl D14(%rip), %r13d
; CHECK-NEXT:    movb D15(%rip), %al
; CHECK-NEXT:    movd %eax, %xmm0
; CHECK-NEXT:    movb D16(%rip), %al
; CHECK-NEXT:    movb %al, {{[-0-9]+}}(%r{{[sb]}}p) # 1-byte Spill
; CHECK-NEXT:    movb D17(%rip), %al
; CHECK-NEXT:    movd %eax, %xmm1
; CHECK-NEXT:    movzbl D18(%rip), %eax
; CHECK-NEXT:    movb %al, {{[-0-9]+}}(%r{{[sb]}}p) # 1-byte Spill
; CHECK-NEXT:    #APP
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    movzbl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 1-byte Folded Reload
; CHECK-NEXT:    movb %al, U0(%rip)
; CHECK-NEXT:    movb %cl, U1(%rip)
; CHECK-NEXT:    movb %dl, U2(%rip)
; CHECK-NEXT:    movb %sil, U3(%rip)
; CHECK-NEXT:    movb %dil, U4(%rip)
; CHECK-NEXT:    movb %r8b, U5(%rip)
; CHECK-NEXT:    movb %r9b, U6(%rip)
; CHECK-NEXT:    movb %r10b, U7(%rip)
; CHECK-NEXT:    movb %r11b, U8(%rip)
; CHECK-NEXT:    movb %bl, U9(%rip)
; CHECK-NEXT:    movb %bpl, U10(%rip)
; CHECK-NEXT:    movb %r14b, U11(%rip)
; CHECK-NEXT:    movb %r15b, U12(%rip)
; CHECK-NEXT:    movb %r12b, U13(%rip)
; CHECK-NEXT:    movb %r13b, U14(%rip)
; CHECK-NEXT:    movd %xmm0, %eax
; CHECK-NEXT:    movb %al, U15(%rip)
; CHECK-NEXT:    movzbl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 1-byte Folded Reload
; CHECK-NEXT:    movb %al, U16(%rip)
; CHECK-NEXT:    movd %xmm1, %eax
; CHECK-NEXT:    movb %al, U17(%rip)
; CHECK-NEXT:    movzbl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 1-byte Folded Reload
; CHECK-NEXT:    movb %al, U18(%rip)
; CHECK-NEXT:    popq %rbx
; CHECK-NEXT:    .cfi_def_cfa_offset 48
; CHECK-NEXT:    popq %r12
; CHECK-NEXT:    .cfi_def_cfa_offset 40
; CHECK-NEXT:    popq %r13
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    popq %r14
; CHECK-NEXT:    .cfi_def_cfa_offset 24
; CHECK-NEXT:    popq %r15
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    popq %rbp
; CHECK-NEXT:    .cfi_def_cfa_offset 8
; CHECK-NEXT:    retq
;
; AVX-LABEL: _Z5spillv:
; AVX:       # %bb.0: # %entry
; AVX-NEXT:    pushq %rbp
; AVX-NEXT:    .cfi_def_cfa_offset 16
; AVX-NEXT:    pushq %r15
; AVX-NEXT:    .cfi_def_cfa_offset 24
; AVX-NEXT:    pushq %r14
; AVX-NEXT:    .cfi_def_cfa_offset 32
; AVX-NEXT:    pushq %r13
; AVX-NEXT:    .cfi_def_cfa_offset 40
; AVX-NEXT:    pushq %r12
; AVX-NEXT:    .cfi_def_cfa_offset 48
; AVX-NEXT:    pushq %rbx
; AVX-NEXT:    .cfi_def_cfa_offset 56
; AVX-NEXT:    .cfi_offset %rbx, -56
; AVX-NEXT:    .cfi_offset %r12, -48
; AVX-NEXT:    .cfi_offset %r13, -40
; AVX-NEXT:    .cfi_offset %r14, -32
; AVX-NEXT:    .cfi_offset %r15, -24
; AVX-NEXT:    .cfi_offset %rbp, -16
; AVX-NEXT:    movb D0(%rip), %al
; AVX-NEXT:    movb %al, {{[-0-9]+}}(%r{{[sb]}}p) # 1-byte Spill
; AVX-NEXT:    movzbl D1(%rip), %ecx
; AVX-NEXT:    movzbl D2(%rip), %edx
; AVX-NEXT:    movzbl D3(%rip), %esi
; AVX-NEXT:    movzbl D4(%rip), %edi
; AVX-NEXT:    movzbl D5(%rip), %r8d
; AVX-NEXT:    movzbl D6(%rip), %r9d
; AVX-NEXT:    movzbl D7(%rip), %r10d
; AVX-NEXT:    movzbl D8(%rip), %r11d
; AVX-NEXT:    movzbl D9(%rip), %ebx
; AVX-NEXT:    movzbl D10(%rip), %ebp
; AVX-NEXT:    movzbl D11(%rip), %r14d
; AVX-NEXT:    movzbl D12(%rip), %r15d
; AVX-NEXT:    movzbl D13(%rip), %r12d
; AVX-NEXT:    movzbl D14(%rip), %r13d
; AVX-NEXT:    movb D15(%rip), %al
; AVX-NEXT:    vmovd %eax, %xmm0
; AVX-NEXT:    movb D16(%rip), %al
; AVX-NEXT:    movb %al, {{[-0-9]+}}(%r{{[sb]}}p) # 1-byte Spill
; AVX-NEXT:    movb D17(%rip), %al
; AVX-NEXT:    vmovd %eax, %xmm1
; AVX-NEXT:    movzbl D18(%rip), %eax
; AVX-NEXT:    movb %al, {{[-0-9]+}}(%r{{[sb]}}p) # 1-byte Spill
; AVX-NEXT:    #APP
; AVX-NEXT:    #NO_APP
; AVX-NEXT:    movzbl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 1-byte Folded Reload
; AVX-NEXT:    movb %al, U0(%rip)
; AVX-NEXT:    movb %cl, U1(%rip)
; AVX-NEXT:    movb %dl, U2(%rip)
; AVX-NEXT:    movb %sil, U3(%rip)
; AVX-NEXT:    movb %dil, U4(%rip)
; AVX-NEXT:    movb %r8b, U5(%rip)
; AVX-NEXT:    movb %r9b, U6(%rip)
; AVX-NEXT:    movb %r10b, U7(%rip)
; AVX-NEXT:    movb %r11b, U8(%rip)
; AVX-NEXT:    movb %bl, U9(%rip)
; AVX-NEXT:    movb %bpl, U10(%rip)
; AVX-NEXT:    movb %r14b, U11(%rip)
; AVX-NEXT:    movb %r15b, U12(%rip)
; AVX-NEXT:    movb %r12b, U13(%rip)
; AVX-NEXT:    movb %r13b, U14(%rip)
; AVX-NEXT:    vmovd %xmm0, %eax
; AVX-NEXT:    movb %al, U15(%rip)
; AVX-NEXT:    movzbl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 1-byte Folded Reload
; AVX-NEXT:    movb %al, U16(%rip)
; AVX-NEXT:    vmovd %xmm1, %eax
; AVX-NEXT:    movb %al, U17(%rip)
; AVX-NEXT:    movzbl {{[-0-9]+}}(%r{{[sb]}}p), %eax # 1-byte Folded Reload
; AVX-NEXT:    movb %al, U18(%rip)
; AVX-NEXT:    popq %rbx
; AVX-NEXT:    .cfi_def_cfa_offset 48
; AVX-NEXT:    popq %r12
; AVX-NEXT:    .cfi_def_cfa_offset 40
; AVX-NEXT:    popq %r13
; AVX-NEXT:    .cfi_def_cfa_offset 32
; AVX-NEXT:    popq %r14
; AVX-NEXT:    .cfi_def_cfa_offset 24
; AVX-NEXT:    popq %r15
; AVX-NEXT:    .cfi_def_cfa_offset 16
; AVX-NEXT:    popq %rbp
; AVX-NEXT:    .cfi_def_cfa_offset 8
; AVX-NEXT:    retq
entry:
  %0 = load i8, i8* @D0
  %1 = load i8, i8* @D1
  %2 = load i8, i8* @D2
  %3 = load i8, i8* @D3
  %4 = load i8, i8* @D4
  %5 = load i8, i8* @D5
  %6 = load i8, i8* @D6
  %7 = load i8, i8* @D7
  %8 = load i8, i8* @D8
  %9 = load i8, i8* @D9
  %10 = load i8, i8* @D10
  %11 = load i8, i8* @D11
  %12 = load i8, i8* @D12
  %13 = load i8, i8* @D13
  %14 = load i8, i8* @D14
  %15 = load i8, i8* @D15
  %16 = load i8, i8* @D16
  %17 = load i8, i8* @D17
  %18 = load i8, i8* @D18
  call void asm sideeffect "", "~{memory}"() #1
  store i8 %0, i8* @U0
  store i8 %1, i8* @U1
  store i8 %2, i8* @U2
  store i8 %3, i8* @U3
  store i8 %4, i8* @U4
  store i8 %5, i8* @U5
  store i8 %6, i8* @U6
  store i8 %7, i8* @U7
  store i8 %8, i8* @U8
  store i8 %9, i8* @U9
  store i8 %10, i8* @U10
  store i8 %11, i8* @U11
  store i8 %12, i8* @U12
  store i8 %13, i8* @U13
  store i8 %14, i8* @U14
  store i8 %15, i8* @U15
  store i8 %16, i8* @U16
  store i8 %17, i8* @U17
  store i8 %18, i8* @U18
  ret void
}

attributes #0 = { mustprogress noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
