; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=i686-unknown-linux-gnu | FileCheck %s

define half @maximum_half(half %x, half %y) nounwind {
; CHECK-LABEL: maximum_half:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %esi
; CHECK-NEXT:    subl $24, %esp
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %esi
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    movl %eax, (%esp)
; CHECK-NEXT:    calll __extendhfsf2
; CHECK-NEXT:    fsts {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; CHECK-NEXT:    movl %esi, (%esp)
; CHECK-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-NEXT:    calll __extendhfsf2
; CHECK-NEXT:    flds {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Reload
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fsts {{[0-9]+}}(%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:    ja .LBB0_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; CHECK-NEXT:    jp .LBB0_4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB0_4:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    je .LBB0_6
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB0_6:
; CHECK-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    je .LBB0_8
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    fstp %st(2)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:  .LBB0_8:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    jne .LBB0_9
; CHECK-NEXT:  # %bb.10:
; CHECK-NEXT:    jp .LBB0_13
; CHECK-NEXT:  # %bb.11:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    jmp .LBB0_12
; CHECK-NEXT:  .LBB0_9:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:  .LBB0_12:
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB0_13:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fstps (%esp)
; CHECK-NEXT:    calll __truncsfhf2
; CHECK-NEXT:    addl $24, %esp
; CHECK-NEXT:    popl %esi
; CHECK-NEXT:    retl
  %res = call half @llvm.maximum.f16(half %x, half %y)
  ret half %res
}

define float @maximum_float(float %x, float %y) nounwind {
; CHECK-LABEL: maximum_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subl $8, %esp
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    fsts (%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fsts {{[0-9]+}}(%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:    ja .LBB1_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; CHECK-NEXT:    jp .LBB1_4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB1_4:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    cmpl $0, (%esp)
; CHECK-NEXT:    je .LBB1_6
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB1_6:
; CHECK-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    je .LBB1_8
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    fstp %st(2)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:  .LBB1_8:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    jne .LBB1_9
; CHECK-NEXT:  # %bb.10:
; CHECK-NEXT:    jp .LBB1_13
; CHECK-NEXT:  # %bb.11:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    jmp .LBB1_12
; CHECK-NEXT:  .LBB1_9:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:  .LBB1_12:
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB1_13:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    addl $8, %esp
; CHECK-NEXT:    retl
  %res = call float @llvm.maximum.f32(float %x, float %y)
  ret float %res
}

define double @maximum_double(double %x, double %y) nounwind {
; CHECK-LABEL: maximum_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subl $20, %esp
; CHECK-NEXT:    fldl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fldl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fstl (%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:    ja .LBB2_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; CHECK-NEXT:    jp .LBB2_4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB2_4:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    cmpb $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    je .LBB2_6
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB2_6:
; CHECK-NEXT:    cmpb $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    je .LBB2_8
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    fstp %st(2)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:  .LBB2_8:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    jne .LBB2_9
; CHECK-NEXT:  # %bb.10:
; CHECK-NEXT:    jp .LBB2_13
; CHECK-NEXT:  # %bb.11:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    jmp .LBB2_12
; CHECK-NEXT:  .LBB2_9:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:  .LBB2_12:
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:  .LBB2_13:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    addl $20, %esp
; CHECK-NEXT:    retl
  %res = call double @llvm.maximum.f64(double %x, double %y)
  ret double %res
}

define fp128 @maximum_fp128(fp128 %x, fp128 %y) nounwind {
; CHECK-LABEL: maximum_fp128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %edi
; CHECK-NEXT:    pushl %esi
; CHECK-NEXT:    subl $20, %esp
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-NEXT:    subl $12, %esp
; CHECK-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl %eax
; CHECK-NEXT:    calll fmaximumf128
; CHECK-NEXT:    addl $44, %esp
; CHECK-NEXT:    movl (%esp), %eax
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edi
; CHECK-NEXT:    movl %edi, 12(%esi)
; CHECK-NEXT:    movl %edx, 8(%esi)
; CHECK-NEXT:    movl %ecx, 4(%esi)
; CHECK-NEXT:    movl %eax, (%esi)
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    addl $20, %esp
; CHECK-NEXT:    popl %esi
; CHECK-NEXT:    popl %edi
; CHECK-NEXT:    retl $4
  %res = call fp128 @llvm.maximum.f128(fp128 %x, fp128 %y)
  ret fp128 %res
}

define half @minimum_half(half %x, half %y) nounwind {
; CHECK-LABEL: minimum_half:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %esi
; CHECK-NEXT:    subl $24, %esp
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %esi
; CHECK-NEXT:    movzwl {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    movl %eax, (%esp)
; CHECK-NEXT:    calll __extendhfsf2
; CHECK-NEXT:    fsts {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Spill
; CHECK-NEXT:    movl %esi, (%esp)
; CHECK-NEXT:    fstps {{[0-9]+}}(%esp)
; CHECK-NEXT:    calll __extendhfsf2
; CHECK-NEXT:    flds {{[-0-9]+}}(%e{{[sb]}}p) # 4-byte Folded Reload
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fsts {{[0-9]+}}(%esp)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:    ja .LBB4_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:  .LBB4_2:
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; CHECK-NEXT:    jp .LBB4_4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(3)
; CHECK-NEXT:  .LBB4_4:
; CHECK-NEXT:    fstp %st(3)
; CHECK-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    jne .LBB4_6
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:  .LBB4_6:
; CHECK-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    jne .LBB4_8
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fldz
; CHECK-NEXT:  .LBB4_8:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:    fucom %st(2)
; CHECK-NEXT:    fstp %st(2)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    jne .LBB4_9
; CHECK-NEXT:  # %bb.10:
; CHECK-NEXT:    jp .LBB4_13
; CHECK-NEXT:  # %bb.11:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    jmp .LBB4_12
; CHECK-NEXT:  .LBB4_9:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:  .LBB4_12:
; CHECK-NEXT:    fldz
; CHECK-NEXT:  .LBB4_13:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fstps (%esp)
; CHECK-NEXT:    calll __truncsfhf2
; CHECK-NEXT:    addl $24, %esp
; CHECK-NEXT:    popl %esi
; CHECK-NEXT:    retl
  %res = call half @llvm.minimum.f16(half %x, half %y)
  ret half %res
}

define float @minimum_float(float %x, float %y) nounwind {
; CHECK-LABEL: minimum_float:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subl $8, %esp
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    flds {{[0-9]+}}(%esp)
; CHECK-NEXT:    fsts (%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fsts {{[0-9]+}}(%esp)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:    ja .LBB5_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:  .LBB5_2:
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; CHECK-NEXT:    jp .LBB5_4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(3)
; CHECK-NEXT:  .LBB5_4:
; CHECK-NEXT:    fstp %st(3)
; CHECK-NEXT:    cmpl $0, (%esp)
; CHECK-NEXT:    jne .LBB5_6
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:  .LBB5_6:
; CHECK-NEXT:    cmpl $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    jne .LBB5_8
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fldz
; CHECK-NEXT:  .LBB5_8:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:    fucom %st(2)
; CHECK-NEXT:    fstp %st(2)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    jne .LBB5_9
; CHECK-NEXT:  # %bb.10:
; CHECK-NEXT:    jp .LBB5_13
; CHECK-NEXT:  # %bb.11:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    jmp .LBB5_12
; CHECK-NEXT:  .LBB5_9:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:  .LBB5_12:
; CHECK-NEXT:    fldz
; CHECK-NEXT:  .LBB5_13:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    addl $8, %esp
; CHECK-NEXT:    retl
  %res = call float @llvm.minimum.f32(float %x, float %y)
  ret float %res
}

define double @minimum_double(double %x, double %y) nounwind {
; CHECK-LABEL: minimum_double:
; CHECK:       # %bb.0:
; CHECK-NEXT:    subl $20, %esp
; CHECK-NEXT:    fldl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fldl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fstl {{[0-9]+}}(%esp)
; CHECK-NEXT:    fxch %st(1)
; CHECK-NEXT:    fstl (%esp)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:    ja .LBB6_2
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(0)
; CHECK-NEXT:  .LBB6_2:
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:    fucom %st(1)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    flds {{\.?LCPI[0-9]+_[0-9]+}}
; CHECK-NEXT:    jp .LBB6_4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(3)
; CHECK-NEXT:  .LBB6_4:
; CHECK-NEXT:    fstp %st(3)
; CHECK-NEXT:    cmpb $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    jne .LBB6_6
; CHECK-NEXT:  # %bb.5:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fld %st(1)
; CHECK-NEXT:  .LBB6_6:
; CHECK-NEXT:    cmpb $0, {{[0-9]+}}(%esp)
; CHECK-NEXT:    jne .LBB6_8
; CHECK-NEXT:  # %bb.7:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    fldz
; CHECK-NEXT:  .LBB6_8:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    fldz
; CHECK-NEXT:    fxch %st(2)
; CHECK-NEXT:    fucom %st(2)
; CHECK-NEXT:    fstp %st(2)
; CHECK-NEXT:    fnstsw %ax
; CHECK-NEXT:    # kill: def $ah killed $ah killed $ax
; CHECK-NEXT:    sahf
; CHECK-NEXT:    jne .LBB6_9
; CHECK-NEXT:  # %bb.10:
; CHECK-NEXT:    jp .LBB6_13
; CHECK-NEXT:  # %bb.11:
; CHECK-NEXT:    fstp %st(1)
; CHECK-NEXT:    jmp .LBB6_12
; CHECK-NEXT:  .LBB6_9:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:  .LBB6_12:
; CHECK-NEXT:    fldz
; CHECK-NEXT:  .LBB6_13:
; CHECK-NEXT:    fstp %st(0)
; CHECK-NEXT:    addl $20, %esp
; CHECK-NEXT:    retl
  %res = call double @llvm.minimum.f64(double %x, double %y)
  ret double %res
}

define fp128 @minimum_fp128(fp128 %x, fp128 %y) nounwind {
; CHECK-LABEL: minimum_fp128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %edi
; CHECK-NEXT:    pushl %esi
; CHECK-NEXT:    subl $20, %esp
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-NEXT:    subl $12, %esp
; CHECK-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl %eax
; CHECK-NEXT:    calll fminimumf128
; CHECK-NEXT:    addl $44, %esp
; CHECK-NEXT:    movl (%esp), %eax
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edi
; CHECK-NEXT:    movl %edi, 12(%esi)
; CHECK-NEXT:    movl %edx, 8(%esi)
; CHECK-NEXT:    movl %ecx, 4(%esi)
; CHECK-NEXT:    movl %eax, (%esi)
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    addl $20, %esp
; CHECK-NEXT:    popl %esi
; CHECK-NEXT:    popl %edi
; CHECK-NEXT:    retl $4
  %res = call fp128 @llvm.minimum.f128(fp128 %x, fp128 %y)
  ret fp128 %res
}

define fp128 @maximumnum_fp128(fp128 %x, fp128 %y) nounwind {
; CHECK-LABEL: maximumnum_fp128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %edi
; CHECK-NEXT:    pushl %esi
; CHECK-NEXT:    subl $20, %esp
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-NEXT:    subl $12, %esp
; CHECK-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl %eax
; CHECK-NEXT:    calll fmaximum_numf128
; CHECK-NEXT:    addl $44, %esp
; CHECK-NEXT:    movl (%esp), %eax
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edi
; CHECK-NEXT:    movl %edi, 12(%esi)
; CHECK-NEXT:    movl %edx, 8(%esi)
; CHECK-NEXT:    movl %ecx, 4(%esi)
; CHECK-NEXT:    movl %eax, (%esi)
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    addl $20, %esp
; CHECK-NEXT:    popl %esi
; CHECK-NEXT:    popl %edi
; CHECK-NEXT:    retl $4
  %res = call fp128 @llvm.maximumnum.f128(fp128 %x, fp128 %y)
  ret fp128 %res
}

define fp128 @minimumnum_fp128(fp128 %x, fp128 %y) nounwind {
; CHECK-LABEL: minimumnum_fp128:
; CHECK:       # %bb.0:
; CHECK-NEXT:    pushl %edi
; CHECK-NEXT:    pushl %esi
; CHECK-NEXT:    subl $20, %esp
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %esi
; CHECK-NEXT:    subl $12, %esp
; CHECK-NEXT:    leal {{[0-9]+}}(%esp), %eax
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl {{[0-9]+}}(%esp)
; CHECK-NEXT:    pushl %eax
; CHECK-NEXT:    calll fminimum_numf128
; CHECK-NEXT:    addl $44, %esp
; CHECK-NEXT:    movl (%esp), %eax
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %ecx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edx
; CHECK-NEXT:    movl {{[0-9]+}}(%esp), %edi
; CHECK-NEXT:    movl %edi, 12(%esi)
; CHECK-NEXT:    movl %edx, 8(%esi)
; CHECK-NEXT:    movl %ecx, 4(%esi)
; CHECK-NEXT:    movl %eax, (%esi)
; CHECK-NEXT:    movl %esi, %eax
; CHECK-NEXT:    addl $20, %esp
; CHECK-NEXT:    popl %esi
; CHECK-NEXT:    popl %edi
; CHECK-NEXT:    retl $4
  %res = call fp128 @llvm.minimumnum.f128(fp128 %x, fp128 %y)
  ret fp128 %res
}
