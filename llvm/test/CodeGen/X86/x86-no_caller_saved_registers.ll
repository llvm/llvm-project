; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=x86_64-unknown-unknown < %s | FileCheck %s --check-prefix=UNKNWOWN
; RUN: llc -mtriple=x86_64-unknown-unknown -O0 < %s | FileCheck %s --check-prefix=UNKNWOWN0
; RUN: llc -mtriple=i686-unknown-unknown -mattr=+sse2 < %s | FileCheck %s --check-prefix=UNKNWOWN-32
; RUN: llc -mtriple=i686-unknown-unknown -mattr=+sse2 -O0 < %s | FileCheck %s --check-prefix=UNKNWOWN-32-0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; In functions with 'no_caller_saved_registers' attribute, all registers should
;; be preserved except for registers used for passing/returning arguments.
;; The test checks that function "bar" preserves xmm0 register.
;; It also checks that caller function "foo" does not store registers for callee
;; "bar". For example, there is no store/load/access to xmm registers.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define i32 @bar(i32 %a0, i32 %a1, i32 %a2, i32 %a3, i32 %a4, i32 %a5, i32 %a6, i32 %a7, i32 %a8) #0 {
; CHECK-LABEL: bar
; CHECK:       mov{{.*}}  %xmm0
; CHECK:       mov{{.*}} {{.*}}, %xmm0
; CHECK:       ret
; UNKNWOWN-LABEL: bar:
; UNKNWOWN:       # %bb.0:
; UNKNWOWN-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; UNKNWOWN-NEXT:    #APP
; UNKNWOWN-NEXT:    #NO_APP
; UNKNWOWN-NEXT:    movl $1, %eax
; UNKNWOWN-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; UNKNWOWN-NEXT:    retq
;
; UNKNWOWN0-LABEL: bar:
; UNKNWOWN0:       # %bb.0:
; UNKNWOWN0-NEXT:    pushq %rax
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN0-NEXT:    movaps %xmm0, {{[-0-9]+}}(%r{{[sb]}}p) # 16-byte Spill
; UNKNWOWN0-NEXT:    .cfi_offset %xmm0, -32
; UNKNWOWN0-NEXT:    .cfi_offset %rax, -16
; UNKNWOWN0-NEXT:    #APP
; UNKNWOWN0-NEXT:    #NO_APP
; UNKNWOWN0-NEXT:    movl $1, %eax
; UNKNWOWN0-NEXT:    movaps {{[-0-9]+}}(%r{{[sb]}}p), %xmm0 # 16-byte Reload
; UNKNWOWN0-NEXT:    popq %rax
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN0-NEXT:    retq
;
; UNKNWOWN-32-LABEL: bar:
; UNKNWOWN-32:       # %bb.0:
; UNKNWOWN-32-NEXT:    subl $28, %esp
; UNKNWOWN-32-NEXT:    movups %xmm0, (%esp) # 16-byte Spill
; UNKNWOWN-32-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN-32-NEXT:    .cfi_offset %xmm0, -32
; UNKNWOWN-32-NEXT:    #APP
; UNKNWOWN-32-NEXT:    #NO_APP
; UNKNWOWN-32-NEXT:    movl $1, %eax
; UNKNWOWN-32-NEXT:    movups (%esp), %xmm0 # 16-byte Reload
; UNKNWOWN-32-NEXT:    addl $28, %esp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa_offset 4
; UNKNWOWN-32-NEXT:    retl
;
; UNKNWOWN-32-0-LABEL: bar:
; UNKNWOWN-32-0:       # %bb.0:
; UNKNWOWN-32-0-NEXT:    pushl %eax
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-32-0-NEXT:    subl $24, %esp
; UNKNWOWN-32-0-NEXT:    movups %xmm0, (%esp) # 16-byte Spill
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN-32-0-NEXT:    .cfi_offset %eax, -8
; UNKNWOWN-32-0-NEXT:    .cfi_offset %xmm0, -32
; UNKNWOWN-32-0-NEXT:    #APP
; UNKNWOWN-32-0-NEXT:    #NO_APP
; UNKNWOWN-32-0-NEXT:    movl $1, %eax
; UNKNWOWN-32-0-NEXT:    movups (%esp), %xmm0 # 16-byte Reload
; UNKNWOWN-32-0-NEXT:    addl $24, %esp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-32-0-NEXT:    popl %eax
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_offset 4
; UNKNWOWN-32-0-NEXT:    retl
  call void asm sideeffect "", "~{xmm0}"()
  ret i32 1
}

define x86_intrcc void @foo(ptr byval(i8) nocapture readnone %c) {
; CHECK-LABEL: foo
; CHECK-NOT: xmm
; UNKNWOWN-LABEL: foo:
; UNKNWOWN:       # %bb.0: # %entry
; UNKNWOWN-NEXT:    pushq %rax
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN-NEXT:    pushq %r9
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN-NEXT:    pushq %r8
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN-NEXT:    pushq %rdi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN-NEXT:    pushq %rsi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN-NEXT:    pushq %rdx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN-NEXT:    pushq %rcx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 64
; UNKNWOWN-NEXT:    .cfi_offset %rcx, -64
; UNKNWOWN-NEXT:    .cfi_offset %rdx, -56
; UNKNWOWN-NEXT:    .cfi_offset %rsi, -48
; UNKNWOWN-NEXT:    .cfi_offset %rdi, -40
; UNKNWOWN-NEXT:    .cfi_offset %r8, -32
; UNKNWOWN-NEXT:    .cfi_offset %r9, -24
; UNKNWOWN-NEXT:    .cfi_offset %rax, -16
; UNKNWOWN-NEXT:    cld
; UNKNWOWN-NEXT:    subq $8, %rsp
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    xorl %edi, %edi
; UNKNWOWN-NEXT:    movl $1, %esi
; UNKNWOWN-NEXT:    movl $2, %edx
; UNKNWOWN-NEXT:    movl $3, %ecx
; UNKNWOWN-NEXT:    movl $4, %r8d
; UNKNWOWN-NEXT:    movl $5, %r9d
; UNKNWOWN-NEXT:    pushq $8
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    pushq $7
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    pushq $6
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    callq bar@PLT
; UNKNWOWN-NEXT:    addq $32, %rsp
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset -32
; UNKNWOWN-NEXT:    popq %rcx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN-NEXT:    popq %rdx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN-NEXT:    popq %rsi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN-NEXT:    popq %rdi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN-NEXT:    popq %r8
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN-NEXT:    popq %r9
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN-NEXT:    popq %rax
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-NEXT:    iretq
;
; UNKNWOWN0-LABEL: foo:
; UNKNWOWN0:       # %bb.0: # %entry
; UNKNWOWN0-NEXT:    pushq %rax
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN0-NEXT:    pushq %r9
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN0-NEXT:    pushq %r8
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN0-NEXT:    pushq %rdi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN0-NEXT:    pushq %rsi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN0-NEXT:    pushq %rdx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN0-NEXT:    pushq %rcx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 64
; UNKNWOWN0-NEXT:    subq $32, %rsp
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 96
; UNKNWOWN0-NEXT:    .cfi_offset %rcx, -64
; UNKNWOWN0-NEXT:    .cfi_offset %rdx, -56
; UNKNWOWN0-NEXT:    .cfi_offset %rsi, -48
; UNKNWOWN0-NEXT:    .cfi_offset %rdi, -40
; UNKNWOWN0-NEXT:    .cfi_offset %r8, -32
; UNKNWOWN0-NEXT:    .cfi_offset %r9, -24
; UNKNWOWN0-NEXT:    .cfi_offset %rax, -16
; UNKNWOWN0-NEXT:    cld
; UNKNWOWN0-NEXT:    movq %rsp, %rax
; UNKNWOWN0-NEXT:    movl $8, 16(%rax)
; UNKNWOWN0-NEXT:    movl $7, 8(%rax)
; UNKNWOWN0-NEXT:    movl $6, (%rax)
; UNKNWOWN0-NEXT:    xorl %edi, %edi
; UNKNWOWN0-NEXT:    movl $1, %esi
; UNKNWOWN0-NEXT:    movl $2, %edx
; UNKNWOWN0-NEXT:    movl $3, %ecx
; UNKNWOWN0-NEXT:    movl $4, %r8d
; UNKNWOWN0-NEXT:    movl $5, %r9d
; UNKNWOWN0-NEXT:    callq bar@PLT
; UNKNWOWN0-NEXT:    addq $32, %rsp
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 64
; UNKNWOWN0-NEXT:    popq %rcx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN0-NEXT:    popq %rdx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN0-NEXT:    popq %rsi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN0-NEXT:    popq %rdi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN0-NEXT:    popq %r8
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN0-NEXT:    popq %r9
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN0-NEXT:    popq %rax
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN0-NEXT:    iretq
;
; UNKNWOWN-32-LABEL: foo:
; UNKNWOWN-32:       # %bb.0: # %entry
; UNKNWOWN-32-NEXT:    pushl %ebp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-32-NEXT:    .cfi_offset %ebp, -8
; UNKNWOWN-32-NEXT:    movl %esp, %ebp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa_register %ebp
; UNKNWOWN-32-NEXT:    pushl %eax
; UNKNWOWN-32-NEXT:    andl $-16, %esp
; UNKNWOWN-32-NEXT:    subl $80, %esp
; UNKNWOWN-32-NEXT:    movups %xmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; UNKNWOWN-32-NEXT:    .cfi_offset %eax, -12
; UNKNWOWN-32-NEXT:    .cfi_offset %xmm0, -32
; UNKNWOWN-32-NEXT:    cld
; UNKNWOWN-32-NEXT:    movaps {{.*#+}} xmm0 = [4,5,6,7]
; UNKNWOWN-32-NEXT:    movups %xmm0, {{[0-9]+}}(%esp)
; UNKNWOWN-32-NEXT:    movaps {{.*#+}} xmm0 = [0,1,2,3]
; UNKNWOWN-32-NEXT:    movups %xmm0, (%esp)
; UNKNWOWN-32-NEXT:    movl $8, {{[0-9]+}}(%esp)
; UNKNWOWN-32-NEXT:    calll bar@PLT
; UNKNWOWN-32-NEXT:    movups {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; UNKNWOWN-32-NEXT:    leal -4(%ebp), %esp
; UNKNWOWN-32-NEXT:    popl %eax
; UNKNWOWN-32-NEXT:    popl %ebp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa %esp, 4
; UNKNWOWN-32-NEXT:    iretl
;
; UNKNWOWN-32-0-LABEL: foo:
; UNKNWOWN-32-0:       # %bb.0: # %entry
; UNKNWOWN-32-0-NEXT:    pushl %ebp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-32-0-NEXT:    .cfi_offset %ebp, -8
; UNKNWOWN-32-0-NEXT:    movl %esp, %ebp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_register %ebp
; UNKNWOWN-32-0-NEXT:    pushl %eax
; UNKNWOWN-32-0-NEXT:    andl $-16, %esp
; UNKNWOWN-32-0-NEXT:    subl $48, %esp
; UNKNWOWN-32-0-NEXT:    .cfi_offset %eax, -12
; UNKNWOWN-32-0-NEXT:    cld
; UNKNWOWN-32-0-NEXT:    movl %esp, %eax
; UNKNWOWN-32-0-NEXT:    movl $8, 32(%eax)
; UNKNWOWN-32-0-NEXT:    movl $7, 28(%eax)
; UNKNWOWN-32-0-NEXT:    movl $6, 24(%eax)
; UNKNWOWN-32-0-NEXT:    movl $5, 20(%eax)
; UNKNWOWN-32-0-NEXT:    movl $4, 16(%eax)
; UNKNWOWN-32-0-NEXT:    movl $3, 12(%eax)
; UNKNWOWN-32-0-NEXT:    movl $2, 8(%eax)
; UNKNWOWN-32-0-NEXT:    movl $1, 4(%eax)
; UNKNWOWN-32-0-NEXT:    movl $0, (%eax)
; UNKNWOWN-32-0-NEXT:    calll bar@PLT
; UNKNWOWN-32-0-NEXT:    leal -4(%ebp), %esp
; UNKNWOWN-32-0-NEXT:    popl %eax
; UNKNWOWN-32-0-NEXT:    popl %ebp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa %esp, 4
; UNKNWOWN-32-0-NEXT:    iretl
entry:
  tail call i32 @bar(i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8) #0
  ret void
}

; Same as foo, but rely on attribute on @bar decl, not callsite
define x86_intrcc void @baz(ptr byval(i8) nocapture readnone %c) {
; CHECK-LABEL: baz
; CHECK-NOT: xmm
; UNKNWOWN-LABEL: baz:
; UNKNWOWN:       # %bb.0: # %entry
; UNKNWOWN-NEXT:    pushq %rax
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN-NEXT:    pushq %r9
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN-NEXT:    pushq %r8
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN-NEXT:    pushq %rdi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN-NEXT:    pushq %rsi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN-NEXT:    pushq %rdx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN-NEXT:    pushq %rcx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 64
; UNKNWOWN-NEXT:    .cfi_offset %rcx, -64
; UNKNWOWN-NEXT:    .cfi_offset %rdx, -56
; UNKNWOWN-NEXT:    .cfi_offset %rsi, -48
; UNKNWOWN-NEXT:    .cfi_offset %rdi, -40
; UNKNWOWN-NEXT:    .cfi_offset %r8, -32
; UNKNWOWN-NEXT:    .cfi_offset %r9, -24
; UNKNWOWN-NEXT:    .cfi_offset %rax, -16
; UNKNWOWN-NEXT:    cld
; UNKNWOWN-NEXT:    subq $8, %rsp
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    xorl %edi, %edi
; UNKNWOWN-NEXT:    movl $1, %esi
; UNKNWOWN-NEXT:    movl $2, %edx
; UNKNWOWN-NEXT:    movl $3, %ecx
; UNKNWOWN-NEXT:    movl $4, %r8d
; UNKNWOWN-NEXT:    movl $5, %r9d
; UNKNWOWN-NEXT:    pushq $8
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    pushq $7
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    pushq $6
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset 8
; UNKNWOWN-NEXT:    callq bar@PLT
; UNKNWOWN-NEXT:    addq $32, %rsp
; UNKNWOWN-NEXT:    .cfi_adjust_cfa_offset -32
; UNKNWOWN-NEXT:    popq %rcx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN-NEXT:    popq %rdx
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN-NEXT:    popq %rsi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN-NEXT:    popq %rdi
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN-NEXT:    popq %r8
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN-NEXT:    popq %r9
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN-NEXT:    popq %rax
; UNKNWOWN-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-NEXT:    iretq
;
; UNKNWOWN0-LABEL: baz:
; UNKNWOWN0:       # %bb.0: # %entry
; UNKNWOWN0-NEXT:    pushq %rax
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN0-NEXT:    pushq %r9
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN0-NEXT:    pushq %r8
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN0-NEXT:    pushq %rdi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN0-NEXT:    pushq %rsi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN0-NEXT:    pushq %rdx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN0-NEXT:    pushq %rcx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 64
; UNKNWOWN0-NEXT:    subq $32, %rsp
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 96
; UNKNWOWN0-NEXT:    .cfi_offset %rcx, -64
; UNKNWOWN0-NEXT:    .cfi_offset %rdx, -56
; UNKNWOWN0-NEXT:    .cfi_offset %rsi, -48
; UNKNWOWN0-NEXT:    .cfi_offset %rdi, -40
; UNKNWOWN0-NEXT:    .cfi_offset %r8, -32
; UNKNWOWN0-NEXT:    .cfi_offset %r9, -24
; UNKNWOWN0-NEXT:    .cfi_offset %rax, -16
; UNKNWOWN0-NEXT:    cld
; UNKNWOWN0-NEXT:    movq %rsp, %rax
; UNKNWOWN0-NEXT:    movl $8, 16(%rax)
; UNKNWOWN0-NEXT:    movl $7, 8(%rax)
; UNKNWOWN0-NEXT:    movl $6, (%rax)
; UNKNWOWN0-NEXT:    xorl %edi, %edi
; UNKNWOWN0-NEXT:    movl $1, %esi
; UNKNWOWN0-NEXT:    movl $2, %edx
; UNKNWOWN0-NEXT:    movl $3, %ecx
; UNKNWOWN0-NEXT:    movl $4, %r8d
; UNKNWOWN0-NEXT:    movl $5, %r9d
; UNKNWOWN0-NEXT:    callq bar@PLT
; UNKNWOWN0-NEXT:    addq $32, %rsp
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 64
; UNKNWOWN0-NEXT:    popq %rcx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 56
; UNKNWOWN0-NEXT:    popq %rdx
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 48
; UNKNWOWN0-NEXT:    popq %rsi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 40
; UNKNWOWN0-NEXT:    popq %rdi
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 32
; UNKNWOWN0-NEXT:    popq %r8
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 24
; UNKNWOWN0-NEXT:    popq %r9
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 16
; UNKNWOWN0-NEXT:    popq %rax
; UNKNWOWN0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN0-NEXT:    iretq
;
; UNKNWOWN-32-LABEL: baz:
; UNKNWOWN-32:       # %bb.0: # %entry
; UNKNWOWN-32-NEXT:    pushl %ebp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-32-NEXT:    .cfi_offset %ebp, -8
; UNKNWOWN-32-NEXT:    movl %esp, %ebp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa_register %ebp
; UNKNWOWN-32-NEXT:    pushl %eax
; UNKNWOWN-32-NEXT:    andl $-16, %esp
; UNKNWOWN-32-NEXT:    subl $80, %esp
; UNKNWOWN-32-NEXT:    movups %xmm0, {{[-0-9]+}}(%e{{[sb]}}p) # 16-byte Spill
; UNKNWOWN-32-NEXT:    .cfi_offset %eax, -12
; UNKNWOWN-32-NEXT:    .cfi_offset %xmm0, -32
; UNKNWOWN-32-NEXT:    cld
; UNKNWOWN-32-NEXT:    movaps {{.*#+}} xmm0 = [4,5,6,7]
; UNKNWOWN-32-NEXT:    movups %xmm0, {{[0-9]+}}(%esp)
; UNKNWOWN-32-NEXT:    movaps {{.*#+}} xmm0 = [0,1,2,3]
; UNKNWOWN-32-NEXT:    movups %xmm0, (%esp)
; UNKNWOWN-32-NEXT:    movl $8, {{[0-9]+}}(%esp)
; UNKNWOWN-32-NEXT:    calll bar@PLT
; UNKNWOWN-32-NEXT:    movups {{[-0-9]+}}(%e{{[sb]}}p), %xmm0 # 16-byte Reload
; UNKNWOWN-32-NEXT:    leal -4(%ebp), %esp
; UNKNWOWN-32-NEXT:    popl %eax
; UNKNWOWN-32-NEXT:    popl %ebp
; UNKNWOWN-32-NEXT:    .cfi_def_cfa %esp, 4
; UNKNWOWN-32-NEXT:    iretl
;
; UNKNWOWN-32-0-LABEL: baz:
; UNKNWOWN-32-0:       # %bb.0: # %entry
; UNKNWOWN-32-0-NEXT:    pushl %ebp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_offset 8
; UNKNWOWN-32-0-NEXT:    .cfi_offset %ebp, -8
; UNKNWOWN-32-0-NEXT:    movl %esp, %ebp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa_register %ebp
; UNKNWOWN-32-0-NEXT:    pushl %eax
; UNKNWOWN-32-0-NEXT:    andl $-16, %esp
; UNKNWOWN-32-0-NEXT:    subl $48, %esp
; UNKNWOWN-32-0-NEXT:    .cfi_offset %eax, -12
; UNKNWOWN-32-0-NEXT:    cld
; UNKNWOWN-32-0-NEXT:    movl %esp, %eax
; UNKNWOWN-32-0-NEXT:    movl $8, 32(%eax)
; UNKNWOWN-32-0-NEXT:    movl $7, 28(%eax)
; UNKNWOWN-32-0-NEXT:    movl $6, 24(%eax)
; UNKNWOWN-32-0-NEXT:    movl $5, 20(%eax)
; UNKNWOWN-32-0-NEXT:    movl $4, 16(%eax)
; UNKNWOWN-32-0-NEXT:    movl $3, 12(%eax)
; UNKNWOWN-32-0-NEXT:    movl $2, 8(%eax)
; UNKNWOWN-32-0-NEXT:    movl $1, 4(%eax)
; UNKNWOWN-32-0-NEXT:    movl $0, (%eax)
; UNKNWOWN-32-0-NEXT:    calll bar@PLT
; UNKNWOWN-32-0-NEXT:    leal -4(%ebp), %esp
; UNKNWOWN-32-0-NEXT:    popl %eax
; UNKNWOWN-32-0-NEXT:    popl %ebp
; UNKNWOWN-32-0-NEXT:    .cfi_def_cfa %esp, 4
; UNKNWOWN-32-0-NEXT:    iretl
entry:
  tail call i32 @bar(i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8)
  ret void
}

attributes #0 = { "no_caller_saved_registers" }
