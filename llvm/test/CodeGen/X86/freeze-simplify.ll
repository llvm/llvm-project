; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=x86_64-unknown-linux-gnu < %s 2>&1 | FileCheck %s --check-prefix=X86ASM

define i32 @sub_freeze(i32 %x, i32 %y) {
; X86ASM-LABEL: sub_freeze:
; X86ASM:       # %bb.0:
; X86ASM-NEXT:    xorl %eax, %eax
; X86ASM-NEXT:    retq
  %a = udiv i32 %x, %y
  %b = freeze i32 %a
  %c = sub i32 %a, %b
  ret i32 %c
}

define i32 @sub_freeze_2(i32 %x, i32 %y) {
; X86ASM-LABEL: sub_freeze_2:
; X86ASM:       # %bb.0:
; X86ASM-NEXT:    xorl %eax, %eax
; X86ASM-NEXT:    retq
  %a = add nuw i32 %x, %y
  %b = freeze i32 %a
  %c = sub i32 %a, %b
  ret i32 %c
}

define i32 @xor_freeze(i32 %x, i32 %y) {
; X86ASM-LABEL: xor_freeze:
; X86ASM:       # %bb.0:
; X86ASM-NEXT:    movl %edi, %eax
; X86ASM-NEXT:    xorl %edx, %edx
; X86ASM-NEXT:    divl %esi
; X86ASM-NEXT:    xorl %eax, %eax
; X86ASM-NEXT:    retq
  %a = udiv i32 %x, %y
  %b = freeze i32 %a
  %c = xor i32 %a, %b
  ret i32 %c
}

define i32 @xor_freeze_2(i32 %x, i32 %y) {
; X86ASM-LABEL: xor_freeze_2:
; X86ASM:       # %bb.0:
; X86ASM-NEXT:    xorl %eax, %eax
; X86ASM-NEXT:    retq
  %a = add nuw i32 %x, %y
  %b = freeze i32 %a
  %c = xor i32 %a, %b
  ret i32 %c
}
