; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=i386-unknown-unknown   | FileCheck %s --check-prefix=X32
; RUN: llc < %s -mtriple=x86_64-unknown-unknown | FileCheck %s --check-prefix=X64

define i32 @shift30_and2_i32(i32 %x) {
; X32-LABEL: shift30_and2_i32:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    shrl $30, %eax
; X32-NEXT:    andl $-2, %eax
; X32-NEXT:    retl
;
; X64-LABEL: shift30_and2_i32:
; X64:       # %bb.0:
; X64-NEXT:    movl %edi, %eax
; X64-NEXT:    shrl $30, %eax
; X64-NEXT:    andl $-2, %eax
; X64-NEXT:    retq
  %shr = lshr i32 %x, 30
  %and = and i32 %shr, 2
  ret i32 %and
}

define i64 @shift62_and2_i64(i64 %x) {
; X32-LABEL: shift62_and2_i64:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    shrl $30, %eax
; X32-NEXT:    andl $-2, %eax
; X32-NEXT:    xorl %edx, %edx
; X32-NEXT:    retl
;
; X64-LABEL: shift62_and2_i64:
; X64:       # %bb.0:
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    shrq $62, %rax
; X64-NEXT:    andl $-2, %eax
; X64-NEXT:    retq
  %shr = lshr i64 %x, 62
  %and = and i64 %shr, 2
  ret i64 %and
}

define i64 @shift30_and2_i64(i64 %x) {
; X32-LABEL: shift30_and2_i64:
; X32:       # %bb.0:
; X32-NEXT:    movl {{[0-9]+}}(%esp), %eax
; X32-NEXT:    shrl $30, %eax
; X32-NEXT:    andl $-2, %eax
; X32-NEXT:    xorl %edx, %edx
; X32-NEXT:    retl
;
; X64-LABEL: shift30_and2_i64:
; X64:       # %bb.0:
; X64-NEXT:    movq %rdi, %rax
; X64-NEXT:    shrq $30, %rax
; X64-NEXT:    andl $2, %eax
; X64-NEXT:    retq
  %shr = lshr i64 %x, 30
  %and = and i64 %shr, 2
  ret i64 %and
}
