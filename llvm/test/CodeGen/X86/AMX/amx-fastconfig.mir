# RUN: llc -mtriple=x86_64-- -run-pass=fastpretileconfig -o - %s | FileCheck %s

--- |
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-unknown"

  @buf = dso_local global [1024 x i8] zeroinitializer, align 16
  @buf2 = dso_local global [1024 x i8] zeroinitializer, align 16

  define dso_local void @test_api(i32 %cond, i16 signext %row, i16 signext %col) local_unnamed_addr #0 {
  entry:
    %tobool.not = icmp eq i32 %cond, 0
    br i1 %tobool.not, label %if.else, label %if.then

  if.then:                                          ; preds = %entry
    %0 = tail call x86_amx @llvm.x86.tileloadd64.internal(i16 %row, i16 8, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf, i64 0, i64 0), i64 32)
    %1 = tail call x86_amx @llvm.x86.tileloadd64.internal(i16 8, i16 %col, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf, i64 0, i64 0), i64 32)
    %2 = tail call x86_amx @llvm.x86.tileloadd64.internal(i16 %row, i16 %col, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf, i64 0, i64 0), i64 32)
    br label %if.end

  if.else:                                          ; preds = %entry
    %3 = tail call x86_amx @llvm.x86.tileloadd64.internal(i16 %row, i16 8, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf2, i64 0, i64 0), i64 32)
    %4 = tail call x86_amx @llvm.x86.tileloadd64.internal(i16 8, i16 %col, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf2, i64 0, i64 0), i64 32)
    %5 = tail call x86_amx @llvm.x86.tileloadd64.internal(i16 %row, i16 %col, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf2, i64 0, i64 0), i64 32)
    br label %if.end

  if.end:                                           ; preds = %if.else, %if.then
    %a.sroa.1094.0.in = phi x86_amx [ %3, %if.else ], [ %0, %if.then ]
    %b.sroa.1069.0.in = phi x86_amx [ %4, %if.else ], [ %1, %if.then ]
    %c.sroa.1044.0.in = phi x86_amx [ %5, %if.else ], [ %2, %if.then ]
    %6 = tail call x86_amx @llvm.x86.tdpbssd.internal(i16 %row, i16 %col, i16 8, x86_amx %c.sroa.1044.0.in, x86_amx %a.sroa.1094.0.in, x86_amx %b.sroa.1069.0.in)
    tail call void @llvm.x86.tilestored64.internal(i16 %row, i16 %col, i8* getelementptr inbounds ([1024 x i8], [1024 x i8]* @buf, i64 0, i64 0), i64 32, x86_amx %6)
    ret void
  }

  declare x86_amx @llvm.x86.tileloadd64.internal(i16, i16, i8*, i64) #1
  declare x86_amx @llvm.x86.tdpbssd.internal(i16, i16, i16, x86_amx, x86_amx, x86_amx) #1
  declare void @llvm.x86.tilestored64.internal(i16, i16, i8*, i64, x86_amx) #1

  attributes #0 = { "target-features"="+amx-int8,+avx512f" }
  attributes #1 = { nounwind "target-features"="+amx-int8,+avx512f" }

...
---
name:            test_api
alignment:       16
tracksRegLiveness: true
registers:
  - { id: 0, class: tile }
  - { id: 1, class: tile }
  - { id: 2, class: tile }
  - { id: 3, class: tile }
  - { id: 4, class: tile }
  - { id: 5, class: tile }
  - { id: 6, class: tile }
  - { id: 7, class: tile }
  - { id: 8, class: tile }
  - { id: 9, class: gr32 }
  - { id: 10, class: gr32 }
  - { id: 11, class: gr32 }
  - { id: 12, class: gr16 }
  - { id: 13, class: gr16 }
  - { id: 14, class: gr64 }
  - { id: 15, class: gr64_nosp }
  - { id: 16, class: gr16 }
  - { id: 17, class: gr64 }
  - { id: 18, class: gr64_nosp }
  - { id: 19, class: gr16 }
  - { id: 20, class: gr16 }
  - { id: 21, class: tile }
  - { id: 22, class: gr64 }
  - { id: 23, class: gr64_nosp }
liveins:
  - { reg: '$edi', virtual-reg: '%9' }
  - { reg: '$esi', virtual-reg: '%10' }
  - { reg: '$edx', virtual-reg: '%11' }
frameInfo:
  maxAlignment:    1
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.2(0x30000000), %bb.1(0x50000000)
    liveins: $edi, $esi, $edx

    ; CHECK:      {{%.*}}:vr512 = AVX512_512_SET0
    ; CHECK-NEXT: VMOVUPSZmr %stack.3, 1, $noreg, 0, $noreg, {{%.*}}

    %11:gr32 = COPY killed $edx
    %10:gr32 = COPY killed $esi
    %9:gr32 = COPY killed $edi
    %13:gr16 = COPY killed %11.sub_16bit
    %12:gr16 = COPY killed %10.sub_16bit
    TEST32rr killed %9, %9, implicit-def $eflags
    JCC_1 %bb.2, 4, implicit killed $eflags
    JMP_1 %bb.1

  bb.1.if.then:
    %14:gr64 = MOV32ri64 @buf
    %15:gr64_nosp = MOV32ri64 32
    %16:gr16 = MOV16ri 8
    ; CHECK: LDTILECFG
    %0:tile = PTILELOADDV %12, %16, %14, 1, %15, 0, $noreg
    %1:tile = PTILELOADDV killed %16, %13, %14, 1, %15, 0, $noreg
    %2:tile = PTILELOADDV %12, %13, killed %14, 1, killed %15, 0, $noreg
    JMP_1 %bb.3

  bb.2.if.else:
    %17:gr64 = MOV32ri64 @buf2
    %18:gr64_nosp = MOV32ri64 32
    %19:gr16 = MOV16ri 8
    ; CHECK: LDTILECFG
    %3:tile = PTILELOADDV %12, %19, %17, 1, %18, 0, $noreg
    %4:tile = PTILELOADDV killed %19, %13, %17, 1, %18, 0, $noreg
    %5:tile = PTILELOADDV %12, %13, killed %17, 1, killed %18, 0, $noreg

  bb.3.if.end:

    ; CHECK: bb.3.if.end
    ; CHECK-NEXT: %44:gr16 = PHI %16, %bb.1, %19, %bb.2
    ; CHECK-NEXT: %43:gr16 = PHI %12, %bb.1, %12, %bb.2
    ; CHECK-NEXT: %42:gr64_nosp = PHI %45, %bb.1, %46, %bb.2
    ; CHECK-NEXT: %38:gr16 = PHI %13, %bb.1, %13, %bb.2
    ; CHECK-NEXT: %37:gr16 = PHI %16, %bb.1, %19, %bb.2
    ; CHECK-NEXT: %36:gr64_nosp = PHI %39, %bb.1, %40, %bb.2
    ; CHECK-NEXT: %32:gr16 = PHI %13, %bb.1, %13, %bb.2
    ; CHECK-NEXT: %31:gr16 = PHI %12, %bb.1, %12, %bb.2
    ; CHECK-NEXT: %30:gr64_nosp = PHI %33, %bb.1, %34, %bb.2
    ; CHECK-NEXT: LDTILECFG
    ; CHECK-NEXT: %47:gr64_nosp = MOV64ri 64
    ; CHECK-NEXT: %6:tile = PTILELOADDV %43, %44, %42, 1, killed %47, 0, $noreg
    ; CHECK-NEXT: %41:gr64_nosp = MOV64ri 64
    ; CHECK-NEXT: %7:tile = PTILELOADDV %37, %38, %36, 1, killed %41, 0, $noreg
    ; CHECK-NEXT: %35:gr64_nosp = MOV64ri 64
    ; CHECK-NEXT: %8:tile = PTILELOADDV %31, %32, %30, 1, killed %35, 0, $noreg

    %6:tile = PHI %0, %bb.1, %3, %bb.2
    %7:tile = PHI %1, %bb.1, %4, %bb.2
    %8:tile = PHI %2, %bb.1, %5, %bb.2
    %20:gr16 = MOV16ri 8
    %21:tile = PTDPBSSDV %12, %13, killed %20, killed %8, killed %6, killed %7
    %22:gr64 = MOV32ri64 @buf
    %23:gr64_nosp = MOV32ri64 32
    PTILESTOREDV killed %12, killed %13, killed %22, 1, killed %23, 0, $noreg, killed %21
    RET 0

...
