; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt --bpf-ir-peephole -mtriple=bpf-pc-linux -S %s | FileCheck %s
; Source:
;   #define AA 40
;   struct t {
;     char a[20];
;   };
;   void foo(void *);
;
;   int test1() {
;     const int a = 8;
;     char tmp[AA + sizeof(struct t) + a];
;     foo(tmp);
;     return 0;
;   }
;
;   int test2(int b) {
;     const int a = 8;
;     char tmp[a + b];
;     foo(tmp);
;     return 0;
;   }
; Compilation flag:
;   clang -target bpf -O2 -S -emit-llvm t.c -Xclang -disable-llvm-passes

source_filename = "t.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "bpf"

; Function Attrs: nounwind
define dso_local i32 @test1() {
; CHECK-LABEL: @test1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[A:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca i8*, align 8
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* [[TMP0]])
; CHECK-NEXT:    store i32 8, i32* [[A]], align 4
; CHECK-NEXT:    [[VLA:%.*]] = alloca i8, i64 68, align 1
; CHECK-NEXT:    call void @foo(i8* [[VLA]])
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast i32* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* [[TMP1]])
; CHECK-NEXT:    ret i32 0
;
entry:
  %a = alloca i32, align 4
  %saved_stack = alloca i8*, align 8
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0)
  store i32 8, i32* %a, align 4
  %1 = call i8* @llvm.stacksave()
  store i8* %1, i8** %saved_stack, align 8
  %vla = alloca i8, i64 68, align 1
  call void @foo(i8* %vla)
  %2 = load i8*, i8** %saved_stack, align 8
  call void @llvm.stackrestore(i8* %2)
  %3 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %3)
  ret i32 0
}

declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)

declare i8* @llvm.stacksave()

declare dso_local void @foo(i8*)

declare void @llvm.stackrestore(i8*)

declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)

define dso_local i32 @test2(i32 %b) {
; CHECK-LABEL: @test2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[B_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[A:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SAVED_STACK:%.*]] = alloca i8*, align 8
; CHECK-NEXT:    [[__VLA_EXPR0:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32 [[B:%.*]], i32* [[B_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast i32* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* [[TMP0]])
; CHECK-NEXT:    store i32 8, i32* [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, i32* [[B_ADDR]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 8, [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = zext i32 [[ADD]] to i64
; CHECK-NEXT:    [[VLA:%.*]] = alloca i8, i64 [[TMP2]], align 1
; CHECK-NEXT:    store i64 [[TMP2]], i64* [[__VLA_EXPR0]], align 8
; CHECK-NEXT:    call void @foo(i8* [[VLA]])
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast i32* [[A]] to i8*
; CHECK-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* [[TMP3]])
; CHECK-NEXT:    ret i32 0
;
entry:
  %b.addr = alloca i32, align 4
  %a = alloca i32, align 4
  %saved_stack = alloca i8*, align 8
  %__vla_expr0 = alloca i64, align 8
  store i32 %b, i32* %b.addr, align 4
  %0 = bitcast i32* %a to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* %0)
  store i32 8, i32* %a, align 4
  %1 = load i32, i32* %b.addr, align 4
  %add = add nsw i32 8, %1
  %2 = zext i32 %add to i64
  %3 = call i8* @llvm.stacksave()
  store i8* %3, i8** %saved_stack, align 8
  %vla = alloca i8, i64 %2, align 1
  store i64 %2, i64* %__vla_expr0, align 8
  call void @foo(i8* %vla)
  %4 = load i8*, i8** %saved_stack, align 8
  call void @llvm.stackrestore(i8* %4)
  %5 = bitcast i32* %a to i8*
  call void @llvm.lifetime.end.p0i8(i64 4, i8* %5)
  ret i32 0
}
