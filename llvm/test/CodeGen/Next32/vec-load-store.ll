; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mcpu=next32gen2 < %s | FileCheck %s

define void @test2xi32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test2xi32:
; CHECK:       LBB0_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.2.64.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    dup r5, r3
; CHECK-NEXT:    memwrite.2.64.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r5
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <2 x i32>, ptr %b, align 4
  store <2 x i32> %val, ptr %a, align 4
  ret void
}

define void @test4xi32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test4xi32:
; CHECK:       LBB1_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.4.128.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    memwrite.4.128.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r7
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <4 x i32>, ptr %b, align 4
  store <4 x i32> %val, ptr %a, align 4
  ret void
}

define void @test8xi32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test8xi32:
; CHECK:       LBB2_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.8.256.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r11, r3
; CHECK-NEXT:    memwrite.8.256.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r11
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <8 x i32>, ptr %b, align 4
  store <8 x i32> %val, ptr %a, align 4
  ret void
}

define void @test16xi32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test16xi32:
; CHECK:       LBB3_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.16.512.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r19, r3
; CHECK-NEXT:    memwrite.16.512.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r19
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r19
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <16 x i32>, ptr %b, align 4
  store <16 x i32> %val, ptr %a, align 4
  ret void
}

define void @test2xi64(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test2xi64:
; CHECK:       LBB4_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.2.128.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    memwrite.2.128.align[8] r2, r1, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r7
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <2 x i64>, ptr %b, align 8
  store <2 x i64> %val, ptr %a, align 8
  ret void
}

define void @test4xi64(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test4xi64:
; CHECK:       LBB5_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.4.256.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r11, r3
; CHECK-NEXT:    memwrite.4.256.align[8] r2, r1, tid
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r11
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <4 x i64>, ptr %b, align 8
  store <4 x i64> %val, ptr %a, align 8
  ret void
}

define void @test8xi64(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test8xi64:
; CHECK:       LBB6_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.8.512.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r19, r3
; CHECK-NEXT:    memwrite.8.512.align[8] r2, r1, tid
; CHECK-NEXT:    memdata r19
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r19
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <8 x i64>, ptr %b, align 8
  store <8 x i64> %val, ptr %a, align 8
  ret void
}

define void @test2xf32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test2xf32:
; CHECK:       LBB7_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.2.64.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    dup r5, r3
; CHECK-NEXT:    memwrite.2.64.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r5
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <2 x float>, ptr %b, align 4
  store <2 x float> %val, ptr %a, align 4
  ret void
}

define void @test4xf32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test4xf32:
; CHECK:       LBB8_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.4.128.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    memwrite.4.128.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r7
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <4 x float>, ptr %b, align 4
  store <4 x float> %val, ptr %a, align 4
  ret void
}

define void @test8xf32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test8xf32:
; CHECK:       LBB9_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.8.256.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r11, r3
; CHECK-NEXT:    memwrite.8.256.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r11
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <8 x float>, ptr %b, align 4
  store <8 x float> %val, ptr %a, align 4
  ret void
}

define void @test16xf32(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test16xf32:
; CHECK:       LBB10_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.16.512.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r19, r3
; CHECK-NEXT:    memwrite.16.512.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r19
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r19
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <16 x float>, ptr %b, align 4
  store <16 x float> %val, ptr %a, align 4
  ret void
}

define void @test2xf64(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test2xf64:
; CHECK:       LBB11_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.2.128.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    memwrite.2.128.align[8] r2, r1, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r7
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <2 x double>, ptr %b, align 8
  store <2 x double> %val, ptr %a, align 8
  ret void
}

define void @test4xf64(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test4xf64:
; CHECK:       LBB12_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.4.256.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r11, r3
; CHECK-NEXT:    memwrite.4.256.align[8] r2, r1, tid
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r11
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <4 x double>, ptr %b, align 8
  store <4 x double> %val, ptr %a, align 8
  ret void
}

define void @test8xf64(ptr noalias nocapture %a, ptr noalias nocapture readonly %b) {
; CHECK-LABEL: test8xf64:
; CHECK:       LBB13_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.8.512.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r19, r3
; CHECK-NEXT:    memwrite.8.512.align[8] r2, r1, tid
; CHECK-NEXT:    memdata r19
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    barrier r1, r19
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %val = load <8 x double>, ptr %b, align 8
  store <8 x double> %val, ptr %a, align 8
  ret void
}
