; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mattr=-shift64 < %s | FileCheck %s --check-prefix=CHECK
; RUN: llc -mtriple=next32 -mattr=+shift64 < %s | FileCheck %s --check-prefix=HAS-LONG-SHIFT

define dso_local zeroext i8 @shr1(i8 noundef zeroext %0, i8 noundef zeroext %1) {
; CHECK-LABEL: shr1
; CHECK:    shr r1, r2
  %3 = zext i8 %0 to i32
  %4 = zext i8 %1 to i32
  %5 = lshr i32 %3, %4
  %6 = trunc i32 %5 to i8
  ret i8 %6
}

define dso_local zeroext i8 @shr1c(i8 noundef zeroext %0) {
; CHECK-LABEL: shr1c
; CHECK:    movl r2, 0x3
; CHECK-NEXT:    shr r1, r2
  %2 = lshr i8 %0, 3
  ret i8 %2
}

define dso_local zeroext i16 @shr2(i16 noundef zeroext %0, i16 noundef zeroext %1) {
; CHECK-LABEL: shr2
; CHECK:    shr r1, r2
  %3 = zext i16 %0 to i32
  %4 = zext i16 %1 to i32
  %5 = lshr i32 %3, %4
  %6 = trunc i32 %5 to i16
  ret i16 %6
}

define dso_local zeroext i16 @shr2c(i16 noundef zeroext %0) {
; CHECK-LABEL: shr2c
; CHECK:    movl r2, 0x3
; CHECK-NEXT:    shr r1, r2
  %2 = lshr i16 %0, 3
  ret i16 %2
}

define dso_local i32 @shr3(i32 noundef %0, i32 noundef %1) {
; CHECK-LABEL: shr3
; CHECK:    shr r1, r2
  %3 = lshr i32 %0, %1
  ret i32 %3
}

define dso_local i32 @shr3c(i32 noundef %0) {
; CHECK-LABEL: shr3c
; CHECK:    movl r2, 0x3
; CHECK-NEXT:    shr r1, r2
  %2 = lshr i32 %0, 3
  ret i32 %2
}

; Call arithmetic routine, call_addr is __lshrdi3
define dso_local i64 @shr4(i64 noundef %0, i64 noundef %1) {
; CHECK-LABEL: shr4
; CHECK:    movl call_addr

; HAS-LONG-SHIFT-LABEL: shr4:
; HAS-LONG-SHIFT:    shr64 r1, r2, r3
  %3 = lshr i64 %0, %1
  ret i64 %3
}

; Call arithmetic routine, call_addr is __lshrdi3
define dso_local i64 @shr4c(i64 noundef %0) {
; CHECK-LABEL: shr4c
; CHECK:    movl r3, 0x3
; CHECK-NEXT:    movl call_addr

; HAS-LONG-SHIFT-LABEL: shr4c
; HAS-LONG-SHIFT:    movl r3, 0x3
; HAS-LONG-SHIFT-NEXT:    shr64 r1, r2, r3
  %2 = lshr i64 %0, 3
  ret i64 %2
}

define dso_local i64 @shr5c1(i64 noundef %0) {
; CHECK-LABEL: shr5c1:
; CHECK:    movl r1, 0x0
; CHECK-NOT:    shr r2, r1

; HAS-LONG-SHIFT-LABEL: shr5c1:
; HAS-LONG-SHIFT:    movl r1, 0x0
; HAS-LONG-SHIFT-NOT:    shr r2, r1
  %2 = lshr i64 %0, 32
  ret i64 %2
}

define dso_local i64 @shr5c2(i64 noundef %0) {
; CHECK-LABEL: shr5c2:
; CHECK:    movl r1, 0x1
; CHECK-NEXT:    shr r2, r1
; CHECK-NEXT:    movl r1, 0x0

; HAS-LONG-SHIFT-LABEL: shr5c2:
; HAS-LONG-SHIFT:    movl r1, 0x1
; HAS-LONG-SHIFT-NEXT:    shr r2, r1
; HAS-LONG-SHIFT-NEXT:    movl r1, 0x0
  %2 = lshr i64 %0, 33
  ret i64 %2
}

; Call arithmetic routine, call_addr is __lshrti3
define dso_local i128 @shr6(i128 noundef %0, i128 noundef %1) {
; CHECK-LABEL: shr6
; CHECK:    movl call_addr
  %3 = lshr i128 %0, %1
  ret i128 %3
}

; Call arithmetic routine, call_addr is __lshrdi3
define dso_local i128 @shr6c(i128 noundef %0) {
; CHECK-LABEL: shr6c
; CHECK:    movl r6, 0x3
; CHECK-NEXT:    movl call_addr
  %2 = lshr i128 %0, 3
  ret i128 %2
}

define dso_local <8 x i32> @shr7(<8 x i32> noundef %0, <8 x i32> noundef %1) {
; CHECK-LABEL: shr7
; CHECK:    shri r8, r16
; CHECK-NEXT:    shri r7, r15
; CHECK-NEXT:    shri r6, r14
; CHECK-NEXT:    shri r5, r13
; CHECK-NEXT:    shri r4, r12
; CHECK-NEXT:    shri r3, r11
; CHECK-NEXT:    shri r2, r10
; CHECK-NEXT:    shri r1, r9
  %3 = ashr <8 x i32> %0, %1
  ret <8 x i32> %3
}

define dso_local <8 x i32> @shr7c(<8 x i32> noundef %0) {
; CHECK-LABEL: shr7c
; CHECK:    movl r9, 0x3
; CHECK-NEXT:    shri r8, r9
; CHECK-NEXT:    shri r7, r9
; CHECK-NEXT:    shri r6, r9
; CHECK-NEXT:    shri r5, r9
; CHECK-NEXT:    shri r4, r9
; CHECK-NEXT:    shri r3, r9
; CHECK-NEXT:    shri r2, r9
; CHECK-NEXT:    shri r1, r9
  %2 = ashr <8 x i32> %0, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <8 x i32> %2
}

define dso_local <16 x i32> @shr8(<16 x i32> noundef %0, <16 x i32> noundef %1) {
; CHECK-LABEL: shr8
; CHECK:    shri r16, r32
; CHECK-NEXT:    shri r15, r31
; CHECK-NEXT:    shri r14, r30
; CHECK-NEXT:    shri r13, r29
; CHECK-NEXT:    shri r12, r28
; CHECK-NEXT:    shri r11, r27
; CHECK-NEXT:    shri r10, r26
; CHECK-NEXT:    shri r9, r25
; CHECK-NEXT:    shri r8, r24
; CHECK-NEXT:    shri r7, r23
; CHECK-NEXT:    shri r6, r22
; CHECK-NEXT:    shri r5, r21
; CHECK-NEXT:    shri r4, r20
; CHECK-NEXT:    shri r3, r19
; CHECK-NEXT:    shri r2, r18
; CHECK-NEXT:    shri r1, r17
  %3 = ashr <16 x i32> %0, %1
  ret <16 x i32> %3
}

define dso_local <16 x i32> @shr8c(<16 x i32> noundef %0) {
; CHECK-LABEL: shr8c
; CHECK:    movl r17, 0x3
; CHECK-NEXT:    shri r16, r17
; CHECK-NEXT:    shri r15, r17
; CHECK-NEXT:    shri r14, r17
; CHECK-NEXT:    shri r13, r17
; CHECK-NEXT:    shri r12, r17
; CHECK-NEXT:    shri r11, r17
; CHECK-NEXT:    shri r10, r17
; CHECK-NEXT:    shri r9, r17
; CHECK-NEXT:    shri r8, r17
; CHECK-NEXT:    shri r7, r17
; CHECK-NEXT:    shri r6, r17
; CHECK-NEXT:    shri r5, r17
; CHECK-NEXT:    shri r4, r17
; CHECK-NEXT:    shri r3, r17
; CHECK-NEXT:    shri r2, r17
; CHECK-NEXT:    shri r1, r17
  %2 = ashr <16 x i32> %0, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <16 x i32> %2
}

define dso_local <32 x i32> @shr9(<32 x i32> noundef %0, <32 x i32> noundef %1) {
; CHECK-LABEL: shr9
; CHECK:    shri r32, r64
; CHECK-NEXT:    shri r31, r63
; CHECK-NEXT:    shri r30, r62
; CHECK-NEXT:    shri r29, r61
; CHECK-NEXT:    shri r28, r60
; CHECK-NEXT:    shri r27, r59
; CHECK-NEXT:    shri r26, r58
; CHECK-NEXT:    shri r25, r57
; CHECK-NEXT:    shri r24, r56
; CHECK-NEXT:    shri r23, r55
; CHECK-NEXT:    shri r22, r54
; CHECK-NEXT:    shri r21, r53
; CHECK-NEXT:    shri r20, r52
; CHECK-NEXT:    shri r19, r51
; CHECK-NEXT:    shri r18, r50
; CHECK-NEXT:    shri r17, r49
; CHECK-NEXT:    shri r16, r48
; CHECK-NEXT:    shri r15, r47
; CHECK-NEXT:    shri r14, r46
; CHECK-NEXT:    shri r13, r45
; CHECK-NEXT:    shri r12, r44
; CHECK-NEXT:    shri r11, r43
; CHECK-NEXT:    shri r10, r42
; CHECK-NEXT:    shri r9, r41
; CHECK-NEXT:    shri r8, r40
; CHECK-NEXT:    shri r7, r39
; CHECK-NEXT:    shri r6, r38
; CHECK-NEXT:    shri r5, r37
; CHECK-NEXT:    shri r4, r36
; CHECK-NEXT:    shri r3, r35
; CHECK-NEXT:    shri r2, r34
; CHECK-NEXT:    shri r1, r33
  %3 = ashr <32 x i32> %0, %1
  ret <32 x i32> %3
}

define dso_local <32 x i32> @shr9c(<32 x i32> noundef %0) {
; CHECK-LABEL: shr9c
; CHECK:    movl r33, 0x3
; CHECK-NEXT:    shri r32, r33
; CHECK-NEXT:    shri r31, r33
; CHECK-NEXT:    shri r30, r33
; CHECK-NEXT:    shri r29, r33
; CHECK-NEXT:    shri r28, r33
; CHECK-NEXT:    shri r27, r33
; CHECK-NEXT:    shri r26, r33
; CHECK-NEXT:    shri r25, r33
; CHECK-NEXT:    shri r24, r33
; CHECK-NEXT:    shri r23, r33
; CHECK-NEXT:    shri r22, r33
; CHECK-NEXT:    shri r21, r33
; CHECK-NEXT:    shri r20, r33
; CHECK-NEXT:    shri r19, r33
; CHECK-NEXT:    shri r18, r33
; CHECK-NEXT:    shri r17, r33
; CHECK-NEXT:    shri r16, r33
; CHECK-NEXT:    shri r15, r33
; CHECK-NEXT:    shri r14, r33
; CHECK-NEXT:    shri r13, r33
; CHECK-NEXT:    shri r12, r33
; CHECK-NEXT:    shri r11, r33
; CHECK-NEXT:    shri r10, r33
; CHECK-NEXT:    shri r9, r33
; CHECK-NEXT:    shri r8, r33
; CHECK-NEXT:    shri r7, r33
; CHECK-NEXT:    shri r6, r33
; CHECK-NEXT:    shri r5, r33
; CHECK-NEXT:    shri r4, r33
; CHECK-NEXT:    shri r3, r33
; CHECK-NEXT:    shri r2, r33
; CHECK-NEXT:    shri r1, r33
  %2 = ashr <32 x i32> %0, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <32 x i32> %2
}
