; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

declare i128 @llvm.ctlz.i128(i128, i1)
declare i64 @llvm.ctlz.i64(i64, i1)
declare i32 @llvm.ctlz.i32(i32, i1)
declare i16 @llvm.ctlz.i16(i16, i1)
declare i8 @llvm.ctlz.i8(i8, i1)

define i8 @clz8(i8 %value) {
; CHECK-LABEL: clz8
; CHECK:    clz r1
  %result = call i8 @llvm.ctlz.i8(i8 %value, i1 false)
  ret i8 %result
}

define i16 @clz16(i16 %value) {
; CHECK-LABEL: clz16
; CHECK:    clz r1
  %result = call i16 @llvm.ctlz.i16(i16 %value, i1 false)
  ret i16 %result
}

define i32 @clz32(i32 %value) {
; CHECK-LABEL: clz32
; CHECK:    clz r1
  %result = call i32 @llvm.ctlz.i32(i32 %value, i1 false)
  ret i32 %result
}

define i64 @clz64(i64 %value) {
; CHECK-LABEL: clz64
; CHECK:    clz r1
; CHECK:    clz r2
  %result = call i64 @llvm.ctlz.i64(i64 %value, i1 false)
  ret i64 %result
}

define i128 @clz128(i128 %value) {
; CHECK-LABEL: clz128
; CHECK:    clz r6
; CHECK:    clz r4
; CHECK:    clz r1
; CHECK:    clz r2
  %result = call i128 @llvm.ctlz.i128(i128 %value, i1 false)
  ret i128 %result
}
