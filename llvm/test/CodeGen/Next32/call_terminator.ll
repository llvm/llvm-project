; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

; Original C source:
; struct S8 {
;   int a;
;   int b;
;   char c;
; };
;
; struct S16 {
;   int a;
;   int b;
;   short c;
; };
;
; struct S32 {
;   int a;
;   int b;
;   int c;
; };
;
; struct S8 foo8();
; struct S16 foo16();
; struct S32 foo32();
;
; int test8() {
;   struct S8 str = foo8();
;   return str.a + str.b + str.c;
; }
;
; int test16() {
;   struct S16 str = foo16();
;   return str.a + str.b + str.c;
; }
;
; int test32() {
;   struct S32 str = foo32();
;   return str.a + str.b + str.c;
; }

define dso_local i32 @test8() {
; CHECK-LABEL: test8:
; CHECK:       .Ltest8$local:
; CHECK:       .type .Ltest8$local,@function
; CHECK-NEXT:  LBB0_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x0
; CHECK-NEXT:    movl call_addr, foo8
; CHECK-NEXT:    movl call_ret_fid, .Ltmp0
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB0_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB0_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.8 r3
; CHECK-NEXT:    sext.8 r3
; CHECK-NEXT:    add r3, r1
; CHECK-NEXT:    add r3, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = tail call { i64, i8 } (...) @foo8()
  %2 = extractvalue { i64, i8 } %1, 0
  %3 = extractvalue { i64, i8 } %1, 1
  %4 = trunc i64 %2 to i32
  %5 = lshr i64 %2, 32
  %6 = trunc i64 %5 to i32
  %7 = sext i8 %3 to i32
  %8 = add i32 %7, %4
  %9 = add i32 %8, %6
  ret i32 %9
}

define dso_local i32 @test16() {
; CHECK-LABEL: test16:
; CHECK:       .Ltest16$local:
; CHECK:       .type .Ltest16$local,@function
; CHECK-NEXT:  LBB1_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x0
; CHECK-NEXT:    movl call_addr, foo16
; CHECK-NEXT:    movl call_ret_fid, .Ltmp1
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB1_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB1_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.16 r3
; CHECK-NEXT:    sext.16 r3
; CHECK-NEXT:    add r3, r1
; CHECK-NEXT:    add r3, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = tail call { i64, i16 } (...) @foo16()
  %2 = extractvalue { i64, i16 } %1, 0
  %3 = extractvalue { i64, i16 } %1, 1
  %4 = trunc i64 %2 to i32
  %5 = lshr i64 %2, 32
  %6 = trunc i64 %5 to i32
  %7 = sext i16 %3 to i32
  %8 = add i32 %7, %4
  %9 = add i32 %8, %6
  ret i32 %9
}

define dso_local i32 @test32() {
; CHECK-LABEL: test32:
; CHECK:       .Ltest32$local:
; CHECK:       .type .Ltest32$local,@function
; CHECK-NEXT:  LBB2_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x0
; CHECK-NEXT:    movl call_addr, foo32
; CHECK-NEXT:    movl call_ret_fid, .Ltmp2
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB2_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB2_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.32 r3
; CHECK-NEXT:    add r3, r1
; CHECK-NEXT:    add r3, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = tail call { i64, i32 } (...) @foo32()
  %2 = extractvalue { i64, i32 } %1, 0
  %3 = extractvalue { i64, i32 } %1, 1
  %4 = trunc i64 %2 to i32
  %5 = lshr i64 %2, 32
  %6 = trunc i64 %5 to i32
  %7 = add i32 %3, %4
  %8 = add i32 %7, %6
  ret i32 %8
}

declare dso_local { i64, i8 } @foo8(...)
declare dso_local { i64, i16 } @foo16(...)
declare dso_local { i64, i32 } @foo32(...)
