; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i8 @inc1(i8 noundef zeroext %0) {
; CHECK-LABEL: inc1
; CHECK:    inc r1
; CHECK-NEXT:    zext.8 r1
  %2 = add i8 %0, 1
  ret i8 %2
}

define dso_local zeroext i16 @inc2(i16 noundef zeroext %0) {
; CHECK-LABEL: inc2
; CHECK:    inc r1
; CHECK-NEXT:    zext.16 r1
  %2 = add i16 %0, 1
  ret i16 %2
}

define dso_local i32 @inc3(i32 noundef %0) {
; CHECK-LABEL: inc3
; CHECK:    inc r1
  %2 = add i32 %0, 1
  ret i32 %2
}

define dso_local i64 @inc4(i64 noundef %0) {
; CHECK-LABEL: inc4
; CHECK:    leadisp r4, r3
; CHECK-NEXT:    leascale r4, r4
; CHECK-NEXT:    leaindex r4, r4
; CHECK-NEXT:    leabase r2, r1
  %2 = add i64 %0, 1
  ret i64 %2
}

define dso_local i128 @inc5(i128 noundef %0) {
; CHECK-LABEL: inc5
; CHECK:    movl r5, 0x1
; CHECK-NEXT:    add r1, r5
; CHECK-NEXT:    dup r5, r1
; CHECK-NEXT:    flags r5
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    adc r2, r6 [r5]
; CHECK-NEXT:    dup r5, r2
; CHECK-NEXT:    flags r5
; CHECK-NEXT:    adc r3, r6 [r5]
; CHECK-NEXT:    dup r5, r3
; CHECK-NEXT:    flags r5
; CHECK-NEXT:    adc r4, r6 [r5]
  %2 = add i128 %0, 1
  ret i128 %2
}

define dso_local <8 x i32> @inc6(<8 x i32> noundef %0) {
; CHECK-LABEL: inc6
; CHECK:    inc r8
; CHECK-NEXT:    inc r7
; CHECK-NEXT:    inc r6
; CHECK-NEXT:    inc r5
; CHECK-NEXT:    inc r4
; CHECK-NEXT:    inc r3
; CHECK-NEXT:    inc r2
; CHECK-NEXT:    inc r1
  %2 = add <8 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  ret <8 x i32> %2
}

define dso_local <16 x i32> @inc7(<16 x i32> noundef %0) {
; CHECK-LABEL: inc7
; CHECK:    inc r16
; CHECK-NEXT:    inc r15
; CHECK-NEXT:    inc r14
; CHECK-NEXT:    inc r13
; CHECK-NEXT:    inc r12
; CHECK-NEXT:    inc r11
; CHECK-NEXT:    inc r10
; CHECK-NEXT:    inc r9
; CHECK-NEXT:    inc r8
; CHECK-NEXT:    inc r7
; CHECK-NEXT:    inc r6
; CHECK-NEXT:    inc r5
; CHECK-NEXT:    inc r4
; CHECK-NEXT:    inc r3
; CHECK-NEXT:    inc r2
; CHECK-NEXT:    inc r1
  %2 = add <16 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  ret <16 x i32> %2
}

define dso_local <32 x i32> @inc8(<32 x i32> noundef %0) {
; CHECK-LABEL: inc8
; CHECK:    inc r32
; CHECK-NEXT:    inc r31
; CHECK-NEXT:    inc r30
; CHECK-NEXT:    inc r29
; CHECK-NEXT:    inc r28
; CHECK-NEXT:    inc r27
; CHECK-NEXT:    inc r26
; CHECK-NEXT:    inc r25
; CHECK-NEXT:    inc r24
; CHECK-NEXT:    inc r23
; CHECK-NEXT:    inc r22
; CHECK-NEXT:    inc r21
; CHECK-NEXT:    inc r20
; CHECK-NEXT:    inc r19
; CHECK-NEXT:    inc r18
; CHECK-NEXT:    inc r17
; CHECK-NEXT:    inc r16
; CHECK-NEXT:    inc r15
; CHECK-NEXT:    inc r14
; CHECK-NEXT:    inc r13
; CHECK-NEXT:    inc r12
; CHECK-NEXT:    inc r11
; CHECK-NEXT:    inc r10
; CHECK-NEXT:    inc r9
; CHECK-NEXT:    inc r8
; CHECK-NEXT:    inc r7
; CHECK-NEXT:    inc r6
; CHECK-NEXT:    inc r5
; CHECK-NEXT:    inc r4
; CHECK-NEXT:    inc r3
; CHECK-NEXT:    inc r2
; CHECK-NEXT:    inc r1
  %2 = add <32 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  ret <32 x i32> %2
}
