; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mcpu=next32gen2 < %s | FileCheck %s

define void @load_store_i8(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i8:
; CHECK:       LBB0_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.8.align[1] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    memwrite.8.align[1] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i8, ptr %p2, align 1
  store i8 %0, ptr %p1, align 1
  ret void
}

define void @load_store_i16(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i16:
; CHECK:       LBB1_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.16.align[2] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    memwrite.16.align[2] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i16, ptr %p2, align 2
  store i16 %0, ptr %p1, align 2
  ret void
}

define void @load_store_i17(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i17:
; CHECK:       LBB2_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    memread.8.align[2] r9, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r6]
; CHECK-NEXT:    dup r5, tid
; CHECK-NEXT:    barrier r5, r7
; CHECK-NEXT:    movl r6, 0x10
; CHECK-NEXT:    shl r7, r6
; CHECK-NEXT:    memread.16.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, r3
; CHECK-NEXT:    zext.16 r4
; CHECK-NEXT:    or r4, r7
; CHECK-NEXT:    movl r7, 0x1FFFF
; CHECK-NEXT:    and r4, r7
; CHECK-NEXT:    dup r7, r4
; CHECK-NEXT:    shr r7, r6
; CHECK-NEXT:    memwrite.8.align[2] r9, r8, r5
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memwrite.16.align[4] r2, r1, r5
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    barrier r5, r3
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    barrier r5, r7
; CHECK-NEXT:    dup tid, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i17, ptr %p2, align 4
  store i17 %0, ptr %p1, align 4
  ret void
}

define void @load_store_i24(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i24:
; CHECK:       LBB3_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.8.align[2] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup r8, r5
; CHECK-NEXT:    zext.16 r8
; CHECK-NEXT:    memwrite.8.align[2] r9, r7, r6
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    movl r7, 0x10
; CHECK-NEXT:    shl r5, r7
; CHECK-NEXT:    memread.16.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, r3
; CHECK-NEXT:    zext.16 r4
; CHECK-NEXT:    or r4, r5
; CHECK-NEXT:    memwrite.16.align[4] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    barrier r6, r3
; CHECK-NEXT:    barrier r6, r8
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i24, ptr %p2, align 4
  store i24 %0, ptr %p1, align 4
  ret void
}

define void @load_store_i32(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i32:
; CHECK:       LBB4_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.32.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    memwrite.32.align[4] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i32, ptr %p2, align 4
  store i32 %0, ptr %p1, align 4
  ret void
}

define void @load_store_i33(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i33:
; CHECK:       LBB5_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x4
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r2
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.8.align[4] r9, r7, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.32.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    movl r6, 0x1
; CHECK-NEXT:    and r5, r6
; CHECK-NEXT:    memwrite.8.align[4] r10, r8, r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.32.align[4] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i33, ptr %p2, align 4
  store i33 %0, ptr %p1, align 4
  ret void
}

define void @load_store_i40(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i40:
; CHECK:       LBB6_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x4
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.8.align[4] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.32.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    memwrite.8.align[4] r9, r7, r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.32.align[4] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i40, ptr %p2, align 4
  store i40 %0, ptr %p1, align 4
  ret void
}

define void @load_store_i48(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i48:
; CHECK:       LBB7_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x4
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.16.align[4] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.32.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    memwrite.16.align[4] r9, r7, r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.32.align[4] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i48, ptr %p2, align 4
  store i48 %0, ptr %p1, align 4
  ret void
}

define void @load_store_i56(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i56:
; CHECK:       LBB8_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x4
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x2
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    dup r11, r1
; CHECK-NEXT:    add r11, r6
; CHECK-NEXT:    dup r6, r11
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r13, r11
; CHECK-NEXT:    add r13, r8
; CHECK-NEXT:    dup r8, r13
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r14, r2
; CHECK-NEXT:    adc r14, r5 [r6]
; CHECK-NEXT:    dup r6, r14
; CHECK-NEXT:    adc r6, r5 [r8]
; CHECK-NEXT:    memread.8.align[2] r12, r10, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.32.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r5
; CHECK-NEXT:    dup r8, r5
; CHECK-NEXT:    zext.16 r8
; CHECK-NEXT:    memwrite.8.align[2] r6, r13, r4
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memread.16.align[4] r9, r7, tid
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    movl r7, 0x10
; CHECK-NEXT:    shl r5, r7
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    zext.16 r7
; CHECK-NEXT:    or r7, r5
; CHECK-NEXT:    memwrite.16.align[4] r14, r11, r4
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memwrite.32.align[8] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r6
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    barrier r4, r8
; CHECK-NEXT:    barrier r4, r7
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i56, ptr %p2, align 8
  store i56 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i64(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i64:
; CHECK:       LBB9_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r5, tid
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r5
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    dup tid, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i64, ptr %p2, align 8
  store i64 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i65(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i65:
; CHECK:       LBB10_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r2
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.8.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    movl r7, 0x1
; CHECK-NEXT:    and r5, r7
; CHECK-NEXT:    memwrite.8.align[8] r10, r8, r6
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i65, ptr %p2, align 8
  store i65 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i72(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i72:
; CHECK:       LBB11_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.8.align[8] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    memwrite.8.align[8] r9, r7, r6
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i72, ptr %p2, align 8
  store i72 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i73(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i73:
; CHECK:       LBB12_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r2
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.16.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    movl r7, 0x1FF
; CHECK-NEXT:    and r5, r7
; CHECK-NEXT:    memwrite.16.align[8] r10, r8, r6
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i73, ptr %p2, align 8
  store i73 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i79(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i79:
; CHECK:       LBB13_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r2
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.16.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    movl r7, 0x7FFF
; CHECK-NEXT:    and r5, r7
; CHECK-NEXT:    memwrite.16.align[8] r10, r8, r6
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i79, ptr %p2, align 8
  store i79 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i80(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i80:
; CHECK:       LBB14_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.16.align[8] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    memwrite.16.align[8] r9, r7, r6
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i80, ptr %p2, align 8
  store i80 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i88(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i88:
; CHECK:       LBB15_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r9, 0x8
; CHECK-NEXT:    dup r6, r3
; CHECK-NEXT:    add r6, r9
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    flags r7
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r7]
; CHECK-NEXT:    movl r8, 0x2
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    add r7, r8
; CHECK-NEXT:    dup r11, r7
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r10
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    memread.8.align[2] r12, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.16.align[8] r10, r6, tid
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r4
; CHECK-NEXT:    barrier r3, r7
; CHECK-NEXT:    dup r10, r1
; CHECK-NEXT:    add r10, r9
; CHECK-NEXT:    dup r9, r10
; CHECK-NEXT:    flags r9
; CHECK-NEXT:    dup r11, r2
; CHECK-NEXT:    adc r11, r5 [r9]
; CHECK-NEXT:    dup r14, r6
; CHECK-NEXT:    zext.16 r14
; CHECK-NEXT:    dup r9, r14
; CHECK-NEXT:    memwrite.16.align[8] r11, r10, r3
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    movl r15, 0x10
; CHECK-NEXT:    dup r12, r4
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r3
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    movl call_addr, __lshrdi3
; CHECK-NEXT:    movl call_ret_fid, .Ltmp0
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r14
; CHECK-NEXT:    writer.64 call_addr, r7
; CHECK-NEXT:    writer.32 call_addr, r15
; CHECK-NEXT:    movl call_ret_bb, LBB15_1
; CHECK-NEXT:    chain.rn call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r4
; CHECK-NEXT:    writer.32 call_ret_bb, r5
; CHECK-NEXT:    writer.32 call_ret_bb, r6
; CHECK-NEXT:    writer.32 call_ret_bb, r7
; CHECK-NEXT:    writer.32 call_ret_bb, r8
; CHECK-NEXT:    writer.32 call_ret_bb, r9
; CHECK-NEXT:    writer.32 call_ret_bb, r10
; CHECK-NEXT:    writer.32 call_ret_bb, r11
; CHECK-NEXT:    writer.32 call_ret_bb, r12
; CHECK-NEXT:  LBB15_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r1, r10
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    adc r11, r5 [r1]
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r4
; CHECK-NEXT:    barrier r1, r7
; CHECK-NEXT:    memwrite.8.align[2] r11, r10, r1
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    barrier {{r1, r3|r3, r1}}
; CHECK-NEXT:    barrier {{r1|r3}}, r6
; CHECK-NEXT:    barrier {{r1|r3}}, r12
; CHECK-NEXT:    barrier {{r1|r3}}, r9
; CHECK-NEXT:    barrier {{r1|r3}}, r2
; CHECK-NEXT:    dup tid, {{r1|r3}}
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i88, ptr %p2, align 8
  store i88 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i96(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i96:
; CHECK:       LBB16_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.32.align[8] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    memwrite.32.align[8] r9, r7, r6
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r5
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i96, ptr %p2, align 8
  store i96 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i99(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i99:
; CHECK:       LBB17_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x4
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    memread.8.align[4] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.32.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    dup r9, r1
; CHECK-NEXT:    add r9, r6
; CHECK-NEXT:    dup r6, r9
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r11, r9
; CHECK-NEXT:    add r11, r8
; CHECK-NEXT:    dup r8, r11
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r12, r2
; CHECK-NEXT:    adc r12, r5 [r6]
; CHECK-NEXT:    dup r6, r12
; CHECK-NEXT:    adc r6, r5 [r8]
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r5, tid
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    barrier r5, r7
; CHECK-NEXT:    barrier r5, r10
; CHECK-NEXT:    movl r8, 0x7
; CHECK-NEXT:    and r10, r8
; CHECK-NEXT:    memwrite.8.align[4] r6, r11, r5
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memwrite.32.align[8] r12, r9, r5
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r5
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r5, r7
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    barrier r5, r10
; CHECK-NEXT:    dup tid, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i99, ptr %p2, align 8
  store i99 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i104(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i104:
; CHECK:       LBB18_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x4
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    memread.8.align[4] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.32.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r9, tid
; CHECK-NEXT:    barrier r9, r4
; CHECK-NEXT:    barrier r9, r7
; CHECK-NEXT:    barrier r9, r10
; CHECK-NEXT:    dup r11, r1
; CHECK-NEXT:    add r11, r6
; CHECK-NEXT:    dup r6, r11
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r12, r2
; CHECK-NEXT:    adc r12, r5 [r6]
; CHECK-NEXT:    memwrite.32.align[8] r12, r11, r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    add r11, r8
; CHECK-NEXT:    dup r6, r11
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    adc r12, r5 [r6]
; CHECK-NEXT:    memwrite.8.align[4] r12, r11, r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r9
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r9, r10
; CHECK-NEXT:    barrier r9, r7
; CHECK-NEXT:    barrier r9, r4
; CHECK-NEXT:    dup tid, r9
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i104, ptr %p2, align 8
  store i104 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i112(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i112:
; CHECK:       LBB19_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x4
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    memread.16.align[4] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.32.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r9, tid
; CHECK-NEXT:    barrier r9, r4
; CHECK-NEXT:    barrier r9, r7
; CHECK-NEXT:    barrier r9, r10
; CHECK-NEXT:    dup r11, r1
; CHECK-NEXT:    add r11, r6
; CHECK-NEXT:    dup r6, r11
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r12, r2
; CHECK-NEXT:    adc r12, r5 [r6]
; CHECK-NEXT:    memwrite.32.align[8] r12, r11, r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    add r11, r8
; CHECK-NEXT:    dup r6, r11
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    adc r12, r5 [r6]
; CHECK-NEXT:    memwrite.16.align[4] r12, r11, r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r9
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r9, r10
; CHECK-NEXT:    barrier r9, r7
; CHECK-NEXT:    barrier r9, r4
; CHECK-NEXT:    dup tid, r9
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i112, ptr %p2, align 8
  store i112 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i120(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i120:
; CHECK:       LBB20_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x8
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x4
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    memread.16.align[4] r12, r10, tid
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    movl r13, 0x2
; CHECK-NEXT:    add r10, r13
; CHECK-NEXT:    dup r14, r10
; CHECK-NEXT:    flags r14
; CHECK-NEXT:    adc r12, r5 [r14]
; CHECK-NEXT:    memread.8.align[2] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.32.align[8] r9, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    movl r9, 0x10
; CHECK-NEXT:    dup r12, r10
; CHECK-NEXT:    shl r12, r9
; CHECK-NEXT:    dup r9, r11
; CHECK-NEXT:    zext.16 r9
; CHECK-NEXT:    or r9, r12
; CHECK-NEXT:    dup r12, r1
; CHECK-NEXT:    add r12, r6
; CHECK-NEXT:    dup r6, r12
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r14, r12
; CHECK-NEXT:    add r14, r8
; CHECK-NEXT:    dup r8, r14
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r15, r2
; CHECK-NEXT:    adc r15, r5 [r6]
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r6, tid
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r7
; CHECK-NEXT:    barrier r6, r10
; CHECK-NEXT:    dup r16, r15
; CHECK-NEXT:    adc r16, r5 [r8]
; CHECK-NEXT:    memwrite.16.align[4] r16, r14, r6
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    add r14, r13
; CHECK-NEXT:    dup r8, r14
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    adc r16, r5 [r8]
; CHECK-NEXT:    zext.16 r10
; CHECK-NEXT:    memwrite.8.align[2] r16, r14, r6
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memwrite.32.align[8] r15, r12, r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r6
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r6, r11
; CHECK-NEXT:    barrier r6, r7
; CHECK-NEXT:    barrier r6, r4
; CHECK-NEXT:    barrier r6, r10
; CHECK-NEXT:    barrier r6, r9
; CHECK-NEXT:    dup tid, r6
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i120, ptr %p2, align 8
  store i120 %0, ptr %p1, align 8
  ret void
}

define void @load_store_i128(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i128:
; CHECK:       LBB21_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.128.align[16] r4, r3, tid
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    dup r7, tid
; CHECK-NEXT:    barrier r7, r6
; CHECK-NEXT:    memwrite.128.align[16] r2, r1, r7
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    barrier r7, r6
; CHECK-NEXT:    dup tid, r7
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i128, ptr %p2, align 16
  store i128 %0, ptr %p1, align 16
  ret void
}

define void @load_store_i136(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i136:
; CHECK:       LBB22_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x10
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.8.align[16] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.128.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r10, tid
; CHECK-NEXT:    barrier r10, r8
; CHECK-NEXT:    barrier r10, r5
; CHECK-NEXT:    memwrite.8.align[16] r9, r7, r10
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.128.align[32] r2, r1, r10
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    barrier r10, r8
; CHECK-NEXT:    barrier r10, r5
; CHECK-NEXT:    dup tid, r10
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i136, ptr %p2, align 32
  store i136 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i144(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i144:
; CHECK:       LBB23_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x10
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    add r8, r6
; CHECK-NEXT:    dup r6, r8
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    dup r10, r4
; CHECK-NEXT:    adc r10, r5 [r6]
; CHECK-NEXT:    memread.16.align[16] r10, r8, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memread.128.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    dup r10, tid
; CHECK-NEXT:    barrier r10, r8
; CHECK-NEXT:    barrier r10, r5
; CHECK-NEXT:    memwrite.16.align[16] r9, r7, r10
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memwrite.128.align[32] r2, r1, r10
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    barrier r10, r8
; CHECK-NEXT:    barrier r10, r5
; CHECK-NEXT:    dup tid, r10
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i144, ptr %p2, align 32
  store i144 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i152(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i152:
; CHECK:       LBB24_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r13, 0x10
; CHECK-NEXT:    dup r6, r3
; CHECK-NEXT:    add r6, r13
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    flags r7
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r7]
; CHECK-NEXT:    movl r7, 0x2
; CHECK-NEXT:    dup r8, r6
; CHECK-NEXT:    add r8, r7
; CHECK-NEXT:    dup r10, r8
; CHECK-NEXT:    flags r10
; CHECK-NEXT:    dup r11, r9
; CHECK-NEXT:    adc r11, r5 [r10]
; CHECK-NEXT:    memread.8.align[2] r11, r8, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memread.16.align[16] r9, r6, tid
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memread.128.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r10
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup r9, r1
; CHECK-NEXT:    add r9, r13
; CHECK-NEXT:    dup r4, r9
; CHECK-NEXT:    flags r4
; CHECK-NEXT:    dup r12, r2
; CHECK-NEXT:    adc r12, r5 [r4]
; CHECK-NEXT:    dup r17, r6
; CHECK-NEXT:    zext.16 r17
; CHECK-NEXT:    dup r4, r17
; CHECK-NEXT:    memwrite.16.align[16] r12, r9, r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    memwrite.128.align[32] r2, r1, r3
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    movl call_addr, __lshrdi3
; CHECK-NEXT:    movl call_ret_fid, .Ltmp2
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r17
; CHECK-NEXT:    writer.64 call_addr, r5
; CHECK-NEXT:    writer.32 call_addr, r13
; CHECK-NEXT:    movl call_ret_bb, LBB24_1
; CHECK-NEXT:    chain.rn call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r4
; CHECK-NEXT:    writer.32 call_ret_bb, r5
; CHECK-NEXT:    writer.32 call_ret_bb, r6
; CHECK-NEXT:    writer.32 call_ret_bb, r7
; CHECK-NEXT:    writer.32 call_ret_bb, r8
; CHECK-NEXT:    writer.32 call_ret_bb, r9
; CHECK-NEXT:    writer.32 call_ret_bb, r10
; CHECK-NEXT:    writer.32 call_ret_bb, r11
; CHECK-NEXT:    writer.32 call_ret_bb, r12
; CHECK-NEXT:  LBB24_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r10
; CHECK-NEXT:    add r9, r7
; CHECK-NEXT:    dup r7, r9
; CHECK-NEXT:    flags r7
; CHECK-NEXT:    adc r12, r5 [r7]
; CHECK-NEXT:    barrier r1, r8
; CHECK-NEXT:    memwrite.8.align[2] r12, r9, r1
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    barrier {{r1, r3|r3, r1}}
; CHECK-NEXT:    barrier {{r1|r3}}, r6
; CHECK-NEXT:    barrier {{r1|r3}}, r11
; CHECK-NEXT:    barrier {{r1|r3}}, r4
; CHECK-NEXT:    barrier {{r1|r3}}, r2
; CHECK-NEXT:    dup tid, {{r1|r3}}
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i152, ptr %p2, align 32
  store i152 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i232(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i232:
; CHECK:       LBB25_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x10
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x8
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    movl r11, 0x4
; CHECK-NEXT:    dup r13, r10
; CHECK-NEXT:    add r13, r11
; CHECK-NEXT:    dup r14, r13
; CHECK-NEXT:    flags r14
; CHECK-NEXT:    dup r15, r12
; CHECK-NEXT:    adc r15, r5 [r14]
; CHECK-NEXT:    memread.8.align[4] r15, r13, tid
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memread.32.align[8] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.64.align[16] r9, r7, tid
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.128.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    dup r15, tid
; CHECK-NEXT:    barrier r15, r14
; CHECK-NEXT:    barrier r15, r9
; CHECK-NEXT:    barrier r15, r10
; CHECK-NEXT:    barrier r15, r13
; CHECK-NEXT:    memwrite.128.align[32] r2, r1, r15
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    add r1, r6
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    adc r2, r5 [r3]
; CHECK-NEXT:    memwrite.64.align[16] r2, r1, r15
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    add r1, r8
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    adc r2, r5 [r3]
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    add r3, r11
; CHECK-NEXT:    dup r4, r3
; CHECK-NEXT:    flags r4
; CHECK-NEXT:    dup r6, r2
; CHECK-NEXT:    adc r6, r5 [r4]
; CHECK-NEXT:    memwrite.32.align[8] r2, r1, r15
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memwrite.8.align[4] r6, r3, r15
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    barrier r15, r13
; CHECK-NEXT:    barrier r15, r10
; CHECK-NEXT:    barrier r15, r9
; CHECK-NEXT:    barrier r15, r14
; CHECK-NEXT:    dup tid, r15
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i232, ptr %p2, align 32
  store i232 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i240(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i240:
; CHECK:       LBB26_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x10
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x8
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    movl r11, 0x4
; CHECK-NEXT:    dup r13, r10
; CHECK-NEXT:    add r13, r11
; CHECK-NEXT:    dup r14, r13
; CHECK-NEXT:    flags r14
; CHECK-NEXT:    dup r15, r12
; CHECK-NEXT:    adc r15, r5 [r14]
; CHECK-NEXT:    memread.16.align[4] r15, r13, tid
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memread.32.align[8] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.64.align[16] r9, r7, tid
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.128.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    dup r15, tid
; CHECK-NEXT:    barrier r15, r14
; CHECK-NEXT:    barrier r15, r9
; CHECK-NEXT:    barrier r15, r10
; CHECK-NEXT:    barrier r15, r13
; CHECK-NEXT:    memwrite.128.align[32] r2, r1, r15
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    add r1, r6
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    adc r2, r5 [r3]
; CHECK-NEXT:    memwrite.64.align[16] r2, r1, r15
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    add r1, r8
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    adc r2, r5 [r3]
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    add r3, r11
; CHECK-NEXT:    dup r4, r3
; CHECK-NEXT:    flags r4
; CHECK-NEXT:    dup r6, r2
; CHECK-NEXT:    adc r6, r5 [r4]
; CHECK-NEXT:    memwrite.32.align[8] r2, r1, r15
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memwrite.16.align[4] r6, r3, r15
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    barrier r15, r13
; CHECK-NEXT:    barrier r15, r10
; CHECK-NEXT:    barrier r15, r9
; CHECK-NEXT:    barrier r15, r14
; CHECK-NEXT:    dup tid, r15
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i240, ptr %p2, align 32
  store i240 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i248(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i248:
; CHECK:       LBB27_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x10
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    movl r8, 0x8
; CHECK-NEXT:    dup r10, r7
; CHECK-NEXT:    add r10, r8
; CHECK-NEXT:    dup r11, r10
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r11]
; CHECK-NEXT:    movl r11, 0x4
; CHECK-NEXT:    dup r13, r10
; CHECK-NEXT:    add r13, r11
; CHECK-NEXT:    dup r14, r13
; CHECK-NEXT:    flags r14
; CHECK-NEXT:    dup r15, r12
; CHECK-NEXT:    adc r15, r5 [r14]
; CHECK-NEXT:    movl r14, 0x2
; CHECK-NEXT:    dup r16, r13
; CHECK-NEXT:    add r16, r14
; CHECK-NEXT:    dup r17, r16
; CHECK-NEXT:    flags r17
; CHECK-NEXT:    dup r18, r15
; CHECK-NEXT:    adc r18, r5 [r17]
; CHECK-NEXT:    memread.8.align[2] r18, r16, tid
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memread.32.align[8] r12, r10, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memread.64.align[16] r9, r7, tid
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.128.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    dup r18, tid
; CHECK-NEXT:    barrier r18, r17
; CHECK-NEXT:    barrier r18, r9
; CHECK-NEXT:    barrier r18, r10
; CHECK-NEXT:    barrier r18, r16
; CHECK-NEXT:    dup r19, r1
; CHECK-NEXT:    add r19, r6
; CHECK-NEXT:    dup r20, r19
; CHECK-NEXT:    flags r20
; CHECK-NEXT:    dup r21, r2
; CHECK-NEXT:    adc r21, r5 [r20]
; CHECK-NEXT:    memwrite.64.align[16] r21, r19, r18
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    add r19, r8
; CHECK-NEXT:    dup r7, r19
; CHECK-NEXT:    flags r7
; CHECK-NEXT:    adc r21, r5 [r7]
; CHECK-NEXT:    dup r7, r19
; CHECK-NEXT:    add r7, r11
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r11, r21
; CHECK-NEXT:    adc r11, r5 [r8]
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    add r8, r14
; CHECK-NEXT:    dup r14, r8
; CHECK-NEXT:    flags r14
; CHECK-NEXT:    dup r20, r11
; CHECK-NEXT:    adc r20, r5 [r14]
; CHECK-NEXT:    memread.16.align[4] r15, r13, tid
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    dup r13, r16
; CHECK-NEXT:    shl r13, r6
; CHECK-NEXT:    dup r6, r5
; CHECK-NEXT:    zext.16 r6
; CHECK-NEXT:    or r6, r13
; CHECK-NEXT:    memwrite.16.align[4] r11, r7, r18
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    zext.16 r16
; CHECK-NEXT:    memwrite.8.align[2] r20, r8, r18
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memwrite.128.align[32] r2, r1, r18
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memwrite.32.align[8] r21, r19, r18
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    barrier r18, r5
; CHECK-NEXT:    barrier r18, r10
; CHECK-NEXT:    barrier r18, r9
; CHECK-NEXT:    barrier r18, r17
; CHECK-NEXT:    barrier r18, r16
; CHECK-NEXT:    barrier r18, r6
; CHECK-NEXT:    dup tid, r18
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i248, ptr %p2, align 32
  store i248 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i256(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i256:
; CHECK:       LBB28_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.256.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r11, tid
; CHECK-NEXT:    barrier r11, r10
; CHECK-NEXT:    memwrite.256.align[32] r2, r1, r11
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    barrier r11, r10
; CHECK-NEXT:    dup tid, r11
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i256, ptr %p2, align 32
  store i256 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i264(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i264:
; CHECK:       LBB29_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r6, 0x20
; CHECK-NEXT:    dup r7, r3
; CHECK-NEXT:    add r7, r6
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r8]
; CHECK-NEXT:    memread.8.align[32] r9, r7, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memread.256.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    dup r14, tid
; CHECK-NEXT:    barrier r14, r13
; CHECK-NEXT:    barrier r14, r7
; CHECK-NEXT:    memwrite.256.align[32] r2, r1, r14
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    add r1, r6
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    adc r2, r5 [r3]
; CHECK-NEXT:    memwrite.8.align[32] r2, r1, r14
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    barrier r14, r13
; CHECK-NEXT:    barrier r14, r7
; CHECK-NEXT:    dup tid, r14
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i264, ptr %p2, align 32
  store i264 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i280(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i280:
; CHECK:       LBB30_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    movl r11, 0x20
; CHECK-NEXT:    dup r6, r3
; CHECK-NEXT:    add r6, r11
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    flags r7
; CHECK-NEXT:    dup r9, r4
; CHECK-NEXT:    adc r9, r5 [r7]
; CHECK-NEXT:    movl r7, 0x2
; CHECK-NEXT:    dup r8, r6
; CHECK-NEXT:    add r8, r7
; CHECK-NEXT:    dup r10, r8
; CHECK-NEXT:    flags r10
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    adc r12, r5 [r10]
; CHECK-NEXT:    memread.8.align[2] r12, r8, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memread.16.align[32] r9, r6, tid
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memread.256.align[32] r4, r3, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    memdata r19
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r10
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup r9, r1
; CHECK-NEXT:    add r9, r11
; CHECK-NEXT:    dup r4, r9
; CHECK-NEXT:    flags r4
; CHECK-NEXT:    dup r11, r2
; CHECK-NEXT:    adc r11, r5 [r4]
; CHECK-NEXT:    dup r20, r6
; CHECK-NEXT:    zext.16 r20
; CHECK-NEXT:    dup r4, r20
; CHECK-NEXT:    memwrite.16.align[32] r11, r9, r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    movl r21, 0x10
; CHECK-NEXT:    dup r12, r10
; CHECK-NEXT:    memwrite.256.align[32] r2, r1, r3
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    memdata r19
; CHECK-NEXT:    movl call_addr, __lshrdi3
; CHECK-NEXT:    movl call_ret_fid, .Ltmp4
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r20
; CHECK-NEXT:    writer.64 call_addr, r5
; CHECK-NEXT:    writer.32 call_addr, r21
; CHECK-NEXT:    movl call_ret_bb, LBB30_1
; CHECK-NEXT:    chain.rn call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r4
; CHECK-NEXT:    writer.32 call_ret_bb, r5
; CHECK-NEXT:    writer.32 call_ret_bb, r6
; CHECK-NEXT:    writer.32 call_ret_bb, r7
; CHECK-NEXT:    writer.32 call_ret_bb, r8
; CHECK-NEXT:    writer.32 call_ret_bb, r9
; CHECK-NEXT:    writer.32 call_ret_bb, r10
; CHECK-NEXT:    writer.32 call_ret_bb, r11
; CHECK-NEXT:    writer.32 call_ret_bb, r12
; CHECK-NEXT:  LBB30_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r10
; CHECK-NEXT:    add r9, r7
; CHECK-NEXT:    dup r7, r9
; CHECK-NEXT:    flags r7
; CHECK-NEXT:    adc r11, r5 [r7]
; CHECK-NEXT:    barrier r1, r8
; CHECK-NEXT:    memwrite.8.align[2] r11, r9, r1
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    barrier {{r1, r3|r3, r1}}
; CHECK-NEXT:    barrier {{r1|r3}}, r6
; CHECK-NEXT:    barrier {{r1|r3}}, r12
; CHECK-NEXT:    barrier {{r1|r3}}, r4
; CHECK-NEXT:    barrier {{r1|r3}}, r2
; CHECK-NEXT:    dup tid, {{r1|r3}}
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i280, ptr %p2, align 32
  store i280 %0, ptr %p1, align 32
  ret void
}

define void @load_store_i512(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_i512:
; CHECK:       LBB31_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.512.align[64] r4, r3, tid
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    dup r19, tid
; CHECK-NEXT:    barrier r19, r18
; CHECK-NEXT:    memwrite.512.align[64] r2, r1, r19
; CHECK-NEXT:    memdata r18
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r5
; CHECK-NEXT:    memdata r6
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    memdata r12
; CHECK-NEXT:    memdata r13
; CHECK-NEXT:    memdata r14
; CHECK-NEXT:    memdata r15
; CHECK-NEXT:    memdata r16
; CHECK-NEXT:    memdata r17
; CHECK-NEXT:    barrier r19, r18
; CHECK-NEXT:    dup tid, r19
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load i512, ptr %p2, align 64
  store i512 %0, ptr %p1, align 64
  ret void
}

define void @load_store_f32(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_f32:
; CHECK:       LBB32_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.32.align[4] r4, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    memwrite.32.align[4] r2, r1, r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load float, ptr %p2, align 4
  store float %0, ptr %p1, align 4
  ret void
}

define void @load_store_f64(ptr %p1, ptr %p2) {
; CHECK-LABEL: load_store_f64:
; CHECK:       LBB33_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    memread.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r5, tid
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    memwrite.64.align[8] r2, r1, r5
; CHECK-NEXT:    memdata r4
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    barrier r5, r4
; CHECK-NEXT:    dup tid, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  %0 = load double, ptr %p2, align 8
  store double %0, ptr %p1, align 8
  ret void
}

define void @trunc_store_integer(ptr %p, i16 zeroext %val) {
; CHECK-LABEL: trunc_store_integer:
; CHECK:       LBB34_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.16 r3
; CHECK-NEXT:    memwrite.16.align[2] r2, r1, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  store i16 %val, ptr %p, align 2
  ret void
}
