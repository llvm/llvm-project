; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

declare i128 @llvm.umax.i128(i128, i128)
declare i64 @llvm.umax.i64(i64, i64)
declare i32 @llvm.umax.i32(i32, i32)
declare i16 @llvm.umax.i16(i16, i16)
declare i8 @llvm.umax.i8(i8, i8)

define i8 @umax8(i8 %a, i8 %b) {
; CHECK-LABEL: umax8
; CHECK:    zext.8 r2
; CHECK-NEXT:    zext.8 r1
; CHECK-NEXT:    umax r1, r2
  %result = call i8 @llvm.umax.i8(i8 %a, i8 %b)
  ret i8 %result
}

define i16 @umax16(i16 %a, i16 %b) {
; CHECK-LABEL: umax16
; CHECK:    zext.16 r2
; CHECK-NEXT:    zext.16 r1
; CHECK-NEXT:    umax r1, r2
  %result = call i16 @llvm.umax.i16(i16 %a, i16 %b)
  ret i16 %result
}

define i32 @umax32(i32 %a, i32 %b) {
; CHECK-LABEL: umax32
; CHECK:    umax r1, r2
  %result = call i32 @llvm.umax.i32(i32 %a, i32 %b)
  ret i32 %result
}

define i64 @umax64(i64 %a, i64 %b) {
; CHECK-LABEL: umax64
; CHECK:    sub r5, r3
; CHECK:    inc.a r7, [r6]
; CHECK:    inc.a r6, [r8]
; CHECK-NEXT:    select.e r6, r7 [r8]
; CHECK-NEXT:    sub r6, r5
; CHECK:    select.ne r4, r2 [r5]
; CHECK-NEXT:    select.ne r3, r1 [r5]
  %result = call i64 @llvm.umax.i64(i64 %a, i64 %b)
  ret i64 %result
}

define i128 @umax128(i128 %a, i128 %b) {
; CHECK-LABEL: umax128
; CHECK:    sub r9, r5
; CHECK:    inc.a r11, [r10]
; CHECK:    sub r10, r6
; CHECK:    inc.a r10, [r12]
; CHECK-NEXT:    select.e r10, r11 [r12]
; CHECK:    sub r11, r7
; CHECK:    inc.a r11, [r12]
; CHECK:    sub r12, r8
; CHECK:    inc.a r12, [r13]
; CHECK-NEXT:    select.e r12, r11 [r13]
; CHECK:    xor r11, r8
; CHECK:    xor r13, r7
; CHECK-NEXT:    or r13, r11
; CHECK-NEXT:    sub r13, r9
; CHECK:    select.e r12, r10 [r11]
; CHECK-NEXT:    sub r12, r9
; CHECK:    select.ne r8, r4 [r9]
; CHECK-NEXT:    select.ne r7, r3 [r9]
; CHECK-NEXT:    select.ne r6, r2 [r9]
; CHECK-NEXT:    select.ne r5, r1 [r9]
  %result = call i128 @llvm.umax.i128(i128 %a, i128 %b)
  ret i128 %result
}
