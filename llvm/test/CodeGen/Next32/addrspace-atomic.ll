; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mcpu=next32gen2 < %s | FileCheck %s

@generic_v = dso_local global i8 0, align 1
@local_v = dso_local thread_local addrspace(273) global i8 0, align 1
@expected = dso_local global i8 0, align 1
@max = dso_local global i8 -1, align 1
@desired = dso_local global i8 -1, align 1
@arr4 = dso_local global [34 x i32] zeroinitializer, align 4
@arr5 = dso_local addrspace(273) global [34 x i32] zeroinitializer, align 4
@arr6 = dso_local addrspace(274) global [34 x i32] zeroinitializer, align 4
@arr7 = dso_local addrspace(275) global [34 x i32] zeroinitializer, align 4
@generic = dso_local global [34 x i32] zeroinitializer, align 4
@local = dso_local thread_local addrspace(273) global [34 x i32] zeroinitializer, align 4
@shared = dso_local addrspace(274) global [34 x i32] zeroinitializer, align 4
@constant = dso_local addrspace(275) global [34 x i32] zeroinitializer, align 4

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_read_as4() #0 {
; CHECK-LABEL: test_atomic_read_as4:
; CHECK:       .Ltest_atomic_read_as4$local:
; CHECK:       .type   .Ltest_atomic_read_as4$local,@function
; CHECK-NEXT:  LBB0_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, arr4 [mem_low]
; CHECK-NEXT:    movl r2, arr4 [mem_high]
; CHECK-NEXT:    memread.atomic.32.align[4] r2, r1, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = load atomic i32, i32* getelementptr inbounds ([34 x i32], [34 x i32]* @arr4, i64 0, i64 0) seq_cst, align 4
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_read_as5() #0 {
; CHECK-LABEL: test_atomic_read_as5:
; CHECK:       .Ltest_atomic_read_as5$local:
; CHECK:       .type   .Ltest_atomic_read_as5$local,@function
; CHECK-NEXT:  LBB1_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, arr5 [mem_low]
; CHECK-NEXT:    movl r2, arr5 [mem_high]
; CHECK-NEXT:    memread.atomic.32.align[4].tls r2, r1, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = load atomic i32, i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @arr5, i64 0, i64 0) seq_cst, align 4
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_read_as6() #0 {
; CHECK-LABEL: test_atomic_read_as6:
; CHECK:       .Ltest_atomic_read_as6$local:
; CHECK:       .type   .Ltest_atomic_read_as6$local,@function
; CHECK-NEXT:  LBB2_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, arr6 [mem_low]
; CHECK-NEXT:    movl r2, arr6 [mem_high]
; CHECK-NEXT:    memread.atomic.32.align[4].global r2, r1, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = load atomic i32, i32 addrspace(274)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(274)* @arr6, i64 0, i64 0) seq_cst, align 4
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_read_as7() #0 {
; CHECK-LABEL: test_atomic_read_as7:
; CHECK:       .Ltest_atomic_read_as7$local:
; CHECK:       .type   .Ltest_atomic_read_as7$local,@function
; CHECK-NEXT:  LBB3_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, arr7 [mem_low]
; CHECK-NEXT:    movl r2, arr7 [mem_high]
; CHECK-NEXT:    memread.atomic.32.align[4].const r2, r1, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = load atomic i32, i32 addrspace(275)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(275)* @arr7, i64 0, i64 0) seq_cst, align 4
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_generic:
; CHECK:       .Ltest_atomic_fetch_add_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_generic$local,@function
; CHECK-NEXT:  LBB4_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 seq_cst
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_local:
; CHECK:       .Ltest_atomic_fetch_add_local$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_local$local,@function
; CHECK-NEXT:  LBB5_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp0
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB5_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB5_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 seq_cst
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_shared() #0 {
; CHECK-LABEL: test_atomic_fetch_add_shared:
; CHECK:       .Ltest_atomic_fetch_add_shared$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_shared$local,@function
; CHECK-NEXT:  LBB6_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, shared [mem_low]
; CHECK-NEXT:    movl r3, shared [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4].global r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32 addrspace(274)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(274)* @shared, i64 0, i64 0), i32 1 seq_cst
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_constant() #0 {
; CHECK-LABEL: test_atomic_fetch_add_constant:
; CHECK:       .Ltest_atomic_fetch_add_constant$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_constant$local,@function
; CHECK-NEXT:  LBB7_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, constant [mem_low]
; CHECK-NEXT:    movl r3, constant [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4].const r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32 addrspace(275)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(275)* @constant, i64 0, i64 0), i32 1 seq_cst
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_relaxed_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_relaxed_generic:
; CHECK:       .Ltest_atomic_fetch_add_explicit_relaxed_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_relaxed_generic$local,@function
; CHECK-NEXT:  LBB8_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 monotonic
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_consume_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_consume_generic:
; CHECK:       .Ltest_atomic_fetch_add_explicit_consume_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_consume_generic$local,@function
; CHECK-NEXT:  LBB9_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 acquire
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_acquire_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_acquire_generic:
; CHECK:       .Ltest_atomic_fetch_add_explicit_acquire_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_acquire_generic$local,@function
; CHECK-NEXT:  LBB10_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 acquire
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_release_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_release_generic:
; CHECK:       .Ltest_atomic_fetch_add_explicit_release_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_release_generic$local,@function
; CHECK-NEXT:  LBB11_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 release
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_acq_rel_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_acq_rel_generic:
; CHECK:       .Ltest_atomic_fetch_add_explicit_acq_rel_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_acq_rel_generic$local,@function
; CHECK-NEXT:  LBB12_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 acq_rel
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_seq_cst_generic() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_seq_cst_generic:
; CHECK:       .Ltest_atomic_fetch_add_explicit_seq_cst_generic$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_seq_cst_generic$local,@function
; CHECK-NEXT:  LBB13_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0x1
; CHECK-NEXT:    movl r2, generic [mem_low]
; CHECK-NEXT:    movl r3, generic [mem_high]
; CHECK-NEXT:    memfa.add.32.align[4] r3, r2, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r1
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  %1 = atomicrmw add i32* getelementptr inbounds ([34 x i32], [34 x i32]* @generic, i64 0, i64 0), i32 1 seq_cst
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_relaxed_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_relaxed_local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_relaxed_local$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_relaxed_local$local,@function
; CHECK-NEXT:  LBB14_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp1
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB14_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB14_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 monotonic
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_consume_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_consume_local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_consume_local$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_consume_local$local,@function
; CHECK-NEXT:  LBB15_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp2
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB15_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB15_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 acquire
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_acquire_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_acquire_local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_acquire_local$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_acquire_local$local,@function
; CHECK-NEXT:  LBB16_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp3
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB16_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB16_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp3:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 acquire
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_release_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_release_local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_release_local$local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_release_local$local,@function
; CHECK-NEXT:  LBB17_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp4
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB17_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB17_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 release
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_acq_rel_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_acq_rel_local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_acq_rel_local$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_acq_rel_local$local,@function
; CHECK-NEXT:  LBB18_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp5
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB18_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB18_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 acq_rel
  ret i32 %1
}

; Function Attrs: nofree norecurse nounwind willreturn
define dso_local i32 @test_atomic_fetch_add_explicit_seq_cst_local() #0 {
; CHECK-LABEL: test_atomic_fetch_add_explicit_seq_cst_local:
; CHECK:       .Ltest_atomic_fetch_add_explicit_seq_cst_local$local:
; CHECK:       .type	.Ltest_atomic_fetch_add_explicit_seq_cst_local$local,@function
; CHECK-NEXT:  LBB19_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp6
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB19_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB19_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp6:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    movl r3, 0x1
; CHECK-NEXT:    movl r4, local [mem_low]
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r5, r4
; CHECK-NEXT:    leabase r1, r2
; CHECK-NEXT:    memfa.add.32.align[4].tls r1, r2, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r3
  %1 = atomicrmw add i32 addrspace(273)* getelementptr inbounds ([34 x i32], [34 x i32] addrspace(273)* @local, i64 0, i64 0), i32 1 seq_cst
  ret i32 %1
}

; Function Attrs: nounwind
define dso_local void @test_atomic_compare_exchange_generic() #1 {
; CHECK-LABEL: test_atomic_compare_exchange_generic:
; CHECK:       .Ltest_atomic_compare_exchange_generic$local:
; CHECK:       .type	.Ltest_atomic_compare_exchange_generic$local,@function
; CHECK-NEXT:  LBB20_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, desired [mem_low]
; CHECK-NEXT:    movl r3, desired [mem_high]
; CHECK-NEXT:    memread.8.align[1] r3, r1, tid
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    movl r4, expected [mem_low]
; CHECK-NEXT:    movl r6, expected [mem_high]
; CHECK-NEXT:    memread.8.align[1] r6, r4, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    dup r9, tid
; CHECK-NEXT:    barrier r9, r8
; CHECK-NEXT:    barrier r9, r2
; CHECK-NEXT:    movl r5, generic_v [mem_low]
; CHECK-NEXT:    movl r7, generic_v [mem_high]
; CHECK-NEXT:    memcas.8.align[1] r7, r5, r9
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    dup r10, r2
; CHECK-NEXT:    sub r10, r8
; CHECK-NEXT:    dup r8, r10
; CHECK-NEXT:    flags r8
; CHECK-NEXT:    barrier r9, r2
; CHECK-NEXT:    dup tid, r9
; CHECK-NEXT:    movl mbb_addr, LBB20_6
; CHECK-NEXT:    chain.e mbb_addr, 0x32 [r8]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB20_1
; CHECK-NEXT:    chain.ne mbb_addr, 0x32 [r8]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:  LBB20_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    dup r8, r2
; CHECK-NEXT:    memwrite.8.align[1] r6, r4, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memread.8.align[1] r3, r1, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r1
; CHECK-NEXT:    barrier r4, r8
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    memcas.8.align[1] r7, r5, r4
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r5, r3
; CHECK-NEXT:    sub r5, r2
; CHECK-NEXT:    dup r2, r5
; CHECK-NEXT:    flags r2
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    movl mbb_addr, LBB20_6
; CHECK-NEXT:    chain.e mbb_addr, 0x32 [r2]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB20_2
; CHECK-NEXT:    chain.ne mbb_addr, 0x32 [r2]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:  LBB20_2:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    movl r5, expected [mem_low]
; CHECK-NEXT:    movl r6, expected [mem_high]
; CHECK-NEXT:    dup r2, r3
; CHECK-NEXT:    memwrite.8.align[1] r6, r5, tid
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    dup r7, tid
; CHECK-NEXT:    barrier r7, r2
; CHECK-NEXT:    movl r2, generic_v [mem_low]
; CHECK-NEXT:    movl r4, generic_v [mem_high]
; CHECK-NEXT:    memcas.8.align[1] r4, r2, r7
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    sub r8, r3
; CHECK-NEXT:    dup r3, r8
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    barrier r7, r1
; CHECK-NEXT:    dup tid, r7
; CHECK-NEXT:    movl mbb_addr, LBB20_6
; CHECK-NEXT:    chain.e mbb_addr, 0x32 [r3]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB20_3
; CHECK-NEXT:    chain.ne mbb_addr, 0x32 [r3]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:  LBB20_3:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    memwrite.8.align[1] r6, r5, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    movl r3, desired [mem_low]
; CHECK-NEXT:    movl r5, desired [mem_high]
; CHECK-NEXT:    memread.8.align[1] r5, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r5, tid
; CHECK-NEXT:    barrier r5, r3
; CHECK-NEXT:    barrier r5, r7
; CHECK-NEXT:    memcas.8.align[1] r4, r2, r5
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r2, r3
; CHECK-NEXT:    sub r2, r1
; CHECK-NEXT:    dup r1, r2
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    barrier r5, r3
; CHECK-NEXT:    dup tid, r5
; CHECK-NEXT:    movl mbb_addr, LBB20_6
; CHECK-NEXT:    chain.e mbb_addr, 0x64 [r1]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB20_4
; CHECK-NEXT:    chain.ne mbb_addr, 0x0 [r1]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:  LBB20_4:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    movl r1, expected [mem_low]
; CHECK-NEXT:    movl r2, expected [mem_high]
; CHECK-NEXT:    memwrite.8.align[1] r2, r1, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    movl call_addr, abort
; CHECK-NEXT:    movl call_ret_fid, .Ltmp7
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB20_5
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB20_5:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp7:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:  LBB20_6:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
  %1 = load i8, i8* @desired, align 1
  %2 = load i8, i8* @expected, align 1
  %3 = cmpxchg i8* @generic_v, i8 %2, i8 %1 seq_cst seq_cst
  %4 = extractvalue { i8, i1 } %3, 1
  br i1 %4, label %21, label %5

5:                                                ; preds = %0
  %6 = extractvalue { i8, i1 } %3, 0
  store i8 %6, i8* @expected, align 1
  %7 = load i8, i8* @desired, align 1
  %8 = cmpxchg i8* @generic_v, i8 %6, i8 %7 monotonic monotonic
  %9 = extractvalue { i8, i1 } %8, 1
  br i1 %9, label %21, label %10

10:                                               ; preds = %5
  %11 = extractvalue { i8, i1 } %8, 0
  store i8 %11, i8* @expected, align 1
  %12 = cmpxchg weak i8* @generic_v, i8 %11, i8 %7 seq_cst seq_cst
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %21, label %14

14:                                               ; preds = %10
  %15 = extractvalue { i8, i1 } %12, 0
  store i8 %15, i8* @expected, align 1
  %16 = load i8, i8* @desired, align 1
  %17 = cmpxchg weak i8* @generic_v, i8 %15, i8 %16 monotonic monotonic
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = extractvalue { i8, i1 } %17, 0
  store i8 %20, i8* @expected, align 1
  tail call void @abort() #3
  unreachable

21:                                               ; preds = %14, %10, %5, %0
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #2

; Function Attrs: nounwind
define dso_local void @test_atomic_compare_exchange_local() #1 {
; CHECK-LABEL: test_atomic_compare_exchange_local:
; CHECK:       .Ltest_atomic_compare_exchange_local$local:
; CHECK:       .type	.Ltest_atomic_compare_exchange_local$local,@function
; CHECK-NEXT:  LBB21_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, desired [mem_low]
; CHECK-NEXT:    movl r3, desired [mem_high]
; CHECK-NEXT:    memread.8.align[1] r3, r1, tid
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    movl r5, expected [mem_low]
; CHECK-NEXT:    movl r7, expected [mem_high]
; CHECK-NEXT:    memread.8.align[1] r7, r5, tid
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp8
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB21_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r1
; CHECK-NEXT:    writer.32 call_ret_bb, r2
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r5
; CHECK-NEXT:    writer.32 call_ret_bb, r7
; CHECK-NEXT:    writer.32 call_ret_bb, r9
; CHECK-NEXT:  LBB21_1:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:  .Ltmp8:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r11
; CHECK-NEXT:    feeder.64 r10
; CHECK-NEXT:    movl r4, 0x1
; CHECK-NEXT:    movl r6, local_v [mem_low]
; CHECK-NEXT:    movl r8, 0x0
; CHECK-NEXT:    leadisp r8, r8
; CHECK-NEXT:    leascale r8, r4
; CHECK-NEXT:    leaindex r8, r6
; CHECK-NEXT:    leabase r10, r11
; CHECK-NEXT:    dup r12, tid
; CHECK-NEXT:    barrier r12, r9
; CHECK-NEXT:    barrier r12, r2
; CHECK-NEXT:    memcas.8.align[1].tls r10, r11, r12
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    dup r10, r2
; CHECK-NEXT:    sub r10, r9
; CHECK-NEXT:    dup r9, r10
; CHECK-NEXT:    flags r9
; CHECK-NEXT:    barrier r12, r2
; CHECK-NEXT:    dup tid, r12
; CHECK-NEXT:    movl mbb_addr, LBB21_10
; CHECK-NEXT:    chain.e mbb_addr, 0x32 [r9]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB21_2
; CHECK-NEXT:    chain.ne mbb_addr, 0x32 [r9]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:  LBB21_2:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    dup r9, r2
; CHECK-NEXT:    memwrite.8.align[1] r7, r5, tid
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memread.8.align[1] r3, r1, tid
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp9
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB21_3
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r1
; CHECK-NEXT:    writer.32 call_ret_bb, r2
; CHECK-NEXT:    writer.32 call_ret_bb, r4
; CHECK-NEXT:    writer.32 call_ret_bb, r6
; CHECK-NEXT:    writer.32 call_ret_bb, r8
; CHECK-NEXT:    writer.32 call_ret_bb, r9
; CHECK-NEXT:  LBB21_3:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:  .Ltmp9:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r7
; CHECK-NEXT:    feeder.64 r5
; CHECK-NEXT:    leadisp r8, r8
; CHECK-NEXT:    leascale r8, r4
; CHECK-NEXT:    leaindex r8, r6
; CHECK-NEXT:    leabase r5, r7
; CHECK-NEXT:    dup r4, tid
; CHECK-NEXT:    barrier r4, r1
; CHECK-NEXT:    barrier r4, r9
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    memcas.8.align[1].tls r5, r7, r4
; CHECK-NEXT:    memdata r2
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r5, r3
; CHECK-NEXT:    sub r5, r2
; CHECK-NEXT:    dup r2, r5
; CHECK-NEXT:    flags r2
; CHECK-NEXT:    barrier r4, r3
; CHECK-NEXT:    dup tid, r4
; CHECK-NEXT:    movl mbb_addr, LBB21_10
; CHECK-NEXT:    chain.e mbb_addr, 0x32 [r2]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB21_4
; CHECK-NEXT:    chain.ne mbb_addr, 0x32 [r2]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:  LBB21_4:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    movl r5, expected [mem_low]
; CHECK-NEXT:    movl r7, expected [mem_high]
; CHECK-NEXT:    dup r8, r3
; CHECK-NEXT:    memwrite.8.align[1] r7, r5, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp10
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB21_5
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r1
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r5
; CHECK-NEXT:    writer.32 call_ret_bb, r7
; CHECK-NEXT:    writer.32 call_ret_bb, r8
; CHECK-NEXT:  LBB21_5:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:  .Ltmp10:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r10
; CHECK-NEXT:    feeder.64 r9
; CHECK-NEXT:    movl r2, 0x1
; CHECK-NEXT:    movl r4, local_v [mem_low]
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    leadisp r6, r6
; CHECK-NEXT:    leascale r6, r2
; CHECK-NEXT:    leaindex r6, r4
; CHECK-NEXT:    leabase r9, r10
; CHECK-NEXT:    dup r11, tid
; CHECK-NEXT:    barrier r11, r8
; CHECK-NEXT:    memcas.8.align[1].tls r9, r10, r11
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    sub r8, r3
; CHECK-NEXT:    dup r3, r8
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    barrier r11, r1
; CHECK-NEXT:    dup tid, r11
; CHECK-NEXT:    movl mbb_addr, LBB21_10
; CHECK-NEXT:    chain.e mbb_addr, 0x32 [r3]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB21_6
; CHECK-NEXT:    chain.ne mbb_addr, 0x32 [r3]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:  LBB21_6:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    dup r8, r1
; CHECK-NEXT:    memwrite.8.align[1] r7, r5, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    movl r3, desired [mem_low]
; CHECK-NEXT:    movl r5, desired [mem_high]
; CHECK-NEXT:    memread.8.align[1] r5, r3, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    movl call_addr, __next32_tls_base
; CHECK-NEXT:    movl call_ret_fid, .Ltmp11
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB21_7
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r1
; CHECK-NEXT:    writer.32 call_ret_bb, r2
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r4
; CHECK-NEXT:    writer.32 call_ret_bb, r6
; CHECK-NEXT:    writer.32 call_ret_bb, r8
; CHECK-NEXT:  LBB21_7:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:  .Ltmp11:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.64 r7
; CHECK-NEXT:    feeder.64 r5
; CHECK-NEXT:    leadisp r6, r6
; CHECK-NEXT:    leascale r6, r2
; CHECK-NEXT:    leaindex r6, r4
; CHECK-NEXT:    leabase r5, r7
; CHECK-NEXT:    dup r2, tid
; CHECK-NEXT:    barrier r2, r3
; CHECK-NEXT:    barrier r2, r8
; CHECK-NEXT:    memcas.8.align[1].tls r5, r7, r2
; CHECK-NEXT:    memdata r1
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r4, r3
; CHECK-NEXT:    sub r4, r1
; CHECK-NEXT:    dup r1, r4
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    barrier r2, r3
; CHECK-NEXT:    dup tid, r2
; CHECK-NEXT:    movl mbb_addr, LBB21_10
; CHECK-NEXT:    chain.e mbb_addr, 0x64 [r1]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    movl mbb_addr, LBB21_8
; CHECK-NEXT:    chain.ne mbb_addr, 0x0 [r1]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:  LBB21_8:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    movl r1, expected [mem_low]
; CHECK-NEXT:    movl r2, expected [mem_high]
; CHECK-NEXT:    memwrite.8.align[1] r2, r1, tid
; CHECK-NEXT:    memdata r3
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r3
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    movl call_addr, abort
; CHECK-NEXT:    movl call_ret_fid, .Ltmp12
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    movl call_ret_bb, LBB21_9
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB21_9:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp12:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:  LBB21_10:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
  %1 = load i8, i8* @desired, align 1
  %2 = load i8, i8* @expected, align 1
  %3 = cmpxchg i8 addrspace(273)* @local_v, i8 %2, i8 %1 seq_cst seq_cst
  %4 = extractvalue { i8, i1 } %3, 1
  br i1 %4, label %21, label %5

5:                                                ; preds = %0
  %6 = extractvalue { i8, i1 } %3, 0
  store i8 %6, i8* @expected, align 1
  %7 = load i8, i8* @desired, align 1
  %8 = cmpxchg i8 addrspace(273)* @local_v, i8 %6, i8 %7 monotonic monotonic
  %9 = extractvalue { i8, i1 } %8, 1
  br i1 %9, label %21, label %10

10:                                               ; preds = %5
  %11 = extractvalue { i8, i1 } %8, 0
  store i8 %11, i8* @expected, align 1
  %12 = cmpxchg weak i8 addrspace(273)* @local_v, i8 %11, i8 %7 seq_cst seq_cst
  %13 = extractvalue { i8, i1 } %12, 1
  br i1 %13, label %21, label %14

14:                                               ; preds = %10
  %15 = extractvalue { i8, i1 } %12, 0
  store i8 %15, i8* @expected, align 1
  %16 = load i8, i8* @desired, align 1
  %17 = cmpxchg weak i8 addrspace(273)* @local_v, i8 %15, i8 %16 monotonic monotonic
  %18 = extractvalue { i8, i1 } %17, 1
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = extractvalue { i8, i1 } %17, 0
  store i8 %20, i8* @expected, align 1
  tail call void @abort() #3
  unreachable

21:                                               ; preds = %14, %10, %5, %0
  ret void
}
