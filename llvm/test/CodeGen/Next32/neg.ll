; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i8 @neg1(i8 noundef zeroext %0) {
; CHECK-LABEL: neg1
; CHECK:    neg r1
; CHECK-NEXT:    zext.8 r1
  %2 = sub i8 0, %0
  ret i8 %2
}

define dso_local zeroext i16 @neg2(i16 noundef zeroext %0) {
; CHECK-LABEL: neg2
; CHECK:    neg r1
; CHECK-NEXT:    zext.16 r1
  %2 = sub i16 0, %0
  ret i16 %2
}

define dso_local i32 @neg3(i32 noundef %0) {
; CHECK-LABEL: neg3
; CHECK:    neg r1
  %2 = sub i32 0, %0
  ret i32 %2
}

define dso_local i64 @neg4(i64 noundef %0) {
; CHECK-LABEL: neg4
; CHECK:    movl r3, 0x0
; CHECK-NEXT:    dup r4, r3
; CHECK-NEXT:    sub r4, r1
; CHECK-NEXT:    dup r1, r4
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    sbb r3, r2 [r1]
  %2 = sub i64 0, %0
  ret i64 %2
}

define dso_local i128 @neg5(i128 noundef %0) {
; CHECK-LABEL: neg5
; CHECK:    movl r5, 0x0
; CHECK-NEXT:    dup r6, r5
; CHECK-NEXT:    sub r6, r1
; CHECK-NEXT:    dup r1, r6
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    dup r7, r5
; CHECK-NEXT:    sbb r7, r2 [r1]
; CHECK-NEXT:    dup r1, r7
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    dup r2, r5
; CHECK-NEXT:    sbb r2, r3 [r1]
; CHECK-NEXT:    dup r1, r2
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    sbb r5, r4 [r1]
  %2 = sub i128 0, %0
  ret i128 %2
}

define dso_local <8 x i32> @neg15(<8 x i32> noundef %0) {
; CHECK-LABEL: neg15
; CHECK:    neg r8
; CHECK-NEXT:    neg r7
; CHECK-NEXT:    neg r6
; CHECK-NEXT:    neg r5
; CHECK-NEXT:    neg r4
; CHECK-NEXT:    neg r3
; CHECK-NEXT:    neg r2
; CHECK-NEXT:    neg r1
  %2 = sub <8 x i32> zeroinitializer, %0
  ret <8 x i32> %2
}

define dso_local <16 x i32> @neg16(<16 x i32> noundef %0) {
; CHECK-LABEL: neg16
; CHECK:    neg r16
; CHECK-NEXT:    neg r15
; CHECK-NEXT:    neg r14
; CHECK-NEXT:    neg r13
; CHECK-NEXT:    neg r12
; CHECK-NEXT:    neg r11
; CHECK-NEXT:    neg r10
; CHECK-NEXT:    neg r9
; CHECK-NEXT:    neg r8
; CHECK-NEXT:    neg r7
; CHECK-NEXT:    neg r6
; CHECK-NEXT:    neg r5
; CHECK-NEXT:    neg r4
; CHECK-NEXT:    neg r3
; CHECK-NEXT:    neg r2
; CHECK-NEXT:    neg r1
  %2 = sub <16 x i32> zeroinitializer, %0
  ret <16 x i32> %2
}

define dso_local <32 x i32> @neg17(<32 x i32> noundef %0) {
; CHECK-LABEL: neg17
; CHECK:    neg r32
; CHECK-NEXT:    neg r31
; CHECK-NEXT:    neg r30
; CHECK-NEXT:    neg r29
; CHECK-NEXT:    neg r28
; CHECK-NEXT:    neg r27
; CHECK-NEXT:    neg r26
; CHECK-NEXT:    neg r25
; CHECK-NEXT:    neg r24
; CHECK-NEXT:    neg r23
; CHECK-NEXT:    neg r22
; CHECK-NEXT:    neg r21
; CHECK-NEXT:    neg r20
; CHECK-NEXT:    neg r19
; CHECK-NEXT:    neg r18
; CHECK-NEXT:    neg r17
; CHECK-NEXT:    neg r16
; CHECK-NEXT:    neg r15
; CHECK-NEXT:    neg r14
; CHECK-NEXT:    neg r13
; CHECK-NEXT:    neg r12
; CHECK-NEXT:    neg r11
; CHECK-NEXT:    neg r10
; CHECK-NEXT:    neg r9
; CHECK-NEXT:    neg r8
; CHECK-NEXT:    neg r7
; CHECK-NEXT:    neg r6
; CHECK-NEXT:    neg r5
; CHECK-NEXT:    neg r4
; CHECK-NEXT:    neg r3
; CHECK-NEXT:    neg r2
; CHECK-NEXT:    neg r1
  %2 = sub <32 x i32> zeroinitializer, %0
  ret <32 x i32> %2
}
