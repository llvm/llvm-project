; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -filetype=obj -o %t < %s
; RUN: llvm-dwarfdump -v -debug-info %t | \
; RUN:   FileCheck %s --check-prefixes=CHECK


; CHECK:                 DW_AT_low_pc [DW_FORM_addr]     (0x0000000000000000 ".text")
; CHECK:                 DW_AT_high_pc [DW_FORM_data4]   (0x[[SCOPE:[0-9a-fA-F]+]])
; CHECK:                 DW_AT_frame_base [DW_FORM_exprloc]      (DW_OP_regx SP_LOW)
; CHECK:                 DW_AT_name [DW_FORM_strp]       ( .debug_str[0x[[SCOPE:[0-9a-fA-F]+]]] = "foo")


; CHECK:                  DW_AT_location [DW_FORM_exprloc]      (DW_OP_fbreg +0)
; CHECK-NEXT:                  DW_AT_name [DW_FORM_strp]     ( .debug_str[0x[[SCOPE:[0-9a-fA-F]+]]] = "val")

; CHECK:                  DW_AT_location [DW_FORM_exprloc]      (DW_OP_fbreg +4)
; CHECK-NEXT:                  DW_AT_name [DW_FORM_strp]     ( .debug_str[0x[[SCOPE:[0-9a-fA-F]+]]] = "array")


; Original C source:
; int extern_foo(int * a);
;
; int * foo() {
; 	int val;
; 	int array[100];
; 	array[2] = extern_foo(&val);
; 	return &array[2];
; }

; Function Attrs: noinline nounwind optnone
define dso_local i32* @foo() #0 !dbg !7 {
  %1 = alloca i32, align 4
  %2 = alloca [100 x i32], align 4
  call void @llvm.dbg.declare(metadata i32* %1, metadata !12, metadata !DIExpression()), !dbg !13
  call void @llvm.dbg.declare(metadata [100 x i32]* %2, metadata !14, metadata !DIExpression()), !dbg !18
  %3 = call i32 @extern_foo(i32* %1), !dbg !19
  %4 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 2, !dbg !20
  store i32 %3, i32* %4, align 4, !dbg !21
  %5 = getelementptr inbounds [100 x i32], [100 x i32]* %2, i64 0, i64 2, !dbg !22
  ret i32* %5, !dbg !23
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local i32 @extern_foo(i32*) #2

attributes #0 = { noinline nounwind optnone "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "NextSilicon clang version 12.0.1 (git@github.com:nextsilicon/next-llvm-project.git", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "test.c", directory: "/playground/Debug")
!2 = !{}
!3 = !{i32 7, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"NextSilicon clang version 12.0.1 (git@github.com:nextsilicon/next-llvm-project.git"}
!7 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 4, type: !8, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10}
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11, size: 64)
!11 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!12 = !DILocalVariable(name: "val", scope: !7, file: !1, line: 5, type: !11)
!13 = !DILocation(line: 5, column: 6, scope: !7)
!14 = !DILocalVariable(name: "array", scope: !7, file: !1, line: 6, type: !15)
!15 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 3200, elements: !16)
!16 = !{!17}
!17 = !DISubrange(count: 100)
!18 = !DILocation(line: 6, column: 6, scope: !7)
!19 = !DILocation(line: 7, column: 13, scope: !7)
!20 = !DILocation(line: 7, column: 2, scope: !7)
!21 = !DILocation(line: 7, column: 11, scope: !7)
!22 = !DILocation(line: 8, column: 10, scope: !7)
!23 = !DILocation(line: 8, column: 2, scope: !7)
