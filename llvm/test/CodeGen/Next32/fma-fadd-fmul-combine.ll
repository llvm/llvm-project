; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -mtriple=next32 -mcpu=next32gen1 < %s | FileCheck %s --check-prefix=NO-FMA
; RUN: llc -mtriple=next32 -mcpu=next32gen2 < %s | FileCheck %s --check-prefix=PREFER-FMA

; Original C++ source:
; #include <array>
; #include <complex>
; #include <cstdint>
; #include <cstring>
;
; using Real = float;
; using Complex = std::complex<Real>;
; using Complex2 = std::array<Complex, 2>;
;
; static inline Complex2 dit_fma_radix2(Complex2 in, Complex tw) {
;     Complex2 out;
;     out[0] = in[0] + tw * in[1];
;     out[1] = Real(2) * in[0] - out[0];
;     return out;
; }
;
; #pragma ns location grid
; void foo(Complex2 *p, Complex tw) {
;     *p = dit_fma_radix2(*p, tw);
; }
;
; int main() { return 0; }

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: readwrite) uwtable
define internal void @_Z3fooPNSt3__15arrayINS_7complexIfEELm2EEES2_(ptr nocapture noundef %0, <2 x float> %1) {
; NO-FMA-LABEL: _Z3fooPNSt3__15arrayINS_7complexIfEELm2EEES2_:
; NO-FMA:    movl call_addr, __addsf3
; NO-FMA:    movl call_addr, __mulsf3
; NO-FMA:    movl call_addr, __mulsf3
; NO-FMA:    movl call_addr, __addsf3
; NO-FMA:    movl call_addr, __mulsf3
; NO-FMA:    movl call_addr, __mulsf3
; NO-FMA:    movl call_addr, __addsf3
; NO-FMA:    movl call_addr, __subsf3
; NO-FMA:    movl call_addr, __addsf3
; NO-FMA:    movl call_addr, __addsf3
; NO-FMA:    movl call_addr, __subsf3
; NO-FMA:    movl call_addr, __subsf3
;
; PREFER-FMA-LABEL: _Z3fooPNSt3__15arrayINS_7complexIfEELm2EEES2_:
; PREFER-FMA:    movl call_addr, fmaf
; PREFER-FMA:    movl call_addr, fmaf
; PREFER-FMA:    movl call_addr, fmaf
; PREFER-FMA:    movl call_addr, fmaf
; PREFER-FMA:    movl call_addr, fmaf
; PREFER-FMA:    movl call_addr, fmaf
  %3 = load <2 x float>, ptr %0, align 4
  %4 = getelementptr inbounds i8, ptr %0, i64 8
  %5 = load <2 x float>, ptr %4, align 4
  %6 = extractelement <2 x float> %1, i64 0
  %7 = extractelement <2 x float> %1, i64 1
  %8 = extractelement <2 x float> %5, i64 0
  %9 = extractelement <2 x float> %5, i64 1
  %10 = fmul fast <2 x float> %5, %1
  %11 = extractelement <2 x float> %10, i64 0
  %12 = fmul fast float %9, %7
  %13 = fmul fast float %9, %6
  %14 = fmul fast float %8, %7
  %15 = fsub fast float %11, %12
  %16 = extractelement <2 x float> %3, i64 0
  %17 = fadd fast float %15, %16
  %18 = insertelement <2 x float> poison, float %17, i64 0
  %19 = extractelement <2 x float> %3, i64 1
  %20 = fadd fast float %14, %19
  %21 = fadd fast float %20, %13
  %22 = insertelement <2 x float> %18, float %21, i64 1
  %23 = fmul fast float %16, 2.000000e+00
  %24 = fmul fast float %19, 2.000000e+00
  %25 = fsub fast float %23, %17
  %26 = insertelement <2 x float> poison, float %25, i64 0
  %27 = fsub fast float %24, %21
  %28 = insertelement <2 x float> %26, float %27, i64 1
  store <2 x float> %22, ptr %0, align 4
  store <2 x float> %28, ptr %4, align 4
  ret void
}
