; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i8 @setresetframe8() {
; CHECK-LABEL: setresetframe8
; CHECK:    movl stack_size, 0x20
; CHECK-NEXT:    setframe sp_high, sp_low, stack_size, tid
; CHECK-NEXT:    barrier tid, stack_size
; CHECK:    resetframe sp_high, sp_low, tid
; CHECK-NEXT:    barrier tid, sp_high
  %1 = alloca [10 x i8], align 1
  %2 = alloca [10 x i8], align 1
  %3 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %3)
  %4 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %4)
  %5 = call zeroext i8 @foo8(i8* noundef nonnull %3, i8* noundef nonnull %4)
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %1, i64 0, i64 1
  %7 = load i8, i8* %6, align 1
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %3)
  ret i8 %7
}

declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture)

declare dso_local zeroext i8 @foo8(i8* noundef, i8* noundef)

declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture)

define dso_local zeroext i16 @setresetframe16() {
; CHECK-LABEL: setresetframe16
; CHECK:    movl stack_size, 0x30
; CHECK-NEXT:    setframe sp_high, sp_low, stack_size, tid
; CHECK-NEXT:    barrier tid, stack_size
; CHECK:    resetframe sp_high, sp_low, tid
; CHECK-NEXT:    barrier tid, sp_high
  %1 = alloca [10 x i16], align 2
  %2 = alloca [10 x i16], align 2
  %3 = bitcast [10 x i16]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %3)
  %4 = bitcast [10 x i16]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %4)
  %5 = getelementptr inbounds [10 x i16], [10 x i16]* %1, i64 0, i64 0
  %6 = getelementptr inbounds [10 x i16], [10 x i16]* %2, i64 0, i64 0
  %7 = call zeroext i16 @foo16(i16* noundef nonnull %5, i16* noundef nonnull %6)
  %8 = getelementptr inbounds [10 x i16], [10 x i16]* %1, i64 0, i64 1
  %9 = load i16, i16* %8, align 2
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %3)
  ret i16 %9
}

declare dso_local zeroext i16 @foo16(i16* noundef, i16* noundef)

define dso_local i32 @setresetframe32() {
; CHECK-LABEL: setresetframe32
; CHECK:    movl stack_size, 0x50
; CHECK-NEXT:    setframe sp_high, sp_low, stack_size, tid
; CHECK-NEXT:    barrier tid, stack_size
; CHECK:    resetframe sp_high, sp_low, tid
; CHECK-NEXT:    barrier tid, sp_high
  %1 = alloca [10 x i32], align 4
  %2 = alloca [10 x i32], align 4
  %3 = bitcast [10 x i32]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %3)
  %4 = bitcast [10 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4)
  %5 = getelementptr inbounds [10 x i32], [10 x i32]* %1, i64 0, i64 0
  %6 = getelementptr inbounds [10 x i32], [10 x i32]* %2, i64 0, i64 0
  %7 = call i32 @foo32(i32* noundef nonnull %5, i32* noundef nonnull %6)
  %8 = getelementptr inbounds [10 x i32], [10 x i32]* %1, i64 0, i64 1
  %9 = load i32, i32* %8, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %3)
  ret i32 %9
}

declare dso_local i32 @foo32(i32* noundef, i32* noundef)

define dso_local i64 @setresetframe64() {
; CHECK-LABEL: setresetframe64
; CHECK:    movl stack_size, 0xA0
; CHECK-NEXT:    setframe sp_high, sp_low, stack_size, tid
; CHECK-NEXT:    barrier tid, stack_size
; CHECK:    resetframe sp_high, sp_low, tid
; CHECK-NEXT:    barrier tid, sp_high
  %1 = alloca [10 x i64], align 8
  %2 = alloca [10 x i64], align 8
  %3 = bitcast [10 x i64]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %3)
  %4 = bitcast [10 x i64]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %4)
  %5 = getelementptr inbounds [10 x i64], [10 x i64]* %1, i64 0, i64 0
  %6 = getelementptr inbounds [10 x i64], [10 x i64]* %2, i64 0, i64 0
  %7 = call i64 @foo64(i64* noundef nonnull %5, i64* noundef nonnull %6)
  %8 = getelementptr inbounds [10 x i64], [10 x i64]* %1, i64 0, i64 1
  %9 = load i64, i64* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %3)
  ret i64 %9
}

declare dso_local i64 @foo64(i64* noundef, i64* noundef)

define dso_local i128 @setresetframe128() {
; CHECK-LABEL: setresetframe128
; CHECK:    movl stack_size, 0x140
; CHECK-NEXT:    setframe sp_high, sp_low, stack_size, tid
; CHECK-NEXT:    barrier tid, stack_size
; CHECK:    resetframe sp_high, sp_low, tid
; CHECK-NEXT:    barrier tid, sp_high
  %1 = alloca [10 x i128], align 16
  %2 = alloca [10 x i128], align 16
  %3 = bitcast [10 x i128]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %3)
  %4 = bitcast [10 x i128]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %4)
  %5 = getelementptr inbounds [10 x i128], [10 x i128]* %1, i64 0, i64 0
  %6 = getelementptr inbounds [10 x i128], [10 x i128]* %2, i64 0, i64 0
  %7 = call i128 @foo128(i128* noundef nonnull %5, i128* noundef nonnull %6)
  %8 = getelementptr inbounds [10 x i128], [10 x i128]* %1, i64 0, i64 1
  %9 = load i128, i128* %8, align 16
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %3)
  ret i128 %9
}

declare dso_local i128 @foo128(i128* noundef, i128* noundef)
