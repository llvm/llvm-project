; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i8 @dec1(i8 noundef zeroext %0) {
; CHECK-LABEL: dec1
; CHECK:    dec r1
; CHECK-NEXT:    zext.8 r1
  %const = bitcast i8 1 to i8
  %2 = sub i8 %0, %const
  ret i8 %2
}

define dso_local zeroext i16 @dec2(i16 noundef zeroext %0) {
; CHECK-LABEL: dec2
; CHECK:    dec r1
; CHECK-NEXT:    zext.16 r1
  %const = bitcast i16 1 to i16
  %2 = sub i16 %0, %const
  ret i16 %2
}

define dso_local i32 @dec3(i32 noundef %0) {
; CHECK-LABEL: dec3
; CHECK:    dec r1
  %const = bitcast i32 1 to i32
  %2 = sub i32 %0, %const
  ret i32 %2
}

define dso_local i64 @dec4(i64 noundef %0) {
; CHECK-LABEL: dec4
; CHECK:    movl r3, 0x1
; CHECK-NEXT:    sub r1, r3
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    flags r3
; CHECK-NEXT:    movl r4, 0x0
; CHECK-NEXT:    sbb r2, r4 [r3]
  %const = bitcast i64 1 to i64
  %2 = sub i64 %0, %const
  ret i64 %2
}

define dso_local i128 @dec5(i128 noundef %0) {
; CHECK-LABEL: dec5
; CHECK:    movl r5, 0x1
; CHECK-NEXT:    sub r1, r5
; CHECK-NEXT:    dup r5, r1
; CHECK-NEXT:    flags r5
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    sbb r2, r6 [r5]
; CHECK-NEXT:    dup r5, r2
; CHECK-NEXT:    flags r5
; CHECK-NEXT:    sbb r3, r6 [r5]
; CHECK-NEXT:    dup r5, r3
; CHECK-NEXT:    flags r5
; CHECK-NEXT:    sbb r4, r6 [r5]
  %const = bitcast i128 1 to i128
  %2 = sub i128 %0, %const
  ret i128 %2
}

define dso_local <8 x i32> @dec6(<8 x i32> noundef %0) {
; CHECK-LABEL: dec6
; CHECK:    movl r9, 0xFFFFFFFF
; CHECK-NEXT:    add r8, r9
; CHECK-NEXT:    add r7, r9
; CHECK-NEXT:    add r6, r9
; CHECK-NEXT:    add r5, r9
; CHECK-NEXT:    add r4, r9
; CHECK-NEXT:    add r3, r9
; CHECK-NEXT:    add r2, r9
; CHECK-NEXT:    add r1, r9
  %const = bitcast <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1> to <8 x i32>
  %2 = sub <8 x i32> %0, %const
  ret <8 x i32> %2
}

define dso_local <16 x i32> @dec7(<16 x i32> noundef %0) {
; CHECK-LABEL: dec7
; CHECK:    movl r17, 0xFFFFFFFF
; CHECK-NEXT:    add r16, r17
; CHECK-NEXT:    add r15, r17
; CHECK-NEXT:    add r14, r17
; CHECK-NEXT:    add r13, r17
; CHECK-NEXT:    add r12, r17
; CHECK-NEXT:    add r11, r17
; CHECK-NEXT:    add r10, r17
; CHECK-NEXT:    add r9, r17
; CHECK-NEXT:    add r8, r17
; CHECK-NEXT:    add r7, r17
; CHECK-NEXT:    add r6, r17
; CHECK-NEXT:    add r5, r17
; CHECK-NEXT:    add r4, r17
; CHECK-NEXT:    add r3, r17
; CHECK-NEXT:    add r2, r17
; CHECK-NEXT:    add r1, r17
  %const = bitcast <16 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1> to <16 x i32>
  %2 = sub <16 x i32> %0, %const
  ret <16 x i32> %2
}

define dso_local <32 x i32> @dec8(<32 x i32> noundef %0) {
; CHECK-LABEL: dec8
; CHECK:    movl r33, 0xFFFFFFFF
; CHECK-NEXT:    add r32, r33
; CHECK-NEXT:    add r31, r33
; CHECK-NEXT:    add r30, r33
; CHECK-NEXT:    add r29, r33
; CHECK-NEXT:    add r28, r33
; CHECK-NEXT:    add r27, r33
; CHECK-NEXT:    add r26, r33
; CHECK-NEXT:    add r25, r33
; CHECK-NEXT:    add r24, r33
; CHECK-NEXT:    add r23, r33
; CHECK-NEXT:    add r22, r33
; CHECK-NEXT:    add r21, r33
; CHECK-NEXT:    add r20, r33
; CHECK-NEXT:    add r19, r33
; CHECK-NEXT:    add r18, r33
; CHECK-NEXT:    add r17, r33
; CHECK-NEXT:    add r16, r33
; CHECK-NEXT:    add r15, r33
; CHECK-NEXT:    add r14, r33
; CHECK-NEXT:    add r13, r33
; CHECK-NEXT:    add r12, r33
; CHECK-NEXT:    add r11, r33
; CHECK-NEXT:    add r10, r33
; CHECK-NEXT:    add r9, r33
; CHECK-NEXT:    add r8, r33
; CHECK-NEXT:    add r7, r33
; CHECK-NEXT:    add r6, r33
; CHECK-NEXT:    add r5, r33
; CHECK-NEXT:    add r4, r33
; CHECK-NEXT:    add r3, r33
; CHECK-NEXT:    add r2, r33
; CHECK-NEXT:    add r1, r33
  %const = bitcast <32 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1> to <32 x i32>
  %2 = sub <32 x i32> %0, %const
  ret <32 x i32> %2
}
