; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

; f8_w8 IR is generated for the target triple = "x86_64"
define dso_local i8 @f8_w8(i8 noundef returned zeroext %0, i8* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f8_w8
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.8 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.8 r4
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:   writer.32 mbb_addr, ret_fid
; CHECK-NEXT:   writer.32 mbb_addr, r1
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.8 ret_fid, r1
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store i8 %0, i8* %1, align 1
  br label %5

5:                                                ; preds = %3, %4
  ret i8 %0
}

; f16_w16 IR is generated for the target triple = "x86_64"
define dso_local i16 @f16_w16(i16 noundef returned zeroext %0, i16* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f16_w16
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.16 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.8 r4
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.16 ret_fid, r1
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store i16 %0, i16* %1, align 2
  br label %5

5:                                                ; preds = %3, %4
  ret i16 %0
}

define dso_local i32 @f32_w32(i32 noundef %0, i32* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f32_w32
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.8 r4
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store i32 %0, i32* %1, align 4
  br label %7

5:                                                ; preds = %3
  %6 = shl i32 %0, 1
  br label %7

7:                                                ; preds = %5, %4
  %8 = phi i32 [ %0, %4 ], [ %6, %5 ]
  ret i32 %8
}

define dso_local i64 @f64_w64(i64 noundef %0, i64* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f64_w64
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    feeder.8 r5
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r6
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r1
; CHECK-NEXT:    writer.64 ret_fid, r2
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store i64 %0, i64* %1, align 8
  br label %7

5:                                                ; preds = %3
  %6 = shl i64 %0, 1
  br label %7

7:                                                ; preds = %5, %4
  %8 = phi i64 [ %0, %4 ], [ %6, %5 ]
  ret i64 %8
}

define dso_local i128 @f128_w128(i128 noundef %0, i128* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f128_w128
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.128 r1
; CHECK-NEXT:    feeder.128 r2
; CHECK-NEXT:    feeder.128 r3
; CHECK-NEXT:    feeder.128 r4
; CHECK-NEXT:    feeder.64 r5
; CHECK-NEXT:    feeder.64 r6
; CHECK-NEXT:    feeder.8 r7
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r6
; CHECK:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r2
; CHECK-NEXT:    writer.32 call_ret_bb, r3
; CHECK-NEXT:    writer.32 call_ret_bb, r4
; CHECK-NEXT:    writer.32 call_ret_bb, r6
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r6
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r5
; CHECK:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r4
; CHECK-NEXT:    writer.32 call_addr, r6
; CHECK:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:    writer.32 call_ret_bb, r1
; CHECK-NEXT:    writer.32 call_ret_bb, r2
; CHECK-NEXT:    writer.32 call_ret_bb, r5
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r5
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.p.64 r4
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.128 ret_fid, r1
; CHECK-NEXT:    writer.128 ret_fid, r2
; CHECK-NEXT:    writer.128 ret_fid, r3
; CHECK-NEXT:    writer.128 ret_fid, r4
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store i128 %0, i128* %1, align 16
  br label %7

5:                                                ; preds = %3
  %6 = shl i128 %0, 1
  br label %7

7:                                                ; preds = %5, %4
  %8 = phi i128 [ %0, %4 ], [ %6, %5 ]
  ret i128 %8
}

define dso_local <8 x i32> @f256_w256(<8 x i32> noundef %0, <8 x i32>* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f256_w256
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.256 r1
; CHECK-NEXT:    feeder.256 r2
; CHECK-NEXT:    feeder.256 r3
; CHECK-NEXT:    feeder.256 r4
; CHECK-NEXT:    feeder.256 r5
; CHECK-NEXT:    feeder.256 r6
; CHECK-NEXT:    feeder.256 r7
; CHECK-NEXT:    feeder.256 r8
; CHECK-NEXT:    feeder.64 r9
; CHECK-NEXT:    feeder.64 r10
; CHECK-NEXT:    feeder.8 r11
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r12
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.256 ret_fid, r1
; CHECK-NEXT:    writer.256 ret_fid, r2
; CHECK-NEXT:    writer.256 ret_fid, r3
; CHECK-NEXT:    writer.256 ret_fid, r4
; CHECK-NEXT:    writer.256 ret_fid, r5
; CHECK-NEXT:    writer.256 ret_fid, r6
; CHECK-NEXT:    writer.256 ret_fid, r7
; CHECK-NEXT:    writer.256 ret_fid, r8
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store <8 x i32> %0, <8 x i32>* %1, align 32
  br label %7

5:                                                ; preds = %3
  %6 = shl <8 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  br label %7

7:                                                ; preds = %5, %4
  %8 = phi <8 x i32> [ %0, %4 ], [ %6, %5 ]
  ret <8 x i32> %8
}

define dso_local <16 x i32> @f512_w512(<16 x i32> noundef %0, <16 x i32>* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f512_w512
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.512 r1
; CHECK-NEXT:    feeder.512 r2
; CHECK-NEXT:    feeder.512 r3
; CHECK-NEXT:    feeder.512 r4
; CHECK-NEXT:    feeder.512 r5
; CHECK-NEXT:    feeder.512 r6
; CHECK-NEXT:    feeder.512 r7
; CHECK-NEXT:    feeder.512 r8
; CHECK-NEXT:    feeder.512 r9
; CHECK-NEXT:    feeder.512 r10
; CHECK-NEXT:    feeder.512 r11
; CHECK-NEXT:    feeder.512 r12
; CHECK-NEXT:    feeder.512 r13
; CHECK-NEXT:    feeder.512 r14
; CHECK-NEXT:    feeder.512 r15
; CHECK-NEXT:    feeder.512 r16
; CHECK-NEXT:    feeder.64 r17
; CHECK-NEXT:    feeder.64 r18
; CHECK-NEXT:    feeder.8 r19
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK-NEXT:    writer.32 mbb_addr, r17
; CHECK-NEXT:    writer.32 mbb_addr, r18
; CHECK-NEXT:    writer.32 mbb_addr, r20
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:    feeder.p.32 r13
; CHECK-NEXT:    feeder.p.32 r14
; CHECK-NEXT:    feeder.p.32 r15
; CHECK-NEXT:    feeder.p.32 r16
; CHECK-NEXT:    feeder.p.32 r17
; CHECK-NEXT:    feeder.p.32 r18
; CHECK-NEXT:    feeder.p.32 r20
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:    feeder.p.32 r13
; CHECK-NEXT:    feeder.p.32 r14
; CHECK-NEXT:    feeder.p.32 r15
; CHECK-NEXT:    feeder.p.32 r16
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:    feeder.p.32 r13
; CHECK-NEXT:    feeder.p.32 r14
; CHECK-NEXT:    feeder.p.32 r15
; CHECK-NEXT:    feeder.p.32 r16
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.512 ret_fid, r1
; CHECK-NEXT:    writer.512 ret_fid, r2
; CHECK-NEXT:    writer.512 ret_fid, r3
; CHECK-NEXT:    writer.512 ret_fid, r4
; CHECK-NEXT:    writer.512 ret_fid, r5
; CHECK-NEXT:    writer.512 ret_fid, r6
; CHECK-NEXT:    writer.512 ret_fid, r7
; CHECK-NEXT:    writer.512 ret_fid, r8
; CHECK-NEXT:    writer.512 ret_fid, r9
; CHECK-NEXT:    writer.512 ret_fid, r10
; CHECK-NEXT:    writer.512 ret_fid, r11
; CHECK-NEXT:    writer.512 ret_fid, r12
; CHECK-NEXT:    writer.512 ret_fid, r13
; CHECK-NEXT:    writer.512 ret_fid, r14
; CHECK-NEXT:    writer.512 ret_fid, r15
; CHECK-NEXT:    writer.512 ret_fid, r16
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store <16 x i32> %0, <16 x i32>* %1, align 64
  br label %7

5:                                                ; preds = %3
  %6 = shl <16 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  br label %7

7:                                                ; preds = %5, %4
  %8 = phi <16 x i32> [ %0, %4 ], [ %6, %5 ]
  ret <16 x i32> %8
}

define dso_local <32 x i32> @f1024_w1024(<32 x i32> noundef %0, <32 x i32>* nocapture noundef writeonly %1, i1 noundef zeroext %2) {
; CHECK-LABEL: f1024_w1024
; CHECK:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.1024 r1
; CHECK-NEXT:    feeder.1024 r2
; CHECK-NEXT:    feeder.1024 r3
; CHECK-NEXT:    feeder.1024 r4
; CHECK-NEXT:    feeder.1024 r5
; CHECK-NEXT:    feeder.1024 r6
; CHECK-NEXT:    feeder.1024 r7
; CHECK-NEXT:    feeder.1024 r8
; CHECK-NEXT:    feeder.1024 r9
; CHECK-NEXT:    feeder.1024 r10
; CHECK-NEXT:    feeder.1024 r11
; CHECK-NEXT:    feeder.1024 r12
; CHECK-NEXT:    feeder.1024 r13
; CHECK-NEXT:    feeder.1024 r14
; CHECK-NEXT:    feeder.1024 r15
; CHECK-NEXT:    feeder.1024 r16
; CHECK-NEXT:    feeder.1024 r17
; CHECK-NEXT:    feeder.1024 r18
; CHECK-NEXT:    feeder.1024 r19
; CHECK-NEXT:    feeder.1024 r20
; CHECK-NEXT:    feeder.1024 r21
; CHECK-NEXT:    feeder.1024 r22
; CHECK-NEXT:    feeder.1024 r23
; CHECK-NEXT:    feeder.1024 r24
; CHECK-NEXT:    feeder.1024 r25
; CHECK-NEXT:    feeder.1024 r26
; CHECK-NEXT:    feeder.1024 r27
; CHECK-NEXT:    feeder.1024 r28
; CHECK-NEXT:    feeder.1024 r29
; CHECK-NEXT:    feeder.1024 r30
; CHECK-NEXT:    feeder.1024 r31
; CHECK-NEXT:    feeder.1024 r32
; CHECK-NEXT:    feeder.64 r33
; CHECK-NEXT:    feeder.64 r34
; CHECK-NEXT:    feeder.8 r35
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK-NEXT:    writer.32 mbb_addr, r17
; CHECK-NEXT:    writer.32 mbb_addr, r18
; CHECK-NEXT:    writer.32 mbb_addr, r19
; CHECK-NEXT:    writer.32 mbb_addr, r20
; CHECK-NEXT:    writer.32 mbb_addr, r21
; CHECK-NEXT:    writer.32 mbb_addr, r22
; CHECK-NEXT:    writer.32 mbb_addr, r23
; CHECK-NEXT:    writer.32 mbb_addr, r24
; CHECK-NEXT:    writer.32 mbb_addr, r25
; CHECK-NEXT:    writer.32 mbb_addr, r26
; CHECK-NEXT:    writer.32 mbb_addr, r27
; CHECK-NEXT:    writer.32 mbb_addr, r28
; CHECK-NEXT:    writer.32 mbb_addr, r29
; CHECK-NEXT:    writer.32 mbb_addr, r30
; CHECK-NEXT:    writer.32 mbb_addr, r31
; CHECK-NEXT:    writer.32 mbb_addr, r32
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK-NEXT:    writer.32 mbb_addr, r17
; CHECK-NEXT:    writer.32 mbb_addr, r18
; CHECK-NEXT:    writer.32 mbb_addr, r19
; CHECK-NEXT:    writer.32 mbb_addr, r20
; CHECK-NEXT:    writer.32 mbb_addr, r21
; CHECK-NEXT:    writer.32 mbb_addr, r22
; CHECK-NEXT:    writer.32 mbb_addr, r23
; CHECK-NEXT:    writer.32 mbb_addr, r24
; CHECK-NEXT:    writer.32 mbb_addr, r25
; CHECK-NEXT:    writer.32 mbb_addr, r26
; CHECK-NEXT:    writer.32 mbb_addr, r27
; CHECK-NEXT:    writer.32 mbb_addr, r28
; CHECK-NEXT:    writer.32 mbb_addr, r29
; CHECK-NEXT:    writer.32 mbb_addr, r30
; CHECK-NEXT:    writer.32 mbb_addr, r31
; CHECK-NEXT:    writer.32 mbb_addr, r32
; CHECK-NEXT:    writer.32 mbb_addr, r33
; CHECK-NEXT:    writer.32 mbb_addr, r34
; CHECK-NEXT:    writer.32 mbb_addr, r36
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:    feeder.p.32 r13
; CHECK-NEXT:    feeder.p.32 r14
; CHECK-NEXT:    feeder.p.32 r15
; CHECK-NEXT:    feeder.p.32 r16
; CHECK-NEXT:    feeder.p.32 r17
; CHECK-NEXT:    feeder.p.32 r18
; CHECK-NEXT:    feeder.p.32 r19
; CHECK-NEXT:    feeder.p.32 r20
; CHECK-NEXT:    feeder.p.32 r21
; CHECK-NEXT:    feeder.p.32 r22
; CHECK-NEXT:    feeder.p.32 r23
; CHECK-NEXT:    feeder.p.32 r24
; CHECK-NEXT:    feeder.p.32 r25
; CHECK-NEXT:    feeder.p.32 r26
; CHECK-NEXT:    feeder.p.32 r27
; CHECK-NEXT:    feeder.p.32 r28
; CHECK-NEXT:    feeder.p.32 r29
; CHECK-NEXT:    feeder.p.32 r30
; CHECK-NEXT:    feeder.p.32 r31
; CHECK-NEXT:    feeder.p.32 r32
; CHECK-NEXT:    feeder.p.32 r33
; CHECK-NEXT:    feeder.p.32 r34
; CHECK-NEXT:    feeder.p.32 r36
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK-NEXT:    writer.32 mbb_addr, r17
; CHECK-NEXT:    writer.32 mbb_addr, r18
; CHECK-NEXT:    writer.32 mbb_addr, r19
; CHECK-NEXT:    writer.32 mbb_addr, r20
; CHECK-NEXT:    writer.32 mbb_addr, r21
; CHECK-NEXT:    writer.32 mbb_addr, r22
; CHECK-NEXT:    writer.32 mbb_addr, r23
; CHECK-NEXT:    writer.32 mbb_addr, r24
; CHECK-NEXT:    writer.32 mbb_addr, r25
; CHECK-NEXT:    writer.32 mbb_addr, r26
; CHECK-NEXT:    writer.32 mbb_addr, r27
; CHECK-NEXT:    writer.32 mbb_addr, r28
; CHECK-NEXT:    writer.32 mbb_addr, r29
; CHECK-NEXT:    writer.32 mbb_addr, r30
; CHECK-NEXT:    writer.32 mbb_addr, r31
; CHECK-NEXT:    writer.32 mbb_addr, r32
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:    feeder.p.32 r13
; CHECK-NEXT:    feeder.p.32 r14
; CHECK-NEXT:    feeder.p.32 r15
; CHECK-NEXT:    feeder.p.32 r16
; CHECK-NEXT:    feeder.p.32 r17
; CHECK-NEXT:    feeder.p.32 r18
; CHECK-NEXT:    feeder.p.32 r19
; CHECK-NEXT:    feeder.p.32 r20
; CHECK-NEXT:    feeder.p.32 r21
; CHECK-NEXT:    feeder.p.32 r22
; CHECK-NEXT:    feeder.p.32 r23
; CHECK-NEXT:    feeder.p.32 r24
; CHECK-NEXT:    feeder.p.32 r25
; CHECK-NEXT:    feeder.p.32 r26
; CHECK-NEXT:    feeder.p.32 r27
; CHECK-NEXT:    feeder.p.32 r28
; CHECK-NEXT:    feeder.p.32 r29
; CHECK-NEXT:    feeder.p.32 r30
; CHECK-NEXT:    feeder.p.32 r31
; CHECK-NEXT:    feeder.p.32 r32
; CHECK:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    writer.32 mbb_addr, r4
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:    writer.32 mbb_addr, r6
; CHECK-NEXT:    writer.32 mbb_addr, r7
; CHECK-NEXT:    writer.32 mbb_addr, r8
; CHECK-NEXT:    writer.32 mbb_addr, r9
; CHECK-NEXT:    writer.32 mbb_addr, r10
; CHECK-NEXT:    writer.32 mbb_addr, r11
; CHECK-NEXT:    writer.32 mbb_addr, r12
; CHECK-NEXT:    writer.32 mbb_addr, r13
; CHECK-NEXT:    writer.32 mbb_addr, r14
; CHECK-NEXT:    writer.32 mbb_addr, r15
; CHECK-NEXT:    writer.32 mbb_addr, r16
; CHECK-NEXT:    writer.32 mbb_addr, r17
; CHECK-NEXT:    writer.32 mbb_addr, r18
; CHECK-NEXT:    writer.32 mbb_addr, r19
; CHECK-NEXT:    writer.32 mbb_addr, r20
; CHECK-NEXT:    writer.32 mbb_addr, r21
; CHECK-NEXT:    writer.32 mbb_addr, r22
; CHECK-NEXT:    writer.32 mbb_addr, r23
; CHECK-NEXT:    writer.32 mbb_addr, r24
; CHECK-NEXT:    writer.32 mbb_addr, r25
; CHECK-NEXT:    writer.32 mbb_addr, r26
; CHECK-NEXT:    writer.32 mbb_addr, r27
; CHECK-NEXT:    writer.32 mbb_addr, r28
; CHECK-NEXT:    writer.32 mbb_addr, r29
; CHECK-NEXT:    writer.32 mbb_addr, r30
; CHECK-NEXT:    writer.32 mbb_addr, r31
; CHECK-NEXT:    writer.32 mbb_addr, r32
; CHECK:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    feeder.p.32 r4
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    feeder.p.32 r6
; CHECK-NEXT:    feeder.p.32 r7
; CHECK-NEXT:    feeder.p.32 r8
; CHECK-NEXT:    feeder.p.32 r9
; CHECK-NEXT:    feeder.p.32 r10
; CHECK-NEXT:    feeder.p.32 r11
; CHECK-NEXT:    feeder.p.32 r12
; CHECK-NEXT:    feeder.p.32 r13
; CHECK-NEXT:    feeder.p.32 r14
; CHECK-NEXT:    feeder.p.32 r15
; CHECK-NEXT:    feeder.p.32 r16
; CHECK-NEXT:    feeder.p.32 r17
; CHECK-NEXT:    feeder.p.32 r18
; CHECK-NEXT:    feeder.p.32 r19
; CHECK-NEXT:    feeder.p.32 r20
; CHECK-NEXT:    feeder.p.32 r21
; CHECK-NEXT:    feeder.p.32 r22
; CHECK-NEXT:    feeder.p.32 r23
; CHECK-NEXT:    feeder.p.32 r24
; CHECK-NEXT:    feeder.p.32 r25
; CHECK-NEXT:    feeder.p.32 r26
; CHECK-NEXT:    feeder.p.32 r27
; CHECK-NEXT:    feeder.p.32 r28
; CHECK-NEXT:    feeder.p.32 r29
; CHECK-NEXT:    feeder.p.32 r30
; CHECK-NEXT:    feeder.p.32 r31
; CHECK-NEXT:    feeder.p.32 r32
; CHECK:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.1024 ret_fid, r1
; CHECK-NEXT:    writer.1024 ret_fid, r2
; CHECK-NEXT:    writer.1024 ret_fid, r3
; CHECK-NEXT:    writer.1024 ret_fid, r4
; CHECK-NEXT:    writer.1024 ret_fid, r5
; CHECK-NEXT:    writer.1024 ret_fid, r6
; CHECK-NEXT:    writer.1024 ret_fid, r7
; CHECK-NEXT:    writer.1024 ret_fid, r8
; CHECK-NEXT:    writer.1024 ret_fid, r9
; CHECK-NEXT:    writer.1024 ret_fid, r10
; CHECK-NEXT:    writer.1024 ret_fid, r11
; CHECK-NEXT:    writer.1024 ret_fid, r12
; CHECK-NEXT:    writer.1024 ret_fid, r13
; CHECK-NEXT:    writer.1024 ret_fid, r14
; CHECK-NEXT:    writer.1024 ret_fid, r15
; CHECK-NEXT:    writer.1024 ret_fid, r16
; CHECK-NEXT:    writer.1024 ret_fid, r17
; CHECK-NEXT:    writer.1024 ret_fid, r18
; CHECK-NEXT:    writer.1024 ret_fid, r19
; CHECK-NEXT:    writer.1024 ret_fid, r20
; CHECK-NEXT:    writer.1024 ret_fid, r21
; CHECK-NEXT:    writer.1024 ret_fid, r22
; CHECK-NEXT:    writer.1024 ret_fid, r23
; CHECK-NEXT:    writer.1024 ret_fid, r24
; CHECK-NEXT:    writer.1024 ret_fid, r25
; CHECK-NEXT:    writer.1024 ret_fid, r26
; CHECK-NEXT:    writer.1024 ret_fid, r27
; CHECK-NEXT:    writer.1024 ret_fid, r28
; CHECK-NEXT:    writer.1024 ret_fid, r29
; CHECK-NEXT:    writer.1024 ret_fid, r30
; CHECK-NEXT:    writer.1024 ret_fid, r31
; CHECK-NEXT:    writer.1024 ret_fid, r32
  br i1 %2, label %4, label %5

4:                                                ; preds = %3
  store <32 x i32> %0, <32 x i32>* %1, align 128
  br label %7

5:                                                ; preds = %3
  %6 = shl <32 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  br label %7

7:                                                ; preds = %5, %4
  %8 = phi <32 x i32> [ %0, %4 ], [ %6, %5 ]
  ret <32 x i32> %8
}
