; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mcpu=next32gen2 < %s | FileCheck %s

define void @test_memcpy_i8_const() {
; CHECK-LABEL: test_memcpy_i8_const:
; CHECK:       LBB0_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0xDC
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp0
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB0_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB0_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i8(ptr null, ptr null, i8 220, i1 false)
  ret void
}

define void @test_memcpy_i8(i8 %size) {
; CHECK-LABEL: test_memcpy_i8:
; CHECK:       LBB1_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.8 r1
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp1
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB1_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB1_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp1:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i8(ptr null, ptr null, i8 %size, i1 false)
  ret void
}

define void @test_memcpy_i16_const() {
; CHECK-LABEL: test_memcpy_i16_const:
; CHECK:       LBB2_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0xDC
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp2
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB2_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB2_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp2:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i16(ptr null, ptr null, i16 220, i1 false)
  ret void
}

define void @test_memcpy_i16(i16 %size) {
; CHECK-LABEL: test_memcpy_i16:
; CHECK:       LBB3_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.16 r1
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp3
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB3_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB3_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp3:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i16(ptr null, ptr null, i16 %size, i1 false)
  ret void
}

define void @test_memcpy_i32_const() {
; CHECK-LABEL: test_memcpy_i32_const:
; CHECK:       LBB4_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0xDC
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp4
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB4_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB4_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp4:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i32(ptr null, ptr null, i32 220, i1 false)
  ret void
}

define void @test_memcpy_i32(i32 %size) {
; CHECK-LABEL: test_memcpy_i32:
; CHECK:       LBB5_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp5
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.32 call_addr, r1
; CHECK-NEXT:    movl call_ret_bb, LBB5_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB5_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp5:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i32(ptr null, ptr null, i32 %size, i1 false)
  ret void
}

define void @test_memcpy_i64_const() {
; CHECK-LABEL: test_memcpy_i64_const:
; CHECK:       LBB6_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0xDC
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp6
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    movl call_ret_bb, LBB6_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB6_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp6:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i64(ptr null, ptr null, i64 220, i1 false)
  ret void
}

define void @test_memcpy_i64(i64 %size) {
; CHECK-LABEL: test_memcpy_i64:
; CHECK:       LBB7_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r3, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp7
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    movl call_ret_bb, LBB7_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB7_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp7:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i64(ptr null, ptr null, i64 %size, i1 false)
  ret void
}

define void @test_memcpy_i128_const() {
; CHECK-LABEL: test_memcpy_i128_const:
; CHECK:       LBB8_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    movl r1, 0xDC
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp8
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    movl call_ret_bb, LBB8_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB8_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp8:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i128(ptr null, ptr null, i128 220, i1 false)
  ret void
}

define void @test_memcpy_i128(i128 %size) {
; CHECK-LABEL: test_memcpy_i128:
; CHECK:       LBB9_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.128 r1
; CHECK-NEXT:    feeder.128 r2
; CHECK-NEXT:    feeder.128 r3
; CHECK-NEXT:    feeder.128 r4
; CHECK-NEXT:    movl r3, 0x0
; CHECK-NEXT:    movl call_addr, memcpy
; CHECK-NEXT:    movl call_ret_fid, .Ltmp9
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    movl call_ret_bb, LBB9_1
; CHECK-NEXT:    chain call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB9_1: # %entry
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp9:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.p.64 r1
; CHECK-NEXT:    feeder.p.64 r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
entry:
  call void @llvm.memcpy.p0.p0.i128(ptr null, ptr null, i128 %size, i1 false)
  ret void
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i8(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i8, i1 immarg) #0
declare void @llvm.memcpy.p0.p0.i16(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i16, i1 immarg) #0
declare void @llvm.memcpy.p0.p0.i32(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i32, i1 immarg) #0
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #0
declare void @llvm.memcpy.p0.p0.i128(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i128, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
