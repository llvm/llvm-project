; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i8 @xor1(i8 noundef zeroext %0, i8 noundef zeroext %1) {
; CHECK-LABEL: xor1
; CHECK:    xor r2, r1
  %3 = xor i8 %1, %0
  ret i8 %3
}

define dso_local zeroext i16 @xor2(i16 noundef zeroext %0, i16 noundef zeroext %1) {
; CHECK-LABEL: xor2
; CHECK:    xor r2, r1
  %3 = xor i16 %1, %0
  ret i16 %3
}

define dso_local i32 @xor3(i32 noundef %0, i32 noundef %1) {
; CHECK-LABEL: xor3
; CHECK:    xor r2, r1
  %3 = xor i32 %1, %0
  ret i32 %3
}

define dso_local i64 @xor4(i64 noundef %0, i64 noundef %1) {
; CHECK-LABEL: xor4
; CHECK:    xor r4, r2
; CHECK-NEXT:    xor r3, r1
  %3 = xor i64 %1, %0
  ret i64 %3
}

define dso_local i128 @xor5(i128 noundef %0, i128 noundef %1) {
; CHECK-LABEL: xor5
; CHECK:    xor r8, r4
; CHECK-NEXT:    xor r7, r3
; CHECK-NEXT:    xor r6, r2
; CHECK-NEXT:    xor r5, r1
  %3 = xor i128 %1, %0
  ret i128 %3
}

define dso_local <8 x i32> @xor6(<8 x i32> noundef %0, <8 x i32> noundef %1) {
; CHECK-LABEL: xor6
; CHECK:    xor r16, r8
; CHECK-NEXT:    xor r15, r7
; CHECK-NEXT:    xor r14, r6
; CHECK-NEXT:    xor r13, r5
; CHECK-NEXT:    xor r12, r4
; CHECK-NEXT:    xor r11, r3
; CHECK-NEXT:    xor r10, r2
; CHECK-NEXT:    xor r9, r1
  %3 = xor <8 x i32> %1, %0
  ret <8 x i32> %3
}

define dso_local <16 x i32> @xor7(<16 x i32> noundef %0, <16 x i32> noundef %1) {
; CHECK-LABEL: xor7
; CHECK:    xor r32, r16
; CHECK-NEXT:    xor r31, r15
; CHECK-NEXT:    xor r30, r14
; CHECK-NEXT:    xor r29, r13
; CHECK-NEXT:    xor r28, r12
; CHECK-NEXT:    xor r27, r11
; CHECK-NEXT:    xor r26, r10
; CHECK-NEXT:    xor r25, r9
; CHECK-NEXT:    xor r24, r8
; CHECK-NEXT:    xor r23, r7
; CHECK-NEXT:    xor r22, r6
; CHECK-NEXT:    xor r21, r5
; CHECK-NEXT:    xor r20, r4
; CHECK-NEXT:    xor r19, r3
; CHECK-NEXT:    xor r18, r2
; CHECK-NEXT:    xor r17, r1
  %3 = xor <16 x i32> %1, %0
  ret <16 x i32> %3
}

define dso_local <32 x i32> @xor8(<32 x i32> noundef %0, <32 x i32> noundef %1) {
; CHECK-LABEL: xor8
; CHECK:    xor r64, r32
; CHECK-NEXT:    xor r63, r31
; CHECK-NEXT:    xor r62, r30
; CHECK-NEXT:    xor r61, r29
; CHECK-NEXT:    xor r60, r28
; CHECK-NEXT:    xor r59, r27
; CHECK-NEXT:    xor r58, r26
; CHECK-NEXT:    xor r57, r25
; CHECK-NEXT:    xor r56, r24
; CHECK-NEXT:    xor r55, r23
; CHECK-NEXT:    xor r54, r22
; CHECK-NEXT:    xor r53, r21
; CHECK-NEXT:    xor r52, r20
; CHECK-NEXT:    xor r51, r19
; CHECK-NEXT:    xor r50, r18
; CHECK-NEXT:    xor r49, r17
; CHECK-NEXT:    xor r48, r16
; CHECK-NEXT:    xor r47, r15
; CHECK-NEXT:    xor r46, r14
; CHECK-NEXT:    xor r45, r13
; CHECK-NEXT:    xor r44, r12
; CHECK-NEXT:    xor r43, r11
; CHECK-NEXT:    xor r42, r10
; CHECK-NEXT:    xor r41, r9
; CHECK-NEXT:    xor r40, r8
; CHECK-NEXT:    xor r39, r7
; CHECK-NEXT:    xor r38, r6
; CHECK-NEXT:    xor r37, r5
; CHECK-NEXT:    xor r36, r4
; CHECK-NEXT:    xor r35, r3
; CHECK-NEXT:    xor r34, r2
; CHECK-NEXT:    xor r33, r1
  %3 = xor <32 x i32> %1, %0
  ret <32 x i32> %3
}
