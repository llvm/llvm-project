; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 --mcpu=next32gen1 < %s | FileCheck %s -check-prefix CHECK-PREFETCH
; RUN: llc -mtriple=next32 --mcpu=next32gen1 -mattr=-prefetch < %s | FileCheck %s -check-prefix CHECK-NO-PREFETCH
; RUN: llc -mtriple=next32 --mcpu=next32gen2 < %s | FileCheck %s -check-prefix CHECK-PREFETCH
; RUN: llc -mtriple=next32 --mcpu=next32gen2 -mattr=-prefetch < %s | FileCheck %s -check-prefix CHECK-NO-PREFETCH

define i32 @foo(i32* nocapture readonly %p) {
; CHECK-PREFETCH-LABEL: foo:
; CHECK-PREFETCH:       LBB0_0:
; CHECK-PREFETCH-NEXT:  # %bb.0: # %entry
; CHECK-PREFETCH-NEXT:    feeder.32 tid
; CHECK-PREFETCH-NEXT:    feeder.32 ret_fid
; CHECK-PREFETCH-NEXT:    feeder.64 r1
; CHECK-PREFETCH-NEXT:    feeder.64 r2
; CHECK-PREFETCH-NEXT:    prefetch r2, r1, tid
; CHECK-PREFETCH-NEXT:    movl r1, 0x0
; CHECK-PREFETCH-NEXT:    chain ret_fid, 0x64
; CHECK-PREFETCH-NEXT:    writer.32 ret_fid, tid
; CHECK-PREFETCH-NEXT:    writer.32 ret_fid, r1
;
; CHECK-NO-PREFETCH-LABEL: foo:
; CHECK-NO-PREFETCH:       LBB0_0:
; CHECK-NO-PREFETCH-NEXT:  # %bb.0: # %entry
; CHECK-NO-PREFETCH-NEXT:    feeder.32 tid
; CHECK-NO-PREFETCH-NEXT:    feeder.32 ret_fid
; CHECK-NO-PREFETCH-NEXT:    feeder.64 r1
; CHECK-NO-PREFETCH-NEXT:    feeder.64 r2
; CHECK-NO-PREFETCH-NEXT:    movl r1, 0x0
; CHECK-NO-PREFETCH-NEXT:    chain ret_fid, 0x64
; CHECK-NO-PREFETCH-NEXT:    writer.32 ret_fid, tid
; CHECK-NO-PREFETCH-NEXT:    writer.32 ret_fid, r1
entry:
  %0 = bitcast i32* %p to i8*
  tail call void @llvm.prefetch.p0i8(i8* %0, i32 0, i32 3, i32 1)
  ret i32 0
}

define i32 @bar(i32* nocapture %a) {
; CHECK-PREFETCH-LABEL: bar:
; CHECK-PREFETCH:       LBB1_0:
; CHECK-PREFETCH-NEXT:  # %bb.0: # %entry
; CHECK-PREFETCH-NEXT:    feeder.32 tid
; CHECK-PREFETCH-NEXT:    feeder.32 ret_fid
; CHECK-PREFETCH-NEXT:    feeder.64 r1
; CHECK-PREFETCH-NEXT:    feeder.64 r2
; CHECK-PREFETCH-NEXT:    prefetch r2, r1, tid
; CHECK-PREFETCH-NEXT:    movl r3, 0x18
; CHECK-PREFETCH-NEXT:    movl r4, 0x0
; CHECK-PREFETCH-NEXT:    dup r5, r1
; CHECK-PREFETCH-NEXT:    dup r6, r2
; CHECK-PREFETCH-NEXT:    leadisp r4, r3
; CHECK-PREFETCH-NEXT:    leascale r4, r4
; CHECK-PREFETCH-NEXT:    leaindex r4, r4
; CHECK-PREFETCH-NEXT:    leabase r6, r5
; CHECK-PREFETCH-NEXT:    memread.32.align[4] r2, r1, tid
; CHECK-PREFETCH-NEXT:    memdata r1
; CHECK-PREFETCH-NEXT:    dup r2, r1
; CHECK-PREFETCH-NEXT:    memwrite.32.align[4] r6, r5, tid
; CHECK-PREFETCH-NEXT:    memdata r2
; CHECK-PREFETCH-NEXT:    dup r3, tid
; CHECK-PREFETCH-NEXT:    barrier r3, r1
; CHECK-PREFETCH-NEXT:    barrier r3, r2
; CHECK-PREFETCH-NEXT:    dup tid, r3
; CHECK-PREFETCH-NEXT:    chain ret_fid, 0x64
; CHECK-PREFETCH-NEXT:    writer.32 ret_fid, tid
; CHECK-PREFETCH-NEXT:    writer.32 ret_fid, r4
;
; CHECK-NO-PREFETCH-LABEL: bar:
; CHECK-NO-PREFETCH:       LBB1_0:
; CHECK-NO-PREFETCH-NEXT:  # %bb.0: # %entry
; CHECK-NO-PREFETCH-NEXT:    feeder.32 tid
; CHECK-NO-PREFETCH-NEXT:    feeder.32 ret_fid
; CHECK-NO-PREFETCH-NEXT:    feeder.64 r1
; CHECK-NO-PREFETCH-NEXT:    feeder.64 r2
; CHECK-NO-PREFETCH-NEXT:    movl r3, 0x18
; CHECK-NO-PREFETCH-NEXT:    movl r4, 0x0
; CHECK-NO-PREFETCH-NEXT:    dup r5, r1
; CHECK-NO-PREFETCH-NEXT:    dup r6, r2
; CHECK-NO-PREFETCH-NEXT:    leadisp r4, r3
; CHECK-NO-PREFETCH-NEXT:    leascale r4, r4
; CHECK-NO-PREFETCH-NEXT:    leaindex r4, r4
; CHECK-NO-PREFETCH-NEXT:    leabase r6, r5
; CHECK-NO-PREFETCH-NEXT:    memread.32.align[4] r2, r1, tid
; CHECK-NO-PREFETCH-NEXT:    memdata r1
; CHECK-NO-PREFETCH-NEXT:    dup r2, r1
; CHECK-NO-PREFETCH-NEXT:    memwrite.32.align[4] r6, r5, tid
; CHECK-NO-PREFETCH-NEXT:    memdata r2
; CHECK-NO-PREFETCH-NEXT:    dup r3, tid
; CHECK-NO-PREFETCH-NEXT:    barrier r3, r1
; CHECK-NO-PREFETCH-NEXT:    barrier r3, r2
; CHECK-NO-PREFETCH-NEXT:    dup tid, r3
; CHECK-NO-PREFETCH-NEXT:    chain ret_fid, 0x64
; CHECK-NO-PREFETCH-NEXT:    writer.32 ret_fid, tid
; CHECK-NO-PREFETCH-NEXT:    writer.32 ret_fid, r4
entry:
  %0 = load i32, i32* %a, align 4
  %1 = bitcast i32* %a to i8*
  tail call void @llvm.prefetch.p0i8(i8* nonnull %1, i32 0, i32 3, i32 1)
  %arrayidx1 = getelementptr inbounds i32, i32* %a, i64 6
  store i32 %0, i32* %arrayidx1, align 4
  ret i32 0
}

declare void @llvm.prefetch.p0i8(i8* nocapture readonly, i32 immarg, i32 immarg, i32)
