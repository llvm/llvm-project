; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i8 @not1(i8 noundef zeroext %0) {
; CHECK-LABEL: not1
; CHECK:    movl r2, 0xFF
; CHECK-NEXT:    xor r1, r2
  %2 = xor i8 %0, -1
  ret i8 %2
}

define dso_local zeroext i16 @not2(i16 noundef zeroext %0) {
; CHECK-LABEL: not2
; CHECK:    movl r2, 0xFFFF
; CHECK-NEXT:    xor r1, r2
  %2 = xor i16 %0, -1
  ret i16 %2
}

define dso_local i32 @not3(i32 noundef %0) {
; CHECK-LABEL: not3
; CHECK:    not r1
  %2 = xor i32 %0, -1
  ret i32 %2
}

define dso_local i64 @not4(i64 noundef %0) {
; CHECK-LABEL: not4
; CHECK:    not r2
; CHECK-NEXT:    not r1
  %2 = xor i64 %0, -1
  ret i64 %2
}

define dso_local i128 @not5(i128 noundef %0) {
; CHECK-LABEL: not5
; CHECK:    not r4
; CHECK-NEXT:    not r3
; CHECK-NEXT:    not r2
; CHECK-NEXT:    not r1
  %2 = xor i128 %0, -1
  ret i128 %2
}

define dso_local <8 x i32> @not6(<8 x i32> noundef %0) {
; CHECK-LABEL: not6
; CHECK:    not r8
; CHECK-NEXT:    not r7
; CHECK-NEXT:    not r6
; CHECK-NEXT:    not r5
; CHECK-NEXT:    not r4
; CHECK-NEXT:    not r3
; CHECK-NEXT:    not r2
; CHECK-NEXT:    not r1
  %2 = xor <8 x i32> %0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  ret <8 x i32> %2
}

define dso_local <16 x i32> @not7(<16 x i32> noundef %0) {
; CHECK-LABEL: not7
; CHECK:    not r16
; CHECK-NEXT:    not r15
; CHECK-NEXT:    not r14
; CHECK-NEXT:    not r13
; CHECK-NEXT:    not r12
; CHECK-NEXT:    not r11
; CHECK-NEXT:    not r10
; CHECK-NEXT:    not r9
; CHECK-NEXT:    not r8
; CHECK-NEXT:    not r7
; CHECK-NEXT:    not r6
; CHECK-NEXT:    not r5
; CHECK-NEXT:    not r4
; CHECK-NEXT:    not r3
; CHECK-NEXT:    not r2
; CHECK-NEXT:    not r1
  %2 = xor <16 x i32> %0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  ret <16 x i32> %2
}

define dso_local <32 x i32> @not8(<32 x i32> noundef %0) {
; CHECK-LABEL: not8
; CHECK:    not r32
; CHECK-NEXT:    not r31
; CHECK-NEXT:    not r30
; CHECK-NEXT:    not r29
; CHECK-NEXT:    not r28
; CHECK-NEXT:    not r27
; CHECK-NEXT:    not r26
; CHECK-NEXT:    not r25
; CHECK-NEXT:    not r24
; CHECK-NEXT:    not r23
; CHECK-NEXT:    not r22
; CHECK-NEXT:    not r21
; CHECK-NEXT:    not r20
; CHECK-NEXT:    not r19
; CHECK-NEXT:    not r18
; CHECK-NEXT:    not r17
; CHECK-NEXT:    not r16
; CHECK-NEXT:    not r15
; CHECK-NEXT:    not r14
; CHECK-NEXT:    not r13
; CHECK-NEXT:    not r12
; CHECK-NEXT:    not r11
; CHECK-NEXT:    not r10
; CHECK-NEXT:    not r9
; CHECK-NEXT:    not r8
; CHECK-NEXT:    not r7
; CHECK-NEXT:    not r6
; CHECK-NEXT:    not r5
; CHECK-NEXT:    not r4
; CHECK-NEXT:    not r3
; CHECK-NEXT:    not r2
; CHECK-NEXT:    not r1
  %2 = xor <32 x i32> %0, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  ret <32 x i32> %2
}
