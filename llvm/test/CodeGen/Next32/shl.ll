; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mattr=-shift64 < %s | FileCheck %s --check-prefix=CHECK
; RUN: llc -mtriple=next32 -mattr=+shift64 < %s | FileCheck %s --check-prefix=HAS-LONG-SHIFT

define dso_local zeroext i8 @shl1(i8 noundef zeroext %0, i8 noundef zeroext %1) {
; CHECK-LABEL: shl1
; CHECK:    shl r1, r2
; CHECK-NEXT:    zext.8 r1
  %3 = zext i8 %0 to i32
  %4 = zext i8 %1 to i32
  %5 = shl i32 %3, %4
  %6 = trunc i32 %5 to i8
  ret i8 %6
}

define dso_local zeroext i8 @shl1c(i8 noundef zeroext %0) {
; CHECK-LABEL: shl1c
; CHECK:    movl r2, 0x3
; CHECK-NEXT:    shl r1, r2
; CHECK-NEXT:    zext.8 r1
  %2 = shl i8 %0, 3
  ret i8 %2
}

define dso_local zeroext i16 @shl2(i16 noundef zeroext %0, i16 noundef zeroext %1) {
; CHECK-LABEL: shl2
; CHECK:    shl r1, r2
; CHECK-NEXT:    zext.16 r1
  %3 = zext i16 %0 to i32
  %4 = zext i16 %1 to i32
  %5 = shl i32 %3, %4
  %6 = trunc i32 %5 to i16
  ret i16 %6
}

define dso_local zeroext i16 @shl2c(i16 noundef zeroext %0) {
; CHECK-LABEL: shl2c
; CHECK:    movl r2, 0x3
; CHECK-NEXT:    shl r1, r2
; CHECK-NEXT:    zext.16 r1
  %2 = shl i16 %0, 3
  ret i16 %2
}

define dso_local i32 @shl3(i32 noundef %0, i32 noundef %1) {
; CHECK-LABEL: shl3
; CHECK:    shl r1, r2
  %3 = shl i32 %0, %1
  ret i32 %3
}

define dso_local i32 @shl3c(i32 noundef %0) {
; CHECK-LABEL: shl3c
; CHECK:    movl r2, 0x3
; CHECK-NEXT:    shl r1, r2
  %2 = shl i32 %0, 3
  ret i32 %2
}

; Call arithmetic routine, call_addr is __ashldi3
define dso_local i64 @shl4(i64 noundef %0, i64 noundef %1) {
; CHECK-LABEL: shl4
; CHECK:    movl call_addr

; HAS-LONG-SHIFT-LABEL: shl4:
; HAS-LONG-SHIFT:    shl64 r1, r2, r3
  %3 = shl i64 %0, %1
  ret i64 %3
}

define dso_local i64 @shl4c(i64 noundef %0) {
; CHECK-LABEL: shl4c
; CHECK:    movl r3, 0x8
; CHECK-NEXT:    movl r4, 0x0
; CHECK-NEXT:    dup r5, r4
; CHECK-NEXT:    leadisp r5, r5
; CHECK-NEXT:    leascale r5, r3
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r4, r5
  %2 = shl i64 %0, 3
  ret i64 %2
}

; Call arithmetic routine, call_addr is __ashlti3
define dso_local i128 @shl5(i128 noundef %0, i128 noundef %1) {
; CHECK-LABEL: shl5
; CHECK:    movl call_addr
  %3 = shl i128 %0, %1
  ret i128 %3
}

define dso_local i128 @shl5c(i128 noundef %0) {
; CHECK-LABEL: shl5c
; CHECK:    movl r6, 0x1D
; CHECK-NEXT:    dup r5, r2
; CHECK-NEXT:    shr r5, r6
; CHECK-NEXT:    movl r6, 0x3

; HAS-LONG-SHIFT-LABEL: shl5c:
; HAS-LONG-SHIFT:    movl r5, 0x3
; HAS-LONG-SHIFT-NEXT:    shl64 r3, r4, r5
; HAS-LONG-SHIFT:    shl64 r1, r2, r5
  %2 = shl i128 %0, 3
  ret i128 %2
}

define dso_local <8 x i32> @shl6(<8 x i32> noundef %0, <8 x i32> noundef %1) {
; CHECK-LABEL: shl6
; CHECK:    shl r8, r16
; CHECK-NEXT:    shl r7, r15
; CHECK-NEXT:    shl r6, r14
; CHECK-NEXT:    shl r5, r13
; CHECK-NEXT:    shl r4, r12
; CHECK-NEXT:    shl r3, r11
; CHECK-NEXT:    shl r2, r10
; CHECK-NEXT:    shl r1, r9
  %3 = shl <8 x i32> %0, %1
  ret <8 x i32> %3
}

define dso_local <8 x i32> @shl6c(<8 x i32> noundef %0) {
; CHECK-LABEL: shl6c
; CHECK:    movl r9, 0x3
; CHECK-NEXT:    shl r8, r9
; CHECK-NEXT:    shl r7, r9
; CHECK-NEXT:    shl r6, r9
; CHECK-NEXT:    shl r5, r9
; CHECK-NEXT:    shl r4, r9
; CHECK-NEXT:    shl r3, r9
; CHECK-NEXT:    shl r2, r9
; CHECK-NEXT:    shl r1, r9
  %2 = shl <8 x i32> %0, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <8 x i32> %2
}

define dso_local <16 x i32> @shl7(<16 x i32> noundef %0, <16 x i32> noundef %1) {
; CHECK-LABEL: shl7
; CHECK:    shl r16, r32
; CHECK-NEXT:    shl r15, r31
; CHECK-NEXT:    shl r14, r30
; CHECK-NEXT:    shl r13, r29
; CHECK-NEXT:    shl r12, r28
; CHECK-NEXT:    shl r11, r27
; CHECK-NEXT:    shl r10, r26
; CHECK-NEXT:    shl r9, r25
; CHECK-NEXT:    shl r8, r24
; CHECK-NEXT:    shl r7, r23
; CHECK-NEXT:    shl r6, r22
; CHECK-NEXT:    shl r5, r21
; CHECK-NEXT:    shl r4, r20
; CHECK-NEXT:    shl r3, r19
; CHECK-NEXT:    shl r2, r18
; CHECK-NEXT:    shl r1, r17
  %3 = shl <16 x i32> %0, %1
  ret <16 x i32> %3
}

define dso_local <16 x i32> @shl7c(<16 x i32> noundef %0) {
; CHECK-LABEL: shl7c
; CHECK:    movl r17, 0x3
; CHECK-NEXT:    shl r16, r17
; CHECK-NEXT:    shl r15, r17
; CHECK-NEXT:    shl r14, r17
; CHECK-NEXT:    shl r13, r17
; CHECK-NEXT:    shl r12, r17
; CHECK-NEXT:    shl r11, r17
; CHECK-NEXT:    shl r10, r17
; CHECK-NEXT:    shl r9, r17
; CHECK-NEXT:    shl r8, r17
; CHECK-NEXT:    shl r7, r17
; CHECK-NEXT:    shl r6, r17
; CHECK-NEXT:    shl r5, r17
; CHECK-NEXT:    shl r4, r17
; CHECK-NEXT:    shl r3, r17
; CHECK-NEXT:    shl r2, r17
; CHECK-NEXT:    shl r1, r17
  %2 = shl <16 x i32> %0, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <16 x i32> %2
}

define dso_local <32 x i32> @shl8(<32 x i32> noundef %0, <32 x i32> noundef %1) {
; CHECK-LABEL: shl8
; CHECK:    shl r32, r64
; CHECK-NEXT:    shl r31, r63
; CHECK-NEXT:    shl r30, r62
; CHECK-NEXT:    shl r29, r61
; CHECK-NEXT:    shl r28, r60
; CHECK-NEXT:    shl r27, r59
; CHECK-NEXT:    shl r26, r58
; CHECK-NEXT:    shl r25, r57
; CHECK-NEXT:    shl r24, r56
; CHECK-NEXT:    shl r23, r55
; CHECK-NEXT:    shl r22, r54
; CHECK-NEXT:    shl r21, r53
; CHECK-NEXT:    shl r20, r52
; CHECK-NEXT:    shl r19, r51
; CHECK-NEXT:    shl r18, r50
; CHECK-NEXT:    shl r17, r49
; CHECK-NEXT:    shl r16, r48
; CHECK-NEXT:    shl r15, r47
; CHECK-NEXT:    shl r14, r46
; CHECK-NEXT:    shl r13, r45
; CHECK-NEXT:    shl r12, r44
; CHECK-NEXT:    shl r11, r43
; CHECK-NEXT:    shl r10, r42
; CHECK-NEXT:    shl r9, r41
; CHECK-NEXT:    shl r8, r40
; CHECK-NEXT:    shl r7, r39
; CHECK-NEXT:    shl r6, r38
; CHECK-NEXT:    shl r5, r37
; CHECK-NEXT:    shl r4, r36
; CHECK-NEXT:    shl r3, r35
; CHECK-NEXT:    shl r2, r34
; CHECK-NEXT:    shl r1, r33
  %3 = shl <32 x i32> %0, %1
  ret <32 x i32> %3
}

define dso_local <32 x i32> @shl8c(<32 x i32> noundef %0) {
; CHECK-LABEL: shl8c
; CHECK:    movl r33, 0x3
; CHECK-NEXT:    shl r32, r33
; CHECK-NEXT:    shl r31, r33
; CHECK-NEXT:    shl r30, r33
; CHECK-NEXT:    shl r29, r33
; CHECK-NEXT:    shl r28, r33
; CHECK-NEXT:    shl r27, r33
; CHECK-NEXT:    shl r26, r33
; CHECK-NEXT:    shl r25, r33
; CHECK-NEXT:    shl r24, r33
; CHECK-NEXT:    shl r23, r33
; CHECK-NEXT:    shl r22, r33
; CHECK-NEXT:    shl r21, r33
; CHECK-NEXT:    shl r20, r33
; CHECK-NEXT:    shl r19, r33
; CHECK-NEXT:    shl r18, r33
; CHECK-NEXT:    shl r17, r33
; CHECK-NEXT:    shl r16, r33
; CHECK-NEXT:    shl r15, r33
; CHECK-NEXT:    shl r14, r33
; CHECK-NEXT:    shl r13, r33
; CHECK-NEXT:    shl r12, r33
; CHECK-NEXT:    shl r11, r33
; CHECK-NEXT:    shl r10, r33
; CHECK-NEXT:    shl r9, r33
; CHECK-NEXT:    shl r8, r33
; CHECK-NEXT:    shl r7, r33
; CHECK-NEXT:    shl r6, r33
; CHECK-NEXT:    shl r5, r33
; CHECK-NEXT:    shl r4, r33
; CHECK-NEXT:    shl r3, r33
; CHECK-NEXT:    shl r2, r33
; CHECK-NEXT:    shl r1, r33
  %2 = shl <32 x i32> %0, <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>
  ret <32 x i32> %2
}
