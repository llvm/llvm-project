; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 < %s | FileCheck %s

define dso_local zeroext i16 @sumul1(i8 noundef zeroext %0, i8 noundef zeroext %1) {
; CHECK-LABEL: sumul1
; CHECK:    mul r2, r1
  %3 = zext i8 %0 to i16
  %4 = zext i8 %1 to i16
  %5 = mul nuw i16 %4, %3
  ret i16 %5
}

define dso_local i32 @sumul2(i16 noundef zeroext %0, i16 noundef zeroext %1) {
; CHECK-LABEL: sumul2
; CHECK:    mul r2, r1
  %3 = zext i16 %0 to i32
  %4 = zext i16 %1 to i32
  %5 = mul nuw nsw i32 %4, %3
  ret i32 %5
}

define dso_local i64 @sumul3(i32 noundef %0, i32 noundef %1) {
; CHECK-LABEL: sumul3
; CHECK:    movl r3, 0x0
; CHECK-NEXT:    mul r2, r1
  %3 = mul i32 %1, %0
  %4 = zext i32 %3 to i64
  ret i64 %4
}

define dso_local i128 @sumul4(i64 noundef %0, i64 noundef %1) {
; CHECK-LABEL: sumul4
; CHECK:    dup r7, r5
; CHECK-NEXT:    leadisp r7, r7
; CHECK-NEXT:    leascale r2, r1
; CHECK-NEXT:    leaindex r4, r3
; CHECK-NEXT:    leabase r6, r7
  %3 = mul i64 %1, %0
  %4 = zext i64 %3 to i128
  ret i128 %4
}

define dso_local i128 @sumul5(i128 noundef %0, i128 noundef %1) {
; CHECK-LABEL: sumul5
; CHECK:    dup r9, r5
; CHECK-NEXT:    dup r10, r1
; CHECK-NEXT:    umul r9, r10
; CHECK-NEXT:    dup r11, r1
; CHECK-NEXT:    dup r12, r6
; CHECK-NEXT:    umul r12, r11
; CHECK-NEXT:    add r12, r10
; CHECK-NEXT:    dup r10, r12
; CHECK-NEXT:    flags r10
; CHECK-NEXT:    movl r13, 0x0
; CHECK-NEXT:    adc r11, r13 [r10]
; CHECK-NEXT:    dup r10, r5
; CHECK-NEXT:    dup r14, r2
; CHECK-NEXT:    umul r10, r14
; CHECK-NEXT:    add r10, r12
; CHECK-NEXT:    dup r12, r10
; CHECK-NEXT:    flags r12
; CHECK-NEXT:    adc r11, r14 [r12]
; CHECK-NEXT:    dup r12, r11
; CHECK-NEXT:    flags r12
; CHECK-NEXT:    dup r14, r6
; CHECK-NEXT:    dup r15, r2
; CHECK-NEXT:    umul r14, r15
; CHECK-NEXT:    add r14, r11
; CHECK-NEXT:    dup r11, r14
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    adc r13, r13 [r12]
; CHECK-NEXT:    adc r15, r13 [r11]
; CHECK-NEXT:    dup r11, r1
; CHECK-NEXT:    dup r12, r7
; CHECK-NEXT:    umul r11, r12
; CHECK-NEXT:    dup r13, r5
; CHECK-NEXT:    dup r16, r3
; CHECK-NEXT:    umul r16, r13
; CHECK-NEXT:    add r16, r11
; CHECK-NEXT:    dup r11, r16
; CHECK-NEXT:    flags r11
; CHECK-NEXT:    mul r3, r6
; CHECK-NEXT:    add r13, r3
; CHECK-NEXT:    mul r1, r8
; CHECK-NEXT:    add r12, r1
; CHECK-NEXT:    mul r2, r7
; CHECK-NEXT:    add r12, r2
; CHECK-NEXT:    mul r4, r5
; CHECK-NEXT:    add r13, r4
; CHECK-NEXT:    adc r13, r12 [r11]
; CHECK-NEXT:    add r14, r16
; CHECK-NEXT:    dup r1, r14
; CHECK-NEXT:    flags r1
; CHECK-NEXT:    adc r15, r13 [r1]
  %3 = mul i128 %1, %0
  ret i128 %3
}

define dso_local i64 @sumul6(i32 noundef %0, i32 noundef %1) {
; CHECK-LABEL: sumul6
; CHECK:    umul r2, r1
  %3 = zext i32 %0 to i64
  %4 = zext i32 %1 to i64
  %5 = mul nuw i64 %4, %3
  ret i64 %5
}

define dso_local i64 @sumul7(i32 noundef %0, i32 noundef %1) {
; CHECK-LABEL: sumul7
; CHECK:    smul r2, r1
  %3 = sext i32 %0 to i64
  %4 = sext i32 %1 to i64
  %5 = mul nsw i64 %4, %3
  ret i64 %5
}

define dso_local zeroext i1 @sumul8(i32 noundef %0, i32 noundef %1, i32* nocapture noundef writeonly %2) {
; CHECK-LABEL: sumul8
; CHECK:    smul r1, r2
  %4 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %0, i32 %1)
  %5 = extractvalue { i32, i1 } %4, 1
  %6 = extractvalue { i32, i1 } %4, 0
  store i32 %6, i32* %2, align 4
  ret i1 %5
}

declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32)
