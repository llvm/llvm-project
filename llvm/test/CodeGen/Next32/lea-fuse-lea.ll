; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mattr=+lea < %s | FileCheck %s

; Original C source:
; #include <stdint.h>
;
; int64_t testS_MS(int64_t a, int64_t *b) {
;     a += 5;
;     *b = a;
;     a *= 3;
;     a += 10;
;     return a;
; }
;
; int64_t testS_SM(int64_t a, int64_t *b) {
;     a += 5;
;     *b = a;
;     a += 10;
;     a *= 3;
;     return a;
; }
;
; int64_t testM_MS(int64_t a, int64_t *b) {
;     a *= 2;
;     *b = a;
;     a *= 3;
;     a += 10;
;     return a;
; }
;
; int64_t testM_SM(int64_t a, int64_t *b) {
;     a *= 2;
;     *b = a;
;     a += 10;
;     a *= 3;
;     return a;
; }
;
; int64_t testSM_SM(int64_t a, int64_t *b) {
;     a += 5;
;     a *= 2;
;     *b = a;
;     a += 10;
;     a *= 3;
;     return a;
; }
;
; int64_t testSM_MS(int64_t a, int64_t *b) {
;     a += 5;
;     a *= 2;
;     *b = a;
;     a *= 3;
;     a += 10;
;     return a;
; }
;
; int64_t testSM_S(int64_t a, int64_t *b) {
;     a += 5;
;     a *= 2;
;     *b = a;
;     a += 10;
;     return a;
; }
;
; int64_t testSM_M(int64_t a, int64_t *b) {
;     a += 5;
;     a *= 2;
;     *b = a;
;     a *= 3;
;     return a;
; }
;
; int64_t testMS_SM(int64_t a, int64_t *b) {
;     a *= 2;
;     a += 5;
;     *b = a;
;     a += 10;
;     a *= 3;
;     return a;
; }
;
; int64_t testMS_MS(int64_t a, int64_t *b) {
;     a *= 2;
;     a += 5;
;     *b = a;
;     a *= 3;
;     a += 10;
;     return a;
; }
;
; int64_t testMS_S(int64_t a, int64_t *b) {
;     a *= 2;
;     a += 5;
;     *b = a;
;     a += 10;
;     return a;
; }
;
; int64_t testMS_M(int64_t a, int64_t *b) {
;     a *= 2;
;     a += 5;
;     *b = a;
;     a *= 3;
;     return a;
; }
;
; int64_t testMS_MS_ScaleReg1(int64_t a, int64_t *b, int64_t c) {
;     a *= c;
;     a += 5;
;     *b = a;
;     a *= 3;
;     a += 10;
;     return a;
; }
;
; int64_t testMS_MS_ScaleReg2(int64_t a, int64_t *b, int64_t c) {
;     a *= 2;
;     a += 5;
;     *b = a;
;     a *= c;
;     a += 10;
;     return a;
; }

define dso_local i64 @testS_MS(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testS_MS:
; CHECK:       .LtestS_MS$local:
; CHECK-NEXT:    .type .LtestS_MS$local,@function
; CHECK-NEXT:  LBB0_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x5
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    dup r8, r2
; CHECK-NEXT:    leadisp r6, r5
; CHECK-NEXT:    leascale r6, r6
; CHECK-NEXT:    leaindex r6, r6
; CHECK-NEXT:    leabase r8, r7
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x19
; CHECK-NEXT:    movl r4, 0x3
; CHECK-NEXT:    dup r5, r6
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r6, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r6
  %3 = add nsw i64 %0, 5
  store i64 %3, i64* %1, align 8
  %4 = mul nsw i64 %3, 3
  %5 = add nsw i64 %4, 10
  ret i64 %5
}

define dso_local i64 @testS_SM(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testS_SM:
; CHECK:       .LtestS_SM$local:
; CHECK-NEXT:    .type .LtestS_SM$local,@function
; CHECK-NEXT:  LBB1_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x5
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    dup r7, r1
; CHECK-NEXT:    dup r8, r2
; CHECK-NEXT:    leadisp r6, r5
; CHECK-NEXT:    leascale r6, r6
; CHECK-NEXT:    leaindex r6, r6
; CHECK-NEXT:    leabase r8, r7
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x2D
; CHECK-NEXT:    movl r4, 0x3
; CHECK-NEXT:    dup r5, r6
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r6, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r6
  %3 = add nsw i64 %0, 5
  store i64 %3, i64* %1, align 8
  %4 = mul i64 %0, 3
  %5 = add i64 %4, 45
  ret i64 %5
}

define dso_local i64 @testM_MS(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testM_MS:
; CHECK:       .LtestM_MS$local:
; CHECK-NEXT:    .type .LtestM_MS$local,@function
; CHECK-NEXT:  LBB2_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x2
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    dup r8, r6
; CHECK-NEXT:    leadisp r8, r8
; CHECK-NEXT:    leascale r8, r5
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r8
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r7
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0xA
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r6
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r6, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r6
  %3 = shl nsw i64 %0, 1
  store i64 %3, i64* %1, align 8
  %4 = mul nsw i64 %0, 6
  %5 = add nsw i64 %4, 10
  ret i64 %5
}

define dso_local i64 @testM_SM(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testM_SM:
; CHECK:       .LtestM_SM$local:
; CHECK-NEXT:    .type .LtestM_SM$local,@function
; CHECK-NEXT:  LBB3_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x2
; CHECK-NEXT:    movl r6, 0x0
; CHECK-NEXT:    dup r7, r6
; CHECK-NEXT:    dup r8, r6
; CHECK-NEXT:    leadisp r8, r8
; CHECK-NEXT:    leascale r8, r5
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r8
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r7
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r7
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x1E
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r6
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r6, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r6
  %3 = shl nsw i64 %0, 1
  store i64 %3, i64* %1, align 8
  %4 = mul i64 %0, 6
  %5 = add i64 %4, 30
  ret i64 %5
}

define dso_local i64 @testSM_SM(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testSM_SM:
; CHECK:       .LtestSM_SM$local:
; CHECK-NEXT:    .type .LtestSM_SM$local,@function
; CHECK-NEXT:  LBB4_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0xA
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x3C
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r7
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl i64 %0, 1
  %4 = add i64 %3, 10
  store i64 %4, i64* %1, align 8
  %5 = mul i64 %0, 6
  %6 = add i64 %5, 60
  ret i64 %6
}

define dso_local i64 @testSM_MS(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testSM_MS:
; CHECK:       .LtestSM_MS$local:
; CHECK-NEXT:    .type .LtestSM_MS$local,@function
; CHECK-NEXT:  LBB5_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0xA
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x28
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r7
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl i64 %0, 1
  %4 = add i64 %3, 10
  store i64 %4, i64* %1, align 8
  %5 = mul nsw i64 %4, 3
  %6 = add nsw i64 %5, 10
  ret i64 %6
}

define dso_local i64 @testSM_S(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testSM_S:
; CHECK:       .LtestSM_S$local:
; CHECK-NEXT:    .type .LtestSM_S$local,@function
; CHECK-NEXT:  LBB6_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0xA
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x14
; CHECK-NEXT:    dup r4, r7
; CHECK-NEXT:    leadisp r4, r3
; CHECK-NEXT:    leascale r4, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r4
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl i64 %0, 1
  %4 = add i64 %3, 10
  store i64 %4, i64* %1, align 8
  %5 = add i64 %3, 20
  ret i64 %5
}

define dso_local i64 @testSM_M(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testSM_M:
; CHECK:       .LtestSM_M$local:
; CHECK-NEXT:    .type .LtestSM_M$local,@function
; CHECK-NEXT:  LBB7_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0xA
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x1E
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r7
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl i64 %0, 1
  %4 = add i64 %3, 10
  store i64 %4, i64* %1, align 8
  %5 = mul nsw i64 %4, 3
  ret i64 %5
}

define dso_local i64 @testMS_SM(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testMS_SM:
; CHECK:       .LtestMS_SM$local:
; CHECK-NEXT:    .type .LtestMS_SM$local,@function
; CHECK-NEXT:  LBB8_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x5
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x2D
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r7
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl nsw i64 %0, 1
  %4 = add nsw i64 %3, 5
  store i64 %4, i64* %1, align 8
  %5 = mul i64 %0, 6
  %6 = add i64 %5, 45
  ret i64 %6
}

define dso_local i64 @testMS_MS(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testMS_MS:
; CHECK:       .LtestMS_MS$local:
; CHECK-NEXT:    .type .LtestMS_MS$local,@function
; CHECK-NEXT:  LBB9_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x5
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0x19
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r7
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl nsw i64 %0, 1
  %4 = add nsw i64 %3, 5
  store i64 %4, i64* %1, align 8
  %5 = mul nsw i64 %4, 3
  %6 = add nsw i64 %5, 10
  ret i64 %6
}

define dso_local i64 @testMS_S(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testMS_S:
; CHECK:       .LtestMS_S$local:
; CHECK-NEXT:    .type .LtestMS_S$local,@function
; CHECK-NEXT:  LBB10_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x5
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0xF
; CHECK-NEXT:    dup r4, r7
; CHECK-NEXT:    leadisp r4, r3
; CHECK-NEXT:    leascale r4, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r4
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r4
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl nsw i64 %0, 1
  %4 = add nsw i64 %3, 5
  store i64 %4, i64* %1, align 8
  %5 = add nsw i64 %3, 15
  ret i64 %5
}

define dso_local i64 @testMS_M(i64 noundef %0, i64* nocapture noundef writeonly %1) {
; CHECK-LABEL: testMS_M:
; CHECK:       .LtestMS_M$local:
; CHECK-NEXT:    .type .LtestMS_M$local,@function
; CHECK-NEXT:  LBB11_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r5, 0x5
; CHECK-NEXT:    movl r6, 0x2
; CHECK-NEXT:    movl r7, 0x0
; CHECK-NEXT:    dup r8, r7
; CHECK-NEXT:    dup r9, r7
; CHECK-NEXT:    leadisp r9, r5
; CHECK-NEXT:    leascale r9, r6
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r8, r9
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    dup r3, tid
; CHECK-NEXT:    barrier r3, r8
; CHECK-NEXT:    dup tid, r3
; CHECK-NEXT:    movl r3, 0xF
; CHECK-NEXT:    movl r4, 0x6
; CHECK-NEXT:    dup r5, r7
; CHECK-NEXT:    leadisp r5, r3
; CHECK-NEXT:    leascale r5, r4
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r7, r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r7
  %3 = shl nsw i64 %0, 1
  %4 = add nsw i64 %3, 5
  store i64 %4, i64* %1, align 8
  %5 = mul nsw i64 %4, 3
  ret i64 %5
}

define dso_local i64 @testMS_MS_ScaleReg1(i64 noundef %0, i64* nocapture noundef writeonly %1, i64 noundef %2) {
; CHECK-LABEL: testMS_MS_ScaleReg1:
; CHECK:       .LtestMS_MS_ScaleReg1$local:
; CHECK-NEXT:    .type .LtestMS_MS_ScaleReg1$local,@function
; CHECK-NEXT:  LBB12_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    feeder.64 r5
; CHECK-NEXT:    feeder.64 r6
; CHECK-NEXT:    movl r7, 0x19
; CHECK-NEXT:    movl r8, 0x3
; CHECK-NEXT:    movl r9, 0x0
; CHECK-NEXT:    dup r10, r9
; CHECK-NEXT:    dup r11, r9
; CHECK-NEXT:    leadisp r11, r11
; CHECK-NEXT:    leascale r2, r1
; CHECK-NEXT:    leaindex r6, r5
; CHECK-NEXT:    leabase r10, r11
; CHECK-NEXT:    dup r12, r9
; CHECK-NEXT:    dup r13, r9
; CHECK-NEXT:    leadisp r13, r7
; CHECK-NEXT:    leascale r13, r8
; CHECK-NEXT:    leaindex r10, r11
; CHECK-NEXT:    leabase r12, r13
; CHECK-NEXT:    movl r7, 0x5
; CHECK-NEXT:    dup r8, r9
; CHECK-NEXT:    leadisp r8, r7
; CHECK-NEXT:    leascale r2, r1
; CHECK-NEXT:    leaindex r6, r5
; CHECK-NEXT:    leabase r9, r8
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r9
; CHECK-NEXT:    memdata r8
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r9
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r13
; CHECK-NEXT:    writer.64 ret_fid, r12
  %4 = mul nsw i64 %2, %0
  %5 = add nsw i64 %4, 5
  store i64 %5, i64* %1, align 8
  %6 = mul nsw i64 %5, 3
  %7 = add nsw i64 %6, 10
  ret i64 %7
}

define dso_local i64 @testMS_MS_ScaleReg2(i64 noundef %0, i64* nocapture noundef writeonly %1, i64 noundef %2) {
; CHECK-LABEL: testMS_MS_ScaleReg2:
; CHECK:       .LtestMS_MS_ScaleReg2$local:
; CHECK-NEXT:    .type .LtestMS_MS_ScaleReg2$local,@function
; CHECK-NEXT:  LBB13_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    feeder.64 r5
; CHECK-NEXT:    feeder.64 r6
; CHECK-NEXT:    movl r7, 0x5
; CHECK-NEXT:    movl r8, 0x2
; CHECK-NEXT:    movl r9, 0x0
; CHECK-NEXT:    dup r10, r9
; CHECK-NEXT:    dup r11, r9
; CHECK-NEXT:    leadisp r11, r7
; CHECK-NEXT:    leascale r11, r8
; CHECK-NEXT:    leaindex r2, r1
; CHECK-NEXT:    leabase r10, r11
; CHECK-NEXT:    movl r1, 0xA
; CHECK-NEXT:    dup r2, r9
; CHECK-NEXT:    leadisp r2, r1
; CHECK-NEXT:    leascale r6, r5
; CHECK-NEXT:    leaindex r10, r11
; CHECK-NEXT:    leabase r9, r2
; CHECK-NEXT:    memwrite.64.align[8] r4, r3, tid
; CHECK-NEXT:    memdata r10
; CHECK-NEXT:    memdata r11
; CHECK-NEXT:    dup r1, tid
; CHECK-NEXT:    barrier r1, r10
; CHECK-NEXT:    dup tid, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r9
  %4 = shl nsw i64 %0, 1
  %5 = add nsw i64 %4, 5
  store i64 %5, i64* %1, align 8
  %6 = mul nsw i64 %5, %2
  %7 = add nsw i64 %6, 10
  ret i64 %7
}
