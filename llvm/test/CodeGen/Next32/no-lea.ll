; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=next32 -mattr=+lea < %s | FileCheck %s
; RUN: llc -mtriple=next32 -mattr=-lea < %s | FileCheck %s

; Original C source:
; int64_t test1(int32_t a) {
;     return (int64_t)a * 21;
; }
;
; uint64_t test2(uint32_t a) {
;     return (uint64_t)a * 22;
; }
;
; int64_t test3(int32_t a) {
;     return (int64_t)(a * 23);
; }
;
; uint64_t test4(uint32_t a) {
;     return (uint64_t)(a * 24);
; }
;
; int32_t test5(int64_t a) {
;     return a * 27;
; }
;
; uint32_t test6(uint64_t a) {
;     return a * 28;
; }
;
; int64_t test7(int32_t a, int32_t b) {
;     return a * b;
; }
;
; uint64_t test8(uint32_t a, uint32_t b) {
;     return a * b;
; }
;
; int64_t test9(int32_t a, int32_t b) {
;     return (int64_t)a * b;
; }
;
; uint64_t test10(uint32_t a, uint32_t b) {
;     return (uint64_t)a * b;
; }
;
; int32_t test11(int32_t a, int64_t b) {
;     return a * b;
; }
;
; uint32_t test12(uint32_t a, uint64_t b) {
;     return a * b;
; }
;
; uint64_t test13(uint32_t a, uint64_t b, int cond) {
;     uint64_t c = (uint64_t)a << 32;
;         if (cond)
;             return c * b;
;     return c / b;
; }
;
; int64_t test14(int64_t a, int64_t b) {
; 	return (a & 0x7fffffff) * (b & 0x7fffffff);
; }
;
; int64_t test15(int64_t a) {
; 	return (a & 0x7fffffff) * 0x7fffffff;
; }
;
; int64_t test16(int64_t a, int64_t b) {
; 	return (a >> 32) * (b >> 32);
; }
;
; int64_t test17(int64_t a) {
; 	return (a >> 32) * 0x7fffffff;
; }
;
; uint64_t test18(uint64_t a, uint64_t b) {
; 	return (a >> 32) * (b >> 32);
; }
;
; uint64_t test19(uint64_t a) {
; 	return (a >> 32) * 0x7fffffff;
; }
;
; uint64_t test20(uint64_t a) {
; 	return 0x7fffffff * (a >> 32);
; }
;
; uint64_t test21(uint64_t a, uint64_t b) {
; 	return (a >> 34) * (b >> 32);
; }
;
; uint64_t test22(uint64_t a) {
; 	return (a >> 34) * 0x7fffffff;
; }

define i64 @test1(i32 %a) {
; CHECK-LABEL: test1:
; CHECK:       LBB0_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    movl r2, 0x15
; CHECK-NEXT:    smul r1, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r1
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %conv = sext i32 %a to i64
  %mul = mul nsw i64 %conv, 21
  ret i64 %mul
}

define i64 @test2(i32 %a) {
; CHECK-LABEL: test2:
; CHECK:       LBB1_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    movl r2, 0x16
; CHECK-NEXT:    umul r1, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r1
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %conv = zext i32 %a to i64
  %mul = mul nuw nsw i64 %conv, 22
  ret i64 %mul
}

define i64 @test3(i32 %a) {
; CHECK-LABEL: test3:
; CHECK:       LBB2_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    movl r2, 0x17
; CHECK-NEXT:    mul r1, r2
; CHECK-NEXT:    movl r2, 0x1F
; CHECK-NEXT:    dup r3, r1
; CHECK-NEXT:    shri r3, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r1
; CHECK-NEXT:    writer.64 ret_fid, r3
entry:
  %mul = mul nsw i32 %a, 23
  %conv = sext i32 %mul to i64
  ret i64 %conv
}

define i64 @test4(i32 %a) {
; CHECK-LABEL: test4:
; CHECK:       LBB3_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    movl r2, 0x18
; CHECK-NEXT:    mul r1, r2
; CHECK-NEXT:    movl r2, 0x0
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r1
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %mul = mul i32 %a, 24
  %conv = zext i32 %mul to i64
  ret i64 %conv
}

define i32 @test5(i64 %a) {
; CHECK-LABEL: test5:
; CHECK:       LBB4_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r2, 0x1B
; CHECK-NEXT:    mul r1, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
entry:
  %0 = trunc i64 %a to i32
  %conv = mul i32 %0, 27
  ret i32 %conv
}

define i32 @test6(i64 %a) {
; CHECK-LABEL: test6:
; CHECK:       LBB5_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r2, 0x1C
; CHECK-NEXT:    mul r1, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r1
entry:
  %0 = trunc i64 %a to i32
  %conv = mul i32 %0, 28
  ret i32 %conv
}

define i64 @test7(i32 %a, i32 %b) {
; CHECK-LABEL: test7:
; CHECK:       LBB6_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.32 r2
; CHECK-NEXT:    movl r3, 0x1F
; CHECK-NEXT:    mul r2, r1
; CHECK-NEXT:    dup r1, r2
; CHECK-NEXT:    shri r1, r3
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %mul = mul nsw i32 %b, %a
  %conv = sext i32 %mul to i64
  ret i64 %conv
}

define i64 @test8(i32 %a, i32 %b) {
; CHECK-LABEL: test8:
; CHECK:       LBB7_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.32 r2
; CHECK-NEXT:    movl r3, 0x0
; CHECK-NEXT:    mul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r3
entry:
  %mul = mul i32 %b, %a
  %conv = zext i32 %mul to i64
  ret i64 %conv
}

define i64 @test9(i32 %a, i32 %b) {
; CHECK-LABEL: test9:
; CHECK:       LBB8_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.32 r2
; CHECK-NEXT:    smul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %conv = sext i32 %a to i64
  %conv1 = sext i32 %b to i64
  %mul = mul nsw i64 %conv1, %conv
  ret i64 %mul
}

define i64 @test10(i32 %a, i32 %b) {
; CHECK-LABEL: test10:
; CHECK:       LBB9_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.32 r2
; CHECK-NEXT:    umul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %conv = zext i32 %a to i64
  %conv1 = zext i32 %b to i64
  %mul = mul nuw i64 %conv1, %conv
  ret i64 %mul
}

define i32 @test11(i32 %a, i64 %b) {
; CHECK-LABEL: test11:
; CHECK:       LBB10_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    mul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r2
entry:
  %0 = trunc i64 %b to i32
  %conv1 = mul i32 %0, %a
  ret i32 %conv1
}

define i32 @test12(i32 %a, i64 %b) {
; CHECK-LABEL: test12:
; CHECK:       LBB11_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    mul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.32 ret_fid, r2
entry:
  %0 = trunc i64 %b to i32
  %conv1 = mul i32 %0, %a
  ret i32 %conv1
}

define i64 @test13(i32 %a, i64 %b, i32 %cond) {
; CHECK-LABEL: test13:
; CHECK:       LBB12_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.32 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.32 r4
; CHECK-NEXT:    movl r5, 0x0
; CHECK-NEXT:    sub r4, r5
; CHECK-NEXT:    dup r6, r4
; CHECK-NEXT:    flags r6
; CHECK-NEXT:    movl mbb_addr, LBB12_2
; CHECK-NEXT:    chain.e mbb_addr, 0x25 [r6]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r3
; CHECK-NEXT:    movl mbb_addr, LBB12_1
; CHECK-NEXT:    chain.ne mbb_addr, 0x3E [r6]
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r2
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:  LBB12_1: # %if.then
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    mul r1, r2
; CHECK-NEXT:    movl mbb_addr, LBB12_4
; CHECK-NEXT:    chain mbb_addr, 0x64
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:  LBB12_2: # %if.end
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r2
; CHECK-NEXT:    feeder.p.32 r3
; CHECK-NEXT:    movl r4, 0x0
; CHECK-NEXT:    movl call_addr, __next32_udivrem64
; CHECK-NEXT:    movl call_ret_fid, .Ltmp0
; CHECK-NEXT:    chain call_addr, 0x64
; CHECK-NEXT:    writer.32 call_addr, tid
; CHECK-NEXT:    writer.32 call_addr, call_ret_fid
; CHECK-NEXT:    writer.64 call_addr, r4
; CHECK-NEXT:    writer.64 call_addr, r1
; CHECK-NEXT:    writer.64 call_addr, r2
; CHECK-NEXT:    writer.64 call_addr, r3
; CHECK-NEXT:    movl call_ret_bb, LBB12_3
; CHECK-NEXT:    chain.rn call_ret_bb, 0x64
; CHECK-NEXT:    writer.32 call_ret_bb, tid
; CHECK-NEXT:    writer.32 call_ret_bb, ret_fid
; CHECK-NEXT:  LBB12_3: # %if.end
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:  .Ltmp0:
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.128 r2
; CHECK-NEXT:    feeder.p.128 r3
; CHECK-NEXT:    feeder.p.128 r5
; CHECK-NEXT:    feeder.p.128 r1
; CHECK-NEXT:    movl mbb_addr, LBB12_4
; CHECK-NEXT:    chain mbb_addr, 0x64
; CHECK-NEXT:    writer.32 mbb_addr, tid
; CHECK-NEXT:    writer.32 mbb_addr, ret_fid
; CHECK-NEXT:    writer.32 mbb_addr, r1
; CHECK-NEXT:    writer.32 mbb_addr, r5
; CHECK-NEXT:  LBB12_4: # %cleanup
; CHECK-NEXT:    feeder.p.32 tid
; CHECK-NEXT:    feeder.p.32 ret_fid
; CHECK-NEXT:    feeder.p.32 r1
; CHECK-NEXT:    feeder.p.32 r5
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r5
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %conv = zext i32 %a to i64
  %shl = shl nuw i64 %conv, 32
  %tobool.not = icmp eq i32 %cond, 0
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %mul = mul i64 %shl, %b
  br label %cleanup

if.end:                                           ; preds = %entry
  %div = udiv i64 %shl, %b
  br label %cleanup

cleanup:                                          ; preds = %if.end, %if.then
  %retval.0 = phi i64 [ %mul, %if.then ], [ %div, %if.end ]
  ret i64 %retval.0
}

define i64 @test14(i64 %0, i64 %1) {
; CHECK-LABEL: test14:
; CHECK:       LBB13_0:
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r2, 0x7FFFFFFF
; CHECK-NEXT:    and r1, r2
; CHECK-NEXT:    and r3, r2
; CHECK-NEXT:    umul r3, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r3
; CHECK-NEXT:    writer.64 ret_fid, r1
  %3 = and i64 %0, 2147483647
  %4 = and i64 %1, 2147483647
  %5 = mul nuw nsw i64 %4, %3
  ret i64 %5
}

define i64 @test15(i64 %a) {
; CHECK-LABEL: test15:
; CHECK:       LBB14_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r2, 0x7FFFFFFF
; CHECK-NEXT:    and r1, r2
; CHECK-NEXT:    umul r1, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r1
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %and = and i64 %a, 2147483647
  %mul = mul nuw nsw i64 %and, 2147483647
  ret i64 %mul
}

define i64 @test16(i64 %a, i64 %b) {
; CHECK-LABEL: test16:
; CHECK:       LBB15_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    smul r4, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r4
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %shr = ashr i64 %a, 32
  %shr1 = ashr i64 %b, 32
  %mul = mul nsw i64 %shr1, %shr
  ret i64 %mul
}

define i64 @test17(i64 %a) {
; CHECK-LABEL: test17:
; CHECK:       LBB16_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r1, 0x7FFFFFFF
; CHECK-NEXT:    smul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %shr = ashr i64 %a, 32
  %mul = mul nsw i64 %shr, 2147483647
  ret i64 %mul
}

define i64 @test18(i64 %a, i64 %b) {
; CHECK-LABEL: test18:
; CHECK:       LBB17_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    umul r4, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r4
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %shr = lshr i64 %a, 32
  %shr1 = lshr i64 %b, 32
  %mul = mul nuw i64 %shr1, %shr
  ret i64 %mul
}

define i64 @test19(i64 %a) {
; CHECK-LABEL: test19:
; CHECK:       LBB18_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r1, 0x7FFFFFFF
; CHECK-NEXT:    umul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %shr = lshr i64 %a, 32
  %mul = mul nuw nsw i64 %shr, 2147483647
  ret i64 %mul
}

define i64 @test20(i64 %a) {
; CHECK-LABEL: test20:
; CHECK:       LBB19_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r1, 0x7FFFFFFF
; CHECK-NEXT:    umul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %shr = lshr i64 %a, 32
  %mul = mul nuw nsw i64 %shr, 2147483647
  ret i64 %mul
}

define i64 @test21(i64 %a, i64 %b) {
; CHECK-LABEL: test21:
; CHECK:       LBB20_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    feeder.64 r3
; CHECK-NEXT:    feeder.64 r4
; CHECK-NEXT:    movl r1, 0x2
; CHECK-NEXT:    shr r2, r1
; CHECK-NEXT:    umul r4, r2
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r4
; CHECK-NEXT:    writer.64 ret_fid, r2
entry:
  %shr = lshr i64 %a, 34
  %shr1 = lshr i64 %b, 32
  %mul = mul nuw nsw i64 %shr1, %shr
  ret i64 %mul
}

define i64 @test22(i64 %a) {
; CHECK-LABEL: test22:
; CHECK:       LBB21_0:
; CHECK-NEXT:  # %bb.0: # %entry
; CHECK-NEXT:    feeder.32 tid
; CHECK-NEXT:    feeder.32 ret_fid
; CHECK-NEXT:    feeder.64 r1
; CHECK-NEXT:    feeder.64 r2
; CHECK-NEXT:    movl r1, 0x2
; CHECK-NEXT:    shr r2, r1
; CHECK-NEXT:    movl r1, 0x7FFFFFFF
; CHECK-NEXT:    umul r2, r1
; CHECK-NEXT:    chain ret_fid, 0x64
; CHECK-NEXT:    writer.32 ret_fid, tid
; CHECK-NEXT:    writer.64 ret_fid, r2
; CHECK-NEXT:    writer.64 ret_fid, r1
entry:
  %shr = lshr i64 %a, 34
  %mul = mul nuw nsw i64 %shr, 2147483647
  ret i64 %mul
}
