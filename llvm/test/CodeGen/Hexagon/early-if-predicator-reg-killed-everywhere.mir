# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=hexagon -run-pass early-if-predicator %s -o - -verify-machineinstrs | FileCheck %s

# Test that "killed" flag on the same virtual register in merged blocks is
# removed for the first spliced block and is saved for the second one.
# Otherwise, register will be killed twice in a single block in the resulting
# MIR, which is incorrect.

---
name:            my_func
alignment:       16
tracksRegLiveness: true
liveins:
  - { reg: '$r0', virtual-reg: '%0' }
  - { reg: '$r1', virtual-reg: '%1' }
body:             |
  ; CHECK-LABEL: name: my_func
  ; CHECK: bb.0:
  ; CHECK-NEXT:   liveins: $r0, $r1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:intregs = COPY $r0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:intregs = COPY $r1
  ; CHECK-NEXT:   [[S2_tstbit_i:%[0-9]+]]:predregs = S2_tstbit_i [[COPY1]], 0
  ; CHECK-NEXT:   S4_storeirif_io [[S2_tstbit_i]], [[COPY]], 0, 2
  ; CHECK-NEXT:   S4_storeirit_io [[S2_tstbit_i]], killed [[COPY]], 0, 1
  ; CHECK-NEXT:   PS_jmpret $r31, implicit-def dead $pc
  bb.0:
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $r0, $r1

    %0:intregs = COPY $r0
    %1:intregs = COPY $r1
    %2:predregs = S2_tstbit_i %1, 0
    J2_jumpf %2, %bb.2, implicit-def dead $pc
    J2_jump %bb.1, implicit-def dead $pc

  bb.1:
    successors: %bb.3(0x80000000)

    S4_storeiri_io killed %0, 0, 1
    J2_jump %bb.3, implicit-def dead $pc

  bb.2:
    successors: %bb.3(0x80000000)

    S4_storeiri_io killed %0, 0, 2
    J2_jump %bb.3, implicit-def dead $pc

  bb.3:
    PS_jmpret $r31, implicit-def dead $pc

...
