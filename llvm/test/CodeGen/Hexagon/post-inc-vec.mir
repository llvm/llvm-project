#RUN: llc -march=hexagon -run-pass hexagon-postincopt %s -o - | FileCheck  %s

# Test that we do not generate two post-increment vector load/store
# in the loop.
# CHECK: J2_loop0r
# CHECK: V6_vS32b_pi
# CHECK-NOT: = V6_vL32b_pi
# CHECK: V6_vL32b_ai
# CHECK: V6_vL32b_ai
# CHECK: V6_vS32b_ai
# CHECK: ENDLOOP0

--- |
  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <1024 x i1> @llvm.hexagon.V6.pred.scalar2v2.128B(i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(write)
  declare void @llvm.hexagon.V6.vS32b.qpred.ai.128B(<1024 x i1>, ptr, <32 x i32>) #1

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32>, <32 x i32>) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32>) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32>) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.lvsplath.128B(i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.vasrhbsat.128B(<32 x i32>, <32 x i32>, i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32>, <32 x i32>) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.vasrh.128B(<32 x i32>, i32) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <32 x i32> @llvm.hexagon.V6.vavgh.128B(<32 x i32>, <32 x i32>) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare <64 x i32> @llvm.hexagon.V6.vmpabusv.128B(<64 x i32>, <64 x i32>) #0

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
  declare void @llvm.assume(i1 noundef) #2

  ; Function Attrs: noinline nounwind
  define void @blah(i32 %0, i32 %1, ptr noalias %2, ptr noalias nocapture readonly %3, ptr noalias nocapture readonly %4, ptr nocapture readnone %5, ptr nocapture readnone %6, i32 %7, i32 %8, ptr nocapture readonly %9, ptr nocapture readonly %10) local_unnamed_addr #3 {
  entry:
    %11 = call i32 @llvm.hexagon.S2.extractu(i32 %0, i32 23, i32 9)
    %12 = shl i32 %11, 7
    %mul16.i = mul nsw i32 %12, %1
    %add.i = add nsw i32 %1, 1
    %mul17.i = mul nsw i32 %add.i, %12
    %cmp184.i = icmp slt i32 %mul16.i, %mul17.i
    br i1 %cmp184.i, label %for.body.lr.ph.i, label %for.end.i

  for.body.lr.ph.i:                                 ; preds = %entry
    %13 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> <i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576, i32 1077952576>, <32 x i32> <i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144, i32 269488144>) #5
    %14 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> zeroinitializer, <32 x i32> zeroinitializer) #5
    %15 = tail call <32 x i32> @llvm.hexagon.V6.lvsplath.128B(i32 32) #5
    %cgep = getelementptr i8, ptr %2, i32 %mul16.i
    %cgep8 = getelementptr i8, ptr %4, i32 %mul16.i
    %cgep9 = getelementptr i8, ptr %3, i32 %mul16.i
    br label %for.body.i

  for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
    %lsr.iv6 = phi ptr [ %cgep12, %for.body.i ], [ %cgep9, %for.body.lr.ph.i ]
    %lsr.iv3 = phi ptr [ %cgep11, %for.body.i ], [ %cgep8, %for.body.lr.ph.i ]
    %lsr.iv = phi ptr [ %cgep10, %for.body.i ], [ %cgep, %for.body.lr.ph.i ]
    %elemIdx.05.i = phi i32 [ %mul16.i, %for.body.lr.ph.i ], [ %add19.i, %for.body.i ]
    %16 = load <32 x i32>, ptr %lsr.iv6, align 128
    %17 = load <32 x i32>, ptr %lsr.iv3, align 128
    %18 = tail call <64 x i32> @llvm.hexagon.V6.vcombine.128B(<32 x i32> %17, <32 x i32> %16) #5
    %19 = tail call <64 x i32> @llvm.hexagon.V6.vmpabusv.128B(<64 x i32> %13, <64 x i32> %18) #5
    %20 = tail call <64 x i32> @llvm.hexagon.V6.vmpabusv.128B(<64 x i32> %14, <64 x i32> %18) #5
    %21 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %19) #5
    %22 = tail call <32 x i32> @llvm.hexagon.V6.hi.128B(<64 x i32> %20) #5
    %23 = tail call <32 x i32> @llvm.hexagon.V6.vasrh.128B(<32 x i32> %22, i32 7) #5
    %24 = tail call <32 x i32> @llvm.hexagon.V6.vavgh.128B(<32 x i32> %21, <32 x i32> %23) #5
    %25 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %19) #5
    %26 = tail call <32 x i32> @llvm.hexagon.V6.lo.128B(<64 x i32> %20) #5
    %27 = tail call <32 x i32> @llvm.hexagon.V6.vasrh.128B(<32 x i32> %26, i32 7) #5
    %28 = tail call <32 x i32> @llvm.hexagon.V6.vavgh.128B(<32 x i32> %25, <32 x i32> %27) #5
    %29 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %24, <32 x i32> %15) #5
    %30 = tail call <32 x i32> @llvm.hexagon.V6.vaddhsat.128B(<32 x i32> %28, <32 x i32> %15) #5
    %31 = tail call <32 x i32> @llvm.hexagon.V6.vasrhbsat.128B(<32 x i32> %29, <32 x i32> %30, i32 4) #5
    store <32 x i32> %31, ptr %lsr.iv, align 128
    %add19.i = add nsw i32 %elemIdx.05.i, 128
    %cmp18.i = icmp slt i32 %add19.i, %mul17.i
    %cgep10 = getelementptr i8, ptr %lsr.iv, i32 128
    %cgep11 = getelementptr i8, ptr %lsr.iv3, i32 128
    %cgep12 = getelementptr i8, ptr %lsr.iv6, i32 128
    br i1 %cmp18.i, label %for.body.i, label %for.end.i

  for.end.i:                                        ; preds = %for.body.i, %entry
    ret void
  }

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
  declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #4

  ; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
  declare i32 @llvm.hexagon.S2.extractu(i32, i32 immarg, i32 immarg) #0

  attributes #0 = { nocallback nofree nosync nounwind willreturn memory(none) }
  attributes #1 = { nocallback nofree nosync nounwind willreturn memory(write) }
  attributes #2 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
  attributes #3 = { noinline nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="hexagonv68" "target-features"="+hvx-length128b,+hvxv68,+v68,-long-calls,-small-data" "unsafe-fp-math"="false" "use-soft-float"="false" }
  attributes #4 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
  attributes #5 = { nounwind }

...
---
name:            blah
alignment:       16
exposesReturnsTwice: false
legalized:       false
regBankSelected: false
selected:        false
failedISel:      false
tracksRegLiveness: true
hasWinCFI:       false
callsEHReturn:   false
callsUnwindInit: false
hasEHCatchret:   false
hasEHScopes:     false
hasEHFunclets:   false
isOutlined:      false
debugInstrRef:   false
failsVerification: false
tracksDebugUserValues: false
registers:
  - { id: 0, class: intregs, preferred-register: '' }
  - { id: 1, class: intregs, preferred-register: '' }
  - { id: 2, class: hvxwr, preferred-register: '' }
  - { id: 3, class: hvxwr, preferred-register: '' }
  - { id: 4, class: hvxvr, preferred-register: '' }
  - { id: 5, class: intregs, preferred-register: '' }
  - { id: 6, class: intregs, preferred-register: '' }
  - { id: 7, class: intregs, preferred-register: '' }
  - { id: 8, class: intregs, preferred-register: '' }
  - { id: 9, class: intregs, preferred-register: '' }
  - { id: 10, class: intregs, preferred-register: '' }
  - { id: 11, class: intregs, preferred-register: '' }
  - { id: 12, class: intregs, preferred-register: '' }
  - { id: 13, class: intregs, preferred-register: '' }
  - { id: 14, class: intregs, preferred-register: '' }
  - { id: 15, class: intregs, preferred-register: '' }
  - { id: 16, class: intregs, preferred-register: '' }
  - { id: 17, class: intregs, preferred-register: '' }
  - { id: 18, class: intregs, preferred-register: '' }
  - { id: 19, class: intregs, preferred-register: '' }
  - { id: 20, class: intregs, preferred-register: '' }
  - { id: 21, class: intregs, preferred-register: '' }
  - { id: 22, class: intregs, preferred-register: '' }
  - { id: 23, class: intregs, preferred-register: '' }
  - { id: 24, class: intregs, preferred-register: '' }
  - { id: 25, class: predregs, preferred-register: '' }
  - { id: 26, class: predregs, preferred-register: '' }
  - { id: 27, class: hvxvr, preferred-register: '' }
  - { id: 28, class: intregs, preferred-register: '' }
  - { id: 29, class: hvxvr, preferred-register: '' }
  - { id: 30, class: intregs, preferred-register: '' }
  - { id: 31, class: hvxvr, preferred-register: '' }
  - { id: 32, class: intregs, preferred-register: '' }
  - { id: 33, class: hvxvr, preferred-register: '' }
  - { id: 34, class: hvxvr, preferred-register: '' }
  - { id: 35, class: hvxwr, preferred-register: '' }
  - { id: 36, class: hvxwr, preferred-register: '' }
  - { id: 37, class: hvxwr, preferred-register: '' }
  - { id: 38, class: hvxvr, preferred-register: '' }
  - { id: 39, class: hvxvr, preferred-register: '' }
  - { id: 40, class: intregs, preferred-register: '' }
  - { id: 41, class: hvxvr, preferred-register: '' }
  - { id: 42, class: hvxvr, preferred-register: '' }
  - { id: 43, class: hvxvr, preferred-register: '' }
  - { id: 44, class: hvxvr, preferred-register: '' }
  - { id: 45, class: hvxvr, preferred-register: '' }
  - { id: 46, class: hvxvr, preferred-register: '' }
  - { id: 47, class: hvxvr, preferred-register: '' }
  - { id: 48, class: hvxvr, preferred-register: '' }
  - { id: 49, class: intregslow8, preferred-register: '' }
  - { id: 50, class: hvxvr, preferred-register: '' }
  - { id: 51, class: predregs, preferred-register: '' }
  - { id: 52, class: intregs, preferred-register: '' }
  - { id: 53, class: intregs, preferred-register: '' }
  - { id: 54, class: intregs, preferred-register: '' }
  - { id: 55, class: intregs, preferred-register: '' }
  - { id: 56, class: intregs, preferred-register: '' }
  - { id: 57, class: intregs, preferred-register: '' }
  - { id: 58, class: intregs, preferred-register: '' }
  - { id: 59, class: intregs, preferred-register: '' }
  - { id: 60, class: intregs, preferred-register: '' }
  - { id: 61, class: hvxvr, preferred-register: '' }
  - { id: 62, class: intregs, preferred-register: '' }
  - { id: 63, class: hvxvr, preferred-register: '' }
  - { id: 64, class: intregs, preferred-register: '' }
  - { id: 65, class: hvxwr, preferred-register: '' }
  - { id: 66, class: hvxwr, preferred-register: '' }
  - { id: 67, class: hvxwr, preferred-register: '' }
  - { id: 68, class: hvxvr, preferred-register: '' }
  - { id: 69, class: hvxvr, preferred-register: '' }
  - { id: 70, class: hvxvr, preferred-register: '' }
  - { id: 71, class: hvxvr, preferred-register: '' }
  - { id: 72, class: hvxvr, preferred-register: '' }
  - { id: 73, class: hvxvr, preferred-register: '' }
  - { id: 74, class: hvxvr, preferred-register: '' }
  - { id: 75, class: intregs, preferred-register: '' }
  - { id: 76, class: intregs, preferred-register: '' }
  - { id: 77, class: intregs, preferred-register: '' }
  - { id: 78, class: intregs, preferred-register: '' }
  - { id: 79, class: hvxvr, preferred-register: '' }
  - { id: 80, class: intregs, preferred-register: '' }
  - { id: 81, class: hvxvr, preferred-register: '' }
  - { id: 82, class: intregs, preferred-register: '' }
  - { id: 83, class: hvxwr, preferred-register: '' }
  - { id: 84, class: hvxwr, preferred-register: '' }
  - { id: 85, class: hvxwr, preferred-register: '' }
  - { id: 86, class: hvxvr, preferred-register: '' }
  - { id: 87, class: hvxvr, preferred-register: '' }
  - { id: 88, class: hvxvr, preferred-register: '' }
  - { id: 89, class: hvxvr, preferred-register: '' }
  - { id: 90, class: hvxvr, preferred-register: '' }
  - { id: 91, class: hvxvr, preferred-register: '' }
  - { id: 92, class: hvxvr, preferred-register: '' }
  - { id: 93, class: intregs, preferred-register: '' }
  - { id: 94, class: intregs, preferred-register: '' }
  - { id: 95, class: intregs, preferred-register: '' }
  - { id: 96, class: intregs, preferred-register: '' }
  - { id: 97, class: predregs, preferred-register: '' }
  - { id: 98, class: predregs, preferred-register: '' }
liveins:
  - { reg: '$r0', virtual-reg: '%16' }
  - { reg: '$r1', virtual-reg: '%17' }
  - { reg: '$r2', virtual-reg: '%18' }
  - { reg: '$r3', virtual-reg: '%19' }
  - { reg: '$r4', virtual-reg: '%20' }
frameInfo:
  isFrameAddressTaken: false
  isReturnAddressTaken: false
  hasStackMap:     false
  hasPatchPoint:   false
  stackSize:       0
  offsetAdjustment: 0
  maxAlignment:    4
  adjustsStack:    false
  hasCalls:        false
  stackProtector:  ''
  functionContext: ''
  maxCallFrameSize: 4294967295
  cvBytesOfCalleeSavedRegisters: 0
  hasOpaqueSPAdjustment: false
  hasVAStart:      false
  hasMustTailInVarArgFunc: false
  hasTailCall:     false
  localFrameSize:  0
  savePoint:       ''
  restorePoint:    ''
fixedStack:
  - { id: 0, type: default, offset: 24, size: 4, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 1, type: default, offset: 20, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 2, type: default, offset: 16, size: 4, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 3, type: default, offset: 12, size: 4, alignment: 4, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
  - { id: 4, type: default, offset: 8, size: 4, alignment: 8, stack-id: default,
      isImmutable: true, isAliased: false, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
stack:           []
entry_values:    []
callSites:       []
debugValueSubstitutions: []
constants:       []
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x40000000), %bb.3(0x40000000)
    liveins: $r0, $r1, $r2, $r3, $r4

    %20:intregs = COPY $r4
    %19:intregs = COPY $r3
    %18:intregs = COPY $r2
    %17:intregs = COPY $r1
    %16:intregs = COPY $r0
    %22:intregs = S2_extractu %16, 23, 9
    %23:intregs = S2_asl_i_r %22, 7
    %0:intregs = nsw M2_mpyi %23, %17
    %24:intregs = nsw A2_addi %17, 1
    %1:intregs = nsw M2_mpyi %24, %23
    %25:predregs = C2_cmpgt %1, %0
    J2_jumpf %25, %bb.3, implicit-def dead $pc
    J2_jump %bb.1, implicit-def dead $pc

  bb.1.for.body.lr.ph.i:
    successors: %bb.4(0x40000000), %bb.6(0x40000000)

    %28:intregs = A2_tfrsi 269488144
    %27:hvxvr = V6_lvsplatw %28
    %30:intregs = A2_tfrsi 1077952576
    %29:hvxvr = V6_lvsplatw %30
    %2:hvxwr = REG_SEQUENCE %29, %subreg.vsub_hi, %27, %subreg.vsub_lo
    %31:hvxvr = V6_vd0
    %3:hvxwr = REG_SEQUENCE %31, %subreg.vsub_hi, %31, %subreg.vsub_lo
    %32:intregs = A2_tfrsi 32
    %4:hvxvr = V6_lvsplath %32
    %5:intregs = A2_add %18, %0
    %6:intregs = A2_add %20, %0
    %7:intregs = A2_add %19, %0
    %40:intregs = A2_tfrsi 7
    %49:intregslow8 = A2_tfrsi 4
    %52:intregs = A2_sub %1, %0
    %53:intregs = A2_addi %52, 127
    %54:intregs = S2_lsr_i_r %53, 7
    %55:intregs = COPY %54
    %56:intregs = S2_lsr_i_r %55, 1
    %57:intregs = A2_andir %55, 1
    %97:predregs = C2_cmpgtui %56, 0
    J2_jumpf %97, %bb.6, implicit-def $pc
    J2_jump %bb.4, implicit-def $pc

  bb.4:
    successors: %bb.5(0x80000000)

    J2_loop0r %bb.5, %56, implicit-def $lc0, implicit-def $sa0, implicit-def $usr
    J2_jump %bb.5, implicit-def $pc

  bb.5:
    successors: %bb.5(0x40000000), %bb.6(0x40000000)

    %58:intregs = PHI %7, %bb.4, %80, %bb.5
    %59:intregs = PHI %6, %bb.4, %82, %bb.5
    %60:intregs = PHI %5, %bb.4, %93, %bb.5
    %61:hvxvr, %62:intregs = V6_vL32b_pi %58, 128 :: (load (s1024) from %ir.lsr.iv6)
    %63:hvxvr, %64:intregs = V6_vL32b_pi %59, 128 :: (load (s1024) from %ir.lsr.iv3)
    %65:hvxwr = REG_SEQUENCE %63, %subreg.vsub_hi, %61, %subreg.vsub_lo
    %66:hvxwr = V6_vmpabusv %2, %65
    %67:hvxwr = V6_vmpabusv %3, %65
    %68:hvxvr = V6_vasrh %67.vsub_hi, %40
    %69:hvxvr = V6_vavgh %66.vsub_hi, %68
    %70:hvxvr = V6_vasrh %67.vsub_lo, %40
    %71:hvxvr = V6_vavgh %66.vsub_lo, %70
    %72:hvxvr = V6_vaddhsat %69, %4
    %73:hvxvr = V6_vaddhsat %71, %4
    %74:hvxvr = V6_vasrhbsat %72, %73, %49
    %75:intregs = V6_vS32b_pi %60, 128, %74 :: (store (s1024) into %ir.lsr.iv)
    %79:hvxvr, %80:intregs = V6_vL32b_pi %62, 128 :: (load (s1024) from %ir.lsr.iv6 + 128)
    %81:hvxvr, %82:intregs = V6_vL32b_pi %64, 128 :: (load (s1024) from %ir.lsr.iv3 + 128)
    %83:hvxwr = REG_SEQUENCE %81, %subreg.vsub_hi, %79, %subreg.vsub_lo
    %84:hvxwr = V6_vmpabusv %2, %83
    %85:hvxwr = V6_vmpabusv %3, %83
    %86:hvxvr = V6_vasrh %85.vsub_hi, %40
    %87:hvxvr = V6_vavgh %84.vsub_hi, %86
    %88:hvxvr = V6_vasrh %85.vsub_lo, %40
    %89:hvxvr = V6_vavgh %84.vsub_lo, %88
    %90:hvxvr = V6_vaddhsat %87, %4
    %91:hvxvr = V6_vaddhsat %89, %4
    %92:hvxvr = V6_vasrhbsat %90, %91, %49
    %93:intregs = V6_vS32b_pi %75, 128, %92 :: (store (s1024) into %ir.lsr.iv + 128)
    ENDLOOP0 %bb.5, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
    J2_jump %bb.6, implicit-def $pc

  bb.6:
    successors: %bb.7(0x40000000), %bb.8(0x40000000)

    %94:intregs = PHI %7, %bb.1, %80, %bb.5
    %95:intregs = PHI %6, %bb.1, %82, %bb.5
    %96:intregs = PHI %5, %bb.1, %93, %bb.5
    %98:predregs = C2_cmpgtui %57, 0
    J2_jumpf %98, %bb.8, implicit-def $pc
    J2_jump %bb.7, implicit-def $pc

  bb.7:
    successors: %bb.2(0x80000000)

    J2_jump %bb.2, implicit-def $pc

  bb.2.for.body.i (machine-block-address-taken):
    successors: %bb.8(0x04000000)

    %33:hvxvr, %15:intregs = V6_vL32b_pi %94, 128 :: (load (s1024) from %ir.lsr.iv6)
    %34:hvxvr, %14:intregs = V6_vL32b_pi %95, 128 :: (load (s1024) from %ir.lsr.iv3)
    %35:hvxwr = REG_SEQUENCE %34, %subreg.vsub_hi, %33, %subreg.vsub_lo
    %36:hvxwr = V6_vmpabusv %2, %35
    %37:hvxwr = V6_vmpabusv %3, %35
    %41:hvxvr = V6_vasrh %37.vsub_hi, %40
    %42:hvxvr = V6_vavgh %36.vsub_hi, %41
    %45:hvxvr = V6_vasrh %37.vsub_lo, %40
    %46:hvxvr = V6_vavgh %36.vsub_lo, %45
    %47:hvxvr = V6_vaddhsat %42, %4
    %48:hvxvr = V6_vaddhsat %46, %4
    %50:hvxvr = V6_vasrhbsat %47, %48, %49
    %13:intregs = V6_vS32b_pi %96, 128, %50 :: (store (s1024) into %ir.lsr.iv)
    J2_jump %bb.8, implicit-def $pc

  bb.8:
    successors: %bb.3(0x80000000)

    J2_jump %bb.3, implicit-def $pc

  bb.3.for.end.i:
    PS_jmpret $r31, implicit-def dead $pc

...
