; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -march=hexagon -verify-machineinstrs  < %s | FileCheck %s

@.str = private unnamed_addr constant [31 x i8] c"DHRYSTONE PROGRAM, 3'RD STRING\00", align 1
@.str1 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...)

; Function Attrs: nounwind
define i32 @main() {
; CHECK-LABEL: main:
; CHECK:         .cfi_startproc
; CHECK-NEXT:  // %bb.0: // %entry
; CHECK-NEXT:    {
; CHECK-NEXT:     r1 = ##.L.str
; CHECK-NEXT:     allocframe(#40)
; CHECK-NEXT:    }
; CHECK-NEXT:    .cfi_def_cfa r30, 8
; CHECK-NEXT:    .cfi_offset r31, -4
; CHECK-NEXT:    .cfi_offset r30, -8
; CHECK-NEXT:    {
; CHECK-NEXT:     r0 = add(r29,#8)
; CHECK-NEXT:     memw(r29+#0) = r0.new
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r0 = memub(r1+#30)
; CHECK-NEXT:     memb(r29+#38) = r0.new
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r0 = ##.L.str1
; CHECK-NEXT:     r2 = memub(r1+#29)
; CHECK-NEXT:     r3 = memub(r1+#28)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 |= asl(r2,#8)
; CHECK-NEXT:     r4 = memub(r1+#27)
; CHECK-NEXT:     memh(r29+#36) = r3.new
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 = asl(r4,#24)
; CHECK-NEXT:     r2 = memub(r1+#26)
; CHECK-NEXT:     r4 = memub(r1+#25)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 |= asl(r2,#16)
; CHECK-NEXT:     r2 = asl(r4,#8)
; CHECK-NEXT:     r5 = memub(r1+#24)
; CHECK-NEXT:     r4 = memub(r1+#19)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 |= or(r2,r5)
; CHECK-NEXT:     r2 = asl(r4,#24)
; CHECK-NEXT:     r6 = memub(r1+#18)
; CHECK-NEXT:     memw(r29+#32) = r3.new
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r2 |= asl(r6,#16)
; CHECK-NEXT:     r3 = memub(r1+#17)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 = asl(r3,#8)
; CHECK-NEXT:     r4 = memub(r1+#16)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r2 |= or(r3,r4)
; CHECK-NEXT:     r3 = memub(r1+#23)
; CHECK-NEXT:     r4 = memub(r1+#22)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 = asl(r3,#24)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r3 |= asl(r4,#16)
; CHECK-NEXT:     r4 = memub(r1+#11)
; CHECK-NEXT:     r5 = memub(r1+#21)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r4 = asl(r4,#24)
; CHECK-NEXT:     r5 = asl(r5,#8)
; CHECK-NEXT:     r6 = memub(r1+#10)
; CHECK-NEXT:     r8 = memub(r1+#20)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r4 |= asl(r6,#16)
; CHECK-NEXT:     r3 |= or(r5,r8)
; CHECK-NEXT:     r7 = memub(r1+#9)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r6 = asl(r7,#8)
; CHECK-NEXT:     r7 = memub(r1+#8)
; CHECK-NEXT:     memd(r29+#24) = r3:2
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r4 |= or(r6,r7)
; CHECK-NEXT:     r6 = memub(r1+#3)
; CHECK-NEXT:     r5 = memub(r1+#15)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r6 = asl(r6,#24)
; CHECK-NEXT:     r5 = asl(r5,#24)
; CHECK-NEXT:     r7 = memub(r1+#2)
; CHECK-NEXT:     r9 = memub(r1+#14)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r6 |= asl(r7,#16)
; CHECK-NEXT:     r5 |= asl(r9,#16)
; CHECK-NEXT:     r14 = memub(r1+#1)
; CHECK-NEXT:     r28 = memub(r1+#13)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r7 = asl(r14,#8)
; CHECK-NEXT:     r8 = asl(r28,#8)
; CHECK-NEXT:     r15 = memub(r1+#0)
; CHECK-NEXT:     r11 = memub(r1+#12)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r6 |= or(r7,r15)
; CHECK-NEXT:     r5 |= or(r8,r11)
; CHECK-NEXT:     r7 = memub(r1+#7)
; CHECK-NEXT:     r10 = memub(r1+#6)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r7 = asl(r7,#24)
; CHECK-NEXT:     r12 = memub(r1+#5)
; CHECK-NEXT:     memd(r29+#16) = r5:4
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r7 |= asl(r10,#16)
; CHECK-NEXT:     r12 = asl(r12,#8)
; CHECK-NEXT:     r1 = memub(r1+#4)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r7 |= or(r12,r1)
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     call printf
; CHECK-NEXT:     memd(r29+#8) = r7:6
; CHECK-NEXT:    }
; CHECK-NEXT:    {
; CHECK-NEXT:     r0 = #0
; CHECK-NEXT:     dealloc_return
; CHECK-NEXT:    }
entry:
  %blah = alloca [30 x i8], align 8
  %arraydecay = getelementptr inbounds [30 x i8], [30 x i8]* %blah, i32 0, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i32(i8* %arraydecay, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i32 0, i32 0), i32 31, i32 1, i1 false)
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str1, i32 0, i32 0), i8* %arraydecay)
  ret i32 0
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i32(i8* nocapture, i8* nocapture readonly, i32, i32, i1)
