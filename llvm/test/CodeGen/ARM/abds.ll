; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=arm-eabi -mattr=+v4t %s -o - | FileCheck %s  --check-prefixes=CHECK,CHECK-ARM
; RUN: llc -mtriple=thumbv6m-none-eabi %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-THUMB

;
; trunc(abs(sub(sext(a),sext(b)))) -> abds(a,b)
;

define i8 @abd_ext_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #24
; CHECK-ARM-NEXT:    lsl r1, r1, #24
; CHECK-ARM-NEXT:    asr r0, r0, #24
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #24
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxtb r1, r1
; CHECK-THUMB-NEXT:    sxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i8 %a to i64
  %bext = sext i8 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %trunc = trunc i64 %abs to i8
  ret i8 %trunc
}

define i8 @abd_ext_i8_i16(i8 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i8_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #24
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #24
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i8_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i8 %a to i64
  %bext = sext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %trunc = trunc i64 %abs to i8
  ret i8 %trunc
}

define i8 @abd_ext_i8_undef(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i8_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #24
; CHECK-ARM-NEXT:    lsl r1, r1, #24
; CHECK-ARM-NEXT:    asr r0, r0, #24
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #24
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i8_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxtb r1, r1
; CHECK-THUMB-NEXT:    sxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i8 %a to i64
  %bext = sext i8 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  %trunc = trunc i64 %abs to i8
  ret i8 %trunc
}

define i16 @abd_ext_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #16
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #16
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i16 %a to i64
  %bext = sext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %trunc = trunc i64 %abs to i16
  ret i16 %trunc
}

define i16 @abd_ext_i16_i32(i16 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i16_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r2, r0, #16
; CHECK-ARM-NEXT:    rsb r0, r1, r2, asr #16
; CHECK-ARM-NEXT:    cmp r1, r2, asr #16
; CHECK-ARM-NEXT:    rsbge r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i16_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB4_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB4_2:
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i16 %a to i64
  %bext = sext i32 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %trunc = trunc i64 %abs to i16
  ret i16 %trunc
}

define i16 @abd_ext_i16_undef(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i16_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #16
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #16
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i16_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i16 %a to i64
  %bext = sext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  %trunc = trunc i64 %abs to i16
  ret i16 %trunc
}

define i32 @abd_ext_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsble r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB6_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB6_2:
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i32 %a to i64
  %bext = sext i32 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %trunc = trunc i64 %abs to i32
  ret i32 %trunc
}

define i32 @abd_ext_i32_i16(i32 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i32_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r2, r1, #16
; CHECK-ARM-NEXT:    sub r1, r0, r2, asr #16
; CHECK-ARM-NEXT:    cmp r0, r2, asr #16
; CHECK-ARM-NEXT:    rsble r1, r1, #0
; CHECK-ARM-NEXT:    mov r0, r1
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i32_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB7_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB7_2:
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i32 %a to i64
  %bext = sext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %trunc = trunc i64 %abs to i32
  ret i32 %trunc
}

define i32 @abd_ext_i32_undef(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i32_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsble r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i32_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB8_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB8_2:
; CHECK-THUMB-NEXT:    bx lr
  %aext = sext i32 %a to i64
  %bext = sext i32 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  %trunc = trunc i64 %abs to i32
  ret i32 %trunc
}

define i64 @abd_ext_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    subs r12, r0, r2
; CHECK-ARM-NEXT:    sbc lr, r1, r3
; CHECK-ARM-NEXT:    subs r0, r2, r0
; CHECK-ARM-NEXT:    sbcs r1, r3, r1
; CHECK-ARM-NEXT:    movlt r0, r12
; CHECK-ARM-NEXT:    movlt r1, lr
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    subs r2, r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    bge .LBB9_3
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bge .LBB9_4
; CHECK-THUMB-NEXT:  .LBB9_2:
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
; CHECK-THUMB-NEXT:  .LBB9_3:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:    blt .LBB9_2
; CHECK-THUMB-NEXT:  .LBB9_4:
; CHECK-THUMB-NEXT:    mov r1, r3
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
  %aext = sext i64 %a to i128
  %bext = sext i64 %b to i128
  %sub = sub i128 %aext, %bext
  %abs = call i128 @llvm.abs.i128(i128 %sub, i1 false)
  %trunc = trunc i128 %abs to i64
  ret i64 %trunc
}

define i64 @abd_ext_i64_undef(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i64_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    subs r12, r0, r2
; CHECK-ARM-NEXT:    sbc lr, r1, r3
; CHECK-ARM-NEXT:    subs r0, r2, r0
; CHECK-ARM-NEXT:    sbcs r1, r3, r1
; CHECK-ARM-NEXT:    movlt r0, r12
; CHECK-ARM-NEXT:    movlt r1, lr
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i64_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    subs r2, r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    bge .LBB10_3
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bge .LBB10_4
; CHECK-THUMB-NEXT:  .LBB10_2:
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
; CHECK-THUMB-NEXT:  .LBB10_3:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:    blt .LBB10_2
; CHECK-THUMB-NEXT:  .LBB10_4:
; CHECK-THUMB-NEXT:    mov r1, r3
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
  %aext = sext i64 %a to i128
  %bext = sext i64 %b to i128
  %sub = sub i128 %aext, %bext
  %abs = call i128 @llvm.abs.i128(i128 %sub, i1 true)
  %trunc = trunc i128 %abs to i64
  ret i64 %trunc
}

define i128 @abd_ext_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    ldr r9, [sp, #32]
; CHECK-ARM-NEXT:    ldr r8, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r0, r9
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r7, r1, r8
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    sbcs r4, r2, lr
; CHECK-ARM-NEXT:    sbc r5, r3, r12
; CHECK-ARM-NEXT:    subs r0, r9, r0
; CHECK-ARM-NEXT:    sbcs r1, r8, r1
; CHECK-ARM-NEXT:    sbcs r2, lr, r2
; CHECK-ARM-NEXT:    sbcs r3, r12, r3
; CHECK-ARM-NEXT:    movlt r0, r6
; CHECK-ARM-NEXT:    movlt r1, r7
; CHECK-ARM-NEXT:    movlt r2, r4
; CHECK-ARM-NEXT:    movlt r3, r5
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #28
; CHECK-THUMB-NEXT:    sub sp, #28
; CHECK-THUMB-NEXT:    str r3, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r6, r2
; CHECK-THUMB-NEXT:    str r2, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r1, r0
; CHECK-THUMB-NEXT:    str r0, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r0, [sp, #60]
; CHECK-THUMB-NEXT:    ldr r2, [sp, #56]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #52]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #48]
; CHECK-THUMB-NEXT:    subs r3, r1, r5
; CHECK-THUMB-NEXT:    str r3, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    str r6, [sp, #20] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r3, r6
; CHECK-THUMB-NEXT:    sbcs r3, r0
; CHECK-THUMB-NEXT:    ldr r1, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r5, r5, r1
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r2, r1
; CHECK-THUMB-NEXT:    sbcs r0, r6
; CHECK-THUMB-NEXT:    bge .LBB11_6
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB11_7
; CHECK-THUMB-NEXT:  .LBB11_2:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB11_8
; CHECK-THUMB-NEXT:  .LBB11_3:
; CHECK-THUMB-NEXT:    blt .LBB11_5
; CHECK-THUMB-NEXT:  .LBB11_4:
; CHECK-THUMB-NEXT:    mov r3, r0
; CHECK-THUMB-NEXT:  .LBB11_5:
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    add sp, #28
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB11_6:
; CHECK-THUMB-NEXT:    str r5, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB11_2
; CHECK-THUMB-NEXT:  .LBB11_7:
; CHECK-THUMB-NEXT:    mov r1, r7
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB11_3
; CHECK-THUMB-NEXT:  .LBB11_8:
; CHECK-THUMB-NEXT:    mov r4, r2
; CHECK-THUMB-NEXT:    bge .LBB11_4
; CHECK-THUMB-NEXT:    b .LBB11_5
  %aext = sext i128 %a to i256
  %bext = sext i128 %b to i256
  %sub = sub i256 %aext, %bext
  %abs = call i256 @llvm.abs.i256(i256 %sub, i1 false)
  %trunc = trunc i256 %abs to i128
  ret i128 %trunc
}

define i128 @abd_ext_i128_undef(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i128_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    ldr r9, [sp, #32]
; CHECK-ARM-NEXT:    ldr r8, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r0, r9
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r7, r1, r8
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    sbcs r4, r2, lr
; CHECK-ARM-NEXT:    sbc r5, r3, r12
; CHECK-ARM-NEXT:    subs r0, r9, r0
; CHECK-ARM-NEXT:    sbcs r1, r8, r1
; CHECK-ARM-NEXT:    sbcs r2, lr, r2
; CHECK-ARM-NEXT:    sbcs r3, r12, r3
; CHECK-ARM-NEXT:    movlt r0, r6
; CHECK-ARM-NEXT:    movlt r1, r7
; CHECK-ARM-NEXT:    movlt r2, r4
; CHECK-ARM-NEXT:    movlt r3, r5
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i128_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #28
; CHECK-THUMB-NEXT:    sub sp, #28
; CHECK-THUMB-NEXT:    str r3, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r6, r2
; CHECK-THUMB-NEXT:    str r2, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r1, r0
; CHECK-THUMB-NEXT:    str r0, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r0, [sp, #60]
; CHECK-THUMB-NEXT:    ldr r2, [sp, #56]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #52]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #48]
; CHECK-THUMB-NEXT:    subs r3, r1, r5
; CHECK-THUMB-NEXT:    str r3, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    str r6, [sp, #20] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r3, r6
; CHECK-THUMB-NEXT:    sbcs r3, r0
; CHECK-THUMB-NEXT:    ldr r1, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r5, r5, r1
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r2, r1
; CHECK-THUMB-NEXT:    sbcs r0, r6
; CHECK-THUMB-NEXT:    bge .LBB12_6
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB12_7
; CHECK-THUMB-NEXT:  .LBB12_2:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB12_8
; CHECK-THUMB-NEXT:  .LBB12_3:
; CHECK-THUMB-NEXT:    blt .LBB12_5
; CHECK-THUMB-NEXT:  .LBB12_4:
; CHECK-THUMB-NEXT:    mov r3, r0
; CHECK-THUMB-NEXT:  .LBB12_5:
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    add sp, #28
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB12_6:
; CHECK-THUMB-NEXT:    str r5, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB12_2
; CHECK-THUMB-NEXT:  .LBB12_7:
; CHECK-THUMB-NEXT:    mov r1, r7
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB12_3
; CHECK-THUMB-NEXT:  .LBB12_8:
; CHECK-THUMB-NEXT:    mov r4, r2
; CHECK-THUMB-NEXT:    bge .LBB12_4
; CHECK-THUMB-NEXT:    b .LBB12_5
  %aext = sext i128 %a to i256
  %bext = sext i128 %b to i256
  %sub = sub i256 %aext, %bext
  %abs = call i256 @llvm.abs.i256(i256 %sub, i1 true)
  %trunc = trunc i256 %abs to i128
  ret i128 %trunc
}

;
; sub(smax(a,b),smin(a,b)) -> abds(a,b)
;

define i8 @abd_minmax_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #24
; CHECK-ARM-NEXT:    lsl r1, r1, #24
; CHECK-ARM-NEXT:    asr r0, r0, #24
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #24
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxtb r1, r1
; CHECK-THUMB-NEXT:    sxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %min = call i8 @llvm.smin.i8(i8 %a, i8 %b)
  %max = call i8 @llvm.smax.i8(i8 %a, i8 %b)
  %sub = sub i8 %max, %min
  ret i8 %sub
}

define i16 @abd_minmax_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #16
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #16
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %min = call i16 @llvm.smin.i16(i16 %a, i16 %b)
  %max = call i16 @llvm.smax.i16(i16 %a, i16 %b)
  %sub = sub i16 %max, %min
  ret i16 %sub
}

define i32 @abd_minmax_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsble r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB15_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB15_2:
; CHECK-THUMB-NEXT:    bx lr
  %min = call i32 @llvm.smin.i32(i32 %a, i32 %b)
  %max = call i32 @llvm.smax.i32(i32 %a, i32 %b)
  %sub = sub i32 %max, %min
  ret i32 %sub
}

define i64 @abd_minmax_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    subs r12, r0, r2
; CHECK-ARM-NEXT:    sbc lr, r1, r3
; CHECK-ARM-NEXT:    subs r0, r2, r0
; CHECK-ARM-NEXT:    sbcs r1, r3, r1
; CHECK-ARM-NEXT:    movlt r0, r12
; CHECK-ARM-NEXT:    movlt r1, lr
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    subs r2, r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    bge .LBB16_3
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bge .LBB16_4
; CHECK-THUMB-NEXT:  .LBB16_2:
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
; CHECK-THUMB-NEXT:  .LBB16_3:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:    blt .LBB16_2
; CHECK-THUMB-NEXT:  .LBB16_4:
; CHECK-THUMB-NEXT:    mov r1, r3
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
  %min = call i64 @llvm.smin.i64(i64 %a, i64 %b)
  %max = call i64 @llvm.smax.i64(i64 %a, i64 %b)
  %sub = sub i64 %max, %min
  ret i64 %sub
}

define i128 @abd_minmax_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    ldr r9, [sp, #32]
; CHECK-ARM-NEXT:    ldr r8, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r0, r9
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r7, r1, r8
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    sbcs r4, r2, lr
; CHECK-ARM-NEXT:    sbc r5, r3, r12
; CHECK-ARM-NEXT:    subs r0, r9, r0
; CHECK-ARM-NEXT:    sbcs r1, r8, r1
; CHECK-ARM-NEXT:    sbcs r2, lr, r2
; CHECK-ARM-NEXT:    sbcs r3, r12, r3
; CHECK-ARM-NEXT:    movlt r0, r6
; CHECK-ARM-NEXT:    movlt r1, r7
; CHECK-ARM-NEXT:    movlt r2, r4
; CHECK-ARM-NEXT:    movlt r3, r5
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #28
; CHECK-THUMB-NEXT:    sub sp, #28
; CHECK-THUMB-NEXT:    str r3, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r6, r2
; CHECK-THUMB-NEXT:    str r2, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r1, r0
; CHECK-THUMB-NEXT:    str r0, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r0, [sp, #60]
; CHECK-THUMB-NEXT:    ldr r2, [sp, #56]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #52]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #48]
; CHECK-THUMB-NEXT:    subs r3, r1, r5
; CHECK-THUMB-NEXT:    str r3, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    str r6, [sp, #20] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r3, r6
; CHECK-THUMB-NEXT:    sbcs r3, r0
; CHECK-THUMB-NEXT:    ldr r1, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r5, r5, r1
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r2, r1
; CHECK-THUMB-NEXT:    sbcs r0, r6
; CHECK-THUMB-NEXT:    bge .LBB17_6
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB17_7
; CHECK-THUMB-NEXT:  .LBB17_2:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB17_8
; CHECK-THUMB-NEXT:  .LBB17_3:
; CHECK-THUMB-NEXT:    blt .LBB17_5
; CHECK-THUMB-NEXT:  .LBB17_4:
; CHECK-THUMB-NEXT:    mov r3, r0
; CHECK-THUMB-NEXT:  .LBB17_5:
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    add sp, #28
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB17_6:
; CHECK-THUMB-NEXT:    str r5, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB17_2
; CHECK-THUMB-NEXT:  .LBB17_7:
; CHECK-THUMB-NEXT:    mov r1, r7
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB17_3
; CHECK-THUMB-NEXT:  .LBB17_8:
; CHECK-THUMB-NEXT:    mov r4, r2
; CHECK-THUMB-NEXT:    bge .LBB17_4
; CHECK-THUMB-NEXT:    b .LBB17_5
  %min = call i128 @llvm.smin.i128(i128 %a, i128 %b)
  %max = call i128 @llvm.smax.i128(i128 %a, i128 %b)
  %sub = sub i128 %max, %min
  ret i128 %sub
}

;
; select(icmp(a,b),sub(a,b),sub(b,a)) -> abds(a,b)
;

define i8 @abd_cmp_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #24
; CHECK-ARM-NEXT:    lsl r1, r1, #24
; CHECK-ARM-NEXT:    asr r0, r0, #24
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #24
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxtb r1, r1
; CHECK-THUMB-NEXT:    sxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp sgt i8 %a, %b
  %ab = sub i8 %a, %b
  %ba = sub i8 %b, %a
  %sel = select i1 %cmp, i8 %ab, i8 %ba
  ret i8 %sel
}

define i16 @abd_cmp_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #16
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #16
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp sge i16 %a, %b
  %ab = sub i16 %a, %b
  %ba = sub i16 %b, %a
  %sel = select i1 %cmp, i16 %ab, i16 %ba
  ret i16 %sel
}

define i32 @abd_cmp_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsble r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB20_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB20_2:
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp slt i32 %a, %b
  %ab = sub i32 %a, %b
  %ba = sub i32 %b, %a
  %sel = select i1 %cmp, i32 %ba, i32 %ab
  ret i32 %sel
}

define i64 @abd_cmp_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    subs r12, r0, r2
; CHECK-ARM-NEXT:    sbc lr, r1, r3
; CHECK-ARM-NEXT:    subs r0, r2, r0
; CHECK-ARM-NEXT:    sbcs r1, r3, r1
; CHECK-ARM-NEXT:    movlt r0, r12
; CHECK-ARM-NEXT:    movlt r1, lr
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    subs r2, r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    bge .LBB21_3
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bge .LBB21_4
; CHECK-THUMB-NEXT:  .LBB21_2:
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
; CHECK-THUMB-NEXT:  .LBB21_3:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:    blt .LBB21_2
; CHECK-THUMB-NEXT:  .LBB21_4:
; CHECK-THUMB-NEXT:    mov r1, r3
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
  %cmp = icmp sge i64 %a, %b
  %ab = sub i64 %a, %b
  %ba = sub i64 %b, %a
  %sel = select i1 %cmp, i64 %ab, i64 %ba
  ret i64 %sel
}

define i128 @abd_cmp_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    ldr r9, [sp, #32]
; CHECK-ARM-NEXT:    ldr r8, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r0, r9
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r7, r1, r8
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    sbcs r4, r2, lr
; CHECK-ARM-NEXT:    sbc r5, r3, r12
; CHECK-ARM-NEXT:    subs r0, r9, r0
; CHECK-ARM-NEXT:    sbcs r1, r8, r1
; CHECK-ARM-NEXT:    sbcs r2, lr, r2
; CHECK-ARM-NEXT:    sbcs r3, r12, r3
; CHECK-ARM-NEXT:    movlt r0, r6
; CHECK-ARM-NEXT:    movlt r1, r7
; CHECK-ARM-NEXT:    movlt r2, r4
; CHECK-ARM-NEXT:    movlt r3, r5
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #28
; CHECK-THUMB-NEXT:    sub sp, #28
; CHECK-THUMB-NEXT:    str r3, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r6, r2
; CHECK-THUMB-NEXT:    str r2, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r1, r0
; CHECK-THUMB-NEXT:    str r0, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r0, [sp, #60]
; CHECK-THUMB-NEXT:    ldr r2, [sp, #56]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #52]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #48]
; CHECK-THUMB-NEXT:    subs r3, r1, r5
; CHECK-THUMB-NEXT:    str r3, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    str r6, [sp, #20] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r3, r6
; CHECK-THUMB-NEXT:    sbcs r3, r0
; CHECK-THUMB-NEXT:    ldr r1, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r5, r5, r1
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r2, r1
; CHECK-THUMB-NEXT:    sbcs r0, r6
; CHECK-THUMB-NEXT:    bge .LBB22_6
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB22_7
; CHECK-THUMB-NEXT:  .LBB22_2:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB22_8
; CHECK-THUMB-NEXT:  .LBB22_3:
; CHECK-THUMB-NEXT:    blt .LBB22_5
; CHECK-THUMB-NEXT:  .LBB22_4:
; CHECK-THUMB-NEXT:    mov r3, r0
; CHECK-THUMB-NEXT:  .LBB22_5:
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    add sp, #28
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB22_6:
; CHECK-THUMB-NEXT:    str r5, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB22_2
; CHECK-THUMB-NEXT:  .LBB22_7:
; CHECK-THUMB-NEXT:    mov r1, r7
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB22_3
; CHECK-THUMB-NEXT:  .LBB22_8:
; CHECK-THUMB-NEXT:    mov r4, r2
; CHECK-THUMB-NEXT:    bge .LBB22_4
; CHECK-THUMB-NEXT:    b .LBB22_5
  %cmp = icmp sge i128 %a, %b
  %ab = sub i128 %a, %b
  %ba = sub i128 %b, %a
  %sel = select i1 %cmp, i128 %ab, i128 %ba
  ret i128 %sel
}

;
; abs(sub_nsw(x, y)) -> abds(a,b)
;

define i8 @abd_subnsw_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    lsl r1, r0, #24
; CHECK-ARM-NEXT:    eor r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sxtb r1, r0
; CHECK-THUMB-NEXT:    asrs r1, r1, #7
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i8 %a, %b
  %abs = call i8 @llvm.abs.i8(i8 %sub, i1 false)
  ret i8 %abs
}

define i8 @abd_subnsw_i8_undef(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i8_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    lsl r1, r0, #24
; CHECK-ARM-NEXT:    eor r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i8_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sxtb r1, r0
; CHECK-THUMB-NEXT:    asrs r1, r1, #7
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i8 %a, %b
  %abs = call i8 @llvm.abs.i8(i8 %sub, i1 true)
  ret i8 %abs
}

define i16 @abd_subnsw_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    lsl r1, r0, #16
; CHECK-ARM-NEXT:    eor r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sxth r1, r0
; CHECK-THUMB-NEXT:    asrs r1, r1, #15
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i16 %a, %b
  %abs = call i16 @llvm.abs.i16(i16 %sub, i1 false)
  ret i16 %abs
}

define i16 @abd_subnsw_i16_undef(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i16_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    lsl r1, r0, #16
; CHECK-ARM-NEXT:    eor r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i16_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sxth r1, r0
; CHECK-THUMB-NEXT:    asrs r1, r1, #15
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i16 %a, %b
  %abs = call i16 @llvm.abs.i16(i16 %sub, i1 true)
  ret i16 %abs
}

define i32 @abd_subnsw_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i32 %a, %b
  %abs = call i32 @llvm.abs.i32(i32 %sub, i1 false)
  ret i32 %abs
}

define i32 @abd_subnsw_i32_undef(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i32_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i32_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i32 %a, %b
  %abs = call i32 @llvm.abs.i32(i32 %sub, i1 true)
  ret i32 %abs
}

define i64 @abd_subnsw_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    sbc r1, r1, r3
; CHECK-ARM-NEXT:    eor r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    eor r2, r1, r1, asr #31
; CHECK-ARM-NEXT:    subs r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    sbc r1, r2, r1, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    asrs r2, r1, #31
; CHECK-THUMB-NEXT:    eors r1, r2
; CHECK-THUMB-NEXT:    eors r0, r2
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r2
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i64 %a, %b
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  ret i64 %abs
}

define i64 @abd_subnsw_i64_undef(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i64_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    sbc r1, r1, r3
; CHECK-ARM-NEXT:    eor r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    eor r2, r1, r1, asr #31
; CHECK-ARM-NEXT:    subs r0, r0, r1, asr #31
; CHECK-ARM-NEXT:    sbc r1, r2, r1, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i64_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    asrs r2, r1, #31
; CHECK-THUMB-NEXT:    eors r1, r2
; CHECK-THUMB-NEXT:    eors r0, r2
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r2
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub nsw i64 %a, %b
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  ret i64 %abs
}

define i128 @abd_subnsw_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r11, lr}
; CHECK-ARM-NEXT:    ldr r5, [sp, #16]
; CHECK-ARM-NEXT:    ldr r4, [sp, #20]
; CHECK-ARM-NEXT:    subs r0, r0, r5
; CHECK-ARM-NEXT:    ldr lr, [sp, #24]
; CHECK-ARM-NEXT:    sbcs r1, r1, r4
; CHECK-ARM-NEXT:    ldr r12, [sp, #28]
; CHECK-ARM-NEXT:    sbcs r2, r2, lr
; CHECK-ARM-NEXT:    sbc r3, r3, r12
; CHECK-ARM-NEXT:    eor r0, r0, r3, asr #31
; CHECK-ARM-NEXT:    eor r1, r1, r3, asr #31
; CHECK-ARM-NEXT:    subs r0, r0, r3, asr #31
; CHECK-ARM-NEXT:    eor r2, r2, r3, asr #31
; CHECK-ARM-NEXT:    sbcs r1, r1, r3, asr #31
; CHECK-ARM-NEXT:    eor r5, r3, r3, asr #31
; CHECK-ARM-NEXT:    sbcs r2, r2, r3, asr #31
; CHECK-ARM-NEXT:    sbc r3, r5, r3, asr #31
; CHECK-ARM-NEXT:    pop {r4, r5, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #4
; CHECK-THUMB-NEXT:    sub sp, #4
; CHECK-THUMB-NEXT:    ldr r4, [sp, #36]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #32]
; CHECK-THUMB-NEXT:    ldr r6, [sp, #28]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #24]
; CHECK-THUMB-NEXT:    subs r0, r0, r7
; CHECK-THUMB-NEXT:    sbcs r1, r6
; CHECK-THUMB-NEXT:    sbcs r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    asrs r4, r3, #31
; CHECK-THUMB-NEXT:    eors r3, r4
; CHECK-THUMB-NEXT:    eors r2, r4
; CHECK-THUMB-NEXT:    eors r1, r4
; CHECK-THUMB-NEXT:    eors r0, r4
; CHECK-THUMB-NEXT:    subs r0, r0, r4
; CHECK-THUMB-NEXT:    sbcs r1, r4
; CHECK-THUMB-NEXT:    sbcs r2, r4
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    add sp, #4
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
  %sub = sub nsw i128 %a, %b
  %abs = call i128 @llvm.abs.i128(i128 %sub, i1 false)
  ret i128 %abs
}

define i128 @abd_subnsw_i128_undef(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_subnsw_i128_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r11, lr}
; CHECK-ARM-NEXT:    ldr r5, [sp, #16]
; CHECK-ARM-NEXT:    ldr r4, [sp, #20]
; CHECK-ARM-NEXT:    subs r0, r0, r5
; CHECK-ARM-NEXT:    ldr lr, [sp, #24]
; CHECK-ARM-NEXT:    sbcs r1, r1, r4
; CHECK-ARM-NEXT:    ldr r12, [sp, #28]
; CHECK-ARM-NEXT:    sbcs r2, r2, lr
; CHECK-ARM-NEXT:    sbc r3, r3, r12
; CHECK-ARM-NEXT:    eor r0, r0, r3, asr #31
; CHECK-ARM-NEXT:    eor r1, r1, r3, asr #31
; CHECK-ARM-NEXT:    subs r0, r0, r3, asr #31
; CHECK-ARM-NEXT:    eor r2, r2, r3, asr #31
; CHECK-ARM-NEXT:    sbcs r1, r1, r3, asr #31
; CHECK-ARM-NEXT:    eor r5, r3, r3, asr #31
; CHECK-ARM-NEXT:    sbcs r2, r2, r3, asr #31
; CHECK-ARM-NEXT:    sbc r3, r5, r3, asr #31
; CHECK-ARM-NEXT:    pop {r4, r5, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_subnsw_i128_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #4
; CHECK-THUMB-NEXT:    sub sp, #4
; CHECK-THUMB-NEXT:    ldr r4, [sp, #36]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #32]
; CHECK-THUMB-NEXT:    ldr r6, [sp, #28]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #24]
; CHECK-THUMB-NEXT:    subs r0, r0, r7
; CHECK-THUMB-NEXT:    sbcs r1, r6
; CHECK-THUMB-NEXT:    sbcs r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    asrs r4, r3, #31
; CHECK-THUMB-NEXT:    eors r3, r4
; CHECK-THUMB-NEXT:    eors r2, r4
; CHECK-THUMB-NEXT:    eors r1, r4
; CHECK-THUMB-NEXT:    eors r0, r4
; CHECK-THUMB-NEXT:    subs r0, r0, r4
; CHECK-THUMB-NEXT:    sbcs r1, r4
; CHECK-THUMB-NEXT:    sbcs r2, r4
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    add sp, #4
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
  %sub = sub nsw i128 %a, %b
  %abs = call i128 @llvm.abs.i128(i128 %sub, i1 true)
  ret i128 %abs
}

;
; negative tests
;

define i32 @abd_sub_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_sub_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_sub_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %sub = sub i32 %a, %b
  %abs = call i32 @llvm.abs.i32(i32 %sub, i1 false)
  ret i32 %abs
}

define i64 @vector_legalized(i16 %a, i16 %b) {
; CHECK-ARM-LABEL: vector_legalized:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #16
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #16
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    mov r1, #0
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: vector_legalized:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    movs r1, #0
; CHECK-THUMB-NEXT:    bx lr
  %ea = sext i16 %a to i32
  %eb = sext i16 %b to i32
  %s = sub i32 %ea, %eb
  %ab = call i32 @llvm.abs.i32(i32 %s, i1 false)
  %e = zext i32 %ab to i64
  %red = call i64 @llvm.vector.reduce.add.v32i64(<32 x i64> zeroinitializer)
  %z = add i64 %red, %e
  ret i64 %z
}

;
; sub(select(icmp(a,b),a,b),select(icmp(a,b),b,a)) -> abds(a,b)
;

define i8 @abd_select_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_select_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #24
; CHECK-ARM-NEXT:    lsl r1, r1, #24
; CHECK-ARM-NEXT:    asr r0, r0, #24
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #24
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_select_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxtb r1, r1
; CHECK-THUMB-NEXT:    sxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp slt i8 %a, %b
  %ab = select i1 %cmp, i8 %a, i8 %b
  %ba = select i1 %cmp, i8 %b, i8 %a
  %sub = sub i8 %ba, %ab
  ret i8 %sub
}

define i16 @abd_select_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_select_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    lsl r0, r0, #16
; CHECK-ARM-NEXT:    lsl r1, r1, #16
; CHECK-ARM-NEXT:    asr r0, r0, #16
; CHECK-ARM-NEXT:    sub r0, r0, r1, asr #16
; CHECK-ARM-NEXT:    cmp r0, #0
; CHECK-ARM-NEXT:    rsbmi r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_select_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    sxth r1, r1
; CHECK-THUMB-NEXT:    sxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp sle i16 %a, %b
  %ab = select i1 %cmp, i16 %a, i16 %b
  %ba = select i1 %cmp, i16 %b, i16 %a
  %sub = sub i16 %ba, %ab
  ret i16 %sub
}

define i32 @abd_select_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_select_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsble r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_select_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bgt .LBB37_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:  .LBB37_2:
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp sgt i32 %a, %b
  %ab = select i1 %cmp, i32 %a, i32 %b
  %ba = select i1 %cmp, i32 %b, i32 %a
  %sub = sub i32 %ab, %ba
  ret i32 %sub
}

define i64 @abd_select_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_select_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    subs r12, r0, r2
; CHECK-ARM-NEXT:    sbc lr, r1, r3
; CHECK-ARM-NEXT:    subs r0, r2, r0
; CHECK-ARM-NEXT:    sbcs r1, r3, r1
; CHECK-ARM-NEXT:    movlt r0, r12
; CHECK-ARM-NEXT:    movlt r1, lr
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_select_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    subs r2, r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    bge .LBB38_3
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bge .LBB38_4
; CHECK-THUMB-NEXT:  .LBB38_2:
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
; CHECK-THUMB-NEXT:  .LBB38_3:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:    blt .LBB38_2
; CHECK-THUMB-NEXT:  .LBB38_4:
; CHECK-THUMB-NEXT:    mov r1, r3
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
  %cmp = icmp sge i64 %a, %b
  %ab = select i1 %cmp, i64 %a, i64 %b
  %ba = select i1 %cmp, i64 %b, i64 %a
  %sub = sub i64 %ab, %ba
  ret i64 %sub
}

define i128 @abd_select_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_select_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    ldr r9, [sp, #32]
; CHECK-ARM-NEXT:    ldr r8, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r0, r9
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r7, r1, r8
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    sbcs r4, r2, lr
; CHECK-ARM-NEXT:    sbc r5, r3, r12
; CHECK-ARM-NEXT:    subs r0, r9, r0
; CHECK-ARM-NEXT:    sbcs r1, r8, r1
; CHECK-ARM-NEXT:    sbcs r2, lr, r2
; CHECK-ARM-NEXT:    sbcs r3, r12, r3
; CHECK-ARM-NEXT:    movlt r0, r6
; CHECK-ARM-NEXT:    movlt r1, r7
; CHECK-ARM-NEXT:    movlt r2, r4
; CHECK-ARM-NEXT:    movlt r3, r5
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_select_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #28
; CHECK-THUMB-NEXT:    sub sp, #28
; CHECK-THUMB-NEXT:    str r3, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r6, r2
; CHECK-THUMB-NEXT:    str r2, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    mov r1, r0
; CHECK-THUMB-NEXT:    str r0, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r0, [sp, #60]
; CHECK-THUMB-NEXT:    ldr r2, [sp, #56]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #52]
; CHECK-THUMB-NEXT:    ldr r5, [sp, #48]
; CHECK-THUMB-NEXT:    subs r3, r1, r5
; CHECK-THUMB-NEXT:    str r3, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    str r6, [sp, #20] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r3, r6
; CHECK-THUMB-NEXT:    sbcs r3, r0
; CHECK-THUMB-NEXT:    ldr r1, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r5, r5, r1
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r2, r1
; CHECK-THUMB-NEXT:    sbcs r0, r6
; CHECK-THUMB-NEXT:    bge .LBB39_6
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB39_7
; CHECK-THUMB-NEXT:  .LBB39_2:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bge .LBB39_8
; CHECK-THUMB-NEXT:  .LBB39_3:
; CHECK-THUMB-NEXT:    blt .LBB39_5
; CHECK-THUMB-NEXT:  .LBB39_4:
; CHECK-THUMB-NEXT:    mov r3, r0
; CHECK-THUMB-NEXT:  .LBB39_5:
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    add sp, #28
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB39_6:
; CHECK-THUMB-NEXT:    str r5, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r1, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB39_2
; CHECK-THUMB-NEXT:  .LBB39_7:
; CHECK-THUMB-NEXT:    mov r1, r7
; CHECK-THUMB-NEXT:    ldr r4, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blt .LBB39_3
; CHECK-THUMB-NEXT:  .LBB39_8:
; CHECK-THUMB-NEXT:    mov r4, r2
; CHECK-THUMB-NEXT:    bge .LBB39_4
; CHECK-THUMB-NEXT:    b .LBB39_5
  %cmp = icmp slt i128 %a, %b
  %ab = select i1 %cmp, i128 %a, i128 %b
  %ba = select i1 %cmp, i128 %b, i128 %a
  %sub = sub i128 %ba, %ab
  ret i128 %sub
}

declare i8 @llvm.abs.i8(i8, i1)
declare i16 @llvm.abs.i16(i16, i1)
declare i32 @llvm.abs.i32(i32, i1)
declare i64 @llvm.abs.i64(i64, i1)
declare i128 @llvm.abs.i128(i128, i1)

declare i8 @llvm.smax.i8(i8, i8)
declare i16 @llvm.smax.i16(i16, i16)
declare i32 @llvm.smax.i32(i32, i32)
declare i64 @llvm.smax.i64(i64, i64)

declare i8 @llvm.smin.i8(i8, i8)
declare i16 @llvm.smin.i16(i16, i16)
declare i32 @llvm.smin.i32(i32, i32)
declare i64 @llvm.smin.i64(i64, i64)
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
