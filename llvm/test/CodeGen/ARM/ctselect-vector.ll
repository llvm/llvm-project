; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=armv7-none-eabi -verify-machineinstrs | FileCheck --check-prefixes=CT %s
; RUN: llc < %s -mtriple=armv6 -verify-machineinstrs | FileCheck --check-prefix=DEFAULT %s

define <8 x i8> @ct_v8i8(i1 %cond, <8 x i8> %a, <8 x i8> %b) {
; CT-LABEL: ct_v8i8:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v8i8:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and lr, r1, #1
; DEFAULT-NEXT:    ldrb r12, [sp, #68]
; DEFAULT-NEXT:    ldrb r1, [sp, #36]
; DEFAULT-NEXT:    rsb r5, lr, #0
; DEFAULT-NEXT:    and r4, r1, r5
; DEFAULT-NEXT:    bic r5, r12, r5
; DEFAULT-NEXT:    orr r4, r4, r5
; DEFAULT-NEXT:    ldrb r12, [sp, #64]
; DEFAULT-NEXT:    ldrb r5, [sp, #32]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #7]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #60]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #28]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #6]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #56]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #24]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #5]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #52]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #20]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #4]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #48]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #16]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #3]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r1, [sp, #44]
; DEFAULT-NEXT:    strb r4, [r0, #2]
; DEFAULT-NEXT:    rsb r4, lr, #0
; DEFAULT-NEXT:    and r5, r3, r4
; DEFAULT-NEXT:    bic r4, r1, r4
; DEFAULT-NEXT:    orr r5, r5, r4
; DEFAULT-NEXT:    ldrb r1, [sp, #40]
; DEFAULT-NEXT:    strb r5, [r0, #1]
; DEFAULT-NEXT:    rsb r5, lr, #0
; DEFAULT-NEXT:    and r3, r2, r5
; DEFAULT-NEXT:    bic r5, r1, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    strb r3, [r0]
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <8 x i8> @llvm.ct.select.v8i8(i1 %cond, <8 x i8> %a, <8 x i8> %b)
  ret <8 x i8> %sel
}

define <4 x i16> @ct_v4i16(i1 %cond, <4 x i16> %a, <4 x i16> %b) {
; CT-LABEL: ct_v4i16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v4i16:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldrh r1, [sp, #24]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r4, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldrh r2, [sp, #28]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r5, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    ldrh r3, [sp, #16]
; DEFAULT-NEXT:    ldrh lr, [sp, #32]
; DEFAULT-NEXT:    and r2, r3, r4
; DEFAULT-NEXT:    bic r4, lr, r4
; DEFAULT-NEXT:    ldrh lr, [sp, #36]
; DEFAULT-NEXT:    orr r2, r2, r4
; DEFAULT-NEXT:    ldrh r4, [sp, #20]
; DEFAULT-NEXT:    and r3, r4, r5
; DEFAULT-NEXT:    bic r5, lr, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <4 x i16> @llvm.ct.select.v4i16(i1 %cond, <4 x i16> %a, <4 x i16> %b)
  ret <4 x i16> %sel
}

define <2 x i32> @ct_v2i32(i1 %cond, <2 x i32> %a, <2 x i32> %b) {
; CT-LABEL: ct_v2i32:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v2i32:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #8]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #12]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    pop {r11, pc}
entry:
  %sel = call <2 x i32> @llvm.ct.select.v2i32(i1 %cond, <2 x i32> %a, <2 x i32> %b)
  ret <2 x i32> %sel
}

define <1 x i64> @ct_v1i64(i1 %cond, <1 x i64> %a, <1 x i64> %b) {
; CT-LABEL: ct_v1i64:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v1i64:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #8]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #12]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    pop {r11, pc}
entry:
  %sel = call <1 x i64> @llvm.ct.select.v1i64(i1 %cond, <1 x i64> %a, <1 x i64> %b)
  ret <1 x i64> %sel
}

define <2 x float> @ct_v2f32(i1 %cond, <2 x float> %a, <2 x float> %b) {
; CT-LABEL: ct_v2f32:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v2f32:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #8]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #12]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    pop {r11, pc}
entry:
  %sel = call <2 x float> @llvm.ct.select.v2f32(i1 %cond, <2 x float> %a, <2 x float> %b)
  ret <2 x float> %sel
}

define <16 x i8> @ct_v16i8(i1 %cond, <16 x i8> %a, <16 x i8> %b) {
; CT-LABEL: ct_v16i8:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    add r1, sp, #8
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vld1.64 {d18, d19}, [r1]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vldr d17, [sp]
; CT-NEXT:    vmov d16, r2, r3
; CT-NEXT:    vdup.32 q11, r1
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vmov r0, r1, d20
; CT-NEXT:    vmov r2, r3, d21
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v16i8:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and lr, r1, #1
; DEFAULT-NEXT:    ldrb r12, [sp, #132]
; DEFAULT-NEXT:    ldrb r1, [sp, #68]
; DEFAULT-NEXT:    rsb r5, lr, #0
; DEFAULT-NEXT:    and r4, r1, r5
; DEFAULT-NEXT:    bic r5, r12, r5
; DEFAULT-NEXT:    orr r4, r4, r5
; DEFAULT-NEXT:    ldrb r12, [sp, #128]
; DEFAULT-NEXT:    ldrb r5, [sp, #64]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #15]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #124]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #60]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #14]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #120]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #56]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #13]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #116]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #52]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #12]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #112]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #48]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #11]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #108]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #44]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #10]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #104]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #40]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #9]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #100]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #36]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #8]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #96]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #32]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #7]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #92]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #28]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #6]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #88]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #24]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #5]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #84]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #20]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #4]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrb r12, [sp, #80]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r5, [sp, #16]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strb r4, [r0, #3]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrb r1, [sp, #76]
; DEFAULT-NEXT:    strb r4, [r0, #2]
; DEFAULT-NEXT:    rsb r4, lr, #0
; DEFAULT-NEXT:    and r5, r3, r4
; DEFAULT-NEXT:    bic r4, r1, r4
; DEFAULT-NEXT:    orr r5, r5, r4
; DEFAULT-NEXT:    ldrb r1, [sp, #72]
; DEFAULT-NEXT:    strb r5, [r0, #1]
; DEFAULT-NEXT:    rsb r5, lr, #0
; DEFAULT-NEXT:    and r3, r2, r5
; DEFAULT-NEXT:    bic r5, r1, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    strb r3, [r0]
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <16 x i8> @llvm.ct.select.v16i8(i1 %cond, <16 x i8> %a, <16 x i8> %b)
  ret <16 x i8> %sel
}

define <8 x i16> @ct_v8i16(i1 %cond, <8 x i16> %a, <8 x i16> %b) {
; CT-LABEL: ct_v8i16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    add r1, sp, #8
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vld1.64 {d18, d19}, [r1]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vldr d17, [sp]
; CT-NEXT:    vmov d16, r2, r3
; CT-NEXT:    vdup.32 q11, r1
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vmov r0, r1, d20
; CT-NEXT:    vmov r2, r3, d21
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v8i16:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and lr, r1, #1
; DEFAULT-NEXT:    ldrh r12, [sp, #68]
; DEFAULT-NEXT:    ldrh r1, [sp, #36]
; DEFAULT-NEXT:    rsb r5, lr, #0
; DEFAULT-NEXT:    and r4, r1, r5
; DEFAULT-NEXT:    bic r5, r12, r5
; DEFAULT-NEXT:    orr r4, r4, r5
; DEFAULT-NEXT:    ldrh r12, [sp, #64]
; DEFAULT-NEXT:    ldrh r5, [sp, #32]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strh r4, [r0, #14]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrh r12, [sp, #60]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrh r5, [sp, #28]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strh r4, [r0, #12]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrh r12, [sp, #56]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrh r5, [sp, #24]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strh r4, [r0, #10]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrh r12, [sp, #52]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrh r5, [sp, #20]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strh r4, [r0, #8]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    ldrh r12, [sp, #48]
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrh r5, [sp, #16]
; DEFAULT-NEXT:    rsb r1, lr, #0
; DEFAULT-NEXT:    strh r4, [r0, #6]
; DEFAULT-NEXT:    and r4, r5, r1
; DEFAULT-NEXT:    bic r1, r12, r1
; DEFAULT-NEXT:    orr r4, r4, r1
; DEFAULT-NEXT:    ldrh r1, [sp, #44]
; DEFAULT-NEXT:    strh r4, [r0, #4]
; DEFAULT-NEXT:    rsb r4, lr, #0
; DEFAULT-NEXT:    and r5, r3, r4
; DEFAULT-NEXT:    bic r4, r1, r4
; DEFAULT-NEXT:    orr r5, r5, r4
; DEFAULT-NEXT:    ldrh r1, [sp, #40]
; DEFAULT-NEXT:    strh r5, [r0, #2]
; DEFAULT-NEXT:    rsb r5, lr, #0
; DEFAULT-NEXT:    and r3, r2, r5
; DEFAULT-NEXT:    bic r5, r1, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    strh r3, [r0]
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <8 x i16> @llvm.ct.select.v8i16(i1 %cond, <8 x i16> %a, <8 x i16> %b)
  ret <8 x i16> %sel
}

define <4 x i32> @ct_v4i32(i1 %cond, <4 x i32> %a, <4 x i32> %b) {
; CT-LABEL: ct_v4i32:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    add r1, sp, #8
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vld1.64 {d18, d19}, [r1]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vldr d17, [sp]
; CT-NEXT:    vmov d16, r2, r3
; CT-NEXT:    vdup.32 q11, r1
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vmov r0, r1, d20
; CT-NEXT:    vmov r2, r3, d21
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v4i32:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #24]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r4, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #28]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r5, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    ldr r3, [sp, #16]
; DEFAULT-NEXT:    ldr lr, [sp, #32]
; DEFAULT-NEXT:    and r2, r3, r4
; DEFAULT-NEXT:    bic r4, lr, r4
; DEFAULT-NEXT:    ldr lr, [sp, #36]
; DEFAULT-NEXT:    orr r2, r2, r4
; DEFAULT-NEXT:    ldr r4, [sp, #20]
; DEFAULT-NEXT:    and r3, r4, r5
; DEFAULT-NEXT:    bic r5, lr, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <4 x i32> @llvm.ct.select.v4i32(i1 %cond, <4 x i32> %a, <4 x i32> %b)
  ret <4 x i32> %sel
}

define <2 x i64> @ct_v2i64(i1 %cond, <2 x i64> %a, <2 x i64> %b) {
; CT-LABEL: ct_v2i64:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    add r1, sp, #8
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vld1.64 {d18, d19}, [r1]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vldr d17, [sp]
; CT-NEXT:    vmov d16, r2, r3
; CT-NEXT:    vdup.32 q11, r1
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vmov r0, r1, d20
; CT-NEXT:    vmov r2, r3, d21
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v2i64:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #24]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r4, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #28]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r5, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    ldr r3, [sp, #16]
; DEFAULT-NEXT:    ldr lr, [sp, #32]
; DEFAULT-NEXT:    and r2, r3, r4
; DEFAULT-NEXT:    bic r4, lr, r4
; DEFAULT-NEXT:    ldr lr, [sp, #36]
; DEFAULT-NEXT:    orr r2, r2, r4
; DEFAULT-NEXT:    ldr r4, [sp, #20]
; DEFAULT-NEXT:    and r3, r4, r5
; DEFAULT-NEXT:    bic r5, lr, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <2 x i64> @llvm.ct.select.v2i64(i1 %cond, <2 x i64> %a, <2 x i64> %b)
  ret <2 x i64> %sel
}

define <4 x float> @ct_v4f32(i1 %cond, <4 x float> %a, <4 x float> %b) {
; CT-LABEL: ct_v4f32:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    add r1, sp, #8
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vld1.64 {d18, d19}, [r1]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vldr d17, [sp]
; CT-NEXT:    vmov d16, r2, r3
; CT-NEXT:    vdup.32 q11, r1
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vmov r0, r1, d20
; CT-NEXT:    vmov r2, r3, d21
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v4f32:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #24]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r4, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #28]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r5, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    ldr r3, [sp, #16]
; DEFAULT-NEXT:    ldr lr, [sp, #32]
; DEFAULT-NEXT:    and r2, r3, r4
; DEFAULT-NEXT:    bic r4, lr, r4
; DEFAULT-NEXT:    ldr lr, [sp, #36]
; DEFAULT-NEXT:    orr r2, r2, r4
; DEFAULT-NEXT:    ldr r4, [sp, #20]
; DEFAULT-NEXT:    and r3, r4, r5
; DEFAULT-NEXT:    bic r5, lr, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <4 x float> @llvm.ct.select.v4f32(i1 %cond, <4 x float> %a, <4 x float> %b)
  ret <4 x float> %sel
}

define <2 x double> @ct_v2f64(i1 %cond, <2 x double> %a, <2 x double> %b) {
; CT-LABEL: ct_v2f64:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    add r1, sp, #8
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vld1.64 {d18, d19}, [r1]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vldr d17, [sp]
; CT-NEXT:    vmov d16, r2, r3
; CT-NEXT:    vdup.32 q11, r1
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vmov r0, r1, d20
; CT-NEXT:    vmov r2, r3, d21
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v2f64:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldr r1, [sp, #24]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r4, r12, #0
; DEFAULT-NEXT:    and r0, r2, lr
; DEFAULT-NEXT:    bic lr, r1, lr
; DEFAULT-NEXT:    ldr r2, [sp, #28]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    rsb r5, r12, #0
; DEFAULT-NEXT:    and r1, r3, lr
; DEFAULT-NEXT:    bic lr, r2, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    ldr r3, [sp, #16]
; DEFAULT-NEXT:    ldr lr, [sp, #32]
; DEFAULT-NEXT:    and r2, r3, r4
; DEFAULT-NEXT:    bic r4, lr, r4
; DEFAULT-NEXT:    ldr lr, [sp, #36]
; DEFAULT-NEXT:    orr r2, r2, r4
; DEFAULT-NEXT:    ldr r4, [sp, #20]
; DEFAULT-NEXT:    and r3, r4, r5
; DEFAULT-NEXT:    bic r5, lr, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <2 x double> @llvm.ct.select.v2f64(i1 %cond, <2 x double> %a, <2 x double> %b)
  ret <2 x double> %sel
}

;
; itty bitty vector type edge cases follow. these should be scalarised.
;
define <1 x i8> @ct_v1i8(i1 %cond, <1 x i8> %a, <1 x i8> %b) {
; CT-LABEL: ct_v1i8:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r3, r0, #1
; CT-NEXT:    rsb r12, r3, #0
; CT-NEXT:    and r0, r1, r12
; CT-NEXT:    bic r12, r2, r12
; CT-NEXT:    orr r0, r0, r12
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v1i8:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    and r3, r0, #1
; DEFAULT-NEXT:    rsb r12, r3, #0
; DEFAULT-NEXT:    and r0, r1, r12
; DEFAULT-NEXT:    bic r12, r2, r12
; DEFAULT-NEXT:    orr r0, r0, r12
; DEFAULT-NEXT:    bx lr
entry:
  %sel = call <1 x i8> @llvm.ct.select.i8(i1 %cond, <1 x i8> %a, <1 x i8> %b)
  ret <1 x i8> %sel
}

define <2 x i8> @ct_v2i8(i1 %cond, <2 x i8> %a, <2 x i8> %b) {
; CT-LABEL: ct_v2i8:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v2i8:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r0, r1, lr
; DEFAULT-NEXT:    bic lr, r3, lr
; DEFAULT-NEXT:    ldrb r3, [sp, #8]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r1, r2, lr
; DEFAULT-NEXT:    bic lr, r3, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    pop {r11, pc}
entry:
  %sel = call <2 x i8> @llvm.ct.select.i16(i1 %cond, <2 x i8> %a, <2 x i8> %b)
  ret <2 x i8> %sel
}

define <4 x i8> @ct_v4i8(i1 %cond, <4 x i8> %a, <4 x i8> %b) {
; CT-LABEL: ct_v4i8:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v4i8:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r4, r5, r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    ldrb lr, [sp, #20]
; DEFAULT-NEXT:    rsb r4, r12, #0
; DEFAULT-NEXT:    rsb r5, r12, #0
; DEFAULT-NEXT:    and r0, r1, r4
; DEFAULT-NEXT:    bic r4, lr, r4
; DEFAULT-NEXT:    orr r0, r0, r4
; DEFAULT-NEXT:    ldrb r4, [sp, #24]
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r1, r2, lr
; DEFAULT-NEXT:    bic lr, r4, lr
; DEFAULT-NEXT:    ldrb r4, [sp, #28]
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r2, r3, lr
; DEFAULT-NEXT:    bic lr, r4, lr
; DEFAULT-NEXT:    orr r2, r2, lr
; DEFAULT-NEXT:    ldrb r4, [sp, #16]
; DEFAULT-NEXT:    ldrb lr, [sp, #32]
; DEFAULT-NEXT:    and r3, r4, r5
; DEFAULT-NEXT:    bic r5, lr, r5
; DEFAULT-NEXT:    orr r3, r3, r5
; DEFAULT-NEXT:    pop {r4, r5, r11, pc}
entry:
  %sel = call <4 x i8> @llvm.ct.select.i32(i1 %cond, <4 x i8> %a, <4 x i8> %b)
  ret <4 x i8> %sel
}

define <1 x i16> @ct_v1i16(i1 %cond, <1 x i16> %a, <1 x i16> %b) {
; CT-LABEL: ct_v1i16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r3, r0, #1
; CT-NEXT:    rsb r12, r3, #0
; CT-NEXT:    and r0, r1, r12
; CT-NEXT:    bic r12, r2, r12
; CT-NEXT:    orr r0, r0, r12
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v1i16:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    and r3, r0, #1
; DEFAULT-NEXT:    rsb r12, r3, #0
; DEFAULT-NEXT:    and r0, r1, r12
; DEFAULT-NEXT:    bic r12, r2, r12
; DEFAULT-NEXT:    orr r0, r0, r12
; DEFAULT-NEXT:    bx lr
entry:
  %sel = call <1 x i16> @llvm.ct.select.i16(i1 %cond, <1 x i16> %a, <1 x i16> %b)
  ret <1 x i16> %sel
}

define <2 x i16> @ct_v2i16(i1 %cond, <2 x i16> %a, <2 x i16> %b) {
; CT-LABEL: ct_v2i16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vldr d16, [sp]
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov d17, r2, r3
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov r0, r1, d18
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v2i16:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    push {r11, lr}
; DEFAULT-NEXT:    and r12, r0, #1
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r0, r1, lr
; DEFAULT-NEXT:    bic lr, r3, lr
; DEFAULT-NEXT:    ldrh r3, [sp, #8]
; DEFAULT-NEXT:    orr r0, r0, lr
; DEFAULT-NEXT:    rsb lr, r12, #0
; DEFAULT-NEXT:    and r1, r2, lr
; DEFAULT-NEXT:    bic lr, r3, lr
; DEFAULT-NEXT:    orr r1, r1, lr
; DEFAULT-NEXT:    pop {r11, pc}
entry:
  %sel = call <2 x i16> @llvm.ct.select.i32(i1 %cond, <2 x i16> %a, <2 x i16> %b)
  ret <2 x i16> %sel
}

define <1 x i32> @ct_v1i32(i1 %cond, <1 x i32> %a, <1 x i32> %b) {
; CT-LABEL: ct_v1i32:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r3, r0, #1
; CT-NEXT:    rsb r12, r3, #0
; CT-NEXT:    and r0, r1, r12
; CT-NEXT:    bic r12, r2, r12
; CT-NEXT:    orr r0, r0, r12
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v1i32:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    and r3, r0, #1
; DEFAULT-NEXT:    rsb r12, r3, #0
; DEFAULT-NEXT:    and r0, r1, r12
; DEFAULT-NEXT:    bic r12, r2, r12
; DEFAULT-NEXT:    orr r0, r0, r12
; DEFAULT-NEXT:    bx lr
entry:
  %sel = call <1 x i32> @llvm.ct.select.i32(i1 %cond, <1 x i32> %a, <1 x i32> %b)
  ret <1 x i32> %sel
}

define <1 x float> @ct_v1f32(i1 %cond, <1 x float> %a, <1 x float> %b) {
; CT-LABEL: ct_v1f32:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    vmov s0, r2
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    vmov s2, r1
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    vmov r3, s0
; CT-NEXT:    vmov r2, s2
; CT-NEXT:    and r2, r2, r1
; CT-NEXT:    bic r1, r3, r1
; CT-NEXT:    orr r2, r2, r1
; CT-NEXT:    vmov s4, r2
; CT-NEXT:    vmov r0, s4
; CT-NEXT:    bx lr
;
; DEFAULT-LABEL: ct_v1f32:
; DEFAULT:       @ %bb.0: @ %entry
; DEFAULT-NEXT:    and r3, r0, #1
; DEFAULT-NEXT:    rsb r12, r3, #0
; DEFAULT-NEXT:    and r0, r1, r12
; DEFAULT-NEXT:    bic r12, r2, r12
; DEFAULT-NEXT:    orr r0, r0, r12
; DEFAULT-NEXT:    bx lr
entry:
  %sel = call <1 x float> @llvm.ct.select.f32(i1 %cond, <1 x float> %a, <1 x float> %b)
  ret <1 x float> %sel
}
