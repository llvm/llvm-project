; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=armv7-unknown-none-eabihf                | FileCheck %s --check-prefix=LE
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=armv7-unknown-none-eabihf                | FileCheck %s --check-prefix=LE
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=armv7-unknown-none-eabihf -mattr=+neon   | FileCheck %s --check-prefix=LE-NEON
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=armv7-unknown-none-eabihf -mattr=+neon   | FileCheck %s --check-prefix=LE-NEON
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=armebv7-unknown-none-eabihf              | FileCheck %s --check-prefix=BE
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=armebv7-unknown-none-eabihf              | FileCheck %s --check-prefix=BE
; RUN: sed 's/iXLen/i32/g' %s | llc -mtriple=armebv7-unknown-none-eabihf -mattr=+neon | FileCheck %s --check-prefix=BE-NEON
; RUN: sed 's/iXLen/i64/g' %s | llc -mtriple=armebv7-unknown-none-eabihf -mattr=+neon | FileCheck %s --check-prefix=BE-NEON

define <1 x i64> @llrint_v1i64_v1f16(<1 x half> %x) {
; LE-LABEL: llrint_v1i64_v1f16:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r11, lr}
; LE-NEXT:    push {r11, lr}
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_f2h
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d0[0], r0
; LE-NEXT:    vmov.32 d0[1], r1
; LE-NEXT:    pop {r11, pc}
;
; LE-NEON-LABEL: llrint_v1i64_v1f16:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r11, lr}
; LE-NEON-NEXT:    push {r11, lr}
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_f2h
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d0[0], r0
; LE-NEON-NEXT:    vmov.32 d0[1], r1
; LE-NEON-NEXT:    pop {r11, pc}
;
; BE-LABEL: llrint_v1i64_v1f16:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r11, lr}
; BE-NEXT:    push {r11, lr}
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_f2h
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    pop {r11, pc}
;
; BE-NEON-LABEL: llrint_v1i64_v1f16:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r11, lr}
; BE-NEON-NEXT:    push {r11, lr}
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_f2h
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    pop {r11, pc}
  %a = call <1 x i64> @llvm.llrint.v1i64.v1f16(<1 x half> %x)
  ret <1 x i64> %a
}
declare <1 x i64> @llvm.llrint.v1i64.v1f16(<1 x half>)

define <2 x i64> @llrint_v1i64_v2f16(<2 x half> %x) {
; LE-LABEL: llrint_v1i64_v2f16:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r11, lr}
; LE-NEXT:    push {r4, r5, r11, lr}
; LE-NEXT:    .vsave {d8, d9}
; LE-NEXT:    vpush {d8, d9}
; LE-NEXT:    vmov r0, s1
; LE-NEXT:    vmov.f32 s16, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r4, r0
; LE-NEXT:    vmov r0, s16
; LE-NEXT:    mov r5, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    vmov.32 d9[0], r4
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d9[1], r5
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q0, q4, q4
; LE-NEXT:    vpop {d8, d9}
; LE-NEXT:    pop {r4, r5, r11, pc}
;
; LE-NEON-LABEL: llrint_v1i64_v2f16:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r11, lr}
; LE-NEON-NEXT:    .vsave {d8, d9}
; LE-NEON-NEXT:    vpush {d8, d9}
; LE-NEON-NEXT:    vmov r0, s1
; LE-NEON-NEXT:    vmov.f32 s16, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    vmov r0, s16
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    vmov.32 d9[0], r4
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d9[1], r5
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q0, q4, q4
; LE-NEON-NEXT:    vpop {d8, d9}
; LE-NEON-NEXT:    pop {r4, r5, r11, pc}
;
; BE-LABEL: llrint_v1i64_v2f16:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r11, lr}
; BE-NEXT:    push {r4, r5, r11, lr}
; BE-NEXT:    .vsave {d8}
; BE-NEXT:    vpush {d8}
; BE-NEXT:    vmov r0, s1
; BE-NEXT:    vmov.f32 s16, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vmov r0, s16
; BE-NEXT:    mov r5, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d8[0], r4
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d8[1], r5
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d1, d8
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    vpop {d8}
; BE-NEXT:    pop {r4, r5, r11, pc}
;
; BE-NEON-LABEL: llrint_v1i64_v2f16:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r11, lr}
; BE-NEON-NEXT:    .vsave {d8}
; BE-NEON-NEXT:    vpush {d8}
; BE-NEON-NEXT:    vmov r0, s1
; BE-NEON-NEXT:    vmov.f32 s16, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vmov r0, s16
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d8[0], r4
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d8[1], r5
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d8
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    vpop {d8}
; BE-NEON-NEXT:    pop {r4, r5, r11, pc}
  %a = call <2 x i64> @llvm.llrint.v2i64.v2f16(<2 x half> %x)
  ret <2 x i64> %a
}
declare <2 x i64> @llvm.llrint.v2i64.v2f16(<2 x half>)

define <4 x i64> @llrint_v4i64_v4f16(<4 x half> %x) {
; LE-LABEL: llrint_v4i64_v4f16:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r11, lr}
; LE-NEXT:    .vsave {d12, d13}
; LE-NEXT:    vpush {d12, d13}
; LE-NEXT:    .vsave {d8, d9, d10}
; LE-NEXT:    vpush {d8, d9, d10}
; LE-NEXT:    vmov r0, s1
; LE-NEXT:    vmov.f32 s16, s3
; LE-NEXT:    vmov.f32 s20, s2
; LE-NEXT:    vmov.f32 s18, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vmov r0, s18
; LE-NEXT:    mov r4, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vmov r0, s16
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r7
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    vmov r0, s20
; LE-NEXT:    mov r7, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    vmov.32 d13[0], r5
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d13[1], r4
; LE-NEXT:    vmov.32 d9[1], r6
; LE-NEXT:    vmov.32 d12[1], r7
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q0, q6, q6
; LE-NEXT:    vorr q1, q4, q4
; LE-NEXT:    vpop {d8, d9, d10}
; LE-NEXT:    vpop {d12, d13}
; LE-NEXT:    pop {r4, r5, r6, r7, r11, pc}
;
; LE-NEON-LABEL: llrint_v4i64_v4f16:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r11, lr}
; LE-NEON-NEXT:    .vsave {d12, d13}
; LE-NEON-NEXT:    vpush {d12, d13}
; LE-NEON-NEXT:    .vsave {d8, d9, d10}
; LE-NEON-NEXT:    vpush {d8, d9, d10}
; LE-NEON-NEXT:    vmov r0, s1
; LE-NEON-NEXT:    vmov.f32 s16, s3
; LE-NEON-NEXT:    vmov.f32 s20, s2
; LE-NEON-NEXT:    vmov.f32 s18, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vmov r0, s18
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vmov r0, s16
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r7
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    vmov r0, s20
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    vmov.32 d13[0], r5
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d13[1], r4
; LE-NEON-NEXT:    vmov.32 d9[1], r6
; LE-NEON-NEXT:    vmov.32 d12[1], r7
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q0, q6, q6
; LE-NEON-NEXT:    vorr q1, q4, q4
; LE-NEON-NEXT:    vpop {d8, d9, d10}
; LE-NEON-NEXT:    vpop {d12, d13}
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r11, pc}
;
; BE-LABEL: llrint_v4i64_v4f16:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r11, lr}
; BE-NEXT:    .vsave {d8, d9, d10}
; BE-NEXT:    vpush {d8, d9, d10}
; BE-NEXT:    vmov r0, s1
; BE-NEXT:    vmov.f32 s16, s3
; BE-NEXT:    vmov.f32 s18, s2
; BE-NEXT:    vmov.f32 s20, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    mov r5, r0
; BE-NEXT:    vmov r0, s20
; BE-NEXT:    mov r4, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r7, r0
; BE-NEXT:    vmov r0, s16
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r7
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vmov r0, s18
; BE-NEXT:    mov r7, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d9[0], r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    vmov.32 d8[1], r6
; BE-NEXT:    vmov.32 d10[1], r7
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d1, d9
; BE-NEXT:    vrev64.32 d3, d8
; BE-NEXT:    vrev64.32 d0, d10
; BE-NEXT:    vrev64.32 d2, d16
; BE-NEXT:    vpop {d8, d9, d10}
; BE-NEXT:    pop {r4, r5, r6, r7, r11, pc}
;
; BE-NEON-LABEL: llrint_v4i64_v4f16:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r11, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10}
; BE-NEON-NEXT:    vpush {d8, d9, d10}
; BE-NEON-NEXT:    vmov r0, s1
; BE-NEON-NEXT:    vmov.f32 s16, s3
; BE-NEON-NEXT:    vmov.f32 s18, s2
; BE-NEON-NEXT:    vmov.f32 s20, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    mov r5, r0
; BE-NEON-NEXT:    vmov r0, s20
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    vmov r0, s16
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r7
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vmov r0, s18
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d9[0], r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    vmov.32 d8[1], r6
; BE-NEON-NEXT:    vmov.32 d10[1], r7
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d9
; BE-NEON-NEXT:    vrev64.32 d3, d8
; BE-NEON-NEXT:    vrev64.32 d0, d10
; BE-NEON-NEXT:    vrev64.32 d2, d16
; BE-NEON-NEXT:    vpop {d8, d9, d10}
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r11, pc}
  %a = call <4 x i64> @llvm.llrint.v4i64.v4f16(<4 x half> %x)
  ret <4 x i64> %a
}
declare <4 x i64> @llvm.llrint.v4i64.v4f16(<4 x half>)

define <8 x i64> @llrint_v8i64_v8f16(<8 x half> %x) {
; LE-LABEL: llrint_v8i64_v8f16:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #8
; LE-NEXT:    sub sp, sp, #8
; LE-NEXT:    vmov r0, s1
; LE-NEXT:    vstr s6, [sp, #4] @ 4-byte Spill
; LE-NEXT:    vmov.f32 s16, s7
; LE-NEXT:    vmov.f32 s18, s5
; LE-NEXT:    vmov.f32 s20, s4
; LE-NEXT:    vmov.f32 s22, s3
; LE-NEXT:    vmov.f32 s24, s2
; LE-NEXT:    vmov.f32 s26, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r9, r0
; LE-NEXT:    vmov r0, s26
; LE-NEXT:    str r1, [sp] @ 4-byte Spill
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r10, r0
; LE-NEXT:    vmov r0, s22
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vmov r0, s24
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vmov r0, s18
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r6, r0
; LE-NEXT:    vmov r0, s20
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r4, r0
; LE-NEXT:    vmov r0, s16
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r4
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r6
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r7
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r5
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r10
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vldr s0, [sp, #4] @ 4-byte Reload
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    vmov.32 d9[0], r9
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    ldr r0, [sp] @ 4-byte Reload
; LE-NEXT:    vmov.32 d15[1], r5
; LE-NEXT:    vmov.32 d9[1], r0
; LE-NEXT:    vmov.32 d13[1], r6
; LE-NEXT:    vmov.32 d11[1], r11
; LE-NEXT:    vmov.32 d8[1], r4
; LE-NEXT:    vmov.32 d14[1], r7
; LE-NEXT:    vorr q0, q4, q4
; LE-NEXT:    vmov.32 d12[1], r8
; LE-NEXT:    vorr q1, q7, q7
; LE-NEXT:    vmov.32 d10[1], r1
; LE-NEXT:    vorr q2, q6, q6
; LE-NEXT:    vorr q3, q5, q5
; LE-NEXT:    add sp, sp, #8
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v8i64_v8f16:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #8
; LE-NEON-NEXT:    sub sp, sp, #8
; LE-NEON-NEXT:    vmov r0, s1
; LE-NEON-NEXT:    vstr s6, [sp, #4] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.f32 s16, s7
; LE-NEON-NEXT:    vmov.f32 s18, s5
; LE-NEON-NEXT:    vmov.f32 s20, s4
; LE-NEON-NEXT:    vmov.f32 s22, s3
; LE-NEON-NEXT:    vmov.f32 s24, s2
; LE-NEON-NEXT:    vmov.f32 s26, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r9, r0
; LE-NEON-NEXT:    vmov r0, s26
; LE-NEON-NEXT:    str r1, [sp] @ 4-byte Spill
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r10, r0
; LE-NEON-NEXT:    vmov r0, s22
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vmov r0, s24
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vmov r0, s18
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    vmov r0, s20
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    vmov r0, s16
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r4
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r6
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r7
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r5
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r10
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vldr s0, [sp, #4] @ 4-byte Reload
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    vmov.32 d9[0], r9
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    ldr r0, [sp] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d15[1], r5
; LE-NEON-NEXT:    vmov.32 d9[1], r0
; LE-NEON-NEXT:    vmov.32 d13[1], r6
; LE-NEON-NEXT:    vmov.32 d11[1], r11
; LE-NEON-NEXT:    vmov.32 d8[1], r4
; LE-NEON-NEXT:    vmov.32 d14[1], r7
; LE-NEON-NEXT:    vorr q0, q4, q4
; LE-NEON-NEXT:    vmov.32 d12[1], r8
; LE-NEON-NEXT:    vorr q1, q7, q7
; LE-NEON-NEXT:    vmov.32 d10[1], r1
; LE-NEON-NEXT:    vorr q2, q6, q6
; LE-NEON-NEXT:    vorr q3, q5, q5
; LE-NEON-NEXT:    add sp, sp, #8
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v8i64_v8f16:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14}
; BE-NEXT:    .pad #8
; BE-NEXT:    sub sp, sp, #8
; BE-NEXT:    vmov r0, s1
; BE-NEXT:    vmov.f32 s18, s7
; BE-NEXT:    vmov.f32 s16, s6
; BE-NEXT:    vmov.f32 s20, s5
; BE-NEXT:    vmov.f32 s22, s4
; BE-NEXT:    vmov.f32 s24, s3
; BE-NEXT:    vmov.f32 s26, s2
; BE-NEXT:    vmov.f32 s28, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    mov r9, r0
; BE-NEXT:    vmov r0, s28
; BE-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r10, r0
; BE-NEXT:    vmov r0, s24
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r5, r0
; BE-NEXT:    vmov r0, s26
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r7, r0
; BE-NEXT:    vmov r0, s20
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r6, r0
; BE-NEXT:    vmov r0, s22
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vmov r0, s18
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r4
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r6
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r7
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r5
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r10
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    vmov r0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d8[0], r9
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    ldr r0, [sp, #4] @ 4-byte Reload
; BE-NEXT:    vmov.32 d13[1], r5
; BE-NEXT:    vmov.32 d8[1], r0
; BE-NEXT:    vmov.32 d11[1], r6
; BE-NEXT:    vmov.32 d9[1], r11
; BE-NEXT:    vmov.32 d14[1], r4
; BE-NEXT:    vmov.32 d12[1], r7
; BE-NEXT:    vmov.32 d10[1], r8
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d1, d8
; BE-NEXT:    vrev64.32 d3, d13
; BE-NEXT:    vrev64.32 d5, d11
; BE-NEXT:    vrev64.32 d7, d9
; BE-NEXT:    vrev64.32 d0, d14
; BE-NEXT:    vrev64.32 d2, d12
; BE-NEXT:    vrev64.32 d4, d10
; BE-NEXT:    vrev64.32 d6, d16
; BE-NEXT:    add sp, sp, #8
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v8i64_v8f16:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14}
; BE-NEON-NEXT:    .pad #8
; BE-NEON-NEXT:    sub sp, sp, #8
; BE-NEON-NEXT:    vmov r0, s1
; BE-NEON-NEXT:    vmov.f32 s18, s7
; BE-NEON-NEXT:    vmov.f32 s16, s6
; BE-NEON-NEXT:    vmov.f32 s20, s5
; BE-NEON-NEXT:    vmov.f32 s22, s4
; BE-NEON-NEXT:    vmov.f32 s24, s3
; BE-NEON-NEXT:    vmov.f32 s26, s2
; BE-NEON-NEXT:    vmov.f32 s28, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    mov r9, r0
; BE-NEON-NEXT:    vmov r0, s28
; BE-NEON-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r10, r0
; BE-NEON-NEXT:    vmov r0, s24
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r5, r0
; BE-NEON-NEXT:    vmov r0, s26
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    vmov r0, s20
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r6, r0
; BE-NEON-NEXT:    vmov r0, s22
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vmov r0, s18
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r4
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r6
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r7
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r5
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r10
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    vmov r0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d8[0], r9
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #4] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d13[1], r5
; BE-NEON-NEXT:    vmov.32 d8[1], r0
; BE-NEON-NEXT:    vmov.32 d11[1], r6
; BE-NEON-NEXT:    vmov.32 d9[1], r11
; BE-NEON-NEXT:    vmov.32 d14[1], r4
; BE-NEON-NEXT:    vmov.32 d12[1], r7
; BE-NEON-NEXT:    vmov.32 d10[1], r8
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d8
; BE-NEON-NEXT:    vrev64.32 d3, d13
; BE-NEON-NEXT:    vrev64.32 d5, d11
; BE-NEON-NEXT:    vrev64.32 d7, d9
; BE-NEON-NEXT:    vrev64.32 d0, d14
; BE-NEON-NEXT:    vrev64.32 d2, d12
; BE-NEON-NEXT:    vrev64.32 d4, d10
; BE-NEON-NEXT:    vrev64.32 d6, d16
; BE-NEON-NEXT:    add sp, sp, #8
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <8 x i64> @llvm.llrint.v8i64.v8f16(<8 x half> %x)
  ret <8 x i64> %a
}
declare <8 x i64> @llvm.llrint.v8i64.v8f16(<8 x half>)

define <16 x i64> @llrint_v16i64_v16f16(<16 x half> %x) {
; LE-LABEL: llrint_v16i64_v16f16:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #120
; LE-NEXT:    sub sp, sp, #120
; LE-NEXT:    mov r11, r0
; LE-NEXT:    vmov r0, s7
; LE-NEXT:    vstr s15, [sp, #24] @ 4-byte Spill
; LE-NEXT:    vmov.f32 s23, s13
; LE-NEXT:    vstr s14, [sp, #100] @ 4-byte Spill
; LE-NEXT:    vmov.f32 s25, s12
; LE-NEXT:    vmov.f32 s27, s11
; LE-NEXT:    vstr s10, [sp, #104] @ 4-byte Spill
; LE-NEXT:    vstr s9, [sp, #108] @ 4-byte Spill
; LE-NEXT:    vmov.f32 s24, s8
; LE-NEXT:    vmov.f32 s19, s6
; LE-NEXT:    vmov.f32 s29, s5
; LE-NEXT:    vmov.f32 s17, s4
; LE-NEXT:    vmov.f32 s16, s3
; LE-NEXT:    vmov.f32 s21, s2
; LE-NEXT:    vmov.f32 s26, s1
; LE-NEXT:    vmov.f32 s18, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vmov r0, s25
; LE-NEXT:    str r1, [sp, #56] @ 4-byte Spill
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vmov r0, s27
; LE-NEXT:    str r1, [sp, #116] @ 4-byte Spill
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r6, r0
; LE-NEXT:    vmov r0, s29
; LE-NEXT:    str r1, [sp, #112] @ 4-byte Spill
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vmov r0, s23
; LE-NEXT:    mov r4, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vmov.32 d17[0], r6
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    mov r6, r0
; LE-NEXT:    vmov r0, s17
; LE-NEXT:    vmov r8, s21
; LE-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; LE-NEXT:    vmov r10, s19
; LE-NEXT:    vmov.32 d10[0], r5
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vmov.32 d11[0], r6
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    mov r0, r10
; LE-NEXT:    mov r9, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    vmov.32 d11[0], r7
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    mov r7, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r6, r0
; LE-NEXT:    ldr r0, [sp, #56] @ 4-byte Reload
; LE-NEXT:    vmov.32 d11[1], r0
; LE-NEXT:    vmov r0, s18
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vmov r0, s16
; LE-NEXT:    vmov.32 d10[1], r7
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    vmov.32 d15[1], r4
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vmov r0, s26
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vmov r8, s24
; LE-NEXT:    vmov.32 d14[1], r9
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov s24, r5
; LE-NEXT:    vldr s0, [sp, #24] @ 4-byte Reload
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    vmov r7, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s24
; LE-NEXT:    vmov s22, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s22
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    vmov s24, r6
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    mov r6, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s24
; LE-NEXT:    vmov s22, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s22
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    mov r6, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #100] @ 4-byte Reload
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vmov.32 d14[1], r5
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #104] @ 4-byte Reload
; LE-NEXT:    vmov s20, r0
; LE-NEXT:    vmov.32 d13[1], r6
; LE-NEXT:    vmov r4, s0
; LE-NEXT:    vldr s0, [sp, #108] @ 4-byte Reload
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    vmov s16, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    vmov s18, r7
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r4
; LE-NEXT:    mov r6, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    vmov s16, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[1], r6
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vmov.32 d10[1], r4
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d16[0], r0
; LE-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vmov.32 d19[1], r0
; LE-NEXT:    ldr r0, [sp, #116] @ 4-byte Reload
; LE-NEXT:    vmov.32 d21[1], r10
; LE-NEXT:    vmov.32 d18[1], r0
; LE-NEXT:    ldr r0, [sp, #112] @ 4-byte Reload
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    vmov.32 d17[1], r0
; LE-NEXT:    add r0, r11, #64
; LE-NEXT:    vmov.32 d16[1], r1
; LE-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vmov.32 d20[1], r9
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]
; LE-NEXT:    vst1.64 {d14, d15}, [r11:128]!
; LE-NEXT:    vst1.64 {d20, d21}, [r11:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]
; LE-NEXT:    add sp, sp, #120
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v16i64_v16f16:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #120
; LE-NEON-NEXT:    sub sp, sp, #120
; LE-NEON-NEXT:    mov r11, r0
; LE-NEON-NEXT:    vmov r0, s7
; LE-NEON-NEXT:    vstr s15, [sp, #24] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.f32 s23, s13
; LE-NEON-NEXT:    vstr s14, [sp, #100] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.f32 s25, s12
; LE-NEON-NEXT:    vmov.f32 s27, s11
; LE-NEON-NEXT:    vstr s10, [sp, #104] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s9, [sp, #108] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.f32 s24, s8
; LE-NEON-NEXT:    vmov.f32 s19, s6
; LE-NEON-NEXT:    vmov.f32 s29, s5
; LE-NEON-NEXT:    vmov.f32 s17, s4
; LE-NEON-NEXT:    vmov.f32 s16, s3
; LE-NEON-NEXT:    vmov.f32 s21, s2
; LE-NEON-NEXT:    vmov.f32 s26, s1
; LE-NEON-NEXT:    vmov.f32 s18, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vmov r0, s25
; LE-NEON-NEXT:    str r1, [sp, #56] @ 4-byte Spill
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vmov r0, s27
; LE-NEON-NEXT:    str r1, [sp, #116] @ 4-byte Spill
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    vmov r0, s29
; LE-NEON-NEXT:    str r1, [sp, #112] @ 4-byte Spill
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vmov r0, s23
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vmov.32 d17[0], r6
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    vmov r0, s17
; LE-NEON-NEXT:    vmov r8, s21
; LE-NEON-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; LE-NEON-NEXT:    vmov r10, s19
; LE-NEON-NEXT:    vmov.32 d10[0], r5
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vmov.32 d11[0], r6
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    mov r0, r10
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    vmov.32 d11[0], r7
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    ldr r0, [sp, #56] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d11[1], r0
; LE-NEON-NEXT:    vmov r0, s18
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vmov r0, s16
; LE-NEON-NEXT:    vmov.32 d10[1], r7
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    vmov.32 d15[1], r4
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vmov r0, s26
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vmov r8, s24
; LE-NEON-NEXT:    vmov.32 d14[1], r9
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov s24, r5
; LE-NEON-NEXT:    vldr s0, [sp, #24] @ 4-byte Reload
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    vmov r7, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s24
; LE-NEON-NEXT:    vmov s22, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s22
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    vmov s24, r6
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s24
; LE-NEON-NEXT:    vmov s22, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s22
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #100] @ 4-byte Reload
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vmov.32 d14[1], r5
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #104] @ 4-byte Reload
; LE-NEON-NEXT:    vmov s20, r0
; LE-NEON-NEXT:    vmov.32 d13[1], r6
; LE-NEON-NEXT:    vmov r4, s0
; LE-NEON-NEXT:    vldr s0, [sp, #108] @ 4-byte Reload
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    vmov s16, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    vmov s18, r7
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r4
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    vmov s16, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[1], r6
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vmov.32 d10[1], r4
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d16[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vmov.32 d19[1], r0
; LE-NEON-NEXT:    ldr r0, [sp, #116] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d21[1], r10
; LE-NEON-NEXT:    vmov.32 d18[1], r0
; LE-NEON-NEXT:    ldr r0, [sp, #112] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    vmov.32 d17[1], r0
; LE-NEON-NEXT:    add r0, r11, #64
; LE-NEON-NEXT:    vmov.32 d16[1], r1
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vmov.32 d20[1], r9
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r11:128]!
; LE-NEON-NEXT:    vst1.64 {d20, d21}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]
; LE-NEON-NEXT:    add sp, sp, #120
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v16i64_v16f16:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #112
; BE-NEXT:    sub sp, sp, #112
; BE-NEXT:    mov r11, r0
; BE-NEXT:    vmov r0, s14
; BE-NEXT:    vmov.f32 s17, s15
; BE-NEXT:    vstr s13, [sp, #52] @ 4-byte Spill
; BE-NEXT:    vmov.f32 s21, s12
; BE-NEXT:    vstr s10, [sp, #68] @ 4-byte Spill
; BE-NEXT:    vmov.f32 s23, s11
; BE-NEXT:    vstr s7, [sp, #72] @ 4-byte Spill
; BE-NEXT:    vmov.f32 s19, s9
; BE-NEXT:    vstr s4, [sp, #28] @ 4-byte Spill
; BE-NEXT:    vmov.f32 s26, s8
; BE-NEXT:    vmov.f32 s24, s6
; BE-NEXT:    vmov.f32 s18, s5
; BE-NEXT:    vmov.f32 s25, s3
; BE-NEXT:    vmov.f32 s16, s2
; BE-NEXT:    vmov.f32 s27, s1
; BE-NEXT:    vmov.f32 s29, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    mov r8, r0
; BE-NEXT:    vmov r0, s29
; BE-NEXT:    mov r4, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r9, r0
; BE-NEXT:    vmov r0, s27
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r7, r0
; BE-NEXT:    vmov r0, s21
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r6, r0
; BE-NEXT:    vmov r0, s25
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r5, r0
; BE-NEXT:    vmov r0, s23
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r5
; BE-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; BE-NEXT:    vstr d16, [sp, #96] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r6
; BE-NEXT:    str r1, [sp, #92] @ 4-byte Spill
; BE-NEXT:    vstr d16, [sp, #80] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r7
; BE-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; BE-NEXT:    vstr d16, [sp, #56] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r9
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vmov r0, s17
; BE-NEXT:    mov r5, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d10[0], r8
; BE-NEXT:    vmov r6, s19
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    mov r7, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r6, r0
; BE-NEXT:    vmov r0, s18
; BE-NEXT:    vmov.32 d10[1], r4
; BE-NEXT:    vstr d10, [sp, #40] @ 8-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vmov r0, s16
; BE-NEXT:    vmov.32 d11[1], r7
; BE-NEXT:    vstr d11, [sp, #32] @ 8-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.32 d15[1], r5
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vstr d15, [sp, #16] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vldr s0, [sp, #28] @ 4-byte Reload
; BE-NEXT:    vmov r5, s26
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s26, r4
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d14[1], r10
; BE-NEXT:    vmov r4, s24
; BE-NEXT:    vstr d16, [sp] @ 8-byte Spill
; BE-NEXT:    vstr d14, [sp, #8] @ 8-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s26
; BE-NEXT:    vmov s22, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s22
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vmov s24, r6
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    mov r6, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s24
; BE-NEXT:    vmov s22, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s22
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vmov.32 d14[1], r6
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    mov r6, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #52] @ 4-byte Reload
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vmov.32 d13[1], r7
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #68] @ 4-byte Reload
; BE-NEXT:    vmov s20, r0
; BE-NEXT:    vmov.32 d11[1], r6
; BE-NEXT:    vmov r7, s0
; BE-NEXT:    vldr s0, [sp, #72] @ 4-byte Reload
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s20
; BE-NEXT:    vmov s16, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vmov s18, r4
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    mov r0, r7
; BE-NEXT:    mov r4, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s18
; BE-NEXT:    vmov s16, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    vmov.32 d15[1], r4
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d24[0], r0
; BE-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; BE-NEXT:    vldr d23, [sp, #56] @ 8-byte Reload
; BE-NEXT:    vldr d20, [sp, #8] @ 8-byte Reload
; BE-NEXT:    vmov.32 d23[1], r0
; BE-NEXT:    ldr r0, [sp, #92] @ 4-byte Reload
; BE-NEXT:    vldr d22, [sp, #80] @ 8-byte Reload
; BE-NEXT:    vldr d26, [sp, #16] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d21, d20
; BE-NEXT:    vmov.32 d22[1], r0
; BE-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; BE-NEXT:    vldr d30, [sp] @ 8-byte Reload
; BE-NEXT:    vldr d25, [sp, #96] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d20, d26
; BE-NEXT:    vldr d26, [sp, #32] @ 8-byte Reload
; BE-NEXT:    vmov.32 d10[1], r5
; BE-NEXT:    vmov.32 d12[1], r9
; BE-NEXT:    vldr d28, [sp, #40] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d27, d26
; BE-NEXT:    vmov.32 d25[1], r0
; BE-NEXT:    add r0, r11, #64
; BE-NEXT:    vmov.32 d30[1], r8
; BE-NEXT:    vmov.32 d9[1], r6
; BE-NEXT:    vrev64.32 d26, d28
; BE-NEXT:    vrev64.32 d29, d10
; BE-NEXT:    vmov.32 d24[1], r1
; BE-NEXT:    vrev64.32 d1, d12
; BE-NEXT:    vrev64.32 d28, d23
; BE-NEXT:    vrev64.32 d23, d22
; BE-NEXT:    vrev64.32 d22, d30
; BE-NEXT:    vrev64.32 d31, d25
; BE-NEXT:    vrev64.32 d0, d9
; BE-NEXT:    vrev64.32 d30, d24
; BE-NEXT:    vst1.64 {d0, d1}, [r0:128]!
; BE-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEXT:    vst1.64 {d28, d29}, [r0:128]!
; BE-NEXT:    vrev64.32 d19, d13
; BE-NEXT:    vst1.64 {d26, d27}, [r0:128]
; BE-NEXT:    vst1.64 {d20, d21}, [r11:128]!
; BE-NEXT:    vrev64.32 d18, d14
; BE-NEXT:    vst1.64 {d22, d23}, [r11:128]!
; BE-NEXT:    vrev64.32 d17, d15
; BE-NEXT:    vrev64.32 d16, d11
; BE-NEXT:    vst1.64 {d18, d19}, [r11:128]!
; BE-NEXT:    vst1.64 {d16, d17}, [r11:128]
; BE-NEXT:    add sp, sp, #112
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v16i64_v16f16:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #112
; BE-NEON-NEXT:    sub sp, sp, #112
; BE-NEON-NEXT:    mov r11, r0
; BE-NEON-NEXT:    vmov r0, s14
; BE-NEON-NEXT:    vmov.f32 s17, s15
; BE-NEON-NEXT:    vstr s13, [sp, #52] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.f32 s21, s12
; BE-NEON-NEXT:    vstr s10, [sp, #68] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.f32 s23, s11
; BE-NEON-NEXT:    vstr s7, [sp, #72] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.f32 s19, s9
; BE-NEON-NEXT:    vstr s4, [sp, #28] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.f32 s26, s8
; BE-NEON-NEXT:    vmov.f32 s24, s6
; BE-NEON-NEXT:    vmov.f32 s18, s5
; BE-NEON-NEXT:    vmov.f32 s25, s3
; BE-NEON-NEXT:    vmov.f32 s16, s2
; BE-NEON-NEXT:    vmov.f32 s27, s1
; BE-NEON-NEXT:    vmov.f32 s29, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    mov r8, r0
; BE-NEON-NEXT:    vmov r0, s29
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r9, r0
; BE-NEON-NEXT:    vmov r0, s27
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    vmov r0, s21
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r6, r0
; BE-NEON-NEXT:    vmov r0, s25
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r5, r0
; BE-NEON-NEXT:    vmov r0, s23
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r5
; BE-NEON-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; BE-NEON-NEXT:    vstr d16, [sp, #96] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r6
; BE-NEON-NEXT:    str r1, [sp, #92] @ 4-byte Spill
; BE-NEON-NEXT:    vstr d16, [sp, #80] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r7
; BE-NEON-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; BE-NEON-NEXT:    vstr d16, [sp, #56] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r9
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vmov r0, s17
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d10[0], r8
; BE-NEON-NEXT:    vmov r6, s19
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r6, r0
; BE-NEON-NEXT:    vmov r0, s18
; BE-NEON-NEXT:    vmov.32 d10[1], r4
; BE-NEON-NEXT:    vstr d10, [sp, #40] @ 8-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vmov r0, s16
; BE-NEON-NEXT:    vmov.32 d11[1], r7
; BE-NEON-NEXT:    vstr d11, [sp, #32] @ 8-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.32 d15[1], r5
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vstr d15, [sp, #16] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vldr s0, [sp, #28] @ 4-byte Reload
; BE-NEON-NEXT:    vmov r5, s26
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s26, r4
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d14[1], r10
; BE-NEON-NEXT:    vmov r4, s24
; BE-NEON-NEXT:    vstr d16, [sp] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d14, [sp, #8] @ 8-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s26
; BE-NEON-NEXT:    vmov s22, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s22
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vmov s24, r6
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s24
; BE-NEON-NEXT:    vmov s22, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s22
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vmov.32 d14[1], r6
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #52] @ 4-byte Reload
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vmov.32 d13[1], r7
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #68] @ 4-byte Reload
; BE-NEON-NEXT:    vmov s20, r0
; BE-NEON-NEXT:    vmov.32 d11[1], r6
; BE-NEON-NEXT:    vmov r7, s0
; BE-NEON-NEXT:    vldr s0, [sp, #72] @ 4-byte Reload
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s20
; BE-NEON-NEXT:    vmov s16, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vmov s18, r4
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s18
; BE-NEON-NEXT:    vmov s16, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r4
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d24[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; BE-NEON-NEXT:    vldr d23, [sp, #56] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d20, [sp, #8] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d23[1], r0
; BE-NEON-NEXT:    ldr r0, [sp, #92] @ 4-byte Reload
; BE-NEON-NEXT:    vldr d22, [sp, #80] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d26, [sp, #16] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d21, d20
; BE-NEON-NEXT:    vmov.32 d22[1], r0
; BE-NEON-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; BE-NEON-NEXT:    vldr d30, [sp] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d25, [sp, #96] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d20, d26
; BE-NEON-NEXT:    vldr d26, [sp, #32] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[1], r5
; BE-NEON-NEXT:    vmov.32 d12[1], r9
; BE-NEON-NEXT:    vldr d28, [sp, #40] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d27, d26
; BE-NEON-NEXT:    vmov.32 d25[1], r0
; BE-NEON-NEXT:    add r0, r11, #64
; BE-NEON-NEXT:    vmov.32 d30[1], r8
; BE-NEON-NEXT:    vmov.32 d9[1], r6
; BE-NEON-NEXT:    vrev64.32 d26, d28
; BE-NEON-NEXT:    vrev64.32 d29, d10
; BE-NEON-NEXT:    vmov.32 d24[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d12
; BE-NEON-NEXT:    vrev64.32 d28, d23
; BE-NEON-NEXT:    vrev64.32 d23, d22
; BE-NEON-NEXT:    vrev64.32 d22, d30
; BE-NEON-NEXT:    vrev64.32 d31, d25
; BE-NEON-NEXT:    vrev64.32 d0, d9
; BE-NEON-NEXT:    vrev64.32 d30, d24
; BE-NEON-NEXT:    vst1.64 {d0, d1}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d28, d29}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d19, d13
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r0:128]
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r11:128]!
; BE-NEON-NEXT:    vrev64.32 d18, d14
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r11:128]!
; BE-NEON-NEXT:    vrev64.32 d17, d15
; BE-NEON-NEXT:    vrev64.32 d16, d11
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r11:128]!
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]
; BE-NEON-NEXT:    add sp, sp, #112
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <16 x i64> @llvm.llrint.v16i64.v16f16(<16 x half> %x)
  ret <16 x i64> %a
}
declare <16 x i64> @llvm.llrint.v16i64.v16f16(<16 x half>)

define <32 x i64> @llrint_v32i64_v32f16(<32 x half> %x) {
; LE-LABEL: llrint_v32i64_v32f16:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #248
; LE-NEXT:    sub sp, sp, #248
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r11, r0
; LE-NEXT:    vstr s15, [sp, #176] @ 4-byte Spill
; LE-NEXT:    vmov.f32 s19, s14
; LE-NEXT:    ldrh r0, [lr, #132]
; LE-NEXT:    vmov.f32 s17, s11
; LE-NEXT:    vstr s13, [sp, #196] @ 4-byte Spill
; LE-NEXT:    vstr s12, [sp, #112] @ 4-byte Spill
; LE-NEXT:    vstr s10, [sp, #136] @ 4-byte Spill
; LE-NEXT:    vstr s9, [sp, #160] @ 4-byte Spill
; LE-NEXT:    vstr s8, [sp, #200] @ 4-byte Spill
; LE-NEXT:    vstr s7, [sp, #100] @ 4-byte Spill
; LE-NEXT:    vstr s6, [sp, #116] @ 4-byte Spill
; LE-NEXT:    vstr s5, [sp, #76] @ 4-byte Spill
; LE-NEXT:    vstr s4, [sp, #120] @ 4-byte Spill
; LE-NEXT:    vstr s3, [sp, #156] @ 4-byte Spill
; LE-NEXT:    vstr s2, [sp, #192] @ 4-byte Spill
; LE-NEXT:    vstr s1, [sp, #104] @ 4-byte Spill
; LE-NEXT:    vstr s0, [sp, #108] @ 4-byte Spill
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    str r0, [sp, #52] @ 4-byte Spill
; LE-NEXT:    str r1, [sp, #56] @ 4-byte Spill
; LE-NEXT:    ldrh r0, [lr, #108]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    str r0, [sp, #32] @ 4-byte Spill
; LE-NEXT:    ldrh r0, [lr, #96]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r5, r0
; LE-NEXT:    ldrh r0, [lr, #100]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r7, r0
; LE-NEXT:    ldrh r0, [lr, #156]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r6, r0
; LE-NEXT:    ldrh r0, [lr, #152]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r4, r0
; LE-NEXT:    ldrh r0, [lr, #148]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r4
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r6
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r7
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r5
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r5, r1
; LE-NEXT:    ldrh r0, [lr, #144]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r10, r0
; LE-NEXT:    vmov.32 d11[1], r7
; LE-NEXT:    ldrh r0, [lr, #104]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.32 d10[1], r5
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    ldrh r0, [lr, #124]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    ldrh r0, [lr, #120]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.32 d14[1], r4
; LE-NEXT:    add lr, sp, #16
; LE-NEXT:    mov r6, r0
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    ldrh r0, [lr, #116]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    vorr q5, q6, q6
; LE-NEXT:    mov r4, r0
; LE-NEXT:    ldrh r0, [lr, #112]
; LE-NEXT:    vmov.32 d11[1], r8
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r4
; LE-NEXT:    str r1, [sp, #12] @ 4-byte Spill
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r6
; LE-NEXT:    add lr, sp, #216
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r5
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r7
; LE-NEXT:    add lr, sp, #232
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r10
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r5, r1
; LE-NEXT:    ldrh r0, [lr, #140]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    ldr r0, [sp, #32] @ 4-byte Reload
; LE-NEXT:    vmov.32 d10[1], r5
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    vmov s16, r0
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    ldrh r1, [lr, #128]
; LE-NEXT:    mov r0, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    vmov s18, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #256
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    ldr r1, [sp, #52] @ 4-byte Reload
; LE-NEXT:    ldrh r0, [lr, #136]
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    vmov.32 d11[0], r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    vmov s16, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    ldr r0, [sp, #56] @ 4-byte Reload
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d11[1], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d13[1], r5
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    ldr r2, [sp, #8] @ 4-byte Reload
; LE-NEXT:    vmov.32 d12[1], r9
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    vmov r0, s19
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #232
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.32 d13[1], r8
; LE-NEXT:    vmov.32 d12[1], r4
; LE-NEXT:    vmov.32 d10[1], r6
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #216
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d17[1], r2
; LE-NEXT:    ldr r2, [sp, #12] @ 4-byte Reload
; LE-NEXT:    vmov.32 d14[1], r1
; LE-NEXT:    add r1, r11, #192
; LE-NEXT:    vmov.32 d16[1], r2
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    vst1.64 {d10, d11}, [r1:128]!
; LE-NEXT:    vst1.64 {d14, d15}, [r1:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #16
; LE-NEXT:    vst1.64 {d16, d17}, [r1:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r1:128]
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    str r0, [sp, #52] @ 4-byte Spill
; LE-NEXT:    vmov r0, s17
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #76] @ 4-byte Reload
; LE-NEXT:    mov r10, r0
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #100] @ 4-byte Reload
; LE-NEXT:    mov r4, r0
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #104] @ 4-byte Reload
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #108] @ 4-byte Reload
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #112] @ 4-byte Reload
; LE-NEXT:    mov r6, r0
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r6
; LE-NEXT:    str r1, [sp, #112] @ 4-byte Spill
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r5
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r7
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r4
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov s0, r10
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vldr s0, [sp, #116] @ 4-byte Reload
; LE-NEXT:    mov r6, r0
; LE-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; LE-NEXT:    vmov.32 d11[1], r5
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    vmov.32 d13[1], r4
; LE-NEXT:    bl llrintf
; LE-NEXT:    vldr s0, [sp, #120] @ 4-byte Reload
; LE-NEXT:    mov r4, r0
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d9[1], r8
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #136] @ 4-byte Reload
; LE-NEXT:    vmov.32 d10[0], r4
; LE-NEXT:    vmov r7, s0
; LE-NEXT:    vmov s0, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    add r10, r11, #128
; LE-NEXT:    mov r0, r7
; LE-NEXT:    vmov.32 d10[1], r5
; LE-NEXT:    vmov.32 d12[1], r1
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vmov.32 d13[0], r6
; LE-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; LE-NEXT:    vldr s0, [sp, #156] @ 4-byte Reload
; LE-NEXT:    vmov r4, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #160] @ 4-byte Reload
; LE-NEXT:    mov r5, r0
; LE-NEXT:    ldr r0, [sp, #52] @ 4-byte Reload
; LE-NEXT:    vmov.32 d8[1], r9
; LE-NEXT:    vmov r7, s0
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vldr s0, [sp, #176] @ 4-byte Reload
; LE-NEXT:    vmov s20, r0
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    vmov s18, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    vmov s16, r5
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    mov r5, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    vmov s18, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d11[1], r5
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r4
; LE-NEXT:    mov r5, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #196] @ 4-byte Reload
; LE-NEXT:    mov r7, r0
; LE-NEXT:    vmov.32 d10[1], r6
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vldr s0, [sp, #192] @ 4-byte Reload
; LE-NEXT:    vmov s16, r0
; LE-NEXT:    vmov.32 d13[1], r5
; LE-NEXT:    vmov r6, s0
; LE-NEXT:    vldr s0, [sp, #200] @ 4-byte Reload
; LE-NEXT:    vmov r0, s0
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    vmov s18, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    add lr, sp, #200
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov s16, r7
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    mov r0, r6
; LE-NEXT:    mov r5, r1
; LE-NEXT:    bl __aeabi_h2f
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    vmov s18, r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #200
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    ldr r0, [sp, #112] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vmov.32 d19[1], r4
; LE-NEXT:    vmov.32 d18[1], r0
; LE-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #216
; LE-NEXT:    vmov.32 d17[1], r0
; LE-NEXT:    add r0, r11, #64
; LE-NEXT:    vmov.32 d16[1], r8
; LE-NEXT:    vorr q10, q8, q8
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #232
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vmov.32 d14[1], r1
; LE-NEXT:    vst1.64 {d16, d17}, [r10:128]
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vst1.64 {d10, d11}, [r0:128]
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEXT:    vst1.64 {d14, d15}, [r11:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]
; LE-NEXT:    add sp, sp, #248
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v32i64_v32f16:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #248
; LE-NEON-NEXT:    sub sp, sp, #248
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r11, r0
; LE-NEON-NEXT:    vstr s15, [sp, #176] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.f32 s19, s14
; LE-NEON-NEXT:    ldrh r0, [lr, #132]
; LE-NEON-NEXT:    vmov.f32 s17, s11
; LE-NEON-NEXT:    vstr s13, [sp, #196] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s12, [sp, #112] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s10, [sp, #136] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s9, [sp, #160] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s8, [sp, #200] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s7, [sp, #100] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s6, [sp, #116] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s5, [sp, #76] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s4, [sp, #120] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s3, [sp, #156] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s2, [sp, #192] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s1, [sp, #104] @ 4-byte Spill
; LE-NEON-NEXT:    vstr s0, [sp, #108] @ 4-byte Spill
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    str r0, [sp, #52] @ 4-byte Spill
; LE-NEON-NEXT:    str r1, [sp, #56] @ 4-byte Spill
; LE-NEON-NEXT:    ldrh r0, [lr, #108]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    str r0, [sp, #32] @ 4-byte Spill
; LE-NEON-NEXT:    ldrh r0, [lr, #96]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    ldrh r0, [lr, #100]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    ldrh r0, [lr, #156]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    ldrh r0, [lr, #152]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    ldrh r0, [lr, #148]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r4
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r6
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r7
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r5
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    ldrh r0, [lr, #144]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r10, r0
; LE-NEON-NEXT:    vmov.32 d11[1], r7
; LE-NEON-NEXT:    ldrh r0, [lr, #104]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.32 d10[1], r5
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    ldrh r0, [lr, #124]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    ldrh r0, [lr, #120]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.32 d14[1], r4
; LE-NEON-NEXT:    add lr, sp, #16
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    ldrh r0, [lr, #116]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    vorr q5, q6, q6
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    ldrh r0, [lr, #112]
; LE-NEON-NEXT:    vmov.32 d11[1], r8
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r4
; LE-NEON-NEXT:    str r1, [sp, #12] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r6
; LE-NEON-NEXT:    add lr, sp, #216
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r5
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r7
; LE-NEON-NEXT:    add lr, sp, #232
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r10
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    ldrh r0, [lr, #140]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    ldr r0, [sp, #32] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d10[1], r5
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    vmov s16, r0
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    ldrh r1, [lr, #128]
; LE-NEON-NEXT:    mov r0, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    vmov s18, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #256
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    ldr r1, [sp, #52] @ 4-byte Reload
; LE-NEON-NEXT:    ldrh r0, [lr, #136]
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    vmov.32 d11[0], r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    vmov s16, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #56] @ 4-byte Reload
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d11[1], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d13[1], r5
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    ldr r2, [sp, #8] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d12[1], r9
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    vmov r0, s19
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #232
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d13[1], r8
; LE-NEON-NEXT:    vmov.32 d12[1], r4
; LE-NEON-NEXT:    vmov.32 d10[1], r6
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #216
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d17[1], r2
; LE-NEON-NEXT:    ldr r2, [sp, #12] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d14[1], r1
; LE-NEON-NEXT:    add r1, r11, #192
; LE-NEON-NEXT:    vmov.32 d16[1], r2
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r1:128]!
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r1:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #16
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r1:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r1:128]
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    str r0, [sp, #52] @ 4-byte Spill
; LE-NEON-NEXT:    vmov r0, s17
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #76] @ 4-byte Reload
; LE-NEON-NEXT:    mov r10, r0
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #100] @ 4-byte Reload
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #104] @ 4-byte Reload
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #108] @ 4-byte Reload
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #112] @ 4-byte Reload
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r6
; LE-NEON-NEXT:    str r1, [sp, #112] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r5
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r7
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r4
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov s0, r10
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vldr s0, [sp, #116] @ 4-byte Reload
; LE-NEON-NEXT:    mov r6, r0
; LE-NEON-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d11[1], r5
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    vmov.32 d13[1], r4
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vldr s0, [sp, #120] @ 4-byte Reload
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d9[1], r8
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #136] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d10[0], r4
; LE-NEON-NEXT:    vmov r7, s0
; LE-NEON-NEXT:    vmov s0, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    add r10, r11, #128
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    vmov.32 d10[1], r5
; LE-NEON-NEXT:    vmov.32 d12[1], r1
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vmov.32 d13[0], r6
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; LE-NEON-NEXT:    vldr s0, [sp, #156] @ 4-byte Reload
; LE-NEON-NEXT:    vmov r4, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #160] @ 4-byte Reload
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    ldr r0, [sp, #52] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d8[1], r9
; LE-NEON-NEXT:    vmov r7, s0
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vldr s0, [sp, #176] @ 4-byte Reload
; LE-NEON-NEXT:    vmov s20, r0
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    vmov s18, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    vmov s16, r5
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    vmov s18, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d11[1], r5
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r4
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #196] @ 4-byte Reload
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    vmov.32 d10[1], r6
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vldr s0, [sp, #192] @ 4-byte Reload
; LE-NEON-NEXT:    vmov s16, r0
; LE-NEON-NEXT:    vmov.32 d13[1], r5
; LE-NEON-NEXT:    vmov r6, s0
; LE-NEON-NEXT:    vldr s0, [sp, #200] @ 4-byte Reload
; LE-NEON-NEXT:    vmov r0, s0
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    vmov s18, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    add lr, sp, #200
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov s16, r7
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    bl __aeabi_h2f
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    vmov s18, r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #200
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #112] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vmov.32 d19[1], r4
; LE-NEON-NEXT:    vmov.32 d18[1], r0
; LE-NEON-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #216
; LE-NEON-NEXT:    vmov.32 d17[1], r0
; LE-NEON-NEXT:    add r0, r11, #64
; LE-NEON-NEXT:    vmov.32 d16[1], r8
; LE-NEON-NEXT:    vorr q10, q8, q8
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #232
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vmov.32 d14[1], r1
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r0:128]
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]
; LE-NEON-NEXT:    add sp, sp, #248
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v32i64_v32f16:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #176
; BE-NEXT:    sub sp, sp, #176
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r10, r0
; BE-NEXT:    vstr s15, [sp, #112] @ 4-byte Spill
; BE-NEXT:    ldrh r0, [lr, #74]
; BE-NEXT:    vstr s14, [sp, #80] @ 4-byte Spill
; BE-NEXT:    vstr s13, [sp, #48] @ 4-byte Spill
; BE-NEXT:    vstr s12, [sp, #148] @ 4-byte Spill
; BE-NEXT:    vstr s11, [sp, #76] @ 4-byte Spill
; BE-NEXT:    vstr s10, [sp, #152] @ 4-byte Spill
; BE-NEXT:    vstr s9, [sp, #156] @ 4-byte Spill
; BE-NEXT:    vstr s8, [sp, #120] @ 4-byte Spill
; BE-NEXT:    vstr s7, [sp, #136] @ 4-byte Spill
; BE-NEXT:    vstr s6, [sp, #132] @ 4-byte Spill
; BE-NEXT:    vstr s5, [sp, #144] @ 4-byte Spill
; BE-NEXT:    vstr s4, [sp, #64] @ 4-byte Spill
; BE-NEXT:    vstr s3, [sp, #104] @ 4-byte Spill
; BE-NEXT:    vstr s2, [sp, #88] @ 4-byte Spill
; BE-NEXT:    vstr s1, [sp, #56] @ 4-byte Spill
; BE-NEXT:    vstr s0, [sp, #96] @ 4-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r9, r0
; BE-NEXT:    mov r8, r1
; BE-NEXT:    ldrh r0, [lr, #62]
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r6, r0
; BE-NEXT:    ldrh r0, [lr, #58]
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r7, r0
; BE-NEXT:    ldrh r0, [lr, #66]
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r4, r0
; BE-NEXT:    ldrh r0, [lr, #54]
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r5, r0
; BE-NEXT:    ldrh r0, [lr, #50]
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r5
; BE-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEXT:    vstr d16, [sp, #168] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r4
; BE-NEXT:    str r1, [sp, #40] @ 4-byte Spill
; BE-NEXT:    vstr d16, [sp, #160] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r7
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vstr d16, [sp, #32] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov s0, r6
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vstr d16, [sp, #24] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    mov r6, r1
; BE-NEXT:    ldrh r0, [lr, #34]
; BE-NEXT:    vstr d16, [sp, #16] @ 8-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d8[0], r9
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    ldrh r1, [lr, #38]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.32 d8[1], r8
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vstr d8, [sp, #8] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    ldrh r1, [lr, #26]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d12[1], r7
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    ldrh r1, [lr, #30]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d13[1], r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    ldrh r1, [lr, #78]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d9[1], r7
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldrh r1, [lr, #82]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d15[1], r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    ldrh r1, [lr, #86]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d14[1], r7
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    ldrh r1, [lr, #70]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d8[1], r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    ldrh r1, [lr, #46]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d10[1], r7
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d25[0], r0
; BE-NEXT:    ldr r0, [sp, #40] @ 4-byte Reload
; BE-NEXT:    ldr r2, [sp, #44] @ 4-byte Reload
; BE-NEXT:    vldr d24, [sp, #160] @ 8-byte Reload
; BE-NEXT:    vldr s0, [sp, #48] @ 4-byte Reload
; BE-NEXT:    vmov.32 d24[1], r0
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    vldr d26, [sp, #16] @ 8-byte Reload
; BE-NEXT:    vstr d24, [sp, #160] @ 8-byte Spill
; BE-NEXT:    vldr d24, [sp, #8] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d23, d14
; BE-NEXT:    vldr d29, [sp, #24] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d22, d24
; BE-NEXT:    vldr d24, [sp, #168] @ 8-byte Reload
; BE-NEXT:    vmov.32 d26[1], r6
; BE-NEXT:    vldr d28, [sp, #32] @ 8-byte Reload
; BE-NEXT:    vmov.32 d25[1], r1
; BE-NEXT:    add r1, r10, #192
; BE-NEXT:    vmov.32 d29[1], r11
; BE-NEXT:    add r11, r10, #128
; BE-NEXT:    vmov.32 d24[1], r2
; BE-NEXT:    vmov.32 d11[1], r5
; BE-NEXT:    vmov.32 d28[1], r4
; BE-NEXT:    vrev64.32 d27, d26
; BE-NEXT:    vstr d24, [sp, #168] @ 8-byte Spill
; BE-NEXT:    vstr d25, [sp, #48] @ 8-byte Spill
; BE-NEXT:    vrev64.32 d25, d11
; BE-NEXT:    vrev64.32 d26, d29
; BE-NEXT:    vrev64.32 d24, d28
; BE-NEXT:    vst1.64 {d26, d27}, [r1:128]!
; BE-NEXT:    vst1.64 {d24, d25}, [r1:128]!
; BE-NEXT:    vrev64.32 d21, d10
; BE-NEXT:    vrev64.32 d19, d15
; BE-NEXT:    vrev64.32 d17, d13
; BE-NEXT:    vrev64.32 d20, d8
; BE-NEXT:    vst1.64 {d22, d23}, [r1:128]!
; BE-NEXT:    vrev64.32 d18, d9
; BE-NEXT:    vrev64.32 d16, d12
; BE-NEXT:    vst1.64 {d20, d21}, [r1:128]
; BE-NEXT:    vst1.64 {d18, d19}, [r11:128]!
; BE-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #256
; BE-NEXT:    mov r7, r0
; BE-NEXT:    mov r8, r1
; BE-NEXT:    ldrh r0, [lr, #42]
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #56] @ 4-byte Reload
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov s0, r4
; BE-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vldr s0, [sp, #64] @ 4-byte Reload
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov r2, s0
; BE-NEXT:    vldr s0, [sp, #80] @ 4-byte Reload
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vmov r4, s0
; BE-NEXT:    vldr s0, [sp, #76] @ 4-byte Reload
; BE-NEXT:    vstr d16, [sp, #80] @ 8-byte Spill
; BE-NEXT:    vmov r5, s0
; BE-NEXT:    mov r0, r2
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    mov r9, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov s0, r0
; BE-NEXT:    vmov.32 d8[0], r7
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    mov r6, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #88] @ 4-byte Reload
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vmov.32 d8[1], r8
; BE-NEXT:    vmov r7, s0
; BE-NEXT:    vldr s0, [sp, #96] @ 4-byte Reload
; BE-NEXT:    vstr d8, [sp, #88] @ 8-byte Spill
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #104] @ 4-byte Reload
; BE-NEXT:    vmov s19, r0
; BE-NEXT:    vmov.32 d12[1], r6
; BE-NEXT:    vmov r5, s0
; BE-NEXT:    vldr s0, [sp, #112] @ 4-byte Reload
; BE-NEXT:    vstr d12, [sp, #104] @ 8-byte Spill
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s19
; BE-NEXT:    vmov s30, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s30
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    vmov s17, r4
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    mov r4, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vmov s30, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s30
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; BE-NEXT:    vmov.32 d12[1], r4
; BE-NEXT:    vstr d16, [sp, #64] @ 8-byte Spill
; BE-NEXT:    vstr d12, [sp, #112] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    mov r0, r7
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d9[1], r6
; BE-NEXT:    vstr d16, [sp, #56] @ 8-byte Spill
; BE-NEXT:    vstr d9, [sp, #96] @ 8-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #120] @ 4-byte Reload
; BE-NEXT:    mov r5, r0
; BE-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; BE-NEXT:    vmov r7, s0
; BE-NEXT:    vldr s0, [sp, #132] @ 4-byte Reload
; BE-NEXT:    vmov.32 d10[1], r0
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    vstr d10, [sp, #120] @ 8-byte Spill
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #136] @ 4-byte Reload
; BE-NEXT:    vmov s26, r0
; BE-NEXT:    vmov.32 d11[1], r9
; BE-NEXT:    vmov r4, s0
; BE-NEXT:    vldr s0, [sp, #144] @ 4-byte Reload
; BE-NEXT:    vstr d11, [sp, #136] @ 8-byte Spill
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s26
; BE-NEXT:    vmov s22, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s22
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vmov s24, r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    mov r5, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s24
; BE-NEXT:    vmov s22, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s22
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r0, r7
; BE-NEXT:    mov r5, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #148] @ 4-byte Reload
; BE-NEXT:    mov r7, r0
; BE-NEXT:    vmov.32 d13[1], r6
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vldr s0, [sp, #152] @ 4-byte Reload
; BE-NEXT:    vmov s20, r0
; BE-NEXT:    vmov.32 d11[1], r5
; BE-NEXT:    vmov r4, s0
; BE-NEXT:    vldr s0, [sp, #156] @ 4-byte Reload
; BE-NEXT:    vmov r0, s0
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s20
; BE-NEXT:    vmov s16, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vmov s18, r7
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    mov r5, r1
; BE-NEXT:    bl __aeabi_h2f
; BE-NEXT:    vmov.f32 s0, s18
; BE-NEXT:    vmov s16, r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    vmov.32 d15[1], r5
; BE-NEXT:    bl llrintf
; BE-NEXT:    vldr d16, [sp, #160] @ 8-byte Reload
; BE-NEXT:    vldr d20, [sp, #136] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d19, d14
; BE-NEXT:    vrev64.32 d31, d16
; BE-NEXT:    vldr d16, [sp, #168] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d18, d20
; BE-NEXT:    vldr d20, [sp, #120] @ 8-byte Reload
; BE-NEXT:    vldr d22, [sp, #96] @ 8-byte Reload
; BE-NEXT:    vmov.32 d28[0], r0
; BE-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; BE-NEXT:    vrev64.32 d21, d20
; BE-NEXT:    vrev64.32 d30, d16
; BE-NEXT:    vldr d16, [sp, #48] @ 8-byte Reload
; BE-NEXT:    vldr d23, [sp, #64] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d20, d22
; BE-NEXT:    vldr d22, [sp, #112] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d1, d16
; BE-NEXT:    vldr d16, [sp, #80] @ 8-byte Reload
; BE-NEXT:    vmov.32 d23[1], r0
; BE-NEXT:    add r0, r10, #64
; BE-NEXT:    vrev64.32 d25, d22
; BE-NEXT:    vldr d22, [sp, #104] @ 8-byte Reload
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    vmov.32 d28[1], r1
; BE-NEXT:    vldr d29, [sp, #56] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d3, d15
; BE-NEXT:    vrev64.32 d24, d22
; BE-NEXT:    vldr d22, [sp, #88] @ 8-byte Reload
; BE-NEXT:    vmov.32 d10[1], r6
; BE-NEXT:    vrev64.32 d5, d23
; BE-NEXT:    vst1.64 {d0, d1}, [r11:128]!
; BE-NEXT:    vrev64.32 d2, d9
; BE-NEXT:    vrev64.32 d27, d22
; BE-NEXT:    vmov.32 d29[1], r8
; BE-NEXT:    vrev64.32 d4, d28
; BE-NEXT:    vst1.64 {d30, d31}, [r11:128]
; BE-NEXT:    vst1.64 {d2, d3}, [r0:128]!
; BE-NEXT:    vmov.32 d12[1], r9
; BE-NEXT:    vrev64.32 d26, d10
; BE-NEXT:    vst1.64 {d4, d5}, [r0:128]!
; BE-NEXT:    vrev64.32 d23, d29
; BE-NEXT:    vst1.64 {d26, d27}, [r0:128]!
; BE-NEXT:    vrev64.32 d22, d12
; BE-NEXT:    vst1.64 {d24, d25}, [r0:128]
; BE-NEXT:    vst1.64 {d20, d21}, [r10:128]!
; BE-NEXT:    vst1.64 {d22, d23}, [r10:128]!
; BE-NEXT:    vrev64.32 d17, d11
; BE-NEXT:    vrev64.32 d16, d13
; BE-NEXT:    vst1.64 {d18, d19}, [r10:128]!
; BE-NEXT:    vst1.64 {d16, d17}, [r10:128]
; BE-NEXT:    add sp, sp, #176
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v32i64_v32f16:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #176
; BE-NEON-NEXT:    sub sp, sp, #176
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r10, r0
; BE-NEON-NEXT:    vstr s15, [sp, #112] @ 4-byte Spill
; BE-NEON-NEXT:    ldrh r0, [lr, #74]
; BE-NEON-NEXT:    vstr s14, [sp, #80] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s13, [sp, #48] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s12, [sp, #148] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s11, [sp, #76] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s10, [sp, #152] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s9, [sp, #156] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s8, [sp, #120] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s7, [sp, #136] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s6, [sp, #132] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s5, [sp, #144] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s4, [sp, #64] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s3, [sp, #104] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s2, [sp, #88] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s1, [sp, #56] @ 4-byte Spill
; BE-NEON-NEXT:    vstr s0, [sp, #96] @ 4-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r9, r0
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    ldrh r0, [lr, #62]
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r6, r0
; BE-NEON-NEXT:    ldrh r0, [lr, #58]
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    ldrh r0, [lr, #66]
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    ldrh r0, [lr, #54]
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r5, r0
; BE-NEON-NEXT:    ldrh r0, [lr, #50]
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r5
; BE-NEON-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEON-NEXT:    vstr d16, [sp, #168] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r4
; BE-NEON-NEXT:    str r1, [sp, #40] @ 4-byte Spill
; BE-NEON-NEXT:    vstr d16, [sp, #160] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r7
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vstr d16, [sp, #32] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov s0, r6
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vstr d16, [sp, #24] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    ldrh r0, [lr, #34]
; BE-NEON-NEXT:    vstr d16, [sp, #16] @ 8-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d8[0], r9
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #38]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.32 d8[1], r8
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vstr d8, [sp, #8] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #26]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d12[1], r7
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #30]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d13[1], r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #78]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d9[1], r7
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #82]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d15[1], r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #86]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d14[1], r7
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #70]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d8[1], r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    ldrh r1, [lr, #46]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d10[1], r7
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d25[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #40] @ 4-byte Reload
; BE-NEON-NEXT:    ldr r2, [sp, #44] @ 4-byte Reload
; BE-NEON-NEXT:    vldr d24, [sp, #160] @ 8-byte Reload
; BE-NEON-NEXT:    vldr s0, [sp, #48] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d24[1], r0
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    vldr d26, [sp, #16] @ 8-byte Reload
; BE-NEON-NEXT:    vstr d24, [sp, #160] @ 8-byte Spill
; BE-NEON-NEXT:    vldr d24, [sp, #8] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d23, d14
; BE-NEON-NEXT:    vldr d29, [sp, #24] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d22, d24
; BE-NEON-NEXT:    vldr d24, [sp, #168] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d26[1], r6
; BE-NEON-NEXT:    vldr d28, [sp, #32] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d25[1], r1
; BE-NEON-NEXT:    add r1, r10, #192
; BE-NEON-NEXT:    vmov.32 d29[1], r11
; BE-NEON-NEXT:    add r11, r10, #128
; BE-NEON-NEXT:    vmov.32 d24[1], r2
; BE-NEON-NEXT:    vmov.32 d11[1], r5
; BE-NEON-NEXT:    vmov.32 d28[1], r4
; BE-NEON-NEXT:    vrev64.32 d27, d26
; BE-NEON-NEXT:    vstr d24, [sp, #168] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d25, [sp, #48] @ 8-byte Spill
; BE-NEON-NEXT:    vrev64.32 d25, d11
; BE-NEON-NEXT:    vrev64.32 d26, d29
; BE-NEON-NEXT:    vrev64.32 d24, d28
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r1:128]!
; BE-NEON-NEXT:    vst1.64 {d24, d25}, [r1:128]!
; BE-NEON-NEXT:    vrev64.32 d21, d10
; BE-NEON-NEXT:    vrev64.32 d19, d15
; BE-NEON-NEXT:    vrev64.32 d17, d13
; BE-NEON-NEXT:    vrev64.32 d20, d8
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r1:128]!
; BE-NEON-NEXT:    vrev64.32 d18, d9
; BE-NEON-NEXT:    vrev64.32 d16, d12
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r1:128]
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r11:128]!
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #256
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    ldrh r0, [lr, #42]
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #56] @ 4-byte Reload
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov s0, r4
; BE-NEON-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vldr s0, [sp, #64] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov r2, s0
; BE-NEON-NEXT:    vldr s0, [sp, #80] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vmov r4, s0
; BE-NEON-NEXT:    vldr s0, [sp, #76] @ 4-byte Reload
; BE-NEON-NEXT:    vstr d16, [sp, #80] @ 8-byte Spill
; BE-NEON-NEXT:    vmov r5, s0
; BE-NEON-NEXT:    mov r0, r2
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov s0, r0
; BE-NEON-NEXT:    vmov.32 d8[0], r7
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #88] @ 4-byte Reload
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vmov.32 d8[1], r8
; BE-NEON-NEXT:    vmov r7, s0
; BE-NEON-NEXT:    vldr s0, [sp, #96] @ 4-byte Reload
; BE-NEON-NEXT:    vstr d8, [sp, #88] @ 8-byte Spill
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #104] @ 4-byte Reload
; BE-NEON-NEXT:    vmov s19, r0
; BE-NEON-NEXT:    vmov.32 d12[1], r6
; BE-NEON-NEXT:    vmov r5, s0
; BE-NEON-NEXT:    vldr s0, [sp, #112] @ 4-byte Reload
; BE-NEON-NEXT:    vstr d12, [sp, #104] @ 8-byte Spill
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s19
; BE-NEON-NEXT:    vmov s30, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s30
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    vmov s17, r4
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vmov s30, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s30
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d12[1], r4
; BE-NEON-NEXT:    vstr d16, [sp, #64] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d12, [sp, #112] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d9[1], r6
; BE-NEON-NEXT:    vstr d16, [sp, #56] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #96] @ 8-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #120] @ 4-byte Reload
; BE-NEON-NEXT:    mov r5, r0
; BE-NEON-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; BE-NEON-NEXT:    vmov r7, s0
; BE-NEON-NEXT:    vldr s0, [sp, #132] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[1], r0
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    vstr d10, [sp, #120] @ 8-byte Spill
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #136] @ 4-byte Reload
; BE-NEON-NEXT:    vmov s26, r0
; BE-NEON-NEXT:    vmov.32 d11[1], r9
; BE-NEON-NEXT:    vmov r4, s0
; BE-NEON-NEXT:    vldr s0, [sp, #144] @ 4-byte Reload
; BE-NEON-NEXT:    vstr d11, [sp, #136] @ 8-byte Spill
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s26
; BE-NEON-NEXT:    vmov s22, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s22
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vmov s24, r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s24
; BE-NEON-NEXT:    vmov s22, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s22
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #148] @ 4-byte Reload
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    vmov.32 d13[1], r6
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vldr s0, [sp, #152] @ 4-byte Reload
; BE-NEON-NEXT:    vmov s20, r0
; BE-NEON-NEXT:    vmov.32 d11[1], r5
; BE-NEON-NEXT:    vmov r4, s0
; BE-NEON-NEXT:    vldr s0, [sp, #156] @ 4-byte Reload
; BE-NEON-NEXT:    vmov r0, s0
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s20
; BE-NEON-NEXT:    vmov s16, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vmov s18, r7
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    bl __aeabi_h2f
; BE-NEON-NEXT:    vmov.f32 s0, s18
; BE-NEON-NEXT:    vmov s16, r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r5
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vldr d16, [sp, #160] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d20, [sp, #136] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d19, d14
; BE-NEON-NEXT:    vrev64.32 d31, d16
; BE-NEON-NEXT:    vldr d16, [sp, #168] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d18, d20
; BE-NEON-NEXT:    vldr d20, [sp, #120] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d22, [sp, #96] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d28[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; BE-NEON-NEXT:    vrev64.32 d21, d20
; BE-NEON-NEXT:    vrev64.32 d30, d16
; BE-NEON-NEXT:    vldr d16, [sp, #48] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d23, [sp, #64] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d20, d22
; BE-NEON-NEXT:    vldr d22, [sp, #112] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d1, d16
; BE-NEON-NEXT:    vldr d16, [sp, #80] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d23[1], r0
; BE-NEON-NEXT:    add r0, r10, #64
; BE-NEON-NEXT:    vrev64.32 d25, d22
; BE-NEON-NEXT:    vldr d22, [sp, #104] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    vmov.32 d28[1], r1
; BE-NEON-NEXT:    vldr d29, [sp, #56] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d3, d15
; BE-NEON-NEXT:    vrev64.32 d24, d22
; BE-NEON-NEXT:    vldr d22, [sp, #88] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[1], r6
; BE-NEON-NEXT:    vrev64.32 d5, d23
; BE-NEON-NEXT:    vst1.64 {d0, d1}, [r11:128]!
; BE-NEON-NEXT:    vrev64.32 d2, d9
; BE-NEON-NEXT:    vrev64.32 d27, d22
; BE-NEON-NEXT:    vmov.32 d29[1], r8
; BE-NEON-NEXT:    vrev64.32 d4, d28
; BE-NEON-NEXT:    vst1.64 {d30, d31}, [r11:128]
; BE-NEON-NEXT:    vst1.64 {d2, d3}, [r0:128]!
; BE-NEON-NEXT:    vmov.32 d12[1], r9
; BE-NEON-NEXT:    vrev64.32 d26, d10
; BE-NEON-NEXT:    vst1.64 {d4, d5}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d23, d29
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d22, d12
; BE-NEON-NEXT:    vst1.64 {d24, d25}, [r0:128]
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r10:128]!
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r10:128]!
; BE-NEON-NEXT:    vrev64.32 d17, d11
; BE-NEON-NEXT:    vrev64.32 d16, d13
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r10:128]!
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]
; BE-NEON-NEXT:    add sp, sp, #176
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <32 x i64> @llvm.llrint.v32i64.v32f16(<32 x half> %x)
  ret <32 x i64> %a
}
declare <32 x i64> @llvm.llrint.v32i64.v32f16(<32 x half>)

define <1 x i64> @llrint_v1i64_v1f32(<1 x float> %x) {
; LE-LABEL: llrint_v1i64_v1f32:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r11, lr}
; LE-NEXT:    push {r11, lr}
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d0[0], r0
; LE-NEXT:    vmov.32 d0[1], r1
; LE-NEXT:    pop {r11, pc}
;
; LE-NEON-LABEL: llrint_v1i64_v1f32:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r11, lr}
; LE-NEON-NEXT:    push {r11, lr}
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d0[0], r0
; LE-NEON-NEXT:    vmov.32 d0[1], r1
; LE-NEON-NEXT:    pop {r11, pc}
;
; BE-LABEL: llrint_v1i64_v1f32:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r11, lr}
; BE-NEXT:    push {r11, lr}
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    pop {r11, pc}
;
; BE-NEON-LABEL: llrint_v1i64_v1f32:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r11, lr}
; BE-NEON-NEXT:    push {r11, lr}
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    pop {r11, pc}
  %a = call <1 x i64> @llvm.llrint.v1i64.v1f32(<1 x float> %x)
  ret <1 x i64> %a
}
declare <1 x i64> @llvm.llrint.v1i64.v1f32(<1 x float>)

define <2 x i64> @llrint_v2i64_v2f32(<2 x float> %x) {
; LE-LABEL: llrint_v2i64_v2f32:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, lr}
; LE-NEXT:    push {r4, lr}
; LE-NEXT:    .vsave {d10, d11}
; LE-NEXT:    vpush {d10, d11}
; LE-NEXT:    .vsave {d8}
; LE-NEXT:    vpush {d8}
; LE-NEXT:    vmov.f64 d8, d0
; LE-NEXT:    vmov.f32 s0, s17
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    vmov.32 d11[1], r4
; LE-NEXT:    vmov.32 d10[1], r1
; LE-NEXT:    vorr q0, q5, q5
; LE-NEXT:    vpop {d8}
; LE-NEXT:    vpop {d10, d11}
; LE-NEXT:    pop {r4, pc}
;
; LE-NEON-LABEL: llrint_v2i64_v2f32:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, lr}
; LE-NEON-NEXT:    push {r4, lr}
; LE-NEON-NEXT:    .vsave {d10, d11}
; LE-NEON-NEXT:    vpush {d10, d11}
; LE-NEON-NEXT:    .vsave {d8}
; LE-NEON-NEXT:    vpush {d8}
; LE-NEON-NEXT:    vmov.f64 d8, d0
; LE-NEON-NEXT:    vmov.f32 s0, s17
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    vmov.32 d11[1], r4
; LE-NEON-NEXT:    vmov.32 d10[1], r1
; LE-NEON-NEXT:    vorr q0, q5, q5
; LE-NEON-NEXT:    vpop {d8}
; LE-NEON-NEXT:    vpop {d10, d11}
; LE-NEON-NEXT:    pop {r4, pc}
;
; BE-LABEL: llrint_v2i64_v2f32:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, lr}
; BE-NEXT:    push {r4, lr}
; BE-NEXT:    .vsave {d10, d11}
; BE-NEXT:    vpush {d10, d11}
; BE-NEXT:    .vsave {d8}
; BE-NEXT:    vpush {d8}
; BE-NEXT:    vrev64.32 d8, d0
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vrev64.32 q0, q5
; BE-NEXT:    vpop {d8}
; BE-NEXT:    vpop {d10, d11}
; BE-NEXT:    pop {r4, pc}
;
; BE-NEON-LABEL: llrint_v2i64_v2f32:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, lr}
; BE-NEON-NEXT:    push {r4, lr}
; BE-NEON-NEXT:    .vsave {d10, d11}
; BE-NEON-NEXT:    vpush {d10, d11}
; BE-NEON-NEXT:    .vsave {d8}
; BE-NEON-NEXT:    vpush {d8}
; BE-NEON-NEXT:    vrev64.32 d8, d0
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vrev64.32 q0, q5
; BE-NEON-NEXT:    vpop {d8}
; BE-NEON-NEXT:    vpop {d10, d11}
; BE-NEON-NEXT:    pop {r4, pc}
  %a = call <2 x i64> @llvm.llrint.v2i64.v2f32(<2 x float> %x)
  ret <2 x i64> %a
}
declare <2 x i64> @llvm.llrint.v2i64.v2f32(<2 x float>)

define <4 x i64> @llrint_v4i64_v4f32(<4 x float> %x) {
; LE-LABEL: llrint_v4i64_v4f32:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, lr}
; LE-NEXT:    push {r4, r5, r6, lr}
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13}
; LE-NEXT:    vorr q5, q0, q0
; LE-NEXT:    vmov.f32 s0, s23
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s21
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s22
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d13[1], r6
; LE-NEXT:    vmov.32 d9[1], r4
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q0, q6, q6
; LE-NEXT:    vorr q1, q4, q4
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13}
; LE-NEXT:    pop {r4, r5, r6, pc}
;
; LE-NEON-LABEL: llrint_v4i64_v4f32:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, lr}
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13}
; LE-NEON-NEXT:    vorr q5, q0, q0
; LE-NEON-NEXT:    vmov.f32 s0, s23
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s21
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s22
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d13[1], r6
; LE-NEON-NEXT:    vmov.32 d9[1], r4
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q0, q6, q6
; LE-NEON-NEXT:    vorr q1, q4, q4
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13}
; LE-NEON-NEXT:    pop {r4, r5, r6, pc}
;
; BE-LABEL: llrint_v4i64_v4f32:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, lr}
; BE-NEXT:    push {r4, r5, r6, lr}
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13}
; BE-NEXT:    vrev64.32 d8, d1
; BE-NEXT:    vrev64.32 d9, d0
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s18
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s19
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vmov.32 d13[1], r6
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d12[1], r5
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vrev64.32 q0, q6
; BE-NEXT:    vrev64.32 q1, q5
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13}
; BE-NEXT:    pop {r4, r5, r6, pc}
;
; BE-NEON-LABEL: llrint_v4i64_v4f32:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13}
; BE-NEON-NEXT:    vrev64.32 d8, d1
; BE-NEON-NEXT:    vrev64.32 d9, d0
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s18
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s19
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vmov.32 d13[1], r6
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d12[1], r5
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vrev64.32 q0, q6
; BE-NEON-NEXT:    vrev64.32 q1, q5
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13}
; BE-NEON-NEXT:    pop {r4, r5, r6, pc}
  %a = call <4 x i64> @llvm.llrint.v4i64.v4f32(<4 x float> %x)
  ret <4 x i64> %a
}
declare <4 x i64> @llvm.llrint.v4i64.v4f32(<4 x float>)

define <8 x i64> @llrint_v8i64_v8f32(<8 x float> %x) {
; LE-LABEL: llrint_v8i64_v8f32:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #40
; LE-NEXT:    sub sp, sp, #40
; LE-NEXT:    vorr q6, q1, q1
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vorr q7, q0, q0
; LE-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; LE-NEXT:    vmov.f32 s0, s27
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s24
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s25
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vorr q6, q7, q7
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    vmov.f32 s0, s26
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s27
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s24
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s1
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s2
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d13[1], r6
; LE-NEXT:    vmov.32 d15[1], r4
; LE-NEXT:    vmov.32 d11[1], r10
; LE-NEXT:    vmov.32 d9[1], r8
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    vmov.32 d14[1], r7
; LE-NEXT:    vorr q0, q6, q6
; LE-NEXT:    vmov.32 d10[1], r9
; LE-NEXT:    vorr q1, q7, q7
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q2, q5, q5
; LE-NEXT:    vorr q3, q4, q4
; LE-NEXT:    add sp, sp, #40
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; LE-NEON-LABEL: llrint_v8i64_v8f32:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #40
; LE-NEON-NEXT:    sub sp, sp, #40
; LE-NEON-NEXT:    vorr q6, q1, q1
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vorr q7, q0, q0
; LE-NEON-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; LE-NEON-NEXT:    vmov.f32 s0, s27
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s24
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s25
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vorr q6, q7, q7
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    vmov.f32 s0, s26
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s27
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s24
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s1
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s2
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d13[1], r6
; LE-NEON-NEXT:    vmov.32 d15[1], r4
; LE-NEON-NEXT:    vmov.32 d11[1], r10
; LE-NEON-NEXT:    vmov.32 d9[1], r8
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    vmov.32 d14[1], r7
; LE-NEON-NEXT:    vorr q0, q6, q6
; LE-NEON-NEXT:    vmov.32 d10[1], r9
; LE-NEON-NEXT:    vorr q1, q7, q7
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q2, q5, q5
; LE-NEON-NEXT:    vorr q3, q4, q4
; LE-NEON-NEXT:    add sp, sp, #40
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; BE-LABEL: llrint_v8i64_v8f32:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #32
; BE-NEXT:    sub sp, sp, #32
; BE-NEXT:    vorr q4, q1, q1
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vorr q5, q0, q0
; BE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEXT:    vrev64.32 d12, d8
; BE-NEXT:    vmov.f32 s0, s25
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s24
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vrev64.32 d0, d11
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vrev64.32 d8, d9
; BE-NEXT:    vorr d9, d0, d0
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    vstr d8, [sp, #24] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.f32 s0, s19
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d16
; BE-NEXT:    vstr d8, [sp, #8] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vldr d0, [sp, #8] @ 8-byte Reload
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    vmov.f32 s0, s1
; BE-NEXT:    bl llrintf
; BE-NEXT:    vldr d0, [sp, #24] @ 8-byte Reload
; BE-NEXT:    mov r6, r1
; BE-NEXT:    @ kill: def $s0 killed $s0 killed $d0
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vmov.32 d9[1], r6
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d15[1], r8
; BE-NEXT:    vmov.32 d13[1], r7
; BE-NEXT:    vmov.32 d8[1], r5
; BE-NEXT:    vmov.32 d10[1], r10
; BE-NEXT:    vmov.32 d14[1], r9
; BE-NEXT:    vmov.32 d12[1], r1
; BE-NEXT:    vrev64.32 q0, q4
; BE-NEXT:    vrev64.32 q1, q5
; BE-NEXT:    vrev64.32 q2, q7
; BE-NEXT:    vrev64.32 q3, q6
; BE-NEXT:    add sp, sp, #32
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; BE-NEON-LABEL: llrint_v8i64_v8f32:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #32
; BE-NEON-NEXT:    sub sp, sp, #32
; BE-NEON-NEXT:    vorr q4, q1, q1
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vorr q5, q0, q0
; BE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEON-NEXT:    vrev64.32 d12, d8
; BE-NEON-NEXT:    vmov.f32 s0, s25
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s24
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vrev64.32 d0, d11
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vrev64.32 d8, d9
; BE-NEON-NEXT:    vorr d9, d0, d0
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    vstr d8, [sp, #24] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.f32 s0, s19
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d16
; BE-NEON-NEXT:    vstr d8, [sp, #8] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vldr d0, [sp, #8] @ 8-byte Reload
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    vmov.f32 s0, s1
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vldr d0, [sp, #24] @ 8-byte Reload
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    @ kill: def $s0 killed $s0 killed $d0
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vmov.32 d9[1], r6
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d15[1], r8
; BE-NEON-NEXT:    vmov.32 d13[1], r7
; BE-NEON-NEXT:    vmov.32 d8[1], r5
; BE-NEON-NEXT:    vmov.32 d10[1], r10
; BE-NEON-NEXT:    vmov.32 d14[1], r9
; BE-NEON-NEXT:    vmov.32 d12[1], r1
; BE-NEON-NEXT:    vrev64.32 q0, q4
; BE-NEON-NEXT:    vrev64.32 q1, q5
; BE-NEON-NEXT:    vrev64.32 q2, q7
; BE-NEON-NEXT:    vrev64.32 q3, q6
; BE-NEON-NEXT:    add sp, sp, #32
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
  %a = call <8 x i64> @llvm.llrint.v8i64.v8f32(<8 x float> %x)
  ret <8 x i64> %a
}
declare <8 x i64> @llvm.llrint.v8i64.v8f32(<8 x float>)

define <16 x i64> @llrint_v16i64_v16f32(<16 x float> %x) {
; LE-LABEL: llrint_v16i64_v16f32:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #160
; LE-NEXT:    sub sp, sp, #160
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    vorr q5, q3, q3
; LE-NEXT:    vorr q6, q0, q0
; LE-NEXT:    mov r4, r0
; LE-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #48
; LE-NEXT:    vorr q7, q1, q1
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    vmov.f32 s0, s23
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s24
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s25
; LE-NEXT:    str r1, [sp, #84] @ 4-byte Spill
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s28
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s29
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s30
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s31
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s29
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s22
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    vmov.32 d13[1], r7
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vmov.f32 s0, s21
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    str r1, [sp, #40] @ 4-byte Spill
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d16[0], r0
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vmov.32 d9[1], r6
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s31
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d8[1], r9
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #64
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #48
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s27
; LE-NEXT:    vmov.32 d11[1], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s26
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    ldr r0, [sp, #84] @ 4-byte Reload
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d10[1], r0
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d17[1], r0
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vmov.f32 s0, s22
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d16[0], r0
; LE-NEXT:    vmov.32 d17[1], r11
; LE-NEXT:    vorr q6, q8, q8
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    ldr r0, [sp, #40] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    vmov.32 d9[1], r9
; LE-NEXT:    vmov.32 d12[1], r6
; LE-NEXT:    vmov.32 d19[1], r10
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vmov.32 d16[1], r0
; LE-NEXT:    add r0, r4, #64
; LE-NEXT:    vmov.32 d18[1], r8
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    vmov.32 d15[1], r7
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #64
; LE-NEXT:    vmov.32 d14[1], r5
; LE-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEXT:    vst1.64 {d14, d15}, [r4:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r4:128]
; LE-NEXT:    add sp, sp, #160
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v16i64_v16f32:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #160
; LE-NEON-NEXT:    sub sp, sp, #160
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    vorr q5, q3, q3
; LE-NEON-NEXT:    vorr q6, q0, q0
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #48
; LE-NEON-NEXT:    vorr q7, q1, q1
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    vmov.f32 s0, s23
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s24
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s25
; LE-NEON-NEXT:    str r1, [sp, #84] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s28
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s29
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s30
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s31
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s29
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s22
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    vmov.32 d13[1], r7
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vmov.f32 s0, s21
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    str r1, [sp, #40] @ 4-byte Spill
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d16[0], r0
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vmov.32 d9[1], r6
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s31
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d8[1], r9
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #64
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #48
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s27
; LE-NEON-NEXT:    vmov.32 d11[1], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s26
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #84] @ 4-byte Reload
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d10[1], r0
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d17[1], r0
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vmov.f32 s0, s22
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d16[0], r0
; LE-NEON-NEXT:    vmov.32 d17[1], r11
; LE-NEON-NEXT:    vorr q6, q8, q8
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #40] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    vmov.32 d9[1], r9
; LE-NEON-NEXT:    vmov.32 d12[1], r6
; LE-NEON-NEXT:    vmov.32 d19[1], r10
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vmov.32 d16[1], r0
; LE-NEON-NEXT:    add r0, r4, #64
; LE-NEON-NEXT:    vmov.32 d18[1], r8
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    vmov.32 d15[1], r7
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #64
; LE-NEON-NEXT:    vmov.32 d14[1], r5
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r4:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]
; LE-NEON-NEXT:    add sp, sp, #160
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v16i64_v16f32:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #144
; BE-NEXT:    sub sp, sp, #144
; BE-NEXT:    vorr q6, q3, q3
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vorr q7, q0, q0
; BE-NEXT:    mov r4, r0
; BE-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vrev64.32 d8, d13
; BE-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    str r1, [sp, #88] @ 4-byte Spill
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vrev64.32 d8, d14
; BE-NEXT:    add lr, sp, #128
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    str r1, [sp, #92] @ 4-byte Spill
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vrev64.32 d9, d12
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    vstr d9, [sp, #64] @ 8-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s19
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    str r1, [sp, #84] @ 4-byte Spill
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vrev64.32 d9, d15
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s18
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s19
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vldr d0, [sp, #64] @ 8-byte Reload
; BE-NEXT:    mov r7, r1
; BE-NEXT:    @ kill: def $s0 killed $s0 killed $d0
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #40
; BE-NEXT:    str r1, [sp, #60] @ 4-byte Spill
; BE-NEXT:    vmov.32 d15[1], r7
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d16
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vmov.32 d13[1], r6
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d17
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d12[1], r9
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    ldr r0, [sp, #88] @ 4-byte Reload
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #128
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d16
; BE-NEXT:    vmov.32 d11[1], r0
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    ldr r0, [sp, #92] @ 4-byte Reload
; BE-NEXT:    add lr, sp, #128
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d10[1], r0
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #84] @ 4-byte Reload
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #40
; BE-NEXT:    vrev64.32 d8, d17
; BE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vmov.32 d13[1], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    ldr r0, [sp, #60] @ 4-byte Reload
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d12[1], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add r0, r4, #64
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.32 d17[1], r10
; BE-NEXT:    vmov.32 d16[1], r11
; BE-NEXT:    vorr q12, q8, q8
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #128
; BE-NEXT:    vmov.32 d15[1], r7
; BE-NEXT:    vmov.32 d11[1], r6
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vmov.32 d17[1], r8
; BE-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    vmov.32 d16[1], r9
; BE-NEXT:    vrev64.32 q14, q7
; BE-NEXT:    vorr q13, q8, q8
; BE-NEXT:    vrev64.32 q15, q5
; BE-NEXT:    vldmia lr, {d22, d23} @ 16-byte Reload
; BE-NEXT:    vrev64.32 q8, q6
; BE-NEXT:    vst1.64 {d28, d29}, [r0:128]!
; BE-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEXT:    vrev64.32 q9, q9
; BE-NEXT:    vrev64.32 q10, q10
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vrev64.32 q11, q11
; BE-NEXT:    vrev64.32 q12, q12
; BE-NEXT:    vst1.64 {d18, d19}, [r0:128]
; BE-NEXT:    vst1.64 {d20, d21}, [r4:128]!
; BE-NEXT:    vst1.64 {d22, d23}, [r4:128]!
; BE-NEXT:    vrev64.32 q13, q13
; BE-NEXT:    vst1.64 {d24, d25}, [r4:128]!
; BE-NEXT:    vst1.64 {d26, d27}, [r4:128]
; BE-NEXT:    add sp, sp, #144
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v16i64_v16f32:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #144
; BE-NEON-NEXT:    sub sp, sp, #144
; BE-NEON-NEXT:    vorr q6, q3, q3
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vorr q7, q0, q0
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vrev64.32 d8, d13
; BE-NEON-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    str r1, [sp, #88] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vrev64.32 d8, d14
; BE-NEON-NEXT:    add lr, sp, #128
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    str r1, [sp, #92] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vrev64.32 d9, d12
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #64] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s19
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    str r1, [sp, #84] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vrev64.32 d9, d15
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s18
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s19
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vldr d0, [sp, #64] @ 8-byte Reload
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    @ kill: def $s0 killed $s0 killed $d0
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #40
; BE-NEON-NEXT:    str r1, [sp, #60] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d15[1], r7
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d16
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vmov.32 d13[1], r6
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d17
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d12[1], r9
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    ldr r0, [sp, #88] @ 4-byte Reload
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #128
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d16
; BE-NEON-NEXT:    vmov.32 d11[1], r0
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #92] @ 4-byte Reload
; BE-NEON-NEXT:    add lr, sp, #128
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d10[1], r0
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #84] @ 4-byte Reload
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #40
; BE-NEON-NEXT:    vrev64.32 d8, d17
; BE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vmov.32 d13[1], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #60] @ 4-byte Reload
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d12[1], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add r0, r4, #64
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.32 d17[1], r10
; BE-NEON-NEXT:    vmov.32 d16[1], r11
; BE-NEON-NEXT:    vorr q12, q8, q8
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #128
; BE-NEON-NEXT:    vmov.32 d15[1], r7
; BE-NEON-NEXT:    vmov.32 d11[1], r6
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vmov.32 d17[1], r8
; BE-NEON-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    vmov.32 d16[1], r9
; BE-NEON-NEXT:    vrev64.32 q14, q7
; BE-NEON-NEXT:    vorr q13, q8, q8
; BE-NEON-NEXT:    vrev64.32 q15, q5
; BE-NEON-NEXT:    vldmia lr, {d22, d23} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 q8, q6
; BE-NEON-NEXT:    vst1.64 {d28, d29}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 q9, q9
; BE-NEON-NEXT:    vrev64.32 q10, q10
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 q11, q11
; BE-NEON-NEXT:    vrev64.32 q12, q12
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r4:128]!
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r4:128]!
; BE-NEON-NEXT:    vrev64.32 q13, q13
; BE-NEON-NEXT:    vst1.64 {d24, d25}, [r4:128]!
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r4:128]
; BE-NEON-NEXT:    add sp, sp, #144
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <16 x i64> @llvm.llrint.v16i64.v16f32(<16 x float> %x)
  ret <16 x i64> %a
}
declare <16 x i64> @llvm.llrint.v16i64.v16f32(<16 x float>)

define <32 x i64> @llrint_v32i64_v32f32(<32 x float> %x) {
; LE-LABEL: llrint_v32i64_v32f32:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #184
; LE-NEXT:    sub sp, sp, #184
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    vorr q7, q3, q3
; LE-NEXT:    vorr q4, q2, q2
; LE-NEXT:    mov r5, r0
; LE-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    vmov.f32 s0, s3
; LE-NEXT:    str r0, [sp, #68] @ 4-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    add lr, sp, #168
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s17
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s19
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s31
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s30
; LE-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vmov.32 d11[1], r7
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s29
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    str r1, [sp, #12] @ 4-byte Spill
; LE-NEXT:    vmov.32 d13[1], r4
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    add r0, sp, #320
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEXT:    add r0, sp, #304
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEXT:    add r0, sp, #336
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEXT:    add r0, sp, #288
; LE-NEXT:    vmov.32 d12[1], r6
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #48
; LE-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEXT:    vmov.32 d10[1], r8
; LE-NEXT:    add r8, r5, #64
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    vst1.64 {d12, d13}, [r8:128]!
; LE-NEXT:    vst1.64 {d10, d11}, [r8:128]!
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s27
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s28
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s26
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d11[1], r4
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    ldr r0, [sp, #16] @ 4-byte Reload
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #168
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s26
; LE-NEXT:    vmov.32 d11[1], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s25
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    add lr, sp, #168
; LE-NEXT:    ldr r0, [sp, #8] @ 4-byte Reload
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vorr q5, q6, q6
; LE-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEXT:    vmov.32 d15[1], r0
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    ldr r0, [sp, #12] @ 4-byte Reload
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d14[1], r0
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vorr q7, q6, q6
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.32 d9[1], r11
; LE-NEXT:    vmov.f32 s0, s25
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s24
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    vmov.32 d8[1], r9
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d16[1], r10
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vst1.64 {d8, d9}, [r8:128]!
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s1
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vst1.64 {d16, d17}, [r8:128]
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s19
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #168
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d16[1], r7
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s17
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d15[1], r4
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s16
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vmov.32 d14[1], r6
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d11[1], r5
; LE-NEXT:    vmov.32 d10[1], r11
; LE-NEXT:    ldr r11, [sp, #68] @ 4-byte Reload
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #16
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    vst1.64 {d14, d15}, [r11:128]!
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s23
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $s0 killed $s0 killed $q0
; LE-NEXT:    vmov.32 d13[1], r10
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s22
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEXT:    vmov.32 d15[1], r8
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s21
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d14[1], r7
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.32 d13[1], r9
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d12[1], r6
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s19
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s18
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.32 d13[1], r4
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d16[1], r5
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #168
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #48
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s21
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s20
; LE-NEXT:    vmov.32 d12[1], r8
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrintf
; LE-NEXT:    vmov.f32 s0, s23
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    vmov.32 d13[1], r7
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #48
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    vmov.f32 s0, s2
; LE-NEXT:    vmov.32 d12[1], r9
; LE-NEXT:    bl llrintf
; LE-NEXT:    add lr, sp, #16
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    vmov.32 d11[1], r7
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #152
; LE-NEXT:    vmov.32 d15[1], r10
; LE-NEXT:    vst1.64 {d16, d17}, [r11:128]
; LE-NEXT:    vmov.32 d10[1], r1
; LE-NEXT:    ldr r1, [sp, #68] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add r0, r1, #192
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vmov.32 d14[1], r4
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEXT:    vmov.32 d9[1], r5
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vmov.32 d8[1], r6
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    add r0, r1, #128
; LE-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    add sp, sp, #184
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v32i64_v32f32:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #184
; LE-NEON-NEXT:    sub sp, sp, #184
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    vorr q7, q3, q3
; LE-NEON-NEXT:    vorr q4, q2, q2
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    vmov.f32 s0, s3
; LE-NEON-NEXT:    str r0, [sp, #68] @ 4-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    add lr, sp, #168
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    str r1, [sp, #16] @ 4-byte Spill
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s17
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s19
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s31
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s30
; LE-NEON-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vmov.32 d11[1], r7
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s29
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    str r1, [sp, #12] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d13[1], r4
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    add r0, sp, #320
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEON-NEXT:    add r0, sp, #304
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEON-NEXT:    add r0, sp, #336
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEON-NEXT:    add r0, sp, #288
; LE-NEON-NEXT:    vmov.32 d12[1], r6
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #48
; LE-NEON-NEXT:    vld1.64 {d0, d1}, [r0]
; LE-NEON-NEXT:    vmov.32 d10[1], r8
; LE-NEON-NEXT:    add r8, r5, #64
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r8:128]!
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r8:128]!
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s27
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s28
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s26
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d11[1], r4
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    ldr r0, [sp, #16] @ 4-byte Reload
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #168
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s26
; LE-NEON-NEXT:    vmov.32 d11[1], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s25
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    add lr, sp, #168
; LE-NEON-NEXT:    ldr r0, [sp, #8] @ 4-byte Reload
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vorr q5, q6, q6
; LE-NEON-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d15[1], r0
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #12] @ 4-byte Reload
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d14[1], r0
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vorr q7, q6, q6
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d9[1], r11
; LE-NEON-NEXT:    vmov.f32 s0, s25
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s24
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    vmov.32 d8[1], r9
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d16[1], r10
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vst1.64 {d8, d9}, [r8:128]!
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s1
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r8:128]
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s19
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #168
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d16[1], r7
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s17
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d15[1], r4
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s16
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vmov.32 d14[1], r6
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d11[1], r5
; LE-NEON-NEXT:    vmov.32 d10[1], r11
; LE-NEON-NEXT:    ldr r11, [sp, #68] @ 4-byte Reload
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #16
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s23
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $s0 killed $s0 killed $q0
; LE-NEON-NEXT:    vmov.32 d13[1], r10
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s22
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d15[1], r8
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s21
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d14[1], r7
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d13[1], r9
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d12[1], r6
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s19
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s18
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d13[1], r4
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d16[1], r5
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #168
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #48
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s21
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s20
; LE-NEON-NEXT:    vmov.32 d12[1], r8
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    vmov.f32 s0, s23
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d13[1], r7
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #48
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.f32 s0, s2
; LE-NEON-NEXT:    vmov.32 d12[1], r9
; LE-NEON-NEXT:    bl llrintf
; LE-NEON-NEXT:    add lr, sp, #16
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    vmov.32 d11[1], r7
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #152
; LE-NEON-NEXT:    vmov.32 d15[1], r10
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r11:128]
; LE-NEON-NEXT:    vmov.32 d10[1], r1
; LE-NEON-NEXT:    ldr r1, [sp, #68] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add r0, r1, #192
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vmov.32 d14[1], r4
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEON-NEXT:    vmov.32 d9[1], r5
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vmov.32 d8[1], r6
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    add r0, r1, #128
; LE-NEON-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    add sp, sp, #184
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v32i64_v32f32:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #256
; BE-NEXT:    sub sp, sp, #256
; BE-NEXT:    add lr, sp, #208
; BE-NEXT:    str r0, [sp, #156] @ 4-byte Spill
; BE-NEXT:    add r0, sp, #408
; BE-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #120
; BE-NEXT:    vld1.64 {d10, d11}, [r0]
; BE-NEXT:    add r0, sp, #392
; BE-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #160
; BE-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #176
; BE-NEXT:    vrev64.32 d8, d10
; BE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vld1.64 {d12, d13}, [r0]
; BE-NEXT:    add r0, sp, #360
; BE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #376
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #40
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    str r1, [sp, #88] @ 4-byte Spill
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vrev64.32 d9, d11
; BE-NEXT:    add lr, sp, #240
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    str r1, [sp, #104] @ 4-byte Spill
; BE-NEXT:    vmov.f32 s0, s18
; BE-NEXT:    vrev64.32 d8, d13
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s19
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    str r1, [sp, #72] @ 4-byte Spill
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d10, d16
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s20
; BE-NEXT:    add lr, sp, #224
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s21
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d15[1], r6
; BE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d17
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d14[1], r7
; BE-NEXT:    add lr, sp, #56
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #40
; BE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #224
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d12
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d10[1], r5
; BE-NEXT:    add lr, sp, #224
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vrev64.32 d8, d13
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #88] @ 4-byte Reload
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #240
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vmov.32 d11[1], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    ldr r0, [sp, #104] @ 4-byte Reload
; BE-NEXT:    add lr, sp, #240
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d10[1], r0
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #72] @ 4-byte Reload
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d16
; BE-NEXT:    vmov.32 d13[1], r0
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vmov.32 d12[1], r9
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    vmov.32 d15[1], r4
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.32 d17[1], r10
; BE-NEXT:    vmov.32 d16[1], r11
; BE-NEXT:    vorr q9, q8, q8
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    vmov.32 d17[1], r8
; BE-NEXT:    vmov.32 d16[1], r5
; BE-NEXT:    vorr q10, q8, q8
; BE-NEXT:    vrev64.32 q8, q6
; BE-NEXT:    vmov.32 d14[1], r6
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #240
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vmov.32 d11[1], r7
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #224
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #56
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #104
; BE-NEXT:    vrev64.32 q8, q9
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #88
; BE-NEXT:    vrev64.32 q8, q10
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #72
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #208
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #56
; BE-NEXT:    vrev64.32 d8, d17
; BE-NEXT:    vrev64.32 q8, q5
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #120
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vmov.32 d13[1], r4
; BE-NEXT:    vrev64.32 d8, d10
; BE-NEXT:    vmov.32 d12[1], r1
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vrev64.32 q6, q6
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vmov.32 d15[1], r1
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r6, [sp, #156] @ 4-byte Reload
; BE-NEXT:    vrev64.32 d8, d11
; BE-NEXT:    add r5, r6, #64
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vmov.32 d15[1], r1
; BE-NEXT:    bl llrintf
; BE-NEXT:    add lr, sp, #208
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    vrev64.32 d8, d18
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    add lr, sp, #160
; BE-NEXT:    vmov.32 d15[1], r4
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d11
; BE-NEXT:    vst1.64 {d12, d13}, [r5:128]
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    add lr, sp, #208
; BE-NEXT:    vmov.32 d13[1], r4
; BE-NEXT:    vmov.32 d12[1], r1
; BE-NEXT:    vrev64.32 q8, q6
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #176
; BE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEXT:    vrev64.32 d8, d12
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vmov.32 d15[1], r1
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    mov r5, r6
; BE-NEXT:    vrev64.32 d8, d13
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vmov.32 d15[1], r1
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    vrev64.32 d8, d10
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    vmov.f32 s0, s17
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.f32 s0, s16
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrintf
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    add lr, sp, #208
; BE-NEXT:    add r0, r6, #192
; BE-NEXT:    vmov.32 d15[1], r4
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    vrev64.32 q8, q7
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #56
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #192
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #240
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #224
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; BE-NEXT:    add r0, r6, #128
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #104
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #88
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #72
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; BE-NEXT:    add sp, sp, #256
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v32i64_v32f32:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #256
; BE-NEON-NEXT:    sub sp, sp, #256
; BE-NEON-NEXT:    add lr, sp, #208
; BE-NEON-NEXT:    str r0, [sp, #156] @ 4-byte Spill
; BE-NEON-NEXT:    add r0, sp, #408
; BE-NEON-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #120
; BE-NEON-NEXT:    vld1.64 {d10, d11}, [r0]
; BE-NEON-NEXT:    add r0, sp, #392
; BE-NEON-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #160
; BE-NEON-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #176
; BE-NEON-NEXT:    vrev64.32 d8, d10
; BE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vld1.64 {d12, d13}, [r0]
; BE-NEON-NEXT:    add r0, sp, #360
; BE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #376
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #40
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    str r1, [sp, #88] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vrev64.32 d9, d11
; BE-NEON-NEXT:    add lr, sp, #240
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    str r1, [sp, #104] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.f32 s0, s18
; BE-NEON-NEXT:    vrev64.32 d8, d13
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s19
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    str r1, [sp, #72] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d10, d16
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s20
; BE-NEON-NEXT:    add lr, sp, #224
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s21
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d15[1], r6
; BE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d17
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d14[1], r7
; BE-NEON-NEXT:    add lr, sp, #56
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #40
; BE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #224
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d12
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d10[1], r5
; BE-NEON-NEXT:    add lr, sp, #224
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vrev64.32 d8, d13
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #88] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #240
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d11[1], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #104] @ 4-byte Reload
; BE-NEON-NEXT:    add lr, sp, #240
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d10[1], r0
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #72] @ 4-byte Reload
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d16
; BE-NEON-NEXT:    vmov.32 d13[1], r0
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vmov.32 d12[1], r9
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    vmov.32 d15[1], r4
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.32 d17[1], r10
; BE-NEON-NEXT:    vmov.32 d16[1], r11
; BE-NEON-NEXT:    vorr q9, q8, q8
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    vmov.32 d17[1], r8
; BE-NEON-NEXT:    vmov.32 d16[1], r5
; BE-NEON-NEXT:    vorr q10, q8, q8
; BE-NEON-NEXT:    vrev64.32 q8, q6
; BE-NEON-NEXT:    vmov.32 d14[1], r6
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #240
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vmov.32 d11[1], r7
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #224
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #56
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #104
; BE-NEON-NEXT:    vrev64.32 q8, q9
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #88
; BE-NEON-NEXT:    vrev64.32 q8, q10
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #72
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #208
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #56
; BE-NEON-NEXT:    vrev64.32 d8, d17
; BE-NEON-NEXT:    vrev64.32 q8, q5
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #120
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d13[1], r4
; BE-NEON-NEXT:    vrev64.32 d8, d10
; BE-NEON-NEXT:    vmov.32 d12[1], r1
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vrev64.32 q6, q6
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r1
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r6, [sp, #156] @ 4-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d11
; BE-NEON-NEXT:    add r5, r6, #64
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r1
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    add lr, sp, #208
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    vrev64.32 d8, d18
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    add lr, sp, #160
; BE-NEON-NEXT:    vmov.32 d15[1], r4
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d11
; BE-NEON-NEXT:    vst1.64 {d12, d13}, [r5:128]
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    add lr, sp, #208
; BE-NEON-NEXT:    vmov.32 d13[1], r4
; BE-NEON-NEXT:    vmov.32 d12[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q6
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #176
; BE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 d8, d12
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r1
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    mov r5, r6
; BE-NEON-NEXT:    vrev64.32 d8, d13
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r1
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    vrev64.32 d8, d10
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    vmov.f32 s0, s17
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.f32 s0, s16
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrintf
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    add lr, sp, #208
; BE-NEON-NEXT:    add r0, r6, #192
; BE-NEON-NEXT:    vmov.32 d15[1], r4
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q7
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #56
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #192
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #240
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #224
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; BE-NEON-NEXT:    add r0, r6, #128
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #104
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #88
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #72
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; BE-NEON-NEXT:    add sp, sp, #256
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <32 x i64> @llvm.llrint.v32i64.v32f32(<32 x float> %x)
  ret <32 x i64> %a
}
declare <32 x i64> @llvm.llrint.v32i64.v32f32(<32 x float>)

define <1 x i64> @llrint_v1i64_v1f64(<1 x double> %x) {
; LE-LABEL: llrint_v1i64_v1f64:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r11, lr}
; LE-NEXT:    push {r11, lr}
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d0[0], r0
; LE-NEXT:    vmov.32 d0[1], r1
; LE-NEXT:    pop {r11, pc}
;
; LE-NEON-LABEL: llrint_v1i64_v1f64:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r11, lr}
; LE-NEON-NEXT:    push {r11, lr}
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d0[0], r0
; LE-NEON-NEXT:    vmov.32 d0[1], r1
; LE-NEON-NEXT:    pop {r11, pc}
;
; BE-LABEL: llrint_v1i64_v1f64:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r11, lr}
; BE-NEXT:    push {r11, lr}
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    pop {r11, pc}
;
; BE-NEON-LABEL: llrint_v1i64_v1f64:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r11, lr}
; BE-NEON-NEXT:    push {r11, lr}
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    pop {r11, pc}
  %a = call <1 x i64> @llvm.llrint.v1i64.v1f64(<1 x double> %x)
  ret <1 x i64> %a
}
declare <1 x i64> @llvm.llrint.v1i64.v1f64(<1 x double>)

define <2 x i64> @llrint_v2i64_v2f64(<2 x double> %x) {
; LE-LABEL: llrint_v2i64_v2f64:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, lr}
; LE-NEXT:    push {r4, lr}
; LE-NEXT:    .vsave {d8, d9, d10, d11}
; LE-NEXT:    vpush {d8, d9, d10, d11}
; LE-NEXT:    vorr q4, q0, q0
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    vmov.32 d11[1], r4
; LE-NEXT:    vmov.32 d10[1], r1
; LE-NEXT:    vorr q0, q5, q5
; LE-NEXT:    vpop {d8, d9, d10, d11}
; LE-NEXT:    pop {r4, pc}
;
; LE-NEON-LABEL: llrint_v2i64_v2f64:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, lr}
; LE-NEON-NEXT:    push {r4, lr}
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11}
; LE-NEON-NEXT:    vorr q4, q0, q0
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    vmov.32 d11[1], r4
; LE-NEON-NEXT:    vmov.32 d10[1], r1
; LE-NEON-NEXT:    vorr q0, q5, q5
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11}
; LE-NEON-NEXT:    pop {r4, pc}
;
; BE-LABEL: llrint_v2i64_v2f64:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, lr}
; BE-NEXT:    push {r4, lr}
; BE-NEXT:    .vsave {d8, d9, d10, d11}
; BE-NEXT:    vpush {d8, d9, d10, d11}
; BE-NEXT:    vorr q4, q0, q0
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vrev64.32 q0, q5
; BE-NEXT:    vpop {d8, d9, d10, d11}
; BE-NEXT:    pop {r4, pc}
;
; BE-NEON-LABEL: llrint_v2i64_v2f64:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, lr}
; BE-NEON-NEXT:    push {r4, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11}
; BE-NEON-NEXT:    vorr q4, q0, q0
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vrev64.32 q0, q5
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11}
; BE-NEON-NEXT:    pop {r4, pc}
  %a = call <2 x i64> @llvm.llrint.v2i64.v2f64(<2 x double> %x)
  ret <2 x i64> %a
}
declare <2 x i64> @llvm.llrint.v2i64.v2f64(<2 x double>)

define <4 x i64> @llrint_v4i64_v4f64(<4 x double> %x) {
; LE-LABEL: llrint_v4i64_v4f64:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, lr}
; LE-NEXT:    push {r4, r5, r6, lr}
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vorr q5, q1, q1
; LE-NEXT:    vorr q6, q0, q0
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d12, d12
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d13, d13
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    vmov.32 d9[1], r4
; LE-NEXT:    vmov.32 d14[1], r5
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q0, q7, q7
; LE-NEXT:    vorr q1, q4, q4
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    pop {r4, r5, r6, pc}
;
; LE-NEON-LABEL: llrint_v4i64_v4f64:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, lr}
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vorr q5, q1, q1
; LE-NEON-NEXT:    vorr q6, q0, q0
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d12, d12
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d13, d13
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    vmov.32 d9[1], r4
; LE-NEON-NEXT:    vmov.32 d14[1], r5
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q0, q7, q7
; LE-NEON-NEXT:    vorr q1, q4, q4
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    pop {r4, r5, r6, pc}
;
; BE-LABEL: llrint_v4i64_v4f64:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, lr}
; BE-NEXT:    push {r4, r5, r6, lr}
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vorr q4, q1, q1
; BE-NEXT:    vorr q5, q0, q0
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vmov.32 d15[1], r6
; BE-NEXT:    vmov.32 d13[1], r4
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    vmov.32 d12[1], r1
; BE-NEXT:    vrev64.32 q0, q7
; BE-NEXT:    vrev64.32 q1, q6
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    pop {r4, r5, r6, pc}
;
; BE-NEON-LABEL: llrint_v4i64_v4f64:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vorr q4, q1, q1
; BE-NEON-NEXT:    vorr q5, q0, q0
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vmov.32 d15[1], r6
; BE-NEON-NEXT:    vmov.32 d13[1], r4
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    vmov.32 d12[1], r1
; BE-NEON-NEXT:    vrev64.32 q0, q7
; BE-NEON-NEXT:    vrev64.32 q1, q6
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    pop {r4, r5, r6, pc}
  %a = call <4 x i64> @llvm.llrint.v4i64.v4f64(<4 x double> %x)
  ret <4 x i64> %a
}
declare <4 x i64> @llvm.llrint.v4i64.v4f64(<4 x double>)

define <8 x i64> @llrint_v8i64_v8f64(<8 x double> %x) {
; LE-LABEL: llrint_v8i64_v8f64:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #40
; LE-NEXT:    sub sp, sp, #40
; LE-NEXT:    vorr q4, q0, q0
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vorr d0, d7, d7
; LE-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; LE-NEXT:    vorr q7, q2, q2
; LE-NEXT:    vorr q6, q1, q1
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d14, d14
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d15, d15
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d12, d12
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d13, d13
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d13[1], r6
; LE-NEXT:    vldmia lr, {d6, d7} @ 16-byte Reload
; LE-NEXT:    vmov.32 d15[1], r4
; LE-NEXT:    vmov.32 d11[1], r10
; LE-NEXT:    vmov.32 d6[0], r0
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    vmov.32 d14[1], r7
; LE-NEXT:    vorr q0, q6, q6
; LE-NEXT:    vmov.32 d10[1], r9
; LE-NEXT:    vorr q1, q7, q7
; LE-NEXT:    vmov.32 d7[1], r8
; LE-NEXT:    vorr q2, q5, q5
; LE-NEXT:    vmov.32 d6[1], r1
; LE-NEXT:    add sp, sp, #40
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; LE-NEON-LABEL: llrint_v8i64_v8f64:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #40
; LE-NEON-NEXT:    sub sp, sp, #40
; LE-NEON-NEXT:    vorr q4, q0, q0
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vorr d0, d7, d7
; LE-NEON-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; LE-NEON-NEXT:    vorr q7, q2, q2
; LE-NEON-NEXT:    vorr q6, q1, q1
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d14, d14
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d15, d15
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d12, d12
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d13, d13
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d13[1], r6
; LE-NEON-NEXT:    vldmia lr, {d6, d7} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d15[1], r4
; LE-NEON-NEXT:    vmov.32 d11[1], r10
; LE-NEON-NEXT:    vmov.32 d6[0], r0
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    vmov.32 d14[1], r7
; LE-NEON-NEXT:    vorr q0, q6, q6
; LE-NEON-NEXT:    vmov.32 d10[1], r9
; LE-NEON-NEXT:    vorr q1, q7, q7
; LE-NEON-NEXT:    vmov.32 d7[1], r8
; LE-NEON-NEXT:    vorr q2, q5, q5
; LE-NEON-NEXT:    vmov.32 d6[1], r1
; LE-NEON-NEXT:    add sp, sp, #40
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; BE-LABEL: llrint_v8i64_v8f64:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #40
; BE-NEXT:    sub sp, sp, #40
; BE-NEXT:    vorr q4, q0, q0
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vorr d0, d7, d7
; BE-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; BE-NEXT:    vorr q7, q2, q2
; BE-NEXT:    vorr q6, q1, q1
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d14, d14
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.32 d17[0], r0
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d15, d15
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d12, d12
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d13, d13
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; BE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.32 d13[1], r6
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vmov.32 d15[1], r4
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d11[1], r10
; BE-NEXT:    vmov.32 d17[1], r8
; BE-NEXT:    vmov.32 d12[1], r5
; BE-NEXT:    vmov.32 d14[1], r7
; BE-NEXT:    vmov.32 d10[1], r9
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 q0, q6
; BE-NEXT:    vrev64.32 q1, q7
; BE-NEXT:    vrev64.32 q2, q5
; BE-NEXT:    vrev64.32 q3, q8
; BE-NEXT:    add sp, sp, #40
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; BE-NEON-LABEL: llrint_v8i64_v8f64:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #40
; BE-NEON-NEXT:    sub sp, sp, #40
; BE-NEON-NEXT:    vorr q4, q0, q0
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vorr d0, d7, d7
; BE-NEON-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; BE-NEON-NEXT:    vorr q7, q2, q2
; BE-NEON-NEXT:    vorr q6, q1, q1
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d14, d14
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.32 d17[0], r0
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d15, d15
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d12, d12
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d13, d13
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; BE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.32 d13[1], r6
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d15[1], r4
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d11[1], r10
; BE-NEON-NEXT:    vmov.32 d17[1], r8
; BE-NEON-NEXT:    vmov.32 d12[1], r5
; BE-NEON-NEXT:    vmov.32 d14[1], r7
; BE-NEON-NEXT:    vmov.32 d10[1], r9
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 q0, q6
; BE-NEON-NEXT:    vrev64.32 q1, q7
; BE-NEON-NEXT:    vrev64.32 q2, q5
; BE-NEON-NEXT:    vrev64.32 q3, q8
; BE-NEON-NEXT:    add sp, sp, #40
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
  %a = call <8 x i64> @llvm.llrint.v8i64.v8f64(<8 x double> %x)
  ret <8 x i64> %a
}
declare <8 x i64> @llvm.llrint.v8i64.v8f64(<8 x double>)

define <16 x i64> @llrint_v16f64(<16 x double> %x) {
; LE-LABEL: llrint_v16f64:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #176
; LE-NEXT:    sub sp, sp, #176
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    str r0, [sp, #140] @ 4-byte Spill
; LE-NEXT:    add r0, sp, #312
; LE-NEXT:    vorr q6, q2, q2
; LE-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    vorr q7, q1, q1
; LE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vorr d0, d1, d1
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #280
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #296
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #328
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d14, d14
; LE-NEXT:    str r1, [sp, #116] @ 4-byte Spill
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d15, d15
; LE-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d12, d12
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    str r1, [sp, #72] @ 4-byte Spill
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d13, d13
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d13[1], r5
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    vmov.32 d12[1], r7
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d15[1], r4
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vorr d0, d17, d17
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d14[1], r6
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    ldr r0, [sp, #72] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d9[1], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d8[1], r0
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    ldr r0, [sp, #116] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d9[1], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEXT:    vmov.32 d8[1], r10
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vmov.32 d20[0], r0
; LE-NEXT:    vmov.32 d21[1], r8
; LE-NEXT:    vmov.32 d20[1], r1
; LE-NEXT:    ldr r1, [sp, #140] @ 4-byte Reload
; LE-NEXT:    vmov.32 d13[1], r5
; LE-NEXT:    mov r0, r1
; LE-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vmov.32 d14[1], r4
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    vmov.32 d12[1], r7
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    vmov.32 d17[1], r9
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]
; LE-NEXT:    add r0, r1, #64
; LE-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEXT:    vmov.32 d16[1], r11
; LE-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    add sp, sp, #176
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v16f64:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #176
; LE-NEON-NEXT:    sub sp, sp, #176
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    str r0, [sp, #140] @ 4-byte Spill
; LE-NEON-NEXT:    add r0, sp, #312
; LE-NEON-NEXT:    vorr q6, q2, q2
; LE-NEON-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    vorr q7, q1, q1
; LE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vorr d0, d1, d1
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #280
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #296
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #328
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d14, d14
; LE-NEON-NEXT:    str r1, [sp, #116] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d15, d15
; LE-NEON-NEXT:    str r1, [sp, #76] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d12, d12
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    str r1, [sp, #72] @ 4-byte Spill
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d13, d13
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d13[1], r5
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    vmov.32 d12[1], r7
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d15[1], r4
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d17, d17
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d14[1], r6
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    ldr r0, [sp, #72] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d9[1], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #76] @ 4-byte Reload
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d8[1], r0
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    ldr r0, [sp, #116] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d9[1], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEON-NEXT:    vmov.32 d8[1], r10
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vmov.32 d20[0], r0
; LE-NEON-NEXT:    vmov.32 d21[1], r8
; LE-NEON-NEXT:    vmov.32 d20[1], r1
; LE-NEON-NEXT:    ldr r1, [sp, #140] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d13[1], r5
; LE-NEON-NEXT:    mov r0, r1
; LE-NEON-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vmov.32 d14[1], r4
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    vmov.32 d12[1], r7
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d17[1], r9
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]
; LE-NEON-NEXT:    add r0, r1, #64
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEON-NEXT:    vmov.32 d16[1], r11
; LE-NEON-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    add sp, sp, #176
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v16f64:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #168
; BE-NEXT:    sub sp, sp, #168
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    str r0, [sp, #132] @ 4-byte Spill
; BE-NEXT:    add r0, sp, #304
; BE-NEXT:    vorr q4, q3, q3
; BE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vorr d0, d1, d1
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #320
; BE-NEXT:    vorr q6, q2, q2
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #88
; BE-NEXT:    vorr q7, q1, q1
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #272
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #288
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d14, d14
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    vmov.32 d17[0], r0
; BE-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d15, d15
; BE-NEXT:    str r1, [sp, #84] @ 4-byte Spill
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d12, d12
; BE-NEXT:    add lr, sp, #152
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d13, d13
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; BE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d13[1], r5
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    vmov.32 d12[1], r7
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vorr q6, q5, q5
; BE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    vmov.32 d12[1], r6
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #152
; BE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #88
; BE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEXT:    vorr d0, d13, d13
; BE-NEXT:    vmov.32 d9[1], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    ldr r0, [sp, #84] @ 4-byte Reload
; BE-NEXT:    vorr d0, d12, d12
; BE-NEXT:    add lr, sp, #152
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d8[1], r0
; BE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #136
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    vmov.32 d11[1], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vmov.32 d10[1], r9
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vmov.32 d17[1], r10
; BE-NEXT:    vmov.32 d16[1], r11
; BE-NEXT:    vorr q12, q8, q8
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #152
; BE-NEXT:    vmov.32 d17[1], r8
; BE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vmov.32 d13[1], r7
; BE-NEXT:    vmov.32 d16[1], r6
; BE-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    vorr q13, q8, q8
; BE-NEXT:    vmov.32 d12[1], r1
; BE-NEXT:    ldr r1, [sp, #132] @ 4-byte Reload
; BE-NEXT:    vrev64.32 q8, q5
; BE-NEXT:    mov r0, r1
; BE-NEXT:    vldmia lr, {d22, d23} @ 16-byte Reload
; BE-NEXT:    vrev64.32 q9, q9
; BE-NEXT:    vrev64.32 q10, q10
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; BE-NEXT:    vrev64.32 q11, q11
; BE-NEXT:    vmov.32 d15[1], r4
; BE-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; BE-NEXT:    vrev64.32 q15, q6
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    vrev64.32 q12, q12
; BE-NEXT:    vst1.64 {d22, d23}, [r0:128]
; BE-NEXT:    add r0, r1, #64
; BE-NEXT:    vrev64.32 q13, q13
; BE-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEXT:    vst1.64 {d24, d25}, [r0:128]!
; BE-NEXT:    vrev64.32 q14, q7
; BE-NEXT:    vst1.64 {d26, d27}, [r0:128]!
; BE-NEXT:    vst1.64 {d28, d29}, [r0:128]
; BE-NEXT:    add sp, sp, #168
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v16f64:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #168
; BE-NEON-NEXT:    sub sp, sp, #168
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    str r0, [sp, #132] @ 4-byte Spill
; BE-NEON-NEXT:    add r0, sp, #304
; BE-NEON-NEXT:    vorr q4, q3, q3
; BE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vorr d0, d1, d1
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #320
; BE-NEON-NEXT:    vorr q6, q2, q2
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #88
; BE-NEON-NEXT:    vorr q7, q1, q1
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #272
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #288
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d14, d14
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    vmov.32 d17[0], r0
; BE-NEON-NEXT:    str r1, [sp, #108] @ 4-byte Spill
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d15, d15
; BE-NEON-NEXT:    str r1, [sp, #84] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d12, d12
; BE-NEON-NEXT:    add lr, sp, #152
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d13, d13
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; BE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d13[1], r5
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    vmov.32 d12[1], r7
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vorr q6, q5, q5
; BE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    vmov.32 d12[1], r6
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #152
; BE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #88
; BE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d13, d13
; BE-NEON-NEXT:    vmov.32 d9[1], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #84] @ 4-byte Reload
; BE-NEON-NEXT:    vorr d0, d12, d12
; BE-NEON-NEXT:    add lr, sp, #152
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d8[1], r0
; BE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #136
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #108] @ 4-byte Reload
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    vmov.32 d11[1], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vmov.32 d10[1], r9
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vmov.32 d17[1], r10
; BE-NEON-NEXT:    vmov.32 d16[1], r11
; BE-NEON-NEXT:    vorr q12, q8, q8
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #152
; BE-NEON-NEXT:    vmov.32 d17[1], r8
; BE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vmov.32 d13[1], r7
; BE-NEON-NEXT:    vmov.32 d16[1], r6
; BE-NEON-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    vorr q13, q8, q8
; BE-NEON-NEXT:    vmov.32 d12[1], r1
; BE-NEON-NEXT:    ldr r1, [sp, #132] @ 4-byte Reload
; BE-NEON-NEXT:    vrev64.32 q8, q5
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    vldmia lr, {d22, d23} @ 16-byte Reload
; BE-NEON-NEXT:    vrev64.32 q9, q9
; BE-NEON-NEXT:    vrev64.32 q10, q10
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 q11, q11
; BE-NEON-NEXT:    vmov.32 d15[1], r4
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 q15, q6
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    vrev64.32 q12, q12
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r0:128]
; BE-NEON-NEXT:    add r0, r1, #64
; BE-NEON-NEXT:    vrev64.32 q13, q13
; BE-NEON-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d24, d25}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 q14, q7
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d28, d29}, [r0:128]
; BE-NEON-NEXT:    add sp, sp, #168
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <16 x i64> @llvm.llrint.v16i64.v16f64(<16 x double> %x)
  ret <16 x i64> %a
}
declare <16 x i64> @llvm.llrint.v16i64.v16f64(<16 x double>)

define <32 x i64> @llrint_v32f64(<32 x double> %x) {
; LE-LABEL: llrint_v32f64:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #208
; LE-NEXT:    sub sp, sp, #208
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    str r0, [sp, #156] @ 4-byte Spill
; LE-NEXT:    add r0, sp, #456
; LE-NEXT:    vorr q4, q0, q0
; LE-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vorr d0, d7, d7
; LE-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vorr q5, q2, q2
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #344
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #376
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #360
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #440
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    str r1, [sp, #120] @ 4-byte Spill
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d9[1], r7
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vorr d0, d17, d17
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d8[1], r4
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vmov.32 d11[1], r6
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEXT:    vmov.32 d10[1], r9
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    ldr r0, [sp, #120] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vmov.32 d19[1], r0
; LE-NEXT:    add r0, sp, #408
; LE-NEXT:    ldr r2, [sp, #156] @ 4-byte Reload
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    vmov.32 d13[1], r7
; LE-NEXT:    mov r0, r2
; LE-NEXT:    vmov.32 d12[1], r1
; LE-NEXT:    add r1, sp, #488
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vld1.64 {d16, d17}, [r1]
; LE-NEXT:    add r1, sp, #472
; LE-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vmov.32 d21[1], r11
; LE-NEXT:    vmov.32 d20[1], r10
; LE-NEXT:    add r10, r2, #192
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vld1.64 {d16, d17}, [r1]
; LE-NEXT:    add r1, sp, #392
; LE-NEXT:    vmov.32 d18[1], r5
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; LE-NEXT:    vld1.64 {d16, d17}, [r1]
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]
; LE-NEXT:    add r0, sp, #312
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #328
; LE-NEXT:    vmov.32 d15[1], r8
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    add r0, sp, #424
; LE-NEXT:    vmov.32 d14[1], r4
; LE-NEXT:    vst1.64 {d12, d13}, [r10:128]!
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEXT:    vst1.64 {d14, d15}, [r10:128]!
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vorr d0, d17, d17
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d15[1], r4
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    vmov.32 d14[1], r6
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d13[1], r5
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    vmov.32 d12[1], r8
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    str r1, [sp, #24] @ 4-byte Spill
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    vorr d0, d11, d11
; LE-NEXT:    vmov.32 d9[1], r9
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d10, d10
; LE-NEXT:    vmov.32 d8[1], r11
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    str r1, [sp, #40] @ 4-byte Spill
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    vmov.32 d11[1], r4
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    vmov.32 d10[1], r7
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d15[1], r5
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d14[1], r0
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #104
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    vmov.32 d13[1], r6
; LE-NEXT:    bl llrint
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    ldr r0, [sp, #40] @ 4-byte Reload
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d12[1], r0
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #120
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    vorr d0, d9, d9
; LE-NEXT:    vmov.32 d13[1], r8
; LE-NEXT:    bl llrint
; LE-NEXT:    vorr d0, d8, d8
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    vmov.32 d12[1], r11
; LE-NEXT:    bl llrint
; LE-NEXT:    add lr, sp, #72
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vmov.32 d17[1], r9
; LE-NEXT:    vmov.32 d16[1], r7
; LE-NEXT:    vst1.64 {d12, d13}, [r10:128]!
; LE-NEXT:    vorr q9, q8, q8
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #136
; LE-NEXT:    vmov.32 d15[1], r5
; LE-NEXT:    vst1.64 {d16, d17}, [r10:128]
; LE-NEXT:    vmov.32 d14[1], r1
; LE-NEXT:    ldr r1, [sp, #156] @ 4-byte Reload
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add r0, r1, #128
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vmov.32 d11[1], r6
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vmov.32 d10[1], r4
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #192
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    add r0, r1, #64
; LE-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #88
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    add sp, sp, #208
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v32f64:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #208
; LE-NEON-NEXT:    sub sp, sp, #208
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    str r0, [sp, #156] @ 4-byte Spill
; LE-NEON-NEXT:    add r0, sp, #456
; LE-NEON-NEXT:    vorr q4, q0, q0
; LE-NEON-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vorr d0, d7, d7
; LE-NEON-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vorr q5, q2, q2
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #344
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #376
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #360
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #440
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    str r1, [sp, #120] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d9[1], r7
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d17, d17
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d8[1], r4
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d11[1], r6
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEON-NEXT:    vmov.32 d10[1], r9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #120] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d20, d21} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vmov.32 d19[1], r0
; LE-NEON-NEXT:    add r0, sp, #408
; LE-NEON-NEXT:    ldr r2, [sp, #156] @ 4-byte Reload
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    vmov.32 d13[1], r7
; LE-NEON-NEXT:    mov r0, r2
; LE-NEON-NEXT:    vmov.32 d12[1], r1
; LE-NEON-NEXT:    add r1, sp, #488
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r1]
; LE-NEON-NEXT:    add r1, sp, #472
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vmov.32 d21[1], r11
; LE-NEON-NEXT:    vmov.32 d20[1], r10
; LE-NEON-NEXT:    add r10, r2, #192
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r1]
; LE-NEON-NEXT:    add r1, sp, #392
; LE-NEON-NEXT:    vmov.32 d18[1], r5
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vst1.64 {d20, d21}, [r0:128]!
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r1]
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]
; LE-NEON-NEXT:    add r0, sp, #312
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #328
; LE-NEON-NEXT:    vmov.32 d15[1], r8
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    add r0, sp, #424
; LE-NEON-NEXT:    vmov.32 d14[1], r4
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r10:128]!
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r10:128]!
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d17, d17
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; LE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d15[1], r4
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    vmov.32 d14[1], r6
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d13[1], r5
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    vmov.32 d12[1], r8
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    str r1, [sp, #24] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d11, d11
; LE-NEON-NEXT:    vmov.32 d9[1], r9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d10, d10
; LE-NEON-NEXT:    vmov.32 d8[1], r11
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    str r1, [sp, #40] @ 4-byte Spill
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    vmov.32 d11[1], r4
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    vmov.32 d10[1], r7
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d15[1], r5
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d14[1], r0
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #104
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    vmov.32 d13[1], r6
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #40] @ 4-byte Reload
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d12[1], r0
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #120
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    vorr d0, d9, d9
; LE-NEON-NEXT:    vmov.32 d13[1], r8
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    vorr d0, d8, d8
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    vmov.32 d12[1], r11
; LE-NEON-NEXT:    bl llrint
; LE-NEON-NEXT:    add lr, sp, #72
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vmov.32 d17[1], r9
; LE-NEON-NEXT:    vmov.32 d16[1], r7
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r10:128]!
; LE-NEON-NEXT:    vorr q9, q8, q8
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #136
; LE-NEON-NEXT:    vmov.32 d15[1], r5
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]
; LE-NEON-NEXT:    vmov.32 d14[1], r1
; LE-NEON-NEXT:    ldr r1, [sp, #156] @ 4-byte Reload
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add r0, r1, #128
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vmov.32 d11[1], r6
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vmov.32 d10[1], r4
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #192
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    add r0, r1, #64
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #88
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    add sp, sp, #208
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v32f64:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #232
; BE-NEXT:    sub sp, sp, #232
; BE-NEXT:    add lr, sp, #184
; BE-NEXT:    str r0, [sp, #148] @ 4-byte Spill
; BE-NEXT:    add r0, sp, #416
; BE-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #168
; BE-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #152
; BE-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #128
; BE-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    vld1.64 {d18, d19}, [r0]
; BE-NEXT:    add r0, sp, #448
; BE-NEXT:    vorr d0, d19, d19
; BE-NEXT:    vld1.64 {d14, d15}, [r0]
; BE-NEXT:    add r0, sp, #336
; BE-NEXT:    vstmia lr, {d18, d19} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #400
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #352
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #368
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #384
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #512
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEXT:    add r0, sp, #432
; BE-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    str r1, [sp, #80] @ 4-byte Spill
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d14, d14
; BE-NEXT:    add lr, sp, #216
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d15, d15
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; BE-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d15[1], r7
; BE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    vmov.32 d14[1], r6
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; BE-NEXT:    vorr d0, d15, d15
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d14, d14
; BE-NEXT:    vmov.32 d8[1], r8
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #216
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    vmov.32 d11[1], r9
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    add lr, sp, #216
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d10[1], r0
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    ldr r0, [sp, #80] @ 4-byte Reload
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    vmov.32 d11[1], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    vmov.32 d10[1], r5
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEXT:    bl llrint
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vorr q4, q6, q6
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEXT:    vorr d0, d13, d13
; BE-NEXT:    vmov.32 d9[1], r10
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d12, d12
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    vmov.32 d8[1], r11
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #24
; BE-NEXT:    ldr r0, [sp, #4] @ 4-byte Reload
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vmov.32 d17[1], r0
; BE-NEXT:    vmov.32 d16[1], r8
; BE-NEXT:    vorr q9, q8, q8
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    vmov.32 d17[1], r9
; BE-NEXT:    vmov.32 d16[1], r6
; BE-NEXT:    vorr q10, q8, q8
; BE-NEXT:    vrev64.32 q8, q4
; BE-NEXT:    vmov.32 d15[1], r7
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vmov.32 d11[1], r5
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vmov.32 d14[1], r4
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #216
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vrev64.32 q6, q7
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #8
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vrev64.32 q7, q5
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #80
; BE-NEXT:    vrev64.32 q8, q8
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    vrev64.32 q8, q9
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vrev64.32 q8, q10
; BE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEXT:    add lr, sp, #128
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    ldr r6, [sp, #148] @ 4-byte Reload
; BE-NEXT:    add lr, sp, #152
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    mov r5, r6
; BE-NEXT:    vmov.32 d8[1], r1
; BE-NEXT:    vrev64.32 q8, q4
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    add lr, sp, #168
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    vmov.32 d8[1], r1
; BE-NEXT:    vrev64.32 q8, q4
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    add lr, sp, #184
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    vmov.32 d8[1], r1
; BE-NEXT:    vrev64.32 q8, q4
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEXT:    vorr d0, d11, d11
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d10, d10
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    add r0, sp, #464
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    vmov.32 d8[1], r1
; BE-NEXT:    vrev64.32 q8, q4
; BE-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add r0, sp, #480
; BE-NEXT:    add r5, r6, #192
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    vrev64.32 q8, q5
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add r0, sp, #496
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEXT:    vorr d0, d9, d9
; BE-NEXT:    vrev64.32 q8, q5
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    bl llrint
; BE-NEXT:    vorr d0, d8, d8
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    bl llrint
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    add lr, sp, #112
; BE-NEXT:    add r0, r6, #128
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    vmov.32 d10[1], r1
; BE-NEXT:    vrev64.32 q8, q5
; BE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEXT:    vst1.64 {d14, d15}, [r5:128]
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #200
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #216
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #96
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #80
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; BE-NEXT:    add r0, r6, #64
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #64
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    add lr, sp, #48
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEXT:    vst1.64 {d12, d13}, [r0:128]
; BE-NEXT:    add sp, sp, #232
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v32f64:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #232
; BE-NEON-NEXT:    sub sp, sp, #232
; BE-NEON-NEXT:    add lr, sp, #184
; BE-NEON-NEXT:    str r0, [sp, #148] @ 4-byte Spill
; BE-NEON-NEXT:    add r0, sp, #416
; BE-NEON-NEXT:    vstmia lr, {d6, d7} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #168
; BE-NEON-NEXT:    vstmia lr, {d4, d5} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #152
; BE-NEON-NEXT:    vstmia lr, {d2, d3} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #128
; BE-NEON-NEXT:    vstmia lr, {d0, d1} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    vld1.64 {d18, d19}, [r0]
; BE-NEON-NEXT:    add r0, sp, #448
; BE-NEON-NEXT:    vorr d0, d19, d19
; BE-NEON-NEXT:    vld1.64 {d14, d15}, [r0]
; BE-NEON-NEXT:    add r0, sp, #336
; BE-NEON-NEXT:    vstmia lr, {d18, d19} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #400
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #352
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #368
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #384
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #512
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vld1.64 {d16, d17}, [r0]
; BE-NEON-NEXT:    add r0, sp, #432
; BE-NEON-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    str r1, [sp, #80] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    str r1, [sp, #44] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d14, d14
; BE-NEON-NEXT:    add lr, sp, #216
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d15, d15
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vldmia lr, {d0, d1} @ 16-byte Reload
; BE-NEON-NEXT:    @ kill: def $d0 killed $d0 killed $q0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d15[1], r7
; BE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    vmov.32 d14[1], r6
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d15, d15
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d14, d14
; BE-NEON-NEXT:    vmov.32 d8[1], r8
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #216
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    vmov.32 d11[1], r9
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #44] @ 4-byte Reload
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    add lr, sp, #216
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d10[1], r0
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    ldr r0, [sp, #80] @ 4-byte Reload
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    vmov.32 d11[1], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    vmov.32 d10[1], r5
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vorr q4, q6, q6
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d13, d13
; BE-NEON-NEXT:    vmov.32 d9[1], r10
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d12, d12
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    vmov.32 d8[1], r11
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #24
; BE-NEON-NEXT:    ldr r0, [sp, #4] @ 4-byte Reload
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vmov.32 d17[1], r0
; BE-NEON-NEXT:    vmov.32 d16[1], r8
; BE-NEON-NEXT:    vorr q9, q8, q8
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    vmov.32 d17[1], r9
; BE-NEON-NEXT:    vmov.32 d16[1], r6
; BE-NEON-NEXT:    vorr q10, q8, q8
; BE-NEON-NEXT:    vrev64.32 q8, q4
; BE-NEON-NEXT:    vmov.32 d15[1], r7
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d11[1], r5
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vmov.32 d14[1], r4
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #216
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vrev64.32 q6, q7
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #8
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vrev64.32 q7, q5
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #80
; BE-NEON-NEXT:    vrev64.32 q8, q8
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    vrev64.32 q8, q9
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vrev64.32 q8, q10
; BE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; BE-NEON-NEXT:    add lr, sp, #128
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    ldr r6, [sp, #148] @ 4-byte Reload
; BE-NEON-NEXT:    add lr, sp, #152
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    mov r5, r6
; BE-NEON-NEXT:    vmov.32 d8[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q4
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    add lr, sp, #168
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    vmov.32 d8[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q4
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    add lr, sp, #184
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    vmov.32 d8[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q4
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    vldmia lr, {d10, d11} @ 16-byte Reload
; BE-NEON-NEXT:    vorr d0, d11, d11
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d10, d10
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    add r0, sp, #464
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    vmov.32 d8[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q4
; BE-NEON-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add r0, sp, #480
; BE-NEON-NEXT:    add r5, r6, #192
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    vrev64.32 q8, q5
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add r0, sp, #496
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vld1.64 {d8, d9}, [r0]
; BE-NEON-NEXT:    vorr d0, d9, d9
; BE-NEON-NEXT:    vrev64.32 q8, q5
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vorr d0, d8, d8
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    bl llrint
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    add lr, sp, #112
; BE-NEON-NEXT:    add r0, r6, #128
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    vmov.32 d10[1], r1
; BE-NEON-NEXT:    vrev64.32 q8, q5
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; BE-NEON-NEXT:    vst1.64 {d14, d15}, [r5:128]
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #200
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #216
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #96
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #80
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; BE-NEON-NEXT:    add r0, r6, #64
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #64
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    add lr, sp, #48
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]!
; BE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]
; BE-NEON-NEXT:    add sp, sp, #232
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <32 x i64> @llvm.llrint.v32i64.v16f64(<32 x double> %x)
  ret <32 x i64> %a
}
declare <32 x i64> @llvm.llrint.v32i64.v32f64(<32 x double>)

define <1 x i64> @llrint_v1i64_v1f128(<1 x fp128> %x) {
; LE-LABEL: llrint_v1i64_v1f128:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r11, lr}
; LE-NEXT:    push {r11, lr}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d0[0], r0
; LE-NEXT:    vmov.32 d0[1], r1
; LE-NEXT:    pop {r11, pc}
;
; LE-NEON-LABEL: llrint_v1i64_v1f128:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r11, lr}
; LE-NEON-NEXT:    push {r11, lr}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d0[0], r0
; LE-NEON-NEXT:    vmov.32 d0[1], r1
; LE-NEON-NEXT:    pop {r11, pc}
;
; BE-LABEL: llrint_v1i64_v1f128:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r11, lr}
; BE-NEXT:    push {r11, lr}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    pop {r11, pc}
;
; BE-NEON-LABEL: llrint_v1i64_v1f128:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r11, lr}
; BE-NEON-NEXT:    push {r11, lr}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    pop {r11, pc}
  %a = call <1 x i64> @llvm.llrint.v1i64.v1f128(<1 x fp128> %x)
  ret <1 x i64> %a
}
declare <1 x i64> @llvm.llrint.v1i64.v1f128(<1 x fp128>)

define <2 x i64> @llrint_v2i64_v2f128(<2 x fp128> %x) {
; LE-LABEL: llrint_v2i64_v2f128:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, lr}
; LE-NEXT:    .vsave {d8, d9}
; LE-NEXT:    vpush {d8, d9}
; LE-NEXT:    mov r8, r3
; LE-NEXT:    add r3, sp, #40
; LE-NEXT:    mov r5, r2
; LE-NEXT:    mov r6, r1
; LE-NEXT:    mov r7, r0
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    mov r1, r6
; LE-NEXT:    mov r2, r5
; LE-NEXT:    mov r3, r8
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d9[1], r4
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q0, q4, q4
; LE-NEXT:    vpop {d8, d9}
; LE-NEXT:    pop {r4, r5, r6, r7, r8, pc}
;
; LE-NEON-LABEL: llrint_v2i64_v2f128:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, lr}
; LE-NEON-NEXT:    .vsave {d8, d9}
; LE-NEON-NEXT:    vpush {d8, d9}
; LE-NEON-NEXT:    mov r8, r3
; LE-NEON-NEXT:    add r3, sp, #40
; LE-NEON-NEXT:    mov r5, r2
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    mov r7, r0
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    mov r1, r6
; LE-NEON-NEXT:    mov r2, r5
; LE-NEON-NEXT:    mov r3, r8
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d9[1], r4
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q0, q4, q4
; LE-NEON-NEXT:    vpop {d8, d9}
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, pc}
;
; BE-LABEL: llrint_v2i64_v2f128:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, lr}
; BE-NEXT:    .vsave {d8}
; BE-NEXT:    vpush {d8}
; BE-NEXT:    mov r8, r3
; BE-NEXT:    add r3, sp, #32
; BE-NEXT:    mov r5, r2
; BE-NEXT:    mov r6, r1
; BE-NEXT:    mov r7, r0
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r7
; BE-NEXT:    mov r1, r6
; BE-NEXT:    mov r2, r5
; BE-NEXT:    mov r3, r8
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d8[1], r4
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d1, d8
; BE-NEXT:    vrev64.32 d0, d16
; BE-NEXT:    vpop {d8}
; BE-NEXT:    pop {r4, r5, r6, r7, r8, pc}
;
; BE-NEON-LABEL: llrint_v2i64_v2f128:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, lr}
; BE-NEON-NEXT:    .vsave {d8}
; BE-NEON-NEXT:    vpush {d8}
; BE-NEON-NEXT:    mov r8, r3
; BE-NEON-NEXT:    add r3, sp, #32
; BE-NEON-NEXT:    mov r5, r2
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    mov r7, r0
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    mov r1, r6
; BE-NEON-NEXT:    mov r2, r5
; BE-NEON-NEXT:    mov r3, r8
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d8[1], r4
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d8
; BE-NEON-NEXT:    vrev64.32 d0, d16
; BE-NEON-NEXT:    vpop {d8}
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, pc}
  %a = call <2 x i64> @llvm.llrint.v2i64.v2f128(<2 x fp128> %x)
  ret <2 x i64> %a
}
declare <2 x i64> @llvm.llrint.v2i64.v2f128(<2 x fp128>)

define <4 x i64> @llrint_v4i64_v4f128(<4 x fp128> %x) {
; LE-LABEL: llrint_v4i64_v4f128:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEXT:    .vsave {d8, d9, d10, d11}
; LE-NEXT:    vpush {d8, d9, d10, d11}
; LE-NEXT:    mov r5, r3
; LE-NEXT:    add r3, sp, #96
; LE-NEXT:    mov r7, r2
; LE-NEXT:    mov r6, r1
; LE-NEXT:    mov r4, r0
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    mov r0, r4
; LE-NEXT:    mov r1, r6
; LE-NEXT:    mov r2, r7
; LE-NEXT:    mov r3, r5
; LE-NEXT:    ldr r8, [sp, #80]
; LE-NEXT:    ldr r10, [sp, #64]
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #68
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r0, r10
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #84
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    vmov.32 d11[1], r4
; LE-NEXT:    vmov.32 d9[1], r9
; LE-NEXT:    vmov.32 d10[1], r5
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q0, q5, q5
; LE-NEXT:    vorr q1, q4, q4
; LE-NEXT:    vpop {d8, d9, d10, d11}
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; LE-NEON-LABEL: llrint_v4i64_v4f128:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11}
; LE-NEON-NEXT:    mov r5, r3
; LE-NEON-NEXT:    add r3, sp, #96
; LE-NEON-NEXT:    mov r7, r2
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    mov r0, r4
; LE-NEON-NEXT:    mov r1, r6
; LE-NEON-NEXT:    mov r2, r7
; LE-NEON-NEXT:    mov r3, r5
; LE-NEON-NEXT:    ldr r8, [sp, #80]
; LE-NEON-NEXT:    ldr r10, [sp, #64]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #68
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r0, r10
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #84
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    vmov.32 d11[1], r4
; LE-NEON-NEXT:    vmov.32 d9[1], r9
; LE-NEON-NEXT:    vmov.32 d10[1], r5
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q0, q5, q5
; LE-NEON-NEXT:    vorr q1, q4, q4
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11}
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; BE-LABEL: llrint_v4i64_v4f128:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEXT:    .vsave {d8, d9, d10}
; BE-NEXT:    vpush {d8, d9, d10}
; BE-NEXT:    mov r5, r3
; BE-NEXT:    add r3, sp, #88
; BE-NEXT:    mov r7, r2
; BE-NEXT:    mov r6, r1
; BE-NEXT:    mov r4, r0
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    mov r1, r6
; BE-NEXT:    mov r2, r7
; BE-NEXT:    mov r3, r5
; BE-NEXT:    ldr r8, [sp, #72]
; BE-NEXT:    ldr r10, [sp, #56]
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #60
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r10
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #76
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    mov r0, r8
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    vmov.32 d10[1], r4
; BE-NEXT:    vmov.32 d8[1], r9
; BE-NEXT:    vmov.32 d9[1], r5
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d1, d10
; BE-NEXT:    vrev64.32 d3, d8
; BE-NEXT:    vrev64.32 d0, d9
; BE-NEXT:    vrev64.32 d2, d16
; BE-NEXT:    vpop {d8, d9, d10}
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
;
; BE-NEON-LABEL: llrint_v4i64_v4f128:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; BE-NEON-NEXT:    .vsave {d8, d9, d10}
; BE-NEON-NEXT:    vpush {d8, d9, d10}
; BE-NEON-NEXT:    mov r5, r3
; BE-NEON-NEXT:    add r3, sp, #88
; BE-NEON-NEXT:    mov r7, r2
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    mov r1, r6
; BE-NEON-NEXT:    mov r2, r7
; BE-NEON-NEXT:    mov r3, r5
; BE-NEON-NEXT:    ldr r8, [sp, #72]
; BE-NEON-NEXT:    ldr r10, [sp, #56]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #60
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r10
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #76
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    mov r0, r8
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    vmov.32 d10[1], r4
; BE-NEON-NEXT:    vmov.32 d8[1], r9
; BE-NEON-NEXT:    vmov.32 d9[1], r5
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d10
; BE-NEON-NEXT:    vrev64.32 d3, d8
; BE-NEON-NEXT:    vrev64.32 d0, d9
; BE-NEON-NEXT:    vrev64.32 d2, d16
; BE-NEON-NEXT:    vpop {d8, d9, d10}
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, pc}
  %a = call <4 x i64> @llvm.llrint.v4i64.v4f128(<4 x fp128> %x)
  ret <4 x i64> %a
}
declare <4 x i64> @llvm.llrint.v4i64.v4f128(<4 x fp128>)

define <8 x i64> @llrint_v8i64_v8f128(<8 x fp128> %x) {
; LE-LABEL: llrint_v8i64_v8f128:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #8
; LE-NEXT:    sub sp, sp, #8
; LE-NEXT:    mov r11, r3
; LE-NEXT:    add r3, sp, #208
; LE-NEXT:    mov r10, r2
; LE-NEXT:    mov r4, r1
; LE-NEXT:    mov r5, r0
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r7, sp, #164
; LE-NEXT:    ldr r6, [sp, #160]
; LE-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    ldm r7, {r1, r2, r3, r7}
; LE-NEXT:    mov r0, r6
; LE-NEXT:    ldr r8, [sp, #128]
; LE-NEXT:    ldr r9, [sp, #144]
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #180
; LE-NEXT:    str r1, [sp] @ 4-byte Spill
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #132
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #148
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    mov r0, r9
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r5
; LE-NEXT:    mov r1, r4
; LE-NEXT:    mov r2, r10
; LE-NEXT:    mov r3, r11
; LE-NEXT:    ldr r6, [sp, #112]
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #116
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    mov r0, r6
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #196
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    ldr r0, [sp, #192]
; LE-NEXT:    mov r5, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    ldr r0, [sp] @ 4-byte Reload
; LE-NEXT:    vmov.32 d11[1], r7
; LE-NEXT:    vmov.32 d10[1], r0
; LE-NEXT:    ldr r0, [sp, #4] @ 4-byte Reload
; LE-NEXT:    vmov.32 d15[1], r5
; LE-NEXT:    vorr q2, q5, q5
; LE-NEXT:    vmov.32 d13[1], r9
; LE-NEXT:    vmov.32 d9[1], r0
; LE-NEXT:    vmov.32 d14[1], r4
; LE-NEXT:    vmov.32 d12[1], r8
; LE-NEXT:    vorr q0, q7, q7
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vorr q1, q6, q6
; LE-NEXT:    vorr q3, q4, q4
; LE-NEXT:    add sp, sp, #8
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v8i64_v8f128:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #8
; LE-NEON-NEXT:    sub sp, sp, #8
; LE-NEON-NEXT:    mov r11, r3
; LE-NEON-NEXT:    add r3, sp, #208
; LE-NEON-NEXT:    mov r10, r2
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    mov r5, r0
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r7, sp, #164
; LE-NEON-NEXT:    ldr r6, [sp, #160]
; LE-NEON-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    ldm r7, {r1, r2, r3, r7}
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    ldr r8, [sp, #128]
; LE-NEON-NEXT:    ldr r9, [sp, #144]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #180
; LE-NEON-NEXT:    str r1, [sp] @ 4-byte Spill
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #132
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #148
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    mov r0, r9
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r5
; LE-NEON-NEXT:    mov r1, r4
; LE-NEON-NEXT:    mov r2, r10
; LE-NEON-NEXT:    mov r3, r11
; LE-NEON-NEXT:    ldr r6, [sp, #112]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #116
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #196
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #192]
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    ldr r0, [sp] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d11[1], r7
; LE-NEON-NEXT:    vmov.32 d10[1], r0
; LE-NEON-NEXT:    ldr r0, [sp, #4] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d15[1], r5
; LE-NEON-NEXT:    vorr q2, q5, q5
; LE-NEON-NEXT:    vmov.32 d13[1], r9
; LE-NEON-NEXT:    vmov.32 d9[1], r0
; LE-NEON-NEXT:    vmov.32 d14[1], r4
; LE-NEON-NEXT:    vmov.32 d12[1], r8
; LE-NEON-NEXT:    vorr q0, q7, q7
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vorr q1, q6, q6
; LE-NEON-NEXT:    vorr q3, q4, q4
; LE-NEON-NEXT:    add sp, sp, #8
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v8i64_v8f128:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14}
; BE-NEXT:    .pad #16
; BE-NEXT:    sub sp, sp, #16
; BE-NEXT:    str r3, [sp, #4] @ 4-byte Spill
; BE-NEXT:    add r3, sp, #208
; BE-NEXT:    mov r11, r2
; BE-NEXT:    mov r4, r1
; BE-NEXT:    mov r5, r0
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r7, [sp, #176]
; BE-NEXT:    add r3, sp, #180
; BE-NEXT:    str r1, [sp, #12] @ 4-byte Spill
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    mov r0, r7
; BE-NEXT:    ldr r6, [sp, #128]
; BE-NEXT:    ldr r8, [sp, #144]
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #132
; BE-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #148
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    mov r0, r8
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #160
; BE-NEXT:    mov r9, r0
; BE-NEXT:    mov r7, r1
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r3, [sp, #4] @ 4-byte Reload
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    mov r1, r4
; BE-NEXT:    mov r2, r11
; BE-NEXT:    ldr r10, [sp, #112]
; BE-NEXT:    vmov.32 d12[0], r9
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #116
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    mov r0, r10
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #196
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #192]
; BE-NEXT:    mov r5, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    ldr r0, [sp, #8] @ 4-byte Reload
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    vmov.32 d9[1], r0
; BE-NEXT:    ldr r0, [sp, #12] @ 4-byte Reload
; BE-NEXT:    vmov.32 d12[1], r7
; BE-NEXT:    vmov.32 d8[1], r0
; BE-NEXT:    vmov.32 d13[1], r4
; BE-NEXT:    vmov.32 d10[1], r6
; BE-NEXT:    vmov.32 d11[1], r8
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    vrev64.32 d1, d14
; BE-NEXT:    vrev64.32 d3, d12
; BE-NEXT:    vrev64.32 d5, d9
; BE-NEXT:    vrev64.32 d7, d8
; BE-NEXT:    vrev64.32 d0, d13
; BE-NEXT:    vrev64.32 d2, d10
; BE-NEXT:    vrev64.32 d4, d11
; BE-NEXT:    vrev64.32 d6, d16
; BE-NEXT:    add sp, sp, #16
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v8i64_v8f128:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14}
; BE-NEON-NEXT:    .pad #16
; BE-NEON-NEXT:    sub sp, sp, #16
; BE-NEON-NEXT:    str r3, [sp, #4] @ 4-byte Spill
; BE-NEON-NEXT:    add r3, sp, #208
; BE-NEON-NEXT:    mov r11, r2
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    mov r5, r0
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r7, [sp, #176]
; BE-NEON-NEXT:    add r3, sp, #180
; BE-NEON-NEXT:    str r1, [sp, #12] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    ldr r6, [sp, #128]
; BE-NEON-NEXT:    ldr r8, [sp, #144]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #132
; BE-NEON-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #148
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    mov r0, r8
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #160
; BE-NEON-NEXT:    mov r9, r0
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r3, [sp, #4] @ 4-byte Reload
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    mov r1, r4
; BE-NEON-NEXT:    mov r2, r11
; BE-NEON-NEXT:    ldr r10, [sp, #112]
; BE-NEON-NEXT:    vmov.32 d12[0], r9
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #116
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    mov r0, r10
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #196
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #192]
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #8] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    vmov.32 d9[1], r0
; BE-NEON-NEXT:    ldr r0, [sp, #12] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d12[1], r7
; BE-NEON-NEXT:    vmov.32 d8[1], r0
; BE-NEON-NEXT:    vmov.32 d13[1], r4
; BE-NEON-NEXT:    vmov.32 d10[1], r6
; BE-NEON-NEXT:    vmov.32 d11[1], r8
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    vrev64.32 d1, d14
; BE-NEON-NEXT:    vrev64.32 d3, d12
; BE-NEON-NEXT:    vrev64.32 d5, d9
; BE-NEON-NEXT:    vrev64.32 d7, d8
; BE-NEON-NEXT:    vrev64.32 d0, d13
; BE-NEON-NEXT:    vrev64.32 d2, d10
; BE-NEON-NEXT:    vrev64.32 d4, d11
; BE-NEON-NEXT:    vrev64.32 d6, d16
; BE-NEON-NEXT:    add sp, sp, #16
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <8 x i64> @llvm.llrint.v8i64.v8f128(<8 x fp128> %x)
  ret <8 x i64> %a
}
declare <8 x i64> @llvm.llrint.v8i64.v8f128(<8 x fp128>)

define <16 x i64> @llrint_v16f128(<16 x fp128> %x) {
; LE-LABEL: llrint_v16f128:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #72
; LE-NEXT:    sub sp, sp, #72
; LE-NEXT:    mov r6, r3
; LE-NEXT:    add r3, sp, #408
; LE-NEXT:    mov r7, r2
; LE-NEXT:    mov r4, r0
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r5, sp, #176
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    ldm r5, {r2, r3, r5}
; LE-NEXT:    mov r1, r6
; LE-NEXT:    ldr r8, [sp, #232]
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #188
; LE-NEXT:    mov r9, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    mov r0, r5
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #236
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #252
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    ldr r0, [sp, #248]
; LE-NEXT:    mov r8, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #268
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    ldr r0, [sp, #264]
; LE-NEXT:    mov r6, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #284
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    ldr r0, [sp, #280]
; LE-NEXT:    mov r7, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #316
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    ldr r0, [sp, #312]
; LE-NEXT:    mov r5, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d15[1], r5
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    ldr r5, [sp, #300]
; LE-NEXT:    vmov.32 d14[1], r7
; LE-NEXT:    ldr r2, [sp, #304]
; LE-NEXT:    ldr r3, [sp, #308]
; LE-NEXT:    vmov.32 d11[1], r6
; LE-NEXT:    ldr r6, [sp, #200]
; LE-NEXT:    ldr r7, [sp, #204]
; LE-NEXT:    vmov.32 d10[1], r8
; LE-NEXT:    ldr r8, [sp, #344]
; LE-NEXT:    vmov.32 d9[1], r11
; LE-NEXT:    ldr r11, [sp, #216]
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    ldr r0, [sp, #296]
; LE-NEXT:    vmov.32 d8[1], r9
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vorr q5, q8, q8
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    vorr q4, q6, q6
; LE-NEXT:    vmov.32 d11[1], r1
; LE-NEXT:    mov r1, r5
; LE-NEXT:    vmov.32 d9[1], r10
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    ldr r2, [sp, #208]
; LE-NEXT:    ldr r3, [sp, #212]
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    mov r9, r1
; LE-NEXT:    mov r0, r6
; LE-NEXT:    mov r1, r7
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #220
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r0, r11
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #348
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #364
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    ldr r0, [sp, #360]
; LE-NEXT:    mov r8, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #380
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    ldr r0, [sp, #376]
; LE-NEXT:    mov r5, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #396
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    ldr r0, [sp, #392]
; LE-NEXT:    mov r6, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #332
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    ldr r0, [sp, #328]
; LE-NEXT:    mov r7, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    add r0, r4, #64
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #24
; LE-NEXT:    vmov.32 d13[1], r8
; LE-NEXT:    vmov.32 d18[1], r9
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    vmov.32 d12[1], r1
; LE-NEXT:    vmov.32 d14[1], r5
; LE-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEXT:    vmov.32 d8[1], r7
; LE-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEXT:    vst1.64 {d8, d9}, [r0:128]
; LE-NEXT:    vmov.32 d11[1], r11
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #40
; LE-NEXT:    vmov.32 d10[1], r10
; LE-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEXT:    vst1.64 {d10, d11}, [r4:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #56
; LE-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r4:128]
; LE-NEXT:    add sp, sp, #72
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v16f128:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #72
; LE-NEON-NEXT:    sub sp, sp, #72
; LE-NEON-NEXT:    mov r6, r3
; LE-NEON-NEXT:    add r3, sp, #408
; LE-NEON-NEXT:    mov r7, r2
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r5, sp, #176
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    ldm r5, {r2, r3, r5}
; LE-NEON-NEXT:    mov r1, r6
; LE-NEON-NEXT:    ldr r8, [sp, #232]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #188
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    mov r0, r5
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #236
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #252
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #248]
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #268
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #264]
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #284
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #280]
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #316
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #312]
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d15[1], r5
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    ldr r5, [sp, #300]
; LE-NEON-NEXT:    vmov.32 d14[1], r7
; LE-NEON-NEXT:    ldr r2, [sp, #304]
; LE-NEON-NEXT:    ldr r3, [sp, #308]
; LE-NEON-NEXT:    vmov.32 d11[1], r6
; LE-NEON-NEXT:    ldr r6, [sp, #200]
; LE-NEON-NEXT:    ldr r7, [sp, #204]
; LE-NEON-NEXT:    vmov.32 d10[1], r8
; LE-NEON-NEXT:    ldr r8, [sp, #344]
; LE-NEON-NEXT:    vmov.32 d9[1], r11
; LE-NEON-NEXT:    ldr r11, [sp, #216]
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #296]
; LE-NEON-NEXT:    vmov.32 d8[1], r9
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vorr q5, q8, q8
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    vorr q4, q6, q6
; LE-NEON-NEXT:    vmov.32 d11[1], r1
; LE-NEON-NEXT:    mov r1, r5
; LE-NEON-NEXT:    vmov.32 d9[1], r10
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    ldr r2, [sp, #208]
; LE-NEON-NEXT:    ldr r3, [sp, #212]
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    mov r9, r1
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    mov r1, r7
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #220
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r0, r11
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #348
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #364
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #360]
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #380
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #376]
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #396
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #392]
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #332
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #328]
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    add r0, r4, #64
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #24
; LE-NEON-NEXT:    vmov.32 d13[1], r8
; LE-NEON-NEXT:    vmov.32 d18[1], r9
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    vmov.32 d12[1], r1
; LE-NEON-NEXT:    vmov.32 d14[1], r5
; LE-NEON-NEXT:    vst1.64 {d18, d19}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEON-NEXT:    vmov.32 d8[1], r7
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d8, d9}, [r0:128]
; LE-NEON-NEXT:    vmov.32 d11[1], r11
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #40
; LE-NEON-NEXT:    vmov.32 d10[1], r10
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r4:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #56
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]
; LE-NEON-NEXT:    add sp, sp, #72
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v16f128:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #56
; BE-NEXT:    sub sp, sp, #56
; BE-NEXT:    mov r5, r3
; BE-NEXT:    add r3, sp, #376
; BE-NEXT:    mov r6, r2
; BE-NEXT:    mov r4, r0
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r7, [sp, #392]
; BE-NEXT:    add r3, sp, #396
; BE-NEXT:    mov r9, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    mov r0, r7
; BE-NEXT:    ldr r11, [sp, #168]
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r2, [sp, #160]
; BE-NEXT:    mov r10, r1
; BE-NEXT:    ldr r3, [sp, #164]
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    mov r1, r5
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #172
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    mov r0, r11
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #220
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    ldr r0, [sp, #216]
; BE-NEXT:    mov r11, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #236
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    ldr r0, [sp, #232]
; BE-NEXT:    mov r6, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #252
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    ldr r0, [sp, #248]
; BE-NEXT:    mov r7, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #268
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #264]
; BE-NEXT:    mov r5, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    ldr r0, [sp, #280]
; BE-NEXT:    ldr r2, [sp, #288]
; BE-NEXT:    vmov.32 d13[1], r7
; BE-NEXT:    ldr r7, [sp, #284]
; BE-NEXT:    ldr r3, [sp, #292]
; BE-NEXT:    vmov.32 d14[1], r5
; BE-NEXT:    ldr r5, [sp, #328]
; BE-NEXT:    vmov.32 d12[1], r6
; BE-NEXT:    ldr r6, [sp, #300]
; BE-NEXT:    vmov.32 d10[1], r8
; BE-NEXT:    ldr r8, [sp, #184]
; BE-NEXT:    vmov.32 d11[1], r11
; BE-NEXT:    vmov.32 d9[1], r10
; BE-NEXT:    vmov.32 d8[1], r9
; BE-NEXT:    vmov.32 d15[1], r1
; BE-NEXT:    mov r1, r7
; BE-NEXT:    vstr d14, [sp, #48] @ 8-byte Spill
; BE-NEXT:    vstr d13, [sp, #40] @ 8-byte Spill
; BE-NEXT:    vstr d12, [sp, #32] @ 8-byte Spill
; BE-NEXT:    vstr d11, [sp, #24] @ 8-byte Spill
; BE-NEXT:    vstr d10, [sp, #16] @ 8-byte Spill
; BE-NEXT:    vstr d9, [sp, #8] @ 8-byte Spill
; BE-NEXT:    vstr d8, [sp] @ 8-byte Spill
; BE-NEXT:    bl llrintl
; BE-NEXT:    mov r10, r1
; BE-NEXT:    ldr r1, [sp, #296]
; BE-NEXT:    ldr r2, [sp, #304]
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    ldr r3, [sp, #308]
; BE-NEXT:    mov r0, r1
; BE-NEXT:    mov r1, r6
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #332
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #188
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    mov r0, r8
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #204
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    ldr r0, [sp, #200]
; BE-NEXT:    mov r8, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #348
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    ldr r0, [sp, #344]
; BE-NEXT:    mov r5, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #364
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    ldr r0, [sp, #360]
; BE-NEXT:    mov r9, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #316
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #312]
; BE-NEXT:    mov r6, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vldr d18, [sp, #48] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d17, d15
; BE-NEXT:    vrev64.32 d16, d18
; BE-NEXT:    vldr d18, [sp, #40] @ 8-byte Reload
; BE-NEXT:    vmov.32 d24[0], r0
; BE-NEXT:    add r0, r4, #64
; BE-NEXT:    vldr d20, [sp, #32] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d19, d18
; BE-NEXT:    vmov.32 d9[1], r11
; BE-NEXT:    vmov.32 d10[1], r7
; BE-NEXT:    vrev64.32 d18, d20
; BE-NEXT:    vldr d20, [sp, #24] @ 8-byte Reload
; BE-NEXT:    vmov.32 d8[1], r10
; BE-NEXT:    vmov.32 d14[1], r6
; BE-NEXT:    vmov.32 d24[1], r1
; BE-NEXT:    vldr d22, [sp, #16] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d21, d20
; BE-NEXT:    vrev64.32 d1, d9
; BE-NEXT:    vmov.32 d13[1], r9
; BE-NEXT:    vrev64.32 d31, d10
; BE-NEXT:    vrev64.32 d20, d22
; BE-NEXT:    vldr d22, [sp, #8] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d0, d8
; BE-NEXT:    vrev64.32 d29, d14
; BE-NEXT:    vmov.32 d12[1], r5
; BE-NEXT:    vrev64.32 d30, d24
; BE-NEXT:    vrev64.32 d27, d22
; BE-NEXT:    vldr d22, [sp] @ 8-byte Reload
; BE-NEXT:    vst1.64 {d0, d1}, [r0:128]!
; BE-NEXT:    vmov.32 d11[1], r8
; BE-NEXT:    vrev64.32 d28, d13
; BE-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEXT:    vrev64.32 d26, d22
; BE-NEXT:    vrev64.32 d23, d12
; BE-NEXT:    vst1.64 {d28, d29}, [r0:128]!
; BE-NEXT:    vrev64.32 d22, d11
; BE-NEXT:    vst1.64 {d26, d27}, [r0:128]
; BE-NEXT:    vst1.64 {d20, d21}, [r4:128]!
; BE-NEXT:    vst1.64 {d22, d23}, [r4:128]!
; BE-NEXT:    vst1.64 {d18, d19}, [r4:128]!
; BE-NEXT:    vst1.64 {d16, d17}, [r4:128]
; BE-NEXT:    add sp, sp, #56
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v16f128:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #56
; BE-NEON-NEXT:    sub sp, sp, #56
; BE-NEON-NEXT:    mov r5, r3
; BE-NEON-NEXT:    add r3, sp, #376
; BE-NEON-NEXT:    mov r6, r2
; BE-NEON-NEXT:    mov r4, r0
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r7, [sp, #392]
; BE-NEON-NEXT:    add r3, sp, #396
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    ldr r11, [sp, #168]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r2, [sp, #160]
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    ldr r3, [sp, #164]
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    mov r1, r5
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #172
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    mov r0, r11
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #220
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #216]
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #236
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #232]
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #252
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #248]
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #268
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #264]
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #280]
; BE-NEON-NEXT:    ldr r2, [sp, #288]
; BE-NEON-NEXT:    vmov.32 d13[1], r7
; BE-NEON-NEXT:    ldr r7, [sp, #284]
; BE-NEON-NEXT:    ldr r3, [sp, #292]
; BE-NEON-NEXT:    vmov.32 d14[1], r5
; BE-NEON-NEXT:    ldr r5, [sp, #328]
; BE-NEON-NEXT:    vmov.32 d12[1], r6
; BE-NEON-NEXT:    ldr r6, [sp, #300]
; BE-NEON-NEXT:    vmov.32 d10[1], r8
; BE-NEON-NEXT:    ldr r8, [sp, #184]
; BE-NEON-NEXT:    vmov.32 d11[1], r11
; BE-NEON-NEXT:    vmov.32 d9[1], r10
; BE-NEON-NEXT:    vmov.32 d8[1], r9
; BE-NEON-NEXT:    vmov.32 d15[1], r1
; BE-NEON-NEXT:    mov r1, r7
; BE-NEON-NEXT:    vstr d14, [sp, #48] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d13, [sp, #40] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d12, [sp, #32] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d11, [sp, #24] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d10, [sp, #16] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #8] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d8, [sp] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    ldr r1, [sp, #296]
; BE-NEON-NEXT:    ldr r2, [sp, #304]
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    ldr r3, [sp, #308]
; BE-NEON-NEXT:    mov r0, r1
; BE-NEON-NEXT:    mov r1, r6
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #332
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #188
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    mov r0, r8
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #204
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #200]
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #348
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #344]
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #364
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #360]
; BE-NEON-NEXT:    mov r9, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #316
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #312]
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vldr d18, [sp, #48] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d17, d15
; BE-NEON-NEXT:    vrev64.32 d16, d18
; BE-NEON-NEXT:    vldr d18, [sp, #40] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d24[0], r0
; BE-NEON-NEXT:    add r0, r4, #64
; BE-NEON-NEXT:    vldr d20, [sp, #32] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d19, d18
; BE-NEON-NEXT:    vmov.32 d9[1], r11
; BE-NEON-NEXT:    vmov.32 d10[1], r7
; BE-NEON-NEXT:    vrev64.32 d18, d20
; BE-NEON-NEXT:    vldr d20, [sp, #24] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d8[1], r10
; BE-NEON-NEXT:    vmov.32 d14[1], r6
; BE-NEON-NEXT:    vmov.32 d24[1], r1
; BE-NEON-NEXT:    vldr d22, [sp, #16] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d21, d20
; BE-NEON-NEXT:    vrev64.32 d1, d9
; BE-NEON-NEXT:    vmov.32 d13[1], r9
; BE-NEON-NEXT:    vrev64.32 d31, d10
; BE-NEON-NEXT:    vrev64.32 d20, d22
; BE-NEON-NEXT:    vldr d22, [sp, #8] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d0, d8
; BE-NEON-NEXT:    vrev64.32 d29, d14
; BE-NEON-NEXT:    vmov.32 d12[1], r5
; BE-NEON-NEXT:    vrev64.32 d30, d24
; BE-NEON-NEXT:    vrev64.32 d27, d22
; BE-NEON-NEXT:    vldr d22, [sp] @ 8-byte Reload
; BE-NEON-NEXT:    vst1.64 {d0, d1}, [r0:128]!
; BE-NEON-NEXT:    vmov.32 d11[1], r8
; BE-NEON-NEXT:    vrev64.32 d28, d13
; BE-NEON-NEXT:    vst1.64 {d30, d31}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d26, d22
; BE-NEON-NEXT:    vrev64.32 d23, d12
; BE-NEON-NEXT:    vst1.64 {d28, d29}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d22, d11
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r0:128]
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r4:128]!
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r4:128]!
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r4:128]!
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r4:128]
; BE-NEON-NEXT:    add sp, sp, #56
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <16 x i64> @llvm.llrint.v16i64.v16f128(<16 x fp128> %x)
  ret <16 x i64> %a
}
declare <16 x i64> @llvm.llrint.v16i64.v16f128(<16 x fp128>)

define <32 x i64> @llrint_v32f128(<32 x fp128> %x) {
; LE-LABEL: llrint_v32f128:
; LE:       @ %bb.0:
; LE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEXT:    .pad #4
; LE-NEXT:    sub sp, sp, #4
; LE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    .pad #192
; LE-NEXT:    sub sp, sp, #192
; LE-NEXT:    str r3, [sp, #60] @ 4-byte Spill
; LE-NEXT:    add r3, sp, #688
; LE-NEXT:    str r2, [sp, #56] @ 4-byte Spill
; LE-NEXT:    mov r9, r0
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #560
; LE-NEXT:    mov r4, r0
; LE-NEXT:    str r1, [sp, #64] @ 4-byte Spill
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    ldr r7, [sp, #544]
; LE-NEXT:    ldr r6, [sp, #548]
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    ldr r2, [sp, #552]
; LE-NEXT:    vmov.32 d17[1], r1
; LE-NEXT:    ldr r3, [sp, #556]
; LE-NEXT:    mov r0, r7
; LE-NEXT:    mov r1, r6
; LE-NEXT:    vorr q4, q8, q8
; LE-NEXT:    ldr r5, [sp, #528]
; LE-NEXT:    vmov.32 d17[0], r4
; LE-NEXT:    ldr r10, [sp, #304]
; LE-NEXT:    ldr r8, [sp, #368]
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #532
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    mov r11, r1
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    mov r0, r5
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #308
; LE-NEXT:    mov r5, r1
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vmov.32 d17[0], r0
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    mov r0, r10
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #372
; LE-NEXT:    mov r10, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #404
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    ldr r0, [sp, #400]
; LE-NEXT:    mov r6, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #596
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    ldr r0, [sp, #592]
; LE-NEXT:    mov r7, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #676
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    ldr r0, [sp, #672]
; LE-NEXT:    mov r4, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    vmov.32 d13[1], r4
; LE-NEXT:    str r1, [sp, #52] @ 4-byte Spill
; LE-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    vmov.32 d9[1], r7
; LE-NEXT:    ldr r1, [sp, #628]
; LE-NEXT:    ldr r2, [sp, #632]
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    ldr r3, [sp, #636]
; LE-NEXT:    ldr r7, [sp, #64] @ 4-byte Reload
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vmov.32 d11[1], r10
; LE-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d18[0], r0
; LE-NEXT:    ldr r0, [sp, #624]
; LE-NEXT:    vmov.32 d16[1], r11
; LE-NEXT:    vmov.32 d9[1], r5
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    vmov.32 d19[1], r7
; LE-NEXT:    vstmia lr, {d18, d19} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #512
; LE-NEXT:    str r0, [sp, #48] @ 4-byte Spill
; LE-NEXT:    str r1, [sp, #64] @ 4-byte Spill
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #768
; LE-NEXT:    mov r11, r0
; LE-NEXT:    str r1, [sp, #28] @ 4-byte Spill
; LE-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    ldr r6, [sp, #784]
; LE-NEXT:    add r3, sp, #788
; LE-NEXT:    mov r8, r1
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    mov r0, r6
; LE-NEXT:    ldr r5, [sp, #736]
; LE-NEXT:    ldr r7, [sp, #752]
; LE-NEXT:    ldr r4, [sp, #720]
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #740
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    mov r0, r5
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #756
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #724
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r4
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d13[1], r7
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    ldr r2, [sp, #296]
; LE-NEXT:    vmov.32 d12[1], r5
; LE-NEXT:    ldr r3, [sp, #300]
; LE-NEXT:    ldr r4, [sp, #576]
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    ldr r0, [sp, #56] @ 4-byte Reload
; LE-NEXT:    ldr r10, [sp, #384]
; LE-NEXT:    vmov.32 d15[1], r6
; LE-NEXT:    ldr r6, [sp, #352]
; LE-NEXT:    vmov.32 d14[1], r8
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    vmov.32 d11[1], r1
; LE-NEXT:    ldr r1, [sp, #60] @ 4-byte Reload
; LE-NEXT:    vmov.32 d8[0], r11
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    add r3, sp, #356
; LE-NEXT:    mov r5, r1
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    vmov.32 d16[0], r0
; LE-NEXT:    mov r0, r6
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    add r3, sp, #388
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    mov r0, r10
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    add r3, sp, #580
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    mov r0, r4
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    add r3, sp, #708
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    ldr r0, [sp, #704]
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d8[1], r4
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    ldr r2, [sp, #52] @ 4-byte Reload
; LE-NEXT:    vmov.32 d12[1], r6
; LE-NEXT:    ldr r6, [sp, #644]
; LE-NEXT:    ldr r3, [sp, #652]
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    vmov.32 d14[1], r7
; LE-NEXT:    ldr r4, [sp, #480]
; LE-NEXT:    ldr r7, [sp, #656]
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    ldr r0, [sp, #28] @ 4-byte Reload
; LE-NEXT:    ldr r10, [sp, #496]
; LE-NEXT:    vmov.32 d16[1], r5
; LE-NEXT:    add r5, r9, #192
; LE-NEXT:    ldr r8, [sp, #608]
; LE-NEXT:    vmov.32 d10[1], r1
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vmov.32 d16[1], r0
; LE-NEXT:    ldr r0, [sp, #640]
; LE-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #8
; LE-NEXT:    vmov.32 d16[1], r2
; LE-NEXT:    ldr r2, [sp, #648]
; LE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; LE-NEXT:    vst1.64 {d10, d11}, [r5:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; LE-NEXT:    ldr r1, [sp, #48] @ 4-byte Reload
; LE-NEXT:    vmov.32 d9[0], r1
; LE-NEXT:    mov r1, r6
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #660
; LE-NEXT:    mov r11, r1
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    mov r0, r7
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #484
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r4
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #500
; LE-NEXT:    mov r6, r1
; LE-NEXT:    vmov.32 d10[0], r0
; LE-NEXT:    mov r0, r10
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #612
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d11[0], r0
; LE-NEXT:    mov r0, r8
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    ldr r0, [sp, #64] @ 4-byte Reload
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    add r8, r9, #128
; LE-NEXT:    vmov.32 d13[1], r7
; LE-NEXT:    ldr r2, [sp, #344]
; LE-NEXT:    ldr r3, [sp, #348]
; LE-NEXT:    vmov.32 d12[1], r11
; LE-NEXT:    ldr r7, [sp, #452]
; LE-NEXT:    ldr r10, [sp, #416]
; LE-NEXT:    vmov.32 d9[1], r0
; LE-NEXT:    ldr r0, [sp, #336]
; LE-NEXT:    vmov.32 d8[1], r1
; LE-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #64
; LE-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEXT:    add lr, sp, #32
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #144
; LE-NEXT:    vmov.32 d11[1], r4
; LE-NEXT:    ldr r4, [sp, #340]
; LE-NEXT:    vst1.64 {d16, d17}, [r5:128]
; LE-NEXT:    mov r1, r4
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #80
; LE-NEXT:    vmov.32 d10[1], r6
; LE-NEXT:    ldr r6, [sp, #448]
; LE-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; LE-NEXT:    bl llrintl
; LE-NEXT:    ldr r2, [sp, #456]
; LE-NEXT:    mov r11, r1
; LE-NEXT:    ldr r3, [sp, #460]
; LE-NEXT:    vmov.32 d15[0], r0
; LE-NEXT:    mov r0, r6
; LE-NEXT:    mov r1, r7
; LE-NEXT:    ldr r5, [sp, #432]
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #468
; LE-NEXT:    vmov.32 d12[0], r0
; LE-NEXT:    ldr r0, [sp, #464]
; LE-NEXT:    mov r6, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #420
; LE-NEXT:    mov r7, r1
; LE-NEXT:    vmov.32 d13[0], r0
; LE-NEXT:    mov r0, r10
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #436
; LE-NEXT:    mov r4, r1
; LE-NEXT:    vmov.32 d8[0], r0
; LE-NEXT:    mov r0, r5
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add r3, sp, #324
; LE-NEXT:    vmov.32 d9[0], r0
; LE-NEXT:    ldr r0, [sp, #320]
; LE-NEXT:    mov r5, r1
; LE-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEXT:    bl llrintl
; LE-NEXT:    add lr, sp, #64
; LE-NEXT:    vmov.32 d9[1], r5
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #96
; LE-NEXT:    vmov.32 d13[1], r7
; LE-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #176
; LE-NEXT:    vmov.32 d8[1], r4
; LE-NEXT:    vmov.32 d12[1], r6
; LE-NEXT:    vmov.32 d14[0], r0
; LE-NEXT:    add r0, r9, #64
; LE-NEXT:    vst1.64 {d16, d17}, [r8:128]
; LE-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #160
; LE-NEXT:    vmov.32 d15[1], r11
; LE-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #112
; LE-NEXT:    vmov.32 d14[1], r1
; LE-NEXT:    vst1.64 {d16, d17}, [r9:128]!
; LE-NEXT:    vst1.64 {d14, d15}, [r9:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    add lr, sp, #128
; LE-NEXT:    vst1.64 {d16, d17}, [r9:128]!
; LE-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEXT:    vst1.64 {d16, d17}, [r9:128]
; LE-NEXT:    add sp, sp, #192
; LE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEXT:    add sp, sp, #4
; LE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; LE-NEON-LABEL: llrint_v32f128:
; LE-NEON:       @ %bb.0:
; LE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; LE-NEON-NEXT:    .pad #4
; LE-NEON-NEXT:    sub sp, sp, #4
; LE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    .pad #192
; LE-NEON-NEXT:    sub sp, sp, #192
; LE-NEON-NEXT:    str r3, [sp, #60] @ 4-byte Spill
; LE-NEON-NEXT:    add r3, sp, #688
; LE-NEON-NEXT:    str r2, [sp, #56] @ 4-byte Spill
; LE-NEON-NEXT:    mov r9, r0
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #560
; LE-NEON-NEXT:    mov r4, r0
; LE-NEON-NEXT:    str r1, [sp, #64] @ 4-byte Spill
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    ldr r7, [sp, #544]
; LE-NEON-NEXT:    ldr r6, [sp, #548]
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    ldr r2, [sp, #552]
; LE-NEON-NEXT:    vmov.32 d17[1], r1
; LE-NEON-NEXT:    ldr r3, [sp, #556]
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    mov r1, r6
; LE-NEON-NEXT:    vorr q4, q8, q8
; LE-NEON-NEXT:    ldr r5, [sp, #528]
; LE-NEON-NEXT:    vmov.32 d17[0], r4
; LE-NEON-NEXT:    ldr r10, [sp, #304]
; LE-NEON-NEXT:    ldr r8, [sp, #368]
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #532
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    mov r0, r5
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #308
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vmov.32 d17[0], r0
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    mov r0, r10
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #372
; LE-NEON-NEXT:    mov r10, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #404
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #400]
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #596
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #592]
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #676
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #672]
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    vmov.32 d13[1], r4
; LE-NEON-NEXT:    str r1, [sp, #52] @ 4-byte Spill
; LE-NEON-NEXT:    vldmia lr, {d18, d19} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    vmov.32 d9[1], r7
; LE-NEON-NEXT:    ldr r1, [sp, #628]
; LE-NEON-NEXT:    ldr r2, [sp, #632]
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    ldr r3, [sp, #636]
; LE-NEON-NEXT:    ldr r7, [sp, #64] @ 4-byte Reload
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vmov.32 d11[1], r10
; LE-NEON-NEXT:    vstmia lr, {d10, d11} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d18[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #624]
; LE-NEON-NEXT:    vmov.32 d16[1], r11
; LE-NEON-NEXT:    vmov.32 d9[1], r5
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    vmov.32 d19[1], r7
; LE-NEON-NEXT:    vstmia lr, {d18, d19} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #512
; LE-NEON-NEXT:    str r0, [sp, #48] @ 4-byte Spill
; LE-NEON-NEXT:    str r1, [sp, #64] @ 4-byte Spill
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #768
; LE-NEON-NEXT:    mov r11, r0
; LE-NEON-NEXT:    str r1, [sp, #28] @ 4-byte Spill
; LE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    ldr r6, [sp, #784]
; LE-NEON-NEXT:    add r3, sp, #788
; LE-NEON-NEXT:    mov r8, r1
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    ldr r5, [sp, #736]
; LE-NEON-NEXT:    ldr r7, [sp, #752]
; LE-NEON-NEXT:    ldr r4, [sp, #720]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #740
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    mov r0, r5
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #756
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #724
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r4
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d13[1], r7
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    ldr r2, [sp, #296]
; LE-NEON-NEXT:    vmov.32 d12[1], r5
; LE-NEON-NEXT:    ldr r3, [sp, #300]
; LE-NEON-NEXT:    ldr r4, [sp, #576]
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #56] @ 4-byte Reload
; LE-NEON-NEXT:    ldr r10, [sp, #384]
; LE-NEON-NEXT:    vmov.32 d15[1], r6
; LE-NEON-NEXT:    ldr r6, [sp, #352]
; LE-NEON-NEXT:    vmov.32 d14[1], r8
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    vmov.32 d11[1], r1
; LE-NEON-NEXT:    ldr r1, [sp, #60] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d8[0], r11
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    add r3, sp, #356
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    vmov.32 d16[0], r0
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    add r3, sp, #388
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vldmia lr, {d14, d15} @ 16-byte Reload
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    mov r0, r10
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    add r3, sp, #580
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vldmia lr, {d12, d13} @ 16-byte Reload
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    mov r0, r4
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    add r3, sp, #708
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vldmia lr, {d8, d9} @ 16-byte Reload
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #704]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d8[1], r4
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    ldr r2, [sp, #52] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d12[1], r6
; LE-NEON-NEXT:    ldr r6, [sp, #644]
; LE-NEON-NEXT:    ldr r3, [sp, #652]
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    vmov.32 d14[1], r7
; LE-NEON-NEXT:    ldr r4, [sp, #480]
; LE-NEON-NEXT:    ldr r7, [sp, #656]
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    vstmia lr, {d14, d15} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #28] @ 4-byte Reload
; LE-NEON-NEXT:    ldr r10, [sp, #496]
; LE-NEON-NEXT:    vmov.32 d16[1], r5
; LE-NEON-NEXT:    add r5, r9, #192
; LE-NEON-NEXT:    ldr r8, [sp, #608]
; LE-NEON-NEXT:    vmov.32 d10[1], r1
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vmov.32 d16[1], r0
; LE-NEON-NEXT:    ldr r0, [sp, #640]
; LE-NEON-NEXT:    vstmia lr, {d16, d17} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #8
; LE-NEON-NEXT:    vmov.32 d16[1], r2
; LE-NEON-NEXT:    ldr r2, [sp, #648]
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r5:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]!
; LE-NEON-NEXT:    ldr r1, [sp, #48] @ 4-byte Reload
; LE-NEON-NEXT:    vmov.32 d9[0], r1
; LE-NEON-NEXT:    mov r1, r6
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #660
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    mov r0, r7
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #484
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r4
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #500
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    vmov.32 d10[0], r0
; LE-NEON-NEXT:    mov r0, r10
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #612
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d11[0], r0
; LE-NEON-NEXT:    mov r0, r8
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #64] @ 4-byte Reload
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    add r8, r9, #128
; LE-NEON-NEXT:    vmov.32 d13[1], r7
; LE-NEON-NEXT:    ldr r2, [sp, #344]
; LE-NEON-NEXT:    ldr r3, [sp, #348]
; LE-NEON-NEXT:    vmov.32 d12[1], r11
; LE-NEON-NEXT:    ldr r7, [sp, #452]
; LE-NEON-NEXT:    ldr r10, [sp, #416]
; LE-NEON-NEXT:    vmov.32 d9[1], r0
; LE-NEON-NEXT:    ldr r0, [sp, #336]
; LE-NEON-NEXT:    vmov.32 d8[1], r1
; LE-NEON-NEXT:    vstmia lr, {d12, d13} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #64
; LE-NEON-NEXT:    vstmia lr, {d8, d9} @ 16-byte Spill
; LE-NEON-NEXT:    add lr, sp, #32
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #144
; LE-NEON-NEXT:    vmov.32 d11[1], r4
; LE-NEON-NEXT:    ldr r4, [sp, #340]
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r5:128]
; LE-NEON-NEXT:    mov r1, r4
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #80
; LE-NEON-NEXT:    vmov.32 d10[1], r6
; LE-NEON-NEXT:    ldr r6, [sp, #448]
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    ldr r2, [sp, #456]
; LE-NEON-NEXT:    mov r11, r1
; LE-NEON-NEXT:    ldr r3, [sp, #460]
; LE-NEON-NEXT:    vmov.32 d15[0], r0
; LE-NEON-NEXT:    mov r0, r6
; LE-NEON-NEXT:    mov r1, r7
; LE-NEON-NEXT:    ldr r5, [sp, #432]
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #468
; LE-NEON-NEXT:    vmov.32 d12[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #464]
; LE-NEON-NEXT:    mov r6, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #420
; LE-NEON-NEXT:    mov r7, r1
; LE-NEON-NEXT:    vmov.32 d13[0], r0
; LE-NEON-NEXT:    mov r0, r10
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #436
; LE-NEON-NEXT:    mov r4, r1
; LE-NEON-NEXT:    vmov.32 d8[0], r0
; LE-NEON-NEXT:    mov r0, r5
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add r3, sp, #324
; LE-NEON-NEXT:    vmov.32 d9[0], r0
; LE-NEON-NEXT:    ldr r0, [sp, #320]
; LE-NEON-NEXT:    mov r5, r1
; LE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; LE-NEON-NEXT:    bl llrintl
; LE-NEON-NEXT:    add lr, sp, #64
; LE-NEON-NEXT:    vmov.32 d9[1], r5
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #96
; LE-NEON-NEXT:    vmov.32 d13[1], r7
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #176
; LE-NEON-NEXT:    vmov.32 d8[1], r4
; LE-NEON-NEXT:    vmov.32 d12[1], r6
; LE-NEON-NEXT:    vmov.32 d14[0], r0
; LE-NEON-NEXT:    add r0, r9, #64
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r8:128]
; LE-NEON-NEXT:    vst1.64 {d8, d9}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d12, d13}, [r0:128]!
; LE-NEON-NEXT:    vst1.64 {d10, d11}, [r0:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #160
; LE-NEON-NEXT:    vmov.32 d15[1], r11
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r0:128]
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #112
; LE-NEON-NEXT:    vmov.32 d14[1], r1
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r9:128]!
; LE-NEON-NEXT:    vst1.64 {d14, d15}, [r9:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    add lr, sp, #128
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r9:128]!
; LE-NEON-NEXT:    vldmia lr, {d16, d17} @ 16-byte Reload
; LE-NEON-NEXT:    vst1.64 {d16, d17}, [r9:128]
; LE-NEON-NEXT:    add sp, sp, #192
; LE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; LE-NEON-NEXT:    add sp, sp, #4
; LE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-LABEL: llrint_v32f128:
; BE:       @ %bb.0:
; BE-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEXT:    .pad #4
; BE-NEXT:    sub sp, sp, #4
; BE-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    .pad #152
; BE-NEXT:    sub sp, sp, #152
; BE-NEXT:    str r3, [sp, #120] @ 4-byte Spill
; BE-NEXT:    add r3, sp, #712
; BE-NEXT:    str r2, [sp, #112] @ 4-byte Spill
; BE-NEXT:    mov r9, r0
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r7, [sp, #648]
; BE-NEXT:    add r3, sp, #652
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    mov r0, r7
; BE-NEXT:    ldr r6, [sp, #520]
; BE-NEXT:    ldr r8, [sp, #632]
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #524
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #636
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r8
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    ldr r0, [sp, #488]
; BE-NEXT:    vmov.32 d8[1], r4
; BE-NEXT:    ldr r1, [sp, #492]
; BE-NEXT:    ldr r2, [sp, #496]
; BE-NEXT:    vmov.32 d10[1], r7
; BE-NEXT:    ldr r3, [sp, #500]
; BE-NEXT:    vmov.32 d9[1], r5
; BE-NEXT:    vstr d8, [sp, #144] @ 8-byte Spill
; BE-NEXT:    vstr d10, [sp, #136] @ 8-byte Spill
; BE-NEXT:    vstr d9, [sp, #128] @ 8-byte Spill
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #680
; BE-NEXT:    str r0, [sp, #104] @ 4-byte Spill
; BE-NEXT:    str r1, [sp, #88] @ 4-byte Spill
; BE-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    ldr r0, [sp, #728]
; BE-NEXT:    ldr r2, [sp, #736]
; BE-NEXT:    vmov.32 d11[1], r6
; BE-NEXT:    ldr r6, [sp, #732]
; BE-NEXT:    ldr r3, [sp, #740]
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    ldr r5, [sp, #504]
; BE-NEXT:    mov r1, r6
; BE-NEXT:    ldr r7, [sp, #744]
; BE-NEXT:    ldr r4, [sp, #748]
; BE-NEXT:    vstr d11, [sp, #24] @ 8-byte Spill
; BE-NEXT:    vstr d16, [sp, #8] @ 8-byte Spill
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r2, [sp, #752]
; BE-NEXT:    mov r11, r1
; BE-NEXT:    ldr r3, [sp, #756]
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    mov r0, r7
; BE-NEXT:    mov r1, r4
; BE-NEXT:    ldr r10, [sp, #552]
; BE-NEXT:    ldr r6, [sp, #664]
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #508
; BE-NEXT:    mov r8, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #540
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    ldr r0, [sp, #536]
; BE-NEXT:    mov r7, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #556
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    mov r0, r10
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #668
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #700
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #696]
; BE-NEXT:    mov r6, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    ldr r0, [sp, #104] @ 4-byte Reload
; BE-NEXT:    ldr r2, [sp, #256]
; BE-NEXT:    vmov.32 d13[1], r11
; BE-NEXT:    ldr r3, [sp, #260]
; BE-NEXT:    vmov.32 d14[1], r6
; BE-NEXT:    ldr r6, [sp, #264]
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    ldr r4, [sp, #344]
; BE-NEXT:    vmov.32 d12[1], r5
; BE-NEXT:    ldr r5, [sp, #312]
; BE-NEXT:    vmov.32 d8[1], r8
; BE-NEXT:    ldr r8, [sp, #328]
; BE-NEXT:    vmov.32 d10[1], r7
; BE-NEXT:    vstr d13, [sp, #32] @ 8-byte Spill
; BE-NEXT:    vmov.32 d11[1], r1
; BE-NEXT:    ldr r1, [sp, #120] @ 4-byte Reload
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    ldr r0, [sp, #112] @ 4-byte Reload
; BE-NEXT:    vstr d14, [sp] @ 8-byte Spill
; BE-NEXT:    vstr d9, [sp, #16] @ 8-byte Spill
; BE-NEXT:    vstr d12, [sp, #56] @ 8-byte Spill
; BE-NEXT:    vstr d10, [sp, #64] @ 8-byte Spill
; BE-NEXT:    vstr d8, [sp, #40] @ 8-byte Spill
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #268
; BE-NEXT:    mov r11, r1
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #316
; BE-NEXT:    mov r10, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #332
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    mov r0, r8
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #348
; BE-NEXT:    mov r5, r1
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #364
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    ldr r0, [sp, #360]
; BE-NEXT:    mov r4, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #476
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    ldr r0, [sp, #472]
; BE-NEXT:    mov r6, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vmov.32 d16[0], r0
; BE-NEXT:    ldr r0, [sp, #88] @ 4-byte Reload
; BE-NEXT:    ldr r2, [sp, #592]
; BE-NEXT:    vldr d20, [sp, #136] @ 8-byte Reload
; BE-NEXT:    vmov.32 d16[1], r1
; BE-NEXT:    ldr r1, [sp, #588]
; BE-NEXT:    ldr r3, [sp, #596]
; BE-NEXT:    vldr d22, [sp, #24] @ 8-byte Reload
; BE-NEXT:    vldr d18, [sp, #8] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d21, d20
; BE-NEXT:    vmov.32 d10[1], r6
; BE-NEXT:    ldr r6, [sp, #600]
; BE-NEXT:    vmov.32 d9[1], r4
; BE-NEXT:    ldr r4, [sp, #616]
; BE-NEXT:    vmov.32 d12[1], r7
; BE-NEXT:    ldr r7, [sp, #604]
; BE-NEXT:    vmov.32 d8[1], r10
; BE-NEXT:    add r10, r9, #192
; BE-NEXT:    vmov.32 d14[1], r11
; BE-NEXT:    ldr r11, [sp, #440]
; BE-NEXT:    vmov.32 d13[1], r0
; BE-NEXT:    ldr r0, [sp, #584]
; BE-NEXT:    vmov.32 d15[1], r5
; BE-NEXT:    vstr d16, [sp, #48] @ 8-byte Spill
; BE-NEXT:    vldr d16, [sp, #128] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d20, d22
; BE-NEXT:    vldr d22, [sp] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d19, d18
; BE-NEXT:    vrev64.32 d17, d16
; BE-NEXT:    vrev64.32 d18, d22
; BE-NEXT:    vstr d10, [sp, #120] @ 8-byte Spill
; BE-NEXT:    vstr d9, [sp, #112] @ 8-byte Spill
; BE-NEXT:    vstr d15, [sp, #104] @ 8-byte Spill
; BE-NEXT:    vstr d12, [sp, #96] @ 8-byte Spill
; BE-NEXT:    vstr d8, [sp, #80] @ 8-byte Spill
; BE-NEXT:    vstr d14, [sp, #72] @ 8-byte Spill
; BE-NEXT:    vstr d13, [sp, #88] @ 8-byte Spill
; BE-NEXT:    vst1.64 {d20, d21}, [r10:128]!
; BE-NEXT:    vrev64.32 d16, d11
; BE-NEXT:    vst1.64 {d18, d19}, [r10:128]!
; BE-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r2, [sp, #608]
; BE-NEXT:    mov r8, r1
; BE-NEXT:    ldr r3, [sp, #612]
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    mov r1, r7
; BE-NEXT:    ldr r5, [sp, #456]
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #620
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #444
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    mov r0, r11
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #460
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d11[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #572
; BE-NEXT:    vmov.32 d13[0], r0
; BE-NEXT:    ldr r0, [sp, #568]
; BE-NEXT:    mov r5, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vldr d16, [sp, #16] @ 8-byte Reload
; BE-NEXT:    vldr d18, [sp, #56] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d17, d16
; BE-NEXT:    ldr r2, [sp, #304]
; BE-NEXT:    vrev64.32 d16, d18
; BE-NEXT:    ldr r3, [sp, #308]
; BE-NEXT:    vldr d18, [sp, #144] @ 8-byte Reload
; BE-NEXT:    vldr d20, [sp, #64] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d19, d18
; BE-NEXT:    vrev64.32 d18, d20
; BE-NEXT:    vldr d20, [sp, #40] @ 8-byte Reload
; BE-NEXT:    vldr d22, [sp, #32] @ 8-byte Reload
; BE-NEXT:    vmov.32 d14[0], r0
; BE-NEXT:    ldr r0, [sp, #296]
; BE-NEXT:    vmov.32 d10[1], r7
; BE-NEXT:    ldr r7, [sp, #412]
; BE-NEXT:    vmov.32 d9[1], r6
; BE-NEXT:    ldr r6, [sp, #408]
; BE-NEXT:    vmov.32 d8[1], r8
; BE-NEXT:    add r8, r9, #128
; BE-NEXT:    vrev64.32 d21, d20
; BE-NEXT:    vmov.32 d13[1], r5
; BE-NEXT:    ldr r5, [sp, #300]
; BE-NEXT:    vrev64.32 d20, d22
; BE-NEXT:    vmov.32 d14[1], r1
; BE-NEXT:    mov r1, r5
; BE-NEXT:    vstr d10, [sp, #136] @ 8-byte Spill
; BE-NEXT:    vstr d9, [sp, #128] @ 8-byte Spill
; BE-NEXT:    vstr d8, [sp, #24] @ 8-byte Spill
; BE-NEXT:    vst1.64 {d20, d21}, [r10:128]
; BE-NEXT:    vst1.64 {d18, d19}, [r8:128]!
; BE-NEXT:    vmov.32 d11[1], r4
; BE-NEXT:    ldr r4, [sp, #424]
; BE-NEXT:    ldr r10, [sp, #376]
; BE-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; BE-NEXT:    bl llrintl
; BE-NEXT:    ldr r2, [sp, #416]
; BE-NEXT:    mov r11, r1
; BE-NEXT:    ldr r3, [sp, #420]
; BE-NEXT:    vmov.32 d15[0], r0
; BE-NEXT:    mov r0, r6
; BE-NEXT:    mov r1, r7
; BE-NEXT:    ldr r5, [sp, #392]
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #428
; BE-NEXT:    mov r6, r1
; BE-NEXT:    vmov.32 d8[0], r0
; BE-NEXT:    mov r0, r4
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #380
; BE-NEXT:    mov r7, r1
; BE-NEXT:    vmov.32 d9[0], r0
; BE-NEXT:    mov r0, r10
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #396
; BE-NEXT:    mov r4, r1
; BE-NEXT:    vmov.32 d12[0], r0
; BE-NEXT:    mov r0, r5
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    add r3, sp, #284
; BE-NEXT:    vmov.32 d10[0], r0
; BE-NEXT:    ldr r0, [sp, #280]
; BE-NEXT:    mov r5, r1
; BE-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEXT:    bl llrintl
; BE-NEXT:    vldr d16, [sp, #120] @ 8-byte Reload
; BE-NEXT:    vldr d18, [sp, #112] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d17, d16
; BE-NEXT:    vldr d26, [sp, #136] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d16, d18
; BE-NEXT:    vldr d18, [sp, #104] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d31, d26
; BE-NEXT:    vldr d26, [sp, #128] @ 8-byte Reload
; BE-NEXT:    vldr d20, [sp, #96] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d19, d18
; BE-NEXT:    vrev64.32 d18, d20
; BE-NEXT:    vldr d20, [sp, #80] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d30, d26
; BE-NEXT:    vldr d26, [sp, #24] @ 8-byte Reload
; BE-NEXT:    vmov.32 d10[1], r5
; BE-NEXT:    vldr d22, [sp, #72] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d21, d20
; BE-NEXT:    vrev64.32 d1, d26
; BE-NEXT:    vmov.32 d9[1], r7
; BE-NEXT:    vmov.32 d12[1], r4
; BE-NEXT:    vrev64.32 d20, d22
; BE-NEXT:    vldr d22, [sp, #88] @ 8-byte Reload
; BE-NEXT:    vmov.32 d8[1], r6
; BE-NEXT:    vrev64.32 d0, d14
; BE-NEXT:    vmov.32 d28[0], r0
; BE-NEXT:    add r0, r9, #64
; BE-NEXT:    vrev64.32 d3, d10
; BE-NEXT:    vldr d24, [sp, #48] @ 8-byte Reload
; BE-NEXT:    vrev64.32 d23, d22
; BE-NEXT:    vrev64.32 d5, d9
; BE-NEXT:    vst1.64 {d0, d1}, [r8:128]!
; BE-NEXT:    vrev64.32 d2, d12
; BE-NEXT:    vmov.32 d15[1], r11
; BE-NEXT:    vrev64.32 d22, d24
; BE-NEXT:    vrev64.32 d25, d13
; BE-NEXT:    vrev64.32 d4, d8
; BE-NEXT:    vst1.64 {d30, d31}, [r8:128]
; BE-NEXT:    vst1.64 {d2, d3}, [r0:128]!
; BE-NEXT:    vmov.32 d28[1], r1
; BE-NEXT:    vrev64.32 d24, d11
; BE-NEXT:    vst1.64 {d4, d5}, [r0:128]!
; BE-NEXT:    vrev64.32 d27, d15
; BE-NEXT:    vst1.64 {d24, d25}, [r0:128]!
; BE-NEXT:    vrev64.32 d26, d28
; BE-NEXT:    vst1.64 {d22, d23}, [r0:128]
; BE-NEXT:    vst1.64 {d20, d21}, [r9:128]!
; BE-NEXT:    vst1.64 {d26, d27}, [r9:128]!
; BE-NEXT:    vst1.64 {d18, d19}, [r9:128]!
; BE-NEXT:    vst1.64 {d16, d17}, [r9:128]
; BE-NEXT:    add sp, sp, #152
; BE-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEXT:    add sp, sp, #4
; BE-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; BE-NEON-LABEL: llrint_v32f128:
; BE-NEON:       @ %bb.0:
; BE-NEON-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; BE-NEON-NEXT:    .pad #4
; BE-NEON-NEXT:    sub sp, sp, #4
; BE-NEON-NEXT:    .vsave {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    vpush {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    .pad #152
; BE-NEON-NEXT:    sub sp, sp, #152
; BE-NEON-NEXT:    str r3, [sp, #120] @ 4-byte Spill
; BE-NEON-NEXT:    add r3, sp, #712
; BE-NEON-NEXT:    str r2, [sp, #112] @ 4-byte Spill
; BE-NEON-NEXT:    mov r9, r0
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r7, [sp, #648]
; BE-NEON-NEXT:    add r3, sp, #652
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    ldr r6, [sp, #520]
; BE-NEON-NEXT:    ldr r8, [sp, #632]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #524
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #636
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r8
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #488]
; BE-NEON-NEXT:    vmov.32 d8[1], r4
; BE-NEON-NEXT:    ldr r1, [sp, #492]
; BE-NEON-NEXT:    ldr r2, [sp, #496]
; BE-NEON-NEXT:    vmov.32 d10[1], r7
; BE-NEON-NEXT:    ldr r3, [sp, #500]
; BE-NEON-NEXT:    vmov.32 d9[1], r5
; BE-NEON-NEXT:    vstr d8, [sp, #144] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d10, [sp, #136] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #128] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #680
; BE-NEON-NEXT:    str r0, [sp, #104] @ 4-byte Spill
; BE-NEON-NEXT:    str r1, [sp, #88] @ 4-byte Spill
; BE-NEON-NEXT:    ldm r3, {r0, r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #728]
; BE-NEON-NEXT:    ldr r2, [sp, #736]
; BE-NEON-NEXT:    vmov.32 d11[1], r6
; BE-NEON-NEXT:    ldr r6, [sp, #732]
; BE-NEON-NEXT:    ldr r3, [sp, #740]
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    ldr r5, [sp, #504]
; BE-NEON-NEXT:    mov r1, r6
; BE-NEON-NEXT:    ldr r7, [sp, #744]
; BE-NEON-NEXT:    ldr r4, [sp, #748]
; BE-NEON-NEXT:    vstr d11, [sp, #24] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d16, [sp, #8] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r2, [sp, #752]
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    ldr r3, [sp, #756]
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    mov r0, r7
; BE-NEON-NEXT:    mov r1, r4
; BE-NEON-NEXT:    ldr r10, [sp, #552]
; BE-NEON-NEXT:    ldr r6, [sp, #664]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #508
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #540
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #536]
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #556
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    mov r0, r10
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #668
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #700
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #696]
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #104] @ 4-byte Reload
; BE-NEON-NEXT:    ldr r2, [sp, #256]
; BE-NEON-NEXT:    vmov.32 d13[1], r11
; BE-NEON-NEXT:    ldr r3, [sp, #260]
; BE-NEON-NEXT:    vmov.32 d14[1], r6
; BE-NEON-NEXT:    ldr r6, [sp, #264]
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    ldr r4, [sp, #344]
; BE-NEON-NEXT:    vmov.32 d12[1], r5
; BE-NEON-NEXT:    ldr r5, [sp, #312]
; BE-NEON-NEXT:    vmov.32 d8[1], r8
; BE-NEON-NEXT:    ldr r8, [sp, #328]
; BE-NEON-NEXT:    vmov.32 d10[1], r7
; BE-NEON-NEXT:    vstr d13, [sp, #32] @ 8-byte Spill
; BE-NEON-NEXT:    vmov.32 d11[1], r1
; BE-NEON-NEXT:    ldr r1, [sp, #120] @ 4-byte Reload
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #112] @ 4-byte Reload
; BE-NEON-NEXT:    vstr d14, [sp] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #16] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d12, [sp, #56] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d10, [sp, #64] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d8, [sp, #40] @ 8-byte Spill
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #268
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #316
; BE-NEON-NEXT:    mov r10, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #332
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    mov r0, r8
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #348
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #364
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #360]
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #476
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #472]
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vmov.32 d16[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #88] @ 4-byte Reload
; BE-NEON-NEXT:    ldr r2, [sp, #592]
; BE-NEON-NEXT:    vldr d20, [sp, #136] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d16[1], r1
; BE-NEON-NEXT:    ldr r1, [sp, #588]
; BE-NEON-NEXT:    ldr r3, [sp, #596]
; BE-NEON-NEXT:    vldr d22, [sp, #24] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d18, [sp, #8] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d21, d20
; BE-NEON-NEXT:    vmov.32 d10[1], r6
; BE-NEON-NEXT:    ldr r6, [sp, #600]
; BE-NEON-NEXT:    vmov.32 d9[1], r4
; BE-NEON-NEXT:    ldr r4, [sp, #616]
; BE-NEON-NEXT:    vmov.32 d12[1], r7
; BE-NEON-NEXT:    ldr r7, [sp, #604]
; BE-NEON-NEXT:    vmov.32 d8[1], r10
; BE-NEON-NEXT:    add r10, r9, #192
; BE-NEON-NEXT:    vmov.32 d14[1], r11
; BE-NEON-NEXT:    ldr r11, [sp, #440]
; BE-NEON-NEXT:    vmov.32 d13[1], r0
; BE-NEON-NEXT:    ldr r0, [sp, #584]
; BE-NEON-NEXT:    vmov.32 d15[1], r5
; BE-NEON-NEXT:    vstr d16, [sp, #48] @ 8-byte Spill
; BE-NEON-NEXT:    vldr d16, [sp, #128] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d20, d22
; BE-NEON-NEXT:    vldr d22, [sp] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d19, d18
; BE-NEON-NEXT:    vrev64.32 d17, d16
; BE-NEON-NEXT:    vrev64.32 d18, d22
; BE-NEON-NEXT:    vstr d10, [sp, #120] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #112] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d15, [sp, #104] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d12, [sp, #96] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d8, [sp, #80] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d14, [sp, #72] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d13, [sp, #88] @ 8-byte Spill
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r10:128]!
; BE-NEON-NEXT:    vrev64.32 d16, d11
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r10:128]!
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r10:128]!
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r2, [sp, #608]
; BE-NEON-NEXT:    mov r8, r1
; BE-NEON-NEXT:    ldr r3, [sp, #612]
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    mov r1, r7
; BE-NEON-NEXT:    ldr r5, [sp, #456]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #620
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #444
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    mov r0, r11
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #460
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d11[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #572
; BE-NEON-NEXT:    vmov.32 d13[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #568]
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vldr d16, [sp, #16] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d18, [sp, #56] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d17, d16
; BE-NEON-NEXT:    ldr r2, [sp, #304]
; BE-NEON-NEXT:    vrev64.32 d16, d18
; BE-NEON-NEXT:    ldr r3, [sp, #308]
; BE-NEON-NEXT:    vldr d18, [sp, #144] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d20, [sp, #64] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d19, d18
; BE-NEON-NEXT:    vrev64.32 d18, d20
; BE-NEON-NEXT:    vldr d20, [sp, #40] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d22, [sp, #32] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d14[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #296]
; BE-NEON-NEXT:    vmov.32 d10[1], r7
; BE-NEON-NEXT:    ldr r7, [sp, #412]
; BE-NEON-NEXT:    vmov.32 d9[1], r6
; BE-NEON-NEXT:    ldr r6, [sp, #408]
; BE-NEON-NEXT:    vmov.32 d8[1], r8
; BE-NEON-NEXT:    add r8, r9, #128
; BE-NEON-NEXT:    vrev64.32 d21, d20
; BE-NEON-NEXT:    vmov.32 d13[1], r5
; BE-NEON-NEXT:    ldr r5, [sp, #300]
; BE-NEON-NEXT:    vrev64.32 d20, d22
; BE-NEON-NEXT:    vmov.32 d14[1], r1
; BE-NEON-NEXT:    mov r1, r5
; BE-NEON-NEXT:    vstr d10, [sp, #136] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d9, [sp, #128] @ 8-byte Spill
; BE-NEON-NEXT:    vstr d8, [sp, #24] @ 8-byte Spill
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r10:128]
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r8:128]!
; BE-NEON-NEXT:    vmov.32 d11[1], r4
; BE-NEON-NEXT:    ldr r4, [sp, #424]
; BE-NEON-NEXT:    ldr r10, [sp, #376]
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r8:128]!
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    ldr r2, [sp, #416]
; BE-NEON-NEXT:    mov r11, r1
; BE-NEON-NEXT:    ldr r3, [sp, #420]
; BE-NEON-NEXT:    vmov.32 d15[0], r0
; BE-NEON-NEXT:    mov r0, r6
; BE-NEON-NEXT:    mov r1, r7
; BE-NEON-NEXT:    ldr r5, [sp, #392]
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #428
; BE-NEON-NEXT:    mov r6, r1
; BE-NEON-NEXT:    vmov.32 d8[0], r0
; BE-NEON-NEXT:    mov r0, r4
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #380
; BE-NEON-NEXT:    mov r7, r1
; BE-NEON-NEXT:    vmov.32 d9[0], r0
; BE-NEON-NEXT:    mov r0, r10
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #396
; BE-NEON-NEXT:    mov r4, r1
; BE-NEON-NEXT:    vmov.32 d12[0], r0
; BE-NEON-NEXT:    mov r0, r5
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    add r3, sp, #284
; BE-NEON-NEXT:    vmov.32 d10[0], r0
; BE-NEON-NEXT:    ldr r0, [sp, #280]
; BE-NEON-NEXT:    mov r5, r1
; BE-NEON-NEXT:    ldm r3, {r1, r2, r3}
; BE-NEON-NEXT:    bl llrintl
; BE-NEON-NEXT:    vldr d16, [sp, #120] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d18, [sp, #112] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d17, d16
; BE-NEON-NEXT:    vldr d26, [sp, #136] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d16, d18
; BE-NEON-NEXT:    vldr d18, [sp, #104] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d31, d26
; BE-NEON-NEXT:    vldr d26, [sp, #128] @ 8-byte Reload
; BE-NEON-NEXT:    vldr d20, [sp, #96] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d19, d18
; BE-NEON-NEXT:    vrev64.32 d18, d20
; BE-NEON-NEXT:    vldr d20, [sp, #80] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d30, d26
; BE-NEON-NEXT:    vldr d26, [sp, #24] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d10[1], r5
; BE-NEON-NEXT:    vldr d22, [sp, #72] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d21, d20
; BE-NEON-NEXT:    vrev64.32 d1, d26
; BE-NEON-NEXT:    vmov.32 d9[1], r7
; BE-NEON-NEXT:    vmov.32 d12[1], r4
; BE-NEON-NEXT:    vrev64.32 d20, d22
; BE-NEON-NEXT:    vldr d22, [sp, #88] @ 8-byte Reload
; BE-NEON-NEXT:    vmov.32 d8[1], r6
; BE-NEON-NEXT:    vrev64.32 d0, d14
; BE-NEON-NEXT:    vmov.32 d28[0], r0
; BE-NEON-NEXT:    add r0, r9, #64
; BE-NEON-NEXT:    vrev64.32 d3, d10
; BE-NEON-NEXT:    vldr d24, [sp, #48] @ 8-byte Reload
; BE-NEON-NEXT:    vrev64.32 d23, d22
; BE-NEON-NEXT:    vrev64.32 d5, d9
; BE-NEON-NEXT:    vst1.64 {d0, d1}, [r8:128]!
; BE-NEON-NEXT:    vrev64.32 d2, d12
; BE-NEON-NEXT:    vmov.32 d15[1], r11
; BE-NEON-NEXT:    vrev64.32 d22, d24
; BE-NEON-NEXT:    vrev64.32 d25, d13
; BE-NEON-NEXT:    vrev64.32 d4, d8
; BE-NEON-NEXT:    vst1.64 {d30, d31}, [r8:128]
; BE-NEON-NEXT:    vst1.64 {d2, d3}, [r0:128]!
; BE-NEON-NEXT:    vmov.32 d28[1], r1
; BE-NEON-NEXT:    vrev64.32 d24, d11
; BE-NEON-NEXT:    vst1.64 {d4, d5}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d27, d15
; BE-NEON-NEXT:    vst1.64 {d24, d25}, [r0:128]!
; BE-NEON-NEXT:    vrev64.32 d26, d28
; BE-NEON-NEXT:    vst1.64 {d22, d23}, [r0:128]
; BE-NEON-NEXT:    vst1.64 {d20, d21}, [r9:128]!
; BE-NEON-NEXT:    vst1.64 {d26, d27}, [r9:128]!
; BE-NEON-NEXT:    vst1.64 {d18, d19}, [r9:128]!
; BE-NEON-NEXT:    vst1.64 {d16, d17}, [r9:128]
; BE-NEON-NEXT:    add sp, sp, #152
; BE-NEON-NEXT:    vpop {d8, d9, d10, d11, d12, d13, d14, d15}
; BE-NEON-NEXT:    add sp, sp, #4
; BE-NEON-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
  %a = call <32 x i64> @llvm.llrint.v32i64.v16f128(<32 x fp128> %x)
  ret <32 x i64> %a
}
declare <32 x i64> @llvm.llrint.v32i64.v32f128(<32 x fp128>)
