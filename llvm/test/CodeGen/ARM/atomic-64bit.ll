; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=armv7-apple-ios | FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-LE
; RUN: llc < %s -mtriple=thumbv7-none-linux-gnueabihf | FileCheck %s --check-prefix=CHECK-THUMB --check-prefix=CHECK-THUMB-LE
; RUN: llc < %s -mtriple=armebv7 -target-abi apcs | FileCheck %s --check-prefix=CHECK --check-prefix=CHECK-BE
; RUN: llc < %s -mtriple=thumbebv7-none-linux-gnueabihf | FileCheck %s --check-prefix=CHECK-THUMB --check-prefix=CHECK-THUMB-BE
; RUN: llc < %s -mtriple=armv7m--none-eabi | FileCheck %s --check-prefix=CHECK-M
; RUN: llc < %s -mtriple=armv8m--none-eabi | FileCheck %s --check-prefix=CHECK-M

define i64 @test1(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test1:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB0_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    adds r6, r4, r1
; CHECK-LE-NEXT:    adc r7, r5, r2
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB0_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test1:
; CHECK-THUMB-LE:       @ %bb.0:
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB0_1: @ %atomicrmw.start
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    adds.w lr, r0, r2
; CHECK-THUMB-LE-NEXT:    adc.w r4, r1, r3
; CHECK-THUMB-LE-NEXT:    strexd r5, lr, r4, [r12]
; CHECK-THUMB-LE-NEXT:    cmp r5, #0
; CHECK-THUMB-LE-NEXT:    bne .LBB0_1
; CHECK-THUMB-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test1:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB0_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    adds r7, r5, r2
; CHECK-BE-NEXT:    adc r6, r4, r1
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB0_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-BE-LABEL: test1:
; CHECK-THUMB-BE:       @ %bb.0:
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB0_1: @ %atomicrmw.start
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    adds.w lr, r1, r3
; CHECK-THUMB-BE-NEXT:    adc.w r4, r0, r2
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cmp r5, #0
; CHECK-THUMB-BE-NEXT:    bne .LBB0_1
; CHECK-THUMB-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r7, pc}



  %r = atomicrmw add ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test2(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test2:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB1_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    subs r6, r4, r1
; CHECK-LE-NEXT:    sbc r7, r5, r2
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB1_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test2:
; CHECK-THUMB-LE:       @ %bb.0:
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB1_1: @ %atomicrmw.start
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    subs.w lr, r0, r2
; CHECK-THUMB-LE-NEXT:    sbc.w r4, r1, r3
; CHECK-THUMB-LE-NEXT:    strexd r5, lr, r4, [r12]
; CHECK-THUMB-LE-NEXT:    cmp r5, #0
; CHECK-THUMB-LE-NEXT:    bne .LBB1_1
; CHECK-THUMB-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test2:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB1_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    subs r7, r5, r2
; CHECK-BE-NEXT:    sbc r6, r4, r1
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB1_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-BE-LABEL: test2:
; CHECK-THUMB-BE:       @ %bb.0:
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB1_1: @ %atomicrmw.start
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    subs.w lr, r1, r3
; CHECK-THUMB-BE-NEXT:    sbc.w r4, r0, r2
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cmp r5, #0
; CHECK-THUMB-BE-NEXT:    bne .LBB1_1
; CHECK-THUMB-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r7, pc}



  %r = atomicrmw sub ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test3(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test3:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB2_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    and r6, r4, r1
; CHECK-LE-NEXT:    and r7, r5, r2
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB2_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LABEL: test3:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r12, r0
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:  .LBB2_1: @ %atomicrmw.start
; CHECK-THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-NEXT:    and.w lr, r0, r2
; CHECK-THUMB-NEXT:    and.w r4, r1, r3
; CHECK-THUMB-NEXT:    strexd r5, lr, r4, [r12]
; CHECK-THUMB-NEXT:    cmp r5, #0
; CHECK-THUMB-NEXT:    bne .LBB2_1
; CHECK-THUMB-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test3:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB2_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    and r6, r4, r1
; CHECK-BE-NEXT:    and r7, r5, r2
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB2_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}



  %r = atomicrmw and ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test4(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test4:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB3_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    orr r6, r4, r1
; CHECK-LE-NEXT:    orr r7, r5, r2
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB3_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LABEL: test4:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r12, r0
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:  .LBB3_1: @ %atomicrmw.start
; CHECK-THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-NEXT:    orr.w lr, r0, r2
; CHECK-THUMB-NEXT:    orr.w r4, r1, r3
; CHECK-THUMB-NEXT:    strexd r5, lr, r4, [r12]
; CHECK-THUMB-NEXT:    cmp r5, #0
; CHECK-THUMB-NEXT:    bne .LBB3_1
; CHECK-THUMB-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test4:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB3_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    orr r6, r4, r1
; CHECK-BE-NEXT:    orr r7, r5, r2
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB3_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}



  %r = atomicrmw or ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test5(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test5:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB4_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    eor r6, r4, r1
; CHECK-LE-NEXT:    eor r7, r5, r2
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB4_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LABEL: test5:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    mov r12, r0
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:  .LBB4_1: @ %atomicrmw.start
; CHECK-THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-NEXT:    eor.w lr, r0, r2
; CHECK-THUMB-NEXT:    eor.w r4, r1, r3
; CHECK-THUMB-NEXT:    strexd r5, lr, r4, [r12]
; CHECK-THUMB-NEXT:    cmp r5, #0
; CHECK-THUMB-NEXT:    bne .LBB4_1
; CHECK-THUMB-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test5:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB4_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    eor r6, r4, r1
; CHECK-BE-NEXT:    eor r7, r5, r2
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB4_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}



  %r = atomicrmw xor ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test6(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test6:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, lr}
; CHECK-LE-NEXT:    mov r5, r2
; CHECK-LE-NEXT:    mov r2, r0
; CHECK-LE-NEXT:    mov r4, r1
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB5_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r0, r1, [r2]
; CHECK-LE-NEXT:    strexd r3, r4, r5, [r2]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB5_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, pc}
;
; CHECK-THUMB-LABEL: test6:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r7, lr}
; CHECK-THUMB-NEXT:    push {r7, lr}
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:  .LBB5_1: @ %atomicrmw.start
; CHECK-THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-NEXT:    ldrexd r12, r1, [r0]
; CHECK-THUMB-NEXT:    strexd lr, r2, r3, [r0]
; CHECK-THUMB-NEXT:    cmp.w lr, #0
; CHECK-THUMB-NEXT:    bne .LBB5_1
; CHECK-THUMB-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-NEXT:    mov r0, r12
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:    pop {r7, pc}
;
; CHECK-BE-LABEL: test6:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, lr}
; CHECK-BE-NEXT:    mov r5, r2
; CHECK-BE-NEXT:    mov r2, r0
; CHECK-BE-NEXT:    mov r4, r1
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB5_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r0, r1, [r2]
; CHECK-BE-NEXT:    strexd r3, r4, r5, [r2]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB5_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, pc}



  %r = atomicrmw xchg ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test7(ptr %ptr, i64 %val1, i64 %val2) {
; CHECK-LE-LABEL: test7:
; CHECK-LE:       @ %bb.0: @ %cmpxchg.start
; CHECK-LE-NEXT:    push {r4, r6, r7, lr}
; CHECK-LE-NEXT:    mov r9, r1
; CHECK-LE-NEXT:    mov r12, r0
; CHECK-LE-NEXT:    ldrexd r0, r1, [r0]
; CHECK-LE-NEXT:    mov r6, r3
; CHECK-LE-NEXT:    eor r3, r1, r2
; CHECK-LE-NEXT:    eor r4, r0, r9
; CHECK-LE-NEXT:    orrs r3, r4, r3
; CHECK-LE-NEXT:    bne LBB6_4
; CHECK-LE-NEXT:  @ %bb.1: @ %cmpxchg.fencedstore
; CHECK-LE-NEXT:    ldr r7, [sp, #16]
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB6_2: @ %cmpxchg.trystore
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r12]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    beq LBB6_5
; CHECK-LE-NEXT:  @ %bb.3: @ %cmpxchg.releasedload
; CHECK-LE-NEXT:    @ in Loop: Header=BB6_2 Depth=1
; CHECK-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-LE-NEXT:    eor r3, r0, r9
; CHECK-LE-NEXT:    eor r4, r1, r2
; CHECK-LE-NEXT:    orrs r3, r3, r4
; CHECK-LE-NEXT:    beq LBB6_2
; CHECK-LE-NEXT:  LBB6_4: @ %cmpxchg.nostore
; CHECK-LE-NEXT:    clrex
; CHECK-LE-NEXT:  LBB6_5: @ %cmpxchg.end
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test7:
; CHECK-THUMB-LE:       @ %bb.0: @ %cmpxchg.start
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r6, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r6, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r0]
; CHECK-THUMB-LE-NEXT:    eor.w lr, r1, r3
; CHECK-THUMB-LE-NEXT:    eor.w r4, r0, r2
; CHECK-THUMB-LE-NEXT:    orrs.w r4, r4, lr
; CHECK-THUMB-LE-NEXT:    bne .LBB6_4
; CHECK-THUMB-LE-NEXT:  @ %bb.1: @ %cmpxchg.fencedstore
; CHECK-THUMB-LE-NEXT:    ldrd r4, lr, [sp, #16]
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB6_2: @ %cmpxchg.trystore
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-LE-NEXT:    cbz r5, .LBB6_5
; CHECK-THUMB-LE-NEXT:  @ %bb.3: @ %cmpxchg.releasedload
; CHECK-THUMB-LE-NEXT:    @ in Loop: Header=BB6_2 Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    eor.w r5, r0, r2
; CHECK-THUMB-LE-NEXT:    eor.w r6, r1, r3
; CHECK-THUMB-LE-NEXT:    orrs r5, r6
; CHECK-THUMB-LE-NEXT:    beq .LBB6_2
; CHECK-THUMB-LE-NEXT:  .LBB6_4: @ %cmpxchg.nostore
; CHECK-THUMB-LE-NEXT:    clrex
; CHECK-THUMB-LE-NEXT:  .LBB6_5: @ %cmpxchg.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r6, pc}
;
; CHECK-BE-LABEL: test7:
; CHECK-BE:       @ %bb.0: @ %cmpxchg.start
; CHECK-BE-NEXT:    push {r4, r5, r6, lr}
; CHECK-BE-NEXT:    mov r12, r1
; CHECK-BE-NEXT:    mov lr, r0
; CHECK-BE-NEXT:    ldrexd r0, r1, [r0]
; CHECK-BE-NEXT:    mov r4, r3
; CHECK-BE-NEXT:    eor r3, r0, r12
; CHECK-BE-NEXT:    eor r6, r1, r2
; CHECK-BE-NEXT:    orrs r3, r6, r3
; CHECK-BE-NEXT:    bne .LBB6_4
; CHECK-BE-NEXT:  @ %bb.1: @ %cmpxchg.fencedstore
; CHECK-BE-NEXT:    ldr r5, [sp, #16]
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB6_2: @ %cmpxchg.trystore
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    strexd r3, r4, r5, [lr]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    beq .LBB6_5
; CHECK-BE-NEXT:  @ %bb.3: @ %cmpxchg.releasedload
; CHECK-BE-NEXT:    @ in Loop: Header=BB6_2 Depth=1
; CHECK-BE-NEXT:    ldrexd r0, r1, [lr]
; CHECK-BE-NEXT:    eor r3, r0, r12
; CHECK-BE-NEXT:    eor r6, r1, r2
; CHECK-BE-NEXT:    orrs r3, r6, r3
; CHECK-BE-NEXT:    beq .LBB6_2
; CHECK-BE-NEXT:  .LBB6_4: @ %cmpxchg.nostore
; CHECK-BE-NEXT:    clrex
; CHECK-BE-NEXT:  .LBB6_5: @ %cmpxchg.end
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, pc}
;
; CHECK-THUMB-BE-LABEL: test7:
; CHECK-THUMB-BE:       @ %bb.0: @ %cmpxchg.start
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r6, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r6, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r0]
; CHECK-THUMB-BE-NEXT:    eor.w lr, r0, r2
; CHECK-THUMB-BE-NEXT:    eor.w r4, r1, r3
; CHECK-THUMB-BE-NEXT:    orrs.w r4, r4, lr
; CHECK-THUMB-BE-NEXT:    bne .LBB6_4
; CHECK-THUMB-BE-NEXT:  @ %bb.1: @ %cmpxchg.fencedstore
; CHECK-THUMB-BE-NEXT:    ldrd r4, lr, [sp, #16]
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB6_2: @ %cmpxchg.trystore
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cbz r5, .LBB6_5
; CHECK-THUMB-BE-NEXT:  @ %bb.3: @ %cmpxchg.releasedload
; CHECK-THUMB-BE-NEXT:    @ in Loop: Header=BB6_2 Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    eor.w r5, r0, r2
; CHECK-THUMB-BE-NEXT:    eor.w r6, r1, r3
; CHECK-THUMB-BE-NEXT:    orrs r5, r6
; CHECK-THUMB-BE-NEXT:    beq .LBB6_2
; CHECK-THUMB-BE-NEXT:  .LBB6_4: @ %cmpxchg.nostore
; CHECK-THUMB-BE-NEXT:    clrex
; CHECK-THUMB-BE-NEXT:  .LBB6_5: @ %cmpxchg.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r6, pc}



  %pair = cmpxchg ptr %ptr, i64 %val1, i64 %val2 seq_cst seq_cst
  %r = extractvalue { i64, i1 } %pair, 0
  ret i64 %r
}

; Compiles down to a single ldrexd, except on M class devices where ldrexd
; isn't supported.
define i64 @test8(ptr %ptr) {
; CHECK-LABEL: test8:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    ldrexd r0, r1, [r0]
; CHECK-NEXT:    clrex
; CHECK-NEXT:    dmb ish
; CHECK-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: test8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    ldrexd r0, r1, [r0]
; CHECK-THUMB-NEXT:    clrex
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:    bx lr



  %r = load atomic i64, ptr %ptr seq_cst, align 8
  ret i64 %r
}

; Compiles down to atomicrmw xchg; there really isn't any more efficient
; way to write it. Except on M class devices, where ldrexd/strexd aren't
; supported.
define void @test9(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test9:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, lr}
; CHECK-LE-NEXT:    mov r3, r2
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    mov r2, r1
; CHECK-LE-NEXT:  LBB8_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    strexd r1, r2, r3, [r0]
; CHECK-LE-NEXT:    cmp r1, #0
; CHECK-LE-NEXT:    bne LBB8_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, pc}
;
; CHECK-THUMB-LABEL: test9:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:  .LBB8_1: @ %atomicrmw.start
; CHECK-THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-NEXT:    ldrexd r1, r12, [r0]
; CHECK-THUMB-NEXT:    strexd r1, r2, r3, [r0]
; CHECK-THUMB-NEXT:    cmp r1, #0
; CHECK-THUMB-NEXT:    bne .LBB8_1
; CHECK-THUMB-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-NEXT:    dmb ish
; CHECK-THUMB-NEXT:    bx lr
;
; CHECK-BE-LABEL: test9:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, lr}
; CHECK-BE-NEXT:    mov r3, r2
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    mov r2, r1
; CHECK-BE-NEXT:  .LBB8_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    strexd r1, r2, r3, [r0]
; CHECK-BE-NEXT:    cmp r1, #0
; CHECK-BE-NEXT:    bne .LBB8_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, pc}



  store atomic i64 %val, ptr %ptr seq_cst, align 8
  ret void
}

define i64 @test10(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test10:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB9_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    mov r7, r2
; CHECK-LE-NEXT:    cmp r1, r4
; CHECK-LE-NEXT:    sbcs r3, r2, r5
; CHECK-LE-NEXT:    movge r7, r5
; CHECK-LE-NEXT:    mov r6, r1
; CHECK-LE-NEXT:    movge r6, r4
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB9_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test10:
; CHECK-THUMB-LE:       @ %bb.0:
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB9_1: @ %atomicrmw.start
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    mov r4, r2
; CHECK-THUMB-LE-NEXT:    cmp r2, r0
; CHECK-THUMB-LE-NEXT:    sbcs.w lr, r3, r1
; CHECK-THUMB-LE-NEXT:    mov lr, r3
; CHECK-THUMB-LE-NEXT:    itt ge
; CHECK-THUMB-LE-NEXT:    movge lr, r1
; CHECK-THUMB-LE-NEXT:    movge r4, r0
; CHECK-THUMB-LE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-LE-NEXT:    cmp r5, #0
; CHECK-THUMB-LE-NEXT:    bne .LBB9_1
; CHECK-THUMB-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test10:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB9_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    mov r7, r2
; CHECK-BE-NEXT:    cmp r2, r5
; CHECK-BE-NEXT:    sbcs r3, r1, r4
; CHECK-BE-NEXT:    movge r7, r5
; CHECK-BE-NEXT:    mov r6, r1
; CHECK-BE-NEXT:    movge r6, r4
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB9_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-BE-LABEL: test10:
; CHECK-THUMB-BE:       @ %bb.0:
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB9_1: @ %atomicrmw.start
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    mov r4, r2
; CHECK-THUMB-BE-NEXT:    cmp r3, r1
; CHECK-THUMB-BE-NEXT:    sbcs.w lr, r2, r0
; CHECK-THUMB-BE-NEXT:    mov lr, r3
; CHECK-THUMB-BE-NEXT:    itt ge
; CHECK-THUMB-BE-NEXT:    movge lr, r1
; CHECK-THUMB-BE-NEXT:    movge r4, r0
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cmp r5, #0
; CHECK-THUMB-BE-NEXT:    bne .LBB9_1
; CHECK-THUMB-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r7, pc}



  %r = atomicrmw min ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test11(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test11:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB10_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    mov r7, r2
; CHECK-LE-NEXT:    cmp r1, r4
; CHECK-LE-NEXT:    sbcs r3, r2, r5
; CHECK-LE-NEXT:    movhs r7, r5
; CHECK-LE-NEXT:    mov r6, r1
; CHECK-LE-NEXT:    movhs r6, r4
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB10_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test11:
; CHECK-THUMB-LE:       @ %bb.0:
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB10_1: @ %atomicrmw.start
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    mov r4, r2
; CHECK-THUMB-LE-NEXT:    cmp r2, r0
; CHECK-THUMB-LE-NEXT:    sbcs.w lr, r3, r1
; CHECK-THUMB-LE-NEXT:    mov lr, r3
; CHECK-THUMB-LE-NEXT:    itt hs
; CHECK-THUMB-LE-NEXT:    movhs lr, r1
; CHECK-THUMB-LE-NEXT:    movhs r4, r0
; CHECK-THUMB-LE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-LE-NEXT:    cmp r5, #0
; CHECK-THUMB-LE-NEXT:    bne .LBB10_1
; CHECK-THUMB-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test11:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB10_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    mov r7, r2
; CHECK-BE-NEXT:    cmp r2, r5
; CHECK-BE-NEXT:    sbcs r3, r1, r4
; CHECK-BE-NEXT:    movhs r7, r5
; CHECK-BE-NEXT:    mov r6, r1
; CHECK-BE-NEXT:    movhs r6, r4
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB10_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-BE-LABEL: test11:
; CHECK-THUMB-BE:       @ %bb.0:
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB10_1: @ %atomicrmw.start
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    mov r4, r2
; CHECK-THUMB-BE-NEXT:    cmp r3, r1
; CHECK-THUMB-BE-NEXT:    sbcs.w lr, r2, r0
; CHECK-THUMB-BE-NEXT:    mov lr, r3
; CHECK-THUMB-BE-NEXT:    itt hs
; CHECK-THUMB-BE-NEXT:    movhs lr, r1
; CHECK-THUMB-BE-NEXT:    movhs r4, r0
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cmp r5, #0
; CHECK-THUMB-BE-NEXT:    bne .LBB10_1
; CHECK-THUMB-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r7, pc}



  %r = atomicrmw umin ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test12(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test12:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB11_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    mov r7, r2
; CHECK-LE-NEXT:    cmp r1, r4
; CHECK-LE-NEXT:    sbcs r3, r2, r5
; CHECK-LE-NEXT:    movlt r7, r5
; CHECK-LE-NEXT:    mov r6, r1
; CHECK-LE-NEXT:    movlt r6, r4
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB11_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test12:
; CHECK-THUMB-LE:       @ %bb.0:
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB11_1: @ %atomicrmw.start
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    mov r4, r2
; CHECK-THUMB-LE-NEXT:    cmp r2, r0
; CHECK-THUMB-LE-NEXT:    sbcs.w lr, r3, r1
; CHECK-THUMB-LE-NEXT:    mov lr, r3
; CHECK-THUMB-LE-NEXT:    itt lt
; CHECK-THUMB-LE-NEXT:    movlt lr, r1
; CHECK-THUMB-LE-NEXT:    movlt r4, r0
; CHECK-THUMB-LE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-LE-NEXT:    cmp r5, #0
; CHECK-THUMB-LE-NEXT:    bne .LBB11_1
; CHECK-THUMB-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test12:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB11_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    mov r7, r2
; CHECK-BE-NEXT:    cmp r2, r5
; CHECK-BE-NEXT:    sbcs r3, r1, r4
; CHECK-BE-NEXT:    movlt r7, r5
; CHECK-BE-NEXT:    mov r6, r1
; CHECK-BE-NEXT:    movlt r6, r4
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB11_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-BE-LABEL: test12:
; CHECK-THUMB-BE:       @ %bb.0:
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB11_1: @ %atomicrmw.start
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    mov r4, r2
; CHECK-THUMB-BE-NEXT:    cmp r3, r1
; CHECK-THUMB-BE-NEXT:    sbcs.w lr, r2, r0
; CHECK-THUMB-BE-NEXT:    mov lr, r3
; CHECK-THUMB-BE-NEXT:    itt lt
; CHECK-THUMB-BE-NEXT:    movlt lr, r1
; CHECK-THUMB-BE-NEXT:    movlt r4, r0
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cmp r5, #0
; CHECK-THUMB-BE-NEXT:    bne .LBB11_1
; CHECK-THUMB-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r7, pc}



  %r = atomicrmw max ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

define i64 @test13(ptr %ptr, i64 %val) {
; CHECK-LE-LABEL: test13:
; CHECK-LE:       @ %bb.0:
; CHECK-LE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:  LBB12_1: @ %atomicrmw.start
; CHECK-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-LE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-LE-NEXT:    mov r7, r2
; CHECK-LE-NEXT:    cmp r1, r4
; CHECK-LE-NEXT:    sbcs r3, r2, r5
; CHECK-LE-NEXT:    movlo r7, r5
; CHECK-LE-NEXT:    mov r6, r1
; CHECK-LE-NEXT:    movlo r6, r4
; CHECK-LE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-LE-NEXT:    cmp r3, #0
; CHECK-LE-NEXT:    bne LBB12_1
; CHECK-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-LE-NEXT:    mov r0, r4
; CHECK-LE-NEXT:    mov r1, r5
; CHECK-LE-NEXT:    dmb ish
; CHECK-LE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-LE-LABEL: test13:
; CHECK-THUMB-LE:       @ %bb.0:
; CHECK-THUMB-LE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-LE-NEXT:    mov r12, r0
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:  .LBB12_1: @ %atomicrmw.start
; CHECK-THUMB-LE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-LE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-LE-NEXT:    mov r4, r2
; CHECK-THUMB-LE-NEXT:    cmp r2, r0
; CHECK-THUMB-LE-NEXT:    sbcs.w lr, r3, r1
; CHECK-THUMB-LE-NEXT:    mov lr, r3
; CHECK-THUMB-LE-NEXT:    itt lo
; CHECK-THUMB-LE-NEXT:    movlo lr, r1
; CHECK-THUMB-LE-NEXT:    movlo r4, r0
; CHECK-THUMB-LE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-LE-NEXT:    cmp r5, #0
; CHECK-THUMB-LE-NEXT:    bne .LBB12_1
; CHECK-THUMB-LE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-LE-NEXT:    dmb ish
; CHECK-THUMB-LE-NEXT:    pop {r4, r5, r7, pc}
;
; CHECK-BE-LABEL: test13:
; CHECK-BE:       @ %bb.0:
; CHECK-BE-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:  .LBB12_1: @ %atomicrmw.start
; CHECK-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-BE-NEXT:    ldrexd r4, r5, [r0]
; CHECK-BE-NEXT:    mov r7, r2
; CHECK-BE-NEXT:    cmp r2, r5
; CHECK-BE-NEXT:    sbcs r3, r1, r4
; CHECK-BE-NEXT:    movlo r7, r5
; CHECK-BE-NEXT:    mov r6, r1
; CHECK-BE-NEXT:    movlo r6, r4
; CHECK-BE-NEXT:    strexd r3, r6, r7, [r0]
; CHECK-BE-NEXT:    cmp r3, #0
; CHECK-BE-NEXT:    bne .LBB12_1
; CHECK-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-BE-NEXT:    mov r0, r4
; CHECK-BE-NEXT:    mov r1, r5
; CHECK-BE-NEXT:    dmb ish
; CHECK-BE-NEXT:    pop {r4, r5, r6, r7, pc}
;
; CHECK-THUMB-BE-LABEL: test13:
; CHECK-THUMB-BE:       @ %bb.0:
; CHECK-THUMB-BE-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-BE-NEXT:    mov r12, r0
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:  .LBB12_1: @ %atomicrmw.start
; CHECK-THUMB-BE-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-THUMB-BE-NEXT:    ldrexd r0, r1, [r12]
; CHECK-THUMB-BE-NEXT:    mov r4, r2
; CHECK-THUMB-BE-NEXT:    cmp r3, r1
; CHECK-THUMB-BE-NEXT:    sbcs.w lr, r2, r0
; CHECK-THUMB-BE-NEXT:    mov lr, r3
; CHECK-THUMB-BE-NEXT:    itt lo
; CHECK-THUMB-BE-NEXT:    movlo lr, r1
; CHECK-THUMB-BE-NEXT:    movlo r4, r0
; CHECK-THUMB-BE-NEXT:    strexd r5, r4, lr, [r12]
; CHECK-THUMB-BE-NEXT:    cmp r5, #0
; CHECK-THUMB-BE-NEXT:    bne .LBB12_1
; CHECK-THUMB-BE-NEXT:  @ %bb.2: @ %atomicrmw.end
; CHECK-THUMB-BE-NEXT:    dmb ish
; CHECK-THUMB-BE-NEXT:    pop {r4, r5, r7, pc}



  %r = atomicrmw umax ptr %ptr, i64 %val seq_cst
  ret i64 %r
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-M: {{.*}}
