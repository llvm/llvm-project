; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=armv7-none-eabi -verify-machineinstrs | FileCheck --check-prefixes=CT %s
; RUN: llc < %s -mtriple=armv8.6a-none-eabi -verify-machineinstrs | FileCheck --check-prefixes=BFLOAT-F16-NATIVE %s
; RUN: llc < %s -mtriple=armv8.2a-none-eabi -verify-machineinstrs | FileCheck --check-prefixes=F16-NATIVE %s

define half @ct_half(i1 %cond, half %a, half %b) {
; CT-LABEL: ct_half:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r3, r0, #1
; CT-NEXT:    rsb r12, r3, #0
; CT-NEXT:    and r0, r1, r12
; CT-NEXT:    bic r12, r2, r12
; CT-NEXT:    orr r0, r0, r12
; CT-NEXT:    bx lr
;
; BFLOAT-F16-NATIVE-LABEL: ct_half:
; BFLOAT-F16-NATIVE:       @ %bb.0: @ %entry
; BFLOAT-F16-NATIVE-NEXT:    and r3, r0, #1
; BFLOAT-F16-NATIVE-NEXT:    rsb r12, r3, #0
; BFLOAT-F16-NATIVE-NEXT:    and r0, r1, r12
; BFLOAT-F16-NATIVE-NEXT:    bic r12, r2, r12
; BFLOAT-F16-NATIVE-NEXT:    orr r0, r0, r12
; BFLOAT-F16-NATIVE-NEXT:    bx lr
;
; F16-NATIVE-LABEL: ct_half:
; F16-NATIVE:       @ %bb.0: @ %entry
; F16-NATIVE-NEXT:    and r3, r0, #1
; F16-NATIVE-NEXT:    rsb r12, r3, #0
; F16-NATIVE-NEXT:    and r0, r1, r12
; F16-NATIVE-NEXT:    bic r12, r2, r12
; F16-NATIVE-NEXT:    orr r0, r0, r12
; F16-NATIVE-NEXT:    bx lr
entry:
  %sel = call half @llvm.ct.select.f16(i1 %cond, half %a, half %b)
  ret half %sel
}

define bfloat @ct_bf16(i1 %cond, bfloat %a, bfloat %b) {
; CT-LABEL: ct_bf16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    and r3, r0, #1
; CT-NEXT:    rsb r12, r3, #0
; CT-NEXT:    and r0, r1, r12
; CT-NEXT:    bic r12, r2, r12
; CT-NEXT:    orr r0, r0, r12
; CT-NEXT:    bx lr
;
; BFLOAT-F16-NATIVE-LABEL: ct_bf16:
; BFLOAT-F16-NATIVE:       @ %bb.0: @ %entry
; BFLOAT-F16-NATIVE-NEXT:    .pad #4
; BFLOAT-F16-NATIVE-NEXT:    sub sp, sp, #4
; BFLOAT-F16-NATIVE-NEXT:    and r0, r0, #1
; BFLOAT-F16-NATIVE-NEXT:    rsb r12, r0, #0
; BFLOAT-F16-NATIVE-NEXT:    and r3, r1, r12
; BFLOAT-F16-NATIVE-NEXT:    bic r12, r2, r12
; BFLOAT-F16-NATIVE-NEXT:    orr r3, r3, r12
; BFLOAT-F16-NATIVE-NEXT:    strh r3, [sp, #2]
; BFLOAT-F16-NATIVE-NEXT:    ldrh r0, [sp, #2]
; BFLOAT-F16-NATIVE-NEXT:    add sp, sp, #4
; BFLOAT-F16-NATIVE-NEXT:    bx lr
;
; F16-NATIVE-LABEL: ct_bf16:
; F16-NATIVE:       @ %bb.0: @ %entry
; F16-NATIVE-NEXT:    and r3, r0, #1
; F16-NATIVE-NEXT:    rsb r12, r3, #0
; F16-NATIVE-NEXT:    and r0, r1, r12
; F16-NATIVE-NEXT:    bic r12, r2, r12
; F16-NATIVE-NEXT:    orr r0, r0, r12
; F16-NATIVE-NEXT:    bx lr
entry:
  %sel = call bfloat @llvm.ct.select.bf16(i1 %cond, bfloat %a, bfloat %b)
  ret bfloat %sel
}

define <4 x half> @ct_v4f16(i1 %cond, <4 x half> %a, <4 x half> %b) {
; CT-LABEL: ct_v4f16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    .save {r4, r5, r6, lr}
; CT-NEXT:    push {r4, r5, r6, lr}
; CT-NEXT:    ldrh r1, [sp, #20]
; CT-NEXT:    pkhbt r2, r2, r3, lsl #16
; CT-NEXT:    ldrh r4, [sp, #16]
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    ldrh r12, [sp, #36]
; CT-NEXT:    ldrh lr, [sp, #28]
; CT-NEXT:    orr r1, r4, r1, lsl #16
; CT-NEXT:    ldrh r6, [sp, #24]
; CT-NEXT:    ldrh r5, [sp, #32]
; CT-NEXT:    vmov d17, r2, r1
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    orr r6, r6, lr, lsl #16
; CT-NEXT:    orr r3, r5, r12, lsl #16
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vmov d16, r6, r3
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov.u16 r0, d18[0]
; CT-NEXT:    vmov.u16 r1, d18[1]
; CT-NEXT:    vmov.u16 r2, d18[2]
; CT-NEXT:    vmov.u16 r3, d18[3]
; CT-NEXT:    pop {r4, r5, r6, pc}
;
; BFLOAT-F16-NATIVE-LABEL: ct_v4f16:
; BFLOAT-F16-NATIVE:       @ %bb.0: @ %entry
; BFLOAT-F16-NATIVE-NEXT:    .save {r4, r5, r6, lr}
; BFLOAT-F16-NATIVE-NEXT:    push {r4, r5, r6, lr}
; BFLOAT-F16-NATIVE-NEXT:    ldrh r1, [sp, #20]
; BFLOAT-F16-NATIVE-NEXT:    pkhbt r2, r2, r3, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r4, [sp, #16]
; BFLOAT-F16-NATIVE-NEXT:    and r0, r0, #1
; BFLOAT-F16-NATIVE-NEXT:    ldrh r12, [sp, #36]
; BFLOAT-F16-NATIVE-NEXT:    ldrh lr, [sp, #28]
; BFLOAT-F16-NATIVE-NEXT:    orr r1, r4, r1, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r6, [sp, #24]
; BFLOAT-F16-NATIVE-NEXT:    ldrh r5, [sp, #32]
; BFLOAT-F16-NATIVE-NEXT:    vmov d17, r2, r1
; BFLOAT-F16-NATIVE-NEXT:    rsb r1, r0, #0
; BFLOAT-F16-NATIVE-NEXT:    orr r6, r6, lr, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    orr r3, r5, r12, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    vdup.32 d19, r1
; BFLOAT-F16-NATIVE-NEXT:    vmov d16, r6, r3
; BFLOAT-F16-NATIVE-NEXT:    vand d18, d17, d19
; BFLOAT-F16-NATIVE-NEXT:    vbic d19, d16, d19
; BFLOAT-F16-NATIVE-NEXT:    vorr d18, d18, d19
; BFLOAT-F16-NATIVE-NEXT:    vmov.u16 r0, d18[0]
; BFLOAT-F16-NATIVE-NEXT:    vmov.u16 r1, d18[1]
; BFLOAT-F16-NATIVE-NEXT:    vmov.u16 r2, d18[2]
; BFLOAT-F16-NATIVE-NEXT:    vmov.u16 r3, d18[3]
; BFLOAT-F16-NATIVE-NEXT:    pop {r4, r5, r6, pc}
;
; F16-NATIVE-LABEL: ct_v4f16:
; F16-NATIVE:       @ %bb.0: @ %entry
; F16-NATIVE-NEXT:    .save {r4, r5, r6, lr}
; F16-NATIVE-NEXT:    push {r4, r5, r6, lr}
; F16-NATIVE-NEXT:    ldrh r1, [sp, #20]
; F16-NATIVE-NEXT:    pkhbt r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    ldrh r4, [sp, #16]
; F16-NATIVE-NEXT:    and r0, r0, #1
; F16-NATIVE-NEXT:    ldrh r12, [sp, #36]
; F16-NATIVE-NEXT:    ldrh lr, [sp, #28]
; F16-NATIVE-NEXT:    orr r1, r4, r1, lsl #16
; F16-NATIVE-NEXT:    ldrh r6, [sp, #24]
; F16-NATIVE-NEXT:    ldrh r5, [sp, #32]
; F16-NATIVE-NEXT:    vmov d17, r2, r1
; F16-NATIVE-NEXT:    rsb r1, r0, #0
; F16-NATIVE-NEXT:    orr r6, r6, lr, lsl #16
; F16-NATIVE-NEXT:    orr r3, r5, r12, lsl #16
; F16-NATIVE-NEXT:    vdup.32 d19, r1
; F16-NATIVE-NEXT:    vmov d16, r6, r3
; F16-NATIVE-NEXT:    vand d18, d17, d19
; F16-NATIVE-NEXT:    vbic d19, d16, d19
; F16-NATIVE-NEXT:    vorr d18, d18, d19
; F16-NATIVE-NEXT:    vmov.u16 r0, d18[0]
; F16-NATIVE-NEXT:    vmov.u16 r1, d18[1]
; F16-NATIVE-NEXT:    vmov.u16 r2, d18[2]
; F16-NATIVE-NEXT:    vmov.u16 r3, d18[3]
; F16-NATIVE-NEXT:    pop {r4, r5, r6, pc}
entry:
  %sel = call <4 x half> @llvm.ct.select.v4f16(i1 %cond, <4 x half> %a, <4 x half> %b)
  ret <4 x half> %sel
}

define <4 x bfloat> @ct_v4bf16(i1 %cond, <4 x bfloat> %a, <4 x bfloat> %b) {
; CT-LABEL: ct_v4bf16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    .save {r4, r5, r6, lr}
; CT-NEXT:    push {r4, r5, r6, lr}
; CT-NEXT:    ldrh r1, [sp, #20]
; CT-NEXT:    pkhbt r2, r2, r3, lsl #16
; CT-NEXT:    ldrh r4, [sp, #16]
; CT-NEXT:    and r0, r0, #1
; CT-NEXT:    ldrh r12, [sp, #36]
; CT-NEXT:    ldrh lr, [sp, #28]
; CT-NEXT:    orr r1, r4, r1, lsl #16
; CT-NEXT:    ldrh r6, [sp, #24]
; CT-NEXT:    ldrh r5, [sp, #32]
; CT-NEXT:    vmov d17, r2, r1
; CT-NEXT:    rsb r1, r0, #0
; CT-NEXT:    orr r6, r6, lr, lsl #16
; CT-NEXT:    orr r3, r5, r12, lsl #16
; CT-NEXT:    vdup.32 d19, r1
; CT-NEXT:    vmov d16, r6, r3
; CT-NEXT:    vand d18, d17, d19
; CT-NEXT:    vbic d19, d16, d19
; CT-NEXT:    vorr d18, d18, d19
; CT-NEXT:    vmov.u16 r0, d18[0]
; CT-NEXT:    vmov.u16 r1, d18[1]
; CT-NEXT:    vmov.u16 r2, d18[2]
; CT-NEXT:    vmov.u16 r3, d18[3]
; CT-NEXT:    pop {r4, r5, r6, pc}
;
; BFLOAT-F16-NATIVE-LABEL: ct_v4bf16:
; BFLOAT-F16-NATIVE:       @ %bb.0: @ %entry
; BFLOAT-F16-NATIVE-NEXT:    and r0, r0, #1
; BFLOAT-F16-NATIVE-NEXT:    vldr d16, [sp]
; BFLOAT-F16-NATIVE-NEXT:    rsb r1, r0, #0
; BFLOAT-F16-NATIVE-NEXT:    vmov d17, r2, r3
; BFLOAT-F16-NATIVE-NEXT:    vdup.32 d19, r1
; BFLOAT-F16-NATIVE-NEXT:    vand d18, d17, d19
; BFLOAT-F16-NATIVE-NEXT:    vbic d19, d16, d19
; BFLOAT-F16-NATIVE-NEXT:    vorr d18, d18, d19
; BFLOAT-F16-NATIVE-NEXT:    vmov r0, r1, d18
; BFLOAT-F16-NATIVE-NEXT:    bx lr
;
; F16-NATIVE-LABEL: ct_v4bf16:
; F16-NATIVE:       @ %bb.0: @ %entry
; F16-NATIVE-NEXT:    .save {r4, r5, r6, lr}
; F16-NATIVE-NEXT:    push {r4, r5, r6, lr}
; F16-NATIVE-NEXT:    ldrh r1, [sp, #20]
; F16-NATIVE-NEXT:    pkhbt r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    ldrh r4, [sp, #16]
; F16-NATIVE-NEXT:    and r0, r0, #1
; F16-NATIVE-NEXT:    ldrh r12, [sp, #36]
; F16-NATIVE-NEXT:    ldrh lr, [sp, #28]
; F16-NATIVE-NEXT:    orr r1, r4, r1, lsl #16
; F16-NATIVE-NEXT:    ldrh r6, [sp, #24]
; F16-NATIVE-NEXT:    ldrh r5, [sp, #32]
; F16-NATIVE-NEXT:    vmov d17, r2, r1
; F16-NATIVE-NEXT:    rsb r1, r0, #0
; F16-NATIVE-NEXT:    orr r6, r6, lr, lsl #16
; F16-NATIVE-NEXT:    orr r3, r5, r12, lsl #16
; F16-NATIVE-NEXT:    vdup.32 d19, r1
; F16-NATIVE-NEXT:    vmov d16, r6, r3
; F16-NATIVE-NEXT:    vand d18, d17, d19
; F16-NATIVE-NEXT:    vbic d19, d16, d19
; F16-NATIVE-NEXT:    vorr d18, d18, d19
; F16-NATIVE-NEXT:    vmov.u16 r0, d18[0]
; F16-NATIVE-NEXT:    vmov.u16 r1, d18[1]
; F16-NATIVE-NEXT:    vmov.u16 r2, d18[2]
; F16-NATIVE-NEXT:    vmov.u16 r3, d18[3]
; F16-NATIVE-NEXT:    pop {r4, r5, r6, pc}
entry:
  %sel = call <4 x bfloat> @llvm.ct.select.v4bf16(i1 %cond, <4 x bfloat> %a, <4 x bfloat> %b)
  ret <4 x bfloat> %sel
}

define <8 x half> @ct_v8f16(i1 %cond, <8 x half> %a, <8 x half> %b) {
; CT-LABEL: ct_v8f16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; CT-NEXT:    push {r4, r5, r6, r7, r8, lr}
; CT-NEXT:    ldrh r12, [sp, #36]
; CT-NEXT:    pkhbt r2, r2, r3, lsl #16
; CT-NEXT:    ldrh r7, [sp, #32]
; CT-NEXT:    and r1, r1, #1
; CT-NEXT:    ldrh r3, [sp, #52]
; CT-NEXT:    vmov.32 d16[0], r2
; CT-NEXT:    ldrh r2, [sp, #48]
; CT-NEXT:    orr r7, r7, r12, lsl #16
; CT-NEXT:    ldrh r5, [sp, #68]
; CT-NEXT:    orr r2, r2, r3, lsl #16
; CT-NEXT:    vmov.32 d17[0], r7
; CT-NEXT:    ldrh r7, [sp, #64]
; CT-NEXT:    ldrh r3, [sp, #28]
; CT-NEXT:    vmov.32 d18[0], r2
; CT-NEXT:    ldrh r2, [sp, #24]
; CT-NEXT:    orr r7, r7, r5, lsl #16
; CT-NEXT:    ldrh r5, [sp, #76]
; CT-NEXT:    vmov.32 d19[0], r7
; CT-NEXT:    orr r2, r2, r3, lsl #16
; CT-NEXT:    ldrh r7, [sp, #72]
; CT-NEXT:    ldrh lr, [sp, #60]
; CT-NEXT:    vmov.32 d16[1], r2
; CT-NEXT:    orr r2, r7, r5, lsl #16
; CT-NEXT:    ldrh r4, [sp, #56]
; CT-NEXT:    ldrh r8, [sp, #44]
; CT-NEXT:    vmov.32 d19[1], r2
; CT-NEXT:    orr r2, r4, lr, lsl #16
; CT-NEXT:    ldrh r6, [sp, #40]
; CT-NEXT:    vmov.32 d18[1], r2
; CT-NEXT:    orr r2, r6, r8, lsl #16
; CT-NEXT:    vmov.32 d17[1], r2
; CT-NEXT:    rsb r2, r1, #0
; CT-NEXT:    vdup.32 q11, r2
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vst1.64 {d20, d21}, [r0:128]
; CT-NEXT:    pop {r4, r5, r6, r7, r8, pc}
;
; BFLOAT-F16-NATIVE-LABEL: ct_v8f16:
; BFLOAT-F16-NATIVE:       @ %bb.0: @ %entry
; BFLOAT-F16-NATIVE-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; BFLOAT-F16-NATIVE-NEXT:    push {r4, r5, r6, r7, r8, lr}
; BFLOAT-F16-NATIVE-NEXT:    ldrh r12, [sp, #36]
; BFLOAT-F16-NATIVE-NEXT:    pkhbt r2, r2, r3, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r7, [sp, #32]
; BFLOAT-F16-NATIVE-NEXT:    and r1, r1, #1
; BFLOAT-F16-NATIVE-NEXT:    ldrh r3, [sp, #52]
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d16[0], r2
; BFLOAT-F16-NATIVE-NEXT:    ldrh r2, [sp, #48]
; BFLOAT-F16-NATIVE-NEXT:    orr r7, r7, r12, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r5, [sp, #68]
; BFLOAT-F16-NATIVE-NEXT:    orr r2, r2, r3, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d17[0], r7
; BFLOAT-F16-NATIVE-NEXT:    ldrh r7, [sp, #64]
; BFLOAT-F16-NATIVE-NEXT:    ldrh r3, [sp, #28]
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d18[0], r2
; BFLOAT-F16-NATIVE-NEXT:    ldrh r2, [sp, #24]
; BFLOAT-F16-NATIVE-NEXT:    orr r7, r7, r5, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r5, [sp, #76]
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d19[0], r7
; BFLOAT-F16-NATIVE-NEXT:    orr r2, r2, r3, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r7, [sp, #72]
; BFLOAT-F16-NATIVE-NEXT:    ldrh lr, [sp, #60]
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d16[1], r2
; BFLOAT-F16-NATIVE-NEXT:    orr r2, r7, r5, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r4, [sp, #56]
; BFLOAT-F16-NATIVE-NEXT:    ldrh r8, [sp, #44]
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d19[1], r2
; BFLOAT-F16-NATIVE-NEXT:    orr r2, r4, lr, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    ldrh r6, [sp, #40]
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d18[1], r2
; BFLOAT-F16-NATIVE-NEXT:    orr r2, r6, r8, lsl #16
; BFLOAT-F16-NATIVE-NEXT:    vmov.32 d17[1], r2
; BFLOAT-F16-NATIVE-NEXT:    rsb r2, r1, #0
; BFLOAT-F16-NATIVE-NEXT:    vdup.32 q11, r2
; BFLOAT-F16-NATIVE-NEXT:    vand q10, q8, q11
; BFLOAT-F16-NATIVE-NEXT:    vbic q11, q9, q11
; BFLOAT-F16-NATIVE-NEXT:    vorr q10, q10, q11
; BFLOAT-F16-NATIVE-NEXT:    vst1.64 {d20, d21}, [r0:128]
; BFLOAT-F16-NATIVE-NEXT:    pop {r4, r5, r6, r7, r8, pc}
;
; F16-NATIVE-LABEL: ct_v8f16:
; F16-NATIVE:       @ %bb.0: @ %entry
; F16-NATIVE-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; F16-NATIVE-NEXT:    push {r4, r5, r6, r7, r8, lr}
; F16-NATIVE-NEXT:    ldrh r12, [sp, #36]
; F16-NATIVE-NEXT:    pkhbt r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    ldrh r7, [sp, #32]
; F16-NATIVE-NEXT:    and r1, r1, #1
; F16-NATIVE-NEXT:    ldrh r3, [sp, #52]
; F16-NATIVE-NEXT:    vmov.32 d16[0], r2
; F16-NATIVE-NEXT:    ldrh r2, [sp, #48]
; F16-NATIVE-NEXT:    orr r7, r7, r12, lsl #16
; F16-NATIVE-NEXT:    ldrh r5, [sp, #68]
; F16-NATIVE-NEXT:    orr r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    vmov.32 d17[0], r7
; F16-NATIVE-NEXT:    ldrh r7, [sp, #64]
; F16-NATIVE-NEXT:    ldrh r3, [sp, #28]
; F16-NATIVE-NEXT:    vmov.32 d18[0], r2
; F16-NATIVE-NEXT:    ldrh r2, [sp, #24]
; F16-NATIVE-NEXT:    orr r7, r7, r5, lsl #16
; F16-NATIVE-NEXT:    ldrh r5, [sp, #76]
; F16-NATIVE-NEXT:    vmov.32 d19[0], r7
; F16-NATIVE-NEXT:    orr r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    ldrh r7, [sp, #72]
; F16-NATIVE-NEXT:    ldrh lr, [sp, #60]
; F16-NATIVE-NEXT:    vmov.32 d16[1], r2
; F16-NATIVE-NEXT:    orr r2, r7, r5, lsl #16
; F16-NATIVE-NEXT:    ldrh r4, [sp, #56]
; F16-NATIVE-NEXT:    ldrh r8, [sp, #44]
; F16-NATIVE-NEXT:    vmov.32 d19[1], r2
; F16-NATIVE-NEXT:    orr r2, r4, lr, lsl #16
; F16-NATIVE-NEXT:    ldrh r6, [sp, #40]
; F16-NATIVE-NEXT:    vmov.32 d18[1], r2
; F16-NATIVE-NEXT:    orr r2, r6, r8, lsl #16
; F16-NATIVE-NEXT:    vmov.32 d17[1], r2
; F16-NATIVE-NEXT:    rsb r2, r1, #0
; F16-NATIVE-NEXT:    vdup.32 q11, r2
; F16-NATIVE-NEXT:    vand q10, q8, q11
; F16-NATIVE-NEXT:    vbic q11, q9, q11
; F16-NATIVE-NEXT:    vorr q10, q10, q11
; F16-NATIVE-NEXT:    vst1.64 {d20, d21}, [r0:128]
; F16-NATIVE-NEXT:    pop {r4, r5, r6, r7, r8, pc}
entry:
  %sel = call <8 x half> @llvm.ct.select.v8f16(i1 %cond, <8 x half> %a, <8 x half> %b)
  ret <8 x half> %sel
}

define <8 x bfloat> @ct_v8bf16(i1 %cond, <8 x bfloat> %a, <8 x bfloat> %b) {
; CT-LABEL: ct_v8bf16:
; CT:       @ %bb.0: @ %entry
; CT-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; CT-NEXT:    push {r4, r5, r6, r7, r8, lr}
; CT-NEXT:    ldrh r12, [sp, #36]
; CT-NEXT:    pkhbt r2, r2, r3, lsl #16
; CT-NEXT:    ldrh r7, [sp, #32]
; CT-NEXT:    and r1, r1, #1
; CT-NEXT:    ldrh r3, [sp, #52]
; CT-NEXT:    vmov.32 d16[0], r2
; CT-NEXT:    ldrh r2, [sp, #48]
; CT-NEXT:    orr r7, r7, r12, lsl #16
; CT-NEXT:    ldrh r5, [sp, #68]
; CT-NEXT:    orr r2, r2, r3, lsl #16
; CT-NEXT:    vmov.32 d17[0], r7
; CT-NEXT:    ldrh r7, [sp, #64]
; CT-NEXT:    ldrh r3, [sp, #28]
; CT-NEXT:    vmov.32 d18[0], r2
; CT-NEXT:    ldrh r2, [sp, #24]
; CT-NEXT:    orr r7, r7, r5, lsl #16
; CT-NEXT:    ldrh r5, [sp, #76]
; CT-NEXT:    vmov.32 d19[0], r7
; CT-NEXT:    orr r2, r2, r3, lsl #16
; CT-NEXT:    ldrh r7, [sp, #72]
; CT-NEXT:    ldrh lr, [sp, #60]
; CT-NEXT:    vmov.32 d16[1], r2
; CT-NEXT:    orr r2, r7, r5, lsl #16
; CT-NEXT:    ldrh r4, [sp, #56]
; CT-NEXT:    ldrh r8, [sp, #44]
; CT-NEXT:    vmov.32 d19[1], r2
; CT-NEXT:    orr r2, r4, lr, lsl #16
; CT-NEXT:    ldrh r6, [sp, #40]
; CT-NEXT:    vmov.32 d18[1], r2
; CT-NEXT:    orr r2, r6, r8, lsl #16
; CT-NEXT:    vmov.32 d17[1], r2
; CT-NEXT:    rsb r2, r1, #0
; CT-NEXT:    vdup.32 q11, r2
; CT-NEXT:    vand q10, q8, q11
; CT-NEXT:    vbic q11, q9, q11
; CT-NEXT:    vorr q10, q10, q11
; CT-NEXT:    vst1.64 {d20, d21}, [r0:128]
; CT-NEXT:    pop {r4, r5, r6, r7, r8, pc}
;
; BFLOAT-F16-NATIVE-LABEL: ct_v8bf16:
; BFLOAT-F16-NATIVE:       @ %bb.0: @ %entry
; BFLOAT-F16-NATIVE-NEXT:    add r1, sp, #8
; BFLOAT-F16-NATIVE-NEXT:    and r0, r0, #1
; BFLOAT-F16-NATIVE-NEXT:    vld1.64 {d18, d19}, [r1]
; BFLOAT-F16-NATIVE-NEXT:    rsb r1, r0, #0
; BFLOAT-F16-NATIVE-NEXT:    vldr d17, [sp]
; BFLOAT-F16-NATIVE-NEXT:    vmov d16, r2, r3
; BFLOAT-F16-NATIVE-NEXT:    vdup.32 q11, r1
; BFLOAT-F16-NATIVE-NEXT:    vand q10, q8, q11
; BFLOAT-F16-NATIVE-NEXT:    vbic q11, q9, q11
; BFLOAT-F16-NATIVE-NEXT:    vorr q10, q10, q11
; BFLOAT-F16-NATIVE-NEXT:    vmov r0, r1, d20
; BFLOAT-F16-NATIVE-NEXT:    vmov r2, r3, d21
; BFLOAT-F16-NATIVE-NEXT:    bx lr
;
; F16-NATIVE-LABEL: ct_v8bf16:
; F16-NATIVE:       @ %bb.0: @ %entry
; F16-NATIVE-NEXT:    .save {r4, r5, r6, r7, r8, lr}
; F16-NATIVE-NEXT:    push {r4, r5, r6, r7, r8, lr}
; F16-NATIVE-NEXT:    ldrh r12, [sp, #36]
; F16-NATIVE-NEXT:    pkhbt r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    ldrh r7, [sp, #32]
; F16-NATIVE-NEXT:    and r1, r1, #1
; F16-NATIVE-NEXT:    ldrh r3, [sp, #52]
; F16-NATIVE-NEXT:    vmov.32 d16[0], r2
; F16-NATIVE-NEXT:    ldrh r2, [sp, #48]
; F16-NATIVE-NEXT:    orr r7, r7, r12, lsl #16
; F16-NATIVE-NEXT:    ldrh r5, [sp, #68]
; F16-NATIVE-NEXT:    orr r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    vmov.32 d17[0], r7
; F16-NATIVE-NEXT:    ldrh r7, [sp, #64]
; F16-NATIVE-NEXT:    ldrh r3, [sp, #28]
; F16-NATIVE-NEXT:    vmov.32 d18[0], r2
; F16-NATIVE-NEXT:    ldrh r2, [sp, #24]
; F16-NATIVE-NEXT:    orr r7, r7, r5, lsl #16
; F16-NATIVE-NEXT:    ldrh r5, [sp, #76]
; F16-NATIVE-NEXT:    vmov.32 d19[0], r7
; F16-NATIVE-NEXT:    orr r2, r2, r3, lsl #16
; F16-NATIVE-NEXT:    ldrh r7, [sp, #72]
; F16-NATIVE-NEXT:    ldrh lr, [sp, #60]
; F16-NATIVE-NEXT:    vmov.32 d16[1], r2
; F16-NATIVE-NEXT:    orr r2, r7, r5, lsl #16
; F16-NATIVE-NEXT:    ldrh r4, [sp, #56]
; F16-NATIVE-NEXT:    ldrh r8, [sp, #44]
; F16-NATIVE-NEXT:    vmov.32 d19[1], r2
; F16-NATIVE-NEXT:    orr r2, r4, lr, lsl #16
; F16-NATIVE-NEXT:    ldrh r6, [sp, #40]
; F16-NATIVE-NEXT:    vmov.32 d18[1], r2
; F16-NATIVE-NEXT:    orr r2, r6, r8, lsl #16
; F16-NATIVE-NEXT:    vmov.32 d17[1], r2
; F16-NATIVE-NEXT:    rsb r2, r1, #0
; F16-NATIVE-NEXT:    vdup.32 q11, r2
; F16-NATIVE-NEXT:    vand q10, q8, q11
; F16-NATIVE-NEXT:    vbic q11, q9, q11
; F16-NATIVE-NEXT:    vorr q10, q10, q11
; F16-NATIVE-NEXT:    vst1.64 {d20, d21}, [r0:128]
; F16-NATIVE-NEXT:    pop {r4, r5, r6, r7, r8, pc}
entry:
  %sel = call <8 x bfloat> @llvm.ct.select.v8bf16(i1 %cond, <8 x bfloat> %a, <8 x bfloat> %b)
  ret <8 x bfloat> %sel
}
