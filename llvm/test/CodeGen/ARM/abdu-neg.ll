; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=arm-eabi -mattr=+v4t %s -o - | FileCheck %s  --check-prefixes=CHECK,CHECK-ARM
; RUN: llc -mtriple=thumbv6m-none-eabi %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-THUMB

;
; trunc(nabs(sub(zext(a),zext(b)))) -> nabds(a,b)
;

define i8 @abd_ext_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    and r1, r1, #255
; CHECK-ARM-NEXT:    and r0, r0, #255
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    eor r1, r0, r0, asr #31
; CHECK-ARM-NEXT:    rsb r0, r1, r0, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxtb r1, r1
; CHECK-THUMB-NEXT:    uxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i8 %a to i64
  %bext = zext i8 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i8
  ret i8 %trunc
}

define i8 @abd_ext_i8_i16(i8 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i8_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    mov r2, #255
; CHECK-ARM-NEXT:    and r0, r0, #255
; CHECK-ARM-NEXT:    orr r2, r2, #65280
; CHECK-ARM-NEXT:    and r1, r1, r2
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    eor r1, r0, r0, asr #31
; CHECK-ARM-NEXT:    rsb r0, r1, r0, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i8_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r1, r1
; CHECK-THUMB-NEXT:    uxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i8 %a to i64
  %bext = zext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i8
  ret i8 %trunc
}

define i8 @abd_ext_i8_undef(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i8_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    and r1, r1, #255
; CHECK-ARM-NEXT:    and r0, r0, #255
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    eor r1, r0, r0, asr #31
; CHECK-ARM-NEXT:    rsb r0, r1, r0, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i8_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxtb r1, r1
; CHECK-THUMB-NEXT:    uxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i8 %a to i64
  %bext = zext i8 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i8
  ret i8 %trunc
}

define i16 @abd_ext_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    mov r2, #255
; CHECK-ARM-NEXT:    orr r2, r2, #65280
; CHECK-ARM-NEXT:    and r1, r1, r2
; CHECK-ARM-NEXT:    and r0, r0, r2
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    eor r1, r0, r0, asr #31
; CHECK-ARM-NEXT:    rsb r0, r1, r0, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r1, r1
; CHECK-THUMB-NEXT:    uxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i16 %a to i64
  %bext = zext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i16
  ret i16 %trunc
}

define i16 @abd_ext_i16_i32(i16 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i16_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    mov r2, #255
; CHECK-ARM-NEXT:    orr r2, r2, #65280
; CHECK-ARM-NEXT:    and r0, r0, r2
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbls r0, r0, #0
; CHECK-ARM-NEXT:    rsb r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i16_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sbcs r1, r1
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i16 %a to i64
  %bext = zext i32 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i16
  ret i16 %trunc
}

define i16 @abd_ext_i16_undef(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i16_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    mov r2, #255
; CHECK-ARM-NEXT:    orr r2, r2, #65280
; CHECK-ARM-NEXT:    and r1, r1, r2
; CHECK-ARM-NEXT:    and r0, r0, r2
; CHECK-ARM-NEXT:    sub r0, r0, r1
; CHECK-ARM-NEXT:    eor r1, r0, r0, asr #31
; CHECK-ARM-NEXT:    rsb r0, r1, r0, asr #31
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i16_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r1, r1
; CHECK-THUMB-NEXT:    uxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i16 %a to i64
  %bext = zext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i16
  ret i16 %trunc
}

define i32 @abd_ext_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbls r0, r0, #0
; CHECK-ARM-NEXT:    rsb r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sbcs r1, r1
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i32 %a to i64
  %bext = zext i32 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i32
  ret i32 %trunc
}

define i32 @abd_ext_i32_i16(i32 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i32_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    mov r2, #255
; CHECK-ARM-NEXT:    orr r2, r2, #65280
; CHECK-ARM-NEXT:    and r1, r1, r2
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbls r0, r0, #0
; CHECK-ARM-NEXT:    rsb r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i32_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r1, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sbcs r1, r1
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i32 %a to i64
  %bext = zext i16 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 false)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i32
  ret i32 %trunc
}

define i32 @abd_ext_i32_undef(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i32_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbls r0, r0, #0
; CHECK-ARM-NEXT:    rsb r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i32_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sbcs r1, r1
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %aext = zext i32 %a to i64
  %bext = zext i32 %b to i64
  %sub = sub i64 %aext, %bext
  %abs = call i64 @llvm.abs.i64(i64 %sub, i1 true)
  %nabs = sub i64 0, %abs
  %trunc = trunc i64 %nabs to i32
  ret i32 %trunc
}

define i64 @abd_ext_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    mov r12, #0
; CHECK-ARM-NEXT:    sbcs r1, r1, r3
; CHECK-ARM-NEXT:    adc r2, r12, #0
; CHECK-ARM-NEXT:    eor r2, r2, #1
; CHECK-ARM-NEXT:    rsb r2, r2, #0
; CHECK-ARM-NEXT:    eor r0, r0, r2
; CHECK-ARM-NEXT:    eor r1, r1, r2
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    sbc r1, r1, r2
; CHECK-ARM-NEXT:    rsbs r0, r0, #0
; CHECK-ARM-NEXT:    rsc r1, r1, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, lr}
; CHECK-THUMB-NEXT:    push {r4, lr}
; CHECK-THUMB-NEXT:    movs r4, #0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    adcs r2, r4
; CHECK-THUMB-NEXT:    movs r3, #1
; CHECK-THUMB-NEXT:    eors r3, r2
; CHECK-THUMB-NEXT:    rsbs r2, r3, #0
; CHECK-THUMB-NEXT:    eors r1, r2
; CHECK-THUMB-NEXT:    eors r0, r2
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r2
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:    sbcs r4, r1
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    pop {r4, pc}
  %aext = zext i64 %a to i128
  %bext = zext i64 %b to i128
  %sub = sub i128 %aext, %bext
  %abs = call i128 @llvm.abs.i128(i128 %sub, i1 false)
  %nabs = sub i128 0, %abs
  %trunc = trunc i128 %nabs to i64
  ret i64 %trunc
}

define i64 @abd_ext_i64_undef(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i64_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    mov r12, #0
; CHECK-ARM-NEXT:    sbcs r1, r1, r3
; CHECK-ARM-NEXT:    adc r2, r12, #0
; CHECK-ARM-NEXT:    eor r2, r2, #1
; CHECK-ARM-NEXT:    rsb r2, r2, #0
; CHECK-ARM-NEXT:    eor r0, r0, r2
; CHECK-ARM-NEXT:    eor r1, r1, r2
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    sbc r1, r1, r2
; CHECK-ARM-NEXT:    rsbs r0, r0, #0
; CHECK-ARM-NEXT:    rsc r1, r1, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i64_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, lr}
; CHECK-THUMB-NEXT:    push {r4, lr}
; CHECK-THUMB-NEXT:    movs r4, #0
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    adcs r2, r4
; CHECK-THUMB-NEXT:    movs r3, #1
; CHECK-THUMB-NEXT:    eors r3, r2
; CHECK-THUMB-NEXT:    rsbs r2, r3, #0
; CHECK-THUMB-NEXT:    eors r1, r2
; CHECK-THUMB-NEXT:    eors r0, r2
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r2
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:    sbcs r4, r1
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    pop {r4, pc}
  %aext = zext i64 %a to i128
  %bext = zext i64 %b to i128
  %sub = sub i128 %aext, %bext
  %abs = call i128 @llvm.abs.i128(i128 %sub, i1 true)
  %nabs = sub i128 0, %abs
  %trunc = trunc i128 %nabs to i64
  ret i64 %trunc
}

define i128 @abd_ext_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, lr}
; CHECK-ARM-NEXT:    ldr r5, [sp, #16]
; CHECK-ARM-NEXT:    mov r6, #0
; CHECK-ARM-NEXT:    ldr r4, [sp, #20]
; CHECK-ARM-NEXT:    subs r0, r0, r5
; CHECK-ARM-NEXT:    ldr lr, [sp, #24]
; CHECK-ARM-NEXT:    sbcs r1, r1, r4
; CHECK-ARM-NEXT:    ldr r12, [sp, #28]
; CHECK-ARM-NEXT:    sbcs r2, r2, lr
; CHECK-ARM-NEXT:    sbcs r3, r3, r12
; CHECK-ARM-NEXT:    adc r6, r6, #0
; CHECK-ARM-NEXT:    eor r6, r6, #1
; CHECK-ARM-NEXT:    rsb r6, r6, #0
; CHECK-ARM-NEXT:    eor r0, r0, r6
; CHECK-ARM-NEXT:    eor r1, r1, r6
; CHECK-ARM-NEXT:    subs r0, r0, r6
; CHECK-ARM-NEXT:    eor r2, r2, r6
; CHECK-ARM-NEXT:    sbcs r1, r1, r6
; CHECK-ARM-NEXT:    eor r3, r3, r6
; CHECK-ARM-NEXT:    sbcs r2, r2, r6
; CHECK-ARM-NEXT:    sbc r3, r3, r6
; CHECK-ARM-NEXT:    rsbs r0, r0, #0
; CHECK-ARM-NEXT:    rscs r1, r1, #0
; CHECK-ARM-NEXT:    rscs r2, r2, #0
; CHECK-ARM-NEXT:    rsc r3, r3, #0
; CHECK-ARM-NEXT:    pop {r4, r5, r6, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #4
; CHECK-THUMB-NEXT:    sub sp, #4
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    ldr r0, [sp, #36]
; CHECK-THUMB-NEXT:    str r0, [sp] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #32]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #28]
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24]
; CHECK-THUMB-NEXT:    movs r4, #0
; CHECK-THUMB-NEXT:    subs r0, r5, r0
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    sbcs r2, r6
; CHECK-THUMB-NEXT:    ldr r5, [sp] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r3, r5
; CHECK-THUMB-NEXT:    mov r5, r4
; CHECK-THUMB-NEXT:    adcs r5, r4
; CHECK-THUMB-NEXT:    movs r6, #1
; CHECK-THUMB-NEXT:    eors r6, r5
; CHECK-THUMB-NEXT:    rsbs r5, r6, #0
; CHECK-THUMB-NEXT:    eors r3, r5
; CHECK-THUMB-NEXT:    eors r2, r5
; CHECK-THUMB-NEXT:    eors r1, r5
; CHECK-THUMB-NEXT:    eors r0, r5
; CHECK-THUMB-NEXT:    subs r0, r0, r5
; CHECK-THUMB-NEXT:    sbcs r1, r5
; CHECK-THUMB-NEXT:    sbcs r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r5
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:    mov r5, r4
; CHECK-THUMB-NEXT:    sbcs r5, r1
; CHECK-THUMB-NEXT:    mov r6, r4
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    sbcs r4, r3
; CHECK-THUMB-NEXT:    mov r1, r5
; CHECK-THUMB-NEXT:    mov r2, r6
; CHECK-THUMB-NEXT:    mov r3, r4
; CHECK-THUMB-NEXT:    add sp, #4
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
  %aext = zext i128 %a to i256
  %bext = zext i128 %b to i256
  %sub = sub i256 %aext, %bext
  %abs = call i256 @llvm.abs.i256(i256 %sub, i1 false)
  %nabs = sub i256 0, %abs
  %trunc = trunc i256 %nabs to i128
  ret i128 %trunc
}

define i128 @abd_ext_i128_undef(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_ext_i128_undef:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, lr}
; CHECK-ARM-NEXT:    ldr r5, [sp, #16]
; CHECK-ARM-NEXT:    mov r6, #0
; CHECK-ARM-NEXT:    ldr r4, [sp, #20]
; CHECK-ARM-NEXT:    subs r0, r0, r5
; CHECK-ARM-NEXT:    ldr lr, [sp, #24]
; CHECK-ARM-NEXT:    sbcs r1, r1, r4
; CHECK-ARM-NEXT:    ldr r12, [sp, #28]
; CHECK-ARM-NEXT:    sbcs r2, r2, lr
; CHECK-ARM-NEXT:    sbcs r3, r3, r12
; CHECK-ARM-NEXT:    adc r6, r6, #0
; CHECK-ARM-NEXT:    eor r6, r6, #1
; CHECK-ARM-NEXT:    rsb r6, r6, #0
; CHECK-ARM-NEXT:    eor r0, r0, r6
; CHECK-ARM-NEXT:    eor r1, r1, r6
; CHECK-ARM-NEXT:    subs r0, r0, r6
; CHECK-ARM-NEXT:    eor r2, r2, r6
; CHECK-ARM-NEXT:    sbcs r1, r1, r6
; CHECK-ARM-NEXT:    eor r3, r3, r6
; CHECK-ARM-NEXT:    sbcs r2, r2, r6
; CHECK-ARM-NEXT:    sbc r3, r3, r6
; CHECK-ARM-NEXT:    rsbs r0, r0, #0
; CHECK-ARM-NEXT:    rscs r1, r1, #0
; CHECK-ARM-NEXT:    rscs r2, r2, #0
; CHECK-ARM-NEXT:    rsc r3, r3, #0
; CHECK-ARM-NEXT:    pop {r4, r5, r6, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_ext_i128_undef:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #4
; CHECK-THUMB-NEXT:    sub sp, #4
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    ldr r0, [sp, #36]
; CHECK-THUMB-NEXT:    str r0, [sp] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r6, [sp, #32]
; CHECK-THUMB-NEXT:    ldr r7, [sp, #28]
; CHECK-THUMB-NEXT:    ldr r0, [sp, #24]
; CHECK-THUMB-NEXT:    movs r4, #0
; CHECK-THUMB-NEXT:    subs r0, r5, r0
; CHECK-THUMB-NEXT:    sbcs r1, r7
; CHECK-THUMB-NEXT:    sbcs r2, r6
; CHECK-THUMB-NEXT:    ldr r5, [sp] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r3, r5
; CHECK-THUMB-NEXT:    mov r5, r4
; CHECK-THUMB-NEXT:    adcs r5, r4
; CHECK-THUMB-NEXT:    movs r6, #1
; CHECK-THUMB-NEXT:    eors r6, r5
; CHECK-THUMB-NEXT:    rsbs r5, r6, #0
; CHECK-THUMB-NEXT:    eors r3, r5
; CHECK-THUMB-NEXT:    eors r2, r5
; CHECK-THUMB-NEXT:    eors r1, r5
; CHECK-THUMB-NEXT:    eors r0, r5
; CHECK-THUMB-NEXT:    subs r0, r0, r5
; CHECK-THUMB-NEXT:    sbcs r1, r5
; CHECK-THUMB-NEXT:    sbcs r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r5
; CHECK-THUMB-NEXT:    rsbs r0, r0, #0
; CHECK-THUMB-NEXT:    mov r5, r4
; CHECK-THUMB-NEXT:    sbcs r5, r1
; CHECK-THUMB-NEXT:    mov r6, r4
; CHECK-THUMB-NEXT:    sbcs r6, r2
; CHECK-THUMB-NEXT:    sbcs r4, r3
; CHECK-THUMB-NEXT:    mov r1, r5
; CHECK-THUMB-NEXT:    mov r2, r6
; CHECK-THUMB-NEXT:    mov r3, r4
; CHECK-THUMB-NEXT:    add sp, #4
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
  %aext = zext i128 %a to i256
  %bext = zext i128 %b to i256
  %sub = sub i256 %aext, %bext
  %abs = call i256 @llvm.abs.i256(i256 %sub, i1 true)
  %nabs = sub i256 0, %abs
  %trunc = trunc i256 %nabs to i128
  ret i128 %trunc
}

;
; sub(umin(a,b),umax(a,b)) -> nabds(a,b)
;

define i8 @abd_minmax_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    and r1, r1, #255
; CHECK-ARM-NEXT:    and r0, r0, #255
; CHECK-ARM-NEXT:    cmp r0, r1
; CHECK-ARM-NEXT:    mov r2, r1
; CHECK-ARM-NEXT:    movlo r1, r0
; CHECK-ARM-NEXT:    movhi r2, r0
; CHECK-ARM-NEXT:    sub r0, r1, r2
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxtb r1, r1
; CHECK-THUMB-NEXT:    uxtb r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %min = call i8 @llvm.umin.i8(i8 %a, i8 %b)
  %max = call i8 @llvm.umax.i8(i8 %a, i8 %b)
  %sub = sub i8 %min, %max
  ret i8 %sub
}

define i16 @abd_minmax_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    mov r2, #255
; CHECK-ARM-NEXT:    orr r2, r2, #65280
; CHECK-ARM-NEXT:    and r1, r1, r2
; CHECK-ARM-NEXT:    and r0, r0, r2
; CHECK-ARM-NEXT:    cmp r0, r1
; CHECK-ARM-NEXT:    mov r2, r1
; CHECK-ARM-NEXT:    movlo r1, r0
; CHECK-ARM-NEXT:    movhi r2, r0
; CHECK-ARM-NEXT:    sub r0, r1, r2
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r1, r1
; CHECK-THUMB-NEXT:    uxth r0, r0
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    asrs r1, r0, #31
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %min = call i16 @llvm.umin.i16(i16 %a, i16 %b)
  %max = call i16 @llvm.umax.i16(i16 %a, i16 %b)
  %sub = sub i16 %min, %max
  ret i16 %sub
}

define i32 @abd_minmax_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    cmp r0, r1
; CHECK-ARM-NEXT:    mov r2, r1
; CHECK-ARM-NEXT:    movhi r2, r0
; CHECK-ARM-NEXT:    movlo r1, r0
; CHECK-ARM-NEXT:    sub r0, r1, r2
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sbcs r1, r1
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %min = call i32 @llvm.umin.i32(i32 %a, i32 %b)
  %max = call i32 @llvm.umax.i32(i32 %a, i32 %b)
  %sub = sub i32 %min, %max
  ret i32 %sub
}

define i64 @abd_minmax_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, lr}
; CHECK-ARM-NEXT:    push {r4, lr}
; CHECK-ARM-NEXT:    subs r12, r2, r0
; CHECK-ARM-NEXT:    mov lr, r2
; CHECK-ARM-NEXT:    sbcs r12, r3, r1
; CHECK-ARM-NEXT:    mov r12, r3
; CHECK-ARM-NEXT:    movlo lr, r0
; CHECK-ARM-NEXT:    movlo r12, r1
; CHECK-ARM-NEXT:    subs r4, r0, r2
; CHECK-ARM-NEXT:    sbcs r4, r1, r3
; CHECK-ARM-NEXT:    movlo r3, r1
; CHECK-ARM-NEXT:    movlo r2, r0
; CHECK-ARM-NEXT:    subs r0, r2, lr
; CHECK-ARM-NEXT:    sbc r1, r3, r12
; CHECK-ARM-NEXT:    pop {r4, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, lr}
; CHECK-THUMB-NEXT:    subs r4, r2, r0
; CHECK-THUMB-NEXT:    mov r4, r3
; CHECK-THUMB-NEXT:    sbcs r4, r1
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    blo .LBB16_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    mov r4, r3
; CHECK-THUMB-NEXT:  .LBB16_2:
; CHECK-THUMB-NEXT:    mov r5, r0
; CHECK-THUMB-NEXT:    blo .LBB16_4
; CHECK-THUMB-NEXT:  @ %bb.3:
; CHECK-THUMB-NEXT:    mov r5, r2
; CHECK-THUMB-NEXT:  .LBB16_4:
; CHECK-THUMB-NEXT:    subs r6, r0, r2
; CHECK-THUMB-NEXT:    mov r6, r1
; CHECK-THUMB-NEXT:    sbcs r6, r3
; CHECK-THUMB-NEXT:    blo .LBB16_6
; CHECK-THUMB-NEXT:  @ %bb.5:
; CHECK-THUMB-NEXT:    mov r1, r3
; CHECK-THUMB-NEXT:  .LBB16_6:
; CHECK-THUMB-NEXT:    blo .LBB16_8
; CHECK-THUMB-NEXT:  @ %bb.7:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:  .LBB16_8:
; CHECK-THUMB-NEXT:    subs r0, r0, r5
; CHECK-THUMB-NEXT:    sbcs r1, r4
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, pc}
  %min = call i64 @llvm.umin.i64(i64 %a, i64 %b)
  %max = call i64 @llvm.umax.i64(i64 %a, i64 %b)
  %sub = sub i64 %min, %max
  ret i64 %sub
}

define i128 @abd_minmax_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_minmax_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r10, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, lr}
; CHECK-ARM-NEXT:    ldr r5, [sp, #32]
; CHECK-ARM-NEXT:    ldr r4, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r5, r0
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r6, r4, r1
; CHECK-ARM-NEXT:    mov r10, r4
; CHECK-ARM-NEXT:    mov r7, r5
; CHECK-ARM-NEXT:    sbcs r6, lr, r2
; CHECK-ARM-NEXT:    mov r8, r12
; CHECK-ARM-NEXT:    sbcs r6, r12, r3
; CHECK-ARM-NEXT:    mov r9, lr
; CHECK-ARM-NEXT:    movlo r8, r3
; CHECK-ARM-NEXT:    movlo r9, r2
; CHECK-ARM-NEXT:    movlo r10, r1
; CHECK-ARM-NEXT:    movlo r7, r0
; CHECK-ARM-NEXT:    subs r6, r0, r5
; CHECK-ARM-NEXT:    sbcs r6, r1, r4
; CHECK-ARM-NEXT:    sbcs r6, r2, lr
; CHECK-ARM-NEXT:    sbcs r6, r3, r12
; CHECK-ARM-NEXT:    movlo r12, r3
; CHECK-ARM-NEXT:    movlo lr, r2
; CHECK-ARM-NEXT:    movlo r4, r1
; CHECK-ARM-NEXT:    movlo r5, r0
; CHECK-ARM-NEXT:    subs r0, r5, r7
; CHECK-ARM-NEXT:    sbcs r1, r4, r10
; CHECK-ARM-NEXT:    sbcs r2, lr, r9
; CHECK-ARM-NEXT:    sbc r3, r12, r8
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_minmax_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #20
; CHECK-THUMB-NEXT:    sub sp, #20
; CHECK-THUMB-NEXT:    ldr r5, [sp, #52]
; CHECK-THUMB-NEXT:    add r7, sp, #40
; CHECK-THUMB-NEXT:    ldm r7, {r4, r6, r7}
; CHECK-THUMB-NEXT:    str r4, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    subs r4, r4, r0
; CHECK-THUMB-NEXT:    mov r4, r6
; CHECK-THUMB-NEXT:    sbcs r4, r1
; CHECK-THUMB-NEXT:    mov r4, r7
; CHECK-THUMB-NEXT:    sbcs r4, r2
; CHECK-THUMB-NEXT:    mov r4, r5
; CHECK-THUMB-NEXT:    sbcs r4, r3
; CHECK-THUMB-NEXT:    mov r4, r3
; CHECK-THUMB-NEXT:    bhs .LBB17_12
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    str r2, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    bhs .LBB17_13
; CHECK-THUMB-NEXT:  .LBB17_2:
; CHECK-THUMB-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    blo .LBB17_4
; CHECK-THUMB-NEXT:  .LBB17_3:
; CHECK-THUMB-NEXT:    str r6, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:  .LBB17_4:
; CHECK-THUMB-NEXT:    str r4, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r0
; CHECK-THUMB-NEXT:    blo .LBB17_6
; CHECK-THUMB-NEXT:  @ %bb.5:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:  .LBB17_6:
; CHECK-THUMB-NEXT:    str r4, [sp] @ 4-byte Spill
; CHECK-THUMB-NEXT:    ldr r4, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r4, r0, r4
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    sbcs r4, r6
; CHECK-THUMB-NEXT:    mov r4, r2
; CHECK-THUMB-NEXT:    sbcs r4, r7
; CHECK-THUMB-NEXT:    mov r4, r3
; CHECK-THUMB-NEXT:    sbcs r4, r5
; CHECK-THUMB-NEXT:    bhs .LBB17_14
; CHECK-THUMB-NEXT:  @ %bb.7:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bhs .LBB17_15
; CHECK-THUMB-NEXT:  .LBB17_8:
; CHECK-THUMB-NEXT:    bhs .LBB17_16
; CHECK-THUMB-NEXT:  .LBB17_9:
; CHECK-THUMB-NEXT:    blo .LBB17_11
; CHECK-THUMB-NEXT:  .LBB17_10:
; CHECK-THUMB-NEXT:    ldr r0, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:  .LBB17_11:
; CHECK-THUMB-NEXT:    ldr r5, [sp] @ 4-byte Reload
; CHECK-THUMB-NEXT:    subs r0, r0, r5
; CHECK-THUMB-NEXT:    ldr r5, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r1, r5
; CHECK-THUMB-NEXT:    ldr r5, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r2, r5
; CHECK-THUMB-NEXT:    sbcs r3, r4
; CHECK-THUMB-NEXT:    add sp, #20
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB17_12:
; CHECK-THUMB-NEXT:    mov r4, r5
; CHECK-THUMB-NEXT:    str r2, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    blo .LBB17_2
; CHECK-THUMB-NEXT:  .LBB17_13:
; CHECK-THUMB-NEXT:    str r7, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    bhs .LBB17_3
; CHECK-THUMB-NEXT:    b .LBB17_4
; CHECK-THUMB-NEXT:  .LBB17_14:
; CHECK-THUMB-NEXT:    mov r3, r5
; CHECK-THUMB-NEXT:    ldr r4, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blo .LBB17_8
; CHECK-THUMB-NEXT:  .LBB17_15:
; CHECK-THUMB-NEXT:    mov r2, r7
; CHECK-THUMB-NEXT:    blo .LBB17_9
; CHECK-THUMB-NEXT:  .LBB17_16:
; CHECK-THUMB-NEXT:    mov r1, r6
; CHECK-THUMB-NEXT:    bhs .LBB17_10
; CHECK-THUMB-NEXT:    b .LBB17_11
  %min = call i128 @llvm.umin.i128(i128 %a, i128 %b)
  %max = call i128 @llvm.umax.i128(i128 %a, i128 %b)
  %sub = sub i128 %min, %max
  ret i128 %sub
}

;
; select(icmp(a,b),sub(a,b),sub(b,a)) -> nabds(a,b)
;

define i8 @abd_cmp_i8(i8 %a, i8 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i8:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    and r12, r1, #255
; CHECK-ARM-NEXT:    and r3, r0, #255
; CHECK-ARM-NEXT:    sub r2, r1, r0
; CHECK-ARM-NEXT:    cmp r3, r12
; CHECK-ARM-NEXT:    subls r2, r0, r1
; CHECK-ARM-NEXT:    mov r0, r2
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i8:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxtb r2, r1
; CHECK-THUMB-NEXT:    uxtb r3, r0
; CHECK-THUMB-NEXT:    cmp r3, r2
; CHECK-THUMB-NEXT:    bls .LBB18_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
; CHECK-THUMB-NEXT:  .LBB18_2:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp ule i8 %a, %b
  %ab = sub i8 %a, %b
  %ba = sub i8 %b, %a
  %sel = select i1 %cmp, i8 %ab, i8 %ba
  ret i8 %sel
}

define i16 @abd_cmp_i16(i16 %a, i16 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i16:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    mov r12, #255
; CHECK-ARM-NEXT:    sub r2, r1, r0
; CHECK-ARM-NEXT:    orr r12, r12, #65280
; CHECK-ARM-NEXT:    and lr, r1, r12
; CHECK-ARM-NEXT:    and r3, r0, r12
; CHECK-ARM-NEXT:    cmp r3, lr
; CHECK-ARM-NEXT:    sublo r2, r0, r1
; CHECK-ARM-NEXT:    mov r0, r2
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i16:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    uxth r2, r1
; CHECK-THUMB-NEXT:    uxth r3, r0
; CHECK-THUMB-NEXT:    cmp r3, r2
; CHECK-THUMB-NEXT:    blo .LBB19_2
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
; CHECK-THUMB-NEXT:  .LBB19_2:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp ult i16 %a, %b
  %ab = sub i16 %a, %b
  %ba = sub i16 %b, %a
  %sel = select i1 %cmp, i16 %ab, i16 %ba
  ret i16 %sel
}

define i32 @abd_cmp_i32(i32 %a, i32 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i32:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    subs r0, r0, r1
; CHECK-ARM-NEXT:    rsbhs r0, r0, #0
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i32:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    subs r0, r0, r1
; CHECK-THUMB-NEXT:    sbcs r1, r1
; CHECK-THUMB-NEXT:    eors r0, r1
; CHECK-THUMB-NEXT:    subs r0, r1, r0
; CHECK-THUMB-NEXT:    bx lr
  %cmp = icmp uge i32 %a, %b
  %ab = sub i32 %a, %b
  %ba = sub i32 %b, %a
  %sel = select i1 %cmp, i32 %ba, i32 %ab
  ret i32 %sel
}

define i64 @abd_cmp_i64(i64 %a, i64 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i64:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r11, lr}
; CHECK-ARM-NEXT:    push {r11, lr}
; CHECK-ARM-NEXT:    subs r12, r2, r0
; CHECK-ARM-NEXT:    sbc lr, r3, r1
; CHECK-ARM-NEXT:    subs r0, r0, r2
; CHECK-ARM-NEXT:    sbcs r1, r1, r3
; CHECK-ARM-NEXT:    movhs r0, r12
; CHECK-ARM-NEXT:    movhs r1, lr
; CHECK-ARM-NEXT:    pop {r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i64:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r7, lr}
; CHECK-THUMB-NEXT:    subs r5, r2, r0
; CHECK-THUMB-NEXT:    mov r4, r3
; CHECK-THUMB-NEXT:    sbcs r4, r1
; CHECK-THUMB-NEXT:    subs r0, r0, r2
; CHECK-THUMB-NEXT:    sbcs r1, r3
; CHECK-THUMB-NEXT:    bhs .LBB21_3
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bhs .LBB21_4
; CHECK-THUMB-NEXT:  .LBB21_2:
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
; CHECK-THUMB-NEXT:  .LBB21_3:
; CHECK-THUMB-NEXT:    mov r0, r5
; CHECK-THUMB-NEXT:    blo .LBB21_2
; CHECK-THUMB-NEXT:  .LBB21_4:
; CHECK-THUMB-NEXT:    mov r1, r4
; CHECK-THUMB-NEXT:    pop {r4, r5, r7, pc}
  %cmp = icmp ult i64 %a, %b
  %ab = sub i64 %a, %b
  %ba = sub i64 %b, %a
  %sel = select i1 %cmp, i64 %ab, i64 %ba
  ret i64 %sel
}

define i128 @abd_cmp_i128(i128 %a, i128 %b) nounwind {
; CHECK-ARM-LABEL: abd_cmp_i128:
; CHECK-ARM:       @ %bb.0:
; CHECK-ARM-NEXT:    .save {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    push {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    ldr r9, [sp, #32]
; CHECK-ARM-NEXT:    ldr r8, [sp, #36]
; CHECK-ARM-NEXT:    subs r6, r9, r0
; CHECK-ARM-NEXT:    ldr lr, [sp, #40]
; CHECK-ARM-NEXT:    sbcs r7, r8, r1
; CHECK-ARM-NEXT:    ldr r12, [sp, #44]
; CHECK-ARM-NEXT:    sbcs r4, lr, r2
; CHECK-ARM-NEXT:    sbc r5, r12, r3
; CHECK-ARM-NEXT:    subs r0, r0, r9
; CHECK-ARM-NEXT:    sbcs r1, r1, r8
; CHECK-ARM-NEXT:    sbcs r2, r2, lr
; CHECK-ARM-NEXT:    sbcs r3, r3, r12
; CHECK-ARM-NEXT:    movhs r0, r6
; CHECK-ARM-NEXT:    movhs r1, r7
; CHECK-ARM-NEXT:    movhs r2, r4
; CHECK-ARM-NEXT:    movhs r3, r5
; CHECK-ARM-NEXT:    pop {r4, r5, r6, r7, r8, r9, r11, lr}
; CHECK-ARM-NEXT:    bx lr
;
; CHECK-THUMB-LABEL: abd_cmp_i128:
; CHECK-THUMB:       @ %bb.0:
; CHECK-THUMB-NEXT:    .save {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    push {r4, r5, r6, r7, lr}
; CHECK-THUMB-NEXT:    .pad #28
; CHECK-THUMB-NEXT:    sub sp, #28
; CHECK-THUMB-NEXT:    str r2, [sp, #24] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r4, r1
; CHECK-THUMB-NEXT:    str r1, [sp, #20] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r1, r0
; CHECK-THUMB-NEXT:    add r6, sp, #52
; CHECK-THUMB-NEXT:    ldm r6, {r0, r5, r6}
; CHECK-THUMB-NEXT:    ldr r2, [sp, #48]
; CHECK-THUMB-NEXT:    subs r7, r2, r1
; CHECK-THUMB-NEXT:    str r7, [sp, #4] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r7, r0
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    str r7, [sp, #8] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r7, r5
; CHECK-THUMB-NEXT:    ldr r4, [sp, #24] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r7, r4
; CHECK-THUMB-NEXT:    str r7, [sp, #12] @ 4-byte Spill
; CHECK-THUMB-NEXT:    mov r7, r6
; CHECK-THUMB-NEXT:    sbcs r7, r3
; CHECK-THUMB-NEXT:    str r7, [sp, #16] @ 4-byte Spill
; CHECK-THUMB-NEXT:    subs r2, r1, r2
; CHECK-THUMB-NEXT:    ldr r1, [sp, #20] @ 4-byte Reload
; CHECK-THUMB-NEXT:    sbcs r1, r0
; CHECK-THUMB-NEXT:    sbcs r4, r5
; CHECK-THUMB-NEXT:    sbcs r3, r6
; CHECK-THUMB-NEXT:    bhs .LBB22_6
; CHECK-THUMB-NEXT:  @ %bb.1:
; CHECK-THUMB-NEXT:    bhs .LBB22_7
; CHECK-THUMB-NEXT:  .LBB22_2:
; CHECK-THUMB-NEXT:    bhs .LBB22_8
; CHECK-THUMB-NEXT:  .LBB22_3:
; CHECK-THUMB-NEXT:    blo .LBB22_5
; CHECK-THUMB-NEXT:  .LBB22_4:
; CHECK-THUMB-NEXT:    ldr r3, [sp, #16] @ 4-byte Reload
; CHECK-THUMB-NEXT:  .LBB22_5:
; CHECK-THUMB-NEXT:    mov r0, r2
; CHECK-THUMB-NEXT:    mov r2, r4
; CHECK-THUMB-NEXT:    add sp, #28
; CHECK-THUMB-NEXT:    pop {r4, r5, r6, r7, pc}
; CHECK-THUMB-NEXT:  .LBB22_6:
; CHECK-THUMB-NEXT:    ldr r2, [sp, #4] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blo .LBB22_2
; CHECK-THUMB-NEXT:  .LBB22_7:
; CHECK-THUMB-NEXT:    ldr r1, [sp, #8] @ 4-byte Reload
; CHECK-THUMB-NEXT:    blo .LBB22_3
; CHECK-THUMB-NEXT:  .LBB22_8:
; CHECK-THUMB-NEXT:    ldr r4, [sp, #12] @ 4-byte Reload
; CHECK-THUMB-NEXT:    bhs .LBB22_4
; CHECK-THUMB-NEXT:    b .LBB22_5
  %cmp = icmp ult i128 %a, %b
  %ab = sub i128 %a, %b
  %ba = sub i128 %b, %a
  %sel = select i1 %cmp, i128 %ab, i128 %ba
  ret i128 %sel
}

declare i8 @llvm.abs.i8(i8, i1)
declare i16 @llvm.abs.i16(i16, i1)
declare i32 @llvm.abs.i32(i32, i1)
declare i64 @llvm.abs.i64(i64, i1)
declare i128 @llvm.abs.i128(i128, i1)

declare i8 @llvm.umax.i8(i8, i8)
declare i16 @llvm.umax.i16(i16, i16)
declare i32 @llvm.umax.i32(i32, i32)
declare i64 @llvm.umax.i64(i64, i64)

declare i8 @llvm.umin.i8(i8, i8)
declare i16 @llvm.umin.i16(i16, i16)
declare i32 @llvm.umin.i32(i32, i32)
declare i64 @llvm.umin.i64(i64, i64)
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
