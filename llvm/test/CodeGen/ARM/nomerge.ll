; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=arm -o - | FileCheck %s

define void @foo(i32 %i) nounwind {
; CHECK-LABEL: foo:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    push {r11, lr}
; CHECK-NEXT:    cmp r0, #7
; CHECK-NEXT:    beq .LBB0_3
; CHECK-NEXT:  @ %bb.1: @ %entry
; CHECK-NEXT:    cmp r0, #5
; CHECK-NEXT:    bne .LBB0_4
; CHECK-NEXT:  @ %bb.2: @ %if.then
; CHECK-NEXT:    bl bar
; CHECK-NEXT:    pop {r11, lr}
; CHECK-NEXT:    b bar
; CHECK-NEXT:  .LBB0_3: @ %if.then2
; CHECK-NEXT:    bl bar
; CHECK-NEXT:  .LBB0_4: @ %if.end3
; CHECK-NEXT:    pop {r11, lr}
; CHECK-NEXT:    b bar
entry:
  switch i32 %i, label %if.end3 [
    i32 5, label %if.then
    i32 7, label %if.then2
  ]

if.then:
  tail call void @bar() #0
  br label %if.end3

if.then2:
  tail call void @bar() #0
  br label %if.end3

if.end3:
  tail call void @bar() #0
  ret void
}

define void @foo_tail(i1 %i) nounwind {
; CHECK-LABEL: foo_tail:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    tst r0, #1
; CHECK-NEXT:    b bar
entry:
  br i1 %i, label %if.then, label %if.else

if.then:
  tail call void @bar() #0
  br label %if.end

if.else:
  tail call void @bar() #0
  br label %if.end

if.end:
  ret void
}

declare void @bar()

attributes #0 = { nomerge }
