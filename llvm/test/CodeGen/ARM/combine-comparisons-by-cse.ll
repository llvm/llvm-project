; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=armv7a < %s | FileCheck %s --check-prefix=ARM
; RUN: llc -mtriple=armv6m < %s | FileCheck %s --check-prefix=THUMB
; RUN: llc -mtriple=armv7m < %s | FileCheck %s --check-prefix=THUMB2
; RUN: llc -mtriple=thumbv8.1m.main < %s | FileCheck %s --check-prefix=THUMBV8

; marked as external to prevent possible optimizations
@a = external global i32
@b = external global i32
@c = external global i32
@d = external global i32

; (a > 10 && b == c) || (a >= 10 && b == d)
define i32 @combine_gt_ge_10() #0 {
; ARM-LABEL: combine_gt_ge_10:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movw r1, :lower16:b
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    movt r1, :upper16:b
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmp r0, #11
; ARM-NEXT:    blt .LBB0_2
; ARM-NEXT:  @ %bb.1: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    ldr r3, [r1]
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r3, r2
; ARM-NEXT:    bxeq lr
; ARM-NEXT:    b .LBB0_3
; ARM-NEXT:  .LBB0_2: @ %lor.lhs.false
; ARM-NEXT:    cmp r0, #10
; ARM-NEXT:    blt .LBB0_4
; ARM-NEXT:  .LBB0_3: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    ldr r1, [r1]
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r1, r2
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB0_4: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_gt_ge_10:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI0_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    cmp r0, #11
; THUMB-NEXT:    blt .LBB0_3
; THUMB-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI0_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI0_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB0_4
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB0_3: @ %lor.lhs.false
; THUMB-NEXT:    cmp r0, #10
; THUMB-NEXT:    blt .LBB0_6
; THUMB-NEXT:  .LBB0_4: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI0_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI0_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB0_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB0_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI0_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI0_1:
; THUMB-NEXT:    .long c
; THUMB-NEXT:  .LCPI0_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI0_3:
; THUMB-NEXT:    .long d
;
; THUMB2-LABEL: combine_gt_ge_10:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r1, [r0]
; THUMB2-NEXT:    movw r0, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:b
; THUMB2-NEXT:    cmp r1, #11
; THUMB2-NEXT:    blt .LBB0_2
; THUMB2-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB2-NEXT:    movw r1, :lower16:c
; THUMB2-NEXT:    ldr r2, [r0]
; THUMB2-NEXT:    movt r1, :upper16:c
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r2, r1
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:    b .LBB0_3
; THUMB2-NEXT:  .LBB0_2: @ %lor.lhs.false
; THUMB2-NEXT:    cmp r1, #10
; THUMB2-NEXT:    blt .LBB0_4
; THUMB2-NEXT:  .LBB0_3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r1, :lower16:d
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    movt r1, :upper16:d
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r0, r1
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB0_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_gt_ge_10:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r1, [r0]
; THUMBV8-NEXT:    movw r0, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:b
; THUMBV8-NEXT:    cmp r1, #11
; THUMBV8-NEXT:    blt .LBB0_2
; THUMBV8-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMBV8-NEXT:    movw r1, :lower16:c
; THUMBV8-NEXT:    ldr r2, [r0]
; THUMBV8-NEXT:    movt r1, :upper16:c
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r2, r1
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:    b .LBB0_3
; THUMBV8-NEXT:  .LBB0_2: @ %lor.lhs.false
; THUMBV8-NEXT:    cmp r1, #10
; THUMBV8-NEXT:    blt .LBB0_4
; THUMBV8-NEXT:  .LBB0_3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r1, :lower16:d
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    movt r1, :upper16:d
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r0, r1
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB0_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp sgt i32 %0, 10
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %land.lhs.true3

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp sgt i32 %0, 9
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; (a > 5 && b == c) || (a < 5 && b == d)
define i32 @combine_gt_lt_5() #0 {
; ARM-LABEL: combine_gt_lt_5:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmp r0, #6
; ARM-NEXT:    blt .LBB1_2
; ARM-NEXT:  @ %bb.1: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    b .LBB1_4
; ARM-NEXT:  .LBB1_2: @ %lor.lhs.false
; ARM-NEXT:    cmp r0, #4
; ARM-NEXT:    bgt .LBB1_5
; ARM-NEXT:  @ %bb.3: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:  .LBB1_4: @ %land.lhs.true3
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB1_5: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_gt_lt_5:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI1_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    cmp r0, #6
; THUMB-NEXT:    blt .LBB1_3
; THUMB-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI1_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI1_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB1_6
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB1_3: @ %lor.lhs.false
; THUMB-NEXT:    cmp r0, #4
; THUMB-NEXT:    bgt .LBB1_6
; THUMB-NEXT:  @ %bb.4: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI1_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI1_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB1_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB1_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI1_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI1_1:
; THUMB-NEXT:    .long d
; THUMB-NEXT:  .LCPI1_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI1_3:
; THUMB-NEXT:    .long c
;
; THUMB2-LABEL: combine_gt_lt_5:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    cmp r0, #6
; THUMB2-NEXT:    blt .LBB1_2
; THUMB2-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:c
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:c
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:    b .LBB1_4
; THUMB2-NEXT:  .LBB1_2: @ %lor.lhs.false
; THUMB2-NEXT:    cmp r0, #4
; THUMB2-NEXT:    bgt .LBB1_4
; THUMB2-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB1_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_gt_lt_5:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    cmp r0, #6
; THUMBV8-NEXT:    blt .LBB1_2
; THUMBV8-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:c
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:c
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:    b .LBB1_4
; THUMBV8-NEXT:  .LBB1_2: @ %lor.lhs.false
; THUMBV8-NEXT:    cmp r0, #4
; THUMBV8-NEXT:    bgt .LBB1_4
; THUMBV8-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB1_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp sgt i32 %0, 5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %if.end

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp slt i32 %0, 5
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false, %land.lhs.true
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; (a < 5 && b == c) || (a <= 5 && b == d)
define i32 @combine_lt_ge_5() #0 {
; ARM-LABEL: combine_lt_ge_5:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movw r1, :lower16:b
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    movt r1, :upper16:b
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmp r0, #4
; ARM-NEXT:    bgt .LBB2_2
; ARM-NEXT:  @ %bb.1: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    ldr r3, [r1]
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r3, r2
; ARM-NEXT:    bxeq lr
; ARM-NEXT:    b .LBB2_3
; ARM-NEXT:  .LBB2_2: @ %lor.lhs.false
; ARM-NEXT:    cmp r0, #5
; ARM-NEXT:    bgt .LBB2_4
; ARM-NEXT:  .LBB2_3: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    ldr r1, [r1]
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r1, r2
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB2_4: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_lt_ge_5:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI2_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    cmp r0, #4
; THUMB-NEXT:    bgt .LBB2_3
; THUMB-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI2_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI2_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB2_4
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB2_3: @ %lor.lhs.false
; THUMB-NEXT:    cmp r0, #5
; THUMB-NEXT:    bgt .LBB2_6
; THUMB-NEXT:  .LBB2_4: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI2_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI2_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB2_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB2_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI2_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI2_1:
; THUMB-NEXT:    .long c
; THUMB-NEXT:  .LCPI2_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI2_3:
; THUMB-NEXT:    .long d
;
; THUMB2-LABEL: combine_lt_ge_5:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r1, [r0]
; THUMB2-NEXT:    movw r0, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:b
; THUMB2-NEXT:    cmp r1, #4
; THUMB2-NEXT:    bgt .LBB2_2
; THUMB2-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB2-NEXT:    movw r1, :lower16:c
; THUMB2-NEXT:    ldr r2, [r0]
; THUMB2-NEXT:    movt r1, :upper16:c
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r2, r1
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:    b .LBB2_3
; THUMB2-NEXT:  .LBB2_2: @ %lor.lhs.false
; THUMB2-NEXT:    cmp r1, #5
; THUMB2-NEXT:    bgt .LBB2_4
; THUMB2-NEXT:  .LBB2_3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r1, :lower16:d
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    movt r1, :upper16:d
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r0, r1
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB2_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_lt_ge_5:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r1, [r0]
; THUMBV8-NEXT:    movw r0, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:b
; THUMBV8-NEXT:    cmp r1, #4
; THUMBV8-NEXT:    bgt .LBB2_2
; THUMBV8-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMBV8-NEXT:    movw r1, :lower16:c
; THUMBV8-NEXT:    ldr r2, [r0]
; THUMBV8-NEXT:    movt r1, :upper16:c
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r2, r1
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:    b .LBB2_3
; THUMBV8-NEXT:  .LBB2_2: @ %lor.lhs.false
; THUMBV8-NEXT:    cmp r1, #5
; THUMBV8-NEXT:    bgt .LBB2_4
; THUMBV8-NEXT:  .LBB2_3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r1, :lower16:d
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    movt r1, :upper16:d
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r0, r1
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB2_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp slt i32 %0, 5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %land.lhs.true3

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp slt i32 %0, 6
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; (a < 5 && b == c) || (a > 5 && b == d)
define i32 @combine_lt_gt_5() #0 {
; ARM-LABEL: combine_lt_gt_5:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmp r0, #4
; ARM-NEXT:    bgt .LBB3_2
; ARM-NEXT:  @ %bb.1: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    b .LBB3_4
; ARM-NEXT:  .LBB3_2: @ %lor.lhs.false
; ARM-NEXT:    cmp r0, #6
; ARM-NEXT:    blt .LBB3_5
; ARM-NEXT:  @ %bb.3: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:  .LBB3_4: @ %land.lhs.true3
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB3_5: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_lt_gt_5:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI3_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    cmp r0, #4
; THUMB-NEXT:    bgt .LBB3_3
; THUMB-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI3_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI3_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB3_6
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB3_3: @ %lor.lhs.false
; THUMB-NEXT:    cmp r0, #6
; THUMB-NEXT:    blt .LBB3_6
; THUMB-NEXT:  @ %bb.4: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI3_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI3_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB3_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB3_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI3_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI3_1:
; THUMB-NEXT:    .long d
; THUMB-NEXT:  .LCPI3_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI3_3:
; THUMB-NEXT:    .long c
;
; THUMB2-LABEL: combine_lt_gt_5:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    cmp r0, #4
; THUMB2-NEXT:    bgt .LBB3_2
; THUMB2-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:c
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:c
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:    b .LBB3_4
; THUMB2-NEXT:  .LBB3_2: @ %lor.lhs.false
; THUMB2-NEXT:    cmp r0, #6
; THUMB2-NEXT:    blt .LBB3_4
; THUMB2-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB3_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_lt_gt_5:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    cmp r0, #4
; THUMBV8-NEXT:    bgt .LBB3_2
; THUMBV8-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:c
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:c
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:    b .LBB3_4
; THUMBV8-NEXT:  .LBB3_2: @ %lor.lhs.false
; THUMBV8-NEXT:    cmp r0, #6
; THUMBV8-NEXT:    blt .LBB3_4
; THUMBV8-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB3_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp slt i32 %0, 5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %if.end

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp sgt i32 %0, 5
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false, %land.lhs.true
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; (a > -5 && b == c) || (a < -5 && b == d)
define i32 @combine_gt_lt_n5() #0 {
; ARM-LABEL: combine_gt_lt_n5:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmn r0, #4
; ARM-NEXT:    blt .LBB4_2
; ARM-NEXT:  @ %bb.1: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    b .LBB4_4
; ARM-NEXT:  .LBB4_2: @ %lor.lhs.false
; ARM-NEXT:    cmn r0, #6
; ARM-NEXT:    bgt .LBB4_5
; ARM-NEXT:  @ %bb.3: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:  .LBB4_4: @ %land.lhs.true3
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB4_5: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_gt_lt_n5:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI4_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    movs r1, #3
; THUMB-NEXT:    mvns r1, r1
; THUMB-NEXT:    cmp r0, r1
; THUMB-NEXT:    blt .LBB4_3
; THUMB-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI4_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI4_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB4_6
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB4_3: @ %lor.lhs.false
; THUMB-NEXT:    movs r1, #5
; THUMB-NEXT:    mvns r1, r1
; THUMB-NEXT:    cmp r0, r1
; THUMB-NEXT:    bgt .LBB4_6
; THUMB-NEXT:  @ %bb.4: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI4_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI4_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB4_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB4_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI4_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI4_1:
; THUMB-NEXT:    .long d
; THUMB-NEXT:  .LCPI4_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI4_3:
; THUMB-NEXT:    .long c
;
; THUMB2-LABEL: combine_gt_lt_n5:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    cmn.w r0, #4
; THUMB2-NEXT:    blt .LBB4_2
; THUMB2-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:c
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:c
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:    b .LBB4_4
; THUMB2-NEXT:  .LBB4_2: @ %lor.lhs.false
; THUMB2-NEXT:    cmn.w r0, #6
; THUMB2-NEXT:    bgt .LBB4_4
; THUMB2-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB4_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_gt_lt_n5:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    cmn.w r0, #4
; THUMBV8-NEXT:    blt .LBB4_2
; THUMBV8-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:c
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:c
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:    b .LBB4_4
; THUMBV8-NEXT:  .LBB4_2: @ %lor.lhs.false
; THUMBV8-NEXT:    cmn.w r0, #6
; THUMBV8-NEXT:    bgt .LBB4_4
; THUMBV8-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB4_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp sgt i32 %0, -5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %if.end

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp slt i32 %0, -5
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false, %land.lhs.true
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

; (a < -5 && b == c) || (a > -5 && b == d)
define i32 @combine_lt_gt_n5() #0 {
; ARM-LABEL: combine_lt_gt_n5:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmn r0, #6
; ARM-NEXT:    bgt .LBB5_2
; ARM-NEXT:  @ %bb.1: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    b .LBB5_4
; ARM-NEXT:  .LBB5_2: @ %lor.lhs.false
; ARM-NEXT:    cmn r0, #4
; ARM-NEXT:    blt .LBB5_5
; ARM-NEXT:  @ %bb.3: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:  .LBB5_4: @ %land.lhs.true3
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB5_5: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_lt_gt_n5:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r0, .LCPI5_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    movs r1, #5
; THUMB-NEXT:    mvns r1, r1
; THUMB-NEXT:    cmp r0, r1
; THUMB-NEXT:    bgt .LBB5_3
; THUMB-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI5_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI5_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB5_6
; THUMB-NEXT:  @ %bb.2:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB5_3: @ %lor.lhs.false
; THUMB-NEXT:    movs r1, #3
; THUMB-NEXT:    mvns r1, r1
; THUMB-NEXT:    cmp r0, r1
; THUMB-NEXT:    blt .LBB5_6
; THUMB-NEXT:  @ %bb.4: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI5_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI5_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB5_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB5_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI5_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI5_1:
; THUMB-NEXT:    .long d
; THUMB-NEXT:  .LCPI5_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI5_3:
; THUMB-NEXT:    .long c
;
; THUMB2-LABEL: combine_lt_gt_n5:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    cmn.w r0, #6
; THUMB2-NEXT:    bgt .LBB5_2
; THUMB2-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:c
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:c
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:    b .LBB5_4
; THUMB2-NEXT:  .LBB5_2: @ %lor.lhs.false
; THUMB2-NEXT:    cmn.w r0, #4
; THUMB2-NEXT:    blt .LBB5_4
; THUMB2-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB5_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_lt_gt_n5:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    cmn.w r0, #6
; THUMBV8-NEXT:    bgt .LBB5_2
; THUMBV8-NEXT:  @ %bb.1: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:c
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:c
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:    b .LBB5_4
; THUMBV8-NEXT:  .LBB5_2: @ %lor.lhs.false
; THUMBV8-NEXT:    cmn.w r0, #4
; THUMBV8-NEXT:    blt .LBB5_4
; THUMBV8-NEXT:  @ %bb.3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB5_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp slt i32 %0, -5
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %if.end

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp sgt i32 %0, -5
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false, %land.lhs.true
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}

%struct.Struct = type { i32, i32 }

@glob = internal unnamed_addr global ptr null, align 8

declare ptr @Update(ptr) #1

; no checks for this case, it just should be processed without errors
define void @combine_non_adjacent_cmp_br(ptr nocapture readonly %hdCall) #0 {
; ARM-LABEL: combine_non_adjacent_cmp_br:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    push {r4, r5, r6, r7, r11, lr}
; ARM-NEXT:    ldr r4, [r0]
; ARM-NEXT:    movw r7, :lower16:glob
; ARM-NEXT:    mov r6, #24
; ARM-NEXT:    movt r7, :upper16:glob
; ARM-NEXT:    add r5, r4, #2
; ARM-NEXT:  .LBB6_1: @ %land.rhs
; ARM-NEXT:    @ =>This Inner Loop Header: Depth=1
; ARM-NEXT:    ldr r0, [r6]
; ARM-NEXT:    cmp r0, #1
; ARM-NEXT:    blt .LBB6_3
; ARM-NEXT:  @ %bb.2: @ %while.body
; ARM-NEXT:    @ in Loop: Header=BB6_1 Depth=1
; ARM-NEXT:    ldr r0, [r7]
; ARM-NEXT:    bl Update
; ARM-NEXT:    sub r5, r5, #2
; ARM-NEXT:    cmp r4, r5
; ARM-NEXT:    blt .LBB6_1
; ARM-NEXT:  .LBB6_3: @ %while.end
; ARM-NEXT:    pop {r4, r5, r6, r7, r11, pc}
;
; THUMB-LABEL: combine_non_adjacent_cmp_br:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    push {r4, r5, r6, lr}
; THUMB-NEXT:    ldr r4, [r0]
; THUMB-NEXT:    adds r5, r4, #2
; THUMB-NEXT:    ldr r6, .LCPI6_0
; THUMB-NEXT:  .LBB6_1: @ %land.rhs
; THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMB-NEXT:    movs r0, #24
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    cmp r0, #1
; THUMB-NEXT:    blt .LBB6_3
; THUMB-NEXT:  @ %bb.2: @ %while.body
; THUMB-NEXT:    @ in Loop: Header=BB6_1 Depth=1
; THUMB-NEXT:    ldr r0, [r6]
; THUMB-NEXT:    bl Update
; THUMB-NEXT:    subs r5, r5, #2
; THUMB-NEXT:    cmp r4, r5
; THUMB-NEXT:    blt .LBB6_1
; THUMB-NEXT:  .LBB6_3: @ %while.end
; THUMB-NEXT:    pop {r4, r5, r6, pc}
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.4:
; THUMB-NEXT:  .LCPI6_0:
; THUMB-NEXT:    .long glob
;
; THUMB2-LABEL: combine_non_adjacent_cmp_br:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    push {r4, r5, r6, r7, lr}
; THUMB2-NEXT:    sub sp, #4
; THUMB2-NEXT:    ldr r4, [r0]
; THUMB2-NEXT:    movw r7, :lower16:glob
; THUMB2-NEXT:    movs r6, #24
; THUMB2-NEXT:    movt r7, :upper16:glob
; THUMB2-NEXT:    adds r5, r4, #2
; THUMB2-NEXT:  .LBB6_1: @ %land.rhs
; THUMB2-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMB2-NEXT:    ldr r0, [r6]
; THUMB2-NEXT:    cmp r0, #1
; THUMB2-NEXT:    blt .LBB6_3
; THUMB2-NEXT:  @ %bb.2: @ %while.body
; THUMB2-NEXT:    @ in Loop: Header=BB6_1 Depth=1
; THUMB2-NEXT:    ldr r0, [r7]
; THUMB2-NEXT:    bl Update
; THUMB2-NEXT:    subs r5, #2
; THUMB2-NEXT:    cmp r4, r5
; THUMB2-NEXT:    blt .LBB6_1
; THUMB2-NEXT:  .LBB6_3: @ %while.end
; THUMB2-NEXT:    add sp, #4
; THUMB2-NEXT:    pop {r4, r5, r6, r7, pc}
;
; THUMBV8-LABEL: combine_non_adjacent_cmp_br:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    push {r4, r5, r6, r7, lr}
; THUMBV8-NEXT:    sub sp, #4
; THUMBV8-NEXT:    ldr r4, [r0]
; THUMBV8-NEXT:    movw r7, :lower16:glob
; THUMBV8-NEXT:    movs r6, #24
; THUMBV8-NEXT:    movt r7, :upper16:glob
; THUMBV8-NEXT:    adds r5, r4, #2
; THUMBV8-NEXT:  .LBB6_1: @ %land.rhs
; THUMBV8-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMBV8-NEXT:    ldr r0, [r6]
; THUMBV8-NEXT:    cmp r0, #1
; THUMBV8-NEXT:    blt .LBB6_3
; THUMBV8-NEXT:  @ %bb.2: @ %while.body
; THUMBV8-NEXT:    @ in Loop: Header=BB6_1 Depth=1
; THUMBV8-NEXT:    ldr r0, [r7]
; THUMBV8-NEXT:    bl Update
; THUMBV8-NEXT:    subs r5, #2
; THUMBV8-NEXT:    cmp r4, r5
; THUMBV8-NEXT:    blt .LBB6_1
; THUMBV8-NEXT:  .LBB6_3: @ %while.end
; THUMBV8-NEXT:    add sp, #4
; THUMBV8-NEXT:    pop {r4, r5, r6, r7, pc}
entry:
  %0 = load i32, ptr %hdCall, align 8
  br label %land.rhs

land.rhs:
  %rp.06 = phi i32 [ %0, %entry ], [ %sub, %while.body ]
  %1 = load i32, ptr inttoptr (i32 24 to ptr), align 8
  %cmp2 = icmp sgt i32 %1, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:
  %2 = load ptr, ptr @glob, align 8
  %call = tail call ptr @Update(ptr %2) #2
  %sub = add nsw i32 %rp.06, -2
  %cmp = icmp slt i32 %0, %rp.06
  br i1 %cmp, label %land.rhs, label %while.end

while.end:
  ret void
}

; undefined external to prevent possible optimizations
declare void @do_something() #1

define i32 @do_nothing_if_resultant_opcodes_would_differ() #0 {
; ARM-LABEL: do_nothing_if_resultant_opcodes_would_differ:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    push {r4, r5, r11, lr}
; ARM-NEXT:    movw r4, :lower16:a
; ARM-NEXT:    movt r4, :upper16:a
; ARM-NEXT:    ldr r0, [r4]
; ARM-NEXT:    cmn r0, #2
; ARM-NEXT:    bgt .LBB7_4
; ARM-NEXT:  @ %bb.1: @ %while.body.preheader
; ARM-NEXT:    sub r5, r0, #1
; ARM-NEXT:  .LBB7_2: @ %while.body
; ARM-NEXT:    @ =>This Inner Loop Header: Depth=1
; ARM-NEXT:    bl do_something
; ARM-NEXT:    adds r5, r5, #1
; ARM-NEXT:    bmi .LBB7_2
; ARM-NEXT:  @ %bb.3: @ %while.cond.while.end_crit_edge
; ARM-NEXT:    ldr r0, [r4]
; ARM-NEXT:  .LBB7_4: @ %while.end
; ARM-NEXT:    cmp r0, #1
; ARM-NEXT:    bgt .LBB7_6
; ARM-NEXT:  @ %bb.5: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #123
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    pop {r4, r5, r11, pc}
; ARM-NEXT:  .LBB7_6: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    pop {r4, r5, r11, pc}
;
; THUMB-LABEL: do_nothing_if_resultant_opcodes_would_differ:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    push {r4, r5, r7, lr}
; THUMB-NEXT:    ldr r4, .LCPI7_0
; THUMB-NEXT:    ldr r0, [r4]
; THUMB-NEXT:    movs r1, #1
; THUMB-NEXT:    mvns r1, r1
; THUMB-NEXT:    cmp r0, r1
; THUMB-NEXT:    bgt .LBB7_4
; THUMB-NEXT:  @ %bb.1: @ %while.body.preheader
; THUMB-NEXT:    subs r5, r0, #1
; THUMB-NEXT:  .LBB7_2: @ %while.body
; THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMB-NEXT:    bl do_something
; THUMB-NEXT:    adds r5, r5, #1
; THUMB-NEXT:    bmi .LBB7_2
; THUMB-NEXT:  @ %bb.3: @ %while.cond.while.end_crit_edge
; THUMB-NEXT:    ldr r0, [r4]
; THUMB-NEXT:  .LBB7_4: @ %while.end
; THUMB-NEXT:    cmp r0, #1
; THUMB-NEXT:    bgt .LBB7_7
; THUMB-NEXT:  @ %bb.5: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI7_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI7_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB7_7
; THUMB-NEXT:  @ %bb.6:
; THUMB-NEXT:    movs r0, #123
; THUMB-NEXT:    pop {r4, r5, r7, pc}
; THUMB-NEXT:  .LBB7_7: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    pop {r4, r5, r7, pc}
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.8:
; THUMB-NEXT:  .LCPI7_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI7_1:
; THUMB-NEXT:    .long d
; THUMB-NEXT:  .LCPI7_2:
; THUMB-NEXT:    .long b
;
; THUMB2-LABEL: do_nothing_if_resultant_opcodes_would_differ:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    push {r4, r5, r7, lr}
; THUMB2-NEXT:    movw r4, :lower16:a
; THUMB2-NEXT:    movt r4, :upper16:a
; THUMB2-NEXT:    ldr r0, [r4]
; THUMB2-NEXT:    cmn.w r0, #2
; THUMB2-NEXT:    bgt .LBB7_4
; THUMB2-NEXT:  @ %bb.1: @ %while.body.preheader
; THUMB2-NEXT:    subs r5, r0, #1
; THUMB2-NEXT:  .LBB7_2: @ %while.body
; THUMB2-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMB2-NEXT:    bl do_something
; THUMB2-NEXT:    adds r5, #1
; THUMB2-NEXT:    bmi .LBB7_2
; THUMB2-NEXT:  @ %bb.3: @ %while.cond.while.end_crit_edge
; THUMB2-NEXT:    ldr r0, [r4]
; THUMB2-NEXT:  .LBB7_4: @ %while.end
; THUMB2-NEXT:    cmp r0, #1
; THUMB2-NEXT:    bgt .LBB7_7
; THUMB2-NEXT:  @ %bb.5: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    bne .LBB7_7
; THUMB2-NEXT:  @ %bb.6:
; THUMB2-NEXT:    movs r0, #123
; THUMB2-NEXT:    pop {r4, r5, r7, pc}
; THUMB2-NEXT:  .LBB7_7: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    pop {r4, r5, r7, pc}
;
; THUMBV8-LABEL: do_nothing_if_resultant_opcodes_would_differ:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    push {r4, r5, r7, lr}
; THUMBV8-NEXT:    movw r4, :lower16:a
; THUMBV8-NEXT:    movt r4, :upper16:a
; THUMBV8-NEXT:    ldr r0, [r4]
; THUMBV8-NEXT:    cmn.w r0, #2
; THUMBV8-NEXT:    bgt .LBB7_4
; THUMBV8-NEXT:  @ %bb.1: @ %while.body.preheader
; THUMBV8-NEXT:    subs r5, r0, #1
; THUMBV8-NEXT:  .LBB7_2: @ %while.body
; THUMBV8-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMBV8-NEXT:    bl do_something
; THUMBV8-NEXT:    adds r5, #1
; THUMBV8-NEXT:    bmi .LBB7_2
; THUMBV8-NEXT:  @ %bb.3: @ %while.cond.while.end_crit_edge
; THUMBV8-NEXT:    ldr r0, [r4]
; THUMBV8-NEXT:  .LBB7_4: @ %while.end
; THUMBV8-NEXT:    cmp r0, #1
; THUMBV8-NEXT:    bgt .LBB7_7
; THUMBV8-NEXT:  @ %bb.5: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    bne .LBB7_7
; THUMBV8-NEXT:  @ %bb.6:
; THUMBV8-NEXT:    movs r0, #123
; THUMBV8-NEXT:    pop {r4, r5, r7, pc}
; THUMBV8-NEXT:  .LBB7_7: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    pop {r4, r5, r7, pc}
entry:
  %0 = load i32, ptr @a, align 4
  %cmp4 = icmp slt i32 %0, -1
  br i1 %cmp4, label %while.body.preheader, label %while.end

while.body.preheader:                             ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %while.body, %while.body.preheader
  %i.05 = phi i32 [ %inc, %while.body ], [ %0, %while.body.preheader ]
  tail call void @do_something() #2
  %inc = add nsw i32 %i.05, 1
  %cmp = icmp slt i32 %i.05, 0
  br i1 %cmp, label %while.body, label %while.cond.while.end_crit_edge

while.cond.while.end_crit_edge:                   ; preds = %while.body
  %.pre = load i32, ptr @a, align 4
  br label %while.end

while.end:                                        ; preds = %while.cond.while.end_crit_edge, %entry
  %1 = phi i32 [ %.pre, %while.cond.while.end_crit_edge ], [ %0, %entry ]
  %cmp1 = icmp slt i32 %1, 2
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end
  %2 = load i32, ptr @b, align 4
  %3 = load i32, ptr @d, align 4
  %cmp2 = icmp eq i32 %2, %3
  br i1 %cmp2, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %while.end
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 123, %land.lhs.true ]
  ret i32 %retval.0
}

define i32 @do_nothing_if_compares_can_not_be_adjusted_to_each_other() #0 {
; ARM-LABEL: do_nothing_if_compares_can_not_be_adjusted_to_each_other:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    push {r4, lr}
; ARM-NEXT:    movw r0, :lower16:a
; ARM-NEXT:    movt r0, :upper16:a
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmp r0, #0
; ARM-NEXT:    bgt .LBB8_3
; ARM-NEXT:  @ %bb.1: @ %while.body.preheader
; ARM-NEXT:    sub r4, r0, #1
; ARM-NEXT:  .LBB8_2: @ %while.body
; ARM-NEXT:    @ =>This Inner Loop Header: Depth=1
; ARM-NEXT:    bl do_something
; ARM-NEXT:    adds r4, r4, #1
; ARM-NEXT:    bmi .LBB8_2
; ARM-NEXT:  .LBB8_3: @ %while.end
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    ldr r0, [r0]
; ARM-NEXT:    cmn r0, #2
; ARM-NEXT:    blt .LBB8_5
; ARM-NEXT:  @ %bb.4: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #123
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    pop {r4, pc}
; ARM-NEXT:  .LBB8_5: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    pop {r4, pc}
;
; THUMB-LABEL: do_nothing_if_compares_can_not_be_adjusted_to_each_other:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    push {r4, lr}
; THUMB-NEXT:    ldr r0, .LCPI8_0
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    cmp r0, #0
; THUMB-NEXT:    bgt .LBB8_3
; THUMB-NEXT:  @ %bb.1: @ %while.body.preheader
; THUMB-NEXT:    subs r4, r0, #1
; THUMB-NEXT:  .LBB8_2: @ %while.body
; THUMB-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMB-NEXT:    bl do_something
; THUMB-NEXT:    adds r4, r4, #1
; THUMB-NEXT:    bmi .LBB8_2
; THUMB-NEXT:  .LBB8_3: @ %while.end
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    mvns r0, r0
; THUMB-NEXT:    ldr r1, .LCPI8_1
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    blt .LBB8_6
; THUMB-NEXT:  @ %bb.4: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI8_2
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI8_3
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB8_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #123
; THUMB-NEXT:    pop {r4, pc}
; THUMB-NEXT:  .LBB8_6: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    pop {r4, pc}
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:  .LCPI8_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI8_1:
; THUMB-NEXT:    .long c
; THUMB-NEXT:  .LCPI8_2:
; THUMB-NEXT:    .long d
; THUMB-NEXT:  .LCPI8_3:
; THUMB-NEXT:    .long b
;
; THUMB2-LABEL: do_nothing_if_compares_can_not_be_adjusted_to_each_other:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    push {r4, lr}
; THUMB2-NEXT:    movw r0, :lower16:a
; THUMB2-NEXT:    movt r0, :upper16:a
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    cmp r0, #0
; THUMB2-NEXT:    bgt .LBB8_3
; THUMB2-NEXT:  @ %bb.1: @ %while.body.preheader
; THUMB2-NEXT:    subs r4, r0, #1
; THUMB2-NEXT:  .LBB8_2: @ %while.body
; THUMB2-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMB2-NEXT:    bl do_something
; THUMB2-NEXT:    adds r4, #1
; THUMB2-NEXT:    bmi .LBB8_2
; THUMB2-NEXT:  .LBB8_3: @ %while.end
; THUMB2-NEXT:    movw r0, :lower16:c
; THUMB2-NEXT:    movt r0, :upper16:c
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    cmn.w r0, #2
; THUMB2-NEXT:    blt .LBB8_5
; THUMB2-NEXT:  @ %bb.4: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #123
; THUMB2-NEXT:    popeq {r4, pc}
; THUMB2-NEXT:  .LBB8_5: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    pop {r4, pc}
;
; THUMBV8-LABEL: do_nothing_if_compares_can_not_be_adjusted_to_each_other:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    push {r4, lr}
; THUMBV8-NEXT:    movw r0, :lower16:a
; THUMBV8-NEXT:    movt r0, :upper16:a
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    cmp r0, #0
; THUMBV8-NEXT:    bgt .LBB8_3
; THUMBV8-NEXT:  @ %bb.1: @ %while.body.preheader
; THUMBV8-NEXT:    subs r4, r0, #1
; THUMBV8-NEXT:  .LBB8_2: @ %while.body
; THUMBV8-NEXT:    @ =>This Inner Loop Header: Depth=1
; THUMBV8-NEXT:    bl do_something
; THUMBV8-NEXT:    adds r4, #1
; THUMBV8-NEXT:    bmi .LBB8_2
; THUMBV8-NEXT:  .LBB8_3: @ %while.end
; THUMBV8-NEXT:    movw r0, :lower16:c
; THUMBV8-NEXT:    movt r0, :upper16:c
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    cmn.w r0, #2
; THUMBV8-NEXT:    blt .LBB8_5
; THUMBV8-NEXT:  @ %bb.4: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #123
; THUMBV8-NEXT:    popeq {r4, pc}
; THUMBV8-NEXT:  .LBB8_5: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    pop {r4, pc}
entry:
  %0 = load i32, ptr @a, align 4
  %cmp4 = icmp slt i32 %0, 1
  br i1 %cmp4, label %while.body.preheader, label %while.end

while.body.preheader:                             ; preds = %entry
  br label %while.body

while.body:                                       ; preds = %while.body, %while.body.preheader
  %i.05 = phi i32 [ %inc, %while.body ], [ %0, %while.body.preheader ]
  tail call void @do_something() #2
  %inc = add nsw i32 %i.05, 1
  %cmp = icmp slt i32 %i.05, 0
  br i1 %cmp, label %while.body, label %while.end.loopexit

while.end.loopexit:                               ; preds = %while.body
  br label %while.end

while.end:                                        ; preds = %while.end.loopexit, %entry
  %1 = load i32, ptr @c, align 4
  %cmp1 = icmp sgt i32 %1, -3
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end
  %2 = load i32, ptr @b, align 4
  %3 = load i32, ptr @d, align 4
  %cmp2 = icmp eq i32 %2, %3
  br i1 %cmp2, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true, %while.end
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 123, %land.lhs.true ]
  ret i32 %retval.0
}

define i32 @combine_gt_ge_sel(i32 %v, ptr %p) #0 {
; ARM-LABEL: combine_gt_ge_sel:
; ARM:       @ %bb.0: @ %entry
; ARM-NEXT:    movw r2, :lower16:a
; ARM-NEXT:    movt r2, :upper16:a
; ARM-NEXT:    ldr r2, [r2]
; ARM-NEXT:    cmp r2, #0
; ARM-NEXT:    movle r0, #0
; ARM-NEXT:    str r0, [r1]
; ARM-NEXT:    ble .LBB9_3
; ARM-NEXT:  @ %bb.1: @ %lor.lhs.false
; ARM-NEXT:    cmp r2, #2
; ARM-NEXT:    bge .LBB9_4
; ARM-NEXT:  @ %bb.2: @ %if.end
; ARM-NEXT:    mov r0, #0
; ARM-NEXT:    bx lr
; ARM-NEXT:  .LBB9_3: @ %land.lhs.true
; ARM-NEXT:    movw r0, :lower16:c
; ARM-NEXT:    movt r0, :upper16:c
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    bxeq lr
; ARM-NEXT:  .LBB9_4: @ %land.lhs.true3
; ARM-NEXT:    movw r0, :lower16:d
; ARM-NEXT:    movt r0, :upper16:d
; ARM-NEXT:    ldr r1, [r0]
; ARM-NEXT:    movw r0, :lower16:b
; ARM-NEXT:    movt r0, :upper16:b
; ARM-NEXT:    ldr r2, [r0]
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    cmp r2, r1
; ARM-NEXT:    movne r0, #0
; ARM-NEXT:    bx lr
;
; THUMB-LABEL: combine_gt_ge_sel:
; THUMB:       @ %bb.0: @ %entry
; THUMB-NEXT:    ldr r2, .LCPI9_0
; THUMB-NEXT:    ldr r2, [r2]
; THUMB-NEXT:    movs r3, #0
; THUMB-NEXT:    cmp r2, #0
; THUMB-NEXT:    bgt .LBB9_2
; THUMB-NEXT:  @ %bb.1: @ %entry
; THUMB-NEXT:    mov r0, r3
; THUMB-NEXT:  .LBB9_2: @ %entry
; THUMB-NEXT:    str r0, [r1]
; THUMB-NEXT:    ble .LBB9_4
; THUMB-NEXT:  @ %bb.3: @ %lor.lhs.false
; THUMB-NEXT:    cmp r2, #2
; THUMB-NEXT:    bge .LBB9_6
; THUMB-NEXT:    b .LBB9_8
; THUMB-NEXT:  .LBB9_4: @ %land.lhs.true
; THUMB-NEXT:    ldr r0, .LCPI9_1
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI9_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB9_6
; THUMB-NEXT:  @ %bb.5:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB9_6: @ %land.lhs.true3
; THUMB-NEXT:    ldr r0, .LCPI9_3
; THUMB-NEXT:    ldr r0, [r0]
; THUMB-NEXT:    ldr r1, .LCPI9_2
; THUMB-NEXT:    ldr r1, [r1]
; THUMB-NEXT:    cmp r1, r0
; THUMB-NEXT:    bne .LBB9_8
; THUMB-NEXT:  @ %bb.7:
; THUMB-NEXT:    movs r0, #1
; THUMB-NEXT:    bx lr
; THUMB-NEXT:  .LBB9_8: @ %if.end
; THUMB-NEXT:    movs r0, #0
; THUMB-NEXT:    bx lr
; THUMB-NEXT:    .p2align 2
; THUMB-NEXT:  @ %bb.9:
; THUMB-NEXT:  .LCPI9_0:
; THUMB-NEXT:    .long a
; THUMB-NEXT:  .LCPI9_1:
; THUMB-NEXT:    .long c
; THUMB-NEXT:  .LCPI9_2:
; THUMB-NEXT:    .long b
; THUMB-NEXT:  .LCPI9_3:
; THUMB-NEXT:    .long d
;
; THUMB2-LABEL: combine_gt_ge_sel:
; THUMB2:       @ %bb.0: @ %entry
; THUMB2-NEXT:    movw r2, :lower16:a
; THUMB2-NEXT:    movt r2, :upper16:a
; THUMB2-NEXT:    ldr r2, [r2]
; THUMB2-NEXT:    cmp r2, #0
; THUMB2-NEXT:    it le
; THUMB2-NEXT:    movle r0, #0
; THUMB2-NEXT:    str r0, [r1]
; THUMB2-NEXT:    ble .LBB9_2
; THUMB2-NEXT:  @ %bb.1: @ %lor.lhs.false
; THUMB2-NEXT:    cmp r2, #2
; THUMB2-NEXT:    bge .LBB9_3
; THUMB2-NEXT:    b .LBB9_4
; THUMB2-NEXT:  .LBB9_2: @ %land.lhs.true
; THUMB2-NEXT:    movw r0, :lower16:c
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:c
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB9_3: @ %land.lhs.true3
; THUMB2-NEXT:    movw r0, :lower16:d
; THUMB2-NEXT:    movw r1, :lower16:b
; THUMB2-NEXT:    movt r0, :upper16:d
; THUMB2-NEXT:    movt r1, :upper16:b
; THUMB2-NEXT:    ldr r0, [r0]
; THUMB2-NEXT:    ldr r1, [r1]
; THUMB2-NEXT:    cmp r1, r0
; THUMB2-NEXT:    itt eq
; THUMB2-NEXT:    moveq r0, #1
; THUMB2-NEXT:    bxeq lr
; THUMB2-NEXT:  .LBB9_4: @ %if.end
; THUMB2-NEXT:    movs r0, #0
; THUMB2-NEXT:    bx lr
;
; THUMBV8-LABEL: combine_gt_ge_sel:
; THUMBV8:       @ %bb.0: @ %entry
; THUMBV8-NEXT:    movw r2, :lower16:a
; THUMBV8-NEXT:    movt r2, :upper16:a
; THUMBV8-NEXT:    ldr r2, [r2]
; THUMBV8-NEXT:    cmp r2, #0
; THUMBV8-NEXT:    it le
; THUMBV8-NEXT:    movle r0, #0
; THUMBV8-NEXT:    str r0, [r1]
; THUMBV8-NEXT:    ble .LBB9_2
; THUMBV8-NEXT:  @ %bb.1: @ %lor.lhs.false
; THUMBV8-NEXT:    cmp r2, #2
; THUMBV8-NEXT:    bge .LBB9_3
; THUMBV8-NEXT:    b .LBB9_4
; THUMBV8-NEXT:  .LBB9_2: @ %land.lhs.true
; THUMBV8-NEXT:    movw r0, :lower16:c
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:c
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB9_3: @ %land.lhs.true3
; THUMBV8-NEXT:    movw r0, :lower16:d
; THUMBV8-NEXT:    movw r1, :lower16:b
; THUMBV8-NEXT:    movt r0, :upper16:d
; THUMBV8-NEXT:    movt r1, :upper16:b
; THUMBV8-NEXT:    ldr r0, [r0]
; THUMBV8-NEXT:    ldr r1, [r1]
; THUMBV8-NEXT:    cmp r1, r0
; THUMBV8-NEXT:    itt eq
; THUMBV8-NEXT:    moveq r0, #1
; THUMBV8-NEXT:    bxeq lr
; THUMBV8-NEXT:  .LBB9_4: @ %if.end
; THUMBV8-NEXT:    movs r0, #0
; THUMBV8-NEXT:    bx lr
entry:
  %0 = load i32, ptr @a, align 4
  %cmp = icmp sgt i32 %0, 0
  %m = select i1 %cmp, i32 %v, i32 0
  store i32 %m, ptr %p
  br i1 %cmp, label %lor.lhs.false, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, ptr @b, align 4
  %2 = load i32, ptr @c, align 4
  %cmp1 = icmp eq i32 %1, %2
  br i1 %cmp1, label %return, label %land.lhs.true3

lor.lhs.false:                                    ; preds = %entry
  %cmp2 = icmp sgt i32 %0, 1
  br i1 %cmp2, label %land.lhs.true3, label %if.end

land.lhs.true3:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %3 = load i32, ptr @b, align 4
  %4 = load i32, ptr @d, align 4
  %cmp4 = icmp eq i32 %3, %4
  br i1 %cmp4, label %return, label %if.end

if.end:                                           ; preds = %land.lhs.true3, %lor.lhs.false
  br label %return

return:                                           ; preds = %if.end, %land.lhs.true3, %land.lhs.true
  %retval.0 = phi i32 [ 0, %if.end ], [ 1, %land.lhs.true3 ], [ 1, %land.lhs.true ]
  ret i32 %retval.0
}
