; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple thumbv7a-none-eabi < %s | FileCheck %s

@val0 = global i32 0, align 4
@val1 = global i32 0, align 4
@val2 = global i32 0, align 4

define i32 @foo(ptr %ctx) {
; CHECK-LABEL: foo:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    cbz r0, .LBB0_2
; CHECK-NEXT:  @ %bb.1: @ %if.end
; CHECK-NEXT:    movw r12, :lower16:val2
; CHECK-NEXT:    movw r3, :lower16:val1
; CHECK-NEXT:    movw r2, :lower16:val0
; CHECK-NEXT:    mov r1, r0
; CHECK-NEXT:    movs r0, #0
; CHECK-NEXT:    movt r12, :upper16:val2
; CHECK-NEXT:    movt r3, :upper16:val1
; CHECK-NEXT:    movt r2, :upper16:val0
; CHECK-NEXT:    str r2, [r1, #4]
; CHECK-NEXT:    str r3, [r1, #8]
; CHECK-NEXT:    str.w r12, [r1, #12]
; CHECK-NEXT:    str r0, [r1, #16]
; CHECK-NEXT:    bx lr
; CHECK-NEXT:  .LBB0_2: @ %if.then
; CHECK-NEXT:    .save {r7, lr}
; CHECK-NEXT:    push {r7, lr}
; CHECK-NEXT:    bl bar
; CHECK-NEXT:    mov.w r0, #-1
; CHECK-NEXT:    pop {r7, pc}
entry:
  %tobool.not = icmp eq ptr %ctx, null
  br i1 %tobool.not, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @bar() #2
  br label %return

if.end:                                           ; preds = %entry
  %cmd_a = getelementptr inbounds i8, ptr %ctx, i32 4
  store ptr @val0, ptr %cmd_a, align 4
  %cmd_b = getelementptr inbounds i8, ptr %ctx, i32 8
  store ptr @val1, ptr %cmd_b, align 4
  %cmd_c = getelementptr inbounds i8, ptr %ctx, i32 12
  store ptr @val2, ptr %cmd_c, align 4
  %cmd_d = getelementptr inbounds i8, ptr %ctx, i32 16
  store ptr null, ptr %cmd_d, align 4
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ 0, %if.end ], [ -1, %if.then ]
  ret i32 %retval.0
}

declare void @bar()
