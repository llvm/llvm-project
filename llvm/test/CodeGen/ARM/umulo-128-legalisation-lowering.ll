; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=armv6-unknown-linux-gnu | FileCheck %s --check-prefixes=ARMV6
; RUN: llc < %s -mtriple=armv7-unknown-linux-gnu | FileCheck %s --check-prefixes=ARMV7

define { i128, i8 } @muloti_test(i128 %l, i128 %r) unnamed_addr #0 {
; ARMV6-LABEL: muloti_test:
; ARMV6:       @ %bb.0: @ %overflow.entry
; ARMV6-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; ARMV6-NEXT:    sub sp, sp, #28
; ARMV6-NEXT:    add lr, sp, #76
; ARMV6-NEXT:    ldr r5, [sp, #68]
; ARMV6-NEXT:    ldr r6, [sp, #64]
; ARMV6-NEXT:    mov r9, r0
; ARMV6-NEXT:    ldr r11, [sp, #72]
; ARMV6-NEXT:    orrs r10, r6, r5
; ARMV6-NEXT:    ldm lr, {r1, r12, lr}
; ARMV6-NEXT:    beq .LBB0_3
; ARMV6-NEXT:  @ %bb.1: @ %overflow.lhs
; ARMV6-NEXT:    orrs r8, r12, lr
; ARMV6-NEXT:    beq .LBB0_5
; ARMV6-NEXT:  @ %bb.2: @ %overflow
; ARMV6-NEXT:    umull r4, r0, r3, r12
; ARMV6-NEXT:    str r0, [sp, #20] @ 4-byte Spill
; ARMV6-NEXT:    umull r7, r0, lr, r2
; ARMV6-NEXT:    str r0, [sp, #12] @ 4-byte Spill
; ARMV6-NEXT:    umull r0, r12, r12, r2
; ARMV6-NEXT:    add r4, r7, r4
; ARMV6-NEXT:    str r0, [sp, #24] @ 4-byte Spill
; ARMV6-NEXT:    mov r0, #0
; ARMV6-NEXT:    adds r7, r12, r4
; ARMV6-NEXT:    str r7, [sp] @ 4-byte Spill
; ARMV6-NEXT:    adc r0, r0, #0
; ARMV6-NEXT:    str r0, [sp, #16] @ 4-byte Spill
; ARMV6-NEXT:    mov r0, r11
; ARMV6-NEXT:    umull r11, r12, r1, r6
; ARMV6-NEXT:    umull r7, r4, r5, r0
; ARMV6-NEXT:    add r7, r7, r11
; ARMV6-NEXT:    umull r11, r6, r6, r0
; ARMV6-NEXT:    adds r6, r6, r7
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    adc r7, r7, #0
; ARMV6-NEXT:    str r7, [sp, #4] @ 4-byte Spill
; ARMV6-NEXT:    ldr r7, [sp, #24] @ 4-byte Reload
; ARMV6-NEXT:    adds r7, r11, r7
; ARMV6-NEXT:    str r7, [sp, #8] @ 4-byte Spill
; ARMV6-NEXT:    ldr r7, [sp] @ 4-byte Reload
; ARMV6-NEXT:    adc r6, r6, r7
; ARMV6-NEXT:    str r6, [sp] @ 4-byte Spill
; ARMV6-NEXT:    umull r11, r6, r2, r0
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    umlal r6, r7, r3, r0
; ARMV6-NEXT:    umull r2, r0, r2, r1
; ARMV6-NEXT:    adds r2, r2, r6
; ARMV6-NEXT:    str r2, [sp, #24] @ 4-byte Spill
; ARMV6-NEXT:    adcs r0, r7, r0
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    adc r6, r7, #0
; ARMV6-NEXT:    ldr r2, [sp, #8] @ 4-byte Reload
; ARMV6-NEXT:    umlal r0, r6, r3, r1
; ARMV6-NEXT:    adds r2, r0, r2
; ARMV6-NEXT:    ldr r0, [sp] @ 4-byte Reload
; ARMV6-NEXT:    adcs r0, r6, r0
; ARMV6-NEXT:    adc r6, r7, #0
; ARMV6-NEXT:    cmp r8, #0
; ARMV6-NEXT:    movne r8, #1
; ARMV6-NEXT:    cmp r10, #0
; ARMV6-NEXT:    movne r10, #1
; ARMV6-NEXT:    cmp r4, #0
; ARMV6-NEXT:    movne r4, #1
; ARMV6-NEXT:    cmp r1, #0
; ARMV6-NEXT:    movne r1, #1
; ARMV6-NEXT:    cmp r5, #0
; ARMV6-NEXT:    movne r5, #1
; ARMV6-NEXT:    and r1, r5, r1
; ARMV6-NEXT:    cmp r12, #0
; ARMV6-NEXT:    orr r1, r1, r4
; ARMV6-NEXT:    ldr r5, [sp, #4] @ 4-byte Reload
; ARMV6-NEXT:    movne r12, #1
; ARMV6-NEXT:    orr r1, r1, r12
; ARMV6-NEXT:    str r6, [sp, #8] @ 4-byte Spill
; ARMV6-NEXT:    and r6, r10, r8
; ARMV6-NEXT:    orr r1, r1, r5
; ARMV6-NEXT:    orr r1, r6, r1
; ARMV6-NEXT:    ldr r6, [sp, #12] @ 4-byte Reload
; ARMV6-NEXT:    ldr r7, [sp, #24] @ 4-byte Reload
; ARMV6-NEXT:    cmp r6, #0
; ARMV6-NEXT:    movne r6, #1
; ARMV6-NEXT:    cmp r3, #0
; ARMV6-NEXT:    movne r3, #1
; ARMV6-NEXT:    cmp lr, #0
; ARMV6-NEXT:    movne lr, #1
; ARMV6-NEXT:    and r3, lr, r3
; ARMV6-NEXT:    orr r3, r3, r6
; ARMV6-NEXT:    ldr r6, [sp, #20] @ 4-byte Reload
; ARMV6-NEXT:    cmp r6, #0
; ARMV6-NEXT:    movne r6, #1
; ARMV6-NEXT:    orr r3, r3, r6
; ARMV6-NEXT:    ldr r6, [sp, #16] @ 4-byte Reload
; ARMV6-NEXT:    orr r3, r3, r6
; ARMV6-NEXT:    orr r1, r1, r3
; ARMV6-NEXT:    ldr r3, [sp, #8] @ 4-byte Reload
; ARMV6-NEXT:    orr r6, r1, r3
; ARMV6-NEXT:    b .LBB0_8
; ARMV6-NEXT:  .LBB0_3: @ %overflow.no.lhs
; ARMV6-NEXT:    orrs r6, r12, lr
; ARMV6-NEXT:    beq .LBB0_7
; ARMV6-NEXT:  @ %bb.4: @ %overflow.no.lhs.only
; ARMV6-NEXT:    umull r0, r4, r2, r12
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    mov r10, #0
; ARMV6-NEXT:    umlal r4, r7, r3, r12
; ARMV6-NEXT:    str r0, [sp, #24] @ 4-byte Spill
; ARMV6-NEXT:    umull r6, r8, r2, lr
; ARMV6-NEXT:    adds r0, r6, r4
; ARMV6-NEXT:    str r0, [sp, #20] @ 4-byte Spill
; ARMV6-NEXT:    adcs r6, r7, r8
; ARMV6-NEXT:    adc r7, r10, #0
; ARMV6-NEXT:    ldr r10, [sp, #64]
; ARMV6-NEXT:    umlal r6, r7, r3, lr
; ARMV6-NEXT:    umull r0, r8, r12, r10
; ARMV6-NEXT:    mla r4, r12, r5, r8
; ARMV6-NEXT:    mov r8, r11
; ARMV6-NEXT:    adds r12, r6, r0
; ARMV6-NEXT:    mov r6, #0
; ARMV6-NEXT:    mla r4, lr, r10, r4
; ARMV6-NEXT:    adc lr, r7, r4
; ARMV6-NEXT:    umull r11, r4, r2, r11
; ARMV6-NEXT:    umlal r4, r6, r3, r8
; ARMV6-NEXT:    umull r2, r0, r2, r1
; ARMV6-NEXT:    adds r7, r2, r4
; ARMV6-NEXT:    adcs r2, r6, r0
; ARMV6-NEXT:    mov r0, #0
; ARMV6-NEXT:    adc r4, r0, #0
; ARMV6-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; ARMV6-NEXT:    umlal r2, r4, r3, r1
; ARMV6-NEXT:    umull r3, r6, r8, r10
; ARMV6-NEXT:    mla r5, r8, r5, r6
; ARMV6-NEXT:    adds r2, r2, r3
; ARMV6-NEXT:    mla r1, r1, r10, r5
; ARMV6-NEXT:    adc r1, r4, r1
; ARMV6-NEXT:    adds r2, r2, r0
; ARMV6-NEXT:    ldr r0, [sp, #20] @ 4-byte Reload
; ARMV6-NEXT:    adcs r0, r1, r0
; ARMV6-NEXT:    adcs r1, r12, #0
; ARMV6-NEXT:    adc r3, lr, #0
; ARMV6-NEXT:    b .LBB0_6
; ARMV6-NEXT:  .LBB0_5: @ %overflow.no.rhs.only
; ARMV6-NEXT:    mov r10, r6
; ARMV6-NEXT:    umull r0, r6, r11, r6
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    umlal r6, r7, r1, r10
; ARMV6-NEXT:    str r0, [sp, #24] @ 4-byte Spill
; ARMV6-NEXT:    umull r4, r8, r11, r5
; ARMV6-NEXT:    adds r0, r4, r6
; ARMV6-NEXT:    str r0, [sp, #20] @ 4-byte Spill
; ARMV6-NEXT:    adcs r6, r7, r8
; ARMV6-NEXT:    mov r0, #0
; ARMV6-NEXT:    adc r7, r0, #0
; ARMV6-NEXT:    umull r0, r8, r10, r12
; ARMV6-NEXT:    mla r4, r10, lr, r8
; ARMV6-NEXT:    umlal r6, r7, r1, r5
; ARMV6-NEXT:    mla r4, r5, r12, r4
; ARMV6-NEXT:    adds r10, r6, r0
; ARMV6-NEXT:    adc r0, r7, r4
; ARMV6-NEXT:    str r0, [sp, #16] @ 4-byte Spill
; ARMV6-NEXT:    mov r0, r11
; ARMV6-NEXT:    umull r11, r6, r11, r2
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    umull r4, r5, r0, r3
; ARMV6-NEXT:    mov r0, #0
; ARMV6-NEXT:    umlal r6, r7, r1, r2
; ARMV6-NEXT:    adds r8, r4, r6
; ARMV6-NEXT:    adcs r4, r7, r5
; ARMV6-NEXT:    adc r5, r0, #0
; ARMV6-NEXT:    ldr r0, [sp, #24] @ 4-byte Reload
; ARMV6-NEXT:    umlal r4, r5, r1, r3
; ARMV6-NEXT:    mov r7, r8
; ARMV6-NEXT:    umull r1, r6, r2, r12
; ARMV6-NEXT:    mla r2, r2, lr, r6
; ARMV6-NEXT:    adds r1, r4, r1
; ARMV6-NEXT:    mla r2, r3, r12, r2
; ARMV6-NEXT:    adc r3, r5, r2
; ARMV6-NEXT:    adds r2, r1, r0
; ARMV6-NEXT:    ldr r0, [sp, #20] @ 4-byte Reload
; ARMV6-NEXT:    adcs r0, r3, r0
; ARMV6-NEXT:    ldr r3, [sp, #16] @ 4-byte Reload
; ARMV6-NEXT:    adcs r1, r10, #0
; ARMV6-NEXT:    adc r3, r3, #0
; ARMV6-NEXT:  .LBB0_6: @ %overflow.res
; ARMV6-NEXT:    orrs r6, r1, r3
; ARMV6-NEXT:    movne r6, #1
; ARMV6-NEXT:    b .LBB0_8
; ARMV6-NEXT:  .LBB0_7: @ %overflow.no
; ARMV6-NEXT:    mov r0, r11
; ARMV6-NEXT:    umull r11, r8, r2, r11
; ARMV6-NEXT:    mov r7, #0
; ARMV6-NEXT:    mov r6, #0
; ARMV6-NEXT:    umlal r8, r7, r3, r0
; ARMV6-NEXT:    umull r4, r10, r2, r1
; ARMV6-NEXT:    adds r0, r4, r8
; ARMV6-NEXT:    ldr r4, [sp, #64]
; ARMV6-NEXT:    adcs r10, r7, r10
; ARMV6-NEXT:    ldr r7, [sp, #72]
; ARMV6-NEXT:    str r0, [sp, #24] @ 4-byte Spill
; ARMV6-NEXT:    adc r0, r6, #0
; ARMV6-NEXT:    umlal r10, r0, r3, r1
; ARMV6-NEXT:    umull r8, r4, r7, r4
; ARMV6-NEXT:    mla r4, r7, r5, r4
; ARMV6-NEXT:    ldr r5, [sp, #64]
; ARMV6-NEXT:    ldr r7, [sp, #24] @ 4-byte Reload
; ARMV6-NEXT:    mla r1, r1, r5, r4
; ARMV6-NEXT:    umull r4, r5, r12, r2
; ARMV6-NEXT:    mla r3, r12, r3, r5
; ARMV6-NEXT:    mla r2, lr, r2, r3
; ARMV6-NEXT:    adds r3, r4, r8
; ARMV6-NEXT:    adc r1, r2, r1
; ARMV6-NEXT:    adds r2, r10, r3
; ARMV6-NEXT:    adc r0, r0, r1
; ARMV6-NEXT:  .LBB0_8: @ %overflow.res
; ARMV6-NEXT:    str r11, [r9]
; ARMV6-NEXT:    str r7, [r9, #4]
; ARMV6-NEXT:    str r2, [r9, #8]
; ARMV6-NEXT:    str r0, [r9, #12]
; ARMV6-NEXT:    and r0, r6, #1
; ARMV6-NEXT:    strb r0, [r9, #16]
; ARMV6-NEXT:    add sp, sp, #28
; ARMV6-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
;
; ARMV7-LABEL: muloti_test:
; ARMV7:       @ %bb.0: @ %overflow.entry
; ARMV7-NEXT:    push {r4, r5, r6, r7, r8, r9, r10, r11, lr}
; ARMV7-NEXT:    sub sp, sp, #12
; ARMV7-NEXT:    ldr r7, [sp, #52]
; ARMV7-NEXT:    ldr r10, [sp, #48]
; ARMV7-NEXT:    ldr r4, [sp, #68]
; ARMV7-NEXT:    ldr r9, [sp, #64]
; ARMV7-NEXT:    orrs r1, r10, r7
; ARMV7-NEXT:    ldr r12, [sp, #60]
; ARMV7-NEXT:    ldr lr, [sp, #56]
; ARMV7-NEXT:    beq .LBB0_3
; ARMV7-NEXT:  @ %bb.1: @ %overflow.lhs
; ARMV7-NEXT:    orr r5, r9, r4
; ARMV7-NEXT:    cmp r5, #0
; ARMV7-NEXT:    beq .LBB0_5
; ARMV7-NEXT:  @ %bb.2: @ %overflow
; ARMV7-NEXT:    movwne r5, #1
; ARMV7-NEXT:    cmp r1, #0
; ARMV7-NEXT:    mov r6, r12
; ARMV7-NEXT:    movwne r1, #1
; ARMV7-NEXT:    and r12, r1, r5
; ARMV7-NEXT:    cmp r6, #0
; ARMV7-NEXT:    mov r1, r6
; ARMV7-NEXT:    mov r8, r6
; ARMV7-NEXT:    umull r6, r5, r7, lr
; ARMV7-NEXT:    movwne r1, #1
; ARMV7-NEXT:    cmp r7, #0
; ARMV7-NEXT:    movwne r7, #1
; ARMV7-NEXT:    and r1, r7, r1
; ARMV7-NEXT:    mov r11, #0
; ARMV7-NEXT:    cmp r5, #0
; ARMV7-NEXT:    movwne r5, #1
; ARMV7-NEXT:    orr r1, r1, r5
; ARMV7-NEXT:    umull r5, r7, r8, r10
; ARMV7-NEXT:    cmp r7, #0
; ARMV7-NEXT:    movwne r7, #1
; ARMV7-NEXT:    orr r7, r1, r7
; ARMV7-NEXT:    add r1, r6, r5
; ARMV7-NEXT:    umull r8, r6, r10, lr
; ARMV7-NEXT:    adds r10, r6, r1
; ARMV7-NEXT:    umull r6, r1, r4, r2
; ARMV7-NEXT:    adc r5, r11, #0
; ARMV7-NEXT:    orr r5, r7, r5
; ARMV7-NEXT:    orr r7, r12, r5
; ARMV7-NEXT:    cmp r3, #0
; ARMV7-NEXT:    mov r5, r3
; ARMV7-NEXT:    movwne r5, #1
; ARMV7-NEXT:    cmp r4, #0
; ARMV7-NEXT:    movwne r4, #1
; ARMV7-NEXT:    cmp r1, #0
; ARMV7-NEXT:    and r5, r4, r5
; ARMV7-NEXT:    movwne r1, #1
; ARMV7-NEXT:    orr r1, r5, r1
; ARMV7-NEXT:    umull r5, r4, r3, r9
; ARMV7-NEXT:    cmp r4, #0
; ARMV7-NEXT:    add r6, r6, r5
; ARMV7-NEXT:    movwne r4, #1
; ARMV7-NEXT:    orr r1, r1, r4
; ARMV7-NEXT:    umull r5, r4, r9, r2
; ARMV7-NEXT:    adds r6, r4, r6
; ARMV7-NEXT:    adc r4, r11, #0
; ARMV7-NEXT:    orr r1, r1, r4
; ARMV7-NEXT:    mov r4, #0
; ARMV7-NEXT:    orr r12, r7, r1
; ARMV7-NEXT:    adds r7, r8, r5
; ARMV7-NEXT:    umull r8, r5, r2, lr
; ARMV7-NEXT:    adc r6, r10, r6
; ARMV7-NEXT:    umlal r5, r4, r3, lr
; ARMV7-NEXT:    ldr lr, [sp, #60]
; ARMV7-NEXT:    umull r2, r1, r2, lr
; ARMV7-NEXT:    adds r5, r2, r5
; ARMV7-NEXT:    adcs r1, r4, r1
; ARMV7-NEXT:    adc r4, r11, #0
; ARMV7-NEXT:    umlal r1, r4, r3, lr
; ARMV7-NEXT:    adds r2, r1, r7
; ARMV7-NEXT:    adcs r3, r4, r6
; ARMV7-NEXT:    adc r1, r11, #0
; ARMV7-NEXT:    orr r1, r12, r1
; ARMV7-NEXT:    b .LBB0_8
; ARMV7-NEXT:  .LBB0_3: @ %overflow.no.lhs
; ARMV7-NEXT:    orrs r1, r9, r4
; ARMV7-NEXT:    beq .LBB0_7
; ARMV7-NEXT:  @ %bb.4: @ %overflow.no.lhs.only
; ARMV7-NEXT:    umull r1, r5, r2, r9
; ARMV7-NEXT:    mov r6, #0
; ARMV7-NEXT:    mov r11, #0
; ARMV7-NEXT:    umlal r5, r6, r3, r9
; ARMV7-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; ARMV7-NEXT:    umull r1, r8, r2, r4
; ARMV7-NEXT:    adds r1, r1, r5
; ARMV7-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; ARMV7-NEXT:    adcs r5, r6, r8
; ARMV7-NEXT:    adc r6, r11, #0
; ARMV7-NEXT:    umull r8, r11, r9, r10
; ARMV7-NEXT:    mla r1, r9, r7, r11
; ARMV7-NEXT:    umlal r5, r6, r3, r4
; ARMV7-NEXT:    mla r1, r4, r10, r1
; ARMV7-NEXT:    adds r4, r5, r8
; ARMV7-NEXT:    umull r8, r5, r2, lr
; ARMV7-NEXT:    adc r9, r6, r1
; ARMV7-NEXT:    mov r6, #0
; ARMV7-NEXT:    umlal r5, r6, r3, lr
; ARMV7-NEXT:    umull r2, r1, r2, r12
; ARMV7-NEXT:    adds r5, r2, r5
; ARMV7-NEXT:    mov r2, #0
; ARMV7-NEXT:    adcs r1, r6, r1
; ARMV7-NEXT:    adc r2, r2, #0
; ARMV7-NEXT:    umlal r1, r2, r3, r12
; ARMV7-NEXT:    umull r3, r6, lr, r10
; ARMV7-NEXT:    mla r7, lr, r7, r6
; ARMV7-NEXT:    adds r1, r1, r3
; ARMV7-NEXT:    mla r7, r12, r10, r7
; ARMV7-NEXT:    adc r3, r2, r7
; ARMV7-NEXT:    ldr r2, [sp, #8] @ 4-byte Reload
; ARMV7-NEXT:    adds r2, r1, r2
; ARMV7-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; ARMV7-NEXT:    adcs r3, r3, r1
; ARMV7-NEXT:    adcs r1, r4, #0
; ARMV7-NEXT:    adc r7, r9, #0
; ARMV7-NEXT:    b .LBB0_6
; ARMV7-NEXT:  .LBB0_5: @ %overflow.no.rhs.only
; ARMV7-NEXT:    umull r1, r5, lr, r10
; ARMV7-NEXT:    mov r11, #0
; ARMV7-NEXT:    umull r6, r8, lr, r7
; ARMV7-NEXT:    str r1, [sp, #8] @ 4-byte Spill
; ARMV7-NEXT:    mov r1, #0
; ARMV7-NEXT:    umlal r5, r1, r12, r10
; ARMV7-NEXT:    adds r5, r6, r5
; ARMV7-NEXT:    str r5, [sp, #4] @ 4-byte Spill
; ARMV7-NEXT:    adcs r1, r1, r8
; ARMV7-NEXT:    adc r5, r11, #0
; ARMV7-NEXT:    umull r8, r11, r10, r9
; ARMV7-NEXT:    mla r6, r10, r4, r11
; ARMV7-NEXT:    umlal r1, r5, r12, r7
; ARMV7-NEXT:    mla r6, r7, r9, r6
; ARMV7-NEXT:    mov r7, #0
; ARMV7-NEXT:    adds r10, r1, r8
; ARMV7-NEXT:    adc r11, r5, r6
; ARMV7-NEXT:    umull r8, r5, lr, r2
; ARMV7-NEXT:    umlal r5, r7, r12, r2
; ARMV7-NEXT:    umull r1, r6, lr, r3
; ARMV7-NEXT:    adds r5, r1, r5
; ARMV7-NEXT:    adcs r1, r7, r6
; ARMV7-NEXT:    mov r7, #0
; ARMV7-NEXT:    adc r7, r7, #0
; ARMV7-NEXT:    umlal r1, r7, r12, r3
; ARMV7-NEXT:    umull r12, r6, r2, r9
; ARMV7-NEXT:    mla r2, r2, r4, r6
; ARMV7-NEXT:    adds r1, r1, r12
; ARMV7-NEXT:    mla r2, r3, r9, r2
; ARMV7-NEXT:    adc r3, r7, r2
; ARMV7-NEXT:    ldr r2, [sp, #8] @ 4-byte Reload
; ARMV7-NEXT:    adds r2, r1, r2
; ARMV7-NEXT:    ldr r1, [sp, #4] @ 4-byte Reload
; ARMV7-NEXT:    adcs r3, r3, r1
; ARMV7-NEXT:    adcs r1, r10, #0
; ARMV7-NEXT:    adc r7, r11, #0
; ARMV7-NEXT:  .LBB0_6: @ %overflow.res
; ARMV7-NEXT:    orrs r1, r1, r7
; ARMV7-NEXT:    movwne r1, #1
; ARMV7-NEXT:    b .LBB0_8
; ARMV7-NEXT:  .LBB0_7: @ %overflow.no
; ARMV7-NEXT:    umull r1, r11, r2, lr
; ARMV7-NEXT:    mov r6, #0
; ARMV7-NEXT:    umlal r11, r6, r3, lr
; ARMV7-NEXT:    str r1, [sp, #4] @ 4-byte Spill
; ARMV7-NEXT:    mov r1, #0
; ARMV7-NEXT:    umull r5, r8, r2, r12
; ARMV7-NEXT:    adds r5, r5, r11
; ARMV7-NEXT:    adcs r6, r6, r8
; ARMV7-NEXT:    adc r11, r1, #0
; ARMV7-NEXT:    umlal r6, r11, r3, r12
; ARMV7-NEXT:    umull r8, r12, lr, r10
; ARMV7-NEXT:    str r6, [sp] @ 4-byte Spill
; ARMV7-NEXT:    ldr r6, [sp, #60]
; ARMV7-NEXT:    mla r7, lr, r7, r12
; ARMV7-NEXT:    str r8, [sp, #8] @ 4-byte Spill
; ARMV7-NEXT:    ldr r8, [sp, #4] @ 4-byte Reload
; ARMV7-NEXT:    mla r12, r6, r10, r7
; ARMV7-NEXT:    umull lr, r7, r9, r2
; ARMV7-NEXT:    mla r3, r9, r3, r7
; ARMV7-NEXT:    mla r2, r4, r2, r3
; ARMV7-NEXT:    ldr r3, [sp, #8] @ 4-byte Reload
; ARMV7-NEXT:    adds r3, lr, r3
; ARMV7-NEXT:    adc r7, r2, r12
; ARMV7-NEXT:    ldr r2, [sp] @ 4-byte Reload
; ARMV7-NEXT:    adds r2, r2, r3
; ARMV7-NEXT:    adc r3, r11, r7
; ARMV7-NEXT:  .LBB0_8: @ %overflow.res
; ARMV7-NEXT:    str r8, [r0]
; ARMV7-NEXT:    and r1, r1, #1
; ARMV7-NEXT:    str r5, [r0, #4]
; ARMV7-NEXT:    str r2, [r0, #8]
; ARMV7-NEXT:    str r3, [r0, #12]
; ARMV7-NEXT:    strb r1, [r0, #16]
; ARMV7-NEXT:    add sp, sp, #12
; ARMV7-NEXT:    pop {r4, r5, r6, r7, r8, r9, r10, r11, pc}
start:
  %0 = tail call { i128, i1 } @llvm.umul.with.overflow.i128(i128 %l, i128 %r) #2
  %1 = extractvalue { i128, i1 } %0, 0
  %2 = extractvalue { i128, i1 } %0, 1
  %3 = zext i1 %2 to i8
  %4 = insertvalue { i128, i8 } undef, i128 %1, 0
  %5 = insertvalue { i128, i8 } %4, i8 %3, 1
  ret { i128, i8 } %5
}

; Function Attrs: nounwind readnone speculatable
declare { i128, i1 } @llvm.umul.with.overflow.i128(i128, i128) #1

attributes #0 = { nounwind readnone uwtable }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind }
