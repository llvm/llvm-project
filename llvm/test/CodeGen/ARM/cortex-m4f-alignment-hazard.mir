# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=thumbv7-apple-darwin -mcpu=cortex-m4 -verify-machineinstrs -run-pass post-RA-hazard-rec -o - %s | FileCheck %s --check-prefix=DEFAULT
# RUN: llc -mtriple=thumbv7-apple-darwin -mcpu=cortex-m4 -verify-machineinstrs -run-pass post-RA-hazard-rec -o - %s -cortex-m4-alignment-hazard-rec-innermost-loops-only=0 | FileCheck %s --check-prefix=ANY-LOOPS
# RUN: llc -mtriple=thumbv7-apple-darwin -mcpu=cortex-m4 -verify-machineinstrs -run-pass post-RA-hazard-rec -o - %s -cortex-m4-alignment-hazard-rec-loops-only=0 | FileCheck %s --check-prefix=ANY-BLOCK
--- |
  define void @hazard_kinds() {
  entry:
    ret void
  }

  define void @alignment_hazards_in_double_loop() {
  entry:
    ret void
  }

  define void @has_minsize() #0 {
  entry:
    ret void
  }

  define void @has_optsize() #1 {
  entry:
    ret void
  }

  attributes #0 = { minsize }
  attributes #1 = { optsize }

...
---
name:            hazard_kinds
alignment:       4
body:             |
  ; DEFAULT-LABEL: name: hazard_kinds
  ; DEFAULT: bb.0 (align 4):
  ; DEFAULT-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $s6 = VLDRS renamable $r3, 6, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; DEFAULT-NEXT:   $r1 = t2LDRi12 $r1, 0, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; DEFAULT-NEXT:   t2STRDi8 $r4, $r4, $r0, 192, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $s2 = VLDRS renamable $r3, 4, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   renamable $r2 = t2LSRri renamable $lr, 1, 14 /* CC::al */, $noreg, $noreg
  ; DEFAULT-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT: bb.1:
  ; DEFAULT-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-LOOPS-LABEL: name: hazard_kinds
  ; ANY-LOOPS: bb.0 (align 4):
  ; ANY-LOOPS-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $s6 = VLDRS renamable $r3, 6, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-LOOPS-NEXT:   $r1 = t2LDRi12 $r1, 0, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-LOOPS-NEXT:   t2STRDi8 $r4, $r4, $r0, 192, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $s2 = VLDRS renamable $r3, 4, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   renamable $r2 = t2LSRri renamable $lr, 1, 14 /* CC::al */, $noreg, $noreg
  ; ANY-LOOPS-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT: bb.1:
  ; ANY-LOOPS-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-BLOCK-LABEL: name: hazard_kinds
  ; ANY-BLOCK: bb.0 (align 4):
  ; ANY-BLOCK-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $s6 = VLDRS renamable $r3, 6, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   $r1 = t2LDRi12 $r1, 0, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   t2STRDi8 $r4, $r4, $r0, 192, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $s2 = VLDRS renamable $r3, 4, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   renamable $r2 = t2LSRri renamable $lr, 1, 14 /* CC::al */, $noreg, $noreg
  ; ANY-BLOCK-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT: bb.1:
  ; ANY-BLOCK-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  bb.0 (align 4):
    successors: %bb.0, %bb.1

    renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg

    renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14, $noreg
    renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    renamable $s6 = VLDRS renamable $r3, 6, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg

    renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14, $noreg
    $r1 = t2LDRi12 $r1, 0, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg

    renamable $r2, dead $cpsr = tLSRri renamable $r1, 1, 14, $noreg
    t2STRDi8 $r4, $r4, $r0, 192, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg

    renamable $s2 = VLDRS renamable $r3, 4, 14, $noreg
    renamable $r2 = t2LSRri renamable $lr, 1, 14, $noreg, $noreg

    tBcc %bb.0, 1, killed $cpsr

  bb.1:
    tPOP_RET 14, $noreg, def $r4, def $r6, def $r7, def $pc
...
---
name:            alignment_hazards_in_double_loop
alignment:       4
body:             |
  ; DEFAULT-LABEL: name: alignment_hazards_in_double_loop
  ; DEFAULT: bb.0 (align 4):
  ; DEFAULT-NEXT:   successors: %bb.1(0x80000000)
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT: bb.1 (align 4):
  ; DEFAULT-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tBcc %bb.1, 1 /* CC::ne */, killed $cpsr
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT: bb.2 (align 4):
  ; DEFAULT-NEXT:   successors: %bb.0(0x40000000), %bb.3(0x40000000)
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT: bb.3:
  ; DEFAULT-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-LOOPS-LABEL: name: alignment_hazards_in_double_loop
  ; ANY-LOOPS: bb.0 (align 4):
  ; ANY-LOOPS-NEXT:   successors: %bb.1(0x80000000)
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT: bb.1 (align 4):
  ; ANY-LOOPS-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tBcc %bb.1, 1 /* CC::ne */, killed $cpsr
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT: bb.2 (align 4):
  ; ANY-LOOPS-NEXT:   successors: %bb.0(0x40000000), %bb.3(0x40000000)
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT: bb.3:
  ; ANY-LOOPS-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-BLOCK-LABEL: name: alignment_hazards_in_double_loop
  ; ANY-BLOCK: bb.0 (align 4):
  ; ANY-BLOCK-NEXT:   successors: %bb.1(0x80000000)
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT: bb.1 (align 4):
  ; ANY-BLOCK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tBcc %bb.1, 1 /* CC::ne */, killed $cpsr
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT: bb.2 (align 4):
  ; ANY-BLOCK-NEXT:   successors: %bb.0(0x40000000), %bb.3(0x40000000)
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT: bb.3:
  ; ANY-BLOCK-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  bb.0 (align 4):
    successors: %bb.1

  bb.1 (align 4):
    successors: %bb.1, %bb.2
    renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg
    tBcc %bb.1, 1, killed $cpsr

  bb.2 (align 4):
    successors: %bb.0, %bb.3
    renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg
    tBcc %bb.0, 1, killed $cpsr

  bb.3:
    renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg
    tPOP_RET 14, $noreg, def $r4, def $r6, def $r7, def $pc
...
---
name:            has_minsize
alignment:       4
body:             |
  ; DEFAULT-LABEL: name: has_minsize
  ; DEFAULT: bb.0 (align 4):
  ; DEFAULT-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT: bb.1:
  ; DEFAULT-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-LOOPS-LABEL: name: has_minsize
  ; ANY-LOOPS: bb.0 (align 4):
  ; ANY-LOOPS-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT: bb.1:
  ; ANY-LOOPS-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-BLOCK-LABEL: name: has_minsize
  ; ANY-BLOCK: bb.0 (align 4):
  ; ANY-BLOCK-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT: bb.1:
  ; ANY-BLOCK-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  bb.0 (align 4):
    successors: %bb.0, %bb.1

    renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg
    tBcc %bb.0, 1, killed $cpsr

  bb.1:
    tPOP_RET 14, $noreg, def $r4, def $r6, def $r7, def $pc
...
---
name:            has_optsize
alignment:       4
body:             |
  ; DEFAULT-LABEL: name: has_optsize
  ; DEFAULT: bb.0 (align 4):
  ; DEFAULT-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; DEFAULT-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; DEFAULT-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; DEFAULT-NEXT: {{  $}}
  ; DEFAULT-NEXT: bb.1:
  ; DEFAULT-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-LOOPS-LABEL: name: has_optsize
  ; ANY-LOOPS: bb.0 (align 4):
  ; ANY-LOOPS-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-LOOPS-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-LOOPS-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-LOOPS-NEXT: {{  $}}
  ; ANY-LOOPS-NEXT: bb.1:
  ; ANY-LOOPS-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  ;
  ; ANY-BLOCK-LABEL: name: has_optsize
  ; ANY-BLOCK: bb.0 (align 4):
  ; ANY-BLOCK-NEXT:   successors: %bb.0(0x40000000), %bb.1(0x40000000)
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT:   renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tHINT 0, 14 /* CC::al */, 0
  ; ANY-BLOCK-NEXT:   $s2 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s3 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s4 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s5 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s6 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s7 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   $s8 = VMOVSR $r1, 14 /* CC::al */, $noreg
  ; ANY-BLOCK-NEXT:   tBcc %bb.0, 1 /* CC::ne */, killed $cpsr
  ; ANY-BLOCK-NEXT: {{  $}}
  ; ANY-BLOCK-NEXT: bb.1:
  ; ANY-BLOCK-NEXT:   tPOP_RET 14 /* CC::al */, $noreg, def $r4, def $r6, def $r7, def $pc
  bb.0 (align 4):
    successors: %bb.0, %bb.1

    renamable $r1, dead $cpsr = tLSRri renamable $r2, 1, 14, $noreg
    $s2 = VMOVSR $r1, 14, $noreg
    $s3 = VMOVSR $r1, 14, $noreg
    $s4 = VMOVSR $r1, 14, $noreg
    $s5 = VMOVSR $r1, 14, $noreg
    $s6 = VMOVSR $r1, 14, $noreg
    $s7 = VMOVSR $r1, 14, $noreg
    $s8 = VMOVSR $r1, 14, $noreg
    tBcc %bb.0, 1, killed $cpsr

  bb.1:
    tPOP_RET 14, $noreg, def $r4, def $r6, def $r7, def $pc
