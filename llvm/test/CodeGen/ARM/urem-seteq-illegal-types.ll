; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=armv5-unknown-linux-gnu < %s | FileCheck %s --check-prefixes=ARM5
; RUN: llc -mtriple=armv6-unknown-linux-gnu < %s | FileCheck %s --check-prefixes=ARM6
; RUN: llc -mtriple=armv7-unknown-linux-gnu < %s | FileCheck %s --check-prefixes=ARM7
; RUN: llc -mtriple=armv8-unknown-linux-gnu < %s | FileCheck %s --check-prefixes=ARM8
; RUN: llc -mtriple=armv7-unknown-linux-gnu -mattr=+neon < %s | FileCheck %s --check-prefixes=NEON7
; RUN: llc -mtriple=armv8-unknown-linux-gnu -mattr=+neon < %s | FileCheck %s --check-prefixes=NEON8

define i1 @test_urem_odd(i13 %X) nounwind {
; ARM5-LABEL: test_urem_odd:
; ARM5:       @ %bb.0:
; ARM5-NEXT:    mov r1, #255
; ARM5-NEXT:    orr r1, r1, #7936
; ARM5-NEXT:    and r0, r0, r1
; ARM5-NEXT:    ldr r1, .LCPI0_0
; ARM5-NEXT:    mul r2, r0, r1
; ARM5-NEXT:    ldr r1, .LCPI0_1
; ARM5-NEXT:    mov r0, #0
; ARM5-NEXT:    cmp r2, r1
; ARM5-NEXT:    movlo r0, #1
; ARM5-NEXT:    bx lr
; ARM5-NEXT:    .p2align 2
; ARM5-NEXT:  @ %bb.1:
; ARM5-NEXT:  .LCPI0_0:
; ARM5-NEXT:    .long 3435973837 @ 0xcccccccd
; ARM5-NEXT:  .LCPI0_1:
; ARM5-NEXT:    .long 858993460 @ 0x33333334
;
; ARM6-LABEL: test_urem_odd:
; ARM6:       @ %bb.0:
; ARM6-NEXT:    mov r1, #255
; ARM6-NEXT:    ldr r2, .LCPI0_1
; ARM6-NEXT:    orr r1, r1, #7936
; ARM6-NEXT:    and r0, r0, r1
; ARM6-NEXT:    ldr r1, .LCPI0_0
; ARM6-NEXT:    mul r1, r0, r1
; ARM6-NEXT:    mov r0, #0
; ARM6-NEXT:    cmp r1, r2
; ARM6-NEXT:    movlo r0, #1
; ARM6-NEXT:    bx lr
; ARM6-NEXT:    .p2align 2
; ARM6-NEXT:  @ %bb.1:
; ARM6-NEXT:  .LCPI0_0:
; ARM6-NEXT:    .long 3435973837 @ 0xcccccccd
; ARM6-NEXT:  .LCPI0_1:
; ARM6-NEXT:    .long 858993460 @ 0x33333334
;
; ARM7-LABEL: test_urem_odd:
; ARM7:       @ %bb.0:
; ARM7-NEXT:    movw r1, #52429
; ARM7-NEXT:    bfc r0, #13, #19
; ARM7-NEXT:    movt r1, #52428
; ARM7-NEXT:    movw r2, #13108
; ARM7-NEXT:    mul r1, r0, r1
; ARM7-NEXT:    movt r2, #13107
; ARM7-NEXT:    mov r0, #0
; ARM7-NEXT:    cmp r1, r2
; ARM7-NEXT:    movwlo r0, #1
; ARM7-NEXT:    bx lr
;
; ARM8-LABEL: test_urem_odd:
; ARM8:       @ %bb.0:
; ARM8-NEXT:    movw r1, #52429
; ARM8-NEXT:    bfc r0, #13, #19
; ARM8-NEXT:    movt r1, #52428
; ARM8-NEXT:    movw r2, #13108
; ARM8-NEXT:    mul r1, r0, r1
; ARM8-NEXT:    movt r2, #13107
; ARM8-NEXT:    mov r0, #0
; ARM8-NEXT:    cmp r1, r2
; ARM8-NEXT:    movwlo r0, #1
; ARM8-NEXT:    bx lr
;
; NEON7-LABEL: test_urem_odd:
; NEON7:       @ %bb.0:
; NEON7-NEXT:    movw r1, #52429
; NEON7-NEXT:    bfc r0, #13, #19
; NEON7-NEXT:    movt r1, #52428
; NEON7-NEXT:    movw r2, #13108
; NEON7-NEXT:    mul r1, r0, r1
; NEON7-NEXT:    movt r2, #13107
; NEON7-NEXT:    mov r0, #0
; NEON7-NEXT:    cmp r1, r2
; NEON7-NEXT:    movwlo r0, #1
; NEON7-NEXT:    bx lr
;
; NEON8-LABEL: test_urem_odd:
; NEON8:       @ %bb.0:
; NEON8-NEXT:    movw r1, #52429
; NEON8-NEXT:    bfc r0, #13, #19
; NEON8-NEXT:    movt r1, #52428
; NEON8-NEXT:    movw r2, #13108
; NEON8-NEXT:    mul r1, r0, r1
; NEON8-NEXT:    movt r2, #13107
; NEON8-NEXT:    mov r0, #0
; NEON8-NEXT:    cmp r1, r2
; NEON8-NEXT:    movwlo r0, #1
; NEON8-NEXT:    bx lr
  %urem = urem i13 %X, 5
  %cmp = icmp eq i13 %urem, 0
  ret i1 %cmp
}

define i1 @test_urem_even(i27 %X) nounwind {
; ARM5-LABEL: test_urem_even:
; ARM5:       @ %bb.0:
; ARM5-NEXT:    ldr r1, .LCPI1_0
; ARM5-NEXT:    bic r0, r0, #-134217728
; ARM5-NEXT:    mul r2, r0, r1
; ARM5-NEXT:    mov r0, #0
; ARM5-NEXT:    ror r1, r2, #1
; ARM5-NEXT:    ldr r2, .LCPI1_1
; ARM5-NEXT:    cmp r1, r2
; ARM5-NEXT:    movlo r0, #1
; ARM5-NEXT:    bx lr
; ARM5-NEXT:    .p2align 2
; ARM5-NEXT:  @ %bb.1:
; ARM5-NEXT:  .LCPI1_0:
; ARM5-NEXT:    .long 3067833783 @ 0xb6db6db7
; ARM5-NEXT:  .LCPI1_1:
; ARM5-NEXT:    .long 306783379 @ 0x12492493
;
; ARM6-LABEL: test_urem_even:
; ARM6:       @ %bb.0:
; ARM6-NEXT:    ldr r1, .LCPI1_0
; ARM6-NEXT:    bic r0, r0, #-134217728
; ARM6-NEXT:    ldr r2, .LCPI1_1
; ARM6-NEXT:    mul r0, r0, r1
; ARM6-NEXT:    ror r1, r0, #1
; ARM6-NEXT:    mov r0, #0
; ARM6-NEXT:    cmp r1, r2
; ARM6-NEXT:    movlo r0, #1
; ARM6-NEXT:    bx lr
; ARM6-NEXT:    .p2align 2
; ARM6-NEXT:  @ %bb.1:
; ARM6-NEXT:  .LCPI1_0:
; ARM6-NEXT:    .long 3067833783 @ 0xb6db6db7
; ARM6-NEXT:  .LCPI1_1:
; ARM6-NEXT:    .long 306783379 @ 0x12492493
;
; ARM7-LABEL: test_urem_even:
; ARM7:       @ %bb.0:
; ARM7-NEXT:    movw r1, #28087
; ARM7-NEXT:    bic r0, r0, #-134217728
; ARM7-NEXT:    movt r1, #46811
; ARM7-NEXT:    movw r2, #9363
; ARM7-NEXT:    mul r0, r0, r1
; ARM7-NEXT:    movt r2, #4681
; ARM7-NEXT:    ror r1, r0, #1
; ARM7-NEXT:    mov r0, #0
; ARM7-NEXT:    cmp r1, r2
; ARM7-NEXT:    movwlo r0, #1
; ARM7-NEXT:    bx lr
;
; ARM8-LABEL: test_urem_even:
; ARM8:       @ %bb.0:
; ARM8-NEXT:    movw r1, #28087
; ARM8-NEXT:    bic r0, r0, #-134217728
; ARM8-NEXT:    movt r1, #46811
; ARM8-NEXT:    movw r2, #9363
; ARM8-NEXT:    mul r0, r0, r1
; ARM8-NEXT:    movt r2, #4681
; ARM8-NEXT:    ror r1, r0, #1
; ARM8-NEXT:    mov r0, #0
; ARM8-NEXT:    cmp r1, r2
; ARM8-NEXT:    movwlo r0, #1
; ARM8-NEXT:    bx lr
;
; NEON7-LABEL: test_urem_even:
; NEON7:       @ %bb.0:
; NEON7-NEXT:    movw r1, #28087
; NEON7-NEXT:    bic r0, r0, #-134217728
; NEON7-NEXT:    movt r1, #46811
; NEON7-NEXT:    movw r2, #9363
; NEON7-NEXT:    mul r0, r0, r1
; NEON7-NEXT:    movt r2, #4681
; NEON7-NEXT:    ror r1, r0, #1
; NEON7-NEXT:    mov r0, #0
; NEON7-NEXT:    cmp r1, r2
; NEON7-NEXT:    movwlo r0, #1
; NEON7-NEXT:    bx lr
;
; NEON8-LABEL: test_urem_even:
; NEON8:       @ %bb.0:
; NEON8-NEXT:    movw r1, #28087
; NEON8-NEXT:    bic r0, r0, #-134217728
; NEON8-NEXT:    movt r1, #46811
; NEON8-NEXT:    movw r2, #9363
; NEON8-NEXT:    mul r0, r0, r1
; NEON8-NEXT:    movt r2, #4681
; NEON8-NEXT:    ror r1, r0, #1
; NEON8-NEXT:    mov r0, #0
; NEON8-NEXT:    cmp r1, r2
; NEON8-NEXT:    movwlo r0, #1
; NEON8-NEXT:    bx lr
  %urem = urem i27 %X, 14
  %cmp = icmp eq i27 %urem, 0
  ret i1 %cmp
}

define i1 @test_urem_odd_setne(i4 %X) nounwind {
; ARM5-LABEL: test_urem_odd_setne:
; ARM5:       @ %bb.0:
; ARM5-NEXT:    ldr r1, .LCPI2_0
; ARM5-NEXT:    and r0, r0, #15
; ARM5-NEXT:    mul r2, r0, r1
; ARM5-NEXT:    ldr r1, .LCPI2_1
; ARM5-NEXT:    mov r0, #0
; ARM5-NEXT:    cmp r2, r1
; ARM5-NEXT:    movhi r0, #1
; ARM5-NEXT:    bx lr
; ARM5-NEXT:    .p2align 2
; ARM5-NEXT:  @ %bb.1:
; ARM5-NEXT:  .LCPI2_0:
; ARM5-NEXT:    .long 3435973837 @ 0xcccccccd
; ARM5-NEXT:  .LCPI2_1:
; ARM5-NEXT:    .long 858993459 @ 0x33333333
;
; ARM6-LABEL: test_urem_odd_setne:
; ARM6:       @ %bb.0:
; ARM6-NEXT:    ldr r1, .LCPI2_0
; ARM6-NEXT:    and r0, r0, #15
; ARM6-NEXT:    ldr r2, .LCPI2_1
; ARM6-NEXT:    mul r1, r0, r1
; ARM6-NEXT:    mov r0, #0
; ARM6-NEXT:    cmp r1, r2
; ARM6-NEXT:    movhi r0, #1
; ARM6-NEXT:    bx lr
; ARM6-NEXT:    .p2align 2
; ARM6-NEXT:  @ %bb.1:
; ARM6-NEXT:  .LCPI2_0:
; ARM6-NEXT:    .long 3435973837 @ 0xcccccccd
; ARM6-NEXT:  .LCPI2_1:
; ARM6-NEXT:    .long 858993459 @ 0x33333333
;
; ARM7-LABEL: test_urem_odd_setne:
; ARM7:       @ %bb.0:
; ARM7-NEXT:    movw r1, #52429
; ARM7-NEXT:    and r0, r0, #15
; ARM7-NEXT:    movt r1, #52428
; ARM7-NEXT:    movw r2, #13107
; ARM7-NEXT:    mul r1, r0, r1
; ARM7-NEXT:    movt r2, #13107
; ARM7-NEXT:    mov r0, #0
; ARM7-NEXT:    cmp r1, r2
; ARM7-NEXT:    movwhi r0, #1
; ARM7-NEXT:    bx lr
;
; ARM8-LABEL: test_urem_odd_setne:
; ARM8:       @ %bb.0:
; ARM8-NEXT:    movw r1, #52429
; ARM8-NEXT:    and r0, r0, #15
; ARM8-NEXT:    movt r1, #52428
; ARM8-NEXT:    movw r2, #13107
; ARM8-NEXT:    mul r1, r0, r1
; ARM8-NEXT:    movt r2, #13107
; ARM8-NEXT:    mov r0, #0
; ARM8-NEXT:    cmp r1, r2
; ARM8-NEXT:    movwhi r0, #1
; ARM8-NEXT:    bx lr
;
; NEON7-LABEL: test_urem_odd_setne:
; NEON7:       @ %bb.0:
; NEON7-NEXT:    movw r1, #52429
; NEON7-NEXT:    and r0, r0, #15
; NEON7-NEXT:    movt r1, #52428
; NEON7-NEXT:    movw r2, #13107
; NEON7-NEXT:    mul r1, r0, r1
; NEON7-NEXT:    movt r2, #13107
; NEON7-NEXT:    mov r0, #0
; NEON7-NEXT:    cmp r1, r2
; NEON7-NEXT:    movwhi r0, #1
; NEON7-NEXT:    bx lr
;
; NEON8-LABEL: test_urem_odd_setne:
; NEON8:       @ %bb.0:
; NEON8-NEXT:    movw r1, #52429
; NEON8-NEXT:    and r0, r0, #15
; NEON8-NEXT:    movt r1, #52428
; NEON8-NEXT:    movw r2, #13107
; NEON8-NEXT:    mul r1, r0, r1
; NEON8-NEXT:    movt r2, #13107
; NEON8-NEXT:    mov r0, #0
; NEON8-NEXT:    cmp r1, r2
; NEON8-NEXT:    movwhi r0, #1
; NEON8-NEXT:    bx lr
  %urem = urem i4 %X, 5
  %cmp = icmp ne i4 %urem, 0
  ret i1 %cmp
}

define i1 @test_urem_negative_odd(i9 %X) nounwind {
; ARM5-LABEL: test_urem_negative_odd:
; ARM5:       @ %bb.0:
; ARM5-NEXT:    mov r1, #255
; ARM5-NEXT:    orr r1, r1, #256
; ARM5-NEXT:    and r0, r0, r1
; ARM5-NEXT:    ldr r1, .LCPI3_0
; ARM5-NEXT:    mul r2, r0, r1
; ARM5-NEXT:    ldr r1, .LCPI3_1
; ARM5-NEXT:    mov r0, #0
; ARM5-NEXT:    cmp r2, r1
; ARM5-NEXT:    movhi r0, #1
; ARM5-NEXT:    bx lr
; ARM5-NEXT:    .p2align 2
; ARM5-NEXT:  @ %bb.1:
; ARM5-NEXT:  .LCPI3_0:
; ARM5-NEXT:    .long 2837897523 @ 0xa926e133
; ARM5-NEXT:  .LCPI3_1:
; ARM5-NEXT:    .long 8471335 @ 0x814327
;
; ARM6-LABEL: test_urem_negative_odd:
; ARM6:       @ %bb.0:
; ARM6-NEXT:    mov r1, #255
; ARM6-NEXT:    ldr r2, .LCPI3_1
; ARM6-NEXT:    orr r1, r1, #256
; ARM6-NEXT:    and r0, r0, r1
; ARM6-NEXT:    ldr r1, .LCPI3_0
; ARM6-NEXT:    mul r1, r0, r1
; ARM6-NEXT:    mov r0, #0
; ARM6-NEXT:    cmp r1, r2
; ARM6-NEXT:    movhi r0, #1
; ARM6-NEXT:    bx lr
; ARM6-NEXT:    .p2align 2
; ARM6-NEXT:  @ %bb.1:
; ARM6-NEXT:  .LCPI3_0:
; ARM6-NEXT:    .long 2837897523 @ 0xa926e133
; ARM6-NEXT:  .LCPI3_1:
; ARM6-NEXT:    .long 8471335 @ 0x814327
;
; ARM7-LABEL: test_urem_negative_odd:
; ARM7:       @ %bb.0:
; ARM7-NEXT:    movw r1, #57651
; ARM7-NEXT:    bfc r0, #9, #23
; ARM7-NEXT:    movt r1, #43302
; ARM7-NEXT:    movw r2, #17191
; ARM7-NEXT:    mul r1, r0, r1
; ARM7-NEXT:    movt r2, #129
; ARM7-NEXT:    mov r0, #0
; ARM7-NEXT:    cmp r1, r2
; ARM7-NEXT:    movwhi r0, #1
; ARM7-NEXT:    bx lr
;
; ARM8-LABEL: test_urem_negative_odd:
; ARM8:       @ %bb.0:
; ARM8-NEXT:    movw r1, #57651
; ARM8-NEXT:    bfc r0, #9, #23
; ARM8-NEXT:    movt r1, #43302
; ARM8-NEXT:    movw r2, #17191
; ARM8-NEXT:    mul r1, r0, r1
; ARM8-NEXT:    movt r2, #129
; ARM8-NEXT:    mov r0, #0
; ARM8-NEXT:    cmp r1, r2
; ARM8-NEXT:    movwhi r0, #1
; ARM8-NEXT:    bx lr
;
; NEON7-LABEL: test_urem_negative_odd:
; NEON7:       @ %bb.0:
; NEON7-NEXT:    movw r1, #57651
; NEON7-NEXT:    bfc r0, #9, #23
; NEON7-NEXT:    movt r1, #43302
; NEON7-NEXT:    movw r2, #17191
; NEON7-NEXT:    mul r1, r0, r1
; NEON7-NEXT:    movt r2, #129
; NEON7-NEXT:    mov r0, #0
; NEON7-NEXT:    cmp r1, r2
; NEON7-NEXT:    movwhi r0, #1
; NEON7-NEXT:    bx lr
;
; NEON8-LABEL: test_urem_negative_odd:
; NEON8:       @ %bb.0:
; NEON8-NEXT:    movw r1, #57651
; NEON8-NEXT:    bfc r0, #9, #23
; NEON8-NEXT:    movt r1, #43302
; NEON8-NEXT:    movw r2, #17191
; NEON8-NEXT:    mul r1, r0, r1
; NEON8-NEXT:    movt r2, #129
; NEON8-NEXT:    mov r0, #0
; NEON8-NEXT:    cmp r1, r2
; NEON8-NEXT:    movwhi r0, #1
; NEON8-NEXT:    bx lr
  %urem = urem i9 %X, -5
  %cmp = icmp ne i9 %urem, 0
  ret i1 %cmp
}

define <3 x i1> @test_urem_vec(<3 x i11> %X) nounwind {
; ARM5-LABEL: test_urem_vec:
; ARM5:       @ %bb.0:
; ARM5-NEXT:    push {r4, r5, r11, lr}
; ARM5-NEXT:    mov r12, #255
; ARM5-NEXT:    ldr r3, .LCPI4_1
; ARM5-NEXT:    orr r12, r12, #1792
; ARM5-NEXT:    ldr lr, .LCPI4_0
; ARM5-NEXT:    and r1, r1, r12
; ARM5-NEXT:    and r2, r2, r12
; ARM5-NEXT:    and r0, r0, r12
; ARM5-NEXT:    mla r4, r1, r3, lr
; ARM5-NEXT:    ldr r1, .LCPI4_2
; ARM5-NEXT:    ldr lr, .LCPI4_3
; ARM5-NEXT:    mov r3, #0
; ARM5-NEXT:    cmp r4, r1
; ARM5-NEXT:    ldr r4, .LCPI4_4
; ARM5-NEXT:    mov r1, #0
; ARM5-NEXT:    movhi r1, #1
; ARM5-NEXT:    mla r5, r2, r4, lr
; ARM5-NEXT:    ldr r2, .LCPI4_5
; ARM5-NEXT:    cmp r5, r2
; ARM5-NEXT:    ldr r5, .LCPI4_6
; ARM5-NEXT:    mov r2, #0
; ARM5-NEXT:    movhi r2, #1
; ARM5-NEXT:    mul r4, r0, r5
; ARM5-NEXT:    ldr r5, .LCPI4_7
; ARM5-NEXT:    ror r0, r4, #1
; ARM5-NEXT:    cmp r0, r5
; ARM5-NEXT:    movhi r3, #1
; ARM5-NEXT:    mov r0, r3
; ARM5-NEXT:    pop {r4, r5, r11, pc}
; ARM5-NEXT:    .p2align 2
; ARM5-NEXT:  @ %bb.1:
; ARM5-NEXT:  .LCPI4_0:
; ARM5-NEXT:    .long 1227133513 @ 0x49249249
; ARM5-NEXT:  .LCPI4_1:
; ARM5-NEXT:    .long 3067833783 @ 0xb6db6db7
; ARM5-NEXT:  .LCPI4_2:
; ARM5-NEXT:    .long 613566756 @ 0x24924924
; ARM5-NEXT:  .LCPI4_3:
; ARM5-NEXT:    .long 4191955354 @ 0xf9dc299a
; ARM5-NEXT:  .LCPI4_4:
; ARM5-NEXT:    .long 2198989619 @ 0x8311eb33
; ARM5-NEXT:  .LCPI4_5:
; ARM5-NEXT:    .long 2102284 @ 0x20140c
; ARM5-NEXT:  .LCPI4_6:
; ARM5-NEXT:    .long 2863311531 @ 0xaaaaaaab
; ARM5-NEXT:  .LCPI4_7:
; ARM5-NEXT:    .long 715827882 @ 0x2aaaaaaa
;
; ARM6-LABEL: test_urem_vec:
; ARM6:       @ %bb.0:
; ARM6-NEXT:    push {r4, lr}
; ARM6-NEXT:    mov r12, #255
; ARM6-NEXT:    ldr r3, .LCPI4_1
; ARM6-NEXT:    orr r12, r12, #1792
; ARM6-NEXT:    ldr lr, .LCPI4_0
; ARM6-NEXT:    and r1, r1, r12
; ARM6-NEXT:    ldr r4, .LCPI4_4
; ARM6-NEXT:    and r2, r2, r12
; ARM6-NEXT:    and r0, r0, r12
; ARM6-NEXT:    mla r1, r1, r3, lr
; ARM6-NEXT:    ldr lr, .LCPI4_2
; ARM6-NEXT:    mov r3, #0
; ARM6-NEXT:    cmp r1, lr
; ARM6-NEXT:    ldr lr, .LCPI4_3
; ARM6-NEXT:    mla r2, r2, r4, lr
; ARM6-NEXT:    ldr r4, .LCPI4_5
; ARM6-NEXT:    mov r1, #0
; ARM6-NEXT:    movhi r1, #1
; ARM6-NEXT:    cmp r2, r4
; ARM6-NEXT:    ldr r4, .LCPI4_6
; ARM6-NEXT:    mov r2, #0
; ARM6-NEXT:    movhi r2, #1
; ARM6-NEXT:    mul r0, r0, r4
; ARM6-NEXT:    ldr r4, .LCPI4_7
; ARM6-NEXT:    ror r0, r0, #1
; ARM6-NEXT:    cmp r0, r4
; ARM6-NEXT:    movhi r3, #1
; ARM6-NEXT:    mov r0, r3
; ARM6-NEXT:    pop {r4, pc}
; ARM6-NEXT:    .p2align 2
; ARM6-NEXT:  @ %bb.1:
; ARM6-NEXT:  .LCPI4_0:
; ARM6-NEXT:    .long 1227133513 @ 0x49249249
; ARM6-NEXT:  .LCPI4_1:
; ARM6-NEXT:    .long 3067833783 @ 0xb6db6db7
; ARM6-NEXT:  .LCPI4_2:
; ARM6-NEXT:    .long 613566756 @ 0x24924924
; ARM6-NEXT:  .LCPI4_3:
; ARM6-NEXT:    .long 4191955354 @ 0xf9dc299a
; ARM6-NEXT:  .LCPI4_4:
; ARM6-NEXT:    .long 2198989619 @ 0x8311eb33
; ARM6-NEXT:  .LCPI4_5:
; ARM6-NEXT:    .long 2102284 @ 0x20140c
; ARM6-NEXT:  .LCPI4_6:
; ARM6-NEXT:    .long 2863311531 @ 0xaaaaaaab
; ARM6-NEXT:  .LCPI4_7:
; ARM6-NEXT:    .long 715827882 @ 0x2aaaaaaa
;
; ARM7-LABEL: test_urem_vec:
; ARM7:       @ %bb.0:
; ARM7-NEXT:    push {r4, lr}
; ARM7-NEXT:    movw r3, #18725
; ARM7-NEXT:    bfc r1, #11, #21
; ARM7-NEXT:    movt r3, #9362
; ARM7-NEXT:    bfc r2, #11, #21
; ARM7-NEXT:    umull r3, r12, r1, r3
; ARM7-NEXT:    bfc r0, #11, #21
; ARM7-NEXT:    movw r3, #25663
; ARM7-NEXT:    movt r3, #160
; ARM7-NEXT:    umull r3, lr, r2, r3
; ARM7-NEXT:    vldr d17, .LCPI4_0
; ARM7-NEXT:    movw r3, #43691
; ARM7-NEXT:    movt r3, #43690
; ARM7-NEXT:    umull r3, r4, r0, r3
; ARM7-NEXT:    sub r3, r1, r12
; ARM7-NEXT:    add r3, r12, r3, lsr #1
; ARM7-NEXT:    lsr r12, r3, #2
; ARM7-NEXT:    sub r3, r2, lr
; ARM7-NEXT:    lsr r4, r4, #2
; ARM7-NEXT:    add r4, r4, r4, lsl #1
; ARM7-NEXT:    add r3, lr, r3, lsr #1
; ARM7-NEXT:    sub r0, r0, r4, lsl #1
; ARM7-NEXT:    lsr lr, r3, #10
; ARM7-NEXT:    movw r3, #2043
; ARM7-NEXT:    vmov.16 d16[0], r0
; ARM7-NEXT:    sub r0, r12, r12, lsl #3
; ARM7-NEXT:    mls r2, lr, r3, r2
; ARM7-NEXT:    add r0, r1, r0
; ARM7-NEXT:    vmov.16 d16[1], r0
; ARM7-NEXT:    vmov.16 d16[2], r2
; ARM7-NEXT:    vbic.i16 d16, #0xf800
; ARM7-NEXT:    vceq.i16 d16, d16, d17
; ARM7-NEXT:    vmvn d16, d16
; ARM7-NEXT:    vmov.u16 r0, d16[0]
; ARM7-NEXT:    vmov.u16 r1, d16[1]
; ARM7-NEXT:    vmov.u16 r2, d16[2]
; ARM7-NEXT:    pop {r4, pc}
; ARM7-NEXT:    .p2align 3
; ARM7-NEXT:  @ %bb.1:
; ARM7-NEXT:  .LCPI4_0:
; ARM7-NEXT:    .short 0 @ 0x0
; ARM7-NEXT:    .short 1 @ 0x1
; ARM7-NEXT:    .short 2 @ 0x2
; ARM7-NEXT:    .short 0 @ 0x0
;
; ARM8-LABEL: test_urem_vec:
; ARM8:       @ %bb.0:
; ARM8-NEXT:    push {r4, lr}
; ARM8-NEXT:    movw r3, #18725
; ARM8-NEXT:    bfc r1, #11, #21
; ARM8-NEXT:    movt r3, #9362
; ARM8-NEXT:    bfc r2, #11, #21
; ARM8-NEXT:    umull r3, r12, r1, r3
; ARM8-NEXT:    bfc r0, #11, #21
; ARM8-NEXT:    movw r3, #25663
; ARM8-NEXT:    movt r3, #160
; ARM8-NEXT:    umull r3, lr, r2, r3
; ARM8-NEXT:    vldr d17, .LCPI4_0
; ARM8-NEXT:    movw r3, #43691
; ARM8-NEXT:    movt r3, #43690
; ARM8-NEXT:    umull r3, r4, r0, r3
; ARM8-NEXT:    sub r3, r1, r12
; ARM8-NEXT:    add r3, r12, r3, lsr #1
; ARM8-NEXT:    lsr r12, r3, #2
; ARM8-NEXT:    sub r3, r2, lr
; ARM8-NEXT:    lsr r4, r4, #2
; ARM8-NEXT:    add r4, r4, r4, lsl #1
; ARM8-NEXT:    add r3, lr, r3, lsr #1
; ARM8-NEXT:    sub r0, r0, r4, lsl #1
; ARM8-NEXT:    lsr lr, r3, #10
; ARM8-NEXT:    movw r3, #2043
; ARM8-NEXT:    vmov.16 d16[0], r0
; ARM8-NEXT:    sub r0, r12, r12, lsl #3
; ARM8-NEXT:    mls r2, lr, r3, r2
; ARM8-NEXT:    add r0, r1, r0
; ARM8-NEXT:    vmov.16 d16[1], r0
; ARM8-NEXT:    vmov.16 d16[2], r2
; ARM8-NEXT:    vbic.i16 d16, #0xf800
; ARM8-NEXT:    vceq.i16 d16, d16, d17
; ARM8-NEXT:    vmvn d16, d16
; ARM8-NEXT:    vmov.u16 r0, d16[0]
; ARM8-NEXT:    vmov.u16 r1, d16[1]
; ARM8-NEXT:    vmov.u16 r2, d16[2]
; ARM8-NEXT:    pop {r4, pc}
; ARM8-NEXT:    .p2align 3
; ARM8-NEXT:  @ %bb.1:
; ARM8-NEXT:  .LCPI4_0:
; ARM8-NEXT:    .short 0 @ 0x0
; ARM8-NEXT:    .short 1 @ 0x1
; ARM8-NEXT:    .short 2 @ 0x2
; ARM8-NEXT:    .short 0 @ 0x0
;
; NEON7-LABEL: test_urem_vec:
; NEON7:       @ %bb.0:
; NEON7-NEXT:    push {r4, lr}
; NEON7-NEXT:    movw r3, #18725
; NEON7-NEXT:    bfc r1, #11, #21
; NEON7-NEXT:    movt r3, #9362
; NEON7-NEXT:    bfc r2, #11, #21
; NEON7-NEXT:    umull r3, r12, r1, r3
; NEON7-NEXT:    bfc r0, #11, #21
; NEON7-NEXT:    movw r3, #25663
; NEON7-NEXT:    movt r3, #160
; NEON7-NEXT:    umull r3, lr, r2, r3
; NEON7-NEXT:    vldr d17, .LCPI4_0
; NEON7-NEXT:    movw r3, #43691
; NEON7-NEXT:    movt r3, #43690
; NEON7-NEXT:    umull r3, r4, r0, r3
; NEON7-NEXT:    sub r3, r1, r12
; NEON7-NEXT:    add r3, r12, r3, lsr #1
; NEON7-NEXT:    lsr r12, r3, #2
; NEON7-NEXT:    sub r3, r2, lr
; NEON7-NEXT:    lsr r4, r4, #2
; NEON7-NEXT:    add r4, r4, r4, lsl #1
; NEON7-NEXT:    add r3, lr, r3, lsr #1
; NEON7-NEXT:    sub r0, r0, r4, lsl #1
; NEON7-NEXT:    lsr lr, r3, #10
; NEON7-NEXT:    movw r3, #2043
; NEON7-NEXT:    vmov.16 d16[0], r0
; NEON7-NEXT:    sub r0, r12, r12, lsl #3
; NEON7-NEXT:    mls r2, lr, r3, r2
; NEON7-NEXT:    add r0, r1, r0
; NEON7-NEXT:    vmov.16 d16[1], r0
; NEON7-NEXT:    vmov.16 d16[2], r2
; NEON7-NEXT:    vbic.i16 d16, #0xf800
; NEON7-NEXT:    vceq.i16 d16, d16, d17
; NEON7-NEXT:    vmvn d16, d16
; NEON7-NEXT:    vmov.u16 r0, d16[0]
; NEON7-NEXT:    vmov.u16 r1, d16[1]
; NEON7-NEXT:    vmov.u16 r2, d16[2]
; NEON7-NEXT:    pop {r4, pc}
; NEON7-NEXT:    .p2align 3
; NEON7-NEXT:  @ %bb.1:
; NEON7-NEXT:  .LCPI4_0:
; NEON7-NEXT:    .short 0 @ 0x0
; NEON7-NEXT:    .short 1 @ 0x1
; NEON7-NEXT:    .short 2 @ 0x2
; NEON7-NEXT:    .short 0 @ 0x0
;
; NEON8-LABEL: test_urem_vec:
; NEON8:       @ %bb.0:
; NEON8-NEXT:    push {r4, lr}
; NEON8-NEXT:    movw r3, #18725
; NEON8-NEXT:    bfc r1, #11, #21
; NEON8-NEXT:    movt r3, #9362
; NEON8-NEXT:    bfc r2, #11, #21
; NEON8-NEXT:    umull r3, r12, r1, r3
; NEON8-NEXT:    bfc r0, #11, #21
; NEON8-NEXT:    movw r3, #25663
; NEON8-NEXT:    movt r3, #160
; NEON8-NEXT:    umull r3, lr, r2, r3
; NEON8-NEXT:    vldr d17, .LCPI4_0
; NEON8-NEXT:    movw r3, #43691
; NEON8-NEXT:    movt r3, #43690
; NEON8-NEXT:    umull r3, r4, r0, r3
; NEON8-NEXT:    sub r3, r1, r12
; NEON8-NEXT:    add r3, r12, r3, lsr #1
; NEON8-NEXT:    lsr r12, r3, #2
; NEON8-NEXT:    sub r3, r2, lr
; NEON8-NEXT:    lsr r4, r4, #2
; NEON8-NEXT:    add r4, r4, r4, lsl #1
; NEON8-NEXT:    add r3, lr, r3, lsr #1
; NEON8-NEXT:    sub r0, r0, r4, lsl #1
; NEON8-NEXT:    lsr lr, r3, #10
; NEON8-NEXT:    movw r3, #2043
; NEON8-NEXT:    vmov.16 d16[0], r0
; NEON8-NEXT:    sub r0, r12, r12, lsl #3
; NEON8-NEXT:    mls r2, lr, r3, r2
; NEON8-NEXT:    add r0, r1, r0
; NEON8-NEXT:    vmov.16 d16[1], r0
; NEON8-NEXT:    vmov.16 d16[2], r2
; NEON8-NEXT:    vbic.i16 d16, #0xf800
; NEON8-NEXT:    vceq.i16 d16, d16, d17
; NEON8-NEXT:    vmvn d16, d16
; NEON8-NEXT:    vmov.u16 r0, d16[0]
; NEON8-NEXT:    vmov.u16 r1, d16[1]
; NEON8-NEXT:    vmov.u16 r2, d16[2]
; NEON8-NEXT:    pop {r4, pc}
; NEON8-NEXT:    .p2align 3
; NEON8-NEXT:  @ %bb.1:
; NEON8-NEXT:  .LCPI4_0:
; NEON8-NEXT:    .short 0 @ 0x0
; NEON8-NEXT:    .short 1 @ 0x1
; NEON8-NEXT:    .short 2 @ 0x2
; NEON8-NEXT:    .short 0 @ 0x0
  %urem = urem <3 x i11> %X, <i11 6, i11 7, i11 -5>
  %cmp = icmp ne <3 x i11> %urem, <i11 0, i11 1, i11 2>
  ret <3 x i1> %cmp
}

define i1 @test_urem_larger(i63 %X) nounwind {
; ARM5-LABEL: test_urem_larger:
; ARM5:       @ %bb.0:
; ARM5-NEXT:    push {r11, lr}
; ARM5-NEXT:    ldr r2, .LCPI5_0
; ARM5-NEXT:    bic r1, r1, #-2147483648
; ARM5-NEXT:    mov r3, #0
; ARM5-NEXT:    bl __umoddi3
; ARM5-NEXT:    orr r0, r0, r1
; ARM5-NEXT:    clz r0, r0
; ARM5-NEXT:    lsr r0, r0, #5
; ARM5-NEXT:    pop {r11, pc}
; ARM5-NEXT:    .p2align 2
; ARM5-NEXT:  @ %bb.1:
; ARM5-NEXT:  .LCPI5_0:
; ARM5-NEXT:    .long 1234567890 @ 0x499602d2
;
; ARM6-LABEL: test_urem_larger:
; ARM6:       @ %bb.0:
; ARM6-NEXT:    push {r11, lr}
; ARM6-NEXT:    ldr r2, .LCPI5_0
; ARM6-NEXT:    bic r1, r1, #-2147483648
; ARM6-NEXT:    mov r3, #0
; ARM6-NEXT:    bl __umoddi3
; ARM6-NEXT:    orr r0, r0, r1
; ARM6-NEXT:    clz r0, r0
; ARM6-NEXT:    lsr r0, r0, #5
; ARM6-NEXT:    pop {r11, pc}
; ARM6-NEXT:    .p2align 2
; ARM6-NEXT:  @ %bb.1:
; ARM6-NEXT:  .LCPI5_0:
; ARM6-NEXT:    .long 1234567890 @ 0x499602d2
;
; ARM7-LABEL: test_urem_larger:
; ARM7:       @ %bb.0:
; ARM7-NEXT:    push {r11, lr}
; ARM7-NEXT:    movw r2, #722
; ARM7-NEXT:    bic r1, r1, #-2147483648
; ARM7-NEXT:    movt r2, #18838
; ARM7-NEXT:    mov r3, #0
; ARM7-NEXT:    bl __umoddi3
; ARM7-NEXT:    orr r0, r0, r1
; ARM7-NEXT:    clz r0, r0
; ARM7-NEXT:    lsr r0, r0, #5
; ARM7-NEXT:    pop {r11, pc}
;
; ARM8-LABEL: test_urem_larger:
; ARM8:       @ %bb.0:
; ARM8-NEXT:    push {r11, lr}
; ARM8-NEXT:    movw r2, #722
; ARM8-NEXT:    bic r1, r1, #-2147483648
; ARM8-NEXT:    movt r2, #18838
; ARM8-NEXT:    mov r3, #0
; ARM8-NEXT:    bl __umoddi3
; ARM8-NEXT:    orr r0, r0, r1
; ARM8-NEXT:    clz r0, r0
; ARM8-NEXT:    lsr r0, r0, #5
; ARM8-NEXT:    pop {r11, pc}
;
; NEON7-LABEL: test_urem_larger:
; NEON7:       @ %bb.0:
; NEON7-NEXT:    push {r11, lr}
; NEON7-NEXT:    movw r2, #722
; NEON7-NEXT:    bic r1, r1, #-2147483648
; NEON7-NEXT:    movt r2, #18838
; NEON7-NEXT:    mov r3, #0
; NEON7-NEXT:    bl __umoddi3
; NEON7-NEXT:    orr r0, r0, r1
; NEON7-NEXT:    clz r0, r0
; NEON7-NEXT:    lsr r0, r0, #5
; NEON7-NEXT:    pop {r11, pc}
;
; NEON8-LABEL: test_urem_larger:
; NEON8:       @ %bb.0:
; NEON8-NEXT:    push {r11, lr}
; NEON8-NEXT:    movw r2, #722
; NEON8-NEXT:    bic r1, r1, #-2147483648
; NEON8-NEXT:    movt r2, #18838
; NEON8-NEXT:    mov r3, #0
; NEON8-NEXT:    bl __umoddi3
; NEON8-NEXT:    orr r0, r0, r1
; NEON8-NEXT:    clz r0, r0
; NEON8-NEXT:    lsr r0, r0, #5
; NEON8-NEXT:    pop {r11, pc}
  %urem = urem i63 %X, 1234567890
  %cmp = icmp eq i63 %urem, 0
  ret i1 %cmp
}
