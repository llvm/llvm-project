; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=arm-linux -mcpu=generic -verify-machineinstrs | FileCheck %s --check-prefix=CHECK --check-prefix=ARM
; RUN: llc < %s -mtriple=thumbv6m-eabi -verify-machineinstrs | FileCheck %s --check-prefix=CHECK --check-prefix=THUMBV6
; RUN: llc < %s -mtriple=thumbv7-eabi -verify-machineinstrs | FileCheck %s --check-prefix=CHECK --check-prefix=THUMBV7

define i32 @uadd_overflow(i32 %a, i32 %b) #0 {
; ARM-LABEL: uadd_overflow:
; ARM:       @ %bb.0:
; ARM-NEXT:    cmn r0, r1
; ARM-NEXT:    mov r2, #0
; ARM-NEXT:    adc r0, r2, #0
; ARM-NEXT:    mov pc, lr
;
; THUMBV6-LABEL: uadd_overflow:
; THUMBV6:       @ %bb.0:
; THUMBV6-NEXT:    movs r2, #0
; THUMBV6-NEXT:    adds r0, r0, r1
; THUMBV6-NEXT:    adcs r2, r2
; THUMBV6-NEXT:    mov r0, r2
; THUMBV6-NEXT:    bx lr
;
; THUMBV7-LABEL: uadd_overflow:
; THUMBV7:       @ %bb.0:
; THUMBV7-NEXT:    cmn r0, r1
; THUMBV7-NEXT:    mov.w r2, #0
; THUMBV7-NEXT:    adc r0, r2, #0
; THUMBV7-NEXT:    bx lr
  %sadd = tail call { i32, i1 } @llvm.uadd.with.overflow.i32(i32 %a, i32 %b)
  %1 = extractvalue { i32, i1 } %sadd, 1
  %2 = zext i1 %1 to i32
  ret i32 %2




}


define i32 @sadd_overflow(i32 %a, i32 %b) #0 {
; ARM-LABEL: sadd_overflow:
; ARM:       @ %bb.0:
; ARM-NEXT:    cmn r0, r1
; ARM-NEXT:    mov r0, #1
; ARM-NEXT:    movvc r0, #0
; ARM-NEXT:    mov pc, lr
;
; THUMBV6-LABEL: sadd_overflow:
; THUMBV6:       @ %bb.0:
; THUMBV6-NEXT:    adds r0, r0, r1
; THUMBV6-NEXT:    bvc .LBB1_2
; THUMBV6-NEXT:  @ %bb.1:
; THUMBV6-NEXT:    movs r0, #1
; THUMBV6-NEXT:    bx lr
; THUMBV6-NEXT:  .LBB1_2:
; THUMBV6-NEXT:    movs r0, #0
; THUMBV6-NEXT:    bx lr
;
; THUMBV7-LABEL: sadd_overflow:
; THUMBV7:       @ %bb.0:
; THUMBV7-NEXT:    cmn r0, r1
; THUMBV7-NEXT:    mov.w r0, #1
; THUMBV7-NEXT:    it vc
; THUMBV7-NEXT:    movvc r0, #0
; THUMBV7-NEXT:    bx lr
  %sadd = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %a, i32 %b)
  %1 = extractvalue { i32, i1 } %sadd, 1
  %2 = zext i1 %1 to i32
  ret i32 %2




}

define i32 @usub_overflow(i32 %a, i32 %b) #0 {
; ARM-LABEL: usub_overflow:
; ARM:       @ %bb.0:
; ARM-NEXT:    cmp r0, r1
; ARM-NEXT:    mov r2, #0
; ARM-NEXT:    adc r0, r2, #0
; ARM-NEXT:    eor r0, r0, #1
; ARM-NEXT:    mov pc, lr
;
; THUMBV6-LABEL: usub_overflow:
; THUMBV6:       @ %bb.0:
; THUMBV6-NEXT:    movs r2, #0
; THUMBV6-NEXT:    subs r0, r0, r1
; THUMBV6-NEXT:    adcs r2, r2
; THUMBV6-NEXT:    movs r0, #1
; THUMBV6-NEXT:    eors r0, r2
; THUMBV6-NEXT:    bx lr
;
; THUMBV7-LABEL: usub_overflow:
; THUMBV7:       @ %bb.0:
; THUMBV7-NEXT:    cmp r0, r1
; THUMBV7-NEXT:    mov.w r2, #0
; THUMBV7-NEXT:    adc r0, r2, #0
; THUMBV7-NEXT:    eor r0, r0, #1
; THUMBV7-NEXT:    bx lr
  %sadd = tail call { i32, i1 } @llvm.usub.with.overflow.i32(i32 %a, i32 %b)
  %1 = extractvalue { i32, i1 } %sadd, 1
  %2 = zext i1 %1 to i32
  ret i32 %2





  ; We should know that the overflow is just 1 bit,
  ; no need to clear any other bit
}

define i32 @ssub_overflow(i32 %a, i32 %b) #0 {
; ARM-LABEL: ssub_overflow:
; ARM:       @ %bb.0:
; ARM-NEXT:    mov r2, #1
; ARM-NEXT:    cmp r0, r1
; ARM-NEXT:    movvc r2, #0
; ARM-NEXT:    mov r0, r2
; ARM-NEXT:    mov pc, lr
;
; THUMBV6-LABEL: ssub_overflow:
; THUMBV6:       @ %bb.0:
; THUMBV6-NEXT:    cmp r0, r1
; THUMBV6-NEXT:    bvc .LBB3_2
; THUMBV6-NEXT:  @ %bb.1:
; THUMBV6-NEXT:    movs r0, #1
; THUMBV6-NEXT:    bx lr
; THUMBV6-NEXT:  .LBB3_2:
; THUMBV6-NEXT:    movs r0, #0
; THUMBV6-NEXT:    bx lr
;
; THUMBV7-LABEL: ssub_overflow:
; THUMBV7:       @ %bb.0:
; THUMBV7-NEXT:    movs r2, #1
; THUMBV7-NEXT:    cmp r0, r1
; THUMBV7-NEXT:    it vc
; THUMBV7-NEXT:    movvc r2, #0
; THUMBV7-NEXT:    mov r0, r2
; THUMBV7-NEXT:    bx lr
  %sadd = tail call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %a, i32 %b)
  %1 = extractvalue { i32, i1 } %sadd, 1
  %2 = zext i1 %1 to i32
  ret i32 %2
}

declare { i32, i1 } @llvm.uadd.with.overflow.i32(i32, i32) #1
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #2
declare { i32, i1 } @llvm.usub.with.overflow.i32(i32, i32) #3
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #4
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
