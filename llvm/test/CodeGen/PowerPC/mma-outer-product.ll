; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu \
; RUN:   -mcpu=pwr10 -enable-subreg-liveness -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr < %s | FileCheck %s
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu \
; RUN:   -mcpu=pwr10 -enable-subreg-liveness -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr < %s | FileCheck %s --check-prefix=CHECK-BE
; RUN: llc -verify-machineinstrs -mtriple=powerpc64le-unknown-linux-gnu \
; RUN:   -mcpu=future -enable-subreg-liveness -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr < %s | FileCheck %s --check-prefix=CHECK-WACC
; RUN: llc -verify-machineinstrs -mtriple=powerpc64-unknown-linux-gnu \
; RUN:   -mcpu=future -enable-subreg-liveness -ppc-asm-full-reg-names \
; RUN:   -ppc-vsr-nums-as-vr < %s | FileCheck %s --check-prefix=CHECK-BE-WACC

declare <512 x i1> @llvm.ppc.mma.assemble.acc(<16 x i8>, <16 x i8>, <16 x i8>, <16 x i8>)
declare <256 x i1> @llvm.ppc.vsx.assemble.pair(<16 x i8>, <16 x i8>)
define void @intrinsics1(<16 x i8> %vc1, <16 x i8> %vc2, <16 x i8> %vc3, <16 x i8> %vc4, ptr %ptr) {
; CHECK-LABEL: intrinsics1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vmr v1, v4
; CHECK-NEXT:    vmr v4, v3
; CHECK-NEXT:    vmr v0, v2
; CHECK-NEXT:    xxlor vs3, v5, v5
; CHECK-NEXT:    ld r3, 96(r1)
; CHECK-NEXT:    xxlor vs2, v4, v4
; CHECK-NEXT:    xxlor vs0, v0, v0
; CHECK-NEXT:    xxlor vs1, v1, v1
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvi4ger8pp acc0, v2, v3
; CHECK-NEXT:    xvf16ger2pp acc0, v2, v1
; CHECK-NEXT:    pmxvf32gerpn acc0, v3, v5, 0, 0
; CHECK-NEXT:    vmr v3, v2
; CHECK-NEXT:    vmr v2, v5
; CHECK-NEXT:    pmxvf64gernp acc0, vsp34, v0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r3)
; CHECK-NEXT:    stxv vs1, 32(r3)
; CHECK-NEXT:    stxv vs2, 16(r3)
; CHECK-NEXT:    stxv vs3, 0(r3)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: intrinsics1:
; CHECK-BE:       # %bb.0:
; CHECK-BE-NEXT:    vmr v1, v4
; CHECK-BE-NEXT:    vmr v4, v3
; CHECK-BE-NEXT:    vmr v0, v2
; CHECK-BE-NEXT:    xxlor vs3, v5, v5
; CHECK-BE-NEXT:    ld r3, 112(r1)
; CHECK-BE-NEXT:    xxlor vs2, v4, v4
; CHECK-BE-NEXT:    xxlor vs0, v0, v0
; CHECK-BE-NEXT:    xxlor vs1, v1, v1
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvi4ger8pp acc0, v2, v3
; CHECK-BE-NEXT:    xvf16ger2pp acc0, v2, v1
; CHECK-BE-NEXT:    pmxvf32gerpn acc0, v3, v5, 0, 0
; CHECK-BE-NEXT:    vmr v3, v2
; CHECK-BE-NEXT:    vmr v2, v5
; CHECK-BE-NEXT:    pmxvf64gernp acc0, vsp34, v0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r3)
; CHECK-BE-NEXT:    stxv vs0, 0(r3)
; CHECK-BE-NEXT:    stxv vs3, 48(r3)
; CHECK-BE-NEXT:    stxv vs2, 32(r3)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: intrinsics1:
; CHECK-WACC:       # %bb.0:
; CHECK-WACC-NEXT:    vmr v1, v4
; CHECK-WACC-NEXT:    vmr v4, v3
; CHECK-WACC-NEXT:    vmr v0, v2
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvi4ger8pp wacc0, v2, v4
; CHECK-WACC-NEXT:    ld r3, 96(r1)
; CHECK-WACC-NEXT:    xvf16ger2pp wacc0, v0, v1
; CHECK-WACC-NEXT:    vmr v3, v2
; CHECK-WACC-NEXT:    vmr v2, v5
; CHECK-WACC-NEXT:    pmxvf32gerpn wacc0, v4, v5, 0, 0
; CHECK-WACC-NEXT:    pmxvf64gernp wacc0, vsp34, v0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r3)
; CHECK-WACC-NEXT:    stxv v5, 32(r3)
; CHECK-WACC-NEXT:    stxv v2, 16(r3)
; CHECK-WACC-NEXT:    stxv v3, 0(r3)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: intrinsics1:
; CHECK-BE-WACC:       # %bb.0:
; CHECK-BE-WACC-NEXT:    vmr v1, v4
; CHECK-BE-WACC-NEXT:    vmr v4, v3
; CHECK-BE-WACC-NEXT:    vmr v0, v2
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvi4ger8pp wacc0, v2, v4
; CHECK-BE-WACC-NEXT:    ld r3, 112(r1)
; CHECK-BE-WACC-NEXT:    xvf16ger2pp wacc0, v0, v1
; CHECK-BE-WACC-NEXT:    vmr v3, v2
; CHECK-BE-WACC-NEXT:    vmr v2, v5
; CHECK-BE-WACC-NEXT:    pmxvf32gerpn wacc0, v4, v5, 0, 0
; CHECK-BE-WACC-NEXT:    pmxvf64gernp wacc0, vsp34, v0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r3)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r3)
; CHECK-BE-WACC-NEXT:    blr
  %1 = tail call <512 x i1> @llvm.ppc.mma.assemble.acc(<16 x i8> %vc1, <16 x i8> %vc3, <16 x i8> %vc2, <16 x i8> %vc4)
  %2 = tail call <512 x i1> @llvm.ppc.mma.xvi4ger8pp(<512 x i1> %1, <16 x i8> %vc1, <16 x i8> %vc2)
  %3 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2pp(<512 x i1> %2, <16 x i8> %vc1, <16 x i8> %vc3)
  %4 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32gerpn(<512 x i1> %3, <16 x i8> %vc2, <16 x i8> %vc4, i32 0, i32 0)
  %5 = tail call <256 x i1> @llvm.ppc.vsx.assemble.pair(<16 x i8> %vc4, <16 x i8> %vc1)
  %6 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64gernp(<512 x i1> %4, <256 x i1> %5, <16 x i8> %vc1, i32 0, i32 0)
  store <512 x i1> %6, ptr %ptr, align 64
  ret void
}

declare { <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8> } @llvm.ppc.mma.disassemble.acc(<512 x i1>)
define void @intrinsics2(ptr %ptr1, ptr %ptr2, ptr %ptr3, ptr %ptr4, ptr %ptr) {
; CHECK-LABEL: intrinsics2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lxv v2, 0(r3)
; CHECK-NEXT:    lxv v3, 0(r4)
; CHECK-NEXT:    xxlor vs0, v2, v2
; CHECK-NEXT:    lxv v4, 0(r5)
; CHECK-NEXT:    lxv v5, 0(r6)
; CHECK-NEXT:    xxlor vs2, v4, v4
; CHECK-NEXT:    xxlor vs3, v5, v5
; CHECK-NEXT:    xxlor vs1, v3, v3
; CHECK-NEXT:    vmr v1, v2
; CHECK-NEXT:    vmr v0, v5
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvi8ger4pp acc0, v2, v3
; CHECK-NEXT:    xvf16ger2pn acc0, v2, v4
; CHECK-NEXT:    pmxvf32gernn acc0, v3, v5, 0, 0
; CHECK-NEXT:    pmxvf64gernn acc0, vsp32, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs3, 0(r3)
; CHECK-NEXT:    stxv vs2, 0(r4)
; CHECK-NEXT:    stxv vs1, 0(r5)
; CHECK-NEXT:    stxv vs0, 0(r6)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: intrinsics2:
; CHECK-BE:       # %bb.0:
; CHECK-BE-NEXT:    lxv v2, 0(r3)
; CHECK-BE-NEXT:    lxv v3, 0(r4)
; CHECK-BE-NEXT:    xxlor vs0, v2, v2
; CHECK-BE-NEXT:    lxv v4, 0(r5)
; CHECK-BE-NEXT:    lxv v5, 0(r6)
; CHECK-BE-NEXT:    xxlor vs2, v4, v4
; CHECK-BE-NEXT:    xxlor vs3, v5, v5
; CHECK-BE-NEXT:    xxlor vs1, v3, v3
; CHECK-BE-NEXT:    vmr v1, v2
; CHECK-BE-NEXT:    vmr v0, v5
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvi8ger4pp acc0, v2, v3
; CHECK-BE-NEXT:    xvf16ger2pn acc0, v2, v4
; CHECK-BE-NEXT:    pmxvf32gernn acc0, v3, v5, 0, 0
; CHECK-BE-NEXT:    pmxvf64gernn acc0, vsp32, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs0, 0(r3)
; CHECK-BE-NEXT:    stxv vs1, 0(r4)
; CHECK-BE-NEXT:    stxv vs2, 0(r5)
; CHECK-BE-NEXT:    stxv vs3, 0(r6)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: intrinsics2:
; CHECK-WACC:       # %bb.0:
; CHECK-WACC-NEXT:    lxv v2, 0(r3)
; CHECK-WACC-NEXT:    lxv v4, 0(r5)
; CHECK-WACC-NEXT:    lxv v3, 0(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r6)
; CHECK-WACC-NEXT:    vmr v1, v2
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp34, vsp36, 0
; CHECK-WACC-NEXT:    xvi8ger4pp wacc0, v2, v3
; CHECK-WACC-NEXT:    xvf16ger2pn wacc0, v2, v4
; CHECK-WACC-NEXT:    vmr v0, v5
; CHECK-WACC-NEXT:    pmxvf32gernn wacc0, v3, v5, 0, 0
; CHECK-WACC-NEXT:    pmxvf64gernn wacc0, vsp32, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v5, 0(r3)
; CHECK-WACC-NEXT:    stxv v4, 0(r4)
; CHECK-WACC-NEXT:    stxv v3, 0(r5)
; CHECK-WACC-NEXT:    stxv v2, 0(r6)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: intrinsics2:
; CHECK-BE-WACC:       # %bb.0:
; CHECK-BE-WACC-NEXT:    lxv v2, 0(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r5)
; CHECK-BE-WACC-NEXT:    lxv v3, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 0(r6)
; CHECK-BE-WACC-NEXT:    vmr v1, v2
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp34, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvi8ger4pp wacc0, v2, v3
; CHECK-BE-WACC-NEXT:    xvf16ger2pn wacc0, v2, v4
; CHECK-BE-WACC-NEXT:    vmr v0, v5
; CHECK-BE-WACC-NEXT:    pmxvf32gernn wacc0, v3, v5, 0, 0
; CHECK-BE-WACC-NEXT:    pmxvf64gernn wacc0, vsp32, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r3)
; CHECK-BE-WACC-NEXT:    stxv v3, 0(r4)
; CHECK-BE-WACC-NEXT:    stxv v4, 0(r5)
; CHECK-BE-WACC-NEXT:    stxv v5, 0(r6)
; CHECK-BE-WACC-NEXT:    blr
  %vc1 = load <16 x i8>, ptr %ptr1, align 16
  %vc2 = load <16 x i8>, ptr %ptr2, align 16
  %vc3 = load <16 x i8>, ptr %ptr3, align 16
  %vc4 = load <16 x i8>, ptr %ptr4, align 16
  %1 = tail call <512 x i1> @llvm.ppc.mma.assemble.acc(<16 x i8> %vc1, <16 x i8> %vc2, <16 x i8> %vc3, <16 x i8> %vc4)
  %2 = tail call <512 x i1> @llvm.ppc.mma.xvi8ger4pp(<512 x i1> %1, <16 x i8> %vc1, <16 x i8> %vc2)
  %3 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2pn(<512 x i1> %2, <16 x i8> %vc1, <16 x i8> %vc3)
  %4 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32gernn(<512 x i1> %3, <16 x i8> %vc2, <16 x i8> %vc4, i32 0, i32 0)
  %5 = tail call <256 x i1> @llvm.ppc.vsx.assemble.pair(<16 x i8> %vc4, <16 x i8> %vc1)
  %6 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64gernn(<512 x i1> %4, <256 x i1> %5, <16 x i8> %vc1, i32 0, i32 0)
  %7 = tail call { <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8> } @llvm.ppc.mma.disassemble.acc(<512 x i1> %6)
  %8 = extractvalue { <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8> } %7, 0
  %9 = extractvalue { <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8> } %7, 1
  %10 = extractvalue { <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8> } %7, 2
  %11 = extractvalue { <16 x i8>, <16 x i8>, <16 x i8>, <16 x i8> } %7, 3
  store <16 x i8> %8, ptr %ptr1, align 16
  store <16 x i8> %9, ptr %ptr2, align 16
  store <16 x i8> %10, ptr %ptr3, align 16
  store <16 x i8> %11, ptr %ptr4, align 16
  ret void
}

define void @test1(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvi4ger8 acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test1:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    xvi4ger8 acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test1:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    xvi4ger8 wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test1:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    xvi4ger8 wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.xvi4ger8(<16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvi4ger8(<16 x i8>, <16 x i8>)

define void @test2(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvi4ger8pp acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test2:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvi4ger8pp acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test2:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvi4ger8pp wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test2:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvi4ger8pp wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvi4ger8pp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvi4ger8pp(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test3(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pmxvi4ger8 acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test3:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    pmxvi4ger8 acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test3:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    pmxvi4ger8 wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test3:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    pmxvi4ger8 wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.pmxvi4ger8(<16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvi4ger8(<16 x i8>, <16 x i8>, i32, i32, i32)

define void @test4(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvi4ger8pp acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test4:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvi4ger8pp acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test4:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvi4ger8pp wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test4:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvi4ger8pp wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvi4ger8pp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvi4ger8pp(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test5(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvi8ger4 acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test5:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    xvi8ger4 acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test5:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    xvi8ger4 wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test5:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    xvi8ger4 wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.xvi8ger4(<16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvi8ger4(<16 x i8>, <16 x i8>)

define void @test6(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvi8ger4pp acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test6:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvi8ger4pp acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test6:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvi8ger4pp wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test6:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvi8ger4pp wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvi8ger4pp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvi8ger4pp(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test7(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test7:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pmxvi8ger4 acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test7:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    pmxvi8ger4 acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test7:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    pmxvi8ger4 wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test7:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    pmxvi8ger4 wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.pmxvi8ger4(<16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvi8ger4(<16 x i8>, <16 x i8>, i32, i32, i32)

define void @test8(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvi8ger4pp acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test8:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvi8ger4pp acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test8:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvi8ger4pp wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test8:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvi8ger4pp wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvi8ger4pp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvi8ger4pp(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test9(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test9:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvi16ger2s acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test9:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    xvi16ger2s acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test9:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    xvi16ger2s wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test9:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    xvi16ger2s wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.xvi16ger2s(<16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvi16ger2s(<16 x i8>, <16 x i8>)

define void @test10(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test10:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvi16ger2spp acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test10:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvi16ger2spp acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test10:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvi16ger2spp wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test10:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvi16ger2spp wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvi16ger2spp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvi16ger2spp(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test11(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test11:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pmxvi16ger2s acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test11:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    pmxvi16ger2s acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test11:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    pmxvi16ger2s wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test11:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    pmxvi16ger2s wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.pmxvi16ger2s(<16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvi16ger2s(<16 x i8>, <16 x i8>, i32, i32, i32)

define void @test12(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test12:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvi16ger2spp acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test12:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvi16ger2spp acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test12:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvi16ger2spp wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test12:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvi16ger2spp wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvi16ger2spp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvi16ger2spp(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test13(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test13:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvf16ger2 acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test13:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    xvf16ger2 acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test13:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    xvf16ger2 wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test13:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    xvf16ger2 wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2(<16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf16ger2(<16 x i8>, <16 x i8>)

define void @test14(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test14:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf16ger2pp acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test14:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf16ger2pp acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test14:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf16ger2pp wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test14:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf16ger2pp wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2pp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf16ger2pp(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test15(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test15:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf16ger2pn acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test15:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf16ger2pn acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test15:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf16ger2pn wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test15:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf16ger2pn wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2pn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf16ger2pn(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test16(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf16ger2np acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test16:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf16ger2np acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test16:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf16ger2np wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test16:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf16ger2np wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2np(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf16ger2np(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test17(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test17:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf16ger2nn acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test17:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf16ger2nn acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test17:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf16ger2nn wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test17:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf16ger2nn wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf16ger2nn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf16ger2nn(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test18(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test18:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pmxvf16ger2 acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test18:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    pmxvf16ger2 acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test18:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    pmxvf16ger2 wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test18:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    pmxvf16ger2 wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.pmxvf16ger2(<16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf16ger2(<16 x i8>, <16 x i8>, i32, i32, i32)

define void @test19(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test19:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf16ger2pp acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test19:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf16ger2pp acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test19:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf16ger2pp wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test19:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf16ger2pp wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf16ger2pp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf16ger2pp(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test20(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test20:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf16ger2pn acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test20:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf16ger2pn acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test20:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf16ger2pn wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test20:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf16ger2pn wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf16ger2pn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf16ger2pn(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test21(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test21:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf16ger2np acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test21:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf16ger2np acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test21:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf16ger2np wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test21:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf16ger2np wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf16ger2np(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf16ger2np(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test22(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test22:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf16ger2nn acc0, v2, v2, 0, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test22:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf16ger2nn acc0, v2, v2, 0, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test22:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf16ger2nn wacc0, v2, v2, 0, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test22:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf16ger2nn wacc0, v2, v2, 0, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf16ger2nn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf16ger2nn(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32, i32)

define void @test23(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test23:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvf32ger acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test23:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    xvf32ger acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test23:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    xvf32ger wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test23:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    xvf32ger wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.xvf32ger(<16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf32ger(<16 x i8>, <16 x i8>)

define void @test24(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test24:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf32gerpp acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test24:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf32gerpp acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test24:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf32gerpp wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test24:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf32gerpp wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf32gerpp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf32gerpp(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test25(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test25:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf32gerpn acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test25:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf32gerpn acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test25:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf32gerpn wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test25:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf32gerpn wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf32gerpn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf32gerpn(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test26(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test26:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf32gernp acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test26:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf32gernp acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test26:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf32gernp wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test26:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf32gernp wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf32gernp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf32gernp(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test27(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test27:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    xvf32gernn acc0, v2, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test27:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    xvf32gernn acc0, v2, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test27:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    xvf32gernn wacc0, v2, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test27:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    xvf32gernn wacc0, v2, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf32gernn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf32gernn(<512 x i1>, <16 x i8>, <16 x i8>)

define void @test28(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test28:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    pmxvf32ger acc0, v2, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test28:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    pmxvf32ger acc0, v2, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test28:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    pmxvf32ger wacc0, v2, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test28:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    pmxvf32ger wacc0, v2, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32ger(<16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %0, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf32ger(<16 x i8>, <16 x i8>, i32, i32)

define void @test29(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test29:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf32gerpp acc0, v2, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test29:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf32gerpp acc0, v2, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test29:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf32gerpp wacc0, v2, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test29:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf32gerpp wacc0, v2, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32gerpp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf32gerpp(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32)

define void @test30(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test30:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf32gerpn acc0, v2, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test30:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf32gerpn acc0, v2, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test30:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf32gerpn wacc0, v2, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test30:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf32gerpn wacc0, v2, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32gerpn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf32gerpn(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32)

define void @test31(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test31:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf32gernp acc0, v2, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test31:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf32gernp acc0, v2, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test31:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf32gernp wacc0, v2, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test31:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf32gernp wacc0, v2, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32gernp(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf32gernp(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32)

define void @test32(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    pmxvf32gernn acc0, v2, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test32:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    pmxvf32gernn acc0, v2, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test32:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    pmxvf32gernn wacc0, v2, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test32:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    pmxvf32gernn wacc0, v2, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf32gernn(<512 x i1> %0, <16 x i8> %vc, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf32gernn(<512 x i1>, <16 x i8>, <16 x i8>, i32, i32)

define void @test33(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test33:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    xvf64ger acc0, vsp36, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test33:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    xvf64ger acc0, vsp36, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test33:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    xvf64ger wacc0, vsp36, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test33:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    xvf64ger wacc0, vsp36, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <256 x i1>, ptr %vpp, align 32
  %1 = tail call <512 x i1> @llvm.ppc.mma.xvf64ger(<256 x i1> %0, <16 x i8> %vc)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf64ger(<256 x i1>, <16 x i8>)

define void @test34(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test34:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    xvf64gerpp acc0, vsp36, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test34:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    xvf64gerpp acc0, vsp36, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test34:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    xvf64gerpp wacc0, vsp36, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test34:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    xvf64gerpp wacc0, vsp36, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.xvf64gerpp(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf64gerpp(<512 x i1>, <256 x i1>, <16 x i8>)

define void @test35(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test35:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    xvf64gerpn acc0, vsp36, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test35:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    xvf64gerpn acc0, vsp36, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test35:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    xvf64gerpn wacc0, vsp36, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test35:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    xvf64gerpn wacc0, vsp36, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.xvf64gerpn(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf64gerpn(<512 x i1>, <256 x i1>, <16 x i8>)

define void @test36(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test36:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    xvf64gernp acc0, vsp36, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test36:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    xvf64gernp acc0, vsp36, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test36:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    xvf64gernp wacc0, vsp36, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test36:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    xvf64gernp wacc0, vsp36, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.xvf64gernp(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf64gernp(<512 x i1>, <256 x i1>, <16 x i8>)

define void @test37(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test37:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    xvf64gernn acc0, vsp36, v2
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test37:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    xvf64gernn acc0, vsp36, v2
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test37:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    xvf64gernn wacc0, vsp36, v2
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test37:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    xvf64gernn wacc0, vsp36, v2
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.xvf64gernn(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.xvf64gernn(<512 x i1>, <256 x i1>, <16 x i8>)

define void @test38(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test38:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    pmxvf64ger acc0, vsp36, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test38:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    pmxvf64ger acc0, vsp36, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test38:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    pmxvf64ger wacc0, vsp36, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test38:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    pmxvf64ger wacc0, vsp36, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <256 x i1>, ptr %vpp, align 32
  %1 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64ger(<256 x i1> %0, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %1, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf64ger(<256 x i1>, <16 x i8>, i32, i32)

define void @test39(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test39:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    pmxvf64gerpp acc0, vsp36, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test39:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    pmxvf64gerpp acc0, vsp36, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test39:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    pmxvf64gerpp wacc0, vsp36, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test39:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    pmxvf64gerpp wacc0, vsp36, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64gerpp(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf64gerpp(<512 x i1>, <256 x i1>, <16 x i8>, i32, i32)

define void @test40(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test40:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    pmxvf64gerpn acc0, vsp36, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test40:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    pmxvf64gerpn acc0, vsp36, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test40:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    pmxvf64gerpn wacc0, vsp36, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test40:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    pmxvf64gerpn wacc0, vsp36, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64gerpn(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf64gerpn(<512 x i1>, <256 x i1>, <16 x i8>, i32, i32)

define void @test41(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test41:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    pmxvf64gernp acc0, vsp36, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test41:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    pmxvf64gernp acc0, vsp36, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test41:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    pmxvf64gernp wacc0, vsp36, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test41:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    pmxvf64gernp wacc0, vsp36, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64gernp(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf64gernp(<512 x i1>, <256 x i1>, <16 x i8>, i32, i32)

define void @test42(ptr %vqp, ptr %vpp, <16 x i8> %vc, ptr %resp) {
; CHECK-LABEL: test42:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lxv vs3, 0(r3)
; CHECK-NEXT:    lxv vs2, 16(r3)
; CHECK-NEXT:    lxv vs1, 32(r3)
; CHECK-NEXT:    lxv vs0, 48(r3)
; CHECK-NEXT:    lxv v4, 16(r4)
; CHECK-NEXT:    xxmtacc acc0
; CHECK-NEXT:    lxv v5, 0(r4)
; CHECK-NEXT:    pmxvf64gernn acc0, vsp36, v2, 0, 0
; CHECK-NEXT:    xxmfacc acc0
; CHECK-NEXT:    stxv vs0, 48(r7)
; CHECK-NEXT:    stxv vs1, 32(r7)
; CHECK-NEXT:    stxv vs2, 16(r7)
; CHECK-NEXT:    stxv vs3, 0(r7)
; CHECK-NEXT:    blr
;
; CHECK-BE-LABEL: test42:
; CHECK-BE:       # %bb.0: # %entry
; CHECK-BE-NEXT:    lxv vs3, 48(r3)
; CHECK-BE-NEXT:    lxv vs2, 32(r3)
; CHECK-BE-NEXT:    lxv vs1, 16(r3)
; CHECK-BE-NEXT:    lxv vs0, 0(r3)
; CHECK-BE-NEXT:    lxv v4, 0(r4)
; CHECK-BE-NEXT:    xxmtacc acc0
; CHECK-BE-NEXT:    lxv v5, 16(r4)
; CHECK-BE-NEXT:    pmxvf64gernn acc0, vsp36, v2, 0, 0
; CHECK-BE-NEXT:    xxmfacc acc0
; CHECK-BE-NEXT:    stxv vs1, 16(r7)
; CHECK-BE-NEXT:    stxv vs0, 0(r7)
; CHECK-BE-NEXT:    stxv vs3, 48(r7)
; CHECK-BE-NEXT:    stxv vs2, 32(r7)
; CHECK-BE-NEXT:    blr
;
; CHECK-WACC-LABEL: test42:
; CHECK-WACC:       # %bb.0: # %entry
; CHECK-WACC-NEXT:    lxv v5, 0(r3)
; CHECK-WACC-NEXT:    lxv v1, 32(r3)
; CHECK-WACC-NEXT:    lxv v4, 16(r3)
; CHECK-WACC-NEXT:    lxv v0, 48(r3)
; CHECK-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-WACC-NEXT:    lxv v4, 16(r4)
; CHECK-WACC-NEXT:    lxv v5, 0(r4)
; CHECK-WACC-NEXT:    pmxvf64gernn wacc0, vsp36, v2, 0, 0
; CHECK-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-WACC-NEXT:    stxv v4, 48(r7)
; CHECK-WACC-NEXT:    stxv v5, 32(r7)
; CHECK-WACC-NEXT:    stxv v2, 16(r7)
; CHECK-WACC-NEXT:    stxv v3, 0(r7)
; CHECK-WACC-NEXT:    blr
;
; CHECK-BE-WACC-LABEL: test42:
; CHECK-BE-WACC:       # %bb.0: # %entry
; CHECK-BE-WACC-NEXT:    lxv v5, 48(r3)
; CHECK-BE-WACC-NEXT:    lxv v1, 16(r3)
; CHECK-BE-WACC-NEXT:    lxv v4, 32(r3)
; CHECK-BE-WACC-NEXT:    lxv v0, 0(r3)
; CHECK-BE-WACC-NEXT:    dmxxinstdmr512 wacc0, vsp32, vsp36, 0
; CHECK-BE-WACC-NEXT:    lxv v4, 0(r4)
; CHECK-BE-WACC-NEXT:    lxv v5, 16(r4)
; CHECK-BE-WACC-NEXT:    pmxvf64gernn wacc0, vsp36, v2, 0, 0
; CHECK-BE-WACC-NEXT:    dmxxextfdmr512 vsp34, vsp36, wacc0, 0
; CHECK-BE-WACC-NEXT:    stxv v5, 48(r7)
; CHECK-BE-WACC-NEXT:    stxv v4, 32(r7)
; CHECK-BE-WACC-NEXT:    stxv v3, 16(r7)
; CHECK-BE-WACC-NEXT:    stxv v2, 0(r7)
; CHECK-BE-WACC-NEXT:    blr
entry:
  %0 = load <512 x i1>, ptr %vqp, align 64
  %1 = load <256 x i1>, ptr %vpp, align 32
  %2 = tail call <512 x i1> @llvm.ppc.mma.pmxvf64gernn(<512 x i1> %0, <256 x i1> %1, <16 x i8> %vc, i32 0, i32 0)
  store <512 x i1> %2, ptr %resp, align 64
  ret void
}


declare <512 x i1> @llvm.ppc.mma.pmxvf64gernn(<512 x i1>, <256 x i1>, <16 x i8>, i32, i32)
