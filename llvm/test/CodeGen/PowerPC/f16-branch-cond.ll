; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=powerpc64le-unknown-linux -mcpu=pwr8 -O0 < %s | \
; RUN:   FileCheck %s -check-prefix=P8
; RUN: llc -mtriple=powerpc64le-unknown-linux -mcpu=pwr9 -O0 < %s | \
; RUN:   FileCheck %s -check-prefix=P9

define i32 @test_choice1(half %a) #0 {
; P8-LABEL: test_choice1:
; P8:       # %bb.0:
; P8-NEXT:    mflr 0
; P8-NEXT:    stdu 1, -32(1)
; P8-NEXT:    std 0, 48(1)
; P8-NEXT:    bl __truncsfhf2
; P8-NEXT:    nop
; P8-NEXT:    clrldi 3, 3, 48
; P8-NEXT:    bl __extendhfsf2
; P8-NEXT:    nop
; P8-NEXT:    xxlxor 0, 0, 0
; P8-NEXT:    fcmpu 0, 1, 0
; P8-NEXT:    bgt 0, .LBB0_2
; P8-NEXT:    b .LBB0_1
; P8-NEXT:  .LBB0_1: # %if.true
; P8-NEXT:    li 3, 1
; P8-NEXT:    addi 1, 1, 32
; P8-NEXT:    ld 0, 16(1)
; P8-NEXT:    mtlr 0
; P8-NEXT:    blr
; P8-NEXT:  .LBB0_2: # %if.false
; P8-NEXT:    li 3, 0
; P8-NEXT:    addi 1, 1, 32
; P8-NEXT:    ld 0, 16(1)
; P8-NEXT:    mtlr 0
; P8-NEXT:    blr
;
; P9-LABEL: test_choice1:
; P9:       # %bb.0:
; P9-NEXT:    xscvdphp 0, 1
; P9-NEXT:    mffprwz 3, 0
; P9-NEXT:    clrlwi 3, 3, 16
; P9-NEXT:    mtfprwz 0, 3
; P9-NEXT:    xscvhpdp 0, 0
; P9-NEXT:    xxlxor 1, 1, 1
; P9-NEXT:    fcmpu 0, 0, 1
; P9-NEXT:    bgt 0, .LBB0_2
; P9-NEXT:    b .LBB0_1
; P9-NEXT:  .LBB0_1: # %if.true
; P9-NEXT:    li 3, 1
; P9-NEXT:    blr
; P9-NEXT:  .LBB0_2: # %if.false
; P9-NEXT:    li 3, 0
; P9-NEXT:    blr
  %cmp = fcmp ogt half %a, 0.0
  %not = icmp eq i1 %cmp, false
  br i1 %not, label %if.true, label %if.false

if.true:
  ret i32 1

if.false:
  ret i32 0
}

define i32 @test_choice2(half %a, half %b) #0 {
; P8-LABEL: test_choice2:
; P8:       # %bb.0:
; P8-NEXT:    mflr 0
; P8-NEXT:    stdu 1, -64(1)
; P8-NEXT:    std 0, 80(1)
; P8-NEXT:    li 3, 52
; P8-NEXT:    stxsspx 2, 1, 3 # 4-byte Folded Spill
; P8-NEXT:    fmr 0, 1
; P8-NEXT:    lxsspx 1, 1, 3 # 4-byte Folded Reload
; P8-NEXT:    li 3, 56
; P8-NEXT:    stxsspx 0, 1, 3 # 4-byte Folded Spill
; P8-NEXT:    bl __truncsfhf2
; P8-NEXT:    nop
; P8-NEXT:    clrldi 3, 3, 48
; P8-NEXT:    bl __extendhfsf2
; P8-NEXT:    nop
; P8-NEXT:    fmr 0, 1
; P8-NEXT:    li 3, 56
; P8-NEXT:    lxsspx 1, 1, 3 # 4-byte Folded Reload
; P8-NEXT:    stfs 0, 60(1) # 4-byte Folded Spill
; P8-NEXT:    bl __truncsfhf2
; P8-NEXT:    nop
; P8-NEXT:    clrldi 3, 3, 48
; P8-NEXT:    bl __extendhfsf2
; P8-NEXT:    nop
; P8-NEXT:    lfs 0, 60(1) # 4-byte Folded Reload
; P8-NEXT:    fcmpu 0, 1, 0
; P8-NEXT:    bne 0, .LBB1_2
; P8-NEXT:    b .LBB1_1
; P8-NEXT:  .LBB1_1: # %if.true
; P8-NEXT:    li 3, 1
; P8-NEXT:    addi 1, 1, 64
; P8-NEXT:    ld 0, 16(1)
; P8-NEXT:    mtlr 0
; P8-NEXT:    blr
; P8-NEXT:  .LBB1_2: # %if.false
; P8-NEXT:    li 3, 0
; P8-NEXT:    addi 1, 1, 64
; P8-NEXT:    ld 0, 16(1)
; P8-NEXT:    mtlr 0
; P8-NEXT:    blr
;
; P9-LABEL: test_choice2:
; P9:       # %bb.0:
; P9-NEXT:    fmr 0, 1
; P9-NEXT:    xscvdphp 1, 2
; P9-NEXT:    mffprwz 3, 1
; P9-NEXT:    clrlwi 3, 3, 16
; P9-NEXT:    mtfprwz 1, 3
; P9-NEXT:    xscvhpdp 1, 1
; P9-NEXT:    xscvdphp 0, 0
; P9-NEXT:    mffprwz 3, 0
; P9-NEXT:    clrlwi 3, 3, 16
; P9-NEXT:    mtfprwz 0, 3
; P9-NEXT:    xscvhpdp 0, 0
; P9-NEXT:    fcmpu 0, 0, 1
; P9-NEXT:    bne 0, .LBB1_2
; P9-NEXT:    b .LBB1_1
; P9-NEXT:  .LBB1_1: # %if.true
; P9-NEXT:    li 3, 1
; P9-NEXT:    blr
; P9-NEXT:  .LBB1_2: # %if.false
; P9-NEXT:    li 3, 0
; P9-NEXT:    blr
  %cmp = fcmp une half %a, %b
  %not = xor i1 %cmp, true
  br i1 %not, label %if.true, label %if.false

if.true:
  ret i32 1

if.false:
  ret i32 0
}

attributes #0 = { nounwind }
