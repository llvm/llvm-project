; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mcpu=pwr8 -ppc-asm-full-reg-names -verify-machineinstrs \
; RUN:   -mtriple=powerpc64le-unknown-unknown < %s | FileCheck %s \
; RUN:   --check-prefix=CHECK-P8
; RUN: llc -mcpu=pwr9 -ppc-asm-full-reg-names -verify-machineinstrs \
; RUN:   -mtriple=powerpc64le-unknown-unknown < %s | FileCheck %s \
; RUN:   --check-prefix=CHECK-P9

; Test oeq
define float @select_oeq_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_oeq_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    beq cr0, .LBB0_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB0_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_oeq_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    beq cr0, .LBB0_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB0_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp oeq float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define float @select_oeq_float_nsz(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_oeq_float_nsz:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    beq cr0, .LBB1_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB1_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_oeq_float_nsz:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    beq cr0, .LBB1_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB1_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nsz oeq float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_oeq_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_oeq_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xscmpudp cr0, f1, f2
; CHECK-P8-NEXT:    beq cr0, .LBB2_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB2_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_oeq_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xscmpudp cr0, f1, f2
; CHECK-P9-NEXT:    beq cr0, .LBB2_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB2_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp oeq double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

define float @select_fast_oeq_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_fast_oeq_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubsp f0, f2, f1
; CHECK-P8-NEXT:    xssubsp f1, f1, f2
; CHECK-P8-NEXT:    fsel f1, f1, f3, f4
; CHECK-P8-NEXT:    fsel f1, f0, f1, f4
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_oeq_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubsp f0, f2, f1
; CHECK-P9-NEXT:    xssubsp f1, f1, f2
; CHECK-P9-NEXT:    fsel f1, f1, f3, f4
; CHECK-P9-NEXT:    fsel f1, f0, f1, f4
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz oeq float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_fast_oeq_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_fast_oeq_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubdp f0, f1, f2
; CHECK-P8-NEXT:    fsel f1, f0, f3, f4
; CHECK-P8-NEXT:    xsnegdp f0, f0
; CHECK-P8-NEXT:    fsel f1, f0, f1, f4
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_oeq_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubdp f0, f1, f2
; CHECK-P9-NEXT:    fsel f1, f0, f3, f4
; CHECK-P9-NEXT:    xsnegdp f0, f0
; CHECK-P9-NEXT:    fsel f1, f0, f1, f4
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz oeq double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}


; Test one
define float @select_one_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_one_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, eq
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB5_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB5_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_one_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, eq
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB5_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB5_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp one float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define float @select_one_float_nsz(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_one_float_nsz:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, eq
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB6_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB6_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_one_float_nsz:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, eq
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB6_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB6_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nsz one float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_one_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_one_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, eq
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB7_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB7_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_one_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, eq
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB7_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB7_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp one double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

define float @select_fast_one_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_fast_one_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubsp f0, f2, f1
; CHECK-P8-NEXT:    xssubsp f1, f1, f2
; CHECK-P8-NEXT:    fsel f1, f1, f4, f3
; CHECK-P8-NEXT:    fsel f1, f0, f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_one_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubsp f0, f2, f1
; CHECK-P9-NEXT:    xssubsp f1, f1, f2
; CHECK-P9-NEXT:    fsel f1, f1, f4, f3
; CHECK-P9-NEXT:    fsel f1, f0, f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz one float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_fast_one_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_fast_one_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubdp f0, f1, f2
; CHECK-P8-NEXT:    fsel f1, f0, f4, f3
; CHECK-P8-NEXT:    xsnegdp f0, f0
; CHECK-P8-NEXT:    fsel f1, f0, f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_one_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubdp f0, f1, f2
; CHECK-P9-NEXT:    fsel f1, f0, f4, f3
; CHECK-P9-NEXT:    xsnegdp f0, f0
; CHECK-P9-NEXT:    fsel f1, f0, f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz one double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}


; Test oge
define float @select_oge_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_oge_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, lt
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB10_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB10_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_oge_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, lt
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB10_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB10_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp oge float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_oge_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_oge_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, lt
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB11_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB11_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_oge_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, lt
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB11_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB11_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp oge double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

define float @select_fast_oge_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_fast_oge_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubsp f0, f1, f2
; CHECK-P8-NEXT:    fsel f1, f0, f3, f4
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_oge_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubsp f0, f1, f2
; CHECK-P9-NEXT:    fsel f1, f0, f3, f4
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz oge float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_fast_oge_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_fast_oge_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubdp f0, f1, f2
; CHECK-P8-NEXT:    fsel f1, f0, f3, f4
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_oge_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubdp f0, f1, f2
; CHECK-P9-NEXT:    fsel f1, f0, f3, f4
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz oge double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}


; Test olt
define float @select_olt_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_olt_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    blt cr0, .LBB14_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB14_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_olt_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    blt cr0, .LBB14_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB14_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp olt float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_olt_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_olt_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xscmpudp cr0, f1, f2
; CHECK-P8-NEXT:    blt cr0, .LBB15_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB15_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_olt_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xscmpudp cr0, f1, f2
; CHECK-P9-NEXT:    blt cr0, .LBB15_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB15_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp olt double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

define float @select_fast_olt_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_fast_olt_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubsp f0, f1, f2
; CHECK-P8-NEXT:    fsel f1, f0, f4, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_olt_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubsp f0, f1, f2
; CHECK-P9-NEXT:    fsel f1, f0, f4, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ninf nnan nsz olt float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_fast_olt_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_fast_olt_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubdp f0, f1, f2
; CHECK-P8-NEXT:    fsel f1, f0, f4, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_olt_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubdp f0, f1, f2
; CHECK-P9-NEXT:    fsel f1, f0, f4, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz olt double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}


; Test ogt
define float @select_ogt_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_ogt_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    bgt cr0, .LBB18_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB18_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_ogt_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    bgt cr0, .LBB18_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB18_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ogt float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_ogt_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_ogt_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xscmpudp cr0, f1, f2
; CHECK-P8-NEXT:    bgt cr0, .LBB19_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB19_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_ogt_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xscmpudp cr0, f1, f2
; CHECK-P9-NEXT:    bgt cr0, .LBB19_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB19_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ogt double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

define float @select_fast_ogt_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_fast_ogt_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubsp f0, f2, f1
; CHECK-P8-NEXT:    fsel f1, f0, f4, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_ogt_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubsp f0, f2, f1
; CHECK-P9-NEXT:    fsel f1, f0, f4, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz ogt float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_fast_ogt_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_fast_ogt_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubdp f0, f2, f1
; CHECK-P8-NEXT:    fsel f1, f0, f4, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_ogt_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubdp f0, f2, f1
; CHECK-P9-NEXT:    fsel f1, f0, f4, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz ogt double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}


; Test ole
define float @select_ole_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_ole_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, gt
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB22_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB22_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_ole_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, gt
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB22_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB22_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ole float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_ole_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_ole_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f2
; CHECK-P8-NEXT:    crnor 4*cr5+lt, un, gt
; CHECK-P8-NEXT:    bc 12, 4*cr5+lt, .LBB23_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f3, f4
; CHECK-P8-NEXT:  .LBB23_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_ole_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f2
; CHECK-P9-NEXT:    crnor 4*cr5+lt, un, gt
; CHECK-P9-NEXT:    bc 12, 4*cr5+lt, .LBB23_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f3, f4
; CHECK-P9-NEXT:  .LBB23_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ole double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

define float @select_fast_ole_float(float %a, float %b, float %c, float %d) {
; CHECK-P8-LABEL: select_fast_ole_float:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubsp f0, f2, f1
; CHECK-P8-NEXT:    fsel f1, f0, f3, f4
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_ole_float:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubsp f0, f2, f1
; CHECK-P9-NEXT:    fsel f1, f0, f3, f4
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz ole float %a, %b
  %cond = select i1 %cmp, float %c, float %d
  ret float %cond
}

define double @select_fast_ole_double(double %a, double %b, double %c, double %d) {
; CHECK-P8-LABEL: select_fast_ole_double:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    xssubdp f0, f2, f1
; CHECK-P8-NEXT:    fsel f1, f0, f3, f4
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: select_fast_ole_double:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    xssubdp f0, f2, f1
; CHECK-P9-NEXT:    fsel f1, f0, f3, f4
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp nnan ninf nsz ole double %a, %b
  %cond = select i1 %cmp, double %c, double %d
  ret double %cond
}

; Test RHS is 1.000000e+00
define double @onecmp1(double %a, double %y, double %z) {
; CHECK-P8-LABEL: onecmp1:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    vspltisw v2, 1
; CHECK-P8-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P8-NEXT:    fcmpu cr0, f1, f0
; CHECK-P8-NEXT:    bc 12, lt, .LBB26_3
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fcmpu cr0, f1, f1
; CHECK-P8-NEXT:    bc 12, un, .LBB26_3
; CHECK-P8-NEXT:  # %bb.2: # %entry
; CHECK-P8-NEXT:    fmr f3, f2
; CHECK-P8-NEXT:  .LBB26_3: # %entry
; CHECK-P8-NEXT:    fmr f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: onecmp1:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    vspltisw v2, 1
; CHECK-P9-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P9-NEXT:    fcmpu cr0, f1, f0
; CHECK-P9-NEXT:    bc 12, lt, .LBB26_3
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fcmpu cr0, f1, f1
; CHECK-P9-NEXT:    bc 12, un, .LBB26_3
; CHECK-P9-NEXT:  # %bb.2: # %entry
; CHECK-P9-NEXT:    fmr f3, f2
; CHECK-P9-NEXT:  .LBB26_3: # %entry
; CHECK-P9-NEXT:    fmr f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ult double %a, 1.000000e+00
  %z.y = select i1 %cmp, double %z, double %y
  ret double %z.y
}

define double @onecmp1_fast(double %a, double %y, double %z) {
; CHECK-P8-LABEL: onecmp1_fast:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    vspltisw v2, -1
; CHECK-P8-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P8-NEXT:    xsadddp f0, f1, f0
; CHECK-P8-NEXT:    fsel f1, f0, f2, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: onecmp1_fast:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    vspltisw v2, -1
; CHECK-P9-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P9-NEXT:    xsadddp f0, f1, f0
; CHECK-P9-NEXT:    fsel f1, f0, f2, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp fast ult double %a, 1.000000e+00
  %z.y = select fast i1 %cmp, double %z, double %y
  ret double %z.y
}

define double @onecmp2(double %a, double %y, double %z) {
; CHECK-P8-LABEL: onecmp2:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    vspltisw v2, 1
; CHECK-P8-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P8-NEXT:    xscmpudp cr0, f1, f0
; CHECK-P8-NEXT:    bgt cr0, .LBB28_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f2, f3
; CHECK-P8-NEXT:  .LBB28_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f2
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: onecmp2:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    vspltisw v2, 1
; CHECK-P9-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P9-NEXT:    xscmpudp cr0, f1, f0
; CHECK-P9-NEXT:    bgt cr0, .LBB28_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f2, f3
; CHECK-P9-NEXT:  .LBB28_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f2
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp ogt double %a, 1.000000e+00
  %y.z = select i1 %cmp, double %y, double %z
  ret double %y.z
}

define double @onecmp2_fast(double %a, double %y, double %z) {
; CHECK-P8-LABEL: onecmp2_fast:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    vspltisw v2, 1
; CHECK-P8-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P8-NEXT:    xssubdp f0, f0, f1
; CHECK-P8-NEXT:    fsel f1, f0, f3, f2
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: onecmp2_fast:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    vspltisw v2, 1
; CHECK-P9-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P9-NEXT:    xssubdp f0, f0, f1
; CHECK-P9-NEXT:    fsel f1, f0, f3, f2
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp fast ogt double %a, 1.000000e+00
  %y.z = select fast i1 %cmp, double %y, double %z
  ret double %y.z
}

define double @onecmp3(double %a, double %y, double %z) {
; CHECK-P8-LABEL: onecmp3:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    vspltisw v2, 1
; CHECK-P8-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P8-NEXT:    xscmpudp cr0, f1, f0
; CHECK-P8-NEXT:    beq cr0, .LBB30_2
; CHECK-P8-NEXT:  # %bb.1: # %entry
; CHECK-P8-NEXT:    fmr f2, f3
; CHECK-P8-NEXT:  .LBB30_2: # %entry
; CHECK-P8-NEXT:    fmr f1, f2
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: onecmp3:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    vspltisw v2, 1
; CHECK-P9-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P9-NEXT:    xscmpudp cr0, f1, f0
; CHECK-P9-NEXT:    beq cr0, .LBB30_2
; CHECK-P9-NEXT:  # %bb.1: # %entry
; CHECK-P9-NEXT:    fmr f2, f3
; CHECK-P9-NEXT:  .LBB30_2: # %entry
; CHECK-P9-NEXT:    fmr f1, f2
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp oeq double %a, 1.000000e+00
  %y.z = select i1 %cmp, double %y, double %z
  ret double %y.z
}

define double @onecmp3_fast(double %a, double %y, double %z) {
; CHECK-P8-LABEL: onecmp3_fast:
; CHECK-P8:       # %bb.0: # %entry
; CHECK-P8-NEXT:    vspltisw v2, -1
; CHECK-P8-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P8-NEXT:    xsadddp f0, f1, f0
; CHECK-P8-NEXT:    fsel f1, f0, f2, f3
; CHECK-P8-NEXT:    xsnegdp f0, f0
; CHECK-P8-NEXT:    fsel f1, f0, f1, f3
; CHECK-P8-NEXT:    blr
;
; CHECK-P9-LABEL: onecmp3_fast:
; CHECK-P9:       # %bb.0: # %entry
; CHECK-P9-NEXT:    vspltisw v2, -1
; CHECK-P9-NEXT:    xvcvsxwdp vs0, vs34
; CHECK-P9-NEXT:    xsadddp f0, f1, f0
; CHECK-P9-NEXT:    fsel f1, f0, f2, f3
; CHECK-P9-NEXT:    xsnegdp f0, f0
; CHECK-P9-NEXT:    fsel f1, f0, f1, f3
; CHECK-P9-NEXT:    blr
entry:
  %cmp = fcmp fast oeq double %a, 1.000000e+00
  %y.z = select fast i1 %cmp, double %y, double %z
  ret double %y.z
}
