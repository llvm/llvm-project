; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-linux-gnu -mcpu=ppc64 < %s | FileCheck --check-prefixes=CHECK,PPC32 %s
; RUN: llc -verify-machineinstrs -mtriple=powerpc-unknown-linux-gnu -mcpu=ppc < %s | FileCheck --check-prefixes=CHECK,PPC64 %s

define i32 @fold_urem_positive_odd(i32 %x) {
; CHECK-LABEL: fold_urem_positive_odd:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, 22765
; CHECK-NEXT:    ori 4, 4, 8969
; CHECK-NEXT:    mulhwu 4, 3, 4
; CHECK-NEXT:    sub 5, 3, 4
; CHECK-NEXT:    srwi 5, 5, 1
; CHECK-NEXT:    add 4, 5, 4
; CHECK-NEXT:    srwi 4, 4, 6
; CHECK-NEXT:    mulli 4, 4, 95
; CHECK-NEXT:    sub 3, 3, 4
; CHECK-NEXT:    blr
  %1 = urem i32 %x, 95
  ret i32 %1
}


define i32 @fold_urem_positive_even(i32 %x) {
; CHECK-LABEL: fold_urem_positive_even:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, -2226
; CHECK-NEXT:    ori 4, 4, 16323
; CHECK-NEXT:    mulhwu 4, 3, 4
; CHECK-NEXT:    srwi 4, 4, 10
; CHECK-NEXT:    mulli 4, 4, 1060
; CHECK-NEXT:    sub 3, 3, 4
; CHECK-NEXT:    blr
  %1 = urem i32 %x, 1060
  ret i32 %1
}


; Don't fold if we can combine urem with udiv.
define i32 @combine_urem_udiv(i32 %x) {
; CHECK-LABEL: combine_urem_udiv:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lis 4, 22765
; CHECK-NEXT:    ori 4, 4, 8969
; CHECK-NEXT:    mulhwu 4, 3, 4
; CHECK-NEXT:    sub 5, 3, 4
; CHECK-NEXT:    srwi 5, 5, 1
; CHECK-NEXT:    add 4, 5, 4
; CHECK-NEXT:    srwi 4, 4, 6
; CHECK-NEXT:    mulli 5, 4, 95
; CHECK-NEXT:    sub 3, 3, 5
; CHECK-NEXT:    add 3, 3, 4
; CHECK-NEXT:    blr
  %1 = urem i32 %x, 95
  %2 = udiv i32 %x, 95
  %3 = add i32 %1, %2
  ret i32 %3
}

; Don't fold for divisors that are a power of two.
define i32 @dont_fold_urem_power_of_two(i32 %x) {
; CHECK-LABEL: dont_fold_urem_power_of_two:
; CHECK:       # %bb.0:
; CHECK-NEXT:    clrlwi 3, 3, 26
; CHECK-NEXT:    blr
  %1 = urem i32 %x, 64
  ret i32 %1
}

; Don't fold if the divisor is one.
define i32 @dont_fold_urem_one(i32 %x) {
; CHECK-LABEL: dont_fold_urem_one:
; CHECK:       # %bb.0:
; CHECK-NEXT:    li 3, 0
; CHECK-NEXT:    blr
  %1 = urem i32 %x, 1
  ret i32 %1
}

; Don't fold if the divisor is 2^32.
define i32 @dont_fold_urem_i32_umax(i32 %x) {
; CHECK-LABEL: dont_fold_urem_i32_umax:
; CHECK:       # %bb.0:
; CHECK-NEXT:    blr
  %1 = urem i32 %x, 4294967296
  ret i32 %1
}

define i64 @fold_urem_i64(i64 %x) {
; PPC32-LABEL: fold_urem_i64:
; PPC32:       # %bb.0:
; PPC32-NEXT:    lis 5, 21399
; PPC32-NEXT:    lis 8, -17388
; PPC32-NEXT:    rotlwi 11, 4, 31
; PPC32-NEXT:    ori 5, 5, 33436
; PPC32-NEXT:    srwi 6, 3, 1
; PPC32-NEXT:    ori 8, 8, 58849
; PPC32-NEXT:    rlwimi 11, 3, 31, 0, 0
; PPC32-NEXT:    mulhwu 7, 6, 5
; PPC32-NEXT:    mulhwu 9, 6, 8
; PPC32-NEXT:    mullw 10, 6, 8
; PPC32-NEXT:    mullw 6, 6, 5
; PPC32-NEXT:    mulhwu 12, 11, 5
; PPC32-NEXT:    mullw 5, 11, 5
; PPC32-NEXT:    mulhwu 8, 11, 8
; PPC32-NEXT:    addc 5, 8, 5
; PPC32-NEXT:    addze 11, 12
; PPC32-NEXT:    addc 5, 5, 10
; PPC32-NEXT:    adde 5, 11, 9
; PPC32-NEXT:    addze 7, 7
; PPC32-NEXT:    addc 5, 5, 6
; PPC32-NEXT:    addze 6, 7
; PPC32-NEXT:    rotlwi 5, 5, 28
; PPC32-NEXT:    li 8, 98
; PPC32-NEXT:    rlwimi 5, 6, 28, 0, 3
; PPC32-NEXT:    mulhwu 7, 5, 8
; PPC32-NEXT:    mulli 5, 5, 98
; PPC32-NEXT:    subc 4, 4, 5
; PPC32-NEXT:    li 5, 0
; PPC32-NEXT:    srwi 6, 6, 4
; PPC32-NEXT:    addze 5, 5
; PPC32-NEXT:    mulli 6, 6, 98
; PPC32-NEXT:    cntlzw 5, 5
; PPC32-NEXT:    rlwinm 5, 5, 27, 31, 31
; PPC32-NEXT:    add 6, 7, 6
; PPC32-NEXT:    sub 3, 3, 5
; PPC32-NEXT:    sub 3, 3, 6
; PPC32-NEXT:    blr
;
; PPC64-LABEL: fold_urem_i64:
; PPC64:       # %bb.0:
; PPC64-NEXT:    lis 5, 21399
; PPC64-NEXT:    lis 8, -17388
; PPC64-NEXT:    rotlwi 10, 4, 31
; PPC64-NEXT:    ori 5, 5, 33436
; PPC64-NEXT:    srwi 6, 3, 1
; PPC64-NEXT:    ori 8, 8, 58849
; PPC64-NEXT:    rlwimi 10, 3, 31, 0, 0
; PPC64-NEXT:    mulhwu 7, 6, 5
; PPC64-NEXT:    mulhwu 9, 6, 8
; PPC64-NEXT:    mulhwu 11, 10, 5
; PPC64-NEXT:    mullw 12, 6, 8
; PPC64-NEXT:    mullw 6, 6, 5
; PPC64-NEXT:    mullw 5, 10, 5
; PPC64-NEXT:    mulhwu 8, 10, 8
; PPC64-NEXT:    addc 5, 8, 5
; PPC64-NEXT:    addze 10, 11
; PPC64-NEXT:    addc 5, 5, 12
; PPC64-NEXT:    adde 5, 10, 9
; PPC64-NEXT:    addze 7, 7
; PPC64-NEXT:    addc 5, 5, 6
; PPC64-NEXT:    addze 6, 7
; PPC64-NEXT:    rotlwi 5, 5, 28
; PPC64-NEXT:    li 8, 98
; PPC64-NEXT:    rlwimi 5, 6, 28, 0, 3
; PPC64-NEXT:    mulhwu 7, 5, 8
; PPC64-NEXT:    srwi 6, 6, 4
; PPC64-NEXT:    mulli 5, 5, 98
; PPC64-NEXT:    subc 4, 4, 5
; PPC64-NEXT:    li 5, 0
; PPC64-NEXT:    addze 5, 5
; PPC64-NEXT:    cntlzw 5, 5
; PPC64-NEXT:    mulli 6, 6, 98
; PPC64-NEXT:    rlwinm 5, 5, 27, 31, 31
; PPC64-NEXT:    add 6, 7, 6
; PPC64-NEXT:    sub 3, 3, 5
; PPC64-NEXT:    sub 3, 3, 6
; PPC64-NEXT:    blr
  %1 = urem i64 %x, 98
  ret i64 %1
}
