; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=powerpc64le < %s | FileCheck %s

define void @test(ptr %p1, ptr %p2) nounwind {
; CHECK-LABEL: test:
; CHECK:       # %bb.0:
; CHECK-NEXT:    mflr 0
; CHECK-NEXT:    stdu 1, -224(1)
; CHECK-NEXT:    li 5, 48
; CHECK-NEXT:    std 0, 240(1)
; CHECK-NEXT:    std 27, 184(1) # 8-byte Folded Spill
; CHECK-NEXT:    li 27, 16
; CHECK-NEXT:    std 28, 192(1) # 8-byte Folded Spill
; CHECK-NEXT:    std 29, 200(1) # 8-byte Folded Spill
; CHECK-NEXT:    li 29, 32
; CHECK-NEXT:    li 28, 48
; CHECK-NEXT:    stxvd2x 56, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 64
; CHECK-NEXT:    std 30, 208(1) # 8-byte Folded Spill
; CHECK-NEXT:    mr 30, 4
; CHECK-NEXT:    stxvd2x 57, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 80
; CHECK-NEXT:    stxvd2x 58, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 96
; CHECK-NEXT:    lxvd2x 58, 0, 3
; CHECK-NEXT:    stxvd2x 59, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 112
; CHECK-NEXT:    lxvd2x 59, 3, 27
; CHECK-NEXT:    stxvd2x 60, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 128
; CHECK-NEXT:    stxvd2x 61, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 144
; CHECK-NEXT:    stxvd2x 62, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    li 5, 160
; CHECK-NEXT:    lxvd2x 62, 3, 28
; CHECK-NEXT:    stxvd2x 63, 1, 5 # 16-byte Folded Spill
; CHECK-NEXT:    lxvd2x 63, 3, 29
; CHECK-NEXT:    xxswapd 57, 58
; CHECK-NEXT:    xxswapd 1, 59
; CHECK-NEXT:    xxswapd 60, 62
; CHECK-NEXT:    xxswapd 61, 63
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 56, 1
; CHECK-NEXT:    xxlor 1, 59, 59
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 0, 1
; CHECK-NEXT:    xxlor 1, 60, 60
; CHECK-NEXT:    xxmrgld 59, 0, 56
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 60, 1
; CHECK-NEXT:    xxlor 1, 62, 62
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 0, 1
; CHECK-NEXT:    xxlor 1, 61, 61
; CHECK-NEXT:    xxmrgld 62, 0, 60
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 61, 1
; CHECK-NEXT:    xxlor 1, 63, 63
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 0, 1
; CHECK-NEXT:    xxlor 1, 57, 57
; CHECK-NEXT:    xxmrgld 63, 0, 61
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 61, 1
; CHECK-NEXT:    xxlor 1, 58, 58
; CHECK-NEXT:    bl roundeven
; CHECK-NEXT:    nop
; CHECK-NEXT:    li 3, 160
; CHECK-NEXT:    stxvd2x 63, 30, 29
; CHECK-NEXT:    # kill: def $f1 killed $f1 def $vsl1
; CHECK-NEXT:    xxswapd 0, 1
; CHECK-NEXT:    stxvd2x 62, 30, 28
; CHECK-NEXT:    stxvd2x 59, 30, 27
; CHECK-NEXT:    ld 29, 200(1) # 8-byte Folded Reload
; CHECK-NEXT:    ld 28, 192(1) # 8-byte Folded Reload
; CHECK-NEXT:    ld 27, 184(1) # 8-byte Folded Reload
; CHECK-NEXT:    lxvd2x 63, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 144
; CHECK-NEXT:    xxmrgld 0, 0, 61
; CHECK-NEXT:    lxvd2x 62, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 128
; CHECK-NEXT:    stxvd2x 0, 0, 30
; CHECK-NEXT:    ld 30, 208(1) # 8-byte Folded Reload
; CHECK-NEXT:    lxvd2x 61, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 112
; CHECK-NEXT:    lxvd2x 60, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 96
; CHECK-NEXT:    lxvd2x 59, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 80
; CHECK-NEXT:    lxvd2x 58, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 64
; CHECK-NEXT:    lxvd2x 57, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    li 3, 48
; CHECK-NEXT:    lxvd2x 56, 1, 3 # 16-byte Folded Reload
; CHECK-NEXT:    addi 1, 1, 224
; CHECK-NEXT:    ld 0, 16(1)
; CHECK-NEXT:    mtlr 0
; CHECK-NEXT:    blr
  %v = load <8 x double>, ptr %p1, align 64
  %res = call <8 x double> @llvm.roundeven.v8f64(<8 x double> %v)
  store <8 x double> %res, ptr %p2, align 64
  ret void
}

declare <8 x double> @llvm.roundeven.v8f64(<8 x double>)
