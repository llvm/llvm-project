; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=powerpc -o - | FileCheck %s

define void @foo(i32 %i) nounwind {
; CHECK-LABEL: foo:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mflr 0
; CHECK-NEXT:    stwu 1, -16(1)
; CHECK-NEXT:    cmplwi 3, 7
; CHECK-NEXT:    stw 0, 20(1)
; CHECK-NEXT:    beq 0, .LBB0_3
; CHECK-NEXT:  # %bb.1: # %entry
; CHECK-NEXT:    cmplwi 3, 5
; CHECK-NEXT:    bne 0, .LBB0_4
; CHECK-NEXT:  # %bb.2: # %if.then
; CHECK-NEXT:    bl bar
; CHECK-NEXT:    b .LBB0_4
; CHECK-NEXT:  .LBB0_3: # %if.then2
; CHECK-NEXT:    bl bar
; CHECK-NEXT:  .LBB0_4: # %if.end3
; CHECK-NEXT:    bl bar
; CHECK-NEXT:    lwz 0, 20(1)
; CHECK-NEXT:    addi 1, 1, 16
; CHECK-NEXT:    mtlr 0
; CHECK-NEXT:    blr
entry:
  switch i32 %i, label %if.end3 [
    i32 5, label %if.then
    i32 7, label %if.then2
  ]

if.then:
  tail call void @bar() #0
  br label %if.end3

if.then2:
  tail call void @bar() #0
  br label %if.end3

if.end3:
  tail call void @bar() #0
  ret void
}

define void @foo_tail(i1 %i) nounwind {
; CHECK-LABEL: foo_tail:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mflr 0
; CHECK-NEXT:    stwu 1, -16(1)
; CHECK-NEXT:    andi. 3, 3, 1
; CHECK-NEXT:    stw 0, 20(1)
; CHECK-NEXT:    bc 4, 1, .LBB1_2
; CHECK-NEXT:  # %bb.1: # %if.then
; CHECK-NEXT:    bl bar
; CHECK-NEXT:    b .LBB1_3
; CHECK-NEXT:  .LBB1_2: # %if.else
; CHECK-NEXT:    bl bar
; CHECK-NEXT:  .LBB1_3: # %if.end
; CHECK-NEXT:    lwz 0, 20(1)
; CHECK-NEXT:    addi 1, 1, 16
; CHECK-NEXT:    mtlr 0
; CHECK-NEXT:    blr
entry:
  br i1 %i, label %if.then, label %if.else

if.then:
  tail call void @bar() #0
  br label %if.end

if.else:
  tail call void @bar() #0
  br label %if.end

if.end:
  ret void
}

declare void @bar()

attributes #0 = { nomerge }
