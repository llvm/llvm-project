; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -verify-machineinstrs < %s -mcpu=pwr8 \
; RUN:  -mtriple=powerpc64-ibm-aix-xcoff | FileCheck %s
; RUN: llc -verify-machineinstrs < %s -mcpu=pwr8 \
; RUN:  -mtriple=powerpc-ibm-aix-xcoff | FileCheck %s

define signext i8 @loadAddressAConstrained(ptr %ptr) {
; CHECK-LABEL: loadAddressAConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    #APP
; CHECK-NEXT:    addi 3, 3, 0
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    lbz 3, 0(3)
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %0 = tail call ptr asm "addi $0,$1, 0", "=r,a"(ptr %ptr)
  %1 = load i8, ptr %0, align 1
  ret i8 %1
}

define signext i8 @xFormRegImmLoadAConstrained(ptr %ptr) {
; CHECK-LABEL: xFormRegImmLoadAConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    #APP
; CHECK-NEXT:    addi 3, 3, 10000
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    lbz 3, 0(3)
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %0 = tail call ptr asm "addi $0,$1,$2", "=r,a,I"(ptr %ptr, i32 10000)
  %1 = load i8, ptr %0, align 1
  ret i8 %1
}

define signext i8 @loadIndirectAddressZConstrained(ptr %ptr) {
; CHECK-LABEL: loadIndirectAddressZConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi 3, 3, 800
; CHECK-NEXT:    #APP
; CHECK-NEXT:    ld 3, 0(3)
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    lbz 3, 0(3)
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %arrayidx = getelementptr inbounds nuw i8, ptr %ptr, i64 800
  %0 = tail call ptr asm "ld $0,$1", "=r,*Z"(ptr nonnull elementtype(ptr) %arrayidx)
  %1 = load i8, ptr %0, align 1
  ret i8 %1
}

define signext i8 @loadIndirectAddressAConstrained(ptr %ptr, i32 zeroext %index) {
; CHECK-LABEL: loadIndirectAddressAConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    #APP
; CHECK-NEXT:    ldx 3, 3, 4
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    lbz 3, 0(3)
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %0 = tail call ptr asm "ldx $0,$1,$2", "=r,a,r"(ptr %ptr, i32 zeroext %index)
  %1 = load i8, ptr %0, align 1
  ret i8 %1
}

define signext i8 @dFormLoadZConstrained(ptr %ptr) {
; CHECK-LABEL: dFormLoadZConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi 3, 3, 8
; CHECK-NEXT:    #APP
; CHECK-NEXT:    lbz 3, 0(3)
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %arrayidx = getelementptr inbounds nuw i8, ptr %ptr, i64 8
  %0 = tail call i8 asm "lbz $0,$1", "=r,*Z"(ptr nonnull elementtype(i8) %arrayidx)
  ret i8 %0
}

define signext i8 @xFormRegRegLoadZyConstrained(ptr %ptr, i32 zeroext %index) {
; CHECK-LABEL: xFormRegRegLoadZyConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add 3, 3, 4
; CHECK-NEXT:    #APP
; CHECK-NEXT:    lbzx 3, 0, 3
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %idxprom = zext i32 %index to i64
  %arrayidx = getelementptr inbounds nuw i8, ptr %ptr, i64 %idxprom
  %0 = tail call i8 asm "lbzx $0, ${1:y}", "=r,*Z"(ptr elementtype(i8) %arrayidx)
  ret i8 %0
}

define signext i8 @xFormRegRegLoadAConstrained(ptr %ptr, i32 zeroext %index) {
; CHECK-LABEL: xFormRegRegLoadAConstrained:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    #APP
; CHECK-NEXT:    lbzx 3, 3, 4
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    extsb 3, 3
; CHECK-NEXT:    blr
entry:
  %0 = tail call i8 asm "lbzx $0,$1,$2", "=r,a,r"(ptr %ptr, i32 %index)
  ret i8 %0
}

define i8 @implicitRegImmToRegRegConversion(ptr readnone %ptr, i32 zeroext %index) {
; CHECK-LABEL: implicitRegImmToRegRegConversion:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add 3, 3, 4
; CHECK-NEXT:    #APP
; CHECK-NEXT:    lbzx 3, 0, 3
; CHECK-NEXT:    #NO_APP
; CHECK-NEXT:    blr
entry:
  %idx.ext = zext i32 %index to i64
  %add.ptr = getelementptr inbounds nuw i8, ptr %ptr, i64 %idx.ext
  %0 = tail call i8 asm "lbzx $0, ${1:y}", "=r,a"(ptr %add.ptr)
  ret i8 %0
}

