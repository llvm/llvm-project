; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple powerpc64-unknown-linux-gnu -verify-machineinstrs < %s | FileCheck %s -check-prefix=LINUX
; RUN: llc -mtriple powerpc64-ibm-aix-xcoff -verify-machineinstrs -vec-extabi < %s | FileCheck %s -check-prefix=AIX

define <16 x i8> @test_l_v16i8(ptr %p) #0 {
; LINUX-LABEL: test_l_v16i8:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 15
; LINUX-NEXT:    lvsl 3, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    lvx 4, 0, 3
; LINUX-NEXT:    vperm 2, 4, 2, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v16i8:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <16 x i8>, ptr %p, align 1
  ret <16 x i8> %r

}

define <32 x i8> @test_l_v32i8(ptr %p) #0 {
; LINUX-LABEL: test_l_v32i8:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 31
; LINUX-NEXT:    lvsl 4, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lvx 5, 3, 4
; LINUX-NEXT:    vperm 3, 5, 2, 4
; LINUX-NEXT:    lvx 2, 0, 3
; LINUX-NEXT:    vperm 2, 2, 5, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v32i8:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <32 x i8>, ptr %p, align 1
  ret <32 x i8> %r

}

define <8 x i16> @test_l_v8i16(ptr %p) #0 {
; LINUX-LABEL: test_l_v8i16:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 15
; LINUX-NEXT:    lvsl 3, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    lvx 4, 0, 3
; LINUX-NEXT:    vperm 2, 4, 2, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v8i16:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <8 x i16>, ptr %p, align 2
  ret <8 x i16> %r

}

define <16 x i16> @test_l_v16i16(ptr %p) #0 {
; LINUX-LABEL: test_l_v16i16:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 31
; LINUX-NEXT:    lvsl 4, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lvx 5, 3, 4
; LINUX-NEXT:    vperm 3, 5, 2, 4
; LINUX-NEXT:    lvx 2, 0, 3
; LINUX-NEXT:    vperm 2, 2, 5, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v16i16:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <16 x i16>, ptr %p, align 2
  ret <16 x i16> %r

}

define <4 x i32> @test_l_v4i32(ptr %p) #0 {
; LINUX-LABEL: test_l_v4i32:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 15
; LINUX-NEXT:    lvsl 3, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    lvx 4, 0, 3
; LINUX-NEXT:    vperm 2, 4, 2, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v4i32:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <4 x i32>, ptr %p, align 4
  ret <4 x i32> %r

}

define <8 x i32> @test_l_v8i32(ptr %p) #0 {
; LINUX-LABEL: test_l_v8i32:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 31
; LINUX-NEXT:    lvsl 4, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lvx 5, 3, 4
; LINUX-NEXT:    vperm 3, 5, 2, 4
; LINUX-NEXT:    lvx 2, 0, 3
; LINUX-NEXT:    vperm 2, 2, 5, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v8i32:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <8 x i32>, ptr %p, align 4
  ret <8 x i32> %r

}

define <2 x i64> @test_l_v2i64(ptr %p) #0 {
; LINUX-LABEL: test_l_v2i64:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v2i64:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <2 x i64>, ptr %p, align 8
  ret <2 x i64> %r

}

define <4 x i64> @test_l_v4i64(ptr %p) #0 {
; LINUX-LABEL: test_l_v4i64:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    lxvd2x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v4i64:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    lxvd2x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <4 x i64>, ptr %p, align 8
  ret <4 x i64> %r

}

define <4 x float> @test_l_v4float(ptr %p) #0 {
; LINUX-LABEL: test_l_v4float:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 15
; LINUX-NEXT:    lvsl 3, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    lvx 4, 0, 3
; LINUX-NEXT:    vperm 2, 4, 2, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v4float:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <4 x float>, ptr %p, align 4
  ret <4 x float> %r

}

define <8 x float> @test_l_v8float(ptr %p) #0 {
; LINUX-LABEL: test_l_v8float:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 31
; LINUX-NEXT:    lvsl 4, 0, 3
; LINUX-NEXT:    lvx 2, 3, 4
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lvx 5, 3, 4
; LINUX-NEXT:    vperm 3, 5, 2, 4
; LINUX-NEXT:    lvx 2, 0, 3
; LINUX-NEXT:    vperm 2, 2, 5, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v8float:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <8 x float>, ptr %p, align 4
  ret <8 x float> %r

}

define <2 x double> @test_l_v2double(ptr %p) #0 {
; LINUX-LABEL: test_l_v2double:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v2double:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <2 x double>, ptr %p, align 8
  ret <2 x double> %r

}

define <4 x double> @test_l_v4double(ptr %p) #0 {
; LINUX-LABEL: test_l_v4double:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    lxvd2x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_v4double:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    lxvd2x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <4 x double>, ptr %p, align 8
  ret <4 x double> %r

}

define <16 x i8> @test_l_p8v16i8(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v16i8:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v16i8:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <16 x i8>, ptr %p, align 1
  ret <16 x i8> %r

}

define <32 x i8> @test_l_p8v32i8(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v32i8:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    lxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v32i8:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <32 x i8>, ptr %p, align 1
  ret <32 x i8> %r

}

define <8 x i16> @test_l_p8v8i16(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v8i16:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v8i16:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <8 x i16>, ptr %p, align 2
  ret <8 x i16> %r

}

define <16 x i16> @test_l_p8v16i16(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v16i16:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    lxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v16i16:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <16 x i16>, ptr %p, align 2
  ret <16 x i16> %r

}

define <4 x i32> @test_l_p8v4i32(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v4i32:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v4i32:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <4 x i32>, ptr %p, align 4
  ret <4 x i32> %r

}

define <8 x i32> @test_l_p8v8i32(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v8i32:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    lxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v8i32:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <8 x i32>, ptr %p, align 4
  ret <8 x i32> %r

}

define <2 x i64> @test_l_p8v2i64(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v2i64:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v2i64:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <2 x i64>, ptr %p, align 8
  ret <2 x i64> %r

}

define <4 x i64> @test_l_p8v4i64(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v4i64:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    lxvd2x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v4i64:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    lxvd2x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <4 x i64>, ptr %p, align 8
  ret <4 x i64> %r

}

define <4 x float> @test_l_p8v4float(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v4float:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v4float:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <4 x float>, ptr %p, align 4
  ret <4 x float> %r

}

define <8 x float> @test_l_p8v8float(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v8float:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvw4x 34, 0, 3
; LINUX-NEXT:    lxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v8float:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvw4x 34, 0, 3
; AIX-NEXT:    lxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <8 x float>, ptr %p, align 4
  ret <8 x float> %r

}

define <2 x double> @test_l_p8v2double(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v2double:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v2double:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    blr
entry:
  %r = load <2 x double>, ptr %p, align 8
  ret <2 x double> %r

}

define <4 x double> @test_l_p8v4double(ptr %p) #2 {
; LINUX-LABEL: test_l_p8v4double:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    lxvd2x 34, 0, 3
; LINUX-NEXT:    lxvd2x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_l_p8v4double:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    lxvd2x 34, 0, 3
; AIX-NEXT:    lxvd2x 35, 3, 4
; AIX-NEXT:    blr
entry:
  %r = load <4 x double>, ptr %p, align 8
  ret <4 x double> %r

}

define void @test_s_v16i8(ptr %p, <16 x i8> %v) #0 {
; LINUX-LABEL: test_s_v16i8:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v16i8:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  store <16 x i8> %v, ptr %p, align 1
  ret void

}

define void @test_s_v32i8(ptr %p, <32 x i8> %v) #0 {
; LINUX-LABEL: test_s_v32i8:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    stxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v32i8:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    stxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  store <32 x i8> %v, ptr %p, align 1
  ret void

}

define void @test_s_v8i16(ptr %p, <8 x i16> %v) #0 {
; LINUX-LABEL: test_s_v8i16:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v8i16:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  store <8 x i16> %v, ptr %p, align 2
  ret void

}

define void @test_s_v16i16(ptr %p, <16 x i16> %v) #0 {
; LINUX-LABEL: test_s_v16i16:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    stxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v16i16:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    stxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  store <16 x i16> %v, ptr %p, align 2
  ret void

}

define void @test_s_v4i32(ptr %p, <4 x i32> %v) #0 {
; LINUX-LABEL: test_s_v4i32:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v4i32:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  store <4 x i32> %v, ptr %p, align 4
  ret void

}

define void @test_s_v8i32(ptr %p, <8 x i32> %v) #0 {
; LINUX-LABEL: test_s_v8i32:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    stxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v8i32:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    stxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  store <8 x i32> %v, ptr %p, align 4
  ret void

}

define void @test_s_v2i64(ptr %p, <2 x i64> %v) #0 {
; LINUX-LABEL: test_s_v2i64:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    stxvd2x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v2i64:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    stxvd2x 34, 0, 3
; AIX-NEXT:    blr
entry:
  store <2 x i64> %v, ptr %p, align 8
  ret void

}

define void @test_s_v4i64(ptr %p, <4 x i64> %v) #0 {
; LINUX-LABEL: test_s_v4i64:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    stxvd2x 34, 0, 3
; LINUX-NEXT:    stxvd2x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v4i64:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    stxvd2x 34, 0, 3
; AIX-NEXT:    stxvd2x 35, 3, 4
; AIX-NEXT:    blr
entry:
  store <4 x i64> %v, ptr %p, align 8
  ret void

}

define void @test_s_v4float(ptr %p, <4 x float> %v) #0 {
; LINUX-LABEL: test_s_v4float:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v4float:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    blr
entry:
  store <4 x float> %v, ptr %p, align 4
  ret void

}

define void @test_s_v8float(ptr %p, <8 x float> %v) #0 {
; LINUX-LABEL: test_s_v8float:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    stxvw4x 34, 0, 3
; LINUX-NEXT:    stxvw4x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v8float:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    stxvw4x 34, 0, 3
; AIX-NEXT:    stxvw4x 35, 3, 4
; AIX-NEXT:    blr
entry:
  store <8 x float> %v, ptr %p, align 4
  ret void

}

define void @test_s_v2double(ptr %p, <2 x double> %v) #0 {
; LINUX-LABEL: test_s_v2double:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    stxvd2x 34, 0, 3
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v2double:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    stxvd2x 34, 0, 3
; AIX-NEXT:    blr
entry:
  store <2 x double> %v, ptr %p, align 8
  ret void

}

define void @test_s_v4double(ptr %p, <4 x double> %v) #0 {
; LINUX-LABEL: test_s_v4double:
; LINUX:       # %bb.0: # %entry
; LINUX-NEXT:    li 4, 16
; LINUX-NEXT:    stxvd2x 34, 0, 3
; LINUX-NEXT:    stxvd2x 35, 3, 4
; LINUX-NEXT:    blr
;
; AIX-LABEL: test_s_v4double:
; AIX:       # %bb.0: # %entry
; AIX-NEXT:    li 4, 16
; AIX-NEXT:    stxvd2x 34, 0, 3
; AIX-NEXT:    stxvd2x 35, 3, 4
; AIX-NEXT:    blr
entry:
  store <4 x double> %v, ptr %p, align 8
  ret void

}

attributes #0 = { nounwind "target-cpu"="pwr7" }
attributes #2 = { nounwind "target-cpu"="pwr8" }

