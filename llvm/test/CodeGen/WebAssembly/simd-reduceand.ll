; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -verify-machineinstrs -disable-wasm-fallthrough-return-opt -wasm-disable-explicit-locals -wasm-keep-registers -mattr=+simd128 | FileCheck %s
target triple = "wasm64"

define i1 @reduce_and_to_all_true_16i8(<16 x i8> %0) {
; CHECK-LABEL: reduce_and_to_all_true_16i8:
; CHECK:         .functype reduce_and_to_all_true_16i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i8x16.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %2 = icmp ne <16 x i8> %0, zeroinitializer
  %3 = sext <16 x i1> %2 to <16 x i8>
  %4 = bitcast <16 x i8> %3 to <4 x i32>
  %5 = tail call i32 @llvm.vector.reduce.and.v4i32(<4 x i32> %4)
  %6 = icmp ne i32 %5, 0
  ret i1 %6
}


define i1 @reduce_and_to_all_true_4i32(<4 x i32> %0) {
; CHECK-LABEL: reduce_and_to_all_true_4i32:
; CHECK:         .functype reduce_and_to_all_true_4i32 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32x4.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %2 = icmp ne <4 x i32> %0, zeroinitializer
  %3 = sext <4 x i1> %2 to <4 x i32>
  %4 = tail call i32 @llvm.vector.reduce.and.v4i32(<4 x i32> %3)
  %5 = icmp ne i32 %4, 0
  ret i1 %5
}



define i1 @reduce_and_to_all_true_2i64(<2 x i64> %0) {
; CHECK-LABEL: reduce_and_to_all_true_2i64:
; CHECK:         .functype reduce_and_to_all_true_2i64 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32x4.all_true $push0=, $0
; CHECK-NEXT:    return $pop0
  %2 = bitcast <2 x i64> %0 to <4 x i32>
  %3 = icmp ne <4 x i32> %2, zeroinitializer
  %4 = sext <4 x i1> %3 to <4 x i32>
  %5 = tail call i32 @llvm.vector.reduce.and.v4i32(<4 x i32> %4)
  %6 = icmp ne i32 %5, 0
  ret i1 %6
}
