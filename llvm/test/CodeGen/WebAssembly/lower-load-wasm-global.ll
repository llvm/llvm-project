; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s

; Test various loads from WASM (address space 1) globals lower as intended

target triple = "wasm32-unknown-unknown"


@globalI8 = local_unnamed_addr addrspace(1) global i8 undef
@globalI32 = local_unnamed_addr addrspace(1) global i32 undef
@globalI64 = local_unnamed_addr addrspace(1) global i64 undef


define i32 @zext_i8_i32() {
; CHECK-LABEL: zext_i8_i32:
; CHECK:         .functype zext_i8_i32 () -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i32.load8_u globalI32
; CHECK-NEXT:    # fallthrough-return
  %v = load i8, ptr addrspace(1) @globalI32
  %e = zext i8 %v to i32
  ret i32 %e
}

define i32 @sext_i8_i32() {
; CHECK-LABEL: sext_i8_i32:
; CHECK:         .functype sext_i8_i32 () -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i32.load8_s globalI32
; CHECK-NEXT:    # fallthrough-return
  %v = load i8, ptr addrspace(1) @globalI32
  %e = sext i8 %v to i32
  ret i32 %e
}

define i32 @zext_i16_i32() {
; CHECK-LABEL: zext_i16_i32:
; CHECK:         .functype zext_i16_i32 () -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i32.load16_u globalI32
; CHECK-NEXT:    # fallthrough-return
  %v = load i16, ptr addrspace(1) @globalI32
  %e = zext i16 %v to i32
  ret i32 %e
}

define i32 @sext_i16_i32() {
; CHECK-LABEL: sext_i16_i32:
; CHECK:         .functype sext_i16_i32 () -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i32.load16_s globalI32
; CHECK-NEXT:    # fallthrough-return
  %v = load i16, ptr addrspace(1) @globalI32
  %e = sext i16 %v to i32
  ret i32 %e
}


define i64 @zext_i8_i64() {
; CHECK-LABEL: zext_i8_i64:
; CHECK:         .functype zext_i8_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load8_u globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i8, ptr addrspace(1) @globalI64
  %e = zext i8 %v to i64
  ret i64 %e
}

define i64 @sext_i8_i64() {
; CHECK-LABEL: sext_i8_i64:
; CHECK:         .functype sext_i8_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load8_s globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i8, ptr addrspace(1) @globalI64
  %e = sext i8 %v to i64
  ret i64 %e
}

define i64 @zext_i16_i64() {
; CHECK-LABEL: zext_i16_i64:
; CHECK:         .functype zext_i16_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load16_u globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i16, ptr addrspace(1) @globalI64
  %e = zext i16 %v to i64
  ret i64 %e
}

define i64 @sext_i16_i64() {
; CHECK-LABEL: sext_i16_i64:
; CHECK:         .functype sext_i16_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load16_s globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i16, ptr addrspace(1) @globalI64
  %e = sext i16 %v to i64
  ret i64 %e
}

define i64 @zext_i32_i64() {
; CHECK-LABEL: zext_i32_i64:
; CHECK:         .functype zext_i32_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load32_u globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i32, ptr addrspace(1) @globalI64
  %e = zext i32 %v to i64
  ret i64 %e
}

define i64 @sext_i32_i64() {
; CHECK-LABEL: sext_i32_i64:
; CHECK:         .functype sext_i32_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load32_s globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i32, ptr addrspace(1) @globalI64
  %e = sext i32 %v to i64
  ret i64 %e
}


define i64 @load_i64_from_i32() {
; CHECK-LABEL: load_i64_from_i32:
; CHECK:         .functype load_i64_from_i32 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    global.get globalI32
; CHECK-NEXT:    # fallthrough-return
  %v = load i64, ptr addrspace(1) @globalI32
  ret i64 %v
}

define i32 @load_i32_from_i64() {
; CHECK-LABEL: load_i32_from_i64:
; CHECK:         .functype load_i32_from_i64 () -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    global.get globalI64
; CHECK-NEXT:    # fallthrough-return
  %v = load i32, ptr addrspace(1) @globalI64
  ret i32 %v
}

define i8 @load_i8() {
; CHECK-LABEL: load_i8:
; CHECK:         .functype load_i8 () -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i32.load8_u globalI8
; CHECK-NEXT:    # fallthrough-return
  %v = load i8, ptr addrspace(1) @globalI8
  ret i8 %v
}

define i64 @load_i16_from_i8_zext_to_i64() {
; CHECK-LABEL: load_i16_from_i8_zext_to_i64:
; CHECK:         .functype load_i16_from_i8_zext_to_i64 () -> (i64)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    i64.load16_u globalI8
; CHECK-NEXT:    # fallthrough-return
  %v = load i16, ptr addrspace(1) @globalI8
  %e = zext i16 %v to i64
  ret i64 %e
}
