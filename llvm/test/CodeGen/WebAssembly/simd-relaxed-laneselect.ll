; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py

; RUN: llc < %s -verify-machineinstrs -wasm-disable-explicit-locals -wasm-keep-registers -mattr=+simd128,+relaxed-simd | FileCheck %s --check-prefix=RELAXED
; RUN: llc < %s -verify-machineinstrs -wasm-disable-explicit-locals -wasm-keep-registers -mattr=+simd128               | FileCheck %s --check-prefix=SIMD

; Test that bitselect intrinsic lowers to relaxed_laneselect when relaxed-simd is enabled

target triple = "wasm32-unknown-unknown"

define <16 x i8> @bitselect_to_laneselect_v16i8(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c) {
; RELAXED-LABEL: bitselect_to_laneselect_v16i8:
; RELAXED:         .functype bitselect_to_laneselect_v16i8 (v128, v128, v128) -> (v128)
; RELAXED-NEXT:  # %bb.0:
; RELAXED-NEXT:    v128.bitselect $push0=, $0, $1, $2
; RELAXED-NEXT:    # fallthrough-return
;
; SIMD-LABEL: bitselect_to_laneselect_v16i8:
; SIMD:         .functype bitselect_to_laneselect_v16i8 (v128, v128, v128) -> (v128)
; SIMD-NEXT:  # %bb.0:
; SIMD-NEXT:    v128.bitselect $push0=, $0, $1, $2
; SIMD-NEXT:    # fallthrough-return
  %res = call <16 x i8> @llvm.wasm.bitselect.v16i8(<16 x i8> %a, <16 x i8> %b, <16 x i8> %c)
  ret <16 x i8> %res
}

define <8 x i16> @bitselect_to_laneselect_v8i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c) {
; RELAXED-LABEL: bitselect_to_laneselect_v8i16:
; RELAXED:         .functype bitselect_to_laneselect_v8i16 (v128, v128, v128) -> (v128)
; RELAXED-NEXT:  # %bb.0:
; RELAXED-NEXT:    v128.bitselect $push0=, $0, $1, $2
; RELAXED-NEXT:    # fallthrough-return
;
; SIMD-LABEL: bitselect_to_laneselect_v8i16:
; SIMD:         .functype bitselect_to_laneselect_v8i16 (v128, v128, v128) -> (v128)
; SIMD-NEXT:  # %bb.0:
; SIMD-NEXT:    v128.bitselect $push0=, $0, $1, $2
; SIMD-NEXT:    # fallthrough-return
  %res = call <8 x i16> @llvm.wasm.bitselect.v8i16(<8 x i16> %a, <8 x i16> %b, <8 x i16> %c)
  ret <8 x i16> %res
}

define <4 x i32> @bitselect_to_laneselect_v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c) {
; RELAXED-LABEL: bitselect_to_laneselect_v4i32:
; RELAXED:         .functype bitselect_to_laneselect_v4i32 (v128, v128, v128) -> (v128)
; RELAXED-NEXT:  # %bb.0:
; RELAXED-NEXT:    v128.bitselect $push0=, $0, $1, $2
; RELAXED-NEXT:    # fallthrough-return
;
; SIMD-LABEL: bitselect_to_laneselect_v4i32:
; SIMD:         .functype bitselect_to_laneselect_v4i32 (v128, v128, v128) -> (v128)
; SIMD-NEXT:  # %bb.0:
; SIMD-NEXT:    v128.bitselect $push0=, $0, $1, $2
; SIMD-NEXT:    # fallthrough-return
  %res = call <4 x i32> @llvm.wasm.bitselect.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c)
  ret <4 x i32> %res
}

define <2 x i64> @bitselect_to_laneselect_v2i64(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c) {
; RELAXED-LABEL: bitselect_to_laneselect_v2i64:
; RELAXED:         .functype bitselect_to_laneselect_v2i64 (v128, v128, v128) -> (v128)
; RELAXED-NEXT:  # %bb.0:
; RELAXED-NEXT:    v128.bitselect $push0=, $0, $1, $2
; RELAXED-NEXT:    # fallthrough-return
;
; SIMD-LABEL: bitselect_to_laneselect_v2i64:
; SIMD:         .functype bitselect_to_laneselect_v2i64 (v128, v128, v128) -> (v128)
; SIMD-NEXT:  # %bb.0:
; SIMD-NEXT:    v128.bitselect $push0=, $0, $1, $2
; SIMD-NEXT:    # fallthrough-return
  %res = call <2 x i64> @llvm.wasm.bitselect.v2i64(<2 x i64> %a, <2 x i64> %b, <2 x i64> %c)
  ret <2 x i64> %res
}



declare <16 x i8> @llvm.wasm.bitselect.v16i8(<16 x i8>, <16 x i8>, <16 x i8>)
declare <8 x i16> @llvm.wasm.bitselect.v8i16(<8 x i16>, <8 x i16>, <8 x i16>)
declare <4 x i32> @llvm.wasm.bitselect.v4i32(<4 x i32>, <4 x i32>, <4 x i32>)
declare <2 x i64> @llvm.wasm.bitselect.v2i64(<2 x i64>, <2 x i64>, <2 x i64>)
