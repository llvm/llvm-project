; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6

; RUN: llc < %s -mtriple=wasm32-unknown-unknown -mattr=+simd128,+relaxed-simd | FileCheck %s

; Test that fmaxnum and fmaximumnum get transformed to relaxed_max

target triple = "wasm32"

define <4 x float> @test_maxnum_f32x4(<4 x float> %a, <4 x float> %b) {
; CHECK-LABEL: test_maxnum_f32x4:
; CHECK:         .functype test_maxnum_f32x4 (v128, v128) -> (v128)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 1
; CHECK-NEXT:    f32x4.relaxed_max
; CHECK-NEXT:    # fallthrough-return
  %result = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %result
}

define <4 x float> @test_maximumnum_f32x4(<4 x float> %a, <4 x float> %b) {
; CHECK-LABEL: test_maximumnum_f32x4:
; CHECK:         .functype test_maximumnum_f32x4 (v128, v128) -> (v128)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 1
; CHECK-NEXT:    f32x4.relaxed_max
; CHECK-NEXT:    # fallthrough-return
  %result = call <4 x float> @llvm.maximumnum.v4f32(<4 x float> %a, <4 x float> %b)
  ret <4 x float> %result
}

define <2 x double> @test_maxnum_f64x2(<2 x double> %a, <2 x double> %b) {
; CHECK-LABEL: test_maxnum_f64x2:
; CHECK:         .functype test_maxnum_f64x2 (v128, v128) -> (v128)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 1
; CHECK-NEXT:    f64x2.relaxed_max
; CHECK-NEXT:    # fallthrough-return
  %result = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %result
}

define <2 x double> @test_minimumnum_f64x2(<2 x double> %a, <2 x double> %b) {
; CHECK-LABEL: test_minimumnum_f64x2:
; CHECK:         .functype test_minimumnum_f64x2 (v128, v128) -> (v128)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 1
; CHECK-NEXT:    f64x2.relaxed_max
; CHECK-NEXT:    # fallthrough-return
  %result = call <2 x double> @llvm.maximumnum.v2f64(<2 x double> %a, <2 x double> %b)
  ret <2 x double> %result
}

declare <4 x float> @llvm.maxnum.v4f32(<4 x float>, <4 x float>)
declare <4 x float> @llvm.maximumnum.v4f32(<4 x float>, <4 x float>)
declare <2 x double> @llvm.maxnum.v2f64(<2 x double>, <2 x double>)
declare <2 x double> @llvm.maximumnum.v2f64(<2 x double>, <2 x double>)
