; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=wasm32 | FileCheck %s

define i16 @fcvt_h_s_sat(float %a) {
; CHECK-LABEL: fcvt_h_s_sat:
; CHECK:         .functype fcvt_h_s_sat (f32) -> (i32)
; CHECK-NEXT:  # %bb.0: # %start
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.const -0x1p15
; CHECK-NEXT:    f32.max
; CHECK-NEXT:    f32.const 0x1.fffcp14
; CHECK-NEXT:    f32.min
; CHECK-NEXT:    i32.trunc_sat_f32_s
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.ne
; CHECK-NEXT:    i32.select
; CHECK-NEXT:    # fallthrough-return
start:
  %0 = tail call i16 @llvm.fptosi.sat.i16.f32(float %a)
  ret i16 %0
}

define i16 @fcvt_hu_s_sat(float %a) {
; CHECK-LABEL: fcvt_hu_s_sat:
; CHECK:         .functype fcvt_hu_s_sat (f32) -> (i32)
; CHECK-NEXT:  # %bb.0: # %start
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.const 0x0p0
; CHECK-NEXT:    f32.max
; CHECK-NEXT:    f32.const 0x1.fffep15
; CHECK-NEXT:    f32.min
; CHECK-NEXT:    i32.trunc_sat_f32_u
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.ne
; CHECK-NEXT:    i32.select
; CHECK-NEXT:    # fallthrough-return
start:
  %0 = tail call i16 @llvm.fptoui.sat.i16.f32(float %a)
  ret i16 %0
}

define i16 @fcvt_h_s_sat_nnan(float nofpclass(nan) %a) {
; CHECK-LABEL: fcvt_h_s_sat_nnan:
; CHECK:         .functype fcvt_h_s_sat_nnan (f32) -> (i32)
; CHECK-NEXT:  # %bb.0: # %start
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.const -0x1p15
; CHECK-NEXT:    f32.max
; CHECK-NEXT:    f32.const 0x1.fffcp14
; CHECK-NEXT:    f32.min
; CHECK-NEXT:    i32.trunc_sat_f32_s
; CHECK-NEXT:    # fallthrough-return
start:
  %0 = tail call i16 @llvm.fptosi.sat.i16.f32(float %a)
  ret i16 %0
}

define i16 @fcvt_hu_s_sat_nnan(float nofpclass(nan) %a) {
; CHECK-LABEL: fcvt_hu_s_sat_nnan:
; CHECK:         .functype fcvt_hu_s_sat_nnan (f32) -> (i32)
; CHECK-NEXT:  # %bb.0: # %start
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.const 0x0p0
; CHECK-NEXT:    f32.max
; CHECK-NEXT:    f32.const 0x1.fffep15
; CHECK-NEXT:    f32.min
; CHECK-NEXT:    i32.trunc_sat_f32_u
; CHECK-NEXT:    # fallthrough-return
start:
  %0 = tail call i16 @llvm.fptoui.sat.i16.f32(float %a)
  ret i16 %0
}

define i16 @fcvt_h_s_sat_nsnan(float nofpclass(snan) %a) {
; CHECK-LABEL: fcvt_h_s_sat_nsnan:
; CHECK:         .functype fcvt_h_s_sat_nsnan (f32) -> (i32)
; CHECK-NEXT:  # %bb.0: # %start
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.const -0x1p15
; CHECK-NEXT:    f32.max
; CHECK-NEXT:    f32.const 0x1.fffcp14
; CHECK-NEXT:    f32.min
; CHECK-NEXT:    i32.trunc_sat_f32_s
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.ne
; CHECK-NEXT:    i32.select
; CHECK-NEXT:    # fallthrough-return
start:
  %0 = tail call i16 @llvm.fptosi.sat.i16.f32(float %a)
  ret i16 %0
}

define i16 @fcvt_hu_s_sat_nsnan(float nofpclass(snan) %a) {
; CHECK-LABEL: fcvt_hu_s_sat_nsnan:
; CHECK:         .functype fcvt_hu_s_sat_nsnan (f32) -> (i32)
; CHECK-NEXT:  # %bb.0: # %start
; CHECK-NEXT:    i32.const 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.const 0x0p0
; CHECK-NEXT:    f32.max
; CHECK-NEXT:    f32.const 0x1.fffep15
; CHECK-NEXT:    f32.min
; CHECK-NEXT:    i32.trunc_sat_f32_u
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    f32.ne
; CHECK-NEXT:    i32.select
; CHECK-NEXT:    # fallthrough-return
start:
  %0 = tail call i16 @llvm.fptoui.sat.i16.f32(float %a)
  ret i16 %0
}

