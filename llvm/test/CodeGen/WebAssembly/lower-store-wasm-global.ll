; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s | FileCheck %s

; Test various stores from WASM (address space 1) globals lower as intended

target triple = "wasm32-unknown-unknown"


@globalI8 = local_unnamed_addr addrspace(1) global i8 undef
@globalI32 = local_unnamed_addr addrspace(1) global i32 undef
@globalI64 = local_unnamed_addr addrspace(1) global i64 undef

define void @store_i8_to_i32(i8 %val) {
; CHECK-LABEL: store_i8_to_i32:
; CHECK:         .functype store_i8_to_i32 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.const 255
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    global.get globalI32
; CHECK-NEXT:    i32.const -256
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    i32.or
; CHECK-NEXT:    global.set globalI32
; CHECK-NEXT:    # fallthrough-return
  store i8 %val, ptr addrspace(1) @globalI32
  ret void
}

define void @store_i16_to_i32(i16 %val) {
; CHECK-LABEL: store_i16_to_i32:
; CHECK:         .functype store_i16_to_i32 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.const 65535
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    global.get globalI32
; CHECK-NEXT:    i32.const -65536
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    i32.or
; CHECK-NEXT:    global.set globalI32
; CHECK-NEXT:    # fallthrough-return
  store i16 %val, ptr addrspace(1) @globalI32
  ret void
}

define void @store_i32_to_i32(i32 %val) {
; CHECK-LABEL: store_i32_to_i32:
; CHECK:         .functype store_i32_to_i32 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    global.set globalI32
; CHECK-NEXT:    # fallthrough-return
  store i32 %val, ptr addrspace(1) @globalI32
  ret void
}

define void @store_i64_to_i32(i64 %val) {
; CHECK-LABEL: store_i64_to_i32:
; CHECK:         .functype store_i64_to_i32 (i64) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.wrap_i64
; CHECK-NEXT:    global.set globalI32
; CHECK-NEXT:    # fallthrough-return
  store i64 %val, ptr addrspace(1) @globalI32
  ret void
}

define void @store_i8_to_i64(i8 %val) {
; CHECK-LABEL: store_i8_to_i64:
; CHECK:         .functype store_i8_to_i64 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.const 255
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    i64.extend_i32_u
; CHECK-NEXT:    global.get globalI64
; CHECK-NEXT:    i64.const -256
; CHECK-NEXT:    i64.and
; CHECK-NEXT:    i64.or
; CHECK-NEXT:    global.set globalI64
; CHECK-NEXT:    # fallthrough-return
  store i8 %val, ptr addrspace(1) @globalI64
  ret void
}

define void @store_i16_to_i64(i16 %val) {
; CHECK-LABEL: store_i16_to_i64:
; CHECK:         .functype store_i16_to_i64 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.const 65535
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    i64.extend_i32_u
; CHECK-NEXT:    global.get globalI64
; CHECK-NEXT:    i64.const -65536
; CHECK-NEXT:    i64.and
; CHECK-NEXT:    i64.or
; CHECK-NEXT:    global.set globalI64
; CHECK-NEXT:    # fallthrough-return
  store i16 %val, ptr addrspace(1) @globalI64
  ret void
}

define void @store_i32_to_i64(i32 %val) {
; CHECK-LABEL: store_i32_to_i64:
; CHECK:         .functype store_i32_to_i64 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i64.extend_i32_u
; CHECK-NEXT:    global.get globalI64
; CHECK-NEXT:    i64.const -4294967296
; CHECK-NEXT:    i64.and
; CHECK-NEXT:    i64.or
; CHECK-NEXT:    global.set globalI64
; CHECK-NEXT:    # fallthrough-return
  store i32 %val, ptr addrspace(1) @globalI64
  ret void
}

define void @store_i64_to_i64(i64 %val) {
; CHECK-LABEL: store_i64_to_i64:
; CHECK:         .functype store_i64_to_i64 (i64) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    global.set globalI64
; CHECK-NEXT:    # fallthrough-return
  store i64 %val, ptr addrspace(1) @globalI64
  ret void
}

define void @store_i8_to_i8(i8 %val) {
; CHECK-LABEL: store_i8_to_i8:
; CHECK:         .functype store_i8_to_i8 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.const 255
; CHECK-NEXT:    i32.and
; CHECK-NEXT:    global.set globalI8
; CHECK-NEXT:    # fallthrough-return
  store i8 %val, ptr addrspace(1) @globalI8
  ret void
}

define void @store_i32_to_i8(i32 %val) {
; CHECK-LABEL: store_i32_to_i8:
; CHECK:         .functype store_i32_to_i8 (i32) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    global.set globalI8
; CHECK-NEXT:    # fallthrough-return
  store i32 %val, ptr addrspace(1) @globalI8
  ret void
}

define void @store_i64_to_i8(i64 %val) {
; CHECK-LABEL: store_i64_to_i8:
; CHECK:         .functype store_i64_to_i8 (i64) -> ()
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    i32.wrap_i64
; CHECK-NEXT:    global.set globalI8
; CHECK-NEXT:    # fallthrough-return
  store i64 %val, ptr addrspace(1) @globalI8
  ret void
}
