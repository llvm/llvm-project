; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -verify-machineinstrs -disable-wasm-fallthrough-return-opt -wasm-disable-explicit-locals -wasm-keep-registers -mattr=+simd128 | FileCheck %s

; Tests that bool vecreduce produces anytrue and alltrue instructions

target triple = "wasm32-unknown-unknown"

declare i1 @llvm.vector.reduce.or.v2i1(<2 x i1>)
declare i1 @llvm.vector.reduce.or.v4i1(<4 x i1>)
declare i1 @llvm.vector.reduce.or.v7i1(<7 x i1>)
declare i1 @llvm.vector.reduce.or.v8i1(<8 x i1>)
declare i1 @llvm.vector.reduce.or.v16i1(<16 x i1>)
declare i1 @llvm.vector.reduce.or.v64i1(<64 x i1>)
declare i1 @llvm.vector.reduce.and.v2i1(<2 x i1>)
declare i1 @llvm.vector.reduce.and.v4i1(<4 x i1>)
declare i1 @llvm.vector.reduce.and.v7i1(<7 x i1>)
declare i1 @llvm.vector.reduce.and.v8i1(<8 x i1>)
declare i1 @llvm.vector.reduce.and.v16i1(<16 x i1>)
declare i1 @llvm.vector.reduce.and.v64i1(<64 x i1> %x)

; =====================
; Regular vectors of i1
; =====================

define i1 @test_any_v8i1(<8 x i1> %x) {
; CHECK-LABEL: test_any_v8i1:
; CHECK:         .functype test_any_v8i1 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 15
; CHECK-NEXT:    i16x8.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 15
; CHECK-NEXT:    i16x8.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %ret = call i1 @llvm.vector.reduce.or.v8i1(<8 x i1> %x)
  ret i1 %ret
}

define i1 @test_all_v8i1(<8 x i1> %x) {
; CHECK-LABEL: test_all_v8i1:
; CHECK:         .functype test_all_v8i1 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 15
; CHECK-NEXT:    i16x8.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 15
; CHECK-NEXT:    i16x8.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    i16x8.all_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %ret = call i1 @llvm.vector.reduce.and.v8i1(<8 x i1> %x)
  ret i1 %ret
}

define i1 @test_none_v8i1(<8 x i1> %x) {
; CHECK-LABEL: test_none_v8i1:
; CHECK:         .functype test_none_v8i1 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 15
; CHECK-NEXT:    i16x8.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push6=, 15
; CHECK-NEXT:    i16x8.shr_s $push2=, $pop1, $pop6
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    i32.const $push4=, 1
; CHECK-NEXT:    i32.xor $push5=, $pop3, $pop4
; CHECK-NEXT:    return $pop5
  %any = call i1 @llvm.vector.reduce.or.v8i1(<8 x i1> %x)
  %none = xor i1 %any, 1
  ret i1 %none
}

define i1 @test_not_all_v8i1(<8 x i1> %x) {
; CHECK-LABEL: test_not_all_v8i1:
; CHECK:         .functype test_not_all_v8i1 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 15
; CHECK-NEXT:    i16x8.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push6=, 15
; CHECK-NEXT:    i16x8.shr_s $push2=, $pop1, $pop6
; CHECK-NEXT:    i16x8.all_true $push3=, $pop2
; CHECK-NEXT:    i32.const $push4=, 1
; CHECK-NEXT:    i32.xor $push5=, $pop3, $pop4
; CHECK-NEXT:    return $pop5
  %all = call i1 @llvm.vector.reduce.and.v8i1(<8 x i1> %x)
  %notall = xor i1 %all, 1
  ret i1 %notall
}

define i1 @test_any_v16i1(<16 x i1> %x) {
; CHECK-LABEL: test_any_v16i1:
; CHECK:         .functype test_any_v16i1 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 7
; CHECK-NEXT:    i8x16.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 7
; CHECK-NEXT:    i8x16.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %ret = call i1 @llvm.vector.reduce.or.v16i1(<16 x i1> %x)
  ret i1 %ret
}

define i1 @test_all_v16i1(<16 x i1> %x) {
; CHECK-LABEL: test_all_v16i1:
; CHECK:         .functype test_all_v16i1 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 7
; CHECK-NEXT:    i8x16.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 7
; CHECK-NEXT:    i8x16.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    i8x16.all_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %ret = call i1 @llvm.vector.reduce.and.v16i1(<16 x i1> %x)
  ret i1 %ret
}

; ==================================
; Regular vectors of larger integers
; ==================================

define i1 @test_any_v16i8(<16 x i8> %x) {
; CHECK-LABEL: test_any_v16i8:
; CHECK:         .functype test_any_v16i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 7
; CHECK-NEXT:    i8x16.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 7
; CHECK-NEXT:    i8x16.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <16 x i8> %x to <16 x i1>
  %ret = call i1 @llvm.vector.reduce.or.v16i1(<16 x i1> %bits)
  ret i1 %ret
}

define i1 @test_all_v16i8(<16 x i8> %x) {
; CHECK-LABEL: test_all_v16i8:
; CHECK:         .functype test_all_v16i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 7
; CHECK-NEXT:    i8x16.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 7
; CHECK-NEXT:    i8x16.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    i8x16.all_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <16 x i8> %x to <16 x i1>
  %ret = call i1 @llvm.vector.reduce.and.v16i1(<16 x i1> %bits)
  ret i1 %ret
}

define i1 @test_any_v8i16(<8 x i16> %x) {
; CHECK-LABEL: test_any_v8i16:
; CHECK:         .functype test_any_v8i16 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 15
; CHECK-NEXT:    i16x8.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 15
; CHECK-NEXT:    i16x8.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <8 x i16> %x to <8 x i1>
  %ret = call i1 @llvm.vector.reduce.or.v8i1(<8 x i1> %bits)
  ret i1 %ret
}

define i1 @test_all_v8i16(<8 x i16> %x) {
; CHECK-LABEL: test_all_v8i16:
; CHECK:         .functype test_all_v8i16 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 15
; CHECK-NEXT:    i16x8.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 15
; CHECK-NEXT:    i16x8.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    i16x8.all_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <8 x i16> %x to <8 x i1>
  %ret = call i1 @llvm.vector.reduce.and.v8i1(<8 x i1> %bits)
  ret i1 %ret
}

define i1 @test_any_v4i32(<4 x i32> %x) {
; CHECK-LABEL: test_any_v4i32:
; CHECK:         .functype test_any_v4i32 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 31
; CHECK-NEXT:    i32x4.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 31
; CHECK-NEXT:    i32x4.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <4 x i32> %x to <4 x i1>
  %ret = call i1 @llvm.vector.reduce.or.v4i1(<4 x i1> %bits)
  ret i1 %ret
}

define i1 @test_all_v4i32(<4 x i32> %x) {
; CHECK-LABEL: test_all_v4i32:
; CHECK:         .functype test_all_v4i32 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 31
; CHECK-NEXT:    i32x4.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 31
; CHECK-NEXT:    i32x4.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    i32x4.all_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <4 x i32> %x to <4 x i1>
  %ret = call i1 @llvm.vector.reduce.and.v4i1(<4 x i1> %bits)
  ret i1 %ret
}

define i1 @test_any_v2i64(<2 x i64> %x) {
; CHECK-LABEL: test_any_v2i64:
; CHECK:         .functype test_any_v2i64 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 63
; CHECK-NEXT:    i64x2.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 63
; CHECK-NEXT:    i64x2.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    v128.any_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <2 x i64> %x to <2 x i1>
  %ret = call i1 @llvm.vector.reduce.or.v2i1(<2 x i1> %bits)
  ret i1 %ret
}

define i1 @test_all_v2i64(<2 x i64> %x) {
; CHECK-LABEL: test_all_v2i64:
; CHECK:         .functype test_all_v2i64 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.const $push0=, 63
; CHECK-NEXT:    i64x2.shl $push1=, $0, $pop0
; CHECK-NEXT:    i32.const $push4=, 63
; CHECK-NEXT:    i64x2.shr_s $push2=, $pop1, $pop4
; CHECK-NEXT:    i64x2.all_true $push3=, $pop2
; CHECK-NEXT:    return $pop3
  %bits = trunc <2 x i64> %x to <2 x i1>
  %ret = call i1 @llvm.vector.reduce.and.v2i1(<2 x i1> %bits)
  ret i1 %ret
}

; ====================
; Unusual vector sizes
; ====================

define i1 @test_any_v7i1(<7 x i1> %x) {
; CHECK-LABEL: test_any_v7i1:
; CHECK:         .functype test_any_v7i1 (i32, i32, i32, i32, i32, i32, i32) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.or $push0=, $0, $1
; CHECK-NEXT:    i32.or $push1=, $pop0, $2
; CHECK-NEXT:    i32.or $push2=, $pop1, $3
; CHECK-NEXT:    i32.or $push3=, $pop2, $4
; CHECK-NEXT:    i32.or $push4=, $pop3, $5
; CHECK-NEXT:    i32.or $push5=, $pop4, $6
; CHECK-NEXT:    return $pop5
  %ret = call i1 @llvm.vector.reduce.or.v7i1(<7 x i1> %x)
  ret i1 %ret
}

define i1 @test_all_v7i1(<7 x i1> %x) {
; CHECK-LABEL: test_all_v7i1:
; CHECK:         .functype test_all_v7i1 (i32, i32, i32, i32, i32, i32, i32) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i32.and $push0=, $0, $1
; CHECK-NEXT:    i32.and $push1=, $pop0, $2
; CHECK-NEXT:    i32.and $push2=, $pop1, $3
; CHECK-NEXT:    i32.and $push3=, $pop2, $4
; CHECK-NEXT:    i32.and $push4=, $pop3, $5
; CHECK-NEXT:    i32.and $push5=, $pop4, $6
; CHECK-NEXT:    i32.const $push6=, 1
; CHECK-NEXT:    i32.and $push7=, $pop5, $pop6
; CHECK-NEXT:    return $pop7
  %ret = call i1 @llvm.vector.reduce.and.v7i1(<7 x i1> %x)
  ret i1 %ret
}

define i1 @test_any_v8i8(<8 x i8> %x) {
; CHECK-LABEL: test_any_v8i8:
; CHECK:         .functype test_any_v8i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i8x16.shuffle $push0=, $0, $0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0
; CHECK-NEXT:    i32.const $push1=, 15
; CHECK-NEXT:    i16x8.shl $push2=, $pop0, $pop1
; CHECK-NEXT:    i32.const $push5=, 15
; CHECK-NEXT:    i16x8.shr_s $push3=, $pop2, $pop5
; CHECK-NEXT:    v128.any_true $push4=, $pop3
; CHECK-NEXT:    return $pop4
  %bits = trunc <8 x i8> %x to <8 x i1>
  %ret = call i1 @llvm.vector.reduce.or.v8i1(<8 x i1> %bits)
  ret i1 %ret
}

define i1 @test_all_v8i8(<8 x i8> %x) {
; CHECK-LABEL: test_all_v8i8:
; CHECK:         .functype test_all_v8i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    i8x16.shuffle $push0=, $0, $0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0
; CHECK-NEXT:    i32.const $push1=, 15
; CHECK-NEXT:    i16x8.shl $push2=, $pop0, $pop1
; CHECK-NEXT:    i32.const $push5=, 15
; CHECK-NEXT:    i16x8.shr_s $push3=, $pop2, $pop5
; CHECK-NEXT:    i16x8.all_true $push4=, $pop3
; CHECK-NEXT:    return $pop4
  %bits = trunc <8 x i8> %x to <8 x i1>
  %ret = call i1 @llvm.vector.reduce.and.v8i1(<8 x i1> %bits)
  ret i1 %ret
}

;; TODO: Improve this codegen.
define i1 @test_any_v64i8(<64 x i8> %x) {
; CHECK-LABEL: test_any_v64i8:
; CHECK:         .functype test_any_v64i8 (v128, v128, v128, v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    global.get $push264=, __stack_pointer
; CHECK-NEXT:    i32.const $push265=, 16
; CHECK-NEXT:    i32.sub $drop=, $pop264, $pop265
; CHECK-NEXT:    i8x16.extract_lane_u $push254=, $0, 15
; CHECK-NEXT:    i8x16.extract_lane_u $push253=, $2, 15
; CHECK-NEXT:    i32.or $push255=, $pop254, $pop253
; CHECK-NEXT:    i32.const $push133=, 15
; CHECK-NEXT:    i32.shl $push256=, $pop255, $pop133
; CHECK-NEXT:    i8x16.extract_lane_u $push195=, $0, 0
; CHECK-NEXT:    i32.const $push1=, 1
; CHECK-NEXT:    i32.and $push196=, $pop195, $pop1
; CHECK-NEXT:    i8x16.extract_lane_u $push197=, $0, 1
; CHECK-NEXT:    i32.const $push368=, 1
; CHECK-NEXT:    i32.and $push198=, $pop197, $pop368
; CHECK-NEXT:    i32.const $push367=, 1
; CHECK-NEXT:    i32.shl $push199=, $pop198, $pop367
; CHECK-NEXT:    i32.or $push200=, $pop196, $pop199
; CHECK-NEXT:    i8x16.extract_lane_u $push201=, $0, 2
; CHECK-NEXT:    i32.const $push366=, 1
; CHECK-NEXT:    i32.and $push202=, $pop201, $pop366
; CHECK-NEXT:    i32.const $push9=, 2
; CHECK-NEXT:    i32.shl $push203=, $pop202, $pop9
; CHECK-NEXT:    i32.or $push204=, $pop200, $pop203
; CHECK-NEXT:    i8x16.extract_lane_u $push205=, $0, 3
; CHECK-NEXT:    i32.const $push365=, 1
; CHECK-NEXT:    i32.and $push206=, $pop205, $pop365
; CHECK-NEXT:    i32.const $push14=, 3
; CHECK-NEXT:    i32.shl $push207=, $pop206, $pop14
; CHECK-NEXT:    i32.or $push208=, $pop204, $pop207
; CHECK-NEXT:    i8x16.extract_lane_u $push209=, $0, 4
; CHECK-NEXT:    i32.const $push364=, 1
; CHECK-NEXT:    i32.and $push210=, $pop209, $pop364
; CHECK-NEXT:    i32.const $push19=, 4
; CHECK-NEXT:    i32.shl $push211=, $pop210, $pop19
; CHECK-NEXT:    i32.or $push212=, $pop208, $pop211
; CHECK-NEXT:    i8x16.extract_lane_u $push213=, $0, 5
; CHECK-NEXT:    i32.const $push363=, 1
; CHECK-NEXT:    i32.and $push214=, $pop213, $pop363
; CHECK-NEXT:    i32.const $push24=, 5
; CHECK-NEXT:    i32.shl $push215=, $pop214, $pop24
; CHECK-NEXT:    i32.or $push216=, $pop212, $pop215
; CHECK-NEXT:    i8x16.extract_lane_u $push217=, $0, 6
; CHECK-NEXT:    i32.const $push362=, 1
; CHECK-NEXT:    i32.and $push218=, $pop217, $pop362
; CHECK-NEXT:    i32.const $push29=, 6
; CHECK-NEXT:    i32.shl $push219=, $pop218, $pop29
; CHECK-NEXT:    i32.or $push220=, $pop216, $pop219
; CHECK-NEXT:    i8x16.extract_lane_u $push221=, $0, 7
; CHECK-NEXT:    i32.const $push361=, 1
; CHECK-NEXT:    i32.and $push222=, $pop221, $pop361
; CHECK-NEXT:    i32.const $push34=, 7
; CHECK-NEXT:    i32.shl $push223=, $pop222, $pop34
; CHECK-NEXT:    i32.or $push224=, $pop220, $pop223
; CHECK-NEXT:    i8x16.extract_lane_u $push225=, $0, 8
; CHECK-NEXT:    i32.const $push360=, 1
; CHECK-NEXT:    i32.and $push226=, $pop225, $pop360
; CHECK-NEXT:    i32.const $push39=, 8
; CHECK-NEXT:    i32.shl $push227=, $pop226, $pop39
; CHECK-NEXT:    i32.or $push228=, $pop224, $pop227
; CHECK-NEXT:    i8x16.extract_lane_u $push229=, $0, 9
; CHECK-NEXT:    i32.const $push359=, 1
; CHECK-NEXT:    i32.and $push230=, $pop229, $pop359
; CHECK-NEXT:    i32.const $push44=, 9
; CHECK-NEXT:    i32.shl $push231=, $pop230, $pop44
; CHECK-NEXT:    i32.or $push232=, $pop228, $pop231
; CHECK-NEXT:    i8x16.extract_lane_u $push233=, $0, 10
; CHECK-NEXT:    i32.const $push358=, 1
; CHECK-NEXT:    i32.and $push234=, $pop233, $pop358
; CHECK-NEXT:    i32.const $push49=, 10
; CHECK-NEXT:    i32.shl $push235=, $pop234, $pop49
; CHECK-NEXT:    i32.or $push236=, $pop232, $pop235
; CHECK-NEXT:    i8x16.extract_lane_u $push237=, $0, 11
; CHECK-NEXT:    i32.const $push357=, 1
; CHECK-NEXT:    i32.and $push238=, $pop237, $pop357
; CHECK-NEXT:    i32.const $push54=, 11
; CHECK-NEXT:    i32.shl $push239=, $pop238, $pop54
; CHECK-NEXT:    i32.or $push240=, $pop236, $pop239
; CHECK-NEXT:    i8x16.extract_lane_u $push241=, $0, 12
; CHECK-NEXT:    i32.const $push356=, 1
; CHECK-NEXT:    i32.and $push242=, $pop241, $pop356
; CHECK-NEXT:    i32.const $push59=, 12
; CHECK-NEXT:    i32.shl $push243=, $pop242, $pop59
; CHECK-NEXT:    i32.or $push244=, $pop240, $pop243
; CHECK-NEXT:    i8x16.extract_lane_u $push245=, $0, 13
; CHECK-NEXT:    i32.const $push355=, 1
; CHECK-NEXT:    i32.and $push246=, $pop245, $pop355
; CHECK-NEXT:    i32.const $push64=, 13
; CHECK-NEXT:    i32.shl $push247=, $pop246, $pop64
; CHECK-NEXT:    i32.or $push248=, $pop244, $pop247
; CHECK-NEXT:    i8x16.extract_lane_u $push249=, $0, 14
; CHECK-NEXT:    i32.const $push354=, 1
; CHECK-NEXT:    i32.and $push250=, $pop249, $pop354
; CHECK-NEXT:    i32.const $push69=, 14
; CHECK-NEXT:    i32.shl $push251=, $pop250, $pop69
; CHECK-NEXT:    i32.or $push252=, $pop248, $pop251
; CHECK-NEXT:    i32.or $push257=, $pop256, $pop252
; CHECK-NEXT:    i8x16.extract_lane_u $push137=, $2, 0
; CHECK-NEXT:    i32.const $push353=, 1
; CHECK-NEXT:    i32.and $push138=, $pop137, $pop353
; CHECK-NEXT:    i8x16.extract_lane_u $push139=, $2, 1
; CHECK-NEXT:    i32.const $push352=, 1
; CHECK-NEXT:    i32.and $push140=, $pop139, $pop352
; CHECK-NEXT:    i32.const $push351=, 1
; CHECK-NEXT:    i32.shl $push141=, $pop140, $pop351
; CHECK-NEXT:    i32.or $push142=, $pop138, $pop141
; CHECK-NEXT:    i8x16.extract_lane_u $push143=, $2, 2
; CHECK-NEXT:    i32.const $push350=, 1
; CHECK-NEXT:    i32.and $push144=, $pop143, $pop350
; CHECK-NEXT:    i32.const $push349=, 2
; CHECK-NEXT:    i32.shl $push145=, $pop144, $pop349
; CHECK-NEXT:    i32.or $push146=, $pop142, $pop145
; CHECK-NEXT:    i8x16.extract_lane_u $push147=, $2, 3
; CHECK-NEXT:    i32.const $push348=, 1
; CHECK-NEXT:    i32.and $push148=, $pop147, $pop348
; CHECK-NEXT:    i32.const $push347=, 3
; CHECK-NEXT:    i32.shl $push149=, $pop148, $pop347
; CHECK-NEXT:    i32.or $push150=, $pop146, $pop149
; CHECK-NEXT:    i8x16.extract_lane_u $push151=, $2, 4
; CHECK-NEXT:    i32.const $push346=, 1
; CHECK-NEXT:    i32.and $push152=, $pop151, $pop346
; CHECK-NEXT:    i32.const $push345=, 4
; CHECK-NEXT:    i32.shl $push153=, $pop152, $pop345
; CHECK-NEXT:    i32.or $push154=, $pop150, $pop153
; CHECK-NEXT:    i8x16.extract_lane_u $push155=, $2, 5
; CHECK-NEXT:    i32.const $push344=, 1
; CHECK-NEXT:    i32.and $push156=, $pop155, $pop344
; CHECK-NEXT:    i32.const $push343=, 5
; CHECK-NEXT:    i32.shl $push157=, $pop156, $pop343
; CHECK-NEXT:    i32.or $push158=, $pop154, $pop157
; CHECK-NEXT:    i8x16.extract_lane_u $push159=, $2, 6
; CHECK-NEXT:    i32.const $push342=, 1
; CHECK-NEXT:    i32.and $push160=, $pop159, $pop342
; CHECK-NEXT:    i32.const $push341=, 6
; CHECK-NEXT:    i32.shl $push161=, $pop160, $pop341
; CHECK-NEXT:    i32.or $push162=, $pop158, $pop161
; CHECK-NEXT:    i8x16.extract_lane_u $push163=, $2, 7
; CHECK-NEXT:    i32.const $push340=, 1
; CHECK-NEXT:    i32.and $push164=, $pop163, $pop340
; CHECK-NEXT:    i32.const $push339=, 7
; CHECK-NEXT:    i32.shl $push165=, $pop164, $pop339
; CHECK-NEXT:    i32.or $push166=, $pop162, $pop165
; CHECK-NEXT:    i8x16.extract_lane_u $push167=, $2, 8
; CHECK-NEXT:    i32.const $push338=, 1
; CHECK-NEXT:    i32.and $push168=, $pop167, $pop338
; CHECK-NEXT:    i32.const $push337=, 8
; CHECK-NEXT:    i32.shl $push169=, $pop168, $pop337
; CHECK-NEXT:    i32.or $push170=, $pop166, $pop169
; CHECK-NEXT:    i8x16.extract_lane_u $push171=, $2, 9
; CHECK-NEXT:    i32.const $push336=, 1
; CHECK-NEXT:    i32.and $push172=, $pop171, $pop336
; CHECK-NEXT:    i32.const $push335=, 9
; CHECK-NEXT:    i32.shl $push173=, $pop172, $pop335
; CHECK-NEXT:    i32.or $push174=, $pop170, $pop173
; CHECK-NEXT:    i8x16.extract_lane_u $push175=, $2, 10
; CHECK-NEXT:    i32.const $push334=, 1
; CHECK-NEXT:    i32.and $push176=, $pop175, $pop334
; CHECK-NEXT:    i32.const $push333=, 10
; CHECK-NEXT:    i32.shl $push177=, $pop176, $pop333
; CHECK-NEXT:    i32.or $push178=, $pop174, $pop177
; CHECK-NEXT:    i8x16.extract_lane_u $push179=, $2, 11
; CHECK-NEXT:    i32.const $push332=, 1
; CHECK-NEXT:    i32.and $push180=, $pop179, $pop332
; CHECK-NEXT:    i32.const $push331=, 11
; CHECK-NEXT:    i32.shl $push181=, $pop180, $pop331
; CHECK-NEXT:    i32.or $push182=, $pop178, $pop181
; CHECK-NEXT:    i8x16.extract_lane_u $push183=, $2, 12
; CHECK-NEXT:    i32.const $push330=, 1
; CHECK-NEXT:    i32.and $push184=, $pop183, $pop330
; CHECK-NEXT:    i32.const $push329=, 12
; CHECK-NEXT:    i32.shl $push185=, $pop184, $pop329
; CHECK-NEXT:    i32.or $push186=, $pop182, $pop185
; CHECK-NEXT:    i8x16.extract_lane_u $push187=, $2, 13
; CHECK-NEXT:    i32.const $push328=, 1
; CHECK-NEXT:    i32.and $push188=, $pop187, $pop328
; CHECK-NEXT:    i32.const $push327=, 13
; CHECK-NEXT:    i32.shl $push189=, $pop188, $pop327
; CHECK-NEXT:    i32.or $push190=, $pop186, $pop189
; CHECK-NEXT:    i8x16.extract_lane_u $push191=, $2, 14
; CHECK-NEXT:    i32.const $push326=, 1
; CHECK-NEXT:    i32.and $push192=, $pop191, $pop326
; CHECK-NEXT:    i32.const $push325=, 14
; CHECK-NEXT:    i32.shl $push193=, $pop192, $pop325
; CHECK-NEXT:    i32.or $push194=, $pop190, $pop193
; CHECK-NEXT:    i32.or $push258=, $pop257, $pop194
; CHECK-NEXT:    i8x16.extract_lane_u $push131=, $1, 15
; CHECK-NEXT:    i8x16.extract_lane_u $push130=, $3, 15
; CHECK-NEXT:    i32.or $push132=, $pop131, $pop130
; CHECK-NEXT:    i32.const $push324=, 15
; CHECK-NEXT:    i32.shl $push134=, $pop132, $pop324
; CHECK-NEXT:    i8x16.extract_lane_u $push72=, $1, 0
; CHECK-NEXT:    i32.const $push323=, 1
; CHECK-NEXT:    i32.and $push73=, $pop72, $pop323
; CHECK-NEXT:    i8x16.extract_lane_u $push74=, $1, 1
; CHECK-NEXT:    i32.const $push322=, 1
; CHECK-NEXT:    i32.and $push75=, $pop74, $pop322
; CHECK-NEXT:    i32.const $push321=, 1
; CHECK-NEXT:    i32.shl $push76=, $pop75, $pop321
; CHECK-NEXT:    i32.or $push77=, $pop73, $pop76
; CHECK-NEXT:    i8x16.extract_lane_u $push78=, $1, 2
; CHECK-NEXT:    i32.const $push320=, 1
; CHECK-NEXT:    i32.and $push79=, $pop78, $pop320
; CHECK-NEXT:    i32.const $push319=, 2
; CHECK-NEXT:    i32.shl $push80=, $pop79, $pop319
; CHECK-NEXT:    i32.or $push81=, $pop77, $pop80
; CHECK-NEXT:    i8x16.extract_lane_u $push82=, $1, 3
; CHECK-NEXT:    i32.const $push318=, 1
; CHECK-NEXT:    i32.and $push83=, $pop82, $pop318
; CHECK-NEXT:    i32.const $push317=, 3
; CHECK-NEXT:    i32.shl $push84=, $pop83, $pop317
; CHECK-NEXT:    i32.or $push85=, $pop81, $pop84
; CHECK-NEXT:    i8x16.extract_lane_u $push86=, $1, 4
; CHECK-NEXT:    i32.const $push316=, 1
; CHECK-NEXT:    i32.and $push87=, $pop86, $pop316
; CHECK-NEXT:    i32.const $push315=, 4
; CHECK-NEXT:    i32.shl $push88=, $pop87, $pop315
; CHECK-NEXT:    i32.or $push89=, $pop85, $pop88
; CHECK-NEXT:    i8x16.extract_lane_u $push90=, $1, 5
; CHECK-NEXT:    i32.const $push314=, 1
; CHECK-NEXT:    i32.and $push91=, $pop90, $pop314
; CHECK-NEXT:    i32.const $push313=, 5
; CHECK-NEXT:    i32.shl $push92=, $pop91, $pop313
; CHECK-NEXT:    i32.or $push93=, $pop89, $pop92
; CHECK-NEXT:    i8x16.extract_lane_u $push94=, $1, 6
; CHECK-NEXT:    i32.const $push312=, 1
; CHECK-NEXT:    i32.and $push95=, $pop94, $pop312
; CHECK-NEXT:    i32.const $push311=, 6
; CHECK-NEXT:    i32.shl $push96=, $pop95, $pop311
; CHECK-NEXT:    i32.or $push97=, $pop93, $pop96
; CHECK-NEXT:    i8x16.extract_lane_u $push98=, $1, 7
; CHECK-NEXT:    i32.const $push310=, 1
; CHECK-NEXT:    i32.and $push99=, $pop98, $pop310
; CHECK-NEXT:    i32.const $push309=, 7
; CHECK-NEXT:    i32.shl $push100=, $pop99, $pop309
; CHECK-NEXT:    i32.or $push101=, $pop97, $pop100
; CHECK-NEXT:    i8x16.extract_lane_u $push102=, $1, 8
; CHECK-NEXT:    i32.const $push308=, 1
; CHECK-NEXT:    i32.and $push103=, $pop102, $pop308
; CHECK-NEXT:    i32.const $push307=, 8
; CHECK-NEXT:    i32.shl $push104=, $pop103, $pop307
; CHECK-NEXT:    i32.or $push105=, $pop101, $pop104
; CHECK-NEXT:    i8x16.extract_lane_u $push106=, $1, 9
; CHECK-NEXT:    i32.const $push306=, 1
; CHECK-NEXT:    i32.and $push107=, $pop106, $pop306
; CHECK-NEXT:    i32.const $push305=, 9
; CHECK-NEXT:    i32.shl $push108=, $pop107, $pop305
; CHECK-NEXT:    i32.or $push109=, $pop105, $pop108
; CHECK-NEXT:    i8x16.extract_lane_u $push110=, $1, 10
; CHECK-NEXT:    i32.const $push304=, 1
; CHECK-NEXT:    i32.and $push111=, $pop110, $pop304
; CHECK-NEXT:    i32.const $push303=, 10
; CHECK-NEXT:    i32.shl $push112=, $pop111, $pop303
; CHECK-NEXT:    i32.or $push113=, $pop109, $pop112
; CHECK-NEXT:    i8x16.extract_lane_u $push114=, $1, 11
; CHECK-NEXT:    i32.const $push302=, 1
; CHECK-NEXT:    i32.and $push115=, $pop114, $pop302
; CHECK-NEXT:    i32.const $push301=, 11
; CHECK-NEXT:    i32.shl $push116=, $pop115, $pop301
; CHECK-NEXT:    i32.or $push117=, $pop113, $pop116
; CHECK-NEXT:    i8x16.extract_lane_u $push118=, $1, 12
; CHECK-NEXT:    i32.const $push300=, 1
; CHECK-NEXT:    i32.and $push119=, $pop118, $pop300
; CHECK-NEXT:    i32.const $push299=, 12
; CHECK-NEXT:    i32.shl $push120=, $pop119, $pop299
; CHECK-NEXT:    i32.or $push121=, $pop117, $pop120
; CHECK-NEXT:    i8x16.extract_lane_u $push122=, $1, 13
; CHECK-NEXT:    i32.const $push298=, 1
; CHECK-NEXT:    i32.and $push123=, $pop122, $pop298
; CHECK-NEXT:    i32.const $push297=, 13
; CHECK-NEXT:    i32.shl $push124=, $pop123, $pop297
; CHECK-NEXT:    i32.or $push125=, $pop121, $pop124
; CHECK-NEXT:    i8x16.extract_lane_u $push126=, $1, 14
; CHECK-NEXT:    i32.const $push296=, 1
; CHECK-NEXT:    i32.and $push127=, $pop126, $pop296
; CHECK-NEXT:    i32.const $push295=, 14
; CHECK-NEXT:    i32.shl $push128=, $pop127, $pop295
; CHECK-NEXT:    i32.or $push129=, $pop125, $pop128
; CHECK-NEXT:    i32.or $push135=, $pop134, $pop129
; CHECK-NEXT:    i8x16.extract_lane_u $push0=, $3, 0
; CHECK-NEXT:    i32.const $push294=, 1
; CHECK-NEXT:    i32.and $push2=, $pop0, $pop294
; CHECK-NEXT:    i8x16.extract_lane_u $push3=, $3, 1
; CHECK-NEXT:    i32.const $push293=, 1
; CHECK-NEXT:    i32.and $push4=, $pop3, $pop293
; CHECK-NEXT:    i32.const $push292=, 1
; CHECK-NEXT:    i32.shl $push5=, $pop4, $pop292
; CHECK-NEXT:    i32.or $push6=, $pop2, $pop5
; CHECK-NEXT:    i8x16.extract_lane_u $push7=, $3, 2
; CHECK-NEXT:    i32.const $push291=, 1
; CHECK-NEXT:    i32.and $push8=, $pop7, $pop291
; CHECK-NEXT:    i32.const $push290=, 2
; CHECK-NEXT:    i32.shl $push10=, $pop8, $pop290
; CHECK-NEXT:    i32.or $push11=, $pop6, $pop10
; CHECK-NEXT:    i8x16.extract_lane_u $push12=, $3, 3
; CHECK-NEXT:    i32.const $push289=, 1
; CHECK-NEXT:    i32.and $push13=, $pop12, $pop289
; CHECK-NEXT:    i32.const $push288=, 3
; CHECK-NEXT:    i32.shl $push15=, $pop13, $pop288
; CHECK-NEXT:    i32.or $push16=, $pop11, $pop15
; CHECK-NEXT:    i8x16.extract_lane_u $push17=, $3, 4
; CHECK-NEXT:    i32.const $push287=, 1
; CHECK-NEXT:    i32.and $push18=, $pop17, $pop287
; CHECK-NEXT:    i32.const $push286=, 4
; CHECK-NEXT:    i32.shl $push20=, $pop18, $pop286
; CHECK-NEXT:    i32.or $push21=, $pop16, $pop20
; CHECK-NEXT:    i8x16.extract_lane_u $push22=, $3, 5
; CHECK-NEXT:    i32.const $push285=, 1
; CHECK-NEXT:    i32.and $push23=, $pop22, $pop285
; CHECK-NEXT:    i32.const $push284=, 5
; CHECK-NEXT:    i32.shl $push25=, $pop23, $pop284
; CHECK-NEXT:    i32.or $push26=, $pop21, $pop25
; CHECK-NEXT:    i8x16.extract_lane_u $push27=, $3, 6
; CHECK-NEXT:    i32.const $push283=, 1
; CHECK-NEXT:    i32.and $push28=, $pop27, $pop283
; CHECK-NEXT:    i32.const $push282=, 6
; CHECK-NEXT:    i32.shl $push30=, $pop28, $pop282
; CHECK-NEXT:    i32.or $push31=, $pop26, $pop30
; CHECK-NEXT:    i8x16.extract_lane_u $push32=, $3, 7
; CHECK-NEXT:    i32.const $push281=, 1
; CHECK-NEXT:    i32.and $push33=, $pop32, $pop281
; CHECK-NEXT:    i32.const $push280=, 7
; CHECK-NEXT:    i32.shl $push35=, $pop33, $pop280
; CHECK-NEXT:    i32.or $push36=, $pop31, $pop35
; CHECK-NEXT:    i8x16.extract_lane_u $push37=, $3, 8
; CHECK-NEXT:    i32.const $push279=, 1
; CHECK-NEXT:    i32.and $push38=, $pop37, $pop279
; CHECK-NEXT:    i32.const $push278=, 8
; CHECK-NEXT:    i32.shl $push40=, $pop38, $pop278
; CHECK-NEXT:    i32.or $push41=, $pop36, $pop40
; CHECK-NEXT:    i8x16.extract_lane_u $push42=, $3, 9
; CHECK-NEXT:    i32.const $push277=, 1
; CHECK-NEXT:    i32.and $push43=, $pop42, $pop277
; CHECK-NEXT:    i32.const $push276=, 9
; CHECK-NEXT:    i32.shl $push45=, $pop43, $pop276
; CHECK-NEXT:    i32.or $push46=, $pop41, $pop45
; CHECK-NEXT:    i8x16.extract_lane_u $push47=, $3, 10
; CHECK-NEXT:    i32.const $push275=, 1
; CHECK-NEXT:    i32.and $push48=, $pop47, $pop275
; CHECK-NEXT:    i32.const $push274=, 10
; CHECK-NEXT:    i32.shl $push50=, $pop48, $pop274
; CHECK-NEXT:    i32.or $push51=, $pop46, $pop50
; CHECK-NEXT:    i8x16.extract_lane_u $push52=, $3, 11
; CHECK-NEXT:    i32.const $push273=, 1
; CHECK-NEXT:    i32.and $push53=, $pop52, $pop273
; CHECK-NEXT:    i32.const $push272=, 11
; CHECK-NEXT:    i32.shl $push55=, $pop53, $pop272
; CHECK-NEXT:    i32.or $push56=, $pop51, $pop55
; CHECK-NEXT:    i8x16.extract_lane_u $push57=, $3, 12
; CHECK-NEXT:    i32.const $push271=, 1
; CHECK-NEXT:    i32.and $push58=, $pop57, $pop271
; CHECK-NEXT:    i32.const $push270=, 12
; CHECK-NEXT:    i32.shl $push60=, $pop58, $pop270
; CHECK-NEXT:    i32.or $push61=, $pop56, $pop60
; CHECK-NEXT:    i8x16.extract_lane_u $push62=, $3, 13
; CHECK-NEXT:    i32.const $push269=, 1
; CHECK-NEXT:    i32.and $push63=, $pop62, $pop269
; CHECK-NEXT:    i32.const $push268=, 13
; CHECK-NEXT:    i32.shl $push65=, $pop63, $pop268
; CHECK-NEXT:    i32.or $push66=, $pop61, $pop65
; CHECK-NEXT:    i8x16.extract_lane_u $push67=, $3, 14
; CHECK-NEXT:    i32.const $push267=, 1
; CHECK-NEXT:    i32.and $push68=, $pop67, $pop267
; CHECK-NEXT:    i32.const $push266=, 14
; CHECK-NEXT:    i32.shl $push70=, $pop68, $pop266
; CHECK-NEXT:    i32.or $push71=, $pop66, $pop70
; CHECK-NEXT:    i32.or $push136=, $pop135, $pop71
; CHECK-NEXT:    i32.or $push259=, $pop258, $pop136
; CHECK-NEXT:    i32.const $push260=, 65535
; CHECK-NEXT:    i32.and $push261=, $pop259, $pop260
; CHECK-NEXT:    i32.const $push262=, 0
; CHECK-NEXT:    i32.ne $push263=, $pop261, $pop262
; CHECK-NEXT:    return $pop263
  %bits = trunc <64 x i8> %x to <64 x i1>
  %ret = call i1 @llvm.vector.reduce.or.v64i1(<64 x i1> %bits)
  ret i1 %ret
}

;; TODO: Improve this codegen.
define i1 @test_all_v64i8(<64 x i8> %x) {
; CHECK-LABEL: test_all_v64i8:
; CHECK:         .functype test_all_v64i8 (v128, v128, v128, v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    global.get $push285=, __stack_pointer
; CHECK-NEXT:    i32.const $push286=, 16
; CHECK-NEXT:    i32.sub $drop=, $pop285, $pop286
; CHECK-NEXT:    i8x16.extract_lane_u $push40=, $1, 8
; CHECK-NEXT:    i32.const $push1=, 1
; CHECK-NEXT:    i32.and $push41=, $pop40, $pop1
; CHECK-NEXT:    i32.const $push42=, 24
; CHECK-NEXT:    i32.shl $push43=, $pop41, $pop42
; CHECK-NEXT:    i8x16.extract_lane_u $push35=, $1, 7
; CHECK-NEXT:    i32.const $push378=, 1
; CHECK-NEXT:    i32.and $push36=, $pop35, $pop378
; CHECK-NEXT:    i32.const $push37=, 23
; CHECK-NEXT:    i32.shl $push38=, $pop36, $pop37
; CHECK-NEXT:    i8x16.extract_lane_u $push30=, $1, 6
; CHECK-NEXT:    i32.const $push377=, 1
; CHECK-NEXT:    i32.and $push31=, $pop30, $pop377
; CHECK-NEXT:    i32.const $push32=, 22
; CHECK-NEXT:    i32.shl $push33=, $pop31, $pop32
; CHECK-NEXT:    i8x16.extract_lane_u $push25=, $1, 5
; CHECK-NEXT:    i32.const $push376=, 1
; CHECK-NEXT:    i32.and $push26=, $pop25, $pop376
; CHECK-NEXT:    i32.const $push27=, 21
; CHECK-NEXT:    i32.shl $push28=, $pop26, $pop27
; CHECK-NEXT:    i8x16.extract_lane_u $push20=, $1, 4
; CHECK-NEXT:    i32.const $push375=, 1
; CHECK-NEXT:    i32.and $push21=, $pop20, $pop375
; CHECK-NEXT:    i32.const $push22=, 20
; CHECK-NEXT:    i32.shl $push23=, $pop21, $pop22
; CHECK-NEXT:    i8x16.extract_lane_u $push15=, $1, 3
; CHECK-NEXT:    i32.const $push374=, 1
; CHECK-NEXT:    i32.and $push16=, $pop15, $pop374
; CHECK-NEXT:    i32.const $push17=, 19
; CHECK-NEXT:    i32.shl $push18=, $pop16, $pop17
; CHECK-NEXT:    i8x16.extract_lane_u $push10=, $1, 2
; CHECK-NEXT:    i32.const $push373=, 1
; CHECK-NEXT:    i32.and $push11=, $pop10, $pop373
; CHECK-NEXT:    i32.const $push12=, 18
; CHECK-NEXT:    i32.shl $push13=, $pop11, $pop12
; CHECK-NEXT:    i8x16.extract_lane_u $push5=, $1, 1
; CHECK-NEXT:    i32.const $push372=, 1
; CHECK-NEXT:    i32.and $push6=, $pop5, $pop372
; CHECK-NEXT:    i32.const $push7=, 17
; CHECK-NEXT:    i32.shl $push8=, $pop6, $pop7
; CHECK-NEXT:    i8x16.extract_lane_u $push0=, $1, 0
; CHECK-NEXT:    i32.const $push371=, 1
; CHECK-NEXT:    i32.and $push2=, $pop0, $pop371
; CHECK-NEXT:    i32.const $push3=, 16
; CHECK-NEXT:    i32.shl $push4=, $pop2, $pop3
; CHECK-NEXT:    i32.or $push9=, $pop8, $pop4
; CHECK-NEXT:    i32.or $push14=, $pop13, $pop9
; CHECK-NEXT:    i32.or $push19=, $pop18, $pop14
; CHECK-NEXT:    i32.or $push24=, $pop23, $pop19
; CHECK-NEXT:    i32.or $push29=, $pop28, $pop24
; CHECK-NEXT:    i32.or $push34=, $pop33, $pop29
; CHECK-NEXT:    i32.or $push39=, $pop38, $pop34
; CHECK-NEXT:    i32.or $4=, $pop43, $pop39
; CHECK-NEXT:    i8x16.extract_lane_u $push184=, $3, 7
; CHECK-NEXT:    i32.const $push370=, 1
; CHECK-NEXT:    i32.and $push185=, $pop184, $pop370
; CHECK-NEXT:    i32.const $push369=, 23
; CHECK-NEXT:    i32.shl $push186=, $pop185, $pop369
; CHECK-NEXT:    i8x16.extract_lane_u $push180=, $3, 6
; CHECK-NEXT:    i32.const $push368=, 1
; CHECK-NEXT:    i32.and $push181=, $pop180, $pop368
; CHECK-NEXT:    i32.const $push367=, 22
; CHECK-NEXT:    i32.shl $push182=, $pop181, $pop367
; CHECK-NEXT:    i8x16.extract_lane_u $push176=, $3, 5
; CHECK-NEXT:    i32.const $push366=, 1
; CHECK-NEXT:    i32.and $push177=, $pop176, $pop366
; CHECK-NEXT:    i32.const $push365=, 21
; CHECK-NEXT:    i32.shl $push178=, $pop177, $pop365
; CHECK-NEXT:    i8x16.extract_lane_u $push172=, $3, 4
; CHECK-NEXT:    i32.const $push364=, 1
; CHECK-NEXT:    i32.and $push173=, $pop172, $pop364
; CHECK-NEXT:    i32.const $push363=, 20
; CHECK-NEXT:    i32.shl $push174=, $pop173, $pop363
; CHECK-NEXT:    i8x16.extract_lane_u $push168=, $3, 3
; CHECK-NEXT:    i32.const $push362=, 1
; CHECK-NEXT:    i32.and $push169=, $pop168, $pop362
; CHECK-NEXT:    i32.const $push361=, 19
; CHECK-NEXT:    i32.shl $push170=, $pop169, $pop361
; CHECK-NEXT:    i8x16.extract_lane_u $push164=, $3, 2
; CHECK-NEXT:    i32.const $push360=, 1
; CHECK-NEXT:    i32.and $push165=, $pop164, $pop360
; CHECK-NEXT:    i32.const $push359=, 18
; CHECK-NEXT:    i32.shl $push166=, $pop165, $pop359
; CHECK-NEXT:    i8x16.extract_lane_u $push160=, $3, 1
; CHECK-NEXT:    i32.const $push358=, 1
; CHECK-NEXT:    i32.and $push161=, $pop160, $pop358
; CHECK-NEXT:    i32.const $push357=, 17
; CHECK-NEXT:    i32.shl $push162=, $pop161, $pop357
; CHECK-NEXT:    i8x16.extract_lane_u $push157=, $3, 0
; CHECK-NEXT:    i32.const $push356=, 1
; CHECK-NEXT:    i32.and $push158=, $pop157, $pop356
; CHECK-NEXT:    i32.const $push355=, 16
; CHECK-NEXT:    i32.shl $push159=, $pop158, $pop355
; CHECK-NEXT:    i32.or $push163=, $pop162, $pop159
; CHECK-NEXT:    i32.or $push167=, $pop166, $pop163
; CHECK-NEXT:    i32.or $push171=, $pop170, $pop167
; CHECK-NEXT:    i32.or $push175=, $pop174, $pop171
; CHECK-NEXT:    i32.or $push179=, $pop178, $pop175
; CHECK-NEXT:    i32.or $push183=, $pop182, $pop179
; CHECK-NEXT:    i32.or $5=, $pop186, $pop183
; CHECK-NEXT:    i8x16.extract_lane_u $push218=, $2, 0
; CHECK-NEXT:    i32.const $push354=, 1
; CHECK-NEXT:    i32.and $push219=, $pop218, $pop354
; CHECK-NEXT:    i8x16.extract_lane_u $push220=, $2, 1
; CHECK-NEXT:    i32.const $push353=, 1
; CHECK-NEXT:    i32.and $push221=, $pop220, $pop353
; CHECK-NEXT:    i32.const $push352=, 1
; CHECK-NEXT:    i32.shl $push222=, $pop221, $pop352
; CHECK-NEXT:    i32.or $push223=, $pop219, $pop222
; CHECK-NEXT:    i8x16.extract_lane_u $push224=, $2, 2
; CHECK-NEXT:    i32.const $push351=, 1
; CHECK-NEXT:    i32.and $push225=, $pop224, $pop351
; CHECK-NEXT:    i32.const $push86=, 2
; CHECK-NEXT:    i32.shl $push226=, $pop225, $pop86
; CHECK-NEXT:    i32.or $push227=, $pop223, $pop226
; CHECK-NEXT:    i8x16.extract_lane_u $push228=, $2, 3
; CHECK-NEXT:    i32.const $push350=, 1
; CHECK-NEXT:    i32.and $push229=, $pop228, $pop350
; CHECK-NEXT:    i32.const $push91=, 3
; CHECK-NEXT:    i32.shl $push230=, $pop229, $pop91
; CHECK-NEXT:    i32.or $push231=, $pop227, $pop230
; CHECK-NEXT:    i8x16.extract_lane_u $push232=, $2, 4
; CHECK-NEXT:    i32.const $push349=, 1
; CHECK-NEXT:    i32.and $push233=, $pop232, $pop349
; CHECK-NEXT:    i32.const $push96=, 4
; CHECK-NEXT:    i32.shl $push234=, $pop233, $pop96
; CHECK-NEXT:    i32.or $push235=, $pop231, $pop234
; CHECK-NEXT:    i8x16.extract_lane_u $push236=, $2, 5
; CHECK-NEXT:    i32.const $push348=, 1
; CHECK-NEXT:    i32.and $push237=, $pop236, $pop348
; CHECK-NEXT:    i32.const $push101=, 5
; CHECK-NEXT:    i32.shl $push238=, $pop237, $pop101
; CHECK-NEXT:    i32.or $push239=, $pop235, $pop238
; CHECK-NEXT:    i8x16.extract_lane_u $push240=, $2, 6
; CHECK-NEXT:    i32.const $push347=, 1
; CHECK-NEXT:    i32.and $push241=, $pop240, $pop347
; CHECK-NEXT:    i32.const $push106=, 6
; CHECK-NEXT:    i32.shl $push242=, $pop241, $pop106
; CHECK-NEXT:    i32.or $push243=, $pop239, $pop242
; CHECK-NEXT:    i8x16.extract_lane_u $push244=, $2, 7
; CHECK-NEXT:    i32.const $push346=, 1
; CHECK-NEXT:    i32.and $push245=, $pop244, $pop346
; CHECK-NEXT:    i32.const $push111=, 7
; CHECK-NEXT:    i32.shl $push246=, $pop245, $pop111
; CHECK-NEXT:    i32.or $push247=, $pop243, $pop246
; CHECK-NEXT:    i8x16.extract_lane_u $push248=, $2, 8
; CHECK-NEXT:    i32.const $push345=, 1
; CHECK-NEXT:    i32.and $push249=, $pop248, $pop345
; CHECK-NEXT:    i32.const $push116=, 8
; CHECK-NEXT:    i32.shl $push250=, $pop249, $pop116
; CHECK-NEXT:    i32.or $push251=, $pop247, $pop250
; CHECK-NEXT:    i8x16.extract_lane_u $push252=, $2, 9
; CHECK-NEXT:    i32.const $push344=, 1
; CHECK-NEXT:    i32.and $push253=, $pop252, $pop344
; CHECK-NEXT:    i32.const $push121=, 9
; CHECK-NEXT:    i32.shl $push254=, $pop253, $pop121
; CHECK-NEXT:    i32.or $push255=, $pop251, $pop254
; CHECK-NEXT:    i8x16.extract_lane_u $push256=, $2, 10
; CHECK-NEXT:    i32.const $push343=, 1
; CHECK-NEXT:    i32.and $push257=, $pop256, $pop343
; CHECK-NEXT:    i32.const $push126=, 10
; CHECK-NEXT:    i32.shl $push258=, $pop257, $pop126
; CHECK-NEXT:    i32.or $push259=, $pop255, $pop258
; CHECK-NEXT:    i8x16.extract_lane_u $push260=, $2, 11
; CHECK-NEXT:    i32.const $push342=, 1
; CHECK-NEXT:    i32.and $push261=, $pop260, $pop342
; CHECK-NEXT:    i32.const $push131=, 11
; CHECK-NEXT:    i32.shl $push262=, $pop261, $pop131
; CHECK-NEXT:    i32.or $push263=, $pop259, $pop262
; CHECK-NEXT:    i8x16.extract_lane_u $push264=, $2, 12
; CHECK-NEXT:    i32.const $push341=, 1
; CHECK-NEXT:    i32.and $push265=, $pop264, $pop341
; CHECK-NEXT:    i32.const $push136=, 12
; CHECK-NEXT:    i32.shl $push266=, $pop265, $pop136
; CHECK-NEXT:    i32.or $push267=, $pop263, $pop266
; CHECK-NEXT:    i8x16.extract_lane_u $push268=, $2, 13
; CHECK-NEXT:    i32.const $push340=, 1
; CHECK-NEXT:    i32.and $push269=, $pop268, $pop340
; CHECK-NEXT:    i32.const $push141=, 13
; CHECK-NEXT:    i32.shl $push270=, $pop269, $pop141
; CHECK-NEXT:    i32.or $push271=, $pop267, $pop270
; CHECK-NEXT:    i8x16.extract_lane_u $push272=, $2, 14
; CHECK-NEXT:    i32.const $push339=, 1
; CHECK-NEXT:    i32.and $push273=, $pop272, $pop339
; CHECK-NEXT:    i32.const $push146=, 14
; CHECK-NEXT:    i32.shl $push274=, $pop273, $pop146
; CHECK-NEXT:    i32.or $push275=, $pop271, $pop274
; CHECK-NEXT:    i8x16.extract_lane_u $push276=, $2, 15
; CHECK-NEXT:    i32.const $push150=, 15
; CHECK-NEXT:    i32.shl $push277=, $pop276, $pop150
; CHECK-NEXT:    i32.or $push278=, $pop275, $pop277
; CHECK-NEXT:    i32.const $push153=, 65535
; CHECK-NEXT:    i32.and $push279=, $pop278, $pop153
; CHECK-NEXT:    i8x16.extract_lane_u $push215=, $3, 15
; CHECK-NEXT:    i32.const $push75=, 31
; CHECK-NEXT:    i32.shl $push216=, $pop215, $pop75
; CHECK-NEXT:    i8x16.extract_lane_u $push211=, $3, 14
; CHECK-NEXT:    i32.const $push338=, 1
; CHECK-NEXT:    i32.and $push212=, $pop211, $pop338
; CHECK-NEXT:    i32.const $push71=, 30
; CHECK-NEXT:    i32.shl $push213=, $pop212, $pop71
; CHECK-NEXT:    i8x16.extract_lane_u $push207=, $3, 13
; CHECK-NEXT:    i32.const $push337=, 1
; CHECK-NEXT:    i32.and $push208=, $pop207, $pop337
; CHECK-NEXT:    i32.const $push66=, 29
; CHECK-NEXT:    i32.shl $push209=, $pop208, $pop66
; CHECK-NEXT:    i8x16.extract_lane_u $push203=, $3, 12
; CHECK-NEXT:    i32.const $push336=, 1
; CHECK-NEXT:    i32.and $push204=, $pop203, $pop336
; CHECK-NEXT:    i32.const $push61=, 28
; CHECK-NEXT:    i32.shl $push205=, $pop204, $pop61
; CHECK-NEXT:    i8x16.extract_lane_u $push199=, $3, 11
; CHECK-NEXT:    i32.const $push335=, 1
; CHECK-NEXT:    i32.and $push200=, $pop199, $pop335
; CHECK-NEXT:    i32.const $push56=, 27
; CHECK-NEXT:    i32.shl $push201=, $pop200, $pop56
; CHECK-NEXT:    i8x16.extract_lane_u $push195=, $3, 10
; CHECK-NEXT:    i32.const $push334=, 1
; CHECK-NEXT:    i32.and $push196=, $pop195, $pop334
; CHECK-NEXT:    i32.const $push51=, 26
; CHECK-NEXT:    i32.shl $push197=, $pop196, $pop51
; CHECK-NEXT:    i8x16.extract_lane_u $push191=, $3, 9
; CHECK-NEXT:    i32.const $push333=, 1
; CHECK-NEXT:    i32.and $push192=, $pop191, $pop333
; CHECK-NEXT:    i32.const $push46=, 25
; CHECK-NEXT:    i32.shl $push193=, $pop192, $pop46
; CHECK-NEXT:    i8x16.extract_lane_u $push187=, $3, 8
; CHECK-NEXT:    i32.const $push332=, 1
; CHECK-NEXT:    i32.and $push188=, $pop187, $pop332
; CHECK-NEXT:    i32.const $push331=, 24
; CHECK-NEXT:    i32.shl $push189=, $pop188, $pop331
; CHECK-NEXT:    i32.or $push190=, $pop189, $5
; CHECK-NEXT:    i32.or $push194=, $pop193, $pop190
; CHECK-NEXT:    i32.or $push198=, $pop197, $pop194
; CHECK-NEXT:    i32.or $push202=, $pop201, $pop198
; CHECK-NEXT:    i32.or $push206=, $pop205, $pop202
; CHECK-NEXT:    i32.or $push210=, $pop209, $pop206
; CHECK-NEXT:    i32.or $push214=, $pop213, $pop210
; CHECK-NEXT:    i32.or $push217=, $pop216, $pop214
; CHECK-NEXT:    i32.or $push280=, $pop279, $pop217
; CHECK-NEXT:    i64.extend_i32_u $push281=, $pop280
; CHECK-NEXT:    i8x16.extract_lane_u $push78=, $0, 0
; CHECK-NEXT:    i32.const $push330=, 1
; CHECK-NEXT:    i32.and $push79=, $pop78, $pop330
; CHECK-NEXT:    i8x16.extract_lane_u $push80=, $0, 1
; CHECK-NEXT:    i32.const $push329=, 1
; CHECK-NEXT:    i32.and $push81=, $pop80, $pop329
; CHECK-NEXT:    i32.const $push328=, 1
; CHECK-NEXT:    i32.shl $push82=, $pop81, $pop328
; CHECK-NEXT:    i32.or $push83=, $pop79, $pop82
; CHECK-NEXT:    i8x16.extract_lane_u $push84=, $0, 2
; CHECK-NEXT:    i32.const $push327=, 1
; CHECK-NEXT:    i32.and $push85=, $pop84, $pop327
; CHECK-NEXT:    i32.const $push326=, 2
; CHECK-NEXT:    i32.shl $push87=, $pop85, $pop326
; CHECK-NEXT:    i32.or $push88=, $pop83, $pop87
; CHECK-NEXT:    i8x16.extract_lane_u $push89=, $0, 3
; CHECK-NEXT:    i32.const $push325=, 1
; CHECK-NEXT:    i32.and $push90=, $pop89, $pop325
; CHECK-NEXT:    i32.const $push324=, 3
; CHECK-NEXT:    i32.shl $push92=, $pop90, $pop324
; CHECK-NEXT:    i32.or $push93=, $pop88, $pop92
; CHECK-NEXT:    i8x16.extract_lane_u $push94=, $0, 4
; CHECK-NEXT:    i32.const $push323=, 1
; CHECK-NEXT:    i32.and $push95=, $pop94, $pop323
; CHECK-NEXT:    i32.const $push322=, 4
; CHECK-NEXT:    i32.shl $push97=, $pop95, $pop322
; CHECK-NEXT:    i32.or $push98=, $pop93, $pop97
; CHECK-NEXT:    i8x16.extract_lane_u $push99=, $0, 5
; CHECK-NEXT:    i32.const $push321=, 1
; CHECK-NEXT:    i32.and $push100=, $pop99, $pop321
; CHECK-NEXT:    i32.const $push320=, 5
; CHECK-NEXT:    i32.shl $push102=, $pop100, $pop320
; CHECK-NEXT:    i32.or $push103=, $pop98, $pop102
; CHECK-NEXT:    i8x16.extract_lane_u $push104=, $0, 6
; CHECK-NEXT:    i32.const $push319=, 1
; CHECK-NEXT:    i32.and $push105=, $pop104, $pop319
; CHECK-NEXT:    i32.const $push318=, 6
; CHECK-NEXT:    i32.shl $push107=, $pop105, $pop318
; CHECK-NEXT:    i32.or $push108=, $pop103, $pop107
; CHECK-NEXT:    i8x16.extract_lane_u $push109=, $0, 7
; CHECK-NEXT:    i32.const $push317=, 1
; CHECK-NEXT:    i32.and $push110=, $pop109, $pop317
; CHECK-NEXT:    i32.const $push316=, 7
; CHECK-NEXT:    i32.shl $push112=, $pop110, $pop316
; CHECK-NEXT:    i32.or $push113=, $pop108, $pop112
; CHECK-NEXT:    i8x16.extract_lane_u $push114=, $0, 8
; CHECK-NEXT:    i32.const $push315=, 1
; CHECK-NEXT:    i32.and $push115=, $pop114, $pop315
; CHECK-NEXT:    i32.const $push314=, 8
; CHECK-NEXT:    i32.shl $push117=, $pop115, $pop314
; CHECK-NEXT:    i32.or $push118=, $pop113, $pop117
; CHECK-NEXT:    i8x16.extract_lane_u $push119=, $0, 9
; CHECK-NEXT:    i32.const $push313=, 1
; CHECK-NEXT:    i32.and $push120=, $pop119, $pop313
; CHECK-NEXT:    i32.const $push312=, 9
; CHECK-NEXT:    i32.shl $push122=, $pop120, $pop312
; CHECK-NEXT:    i32.or $push123=, $pop118, $pop122
; CHECK-NEXT:    i8x16.extract_lane_u $push124=, $0, 10
; CHECK-NEXT:    i32.const $push311=, 1
; CHECK-NEXT:    i32.and $push125=, $pop124, $pop311
; CHECK-NEXT:    i32.const $push310=, 10
; CHECK-NEXT:    i32.shl $push127=, $pop125, $pop310
; CHECK-NEXT:    i32.or $push128=, $pop123, $pop127
; CHECK-NEXT:    i8x16.extract_lane_u $push129=, $0, 11
; CHECK-NEXT:    i32.const $push309=, 1
; CHECK-NEXT:    i32.and $push130=, $pop129, $pop309
; CHECK-NEXT:    i32.const $push308=, 11
; CHECK-NEXT:    i32.shl $push132=, $pop130, $pop308
; CHECK-NEXT:    i32.or $push133=, $pop128, $pop132
; CHECK-NEXT:    i8x16.extract_lane_u $push134=, $0, 12
; CHECK-NEXT:    i32.const $push307=, 1
; CHECK-NEXT:    i32.and $push135=, $pop134, $pop307
; CHECK-NEXT:    i32.const $push306=, 12
; CHECK-NEXT:    i32.shl $push137=, $pop135, $pop306
; CHECK-NEXT:    i32.or $push138=, $pop133, $pop137
; CHECK-NEXT:    i8x16.extract_lane_u $push139=, $0, 13
; CHECK-NEXT:    i32.const $push305=, 1
; CHECK-NEXT:    i32.and $push140=, $pop139, $pop305
; CHECK-NEXT:    i32.const $push304=, 13
; CHECK-NEXT:    i32.shl $push142=, $pop140, $pop304
; CHECK-NEXT:    i32.or $push143=, $pop138, $pop142
; CHECK-NEXT:    i8x16.extract_lane_u $push144=, $0, 14
; CHECK-NEXT:    i32.const $push303=, 1
; CHECK-NEXT:    i32.and $push145=, $pop144, $pop303
; CHECK-NEXT:    i32.const $push302=, 14
; CHECK-NEXT:    i32.shl $push147=, $pop145, $pop302
; CHECK-NEXT:    i32.or $push148=, $pop143, $pop147
; CHECK-NEXT:    i8x16.extract_lane_u $push149=, $0, 15
; CHECK-NEXT:    i32.const $push301=, 15
; CHECK-NEXT:    i32.shl $push151=, $pop149, $pop301
; CHECK-NEXT:    i32.or $push152=, $pop148, $pop151
; CHECK-NEXT:    i32.const $push300=, 65535
; CHECK-NEXT:    i32.and $push154=, $pop152, $pop300
; CHECK-NEXT:    i8x16.extract_lane_u $push74=, $1, 15
; CHECK-NEXT:    i32.const $push299=, 31
; CHECK-NEXT:    i32.shl $push76=, $pop74, $pop299
; CHECK-NEXT:    i8x16.extract_lane_u $push69=, $1, 14
; CHECK-NEXT:    i32.const $push298=, 1
; CHECK-NEXT:    i32.and $push70=, $pop69, $pop298
; CHECK-NEXT:    i32.const $push297=, 30
; CHECK-NEXT:    i32.shl $push72=, $pop70, $pop297
; CHECK-NEXT:    i8x16.extract_lane_u $push64=, $1, 13
; CHECK-NEXT:    i32.const $push296=, 1
; CHECK-NEXT:    i32.and $push65=, $pop64, $pop296
; CHECK-NEXT:    i32.const $push295=, 29
; CHECK-NEXT:    i32.shl $push67=, $pop65, $pop295
; CHECK-NEXT:    i8x16.extract_lane_u $push59=, $1, 12
; CHECK-NEXT:    i32.const $push294=, 1
; CHECK-NEXT:    i32.and $push60=, $pop59, $pop294
; CHECK-NEXT:    i32.const $push293=, 28
; CHECK-NEXT:    i32.shl $push62=, $pop60, $pop293
; CHECK-NEXT:    i8x16.extract_lane_u $push54=, $1, 11
; CHECK-NEXT:    i32.const $push292=, 1
; CHECK-NEXT:    i32.and $push55=, $pop54, $pop292
; CHECK-NEXT:    i32.const $push291=, 27
; CHECK-NEXT:    i32.shl $push57=, $pop55, $pop291
; CHECK-NEXT:    i8x16.extract_lane_u $push49=, $1, 10
; CHECK-NEXT:    i32.const $push290=, 1
; CHECK-NEXT:    i32.and $push50=, $pop49, $pop290
; CHECK-NEXT:    i32.const $push289=, 26
; CHECK-NEXT:    i32.shl $push52=, $pop50, $pop289
; CHECK-NEXT:    i8x16.extract_lane_u $push44=, $1, 9
; CHECK-NEXT:    i32.const $push288=, 1
; CHECK-NEXT:    i32.and $push45=, $pop44, $pop288
; CHECK-NEXT:    i32.const $push287=, 25
; CHECK-NEXT:    i32.shl $push47=, $pop45, $pop287
; CHECK-NEXT:    i32.or $push48=, $pop47, $4
; CHECK-NEXT:    i32.or $push53=, $pop52, $pop48
; CHECK-NEXT:    i32.or $push58=, $pop57, $pop53
; CHECK-NEXT:    i32.or $push63=, $pop62, $pop58
; CHECK-NEXT:    i32.or $push68=, $pop67, $pop63
; CHECK-NEXT:    i32.or $push73=, $pop72, $pop68
; CHECK-NEXT:    i32.or $push77=, $pop76, $pop73
; CHECK-NEXT:    i32.or $push155=, $pop154, $pop77
; CHECK-NEXT:    i64.extend_i32_u $push156=, $pop155
; CHECK-NEXT:    i64.and $push282=, $pop281, $pop156
; CHECK-NEXT:    i64.const $push283=, 4294967295
; CHECK-NEXT:    i64.eq $push284=, $pop282, $pop283
; CHECK-NEXT:    return $pop284
  %bits = trunc <64 x i8> %x to <64 x i1>
  %ret = call i1 @llvm.vector.reduce.and.v64i1(<64 x i1> %bits)
  ret i1 %ret
}

;; =====================
;; Test reduce after cmp
;; =====================

define i1 @test_cmp_v16i8(<16 x i8> %x) {
; CHECK-LABEL: test_cmp_v16i8:
; CHECK:         .functype test_cmp_v16i8 (v128) -> (i32)
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    v128.const $push0=, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
; CHECK-NEXT:    i8x16.eq $push1=, $0, $pop0
; CHECK-NEXT:    v128.any_true $push2=, $pop1
; CHECK-NEXT:    return $pop2
  %zero = icmp eq <16 x i8> %x, zeroinitializer
  %ret = call i1 @llvm.vector.reduce.or.v16i1(<16 x i1> %zero)
  ret i1 %ret
}
