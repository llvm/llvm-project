; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=wasm32-unknown-unknown -O3 -filetype=asm | FileCheck %s --check-prefix=W32
; RUN: llc < %s -mtriple=wasm64-unknown-unknown -O3 -filetype=asm | FileCheck %s --check-prefix=W64

; Test basic ct.select functionality for scalar types
define i8 @test_ctselect_i8(i1 %cond, i8 %a, i8 %b) {
; W32-LABEL: test_ctselect_i8:
; W32:         .functype test_ctselect_i8 (i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    local.tee 0
; W32-NEXT:    i32.sub
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.add
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_i8:
; W64:         .functype test_ctselect_i8 (i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    local.tee 0
; W64-NEXT:    i32.sub
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.add
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %result = call i8 @llvm.ct.select.i8(i1 %cond, i8 %a, i8 %b)
  ret i8 %result
}

define i16 @test_ctselect_i16(i1 %cond, i16 %a, i16 %b) {
; W32-LABEL: test_ctselect_i16:
; W32:         .functype test_ctselect_i16 (i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    local.tee 0
; W32-NEXT:    i32.sub
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.add
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_i16:
; W64:         .functype test_ctselect_i16 (i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    local.tee 0
; W64-NEXT:    i32.sub
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.add
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %result = call i16 @llvm.ct.select.i16(i1 %cond, i16 %a, i16 %b)
  ret i16 %result
}

define i32 @test_ctselect_i32(i1 %cond, i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_i32:
; W32:         .functype test_ctselect_i32 (i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_i32:
; W64:         .functype test_ctselect_i32 (i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i64 @test_ctselect_i64(i1 %cond, i64 %a, i64 %b) {
; W32-LABEL: test_ctselect_i64:
; W32:         .functype test_ctselect_i64 (i32, i64, i64) -> (i64)
; W32-NEXT:    .local i64
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i64.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i64.extend_i32_u
; W32-NEXT:    i64.const 1
; W32-NEXT:    i64.and
; W32-NEXT:    i64.const 1
; W32-NEXT:    i64.and
; W32-NEXT:    i64.sub
; W32-NEXT:    local.tee 3
; W32-NEXT:    local.get 1
; W32-NEXT:    i64.and
; W32-NEXT:    local.get 3
; W32-NEXT:    i64.const -1
; W32-NEXT:    i64.xor
; W32-NEXT:    local.get 2
; W32-NEXT:    i64.and
; W32-NEXT:    i64.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_i64:
; W64:         .functype test_ctselect_i64 (i32, i64, i64) -> (i64)
; W64-NEXT:    .local i64
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i64.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i64.extend_i32_u
; W64-NEXT:    i64.const 1
; W64-NEXT:    i64.and
; W64-NEXT:    i64.const 1
; W64-NEXT:    i64.and
; W64-NEXT:    i64.sub
; W64-NEXT:    local.tee 3
; W64-NEXT:    local.get 1
; W64-NEXT:    i64.and
; W64-NEXT:    local.get 3
; W64-NEXT:    i64.const -1
; W64-NEXT:    i64.xor
; W64-NEXT:    local.get 2
; W64-NEXT:    i64.and
; W64-NEXT:    i64.or
; W64-NEXT:    # fallthrough-return
  %result = call i64 @llvm.ct.select.i64(i1 %cond, i64 %a, i64 %b)
  ret i64 %result
}

define ptr @test_ctselect_ptr(i1 %cond, ptr %a, ptr %b) {
; W32-LABEL: test_ctselect_ptr:
; W32:         .functype test_ctselect_ptr (i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_ptr:
; W64:         .functype test_ctselect_ptr (i32, i64, i64) -> (i64)
; W64-NEXT:    .local i64
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i64.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i64.extend_i32_u
; W64-NEXT:    i64.const 1
; W64-NEXT:    i64.and
; W64-NEXT:    i64.const 1
; W64-NEXT:    i64.and
; W64-NEXT:    i64.sub
; W64-NEXT:    local.tee 3
; W64-NEXT:    local.get 1
; W64-NEXT:    i64.and
; W64-NEXT:    local.get 3
; W64-NEXT:    i64.const -1
; W64-NEXT:    i64.xor
; W64-NEXT:    local.get 2
; W64-NEXT:    i64.and
; W64-NEXT:    i64.or
; W64-NEXT:    # fallthrough-return
  %result = call ptr @llvm.ct.select.p0(i1 %cond, ptr %a, ptr %b)
  ret ptr %result
}

; Test with constant conditions
define i32 @test_ctselect_const_true(i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_const_true:
; W32:         .functype test_ctselect_const_true (i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    local.get 0
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_const_true:
; W64:         .functype test_ctselect_const_true (i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    local.get 0
; W64-NEXT:    # fallthrough-return
  %result = call i32 @llvm.ct.select.i32(i1 true, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_const_false(i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_const_false:
; W32:         .functype test_ctselect_const_false (i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    local.get 1
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_const_false:
; W64:         .functype test_ctselect_const_false (i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    local.get 1
; W64-NEXT:    # fallthrough-return
  %result = call i32 @llvm.ct.select.i32(i1 false, i32 %a, i32 %b)
  ret i32 %result
}

; Test with comparison conditions
define i32 @test_ctselect_icmp_eq(i32 %x, i32 %y, i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_icmp_eq:
; W32:         .functype test_ctselect_icmp_eq (i32, i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.eq
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 1
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 3
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_icmp_eq:
; W64:         .functype test_ctselect_icmp_eq (i32, i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.eq
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 1
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 3
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %cond = icmp eq i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_icmp_ne(i32 %x, i32 %y, i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_icmp_ne:
; W32:         .functype test_ctselect_icmp_ne (i32, i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.ne
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 1
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 3
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_icmp_ne:
; W64:         .functype test_ctselect_icmp_ne (i32, i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.ne
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 1
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 3
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %cond = icmp ne i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_icmp_slt(i32 %x, i32 %y, i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_icmp_slt:
; W32:         .functype test_ctselect_icmp_slt (i32, i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.lt_s
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 1
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 3
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_icmp_slt:
; W64:         .functype test_ctselect_icmp_slt (i32, i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.lt_s
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 1
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 3
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %cond = icmp slt i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

define i32 @test_ctselect_icmp_ult(i32 %x, i32 %y, i32 %a, i32 %b) {
; W32-LABEL: test_ctselect_icmp_ult:
; W32:         .functype test_ctselect_icmp_ult (i32, i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.lt_u
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 1
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 3
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_icmp_ult:
; W64:         .functype test_ctselect_icmp_ult (i32, i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.lt_u
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 1
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 3
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %cond = icmp ult i32 %x, %y
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

; Test with memory operands
define i32 @test_ctselect_load(i1 %cond, ptr %p1, ptr %p2) {
; W32-LABEL: test_ctselect_load:
; W32:         .functype test_ctselect_load (i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.load 0
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.load 0
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_load:
; W64:         .functype test_ctselect_load (i32, i64, i64) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.load 0
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.load 0
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %a = load i32, ptr %p1
  %b = load i32, ptr %p2
  %result = call i32 @llvm.ct.select.i32(i1 %cond, i32 %a, i32 %b)
  ret i32 %result
}

; Test nested ctselect calls
define i32 @test_ctselect_nested(i1 %cond1, i1 %cond2, i32 %a, i32 %b, i32 %c) {
; W32-LABEL: test_ctselect_nested:
; W32:         .functype test_ctselect_nested (i32, i32, i32, i32, i32) -> (i32)
; W32-NEXT:  # %bb.0:
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 0
; W32-NEXT:    i32.const 0
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.const 1
; W32-NEXT:    i32.and
; W32-NEXT:    i32.sub
; W32-NEXT:    local.tee 1
; W32-NEXT:    local.get 2
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 1
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 3
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    i32.and
; W32-NEXT:    local.get 0
; W32-NEXT:    i32.const -1
; W32-NEXT:    i32.xor
; W32-NEXT:    local.get 4
; W32-NEXT:    i32.and
; W32-NEXT:    i32.or
; W32-NEXT:    # fallthrough-return
;
; W64-LABEL: test_ctselect_nested:
; W64:         .functype test_ctselect_nested (i32, i32, i32, i32, i32) -> (i32)
; W64-NEXT:  # %bb.0:
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 0
; W64-NEXT:    i32.const 0
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.const 1
; W64-NEXT:    i32.and
; W64-NEXT:    i32.sub
; W64-NEXT:    local.tee 1
; W64-NEXT:    local.get 2
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 1
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 3
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    i32.and
; W64-NEXT:    local.get 0
; W64-NEXT:    i32.const -1
; W64-NEXT:    i32.xor
; W64-NEXT:    local.get 4
; W64-NEXT:    i32.and
; W64-NEXT:    i32.or
; W64-NEXT:    # fallthrough-return
  %inner = call i32 @llvm.ct.select.i32(i1 %cond2, i32 %a, i32 %b)
  %result = call i32 @llvm.ct.select.i32(i1 %cond1, i32 %inner, i32 %c)
  ret i32 %result
}

; Declare the intrinsics
declare i8 @llvm.ct.select.i8(i1, i8, i8)
declare i16 @llvm.ct.select.i16(i1, i16, i16)
declare i32 @llvm.ct.select.i32(i1, i32, i32)
declare i64 @llvm.ct.select.i64(i1, i64, i64)
declare ptr @llvm.ct.select.p0(i1, ptr, ptr)
