; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=thumb-eabi -mcpu=arm1156t2-s -mattr=+thumb2 %s -o - | FileCheck %s

define i64 @f1(i64 %a, i64 %b) {
; CHECK-LABEL: f1:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs r0, r0, r2
; CHECK-NEXT:    sbcs r1, r3
; CHECK-NEXT:    bx lr
    %tmp = sub i64 %a, %b
    ret i64 %tmp
}

; 734439407618 = 0x000000ab00000002
define i64 @f2(i64 %a) {
; CHECK-LABEL: f2:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs r0, #2
; CHECK-NEXT:    sbc r1, r1, #171
; CHECK-NEXT:    bx lr
    %tmp = sub i64 %a, 734439407618
    ret i64 %tmp
}

; 5066626890203138 = 0x0012001200000002
define i64 @f3(i64 %a) {
; CHECK-LABEL: f3:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs r0, #2
; CHECK-NEXT:    sbc r1, r1, #1179666
; CHECK-NEXT:    bx lr
    %tmp = sub i64 %a, 5066626890203138
    ret i64 %tmp
}

; 3747052064576897026 = 0x3400340000000002
define i64 @f4(i64 %a) {
; CHECK-LABEL: f4:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs r0, #2
; CHECK-NEXT:    sbc r1, r1, #872428544
; CHECK-NEXT:    bx lr
    %tmp = sub i64 %a, 3747052064576897026
    ret i64 %tmp
}

; 6221254862626095106 = 0x5656565600000002
define i64 @f5(i64 %a) {
; CHECK-LABEL: f5:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs r0, #2
; CHECK-NEXT:    adc r1, r1, #-1448498775
; CHECK-NEXT:    bx lr
    %tmp = sub i64 %a, 6221254862626095106
    ret i64 %tmp
}

; 287104476244869122 = 0x03fc000000000002
define i64 @f6(i64 %a) {
; CHECK-LABEL: f6:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    subs r0, #2
; CHECK-NEXT:    sbc r1, r1, #66846720
; CHECK-NEXT:    bx lr
    %tmp = sub i64 %a, 287104476244869122
    ret i64 %tmp
}

; Example from numerics code that manually computes wider-than-64 values.
;
define i64 @livecarry(i64 %carry, i32 %digit) nounwind {
; CHECK-LABEL: livecarry:
; CHECK:       @ %bb.0:
; CHECK-NEXT:    cmn r0, r2
; CHECK-NEXT:    mov.w r3, #0
; CHECK-NEXT:    adcs r0, r1, #0
; CHECK-NEXT:    adc r1, r3, #0
; CHECK-NEXT:    bx lr
  %ch = lshr i64 %carry, 32
  %cl = and i64 %carry, 4294967295
  %truncdigit = zext i32 %digit to i64
  %prod = add i64 %cl, %truncdigit
  %ph = lshr i64 %prod, 32
  %carryresult = add i64 %ch, %ph
  ret i64 %carryresult
}
