; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=thumbv8.1m.main -mattr=+lob --verify-machineinstrs %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-NOMVE
; RUN: llc -mtriple=thumbv8.1m.main -mattr=+lob,+mve --verify-machineinstrs %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-MVE

; Check that loop strength reduction understands that it can fold a sub into an
; le instruction and reduces the cost appropriately, causing it to do this no
; matter the preferred addressing mode.

define void @test(ptr %dst, i32 %n) {
; CHECK-LABEL: test:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    push {r7, lr}
; CHECK-NEXT:    add.w r12, r0, r1, lsl #1
; CHECK-NEXT:    movs r2, #0
; CHECK-NEXT:    movs r3, #0
; CHECK-NEXT:  .LBB0_1: @ %outer_loop
; CHECK-NEXT:    @ =>This Loop Header: Depth=1
; CHECK-NEXT:    @ Child Loop BB0_2 Depth 2
; CHECK-NEXT:    dls lr, r1
; CHECK-NEXT:    mov r0, r12
; CHECK-NEXT:  .LBB0_2: @ %inner_loop
; CHECK-NEXT:    @ Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    @ => This Inner Loop Header: Depth=2
; CHECK-NEXT:    strh r2, [r0], #2
; CHECK-NEXT:    le lr, .LBB0_2
; CHECK-NEXT:  @ %bb.3: @ %outer_loop_end
; CHECK-NEXT:    @ in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    adds r3, #1
; CHECK-NEXT:    cmp r3, r1
; CHECK-NEXT:    it eq
; CHECK-NEXT:    popeq {r7, pc}
; CHECK-NEXT:    b .LBB0_1
entry:
  br label %outer_loop

outer_loop:
  %idx_outer = phi i32 [ %idx_outer.inc, %outer_loop_end ], [ 0, %entry ]
  br label %inner_loop

inner_loop:
  %idx_inner = phi i32 [ 0, %outer_loop ], [ %idx_inner.inc, %inner_loop ]
  %add = add i32 %idx_inner, %n
  %gep = getelementptr inbounds i16, ptr %dst, i32 %add
  store i16 0, ptr %gep, align 2
  %idx_inner.inc = add nuw nsw i32 %idx_inner, 1
  %cond_inner = icmp eq i32 %idx_inner.inc, %n
  br i1 %cond_inner, label %outer_loop_end, label %inner_loop

outer_loop_end:
  %idx_outer.inc = add nuw i32 %idx_outer, 1
  %cond_outer = icmp eq i32 %idx_outer.inc, %n
  br i1 %cond_outer, label %exit, label %outer_loop

exit:
  ret void
}

define void @test_optsize(ptr %dst, i32 %n) optsize {
; CHECK-LABEL: test_optsize:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    push {r7, lr}
; CHECK-NEXT:    add.w r12, r0, r1, lsl #1
; CHECK-NEXT:    movs r2, #0
; CHECK-NEXT:    movs r3, #0
; CHECK-NEXT:  .LBB1_1: @ %outer_loop
; CHECK-NEXT:    @ =>This Loop Header: Depth=1
; CHECK-NEXT:    @ Child Loop BB1_2 Depth 2
; CHECK-NEXT:    dls lr, r1
; CHECK-NEXT:    mov r0, r12
; CHECK-NEXT:  .LBB1_2: @ %inner_loop
; CHECK-NEXT:    @ Parent Loop BB1_1 Depth=1
; CHECK-NEXT:    @ => This Inner Loop Header: Depth=2
; CHECK-NEXT:    strh r2, [r0], #2
; CHECK-NEXT:    le lr, .LBB1_2
; CHECK-NEXT:  @ %bb.3: @ %outer_loop_end
; CHECK-NEXT:    @ in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    adds r3, #1
; CHECK-NEXT:    cmp r3, r1
; CHECK-NEXT:    it eq
; CHECK-NEXT:    popeq {r7, pc}
; CHECK-NEXT:    b .LBB1_1
entry:
  br label %outer_loop

outer_loop:
  %idx_outer = phi i32 [ %idx_outer.inc, %outer_loop_end ], [ 0, %entry ]
  br label %inner_loop

inner_loop:
  %idx_inner = phi i32 [ 0, %outer_loop ], [ %idx_inner.inc, %inner_loop ]
  %add = add i32 %idx_inner, %n
  %gep = getelementptr inbounds i16, ptr %dst, i32 %add
  store i16 0, ptr %gep, align 2
  %idx_inner.inc = add nuw nsw i32 %idx_inner, 1
  %cond_inner = icmp eq i32 %idx_inner.inc, %n
  br i1 %cond_inner, label %outer_loop_end, label %inner_loop

outer_loop_end:
  %idx_outer.inc = add nuw i32 %idx_outer, 1
  %cond_outer = icmp eq i32 %idx_outer.inc, %n
  br i1 %cond_outer, label %exit, label %outer_loop

exit:
  ret void
}

; Check that when we can't use LE we don't discount the cost of a sub
; instruction, so we only get it when postincrement is the preferred addressing
; mode (i.e. when we have mve).

declare void @otherfn()

define void @test_no_le(ptr %dst, i32 %n) {
; CHECK-LABEL: test_no_le:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    push.w {r4, r5, r6, r7, r8, r9, lr}
; CHECK-NEXT:    sub sp, #4
; CHECK-NEXT:    add.w r8, r0, r1, lsl #1
; CHECK-NEXT:    mov r9, r1
; CHECK-NEXT:    movs r6, #0
; CHECK-NEXT:    movs r7, #0
; CHECK-NEXT:  .LBB2_1: @ %outer_loop
; CHECK-NEXT:    @ =>This Loop Header: Depth=1
; CHECK-NEXT:    @ Child Loop BB2_2 Depth 2
; CHECK-NEXT:    mov r5, r8
; CHECK-NEXT:    mov r4, r9
; CHECK-NEXT:  .LBB2_2: @ %inner_loop
; CHECK-NEXT:    @ Parent Loop BB2_1 Depth=1
; CHECK-NEXT:    @ => This Inner Loop Header: Depth=2
; CHECK-NEXT:    bl otherfn
; CHECK-NEXT:    strh r6, [r5], #2
; CHECK-NEXT:    subs r4, #1
; CHECK-NEXT:    bne .LBB2_2
; CHECK-NEXT:  @ %bb.3: @ %outer_loop_end
; CHECK-NEXT:    @ in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    adds r7, #1
; CHECK-NEXT:    cmp r7, r9
; CHECK-NEXT:    bne .LBB2_1
; CHECK-NEXT:  @ %bb.4: @ %exit
; CHECK-NEXT:    add sp, #4
; CHECK-NEXT:    pop.w {r4, r5, r6, r7, r8, r9, pc}
entry:
  br label %outer_loop

outer_loop:
  %idx_outer = phi i32 [ %idx_outer.inc, %outer_loop_end ], [ 0, %entry ]
  br label %inner_loop

inner_loop:
  %idx_inner = phi i32 [ 0, %outer_loop ], [ %idx_inner.inc, %inner_loop ]
  call void @otherfn()
  %add = add i32 %idx_inner, %n
  %gep = getelementptr inbounds i16, ptr %dst, i32 %add
  store i16 0, ptr %gep, align 2
  %idx_inner.inc = add nuw nsw i32 %idx_inner, 1
  %cond_inner = icmp eq i32 %idx_inner.inc, %n
  br i1 %cond_inner, label %outer_loop_end, label %inner_loop

outer_loop_end:
  %idx_outer.inc = add nuw i32 %idx_outer, 1
  %cond_outer = icmp eq i32 %idx_outer.inc, %n
  br i1 %cond_outer, label %exit, label %outer_loop

exit:
  ret void
}

define void @test_no_le_optsize(ptr %dst, i32 %n) optsize {
; CHECK-LABEL: test_no_le_optsize:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    push.w {r4, r5, r6, r7, r8, r9, lr}
; CHECK-NEXT:    sub sp, #4
; CHECK-NEXT:    add.w r8, r0, r1, lsl #1
; CHECK-NEXT:    mov r9, r1
; CHECK-NEXT:    movs r6, #0
; CHECK-NEXT:    movs r7, #0
; CHECK-NEXT:  .LBB3_1: @ %outer_loop
; CHECK-NEXT:    @ =>This Loop Header: Depth=1
; CHECK-NEXT:    @ Child Loop BB3_2 Depth 2
; CHECK-NEXT:    mov r5, r8
; CHECK-NEXT:    mov r4, r9
; CHECK-NEXT:  .LBB3_2: @ %inner_loop
; CHECK-NEXT:    @ Parent Loop BB3_1 Depth=1
; CHECK-NEXT:    @ => This Inner Loop Header: Depth=2
; CHECK-NEXT:    bl otherfn
; CHECK-NEXT:    strh r6, [r5], #2
; CHECK-NEXT:    subs r4, #1
; CHECK-NEXT:    bne .LBB3_2
; CHECK-NEXT:  @ %bb.3: @ %outer_loop_end
; CHECK-NEXT:    @ in Loop: Header=BB3_1 Depth=1
; CHECK-NEXT:    adds r7, #1
; CHECK-NEXT:    cmp r7, r9
; CHECK-NEXT:    bne .LBB3_1
; CHECK-NEXT:  @ %bb.4: @ %exit
; CHECK-NEXT:    add sp, #4
; CHECK-NEXT:    pop.w {r4, r5, r6, r7, r8, r9, pc}
entry:
  br label %outer_loop

outer_loop:
  %idx_outer = phi i32 [ %idx_outer.inc, %outer_loop_end ], [ 0, %entry ]
  br label %inner_loop

inner_loop:
  %idx_inner = phi i32 [ 0, %outer_loop ], [ %idx_inner.inc, %inner_loop ]
  call void @otherfn()
  %add = add i32 %idx_inner, %n
  %gep = getelementptr inbounds i16, ptr %dst, i32 %add
  store i16 0, ptr %gep, align 2
  %idx_inner.inc = add nuw nsw i32 %idx_inner, 1
  %cond_inner = icmp eq i32 %idx_inner.inc, %n
  br i1 %cond_inner, label %outer_loop_end, label %inner_loop

outer_loop_end:
  %idx_outer.inc = add nuw i32 %idx_outer, 1
  %cond_outer = icmp eq i32 %idx_outer.inc, %n
  br i1 %cond_outer, label %exit, label %outer_loop

exit:
  ret void
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-MVE: {{.*}}
; CHECK-NOMVE: {{.*}}
