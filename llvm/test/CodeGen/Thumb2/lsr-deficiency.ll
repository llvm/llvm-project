; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=thumbv7-apple-darwin10 -relocation-model=pic | FileCheck %s
; rdar://7387640

; This now reduces to a single induction variable.

@G = external global i32                          ; <ptr> [#uses=2]
@array = external global ptr                     ; <ptr> [#uses=1]

define void @t() nounwind optsize {
; CHECK-LABEL: t:
; CHECK:       @ %bb.0: @ %entry
; CHECK-NEXT:    movw r0, :lower16:(L_G$non_lazy_ptr-(LPC0_0+4))
; CHECK-NEXT:    mov.w r2, #1000
; CHECK-NEXT:    movt r0, :upper16:(L_G$non_lazy_ptr-(LPC0_0+4))
; CHECK-NEXT:  LPC0_0:
; CHECK-NEXT:    add r0, pc
; CHECK-NEXT:    ldr.w r9, [r0]
; CHECK-NEXT:    ldr.w r1, [r9]
; CHECK-NEXT:    movw r3, :lower16:(L_array$non_lazy_ptr-(LPC0_1+4))
; CHECK-NEXT:    movt r3, :upper16:(L_array$non_lazy_ptr-(LPC0_1+4))
; CHECK-NEXT:  LPC0_1:
; CHECK-NEXT:    add r3, pc
; CHECK-NEXT:    ldr r3, [r3]
; CHECK-NEXT:  LBB0_1: @ %bb
; CHECK-NEXT:    @ =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldr r0, [r3]
; CHECK-NEXT:    ldr.w r0, [r0, r2, lsl #2]
; CHECK-NEXT:    subs r2, #1
; CHECK-NEXT:    cmn.w r2, #1
; CHECK-NEXT:    add r1, r0
; CHECK-NEXT:    str.w r1, [r9]
; CHECK-NEXT:    bne LBB0_1
; CHECK-NEXT:  @ %bb.2: @ %return
; CHECK-NEXT:    bx lr
entry:
  %.pre = load i32, ptr @G, align 4                   ; <i32> [#uses=1]
  br label %bb

bb:                                               ; preds = %bb, %entry

  %0 = phi i32 [ %.pre, %entry ], [ %3, %bb ]     ; <i32> [#uses=1]
  %indvar = phi i32 [ 0, %entry ], [ %indvar.next, %bb ] ; <i32> [#uses=2]
  %tmp5 = sub i32 1000, %indvar                   ; <i32> [#uses=1]
  %1 = load ptr, ptr @array, align 4                 ; <ptr> [#uses=1]
  %scevgep = getelementptr i32, ptr %1, i32 %tmp5     ; <ptr> [#uses=1]
  %2 = load i32, ptr %scevgep, align 4                ; <i32> [#uses=1]
  %3 = add nsw i32 %2, %0                         ; <i32> [#uses=2]
  store i32 %3, ptr @G, align 4
  %indvar.next = add i32 %indvar, 1               ; <i32> [#uses=2]
  %exitcond = icmp eq i32 %indvar.next, 1001      ; <i1> [#uses=1]
  br i1 %exitcond, label %return, label %bb

return:                                           ; preds = %bb
  ret void
}
