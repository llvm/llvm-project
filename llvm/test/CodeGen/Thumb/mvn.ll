; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=thumbv6m-eabi -asm-verbose=false %s -o - | FileCheck %s

define void @test8(ptr %a) {
  %x = load i8, ptr %a
  %xn = xor i8 %x, -1
  store i8 %xn, ptr %a
  ret void
}

define void @test8_2(ptr %a, ptr %b) {
  %x = load i8, ptr %a
  %y = load i8, ptr %b
  %xn = xor i8 %x, -1
  %yn = xor i8 %y, -1
  store i8 %xn, ptr %a
  store i8 %yn, ptr %b
  ret void
}

define void @loop8(ptr %a) {
entry:
  br label %for.body

for.body:
  %i = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i8, ptr %a, i32 %i
  %x = load i8, ptr %arrayidx
  %xn = xor i8 %x, -1
  store i8 %xn, ptr %arrayidx
  %inc = add nuw nsw i32 %i, 1
  %exitcond = icmp eq i32 %inc, 10
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

for.cond.cleanup:
  ret void
}

define void @loop8_2(ptr %a, ptr %b) {
entry:
  br label %for.body

for.body:
  %i = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i8, ptr %a, i32 %i
  %arrayidx2 = getelementptr inbounds i8, ptr %b, i32 %i
  %x = load i8, ptr %arrayidx
  %y = load i8, ptr %arrayidx2
  %xn = xor i8 %x, -1
  %yn = xor i8 %y, -1
  store i8 %xn, ptr %arrayidx
  store i8 %yn, ptr %arrayidx2
  %inc = add nuw nsw i32 %i, 1
  %exitcond = icmp eq i32 %inc, 10
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

for.cond.cleanup:
  ret void
}

define void @test32(ptr %a) {
  %x = load i32, ptr %a
  %xn = xor i32 %x, -1
  store i32 %xn, ptr %a
  ret void
}

define void @test32_2(ptr %a, ptr %b) {
  %x = load i32, ptr %a
  %y = load i32, ptr %b
  %xn = xor i32 %x, -1
  %yn = xor i32 %y, -1
  store i32 %xn, ptr %a
  store i32 %yn, ptr %b
  ret void
}

define void @loop32(ptr %a) {
entry:
  br label %for.body

for.body:
  %i = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %a, i32 %i
  %x = load i32, ptr %arrayidx
  %xn = xor i32 %x, -1
  store i32 %xn, ptr %arrayidx
  %inc = add nuw nsw i32 %i, 1
  %exitcond = icmp eq i32 %inc, 10
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

for.cond.cleanup:
  ret void
}

define void @loop32_2(ptr %a, ptr %b) {
entry:
  br label %for.body

for.body:
  %i = phi i32 [ 0, %entry ], [ %inc, %for.body ]
  %arrayidx = getelementptr inbounds i32, ptr %a, i32 %i
  %arrayidx2 = getelementptr inbounds i32, ptr %b, i32 %i
  %x = load i32, ptr %arrayidx
  %y = load i32, ptr %arrayidx2
  %xn = xor i32 %x, -1
  %yn = xor i32 %y, -1
  store i32 %xn, ptr %arrayidx
  store i32 %yn, ptr %arrayidx2
  %inc = add nuw nsw i32 %i, 1
  %exitcond = icmp eq i32 %inc, 10
  br i1 %exitcond, label %for.cond.cleanup, label %for.body

for.cond.cleanup:
  ret void
}


define void @test128(ptr %a) {
  %x = load i128, ptr %a
  %xn = xor i128 %x, 123456789123456789123456789
  store i128 %xn, ptr %a
  ret void
}

;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
