; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64-unknown-unknown < %s | FileCheck %s --check-prefixes=CHECK,CHECK-SD
; RUN: llc -mtriple=aarch64-unknown-unknown -global-isel < %s | FileCheck %s --check-prefixes=CHECK,CHECK-GI

; We are looking for the following pattern here:
;   (X & (C << Y)) ==/!= 0
; It may be optimal to hoist the constant:
;   ((X l>> Y) & C) ==/!= 0

;------------------------------------------------------------------------------;
; A few scalar test
;------------------------------------------------------------------------------;

; i8 scalar

define i1 @scalar_i8_signbit_eq(i8 %x, i8 %y) nounwind {
; CHECK-SD-LABEL: scalar_i8_signbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    tst w8, #0x80
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i8_signbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #-128 // =0xffffff80
; CHECK-GI-NEXT:    and w9, w1, #0xff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xff
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i8 128, %y
  %t1 = and i8 %t0, %x
  %res = icmp eq i8 %t1, 0
  ret i1 %res
}

define i1 @scalar_i8_lowestbit_eq(i8 %x, i8 %y) nounwind {
; CHECK-SD-LABEL: scalar_i8_lowestbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    tst w8, #0x1
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i8_lowestbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #1 // =0x1
; CHECK-GI-NEXT:    and w9, w1, #0xff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xff
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i8 1, %y
  %t1 = and i8 %t0, %x
  %res = icmp eq i8 %t1, 0
  ret i1 %res
}

define i1 @scalar_i8_bitsinmiddle_eq(i8 %x, i8 %y) nounwind {
; CHECK-SD-LABEL: scalar_i8_bitsinmiddle_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    tst w8, #0x18
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i8_bitsinmiddle_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #24 // =0x18
; CHECK-GI-NEXT:    and w9, w1, #0xff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xff
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i8 24, %y
  %t1 = and i8 %t0, %x
  %res = icmp eq i8 %t1, 0
  ret i1 %res
}

; i16 scalar

define i1 @scalar_i16_signbit_eq(i16 %x, i16 %y) nounwind {
; CHECK-SD-LABEL: scalar_i16_signbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xffff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    tst w8, #0x8000
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i16_signbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #-32768 // =0xffff8000
; CHECK-GI-NEXT:    and w9, w1, #0xffff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xffff
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i16 32768, %y
  %t1 = and i16 %t0, %x
  %res = icmp eq i16 %t1, 0
  ret i1 %res
}

define i1 @scalar_i16_lowestbit_eq(i16 %x, i16 %y) nounwind {
; CHECK-SD-LABEL: scalar_i16_lowestbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xffff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    tst w8, #0x1
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i16_lowestbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #1 // =0x1
; CHECK-GI-NEXT:    and w9, w1, #0xffff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xffff
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i16 1, %y
  %t1 = and i16 %t0, %x
  %res = icmp eq i16 %t1, 0
  ret i1 %res
}

define i1 @scalar_i16_bitsinmiddle_eq(i16 %x, i16 %y) nounwind {
; CHECK-SD-LABEL: scalar_i16_bitsinmiddle_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xffff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    tst w8, #0xff0
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i16_bitsinmiddle_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #4080 // =0xff0
; CHECK-GI-NEXT:    and w9, w1, #0xffff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xffff
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i16 4080, %y
  %t1 = and i16 %t0, %x
  %res = icmp eq i16 %t1, 0
  ret i1 %res
}

; i32 scalar

define i1 @scalar_i32_signbit_eq(i32 %x, i32 %y) nounwind {
; CHECK-SD-LABEL: scalar_i32_signbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    lsr w8, w0, w1
; CHECK-SD-NEXT:    tst w8, #0x80000000
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i32_signbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #-2147483648 // =0x80000000
; CHECK-GI-NEXT:    lsl w8, w8, w1
; CHECK-GI-NEXT:    tst w8, w0
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i32 2147483648, %y
  %t1 = and i32 %t0, %x
  %res = icmp eq i32 %t1, 0
  ret i1 %res
}

define i1 @scalar_i32_lowestbit_eq(i32 %x, i32 %y) nounwind {
; CHECK-SD-LABEL: scalar_i32_lowestbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    lsr w8, w0, w1
; CHECK-SD-NEXT:    tst w8, #0x1
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i32_lowestbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #1 // =0x1
; CHECK-GI-NEXT:    lsl w8, w8, w1
; CHECK-GI-NEXT:    tst w8, w0
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i32 1, %y
  %t1 = and i32 %t0, %x
  %res = icmp eq i32 %t1, 0
  ret i1 %res
}

define i1 @scalar_i32_bitsinmiddle_eq(i32 %x, i32 %y) nounwind {
; CHECK-SD-LABEL: scalar_i32_bitsinmiddle_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    lsr w8, w0, w1
; CHECK-SD-NEXT:    tst w8, #0xffff00
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i32_bitsinmiddle_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #16776960 // =0xffff00
; CHECK-GI-NEXT:    lsl w8, w8, w1
; CHECK-GI-NEXT:    tst w8, w0
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i32 16776960, %y
  %t1 = and i32 %t0, %x
  %res = icmp eq i32 %t1, 0
  ret i1 %res
}

; i64 scalar

define i1 @scalar_i64_signbit_eq(i64 %x, i64 %y) nounwind {
; CHECK-SD-LABEL: scalar_i64_signbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    lsr x8, x0, x1
; CHECK-SD-NEXT:    tst x8, #0x8000000000000000
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i64_signbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov x8, #-9223372036854775808 // =0x8000000000000000
; CHECK-GI-NEXT:    lsl x8, x8, x1
; CHECK-GI-NEXT:    tst x8, x0
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i64 9223372036854775808, %y
  %t1 = and i64 %t0, %x
  %res = icmp eq i64 %t1, 0
  ret i1 %res
}

define i1 @scalar_i64_lowestbit_eq(i64 %x, i64 %y) nounwind {
; CHECK-SD-LABEL: scalar_i64_lowestbit_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    lsr x8, x0, x1
; CHECK-SD-NEXT:    tst x8, #0x1
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i64_lowestbit_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #1 // =0x1
; CHECK-GI-NEXT:    lsl x8, x8, x1
; CHECK-GI-NEXT:    tst x8, x0
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i64 1, %y
  %t1 = and i64 %t0, %x
  %res = icmp eq i64 %t1, 0
  ret i1 %res
}

define i1 @scalar_i64_bitsinmiddle_eq(i64 %x, i64 %y) nounwind {
; CHECK-SD-LABEL: scalar_i64_bitsinmiddle_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    lsr x8, x0, x1
; CHECK-SD-NEXT:    tst x8, #0xffffffff0000
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i64_bitsinmiddle_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov x8, #281474976645120 // =0xffffffff0000
; CHECK-GI-NEXT:    lsl x8, x8, x1
; CHECK-GI-NEXT:    tst x8, x0
; CHECK-GI-NEXT:    cset w0, eq
; CHECK-GI-NEXT:    ret
  %t0 = shl i64 281474976645120, %y
  %t1 = and i64 %t0, %x
  %res = icmp eq i64 %t1, 0
  ret i1 %res
}

;------------------------------------------------------------------------------;
; A few trivial vector tests
;------------------------------------------------------------------------------;

define <4 x i1> @vec_4xi32_splat_eq(<4 x i32> %x, <4 x i32> %y) nounwind {
; CHECK-LABEL: vec_4xi32_splat_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v2.4s, #1
; CHECK-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-NEXT:    xtn v0.4h, v0.4s
; CHECK-NEXT:    ret
  %t0 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %y
  %t1 = and <4 x i32> %t0, %x
  %res = icmp eq <4 x i32> %t1, <i32 0, i32 0, i32 0, i32 0>
  ret <4 x i1> %res
}

define <4 x i1> @vec_4xi32_nonsplat_eq(<4 x i32> %x, <4 x i32> %y) nounwind {
; CHECK-LABEL: vec_4xi32_nonsplat_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI13_0
; CHECK-NEXT:    ldr q2, [x8, :lo12:.LCPI13_0]
; CHECK-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-NEXT:    xtn v0.4h, v0.4s
; CHECK-NEXT:    ret
  %t0 = shl <4 x i32> <i32 0, i32 1, i32 16776960, i32 2147483648>, %y
  %t1 = and <4 x i32> %t0, %x
  %res = icmp eq <4 x i32> %t1, <i32 0, i32 0, i32 0, i32 0>
  ret <4 x i1> %res
}

define <4 x i1> @vec_4xi32_nonsplat_undef0_eq(<4 x i32> %x, <4 x i32> %y) nounwind {
; CHECK-SD-LABEL: vec_4xi32_nonsplat_undef0_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v2.4s, #1
; CHECK-SD-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-SD-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-SD-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-SD-NEXT:    xtn v0.4h, v0.4s
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: vec_4xi32_nonsplat_undef0_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #1 // =0x1
; CHECK-GI-NEXT:    fmov s2, w8
; CHECK-GI-NEXT:    mov v2.s[1], w8
; CHECK-GI-NEXT:    mov v2.s[3], w8
; CHECK-GI-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-GI-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-GI-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-GI-NEXT:    xtn v0.4h, v0.4s
; CHECK-GI-NEXT:    ret
  %t0 = shl <4 x i32> <i32 1, i32 1, i32 undef, i32 1>, %y
  %t1 = and <4 x i32> %t0, %x
  %res = icmp eq <4 x i32> %t1, <i32 0, i32 0, i32 0, i32 0>
  ret <4 x i1> %res
}
define <4 x i1> @vec_4xi32_nonsplat_undef1_eq(<4 x i32> %x, <4 x i32> %y) nounwind {
; CHECK-SD-LABEL: vec_4xi32_nonsplat_undef1_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v2.4s, #1
; CHECK-SD-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-SD-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-SD-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-SD-NEXT:    xtn v0.4h, v0.4s
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: vec_4xi32_nonsplat_undef1_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi d3, #0000000000000000
; CHECK-GI-NEXT:    movi v2.4s, #1
; CHECK-GI-NEXT:    mov v3.s[1], wzr
; CHECK-GI-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-GI-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-GI-NEXT:    mov v3.s[3], wzr
; CHECK-GI-NEXT:    cmeq v0.4s, v0.4s, v3.4s
; CHECK-GI-NEXT:    xtn v0.4h, v0.4s
; CHECK-GI-NEXT:    ret
  %t0 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %y
  %t1 = and <4 x i32> %t0, %x
  %res = icmp eq <4 x i32> %t1, <i32 0, i32 0, i32 undef, i32 0>
  ret <4 x i1> %res
}
define <4 x i1> @vec_4xi32_nonsplat_undef2_eq(<4 x i32> %x, <4 x i32> %y) nounwind {
; CHECK-SD-LABEL: vec_4xi32_nonsplat_undef2_eq:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v2.4s, #1
; CHECK-SD-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-SD-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-SD-NEXT:    cmeq v0.4s, v0.4s, #0
; CHECK-SD-NEXT:    xtn v0.4h, v0.4s
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: vec_4xi32_nonsplat_undef2_eq:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #1 // =0x1
; CHECK-GI-NEXT:    movi d3, #0000000000000000
; CHECK-GI-NEXT:    fmov s2, w8
; CHECK-GI-NEXT:    mov v2.s[1], w8
; CHECK-GI-NEXT:    mov v3.s[1], wzr
; CHECK-GI-NEXT:    mov v2.s[3], w8
; CHECK-GI-NEXT:    mov v3.s[3], wzr
; CHECK-GI-NEXT:    ushl v1.4s, v2.4s, v1.4s
; CHECK-GI-NEXT:    and v0.16b, v1.16b, v0.16b
; CHECK-GI-NEXT:    cmeq v0.4s, v0.4s, v3.4s
; CHECK-GI-NEXT:    xtn v0.4h, v0.4s
; CHECK-GI-NEXT:    ret
  %t0 = shl <4 x i32> <i32 1, i32 1, i32 undef, i32 1>, %y
  %t1 = and <4 x i32> %t0, %x
  %res = icmp eq <4 x i32> %t1, <i32 0, i32 0, i32 undef, i32 0>
  ret <4 x i1> %res
}

;------------------------------------------------------------------------------;
; A special tests
;------------------------------------------------------------------------------;

define i1 @scalar_i8_signbit_ne(i8 %x, i8 %y) nounwind {
; CHECK-SD-LABEL: scalar_i8_signbit_ne:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    and w8, w0, #0xff
; CHECK-SD-NEXT:    lsr w8, w8, w1
; CHECK-SD-NEXT:    lsr w0, w8, #7
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i8_signbit_ne:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #-128 // =0xffffff80
; CHECK-GI-NEXT:    and w9, w1, #0xff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    tst w8, #0xff
; CHECK-GI-NEXT:    cset w0, ne
; CHECK-GI-NEXT:    ret
  %t0 = shl i8 128, %y
  %t1 = and i8 %t0, %x
  %res = icmp ne i8 %t1, 0 ;  we are perfectly happy with 'ne' predicate
  ret i1 %res
}

;------------------------------------------------------------------------------;
; What if X is a constant too?
;------------------------------------------------------------------------------;

define i1 @scalar_i32_x_is_const_eq(i32 %y) nounwind {
; CHECK-LABEL: scalar_i32_x_is_const_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #43605 // =0xaa55
; CHECK-NEXT:    movk w8, #43605, lsl #16
; CHECK-NEXT:    lsl w8, w8, w0
; CHECK-NEXT:    tst w8, #0x1
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %t0 = shl i32 2857740885, %y
  %t1 = and i32 %t0, 1
  %res = icmp eq i32 %t1, 0
  ret i1 %res
}
define i1 @scalar_i32_x_is_const2_eq(i32 %y) nounwind {
; CHECK-LABEL: scalar_i32_x_is_const2_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov w8, #1 // =0x1
; CHECK-NEXT:    mov w9, #43605 // =0xaa55
; CHECK-NEXT:    lsl w8, w8, w0
; CHECK-NEXT:    movk w9, #43605, lsl #16
; CHECK-NEXT:    tst w8, w9
; CHECK-NEXT:    cset w0, eq
; CHECK-NEXT:    ret
  %t0 = shl i32 1, %y
  %t1 = and i32 %t0, 2857740885
  %res = icmp eq i32 %t1, 0
  ret i1 %res
}

define i1 @scalar_i8_bitsinmiddle_slt(i8 %x, i8 %y) nounwind {
; CHECK-SD-LABEL: scalar_i8_bitsinmiddle_slt:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #24 // =0x18
; CHECK-SD-NEXT:    lsl w8, w8, w1
; CHECK-SD-NEXT:    and w8, w8, w0
; CHECK-SD-NEXT:    ubfx w0, w8, #7, #1
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i8_bitsinmiddle_slt:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w8, #24 // =0x18
; CHECK-GI-NEXT:    and w9, w1, #0xff
; CHECK-GI-NEXT:    lsl w8, w8, w9
; CHECK-GI-NEXT:    and w8, w8, w0
; CHECK-GI-NEXT:    sxtb w8, w8
; CHECK-GI-NEXT:    cmp w8, #0
; CHECK-GI-NEXT:    cset w0, mi
; CHECK-GI-NEXT:    ret
  %t0 = shl i8 24, %y
  %t1 = and i8 %t0, %x
  %res = icmp slt i8 %t1, 0
  ret i1 %res
}

define i1 @scalar_i8_signbit_eq_with_nonzero(i8 %x, i8 %y) nounwind {
; CHECK-SD-LABEL: scalar_i8_signbit_eq_with_nonzero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #-128 // =0xffffff80
; CHECK-SD-NEXT:    lsl w8, w8, w1
; CHECK-SD-NEXT:    and w8, w8, w0
; CHECK-SD-NEXT:    and w8, w8, #0x80
; CHECK-SD-NEXT:    cmp w8, #1
; CHECK-SD-NEXT:    cset w0, eq
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: scalar_i8_signbit_eq_with_nonzero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    mov w0, wzr
; CHECK-GI-NEXT:    ret
  %t0 = shl i8 128, %y
  %t1 = and i8 %t0, %x
  %res = icmp eq i8 %t1, 1 ; should be comparing with 0
  ret i1 %res
}
