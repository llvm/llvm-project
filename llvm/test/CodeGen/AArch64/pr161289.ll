; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc -verify-machineinstrs < %s -mattr=+sme | FileCheck %s

target triple = "aarch64-unknown-linux-gnu"

; FIXME: This is from https://github.com/llvm/llvm-project/issues/161289. The argument (%arg) is <vscale x 16 x half>,
; which is passed as two <vscale x 8 x half> registers. LLVM wants to describe this as two DW_OP_LLVM_fragment fragments,
; but currently, that opcode has no notion of scalable type sizes.
;
; We are currently working around this by dropping the debug info for %arg (so it is 'undef' below).

define <vscale x 16 x half> @scalable_vector_debug_info(<vscale x 16 x half> %arg) "aarch64_pstate_sm_enabled" !dbg !7 {
; CHECK-LABEL: scalable_vector_debug_info:
; CHECK:       .Lfunc_begin0:
; CHECK-NEXT:    .file 1 "/tmp" "scalable-vector-debug.c"
; CHECK-NEXT:    .loc 1 1 0 // scalable-vector-debug.c:1:0
; CHECK-NEXT:    .cfi_startproc
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    //DEBUG_VALUE: scalable_vector_debug_info:arg <- undef
; CHECK-NEXT:    .loc 1 1 0 prologue_end // scalable-vector-debug.c:1:0
; CHECK-NEXT:    ret
    #dbg_value(<vscale x 16 x half> %arg, !13, !DIExpression(), !14)
  %extract = tail call <vscale x 8 x half> @llvm.vector.extract.nxv8f16.nxv16f16(<vscale x 16 x half> %arg, i64 0)
  ret <vscale x 16 x half> %arg
}

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "scalable-vector-debug.c", directory: "/tmp")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = distinct !DISubprogram(name: "scalable_vector_debug_info", scope: !1, file: !1, line: 1, type: !8, scopeLine: 1, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !12)
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !10}
!10 = !DIBasicType(name: "svfloat16_t", size: 16, encoding: DW_ATE_float)
!11 = !DIBasicType(name: "__fp16", size: 16, encoding: DW_ATE_float)
!12 = !{!13}
!13 = !DILocalVariable(name: "arg", arg: 1, scope: !7, file: !1, line: 1, type: !10)
!14 = !DILocation(line: 0, scope: !7)
!15 = distinct !DISubprogram(name: "streaming_sve_debug_info", scope: !1, file: !1, line: 5, type: !8, scopeLine: 5, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !18)
!16 = !DILocalVariable(name: "arg", arg: 1, scope: !15, file: !1, line: 5, type: !10)
!17 = !DILocation(line: 0, scope: !15)
!18 = !{!16}
