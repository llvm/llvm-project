# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -march=aarch64 -O0 -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s

---
name:            test_merge_s4
body: |
  bb.0:
    ; CHECK-LABEL: name: test_merge_s4
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 4
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 15
    ; CHECK: [[C2:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; CHECK: [[AND:%[0-9]+]]:_(s32) = G_AND [[C2]], [[C1]]
    ; CHECK: [[C3:%[0-9]+]]:_(s64) = G_CONSTANT i64 4
    ; CHECK: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[AND]], [[C3]](s64)
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY [[C2]](s32)
    ; CHECK: [[AND1:%[0-9]+]]:_(s32) = G_AND [[COPY]], [[C1]]
    ; CHECK: [[COPY1:%[0-9]+]]:_(s32) = COPY [[SHL]](s32)
    ; CHECK: [[OR:%[0-9]+]]:_(s32) = G_OR [[AND1]], [[COPY1]]
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[OR]](s32)
    ; CHECK: $x0 = COPY [[ANYEXT]](s64)
    %0:_(s64) = G_CONSTANT i64 0
    %1:_(s4) = G_TRUNC %0

    %2:_(s8) = G_MERGE_VALUES %1, %1
    %3:_(s8) = COPY %2
    %4:_(s64) = G_ANYEXT %3
    $x0 = COPY %4
...
---
name:            test_merge_s24_s8
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $w0

    ; 24 + 8 = 32 => Add 1 undef element as padding.

    ; CHECK-LABEL: name: test_merge_s24_s8
    ; CHECK: liveins: $w0
    ; CHECK: %x:_(s8) = G_CONSTANT i8 0
    ; CHECK: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK: [[MV:%[0-9]+]]:_(s32) = G_MERGE_VALUES %x(s8), %x(s8), %x(s8), [[DEF]](s8)
    ; CHECK: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16777215
    ; CHECK: [[COPY:%[0-9]+]]:_(s32) = COPY [[MV]](s32)
    ; CHECK: %zext:_(s32) = G_AND [[COPY]], [[C]]
    ; CHECK: $w0 = COPY %zext(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %x:_(s8) = G_CONSTANT i8 0
    %merge:_(s24) = G_MERGE_VALUES %x, %x, %x
    %zext:_(s32) = G_ZEXT %merge
    $w0 = COPY %zext
    RET_ReallyLR implicit $w0
...
---
name:            test_merge_s40_s8
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $x0

    ; 64 - 40 = 24; 24 / 8 = 3 => Add 3 undef elements as padding.

    ; CHECK-LABEL: name: test_merge_s40_s8
    ; CHECK: liveins: $x0
    ; CHECK: %x:_(s8) = G_CONSTANT i8 0
    ; CHECK: [[DEF:%[0-9]+]]:_(s8) = G_IMPLICIT_DEF
    ; CHECK: [[MV:%[0-9]+]]:_(s64) = G_MERGE_VALUES %x(s8), %x(s8), %x(s8), %x(s8), %x(s8), [[DEF]](s8), [[DEF]](s8), [[DEF]](s8)
    ; CHECK: [[C:%[0-9]+]]:_(s64) = G_CONSTANT i64 1099511627775
    ; CHECK: [[COPY:%[0-9]+]]:_(s64) = COPY [[MV]](s64)
    ; CHECK: %zext:_(s64) = G_AND [[COPY]], [[C]]
    ; CHECK: $x0 = COPY %zext(s64)
    ; CHECK: RET_ReallyLR implicit $x0
    %x:_(s8) = G_CONSTANT i8 0
    %merge:_(s40) = G_MERGE_VALUES %x, %x, %x, %x, %x
    %zext:_(s64) = G_ZEXT %merge
    $x0 = COPY %zext
    RET_ReallyLR implicit $x0
...
---
name:            test_merge_s7_s1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $w0

    ; 7 + 1 = 8 -> Add one undef.

    ; CHECK-LABEL: name: test_merge_s7_s1
    ; CHECK: liveins: $w0
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK: %x:_(s1) = G_TRUNC [[C]](s8)
    ; CHECK: [[DEF:%[0-9]+]]:_(s1) = G_IMPLICIT_DEF
    ; CHECK: [[MV:%[0-9]+]]:_(s8) = G_MERGE_VALUES %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), [[DEF]](s1)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 127
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[MV]](s8)
    ; CHECK: %zext:_(s32) = G_AND [[ANYEXT]], [[C1]]
    ; CHECK: $w0 = COPY %zext(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %x:_(s1) = G_CONSTANT i1 0
    %merge:_(s7) = G_MERGE_VALUES %x, %x, %x, %x, %x, %x, %x
    %zext:_(s32) = G_ZEXT %merge
    $w0 = COPY %zext
    RET_ReallyLR implicit $w0
...
---
name:            test_merge_s21_s7
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $w0

    ; Can't legalize this one yet.

    ; CHECK-LABEL: name: test_merge_s21_s7
    ; CHECK: liveins: $w0
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK: %x:_(s7) = G_TRUNC [[C]](s8)
    ; CHECK: %merge:_(s21) = G_MERGE_VALUES %x(s7), %x(s7), %x(s7)
    ; CHECK: %zext:_(s32) = G_ZEXT %merge(s21)
    ; CHECK: $w0 = COPY %zext(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %x:_(s7) = G_CONSTANT i7 0
    %merge:_(s21) = G_MERGE_VALUES %x, %x, %x
    %zext:_(s32) = G_ZEXT %merge
    $w0 = COPY %zext
    RET_ReallyLR implicit $w0
...
---
name:            test_merge_s11_s1
tracksRegLiveness: true
body: |
  bb.0:
    liveins: $w0

    ; 7 + 1 = 8 -> Add one undef.

    ; CHECK-LABEL: name: test_merge_s11_s1
    ; CHECK: liveins: $w0
    ; CHECK: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 0
    ; CHECK: %x:_(s1) = G_TRUNC [[C]](s8)
    ; CHECK: [[DEF:%[0-9]+]]:_(s1) = G_IMPLICIT_DEF
    ; CHECK: [[MV:%[0-9]+]]:_(s16) = G_MERGE_VALUES %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), %x(s1), [[DEF]](s1), [[DEF]](s1), [[DEF]](s1), [[DEF]](s1), [[DEF]](s1)
    ; CHECK: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 2047
    ; CHECK: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[MV]](s16)
    ; CHECK: %zext:_(s32) = G_AND [[ANYEXT]], [[C1]]
    ; CHECK: $w0 = COPY %zext(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %x:_(s1) = G_CONSTANT i1 0
    %merge:_(s11) = G_MERGE_VALUES %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x
    %zext:_(s32) = G_ZEXT %merge
    $w0 = COPY %zext
    RET_ReallyLR implicit $w0
