# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=aarch64-apple-ios -mattr=+sve -aarch64-enable-gisel-sve=1 -global-isel -start-before=legalizer -stop-after=instruction-select %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-SELECT
# RUN: llc -O0 -mtriple=aarch64-apple-ios -mattr=+sve -aarch64-enable-gisel-sve=1 -global-isel -start-before=legalizer -stop-after=regbankselect %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-REGBANK
# RUN: llc -O0 -mtriple=aarch64-apple-ios -mattr=+sve -aarch64-enable-gisel-sve=1 -global-isel -run-pass=legalizer  %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-LEGAL

---
name:            test_insert_vector_elt_nxv_16_s8_idx_0
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_16_s8_idx_0
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32sp = COPY $w0
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $xzr
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_B:%[0-9]+]]:zpr = DUP_ZR_B [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_B:%[0-9]+]]:zpr = INDEX_II_B 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_B:%[0-9]+]]:ppr_3b = PTRUE_B 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_B:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_B [[PTRUE_B]], [[INDEX_II_B]], [[DUP_ZR_B]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_B %vec, [[CMPEQ_PPzZZ_B]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_16_s8_idx_0
    ; CHECK-REGBANK: %vec:fpr(<vscale x 16 x s8>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = COPY $w0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = G_CONSTANT i64 0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 16 x s8>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_16_s8_idx_0
    ; CHECK-LEGAL: %vec:_(<vscale x 16 x s8>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = COPY $w0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = G_CONSTANT i64 0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 16 x s8>)
    %vec:_(<vscale x 16 x s8>) = COPY $z0
    %elt:_(s32) = COPY $w0
    %idx:_(s64) = G_CONSTANT i64 0
    %result:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec(<vscale x 16 x s8>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 16 x s8>)
...
---
name:            test_insert_vector_elt_nxv_16_s8_constant
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_16_s8_constant
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32common = MOVi32imm 5
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $x0
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_B:%[0-9]+]]:zpr = DUP_ZR_B [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_B:%[0-9]+]]:zpr = INDEX_II_B 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_B:%[0-9]+]]:ppr_3b = PTRUE_B 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_B:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_B [[PTRUE_B]], [[INDEX_II_B]], [[DUP_ZR_B]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_B %vec, [[CMPEQ_PPzZZ_B]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_16_s8_constant
    ; CHECK-REGBANK: %vec:fpr(<vscale x 16 x s8>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = G_CONSTANT i32 5
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 16 x s8>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_16_s8_constant
    ; CHECK-LEGAL: %vec:_(<vscale x 16 x s8>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = G_CONSTANT i32 5
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 16 x s8>)
    %vec:_(<vscale x 16 x s8>) = COPY $z0
    %elt:_(s32) = G_CONSTANT i32 5
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec(<vscale x 16 x s8>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 16 x s8>)
...
---
name:            test_insert_vector_elt_nxv_16_s8
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_16_s8
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32sp = COPY $w0
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $x0
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_B:%[0-9]+]]:zpr = DUP_ZR_B [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_B:%[0-9]+]]:zpr = INDEX_II_B 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_B:%[0-9]+]]:ppr_3b = PTRUE_B 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_B:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_B [[PTRUE_B]], [[INDEX_II_B]], [[DUP_ZR_B]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_B %vec, [[CMPEQ_PPzZZ_B]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_16_s8
    ; CHECK-REGBANK: %vec:fpr(<vscale x 16 x s8>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = COPY $w0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 16 x s8>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_16_s8
    ; CHECK-LEGAL: %vec:_(<vscale x 16 x s8>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = COPY $w0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 16 x s8>)
    %vec:_(<vscale x 16 x s8>) = COPY $z0
    %elt:_(s32) = COPY $w0
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 16 x s8>) = G_INSERT_VECTOR_ELT %vec(<vscale x 16 x s8>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 16 x s8>)
...
---
name:            test_insert_vector_elt_nxv_8_s16_idx_0
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_8_s16_idx_0
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32sp = COPY $w0
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $xzr
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_H:%[0-9]+]]:zpr = DUP_ZR_H [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_H:%[0-9]+]]:zpr = INDEX_II_H 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_H:%[0-9]+]]:ppr_3b = PTRUE_H 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_H:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_H [[PTRUE_H]], [[INDEX_II_H]], [[DUP_ZR_H]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_H %vec, [[CMPEQ_PPzZZ_H]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_8_s16_idx_0
    ; CHECK-REGBANK: %vec:fpr(<vscale x 8 x s16>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = COPY $w0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = G_CONSTANT i64 0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 8 x s16>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_8_s16_idx_0
    ; CHECK-LEGAL: %vec:_(<vscale x 8 x s16>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = COPY $w0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = G_CONSTANT i64 0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 8 x s16>)
    %vec:_(<vscale x 8 x s16>) = COPY $z0
    %elt:_(s32) = COPY $w0
    %idx:_(s64) = G_CONSTANT i64 0
    %result:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec(<vscale x 8 x s16>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 8 x s16>)
...
---
name:            test_insert_vector_elt_nxv_8_s16_constant
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_8_s16_constant
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32common = MOVi32imm 5
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $x0
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_H:%[0-9]+]]:zpr = DUP_ZR_H [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_H:%[0-9]+]]:zpr = INDEX_II_H 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_H:%[0-9]+]]:ppr_3b = PTRUE_H 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_H:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_H [[PTRUE_H]], [[INDEX_II_H]], [[DUP_ZR_H]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_H %vec, [[CMPEQ_PPzZZ_H]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_8_s16_constant
    ; CHECK-REGBANK: %vec:fpr(<vscale x 8 x s16>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = G_CONSTANT i32 5
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 8 x s16>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_8_s16_constant
    ; CHECK-LEGAL: %vec:_(<vscale x 8 x s16>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = G_CONSTANT i32 5
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 8 x s16>)
    %vec:_(<vscale x 8 x s16>) = COPY $z0
    %elt:_(s32) = G_CONSTANT i32 5
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec(<vscale x 8 x s16>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 8 x s16>)
...
---
name:            test_insert_vector_elt_nxv_8_s16
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_8_s16
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32sp = COPY $w0
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $x0
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_H:%[0-9]+]]:zpr = DUP_ZR_H [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_H:%[0-9]+]]:zpr = INDEX_II_H 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_H:%[0-9]+]]:ppr_3b = PTRUE_H 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_H:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_H [[PTRUE_H]], [[INDEX_II_H]], [[DUP_ZR_H]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_H %vec, [[CMPEQ_PPzZZ_H]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_8_s16
    ; CHECK-REGBANK: %vec:fpr(<vscale x 8 x s16>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = COPY $w0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 8 x s16>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_8_s16
    ; CHECK-LEGAL: %vec:_(<vscale x 8 x s16>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = COPY $w0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 8 x s16>)
    %vec:_(<vscale x 8 x s16>) = COPY $z0
    %elt:_(s32) = COPY $w0
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 8 x s16>) = G_INSERT_VECTOR_ELT %vec(<vscale x 8 x s16>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 8 x s16>)
...
---
name:            test_insert_vector_elt_nxv_4_s32_idx_0
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_4_s32_idx_0
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32sp = COPY $w0
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $xzr
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_S:%[0-9]+]]:zpr = DUP_ZR_S [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_S:%[0-9]+]]:zpr = INDEX_II_S 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_S:%[0-9]+]]:ppr_3b = PTRUE_S 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_S:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_S [[PTRUE_S]], [[INDEX_II_S]], [[DUP_ZR_S]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_S %vec, [[CMPEQ_PPzZZ_S]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_4_s32_idx_0
    ; CHECK-REGBANK: %vec:fpr(<vscale x 4 x s32>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = COPY $w0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = G_CONSTANT i64 0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 4 x s32>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_4_s32_idx_0
    ; CHECK-LEGAL: %vec:_(<vscale x 4 x s32>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = COPY $w0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = G_CONSTANT i64 0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 4 x s32>)
    %vec:_(<vscale x 4 x s32>) = COPY $z0
    %elt:_(s32) = COPY $w0
    %idx:_(s64) = G_CONSTANT i64 0
    %result:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec(<vscale x 4 x s32>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 4 x s32>)
...
---
name:            test_insert_vector_elt_nxv_4_s32_constant
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_4_s32_constant
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32common = MOVi32imm 5
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $x0
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_S:%[0-9]+]]:zpr = DUP_ZR_S [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_S:%[0-9]+]]:zpr = INDEX_II_S 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_S:%[0-9]+]]:ppr_3b = PTRUE_S 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_S:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_S [[PTRUE_S]], [[INDEX_II_S]], [[DUP_ZR_S]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_S %vec, [[CMPEQ_PPzZZ_S]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_4_s32_constant
    ; CHECK-REGBANK: %vec:fpr(<vscale x 4 x s32>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = G_CONSTANT i32 5
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 4 x s32>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_4_s32_constant
    ; CHECK-LEGAL: %vec:_(<vscale x 4 x s32>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = G_CONSTANT i32 5
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 4 x s32>)
    %vec:_(<vscale x 4 x s32>) = COPY $z0
    %elt:_(s32) = G_CONSTANT i32 5
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec(<vscale x 4 x s32>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 4 x s32>)
...
---
name:            test_insert_vector_elt_nxv_4_s32
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_4_s32
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr32sp = COPY $w0
    ; CHECK-SELECT-NEXT: %idx:gpr64 = COPY $x0
    ; CHECK-SELECT-NEXT: [[COPY:%[0-9]+]]:gpr32common = COPY %idx.sub_32
    ; CHECK-SELECT-NEXT: [[DUP_ZR_S:%[0-9]+]]:zpr = DUP_ZR_S [[COPY]]
    ; CHECK-SELECT-NEXT: [[INDEX_II_S:%[0-9]+]]:zpr = INDEX_II_S 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_S:%[0-9]+]]:ppr_3b = PTRUE_S 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_S:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_S [[PTRUE_S]], [[INDEX_II_S]], [[DUP_ZR_S]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_S %vec, [[CMPEQ_PPzZZ_S]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_4_s32
    ; CHECK-REGBANK: %vec:fpr(<vscale x 4 x s32>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s32) = COPY $w0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 4 x s32>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_4_s32
    ; CHECK-LEGAL: %vec:_(<vscale x 4 x s32>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s32) = COPY $w0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec, %elt(s32), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 4 x s32>)
    %vec:_(<vscale x 4 x s32>) = COPY $z0
    %elt:_(s32) = COPY $w0
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 4 x s32>) = G_INSERT_VECTOR_ELT %vec(<vscale x 4 x s32>), %elt(s32), %idx(s64)
    $z0 = COPY %result(<vscale x 4 x s32>)
...
---
name:            test_insert_vector_elt_nxv_2s64_idx_0
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_2s64_idx_0
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr64sp = COPY $x0
    ; CHECK-SELECT-NEXT: %idx:gpr64common = COPY $xzr
    ; CHECK-SELECT-NEXT: [[DUP_ZR_D:%[0-9]+]]:zpr = DUP_ZR_D %idx
    ; CHECK-SELECT-NEXT: [[INDEX_II_D:%[0-9]+]]:zpr = INDEX_II_D 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_D:%[0-9]+]]:ppr_3b = PTRUE_D 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_D:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_D [[PTRUE_D]], [[INDEX_II_D]], [[DUP_ZR_D]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_D %vec, [[CMPEQ_PPzZZ_D]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_2s64_idx_0
    ; CHECK-REGBANK: %vec:fpr(<vscale x 2 x s64>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = G_CONSTANT i64 0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec, %elt(s64), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 2 x s64>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_2s64_idx_0
    ; CHECK-LEGAL: %vec:_(<vscale x 2 x s64>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = G_CONSTANT i64 0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec, %elt(s64), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 2 x s64>)
    %vec:_(<vscale x 2 x s64>) = COPY $z0
    %elt:_(s64) = COPY $x0
    %idx:_(s64) = G_CONSTANT i64 0
    %result:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec(<vscale x 2 x s64>), %elt(s64), %idx(s64)
    $z0 = COPY %result(<vscale x 2 x s64>)
...
---
name:            test_insert_vector_elt_nxv_2_s64_constant
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_2_s64_constant
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: [[MOVi32imm:%[0-9]+]]:gpr32 = MOVi32imm 5
    ; CHECK-SELECT-NEXT: %elt:gpr64sp = SUBREG_TO_REG 0, [[MOVi32imm]], %subreg.sub_32
    ; CHECK-SELECT-NEXT: %idx:gpr64sp = COPY $x0
    ; CHECK-SELECT-NEXT: [[DUP_ZR_D:%[0-9]+]]:zpr = DUP_ZR_D %idx
    ; CHECK-SELECT-NEXT: [[INDEX_II_D:%[0-9]+]]:zpr = INDEX_II_D 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_D:%[0-9]+]]:ppr_3b = PTRUE_D 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_D:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_D [[PTRUE_D]], [[INDEX_II_D]], [[DUP_ZR_D]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_D %vec, [[CMPEQ_PPzZZ_D]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_2_s64_constant
    ; CHECK-REGBANK: %vec:fpr(<vscale x 2 x s64>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s64) = G_CONSTANT i64 5
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec, %elt(s64), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 2 x s64>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_2_s64_constant
    ; CHECK-LEGAL: %vec:_(<vscale x 2 x s64>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s64) = G_CONSTANT i64 5
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec, %elt(s64), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 2 x s64>)
    %vec:_(<vscale x 2 x s64>) = COPY $z0
    %elt:_(s64) = G_CONSTANT i64 5
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec(<vscale x 2 x s64>), %elt(s64), %idx(s64)
    $z0 = COPY %result(<vscale x 2 x s64>)
...
---
name:            test_insert_vector_elt_nxv_2_s64
body:             |
  bb.1:
    ; CHECK-SELECT-LABEL: name: test_insert_vector_elt_nxv_2_s64
    ; CHECK-SELECT: %vec:zpr = COPY $z0
    ; CHECK-SELECT-NEXT: %elt:gpr64sp = COPY $x0
    ; CHECK-SELECT-NEXT: %idx:gpr64sp = COPY $x0
    ; CHECK-SELECT-NEXT: [[DUP_ZR_D:%[0-9]+]]:zpr = DUP_ZR_D %idx
    ; CHECK-SELECT-NEXT: [[INDEX_II_D:%[0-9]+]]:zpr = INDEX_II_D 0, 1, implicit $vg
    ; CHECK-SELECT-NEXT: [[PTRUE_D:%[0-9]+]]:ppr_3b = PTRUE_D 31, implicit $vg
    ; CHECK-SELECT-NEXT: [[CMPEQ_PPzZZ_D:%[0-9]+]]:ppr_3b = CMPEQ_PPzZZ_D [[PTRUE_D]], [[INDEX_II_D]], [[DUP_ZR_D]], implicit-def dead $nzcv
    ; CHECK-SELECT-NEXT: %result:zpr = CPY_ZPmR_D %vec, [[CMPEQ_PPzZZ_D]], %elt
    ; CHECK-SELECT-NEXT: $z0 = COPY %result
    ;
    ; CHECK-REGBANK-LABEL: name: test_insert_vector_elt_nxv_2_s64
    ; CHECK-REGBANK: %vec:fpr(<vscale x 2 x s64>) = COPY $z0
    ; CHECK-REGBANK-NEXT: %elt:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %idx:gpr(s64) = COPY $x0
    ; CHECK-REGBANK-NEXT: %result:fpr(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec, %elt(s64), %idx(s64)
    ; CHECK-REGBANK-NEXT: $z0 = COPY %result(<vscale x 2 x s64>)
    ;
    ; CHECK-LEGAL-LABEL: name: test_insert_vector_elt_nxv_2_s64
    ; CHECK-LEGAL: %vec:_(<vscale x 2 x s64>) = COPY $z0
    ; CHECK-LEGAL-NEXT: %elt:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %idx:_(s64) = COPY $x0
    ; CHECK-LEGAL-NEXT: %result:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec, %elt(s64), %idx(s64)
    ; CHECK-LEGAL-NEXT: $z0 = COPY %result(<vscale x 2 x s64>)
    %vec:_(<vscale x 2 x s64>) = COPY $z0
    %elt:_(s64) = COPY $x0
    %idx:_(s64) = COPY $x0
    %result:_(<vscale x 2 x s64>) = G_INSERT_VECTOR_ELT %vec(<vscale x 2 x s64>), %elt(s64), %idx(s64)
    $z0 = COPY %result(<vscale x 2 x s64>)
...
