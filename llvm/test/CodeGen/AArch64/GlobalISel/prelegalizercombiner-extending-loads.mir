# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple aarch64 -O0 -run-pass=aarch64-prelegalizer-combiner -global-isel -verify-machineinstrs %s -o - | FileCheck %s
---
name:            test_anyext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_anyext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[LOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    $w0 = COPY %2
...

---
name:            test_anyext_with_copy
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_anyext_with_copy
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[LOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s8) = COPY %1
    %3:_(s32) = G_ANYEXT %1
    $w0 = COPY %3
...

---
name:            test_signext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_signext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_SEXT %1
    $w0 = COPY %2
...

---
name:            test_zeroext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_zeroext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[ZEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ZEXT %1
    $w0 = COPY %2
...

---
name:            test_2anyext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_2anyext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[LOAD]](s32)
    ; CHECK-NEXT: $w1 = COPY [[LOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    %3:_(s32) = G_ANYEXT %1
    $w0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_1anyext_1signext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_1anyext_1signext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[SEXTLOAD]](s32)
    ; CHECK-NEXT: $w1 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    %3:_(s32) = G_SEXT %1
    $w0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_1xor_1signext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_1xor_1signext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s32)
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s8) = G_CONSTANT i8 -1
    ; CHECK-NEXT: [[XOR:%[0-9]+]]:_(s8) = G_XOR [[TRUNC]], [[C]]
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[XOR]](s8)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    ; CHECK-NEXT: $w1 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s8) = G_CONSTANT i8 -1
    %3:_(s8) = G_XOR %1, %2
    %5:_(s32) = G_ANYEXT %3
    %6:_(s32) = G_SEXT %1
    $w0 = COPY %5
    $w1 = COPY %6
...

---
name:            test_1anyext_1zeroext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_1anyext_1zeroext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: $w0 = COPY [[ZEXTLOAD]](s32)
    ; CHECK-NEXT: $w1 = COPY [[ZEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    %3:_(s32) = G_ZEXT %1
    $w0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_1signext_1zeroext
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_1signext_1zeroext
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s32)
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[TRUNC]](s8)
    ; CHECK-NEXT: $w0 = COPY [[ZEXT]](s32)
    ; CHECK-NEXT: $w1 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ZEXT %1
    %3:_(s32) = G_SEXT %1
    $w0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_1anyext64_1signext32
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_1anyext64_1signext32
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SEXTLOAD]](s32)
    ; CHECK-NEXT: $x0 = COPY [[ANYEXT]](s64)
    ; CHECK-NEXT: $w1 = COPY [[SEXTLOAD]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32) = G_SEXT %1
    $x0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_1anyext32_1signext64
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_1anyext32_1signext64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s64) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s64)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC]](s8)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    ; CHECK-NEXT: $x1 = COPY [[SEXTLOAD]](s64)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    %3:_(s64) = G_SEXT %1
    $w0 = COPY %2
    $x1 = COPY %3
...

---
name:            test_2anyext32_1signext64
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_2anyext32_1signext64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[SEXTLOAD:%[0-9]+]]:_(s64) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s64)
    ; CHECK-NEXT: [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC]](s8)
    ; CHECK-NEXT: [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC]](s8)
    ; CHECK-NEXT: $w0 = COPY [[ANYEXT]](s32)
    ; CHECK-NEXT: $x1 = COPY [[SEXTLOAD]](s64)
    ; CHECK-NEXT: $w2 = COPY [[ANYEXT1]](s32)
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    %3:_(s64) = G_SEXT %1
    %4:_(s32) = G_ANYEXT %1
    $w0 = COPY %2
    $x1 = COPY %3
    $w2 = COPY %4
...

---
name:            test_multiblock_anyext
body: |
  ; CHECK-LABEL: name: test_multiblock_anyext
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $w0 = COPY [[LOAD]](s32)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    G_BR %bb.1
  bb.1:
    %2:_(s32) = G_ANYEXT %1
    $w0 = COPY %2
...

---
name:            test_multiblock_signext
body: |
  ; CHECK-LABEL: name: test_multiblock_signext
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $w0 = COPY [[SEXTLOAD]](s32)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    G_BR %bb.1
  bb.1:
    %2:_(s32) = G_SEXT %1
    $w0 = COPY %2
...

---
name:            test_multiblock_zeroext
body: |
  ; CHECK-LABEL: name: test_multiblock_zeroext
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[ZEXTLOAD:%[0-9]+]]:_(s32) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $w0 = COPY [[ZEXTLOAD]](s32)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    G_BR %bb.1
  bb.1:
    %2:_(s32) = G_ZEXT %1
    $w0 = COPY %2
...

---
name:            test_multiblock_2anyext
body: |
  ; CHECK-LABEL: name: test_multiblock_2anyext
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   $w0 = COPY [[LOAD]](s32)
  ; CHECK-NEXT:   $w1 = COPY [[LOAD]](s32)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %2:_(s32) = G_ANYEXT %1
    G_BR %bb.1
  bb.1:
    %3:_(s32) = G_ANYEXT %1
    $w0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_multiblock_1anyext64_1signext32
body: |
  ; CHECK-LABEL: name: test_multiblock_1anyext64_1signext32
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[SEXTLOAD:%[0-9]+]]:_(s32) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s64) = G_ANYEXT [[SEXTLOAD]](s32)
  ; CHECK-NEXT:   $x0 = COPY [[ANYEXT]](s64)
  ; CHECK-NEXT:   $w1 = COPY [[SEXTLOAD]](s32)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    G_BR %bb.1
  bb.1:
    %2:_(s64) = G_ANYEXT %1
    %3:_(s32) = G_SEXT %1
    $x0 = COPY %2
    $w1 = COPY %3
...

---
name:            test_multiblock_1anyext32_1signext64
body: |
  ; CHECK-LABEL: name: test_multiblock_1anyext32_1signext64
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[SEXTLOAD:%[0-9]+]]:_(s64) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s64)
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC]](s8)
  ; CHECK-NEXT:   $w0 = COPY [[ANYEXT]](s32)
  ; CHECK-NEXT:   $x1 = COPY [[SEXTLOAD]](s64)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    G_BR %bb.1
  bb.1:
    %2:_(s32) = G_ANYEXT %1
    %3:_(s64) = G_SEXT %1
    $w0 = COPY %2
    $x1 = COPY %3
...

---
name:            test_multiblock_2anyext32_1signext64
body: |
  ; CHECK-LABEL: name: test_multiblock_2anyext32_1signext64
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $x0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:_(p0) = COPY $x0
  ; CHECK-NEXT:   [[SEXTLOAD:%[0-9]+]]:_(s64) = G_SEXTLOAD [[COPY]](p0) :: (load (s8))
  ; CHECK-NEXT:   [[TRUNC:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s64)
  ; CHECK-NEXT:   [[ANYEXT:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC]](s8)
  ; CHECK-NEXT:   G_BR %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   [[TRUNC1:%[0-9]+]]:_(s8) = G_TRUNC [[SEXTLOAD]](s64)
  ; CHECK-NEXT:   [[ANYEXT1:%[0-9]+]]:_(s32) = G_ANYEXT [[TRUNC1]](s8)
  ; CHECK-NEXT:   $w0 = COPY [[ANYEXT1]](s32)
  ; CHECK-NEXT:   $x1 = COPY [[SEXTLOAD]](s64)
  ; CHECK-NEXT:   $w2 = COPY [[ANYEXT]](s32)
  bb.0:
    liveins: $x0
    %0:_(p0) = COPY $x0
    %1:_(s8) = G_LOAD %0 :: (load (s8))
    %4:_(s32) = G_ANYEXT %1
    G_BR %bb.1
  bb.1:
    %2:_(s32) = G_ANYEXT %1
    %3:_(s64) = G_SEXT %1
    $w0 = COPY %2
    $x1 = COPY %3
    $w2 = COPY %4
...
---
name:            test_atomic
alignment:       4
tracksRegLiveness: true
liveins:
  - { reg: '$x0' }
body:             |
  bb.1:
    liveins: $x0

    ; CHECK-LABEL: name: test_atomic
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[LOAD:%[0-9]+]]:_(s16) = G_LOAD [[COPY]](p0) :: (load unordered (s16))
    ; CHECK-NEXT: [[ZEXT:%[0-9]+]]:_(s32) = G_ZEXT [[LOAD]](s16)
    ; CHECK-NEXT: $w0 = COPY [[ZEXT]](s32)
    ; CHECK-NEXT: RET_ReallyLR implicit $w0
    %0:_(p0) = COPY $x0
    %1:_(s16) = G_LOAD %0(p0) :: (load unordered (s16))
    %2:_(s32) = G_ZEXT %1(s16)
    $w0 = COPY %2(s32)
    RET_ReallyLR implicit $w0
...
---
name:            test_dont_zextload_to_sextload
body: |
  bb.0:
    liveins: $x0
    ; CHECK-LABEL: name: test_dont_zextload_to_sextload
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(p0) = COPY $x0
    ; CHECK-NEXT: [[ZEXTLOAD:%[0-9]+]]:_(s64) = G_ZEXTLOAD [[COPY]](p0) :: (load (s8))
    ; CHECK-NEXT: [[TRUNC:%[0-9]+]]:_(s32) = G_TRUNC [[ZEXTLOAD]](s64)
    ; CHECK-NEXT: [[SEXT:%[0-9]+]]:_(s64) = G_SEXT [[TRUNC]](s32)
    ; CHECK-NEXT: $x0 = COPY [[ZEXTLOAD]](s64)
    ; CHECK-NEXT: $x1 = COPY [[SEXT]](s64)
    %0:_(p0) = COPY $x0
    %1:_(s32) = G_ZEXTLOAD %0 :: (load (s8))
    %2:_(s64) = G_ZEXT %1
    %3:_(s64) = G_SEXT %1
    $x0 = COPY %2
    $x1 = COPY %3
...
