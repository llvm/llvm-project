; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -O0 -o - %s | FileCheck %s
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "arm64e-apple-macosx10.15.0"

; Check we don't crash here when selecting an anyextending FP load.

define i32 @test() {
; CHECK-LABEL: test:
; CHECK:       ; %bb.0: ; %entry
; CHECK-NEXT:    sub sp, sp, #80
; CHECK-NEXT:    stp x29, x30, [sp, #64] ; 16-byte Folded Spill
; CHECK-NEXT:    .cfi_def_cfa_offset 80
; CHECK-NEXT:    .cfi_offset w30, -8
; CHECK-NEXT:    .cfi_offset w29, -16
; CHECK-NEXT:    mov x8, #0 ; =0x0
; CHECK-NEXT:    ldr s0, [x8]
; CHECK-NEXT:    ; kill: def $d0 killed $s0
; CHECK-NEXT:    mov x8, sp
; CHECK-NEXT:    mov w9, #0 ; =0x0
; CHECK-NEXT:    str w9, [sp, #60] ; 4-byte Folded Spill
; CHECK-NEXT:    str xzr, [x8]
; CHECK-NEXT:    str xzr, [x8, #8]
; CHECK-NEXT:    str xzr, [x8, #16]
; CHECK-NEXT:    str xzr, [x8, #24]
; CHECK-NEXT:    str d0, [x8, #32]
; CHECK-NEXT:    str xzr, [x8, #40]
; CHECK-NEXT:    mov x8, #0 ; =0x0
; CHECK-NEXT:    mov x0, x8
; CHECK-NEXT:    blr x8
; CHECK-NEXT:    ldr w0, [sp, #60] ; 4-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp, #64] ; 16-byte Folded Reload
; CHECK-NEXT:    add sp, sp, #80
; CHECK-NEXT:    ret
entry:
  %0 = inttoptr i64 0 to ptr
  %1 = load i32, ptr %0, align 4
  %call86 = call i32 (ptr, ...) null(ptr null, i32 0, i32 0, i32 0, i32 0, i32 %1, i32 0)
  %2 = load float, ptr %0, align 4
  ret i32 0
}

