# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple=aarch64 -run-pass=legalizer -global-isel-abort=1 %s -o - | FileCheck %s

---
name:            post_store_s64
body: |
  bb.0:
    liveins: $x0, $x1

    ; CHECK-LABEL: name: post_store_s64
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %val:_(s64) = COPY $x1
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %writeback:_(p0) = G_INDEXED_STORE %val(s64), %ptr, %offset(s64), 0 :: (store (s64))
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %val:_(s64) = COPY $x1
    %offset:_(s64) = G_CONSTANT i64 8
    %writeback:_(p0) = G_INDEXED_STORE %val, %ptr, %offset, 0 :: (store (s64), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_store_v2s64
body: |
  bb.0:
    liveins: $x0, $q0

    ; CHECK-LABEL: name: post_store_v2s64
    ; CHECK: liveins: $x0, $q0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %val:_(<2 x s64>) = COPY $q0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %writeback:_(p0) = G_INDEXED_STORE %val(<2 x s64>), %ptr, %offset(s64), 0 :: (store (<2 x s64>), align 8)
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %val:_(<2 x s64>) = COPY $q0
    %offset:_(s64) = G_CONSTANT i64 8
    %writeback:_(p0) = G_INDEXED_STORE %val, %ptr, %offset, 0 :: (store (<2 x s64>), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_load_s64
body: |
  bb.0:
    liveins: $x0

    ; CHECK-LABEL: name: post_load_s64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %dst:_(s64), %writeback:_(p0) = G_INDEXED_LOAD %ptr, %offset(s64), 0 :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %offset:_(s64) = G_CONSTANT i64 8
    %dst:_(s64), %writeback:_(p0) = G_INDEXED_LOAD %ptr, %offset, 0 :: (load (s64), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_load_v2s64
body: |
  bb.0:
    liveins: $x0

    ; CHECK-LABEL: name: post_load_v2s64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %dst:_(<2 x s64>), %writeback:_(p0) = G_INDEXED_LOAD %ptr, %offset(s64), 0 :: (load (s64))
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: $q0 = COPY %dst(<2 x s64>)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0, implicit $q0
    %ptr:_(p0) = COPY $x0
    %offset:_(s64) = G_CONSTANT i64 8
    %dst:_(<2 x s64>), %writeback:_(p0) = G_INDEXED_LOAD %ptr, %offset, 0 :: (load (s64), align 8)
    $x0 = COPY %writeback
    $q0 = COPY %dst
    RET_ReallyLR implicit $x0, implicit $q0
...
---
name:            pre_store_s64
body: |
  bb.0:
    liveins: $x0, $x1

    ; CHECK-LABEL: name: pre_store_s64
    ; CHECK: liveins: $x0, $x1
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %val:_(s64) = COPY $x1
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %writeback:_(p0) = G_INDEXED_STORE %val(s64), %ptr, %offset(s64), 1 :: (store (s64))
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %val:_(s64) = COPY $x1
    %offset:_(s64) = G_CONSTANT i64 8
    %writeback:_(p0) = G_INDEXED_STORE %val, %ptr, %offset, 1 :: (store (s64), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_zextload_s8_to_s64
body: |
  bb.0:
    liveins: $x0

    ; CHECK-LABEL: name: post_zextload_s8_to_s64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %dst:_(s64), %writeback:_(p0) = G_INDEXED_ZEXTLOAD %ptr, %offset(s64), 0 :: (load (s8), align 8)
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %offset:_(s64) = G_CONSTANT i64 8
    %dst:_(s64), %writeback:_(p0) = G_INDEXED_ZEXTLOAD %ptr, %offset, 0 :: (load (s8), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_sextload_s8_to_s64
body: |
  bb.0:
    liveins: $x0

    ; CHECK-LABEL: name: post_sextload_s8_to_s64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %dst:_(s64), %writeback:_(p0) = G_INDEXED_SEXTLOAD %ptr, %offset(s64), 0 :: (load (s8), align 8)
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %offset:_(s64) = G_CONSTANT i64 8
    %dst:_(s64), %writeback:_(p0) = G_INDEXED_SEXTLOAD %ptr, %offset, 0 :: (load (s8), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_sextload_s32_to_s64
body: |
  bb.0:
    liveins: $x0

    ; CHECK-LABEL: name: post_sextload_s32_to_s64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %dst:_(s64), %writeback:_(p0) = G_INDEXED_SEXTLOAD %ptr, %offset(s64), 0 :: (load (s32), align 8)
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %offset:_(s64) = G_CONSTANT i64 8
    %dst:_(s64), %writeback:_(p0) = G_INDEXED_SEXTLOAD %ptr, %offset, 0 :: (load (s32), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
---
name:            post_zextload_s32_to_s64
body: |
  bb.0:
    liveins: $x0

    ; CHECK-LABEL: name: post_zextload_s32_to_s64
    ; CHECK: liveins: $x0
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: %ptr:_(p0) = COPY $x0
    ; CHECK-NEXT: %offset:_(s64) = G_CONSTANT i64 8
    ; CHECK-NEXT: %dst:_(s64), %writeback:_(p0) = G_INDEXED_ZEXTLOAD %ptr, %offset(s64), 0 :: (load (s32), align 8)
    ; CHECK-NEXT: $x0 = COPY %writeback(p0)
    ; CHECK-NEXT: RET_ReallyLR implicit $x0
    %ptr:_(p0) = COPY $x0
    %offset:_(s64) = G_CONSTANT i64 8
    %dst:_(s64), %writeback:_(p0) = G_INDEXED_ZEXTLOAD %ptr, %offset, 0 :: (load (s32), align 8)
    $x0 = COPY %writeback
    RET_ReallyLR implicit $x0
...
