# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=aarch64-apple-ios -run-pass=regbankselect -verify-machineinstrs %s -o - | FileCheck %s -check-prefix=CHECK

--- |
  target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

  @var_fp = global float 0.0
  @var_int = global i32 0

  define float @fp_load_phi() { ret float undef }
  define i32 @int_load_phi() { ret i32 undef }


  @array_double = dso_local global [32000 x double] zeroinitializer, align 8
  @struct_array_double = dso_local global { [32000 x double] } zeroinitializer, align 8
  @struct_struct_array_double = dso_local global {{ [32000 x double] }} zeroinitializer, align 8

  define float @array_load_double() { ret float undef }
  define float @struct_array_load_double() { ret float undef }
  define float @struct_struct_array_load_double() { ret float undef }

  @array_int = dso_local global [32000 x i32] zeroinitializer, align 8
  @struct_array_int = dso_local global { [32000 x i32] } zeroinitializer, align 8
  @struct_struct_array_int = dso_local global {{ [32000 x i32] }} zeroinitializer, align 8

  define i32 @array_load_int() { ret i32 undef }
  define i32 @struct_array_load_int() { ret i32 undef }
  define i32 @struct_struct_array_load_int() { ret i32 undef }

...
---
name:            fp_load_phi
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: fp_load_phi
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @var_fp
  ; CHECK-NEXT:   %fp_load:fpr(s32) = G_LOAD [[GV]](p0) :: (load (s32) from @var_fp)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:fpr(s32) = PHI %fp_load(s32), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @var_fp
    %fp_load:_(s32) = G_LOAD %1 :: (load 4 from @var_fp)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            int_load_phi
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: int_load_phi
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @var_fp
  ; CHECK-NEXT:   %fp_load:gpr(s32) = G_LOAD [[GV]](p0) :: (load (s32) from @var_int)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr(s32) = PHI %fp_load(s32), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @var_fp
    %fp_load:_(s32) = G_LOAD %1 :: (load 4 from @var_int)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            array_load_double
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: array_load_double
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @array_double
  ; CHECK-NEXT:   %fp_load:fpr(s64) = G_LOAD [[GV]](p0) :: (dereferenceable load (s64) from @array_double)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:fpr(s32) = PHI %fp_load(s64), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @array_double
    %fp_load:_(s64) = G_LOAD %1(p0) :: (dereferenceable load (s64) from @array_double)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            struct_array_load_double
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: struct_array_load_double
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @struct_array_double
  ; CHECK-NEXT:   %fp_load:fpr(s64) = G_LOAD [[GV]](p0) :: (dereferenceable load (s64) from @struct_array_double)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:fpr(s32) = PHI %fp_load(s64), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @struct_array_double
    %fp_load:_(s64) = G_LOAD %1(p0) :: (dereferenceable load (s64) from @struct_array_double)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            struct_struct_array_load_double
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: struct_struct_array_load_double
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @struct_struct_array_double
  ; CHECK-NEXT:   %fp_load:fpr(s64) = G_LOAD [[GV]](p0) :: (dereferenceable load (s64) from @struct_struct_array_double)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:fpr(s32) = PHI %fp_load(s64), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @struct_struct_array_double
    %fp_load:_(s64) = G_LOAD %1(p0) :: (dereferenceable load (s64) from @struct_struct_array_double)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            array_load_int
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: array_load_int
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @array_int
  ; CHECK-NEXT:   %fp_load:gpr(s64) = G_LOAD [[GV]](p0) :: (dereferenceable load (s64) from @array_int)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr(s32) = PHI %fp_load(s64), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @array_int
    %fp_load:_(s64) = G_LOAD %1(p0) :: (dereferenceable load (s64) from @array_int)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            struct_array_load_int
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: struct_array_load_int
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @struct_array_int
  ; CHECK-NEXT:   %fp_load:gpr(s64) = G_LOAD [[GV]](p0) :: (dereferenceable load (s64) from @struct_array_int)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr(s32) = PHI %fp_load(s64), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @struct_array_int
    %fp_load:_(s64) = G_LOAD %1(p0) :: (dereferenceable load (s64) from @struct_array_int)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...

---
name:            struct_struct_array_load_int
legalized:       true
regBankSelected: false
tracksRegLiveness: true
body:             |
  ; CHECK-LABEL: name: struct_struct_array_load_int
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.1(0x80000000)
  ; CHECK-NEXT:   liveins: $w0
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr(s32) = COPY $w0
  ; CHECK-NEXT:   [[GV:%[0-9]+]]:gpr(p0) = G_GLOBAL_VALUE @struct_struct_array_int
  ; CHECK-NEXT:   %fp_load:gpr(s64) = G_LOAD [[GV]](p0) :: (dereferenceable load (s64) from @struct_struct_array_int)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1:
  ; CHECK-NEXT:   successors: %bb.1(0x40000000), %bb.2(0x40000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[PHI:%[0-9]+]]:gpr(s32) = PHI %fp_load(s64), %bb.0, [[PHI]](s32), %bb.1
  ; CHECK-NEXT:   G_BRCOND [[COPY]](s32), %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  ; CHECK-NEXT:   $s0 = COPY [[PHI]](s32)
  ; CHECK-NEXT:   RET_ReallyLR implicit $s0
  bb.0:
    liveins: $w0
    successors: %bb.1
    %0:_(s32) = COPY $w0
    %1:_(p0) = G_GLOBAL_VALUE @struct_struct_array_int
    %fp_load:_(s64) = G_LOAD %1(p0) :: (dereferenceable load (s64) from @struct_struct_array_int)

  bb.1:
    successors: %bb.1, %bb.2
    %2:_(s32) = PHI %fp_load, %bb.0, %2, %bb.1
    G_BRCOND %0, %bb.1

  bb.2:
    $s0 = COPY %2
    RET_ReallyLR implicit $s0
...
