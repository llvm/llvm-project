# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple aarch64 -run-pass=aarch64-prelegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s

name:            self
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $w0, $w1
    ; Optimize (cond ? %a : %a) -> %a
    ; CHECK-LABEL: name: self
    ; CHECK: liveins: $w0, $w1
    ; CHECK: %a:_(s32) = COPY $w0
    ; CHECK: $w0 = COPY %a(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %a:_(s32) = COPY $w0
    %cond_wide:gpr(s32) = COPY $w1
    %cond:gpr(s1) = G_TRUNC %cond_wide(s32)
    %select:_(s32) = G_SELECT %cond(s1), %a, %a
    $w0 = COPY %select(s32)
    RET_ReallyLR implicit $w0

...
---
name:            self_with_copy
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $w0, $w1
    ; Optimize (cond ? %a : %b) -> %a
    ;
    ; This shows that we are looking through copies correctly and deduce that
    ; %b is a copy from %a.
    ;
    ; CHECK-LABEL: name: self_with_copy
    ; CHECK: liveins: $w0, $w1
    ; CHECK: %a:_(s32) = COPY $w0
    ; CHECK: $w0 = COPY %a(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %a:_(s32) = COPY $w0
    %b:_(s32) = COPY %a
    %cond_wide:gpr(s32) = COPY $w1
    %cond:gpr(s1) = G_TRUNC %cond_wide(s32)
    %select:_(s32) = G_SELECT %cond(s1), %a, %b
    $w0 = COPY %select(s32)
    RET_ReallyLR implicit $w0

...
---
name:            self_with_equivalent
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $w0, $w1
    ; Optimize (cond ? %a : %b) -> %a
    ;
    ; This shows that we can detect when %a == %b, even though they define
    ; different virtual registers.
    ;
    ; CHECK-LABEL: name: self_with_equivalent
    ; CHECK: liveins: $w0, $w1
    ; CHECK: %a:_(s32) = COPY $w0
    ; CHECK: $w0 = COPY %a(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %a:_(s32) = COPY $w0
    %b:_(s32) = COPY $w0
    %cond_wide:gpr(s32) = COPY $w1
    %cond:gpr(s1) = G_TRUNC %cond_wide(s32)
    %select:_(s32) = G_SELECT %cond(s1), %a, %b
    $w0 = COPY %select(s32)
    RET_ReallyLR implicit $w0

...
---
name:            self_not_equivalent
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $w0, $w1
    ; In this case, the copies are not equivalent, so there is no optimization.
    ; CHECK-LABEL: name: self_not_equivalent
    ; CHECK: liveins: $w0, $w1
    ; CHECK: %a:_(s32) = COPY $w0
    ; CHECK: %b:_(s32) = COPY $w1
    ; CHECK: %cond_wide:gpr(s32) = COPY $w1
    ; CHECK: %cond:gpr(s1) = G_TRUNC %cond_wide(s32)
    ; CHECK: %select:_(s32) = G_SELECT %cond(s1), %a, %b
    ; CHECK: $w0 = COPY %select(s32)
    ; CHECK: RET_ReallyLR implicit $w0
    %a:_(s32) = COPY $w0
    %b:_(s32) = COPY $w1
    %cond_wide:gpr(s32) = COPY $w1
    %cond:gpr(s1) = G_TRUNC %cond_wide(s32)
    %select:_(s32) = G_SELECT %cond(s1), %a, %b
    $w0 = COPY %select(s32)
    RET_ReallyLR implicit $w0
