# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -mtriple aarch64 -run-pass=aarch64-postlegalizer-combiner -verify-machineinstrs %s -o - | FileCheck %s
---
name:            sext_of_fcmp_v4s32
legalized:       true
liveins:
  - { reg: '$q0' }
  - { reg: '$x0' }
  - { reg: '$x1' }
  - { reg: '$x2' }
body:             |
  bb.1:
    liveins: $q0, $x0, $x1, $x2

    ; CHECK-LABEL: name: sext_of_fcmp_v4s32
    ; CHECK: liveins: $q0, $x0, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 6.000000e+00
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
    ; CHECK-NEXT: [[FCMP:%[0-9]+]]:_(<4 x s32>) = G_FCMP floatpred(ogt), [[COPY]](<4 x s32>), [[BUILD_VECTOR]]
    ; CHECK-NEXT: $q0 = COPY [[FCMP]](<4 x s32>)
    ; CHECK-NEXT: RET_ReallyLR implicit $q0
    %0:_(<4 x s32>) = COPY $q0
    %6:_(s32) = G_FCONSTANT float 6.000000e+00
    %5:_(<4 x s32>) = G_BUILD_VECTOR %6(s32), %6(s32), %6(s32), %6(s32)
    %17:_(<4 x s32>) = G_FCMP floatpred(ogt), %0(<4 x s32>), %5
    %19:_(s32) = G_CONSTANT i32 31
    %20:_(<4 x s32>) = G_BUILD_VECTOR %19(s32), %19(s32), %19(s32), %19(s32)
    %18:_(<4 x s32>) = G_SHL %17, %20(<4 x s32>)
    %11:_(<4 x s32>) = G_ASHR %18, %20(<4 x s32>)
    $q0 = COPY %11(<4 x s32>)
    RET_ReallyLR implicit $q0

...
---
name:            sext_of_icmp_v4s32
legalized:       true
liveins:
  - { reg: '$q0' }
  - { reg: '$x0' }
  - { reg: '$x1' }
  - { reg: '$x2' }
body:             |
  bb.1:
    liveins: $q0, $x0, $x1, $x2

    ; CHECK-LABEL: name: sext_of_icmp_v4s32
    ; CHECK: liveins: $q0, $x0, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 42
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
    ; CHECK-NEXT: [[ICMP:%[0-9]+]]:_(<4 x s32>) = G_ICMP intpred(eq), [[COPY]](<4 x s32>), [[BUILD_VECTOR]]
    ; CHECK-NEXT: $q0 = COPY [[ICMP]](<4 x s32>)
    ; CHECK-NEXT: RET_ReallyLR implicit $q0
    %0:_(<4 x s32>) = COPY $q0
    %6:_(s32) = G_CONSTANT i32 42
    %5:_(<4 x s32>) = G_BUILD_VECTOR %6(s32), %6(s32), %6(s32), %6(s32)
    %17:_(<4 x s32>) = G_ICMP intpred(eq), %0(<4 x s32>), %5
    %19:_(s32) = G_CONSTANT i32 31
    %20:_(<4 x s32>) = G_BUILD_VECTOR %19(s32), %19(s32), %19(s32), %19(s32)
    %18:_(<4 x s32>) = G_SHL %17, %20(<4 x s32>)
    %11:_(<4 x s32>) = G_ASHR %18, %20(<4 x s32>)
    $q0 = COPY %11(<4 x s32>)
    RET_ReallyLR implicit $q0

...
---
name:            sext_of_fcmp_wrong_shift
legalized:       true
liveins:
  - { reg: '$q0' }
  - { reg: '$x0' }
  - { reg: '$x1' }
  - { reg: '$x2' }
body:             |
  bb.1:
    liveins: $q0, $x0, $x1, $x2

    ; CHECK-LABEL: name: sext_of_fcmp_wrong_shift
    ; CHECK: liveins: $q0, $x0, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 6.000000e+00
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
    ; CHECK-NEXT: [[FCMP:%[0-9]+]]:_(<4 x s32>) = G_FCMP floatpred(ogt), [[COPY]](<4 x s32>), [[BUILD_VECTOR]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 29
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C1]](s32), [[C1]](s32), [[C1]](s32), [[C1]](s32)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(<4 x s32>) = G_SHL [[FCMP]], [[BUILD_VECTOR1]](<4 x s32>)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(<4 x s32>) = G_ASHR [[SHL]], [[BUILD_VECTOR1]](<4 x s32>)
    ; CHECK-NEXT: $q0 = COPY [[ASHR]](<4 x s32>)
    ; CHECK-NEXT: RET_ReallyLR implicit $q0
    %0:_(<4 x s32>) = COPY $q0
    %6:_(s32) = G_FCONSTANT float 6.000000e+00
    %5:_(<4 x s32>) = G_BUILD_VECTOR %6(s32), %6(s32), %6(s32), %6(s32)
    %17:_(<4 x s32>) = G_FCMP floatpred(ogt), %0(<4 x s32>), %5
    %19:_(s32) = G_CONSTANT i32 29
    %20:_(<4 x s32>) = G_BUILD_VECTOR %19(s32), %19(s32), %19(s32), %19(s32)
    %18:_(<4 x s32>) = G_SHL %17, %20(<4 x s32>)
    %11:_(<4 x s32>) = G_ASHR %18, %20(<4 x s32>)
    $q0 = COPY %11(<4 x s32>)
    RET_ReallyLR implicit $q0

...
---
name:            sext_of_fcmp_mismatch_shift
legalized:       true
liveins:
  - { reg: '$q0' }
  - { reg: '$x0' }
  - { reg: '$x1' }
  - { reg: '$x2' }
body:             |
  bb.1:
    liveins: $q0, $x0, $x1, $x2

    ; CHECK-LABEL: name: sext_of_fcmp_mismatch_shift
    ; CHECK: liveins: $q0, $x0, $x1, $x2
    ; CHECK-NEXT: {{  $}}
    ; CHECK-NEXT: [[COPY:%[0-9]+]]:_(<4 x s32>) = COPY $q0
    ; CHECK-NEXT: [[C:%[0-9]+]]:_(s32) = G_FCONSTANT float 6.000000e+00
    ; CHECK-NEXT: [[BUILD_VECTOR:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C]](s32), [[C]](s32), [[C]](s32), [[C]](s32)
    ; CHECK-NEXT: [[FCMP:%[0-9]+]]:_(<4 x s32>) = G_FCMP floatpred(ogt), [[COPY]](<4 x s32>), [[BUILD_VECTOR]]
    ; CHECK-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 29
    ; CHECK-NEXT: [[BUILD_VECTOR1:%[0-9]+]]:_(<4 x s32>) = G_BUILD_VECTOR [[C1]](s32), [[C1]](s32), [[C1]](s32), [[C1]](s32)
    ; CHECK-NEXT: %cst2:_(s32) = G_CONSTANT i32 31
    ; CHECK-NEXT: %cstv2:_(<4 x s32>) = G_BUILD_VECTOR %cst2(s32), %cst2(s32), %cst2(s32), %cst2(s32)
    ; CHECK-NEXT: [[SHL:%[0-9]+]]:_(<4 x s32>) = G_SHL [[FCMP]], [[BUILD_VECTOR1]](<4 x s32>)
    ; CHECK-NEXT: [[ASHR:%[0-9]+]]:_(<4 x s32>) = G_ASHR [[SHL]], %cstv2(<4 x s32>)
    ; CHECK-NEXT: $q0 = COPY [[ASHR]](<4 x s32>)
    ; CHECK-NEXT: RET_ReallyLR implicit $q0
    %0:_(<4 x s32>) = COPY $q0
    %6:_(s32) = G_FCONSTANT float 6.000000e+00
    %5:_(<4 x s32>) = G_BUILD_VECTOR %6(s32), %6(s32), %6(s32), %6(s32)
    %17:_(<4 x s32>) = G_FCMP floatpred(ogt), %0(<4 x s32>), %5
    %19:_(s32) = G_CONSTANT i32 29
    %20:_(<4 x s32>) = G_BUILD_VECTOR %19(s32), %19(s32), %19(s32), %19(s32)
    %cst2:_(s32) = G_CONSTANT i32 31
    %cstv2:_(<4 x s32>) = G_BUILD_VECTOR %cst2(s32), %cst2(s32), %cst2(s32), %cst2(s32)
    %18:_(<4 x s32>) = G_SHL %17, %20(<4 x s32>)
    %11:_(<4 x s32>) = G_ASHR %18, %cstv2(<4 x s32>)
    $q0 = COPY %11(<4 x s32>)
    RET_ReallyLR implicit $q0

...
