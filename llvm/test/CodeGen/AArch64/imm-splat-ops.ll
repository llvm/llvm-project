; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64-none-linux-gnu -mattr=+neon < %s -o - | FileCheck %s --check-prefix=CHECK-NEON
; RUN: llc -mtriple=aarch64-none-linux-gnu -mattr=+sve < %s -o - | FileCheck %s --check-prefix=CHECK-SVE

define <4 x i32> @and(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: and:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    fmov v1.4s, #1.00000000
; CHECK-NEON-NEXT:    and v0.16b, v0.16b, v1.16b
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: and:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-SVE-NEXT:    and z0.s, z0.s, #0x3f800000
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-SVE-NEXT:    ret
entry:
  %and = and <4 x i32> %a, splat (i32 1065353216)
  ret <4 x i32> %and
}

define <4 x i32> @or(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: or:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    mvni v1.4s, #127
; CHECK-NEON-NEXT:    orr v0.16b, v0.16b, v1.16b
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: or:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-SVE-NEXT:    orr z0.s, z0.s, #0xffffff80
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-SVE-NEXT:    ret
entry:
  %or = or <4 x i32> %a, splat (i32 -128)
  ret <4 x i32> %or
}


define <4 x i32> @add(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: add:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    movi v1.4s, #1
; CHECK-NEON-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: add:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-SVE-NEXT:    add z0.s, z0.s, #1 // =0x1
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-SVE-NEXT:    ret
entry:
  %add = add <4 x i32> %a, splat (i32 1)
  ret <4 x i32> %add
}

define <4 x i32> @add_not_multiple_of_256(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: add_not_multiple_of_256:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    mov w8, #513 // =0x201
; CHECK-NEON-NEXT:    dup v1.4s, w8
; CHECK-NEON-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: add_not_multiple_of_256:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    mov w8, #513 // =0x201
; CHECK-SVE-NEXT:    dup v1.4s, w8
; CHECK-SVE-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-SVE-NEXT:    ret
entry:
  %add = add <4 x i32> %a, splat (i32 513)
  ret <4 x i32> %add
}

define <4 x i32> @sub(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: sub:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    movi v1.4s, #2, lsl #8
; CHECK-NEON-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: sub:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-SVE-NEXT:    add z0.s, z0.s, #512 // =0x200
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-SVE-NEXT:    ret
entry:
  %sub = add <4 x i32> %a, splat (i32 512)
  ret <4 x i32> %sub
}

define <4 x i32> @mul(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: mul:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    movi v1.4s, #33
; CHECK-NEON-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: mul:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-SVE-NEXT:    add z0.s, z0.s, #33 // =0x21
; CHECK-SVE-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-SVE-NEXT:    ret
entry:
  %mul = add <4 x i32> %a, splat (i32 33)
  ret <4 x i32> %mul
}

define <4 x i32> @mul_imm_too_big(<4 x i32> noundef %a) {
; CHECK-NEON-LABEL: mul_imm_too_big:
; CHECK-NEON:       // %bb.0: // %entry
; CHECK-NEON-NEXT:    mov w8, #320 // =0x140
; CHECK-NEON-NEXT:    dup v1.4s, w8
; CHECK-NEON-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-NEON-NEXT:    ret
;
; CHECK-SVE-LABEL: mul_imm_too_big:
; CHECK-SVE:       // %bb.0: // %entry
; CHECK-SVE-NEXT:    mov w8, #320 // =0x140
; CHECK-SVE-NEXT:    dup v1.4s, w8
; CHECK-SVE-NEXT:    add v0.4s, v0.4s, v1.4s
; CHECK-SVE-NEXT:    ret
entry:
  %mul = add <4 x i32> %a, splat (i32 320)
  ret <4 x i32> %mul
}
