; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=aarch64-linux | FileCheck %s

define i8 @andnot_add_with_neg_i8(i8 %0, i8 %1) {
; CHECK-LABEL: andnot_add_with_neg_i8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    bic w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i8 %0, -1
  %4 = add i8 %3, %1
  %5 = and i8 %4, %0
  ret i8 %5
}

define i8 @andnot_sub_with_neg_i8(i8 %0, i8 %1) {
; CHECK-LABEL: andnot_sub_with_neg_i8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    bic w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i8 %0, -1
  %4 = sub i8 %3, %1
  %5 = and i8 %4, %0
  ret i8 %5
}

define i8 @xornot_add_with_neg_i8(i8 %0, i8 %1) {
; CHECK-LABEL: xornot_add_with_neg_i8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    eon w0, w8, w0
; CHECK-NEXT:    ret
entry:
  %3 = xor i8 %0, -1
  %4 = add i8 %3, %1
  %5 = xor i8 %4, %0
  ret i8 %5
}

define i8 @xornot_sub_with_neg_i8(i8 %0, i8 %1) {
; CHECK-LABEL: xornot_sub_with_neg_i8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    eon w0, w8, w0
; CHECK-NEXT:    ret
entry:
  %3 = xor i8 %0, -1
  %4 = sub i8 %3, %1
  %5 = xor i8 %4, %0
  ret i8 %5
}

define i8 @ornot_add_with_neg_i8(i8 %0, i8 %1) {
; CHECK-LABEL: ornot_add_with_neg_i8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    orn w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i8 %0, -1
  %4 = add i8 %3, %1
  %5 = or i8 %4, %0
  ret i8 %5
}

define i8 @ornot_sub_with_neg_i8(i8 %0, i8 %1) {
; CHECK-LABEL: ornot_sub_with_neg_i8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    orn w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i8 %0, -1
  %4 = sub i8 %3, %1
  %5 = or i8 %4, %0
  ret i8 %5
}


define i16 @andnot_add_with_neg_i16(i16 %0, i16 %1) {
; CHECK-LABEL: andnot_add_with_neg_i16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    bic w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i16 %0, -1
  %4 = add i16 %3, %1
  %5 = and i16 %4, %0
  ret i16 %5
}

define i16 @andnot_sub_with_neg_i16(i16 %0, i16 %1) {
; CHECK-LABEL: andnot_sub_with_neg_i16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    bic w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i16 %0, -1
  %4 = sub i16 %3, %1
  %5 = and i16 %4, %0
  ret i16 %5
}

define i16 @xornot_add_with_neg_i16(i16 %0, i16 %1) {
; CHECK-LABEL: xornot_add_with_neg_i16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    eon w0, w8, w0
; CHECK-NEXT:    ret
entry:
  %3 = xor i16 %0, -1
  %4 = add i16 %3, %1
  %5 = xor i16 %4, %0
  ret i16 %5
}

define i16 @xornot_sub_with_neg_i16(i16 %0, i16 %1) {
; CHECK-LABEL: xornot_sub_with_neg_i16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    eon w0, w8, w0
; CHECK-NEXT:    ret
entry:
  %3 = xor i16 %0, -1
  %4 = sub i16 %3, %1
  %5 = xor i16 %4, %0
  ret i16 %5
}

define i16 @ornot_add_with_neg_i16(i16 %0, i16 %1) {
; CHECK-LABEL: ornot_add_with_neg_i16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    orn w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i16 %0, -1
  %4 = add i16 %3, %1
  %5 = or i16 %4, %0
  ret i16 %5
}

define i16 @ornot_sub_with_neg_i16(i16 %0, i16 %1) {
; CHECK-LABEL: ornot_sub_with_neg_i16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    orn w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i16 %0, -1
  %4 = sub i16 %3, %1
  %5 = or i16 %4, %0
  ret i16 %5
}

define i32 @andnot_add_with_neg_i32(i32 %0, i32 %1) {
; CHECK-LABEL: andnot_add_with_neg_i32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    bic w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i32 %0, -1
  %4 = add i32 %3, %1
  %5 = and i32 %4, %0
  ret i32 %5
}

define i32 @andnot_sub_with_neg_i32(i32 %0, i32 %1) {
; CHECK-LABEL: andnot_sub_with_neg_i32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    bic w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i32 %0, -1
  %4 = sub i32 %3, %1
  %5 = and i32 %4, %0
  ret i32 %5
}

define i32 @xornot_add_with_neg_i32(i32 %0, i32 %1) {
; CHECK-LABEL: xornot_add_with_neg_i32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    eon w0, w8, w0
; CHECK-NEXT:    ret
entry:
  %3 = xor i32 %0, -1
  %4 = add i32 %3, %1
  %5 = xor i32 %4, %0
  ret i32 %5
}

define i32 @xornot_sub_with_neg_i32(i32 %0, i32 %1) {
; CHECK-LABEL: xornot_sub_with_neg_i32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    eon w0, w8, w0
; CHECK-NEXT:    ret
entry:
  %3 = xor i32 %0, -1
  %4 = sub i32 %3, %1
  %5 = xor i32 %4, %0
  ret i32 %5
}

define i32 @ornot_add_with_neg_i32(i32 %0, i32 %1) {
; CHECK-LABEL: ornot_add_with_neg_i32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub w8, w0, w1
; CHECK-NEXT:    orn w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i32 %0, -1
  %4 = add i32 %3, %1
  %5 = or i32 %4, %0
  ret i32 %5
}

define i32 @ornot_sub_with_neg_i32(i32 %0, i32 %1) {
; CHECK-LABEL: ornot_sub_with_neg_i32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add w8, w0, w1
; CHECK-NEXT:    orn w0, w0, w8
; CHECK-NEXT:    ret
entry:
  %3 = xor i32 %0, -1
  %4 = sub i32 %3, %1
  %5 = or i32 %4, %0
  ret i32 %5
}


define i64 @andnot_add_with_neg_i64(i64 %0, i64 %1) {
; CHECK-LABEL: andnot_add_with_neg_i64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub x8, x0, x1
; CHECK-NEXT:    bic x0, x0, x8
; CHECK-NEXT:    ret
entry:
  %3 = xor i64 %0, -1
  %4 = add i64 %3, %1
  %5 = and i64 %4, %0
  ret i64 %5
}

define i64 @andnot_sub_with_neg_i64(i64 %0, i64 %1) {
; CHECK-LABEL: andnot_sub_with_neg_i64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, x1
; CHECK-NEXT:    bic x0, x0, x8
; CHECK-NEXT:    ret
entry:
  %3 = xor i64 %0, -1
  %4 = sub i64 %3, %1
  %5 = and i64 %4, %0
  ret i64 %5
}

define i64 @xornot_add_with_neg_i64(i64 %0, i64 %1) {
; CHECK-LABEL: xornot_add_with_neg_i64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub x8, x0, x1
; CHECK-NEXT:    eon x0, x8, x0
; CHECK-NEXT:    ret
entry:
  %3 = xor i64 %0, -1
  %4 = add i64 %3, %1
  %5 = xor i64 %4, %0
  ret i64 %5
}

define i64 @xornot_sub_with_neg_i64(i64 %0, i64 %1) {
; CHECK-LABEL: xornot_sub_with_neg_i64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, x1
; CHECK-NEXT:    eon x0, x8, x0
; CHECK-NEXT:    ret
entry:
  %3 = xor i64 %0, -1
  %4 = sub i64 %3, %1
  %5 = xor i64 %4, %0
  ret i64 %5
}

define i64 @ornot_add_with_neg_i64(i64 %0, i64 %1) {
; CHECK-LABEL: ornot_add_with_neg_i64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sub x8, x0, x1
; CHECK-NEXT:    orn x0, x0, x8
; CHECK-NEXT:    ret
entry:
  %3 = xor i64 %0, -1
  %4 = add i64 %3, %1
  %5 = or i64 %4, %0
  ret i64 %5
}

define i64 @ornot_sub_with_neg_i64(i64 %0, i64 %1) {
; CHECK-LABEL: ornot_sub_with_neg_i64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x0, x1
; CHECK-NEXT:    orn x0, x0, x8
; CHECK-NEXT:    ret
entry:
  %3 = xor i64 %0, -1
  %4 = sub i64 %3, %1
  %5 = or i64 %4, %0
  ret i64 %5
}
