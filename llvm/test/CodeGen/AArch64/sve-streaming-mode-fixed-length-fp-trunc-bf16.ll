; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mattr=+bf16 < %s | FileCheck %s --check-prefix=BF16-NEON
; RUN: llc -force-streaming-compatible < %s | FileCheck %s --check-prefix=NOBF16-NOSVE-NONEON
; RUN: llc -mattr=+sve -force-streaming-compatible  < %s | FileCheck %s --check-prefix=NOBF16-SVE-NONEON
; RUN: llc -mattr=+bf16 -force-streaming-compatible < %s | FileCheck %s --check-prefix=BF16-NOSVE-NONEON
; RUN: llc -mattr=+sve,+bf16 -force-streaming-compatible  < %s | FileCheck %s --check-prefix=BF16-SVE-NONEON

target triple = "aarch64-unknown-linux-gnu"

define void @fcvt_v2f64_v2bf16(ptr %a, ptr %b) {
; BF16-NEON-LABEL: fcvt_v2f64_v2bf16:
; BF16-NEON:       // %bb.0:
; BF16-NEON-NEXT:    ldr q0, [x0]
; BF16-NEON-NEXT:    fcvtxn v0.2s, v0.2d
; BF16-NEON-NEXT:    bfcvtn v0.4h, v0.4s
; BF16-NEON-NEXT:    str s0, [x1]
; BF16-NEON-NEXT:    ret
;
; NOBF16-NOSVE-NONEON-LABEL: fcvt_v2f64_v2bf16:
; NOBF16-NOSVE-NONEON:       // %bb.0:
; NOBF16-NOSVE-NONEON-NEXT:    ldr q0, [x0]
; NOBF16-NOSVE-NONEON-NEXT:    mov w8, #32767 // =0x7fff
; NOBF16-NOSVE-NONEON-NEXT:    str q0, [sp, #-32]!
; NOBF16-NOSVE-NONEON-NEXT:    .cfi_def_cfa_offset 32
; NOBF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #8]
; NOBF16-NOSVE-NONEON-NEXT:    fcvtxn s0, d0
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w9, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    add w9, w10, w9
; NOBF16-NOSVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #18]
; NOBF16-NOSVE-NONEON-NEXT:    ldr d0, [sp]
; NOBF16-NOSVE-NONEON-NEXT:    fcvtxn s0, d0
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w8, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    add w8, w10, w8
; NOBF16-NOSVE-NONEON-NEXT:    lsr w8, w8, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w8
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #16]
; NOBF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #16]
; NOBF16-NOSVE-NONEON-NEXT:    str d0, [sp, #24]
; NOBF16-NOSVE-NONEON-NEXT:    ldr w8, [sp, #24]
; NOBF16-NOSVE-NONEON-NEXT:    str w8, [x1]
; NOBF16-NOSVE-NONEON-NEXT:    add sp, sp, #32
; NOBF16-NOSVE-NONEON-NEXT:    ret
;
; NOBF16-SVE-NONEON-LABEL: fcvt_v2f64_v2bf16:
; NOBF16-SVE-NONEON:       // %bb.0:
; NOBF16-SVE-NONEON-NEXT:    sub sp, sp, #16
; NOBF16-SVE-NONEON-NEXT:    .cfi_def_cfa_offset 16
; NOBF16-SVE-NONEON-NEXT:    ldr q0, [x0]
; NOBF16-SVE-NONEON-NEXT:    mov w8, #32767 // =0x7fff
; NOBF16-SVE-NONEON-NEXT:    mov z1.d, z0.d[1]
; NOBF16-SVE-NONEON-NEXT:    fcvtxn s0, d0
; NOBF16-SVE-NONEON-NEXT:    fcvtxn s1, d1
; NOBF16-SVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-SVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-SVE-NONEON-NEXT:    fmov w11, s1
; NOBF16-SVE-NONEON-NEXT:    add w9, w9, w8
; NOBF16-SVE-NONEON-NEXT:    add w9, w10, w9
; NOBF16-SVE-NONEON-NEXT:    ubfx w12, w11, #16, #1
; NOBF16-SVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-SVE-NONEON-NEXT:    add w8, w11, w8
; NOBF16-SVE-NONEON-NEXT:    add w8, w12, w8
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-SVE-NONEON-NEXT:    lsr w8, w8, #16
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #8]
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w8
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #10]
; NOBF16-SVE-NONEON-NEXT:    ldr d0, [sp, #8]
; NOBF16-SVE-NONEON-NEXT:    fmov w8, s0
; NOBF16-SVE-NONEON-NEXT:    str w8, [x1]
; NOBF16-SVE-NONEON-NEXT:    add sp, sp, #16
; NOBF16-SVE-NONEON-NEXT:    ret
;
; BF16-NOSVE-NONEON-LABEL: fcvt_v2f64_v2bf16:
; BF16-NOSVE-NONEON:       // %bb.0:
; BF16-NOSVE-NONEON-NEXT:    ldr q0, [x0]
; BF16-NOSVE-NONEON-NEXT:    str q0, [sp, #-32]!
; BF16-NOSVE-NONEON-NEXT:    .cfi_def_cfa_offset 32
; BF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #8]
; BF16-NOSVE-NONEON-NEXT:    fcvtxn s0, d0
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #18]
; BF16-NOSVE-NONEON-NEXT:    ldr d0, [sp]
; BF16-NOSVE-NONEON-NEXT:    fcvtxn s0, d0
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #16]
; BF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #16]
; BF16-NOSVE-NONEON-NEXT:    str d0, [sp, #24]
; BF16-NOSVE-NONEON-NEXT:    ldr w8, [sp, #24]
; BF16-NOSVE-NONEON-NEXT:    str w8, [x1]
; BF16-NOSVE-NONEON-NEXT:    add sp, sp, #32
; BF16-NOSVE-NONEON-NEXT:    ret
;
; BF16-SVE-NONEON-LABEL: fcvt_v2f64_v2bf16:
; BF16-SVE-NONEON:       // %bb.0:
; BF16-SVE-NONEON-NEXT:    sub sp, sp, #16
; BF16-SVE-NONEON-NEXT:    .cfi_def_cfa_offset 16
; BF16-SVE-NONEON-NEXT:    ldr q0, [x0]
; BF16-SVE-NONEON-NEXT:    mov z1.d, z0.d[1]
; BF16-SVE-NONEON-NEXT:    fcvtxn s0, d0
; BF16-SVE-NONEON-NEXT:    fcvtxn s1, d1
; BF16-SVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-SVE-NONEON-NEXT:    bfcvt h1, s1
; BF16-SVE-NONEON-NEXT:    str h0, [sp, #8]
; BF16-SVE-NONEON-NEXT:    str h1, [sp, #10]
; BF16-SVE-NONEON-NEXT:    ldr d0, [sp, #8]
; BF16-SVE-NONEON-NEXT:    fmov w8, s0
; BF16-SVE-NONEON-NEXT:    str w8, [x1]
; BF16-SVE-NONEON-NEXT:    add sp, sp, #16
; BF16-SVE-NONEON-NEXT:    ret
  %op1 = load <2 x double>, ptr %a
  %res = fptrunc <2 x double> %op1 to <2 x bfloat>
  store <2 x bfloat> %res, ptr %b
  ret void
}

define void @fcvt_v4f34_v4bf16(ptr %a, ptr %b) {
; BF16-NEON-LABEL: fcvt_v4f34_v4bf16:
; BF16-NEON:       // %bb.0:
; BF16-NEON-NEXT:    ldr q0, [x0]
; BF16-NEON-NEXT:    bfcvtn v0.4h, v0.4s
; BF16-NEON-NEXT:    str d0, [x1]
; BF16-NEON-NEXT:    ret
;
; NOBF16-NOSVE-NONEON-LABEL: fcvt_v4f34_v4bf16:
; NOBF16-NOSVE-NONEON:       // %bb.0:
; NOBF16-NOSVE-NONEON-NEXT:    ldr q0, [x0]
; NOBF16-NOSVE-NONEON-NEXT:    mov w8, #32767 // =0x7fff
; NOBF16-NOSVE-NONEON-NEXT:    str q0, [sp, #-32]!
; NOBF16-NOSVE-NONEON-NEXT:    .cfi_def_cfa_offset 32
; NOBF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #12]
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w11, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-NOSVE-NONEON-NEXT:    add w10, w10, w11
; NOBF16-NOSVE-NONEON-NEXT:    csel w9, w9, w10, vs
; NOBF16-NOSVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #30]
; NOBF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #8]
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w11, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-NOSVE-NONEON-NEXT:    add w10, w10, w11
; NOBF16-NOSVE-NONEON-NEXT:    csel w9, w9, w10, vs
; NOBF16-NOSVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #28]
; NOBF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #4]
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w11, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-NOSVE-NONEON-NEXT:    add w10, w10, w11
; NOBF16-NOSVE-NONEON-NEXT:    csel w9, w9, w10, vs
; NOBF16-NOSVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #26]
; NOBF16-NOSVE-NONEON-NEXT:    ldr s0, [sp]
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w8, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-NOSVE-NONEON-NEXT:    add w8, w10, w8
; NOBF16-NOSVE-NONEON-NEXT:    csel w8, w9, w8, vs
; NOBF16-NOSVE-NONEON-NEXT:    lsr w8, w8, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w8
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #24]
; NOBF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #24]
; NOBF16-NOSVE-NONEON-NEXT:    str d0, [x1]
; NOBF16-NOSVE-NONEON-NEXT:    add sp, sp, #32
; NOBF16-NOSVE-NONEON-NEXT:    ret
;
; NOBF16-SVE-NONEON-LABEL: fcvt_v4f34_v4bf16:
; NOBF16-SVE-NONEON:       // %bb.0:
; NOBF16-SVE-NONEON-NEXT:    sub sp, sp, #16
; NOBF16-SVE-NONEON-NEXT:    .cfi_def_cfa_offset 16
; NOBF16-SVE-NONEON-NEXT:    ldr q0, [x0]
; NOBF16-SVE-NONEON-NEXT:    mov w8, #32767 // =0x7fff
; NOBF16-SVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-SVE-NONEON-NEXT:    mov z1.s, z0.s[3]
; NOBF16-SVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-SVE-NONEON-NEXT:    mov z2.s, z0.s[2]
; NOBF16-SVE-NONEON-NEXT:    mov z0.s, z0.s[1]
; NOBF16-SVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-SVE-NONEON-NEXT:    add w11, w9, w8
; NOBF16-SVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-SVE-NONEON-NEXT:    add w10, w10, w11
; NOBF16-SVE-NONEON-NEXT:    fmov w11, s1
; NOBF16-SVE-NONEON-NEXT:    csel w9, w9, w10, vs
; NOBF16-SVE-NONEON-NEXT:    fcmp s1, s1
; NOBF16-SVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-SVE-NONEON-NEXT:    ubfx w10, w11, #16, #1
; NOBF16-SVE-NONEON-NEXT:    add w12, w11, w8
; NOBF16-SVE-NONEON-NEXT:    orr w11, w11, #0x400000
; NOBF16-SVE-NONEON-NEXT:    add w10, w10, w12
; NOBF16-SVE-NONEON-NEXT:    fmov w12, s2
; NOBF16-SVE-NONEON-NEXT:    csel w10, w11, w10, vs
; NOBF16-SVE-NONEON-NEXT:    fcmp s2, s2
; NOBF16-SVE-NONEON-NEXT:    lsr w10, w10, #16
; NOBF16-SVE-NONEON-NEXT:    ubfx w11, w12, #16, #1
; NOBF16-SVE-NONEON-NEXT:    add w13, w12, w8
; NOBF16-SVE-NONEON-NEXT:    orr w12, w12, #0x400000
; NOBF16-SVE-NONEON-NEXT:    add w11, w11, w13
; NOBF16-SVE-NONEON-NEXT:    fmov w13, s0
; NOBF16-SVE-NONEON-NEXT:    csel w11, w12, w11, vs
; NOBF16-SVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-SVE-NONEON-NEXT:    lsr w9, w11, #16
; NOBF16-SVE-NONEON-NEXT:    ubfx w12, w13, #16, #1
; NOBF16-SVE-NONEON-NEXT:    add w8, w13, w8
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #8]
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w10
; NOBF16-SVE-NONEON-NEXT:    add w8, w12, w8
; NOBF16-SVE-NONEON-NEXT:    orr w12, w13, #0x400000
; NOBF16-SVE-NONEON-NEXT:    csel w8, w12, w8, vs
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #14]
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-SVE-NONEON-NEXT:    lsr w8, w8, #16
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #12]
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w8
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #10]
; NOBF16-SVE-NONEON-NEXT:    ldr d0, [sp, #8]
; NOBF16-SVE-NONEON-NEXT:    str d0, [x1]
; NOBF16-SVE-NONEON-NEXT:    add sp, sp, #16
; NOBF16-SVE-NONEON-NEXT:    ret
;
; BF16-NOSVE-NONEON-LABEL: fcvt_v4f34_v4bf16:
; BF16-NOSVE-NONEON:       // %bb.0:
; BF16-NOSVE-NONEON-NEXT:    ldr q0, [x0]
; BF16-NOSVE-NONEON-NEXT:    str q0, [sp, #-32]!
; BF16-NOSVE-NONEON-NEXT:    .cfi_def_cfa_offset 32
; BF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #12]
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #30]
; BF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #8]
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #28]
; BF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #4]
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #26]
; BF16-NOSVE-NONEON-NEXT:    ldr s0, [sp]
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #24]
; BF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #24]
; BF16-NOSVE-NONEON-NEXT:    str d0, [x1]
; BF16-NOSVE-NONEON-NEXT:    add sp, sp, #32
; BF16-NOSVE-NONEON-NEXT:    ret
;
; BF16-SVE-NONEON-LABEL: fcvt_v4f34_v4bf16:
; BF16-SVE-NONEON:       // %bb.0:
; BF16-SVE-NONEON-NEXT:    sub sp, sp, #16
; BF16-SVE-NONEON-NEXT:    .cfi_def_cfa_offset 16
; BF16-SVE-NONEON-NEXT:    ldr q0, [x0]
; BF16-SVE-NONEON-NEXT:    mov z1.s, z0.s[3]
; BF16-SVE-NONEON-NEXT:    mov z2.s, z0.s[2]
; BF16-SVE-NONEON-NEXT:    bfcvt h3, s0
; BF16-SVE-NONEON-NEXT:    mov z0.s, z0.s[1]
; BF16-SVE-NONEON-NEXT:    bfcvt h1, s1
; BF16-SVE-NONEON-NEXT:    bfcvt h2, s2
; BF16-SVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-SVE-NONEON-NEXT:    str h3, [sp, #8]
; BF16-SVE-NONEON-NEXT:    str h1, [sp, #14]
; BF16-SVE-NONEON-NEXT:    str h2, [sp, #12]
; BF16-SVE-NONEON-NEXT:    str h0, [sp, #10]
; BF16-SVE-NONEON-NEXT:    ldr d0, [sp, #8]
; BF16-SVE-NONEON-NEXT:    str d0, [x1]
; BF16-SVE-NONEON-NEXT:    add sp, sp, #16
; BF16-SVE-NONEON-NEXT:    ret
  %op1 = load <4 x float>, ptr %a
  %res = fptrunc <4 x float> %op1 to <4 x bfloat>
  store <4 x bfloat> %res, ptr %b
  ret void
}

define void @fcvt_v2f32_v2bf16(ptr %a, ptr %b) {
; BF16-NEON-LABEL: fcvt_v2f32_v2bf16:
; BF16-NEON:       // %bb.0:
; BF16-NEON-NEXT:    ldr d0, [x0]
; BF16-NEON-NEXT:    bfcvtn v0.4h, v0.4s
; BF16-NEON-NEXT:    str s0, [x1]
; BF16-NEON-NEXT:    ret
;
; NOBF16-NOSVE-NONEON-LABEL: fcvt_v2f32_v2bf16:
; NOBF16-NOSVE-NONEON:       // %bb.0:
; NOBF16-NOSVE-NONEON-NEXT:    sub sp, sp, #32
; NOBF16-NOSVE-NONEON-NEXT:    .cfi_def_cfa_offset 32
; NOBF16-NOSVE-NONEON-NEXT:    ldr d0, [x0]
; NOBF16-NOSVE-NONEON-NEXT:    mov w8, #32767 // =0x7fff
; NOBF16-NOSVE-NONEON-NEXT:    str d0, [sp, #8]
; NOBF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #12]
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w11, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-NOSVE-NONEON-NEXT:    add w10, w10, w11
; NOBF16-NOSVE-NONEON-NEXT:    csel w9, w9, w10, vs
; NOBF16-NOSVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #18]
; NOBF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #8]
; NOBF16-NOSVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-NOSVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-NOSVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-NOSVE-NONEON-NEXT:    add w8, w9, w8
; NOBF16-NOSVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-NOSVE-NONEON-NEXT:    add w8, w10, w8
; NOBF16-NOSVE-NONEON-NEXT:    csel w8, w9, w8, vs
; NOBF16-NOSVE-NONEON-NEXT:    lsr w8, w8, #16
; NOBF16-NOSVE-NONEON-NEXT:    fmov s0, w8
; NOBF16-NOSVE-NONEON-NEXT:    str h0, [sp, #16]
; NOBF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #16]
; NOBF16-NOSVE-NONEON-NEXT:    str d0, [sp, #24]
; NOBF16-NOSVE-NONEON-NEXT:    ldr w8, [sp, #24]
; NOBF16-NOSVE-NONEON-NEXT:    str w8, [x1]
; NOBF16-NOSVE-NONEON-NEXT:    add sp, sp, #32
; NOBF16-NOSVE-NONEON-NEXT:    ret
;
; NOBF16-SVE-NONEON-LABEL: fcvt_v2f32_v2bf16:
; NOBF16-SVE-NONEON:       // %bb.0:
; NOBF16-SVE-NONEON-NEXT:    sub sp, sp, #16
; NOBF16-SVE-NONEON-NEXT:    .cfi_def_cfa_offset 16
; NOBF16-SVE-NONEON-NEXT:    ldr d0, [x0]
; NOBF16-SVE-NONEON-NEXT:    mov w8, #32767 // =0x7fff
; NOBF16-SVE-NONEON-NEXT:    fmov w9, s0
; NOBF16-SVE-NONEON-NEXT:    mov z1.s, z0.s[1]
; NOBF16-SVE-NONEON-NEXT:    fcmp s0, s0
; NOBF16-SVE-NONEON-NEXT:    ubfx w10, w9, #16, #1
; NOBF16-SVE-NONEON-NEXT:    add w11, w9, w8
; NOBF16-SVE-NONEON-NEXT:    orr w9, w9, #0x400000
; NOBF16-SVE-NONEON-NEXT:    add w10, w10, w11
; NOBF16-SVE-NONEON-NEXT:    fmov w11, s1
; NOBF16-SVE-NONEON-NEXT:    csel w9, w9, w10, vs
; NOBF16-SVE-NONEON-NEXT:    fcmp s1, s1
; NOBF16-SVE-NONEON-NEXT:    lsr w9, w9, #16
; NOBF16-SVE-NONEON-NEXT:    ubfx w10, w11, #16, #1
; NOBF16-SVE-NONEON-NEXT:    add w8, w11, w8
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w9
; NOBF16-SVE-NONEON-NEXT:    add w8, w10, w8
; NOBF16-SVE-NONEON-NEXT:    orr w10, w11, #0x400000
; NOBF16-SVE-NONEON-NEXT:    csel w8, w10, w8, vs
; NOBF16-SVE-NONEON-NEXT:    lsr w8, w8, #16
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #8]
; NOBF16-SVE-NONEON-NEXT:    fmov s0, w8
; NOBF16-SVE-NONEON-NEXT:    str h0, [sp, #10]
; NOBF16-SVE-NONEON-NEXT:    ldr d0, [sp, #8]
; NOBF16-SVE-NONEON-NEXT:    fmov w8, s0
; NOBF16-SVE-NONEON-NEXT:    str w8, [x1]
; NOBF16-SVE-NONEON-NEXT:    add sp, sp, #16
; NOBF16-SVE-NONEON-NEXT:    ret
;
; BF16-NOSVE-NONEON-LABEL: fcvt_v2f32_v2bf16:
; BF16-NOSVE-NONEON:       // %bb.0:
; BF16-NOSVE-NONEON-NEXT:    sub sp, sp, #32
; BF16-NOSVE-NONEON-NEXT:    .cfi_def_cfa_offset 32
; BF16-NOSVE-NONEON-NEXT:    ldr d0, [x0]
; BF16-NOSVE-NONEON-NEXT:    str d0, [sp, #8]
; BF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #12]
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #18]
; BF16-NOSVE-NONEON-NEXT:    ldr s0, [sp, #8]
; BF16-NOSVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-NOSVE-NONEON-NEXT:    str h0, [sp, #16]
; BF16-NOSVE-NONEON-NEXT:    ldr d0, [sp, #16]
; BF16-NOSVE-NONEON-NEXT:    str d0, [sp, #24]
; BF16-NOSVE-NONEON-NEXT:    ldr w8, [sp, #24]
; BF16-NOSVE-NONEON-NEXT:    str w8, [x1]
; BF16-NOSVE-NONEON-NEXT:    add sp, sp, #32
; BF16-NOSVE-NONEON-NEXT:    ret
;
; BF16-SVE-NONEON-LABEL: fcvt_v2f32_v2bf16:
; BF16-SVE-NONEON:       // %bb.0:
; BF16-SVE-NONEON-NEXT:    sub sp, sp, #16
; BF16-SVE-NONEON-NEXT:    .cfi_def_cfa_offset 16
; BF16-SVE-NONEON-NEXT:    ldr d0, [x0]
; BF16-SVE-NONEON-NEXT:    mov z1.s, z0.s[1]
; BF16-SVE-NONEON-NEXT:    bfcvt h0, s0
; BF16-SVE-NONEON-NEXT:    bfcvt h1, s1
; BF16-SVE-NONEON-NEXT:    str h0, [sp, #8]
; BF16-SVE-NONEON-NEXT:    str h1, [sp, #10]
; BF16-SVE-NONEON-NEXT:    ldr d0, [sp, #8]
; BF16-SVE-NONEON-NEXT:    fmov w8, s0
; BF16-SVE-NONEON-NEXT:    str w8, [x1]
; BF16-SVE-NONEON-NEXT:    add sp, sp, #16
; BF16-SVE-NONEON-NEXT:    ret
  %op1 = load <2 x float>, ptr %a
  %res = fptrunc <2 x float> %op1 to <2 x bfloat>
  store <2 x bfloat> %res, ptr %b
  ret void
}
