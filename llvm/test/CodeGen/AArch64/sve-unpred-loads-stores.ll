; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sve -aarch64-sve-vector-bits-max=128 < %s | FileCheck %s --check-prefix=CHECK-128
; RUN: llc -mtriple=aarch64_be-linux-gnu -mattr=+sve -aarch64-sve-vector-bits-max=128 < %s | not grep -e ldr -e str

define <vscale x 16 x i8> @ld_nxv16i8(ptr %0) {
; CHECK-128-LABEL: ld_nxv16i8:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 16 x i8>, ptr %0, align 1
  ret <vscale x 16 x i8> %2
}

define void @st_nxv16i8(ptr %0, <vscale x 16 x i8> %1) {
; CHECK-128-LABEL: st_nxv16i8:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 16 x i8> %1, ptr %0, align 1
  ret void
}

define <vscale x 8 x i16> @ld_nxv8i16(ptr %0) {
; CHECK-128-LABEL: ld_nxv8i16:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 8 x i16>, ptr %0, align 2
  ret <vscale x 8 x i16> %2
}

define void @st_nxv8i16(ptr %0, <vscale x 8 x i16> %1) {
; CHECK-128-LABEL: st_nxv8i16:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 8 x i16> %1, ptr %0, align 2
  ret void
}

define <vscale x 4 x i32> @ld_nxv4i32(ptr %0) {
; CHECK-128-LABEL: ld_nxv4i32:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 4 x i32>, ptr %0, align 4
  ret <vscale x 4 x i32> %2
}

define void @st_nxv4i32(ptr %0, <vscale x 4 x i32> %1) {
; CHECK-128-LABEL: st_nxv4i32:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 4 x i32> %1, ptr %0, align 4
  ret void
}

define <vscale x 2 x i64> @ld_nxv2i64(ptr %0) {
; CHECK-128-LABEL: ld_nxv2i64:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 2 x i64>, ptr %0, align 8
  ret <vscale x 2 x i64> %2
}

define void @st_nxv2i64(ptr %0, <vscale x 2 x i64> %1) {
; CHECK-128-LABEL: st_nxv2i64:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 2 x i64> %1, ptr %0, align 8
  ret void
}

define <vscale x 8 x half> @ld_nxv8f16(ptr %0) {
; CHECK-128-LABEL: ld_nxv8f16:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 8 x half>, ptr %0, align 2
  ret <vscale x 8 x half> %2
}

define void @st_nxv8f16(ptr %0, <vscale x 8 x half> %1) {
; CHECK-128-LABEL: st_nxv8f16:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 8 x half> %1, ptr %0, align 2
  ret void
}

define <vscale x 4 x float> @ld_nxv4f32(ptr %0) {
; CHECK-128-LABEL: ld_nxv4f32:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 4 x float>, ptr %0, align 4
  ret <vscale x 4 x float> %2
}

define void @st_nxv4f32(ptr %0, <vscale x 4 x float> %1) {
; CHECK-128-LABEL: st_nxv4f32:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 4 x float> %1, ptr %0, align 4
  ret void
}

define <vscale x 2 x double> @ld_nxv2f64(ptr %0) {
; CHECK-128-LABEL: ld_nxv2f64:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    ldr q0, [x0]
; CHECK-128-NEXT:    ret
  %2 = load <vscale x 2 x double>, ptr %0, align 8
  ret <vscale x 2 x double> %2
}

define void @st_nxv2f64(ptr %0, <vscale x 2 x double> %1) {
; CHECK-128-LABEL: st_nxv2f64:
; CHECK-128:       // %bb.0:
; CHECK-128-NEXT:    str q0, [x0]
; CHECK-128-NEXT:    ret
  store <vscale x 2 x double> %1, ptr %0, align 8
  ret void
}
