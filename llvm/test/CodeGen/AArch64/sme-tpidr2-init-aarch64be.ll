; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64 -aarch64-streaming-hazard-size=0 -mattr=+sve -mattr=+sme < %s | FileCheck %s
; RUN: llc -mtriple=aarch64_be -aarch64-streaming-hazard-size=0 -mattr=+sve -mattr=+sme < %s | FileCheck %s --check-prefix=CHECK-BE

declare void @private_za_callee()
declare float @llvm.cos.f32(float)

; Test TPIDR2_EL0 is initialized correctly for AArch64 big-endian.
define void @test_tpidr2_init() nounwind "aarch64_inout_za" {
; CHECK-LABEL: test_tpidr2_init:
; CHECK:       // %bb.0:
; CHECK-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; CHECK-NEXT:    mov x29, sp
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    rdsvl x8, #1
; CHECK-NEXT:    mov x9, sp
; CHECK-NEXT:    msub x9, x8, x8, x9
; CHECK-NEXT:    mov sp, x9
; CHECK-NEXT:    sub x10, x29, #16
; CHECK-NEXT:    stp x9, x8, [x29, #-16]
; CHECK-NEXT:    msr TPIDR2_EL0, x10
; CHECK-NEXT:    bl private_za_callee
; CHECK-NEXT:    smstart za
; CHECK-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-NEXT:    sub x0, x29, #16
; CHECK-NEXT:    cbnz x8, .LBB0_2
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    bl __arm_tpidr2_restore
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-NEXT:    mov sp, x29
; CHECK-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; CHECK-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-NEXT:    ret
;
; CHECK-BE-LABEL: test_tpidr2_init:
; CHECK-BE:       // %bb.0:
; CHECK-BE-NEXT:    stp x29, x30, [sp, #-32]! // 16-byte Folded Spill
; CHECK-BE-NEXT:    str x19, [sp, #16] // 8-byte Folded Spill
; CHECK-BE-NEXT:    mov x29, sp
; CHECK-BE-NEXT:    sub sp, sp, #16
; CHECK-BE-NEXT:    rdsvl x8, #1
; CHECK-BE-NEXT:    mov x9, sp
; CHECK-BE-NEXT:    msub x9, x8, x8, x9
; CHECK-BE-NEXT:    mov sp, x9
; CHECK-BE-NEXT:    lsl x8, x8, #48
; CHECK-BE-NEXT:    sub x10, x29, #16
; CHECK-BE-NEXT:    stp x9, x8, [x29, #-16]
; CHECK-BE-NEXT:    msr TPIDR2_EL0, x10
; CHECK-BE-NEXT:    bl private_za_callee
; CHECK-BE-NEXT:    smstart za
; CHECK-BE-NEXT:    mrs x8, TPIDR2_EL0
; CHECK-BE-NEXT:    sub x0, x29, #16
; CHECK-BE-NEXT:    cbnz x8, .LBB0_2
; CHECK-BE-NEXT:  // %bb.1:
; CHECK-BE-NEXT:    bl __arm_tpidr2_restore
; CHECK-BE-NEXT:  .LBB0_2:
; CHECK-BE-NEXT:    msr TPIDR2_EL0, xzr
; CHECK-BE-NEXT:    mov sp, x29
; CHECK-BE-NEXT:    ldr x19, [sp, #16] // 8-byte Folded Reload
; CHECK-BE-NEXT:    ldp x29, x30, [sp], #32 // 16-byte Folded Reload
; CHECK-BE-NEXT:    ret
  call void @private_za_callee()
  ret void
}
