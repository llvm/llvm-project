; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -force-streaming-compatible-sve  < %s | FileCheck %s

target triple = "aarch64-unknown-linux-gnu"

;
; truncate i16 -> i8
;

define <16 x i8> @trunc_v16i16_v16i8(<16 x i16>* %in) vscale_range(2,0) #0 {
; CHECK-LABEL: trunc_v16i16_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl16
; CHECK-NEXT:    ld1h { z0.h }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %a = load <16 x i16>, <16 x i16>* %in
  %b = trunc <16 x i16> %a to <16 x i8>
  ret <16 x i8> %b
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v32i16_v32i8(<32 x i16>* %in, <32 x i8>* %out) #0 {
; CHECK-LABEL: trunc_v32i16_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    mov z17.h, z1.h[6]
; CHECK-NEXT:    mov z18.h, z1.h[5]
; CHECK-NEXT:    mov z19.h, z1.h[4]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    mov z2.h, z0.h[7]
; CHECK-NEXT:    mov z3.h, z0.h[6]
; CHECK-NEXT:    mov z4.h, z0.h[5]
; CHECK-NEXT:    ldp q22, q23, [x0]
; CHECK-NEXT:    fmov w10, s2
; CHECK-NEXT:    strb w8, [sp, #24]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strb w9, [sp, #16]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    mov z5.h, z0.h[4]
; CHECK-NEXT:    mov z6.h, z0.h[3]
; CHECK-NEXT:    mov z7.h, z0.h[2]
; CHECK-NEXT:    strb w10, [sp, #31]
; CHECK-NEXT:    fmov w10, s5
; CHECK-NEXT:    strb w8, [sp, #30]
; CHECK-NEXT:    fmov w8, s6
; CHECK-NEXT:    strb w9, [sp, #29]
; CHECK-NEXT:    fmov w9, s7
; CHECK-NEXT:    mov z16.h, z0.h[1]
; CHECK-NEXT:    mov z0.h, z1.h[7]
; CHECK-NEXT:    strb w10, [sp, #28]
; CHECK-NEXT:    fmov w10, s16
; CHECK-NEXT:    strb w8, [sp, #27]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strb w9, [sp, #26]
; CHECK-NEXT:    fmov w9, s17
; CHECK-NEXT:    mov z20.h, z1.h[3]
; CHECK-NEXT:    strb w10, [sp, #25]
; CHECK-NEXT:    fmov w10, s18
; CHECK-NEXT:    strb w8, [sp, #23]
; CHECK-NEXT:    fmov w8, s19
; CHECK-NEXT:    strb w9, [sp, #22]
; CHECK-NEXT:    fmov w9, s20
; CHECK-NEXT:    mov z21.h, z1.h[2]
; CHECK-NEXT:    mov z0.h, z1.h[1]
; CHECK-NEXT:    strb w10, [sp, #21]
; CHECK-NEXT:    fmov w10, s21
; CHECK-NEXT:    strb w8, [sp, #20]
; CHECK-NEXT:    strb w9, [sp, #19]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    fmov w9, s23
; CHECK-NEXT:    mov z0.h, z23.h[7]
; CHECK-NEXT:    mov z1.h, z23.h[6]
; CHECK-NEXT:    strb w10, [sp, #18]
; CHECK-NEXT:    fmov w10, s22
; CHECK-NEXT:    strb w8, [sp, #17]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    mov z2.h, z23.h[5]
; CHECK-NEXT:    mov z3.h, z23.h[4]
; CHECK-NEXT:    mov z4.h, z23.h[3]
; CHECK-NEXT:    strb w10, [sp]
; CHECK-NEXT:    fmov w10, s2
; CHECK-NEXT:    strb w8, [sp, #15]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strb w9, [sp, #14]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    mov z5.h, z23.h[2]
; CHECK-NEXT:    mov z6.h, z23.h[1]
; CHECK-NEXT:    mov z7.h, z22.h[7]
; CHECK-NEXT:    strb w10, [sp, #13]
; CHECK-NEXT:    fmov w10, s5
; CHECK-NEXT:    strb w8, [sp, #12]
; CHECK-NEXT:    fmov w8, s6
; CHECK-NEXT:    strb w9, [sp, #11]
; CHECK-NEXT:    fmov w9, s7
; CHECK-NEXT:    mov z16.h, z22.h[6]
; CHECK-NEXT:    mov z17.h, z22.h[5]
; CHECK-NEXT:    mov z18.h, z22.h[4]
; CHECK-NEXT:    strb w10, [sp, #10]
; CHECK-NEXT:    fmov w10, s16
; CHECK-NEXT:    strb w8, [sp, #9]
; CHECK-NEXT:    fmov w8, s17
; CHECK-NEXT:    strb w9, [sp, #7]
; CHECK-NEXT:    fmov w9, s18
; CHECK-NEXT:    mov z19.h, z22.h[3]
; CHECK-NEXT:    mov z20.h, z22.h[2]
; CHECK-NEXT:    mov z21.h, z22.h[1]
; CHECK-NEXT:    strb w10, [sp, #6]
; CHECK-NEXT:    fmov w10, s19
; CHECK-NEXT:    strb w8, [sp, #5]
; CHECK-NEXT:    fmov w8, s20
; CHECK-NEXT:    strb w9, [sp, #4]
; CHECK-NEXT:    fmov w9, s21
; CHECK-NEXT:    strb w10, [sp, #3]
; CHECK-NEXT:    strb w8, [sp, #2]
; CHECK-NEXT:    strb w9, [sp, #1]
; CHECK-NEXT:    ldp q1, q0, [sp]
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    stp q1, q0, [x1]
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret
  %a = load <32 x i16>, <32 x i16>* %in
  %b = trunc <32 x i16> %a to <32 x i8>
  %c = add <32 x i8> %b, %b
  store <32 x i8> %c, <32 x i8>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v64i16_v64i8(<64 x i16>* %in, <64 x i8>* %out) vscale_range(8,0) #0 {
; CHECK-LABEL: trunc_v64i16_v64i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl64
; CHECK-NEXT:    ld1h { z0.h }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.b, vl64
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    st1b { z0.b }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <64 x i16>, <64 x i16>* %in
  %b = trunc <64 x i16> %a to <64 x i8>
  %c = add <64 x i8> %b, %b
  store <64 x i8> %c, <64 x i8>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v128i16_v128i8(<128 x i16>* %in, <128 x i8>* %out) vscale_range(16,0) #0 {
; CHECK-LABEL: trunc_v128i16_v128i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl128
; CHECK-NEXT:    ld1h { z0.h }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.b, vl128
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    st1b { z0.b }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <128 x i16>, <128 x i16>* %in
  %b = trunc <128 x i16> %a to <128 x i8>
  %c = add <128 x i8> %b, %b
  store <128 x i8> %c, <128 x i8>* %out
  ret void
}

;
; truncate i32 -> i8
;

define <8 x i8> @trunc_v8i32_v8i8(<8 x i32>* %in) vscale_range(2,0) #0 {
; CHECK-LABEL: trunc_v8i32_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl8
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %a = load <8 x i32>, <8 x i32>* %in
  %b = trunc <8 x i32> %a to <8 x i8>
  ret <8 x i8> %b
}

define <16 x i8> @trunc_v16i32_v16i8(<16 x i32>* %in) #0 {
; CHECK-LABEL: trunc_v16i32_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    mov z7.s, z1.s[2]
; CHECK-NEXT:    mov z16.s, z1.s[1]
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    mov z4.s, z0.s[3]
; CHECK-NEXT:    mov z5.s, z0.s[2]
; CHECK-NEXT:    mov z6.s, z0.s[1]
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    strb w8, [sp, #12]
; CHECK-NEXT:    fmov w8, s2
; CHECK-NEXT:    mov z0.s, z1.s[3]
; CHECK-NEXT:    mov z19.s, z2.s[2]
; CHECK-NEXT:    fmov w10, s3
; CHECK-NEXT:    strb w9, [sp, #15]
; CHECK-NEXT:    strb w8, [sp]
; CHECK-NEXT:    fmov w8, s6
; CHECK-NEXT:    fmov w9, s0
; CHECK-NEXT:    mov z1.s, z3.s[3]
; CHECK-NEXT:    strb w10, [sp, #4]
; CHECK-NEXT:    fmov w10, s5
; CHECK-NEXT:    strb w8, [sp, #13]
; CHECK-NEXT:    fmov w8, s16
; CHECK-NEXT:    mov z17.s, z3.s[2]
; CHECK-NEXT:    mov z18.s, z3.s[1]
; CHECK-NEXT:    strb w10, [sp, #14]
; CHECK-NEXT:    fmov w10, s7
; CHECK-NEXT:    strb w9, [sp, #11]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    strb w8, [sp, #9]
; CHECK-NEXT:    fmov w8, s18
; CHECK-NEXT:    strb w10, [sp, #10]
; CHECK-NEXT:    fmov w10, s17
; CHECK-NEXT:    mov z3.s, z2.s[3]
; CHECK-NEXT:    mov z20.s, z2.s[1]
; CHECK-NEXT:    strb w9, [sp, #7]
; CHECK-NEXT:    fmov w9, s3
; CHECK-NEXT:    strb w10, [sp, #6]
; CHECK-NEXT:    fmov w10, s19
; CHECK-NEXT:    strb w8, [sp, #5]
; CHECK-NEXT:    fmov w8, s20
; CHECK-NEXT:    strb w9, [sp, #3]
; CHECK-NEXT:    strb w10, [sp, #2]
; CHECK-NEXT:    strb w8, [sp, #1]
; CHECK-NEXT:    ldr q0, [sp], #16
; CHECK-NEXT:    ret
  %a = load <16 x i32>, <16 x i32>* %in
  %b = trunc <16 x i32> %a to <16 x i8>
  ret <16 x i8> %b
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v32i32_v32i8(<32 x i32>* %in, <32 x i8>* %out) vscale_range(8,0) #0 {
; CHECK-LABEL: trunc_v32i32_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl32
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.b, vl32
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    st1b { z0.b }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <32 x i32>, <32 x i32>* %in
  %b = trunc <32 x i32> %a to <32 x i8>
  %c = add <32 x i8> %b, %b
  store <32 x i8> %c, <32 x i8>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v64i32_v64i8(<64 x i32>* %in, <64 x i8>* %out) vscale_range(16,0) #0 {
; CHECK-LABEL: trunc_v64i32_v64i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl64
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.b, vl64
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    st1b { z0.b }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <64 x i32>, <64 x i32>* %in
  %b = trunc <64 x i32> %a to <64 x i8>
  %c = add <64 x i8> %b, %b
  store <64 x i8> %c, <64 x i8>* %out
  ret void
}

;
; truncate i32 -> i16
;

define <8 x i16> @trunc_v8i32_v8i16(<8 x i32>* %in) vscale_range(2,0) #0 {
; CHECK-LABEL: trunc_v8i32_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl8
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %a = load <8 x i32>, <8 x i32>* %in
  %b = trunc <8 x i32> %a to <8 x i16>
  ret <8 x i16> %b
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v16i32_v16i16(<16 x i32>* %in, <16 x i16>* %out) #0 {
; CHECK-LABEL: trunc_v16i32_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    mov z5.s, z1.s[2]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    mov z2.s, z0.s[3]
; CHECK-NEXT:    mov z3.s, z0.s[2]
; CHECK-NEXT:    fmov w10, s2
; CHECK-NEXT:    ldp q6, q7, [x0]
; CHECK-NEXT:    strh w8, [sp, #24]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    mov z4.s, z0.s[1]
; CHECK-NEXT:    mov z0.s, z1.s[3]
; CHECK-NEXT:    strh w9, [sp, #16]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    strh w10, [sp, #30]
; CHECK-NEXT:    fmov w10, s0
; CHECK-NEXT:    strh w8, [sp, #28]
; CHECK-NEXT:    fmov w8, s5
; CHECK-NEXT:    mov z0.s, z1.s[1]
; CHECK-NEXT:    strh w9, [sp, #26]
; CHECK-NEXT:    strh w10, [sp, #22]
; CHECK-NEXT:    fmov w9, s7
; CHECK-NEXT:    strh w8, [sp, #20]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    fmov w10, s6
; CHECK-NEXT:    mov z0.s, z7.s[3]
; CHECK-NEXT:    mov z1.s, z7.s[2]
; CHECK-NEXT:    mov z2.s, z7.s[1]
; CHECK-NEXT:    strh w8, [sp, #18]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strh w9, [sp, #8]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    strh w10, [sp]
; CHECK-NEXT:    fmov w10, s2
; CHECK-NEXT:    mov z3.s, z6.s[3]
; CHECK-NEXT:    mov z4.s, z6.s[2]
; CHECK-NEXT:    mov z5.s, z6.s[1]
; CHECK-NEXT:    strh w8, [sp, #14]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strh w9, [sp, #12]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    strh w10, [sp, #10]
; CHECK-NEXT:    fmov w10, s5
; CHECK-NEXT:    strh w8, [sp, #6]
; CHECK-NEXT:    strh w9, [sp, #4]
; CHECK-NEXT:    strh w10, [sp, #2]
; CHECK-NEXT:    ldp q1, q0, [sp]
; CHECK-NEXT:    add z1.h, z1.h, z1.h
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    stp q1, q0, [x1]
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret
  %a = load <16 x i32>, <16 x i32>* %in
  %b = trunc <16 x i32> %a to <16 x i16>
  %c = add <16 x i16> %b, %b
  store <16 x i16> %c, <16 x i16>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v32i32_v32i16(<32 x i32>* %in, <32 x i16>* %out) vscale_range(8,0) #0 {
; CHECK-LABEL: trunc_v32i32_v32i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl32
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.h, vl32
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    st1h { z0.h }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <32 x i32>, <32 x i32>* %in
  %b = trunc <32 x i32> %a to <32 x i16>
  %c = add <32 x i16> %b, %b
  store <32 x i16> %c, <32 x i16>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v64i32_v64i16(<64 x i32>* %in, <64 x i16>* %out) vscale_range(16,0) #0 {
; CHECK-LABEL: trunc_v64i32_v64i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl64
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.h, vl64
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    st1h { z0.h }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <64 x i32>, <64 x i32>* %in
  %b = trunc <64 x i32> %a to <64 x i16>
  %c = add <64 x i16> %b, %b
  store <64 x i16> %c, <64 x i16>* %out
  ret void
}

;
; truncate i64 -> i8
;

; NOTE: v4i8 is not legal so result i8 elements are held within i16 containers.
define <4 x i8> @trunc_v4i64_v4i8(<4 x i64>* %in) vscale_range(2,0) #0 {
; CHECK-LABEL: trunc_v4i64_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %a = load <4 x i64>, <4 x i64>* %in
  %b = trunc <4 x i64> %a to <4 x i8>
  ret <4 x i8> %b
}

define <8 x i8> @trunc_v8i64_v8i8(<8 x i64>* %in) #0 {
; CHECK-LABEL: trunc_v8i64_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    fmov x9, d1
; CHECK-NEXT:    ldp q3, q2, [x0]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    mov z4.d, z0.d[1]
; CHECK-NEXT:    strb w9, [sp, #12]
; CHECK-NEXT:    fmov x9, d4
; CHECK-NEXT:    mov z0.d, z1.d[1]
; CHECK-NEXT:    strb w8, [sp, #14]
; CHECK-NEXT:    fmov x8, d3
; CHECK-NEXT:    strb w9, [sp, #15]
; CHECK-NEXT:    fmov x10, d2
; CHECK-NEXT:    mov z1.d, z2.d[1]
; CHECK-NEXT:    mov z2.d, z3.d[1]
; CHECK-NEXT:    strb w8, [sp, #8]
; CHECK-NEXT:    fmov x8, d1
; CHECK-NEXT:    fmov x9, d2
; CHECK-NEXT:    strb w10, [sp, #10]
; CHECK-NEXT:    fmov x10, d0
; CHECK-NEXT:    strb w8, [sp, #11]
; CHECK-NEXT:    strb w10, [sp, #13]
; CHECK-NEXT:    strb w9, [sp, #9]
; CHECK-NEXT:    ldr d0, [sp, #8]
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
  %a = load <8 x i64>, <8 x i64>* %in
  %b = trunc <8 x i64> %a to <8 x i8>
  ret <8 x i8> %b
}

define <16 x i8> @trunc_v16i64_v16i8(<16 x i64>* %in) vscale_range(8,0) #0 {
; CHECK-LABEL: trunc_v16i64_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl16
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %a = load <16 x i64>, <16 x i64>* %in
  %b = trunc <16 x i64> %a to <16 x i8>
  ret <16 x i8> %b
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v32i64_v32i8(<32 x i64>* %in, <32 x i8>* %out) vscale_range(16,0) #0 {
; CHECK-LABEL: trunc_v32i64_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl32
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.b, vl32
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    st1b { z0.b }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <32 x i64>, <32 x i64>* %in
  %b = trunc <32 x i64> %a to <32 x i8>
  %c = add <32 x i8> %b, %b
  store <32 x i8> %c, <32 x i8>* %out
  ret void
}

;
; truncate i64 -> i16
;

define <4 x i16> @trunc_v4i64_v4i16(<4 x i64>* %in) vscale_range(2,0) #0 {
; CHECK-LABEL: trunc_v4i64_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %a = load <4 x i64>, <4 x i64>* %in
  %b = trunc <4 x i64> %a to <4 x i16>
  ret <4 x i16> %b
}

define <8 x i16> @trunc_v8i64_v8i16(<8 x i64>* %in) #0 {
; CHECK-LABEL: trunc_v8i64_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    fmov x9, d1
; CHECK-NEXT:    ldp q3, q2, [x0]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    mov z4.d, z0.d[1]
; CHECK-NEXT:    strh w9, [sp, #8]
; CHECK-NEXT:    fmov x9, d4
; CHECK-NEXT:    mov z0.d, z1.d[1]
; CHECK-NEXT:    strh w8, [sp, #12]
; CHECK-NEXT:    fmov x8, d3
; CHECK-NEXT:    strh w9, [sp, #14]
; CHECK-NEXT:    fmov x10, d2
; CHECK-NEXT:    mov z1.d, z2.d[1]
; CHECK-NEXT:    mov z2.d, z3.d[1]
; CHECK-NEXT:    strh w8, [sp]
; CHECK-NEXT:    fmov x8, d1
; CHECK-NEXT:    fmov x9, d2
; CHECK-NEXT:    strh w10, [sp, #4]
; CHECK-NEXT:    fmov x10, d0
; CHECK-NEXT:    strh w8, [sp, #6]
; CHECK-NEXT:    strh w10, [sp, #10]
; CHECK-NEXT:    strh w9, [sp, #2]
; CHECK-NEXT:    ldr q0, [sp], #16
; CHECK-NEXT:    ret
  %a = load <8 x i64>, <8 x i64>* %in
  %b = trunc <8 x i64> %a to <8 x i16>
  ret <8 x i16> %b
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v16i64_v16i16(<16 x i64>* %in, <16 x i16>* %out) vscale_range(8,0) #0 {
; CHECK-LABEL: trunc_v16i64_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl16
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.h, vl16
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    st1h { z0.h }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <16 x i64>, <16 x i64>* %in
  %b = trunc <16 x i64> %a to <16 x i16>
  %c = add <16 x i16> %b, %b
  store <16 x i16> %c, <16 x i16>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v32i64_v32i16(<32 x i64>* %in, <32 x i16>* %out) vscale_range(16,0) #0 {
; CHECK-LABEL: trunc_v32i64_v32i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl32
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.h, vl32
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    st1h { z0.h }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <32 x i64>, <32 x i64>* %in
  %b = trunc <32 x i64> %a to <32 x i16>
  %c = add <32 x i16> %b, %b
  store <32 x i16> %c, <32 x i16>* %out
  ret void
}

;
; truncate i64 -> i32
;

define <4 x i32> @trunc_v4i64_v4i32(<4 x i64>* %in) vscale_range(2,0) #0 {
; CHECK-LABEL: trunc_v4i64_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl4
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %a = load <4 x i64>, <4 x i64>* %in
  %b = trunc <4 x i64> %a to <4 x i32>
  ret <4 x i32> %b
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v8i64_v8i32(<8 x i64>* %in, <8 x i32>* %out) #0 {
; CHECK-LABEL: trunc_v8i64_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    ldp q1, q0, [x0, #32]
; CHECK-NEXT:    fmov x9, d1
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    mov z4.d, z0.d[1]
; CHECK-NEXT:    fmov x8, d0
; CHECK-NEXT:    mov z0.d, z1.d[1]
; CHECK-NEXT:    fmov x10, d4
; CHECK-NEXT:    fmov x12, d0
; CHECK-NEXT:    mov z0.d, z2.d[1]
; CHECK-NEXT:    stp w8, w10, [sp, #24]
; CHECK-NEXT:    fmov x10, d0
; CHECK-NEXT:    mov z1.d, z3.d[1]
; CHECK-NEXT:    fmov x11, d3
; CHECK-NEXT:    fmov x8, d1
; CHECK-NEXT:    stp w9, w12, [sp, #16]
; CHECK-NEXT:    fmov x9, d2
; CHECK-NEXT:    stp w11, w8, [sp, #8]
; CHECK-NEXT:    stp w9, w10, [sp]
; CHECK-NEXT:    ldp q1, q0, [sp]
; CHECK-NEXT:    add z1.s, z1.s, z1.s
; CHECK-NEXT:    add z0.s, z0.s, z0.s
; CHECK-NEXT:    stp q1, q0, [x1]
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret
  %a = load <8 x i64>, <8 x i64>* %in
  %b = trunc <8 x i64> %a to <8 x i32>
  %c = add <8 x i32> %b, %b
  store <8 x i32> %c, <8 x i32>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v16i64_v16i32(<16 x i64>* %in, <16 x i32>* %out) vscale_range(8,0) #0 {
; CHECK-LABEL: trunc_v16i64_v16i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl16
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.s, vl16
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    add z0.s, z0.s, z0.s
; CHECK-NEXT:    st1w { z0.s }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <16 x i64>, <16 x i64>* %in
  %b = trunc <16 x i64> %a to <16 x i32>
  %c = add <16 x i32> %b, %b
  store <16 x i32> %c, <16 x i32>* %out
  ret void
}

; NOTE: Extra 'add' is to prevent the truncate being combined with the store.
define void @trunc_v32i64_v32i32(<32 x i64>* %in, <32 x i32>* %out) vscale_range(16,0) #0 {
; CHECK-LABEL: trunc_v32i64_v32i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl32
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    ptrue p0.s, vl32
; CHECK-NEXT:    uzp1 z0.s, z0.s, z0.s
; CHECK-NEXT:    add z0.s, z0.s, z0.s
; CHECK-NEXT:    st1w { z0.s }, p0, [x1]
; CHECK-NEXT:    ret
  %a = load <32 x i64>, <32 x i64>* %in
  %b = trunc <32 x i64> %a to <32 x i32>
  %c = add <32 x i32> %b, %b
  store <32 x i32> %c, <32 x i32>* %out
  ret void
}

attributes #0 = { nounwind "target-features"="+sve" }
