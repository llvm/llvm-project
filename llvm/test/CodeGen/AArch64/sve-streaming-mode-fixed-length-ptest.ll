; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s

target triple = "aarch64-unknown-linux-gnu"

define i1 @ptest_v16i1(ptr %a, ptr %b) #0 {
; CHECK-LABEL: ptest_v16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    adrp x8, .LCPI0_0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q2, q0, [x0, #32]
; CHECK-NEXT:    ldr q1, [x8, :lo12:.LCPI0_0]
; CHECK-NEXT:    ldp q4, q3, [x0]
; CHECK-NEXT:    fcmne p1.s, p0/z, z0.s, z1.s
; CHECK-NEXT:    mov z0.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z2.s, z1.s
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    mov z2.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z5.s, z0.s[3]
; CHECK-NEXT:    mov z6.s, z0.s[2]
; CHECK-NEXT:    fcmne p1.s, p0/z, z3.s, z1.s
; CHECK-NEXT:    fcmne p0.s, p0/z, z4.s, z1.s
; CHECK-NEXT:    mov z3.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z7.s, z0.s[1]
; CHECK-NEXT:    mov z0.s, z2.s[3]
; CHECK-NEXT:    mov z16.s, z2.s[2]
; CHECK-NEXT:    mov z17.s, z2.s[1]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #12]
; CHECK-NEXT:    mov z1.s, z3.s[3]
; CHECK-NEXT:    mov z2.s, z3.s[2]
; CHECK-NEXT:    mov z4.s, z3.s[1]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    mov z3.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fmov w10, s3
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    fmov w9, s5
; CHECK-NEXT:    mov z18.s, z3.s[3]
; CHECK-NEXT:    strb w8, [sp, #4]
; CHECK-NEXT:    fmov w8, s6
; CHECK-NEXT:    strb w10, [sp]
; CHECK-NEXT:    fmov w10, s7
; CHECK-NEXT:    strb w9, [sp, #15]
; CHECK-NEXT:    fmov w9, s0
; CHECK-NEXT:    strb w8, [sp, #14]
; CHECK-NEXT:    fmov w8, s16
; CHECK-NEXT:    strb w10, [sp, #13]
; CHECK-NEXT:    fmov w10, s17
; CHECK-NEXT:    strb w9, [sp, #11]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    strb w8, [sp, #10]
; CHECK-NEXT:    fmov w8, s2
; CHECK-NEXT:    strb w10, [sp, #9]
; CHECK-NEXT:    fmov w10, s4
; CHECK-NEXT:    mov z19.s, z3.s[2]
; CHECK-NEXT:    mov z20.s, z3.s[1]
; CHECK-NEXT:    strb w9, [sp, #7]
; CHECK-NEXT:    fmov w9, s18
; CHECK-NEXT:    strb w8, [sp, #6]
; CHECK-NEXT:    fmov w8, s19
; CHECK-NEXT:    strb w10, [sp, #5]
; CHECK-NEXT:    fmov w10, s20
; CHECK-NEXT:    strb w9, [sp, #3]
; CHECK-NEXT:    strb w8, [sp, #2]
; CHECK-NEXT:    strb w10, [sp, #1]
; CHECK-NEXT:    ldr q0, [sp], #16
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    orv b0, p0, z0.b
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    and w0, w8, #0x1
; CHECK-NEXT:    ret
  %v0 = bitcast ptr %a to <16 x float>*
  %v1 = load <16 x float>, <16 x float>* %v0, align 4
  %v2 = fcmp une <16 x float> %v1, zeroinitializer
  %v3 = call i1 @llvm.vector.reduce.or.i1.v16i1 (<16 x i1> %v2)
  ret i1 %v3
}

define i1 @ptest_or_v16i1(ptr %a, ptr %b) #0 {
; CHECK-LABEL: ptest_or_v16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    adrp x8, .LCPI1_0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q2, q1, [x0, #32]
; CHECK-NEXT:    ldr q0, [x8, :lo12:.LCPI1_0]
; CHECK-NEXT:    ldp q4, q3, [x0]
; CHECK-NEXT:    fcmne p1.s, p0/z, z1.s, z0.s
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z2.s, z0.s
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z2.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z5.s, z1.s[2]
; CHECK-NEXT:    mov z6.s, z1.s[1]
; CHECK-NEXT:    fcmne p1.s, p0/z, z3.s, z0.s
; CHECK-NEXT:    mov z3.s, z1.s[3]
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z4.s, z0.s
; CHECK-NEXT:    mov z7.s, z2.s[3]
; CHECK-NEXT:    mov z16.s, z2.s[2]
; CHECK-NEXT:    mov z17.s, z2.s[1]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #12]
; CHECK-NEXT:    mov z2.s, z1.s[3]
; CHECK-NEXT:    mov z4.s, z1.s[2]
; CHECK-NEXT:    mov z18.s, z1.s[1]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fmov w10, s1
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    fmov w9, s3
; CHECK-NEXT:    mov z19.s, z1.s[3]
; CHECK-NEXT:    strb w8, [sp, #4]
; CHECK-NEXT:    fmov w8, s5
; CHECK-NEXT:    strb w10, [sp]
; CHECK-NEXT:    fmov w10, s6
; CHECK-NEXT:    strb w9, [sp, #15]
; CHECK-NEXT:    fmov w9, s7
; CHECK-NEXT:    strb w8, [sp, #14]
; CHECK-NEXT:    fmov w8, s16
; CHECK-NEXT:    strb w10, [sp, #13]
; CHECK-NEXT:    fmov w10, s17
; CHECK-NEXT:    strb w9, [sp, #11]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #10]
; CHECK-NEXT:    fmov w8, s4
; CHECK-NEXT:    strb w10, [sp, #9]
; CHECK-NEXT:    fmov w10, s18
; CHECK-NEXT:    mov z20.s, z1.s[2]
; CHECK-NEXT:    mov z21.s, z1.s[1]
; CHECK-NEXT:    strb w9, [sp, #7]
; CHECK-NEXT:    fmov w9, s19
; CHECK-NEXT:    strb w8, [sp, #6]
; CHECK-NEXT:    fmov w8, s20
; CHECK-NEXT:    strb w10, [sp, #5]
; CHECK-NEXT:    fmov w10, s21
; CHECK-NEXT:    strb w9, [sp, #3]
; CHECK-NEXT:    strb w8, [sp, #2]
; CHECK-NEXT:    strb w10, [sp, #1]
; CHECK-NEXT:    ldr q1, [x1, #48]
; CHECK-NEXT:    ldr q5, [x1]
; CHECK-NEXT:    ldr q7, [sp]
; CHECK-NEXT:    fcmne p1.s, p0/z, z1.s, z0.s
; CHECK-NEXT:    ldp q6, q1, [x1, #16]
; CHECK-NEXT:    mov z2.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fmov w8, s2
; CHECK-NEXT:    mov z3.s, z2.s[3]
; CHECK-NEXT:    mov z4.s, z2.s[2]
; CHECK-NEXT:    mov z2.s, z2.s[1]
; CHECK-NEXT:    strb w8, [sp, #28]
; CHECK-NEXT:    fcmne p1.s, p0/z, z1.s, z0.s
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z6.s, z0.s
; CHECK-NEXT:    mov z6.s, z1.s[3]
; CHECK-NEXT:    mov z16.s, z1.s[2]
; CHECK-NEXT:    mov z17.s, z1.s[1]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p0.s, p0/z, z5.s, z0.s
; CHECK-NEXT:    mov z0.s, z1.s[3]
; CHECK-NEXT:    mov z5.s, z1.s[2]
; CHECK-NEXT:    mov z18.s, z1.s[1]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    mov z1.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    strb w8, [sp, #24]
; CHECK-NEXT:    fmov w10, s1
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strb w9, [sp, #20]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    mov z19.s, z1.s[3]
; CHECK-NEXT:    mov z20.s, z1.s[2]
; CHECK-NEXT:    strb w10, [sp, #16]
; CHECK-NEXT:    fmov w10, s2
; CHECK-NEXT:    strb w8, [sp, #31]
; CHECK-NEXT:    fmov w8, s6
; CHECK-NEXT:    strb w9, [sp, #30]
; CHECK-NEXT:    fmov w9, s16
; CHECK-NEXT:    strb w10, [sp, #29]
; CHECK-NEXT:    fmov w10, s17
; CHECK-NEXT:    strb w8, [sp, #27]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strb w9, [sp, #26]
; CHECK-NEXT:    fmov w9, s5
; CHECK-NEXT:    strb w10, [sp, #25]
; CHECK-NEXT:    fmov w10, s18
; CHECK-NEXT:    mov z21.s, z1.s[1]
; CHECK-NEXT:    strb w8, [sp, #23]
; CHECK-NEXT:    fmov w8, s19
; CHECK-NEXT:    strb w9, [sp, #22]
; CHECK-NEXT:    fmov w9, s20
; CHECK-NEXT:    strb w10, [sp, #21]
; CHECK-NEXT:    fmov w10, s21
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    strb w8, [sp, #19]
; CHECK-NEXT:    strb w9, [sp, #18]
; CHECK-NEXT:    strb w10, [sp, #17]
; CHECK-NEXT:    ldr q0, [sp, #16]
; CHECK-NEXT:    orr z0.d, z7.d, z0.d
; CHECK-NEXT:    orv b0, p0, z0.b
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    and w0, w8, #0x1
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret
  %v0 = bitcast ptr %a to <16 x float>*
  %v1 = load <16 x float>, <16 x float>* %v0, align 4
  %v2 = fcmp une <16 x float> %v1, zeroinitializer
  %v3 = bitcast float* %b to <16 x float>*
  %v4 = load <16 x float>, <16 x float>* %v3, align 4
  %v5 = fcmp une <16 x float> %v4, zeroinitializer
  %v6 = or <16 x i1> %v2, %v5
  %v7 = call i1 @llvm.vector.reduce.or.i1.v16i1 (<16 x i1> %v6)
  ret i1 %v7
}

declare i1 @llvm.vector.reduce.or.i1.v16i1(<16 x i1>)

;
; AND reduction.
;

define i1 @ptest_and_v16i1(ptr %a, ptr %b) #0 {
; CHECK-LABEL: ptest_and_v16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    adrp x8, .LCPI2_0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q2, q1, [x0, #32]
; CHECK-NEXT:    ldr q0, [x8, :lo12:.LCPI2_0]
; CHECK-NEXT:    ldp q4, q3, [x0]
; CHECK-NEXT:    fcmne p1.s, p0/z, z1.s, z0.s
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z2.s, z0.s
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z2.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z5.s, z1.s[2]
; CHECK-NEXT:    mov z6.s, z1.s[1]
; CHECK-NEXT:    fcmne p1.s, p0/z, z3.s, z0.s
; CHECK-NEXT:    mov z3.s, z1.s[3]
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z4.s, z0.s
; CHECK-NEXT:    mov z7.s, z2.s[3]
; CHECK-NEXT:    mov z16.s, z2.s[2]
; CHECK-NEXT:    mov z17.s, z2.s[1]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #12]
; CHECK-NEXT:    mov z2.s, z1.s[3]
; CHECK-NEXT:    mov z4.s, z1.s[2]
; CHECK-NEXT:    mov z18.s, z1.s[1]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fmov w10, s1
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    fmov w9, s3
; CHECK-NEXT:    mov z19.s, z1.s[3]
; CHECK-NEXT:    strb w8, [sp, #4]
; CHECK-NEXT:    fmov w8, s5
; CHECK-NEXT:    strb w10, [sp]
; CHECK-NEXT:    fmov w10, s6
; CHECK-NEXT:    strb w9, [sp, #15]
; CHECK-NEXT:    fmov w9, s7
; CHECK-NEXT:    strb w8, [sp, #14]
; CHECK-NEXT:    fmov w8, s16
; CHECK-NEXT:    strb w10, [sp, #13]
; CHECK-NEXT:    fmov w10, s17
; CHECK-NEXT:    strb w9, [sp, #11]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    strb w8, [sp, #10]
; CHECK-NEXT:    fmov w8, s4
; CHECK-NEXT:    strb w10, [sp, #9]
; CHECK-NEXT:    fmov w10, s18
; CHECK-NEXT:    mov z20.s, z1.s[2]
; CHECK-NEXT:    mov z21.s, z1.s[1]
; CHECK-NEXT:    strb w9, [sp, #7]
; CHECK-NEXT:    fmov w9, s19
; CHECK-NEXT:    strb w8, [sp, #6]
; CHECK-NEXT:    fmov w8, s20
; CHECK-NEXT:    strb w10, [sp, #5]
; CHECK-NEXT:    fmov w10, s21
; CHECK-NEXT:    strb w9, [sp, #3]
; CHECK-NEXT:    strb w8, [sp, #2]
; CHECK-NEXT:    strb w10, [sp, #1]
; CHECK-NEXT:    ldr q1, [x1, #48]
; CHECK-NEXT:    ldr q5, [x1]
; CHECK-NEXT:    ldr q7, [sp]
; CHECK-NEXT:    fcmne p1.s, p0/z, z1.s, z0.s
; CHECK-NEXT:    ldp q6, q1, [x1, #16]
; CHECK-NEXT:    mov z2.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fmov w8, s2
; CHECK-NEXT:    mov z3.s, z2.s[3]
; CHECK-NEXT:    mov z4.s, z2.s[2]
; CHECK-NEXT:    mov z2.s, z2.s[1]
; CHECK-NEXT:    strb w8, [sp, #28]
; CHECK-NEXT:    fcmne p1.s, p0/z, z1.s, z0.s
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p1.s, p0/z, z6.s, z0.s
; CHECK-NEXT:    mov z6.s, z1.s[3]
; CHECK-NEXT:    mov z16.s, z1.s[2]
; CHECK-NEXT:    mov z17.s, z1.s[1]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    fcmne p0.s, p0/z, z5.s, z0.s
; CHECK-NEXT:    mov z0.s, z1.s[3]
; CHECK-NEXT:    mov z5.s, z1.s[2]
; CHECK-NEXT:    mov z18.s, z1.s[1]
; CHECK-NEXT:    fmov w9, s1
; CHECK-NEXT:    mov z1.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    strb w8, [sp, #24]
; CHECK-NEXT:    fmov w10, s1
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strb w9, [sp, #20]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    mov z19.s, z1.s[3]
; CHECK-NEXT:    mov z20.s, z1.s[2]
; CHECK-NEXT:    strb w10, [sp, #16]
; CHECK-NEXT:    fmov w10, s2
; CHECK-NEXT:    strb w8, [sp, #31]
; CHECK-NEXT:    fmov w8, s6
; CHECK-NEXT:    strb w9, [sp, #30]
; CHECK-NEXT:    fmov w9, s16
; CHECK-NEXT:    strb w10, [sp, #29]
; CHECK-NEXT:    fmov w10, s17
; CHECK-NEXT:    strb w8, [sp, #27]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strb w9, [sp, #26]
; CHECK-NEXT:    fmov w9, s5
; CHECK-NEXT:    strb w10, [sp, #25]
; CHECK-NEXT:    fmov w10, s18
; CHECK-NEXT:    mov z21.s, z1.s[1]
; CHECK-NEXT:    strb w8, [sp, #23]
; CHECK-NEXT:    fmov w8, s19
; CHECK-NEXT:    strb w9, [sp, #22]
; CHECK-NEXT:    fmov w9, s20
; CHECK-NEXT:    strb w10, [sp, #21]
; CHECK-NEXT:    fmov w10, s21
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    strb w8, [sp, #19]
; CHECK-NEXT:    strb w9, [sp, #18]
; CHECK-NEXT:    strb w10, [sp, #17]
; CHECK-NEXT:    ldr q0, [sp, #16]
; CHECK-NEXT:    and z0.d, z7.d, z0.d
; CHECK-NEXT:    andv b0, p0, z0.b
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    and w0, w8, #0x1
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret
  %v0 = bitcast ptr %a to <16 x float>*
  %v1 = load <16 x float>, <16 x float>* %v0, align 4
  %v2 = fcmp une <16 x float> %v1, zeroinitializer
  %v3 = bitcast float* %b to <16 x float>*
  %v4 = load <16 x float>, <16 x float>* %v3, align 4
  %v5 = fcmp une <16 x float> %v4, zeroinitializer
  %v6 = and <16 x i1> %v2, %v5
  %v7 = call i1 @llvm.vector.reduce.and.i1.v16i1 (<16 x i1> %v6)
  ret i1 %v7
}

attributes #0 = { "target-features"="+sve" }

declare i1 @llvm.vector.reduce.and.i1.v16i1(<16 x i1>)
