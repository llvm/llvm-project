; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mtriple=aarch64-none-linux-gnu -mattr=+neon | FileCheck %s --check-prefix=CHECK

declare <4 x half> @llvm.maximum.v4f16(<4 x half>, <4 x half>)

declare <2 x fp128> @llvm.maximum.v2f128(<2 x fp128>, <2 x fp128>)

; Fixes PR63267
define <4 x half> @fmaximum_v4f16(<4 x half> %x, <4 x half> %y) {
; CHECK-LABEL: fmaximum_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $q1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $q0
; CHECK-NEXT:    mov h2, v1.h[1]
; CHECK-NEXT:    mov h3, v0.h[1]
; CHECK-NEXT:    mov h4, v1.h[2]
; CHECK-NEXT:    mov h5, v0.h[2]
; CHECK-NEXT:    fcvt s6, h1
; CHECK-NEXT:    fcvt s7, h0
; CHECK-NEXT:    mov h1, v1.h[3]
; CHECK-NEXT:    fcvt s2, h2
; CHECK-NEXT:    fcvt s3, h3
; CHECK-NEXT:    fcvt s1, h1
; CHECK-NEXT:    fmax s2, s3, s2
; CHECK-NEXT:    fcvt s3, h4
; CHECK-NEXT:    fcvt s4, h5
; CHECK-NEXT:    fmax s5, s7, s6
; CHECK-NEXT:    mov h6, v0.h[3]
; CHECK-NEXT:    fmax s3, s4, s3
; CHECK-NEXT:    fcvt h2, s2
; CHECK-NEXT:    fcvt h0, s5
; CHECK-NEXT:    fcvt s4, h6
; CHECK-NEXT:    mov v0.h[1], v2.h[0]
; CHECK-NEXT:    fcvt h2, s3
; CHECK-NEXT:    fmax s1, s4, s1
; CHECK-NEXT:    mov v0.h[2], v2.h[0]
; CHECK-NEXT:    fcvt h1, s1
; CHECK-NEXT:    mov v0.h[3], v1.h[0]
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $q0
; CHECK-NEXT:    ret
  %r = call <4 x half> @llvm.maximum.v4f16(<4 x half> %x, <4 x half> %y)
  ret <4 x half> %r
}

define fp128 @maximum_fp128(fp128 %x, fp128 %y) nounwind {
; CHECK-LABEL: maximum_fp128:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #96
; CHECK-NEXT:    str x30, [sp, #80] // 8-byte Folded Spill
; CHECK-NEXT:    stp q0, q1, [sp] // 32-byte Folded Spill
; CHECK-NEXT:    stp q1, q0, [sp, #48]
; CHECK-NEXT:    bl __gttf2
; CHECK-NEXT:    ldp q0, q1, [sp] // 32-byte Folded Reload
; CHECK-NEXT:    cmp w0, #0
; CHECK-NEXT:    b.le .LBB1_2
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    mov v1.16b, v0.16b
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    str q1, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    ldr q1, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:    bl __unordtf2
; CHECK-NEXT:    ldr q0, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    cmp w0, #0
; CHECK-NEXT:    b.eq .LBB1_4
; CHECK-NEXT:  // %bb.3:
; CHECK-NEXT:    adrp x8, .LCPI1_0
; CHECK-NEXT:    ldr q0, [x8, :lo12:.LCPI1_0]
; CHECK-NEXT:  .LBB1_4:
; CHECK-NEXT:    ldrb w8, [sp, #79]
; CHECK-NEXT:    mov v1.16b, v0.16b
; CHECK-NEXT:    cmp w8, #0
; CHECK-NEXT:    b.ne .LBB1_6
; CHECK-NEXT:  // %bb.5:
; CHECK-NEXT:    ldr q1, [sp] // 16-byte Folded Reload
; CHECK-NEXT:  .LBB1_6:
; CHECK-NEXT:    ldrb w8, [sp, #63]
; CHECK-NEXT:    cmp w8, #0
; CHECK-NEXT:    b.ne .LBB1_8
; CHECK-NEXT:  // %bb.7:
; CHECK-NEXT:    ldr q1, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:  .LBB1_8:
; CHECK-NEXT:    adrp x8, .LCPI1_1
; CHECK-NEXT:    str q0, [sp, #32] // 16-byte Folded Spill
; CHECK-NEXT:    str q1, [sp, #16] // 16-byte Folded Spill
; CHECK-NEXT:    ldr q1, [x8, :lo12:.LCPI1_1]
; CHECK-NEXT:    ldr q0, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    bl __eqtf2
; CHECK-NEXT:    ldr q0, [sp, #32] // 16-byte Folded Reload
; CHECK-NEXT:    cmp w0, #0
; CHECK-NEXT:    b.ne .LBB1_10
; CHECK-NEXT:  // %bb.9:
; CHECK-NEXT:    ldr q0, [sp, #16] // 16-byte Folded Reload
; CHECK-NEXT:  .LBB1_10:
; CHECK-NEXT:    ldr x30, [sp, #80] // 8-byte Folded Reload
; CHECK-NEXT:    add sp, sp, #96
; CHECK-NEXT:    ret
  %res = call fp128 @llvm.maximum.f128(fp128 %x, fp128 %y)
  ret fp128 %res
}
