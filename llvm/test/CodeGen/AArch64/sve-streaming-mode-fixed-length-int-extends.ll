; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve  < %s | FileCheck %s --check-prefixes=CHECK,SVE
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve  < %s | FileCheck %s --check-prefixes=CHECK,SVE2
; RUN: llc -mattr=+sme -force-streaming-compatible-sve  < %s | FileCheck %s --check-prefixes=CHECK,SVE2
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE

target triple = "aarch64-unknown-linux-gnu"

;
; sext i1 -> i32
;

; NOTE: Covers the scenario where a SIGN_EXTEND_INREG is required, whose inreg
; type's element type is not byte based and thus cannot be lowered directly to
; an SVE instruction.
define void @sext_v8i1_v8i32(<8 x i1> %a, ptr %out) {
; CHECK-LABEL: sext_v8i1_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    lsl z1.s, z1.s, #31
; CHECK-NEXT:    lsl z0.s, z0.s, #31
; CHECK-NEXT:    asr z1.s, z1.s, #31
; CHECK-NEXT:    asr z0.s, z0.s, #31
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v8i1_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    shl v0.4s, v0.4s, #31
; NONEON-NOSVE-NEXT:    shl v1.4s, v1.4s, #31
; NONEON-NOSVE-NEXT:    cmlt v0.4s, v0.4s, #0
; NONEON-NOSVE-NEXT:    cmlt v1.4s, v1.4s, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <8 x i1> %a to <8 x i32>
  store <8 x i32> %b, ptr %out
  ret void
}

;
; sext i3 -> i64
;

; NOTE: Covers the scenario where a SIGN_EXTEND_INREG is required, whose inreg
; type's element type is not power-of-2 based and thus cannot be lowered
; directly to an SVE instruction.
define void @sext_v4i3_v4i64(<4 x i3> %a, ptr %out) {
; CHECK-LABEL: sext_v4i3_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    lsl z1.d, z1.d, #61
; CHECK-NEXT:    lsl z0.d, z0.d, #61
; CHECK-NEXT:    asr z1.d, z1.d, #61
; CHECK-NEXT:    asr z0.d, z0.d, #61
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v4i3_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    shl v0.2d, v0.2d, #61
; NONEON-NOSVE-NEXT:    shl v1.2d, v1.2d, #61
; NONEON-NOSVE-NEXT:    sshr v0.2d, v0.2d, #61
; NONEON-NOSVE-NEXT:    sshr v1.2d, v1.2d, #61
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <4 x i3> %a to <4 x i64>
  store <4 x i64> %b, ptr %out
  ret void
}

;
; sext i8 -> i16
;

define void @sext_v16i8_v16i16(<16 x i8> %a, ptr %out) {
; CHECK-LABEL: sext_v16i8_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    sunpklo z1.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v16i8_v16i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    sshll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <16 x i8> %a to <16 x i16>
  store <16 x i16>%b, ptr %out
  ret void
}

; NOTE: Extra 'add' is to prevent the extend being combined with the load.
define void @sext_v32i8_v32i16(ptr %in, ptr %out) {
; CHECK-LABEL: sext_v32i8_v32i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    sunpklo z2.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z3.h, z1.b
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEXT:    stp q2, q0, [x1, #32]
; CHECK-NEXT:    stp q3, q1, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v32i8_v32i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.16b, v0.16b, v0.16b
; NONEON-NOSVE-NEXT:    add v1.16b, v1.16b, v1.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-32]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 32
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    sshll v2.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    sshll v3.8h, v3.8b, #0
; NONEON-NOSVE-NEXT:    stp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    stp q1, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #32
; NONEON-NOSVE-NEXT:    ret
  %a = load <32 x i8>, ptr %in
  %b = add <32 x i8> %a, %a
  %c = sext <32 x i8> %b to <32 x i16>
  store <32 x i16> %c, ptr %out
  ret void
}

;
; sext i8 -> i32
;

define void @sext_v8i8_v8i32(<8 x i8> %a, ptr %out) {
; CHECK-LABEL: sext_v8i8_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v8i8_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <8 x i8> %a to <8 x i32>
  store <8 x i32>%b, ptr %out
  ret void
}

define void @sext_v16i8_v16i32(<16 x i8> %a, ptr %out) {
; CHECK-LABEL: sext_v16i8_v16i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    sunpklo z1.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z2.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z3.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    stp q2, q1, [x0]
; CHECK-NEXT:    stp q3, q0, [x0, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v16i8_v16i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-48]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    sshll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    sshll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    sshll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #48
; NONEON-NOSVE-NEXT:    ret
  %b = sext <16 x i8> %a to <16 x i32>
  store <16 x i32> %b, ptr %out
  ret void
}

define void @sext_v32i8_v32i32(ptr %in, ptr %out) {
; CHECK-LABEL: sext_v32i8_v32i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    sunpklo z2.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z3.h, z1.b
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    sunpklo z5.s, z3.h
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z6.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z7.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    stp q4, q2, [x1, #64]
; CHECK-NEXT:    stp q5, q3, [x1]
; CHECK-NEXT:    stp q6, q0, [x1, #96]
; CHECK-NEXT:    stp q7, q1, [x1, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v32i8_v32i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.16b, v0.16b, v0.16b
; NONEON-NOSVE-NEXT:    add v1.16b, v1.16b, v1.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-96]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 96
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #8]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    sshll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    sshll v2.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    sshll v3.8h, v3.8b, #0
; NONEON-NOSVE-NEXT:    stp q2, q0, [sp, #32]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    stp q3, q1, [sp, #64]
; NONEON-NOSVE-NEXT:    ldr d5, [sp, #56]
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ldr d4, [sp, #88]
; NONEON-NOSVE-NEXT:    ldr d6, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #72]
; NONEON-NOSVE-NEXT:    sshll v5.4s, v5.4h, #0
; NONEON-NOSVE-NEXT:    sshll v4.4s, v4.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q5, [x1]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    sshll v2.4s, v6.4h, #0
; NONEON-NOSVE-NEXT:    stp q1, q4, [x1, #64]
; NONEON-NOSVE-NEXT:    sshll v1.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    sshll v3.4s, v7.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x1, #96]
; NONEON-NOSVE-NEXT:    add sp, sp, #96
; NONEON-NOSVE-NEXT:    ret
  %a = load <32 x i8>, ptr %in
  %b = add <32 x i8> %a, %a
  %c = sext <32 x i8> %b to <32 x i32>
  store <32 x i32> %c, ptr %out
  ret void
}

;
; sext i8 -> i64
;

; NOTE: v4i8 is an unpacked typed stored within a v4i16 container. The sign
; extend is a two step process where the container is any_extend'd with the
; result feeding an inreg sign extend.
define void @sext_v4i8_v4i64(<4 x i8> %a, ptr %out) {
; CHECK-LABEL: sext_v4i8_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    sxtb z1.d, p0/m, z1.d
; CHECK-NEXT:    sxtb z0.d, p0/m, z0.d
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v4i8_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    shl v0.2d, v0.2d, #56
; NONEON-NOSVE-NEXT:    shl v1.2d, v1.2d, #56
; NONEON-NOSVE-NEXT:    sshr v0.2d, v0.2d, #56
; NONEON-NOSVE-NEXT:    sshr v1.2d, v1.2d, #56
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <4 x i8> %a to <4 x i64>
  store <4 x i64>%b, ptr %out
  ret void
}

define void @sext_v8i8_v8i64(<8 x i8> %a, ptr %out) {
; CHECK-LABEL: sext_v8i8_v8i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z2.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z3.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    stp q2, q1, [x0]
; CHECK-NEXT:    stp q3, q0, [x0, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v8i8_v8i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-48]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    sshll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    sshll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #48
; NONEON-NOSVE-NEXT:    ret
  %b = sext <8 x i8> %a to <8 x i64>
  store <8 x i64>%b, ptr %out
  ret void
}

define void @sext_v16i8_v16i64(<16 x i8> %a, ptr %out) {
; CHECK-LABEL: sext_v16i8_v16i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    sunpklo z1.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z2.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z3.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z4.d, z2.s
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    mov z7.d, z1.d
; CHECK-NEXT:    sunpklo z2.d, z2.s
; CHECK-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    ext z7.b, z7.b, z1.b, #8
; CHECK-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEXT:    mov z6.d, z0.d
; CHECK-NEXT:    sunpklo z3.d, z3.s
; CHECK-NEXT:    stp q4, q2, [x0]
; CHECK-NEXT:    sunpklo z4.d, z7.s
; CHECK-NEXT:    ext z6.b, z6.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    stp q5, q3, [x0, #64]
; CHECK-NEXT:    sunpklo z2.d, z6.s
; CHECK-NEXT:    stp q1, q4, [x0, #32]
; CHECK-NEXT:    stp q0, q2, [x0, #96]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v16i8_v16i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-112]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 112
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    sshll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #40]
; NONEON-NOSVE-NEXT:    sshll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    sshll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q2, q1, [sp, #48]
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q3, q0, [sp, #80]
; NONEON-NOSVE-NEXT:    ldr d5, [sp, #72]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ldr d4, [sp, #104]
; NONEON-NOSVE-NEXT:    ldr d6, [sp, #56]
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #88]
; NONEON-NOSVE-NEXT:    sshll v5.2d, v5.2s, #0
; NONEON-NOSVE-NEXT:    sshll v4.2d, v4.2s, #0
; NONEON-NOSVE-NEXT:    stp q1, q5, [x0, #64]
; NONEON-NOSVE-NEXT:    sshll v1.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    sshll v2.2d, v6.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q4, [x0]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    sshll v3.2d, v7.2s, #0
; NONEON-NOSVE-NEXT:    stp q1, q2, [x0, #96]
; NONEON-NOSVE-NEXT:    stp q0, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #112
; NONEON-NOSVE-NEXT:    ret
  %b = sext <16 x i8> %a to <16 x i64>
  store <16 x i64> %b, ptr %out
  ret void
}

define void @sext_v32i8_v32i64(ptr %in, ptr %out) {
; CHECK-LABEL: sext_v32i8_v32i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    mov z2.d, z0.d
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    mov z3.d, z1.d
; CHECK-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z4.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z5.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z2.h, z2.b
; CHECK-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z16.d, z4.s
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z17.d, z5.s
; CHECK-NEXT:    ext z5.b, z5.b, z5.b, #8
; CHECK-NEXT:    sunpklo z6.s, z2.h
; CHECK-NEXT:    sunpklo z7.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    sunpklo z4.d, z4.s
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z19.d, z0.s
; CHECK-NEXT:    sunpklo z5.d, z5.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z18.d, z6.s
; CHECK-NEXT:    ext z6.b, z6.b, z6.b, #8
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    stp q16, q4, [x1, #128]
; CHECK-NEXT:    mov z16.d, z7.d
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    stp q17, q5, [x1]
; CHECK-NEXT:    sunpklo z5.d, z7.s
; CHECK-NEXT:    sunpklo z4.d, z6.s
; CHECK-NEXT:    mov z6.d, z1.d
; CHECK-NEXT:    ext z16.b, z16.b, z7.b, #8
; CHECK-NEXT:    mov z7.d, z2.d
; CHECK-NEXT:    stp q19, q0, [x1, #160]
; CHECK-NEXT:    sunpklo z0.d, z2.s
; CHECK-NEXT:    ext z6.b, z6.b, z1.b, #8
; CHECK-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEXT:    stp q18, q4, [x1, #192]
; CHECK-NEXT:    mov z4.d, z3.d
; CHECK-NEXT:    ext z7.b, z7.b, z2.b, #8
; CHECK-NEXT:    sunpklo z16.d, z16.s
; CHECK-NEXT:    sunpklo z6.d, z6.s
; CHECK-NEXT:    ext z4.b, z4.b, z3.b, #8
; CHECK-NEXT:    sunpklo z2.d, z7.s
; CHECK-NEXT:    sunpklo z3.d, z3.s
; CHECK-NEXT:    stp q5, q16, [x1, #64]
; CHECK-NEXT:    stp q1, q6, [x1, #32]
; CHECK-NEXT:    sunpklo z1.d, z4.s
; CHECK-NEXT:    stp q0, q2, [x1, #224]
; CHECK-NEXT:    stp q3, q1, [x1, #96]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v32i8_v32i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #224
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 224
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.16b, v0.16b, v0.16b
; NONEON-NOSVE-NEXT:    add v1.16b, v1.16b, v1.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp]
; NONEON-NOSVE-NEXT:    sshll v5.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    sshll v6.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v3.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    sshll v4.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    stp q3, q5, [sp, #32]
; NONEON-NOSVE-NEXT:    sshll v5.4s, v5.4h, #0
; NONEON-NOSVE-NEXT:    sshll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #56]
; NONEON-NOSVE-NEXT:    ldr d0, [sp, #40]
; NONEON-NOSVE-NEXT:    stp q4, q6, [sp, #64]
; NONEON-NOSVE-NEXT:    sshll v6.4s, v6.4h, #0
; NONEON-NOSVE-NEXT:    sshll v4.4s, v4.4h, #0
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #88]
; NONEON-NOSVE-NEXT:    sshll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #72]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v7.4s, v7.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q2, q5, [sp, #128]
; NONEON-NOSVE-NEXT:    sshll v5.2d, v5.2s, #0
; NONEON-NOSVE-NEXT:    sshll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ldr d19, [sp, #152]
; NONEON-NOSVE-NEXT:    stp q0, q3, [sp, #96]
; NONEON-NOSVE-NEXT:    ldr d20, [sp, #136]
; NONEON-NOSVE-NEXT:    stp q1, q4, [sp, #160]
; NONEON-NOSVE-NEXT:    ldr d17, [sp, #104]
; NONEON-NOSVE-NEXT:    ldr d21, [sp, #120]
; NONEON-NOSVE-NEXT:    stp q7, q6, [sp, #192]
; NONEON-NOSVE-NEXT:    sshll v6.2d, v6.2s, #0
; NONEON-NOSVE-NEXT:    sshll v19.2d, v19.2s, #0
; NONEON-NOSVE-NEXT:    ldr d16, [sp, #216]
; NONEON-NOSVE-NEXT:    ldr d22, [sp, #200]
; NONEON-NOSVE-NEXT:    ldr d23, [sp, #184]
; NONEON-NOSVE-NEXT:    ldr d18, [sp, #168]
; NONEON-NOSVE-NEXT:    sshll v4.2d, v4.2s, #0
; NONEON-NOSVE-NEXT:    sshll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    sshll v16.2d, v16.2s, #0
; NONEON-NOSVE-NEXT:    stp q5, q19, [x1]
; NONEON-NOSVE-NEXT:    sshll v5.2d, v7.2s, #0
; NONEON-NOSVE-NEXT:    sshll v7.2d, v22.2s, #0
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    stp q6, q16, [x1, #128]
; NONEON-NOSVE-NEXT:    sshll v6.2d, v23.2s, #0
; NONEON-NOSVE-NEXT:    stp q5, q7, [x1, #160]
; NONEON-NOSVE-NEXT:    sshll v5.2d, v20.2s, #0
; NONEON-NOSVE-NEXT:    stp q4, q6, [x1, #192]
; NONEON-NOSVE-NEXT:    sshll v4.2d, v21.2s, #0
; NONEON-NOSVE-NEXT:    stp q2, q5, [x1, #32]
; NONEON-NOSVE-NEXT:    sshll v2.2d, v17.2s, #0
; NONEON-NOSVE-NEXT:    stp q3, q4, [x1, #64]
; NONEON-NOSVE-NEXT:    sshll v3.2d, v18.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x1, #96]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x1, #224]
; NONEON-NOSVE-NEXT:    add sp, sp, #224
; NONEON-NOSVE-NEXT:    ret
  %a = load <32 x i8>, ptr %in
  %b = add <32 x i8> %a, %a
  %c = sext <32 x i8> %b to <32 x i64>
  store <32 x i64> %c, ptr %out
  ret void
}

;
; sext i16 -> i32
;

define void @sext_v8i16_v8i32(<8 x i16> %a, ptr %out) {
; CHECK-LABEL: sext_v8i16_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    sunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v8i16_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <8 x i16> %a to <8 x i32>
  store <8 x i32>%b, ptr %out
  ret void
}

define void @sext_v16i16_v16i32(ptr %in, ptr %out) {
; CHECK-LABEL: sext_v16i16_v16i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    add z1.h, z1.h, z1.h
; CHECK-NEXT:    sunpklo z2.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    stp q2, q0, [x1, #32]
; CHECK-NEXT:    stp q3, q1, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v16i16_v16i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.8h, v0.8h, v0.8h
; NONEON-NOSVE-NEXT:    add v1.8h, v1.8h, v1.8h
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-32]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 32
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    sshll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    stp q1, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #32
; NONEON-NOSVE-NEXT:    ret
  %a = load <16 x i16>, ptr %in
  %b = add <16 x i16> %a, %a
  %c = sext <16 x i16> %b to <16 x i32>
  store <16 x i32> %c, ptr %out
  ret void
}

;
; sext i16 -> i64
;

define void @sext_v4i16_v4i64(<4 x i16> %a, ptr %out) {
; CHECK-LABEL: sext_v4i16_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v4i16_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <4 x i16> %a to <4 x i64>
  store <4 x i64>%b, ptr %out
  ret void
}

define void @sext_v8i16_v8i64(<8 x i16> %a, ptr %out) {
; CHECK-LABEL: sext_v8i16_v8i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    sunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z2.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEXT:    sunpklo z3.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    stp q2, q1, [x0]
; CHECK-NEXT:    stp q3, q0, [x0, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v8i16_v8i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-48]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    sshll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    sshll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #48
; NONEON-NOSVE-NEXT:    ret
  %b = sext <8 x i16> %a to <8 x i64>
  store <8 x i64>%b, ptr %out
  ret void
}

define void @sext_v16i16_v16i64(ptr %in, ptr %out) {
; CHECK-LABEL: sext_v16i16_v16i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    add z1.h, z1.h, z1.h
; CHECK-NEXT:    sunpklo z2.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z4.d, z2.s
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z6.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z2.d, z2.s
; CHECK-NEXT:    sunpklo z7.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z3.d, z3.s
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEXT:    stp q4, q2, [x1, #64]
; CHECK-NEXT:    stp q5, q3, [x1]
; CHECK-NEXT:    stp q6, q0, [x1, #96]
; CHECK-NEXT:    stp q7, q1, [x1, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v16i16_v16i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.8h, v0.8h, v0.8h
; NONEON-NOSVE-NEXT:    add v1.8h, v1.8h, v1.8h
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-96]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 96
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #8]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    sshll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    sshll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    sshll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q2, q0, [sp, #32]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    stp q3, q1, [sp, #64]
; NONEON-NOSVE-NEXT:    ldr d5, [sp, #56]
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ldr d4, [sp, #88]
; NONEON-NOSVE-NEXT:    ldr d6, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #72]
; NONEON-NOSVE-NEXT:    sshll v5.2d, v5.2s, #0
; NONEON-NOSVE-NEXT:    sshll v4.2d, v4.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q5, [x1]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    sshll v2.2d, v6.2s, #0
; NONEON-NOSVE-NEXT:    stp q1, q4, [x1, #64]
; NONEON-NOSVE-NEXT:    sshll v1.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    sshll v3.2d, v7.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x1, #96]
; NONEON-NOSVE-NEXT:    add sp, sp, #96
; NONEON-NOSVE-NEXT:    ret
  %a = load <16 x i16>, ptr %in
  %b = add <16 x i16> %a, %a
  %c = sext <16 x i16> %b to <16 x i64>
  store <16 x i64> %c, ptr %out
  ret void
}

;
; sext i32 -> i64
;

define void @sext_v4i32_v4i64(<4 x i32> %a, ptr %out) {
; CHECK-LABEL: sext_v4i32_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    sunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v4i32_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = sext <4 x i32> %a to <4 x i64>
  store <4 x i64>%b, ptr %out
  ret void
}

define void @sext_v8i32_v8i64(ptr %in, ptr %out) {
; CHECK-LABEL: sext_v8i32_v8i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.s, z0.s, z0.s
; CHECK-NEXT:    add z1.s, z1.s, z1.s
; CHECK-NEXT:    sunpklo z2.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z3.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z0.d, z0.s
; CHECK-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEXT:    stp q2, q0, [x1, #32]
; CHECK-NEXT:    stp q3, q1, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sext_v8i32_v8i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.4s, v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    add v1.4s, v1.4s, v1.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-32]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 32
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #8]
; NONEON-NOSVE-NEXT:    sshll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    sshll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    sshll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    sshll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    stp q1, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #32
; NONEON-NOSVE-NEXT:    ret
  %a = load <8 x i32>, ptr %in
  %b = add <8 x i32> %a, %a
  %c = sext <8 x i32> %b to <8 x i64>
  store <8 x i64> %c, ptr %out
  ret void
}

;
; zext i8 -> i16
;

define void @zext_v16i8_v16i16(<16 x i8> %a, ptr %out) {
; CHECK-LABEL: zext_v16i8_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v16i8_v16i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    ushll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = zext <16 x i8> %a to <16 x i16>
  store <16 x i16>%b, ptr %out
  ret void
}

; NOTE: Extra 'add' is to prevent the extend being combined with the load.
define void @zext_v32i8_v32i16(ptr %in, ptr %out) {
; CHECK-LABEL: zext_v32i8_v32i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    uunpklo z2.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z3.h, z1.b
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEXT:    stp q2, q0, [x1, #32]
; CHECK-NEXT:    stp q3, q1, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v32i8_v32i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.16b, v0.16b, v0.16b
; NONEON-NOSVE-NEXT:    add v1.16b, v1.16b, v1.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-32]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 32
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    ushll v2.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    ushll v3.8h, v3.8b, #0
; NONEON-NOSVE-NEXT:    stp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    stp q1, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #32
; NONEON-NOSVE-NEXT:    ret
  %a = load <32 x i8>, ptr %in
  %b = add <32 x i8> %a, %a
  %c = zext <32 x i8> %b to <32 x i16>
  store <32 x i16> %c, ptr %out
  ret void
}

;
; zext i8 -> i32
;

define void @zext_v8i8_v8i32(<8 x i8> %a, ptr %out) {
; CHECK-LABEL: zext_v8i8_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v8i8_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = zext <8 x i8> %a to <8 x i32>
  store <8 x i32>%b, ptr %out
  ret void
}

define void @zext_v16i8_v16i32(<16 x i8> %a, ptr %out) {
; CHECK-LABEL: zext_v16i8_v16i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z3.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    stp q2, q1, [x0]
; CHECK-NEXT:    stp q3, q0, [x0, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v16i8_v16i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-48]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    ushll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    ushll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ushll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #48
; NONEON-NOSVE-NEXT:    ret
  %b = zext <16 x i8> %a to <16 x i32>
  store <16 x i32> %b, ptr %out
  ret void
}

define void @zext_v32i8_v32i32(ptr %in, ptr %out) {
; CHECK-LABEL: zext_v32i8_v32i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    uunpklo z2.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z3.h, z1.b
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    uunpklo z5.s, z3.h
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z6.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z7.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    stp q4, q2, [x1, #64]
; CHECK-NEXT:    stp q5, q3, [x1]
; CHECK-NEXT:    stp q6, q0, [x1, #96]
; CHECK-NEXT:    stp q7, q1, [x1, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v32i8_v32i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.16b, v0.16b, v0.16b
; NONEON-NOSVE-NEXT:    add v1.16b, v1.16b, v1.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-96]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 96
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #8]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    ushll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    ushll v2.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    ushll v3.8h, v3.8b, #0
; NONEON-NOSVE-NEXT:    stp q2, q0, [sp, #32]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    stp q3, q1, [sp, #64]
; NONEON-NOSVE-NEXT:    ldr d5, [sp, #56]
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ldr d4, [sp, #88]
; NONEON-NOSVE-NEXT:    ldr d6, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #72]
; NONEON-NOSVE-NEXT:    ushll v5.4s, v5.4h, #0
; NONEON-NOSVE-NEXT:    ushll v4.4s, v4.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q5, [x1]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ushll v2.4s, v6.4h, #0
; NONEON-NOSVE-NEXT:    stp q1, q4, [x1, #64]
; NONEON-NOSVE-NEXT:    ushll v1.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    ushll v3.4s, v7.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x1, #96]
; NONEON-NOSVE-NEXT:    add sp, sp, #96
; NONEON-NOSVE-NEXT:    ret
  %a = load <32 x i8>, ptr %in
  %b = add <32 x i8> %a, %a
  %c = zext <32 x i8> %b to <32 x i32>
  store <32 x i32> %c, ptr %out
  ret void
}

;
; zext i8 -> i64
;

; NOTE: v4i8 is an unpacked typed stored within a v4i16 container. The zero
; extend is a two step process where the container is zero_extend_inreg'd with
; the result feeding a normal zero extend from halfs to doublewords.
define void @zext_v4i8_v4i64(<4 x i8> %a, ptr %out) {
; CHECK-LABEL: zext_v4i8_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    and z0.h, z0.h, #0xff
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v4i8_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    movi d1, #0xff00ff00ff00ff
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = zext <4 x i8> %a to <4 x i64>
  store <4 x i64>%b, ptr %out
  ret void
}

define void @zext_v8i8_v8i64(<8 x i8> %a, ptr %out) {
; CHECK-LABEL: zext_v8i8_v8i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z2.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z3.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q2, q1, [x0]
; CHECK-NEXT:    stp q3, q0, [x0, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v8i8_v8i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-48]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    ushll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ushll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #48
; NONEON-NOSVE-NEXT:    ret
  %b = zext <8 x i8> %a to <8 x i64>
  store <8 x i64>%b, ptr %out
  ret void
}

define void @zext_v16i8_v16i64(<16 x i8> %a, ptr %out) {
; CHECK-LABEL: zext_v16i8_v16i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.h, z0.b
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z3.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z4.d, z2.s
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    mov z7.d, z1.d
; CHECK-NEXT:    uunpklo z2.d, z2.s
; CHECK-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    ext z7.b, z7.b, z1.b, #8
; CHECK-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEXT:    mov z6.d, z0.d
; CHECK-NEXT:    uunpklo z3.d, z3.s
; CHECK-NEXT:    stp q4, q2, [x0]
; CHECK-NEXT:    uunpklo z4.d, z7.s
; CHECK-NEXT:    ext z6.b, z6.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q5, q3, [x0, #64]
; CHECK-NEXT:    uunpklo z2.d, z6.s
; CHECK-NEXT:    stp q1, q4, [x0, #32]
; CHECK-NEXT:    stp q0, q2, [x0, #96]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v16i8_v16i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-112]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 112
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    ushll v1.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #40]
; NONEON-NOSVE-NEXT:    ushll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ushll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q2, q1, [sp, #48]
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q3, q0, [sp, #80]
; NONEON-NOSVE-NEXT:    ldr d5, [sp, #72]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ldr d4, [sp, #104]
; NONEON-NOSVE-NEXT:    ldr d6, [sp, #56]
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #88]
; NONEON-NOSVE-NEXT:    ushll v5.2d, v5.2s, #0
; NONEON-NOSVE-NEXT:    ushll v4.2d, v4.2s, #0
; NONEON-NOSVE-NEXT:    stp q1, q5, [x0, #64]
; NONEON-NOSVE-NEXT:    ushll v1.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ushll v2.2d, v6.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q4, [x0]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    ushll v3.2d, v7.2s, #0
; NONEON-NOSVE-NEXT:    stp q1, q2, [x0, #96]
; NONEON-NOSVE-NEXT:    stp q0, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #112
; NONEON-NOSVE-NEXT:    ret
  %b = zext <16 x i8> %a to <16 x i64>
  store <16 x i64> %b, ptr %out
  ret void
}

define void @zext_v32i8_v32i64(ptr %in, ptr %out) {
; CHECK-LABEL: zext_v32i8_v32i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.b, z0.b, z0.b
; CHECK-NEXT:    add z1.b, z1.b, z1.b
; CHECK-NEXT:    mov z2.d, z0.d
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    mov z3.d, z1.d
; CHECK-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z4.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z5.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z16.d, z4.s
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z17.d, z5.s
; CHECK-NEXT:    ext z5.b, z5.b, z5.b, #8
; CHECK-NEXT:    uunpklo z6.s, z2.h
; CHECK-NEXT:    uunpklo z7.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    uunpklo z4.d, z4.s
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z19.d, z0.s
; CHECK-NEXT:    uunpklo z5.d, z5.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z18.d, z6.s
; CHECK-NEXT:    ext z6.b, z6.b, z6.b, #8
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    stp q16, q4, [x1, #128]
; CHECK-NEXT:    mov z16.d, z7.d
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q17, q5, [x1]
; CHECK-NEXT:    uunpklo z5.d, z7.s
; CHECK-NEXT:    uunpklo z4.d, z6.s
; CHECK-NEXT:    mov z6.d, z1.d
; CHECK-NEXT:    ext z16.b, z16.b, z7.b, #8
; CHECK-NEXT:    mov z7.d, z2.d
; CHECK-NEXT:    stp q19, q0, [x1, #160]
; CHECK-NEXT:    uunpklo z0.d, z2.s
; CHECK-NEXT:    ext z6.b, z6.b, z1.b, #8
; CHECK-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEXT:    stp q18, q4, [x1, #192]
; CHECK-NEXT:    mov z4.d, z3.d
; CHECK-NEXT:    ext z7.b, z7.b, z2.b, #8
; CHECK-NEXT:    uunpklo z16.d, z16.s
; CHECK-NEXT:    uunpklo z6.d, z6.s
; CHECK-NEXT:    ext z4.b, z4.b, z3.b, #8
; CHECK-NEXT:    uunpklo z2.d, z7.s
; CHECK-NEXT:    uunpklo z3.d, z3.s
; CHECK-NEXT:    stp q5, q16, [x1, #64]
; CHECK-NEXT:    stp q1, q6, [x1, #32]
; CHECK-NEXT:    uunpklo z1.d, z4.s
; CHECK-NEXT:    stp q0, q2, [x1, #224]
; CHECK-NEXT:    stp q3, q1, [x1, #96]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v32i8_v32i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #224
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 224
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.16b, v0.16b, v0.16b
; NONEON-NOSVE-NEXT:    add v1.16b, v1.16b, v1.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp]
; NONEON-NOSVE-NEXT:    ushll v5.8h, v0.8b, #0
; NONEON-NOSVE-NEXT:    ushll v6.8h, v1.8b, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v3.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ushll v4.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    stp q3, q5, [sp, #32]
; NONEON-NOSVE-NEXT:    ushll v5.4s, v5.4h, #0
; NONEON-NOSVE-NEXT:    ushll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #56]
; NONEON-NOSVE-NEXT:    ldr d0, [sp, #40]
; NONEON-NOSVE-NEXT:    stp q4, q6, [sp, #64]
; NONEON-NOSVE-NEXT:    ushll v6.4s, v6.4h, #0
; NONEON-NOSVE-NEXT:    ushll v4.4s, v4.4h, #0
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #88]
; NONEON-NOSVE-NEXT:    ushll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #72]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v7.4s, v7.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q2, q5, [sp, #128]
; NONEON-NOSVE-NEXT:    ushll v5.2d, v5.2s, #0
; NONEON-NOSVE-NEXT:    ushll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ldr d19, [sp, #152]
; NONEON-NOSVE-NEXT:    stp q0, q3, [sp, #96]
; NONEON-NOSVE-NEXT:    ldr d20, [sp, #136]
; NONEON-NOSVE-NEXT:    stp q1, q4, [sp, #160]
; NONEON-NOSVE-NEXT:    ldr d17, [sp, #104]
; NONEON-NOSVE-NEXT:    ldr d21, [sp, #120]
; NONEON-NOSVE-NEXT:    stp q7, q6, [sp, #192]
; NONEON-NOSVE-NEXT:    ushll v6.2d, v6.2s, #0
; NONEON-NOSVE-NEXT:    ushll v19.2d, v19.2s, #0
; NONEON-NOSVE-NEXT:    ldr d16, [sp, #216]
; NONEON-NOSVE-NEXT:    ldr d22, [sp, #200]
; NONEON-NOSVE-NEXT:    ldr d23, [sp, #184]
; NONEON-NOSVE-NEXT:    ldr d18, [sp, #168]
; NONEON-NOSVE-NEXT:    ushll v4.2d, v4.2s, #0
; NONEON-NOSVE-NEXT:    ushll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    ushll v16.2d, v16.2s, #0
; NONEON-NOSVE-NEXT:    stp q5, q19, [x1]
; NONEON-NOSVE-NEXT:    ushll v5.2d, v7.2s, #0
; NONEON-NOSVE-NEXT:    ushll v7.2d, v22.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    stp q6, q16, [x1, #128]
; NONEON-NOSVE-NEXT:    ushll v6.2d, v23.2s, #0
; NONEON-NOSVE-NEXT:    stp q5, q7, [x1, #160]
; NONEON-NOSVE-NEXT:    ushll v5.2d, v20.2s, #0
; NONEON-NOSVE-NEXT:    stp q4, q6, [x1, #192]
; NONEON-NOSVE-NEXT:    ushll v4.2d, v21.2s, #0
; NONEON-NOSVE-NEXT:    stp q2, q5, [x1, #32]
; NONEON-NOSVE-NEXT:    ushll v2.2d, v17.2s, #0
; NONEON-NOSVE-NEXT:    stp q3, q4, [x1, #64]
; NONEON-NOSVE-NEXT:    ushll v3.2d, v18.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x1, #96]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x1, #224]
; NONEON-NOSVE-NEXT:    add sp, sp, #224
; NONEON-NOSVE-NEXT:    ret
  %a = load <32 x i8>, ptr %in
  %b = add <32 x i8> %a, %a
  %c = zext <32 x i8> %b to <32 x i64>
  store <32 x i64> %c, ptr %out
  ret void
}

;
; zext i16 -> i32
;

define void @zext_v8i16_v8i32(<8 x i16> %a, ptr %out) {
; CHECK-LABEL: zext_v8i16_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v8i16_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = zext <8 x i16> %a to <8 x i32>
  store <8 x i32>%b, ptr %out
  ret void
}

define void @zext_v16i16_v16i32(ptr %in, ptr %out) {
; CHECK-LABEL: zext_v16i16_v16i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    add z1.h, z1.h, z1.h
; CHECK-NEXT:    uunpklo z2.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    stp q2, q0, [x1, #32]
; CHECK-NEXT:    stp q3, q1, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v16i16_v16i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.8h, v0.8h, v0.8h
; NONEON-NOSVE-NEXT:    add v1.8h, v1.8h, v1.8h
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-32]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 32
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ushll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    stp q1, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #32
; NONEON-NOSVE-NEXT:    ret
  %a = load <16 x i16>, ptr %in
  %b = add <16 x i16> %a, %a
  %c = zext <16 x i16> %b to <16 x i32>
  store <16 x i32> %c, ptr %out
  ret void
}

;
; zext i16 -> i64
;

define void @zext_v4i16_v4i64(<4 x i16> %a, ptr %out) {
; CHECK-LABEL: zext_v4i16_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v4i16_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = zext <4 x i16> %a to <4 x i64>
  store <4 x i64>%b, ptr %out
  ret void
}

define void @zext_v8i16_v8i64(<8 x i16> %a, ptr %out) {
; CHECK-LABEL: zext_v8i16_v8i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z2.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEXT:    uunpklo z3.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q2, q1, [x0]
; CHECK-NEXT:    stp q3, q0, [x0, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v8i16_v8i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-48]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    stp q1, q0, [sp, #16]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    ushll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ushll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #48
; NONEON-NOSVE-NEXT:    ret
  %b = zext <8 x i16> %a to <8 x i64>
  store <8 x i64>%b, ptr %out
  ret void
}

define void @zext_v16i16_v16i64(ptr %in, ptr %out) {
; CHECK-LABEL: zext_v16i16_v16i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.h, z0.h, z0.h
; CHECK-NEXT:    add z1.h, z1.h, z1.h
; CHECK-NEXT:    uunpklo z2.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z4.d, z2.s
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z6.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z2.d, z2.s
; CHECK-NEXT:    uunpklo z7.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z3.d, z3.s
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEXT:    stp q4, q2, [x1, #64]
; CHECK-NEXT:    stp q5, q3, [x1]
; CHECK-NEXT:    stp q6, q0, [x1, #96]
; CHECK-NEXT:    stp q7, q1, [x1, #32]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v16i16_v16i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.8h, v0.8h, v0.8h
; NONEON-NOSVE-NEXT:    add v1.8h, v1.8h, v1.8h
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-96]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 96
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #8]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #24]
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    ushll v1.4s, v1.4h, #0
; NONEON-NOSVE-NEXT:    ushll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    ushll v3.4s, v3.4h, #0
; NONEON-NOSVE-NEXT:    stp q2, q0, [sp, #32]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    stp q3, q1, [sp, #64]
; NONEON-NOSVE-NEXT:    ldr d5, [sp, #56]
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ldr d4, [sp, #88]
; NONEON-NOSVE-NEXT:    ldr d6, [sp, #40]
; NONEON-NOSVE-NEXT:    ldr d7, [sp, #72]
; NONEON-NOSVE-NEXT:    ushll v5.2d, v5.2s, #0
; NONEON-NOSVE-NEXT:    ushll v4.2d, v4.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q5, [x1]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ushll v2.2d, v6.2s, #0
; NONEON-NOSVE-NEXT:    stp q1, q4, [x1, #64]
; NONEON-NOSVE-NEXT:    ushll v1.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    ushll v3.2d, v7.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    stp q1, q3, [x1, #96]
; NONEON-NOSVE-NEXT:    add sp, sp, #96
; NONEON-NOSVE-NEXT:    ret
  %a = load <16 x i16>, ptr %in
  %b = add <16 x i16> %a, %a
  %c = zext <16 x i16> %b to <16 x i64>
  store <16 x i64> %c, ptr %out
  ret void
}

;
; zext i32 -> i64
;

define void @zext_v4i32_v4i64(<4 x i32> %a, ptr %out) {
; CHECK-LABEL: zext_v4i32_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    stp q1, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v4i32_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str q0, [sp, #-16]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    ldr d1, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %b = zext <4 x i32> %a to <4 x i64>
  store <4 x i64>%b, ptr %out
  ret void
}

define void @zext_v8i32_v8i64(ptr %in, ptr %out) {
; CHECK-LABEL: zext_v8i32_v8i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q1, q0, [x0]
; CHECK-NEXT:    add z0.s, z0.s, z0.s
; CHECK-NEXT:    add z1.s, z1.s, z1.s
; CHECK-NEXT:    uunpklo z2.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z3.d, z1.s
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEXT:    stp q2, q0, [x1, #32]
; CHECK-NEXT:    stp q3, q1, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: zext_v8i32_v8i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    add v0.4s, v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    add v1.4s, v1.4s, v1.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [sp, #-32]!
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 32
; NONEON-NOSVE-NEXT:    ldr d2, [sp, #24]
; NONEON-NOSVE-NEXT:    ldr d3, [sp, #8]
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    ushll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    ushll v3.2d, v3.2s, #0
; NONEON-NOSVE-NEXT:    stp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    stp q1, q2, [x1, #32]
; NONEON-NOSVE-NEXT:    add sp, sp, #32
; NONEON-NOSVE-NEXT:    ret
  %a = load <8 x i32>, ptr %in
  %b = add <8 x i32> %a, %a
  %c = zext <8 x i32> %b to <8 x i64>
  store <8 x i64> %c, ptr %out
  ret void
}

define void @extend_and_mul(i32 %0, <2 x i64> %1, ptr %2) {
; SVE-LABEL: extend_and_mul:
; SVE:       // %bb.0:
; SVE-NEXT:    mov z1.s, w0
; SVE-NEXT:    ptrue p0.d, vl2
; SVE-NEXT:    // kill: def $q0 killed $q0 def $z0
; SVE-NEXT:    uunpklo z1.d, z1.s
; SVE-NEXT:    mul z0.d, p0/m, z0.d, z1.d
; SVE-NEXT:    str q0, [x1]
; SVE-NEXT:    ret
;
; SVE2-LABEL: extend_and_mul:
; SVE2:       // %bb.0:
; SVE2-NEXT:    mov z1.s, w0
; SVE2-NEXT:    // kill: def $q0 killed $q0 def $z0
; SVE2-NEXT:    uunpklo z1.d, z1.s
; SVE2-NEXT:    mul z0.d, z1.d, z0.d
; SVE2-NEXT:    str q0, [x1]
; SVE2-NEXT:    ret
;
; NONEON-NOSVE-LABEL: extend_and_mul:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    dup v1.2s, w0
; NONEON-NOSVE-NEXT:    fmov x10, d0
; NONEON-NOSVE-NEXT:    mov x8, v0.d[1]
; NONEON-NOSVE-NEXT:    ushll v1.2d, v1.2s, #0
; NONEON-NOSVE-NEXT:    fmov x11, d1
; NONEON-NOSVE-NEXT:    mov x9, v1.d[1]
; NONEON-NOSVE-NEXT:    mul x10, x11, x10
; NONEON-NOSVE-NEXT:    mul x8, x9, x8
; NONEON-NOSVE-NEXT:    fmov d0, x10
; NONEON-NOSVE-NEXT:    mov v0.d[1], x8
; NONEON-NOSVE-NEXT:    str q0, [x1]
; NONEON-NOSVE-NEXT:    ret
  %broadcast.splatinsert2 = insertelement <2 x i32> poison, i32 %0, i64 0
  %broadcast.splat3 = shufflevector <2 x i32> %broadcast.splatinsert2, <2 x i32> poison, <2 x i32> zeroinitializer
  %4 = zext <2 x i32> %broadcast.splat3 to <2 x i64>
  %5 = mul <2 x i64> %4, %1
  store <2 x i64> %5, ptr %2, align 2
  ret void
}

define void @extend_no_mul(i32 %0, <2 x i64> %1, ptr %2) {
; CHECK-LABEL: extend_no_mul:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, w0
; CHECK-NEXT:    mov z0.d, x8
; CHECK-NEXT:    str q0, [x1]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: extend_no_mul:
; NONEON-NOSVE:       // %bb.0: // %entry
; NONEON-NOSVE-NEXT:    dup v0.2s, w0
; NONEON-NOSVE-NEXT:    ushll v0.2d, v0.2s, #0
; NONEON-NOSVE-NEXT:    str q0, [x1]
; NONEON-NOSVE-NEXT:    ret
entry:
  %broadcast.splatinsert2 = insertelement <2 x i32> poison, i32 %0, i64 0
  %broadcast.splat3 = shufflevector <2 x i32> %broadcast.splatinsert2, <2 x i32> poison, <2 x i32> zeroinitializer
  %3 = zext <2 x i32> %broadcast.splat3 to <2 x i64>
  store <2 x i64> %3, ptr %2, align 2
  ret void
}
