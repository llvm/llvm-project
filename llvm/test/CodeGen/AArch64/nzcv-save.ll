; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -verify-machineinstrs -mtriple=aarch64-eabi | FileCheck %s

; DAG ends up with two uses for the flags from an ADCS node, which means they
; must be saved for later.
define void @f(i256* nocapture %a, i256* nocapture %b, i256* nocapture %cc, i256* nocapture %dd) nounwind uwtable noinline ssp {
; CHECK-LABEL: f:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ldp x8, x10, [x2]
; CHECK-NEXT:    ldp x9, x11, [x3]
; CHECK-NEXT:    ldp x12, x13, [x2, #16]
; CHECK-NEXT:    adds x8, x8, x9
; CHECK-NEXT:    cset w9, hs
; CHECK-NEXT:    cmp w9, #1
; CHECK-NEXT:    adcs x10, x10, x11
; CHECK-NEXT:    orr x14, x13, #0x100
; CHECK-NEXT:    cset w11, hs
; CHECK-NEXT:    cmp w11, #1
; CHECK-NEXT:    ldp x9, x11, [x3, #16]
; CHECK-NEXT:    stp x8, x10, [x0]
; CHECK-NEXT:    adcs x9, x12, x9
; CHECK-NEXT:    cset w12, hs
; CHECK-NEXT:    cmp w12, #1
; CHECK-NEXT:    adcs x13, x13, x11
; CHECK-NEXT:    cmp w12, #1
; CHECK-NEXT:    adcs x11, x14, x11
; CHECK-NEXT:    stp x9, x13, [x0, #16]
; CHECK-NEXT:    stp x8, x10, [x1]
; CHECK-NEXT:    stp x9, x11, [x1, #16]
; CHECK-NEXT:    ret
entry:
  %c = load i256, i256* %cc
  %d = load i256, i256* %dd
  %add = add nsw i256 %c, %d
  store i256 %add, i256* %a, align 8
  %or = or i256 %c, 1606938044258990275541962092341162602522202993782792835301376
  %add6 = add nsw i256 %or, %d
  store i256 %add6, i256* %b, align 8
  ret void
}
