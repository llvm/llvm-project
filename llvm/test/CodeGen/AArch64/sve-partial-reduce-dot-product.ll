; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64 -mattr=+sve2,+i8mm %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-I8MM
; RUN: llc -mtriple=aarch64 -mattr=+sve2 %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-NOI8MM
; RUN: llc -mtriple=aarch64 -mattr=+sve2,+i8mm -aarch64-enable-partial-reduce-nodes %s -o - | FileCheck %s --check-prefixes=CHECK-NEWLOWERING

define <vscale x 4 x i32> @udot(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-LABEL: udot:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    udot z0.s, z1.b, z2.b
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    udot z0.s, z1.b, z2.b
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %b.wide = zext <vscale x 16 x i8> %b to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @udot_wide(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b) {
; CHECK-LABEL: udot_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    udot z0.d, z1.h, z2.h
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_wide:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    udot z0.d, z1.h, z2.h
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = zext <vscale x 8 x i16> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 4 x i32> @sdot(<vscale x 4 x i32> %accc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-LABEL: sdot:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sdot z0.s, z1.b, z2.b
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sdot z0.s, z1.b, z2.b
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %b.wide = sext <vscale x 16 x i8> %b to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %accc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @sdot_wide(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b) {
; CHECK-LABEL: sdot_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sdot z0.d, z1.h, z2.h
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_wide:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sdot z0.d, z1.h, z2.h
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = sext <vscale x 8 x i16> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 4 x i32> @usdot(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-I8MM-LABEL: usdot:
; CHECK-I8MM:       // %bb.0: // %entry
; CHECK-I8MM-NEXT:    usdot z0.s, z1.b, z2.b
; CHECK-I8MM-NEXT:    ret
;
; CHECK-NOI8MM-LABEL: usdot:
; CHECK-NOI8MM:       // %bb.0: // %entry
; CHECK-NOI8MM-NEXT:    uunpklo z3.h, z1.b
; CHECK-NOI8MM-NEXT:    sunpklo z4.h, z2.b
; CHECK-NOI8MM-NEXT:    ptrue p0.s
; CHECK-NOI8MM-NEXT:    uunpkhi z1.h, z1.b
; CHECK-NOI8MM-NEXT:    sunpkhi z2.h, z2.b
; CHECK-NOI8MM-NEXT:    uunpklo z5.s, z3.h
; CHECK-NOI8MM-NEXT:    sunpklo z6.s, z4.h
; CHECK-NOI8MM-NEXT:    uunpkhi z3.s, z3.h
; CHECK-NOI8MM-NEXT:    sunpkhi z4.s, z4.h
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NOI8MM-NEXT:    uunpklo z5.s, z1.h
; CHECK-NOI8MM-NEXT:    sunpklo z6.s, z2.h
; CHECK-NOI8MM-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NOI8MM-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NOI8MM-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: usdot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.h, z1.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z4.h, z2.b
; CHECK-NEWLOWERING-NEXT:    ptrue p0.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.h, z1.b
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.s, z4.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.s, z4.h
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %b.wide = sext <vscale x 16 x i8> %b to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 4 x i32> @sudot(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-I8MM-LABEL: sudot:
; CHECK-I8MM:       // %bb.0: // %entry
; CHECK-I8MM-NEXT:    usdot z0.s, z2.b, z1.b
; CHECK-I8MM-NEXT:    ret
;
; CHECK-NOI8MM-LABEL: sudot:
; CHECK-NOI8MM:       // %bb.0: // %entry
; CHECK-NOI8MM-NEXT:    sunpklo z3.h, z1.b
; CHECK-NOI8MM-NEXT:    uunpklo z4.h, z2.b
; CHECK-NOI8MM-NEXT:    ptrue p0.s
; CHECK-NOI8MM-NEXT:    sunpkhi z1.h, z1.b
; CHECK-NOI8MM-NEXT:    uunpkhi z2.h, z2.b
; CHECK-NOI8MM-NEXT:    sunpklo z5.s, z3.h
; CHECK-NOI8MM-NEXT:    uunpklo z6.s, z4.h
; CHECK-NOI8MM-NEXT:    sunpkhi z3.s, z3.h
; CHECK-NOI8MM-NEXT:    uunpkhi z4.s, z4.h
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NOI8MM-NEXT:    sunpklo z5.s, z1.h
; CHECK-NOI8MM-NEXT:    uunpklo z6.s, z2.h
; CHECK-NOI8MM-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NOI8MM-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NOI8MM-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NOI8MM-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sudot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.h, z1.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.h, z2.b
; CHECK-NEWLOWERING-NEXT:    ptrue p0.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.h, z1.b
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.s, z4.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.s, z4.h
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z5.s, z6.s
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %b.wide = zext <vscale x 16 x i8> %b to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 4 x i64> @udot_8to64(<vscale x 4 x i64> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-LABEL: udot_8to64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    movi v4.2d, #0000000000000000
; CHECK-NEXT:    udot z4.s, z2.b, z3.b
; CHECK-NEXT:    sunpklo z2.d, z4.s
; CHECK-NEXT:    sunpkhi z3.d, z4.s
; CHECK-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_8to64:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.h, z3.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.s, z4.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z7.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z24.s, z5.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z25.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.s, z4.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.s, z5.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z26.d, z6.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z27.d, z7.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z28.d, z24.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z29.d, z25.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z6.d, z6.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z7.d, z7.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z24.d, z24.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z25.d, z25.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z26.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z28.d, z5.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z27.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z29.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.d, z5.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i64>
  %b.wide = zext <vscale x 16 x i8> %b to <vscale x 16 x i64>
  %mult = mul nuw nsw <vscale x 16 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv16i64(
  <vscale x 4 x i64> %acc, <vscale x 16 x i64> %mult)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i64> @sdot_8to64(<vscale x 4 x i64> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b){
; CHECK-LABEL: sdot_8to64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    movi v4.2d, #0000000000000000
; CHECK-NEXT:    sdot z4.s, z2.b, z3.b
; CHECK-NEXT:    sunpklo z2.d, z4.s
; CHECK-NEXT:    sunpkhi z3.d, z4.s
; CHECK-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_8to64:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.h, z3.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.s, z4.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z7.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z24.s, z5.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z25.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.s, z4.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.s, z5.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z26.d, z6.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z27.d, z7.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z28.d, z24.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z29.d, z25.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z6.d, z6.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z7.d, z7.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z24.d, z24.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z25.d, z25.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z26.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z28.d, z5.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z27.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z29.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.d, z5.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i64>
  %b.wide = sext <vscale x 16 x i8> %b to <vscale x 16 x i64>
  %mult = mul nuw nsw <vscale x 16 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv16i64(
  <vscale x 4 x i64> %acc, <vscale x 16 x i64> %mult)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i64> @usdot_8to64(<vscale x 4 x i64> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b){
; CHECK-I8MM-LABEL: usdot_8to64:
; CHECK-I8MM:       // %bb.0: // %entry
; CHECK-I8MM-NEXT:    movi v4.2d, #0000000000000000
; CHECK-I8MM-NEXT:    usdot z4.s, z2.b, z3.b
; CHECK-I8MM-NEXT:    sunpklo z2.d, z4.s
; CHECK-I8MM-NEXT:    sunpkhi z3.d, z4.s
; CHECK-I8MM-NEXT:    add z0.d, z0.d, z2.d
; CHECK-I8MM-NEXT:    add z1.d, z1.d, z3.d
; CHECK-I8MM-NEXT:    ret
;
; CHECK-NOI8MM-LABEL: usdot_8to64:
; CHECK-NOI8MM:       // %bb.0: // %entry
; CHECK-NOI8MM-NEXT:    uunpkhi z4.h, z2.b
; CHECK-NOI8MM-NEXT:    uunpklo z2.h, z2.b
; CHECK-NOI8MM-NEXT:    sunpkhi z5.h, z3.b
; CHECK-NOI8MM-NEXT:    sunpklo z3.h, z3.b
; CHECK-NOI8MM-NEXT:    ptrue p0.d
; CHECK-NOI8MM-NEXT:    uunpklo z6.s, z4.h
; CHECK-NOI8MM-NEXT:    uunpklo z7.s, z2.h
; CHECK-NOI8MM-NEXT:    sunpklo z24.s, z5.h
; CHECK-NOI8MM-NEXT:    sunpklo z25.s, z3.h
; CHECK-NOI8MM-NEXT:    uunpkhi z4.s, z4.h
; CHECK-NOI8MM-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NOI8MM-NEXT:    sunpkhi z5.s, z5.h
; CHECK-NOI8MM-NEXT:    sunpkhi z3.s, z3.h
; CHECK-NOI8MM-NEXT:    uunpklo z26.d, z6.s
; CHECK-NOI8MM-NEXT:    uunpklo z27.d, z7.s
; CHECK-NOI8MM-NEXT:    sunpklo z28.d, z24.s
; CHECK-NOI8MM-NEXT:    sunpklo z29.d, z25.s
; CHECK-NOI8MM-NEXT:    uunpkhi z6.d, z6.s
; CHECK-NOI8MM-NEXT:    uunpkhi z7.d, z7.s
; CHECK-NOI8MM-NEXT:    sunpkhi z24.d, z24.s
; CHECK-NOI8MM-NEXT:    sunpkhi z25.d, z25.s
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NOI8MM-NEXT:    uunpklo z26.d, z4.s
; CHECK-NOI8MM-NEXT:    sunpklo z28.d, z5.s
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NOI8MM-NEXT:    uunpklo z27.d, z2.s
; CHECK-NOI8MM-NEXT:    sunpklo z29.d, z3.s
; CHECK-NOI8MM-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NOI8MM-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NOI8MM-NEXT:    sunpkhi z5.d, z5.s
; CHECK-NOI8MM-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NOI8MM-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: usdot_8to64:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.h, z3.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.s, z4.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z7.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z24.s, z5.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z25.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.s, z4.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.s, z5.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z26.d, z6.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z27.d, z7.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z28.d, z24.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z29.d, z25.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z6.d, z6.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z7.d, z7.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z24.d, z24.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z25.d, z25.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z26.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z28.d, z5.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z27.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z29.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.d, z5.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i64>
  %b.wide = sext <vscale x 16 x i8> %b to <vscale x 16 x i64>
  %mult = mul nuw nsw <vscale x 16 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv16i64(
  <vscale x 4 x i64> %acc, <vscale x 16 x i64> %mult)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i64> @sudot_8to64(<vscale x 4 x i64> %acc, <vscale x 16 x i8> %a, <vscale x 16 x i8> %b) {
; CHECK-I8MM-LABEL: sudot_8to64:
; CHECK-I8MM:       // %bb.0: // %entry
; CHECK-I8MM-NEXT:    movi v4.2d, #0000000000000000
; CHECK-I8MM-NEXT:    usdot z4.s, z3.b, z2.b
; CHECK-I8MM-NEXT:    sunpklo z2.d, z4.s
; CHECK-I8MM-NEXT:    sunpkhi z3.d, z4.s
; CHECK-I8MM-NEXT:    add z0.d, z0.d, z2.d
; CHECK-I8MM-NEXT:    add z1.d, z1.d, z3.d
; CHECK-I8MM-NEXT:    ret
;
; CHECK-NOI8MM-LABEL: sudot_8to64:
; CHECK-NOI8MM:       // %bb.0: // %entry
; CHECK-NOI8MM-NEXT:    sunpkhi z4.h, z2.b
; CHECK-NOI8MM-NEXT:    sunpklo z2.h, z2.b
; CHECK-NOI8MM-NEXT:    uunpkhi z5.h, z3.b
; CHECK-NOI8MM-NEXT:    uunpklo z3.h, z3.b
; CHECK-NOI8MM-NEXT:    ptrue p0.d
; CHECK-NOI8MM-NEXT:    sunpklo z6.s, z4.h
; CHECK-NOI8MM-NEXT:    sunpklo z7.s, z2.h
; CHECK-NOI8MM-NEXT:    uunpklo z24.s, z5.h
; CHECK-NOI8MM-NEXT:    uunpklo z25.s, z3.h
; CHECK-NOI8MM-NEXT:    sunpkhi z4.s, z4.h
; CHECK-NOI8MM-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NOI8MM-NEXT:    uunpkhi z5.s, z5.h
; CHECK-NOI8MM-NEXT:    uunpkhi z3.s, z3.h
; CHECK-NOI8MM-NEXT:    sunpklo z26.d, z6.s
; CHECK-NOI8MM-NEXT:    sunpklo z27.d, z7.s
; CHECK-NOI8MM-NEXT:    uunpklo z28.d, z24.s
; CHECK-NOI8MM-NEXT:    uunpklo z29.d, z25.s
; CHECK-NOI8MM-NEXT:    sunpkhi z6.d, z6.s
; CHECK-NOI8MM-NEXT:    sunpkhi z7.d, z7.s
; CHECK-NOI8MM-NEXT:    uunpkhi z24.d, z24.s
; CHECK-NOI8MM-NEXT:    uunpkhi z25.d, z25.s
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NOI8MM-NEXT:    sunpklo z26.d, z4.s
; CHECK-NOI8MM-NEXT:    uunpklo z28.d, z5.s
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NOI8MM-NEXT:    sunpklo z27.d, z2.s
; CHECK-NOI8MM-NEXT:    uunpklo z29.d, z3.s
; CHECK-NOI8MM-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NOI8MM-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NOI8MM-NEXT:    uunpkhi z5.d, z5.s
; CHECK-NOI8MM-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NOI8MM-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NOI8MM-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NOI8MM-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sudot_8to64:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.h, z3.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.s, z4.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z7.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z24.s, z5.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z25.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.s, z4.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.s, z5.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z26.d, z6.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z27.d, z7.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z28.d, z24.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z29.d, z25.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z6.d, z6.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z7.d, z7.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z24.d, z24.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z25.d, z25.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z26.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z28.d, z5.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z27.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z29.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.d, z5.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z26.d, z28.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z27.d, z29.d
; CHECK-NEWLOWERING-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i64>
  %b.wide = zext <vscale x 16 x i8> %b to <vscale x 16 x i64>
  %mult = mul nuw nsw <vscale x 16 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv16i64(
  <vscale x 4 x i64> %acc, <vscale x 16 x i64> %mult)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i32> @udot_no_bin_op(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a){
; CHECK-LABEL: udot_no_bin_op:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z2.b, #1 // =0x1
; CHECK-NEXT:    udot z0.s, z1.b, z2.b
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_no_bin_op:
; CHECK-NEWLOWERING:       // %bb.0:
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.h, z1.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEWLOWERING-NEXT:    add z1.s, z4.s, z3.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z2.s
; CHECK-NEWLOWERING-NEXT:    ret
  %a.ext = zext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %a.ext)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 4 x i32> @sdot_no_bin_op(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a){
; CHECK-LABEL: sdot_no_bin_op:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov z2.b, #1 // =0x1
; CHECK-NEXT:    sdot z0.s, z1.b, z2.b
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_no_bin_op:
; CHECK-NEWLOWERING:       // %bb.0:
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.h, z1.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEWLOWERING-NEXT:    add z1.s, z4.s, z3.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z2.s
; CHECK-NEWLOWERING-NEXT:    ret
  %a.ext = sext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %a.ext)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @udot_no_bin_op_wide(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b){
; CHECK-LABEL: udot_no_bin_op_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov z2.h, #1 // =0x1
; CHECK-NEXT:    udot z0.d, z1.h, z2.h
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_no_bin_op_wide:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z1.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z4.d, z3.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z1.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %a.wide)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @sdot_no_bin_op_wide(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b){
; CHECK-LABEL: sdot_no_bin_op_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov z2.h, #1 // =0x1
; CHECK-NEXT:    sdot z0.d, z1.h, z2.h
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_no_bin_op_wide:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z1.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z4.d, z3.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z1.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %a.wide)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 4 x i64> @udot_no_bin_op_8to64(<vscale x 4 x i64> %acc, <vscale x 16 x i8> %a){
; CHECK-LABEL: udot_no_bin_op_8to64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v3.2d, #0000000000000000
; CHECK-NEXT:    mov z4.b, #1 // =0x1
; CHECK-NEXT:    udot z3.s, z2.b, z4.b
; CHECK-NEXT:    sunpklo z2.d, z3.s
; CHECK-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_no_bin_op_8to64:
; CHECK-NEWLOWERING:       // %bb.0:
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z7.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z24.d, z5.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z25.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z5.d, z5.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z24.d
; CHECK-NEWLOWERING-NEXT:    add z5.d, z5.d, z25.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEWLOWERING-NEXT:    add z3.d, z7.d, z6.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z5.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z1.d, z4.d
; CHECK-NEWLOWERING-NEXT:    ret
  %a.ext = zext <vscale x 16 x i8> %a to <vscale x 16 x i64>
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv16i64(<vscale x 4 x i64> %acc, <vscale x 16 x i64> %a.ext)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i64> @sdot_no_bin_op_8to64(<vscale x 4 x i64> %acc, <vscale x 16 x i8> %a){
; CHECK-LABEL: sdot_no_bin_op_8to64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v3.2d, #0000000000000000
; CHECK-NEXT:    mov z4.b, #1 // =0x1
; CHECK-NEXT:    sdot z3.s, z2.b, z4.b
; CHECK-NEXT:    sunpklo z2.d, z3.s
; CHECK-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_no_bin_op_8to64:
; CHECK-NEWLOWERING:       // %bb.0:
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z2.h, z2.b
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z7.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z24.d, z5.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z25.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z5.d, z5.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z24.d
; CHECK-NEWLOWERING-NEXT:    add z5.d, z5.d, z25.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEWLOWERING-NEXT:    add z3.d, z7.d, z6.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z5.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z1.d, z3.d
; CHECK-NEWLOWERING-NEXT:    add z0.d, z0.d, z2.d
; CHECK-NEWLOWERING-NEXT:    add z1.d, z1.d, z4.d
; CHECK-NEWLOWERING-NEXT:    ret
  %a.ext = sext <vscale x 16 x i8> %a to <vscale x 16 x i64>
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv16i64(<vscale x 4 x i64> %acc, <vscale x 16 x i64> %a.ext)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i32> @not_udot(<vscale x 4 x i32> %acc, <vscale x 8 x i8> %a, <vscale x 8 x i8> %b) {
; CHECK-LABEL: not_udot:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEXT:    ptrue p0.s
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: not_udot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEWLOWERING-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEWLOWERING-NEXT:    ptrue p0.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z3.s, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i8> %a to <vscale x 8 x i32>
  %b.wide = zext <vscale x 8 x i8> %b to <vscale x 8 x i32>
  %mult = mul nuw nsw <vscale x 8 x i32> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 8 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 2 x i64> @not_udot_wide(<vscale x 2 x i64> %acc, <vscale x 4 x i16> %a, <vscale x 4 x i16> %b) {
; CHECK-LABEL: not_udot_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z1.s, z1.s, #0xffff
; CHECK-NEXT:    and z2.s, z2.s, #0xffff
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    uunpklo z3.d, z1.s
; CHECK-NEXT:    uunpklo z4.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: not_udot_wide:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    and z1.s, z1.s, #0xffff
; CHECK-NEWLOWERING-NEXT:    and z2.s, z2.s, #0xffff
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 4 x i16> %a to <vscale x 4 x i64>
  %b.wide = zext <vscale x 4 x i16> %b to <vscale x 4 x i64>
  %mult = mul nuw nsw <vscale x 4 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv4i64(<vscale x 2 x i64> %acc, <vscale x 4 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @not_usdot(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b) {
; CHECK-LABEL: not_usdot:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    uunpklo z5.d, z1.s
; CHECK-NEXT:    sunpklo z6.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: not_usdot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = sext <vscale x 8 x i16> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @not_sudot(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i16> %b) {
; CHECK-LABEL: not_sudot:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    sunpklo z5.d, z1.s
; CHECK-NEXT:    uunpklo z6.d, z2.s
; CHECK-NEXT:    sunpkhi z1.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: not_sudot:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = zext <vscale x 8 x i16> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @udot_different_types(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i8> %b){
; CHECK-LABEL: udot_different_types:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    uunpklo z5.d, z1.s
; CHECK-NEXT:    uunpklo z6.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_different_types:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = zext <vscale x 8 x i8> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @sdot_different_types(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i8> %b){
; CHECK-LABEL: sdot_different_types:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ptrue p0.h
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEXT:    sxtb z2.h, p0/m, z2.h
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    sunpklo z5.d, z1.s
; CHECK-NEXT:    sunpklo z6.d, z2.s
; CHECK-NEXT:    sunpkhi z1.d, z1.s
; CHECK-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_different_types:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    ptrue p0.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sxtb z2.h, p0/m, z2.h
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = sext <vscale x 8 x i8> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @usdot_different_types(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i8> %b){
; CHECK-LABEL: usdot_different_types:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ptrue p0.h
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    sxtb z2.h, p0/m, z2.h
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    uunpklo z5.d, z1.s
; CHECK-NEXT:    sunpklo z6.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: usdot_different_types:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    ptrue p0.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sxtb z2.h, p0/m, z2.h
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    uunpklo z5.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpklo z6.d, z2.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = sext <vscale x 8 x i8> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i64> @sudot_different_types(<vscale x 2 x i64> %acc, <vscale x 8 x i16> %a, <vscale x 8 x i8> %b){
; CHECK-LABEL: sudot_different_types:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    sunpklo z5.d, z1.s
; CHECK-NEXT:    uunpklo z6.d, z2.s
; CHECK-NEXT:    sunpkhi z1.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sudot_different_types:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEWLOWERING-NEXT:    ptrue p0.d
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.d, z3.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z3.d, z3.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    sunpklo z5.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpklo z6.d, z2.s
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.d, z1.s
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z3.d, z4.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z5.d, z6.d
; CHECK-NEWLOWERING-NEXT:    mla z0.d, p0/m, z1.d, z2.d
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i16> %a to <vscale x 8 x i64>
  %b.wide = zext <vscale x 8 x i8> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i64> @llvm.experimental.vector.partial.reduce.add.nxv2i64.nxv8i64(<vscale x 2 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 2 x i64> %partial.reduce
}

define <vscale x 2 x i16> @udot_nxv8i8_promote (<vscale x 2 x i16> %acc, <vscale x 8 x i8> %a, <vscale x 8 x i8> %b){
; CHECK-LABEL: udot_nxv8i8_promote:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEXT:    mul z1.h, z1.h, z2.h
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpklo z3.d, z2.s
; CHECK-NEXT:    uunpklo z4.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    add z0.d, z0.d, z3.d
; CHECK-NEXT:    add z2.d, z2.d, z4.d
; CHECK-NEXT:    add z0.d, z1.d, z0.d
; CHECK-NEXT:    add z0.d, z2.d, z0.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_nxv8i8_promote:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEWLOWERING-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEWLOWERING-NEXT:    udot z0.d, z1.h, z2.h
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i8> %a to <vscale x 8 x i16>
  %b.wide = zext <vscale x 8 x i8> %b to <vscale x 8 x i16>
  %mult = mul nuw nsw <vscale x 8 x i16> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i16> @llvm.experimental.vector.partial.reduce.add.nxv2i16.nxv8i16(<vscale x 2 x i16> %acc, <vscale x 8 x i16> %mult)
  ret <vscale x 2 x i16> %partial.reduce
}

define <vscale x 2 x i16> @sdot_nxv8i8_promote (<vscale x 2 x i16> %acc, <vscale x 8 x i8> %a, <vscale x 8 x i8> %b){
; CHECK-LABEL: sdot_nxv8i8_promote:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ptrue p0.h
; CHECK-NEXT:    sxtb z1.h, p0/m, z1.h
; CHECK-NEXT:    sxtb z2.h, p0/m, z2.h
; CHECK-NEXT:    mul z1.h, z1.h, z2.h
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    uunpklo z3.d, z2.s
; CHECK-NEXT:    uunpklo z4.d, z1.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    uunpkhi z1.d, z1.s
; CHECK-NEXT:    add z0.d, z0.d, z3.d
; CHECK-NEXT:    add z2.d, z2.d, z4.d
; CHECK-NEXT:    add z0.d, z1.d, z0.d
; CHECK-NEXT:    add z0.d, z2.d, z0.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_nxv8i8_promote:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    ptrue p0.h
; CHECK-NEWLOWERING-NEXT:    sxtb z2.h, p0/m, z2.h
; CHECK-NEWLOWERING-NEXT:    sxtb z1.h, p0/m, z1.h
; CHECK-NEWLOWERING-NEXT:    sdot z0.d, z1.h, z2.h
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 8 x i8> %a to <vscale x 8 x i16>
  %b.wide = sext <vscale x 8 x i8> %b to <vscale x 8 x i16>
  %mult = mul nuw nsw <vscale x 8 x i16> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 2 x i16> @llvm.experimental.vector.partial.reduce.add.nxv2i16.nxv8i16(<vscale x 2 x i16> %acc, <vscale x 8 x i16> %mult)
  ret <vscale x 2 x i16> %partial.reduce
}

define <vscale x 4 x i64> @partial_reduce_only_split_acc(<vscale x 4 x i64> %acc, <vscale x 8 x i8> %a, <vscale x 8 x i8> %b) {
; CHECK-LABEL: partial_reduce_only_split_acc:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEXT:    and z3.h, z3.h, #0xff
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    uunpkhi z4.s, z2.h
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpkhi z5.s, z3.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    uunpklo z6.d, z4.s
; CHECK-NEXT:    uunpklo z7.d, z2.s
; CHECK-NEXT:    uunpklo z24.d, z5.s
; CHECK-NEXT:    uunpklo z25.d, z3.s
; CHECK-NEXT:    uunpkhi z4.d, z4.s
; CHECK-NEXT:    uunpkhi z2.d, z2.s
; CHECK-NEXT:    uunpkhi z5.d, z5.s
; CHECK-NEXT:    uunpkhi z3.d, z3.s
; CHECK-NEXT:    mla z1.d, p0/m, z6.d, z24.d
; CHECK-NEXT:    mla z0.d, p0/m, z7.d, z25.d
; CHECK-NEXT:    mla z1.d, p0/m, z4.d, z5.d
; CHECK-NEXT:    mla z0.d, p0/m, z2.d, z3.d
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: partial_reduce_only_split_acc:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    and z3.h, z3.h, #0xff
; CHECK-NEWLOWERING-NEXT:    and z2.h, z2.h, #0xff
; CHECK-NEWLOWERING-NEXT:    udot z0.d, z2.h, z3.h
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 8 x i8> %a to <vscale x 8 x i64>
  %b.wide = zext <vscale x 8 x i8> %b to <vscale x 8 x i64>
  %mult = mul nuw nsw <vscale x 8 x i64> %a.wide, %b.wide
  %partial.reduce = tail call <vscale x 4 x i64> @llvm.experimental.vector.partial.reduce.add.nxv4i64.nxv8i64(
  <vscale x 4 x i64> %acc, <vscale x 8 x i64> %mult)
  ret <vscale x 4 x i64> %partial.reduce
}

define <vscale x 4 x i32> @sdot_imm(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a) {
; CHECK-LABEL: sdot_imm:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sunpklo z2.h, z1.b
; CHECK-NEXT:    sunpkhi z1.h, z1.b
; CHECK-NEXT:    sunpklo z3.s, z2.h
; CHECK-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEXT:    sub z0.s, z0.s, z3.s
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEXT:    sub z0.s, z0.s, z2.s
; CHECK-NEXT:    sub z0.s, z0.s, z3.s
; CHECK-NEXT:    sub z0.s, z0.s, z1.s
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_imm:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    mov z2.b, #-1 // =0xffffffffffffffff
; CHECK-NEWLOWERING-NEXT:    sdot z0.s, z1.b, z2.b
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, splat(i32 -1)
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 4 x i32> @sdot_imm_does_not_fit(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a) {
; CHECK-LABEL: sdot_imm_does_not_fit:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    sunpklo z2.h, z1.b
; CHECK-NEXT:    sunpkhi z1.h, z1.b
; CHECK-NEXT:    sunpklo z3.s, z2.h
; CHECK-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEXT:    sunpklo z4.s, z1.h
; CHECK-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEXT:    lsl z4.s, z4.s, #8
; CHECK-NEXT:    lsl z2.s, z2.s, #8
; CHECK-NEXT:    lsl z3.s, z3.s, #8
; CHECK-NEXT:    lsl z1.s, z1.s, #8
; CHECK-NEXT:    add z0.s, z0.s, z3.s
; CHECK-NEXT:    add z2.s, z2.s, z4.s
; CHECK-NEXT:    add z0.s, z0.s, z2.s
; CHECK-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: sdot_imm_does_not_fit:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    sunpklo z2.h, z1.b
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.h, z1.b
; CHECK-NEWLOWERING-NEXT:    sunpklo z3.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    sunpklo z4.s, z1.h
; CHECK-NEWLOWERING-NEXT:    sunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    lsl z4.s, z4.s, #8
; CHECK-NEWLOWERING-NEXT:    lsl z2.s, z2.s, #8
; CHECK-NEWLOWERING-NEXT:    lsl z3.s, z3.s, #8
; CHECK-NEWLOWERING-NEXT:    lsl z1.s, z1.s, #8
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z3.s
; CHECK-NEWLOWERING-NEXT:    add z2.s, z2.s, z4.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z2.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = sext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, splat(i32 256)
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 4 x i32> @udot_imm(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a) {
; CHECK-LABEL: udot_imm:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    uunpklo z3.h, z1.b
; CHECK-NEXT:    mov z2.s, #255 // =0xff
; CHECK-NEXT:    ptrue p0.s
; CHECK-NEXT:    uunpkhi z1.h, z1.b
; CHECK-NEXT:    uunpklo z4.s, z3.h
; CHECK-NEXT:    uunpkhi z3.s, z3.h
; CHECK-NEXT:    mla z0.s, p0/m, z4.s, z2.s
; CHECK-NEXT:    uunpklo z4.s, z1.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    mla z0.s, p0/m, z3.s, z2.s
; CHECK-NEXT:    mla z0.s, p0/m, z4.s, z2.s
; CHECK-NEXT:    mla z0.s, p0/m, z1.s, z2.s
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_imm:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    mov z2.b, #-1 // =0xffffffffffffffff
; CHECK-NEWLOWERING-NEXT:    udot z0.s, z1.b, z2.b
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, splat(i32 255)
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}

define <vscale x 4 x i32> @udot_imm_does_not_fit(<vscale x 4 x i32> %acc, <vscale x 16 x i8> %a) {
; CHECK-LABEL: udot_imm_does_not_fit:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    uunpklo z2.h, z1.b
; CHECK-NEXT:    uunpkhi z1.h, z1.b
; CHECK-NEXT:    uunpklo z3.s, z2.h
; CHECK-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEXT:    uunpklo z4.s, z1.h
; CHECK-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEXT:    lsl z4.s, z4.s, #8
; CHECK-NEXT:    lsl z2.s, z2.s, #8
; CHECK-NEXT:    lsl z3.s, z3.s, #8
; CHECK-NEXT:    lsl z1.s, z1.s, #8
; CHECK-NEXT:    add z0.s, z0.s, z3.s
; CHECK-NEXT:    add z2.s, z2.s, z4.s
; CHECK-NEXT:    add z0.s, z0.s, z2.s
; CHECK-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEXT:    ret
;
; CHECK-NEWLOWERING-LABEL: udot_imm_does_not_fit:
; CHECK-NEWLOWERING:       // %bb.0: // %entry
; CHECK-NEWLOWERING-NEXT:    uunpklo z2.h, z1.b
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.h, z1.b
; CHECK-NEWLOWERING-NEXT:    uunpklo z3.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z2.s, z2.h
; CHECK-NEWLOWERING-NEXT:    uunpklo z4.s, z1.h
; CHECK-NEWLOWERING-NEXT:    uunpkhi z1.s, z1.h
; CHECK-NEWLOWERING-NEXT:    lsl z4.s, z4.s, #8
; CHECK-NEWLOWERING-NEXT:    lsl z2.s, z2.s, #8
; CHECK-NEWLOWERING-NEXT:    lsl z3.s, z3.s, #8
; CHECK-NEWLOWERING-NEXT:    lsl z1.s, z1.s, #8
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z3.s
; CHECK-NEWLOWERING-NEXT:    add z2.s, z2.s, z4.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z2.s
; CHECK-NEWLOWERING-NEXT:    add z0.s, z0.s, z1.s
; CHECK-NEWLOWERING-NEXT:    ret
entry:
  %a.wide = zext <vscale x 16 x i8> %a to <vscale x 16 x i32>
  %mult = mul nuw nsw <vscale x 16 x i32> %a.wide, splat(i32 256)
  %partial.reduce = tail call <vscale x 4 x i32> @llvm.experimental.vector.partial.reduce.add.nxv4i32.nxv16i32(<vscale x 4 x i32> %acc, <vscale x 16 x i32> %mult)
  ret <vscale x 4 x i32> %partial.reduce
}
