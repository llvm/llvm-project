; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -mattr=+sme -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE

target triple = "aarch64-unknown-linux-gnu"

;
; FMAXNM
;

define <4 x half> @fmaxnm_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fmaxnm_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmaxnm z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[2]
; NONEON-NOSVE-NEXT:    fcvt s6, h1
; NONEON-NOSVE-NEXT:    fcvt s7, h0
; NONEON-NOSVE-NEXT:    mov h1, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fmaxnm s2, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h4
; NONEON-NOSVE-NEXT:    fcvt s4, h5
; NONEON-NOSVE-NEXT:    fmaxnm s5, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v0.h[3]
; NONEON-NOSVE-NEXT:    fmaxnm s3, s4, s3
; NONEON-NOSVE-NEXT:    fcvt h2, s2
; NONEON-NOSVE-NEXT:    fcvt h0, s5
; NONEON-NOSVE-NEXT:    fcvt s4, h6
; NONEON-NOSVE-NEXT:    mov v0.h[1], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h2, s3
; NONEON-NOSVE-NEXT:    fmaxnm s1, s4, s1
; NONEON-NOSVE-NEXT:    mov v0.h[2], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.maxnum.v4f16(<4 x half> %op1, <4 x half> %op2)
  ret <4 x half> %res
}

define <8 x half> @fmaxnm_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fmaxnm_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmaxnm z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s5, h0
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h16, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fmaxnm s4, s5, s4
; NONEON-NOSVE-NEXT:    mov h5, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fmaxnm s3, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt h2, s4
; NONEON-NOSVE-NEXT:    fmaxnm s4, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v1.h[4]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[4]
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fmaxnm s5, s5, s16
; NONEON-NOSVE-NEXT:    mov h16, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    mov v2.h[1], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt s3, h6
; NONEON-NOSVE-NEXT:    fcvt s6, h7
; NONEON-NOSVE-NEXT:    mov h7, v1.h[5]
; NONEON-NOSVE-NEXT:    fcvt h5, s5
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    mov v2.h[2], v4.h[0]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[6]
; NONEON-NOSVE-NEXT:    fmaxnm s3, s6, s3
; NONEON-NOSVE-NEXT:    mov h6, v0.h[6]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[3], v5.h[0]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fcvt s5, h6
; NONEON-NOSVE-NEXT:    fmaxnm s6, s16, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    mov v2.h[4], v3.h[0]
; NONEON-NOSVE-NEXT:    fmaxnm s4, s5, s4
; NONEON-NOSVE-NEXT:    fcvt h3, s6
; NONEON-NOSVE-NEXT:    fmaxnm s0, s0, s1
; NONEON-NOSVE-NEXT:    mov v2.h[5], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h3, s4
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v2.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v2.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.maxnum.v8f16(<8 x half> %op1, <8 x half> %op2)
  ret <8 x half> %res
}

define void @fmaxnm_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fmaxnm_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmaxnm z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmaxnm z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h16, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h17, v3.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s19, h0
; NONEON-NOSVE-NEXT:    fcvt s20, h3
; NONEON-NOSVE-NEXT:    fcvt s21, h2
; NONEON-NOSVE-NEXT:    mov h22, v3.h[2]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[2]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fmaxnm s4, s19, s4
; NONEON-NOSVE-NEXT:    mov h19, v0.h[3]
; NONEON-NOSVE-NEXT:    mov h24, v3.h[3]
; NONEON-NOSVE-NEXT:    fmaxnm s20, s21, s20
; NONEON-NOSVE-NEXT:    fcvt s21, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov h23, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h25, v2.h[6]
; NONEON-NOSVE-NEXT:    fmaxnm s5, s7, s5
; NONEON-NOSVE-NEXT:    mov h7, v1.h[3]
; NONEON-NOSVE-NEXT:    fmaxnm s6, s16, s6
; NONEON-NOSVE-NEXT:    fmaxnm s16, s18, s17
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    fcvt s18, h19
; NONEON-NOSVE-NEXT:    fcvt s19, h24
; NONEON-NOSVE-NEXT:    mov h24, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h17, s5
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt h5, s20
; NONEON-NOSVE-NEXT:    fmaxnm s20, s22, s21
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt s21, h23
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    mov h22, v0.h[4]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[1], v17.h[0]
; NONEON-NOSVE-NEXT:    mov h17, v1.h[4]
; NONEON-NOSVE-NEXT:    fmaxnm s7, s18, s7
; NONEON-NOSVE-NEXT:    mov h18, v3.h[4]
; NONEON-NOSVE-NEXT:    mov v5.h[1], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s20
; NONEON-NOSVE-NEXT:    fmaxnm s19, s21, s19
; NONEON-NOSVE-NEXT:    fcvt s20, h23
; NONEON-NOSVE-NEXT:    mov h21, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[5]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[7]
; NONEON-NOSVE-NEXT:    mov v4.h[2], v6.h[0]
; NONEON-NOSVE-NEXT:    fcvt s6, h17
; NONEON-NOSVE-NEXT:    fcvt s17, h22
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    mov h22, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v5.h[2], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s19
; NONEON-NOSVE-NEXT:    mov h19, v0.h[6]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fmaxnm s6, s17, s6
; NONEON-NOSVE-NEXT:    mov h17, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    fmaxnm s18, s20, s18
; NONEON-NOSVE-NEXT:    mov h20, v3.h[6]
; NONEON-NOSVE-NEXT:    mov v4.h[3], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt s7, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov v5.h[3], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt s16, h21
; NONEON-NOSVE-NEXT:    fcvt s21, h24
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcvt s23, h25
; NONEON-NOSVE-NEXT:    fcvt h18, s18
; NONEON-NOSVE-NEXT:    fcvt s20, h20
; NONEON-NOSVE-NEXT:    mov h3, v3.h[7]
; NONEON-NOSVE-NEXT:    fmaxnm s7, s22, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fmaxnm s16, s21, s16
; NONEON-NOSVE-NEXT:    mov v4.h[4], v6.h[0]
; NONEON-NOSVE-NEXT:    fmaxnm s6, s19, s17
; NONEON-NOSVE-NEXT:    mov v5.h[4], v18.h[0]
; NONEON-NOSVE-NEXT:    fmaxnm s17, s23, s20
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fmaxnm s0, s0, s1
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fmaxnm s2, s2, s3
; NONEON-NOSVE-NEXT:    fcvt h3, s17
; NONEON-NOSVE-NEXT:    mov v5.h[5], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v4.h[5], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s2
; NONEON-NOSVE-NEXT:    mov v5.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[6], v6.h[0]
; NONEON-NOSVE-NEXT:    mov v5.h[7], v1.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    stp q5, q4, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = call <16 x half> @llvm.maxnum.v16f16(<16 x half> %op1, <16 x half> %op2)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fmaxnm_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fmaxnm_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmaxnm z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmaxnm v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.maxnum.v2f32(<2 x float> %op1, <2 x float> %op2)
  ret <2 x float> %res
}

define <4 x float> @fmaxnm_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fmaxnm_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmaxnm z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmaxnm v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.maxnum.v4f32(<4 x float> %op1, <4 x float> %op2)
  ret <4 x float> %res
}

define void @fmaxnm_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fmaxnm_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmaxnm z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmaxnm z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmaxnm v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fmaxnm v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = call <8 x float> @llvm.maxnum.v8f32(<8 x float> %op1, <8 x float> %op2)
  store <8 x float> %res, ptr %a
  ret void
}

define <1 x double> @fmaxnm_v1f64(<1 x double> %op1, <1 x double> %op2) {
; CHECK-LABEL: fmaxnm_v1f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fmaxnm d0, d0, d1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v1f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmaxnm d0, d0, d1
; NONEON-NOSVE-NEXT:    ret
  %res = call <1 x double> @llvm.maxnum.v1f64(<1 x double> %op1, <1 x double> %op2)
  ret <1 x double> %res
}

define <2 x double> @fmaxnm_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fmaxnm_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmaxnm z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmaxnm v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.maxnum.v2f64(<2 x double> %op1, <2 x double> %op2)
  ret <2 x double> %res
}

define void @fmaxnm_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fmaxnm_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmaxnm z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmaxnm z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmaxnm_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmaxnm v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fmaxnm v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = call <4 x double> @llvm.maxnum.v4f64(<4 x double> %op1, <4 x double> %op2)
  store <4 x double> %res, ptr %a
  ret void
}

;
; FMINNM
;

define <4 x half> @fminnm_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fminnm_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fminnm z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[2]
; NONEON-NOSVE-NEXT:    fcvt s6, h1
; NONEON-NOSVE-NEXT:    fcvt s7, h0
; NONEON-NOSVE-NEXT:    mov h1, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fminnm s2, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h4
; NONEON-NOSVE-NEXT:    fcvt s4, h5
; NONEON-NOSVE-NEXT:    fminnm s5, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v0.h[3]
; NONEON-NOSVE-NEXT:    fminnm s3, s4, s3
; NONEON-NOSVE-NEXT:    fcvt h2, s2
; NONEON-NOSVE-NEXT:    fcvt h0, s5
; NONEON-NOSVE-NEXT:    fcvt s4, h6
; NONEON-NOSVE-NEXT:    mov v0.h[1], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h2, s3
; NONEON-NOSVE-NEXT:    fminnm s1, s4, s1
; NONEON-NOSVE-NEXT:    mov v0.h[2], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.minnum.v4f16(<4 x half> %op1, <4 x half> %op2)
  ret <4 x half> %res
}

define <8 x half> @fminnm_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fminnm_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fminnm z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s5, h0
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h16, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fminnm s4, s5, s4
; NONEON-NOSVE-NEXT:    mov h5, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fminnm s3, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt h2, s4
; NONEON-NOSVE-NEXT:    fminnm s4, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v1.h[4]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[4]
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fminnm s5, s5, s16
; NONEON-NOSVE-NEXT:    mov h16, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    mov v2.h[1], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt s3, h6
; NONEON-NOSVE-NEXT:    fcvt s6, h7
; NONEON-NOSVE-NEXT:    mov h7, v1.h[5]
; NONEON-NOSVE-NEXT:    fcvt h5, s5
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    mov v2.h[2], v4.h[0]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[6]
; NONEON-NOSVE-NEXT:    fminnm s3, s6, s3
; NONEON-NOSVE-NEXT:    mov h6, v0.h[6]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[3], v5.h[0]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fcvt s5, h6
; NONEON-NOSVE-NEXT:    fminnm s6, s16, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    mov v2.h[4], v3.h[0]
; NONEON-NOSVE-NEXT:    fminnm s4, s5, s4
; NONEON-NOSVE-NEXT:    fcvt h3, s6
; NONEON-NOSVE-NEXT:    fminnm s0, s0, s1
; NONEON-NOSVE-NEXT:    mov v2.h[5], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h3, s4
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v2.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v2.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.minnum.v8f16(<8 x half> %op1, <8 x half> %op2)
  ret <8 x half> %res
}

define void @fminnm_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fminnm_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fminnm z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fminnm z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h16, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h17, v3.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s19, h0
; NONEON-NOSVE-NEXT:    fcvt s20, h3
; NONEON-NOSVE-NEXT:    fcvt s21, h2
; NONEON-NOSVE-NEXT:    mov h22, v3.h[2]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[2]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fminnm s4, s19, s4
; NONEON-NOSVE-NEXT:    mov h19, v0.h[3]
; NONEON-NOSVE-NEXT:    mov h24, v3.h[3]
; NONEON-NOSVE-NEXT:    fminnm s20, s21, s20
; NONEON-NOSVE-NEXT:    fcvt s21, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov h23, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h25, v2.h[6]
; NONEON-NOSVE-NEXT:    fminnm s5, s7, s5
; NONEON-NOSVE-NEXT:    mov h7, v1.h[3]
; NONEON-NOSVE-NEXT:    fminnm s6, s16, s6
; NONEON-NOSVE-NEXT:    fminnm s16, s18, s17
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    fcvt s18, h19
; NONEON-NOSVE-NEXT:    fcvt s19, h24
; NONEON-NOSVE-NEXT:    mov h24, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h17, s5
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt h5, s20
; NONEON-NOSVE-NEXT:    fminnm s20, s22, s21
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt s21, h23
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    mov h22, v0.h[4]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[1], v17.h[0]
; NONEON-NOSVE-NEXT:    mov h17, v1.h[4]
; NONEON-NOSVE-NEXT:    fminnm s7, s18, s7
; NONEON-NOSVE-NEXT:    mov h18, v3.h[4]
; NONEON-NOSVE-NEXT:    mov v5.h[1], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s20
; NONEON-NOSVE-NEXT:    fminnm s19, s21, s19
; NONEON-NOSVE-NEXT:    fcvt s20, h23
; NONEON-NOSVE-NEXT:    mov h21, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[5]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[7]
; NONEON-NOSVE-NEXT:    mov v4.h[2], v6.h[0]
; NONEON-NOSVE-NEXT:    fcvt s6, h17
; NONEON-NOSVE-NEXT:    fcvt s17, h22
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    mov h22, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v5.h[2], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s19
; NONEON-NOSVE-NEXT:    mov h19, v0.h[6]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fminnm s6, s17, s6
; NONEON-NOSVE-NEXT:    mov h17, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    fminnm s18, s20, s18
; NONEON-NOSVE-NEXT:    mov h20, v3.h[6]
; NONEON-NOSVE-NEXT:    mov v4.h[3], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt s7, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov v5.h[3], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt s16, h21
; NONEON-NOSVE-NEXT:    fcvt s21, h24
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcvt s23, h25
; NONEON-NOSVE-NEXT:    fcvt h18, s18
; NONEON-NOSVE-NEXT:    fcvt s20, h20
; NONEON-NOSVE-NEXT:    mov h3, v3.h[7]
; NONEON-NOSVE-NEXT:    fminnm s7, s22, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fminnm s16, s21, s16
; NONEON-NOSVE-NEXT:    mov v4.h[4], v6.h[0]
; NONEON-NOSVE-NEXT:    fminnm s6, s19, s17
; NONEON-NOSVE-NEXT:    mov v5.h[4], v18.h[0]
; NONEON-NOSVE-NEXT:    fminnm s17, s23, s20
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fminnm s0, s0, s1
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fminnm s2, s2, s3
; NONEON-NOSVE-NEXT:    fcvt h3, s17
; NONEON-NOSVE-NEXT:    mov v5.h[5], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v4.h[5], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s2
; NONEON-NOSVE-NEXT:    mov v5.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[6], v6.h[0]
; NONEON-NOSVE-NEXT:    mov v5.h[7], v1.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    stp q5, q4, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = call <16 x half> @llvm.minnum.v16f16(<16 x half> %op1, <16 x half> %op2)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fminnm_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fminnm_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fminnm z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fminnm v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.minnum.v2f32(<2 x float> %op1, <2 x float> %op2)
  ret <2 x float> %res
}

define <4 x float> @fminnm_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fminnm_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fminnm z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fminnm v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.minnum.v4f32(<4 x float> %op1, <4 x float> %op2)
  ret <4 x float> %res
}

define void @fminnm_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fminnm_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fminnm z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fminnm z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fminnm v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fminnm v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = call <8 x float> @llvm.minnum.v8f32(<8 x float> %op1, <8 x float> %op2)
  store <8 x float> %res, ptr %a
  ret void
}

define <1 x double> @fminnm_v1f64(<1 x double> %op1, <1 x double> %op2) {
; CHECK-LABEL: fminnm_v1f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fminnm d0, d0, d1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v1f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fminnm d0, d0, d1
; NONEON-NOSVE-NEXT:    ret
  %res = call <1 x double> @llvm.minnum.v1f64(<1 x double> %op1, <1 x double> %op2)
  ret <1 x double> %res
}

define <2 x double> @fminnm_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fminnm_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fminnm z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fminnm v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.minnum.v2f64(<2 x double> %op1, <2 x double> %op2)
  ret <2 x double> %res
}

define void @fminnm_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fminnm_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fminnm z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fminnm z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fminnm_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fminnm v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fminnm v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = call <4 x double> @llvm.minnum.v4f64(<4 x double> %op1, <4 x double> %op2)
  store <4 x double> %res, ptr %a
  ret void
}

;
; FMAX
;

define <4 x half> @fmax_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fmax_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmax z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[2]
; NONEON-NOSVE-NEXT:    fcvt s6, h1
; NONEON-NOSVE-NEXT:    fcvt s7, h0
; NONEON-NOSVE-NEXT:    mov h1, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fmax s2, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h4
; NONEON-NOSVE-NEXT:    fcvt s4, h5
; NONEON-NOSVE-NEXT:    fmax s5, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v0.h[3]
; NONEON-NOSVE-NEXT:    fmax s3, s4, s3
; NONEON-NOSVE-NEXT:    fcvt h2, s2
; NONEON-NOSVE-NEXT:    fcvt h0, s5
; NONEON-NOSVE-NEXT:    fcvt s4, h6
; NONEON-NOSVE-NEXT:    mov v0.h[1], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h2, s3
; NONEON-NOSVE-NEXT:    fmax s1, s4, s1
; NONEON-NOSVE-NEXT:    mov v0.h[2], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.maximum.v4f16(<4 x half> %op1, <4 x half> %op2)
  ret <4 x half> %res
}

define <8 x half> @fmax_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fmax_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmax z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s5, h0
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h16, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fmax s4, s5, s4
; NONEON-NOSVE-NEXT:    mov h5, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fmax s3, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt h2, s4
; NONEON-NOSVE-NEXT:    fmax s4, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v1.h[4]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[4]
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fmax s5, s5, s16
; NONEON-NOSVE-NEXT:    mov h16, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    mov v2.h[1], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt s3, h6
; NONEON-NOSVE-NEXT:    fcvt s6, h7
; NONEON-NOSVE-NEXT:    mov h7, v1.h[5]
; NONEON-NOSVE-NEXT:    fcvt h5, s5
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    mov v2.h[2], v4.h[0]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[6]
; NONEON-NOSVE-NEXT:    fmax s3, s6, s3
; NONEON-NOSVE-NEXT:    mov h6, v0.h[6]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[3], v5.h[0]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fcvt s5, h6
; NONEON-NOSVE-NEXT:    fmax s6, s16, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    mov v2.h[4], v3.h[0]
; NONEON-NOSVE-NEXT:    fmax s4, s5, s4
; NONEON-NOSVE-NEXT:    fcvt h3, s6
; NONEON-NOSVE-NEXT:    fmax s0, s0, s1
; NONEON-NOSVE-NEXT:    mov v2.h[5], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h3, s4
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v2.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v2.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.maximum.v8f16(<8 x half> %op1, <8 x half> %op2)
  ret <8 x half> %res
}

define void @fmax_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fmax_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmax z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmax z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h16, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h17, v3.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s19, h0
; NONEON-NOSVE-NEXT:    fcvt s20, h3
; NONEON-NOSVE-NEXT:    fcvt s21, h2
; NONEON-NOSVE-NEXT:    mov h22, v3.h[2]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[2]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fmax s4, s19, s4
; NONEON-NOSVE-NEXT:    mov h19, v0.h[3]
; NONEON-NOSVE-NEXT:    mov h24, v3.h[3]
; NONEON-NOSVE-NEXT:    fmax s20, s21, s20
; NONEON-NOSVE-NEXT:    fcvt s21, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov h23, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h25, v2.h[6]
; NONEON-NOSVE-NEXT:    fmax s5, s7, s5
; NONEON-NOSVE-NEXT:    mov h7, v1.h[3]
; NONEON-NOSVE-NEXT:    fmax s6, s16, s6
; NONEON-NOSVE-NEXT:    fmax s16, s18, s17
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    fcvt s18, h19
; NONEON-NOSVE-NEXT:    fcvt s19, h24
; NONEON-NOSVE-NEXT:    mov h24, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h17, s5
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt h5, s20
; NONEON-NOSVE-NEXT:    fmax s20, s22, s21
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt s21, h23
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    mov h22, v0.h[4]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[1], v17.h[0]
; NONEON-NOSVE-NEXT:    mov h17, v1.h[4]
; NONEON-NOSVE-NEXT:    fmax s7, s18, s7
; NONEON-NOSVE-NEXT:    mov h18, v3.h[4]
; NONEON-NOSVE-NEXT:    mov v5.h[1], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s20
; NONEON-NOSVE-NEXT:    fmax s19, s21, s19
; NONEON-NOSVE-NEXT:    fcvt s20, h23
; NONEON-NOSVE-NEXT:    mov h21, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[5]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[7]
; NONEON-NOSVE-NEXT:    mov v4.h[2], v6.h[0]
; NONEON-NOSVE-NEXT:    fcvt s6, h17
; NONEON-NOSVE-NEXT:    fcvt s17, h22
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    mov h22, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v5.h[2], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s19
; NONEON-NOSVE-NEXT:    mov h19, v0.h[6]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fmax s6, s17, s6
; NONEON-NOSVE-NEXT:    mov h17, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    fmax s18, s20, s18
; NONEON-NOSVE-NEXT:    mov h20, v3.h[6]
; NONEON-NOSVE-NEXT:    mov v4.h[3], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt s7, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov v5.h[3], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt s16, h21
; NONEON-NOSVE-NEXT:    fcvt s21, h24
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcvt s23, h25
; NONEON-NOSVE-NEXT:    fcvt h18, s18
; NONEON-NOSVE-NEXT:    fcvt s20, h20
; NONEON-NOSVE-NEXT:    mov h3, v3.h[7]
; NONEON-NOSVE-NEXT:    fmax s7, s22, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fmax s16, s21, s16
; NONEON-NOSVE-NEXT:    mov v4.h[4], v6.h[0]
; NONEON-NOSVE-NEXT:    fmax s6, s19, s17
; NONEON-NOSVE-NEXT:    mov v5.h[4], v18.h[0]
; NONEON-NOSVE-NEXT:    fmax s17, s23, s20
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fmax s0, s0, s1
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fmax s2, s2, s3
; NONEON-NOSVE-NEXT:    fcvt h3, s17
; NONEON-NOSVE-NEXT:    mov v5.h[5], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v4.h[5], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s2
; NONEON-NOSVE-NEXT:    mov v5.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[6], v6.h[0]
; NONEON-NOSVE-NEXT:    mov v5.h[7], v1.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    stp q5, q4, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = call <16 x half> @llvm.maximum.v16f16(<16 x half> %op1, <16 x half> %op2)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fmax_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fmax_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmax z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmax v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.maximum.v2f32(<2 x float> %op1, <2 x float> %op2)
  ret <2 x float> %res
}

define <4 x float> @fmax_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fmax_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmax z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmax v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.maximum.v4f32(<4 x float> %op1, <4 x float> %op2)
  ret <4 x float> %res
}

define void @fmax_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fmax_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmax z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmax z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmax v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fmax v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = call <8 x float> @llvm.maximum.v8f32(<8 x float> %op1, <8 x float> %op2)
  store <8 x float> %res, ptr %a
  ret void
}

define <1 x double> @fmax_v1f64(<1 x double> %op1, <1 x double> %op2) {
; CHECK-LABEL: fmax_v1f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fmax d0, d0, d1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v1f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmax d0, d0, d1
; NONEON-NOSVE-NEXT:    ret
  %res = call <1 x double> @llvm.maximum.v1f64(<1 x double> %op1, <1 x double> %op2)
  ret <1 x double> %res
}

define <2 x double> @fmax_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fmax_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmax z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmax v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.maximum.v2f64(<2 x double> %op1, <2 x double> %op2)
  ret <2 x double> %res
}

define void @fmax_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fmax_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmax z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmax z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmax_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmax v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fmax v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = call <4 x double> @llvm.maximum.v4f64(<4 x double> %op1, <4 x double> %op2)
  store <4 x double> %res, ptr %a
  ret void
}

;
; FMIN
;

define <4 x half> @fmin_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fmin_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmin z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[2]
; NONEON-NOSVE-NEXT:    fcvt s6, h1
; NONEON-NOSVE-NEXT:    fcvt s7, h0
; NONEON-NOSVE-NEXT:    mov h1, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fmin s2, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h4
; NONEON-NOSVE-NEXT:    fcvt s4, h5
; NONEON-NOSVE-NEXT:    fmin s5, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v0.h[3]
; NONEON-NOSVE-NEXT:    fmin s3, s4, s3
; NONEON-NOSVE-NEXT:    fcvt h2, s2
; NONEON-NOSVE-NEXT:    fcvt h0, s5
; NONEON-NOSVE-NEXT:    fcvt s4, h6
; NONEON-NOSVE-NEXT:    mov v0.h[1], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h2, s3
; NONEON-NOSVE-NEXT:    fmin s1, s4, s1
; NONEON-NOSVE-NEXT:    mov v0.h[2], v2.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.minimum.v4f16(<4 x half> %op1, <4 x half> %op2)
  ret <4 x half> %res
}

define <8 x half> @fmin_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fmin_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmin z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s5, h0
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h16, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fmin s4, s5, s4
; NONEON-NOSVE-NEXT:    mov h5, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fmin s3, s3, s2
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt h2, s4
; NONEON-NOSVE-NEXT:    fmin s4, s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v1.h[4]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[4]
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fmin s5, s5, s16
; NONEON-NOSVE-NEXT:    mov h16, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    mov v2.h[1], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt s3, h6
; NONEON-NOSVE-NEXT:    fcvt s6, h7
; NONEON-NOSVE-NEXT:    mov h7, v1.h[5]
; NONEON-NOSVE-NEXT:    fcvt h5, s5
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    mov v2.h[2], v4.h[0]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[6]
; NONEON-NOSVE-NEXT:    fmin s3, s6, s3
; NONEON-NOSVE-NEXT:    mov h6, v0.h[6]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[3], v5.h[0]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fcvt s5, h6
; NONEON-NOSVE-NEXT:    fmin s6, s16, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    mov v2.h[4], v3.h[0]
; NONEON-NOSVE-NEXT:    fmin s4, s5, s4
; NONEON-NOSVE-NEXT:    fcvt h3, s6
; NONEON-NOSVE-NEXT:    fmin s0, s0, s1
; NONEON-NOSVE-NEXT:    mov v2.h[5], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h3, s4
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v2.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v2.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.minimum.v8f16(<8 x half> %op1, <8 x half> %op2)
  ret <8 x half> %res
}

define void @fmin_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fmin_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmin z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmin z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h16, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h6, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h17, v3.h[1]
; NONEON-NOSVE-NEXT:    fcvt s4, h1
; NONEON-NOSVE-NEXT:    fcvt s19, h0
; NONEON-NOSVE-NEXT:    fcvt s20, h3
; NONEON-NOSVE-NEXT:    fcvt s21, h2
; NONEON-NOSVE-NEXT:    mov h22, v3.h[2]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[2]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fmin s4, s19, s4
; NONEON-NOSVE-NEXT:    mov h19, v0.h[3]
; NONEON-NOSVE-NEXT:    mov h24, v3.h[3]
; NONEON-NOSVE-NEXT:    fmin s20, s21, s20
; NONEON-NOSVE-NEXT:    fcvt s21, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov h23, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h25, v2.h[6]
; NONEON-NOSVE-NEXT:    fmin s5, s7, s5
; NONEON-NOSVE-NEXT:    mov h7, v1.h[3]
; NONEON-NOSVE-NEXT:    fmin s6, s16, s6
; NONEON-NOSVE-NEXT:    fmin s16, s18, s17
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    fcvt s18, h19
; NONEON-NOSVE-NEXT:    fcvt s19, h24
; NONEON-NOSVE-NEXT:    mov h24, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt h17, s5
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt h5, s20
; NONEON-NOSVE-NEXT:    fmin s20, s22, s21
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt s21, h23
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    mov h22, v0.h[4]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[1], v17.h[0]
; NONEON-NOSVE-NEXT:    mov h17, v1.h[4]
; NONEON-NOSVE-NEXT:    fmin s7, s18, s7
; NONEON-NOSVE-NEXT:    mov h18, v3.h[4]
; NONEON-NOSVE-NEXT:    mov v5.h[1], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s20
; NONEON-NOSVE-NEXT:    fmin s19, s21, s19
; NONEON-NOSVE-NEXT:    fcvt s20, h23
; NONEON-NOSVE-NEXT:    mov h21, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h23, v2.h[5]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[7]
; NONEON-NOSVE-NEXT:    mov v4.h[2], v6.h[0]
; NONEON-NOSVE-NEXT:    fcvt s6, h17
; NONEON-NOSVE-NEXT:    fcvt s17, h22
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    mov h22, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v5.h[2], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s19
; NONEON-NOSVE-NEXT:    mov h19, v0.h[6]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fmin s6, s17, s6
; NONEON-NOSVE-NEXT:    mov h17, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    fmin s18, s20, s18
; NONEON-NOSVE-NEXT:    mov h20, v3.h[6]
; NONEON-NOSVE-NEXT:    mov v4.h[3], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt s7, h22
; NONEON-NOSVE-NEXT:    fcvt s22, h23
; NONEON-NOSVE-NEXT:    mov v5.h[3], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt s16, h21
; NONEON-NOSVE-NEXT:    fcvt s21, h24
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcvt s23, h25
; NONEON-NOSVE-NEXT:    fcvt h18, s18
; NONEON-NOSVE-NEXT:    fcvt s20, h20
; NONEON-NOSVE-NEXT:    mov h3, v3.h[7]
; NONEON-NOSVE-NEXT:    fmin s7, s22, s7
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fmin s16, s21, s16
; NONEON-NOSVE-NEXT:    mov v4.h[4], v6.h[0]
; NONEON-NOSVE-NEXT:    fmin s6, s19, s17
; NONEON-NOSVE-NEXT:    mov v5.h[4], v18.h[0]
; NONEON-NOSVE-NEXT:    fmin s17, s23, s20
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt h7, s7
; NONEON-NOSVE-NEXT:    fmin s0, s0, s1
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fmin s2, s2, s3
; NONEON-NOSVE-NEXT:    fcvt h3, s17
; NONEON-NOSVE-NEXT:    mov v5.h[5], v7.h[0]
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v4.h[5], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s2
; NONEON-NOSVE-NEXT:    mov v5.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[6], v6.h[0]
; NONEON-NOSVE-NEXT:    mov v5.h[7], v1.h[0]
; NONEON-NOSVE-NEXT:    mov v4.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    stp q5, q4, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = call <16 x half> @llvm.minimum.v16f16(<16 x half> %op1, <16 x half> %op2)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fmin_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fmin_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmin z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmin v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.minimum.v2f32(<2 x float> %op1, <2 x float> %op2)
  ret <2 x float> %res
}

define <4 x float> @fmin_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fmin_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmin z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmin v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.minimum.v4f32(<4 x float> %op1, <4 x float> %op2)
  ret <4 x float> %res
}

define void @fmin_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fmin_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmin z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmin z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmin v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fmin v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = call <8 x float> @llvm.minimum.v8f32(<8 x float> %op1, <8 x float> %op2)
  store <8 x float> %res, ptr %a
  ret void
}

define <1 x double> @fmin_v1f64(<1 x double> %op1, <1 x double> %op2) {
; CHECK-LABEL: fmin_v1f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fmin d0, d0, d1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v1f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmin d0, d0, d1
; NONEON-NOSVE-NEXT:    ret
  %res = call <1 x double> @llvm.minimum.v1f64(<1 x double> %op1, <1 x double> %op2)
  ret <1 x double> %res
}

define <2 x double> @fmin_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fmin_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmin z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmin v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.minimum.v2f64(<2 x double> %op1, <2 x double> %op2)
  ret <2 x double> %res
}

define void @fmin_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fmin_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmin z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmin z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmin_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmin v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fmin v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = call <4 x double> @llvm.minimum.v4f64(<4 x double> %op1, <4 x double> %op2)
  store <4 x double> %res, ptr %a
  ret void
}

declare <4 x half> @llvm.minnum.v4f16(<4 x half>, <4 x half>)
declare <8 x half> @llvm.minnum.v8f16(<8 x half>, <8 x half>)
declare <16 x half> @llvm.minnum.v16f16(<16 x half>, <16 x half>)
declare <2 x float> @llvm.minnum.v2f32(<2 x float>, <2 x float>)
declare <4 x float> @llvm.minnum.v4f32(<4 x float>, <4 x float>)
declare <8 x float> @llvm.minnum.v8f32(<8 x float>, <8 x float>)
declare <1 x double> @llvm.minnum.v1f64(<1 x double>, <1 x double>)
declare <2 x double> @llvm.minnum.v2f64(<2 x double>, <2 x double>)
declare <4 x double> @llvm.minnum.v4f64(<4 x double>, <4 x double>)

declare <4 x half> @llvm.maxnum.v4f16(<4 x half>, <4 x half>)
declare <8 x half> @llvm.maxnum.v8f16(<8 x half>, <8 x half>)
declare <16 x half> @llvm.maxnum.v16f16(<16 x half>, <16 x half>)
declare <2 x float> @llvm.maxnum.v2f32(<2 x float>, <2 x float>)
declare <4 x float> @llvm.maxnum.v4f32(<4 x float>, <4 x float>)
declare <8 x float> @llvm.maxnum.v8f32(<8 x float>, <8 x float>)
declare <1 x double> @llvm.maxnum.v1f64(<1 x double>, <1 x double>)
declare <2 x double> @llvm.maxnum.v2f64(<2 x double>, <2 x double>)
declare <4 x double> @llvm.maxnum.v4f64(<4 x double>, <4 x double>)

declare <4 x half> @llvm.minimum.v4f16(<4 x half>, <4 x half>)
declare <8 x half> @llvm.minimum.v8f16(<8 x half>, <8 x half>)
declare <16 x half> @llvm.minimum.v16f16(<16 x half>, <16 x half>)
declare <2 x float> @llvm.minimum.v2f32(<2 x float>, <2 x float>)
declare <4 x float> @llvm.minimum.v4f32(<4 x float>, <4 x float>)
declare <8 x float> @llvm.minimum.v8f32(<8 x float>, <8 x float>)
declare <1 x double> @llvm.minimum.v1f64(<1 x double>, <1 x double>)
declare <2 x double> @llvm.minimum.v2f64(<2 x double>, <2 x double>)
declare <4 x double> @llvm.minimum.v4f64(<4 x double>, <4 x double>)

declare <4 x half> @llvm.maximum.v4f16(<4 x half>, <4 x half>)
declare <8 x half> @llvm.maximum.v8f16(<8 x half>, <8 x half>)
declare <16 x half> @llvm.maximum.v16f16(<16 x half>, <16 x half>)
declare <2 x float> @llvm.maximum.v2f32(<2 x float>, <2 x float>)
declare <4 x float> @llvm.maximum.v4f32(<4 x float>, <4 x float>)
declare <8 x float> @llvm.maximum.v8f32(<8 x float>, <8 x float>)
declare <1 x double> @llvm.maximum.v1f64(<1 x double>, <1 x double>)
declare <2 x double> @llvm.maximum.v2f64(<2 x double>, <2 x double>)
declare <4 x double> @llvm.maximum.v4f64(<4 x double>, <4 x double>)
