; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc -O3 -mtriple=aarch64 %s -o - | FileCheck %s

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64-unknown-linux-gnu"

define i32 @sub_icmp_i32(i32 %0, i32 %1) {
; CHECK-LABEL: sub_icmp_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    subs w0, w0, w1
; CHECK-NEXT:    b.le .LBB0_2
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    b _Z2f2i
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    b _Z2f1i
  %3 = sub nsw i32 %0, %1
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %5, label %7

5:
  %6 = tail call i32 @_Z2f1i(i32 %3)
  br label %9

7:
  %8 = tail call i32 @_Z2f2i(i32 %3)
  br label %9

9:
  %10 = phi i32 [ %6, %5 ], [ %8, %7 ]
  ret i32 %10
}



define i64 @sub_icmp_i64(i64 %0, i64 %1) {
; CHECK-LABEL: sub_icmp_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    subs x0, x0, x1
; CHECK-NEXT:    b.le .LBB1_2
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    b _Z2f4l
; CHECK-NEXT:  .LBB1_2:
; CHECK-NEXT:    b _Z2f3l
  %3 = sub nsw i64 %0, %1
  %4 = icmp slt i64 %3, 1
  br i1 %4, label %5, label %7

5:
  %6 = tail call i64 @_Z2f3l(i64 %3)
  br label %9

7:
  %8 = tail call i64 @_Z2f4l(i64 %3)
  br label %9

9:
  %10 = phi i64 [ %6, %5 ], [ %8, %7 ]
  ret i64 %10
}

define i64 @add_i64(i64 %0, i64 %1) {
; CHECK-LABEL: add_i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adds x0, x1, x0
; CHECK-NEXT:    b.le .LBB2_2
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    b _Z2f4l
; CHECK-NEXT:  .LBB2_2:
; CHECK-NEXT:    b _Z2f3l
  %3 = add nsw i64 %1, %0
  %4 = icmp slt i64 %3, 1
  br i1 %4, label %5, label %7

5:
  %6 = tail call i64 @_Z2f3l(i64 %3)
  br label %9

7:
  %8 = tail call i64 @_Z2f4l(i64 %3)
  br label %9

9:
  %10 = phi i64 [ %6, %5 ], [ %8, %7 ]
  ret i64 %10
}

define i32 @add_i32(i32 %0, i32 %1) {
; CHECK-LABEL: add_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adds w0, w1, w0
; CHECK-NEXT:    b.le .LBB3_2
; CHECK-NEXT:  // %bb.1:
; CHECK-NEXT:    b _Z2f4l
; CHECK-NEXT:  .LBB3_2:
; CHECK-NEXT:    b _Z2f3l
  %3 = add nsw i32 %1, %0
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %5, label %7

5:
  %6 = tail call i32 @_Z2f3l(i32 %3)
  br label %9

7:
  %8 = tail call i32 @_Z2f4l(i32 %3)
  br label %9

9:
  %10 = phi i32 [ %6, %5 ], [ %8, %7 ]
  ret i32 %10
}



declare i32 @_Z2f1i(i32)
declare i32 @_Z2f2i(i32)
declare i64 @_Z2f3l(i64)
declare i64 @_Z2f4l(i64)
