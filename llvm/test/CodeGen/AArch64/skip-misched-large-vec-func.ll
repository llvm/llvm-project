; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=neoverse-v1 | FileCheck %s --check-prefix=SCHED
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=neoverse-v2 | FileCheck %s --check-prefix=SCHED
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=neoverse-v2 -misched-large-func-threshold=30 -misched-intrinsics-threshold=2 -misched-vector-density-threshold=31 | FileCheck %s --check-prefix=NOSCHED
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=neoverse-v2 -misched-large-func-threshold=31 -misched-intrinsics-threshold=2 -misched-vector-density-threshold=31 | FileCheck %s --check-prefix=SCHED
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=neoverse-v2 -misched-large-func-threshold=30 -misched-intrinsics-threshold=3 -misched-vector-density-threshold=31 | FileCheck %s --check-prefix=SCHED
; RUN: llc < %s -mtriple=aarch64-linux-gnu -mcpu=neoverse-v2 -misched-large-func-threshold=30 -misched-intrinsics-threshold=2 -misched-vector-density-threshold=32 | FileCheck %s --check-prefix=SCHED

define void @test_fma_loop(ptr %ptr_a, ptr %ptr_b, ptr %ptr_c, ptr %ptr_out, i32 %n) {
; SCHED-LABEL: test_fma_loop:
; SCHED:       // %bb.0: // %entry
; SCHED-NEXT:    cbz w4, .LBB0_2
; SCHED-NEXT:    .p2align 5, , 16
; SCHED-NEXT:  .LBB0_1: // %loop
; SCHED-NEXT:    // =>This Inner Loop Header: Depth=1
; SCHED-NEXT:    ldr q0, [x0], #16
; SCHED-NEXT:    ldp q1, q2, [x1]
; SCHED-NEXT:    subs w4, w4, #1
; SCHED-NEXT:    ldp q3, q4, [x2]
; SCHED-NEXT:    fmla v3.4s, v1.4s, v0.4s
; SCHED-NEXT:    ldr q0, [x1, #32]
; SCHED-NEXT:    ldr q1, [x2, #32]
; SCHED-NEXT:    add x1, x1, #48
; SCHED-NEXT:    add x2, x2, #48
; SCHED-NEXT:    fmla v4.4s, v2.4s, v3.4s
; SCHED-NEXT:    fmla v1.4s, v0.4s, v4.4s
; SCHED-NEXT:    str q1, [x3], #16
; SCHED-NEXT:    b.ne .LBB0_1
; SCHED-NEXT:  .LBB0_2: // %exit
; SCHED-NEXT:    ret
;
; NOSCHED-LABEL: test_fma_loop:
; NOSCHED:       // %bb.0: // %entry
; NOSCHED-NEXT:    cbz w4, .LBB0_2
; NOSCHED-NEXT:    .p2align 5, , 16
; NOSCHED-NEXT:  .LBB0_1: // %loop
; NOSCHED-NEXT:    // =>This Inner Loop Header: Depth=1
; NOSCHED-NEXT:    ldr q0, [x0], #16
; NOSCHED-NEXT:    ldr q1, [x1]
; NOSCHED-NEXT:    ldr q2, [x2]
; NOSCHED-NEXT:    subs w4, w4, #1
; NOSCHED-NEXT:    fmla v2.4s, v1.4s, v0.4s
; NOSCHED-NEXT:    ldp q0, q3, [x1, #16]
; NOSCHED-NEXT:    ldp q1, q4, [x2, #16]
; NOSCHED-NEXT:    add x1, x1, #48
; NOSCHED-NEXT:    add x2, x2, #48
; NOSCHED-NEXT:    fmla v1.4s, v0.4s, v2.4s
; NOSCHED-NEXT:    fmla v4.4s, v3.4s, v1.4s
; NOSCHED-NEXT:    str q4, [x3], #16
; NOSCHED-NEXT:    b.ne .LBB0_1
; NOSCHED-NEXT:  .LBB0_2: // %exit
; NOSCHED-NEXT:    ret
entry:
  %cmp = icmp eq i32 %n, 0
  br i1 %cmp, label %exit, label %loop

loop:
  %iv = phi i32 [ %n, %entry ], [ %iv.next, %loop ]
  %ptr_a.addr = phi ptr [ %ptr_a, %entry ], [ %ptr_a.next, %loop ]
  %ptr_b.addr = phi ptr [ %ptr_b, %entry ], [ %ptr_b.next, %loop ]
  %ptr_c.addr = phi ptr [ %ptr_c, %entry ], [ %ptr_c.next, %loop ]
  %ptr_out.addr = phi ptr [ %ptr_out, %entry ], [ %ptr_out.next, %loop ]

  %a = load <4 x float>, ptr %ptr_a.addr
  %b1 = load <4 x float>, ptr %ptr_b.addr
  %c1 = load <4 x float>, ptr %ptr_c.addr
  %res1 = call <4 x float> @llvm.fma.v4f32(<4 x float> %a, <4 x float> %b1, <4 x float> %c1)

  %ptr_b2 = getelementptr <4 x float>, ptr %ptr_b.addr, i64 1
  %ptr_c2 = getelementptr <4 x float>, ptr %ptr_c.addr, i64 1
  %b2 = load <4 x float>, ptr %ptr_b2
  %c2 = load <4 x float>, ptr %ptr_c2
  %ptr_b3 = getelementptr <4 x float>, ptr %ptr_b.addr, i64 2
  %ptr_c3 = getelementptr <4 x float>, ptr %ptr_c.addr, i64 2
  %b3 = load <4 x float>, ptr %ptr_b3
  %c3 = load <4 x float>, ptr %ptr_c3

  %res2 = call <4 x float> @llvm.fma.v4f32(<4 x float> %res1, <4 x float> %b2, <4 x float> %c2)
  %res3 = call <4 x float> @llvm.fma.v4f32(<4 x float> %res2, <4 x float> %b3, <4 x float> %c3)

  store <4 x float> %res3, ptr %ptr_out.addr

  %ptr_a.next = getelementptr <4 x float>, ptr %ptr_a.addr, i64 1
  %ptr_b.next = getelementptr <4 x float>, ptr %ptr_b.addr, i64 3
  %ptr_c.next = getelementptr <4 x float>, ptr %ptr_c.addr, i64 3
  %ptr_out.next = getelementptr <4 x float>, ptr %ptr_out.addr, i64 1

  %iv.next = sub i32 %iv, 1
  %cmp.next = icmp ne i32 %iv.next, 0
  br i1 %cmp.next, label %loop, label %exit

exit:
  ret void
}
