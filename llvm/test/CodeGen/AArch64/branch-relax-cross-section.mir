# RUN: llc -mtriple=aarch64-none-linux-gnu -run-pass branch-relaxation -aarch64-b-offset-bits=64 %s -o - | FileCheck %s

--- |
  declare i32 @bar()
  declare i32 @baz()
  declare i32 @qux()
  
  define void @relax_tbz(i1 zeroext %0) {
    br i1 %0, label %false_block, label %true_block
  
  false_block:                                      ; preds = %1
    %2 = call i32 @baz()
    br label %end
  
  end:                                              ; preds = %true_block, %false_block
    %3 = tail call i32 @qux()
    ret void
  
  true_block:                                       ; preds = %1
    %4 = call i32 @bar()
    br label %end
  }

...
---
name:            relax_tbz
tracksRegLiveness: true
liveins:
  - { reg: '$w0', virtual-reg: '' }
stack:
  - { id: 0, name: '', type: spill-slot, offset: -16, size: 8, alignment: 16,
      stack-id: default, callee-saved-register: '$lr', callee-saved-restored: true,
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  ; CHECK-LABEL: name: relax_tbz
  ; COM: Check that cross-section conditional branches are
  ; COM:   relaxed.
  ; CHECK: bb.0 (%ir-block.1, bbsections 1):
  ; CHECK-NEXT: successors: %bb.3(0x40000000)
  ; CHECK:  TBNZW
  ; CHECK-SAME:   %bb.3
  ; CHECK:      B %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.3 (%ir-block.1, bbsections 1):
  ; CHECK-NEXT: successors: %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:    B %bb.1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:  bb.1.false_block (bbsections 2):
  ; CHECK:    TCRETURNdi @qux, 0, csr_aarch64_aapcs, implicit $sp
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:  bb.2.true_block (bbsections 3):
  ; CHECK:    TCRETURNdi @qux, 0, csr_aarch64_aapcs, implicit $sp
  bb.0 (%ir-block.1, bbsections 1):
    successors: %bb.1(0x40000000), %bb.2(0x40000000)
    liveins: $w0, $lr

    early-clobber $sp = frame-setup STRXpre killed $lr, $sp, -16 :: (store (s64) into %stack.0)
    TBZW killed renamable $w0, 0, %bb.2
    B %bb.1

  bb.1.false_block (bbsections 2):
    BL @baz, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def dead $w0
    early-clobber $sp, $lr = frame-destroy LDRXpost $sp, 16 :: (load (s64) from %stack.0)
    TCRETURNdi @qux, 0, csr_aarch64_aapcs, implicit $sp

  bb.2.true_block (bbsections 3):
    BL @bar, csr_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit-def $sp, implicit-def dead $w0
    early-clobber $sp, $lr = frame-destroy LDRXpost $sp, 16 :: (load (s64) from %stack.0)
    TCRETURNdi @qux, 0, csr_aarch64_aapcs, implicit $sp
...
