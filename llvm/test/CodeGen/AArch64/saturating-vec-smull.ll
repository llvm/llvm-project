; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64-none-elf < %s | FileCheck %s

define <4 x i16> @saturating_4xi16(<4 x i16> %a, <4 x i16> %b) {
; CHECK-LABEL: saturating_4xi16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sqdmulh v0.4h, v1.4h, v0.4h
; CHECK-NEXT:    ret
  %as = sext <4 x i16> %a to <4 x i32>
  %bs = sext <4 x i16> %b to <4 x i32>
  %m = mul <4 x i32> %bs, %as
  %sh = ashr <4 x i32> %m, splat (i32 15)
  %ma = tail call <4 x i32> @llvm.smin.v4i32(<4 x i32> %sh, <4 x i32> splat (i32 32767))
  %t = trunc <4 x i32> %ma to <4 x i16>
  ret <4 x i16> %t
}

define <8 x i16> @saturating_8xi16(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: saturating_8xi16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sqdmulh v0.8h, v1.8h, v0.8h
; CHECK-NEXT:    ret
  %as = sext <8 x i16> %a to <8 x i32>
  %bs = sext <8 x i16> %b to <8 x i32>
  %m = mul <8 x i32> %bs, %as
  %sh = ashr <8 x i32> %m, splat (i32 15)
  %ma = tail call <8 x i32> @llvm.smin.v8i32(<8 x i32> %sh, <8 x i32> splat (i32 32767))
  %t = trunc <8 x i32> %ma to <8 x i16>
  ret <8 x i16> %t
}

define <2 x i32> @saturating_2xi32(<2 x i32> %a, <2 x i32> %b) {
; CHECK-LABEL: saturating_2xi32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sqdmulh v0.2s, v1.2s, v0.2s
; CHECK-NEXT:    ret
  %as = sext <2 x i32> %a to <2 x i64>
  %bs = sext <2 x i32> %b to <2 x i64>
  %m = mul <2 x i64> %bs, %as
  %sh = ashr <2 x i64> %m, splat (i64 31)
  %ma = tail call <2 x i64> @llvm.smin.v8i64(<2 x i64> %sh, <2 x i64> splat (i64 2147483647))
  %t = trunc <2 x i64> %ma to <2 x i32>
  ret <2 x i32> %t
}

define <4 x i32> @saturating_4xi32(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: saturating_4xi32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sqdmulh v0.4s, v1.4s, v0.4s
; CHECK-NEXT:    ret
  %as = sext <4 x i32> %a to <4 x i64>
  %bs = sext <4 x i32> %b to <4 x i64>
  %m = mul <4 x i64> %bs, %as
  %sh = ashr <4 x i64> %m, splat (i64 31)
  %ma = tail call <4 x i64> @llvm.smin.v4i64(<4 x i64> %sh, <4 x i64> splat (i64 2147483647))
  %t = trunc <4 x i64> %ma to <4 x i32>
  ret <4 x i32> %t
}

define <8 x i32> @saturating_8xi32(<8 x i32> %a, <8 x i32> %b) {
; CHECK-LABEL: saturating_8xi32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ext v4.16b, v1.16b, v1.16b, #8
; CHECK-NEXT:    ext v5.16b, v3.16b, v3.16b, #8
; CHECK-NEXT:    ext v6.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    ext v7.16b, v2.16b, v2.16b, #8
; CHECK-NEXT:    sqdmulh v1.2s, v3.2s, v1.2s
; CHECK-NEXT:    sqdmulh v0.2s, v2.2s, v0.2s
; CHECK-NEXT:    sqdmulh v4.2s, v5.2s, v4.2s
; CHECK-NEXT:    sqdmulh v3.2s, v7.2s, v6.2s
; CHECK-NEXT:    mov v1.d[1], v4.d[0]
; CHECK-NEXT:    mov v0.d[1], v3.d[0]
; CHECK-NEXT:    ret
  %as = sext <8 x i32> %a to <8 x i64>
  %bs = sext <8 x i32> %b to <8 x i64>
  %m = mul <8 x i64> %bs, %as
  %sh = ashr <8 x i64> %m, splat (i64 31)
  %ma = tail call <8 x i64> @llvm.smin.v8i64(<8 x i64> %sh, <8 x i64> splat (i64 2147483647))
  %t = trunc <8 x i64> %ma to <8 x i32>
  ret <8 x i32> %t
}
