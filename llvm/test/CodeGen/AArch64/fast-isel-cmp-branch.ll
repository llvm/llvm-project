; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc                               -aarch64-enable-atomic-cfg-tidy=0 -mtriple=aarch64-apple-darwin < %s | FileCheck %s --check-prefixes=CHECK,NOFASTISEL
; RUN: llc -fast-isel -fast-isel-abort=1 -aarch64-enable-atomic-cfg-tidy=0 -mtriple=aarch64-apple-darwin < %s | FileCheck %s --check-prefixes=CHECK,FASTISEL

define i32 @fcmp_oeq(float %x, float %y) {
; CHECK-LABEL: fcmp_oeq:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.ne LBB0_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB0_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp oeq float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ogt(float %x, float %y) {
; CHECK-LABEL: fcmp_ogt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.le LBB1_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB1_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp ogt float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_oge(float %x, float %y) {
; CHECK-LABEL: fcmp_oge:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.lt LBB2_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB2_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp oge float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_olt(float %x, float %y) {
; CHECK-LABEL: fcmp_olt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.pl LBB3_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB3_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp olt float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ole(float %x, float %y) {
; CHECK-LABEL: fcmp_ole:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.hi LBB4_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB4_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp ole float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_one(float %x, float %y) {
; NOFASTISEL-LABEL: fcmp_one:
; NOFASTISEL:       ; %bb.0:
; NOFASTISEL-NEXT:    fcmp s0, s1
; NOFASTISEL-NEXT:    b.mi LBB5_1
; NOFASTISEL-NEXT:    b.gt LBB5_1
; NOFASTISEL-NEXT:    b LBB5_2
; NOFASTISEL-NEXT:  LBB5_1: ; %bb1
; NOFASTISEL-NEXT:    mov w0, wzr
; NOFASTISEL-NEXT:    ret
; NOFASTISEL-NEXT:  LBB5_2: ; %bb2
; NOFASTISEL-NEXT:    mov w0, #1
; NOFASTISEL-NEXT:    ret
;
; FASTISEL-LABEL: fcmp_one:
; FASTISEL:       ; %bb.0:
; FASTISEL-NEXT:    fcmp s0, s1
; FASTISEL-NEXT:    b.mi LBB5_2
; FASTISEL-NEXT:    b.gt LBB5_2
; FASTISEL-NEXT:  ; %bb.1: ; %bb2
; FASTISEL-NEXT:    mov w0, #1
; FASTISEL-NEXT:    ret
; FASTISEL-NEXT:  LBB5_2: ; %bb1
; FASTISEL-NEXT:    mov w0, wzr
; FASTISEL-NEXT:    ret
  %1 = fcmp one float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ord(float %x, float %y) {
; CHECK-LABEL: fcmp_ord:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.vs LBB6_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB6_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp ord float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_uno(float %x, float %y) {
; CHECK-LABEL: fcmp_uno:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.vs LBB7_2
; CHECK-NEXT:  ; %bb.1: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB7_2: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
  %1 = fcmp uno float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ueq(float %x, float %y) {
; NOFASTISEL-LABEL: fcmp_ueq:
; NOFASTISEL:       ; %bb.0:
; NOFASTISEL-NEXT:    fcmp s0, s1
; NOFASTISEL-NEXT:    b.eq LBB8_2
; NOFASTISEL-NEXT:    b.vs LBB8_2
; NOFASTISEL-NEXT:    b LBB8_1
; NOFASTISEL-NEXT:  LBB8_1: ; %bb2
; NOFASTISEL-NEXT:    mov w0, #1
; NOFASTISEL-NEXT:    ret
; NOFASTISEL-NEXT:  LBB8_2: ; %bb1
; NOFASTISEL-NEXT:    mov w0, wzr
; NOFASTISEL-NEXT:    ret
;
; FASTISEL-LABEL: fcmp_ueq:
; FASTISEL:       ; %bb.0:
; FASTISEL-NEXT:    fcmp s0, s1
; FASTISEL-NEXT:    b.eq LBB8_2
; FASTISEL-NEXT:    b.vs LBB8_2
; FASTISEL-NEXT:  ; %bb.1: ; %bb2
; FASTISEL-NEXT:    mov w0, #1
; FASTISEL-NEXT:    ret
; FASTISEL-NEXT:  LBB8_2: ; %bb1
; FASTISEL-NEXT:    mov w0, wzr
; FASTISEL-NEXT:    ret
  %1 = fcmp ueq float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ugt(float %x, float %y) {
; CHECK-LABEL: fcmp_ugt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.ls LBB9_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB9_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp ugt float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_uge(float %x, float %y) {
; CHECK-LABEL: fcmp_uge:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.mi LBB10_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB10_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp uge float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ult(float %x, float %y) {
; CHECK-LABEL: fcmp_ult:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.ge LBB11_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB11_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp ult float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_ule(float %x, float %y) {
; CHECK-LABEL: fcmp_ule:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.gt LBB12_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB12_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp ule float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @fcmp_une(float %x, float %y) {
; CHECK-LABEL: fcmp_une:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    fcmp s0, s1
; CHECK-NEXT:    b.eq LBB13_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB13_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = fcmp une float %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_eq(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_eq:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.eq LBB14_2
; CHECK-NEXT:  ; %bb.1: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB14_2: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
  %1 = icmp eq i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_ne(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_ne:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.eq LBB15_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB15_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = icmp ne i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_ugt(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_ugt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ls LBB16_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB16_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = icmp ugt i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_uge(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_uge:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.hs LBB17_2
; CHECK-NEXT:  ; %bb.1: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB17_2: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
  %1 = icmp uge i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_ult(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_ult:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.hs LBB18_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB18_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = icmp ult i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_ule(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_ule:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ls LBB19_2
; CHECK-NEXT:  ; %bb.1: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB19_2: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
  %1 = icmp ule i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_sgt(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_sgt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.le LBB20_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB20_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = icmp sgt i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_sge(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_sge:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ge LBB21_2
; CHECK-NEXT:  ; %bb.1: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB21_2: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
  %1 = icmp sge i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_slt(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_slt:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ge LBB22_2
; CHECK-NEXT:  ; %bb.1: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB22_2: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
  %1 = icmp slt i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

define i32 @icmp_sle(i32 %x, i32 %y) {
; CHECK-LABEL: icmp_sle:
; CHECK:       ; %bb.0:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.le LBB23_2
; CHECK-NEXT:  ; %bb.1: ; %bb2
; CHECK-NEXT:    mov w0, #1
; CHECK-NEXT:    ret
; CHECK-NEXT:  LBB23_2: ; %bb1
; CHECK-NEXT:    mov w0, wzr
; CHECK-NEXT:    ret
  %1 = icmp sle i32 %x, %y
  br i1 %1, label %bb1, label %bb2
bb2:
  ret i32 1
bb1:
  ret i32 0
}

