; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64 -verify-machineinstrs %s -o - | FileCheck %s --check-prefixes=CHECK,CHECK-SD
; RUN: llc -mtriple=aarch64 -global-isel -global-isel-abort=2 -verify-machineinstrs %s -o - 2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-GI

; CHECK-GI:  warning: Instruction selection used fallback path for recursive

define <8 x i16> @abdu_base(<8 x i16> %src1, <8 x i16> %src2) {
; CHECK-LABEL: abdu_base:
; CHECK:       // %bb.0:
; CHECK-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %zextsrc1 = zext <8 x i16> %src1 to <8 x i32>
  %zextsrc2 = zext <8 x i16> %src2 to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, %zextsrc2
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_const(<8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_const:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.4s, #1
; CHECK-SD-NEXT:    ushll2 v2.4s, v0.8h, #0
; CHECK-SD-NEXT:    ushll v0.4s, v0.4h, #0
; CHECK-SD-NEXT:    sub v0.4s, v0.4s, v1.4s
; CHECK-SD-NEXT:    sub v1.4s, v2.4s, v1.4s
; CHECK-SD-NEXT:    abs v1.4s, v1.4s
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_const:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.4s, #1
; CHECK-GI-NEXT:    ushll v2.4s, v0.4h, #0
; CHECK-GI-NEXT:    ushll2 v0.4s, v0.8h, #0
; CHECK-GI-NEXT:    sub v2.4s, v2.4s, v1.4s
; CHECK-GI-NEXT:    sub v0.4s, v0.4s, v1.4s
; CHECK-GI-NEXT:    abs v1.4s, v2.4s
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = zext <8 x i16> %src1 to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_const_lhs(<8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_const_lhs:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.4s, #1
; CHECK-SD-NEXT:    usubw v2.4s, v1.4s, v0.4h
; CHECK-SD-NEXT:    usubw2 v0.4s, v1.4s, v0.8h
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    abs v1.4s, v2.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_const_lhs:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.4s, #1
; CHECK-GI-NEXT:    usubw v2.4s, v1.4s, v0.4h
; CHECK-GI-NEXT:    usubw2 v0.4s, v1.4s, v0.8h
; CHECK-GI-NEXT:    abs v1.4s, v2.4s
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = zext <8 x i16> %src1 to <8 x i32>
  %sub = sub <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %zextsrc1
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_const_zero(<8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_const_zero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.2d, #0000000000000000
; CHECK-SD-NEXT:    ushll v2.4s, v0.4h, #0
; CHECK-SD-NEXT:    usubw2 v0.4s, v1.4s, v0.8h
; CHECK-SD-NEXT:    neg v1.4s, v2.4s
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    abs v1.4s, v1.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_const_zero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.2d, #0000000000000000
; CHECK-GI-NEXT:    ushll v2.4s, v0.4h, #0
; CHECK-GI-NEXT:    neg v2.4s, v2.4s
; CHECK-GI-NEXT:    usubw2 v0.4s, v1.4s, v0.8h
; CHECK-GI-NEXT:    abs v1.4s, v2.4s
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = zext <8 x i16> %src1 to <8 x i32>
  %sub = sub <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, %zextsrc1
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_const_both() {
; CHECK-SD-LABEL: abdu_const_both:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #2
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_const_both:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.4s, #2
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v0.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %sub = sub <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_const_bothhigh() {
; CHECK-SD-LABEL: abdu_const_bothhigh:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #1
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_const_bothhigh:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.2d, #0xffffffffffffffff
; CHECK-GI-NEXT:    mvni v1.8h, #1
; CHECK-GI-NEXT:    uabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = zext <8 x i16> <i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534> to <8 x i32>
  %zextsrc2 = zext <8 x i16> <i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535> to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, %zextsrc2
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_undef(<8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_undef:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_undef:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    uabd v0.8h, v0.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = zext <8 x i16> %src1 to <8 x i32>
  %zextsrc2 = zext <8 x i16> undef to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, %zextsrc2
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abdu_ugt(<8 x i16>, <8 x i16>) {
; CHECK-SD-LABEL: abdu_ugt:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_ugt:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    cmhi v2.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v3.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    bit v0.16b, v3.16b, v2.16b
; CHECK-GI-NEXT:    ret
  %3 = icmp ugt <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %4, <8 x i16> %5
  ret <8 x i16> %6
}

define <8 x i16> @abdu_uge(<8 x i16>, <8 x i16>) {
; CHECK-SD-LABEL: abdu_uge:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_uge:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    cmhs v2.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v3.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    bit v0.16b, v3.16b, v2.16b
; CHECK-GI-NEXT:    ret
  %3 = icmp uge <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %4, <8 x i16> %5
  ret <8 x i16> %6
}

define <8 x i16> @abdu_ult(<8 x i16>, <8 x i16>) {
; CHECK-LABEL: abdu_ult:
; CHECK:       // %bb.0:
; CHECK-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %3 = icmp ult <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %5, <8 x i16> %4
  ret <8 x i16> %6
}

define <8 x i16> @abdu_ule(<8 x i16>, <8 x i16>) {
; CHECK-SD-LABEL: abdu_ule:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_ule:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    cmhs v2.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    sub v3.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    bif v0.16b, v3.16b, v2.16b
; CHECK-GI-NEXT:    ret
  %3 = icmp ule <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %5, <8 x i16> %4
  ret <8 x i16> %6
}

define <8 x i16> @abds_sgt(<8 x i16>, <8 x i16>) {
; CHECK-SD-LABEL: abds_sgt:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_sgt:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    cmgt v2.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v3.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    bit v0.16b, v3.16b, v2.16b
; CHECK-GI-NEXT:    ret
  %3 = icmp sgt <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %4, <8 x i16> %5
  ret <8 x i16> %6
}

define <8 x i16> @abds_sge(<8 x i16>, <8 x i16>) {
; CHECK-SD-LABEL: abds_sge:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_sge:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    cmge v2.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v3.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    bit v0.16b, v3.16b, v2.16b
; CHECK-GI-NEXT:    ret
  %3 = icmp sge <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %4, <8 x i16> %5
  ret <8 x i16> %6
}

define <8 x i16> @abds_slt(<8 x i16>, <8 x i16>) {
; CHECK-LABEL: abds_slt:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %3 = icmp slt <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %5, <8 x i16> %4
  ret <8 x i16> %6
}

define <8 x i16> @abds_sle(<8 x i16>, <8 x i16>) {
; CHECK-SD-LABEL: abds_sle:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_sle:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    cmge v2.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    sub v3.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    sub v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    bif v0.16b, v3.16b, v2.16b
; CHECK-GI-NEXT:    ret
  %3 = icmp sle <8 x i16> %0, %1
  %4 = sub <8 x i16> %0, %1
  %5 = sub <8 x i16> %1, %0
  %6 = select <8 x i1> %3, <8 x i16> %5, <8 x i16> %4
  ret <8 x i16> %6
}


define <8 x i16> @abdu_i_base(<8 x i16> %src1, <8 x i16> %src2) {
; CHECK-LABEL: abdu_i_base:
; CHECK:       // %bb.0:
; CHECK-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %src1, <8 x i16> %src2)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const(<8 x i16> %src1) {
; CHECK-LABEL: abdu_i_const:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v1.8h, #1
; CHECK-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %src1, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const_lhs(<8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_i_const_lhs:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.8h, #1
; CHECK-SD-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_const_lhs:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.8h, #1
; CHECK-GI-NEXT:    uabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const_zero(float %t, <8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_i_const_zero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov v0.16b, v1.16b
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_const_zero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.2d, #0000000000000000
; CHECK-GI-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const_both() {
; CHECK-SD-LABEL: abdu_i_const_both:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #2
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_const_both:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.8h, #3
; CHECK-GI-NEXT:    movi v1.8h, #1
; CHECK-GI-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const_bothhigh() {
; CHECK-SD-LABEL: abdu_i_const_bothhigh:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #1
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_const_bothhigh:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.2d, #0xffffffffffffffff
; CHECK-GI-NEXT:    mvni v1.8h, #1
; CHECK-GI-NEXT:    uabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534>, <8 x i16> <i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535>)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const_onehigh() {
; CHECK-SD-LABEL: abdu_i_const_onehigh:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #32765 // =0x7ffd
; CHECK-SD-NEXT:    dup v0.8h, w8
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_const_onehigh:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.8h, #1
; CHECK-GI-NEXT:    adrp x8, .LCPI21_0
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI21_0]
; CHECK-GI-NEXT:    uabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766>, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_const_oneneg() {
; CHECK-SD-LABEL: abdu_i_const_oneneg:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #128, lsl #8
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_const_oneneg:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI22_0
; CHECK-GI-NEXT:    mvni v0.8h, #1
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI22_0]
; CHECK-GI-NEXT:    uabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766>, <8 x i16> <i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534>)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_zero(<8 x i16> %t, <8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_i_zero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov v0.16b, v1.16b
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_zero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.2d, #0000000000000000
; CHECK-GI-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_undef(<8 x i16> %t, <8 x i16> %src1) {
; CHECK-SD-LABEL: abdu_i_undef:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.2d, #0000000000000000
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abdu_i_undef:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> undef, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abdu_i_reassoc(<8 x i16> %src1) {
; CHECK-LABEL: abdu_i_reassoc:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v1.8h, #3
; CHECK-NEXT:    movi v2.8h, #1
; CHECK-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    uabd v0.8h, v0.8h, v2.8h
; CHECK-NEXT:    ret
  %r1 = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %src1, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>)
  %result = call <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16> %r1, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}





define <8 x i16> @abds_base(<8 x i16> %src1, <8 x i16> %src2) {
; CHECK-LABEL: abds_base:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %zextsrc1 = sext <8 x i16> %src1 to <8 x i32>
  %zextsrc2 = sext <8 x i16> %src2 to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, %zextsrc2
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abds_const(<8 x i16> %src1) {
; CHECK-SD-LABEL: abds_const:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.4s, #1
; CHECK-SD-NEXT:    sshll2 v2.4s, v0.8h, #0
; CHECK-SD-NEXT:    sshll v0.4s, v0.4h, #0
; CHECK-SD-NEXT:    sub v0.4s, v0.4s, v1.4s
; CHECK-SD-NEXT:    sub v1.4s, v2.4s, v1.4s
; CHECK-SD-NEXT:    abs v1.4s, v1.4s
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_const:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.4s, #1
; CHECK-GI-NEXT:    sshll v2.4s, v0.4h, #0
; CHECK-GI-NEXT:    sshll2 v0.4s, v0.8h, #0
; CHECK-GI-NEXT:    sub v2.4s, v2.4s, v1.4s
; CHECK-GI-NEXT:    sub v0.4s, v0.4s, v1.4s
; CHECK-GI-NEXT:    abs v1.4s, v2.4s
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = sext <8 x i16> %src1 to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abds_const_lhs(<8 x i16> %src1) {
; CHECK-SD-LABEL: abds_const_lhs:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.4s, #1
; CHECK-SD-NEXT:    ssubw v2.4s, v1.4s, v0.4h
; CHECK-SD-NEXT:    ssubw2 v0.4s, v1.4s, v0.8h
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    abs v1.4s, v2.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_const_lhs:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.4s, #1
; CHECK-GI-NEXT:    ssubw v2.4s, v1.4s, v0.4h
; CHECK-GI-NEXT:    ssubw2 v0.4s, v1.4s, v0.8h
; CHECK-GI-NEXT:    abs v1.4s, v2.4s
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = sext <8 x i16> %src1 to <8 x i32>
  %sub = sub <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %zextsrc1
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abds_const_zero(<8 x i16> %src1) {
; CHECK-SD-LABEL: abds_const_zero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.2d, #0000000000000000
; CHECK-SD-NEXT:    sshll v2.4s, v0.4h, #0
; CHECK-SD-NEXT:    ssubw2 v0.4s, v1.4s, v0.8h
; CHECK-SD-NEXT:    neg v1.4s, v2.4s
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    abs v1.4s, v1.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_const_zero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.2d, #0000000000000000
; CHECK-GI-NEXT:    sshll v2.4s, v0.4h, #0
; CHECK-GI-NEXT:    neg v2.4s, v2.4s
; CHECK-GI-NEXT:    ssubw2 v0.4s, v1.4s, v0.8h
; CHECK-GI-NEXT:    abs v1.4s, v2.4s
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = sext <8 x i16> %src1 to <8 x i32>
  %sub = sub <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, %zextsrc1
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abds_const_both() {
; CHECK-SD-LABEL: abds_const_both:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #2
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_const_both:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.4s, #2
; CHECK-GI-NEXT:    abs v0.4s, v0.4s
; CHECK-GI-NEXT:    uzp1 v0.8h, v0.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %sub = sub <8 x i32> <i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3>, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abds_const_bothhigh() {
; CHECK-SD-LABEL: abds_const_bothhigh:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #1
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_const_bothhigh:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.2d, #0xffffffffffffffff
; CHECK-GI-NEXT:    mvni v1.8h, #1
; CHECK-GI-NEXT:    sabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = sext <8 x i16> <i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534> to <8 x i32>
  %zextsrc2 = sext <8 x i16> <i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535, i16 65535> to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, %zextsrc2
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}

define <8 x i16> @abds_undef(<8 x i16> %src1) {
; CHECK-SD-LABEL: abds_undef:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    sshll v1.4s, v0.4h, #0
; CHECK-SD-NEXT:    sshll2 v0.4s, v0.8h, #0
; CHECK-SD-NEXT:    abs v0.4s, v0.4s
; CHECK-SD-NEXT:    abs v1.4s, v1.4s
; CHECK-SD-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_undef:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    sabd v0.8h, v0.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %zextsrc1 = sext <8 x i16> %src1 to <8 x i32>
  %zextsrc2 = sext <8 x i16> undef to <8 x i32>
  %sub = sub <8 x i32> %zextsrc1, %zextsrc2
  %abs = call <8 x i32> @llvm.abs.v8i32(<8 x i32> %sub, i1 0)
  %result = trunc <8 x i32> %abs to <8 x i16>
  ret <8 x i16> %result
}



define <8 x i16> @abds_i_base(<8 x i16> %src1, <8 x i16> %src2) {
; CHECK-LABEL: abds_i_base:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> %src1, <8 x i16> %src2)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const(<8 x i16> %src1) {
; CHECK-LABEL: abds_i_const:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v1.8h, #1
; CHECK-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> %src1, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const_lhs(<8 x i16> %src1) {
; CHECK-SD-LABEL: abds_i_const_lhs:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v1.8h, #1
; CHECK-SD-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_const_lhs:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.8h, #1
; CHECK-GI-NEXT:    sabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const_zero(<8 x i16> %src1) {
; CHECK-SD-LABEL: abds_i_const_zero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    abs v0.8h, v0.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_const_zero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v1.2d, #0000000000000000
; CHECK-GI-NEXT:    sabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const_both() {
; CHECK-SD-LABEL: abds_i_const_both:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #2
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_const_both:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.8h, #3
; CHECK-GI-NEXT:    movi v1.8h, #1
; CHECK-GI-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const_bothhigh() {
; CHECK-SD-LABEL: abds_i_const_bothhigh:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #1
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_const_bothhigh:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI38_0
; CHECK-GI-NEXT:    mvni v0.8h, #128, lsl #8
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI38_0]
; CHECK-GI-NEXT:    sabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766>, <8 x i16> <i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767, i16 32767>)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const_onehigh() {
; CHECK-SD-LABEL: abds_i_const_onehigh:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    mov w8, #32765 // =0x7ffd
; CHECK-SD-NEXT:    dup v0.8h, w8
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_const_onehigh:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.8h, #1
; CHECK-GI-NEXT:    adrp x8, .LCPI39_0
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI39_0]
; CHECK-GI-NEXT:    sabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766>, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_const_oneneg() {
; CHECK-SD-LABEL: abds_i_const_oneneg:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.8h, #128, lsl #8
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_const_oneneg:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    adrp x8, .LCPI40_0
; CHECK-GI-NEXT:    mvni v0.8h, #1
; CHECK-GI-NEXT:    ldr q1, [x8, :lo12:.LCPI40_0]
; CHECK-GI-NEXT:    sabd v0.8h, v1.8h, v0.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766, i16 32766>, <8 x i16> <i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534, i16 65534>)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_zero(<8 x i16> %t, <8 x i16> %src1) {
; CHECK-SD-LABEL: abds_i_zero:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    abs v0.8h, v1.8h
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_zero:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    movi v0.2d, #0000000000000000
; CHECK-GI-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0>, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_undef(<8 x i16> %t, <8 x i16> %src1) {
; CHECK-SD-LABEL: abds_i_undef:
; CHECK-SD:       // %bb.0:
; CHECK-SD-NEXT:    movi v0.2d, #0000000000000000
; CHECK-SD-NEXT:    ret
;
; CHECK-GI-LABEL: abds_i_undef:
; CHECK-GI:       // %bb.0:
; CHECK-GI-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-GI-NEXT:    ret
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> undef, <8 x i16> %src1)
  ret <8 x i16> %result
}

define <8 x i16> @abds_i_reassoc(<8 x i16> %src1) {
; CHECK-LABEL: abds_i_reassoc:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v1.8h, #3
; CHECK-NEXT:    movi v2.8h, #1
; CHECK-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    sabd v0.8h, v0.8h, v2.8h
; CHECK-NEXT:    ret
  %r1 = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> %src1, <8 x i16> <i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3, i16 3>)
  %result = call <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16> %r1, <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>)
  ret <8 x i16> %result
}

define <1 x i64> @recursive() {
; CHECK-LABEL: recursive:
; CHECK:       // %bb.0:
; CHECK-NEXT:    movi v0.8b, #254
; CHECK-NEXT:    ushll v1.8h, v0.8b, #0
; CHECK-NEXT:    dup v0.8b, v0.b[0]
; CHECK-NEXT:    saddlp v1.1d, v1.2s
; CHECK-NEXT:    orr v0.8b, v0.8b, v1.8b
; CHECK-NEXT:    ret
  %1 = tail call <8 x i8> @llvm.aarch64.neon.umax.v8i8(<8 x i8> zeroinitializer, <8 x i8> <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>)
  %2 = tail call <8 x i8> @llvm.aarch64.neon.uabd.v8i8(<8 x i8> %1, <8 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>)
  %3 = zext <8 x i8> %2 to <8 x i16>
  %4 = bitcast <8 x i16> %3 to <4 x i32>
  %5 = shufflevector <4 x i32> %4, <4 x i32> zeroinitializer, <2 x i32> <i32 0, i32 1>
  %6 = shufflevector <8 x i8> %2, <8 x i8> zeroinitializer, <16 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
  %7 = bitcast <16 x i8> %6 to <2 x i64>
  %8 = shufflevector <2 x i64> %7, <2 x i64> zeroinitializer, <1 x i32> zeroinitializer
  %9 = tail call <1 x i64> @llvm.aarch64.neon.saddlp.v1i64.v2i32(<2 x i32> %5)
  %10 = or <1 x i64> %8, %9
  ret <1 x i64> %10
}

define <8 x i16> @abds_sub_smax(<8 x i16> %src1, <8 x i16> %src2) {
; CHECK-LABEL: abds_sub_smax:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %smax = call <8 x i16> @llvm.smax(<8 x i16> %src1, <8 x i16> %src2)
  %smin = call <8 x i16> @llvm.smin(<8 x i16> %src1, <8 x i16> %src2)
  %result = sub <8 x i16> %smax, %smin
  ret <8 x i16> %result
}

define <8 x i16> @abdu_sub_umax(<8 x i16> %src1, <8 x i16> %src2) {
; CHECK-LABEL: abdu_sub_umax:
; CHECK:       // %bb.0:
; CHECK-NEXT:    uabd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    ret
  %umax = call <8 x i16> @llvm.umax(<8 x i16> %src1, <8 x i16> %src2)
  %umin = call <8 x i16> @llvm.umin(<8 x i16> %src1, <8 x i16> %src2)
  %result = sub <8 x i16> %umax, %umin
  ret <8 x i16> %result
}


declare <8 x i8> @llvm.aarch64.neon.umax.v8i8(<8 x i8>, <8 x i8>)
declare <1 x i64> @llvm.aarch64.neon.saddlp.v1i64.v2i32(<2 x i32>)
declare <8 x i8> @llvm.aarch64.neon.uabd.v8i8(<8 x i8>, <8 x i8>)
declare <8 x i16> @llvm.aarch64.neon.uabd.v8i16(<8 x i16>, <8 x i16>)
declare <8 x i16> @llvm.aarch64.neon.sabd.v8i16(<8 x i16>, <8 x i16>)
declare <8 x i32> @llvm.abs.v8i32(<8 x i32>, i1)
