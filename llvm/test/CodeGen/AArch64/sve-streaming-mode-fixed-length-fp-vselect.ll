; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -mattr=+sme -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE

target triple = "aarch64-unknown-linux-gnu"

define <2 x half> @select_v2f16(<2 x half> %op1, <2 x half> %op2, <2 x i1> %mask) {
; CHECK-LABEL: select_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    mov z3.s, z2.s[1]
; CHECK-NEXT:    fmov w8, s2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    ptrue p0.h
; CHECK-NEXT:    strh w8, [sp, #8]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strh w8, [sp, #10]
; CHECK-NEXT:    ldr d2, [sp, #8]
; CHECK-NEXT:    lsl z2.h, z2.h, #15
; CHECK-NEXT:    asr z2.h, z2.h, #15
; CHECK-NEXT:    and z2.h, z2.h, #0x1
; CHECK-NEXT:    cmpne p0.h, p0/z, z2.h, #0
; CHECK-NEXT:    sel z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    uzp1 v2.4h, v2.4h, v0.4h
; NONEON-NOSVE-NEXT:    shl v2.4h, v2.4h, #15
; NONEON-NOSVE-NEXT:    cmlt v2.4h, v2.4h, #0
; NONEON-NOSVE-NEXT:    bif v0.8b, v1.8b, v2.8b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <2 x i1> %mask, <2 x half> %op1, <2 x half> %op2
  ret <2 x half> %sel
}

define <4 x half> @select_v4f16(<4 x half> %op1, <4 x half> %op2, <4 x i1> %mask) {
; CHECK-LABEL: select_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    lsl z2.h, z2.h, #15
; CHECK-NEXT:    asr z2.h, z2.h, #15
; CHECK-NEXT:    and z2.h, z2.h, #0x1
; CHECK-NEXT:    cmpne p0.h, p0/z, z2.h, #0
; CHECK-NEXT:    sel z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v2.4h, v2.4h, #15
; NONEON-NOSVE-NEXT:    cmlt v2.4h, v2.4h, #0
; NONEON-NOSVE-NEXT:    bif v0.8b, v1.8b, v2.8b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <4 x i1> %mask, <4 x half> %op1, <4 x half> %op2
  ret <4 x half> %sel
}

define <8 x half> @select_v8f16(<8 x half> %op1, <8 x half> %op2, <8 x i1> %mask) {
; CHECK-LABEL: select_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEXT:    lsl z2.h, z2.h, #15
; CHECK-NEXT:    asr z2.h, z2.h, #15
; CHECK-NEXT:    and z2.h, z2.h, #0x1
; CHECK-NEXT:    cmpne p0.h, p0/z, z2.h, #0
; CHECK-NEXT:    sel z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v2.8h, v2.8b, #0
; NONEON-NOSVE-NEXT:    shl v2.8h, v2.8h, #15
; NONEON-NOSVE-NEXT:    cmlt v2.8h, v2.8h, #0
; NONEON-NOSVE-NEXT:    bif v0.16b, v1.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <8 x i1> %mask, <8 x half> %op1, <8 x half> %op2
  ret <8 x half> %sel
}

define void @select_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: select_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q2, [x0]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q3, [x1]
; CHECK-NEXT:    fcmeq p1.h, p0/z, z0.h, z1.h
; CHECK-NEXT:    fcmeq p0.h, p0/z, z2.h, z3.h
; CHECK-NEXT:    sel z0.h, p1, z0.h, z1.h
; CHECK-NEXT:    sel z1.h, p0, z2.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldr q0, [x0]
; NONEON-NOSVE-NEXT:    ldr q1, [x1]
; NONEON-NOSVE-NEXT:    mov h2, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[2]
; NONEON-NOSVE-NEXT:    fcvt s6, h1
; NONEON-NOSVE-NEXT:    fcvt s7, h0
; NONEON-NOSVE-NEXT:    mov h16, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h17, v0.h[6]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcmp s3, s2
; NONEON-NOSVE-NEXT:    mov h2, v1.h[3]
; NONEON-NOSVE-NEXT:    mov h3, v0.h[3]
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v1.h[4]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[4]
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    csetm w14, eq
; NONEON-NOSVE-NEXT:    fcmp s5, s4
; NONEON-NOSVE-NEXT:    mov h4, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    csetm w12, eq
; NONEON-NOSVE-NEXT:    fcmp s3, s2
; NONEON-NOSVE-NEXT:    ldr q2, [x0, #16]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    ldr q3, [x1, #16]
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    csetm w11, eq
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[7]
; NONEON-NOSVE-NEXT:    mov h18, v3.h[3]
; NONEON-NOSVE-NEXT:    csetm w13, eq
; NONEON-NOSVE-NEXT:    fcmp s5, s4
; NONEON-NOSVE-NEXT:    mov h4, v3.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v2.h[1]
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    csetm w9, eq
; NONEON-NOSVE-NEXT:    fcmp s17, s16
; NONEON-NOSVE-NEXT:    mov h16, v3.h[2]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    mov h17, v2.h[2]
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    csetm w10, eq
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    fcvt s6, h3
; NONEON-NOSVE-NEXT:    fcvt s7, h2
; NONEON-NOSVE-NEXT:    csetm w15, eq
; NONEON-NOSVE-NEXT:    fcmp s5, s4
; NONEON-NOSVE-NEXT:    fmov s4, w14
; NONEON-NOSVE-NEXT:    csetm w16, eq
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v2.h[3]
; NONEON-NOSVE-NEXT:    fcvt s7, h16
; NONEON-NOSVE-NEXT:    fcvt s16, h17
; NONEON-NOSVE-NEXT:    mov v4.h[1], w8
; NONEON-NOSVE-NEXT:    fcvt s17, h18
; NONEON-NOSVE-NEXT:    csetm w14, eq
; NONEON-NOSVE-NEXT:    fmov s5, w14
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcmp s16, s7
; NONEON-NOSVE-NEXT:    mov h7, v3.h[4]
; NONEON-NOSVE-NEXT:    mov h16, v2.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[2], w12
; NONEON-NOSVE-NEXT:    mov v5.h[1], w16
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    fcmp s6, s17
; NONEON-NOSVE-NEXT:    mov h17, v2.h[5]
; NONEON-NOSVE-NEXT:    fcvt s6, h7
; NONEON-NOSVE-NEXT:    fcvt s7, h16
; NONEON-NOSVE-NEXT:    mov h16, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v4.h[3], w11
; NONEON-NOSVE-NEXT:    mov v5.h[2], w8
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    mov h6, v3.h[6]
; NONEON-NOSVE-NEXT:    mov h7, v2.h[6]
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    mov v4.h[4], w13
; NONEON-NOSVE-NEXT:    mov v5.h[3], w8
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcmp s17, s16
; NONEON-NOSVE-NEXT:    mov h16, v3.h[7]
; NONEON-NOSVE-NEXT:    mov h17, v2.h[7]
; NONEON-NOSVE-NEXT:    mov v5.h[4], w8
; NONEON-NOSVE-NEXT:    mov v4.h[5], w9
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    fcvt s6, h16
; NONEON-NOSVE-NEXT:    fcvt s7, h17
; NONEON-NOSVE-NEXT:    mov v5.h[5], w8
; NONEON-NOSVE-NEXT:    mov v4.h[6], w10
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    fcmp s7, s6
; NONEON-NOSVE-NEXT:    mov v5.h[6], w8
; NONEON-NOSVE-NEXT:    mov v4.h[7], w15
; NONEON-NOSVE-NEXT:    csetm w8, eq
; NONEON-NOSVE-NEXT:    mov v5.h[7], w8
; NONEON-NOSVE-NEXT:    bif v0.16b, v1.16b, v4.16b
; NONEON-NOSVE-NEXT:    mov v1.16b, v5.16b
; NONEON-NOSVE-NEXT:    bsl v1.16b, v2.16b, v3.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %mask = fcmp oeq <16 x half> %op1, %op2
  %sel = select <16 x i1> %mask, <16 x half> %op1, <16 x half> %op2
  store <16 x half> %sel, ptr %a
  ret void
}

define <2 x float> @select_v2f32(<2 x float> %op1, <2 x float> %op2, <2 x i1> %mask) {
; CHECK-LABEL: select_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    lsl z2.s, z2.s, #31
; CHECK-NEXT:    asr z2.s, z2.s, #31
; CHECK-NEXT:    and z2.s, z2.s, #0x1
; CHECK-NEXT:    cmpne p0.s, p0/z, z2.s, #0
; CHECK-NEXT:    sel z0.s, p0, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v2.2s, v2.2s, #31
; NONEON-NOSVE-NEXT:    cmlt v2.2s, v2.2s, #0
; NONEON-NOSVE-NEXT:    bif v0.8b, v1.8b, v2.8b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <2 x i1> %mask, <2 x float> %op1, <2 x float> %op2
  ret <2 x float> %sel
}

define <4 x float> @select_v4f32(<4 x float> %op1, <4 x float> %op2, <4 x i1> %mask) {
; CHECK-LABEL: select_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    lsl z2.s, z2.s, #31
; CHECK-NEXT:    asr z2.s, z2.s, #31
; CHECK-NEXT:    and z2.s, z2.s, #0x1
; CHECK-NEXT:    cmpne p0.s, p0/z, z2.s, #0
; CHECK-NEXT:    sel z0.s, p0, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v2.4s, v2.4h, #0
; NONEON-NOSVE-NEXT:    shl v2.4s, v2.4s, #31
; NONEON-NOSVE-NEXT:    cmlt v2.4s, v2.4s, #0
; NONEON-NOSVE-NEXT:    bif v0.16b, v1.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <4 x i1> %mask, <4 x float> %op1, <4 x float> %op2
  ret <4 x float> %sel
}

define void @select_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: select_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q2, [x0]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q3, [x1]
; CHECK-NEXT:    fcmeq p1.s, p0/z, z0.s, z1.s
; CHECK-NEXT:    fcmeq p0.s, p0/z, z2.s, z3.s
; CHECK-NEXT:    sel z0.s, p1, z0.s, z1.s
; CHECK-NEXT:    sel z1.s, p0, z2.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    ldp q1, q3, [x1]
; NONEON-NOSVE-NEXT:    fcmeq v4.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcmeq v5.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    bif v0.16b, v1.16b, v4.16b
; NONEON-NOSVE-NEXT:    mov v1.16b, v5.16b
; NONEON-NOSVE-NEXT:    bsl v1.16b, v2.16b, v3.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %mask = fcmp oeq <8 x float> %op1, %op2
  %sel = select <8 x i1> %mask, <8 x float> %op1, <8 x float> %op2
  store <8 x float> %sel, ptr %a
  ret void
}

define <1 x double> @select_v1f64(<1 x double> %op1, <1 x double> %op2, <1 x i1> %mask) {
; CHECK-LABEL: select_v1f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    tst w0, #0x1
; CHECK-NEXT:    fcsel d0, d0, d1, ne
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v1f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    tst w0, #0x1
; NONEON-NOSVE-NEXT:    csetm x8, ne
; NONEON-NOSVE-NEXT:    fmov d2, x8
; NONEON-NOSVE-NEXT:    bif v0.8b, v1.8b, v2.8b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <1 x i1> %mask, <1 x double> %op1, <1 x double> %op2
  ret <1 x double> %sel
}

define <2 x double> @select_v2f64(<2 x double> %op1, <2 x double> %op2, <2 x i1> %mask) {
; CHECK-LABEL: select_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    uunpklo z2.d, z2.s
; CHECK-NEXT:    lsl z2.d, z2.d, #63
; CHECK-NEXT:    asr z2.d, z2.d, #63
; CHECK-NEXT:    and z2.d, z2.d, #0x1
; CHECK-NEXT:    cmpne p0.d, p0/z, z2.d, #0
; CHECK-NEXT:    sel z0.d, p0, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ushll v2.2d, v2.2s, #0
; NONEON-NOSVE-NEXT:    shl v2.2d, v2.2d, #63
; NONEON-NOSVE-NEXT:    cmlt v2.2d, v2.2d, #0
; NONEON-NOSVE-NEXT:    bif v0.16b, v1.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %sel = select <2 x i1> %mask, <2 x double> %op1, <2 x double> %op2
  ret <2 x double> %sel
}

define void @select_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: select_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q2, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q3, [x1]
; CHECK-NEXT:    fcmeq p1.d, p0/z, z0.d, z1.d
; CHECK-NEXT:    fcmeq p0.d, p0/z, z2.d, z3.d
; CHECK-NEXT:    sel z0.d, p1, z0.d, z1.d
; CHECK-NEXT:    sel z1.d, p0, z2.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: select_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q2, [x0]
; NONEON-NOSVE-NEXT:    ldp q1, q3, [x1]
; NONEON-NOSVE-NEXT:    fcmeq v4.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    fcmeq v5.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    bif v0.16b, v1.16b, v4.16b
; NONEON-NOSVE-NEXT:    mov v1.16b, v5.16b
; NONEON-NOSVE-NEXT:    bsl v1.16b, v2.16b, v3.16b
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %mask = fcmp oeq <4 x double> %op1, %op2
  %sel = select <4 x i1> %mask, <4 x double> %op1, <4 x double> %op2
  store <4 x double> %sel, ptr %a
  ret void
}
