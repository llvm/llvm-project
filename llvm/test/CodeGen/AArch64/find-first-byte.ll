; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -mtriple=aarch64 -mattr=+sve -passes='loop(loop-idiom-vectorize)' -verify-loop-info -verify-dom-info -S < %s | FileCheck %s

; Base case based on `libcxx/include/__algorithm/find_first_of.h':
;   char* find_first_of(char *first, char *last, char *s_first, char *s_last) {
;     for (; first != last; ++first)
;       for (char *it = s_first; it != s_last; ++it)
;         if (*first == *it)
;           return first;
;     return last;
;   }
define ptr @find_first_of_i8(ptr %0, ptr %1, ptr %2, ptr %3) #0 {
; CHECK-LABEL: define ptr @find_first_of_i8(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[BB48:.*]], label %[[DOTPREHEADER:.*]]
; CHECK:       [[_PREHEADER:.*:]]
; CHECK-NEXT:    [[TMP8:%.*]] = call <vscale x 16 x i1> @llvm.get.active.lane.mask.nxv16i1.i64(i64 0, i64 16)
; CHECK-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[BB9:.*]]
; CHECK:       [[BB9]]:
; CHECK-NEXT:    [[SEARCH:%.*]] = phi ptr [ [[TMP0]], %[[DOTPREHEADER]] ], [ [[TMP33:%.*]], %[[TMP32:.*]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = ptrtoint ptr [[SEARCH]] to i64
; CHECK-NEXT:    [[TMP11:%.*]] = ptrtoint ptr [[TMP1]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = call <vscale x 16 x i1> @llvm.get.active.lane.mask.nxv16i1.i64(i64 [[TMP10]], i64 [[TMP11]])
; CHECK-NEXT:    [[TMP13:%.*]] = and <vscale x 16 x i1> [[TMP8]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = call <vscale x 16 x i8> @llvm.masked.load.nxv16i8.p0(ptr [[SEARCH]], i32 1, <vscale x 16 x i1> [[TMP13]], <vscale x 16 x i8> zeroinitializer)
; CHECK-NEXT:    br label %[[BB15:.*]]
; CHECK:       [[BB15]]:
; CHECK-NEXT:    [[NEEDLE:%.*]] = phi ptr [ [[TMP2]], %[[BB9]] ], [ [[TMP30:%.*]], %[[TMP29:.*]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = ptrtoint ptr [[NEEDLE]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = ptrtoint ptr [[TMP3]] to i64
; CHECK-NEXT:    [[TMP18:%.*]] = call <vscale x 16 x i1> @llvm.get.active.lane.mask.nxv16i1.i64(i64 [[TMP16]], i64 [[TMP17]])
; CHECK-NEXT:    [[TMP19:%.*]] = and <vscale x 16 x i1> [[TMP8]], [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = call <vscale x 16 x i8> @llvm.masked.load.nxv16i8.p0(ptr [[NEEDLE]], i32 1, <vscale x 16 x i1> [[TMP19]], <vscale x 16 x i8> zeroinitializer)
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <vscale x 16 x i8> [[TMP20]], i64 0
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 16 x i8> poison, i8 [[TMP21]], i64 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 16 x i8> [[DOTSPLATINSERT]], <vscale x 16 x i8> poison, <vscale x 16 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP22:%.*]] = select <vscale x 16 x i1> [[TMP19]], <vscale x 16 x i8> [[TMP20]], <vscale x 16 x i8> [[DOTSPLAT]]
; CHECK-NEXT:    [[TMP23:%.*]] = call <16 x i8> @llvm.vector.extract.v16i8.nxv16i8(<vscale x 16 x i8> [[TMP22]], i64 0)
; CHECK-NEXT:    [[TMP24:%.*]] = call <vscale x 16 x i1> @llvm.experimental.vector.match.nxv16i8.v16i8(<vscale x 16 x i8> [[TMP14]], <16 x i8> [[TMP23]], <vscale x 16 x i1> [[TMP13]])
; CHECK-NEXT:    [[TMP25:%.*]] = call i1 @llvm.vector.reduce.or.nxv16i1(<vscale x 16 x i1> [[TMP24]])
; CHECK-NEXT:    br i1 [[TMP25]], label %[[BB26:.*]], label %[[TMP29]]
; CHECK:       [[BB26]]:
; CHECK-NEXT:    [[TMP27:%.*]] = call i64 @llvm.experimental.cttz.elts.i64.nxv16i1(<vscale x 16 x i1> [[TMP24]], i1 true)
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr [[SEARCH]], i64 [[TMP27]]
; CHECK-NEXT:    br label %[[DOTLOOPEXIT:.*]]
; CHECK:       [[TMP29]]:
; CHECK-NEXT:    [[TMP30]] = getelementptr i8, ptr [[NEEDLE]], i64 16
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ult ptr [[TMP30]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP31]], label %[[BB15]], label %[[TMP32]]
; CHECK:       [[TMP32]]:
; CHECK-NEXT:    [[TMP33]] = getelementptr i8, ptr [[SEARCH]], i64 16
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ult ptr [[TMP33]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP34]], label %[[BB9]], label %[[DOTLOOPEXIT1:.*]]
; CHECK:       [[SCALAR_PH]]:
; CHECK-NEXT:    br label %[[BB35:.*]]
; CHECK:       [[BB35]]:
; CHECK-NEXT:    [[TMP36:%.*]] = phi ptr [ [[TMP46:%.*]], %[[TMP45:.*]] ], [ [[TMP0]], %[[SCALAR_PH]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = load i8, ptr [[TMP36]], align 1
; CHECK-NEXT:    br label %[[BB41:.*]]
; CHECK:       [[BB38:.*]]:
; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr inbounds i8, ptr [[TMP42:%.*]], i64 1
; CHECK-NEXT:    [[TMP40:%.*]] = icmp eq ptr [[TMP39]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP40]], label %[[TMP45]], label %[[BB41]]
; CHECK:       [[BB41]]:
; CHECK-NEXT:    [[TMP42]] = phi ptr [ [[TMP2]], %[[BB35]] ], [ [[TMP39]], %[[BB38]] ]
; CHECK-NEXT:    [[TMP43:%.*]] = load i8, ptr [[TMP42]], align 1
; CHECK-NEXT:    [[TMP44:%.*]] = icmp eq i8 [[TMP37]], [[TMP43]]
; CHECK-NEXT:    br i1 [[TMP44]], label %[[DOTLOOPEXIT]], label %[[BB38]]
; CHECK:       [[TMP45]]:
; CHECK-NEXT:    [[TMP46]] = getelementptr inbounds i8, ptr [[TMP36]], i64 1
; CHECK-NEXT:    [[TMP47:%.*]] = icmp eq ptr [[TMP46]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP47]], label %[[DOTLOOPEXIT1]], label %[[BB35]]
; CHECK:       [[_LOOPEXIT:.*:]]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP36]], %[[BB41]] ], [ [[TMP28]], %[[BB26]] ]
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[_LOOPEXIT1:.*:]]
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[BB48]]:
; CHECK-NEXT:    [[TMP49:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; CHECK-NEXT:    ret ptr [[TMP49]]
;
  %5 = icmp eq ptr %0, %1
  %6 = icmp eq ptr %2, %3
  %7 = or i1 %5, %6
  br i1 %7, label %21, label %8

8:
  %9 = phi ptr [ %19, %18 ], [ %0, %4 ]
  %10 = load i8, ptr %9, align 1
  br label %14

11:
  %12 = getelementptr inbounds i8, ptr %15, i64 1
  %13 = icmp eq ptr %12, %3
  br i1 %13, label %18, label %14

14:
  %15 = phi ptr [ %2, %8 ], [ %12, %11 ]
  %16 = load i8, ptr %15, align 1
  %17 = icmp eq i8 %10, %16
  br i1 %17, label %21, label %11

18:
  %19 = getelementptr inbounds i8, ptr %9, i64 1
  %20 = icmp eq ptr %19, %1
  br i1 %20, label %21, label %8

21:
  %22 = phi ptr [ %1, %4 ], [ %9, %14 ], [ %1, %18 ]
  ret ptr %22
}

; Same as @find_first_of_i8 but with i16.
; This is accepted and generates a similar loop.
define ptr @find_first_of_i16(ptr %0, ptr %1, ptr %2, ptr %3) #0 {
; CHECK-LABEL: define ptr @find_first_of_i16(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[BB48:.*]], label %[[DOTPREHEADER:.*]]
; CHECK:       [[_PREHEADER:.*:]]
; CHECK-NEXT:    [[TMP8:%.*]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 0, i64 8)
; CHECK-NEXT:    br i1 false, label %[[SCALAR_PH:.*]], label %[[BB9:.*]]
; CHECK:       [[BB9]]:
; CHECK-NEXT:    [[SEARCH:%.*]] = phi ptr [ [[TMP0]], %[[DOTPREHEADER]] ], [ [[TMP33:%.*]], %[[TMP32:.*]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = ptrtoint ptr [[SEARCH]] to i64
; CHECK-NEXT:    [[TMP11:%.*]] = ptrtoint ptr [[TMP1]] to i64
; CHECK-NEXT:    [[TMP12:%.*]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 [[TMP10]], i64 [[TMP11]])
; CHECK-NEXT:    [[TMP13:%.*]] = and <vscale x 8 x i1> [[TMP8]], [[TMP12]]
; CHECK-NEXT:    [[TMP14:%.*]] = call <vscale x 8 x i16> @llvm.masked.load.nxv8i16.p0(ptr [[SEARCH]], i32 1, <vscale x 8 x i1> [[TMP13]], <vscale x 8 x i16> zeroinitializer)
; CHECK-NEXT:    br label %[[BB15:.*]]
; CHECK:       [[BB15]]:
; CHECK-NEXT:    [[NEEDLE:%.*]] = phi ptr [ [[TMP2]], %[[BB9]] ], [ [[TMP30:%.*]], %[[TMP29:.*]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = ptrtoint ptr [[NEEDLE]] to i64
; CHECK-NEXT:    [[TMP17:%.*]] = ptrtoint ptr [[TMP3]] to i64
; CHECK-NEXT:    [[TMP18:%.*]] = call <vscale x 8 x i1> @llvm.get.active.lane.mask.nxv8i1.i64(i64 [[TMP16]], i64 [[TMP17]])
; CHECK-NEXT:    [[TMP19:%.*]] = and <vscale x 8 x i1> [[TMP8]], [[TMP18]]
; CHECK-NEXT:    [[TMP20:%.*]] = call <vscale x 8 x i16> @llvm.masked.load.nxv8i16.p0(ptr [[NEEDLE]], i32 1, <vscale x 8 x i1> [[TMP19]], <vscale x 8 x i16> zeroinitializer)
; CHECK-NEXT:    [[TMP21:%.*]] = extractelement <vscale x 8 x i16> [[TMP20]], i64 0
; CHECK-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 8 x i16> poison, i16 [[TMP21]], i64 0
; CHECK-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 8 x i16> [[DOTSPLATINSERT]], <vscale x 8 x i16> poison, <vscale x 8 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP22:%.*]] = select <vscale x 8 x i1> [[TMP19]], <vscale x 8 x i16> [[TMP20]], <vscale x 8 x i16> [[DOTSPLAT]]
; CHECK-NEXT:    [[TMP23:%.*]] = call <8 x i16> @llvm.vector.extract.v8i16.nxv8i16(<vscale x 8 x i16> [[TMP22]], i64 0)
; CHECK-NEXT:    [[TMP24:%.*]] = call <vscale x 8 x i1> @llvm.experimental.vector.match.nxv8i16.v8i16(<vscale x 8 x i16> [[TMP14]], <8 x i16> [[TMP23]], <vscale x 8 x i1> [[TMP13]])
; CHECK-NEXT:    [[TMP25:%.*]] = call i1 @llvm.vector.reduce.or.nxv8i1(<vscale x 8 x i1> [[TMP24]])
; CHECK-NEXT:    br i1 [[TMP25]], label %[[BB26:.*]], label %[[TMP29]]
; CHECK:       [[BB26]]:
; CHECK-NEXT:    [[TMP27:%.*]] = call i64 @llvm.experimental.cttz.elts.i64.nxv8i1(<vscale x 8 x i1> [[TMP24]], i1 true)
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i16, ptr [[SEARCH]], i64 [[TMP27]]
; CHECK-NEXT:    br label %[[DOTLOOPEXIT:.*]]
; CHECK:       [[TMP29]]:
; CHECK-NEXT:    [[TMP30]] = getelementptr i16, ptr [[NEEDLE]], i64 8
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ult ptr [[TMP30]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP31]], label %[[BB15]], label %[[TMP32]]
; CHECK:       [[TMP32]]:
; CHECK-NEXT:    [[TMP33]] = getelementptr i16, ptr [[SEARCH]], i64 8
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ult ptr [[TMP33]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP34]], label %[[BB9]], label %[[DOTLOOPEXIT1:.*]]
; CHECK:       [[SCALAR_PH]]:
; CHECK-NEXT:    br label %[[BB35:.*]]
; CHECK:       [[BB35]]:
; CHECK-NEXT:    [[TMP36:%.*]] = phi ptr [ [[TMP46:%.*]], %[[TMP45:.*]] ], [ [[TMP0]], %[[SCALAR_PH]] ]
; CHECK-NEXT:    [[TMP37:%.*]] = load i16, ptr [[TMP36]], align 1
; CHECK-NEXT:    br label %[[BB41:.*]]
; CHECK:       [[BB38:.*]]:
; CHECK-NEXT:    [[TMP39:%.*]] = getelementptr inbounds i16, ptr [[TMP42:%.*]], i64 1
; CHECK-NEXT:    [[TMP40:%.*]] = icmp eq ptr [[TMP39]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP40]], label %[[TMP45]], label %[[BB41]]
; CHECK:       [[BB41]]:
; CHECK-NEXT:    [[TMP42]] = phi ptr [ [[TMP2]], %[[BB35]] ], [ [[TMP39]], %[[BB38]] ]
; CHECK-NEXT:    [[TMP43:%.*]] = load i16, ptr [[TMP42]], align 1
; CHECK-NEXT:    [[TMP44:%.*]] = icmp eq i16 [[TMP37]], [[TMP43]]
; CHECK-NEXT:    br i1 [[TMP44]], label %[[DOTLOOPEXIT]], label %[[BB38]]
; CHECK:       [[TMP45]]:
; CHECK-NEXT:    [[TMP46]] = getelementptr inbounds i16, ptr [[TMP36]], i64 1
; CHECK-NEXT:    [[TMP47:%.*]] = icmp eq ptr [[TMP46]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP47]], label %[[DOTLOOPEXIT1]], label %[[BB35]]
; CHECK:       [[_LOOPEXIT:.*:]]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP36]], %[[BB41]] ], [ [[TMP28]], %[[BB26]] ]
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[_LOOPEXIT1:.*:]]
; CHECK-NEXT:    br label %[[BB48]]
; CHECK:       [[BB48]]:
; CHECK-NEXT:    [[TMP49:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; CHECK-NEXT:    ret ptr [[TMP49]]
;
  %5 = icmp eq ptr %0, %1
  %6 = icmp eq ptr %2, %3
  %7 = or i1 %5, %6
  br i1 %7, label %21, label %8

8:
  %9 = phi ptr [ %19, %18 ], [ %0, %4 ]
  %10 = load i16, ptr %9, align 1
  br label %14

11:
  %12 = getelementptr inbounds i16, ptr %15, i64 1
  %13 = icmp eq ptr %12, %3
  br i1 %13, label %18, label %14

14:
  %15 = phi ptr [ %2, %8 ], [ %12, %11 ]
  %16 = load i16, ptr %15, align 1
  %17 = icmp eq i16 %10, %16
  br i1 %17, label %21, label %11

18:
  %19 = getelementptr inbounds i16, ptr %9, i64 1
  %20 = icmp eq ptr %19, %1
  br i1 %20, label %21, label %8

21:
  %22 = phi ptr [ %1, %4 ], [ %9, %14 ], [ %1, %18 ]
  ret ptr %22
}

; Same as @find_first_of_i8 but with `ne' comparison.
; This is rejected for now, but should eventually be supported.
define ptr @find_first_not_of_i8(ptr %0, ptr %1, ptr %2, ptr %3) #0 {
; CHECK-LABEL: define ptr @find_first_not_of_i8(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[BB21:.*]], label %[[DOTPREHEADER:.*]]
; CHECK:       [[_PREHEADER:.*:]]
; CHECK-NEXT:    br label %[[BB8:.*]]
; CHECK:       [[BB8]]:
; CHECK-NEXT:    [[TMP9:%.*]] = phi ptr [ [[TMP19:%.*]], %[[TMP18:.*]] ], [ [[TMP0]], %[[DOTPREHEADER]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    br label %[[BB14:.*]]
; CHECK:       [[BB11:.*]]:
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, ptr [[TMP15:%.*]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq ptr [[TMP12]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP13]], label %[[TMP18]], label %[[BB14]]
; CHECK:       [[BB14]]:
; CHECK-NEXT:    [[TMP15]] = phi ptr [ [[TMP2]], %[[BB8]] ], [ [[TMP12]], %[[BB11]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i8 [[TMP10]], [[TMP16]]
; CHECK-NEXT:    br i1 [[TMP17]], label %[[DOTLOOPEXIT:.*]], label %[[BB11]]
; CHECK:       [[TMP18]]:
; CHECK-NEXT:    [[TMP19]] = getelementptr inbounds i8, ptr [[TMP9]], i64 1
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq ptr [[TMP19]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP20]], label %[[DOTLOOPEXIT1:.*]], label %[[BB8]]
; CHECK:       [[_LOOPEXIT:.*:]]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP9]], %[[BB14]] ]
; CHECK-NEXT:    br label %[[BB21]]
; CHECK:       [[_LOOPEXIT1:.*:]]
; CHECK-NEXT:    br label %[[BB21]]
; CHECK:       [[BB21]]:
; CHECK-NEXT:    [[TMP22:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; CHECK-NEXT:    ret ptr [[TMP22]]
;
  %5 = icmp eq ptr %0, %1
  %6 = icmp eq ptr %2, %3
  %7 = or i1 %5, %6
  br i1 %7, label %21, label %8

8:
  %9 = phi ptr [ %19, %18 ], [ %0, %4 ]
  %10 = load i8, ptr %9, align 1
  br label %14

11:
  %12 = getelementptr inbounds i8, ptr %15, i64 1
  %13 = icmp eq ptr %12, %3
  br i1 %13, label %18, label %14

14:
  %15 = phi ptr [ %2, %8 ], [ %12, %11 ]
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %10, %16
  br i1 %17, label %21, label %11

18:
  %19 = getelementptr inbounds i8, ptr %9, i64 1
  %20 = icmp eq ptr %19, %1
  br i1 %20, label %21, label %8

21:
  %22 = phi ptr [ %1, %4 ], [ %9, %14 ], [ %1, %18 ]
  ret ptr %22
}

; This is the same as @find_first_of_i8 but without SVE2, which we require to
; perform the conversion.
define ptr @find_first_of_i8_nosve2(ptr %0, ptr %1, ptr %2, ptr %3) {
; CHECK-LABEL: define ptr @find_first_of_i8_nosve2(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[BB21:.*]], label %[[DOTPREHEADER:.*]]
; CHECK:       [[_PREHEADER:.*:]]
; CHECK-NEXT:    br label %[[BB8:.*]]
; CHECK:       [[BB8]]:
; CHECK-NEXT:    [[TMP9:%.*]] = phi ptr [ [[TMP19:%.*]], %[[TMP18:.*]] ], [ [[TMP0]], %[[DOTPREHEADER]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    br label %[[BB14:.*]]
; CHECK:       [[BB11:.*]]:
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, ptr [[TMP15:%.*]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq ptr [[TMP12]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP13]], label %[[TMP18]], label %[[BB14]]
; CHECK:       [[BB14]]:
; CHECK-NEXT:    [[TMP15]] = phi ptr [ [[TMP2]], %[[BB8]] ], [ [[TMP12]], %[[BB11]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = icmp eq i8 [[TMP10]], [[TMP16]]
; CHECK-NEXT:    br i1 [[TMP17]], label %[[DOTLOOPEXIT:.*]], label %[[BB11]]
; CHECK:       [[TMP18]]:
; CHECK-NEXT:    [[TMP19]] = getelementptr inbounds i8, ptr [[TMP9]], i64 1
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq ptr [[TMP19]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP20]], label %[[DOTLOOPEXIT1:.*]], label %[[BB8]]
; CHECK:       [[_LOOPEXIT:.*:]]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP9]], %[[BB14]] ]
; CHECK-NEXT:    br label %[[BB21]]
; CHECK:       [[_LOOPEXIT1:.*:]]
; CHECK-NEXT:    br label %[[BB21]]
; CHECK:       [[BB21]]:
; CHECK-NEXT:    [[TMP22:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; CHECK-NEXT:    ret ptr [[TMP22]]
;
  %5 = icmp eq ptr %0, %1
  %6 = icmp eq ptr %2, %3
  %7 = or i1 %5, %6
  br i1 %7, label %21, label %8

8:
  %9 = phi ptr [ %19, %18 ], [ %0, %4 ]
  %10 = load i8, ptr %9, align 1
  br label %14

11:
  %12 = getelementptr inbounds i8, ptr %15, i64 1
  %13 = icmp eq ptr %12, %3
  br i1 %13, label %18, label %14

14:
  %15 = phi ptr [ %2, %8 ], [ %12, %11 ]
  %16 = load i8, ptr %15, align 1
  %17 = icmp eq i8 %10, %16
  br i1 %17, label %21, label %11

18:
  %19 = getelementptr inbounds i8, ptr %9, i64 1
  %20 = icmp eq ptr %19, %1
  br i1 %20, label %21, label %8

21:
  %22 = phi ptr [ %1, %4 ], [ %9, %14 ], [ %1, %18 ]
  ret ptr %22
}

; Same as @find_first_of_i8 but here we use the inner PHI outside the loop nest.
; This isn't supported.
define ptr @find_first_of_i8_outside_use(ptr %0, ptr %1, ptr %2, ptr %3) #0 {
; CHECK-LABEL: define ptr @find_first_of_i8_outside_use(
; CHECK-SAME: ptr [[TMP0:%.*]], ptr [[TMP1:%.*]], ptr [[TMP2:%.*]], ptr [[TMP3:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP5:%.*]] = icmp eq ptr [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP6:%.*]] = icmp eq ptr [[TMP2]], [[TMP3]]
; CHECK-NEXT:    [[TMP7:%.*]] = or i1 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    br i1 [[TMP7]], label %[[BB21:.*]], label %[[DOTPREHEADER:.*]]
; CHECK:       [[_PREHEADER:.*:]]
; CHECK-NEXT:    br label %[[BB8:.*]]
; CHECK:       [[BB8]]:
; CHECK-NEXT:    [[TMP9:%.*]] = phi ptr [ [[TMP19:%.*]], %[[TMP18:.*]] ], [ [[TMP0]], %[[DOTPREHEADER]] ]
; CHECK-NEXT:    [[TMP10:%.*]] = load i8, ptr [[TMP9]], align 1
; CHECK-NEXT:    br label %[[BB14:.*]]
; CHECK:       [[BB11:.*]]:
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, ptr [[TMP15:%.*]], i64 1
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq ptr [[TMP12]], [[TMP3]]
; CHECK-NEXT:    br i1 [[TMP13]], label %[[TMP18]], label %[[BB14]]
; CHECK:       [[BB14]]:
; CHECK-NEXT:    [[TMP15]] = phi ptr [ [[TMP2]], %[[BB8]] ], [ [[TMP12]], %[[BB11]] ]
; CHECK-NEXT:    [[TMP16:%.*]] = load i8, ptr [[TMP15]], align 1
; CHECK-NEXT:    [[TMP17:%.*]] = icmp ne i8 [[TMP10]], [[TMP16]]
; CHECK-NEXT:    br i1 [[TMP17]], label %[[DOTLOOPEXIT:.*]], label %[[BB11]]
; CHECK:       [[TMP18]]:
; CHECK-NEXT:    [[TMP19]] = getelementptr inbounds i8, ptr [[TMP9]], i64 1
; CHECK-NEXT:    [[TMP20:%.*]] = icmp eq ptr [[TMP19]], [[TMP1]]
; CHECK-NEXT:    br i1 [[TMP20]], label %[[DOTLOOPEXIT1:.*]], label %[[BB8]]
; CHECK:       [[_LOOPEXIT:.*:]]
; CHECK-NEXT:    [[DOTLCSSA3:%.*]] = phi ptr [ [[TMP9]], %[[BB14]] ]
; CHECK-NEXT:    [[DOTLCSSA:%.*]] = phi ptr [ [[TMP15]], %[[BB14]] ]
; CHECK-NEXT:    br label %[[BB21]]
; CHECK:       [[_LOOPEXIT1:.*:]]
; CHECK-NEXT:    br label %[[BB21]]
; CHECK:       [[BB21]]:
; CHECK-NEXT:    [[TMP22:%.*]] = phi ptr [ [[TMP1]], [[TMP4:%.*]] ], [ [[DOTLCSSA3]], %[[DOTLOOPEXIT]] ], [ [[TMP1]], %[[DOTLOOPEXIT1]] ]
; CHECK-NEXT:    [[TMP23:%.*]] = phi ptr [ [[TMP3]], [[TMP4]] ], [ [[DOTLCSSA]], %[[DOTLOOPEXIT]] ], [ [[TMP3]], %[[DOTLOOPEXIT1]] ]
; CHECK-NEXT:    ret ptr [[TMP23]]
;
  %5 = icmp eq ptr %0, %1
  %6 = icmp eq ptr %2, %3
  %7 = or i1 %5, %6
  br i1 %7, label %21, label %8

8:
  %9 = phi ptr [ %19, %18 ], [ %0, %4 ]
  %10 = load i8, ptr %9, align 1
  br label %14

11:
  %12 = getelementptr inbounds i8, ptr %15, i64 1
  %13 = icmp eq ptr %12, %3
  br i1 %13, label %18, label %14

14:
  %15 = phi ptr [ %2, %8 ], [ %12, %11 ]
  %16 = load i8, ptr %15, align 1
  %17 = icmp ne i8 %10, %16
  br i1 %17, label %21, label %11

18:
  %19 = getelementptr inbounds i8, ptr %9, i64 1
  %20 = icmp eq ptr %19, %1
  br i1 %20, label %21, label %8

21:
  %22 = phi ptr [ %1, %4 ], [  %9, %14 ], [ %1, %18 ]
  %23 = phi ptr [ %3, %4 ], [ %15, %14 ], [ %3, %18 ]
  ret ptr %23
}

attributes #0 = { "target-features"="+sve2" }
