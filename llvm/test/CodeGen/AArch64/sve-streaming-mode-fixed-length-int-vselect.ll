; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s

target triple = "aarch64-unknown-linux-gnu"

define <4 x i8> @select_v4i8(<4 x i8> %op1, <4 x i8> %op2, <4 x i1> %mask) #0 {
; CHECK-LABEL: select_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI0_0
; CHECK-NEXT:    adrp x9, .LCPI0_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ldr d3, [x8, :lo12:.LCPI0_0]
; CHECK-NEXT:    ldr d4, [x9, :lo12:.LCPI0_1]
; CHECK-NEXT:    lsl z2.h, p0/m, z2.h, z3.h
; CHECK-NEXT:    asr z2.h, p0/m, z2.h, z3.h
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <4 x i1> %mask, <4 x i8> %op1, <4 x i8> %op2
  ret <4 x i8> %sel
}

define <8 x i8> @select_v8i8(<8 x i8> %op1, <8 x i8> %op2, <8 x i1> %mask) #0 {
; CHECK-LABEL: select_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI1_0
; CHECK-NEXT:    adrp x9, .LCPI1_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ldr d3, [x8, :lo12:.LCPI1_0]
; CHECK-NEXT:    ldr d4, [x9, :lo12:.LCPI1_1]
; CHECK-NEXT:    lsl z2.b, p0/m, z2.b, z3.b
; CHECK-NEXT:    asr z2.b, p0/m, z2.b, z3.b
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <8 x i1> %mask, <8 x i8> %op1, <8 x i8> %op2
  ret <8 x i8> %sel
}

define <16 x i8> @select_v16i8(<16 x i8> %op1, <16 x i8> %op2, <16 x i1> %mask) #0 {
; CHECK-LABEL: select_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI2_0
; CHECK-NEXT:    adrp x9, .LCPI2_1
; CHECK-NEXT:    // kill: def $q2 killed $q2 def $z2
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    ldr q3, [x8, :lo12:.LCPI2_0]
; CHECK-NEXT:    ldr q4, [x9, :lo12:.LCPI2_1]
; CHECK-NEXT:    lsl z2.b, p0/m, z2.b, z3.b
; CHECK-NEXT:    asr z2.b, p0/m, z2.b, z3.b
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <16 x i1> %mask, <16 x i8> %op1, <16 x i8> %op2
  ret <16 x i8> %sel
}

define void @select_v32i8(ptr %a, ptr %b) #0 {
; CHECK-LABEL: select_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x1]
; CHECK-NEXT:    adrp x8, .LCPI3_0
; CHECK-NEXT:    ldp q3, q2, [x0]
; CHECK-NEXT:    cmeq v6.16b, v3.16b, v0.16b
; CHECK-NEXT:    ldr q4, [x8, :lo12:.LCPI3_0]
; CHECK-NEXT:    and z3.d, z3.d, z6.d
; CHECK-NEXT:    cmeq v5.16b, v2.16b, v1.16b
; CHECK-NEXT:    and z2.d, z2.d, z5.d
; CHECK-NEXT:    eor z5.d, z5.d, z4.d
; CHECK-NEXT:    eor z4.d, z6.d, z4.d
; CHECK-NEXT:    and z1.d, z1.d, z5.d
; CHECK-NEXT:    and z0.d, z0.d, z4.d
; CHECK-NEXT:    orr z1.d, z2.d, z1.d
; CHECK-NEXT:    orr z0.d, z3.d, z0.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
  %op1 = load <32 x i8>, ptr %a
  %op2 = load <32 x i8>, ptr %b
  %mask = icmp eq <32 x i8> %op1, %op2
  %sel = select <32 x i1> %mask, <32 x i8> %op1, <32 x i8> %op2
  store <32 x i8> %sel, ptr %a
  ret void
}

define <2 x i16> @select_v2i16(<2 x i16> %op1, <2 x i16> %op2, <2 x i1> %mask) #0 {
; CHECK-LABEL: select_v2i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI4_0
; CHECK-NEXT:    adrp x9, .LCPI4_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ldr d3, [x8, :lo12:.LCPI4_0]
; CHECK-NEXT:    ldr d4, [x9, :lo12:.LCPI4_1]
; CHECK-NEXT:    lsl z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    asr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <2 x i1> %mask, <2 x i16> %op1, <2 x i16> %op2
  ret <2 x i16> %sel
}

define <4 x i16> @select_v4i16(<4 x i16> %op1, <4 x i16> %op2, <4 x i1> %mask) #0 {
; CHECK-LABEL: select_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI5_0
; CHECK-NEXT:    adrp x9, .LCPI5_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ldr d3, [x8, :lo12:.LCPI5_0]
; CHECK-NEXT:    ldr d4, [x9, :lo12:.LCPI5_1]
; CHECK-NEXT:    lsl z2.h, p0/m, z2.h, z3.h
; CHECK-NEXT:    asr z2.h, p0/m, z2.h, z3.h
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <4 x i1> %mask, <4 x i16> %op1, <4 x i16> %op2
  ret <4 x i16> %sel
}

define <8 x i16> @select_v8i16(<8 x i16> %op1, <8 x i16> %op2, <8 x i1> %mask) #0 {
; CHECK-LABEL: select_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI6_0
; CHECK-NEXT:    adrp x9, .LCPI6_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEXT:    ldr q3, [x8, :lo12:.LCPI6_0]
; CHECK-NEXT:    ldr q4, [x9, :lo12:.LCPI6_1]
; CHECK-NEXT:    lsl z2.h, p0/m, z2.h, z3.h
; CHECK-NEXT:    asr z2.h, p0/m, z2.h, z3.h
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <8 x i1> %mask, <8 x i16> %op1, <8 x i16> %op2
  ret <8 x i16> %sel
}

define void @select_v16i16(ptr %a, ptr %b) #0 {
; CHECK-LABEL: select_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x1]
; CHECK-NEXT:    adrp x8, .LCPI7_0
; CHECK-NEXT:    ldp q3, q2, [x0]
; CHECK-NEXT:    cmeq v6.8h, v3.8h, v0.8h
; CHECK-NEXT:    ldr q4, [x8, :lo12:.LCPI7_0]
; CHECK-NEXT:    and z3.d, z3.d, z6.d
; CHECK-NEXT:    cmeq v5.8h, v2.8h, v1.8h
; CHECK-NEXT:    and z2.d, z2.d, z5.d
; CHECK-NEXT:    eor z5.d, z5.d, z4.d
; CHECK-NEXT:    eor z4.d, z6.d, z4.d
; CHECK-NEXT:    and z1.d, z1.d, z5.d
; CHECK-NEXT:    and z0.d, z0.d, z4.d
; CHECK-NEXT:    orr z1.d, z2.d, z1.d
; CHECK-NEXT:    orr z0.d, z3.d, z0.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
  %op1 = load <16 x i16>, ptr %a
  %op2 = load <16 x i16>, ptr %b
  %mask = icmp eq <16 x i16> %op1, %op2
  %sel = select <16 x i1> %mask, <16 x i16> %op1, <16 x i16> %op2
  store <16 x i16> %sel, ptr %a
  ret void
}

define <2 x i32> @select_v2i32(<2 x i32> %op1, <2 x i32> %op2, <2 x i1> %mask) #0 {
; CHECK-LABEL: select_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI8_0
; CHECK-NEXT:    adrp x9, .LCPI8_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ldr d3, [x8, :lo12:.LCPI8_0]
; CHECK-NEXT:    ldr d4, [x9, :lo12:.LCPI8_1]
; CHECK-NEXT:    lsl z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    asr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <2 x i1> %mask, <2 x i32> %op1, <2 x i32> %op2
  ret <2 x i32> %sel
}

define <4 x i32> @select_v4i32(<4 x i32> %op1, <4 x i32> %op2, <4 x i1> %mask) #0 {
; CHECK-LABEL: select_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI9_0
; CHECK-NEXT:    adrp x9, .LCPI9_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    ldr q3, [x8, :lo12:.LCPI9_0]
; CHECK-NEXT:    ldr q4, [x9, :lo12:.LCPI9_1]
; CHECK-NEXT:    lsl z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    asr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <4 x i1> %mask, <4 x i32> %op1, <4 x i32> %op2
  ret <4 x i32> %sel
}

define void @select_v8i32(ptr %a, ptr %b) #0 {
; CHECK-LABEL: select_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x1]
; CHECK-NEXT:    adrp x8, .LCPI10_0
; CHECK-NEXT:    ldp q3, q2, [x0]
; CHECK-NEXT:    cmeq v6.4s, v3.4s, v0.4s
; CHECK-NEXT:    ldr q4, [x8, :lo12:.LCPI10_0]
; CHECK-NEXT:    and z3.d, z3.d, z6.d
; CHECK-NEXT:    cmeq v5.4s, v2.4s, v1.4s
; CHECK-NEXT:    and z2.d, z2.d, z5.d
; CHECK-NEXT:    eor z5.d, z5.d, z4.d
; CHECK-NEXT:    eor z4.d, z6.d, z4.d
; CHECK-NEXT:    and z1.d, z1.d, z5.d
; CHECK-NEXT:    and z0.d, z0.d, z4.d
; CHECK-NEXT:    orr z1.d, z2.d, z1.d
; CHECK-NEXT:    orr z0.d, z3.d, z0.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %op2 = load <8 x i32>, ptr %b
  %mask = icmp eq <8 x i32> %op1, %op2
  %sel = select <8 x i1> %mask, <8 x i32> %op1, <8 x i32> %op2
  store <8 x i32> %sel, ptr %a
  ret void
}

define <1 x i64> @select_v1i64(<1 x i64> %op1, <1 x i64> %op2, <1 x i1> %mask) #0 {
; CHECK-LABEL: select_v1i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    tst w0, #0x1
; CHECK-NEXT:    mov x9, #-1
; CHECK-NEXT:    csetm x8, ne
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fmov d3, x9
; CHECK-NEXT:    fmov d2, x8
; CHECK-NEXT:    eor z3.d, z2.d, z3.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <1 x i1> %mask, <1 x i64> %op1, <1 x i64> %op2
  ret <1 x i64> %sel
}

define <2 x i64> @select_v2i64(<2 x i64> %op1, <2 x i64> %op2, <2 x i1> %mask) #0 {
; CHECK-LABEL: select_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    adrp x8, .LCPI12_0
; CHECK-NEXT:    adrp x9, .LCPI12_1
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z2.d, z2.s
; CHECK-NEXT:    ldr q3, [x8, :lo12:.LCPI12_0]
; CHECK-NEXT:    ldr q4, [x9, :lo12:.LCPI12_1]
; CHECK-NEXT:    lsl z2.d, p0/m, z2.d, z3.d
; CHECK-NEXT:    asr z2.d, p0/m, z2.d, z3.d
; CHECK-NEXT:    eor z3.d, z2.d, z4.d
; CHECK-NEXT:    and z0.d, z0.d, z2.d
; CHECK-NEXT:    and z1.d, z1.d, z3.d
; CHECK-NEXT:    orr z0.d, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
  %sel = select <2 x i1> %mask, <2 x i64> %op1, <2 x i64> %op2
  ret <2 x i64> %sel
}

define void @select_v4i64(ptr %a, ptr %b) #0 {
; CHECK-LABEL: select_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x1]
; CHECK-NEXT:    adrp x8, .LCPI13_0
; CHECK-NEXT:    ldp q3, q2, [x0]
; CHECK-NEXT:    cmeq v6.2d, v3.2d, v0.2d
; CHECK-NEXT:    ldr q4, [x8, :lo12:.LCPI13_0]
; CHECK-NEXT:    and z3.d, z3.d, z6.d
; CHECK-NEXT:    cmeq v5.2d, v2.2d, v1.2d
; CHECK-NEXT:    and z2.d, z2.d, z5.d
; CHECK-NEXT:    eor z5.d, z5.d, z4.d
; CHECK-NEXT:    eor z4.d, z6.d, z4.d
; CHECK-NEXT:    and z1.d, z1.d, z5.d
; CHECK-NEXT:    and z0.d, z0.d, z4.d
; CHECK-NEXT:    orr z1.d, z2.d, z1.d
; CHECK-NEXT:    orr z0.d, z3.d, z0.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
  %op1 = load <4 x i64>, ptr %a
  %op2 = load <4 x i64>, ptr %b
  %mask = icmp eq <4 x i64> %op1, %op2
  %sel = select <4 x i1> %mask, <4 x i64> %op1, <4 x i64> %op2
  store <4 x i64> %sel, ptr %a
  ret void
}

attributes #0 = { "target-features"="+sve" uwtable }
