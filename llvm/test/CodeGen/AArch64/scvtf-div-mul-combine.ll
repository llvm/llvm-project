; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64-linux-gnu -aarch64-neon-syntax=apple -mattr=+fullfp16 -o - %s | FileCheck %s

; This test file verifies that fdiv(sitofp(x), C),
; where C is a constant power of two,
; is optimized to scvtf(X, shift_amount).
; This typically involves an implicit fdiv -> fmul_reciprocal transformation.

; Scalar f32 (from i32)
define float @test_f32_div_const(i32 %in) {
; CHECK-LABEL: test_f32_div_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf s0, w0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp i32 %in to float
  %div.i = fdiv float %vcvt.i, 16.0
  ret float %div.i
}

; Scalar f64 (from i64)
define double @test_f64_div_const(i64 %in) {
; CHECK-LABEL: test_f64_div_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf d0, x0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp i64 %in to double
  %div.i = fdiv double %vcvt.i, 16.0
  ret double %div.i
}

; Vector v2f32 (from v2i32)
define <2 x float> @test_v2f32_div_const_2(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 2.0, float 2.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_4(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #2
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 4.0, float 4.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_8(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #3
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 8.0, float 8.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_16(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 16.0, float 16.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_32(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #5
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 32.0, float 32.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_64(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #6
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 64.0, float 64.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_128(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_128:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #7
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 128.0, float 128.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_256(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_256:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #8
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 256.0, float 256.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_512(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_512:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #9
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 512.0, float 512.0>
  ret <2 x float> %div.i
}

define <2 x float> @test_v2f32_div_const_1024(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_const_1024:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2s v0, v0, #10
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 1024.0, float 1024.0>
  ret <2 x float> %div.i
}

; Vector v4f32 (from v4i32)
define <4 x float> @test_v4f32_div_const_2(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 2.0, float 2.0, float 2.0, float 2.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_4(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #2
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 4.0, float 4.0, float 4.0, float 4.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_8(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #3
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 8.0, float 8.0, float 8.0, float 8.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_16(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 16.0, float 16.0, float 16.0, float 16.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_32(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #5
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 32.0, float 32.0, float 32.0, float 32.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_64(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #6
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 64.0, float 64.0, float 64.0, float 64.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_128(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_128:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #7
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 128.0, float 128.0, float 128.0, float 128.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_256(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_256:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #8
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 256.0, float 256.0, float 256.0, float 256.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_512(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_512:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #9
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 512.0, float 512.0, float 512.0, float 512.0>
  ret <4 x float> %div.i
}

define <4 x float> @test_v4f32_div_const_1024(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_const_1024:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4s v0, v0, #10
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 1024.0, float 1024.0, float 1024.0, float 1024.0>
  ret <4 x float> %div.i
}

; Vector v2f64 (from v2i64)
define <2 x double> @test_v2f64_div_const(<2 x i64> %in) {
; CHECK-LABEL: test_v2f64_div_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.2d v0, v0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i64> %in to <2 x double>
  %div.i = fdiv <2 x double> %vcvt.i, <double 16.0, double 16.0>
  ret <2 x double> %div.i
}

; Vector v4f16 (from v4i16)
define <4 x half> @test_v4f16_div_const_2(<4 x i16> %in) {
; CHECK-LABEL: test_v4f16_div_const_2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4h v0, v0, #1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i16> %in to <4 x half>
  %div.i = fdiv <4 x half> %vcvt.i, <half 2.0, half 2.0, half 2.0, half 2.0>
  ret <4 x half> %div.i
}

define <4 x half> @test_v4f16_div_const_4(<4 x i16> %in) {
; CHECK-LABEL: test_v4f16_div_const_4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4h v0, v0, #2
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i16> %in to <4 x half>
  %div.i = fdiv <4 x half> %vcvt.i, <half 4.0, half 4.0, half 4.0, half 4.0>
  ret <4 x half> %div.i
}

define <4 x half> @test_v4f16_div_const_8(<4 x i16> %in) {
; CHECK-LABEL: test_v4f16_div_const_8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4h v0, v0, #3
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i16> %in to <4 x half>
  %div.i = fdiv <4 x half> %vcvt.i, <half 8.0, half 8.0, half 8.0, half 8.0>
  ret <4 x half> %div.i
}

define <4 x half> @test_v4f16_div_const_16(<4 x i16> %in) {
; CHECK-LABEL: test_v4f16_div_const_16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4h v0, v0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i16> %in to <4 x half>
  %div.i = fdiv <4 x half> %vcvt.i, <half 16.0, half 16.0, half 16.0, half 16.0>
  ret <4 x half> %div.i
}

define <4 x half> @test_v4f16_div_const_32(<4 x i16> %in) {
; CHECK-LABEL: test_v4f16_div_const_32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.4h v0, v0, #5
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i16> %in to <4 x half>
  %div.i = fdiv <4 x half> %vcvt.i, <half 32.0, half 32.0, half 32.0, half 32.0>
  ret <4 x half> %div.i
}

; Vector v8f16 (from v8i16)
define <8 x half> @test_v8f16_div_const_2(<8 x i16> %in) {
; CHECK-LABEL: test_v8f16_div_const_2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.8h v0, v0, #1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <8 x i16> %in to <8 x half>
  %div.i = fdiv <8 x half> %vcvt.i, <half 2.0, half 2.0, half 2.0, half 2.0, half 2.0, half 2.0, half 2.0, half 2.0>
  ret <8 x half> %div.i
}

define <8 x half> @test_v8f16_div_const_4(<8 x i16> %in) {
; CHECK-LABEL: test_v8f16_div_const_4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.8h v0, v0, #2
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <8 x i16> %in to <8 x half>
  %div.i = fdiv <8 x half> %vcvt.i, <half 4.0, half 4.0, half 4.0, half 4.0, half 4.0, half 4.0, half 4.0, half 4.0>
  ret <8 x half> %div.i
}

define <8 x half> @test_v8f16_div_const_8(<8 x i16> %in) {
; CHECK-LABEL: test_v8f16_div_const_8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.8h v0, v0, #3
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <8 x i16> %in to <8 x half>
  %div.i = fdiv <8 x half> %vcvt.i, <half 8.0, half 8.0, half 8.0, half 8.0, half 8.0, half 8.0, half 8.0, half 8.0>
  ret <8 x half> %div.i
}

define <8 x half> @test_v8f16_div_const_16(<8 x i16> %in) {
; CHECK-LABEL: test_v8f16_div_const_16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.8h v0, v0, #4
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <8 x i16> %in to <8 x half>
  %div.i = fdiv <8 x half> %vcvt.i, <half 16.0, half 16.0, half 16.0, half 16.0, half 16.0, half 16.0, half 16.0, half 16.0>
  ret <8 x half> %div.i
}

define <8 x half> @test_v8f16_div_const_32(<8 x i16> %in) {
; CHECK-LABEL: test_v8f16_div_const_32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    scvtf.8h v0, v0, #5
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <8 x i16> %in to <8 x half>
  %div.i = fdiv <8 x half> %vcvt.i, <half 32.0, half 32.0, half 32.0, half 32.0, half 32.0, half 32.0, half 32.0, half 32.0>
  ret <8 x half> %div.i
}

; Vector v2f32 (from v2i32)
define <2 x float> @test_v2f32_div_big_pow2_const(<2 x i32> %in) {
; CHECK-LABEL: test_v2f32_div_big_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    movi.2s v1, #47, lsl #24
; CHECK-NEXT:    scvtf.2s v0, v0
; CHECK-NEXT:    fmul.2s v0, v0, v1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %div.i = fdiv <2 x float> %vcvt.i, <float 8589934592.0, float 8589934592.0>
  ret <2 x float> %div.i
}

; Vector v4f32 (from v4i32)
define <4 x float> @test_v4f32_div_big_pow2_const(<4 x i32> %in) {
; CHECK-LABEL: test_v4f32_div_big_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    movi.4s v1, #47, lsl #24
; CHECK-NEXT:    scvtf.4s v0, v0
; CHECK-NEXT:    fmul.4s v0, v0, v1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %div.i = fdiv <4 x float> %vcvt.i, <float 8589934592.0, float 8589934592.0, float 8589934592.0, float 8589934592.0>
  ret <4 x float> %div.i
}

; Vector v2f64 (from v2i64)
define <2 x double> @test_v2f64_div_big_pow2_const(<2 x i64> %in) {
; CHECK-LABEL: test_v2f64_div_big_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov x8, #4314448443020935168 // =0x3be0000000000000
; CHECK-NEXT:    scvtf.2d v0, v0
; CHECK-NEXT:    dup.2d v1, x8
; CHECK-NEXT:    fmul.2d v0, v0, v1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i64> %in to <2 x double>
  %div.i = fdiv <2 x double> %vcvt.i, <double 36893488147419103232.0, double 36893488147419103232.0>
  ret <2 x double> %div.i
}

; Scalar f32 with non-power-of-2 constant
define float @negative_test_f32_mul_non_pow2_const(i32 %in) {
; CHECK-LABEL: negative_test_f32_mul_non_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, #36704 // =0x8f60
; CHECK-NEXT:    scvtf s0, w0
; CHECK-NEXT:    movk w8, #9666, lsl #16
; CHECK-NEXT:    fmov s1, w8
; CHECK-NEXT:    fmul s0, s0, s1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp i32 %in to float
  %mul.i = fmul float %vcvt.i, 0x3CB851EC00000000
  ret float %mul.i
}


; Vector v2f32 with non-power-of-2 constant
define <2 x float> @negative_test_v2f32_mul_non_pow2_const(<2 x i32> %in) {
; CHECK-LABEL: negative_test_v2f32_mul_non_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, #36704 // =0x8f60
; CHECK-NEXT:    scvtf.2s v0, v0
; CHECK-NEXT:    movk w8, #9666, lsl #16
; CHECK-NEXT:    dup.2s v1, w8
; CHECK-NEXT:    fmul.2s v0, v0, v1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i32> %in to <2 x float>
  %mul.i = fmul <2 x float> %vcvt.i, <float 0x3CB851EC00000000, float 0x3CB851EC00000000>
  ret <2 x float> %mul.i
}

; Vector v4f32 with non-power-of-2 constant
define <4 x float> @negative_test_v4f32_mul_non_pow2_const(<4 x i32> %in) {
; CHECK-LABEL: negative_test_v4f32_mul_non_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov w8, #36704 // =0x8f60
; CHECK-NEXT:    scvtf.4s v0, v0
; CHECK-NEXT:    movk w8, #9666, lsl #16
; CHECK-NEXT:    dup.4s v1, w8
; CHECK-NEXT:    fmul.4s v0, v0, v1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <4 x i32> %in to <4 x float>
  %mul.i = fmul <4 x float> %vcvt.i, <float 0x3CB851EC00000000, float 0x3CB851EC00000000, float 0x3CB851EC00000000, float 0x3CB851EC00000000>
  ret <4 x float> %mul.i
}

; Vector v2f64 with non-power-of-2 constant
define <2 x double> @negative_test_v2f64_mul_non_pow2_const(<2 x i64> %in) {
; CHECK-LABEL: negative_test_v2f64_mul_non_pow2_const:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov x8, #5243 // =0x147b
; CHECK-NEXT:    scvtf.2d v0, v0
; CHECK-NEXT:    movk x8, #18350, lsl #16
; CHECK-NEXT:    movk x8, #31457, lsl #32
; CHECK-NEXT:    movk x8, #16276, lsl #48
; CHECK-NEXT:    dup.2d v1, x8
; CHECK-NEXT:    fmul.2d v0, v0, v1
; CHECK-NEXT:    ret
entry:
  %vcvt.i = sitofp <2 x i64> %in to <2 x double>
  %mul.i = fmul <2 x double> %vcvt.i, <double 0.02, double 0.02>
  ret <2 x double> %mul.i
}
