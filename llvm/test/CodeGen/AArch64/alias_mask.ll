; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64 -mattr=+sve2 %s -o - | FileCheck %s

define <16 x i1> @whilewr_8(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.b, x0, x1
; CHECK-NEXT:    mov z0.b, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
entry:
  %0 = call <16 x i1> @llvm.loop.dependence.war.mask.v16i1(ptr %a, ptr %b, i64 1)
  ret <16 x i1> %0
}

define <8 x i1> @whilewr_16(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.h, x0, x1
; CHECK-NEXT:    mov z0.h, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.8b, v0.8h
; CHECK-NEXT:    ret
entry:
  %0 = call <8 x i1> @llvm.loop.dependence.war.mask.v8i1(ptr %a, ptr %b, i64 2)
  ret <8 x i1> %0
}

define <4 x i1> @whilewr_32(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.s, x0, x1
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.4h, v0.4s
; CHECK-NEXT:    ret
entry:
  %0 = call <4 x i1> @llvm.loop.dependence.war.mask.v4i1(ptr %a, ptr %b, i64 4)
  ret <4 x i1> %0
}

define <2 x i1> @whilewr_64(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.d, x0, x1
; CHECK-NEXT:    mov z0.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    ret
entry:
  %0 = call <2 x i1> @llvm.loop.dependence.war.mask.v2i1(ptr %a, ptr %b, i64 8)
  ret <2 x i1> %0
}

define <16 x i1> @whilerw_8(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_8:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilerw p0.b, x0, x1
; CHECK-NEXT:    mov z0.b, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
entry:
  %0 = call <16 x i1> @llvm.loop.dependence.raw.mask.v16i1(ptr %a, ptr %b, i64 1)
  ret <16 x i1> %0
}

define <8 x i1> @whilerw_16(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_16:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilerw p0.h, x0, x1
; CHECK-NEXT:    mov z0.h, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.8b, v0.8h
; CHECK-NEXT:    ret
entry:
  %0 = call <8 x i1> @llvm.loop.dependence.raw.mask.v8i1(ptr %a, ptr %b, i64 2)
  ret <8 x i1> %0
}

define <4 x i1> @whilerw_32(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_32:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilerw p0.s, x0, x1
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.4h, v0.4s
; CHECK-NEXT:    ret
entry:
  %0 = call <4 x i1> @llvm.loop.dependence.raw.mask.v4i1(ptr %a, ptr %b, i64 4)
  ret <4 x i1> %0
}

define <2 x i1> @whilerw_64(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_64:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilerw p0.d, x0, x1
; CHECK-NEXT:    mov z0.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.2s, v0.2d
; CHECK-NEXT:    ret
entry:
  %0 = call <2 x i1> @llvm.loop.dependence.raw.mask.v2i1(ptr %a, ptr %b, i64 8)
  ret <2 x i1> %0
}

define <32 x i1> @whilewr_8_split(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_8_split:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x9, x0, #16
; CHECK-NEXT:    whilewr p0.b, x0, x1
; CHECK-NEXT:    whilewr p1.b, x9, x1
; CHECK-NEXT:    adrp x9, .LCPI8_0
; CHECK-NEXT:    mov z0.b, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    ldr q2, [x9, :lo12:.LCPI8_0]
; CHECK-NEXT:    mov z1.b, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    shl v0.16b, v0.16b, #7
; CHECK-NEXT:    shl v1.16b, v1.16b, #7
; CHECK-NEXT:    cmlt v0.16b, v0.16b, #0
; CHECK-NEXT:    cmlt v1.16b, v1.16b, #0
; CHECK-NEXT:    and v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    and v1.16b, v1.16b, v2.16b
; CHECK-NEXT:    ext v2.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    ext v3.16b, v1.16b, v1.16b, #8
; CHECK-NEXT:    zip1 v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    zip1 v1.16b, v1.16b, v3.16b
; CHECK-NEXT:    addv h0, v0.8h
; CHECK-NEXT:    addv h1, v1.8h
; CHECK-NEXT:    str h0, [x8]
; CHECK-NEXT:    str h1, [x8, #2]
; CHECK-NEXT:    ret
entry:
  %0 = call <32 x i1> @llvm.loop.dependence.war.mask.v32i1(ptr %a, ptr %b, i64 1)
  ret <32 x i1> %0
}

define <64 x i1> @whilewr_8_split2(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_8_split2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x9, x0, #48
; CHECK-NEXT:    whilewr p0.b, x0, x1
; CHECK-NEXT:    add x10, x0, #16
; CHECK-NEXT:    whilewr p1.b, x9, x1
; CHECK-NEXT:    add x9, x0, #32
; CHECK-NEXT:    mov z0.b, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p0.b, x9, x1
; CHECK-NEXT:    adrp x9, .LCPI9_0
; CHECK-NEXT:    mov z1.b, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.b, x10, x1
; CHECK-NEXT:    ldr q4, [x9, :lo12:.LCPI9_0]
; CHECK-NEXT:    mov z2.b, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z3.b, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    shl v0.16b, v0.16b, #7
; CHECK-NEXT:    shl v1.16b, v1.16b, #7
; CHECK-NEXT:    shl v2.16b, v2.16b, #7
; CHECK-NEXT:    shl v3.16b, v3.16b, #7
; CHECK-NEXT:    cmlt v0.16b, v0.16b, #0
; CHECK-NEXT:    cmlt v1.16b, v1.16b, #0
; CHECK-NEXT:    cmlt v2.16b, v2.16b, #0
; CHECK-NEXT:    cmlt v3.16b, v3.16b, #0
; CHECK-NEXT:    and v0.16b, v0.16b, v4.16b
; CHECK-NEXT:    and v1.16b, v1.16b, v4.16b
; CHECK-NEXT:    and v2.16b, v2.16b, v4.16b
; CHECK-NEXT:    and v3.16b, v3.16b, v4.16b
; CHECK-NEXT:    ext v4.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    ext v5.16b, v1.16b, v1.16b, #8
; CHECK-NEXT:    ext v6.16b, v2.16b, v2.16b, #8
; CHECK-NEXT:    ext v7.16b, v3.16b, v3.16b, #8
; CHECK-NEXT:    zip1 v0.16b, v0.16b, v4.16b
; CHECK-NEXT:    zip1 v1.16b, v1.16b, v5.16b
; CHECK-NEXT:    zip1 v2.16b, v2.16b, v6.16b
; CHECK-NEXT:    zip1 v3.16b, v3.16b, v7.16b
; CHECK-NEXT:    addv h0, v0.8h
; CHECK-NEXT:    addv h1, v1.8h
; CHECK-NEXT:    addv h2, v2.8h
; CHECK-NEXT:    addv h3, v3.8h
; CHECK-NEXT:    str h0, [x8]
; CHECK-NEXT:    str h1, [x8, #6]
; CHECK-NEXT:    str h2, [x8, #4]
; CHECK-NEXT:    str h3, [x8, #2]
; CHECK-NEXT:    ret
entry:
  %0 = call <64 x i1> @llvm.loop.dependence.war.mask.v64i1(ptr %a, ptr %b, i64 1)
  ret <64 x i1> %0
}

define <16 x i1> @whilewr_16_split(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_16_split:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x1, #16
; CHECK-NEXT:    add x9, x0, #16
; CHECK-NEXT:    whilewr p0.h, x0, x1
; CHECK-NEXT:    whilewr p1.h, x9, x8
; CHECK-NEXT:    mov z0.h, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z1.h, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    uzp1 v0.16b, v0.16b, v1.16b
; CHECK-NEXT:    ret
entry:
  %0 = call <16 x i1> @llvm.loop.dependence.war.mask.v16i1(ptr %a, ptr %b, i64 2)
  ret <16 x i1> %0
}

define <32 x i1> @whilewr_16_split2(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_16_split2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x9, x1, #16
; CHECK-NEXT:    add x10, x0, #48
; CHECK-NEXT:    add x11, x0, #16
; CHECK-NEXT:    whilewr p1.h, x10, x9
; CHECK-NEXT:    add x10, x0, #32
; CHECK-NEXT:    whilewr p0.h, x0, x1
; CHECK-NEXT:    whilewr p2.h, x10, x1
; CHECK-NEXT:    mov z0.h, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p3.h, x11, x9
; CHECK-NEXT:    mov z2.h, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    adrp x9, .LCPI11_0
; CHECK-NEXT:    mov z1.h, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z3.h, p3/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    uzp1 v0.16b, v1.16b, v0.16b
; CHECK-NEXT:    uzp1 v1.16b, v2.16b, v3.16b
; CHECK-NEXT:    ldr q2, [x9, :lo12:.LCPI11_0]
; CHECK-NEXT:    shl v0.16b, v0.16b, #7
; CHECK-NEXT:    shl v1.16b, v1.16b, #7
; CHECK-NEXT:    cmlt v0.16b, v0.16b, #0
; CHECK-NEXT:    cmlt v1.16b, v1.16b, #0
; CHECK-NEXT:    and v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    and v1.16b, v1.16b, v2.16b
; CHECK-NEXT:    ext v2.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    ext v3.16b, v1.16b, v1.16b, #8
; CHECK-NEXT:    zip1 v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    zip1 v1.16b, v1.16b, v3.16b
; CHECK-NEXT:    addv h0, v0.8h
; CHECK-NEXT:    addv h1, v1.8h
; CHECK-NEXT:    str h0, [x8, #2]
; CHECK-NEXT:    str h1, [x8]
; CHECK-NEXT:    ret
entry:
  %0 = call <32 x i1> @llvm.loop.dependence.war.mask.v32i1(ptr %a, ptr %b, i64 2)
  ret <32 x i1> %0
}

define <8 x i1> @whilewr_32_split(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_32_split:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.s, x0, x1
; CHECK-NEXT:    add x10, x0, #16
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov w8, v0.s[1]
; CHECK-NEXT:    mov v1.16b, v0.16b
; CHECK-NEXT:    mov w9, v0.s[2]
; CHECK-NEXT:    mov v1.h[1], w8
; CHECK-NEXT:    mov w8, v0.s[3]
; CHECK-NEXT:    mov v1.h[2], w9
; CHECK-NEXT:    add x9, x1, #16
; CHECK-NEXT:    whilewr p0.s, x10, x9
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v1.h[3], w8
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    mov w9, v0.s[1]
; CHECK-NEXT:    mov v1.h[4], w8
; CHECK-NEXT:    mov w8, v0.s[2]
; CHECK-NEXT:    mov v1.h[5], w9
; CHECK-NEXT:    mov w9, v0.s[3]
; CHECK-NEXT:    mov v1.h[6], w8
; CHECK-NEXT:    mov v1.h[7], w9
; CHECK-NEXT:    xtn v0.8b, v1.8h
; CHECK-NEXT:    ret
entry:
  %0 = call <8 x i1> @llvm.loop.dependence.war.mask.v8i1(ptr %a, ptr %b, i64 4)
  ret <8 x i1> %0
}

define <16 x i1> @whilewr_32_split2(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_32_split2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x1, #32
; CHECK-NEXT:    add x9, x0, #32
; CHECK-NEXT:    whilewr p0.s, x0, x1
; CHECK-NEXT:    whilewr p1.s, x9, x8
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov w8, v0.s[1]
; CHECK-NEXT:    mov v2.16b, v0.16b
; CHECK-NEXT:    mov w10, v0.s[2]
; CHECK-NEXT:    mov w9, v1.s[1]
; CHECK-NEXT:    mov v3.16b, v1.16b
; CHECK-NEXT:    mov w11, v1.s[3]
; CHECK-NEXT:    mov v2.h[1], w8
; CHECK-NEXT:    mov w8, v1.s[2]
; CHECK-NEXT:    mov v3.h[1], w9
; CHECK-NEXT:    mov w9, v0.s[3]
; CHECK-NEXT:    mov v2.h[2], w10
; CHECK-NEXT:    add x10, x1, #16
; CHECK-NEXT:    mov v3.h[2], w8
; CHECK-NEXT:    add x8, x0, #16
; CHECK-NEXT:    whilewr p0.s, x8, x10
; CHECK-NEXT:    add x8, x1, #48
; CHECK-NEXT:    add x10, x0, #48
; CHECK-NEXT:    whilewr p1.s, x10, x8
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v2.h[3], w9
; CHECK-NEXT:    mov z1.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v3.h[3], w11
; CHECK-NEXT:    fmov w9, s0
; CHECK-NEXT:    mov w8, v0.s[1]
; CHECK-NEXT:    fmov w10, s1
; CHECK-NEXT:    mov w11, v1.s[1]
; CHECK-NEXT:    mov v2.h[4], w9
; CHECK-NEXT:    mov w9, v0.s[2]
; CHECK-NEXT:    mov v3.h[4], w10
; CHECK-NEXT:    mov w10, v1.s[2]
; CHECK-NEXT:    mov v2.h[5], w8
; CHECK-NEXT:    mov w8, v0.s[3]
; CHECK-NEXT:    mov v3.h[5], w11
; CHECK-NEXT:    mov w11, v1.s[3]
; CHECK-NEXT:    mov v2.h[6], w9
; CHECK-NEXT:    mov v3.h[6], w10
; CHECK-NEXT:    mov v2.h[7], w8
; CHECK-NEXT:    mov v3.h[7], w11
; CHECK-NEXT:    uzp1 v0.16b, v2.16b, v3.16b
; CHECK-NEXT:    ret
entry:
  %0 = call <16 x i1> @llvm.loop.dependence.war.mask.v16i1(ptr %a, ptr %b, i64 4)
  ret <16 x i1> %0
}

define <32 x i1> @whilewr_32_split3(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_32_split3:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.s, x0, x1
; CHECK-NEXT:    add x9, x1, #32
; CHECK-NEXT:    add x10, x0, #96
; CHECK-NEXT:    add x11, x0, #64
; CHECK-NEXT:    whilewr p1.s, x10, x9
; CHECK-NEXT:    add x10, x0, #32
; CHECK-NEXT:    whilewr p2.s, x11, x1
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p0.s, x10, x9
; CHECK-NEXT:    mov z4.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z5.s, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z2.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov w9, v0.s[1]
; CHECK-NEXT:    mov w10, v0.s[2]
; CHECK-NEXT:    mov w11, v4.s[1]
; CHECK-NEXT:    mov w13, v0.s[3]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    mov v1.16b, v4.16b
; CHECK-NEXT:    mov w12, v5.s[1]
; CHECK-NEXT:    mov v3.16b, v5.16b
; CHECK-NEXT:    mov w17, v4.s[2]
; CHECK-NEXT:    mov w14, v2.s[1]
; CHECK-NEXT:    mov w15, v2.s[2]
; CHECK-NEXT:    mov w16, v2.s[3]
; CHECK-NEXT:    mov v0.h[1], w9
; CHECK-NEXT:    // kill: def $q2 killed $q2 killed $z2
; CHECK-NEXT:    mov w18, v5.s[2]
; CHECK-NEXT:    mov w9, v5.s[3]
; CHECK-NEXT:    mov v1.h[1], w11
; CHECK-NEXT:    mov w11, v4.s[3]
; CHECK-NEXT:    mov v3.h[1], w12
; CHECK-NEXT:    add x12, x1, #16
; CHECK-NEXT:    add x1, x1, #48
; CHECK-NEXT:    mov v2.h[1], w14
; CHECK-NEXT:    add x14, x0, #16
; CHECK-NEXT:    whilewr p0.s, x14, x12
; CHECK-NEXT:    mov v0.h[2], w10
; CHECK-NEXT:    add x10, x0, #80
; CHECK-NEXT:    add x14, x0, #112
; CHECK-NEXT:    whilewr p2.s, x10, x12
; CHECK-NEXT:    add x10, x0, #48
; CHECK-NEXT:    whilewr p1.s, x14, x1
; CHECK-NEXT:    mov v1.h[2], w17
; CHECK-NEXT:    mov v3.h[2], w18
; CHECK-NEXT:    mov v2.h[2], w15
; CHECK-NEXT:    mov z4.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p0.s, x10, x1
; CHECK-NEXT:    mov z5.s, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z6.s, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.h[3], w13
; CHECK-NEXT:    mov z7.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v1.h[3], w11
; CHECK-NEXT:    mov v3.h[3], w9
; CHECK-NEXT:    fmov w10, s4
; CHECK-NEXT:    mov v2.h[3], w16
; CHECK-NEXT:    fmov w12, s5
; CHECK-NEXT:    fmov w14, s6
; CHECK-NEXT:    fmov w15, s7
; CHECK-NEXT:    mov w9, v4.s[1]
; CHECK-NEXT:    mov w11, v5.s[1]
; CHECK-NEXT:    mov w13, v6.s[1]
; CHECK-NEXT:    mov v0.h[4], w10
; CHECK-NEXT:    mov w10, v4.s[2]
; CHECK-NEXT:    mov v1.h[4], w12
; CHECK-NEXT:    mov v3.h[4], w14
; CHECK-NEXT:    mov w12, v7.s[1]
; CHECK-NEXT:    mov v2.h[4], w15
; CHECK-NEXT:    mov w14, v5.s[2]
; CHECK-NEXT:    mov w15, v6.s[2]
; CHECK-NEXT:    mov v0.h[5], w9
; CHECK-NEXT:    mov w9, v4.s[3]
; CHECK-NEXT:    mov v1.h[5], w11
; CHECK-NEXT:    mov v3.h[5], w13
; CHECK-NEXT:    mov w11, v7.s[2]
; CHECK-NEXT:    mov v2.h[5], w12
; CHECK-NEXT:    mov w12, v5.s[3]
; CHECK-NEXT:    mov w13, v6.s[3]
; CHECK-NEXT:    mov v0.h[6], w10
; CHECK-NEXT:    mov v1.h[6], w14
; CHECK-NEXT:    mov v3.h[6], w15
; CHECK-NEXT:    mov w14, v7.s[3]
; CHECK-NEXT:    mov v2.h[6], w11
; CHECK-NEXT:    mov v0.h[7], w9
; CHECK-NEXT:    adrp x9, .LCPI14_0
; CHECK-NEXT:    mov v1.h[7], w12
; CHECK-NEXT:    mov v3.h[7], w13
; CHECK-NEXT:    mov v2.h[7], w14
; CHECK-NEXT:    uzp1 v1.16b, v3.16b, v1.16b
; CHECK-NEXT:    uzp1 v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    ldr q2, [x9, :lo12:.LCPI14_0]
; CHECK-NEXT:    shl v1.16b, v1.16b, #7
; CHECK-NEXT:    shl v0.16b, v0.16b, #7
; CHECK-NEXT:    cmlt v1.16b, v1.16b, #0
; CHECK-NEXT:    cmlt v0.16b, v0.16b, #0
; CHECK-NEXT:    and v1.16b, v1.16b, v2.16b
; CHECK-NEXT:    and v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    ext v2.16b, v1.16b, v1.16b, #8
; CHECK-NEXT:    ext v3.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    zip1 v1.16b, v1.16b, v2.16b
; CHECK-NEXT:    zip1 v0.16b, v0.16b, v3.16b
; CHECK-NEXT:    addv h1, v1.8h
; CHECK-NEXT:    addv h0, v0.8h
; CHECK-NEXT:    str h1, [x8, #2]
; CHECK-NEXT:    str h0, [x8]
; CHECK-NEXT:    ret
entry:
  %0 = call <32 x i1> @llvm.loop.dependence.war.mask.v32i1(ptr %a, ptr %b, i64 4)
  ret <32 x i1> %0
}

define <4 x i1> @whilewr_64_split(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_64_split:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.d, x0, x1
; CHECK-NEXT:    add x8, x1, #16
; CHECK-NEXT:    add x9, x0, #16
; CHECK-NEXT:    mov z0.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p0.d, x9, x8
; CHECK-NEXT:    mov z1.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.s[1], v0.s[2]
; CHECK-NEXT:    mov v0.s[2], v1.s[0]
; CHECK-NEXT:    mov v0.s[3], v1.s[2]
; CHECK-NEXT:    xtn v0.4h, v0.4s
; CHECK-NEXT:    ret
entry:
  %0 = call <4 x i1> @llvm.loop.dependence.war.mask.v4i1(ptr %a, ptr %b, i64 8)
  ret <4 x i1> %0
}

define <8 x i1> @whilewr_64_split2(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_64_split2:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x1, #32
; CHECK-NEXT:    add x9, x0, #32
; CHECK-NEXT:    whilewr p0.d, x0, x1
; CHECK-NEXT:    whilewr p1.d, x9, x8
; CHECK-NEXT:    add x8, x1, #16
; CHECK-NEXT:    add x9, x0, #16
; CHECK-NEXT:    mov z0.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p0.d, x9, x8
; CHECK-NEXT:    add x8, x1, #48
; CHECK-NEXT:    mov z1.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    add x9, x0, #48
; CHECK-NEXT:    whilewr p1.d, x9, x8
; CHECK-NEXT:    mov z2.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.s[1], v0.s[2]
; CHECK-NEXT:    mov v1.s[1], v1.s[2]
; CHECK-NEXT:    mov z3.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.s[2], v2.s[0]
; CHECK-NEXT:    mov v1.s[2], v3.s[0]
; CHECK-NEXT:    mov v0.s[3], v2.s[2]
; CHECK-NEXT:    mov v1.s[3], v3.s[2]
; CHECK-NEXT:    uzp1 v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    xtn v0.8b, v0.8h
; CHECK-NEXT:    ret
entry:
  %0 = call <8 x i1> @llvm.loop.dependence.war.mask.v8i1(ptr %a, ptr %b, i64 8)
  ret <8 x i1> %0
}

define <16 x i1> @whilewr_64_split3(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_64_split3:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x8, x1, #96
; CHECK-NEXT:    add x9, x0, #96
; CHECK-NEXT:    whilewr p2.d, x0, x1
; CHECK-NEXT:    whilewr p1.d, x9, x8
; CHECK-NEXT:    add x8, x1, #112
; CHECK-NEXT:    add x9, x0, #112
; CHECK-NEXT:    whilewr p0.d, x9, x8
; CHECK-NEXT:    add x8, x1, #64
; CHECK-NEXT:    add x9, x0, #64
; CHECK-NEXT:    whilewr p3.d, x9, x8
; CHECK-NEXT:    add x8, x1, #32
; CHECK-NEXT:    add x9, x0, #32
; CHECK-NEXT:    mov z0.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x9, x8
; CHECK-NEXT:    add x8, x1, #80
; CHECK-NEXT:    add x9, x0, #80
; CHECK-NEXT:    mov z1.d, p3/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z2.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p2.d, x9, x8
; CHECK-NEXT:    add x8, x1, #16
; CHECK-NEXT:    add x9, x0, #16
; CHECK-NEXT:    mov z3.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x9, x8
; CHECK-NEXT:    add x8, x1, #48
; CHECK-NEXT:    add x9, x0, #48
; CHECK-NEXT:    mov z4.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.s[1], v0.s[2]
; CHECK-NEXT:    whilewr p0.d, x9, x8
; CHECK-NEXT:    mov v1.s[1], v1.s[2]
; CHECK-NEXT:    mov v2.s[1], v2.s[2]
; CHECK-NEXT:    mov v3.s[1], v3.s[2]
; CHECK-NEXT:    mov z5.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z6.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z7.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.s[2], v4.s[0]
; CHECK-NEXT:    mov v2.s[2], v6.s[0]
; CHECK-NEXT:    mov v1.s[2], v5.s[0]
; CHECK-NEXT:    mov v3.s[2], v7.s[0]
; CHECK-NEXT:    mov v0.s[3], v4.s[2]
; CHECK-NEXT:    mov v1.s[3], v5.s[2]
; CHECK-NEXT:    mov v2.s[3], v6.s[2]
; CHECK-NEXT:    mov v3.s[3], v7.s[2]
; CHECK-NEXT:    uzp1 v0.8h, v1.8h, v0.8h
; CHECK-NEXT:    uzp1 v1.8h, v2.8h, v3.8h
; CHECK-NEXT:    uzp1 v0.16b, v1.16b, v0.16b
; CHECK-NEXT:    ret
entry:
  %0 = call <16 x i1> @llvm.loop.dependence.war.mask.v16i1(ptr %a, ptr %b, i64 8)
  ret <16 x i1> %0
}

define <32 x i1> @whilewr_64_split4(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_64_split4:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    add x11, x1, #112
; CHECK-NEXT:    add x13, x0, #112
; CHECK-NEXT:    add x10, x1, #96
; CHECK-NEXT:    add x9, x0, #96
; CHECK-NEXT:    whilewr p1.d, x13, x11
; CHECK-NEXT:    add x12, x1, #64
; CHECK-NEXT:    whilewr p0.d, x9, x10
; CHECK-NEXT:    add x9, x0, #64
; CHECK-NEXT:    add x13, x1, #80
; CHECK-NEXT:    whilewr p2.d, x9, x12
; CHECK-NEXT:    mov z1.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    add x9, x0, #80
; CHECK-NEXT:    whilewr p1.d, x0, x1
; CHECK-NEXT:    mov z0.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    add x14, x1, #32
; CHECK-NEXT:    whilewr p0.d, x9, x13
; CHECK-NEXT:    add x9, x0, #32
; CHECK-NEXT:    add x15, x0, #224
; CHECK-NEXT:    mov z3.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x9, x14
; CHECK-NEXT:    mov z2.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    add x9, x1, #16
; CHECK-NEXT:    mov v0.s[1], v0.s[2]
; CHECK-NEXT:    mov z21.d, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z4.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x15, x10
; CHECK-NEXT:    add x10, x0, #240
; CHECK-NEXT:    whilewr p2.d, x10, x11
; CHECK-NEXT:    add x10, x0, #192
; CHECK-NEXT:    add x15, x1, #48
; CHECK-NEXT:    mov z5.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x10, x12
; CHECK-NEXT:    add x10, x0, #208
; CHECK-NEXT:    mov z6.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p2.d, x10, x13
; CHECK-NEXT:    add x10, x0, #160
; CHECK-NEXT:    mov z7.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x10, x14
; CHECK-NEXT:    add x10, x0, #128
; CHECK-NEXT:    mov z16.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    add x11, x0, #176
; CHECK-NEXT:    whilewr p2.d, x10, x1
; CHECK-NEXT:    mov z17.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x11, x15
; CHECK-NEXT:    add x10, x0, #144
; CHECK-NEXT:    add x11, x0, #16
; CHECK-NEXT:    mov z18.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p2.d, x10, x9
; CHECK-NEXT:    mov z19.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p1.d, x11, x9
; CHECK-NEXT:    add x9, x0, #48
; CHECK-NEXT:    mov z20.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    whilewr p2.d, x9, x15
; CHECK-NEXT:    mov v5.s[1], v5.s[2]
; CHECK-NEXT:    mov v7.s[1], v7.s[2]
; CHECK-NEXT:    mov v17.s[1], v17.s[2]
; CHECK-NEXT:    mov v18.s[1], v18.s[2]
; CHECK-NEXT:    mov v2.s[1], v2.s[2]
; CHECK-NEXT:    mov v3.s[1], v3.s[2]
; CHECK-NEXT:    mov v4.s[1], v4.s[2]
; CHECK-NEXT:    mov z22.d, p1/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov z23.d, p2/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    mov v0.s[2], v1.s[0]
; CHECK-NEXT:    mov v5.s[2], v6.s[0]
; CHECK-NEXT:    adrp x9, .LCPI18_0
; CHECK-NEXT:    mov v7.s[2], v16.s[0]
; CHECK-NEXT:    mov v17.s[2], v19.s[0]
; CHECK-NEXT:    mov v18.s[2], v20.s[0]
; CHECK-NEXT:    mov v2.s[2], v21.s[0]
; CHECK-NEXT:    mov v3.s[2], v22.s[0]
; CHECK-NEXT:    mov v4.s[2], v23.s[0]
; CHECK-NEXT:    mov v0.s[3], v1.s[2]
; CHECK-NEXT:    mov v5.s[3], v6.s[2]
; CHECK-NEXT:    mov v7.s[3], v16.s[2]
; CHECK-NEXT:    mov v17.s[3], v19.s[2]
; CHECK-NEXT:    mov v18.s[3], v20.s[2]
; CHECK-NEXT:    mov v2.s[3], v21.s[2]
; CHECK-NEXT:    mov v3.s[3], v22.s[2]
; CHECK-NEXT:    mov v4.s[3], v23.s[2]
; CHECK-NEXT:    uzp1 v1.8h, v7.8h, v5.8h
; CHECK-NEXT:    uzp1 v5.8h, v18.8h, v17.8h
; CHECK-NEXT:    uzp1 v0.8h, v2.8h, v0.8h
; CHECK-NEXT:    uzp1 v2.8h, v3.8h, v4.8h
; CHECK-NEXT:    uzp1 v1.16b, v5.16b, v1.16b
; CHECK-NEXT:    uzp1 v0.16b, v2.16b, v0.16b
; CHECK-NEXT:    ldr q2, [x9, :lo12:.LCPI18_0]
; CHECK-NEXT:    shl v1.16b, v1.16b, #7
; CHECK-NEXT:    shl v0.16b, v0.16b, #7
; CHECK-NEXT:    cmlt v1.16b, v1.16b, #0
; CHECK-NEXT:    cmlt v0.16b, v0.16b, #0
; CHECK-NEXT:    and v1.16b, v1.16b, v2.16b
; CHECK-NEXT:    and v0.16b, v0.16b, v2.16b
; CHECK-NEXT:    ext v2.16b, v1.16b, v1.16b, #8
; CHECK-NEXT:    ext v3.16b, v0.16b, v0.16b, #8
; CHECK-NEXT:    zip1 v1.16b, v1.16b, v2.16b
; CHECK-NEXT:    zip1 v0.16b, v0.16b, v3.16b
; CHECK-NEXT:    addv h1, v1.8h
; CHECK-NEXT:    addv h0, v0.8h
; CHECK-NEXT:    str h1, [x8, #2]
; CHECK-NEXT:    str h0, [x8]
; CHECK-NEXT:    ret
entry:
  %0 = call <32 x i1> @llvm.loop.dependence.war.mask.v32i1(ptr %a, ptr %b, i64 8)
  ret <32 x i1> %0
}

define <9 x i1> @whilewr_8_widen(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_8_widen:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.b, x0, x1
; CHECK-NEXT:    mov z0.b, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    umov w9, v0.b[0]
; CHECK-NEXT:    umov w10, v0.b[1]
; CHECK-NEXT:    umov w11, v0.b[2]
; CHECK-NEXT:    umov w12, v0.b[7]
; CHECK-NEXT:    and w9, w9, #0x1
; CHECK-NEXT:    bfi w9, w10, #1, #1
; CHECK-NEXT:    umov w10, v0.b[3]
; CHECK-NEXT:    bfi w9, w11, #2, #1
; CHECK-NEXT:    umov w11, v0.b[4]
; CHECK-NEXT:    bfi w9, w10, #3, #1
; CHECK-NEXT:    umov w10, v0.b[5]
; CHECK-NEXT:    bfi w9, w11, #4, #1
; CHECK-NEXT:    umov w11, v0.b[6]
; CHECK-NEXT:    bfi w9, w10, #5, #1
; CHECK-NEXT:    umov w10, v0.b[8]
; CHECK-NEXT:    bfi w9, w11, #6, #1
; CHECK-NEXT:    ubfiz w11, w12, #7, #1
; CHECK-NEXT:    orr w9, w9, w11
; CHECK-NEXT:    orr w9, w9, w10, lsl #8
; CHECK-NEXT:    and w9, w9, #0x1ff
; CHECK-NEXT:    strh w9, [x8]
; CHECK-NEXT:    ret
entry:
  %0 = call <9 x i1> @llvm.loop.dependence.war.mask.v9i1(ptr %a, ptr %b, i64 1)
  ret <9 x i1> %0
}

define <7 x i1> @whilewr_16_widen(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_16_widen:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.h, x0, x1
; CHECK-NEXT:    mov z0.h, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.8b, v0.8h
; CHECK-NEXT:    umov w0, v0.b[0]
; CHECK-NEXT:    umov w1, v0.b[1]
; CHECK-NEXT:    umov w2, v0.b[2]
; CHECK-NEXT:    umov w3, v0.b[3]
; CHECK-NEXT:    umov w4, v0.b[4]
; CHECK-NEXT:    umov w5, v0.b[5]
; CHECK-NEXT:    umov w6, v0.b[6]
; CHECK-NEXT:    ret
entry:
  %0 = call <7 x i1> @llvm.loop.dependence.war.mask.v7i1(ptr %a, ptr %b, i64 2)
  ret <7 x i1> %0
}

define <3 x i1> @whilewr_32_widen(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_32_widen:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    whilewr p0.s, x0, x1
; CHECK-NEXT:    mov z0.s, p0/z, #-1 // =0xffffffffffffffff
; CHECK-NEXT:    xtn v0.4h, v0.4s
; CHECK-NEXT:    umov w0, v0.h[0]
; CHECK-NEXT:    umov w1, v0.h[1]
; CHECK-NEXT:    umov w2, v0.h[2]
; CHECK-NEXT:    ret
entry:
  %0 = call <3 x i1> @llvm.loop.dependence.war.mask.v3i1(ptr %a, ptr %b, i64 4)
  ret <3 x i1> %0
}

define <16 x i1> @whilewr_badimm(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_badimm:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    mov x8, #6148914691236517205 // =0x5555555555555555
; CHECK-NEXT:    sub x9, x1, x0
; CHECK-NEXT:    index z0.d, #0, #1
; CHECK-NEXT:    movk x8, #21846
; CHECK-NEXT:    smulh x8, x9, x8
; CHECK-NEXT:    mov z1.d, z0.d
; CHECK-NEXT:    mov z2.d, z0.d
; CHECK-NEXT:    mov z4.d, z0.d
; CHECK-NEXT:    mov z5.d, z0.d
; CHECK-NEXT:    mov z6.d, z0.d
; CHECK-NEXT:    mov z7.d, z0.d
; CHECK-NEXT:    mov z16.d, z0.d
; CHECK-NEXT:    add x8, x8, x8, lsr #63
; CHECK-NEXT:    add z1.d, z1.d, #12 // =0xc
; CHECK-NEXT:    add z2.d, z2.d, #10 // =0xa
; CHECK-NEXT:    add z4.d, z4.d, #8 // =0x8
; CHECK-NEXT:    add z5.d, z5.d, #6 // =0x6
; CHECK-NEXT:    add z6.d, z6.d, #4 // =0x4
; CHECK-NEXT:    dup v3.2d, x8
; CHECK-NEXT:    add z16.d, z16.d, #14 // =0xe
; CHECK-NEXT:    add z7.d, z7.d, #2 // =0x2
; CHECK-NEXT:    cmp x8, #1
; CHECK-NEXT:    cset w8, lt
; CHECK-NEXT:    cmhi v0.2d, v3.2d, v0.2d
; CHECK-NEXT:    cmhi v1.2d, v3.2d, v1.2d
; CHECK-NEXT:    cmhi v2.2d, v3.2d, v2.2d
; CHECK-NEXT:    cmhi v4.2d, v3.2d, v4.2d
; CHECK-NEXT:    cmhi v16.2d, v3.2d, v16.2d
; CHECK-NEXT:    cmhi v5.2d, v3.2d, v5.2d
; CHECK-NEXT:    cmhi v6.2d, v3.2d, v6.2d
; CHECK-NEXT:    cmhi v3.2d, v3.2d, v7.2d
; CHECK-NEXT:    uzp1 v1.4s, v1.4s, v16.4s
; CHECK-NEXT:    uzp1 v2.4s, v4.4s, v2.4s
; CHECK-NEXT:    uzp1 v4.4s, v6.4s, v5.4s
; CHECK-NEXT:    uzp1 v0.4s, v0.4s, v3.4s
; CHECK-NEXT:    uzp1 v1.8h, v2.8h, v1.8h
; CHECK-NEXT:    uzp1 v0.8h, v0.8h, v4.8h
; CHECK-NEXT:    uzp1 v0.16b, v0.16b, v1.16b
; CHECK-NEXT:    dup v1.16b, w8
; CHECK-NEXT:    orr v0.16b, v0.16b, v1.16b
; CHECK-NEXT:    ret
entry:
  %0 = call <16 x i1> @llvm.loop.dependence.war.mask.v16i1(ptr %a, ptr %b, i64 3)
  ret <16 x i1> %0
}

; Scalarizing <1 x i1> types

define <1 x i1> @whilewr_8_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_8_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #0
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.war.mask.v1i1(ptr %a, ptr %b, i64 1)
  ret <1 x i1> %0
}

define <1 x i1> @whilewr_16_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_16_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #1
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.war.mask.v1i1(ptr %a, ptr %b, i64 2)
  ret <1 x i1> %0
}

define <1 x i1> @whilewr_32_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_32_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #3
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.war.mask.v1i1(ptr %a, ptr %b, i64 4)
  ret <1 x i1> %0
}

define <1 x i1> @whilewr_64_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilewr_64_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #7
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.war.mask.v1i1(ptr %a, ptr %b, i64 8)
  ret <1 x i1> %0
}

define <1 x i1> @whilerw_8_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_8_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #0
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.raw.mask.v1i1(ptr %a, ptr %b, i64 1)
  ret <1 x i1> %0
}

define <1 x i1> @whilerw_16_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_16_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #1
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.raw.mask.v1i1(ptr %a, ptr %b, i64 2)
  ret <1 x i1> %0
}

define <1 x i1> @whilerw_32_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_32_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #3
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.raw.mask.v1i1(ptr %a, ptr %b, i64 4)
  ret <1 x i1> %0
}

define <1 x i1> @whilerw_64_scalarize(ptr %a, ptr %b) {
; CHECK-LABEL: whilerw_64_scalarize:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    subs x8, x1, x0
; CHECK-NEXT:    cmp x8, #7
; CHECK-NEXT:    cset w8, gt
; CHECK-NEXT:    cmp x1, x0
; CHECK-NEXT:    csinc w0, w8, wzr, ne
; CHECK-NEXT:    ret
entry:
  %0 = call <1 x i1> @llvm.loop.dependence.raw.mask.v1i1(ptr %a, ptr %b, i64 8)
  ret <1 x i1> %0
}
