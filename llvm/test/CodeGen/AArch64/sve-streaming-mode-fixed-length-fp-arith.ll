; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -mattr=+sme -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE

target triple = "aarch64-unknown-linux-gnu"

;
; FADD
;

define <2 x half> @fadd_v2f16(<2 x half> %op1, <2 x half> %op2) {
; CHECK-LABEL: fadd_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fadd z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fadd v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fadd <2 x half> %op1, %op2
  ret <2 x half> %res
}

define <4 x half> @fadd_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fadd_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fadd z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fadd v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fadd <4 x half> %op1, %op2
  ret <4 x half> %res
}

define <8 x half> @fadd_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fadd_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fadd z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v2.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v3.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fadd v2.4s, v3.4s, v2.4s
; NONEON-NOSVE-NEXT:    fadd v1.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v2.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v0.8h, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fadd <8 x half> %op1, %op2
  ret <8 x half> %res
}

define void @fadd_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fadd_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fadd z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fadd z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fcvtl v4.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl v6.4s, v3.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fcvtl v5.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v7.4s, v2.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v3.4s, v3.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v2.4s, v2.8h
; NONEON-NOSVE-NEXT:    fadd v4.4s, v5.4s, v4.4s
; NONEON-NOSVE-NEXT:    fadd v5.4s, v7.4s, v6.4s
; NONEON-NOSVE-NEXT:    fadd v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fadd v2.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    fcvtn v1.4h, v4.4s
; NONEON-NOSVE-NEXT:    fcvtn v3.4h, v5.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v1.8h, v0.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v3.8h, v2.4s
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = fadd <16 x half> %op1, %op2
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fadd_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fadd_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fadd z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fadd v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = fadd <2 x float> %op1, %op2
  ret <2 x float> %res
}

define <4 x float> @fadd_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fadd_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fadd z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fadd v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fadd <4 x float> %op1, %op2
  ret <4 x float> %res
}

define void @fadd_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fadd_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fadd z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fadd z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fadd v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fadd v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = fadd <8 x float> %op1, %op2
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fadd_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fadd_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fadd z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fadd v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = fadd <2 x double> %op1, %op2
  ret <2 x double> %res
}

define void @fadd_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fadd_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fadd z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fadd z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fadd_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fadd v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fadd v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = fadd <4 x double> %op1, %op2
  store <4 x double> %res, ptr %a
  ret void
}

;
; FDIV
;

define <2 x half> @fdiv_v2f16(<2 x half> %op1, <2 x half> %op2) {
; CHECK-LABEL: fdiv_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fdiv z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fdiv v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fdiv <2 x half> %op1, %op2
  ret <2 x half> %res
}

define <4 x half> @fdiv_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fdiv_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fdiv z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fdiv v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fdiv <4 x half> %op1, %op2
  ret <4 x half> %res
}

define <8 x half> @fdiv_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fdiv_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fdiv z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v2.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v3.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fdiv v2.4s, v3.4s, v2.4s
; NONEON-NOSVE-NEXT:    fdiv v1.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v2.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v0.8h, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fdiv <8 x half> %op1, %op2
  ret <8 x half> %res
}

define void @fdiv_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fdiv_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fdivr z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fdiv z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q4, q1, [x1]
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    fcvtl v3.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fcvtl v2.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v5.4s, v4.8h
; NONEON-NOSVE-NEXT:    fcvtl v4.4s, v4.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fdiv v2.4s, v3.4s, v2.4s
; NONEON-NOSVE-NEXT:    ldr q3, [x0]
; NONEON-NOSVE-NEXT:    fcvtl2 v6.4s, v3.8h
; NONEON-NOSVE-NEXT:    fcvtl v3.4s, v3.4h
; NONEON-NOSVE-NEXT:    fdiv v3.4s, v3.4s, v4.4s
; NONEON-NOSVE-NEXT:    fcvtn v2.4h, v2.4s
; NONEON-NOSVE-NEXT:    fdiv v5.4s, v6.4s, v5.4s
; NONEON-NOSVE-NEXT:    fdiv v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v1.4h, v3.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v1.8h, v5.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v2.8h, v0.4s
; NONEON-NOSVE-NEXT:    stp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = fdiv <16 x half> %op1, %op2
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fdiv_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fdiv_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fdiv v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = fdiv <2 x float> %op1, %op2
  ret <2 x float> %res
}

define <4 x float> @fdiv_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fdiv_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fdiv v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fdiv <4 x float> %op1, %op2
  ret <4 x float> %res
}

define void @fdiv_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fdiv_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fdivr z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fdiv z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fdiv v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fdiv v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = fdiv <8 x float> %op1, %op2
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fdiv_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fdiv_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fdiv z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fdiv v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = fdiv <2 x double> %op1, %op2
  ret <2 x double> %res
}

define void @fdiv_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fdiv_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fdivr z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fdiv z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fdiv_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fdiv v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fdiv v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = fdiv <4 x double> %op1, %op2
  store <4 x double> %res, ptr %a
  ret void
}

;
; FMA
;

define <2 x half> @fma_v2f16(<2 x half> %op1, <2 x half> %op2, <2 x half> %op3) {
; CHECK-LABEL: fma_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmad z0.h, p0/m, z1.h, z2.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d2 killed $d2 def $q2
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h3, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s6, h2
; NONEON-NOSVE-NEXT:    fcvt s7, h1
; NONEON-NOSVE-NEXT:    fcvt s16, h0
; NONEON-NOSVE-NEXT:    mov h17, v2.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h19, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fmadd s6, s16, s7, s6
; NONEON-NOSVE-NEXT:    mov h16, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s7, h19
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fmadd s3, s5, s4, s3
; NONEON-NOSVE-NEXT:    fcvt s4, h17
; NONEON-NOSVE-NEXT:    fcvt s5, h18
; NONEON-NOSVE-NEXT:    fcvt h0, s6
; NONEON-NOSVE-NEXT:    fmadd s4, s7, s5, s4
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fcvt s5, h16
; NONEON-NOSVE-NEXT:    mov v0.h[1], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h3, s4
; NONEON-NOSVE-NEXT:    fmadd s1, s5, s1, s2
; NONEON-NOSVE-NEXT:    mov v0.h[2], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x half> @llvm.fma.v2f16(<2 x half> %op1, <2 x half> %op2, <2 x half> %op3)
  ret <2 x half> %res
}

define <4 x half> @fma_v4f16(<4 x half> %op1, <4 x half> %op2, <4 x half> %op3) {
; CHECK-LABEL: fma_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmad z0.h, p0/m, z1.h, z2.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d2 killed $d2 def $q2
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h3, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s6, h2
; NONEON-NOSVE-NEXT:    fcvt s7, h1
; NONEON-NOSVE-NEXT:    fcvt s16, h0
; NONEON-NOSVE-NEXT:    mov h17, v2.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h19, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fmadd s6, s16, s7, s6
; NONEON-NOSVE-NEXT:    mov h16, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s7, h19
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fmadd s3, s5, s4, s3
; NONEON-NOSVE-NEXT:    fcvt s4, h17
; NONEON-NOSVE-NEXT:    fcvt s5, h18
; NONEON-NOSVE-NEXT:    fcvt h0, s6
; NONEON-NOSVE-NEXT:    fmadd s4, s7, s5, s4
; NONEON-NOSVE-NEXT:    fcvt h3, s3
; NONEON-NOSVE-NEXT:    fcvt s5, h16
; NONEON-NOSVE-NEXT:    mov v0.h[1], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h3, s4
; NONEON-NOSVE-NEXT:    fmadd s1, s5, s1, s2
; NONEON-NOSVE-NEXT:    mov v0.h[2], v3.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.fma.v4f16(<4 x half> %op1, <4 x half> %op2, <4 x half> %op3)
  ret <4 x half> %res
}

define <8 x half> @fma_v8f16(<8 x half> %op1, <8 x half> %op2, <8 x half> %op3) {
; CHECK-LABEL: fma_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q2 killed $q2 def $z2
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmad z0.h, p0/m, z1.h, z2.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov h3, v2.h[1]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s6, h2
; NONEON-NOSVE-NEXT:    fcvt s7, h1
; NONEON-NOSVE-NEXT:    fcvt s16, h0
; NONEON-NOSVE-NEXT:    mov h17, v2.h[2]
; NONEON-NOSVE-NEXT:    mov h18, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h19, v0.h[2]
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fmadd s6, s16, s7, s6
; NONEON-NOSVE-NEXT:    fcvt s7, h17
; NONEON-NOSVE-NEXT:    fcvt s16, h18
; NONEON-NOSVE-NEXT:    fcvt s17, h19
; NONEON-NOSVE-NEXT:    mov h18, v1.h[3]
; NONEON-NOSVE-NEXT:    mov h19, v0.h[3]
; NONEON-NOSVE-NEXT:    fmadd s4, s5, s4, s3
; NONEON-NOSVE-NEXT:    mov h5, v2.h[3]
; NONEON-NOSVE-NEXT:    fcvt h3, s6
; NONEON-NOSVE-NEXT:    fmadd s6, s17, s16, s7
; NONEON-NOSVE-NEXT:    mov h17, v2.h[4]
; NONEON-NOSVE-NEXT:    fcvt s7, h18
; NONEON-NOSVE-NEXT:    fcvt s16, h19
; NONEON-NOSVE-NEXT:    mov h18, v1.h[4]
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    mov h19, v0.h[4]
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fcvt s18, h18
; NONEON-NOSVE-NEXT:    mov v3.h[1], v4.h[0]
; NONEON-NOSVE-NEXT:    mov h4, v2.h[5]
; NONEON-NOSVE-NEXT:    fmadd s5, s16, s7, s5
; NONEON-NOSVE-NEXT:    mov h7, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h16, v0.h[5]
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    mov v3.h[2], v6.h[0]
; NONEON-NOSVE-NEXT:    mov h6, v2.h[6]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt h5, s5
; NONEON-NOSVE-NEXT:    fmadd s17, s19, s18, s17
; NONEON-NOSVE-NEXT:    mov h18, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h19, v0.h[6]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[7]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fmadd s4, s16, s7, s4
; NONEON-NOSVE-NEXT:    mov v3.h[3], v5.h[0]
; NONEON-NOSVE-NEXT:    fcvt s5, h6
; NONEON-NOSVE-NEXT:    fcvt s6, h18
; NONEON-NOSVE-NEXT:    fcvt s7, h19
; NONEON-NOSVE-NEXT:    fcvt h16, s17
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fcvt h4, s4
; NONEON-NOSVE-NEXT:    fmadd s5, s7, s6, s5
; NONEON-NOSVE-NEXT:    mov v3.h[4], v16.h[0]
; NONEON-NOSVE-NEXT:    fmadd s0, s0, s1, s2
; NONEON-NOSVE-NEXT:    mov v3.h[5], v4.h[0]
; NONEON-NOSVE-NEXT:    fcvt h4, s5
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v3.h[6], v4.h[0]
; NONEON-NOSVE-NEXT:    mov v3.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    mov v0.16b, v3.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.fma.v8f16(<8 x half> %op1, <8 x half> %op2, <8 x half> %op3)
  ret <8 x half> %res
}

define void @fma_v16f16(ptr %a, ptr %b, ptr %c) {
; CHECK-LABEL: fma_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q4, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q5, [x2]
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    fmad z0.h, p0/m, z2.h, z1.h
; CHECK-NEXT:    movprfx z1, z5
; CHECK-NEXT:    fmla z1.h, p0/m, z3.h, z4.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q3, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q4, q1, [x1]
; NONEON-NOSVE-NEXT:    ldp q5, q2, [x2]
; NONEON-NOSVE-NEXT:    mov h25, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s19, h0
; NONEON-NOSVE-NEXT:    mov h24, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h17, v1.h[1]
; NONEON-NOSVE-NEXT:    fcvt s18, h1
; NONEON-NOSVE-NEXT:    mov h22, v1.h[2]
; NONEON-NOSVE-NEXT:    mov h16, v2.h[1]
; NONEON-NOSVE-NEXT:    fcvt s6, h2
; NONEON-NOSVE-NEXT:    mov h20, v2.h[2]
; NONEON-NOSVE-NEXT:    mov h26, v5.h[1]
; NONEON-NOSVE-NEXT:    mov h27, v4.h[1]
; NONEON-NOSVE-NEXT:    mov h28, v3.h[1]
; NONEON-NOSVE-NEXT:    fcvt s25, h25
; NONEON-NOSVE-NEXT:    mov h7, v2.h[3]
; NONEON-NOSVE-NEXT:    mov h29, v4.h[2]
; NONEON-NOSVE-NEXT:    fcvt s23, h17
; NONEON-NOSVE-NEXT:    mov h17, v0.h[3]
; NONEON-NOSVE-NEXT:    mov h30, v1.h[4]
; NONEON-NOSVE-NEXT:    fcvt s21, h16
; NONEON-NOSVE-NEXT:    fmadd s6, s19, s18, s6
; NONEON-NOSVE-NEXT:    fcvt s18, h20
; NONEON-NOSVE-NEXT:    fcvt s19, h22
; NONEON-NOSVE-NEXT:    fcvt s20, h24
; NONEON-NOSVE-NEXT:    mov h16, v1.h[3]
; NONEON-NOSVE-NEXT:    fcvt s22, h5
; NONEON-NOSVE-NEXT:    fcvt s24, h4
; NONEON-NOSVE-NEXT:    fcvt s26, h26
; NONEON-NOSVE-NEXT:    fcvt s27, h27
; NONEON-NOSVE-NEXT:    fcvt s28, h28
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fmadd s21, s25, s23, s21
; NONEON-NOSVE-NEXT:    fcvt s23, h3
; NONEON-NOSVE-NEXT:    mov h25, v5.h[2]
; NONEON-NOSVE-NEXT:    fmadd s18, s20, s19, s18
; NONEON-NOSVE-NEXT:    mov h19, v3.h[2]
; NONEON-NOSVE-NEXT:    fcvt h6, s6
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    mov h31, v0.h[4]
; NONEON-NOSVE-NEXT:    fmadd s26, s28, s27, s26
; NONEON-NOSVE-NEXT:    mov h27, v4.h[3]
; NONEON-NOSVE-NEXT:    mov h28, v3.h[3]
; NONEON-NOSVE-NEXT:    fmadd s22, s23, s24, s22
; NONEON-NOSVE-NEXT:    fcvt h20, s21
; NONEON-NOSVE-NEXT:    mov h21, v2.h[4]
; NONEON-NOSVE-NEXT:    fcvt s23, h25
; NONEON-NOSVE-NEXT:    fcvt s24, h29
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    fmadd s16, s17, s16, s7
; NONEON-NOSVE-NEXT:    mov h25, v5.h[3]
; NONEON-NOSVE-NEXT:    fcvt h18, s18
; NONEON-NOSVE-NEXT:    fcvt h26, s26
; NONEON-NOSVE-NEXT:    mov h29, v2.h[5]
; NONEON-NOSVE-NEXT:    mov v6.h[1], v20.h[0]
; NONEON-NOSVE-NEXT:    fcvt s17, h21
; NONEON-NOSVE-NEXT:    fcvt s20, h30
; NONEON-NOSVE-NEXT:    fmadd s19, s19, s24, s23
; NONEON-NOSVE-NEXT:    fcvt s21, h31
; NONEON-NOSVE-NEXT:    fcvt h7, s22
; NONEON-NOSVE-NEXT:    fcvt s22, h25
; NONEON-NOSVE-NEXT:    fcvt s23, h27
; NONEON-NOSVE-NEXT:    fcvt s24, h28
; NONEON-NOSVE-NEXT:    mov h25, v5.h[4]
; NONEON-NOSVE-NEXT:    mov h27, v4.h[4]
; NONEON-NOSVE-NEXT:    mov h28, v3.h[4]
; NONEON-NOSVE-NEXT:    mov h30, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h31, v0.h[5]
; NONEON-NOSVE-NEXT:    mov v6.h[2], v18.h[0]
; NONEON-NOSVE-NEXT:    fmadd s17, s21, s20, s17
; NONEON-NOSVE-NEXT:    mov v7.h[1], v26.h[0]
; NONEON-NOSVE-NEXT:    fcvt h18, s19
; NONEON-NOSVE-NEXT:    fmadd s19, s24, s23, s22
; NONEON-NOSVE-NEXT:    mov h26, v5.h[5]
; NONEON-NOSVE-NEXT:    fcvt h16, s16
; NONEON-NOSVE-NEXT:    fcvt s20, h25
; NONEON-NOSVE-NEXT:    fcvt s21, h27
; NONEON-NOSVE-NEXT:    fcvt s22, h28
; NONEON-NOSVE-NEXT:    mov h27, v4.h[5]
; NONEON-NOSVE-NEXT:    mov h28, v3.h[5]
; NONEON-NOSVE-NEXT:    fcvt s23, h29
; NONEON-NOSVE-NEXT:    fcvt s24, h30
; NONEON-NOSVE-NEXT:    fcvt s25, h31
; NONEON-NOSVE-NEXT:    mov h29, v2.h[6]
; NONEON-NOSVE-NEXT:    mov h30, v1.h[6]
; NONEON-NOSVE-NEXT:    mov h31, v0.h[6]
; NONEON-NOSVE-NEXT:    mov v7.h[2], v18.h[0]
; NONEON-NOSVE-NEXT:    fcvt h18, s19
; NONEON-NOSVE-NEXT:    fmadd s19, s22, s21, s20
; NONEON-NOSVE-NEXT:    mov h20, v5.h[6]
; NONEON-NOSVE-NEXT:    mov h21, v4.h[6]
; NONEON-NOSVE-NEXT:    mov h22, v3.h[6]
; NONEON-NOSVE-NEXT:    fcvt s26, h26
; NONEON-NOSVE-NEXT:    fmadd s23, s25, s24, s23
; NONEON-NOSVE-NEXT:    fcvt s27, h27
; NONEON-NOSVE-NEXT:    fcvt s28, h28
; NONEON-NOSVE-NEXT:    mov v6.h[3], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s17
; NONEON-NOSVE-NEXT:    fcvt s17, h29
; NONEON-NOSVE-NEXT:    fcvt s24, h30
; NONEON-NOSVE-NEXT:    fcvt s25, h31
; NONEON-NOSVE-NEXT:    fcvt s20, h20
; NONEON-NOSVE-NEXT:    fcvt s21, h21
; NONEON-NOSVE-NEXT:    fcvt s22, h22
; NONEON-NOSVE-NEXT:    mov v7.h[3], v18.h[0]
; NONEON-NOSVE-NEXT:    fmadd s26, s28, s27, s26
; NONEON-NOSVE-NEXT:    fcvt h18, s19
; NONEON-NOSVE-NEXT:    mov h5, v5.h[7]
; NONEON-NOSVE-NEXT:    mov h4, v4.h[7]
; NONEON-NOSVE-NEXT:    mov h3, v3.h[7]
; NONEON-NOSVE-NEXT:    mov h2, v2.h[7]
; NONEON-NOSVE-NEXT:    fmadd s17, s25, s24, s17
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fmadd s19, s22, s21, s20
; NONEON-NOSVE-NEXT:    mov v6.h[4], v16.h[0]
; NONEON-NOSVE-NEXT:    fcvt h16, s23
; NONEON-NOSVE-NEXT:    mov v7.h[4], v18.h[0]
; NONEON-NOSVE-NEXT:    fcvt h18, s26
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s2, h2
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    mov v6.h[5], v16.h[0]
; NONEON-NOSVE-NEXT:    mov v7.h[5], v18.h[0]
; NONEON-NOSVE-NEXT:    fmadd s3, s3, s4, s5
; NONEON-NOSVE-NEXT:    fcvt h4, s19
; NONEON-NOSVE-NEXT:    fcvt h5, s17
; NONEON-NOSVE-NEXT:    fmadd s0, s0, s1, s2
; NONEON-NOSVE-NEXT:    mov v7.h[6], v4.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s3
; NONEON-NOSVE-NEXT:    mov v6.h[6], v5.h[0]
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v7.h[7], v1.h[0]
; NONEON-NOSVE-NEXT:    mov v6.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    stp q7, q6, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %op3 = load <16 x half>, ptr %c
  %res = call <16 x half> @llvm.fma.v16f16(<16 x half> %op1, <16 x half> %op2, <16 x half> %op3)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fma_v2f32(<2 x float> %op1, <2 x float> %op2, <2 x float> %op3) {
; CHECK-LABEL: fma_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d2 killed $d2 def $z2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmad z0.s, p0/m, z1.s, z2.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmla v2.2s, v1.2s, v0.2s
; NONEON-NOSVE-NEXT:    fmov d0, d2
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.fma.v2f32(<2 x float> %op1, <2 x float> %op2, <2 x float> %op3)
  ret <2 x float> %res
}

define <4 x float> @fma_v4f32(<4 x float> %op1, <4 x float> %op2, <4 x float> %op3) {
; CHECK-LABEL: fma_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q2 killed $q2 def $z2
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmad z0.s, p0/m, z1.s, z2.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmla v2.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.fma.v4f32(<4 x float> %op1, <4 x float> %op2, <4 x float> %op3)
  ret <4 x float> %res
}

define void @fma_v8f32(ptr %a, ptr %b, ptr %c) {
; CHECK-LABEL: fma_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q4, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q5, [x2]
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    fmad z0.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    movprfx z1, z5
; CHECK-NEXT:    fmla z1.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q4, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q5, [x2]
; NONEON-NOSVE-NEXT:    ldp q2, q3, [x0]
; NONEON-NOSVE-NEXT:    fmla v1.4s, v0.4s, v2.4s
; NONEON-NOSVE-NEXT:    fmla v5.4s, v4.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q1, q5, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %op3 = load <8 x float>, ptr %c
  %res = call <8 x float> @llvm.fma.v8f32(<8 x float> %op1, <8 x float> %op2, <8 x float> %op3)
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fma_v2f64(<2 x double> %op1, <2 x double> %op2, <2 x double> %op3) {
; CHECK-LABEL: fma_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q2 killed $q2 def $z2
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmad z0.d, p0/m, z1.d, z2.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmla v2.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.fma.v2f64(<2 x double> %op1, <2 x double> %op2, <2 x double> %op3)
  ret <2 x double> %res
}

define void @fma_v4f64(ptr %a, ptr %b, ptr %c) {
; CHECK-LABEL: fma_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q4, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q5, [x2]
; CHECK-NEXT:    ldp q2, q3, [x0]
; CHECK-NEXT:    fmad z0.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    movprfx z1, z5
; CHECK-NEXT:    fmla z1.d, p0/m, z3.d, z4.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fma_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q4, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q5, [x2]
; NONEON-NOSVE-NEXT:    ldp q2, q3, [x0]
; NONEON-NOSVE-NEXT:    fmla v1.2d, v0.2d, v2.2d
; NONEON-NOSVE-NEXT:    fmla v5.2d, v4.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q1, q5, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %op3 = load <4 x double>, ptr %c
  %res = call <4 x double> @llvm.fma.v4f64(<4 x double> %op1, <4 x double> %op2, <4 x double> %op3)
  store <4 x double> %res, ptr %a
  ret void
}

;
; FMUL
;

define <2 x half> @fmul_v2f16(<2 x half> %op1, <2 x half> %op2) {
; CHECK-LABEL: fmul_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmul z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fmul v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fmul <2 x half> %op1, %op2
  ret <2 x half> %res
}

define <4 x half> @fmul_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fmul_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmul z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fmul v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fmul <4 x half> %op1, %op2
  ret <4 x half> %res
}

define <8 x half> @fmul_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fmul_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmul z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v2.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v3.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fmul v2.4s, v3.4s, v2.4s
; NONEON-NOSVE-NEXT:    fmul v1.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v2.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v0.8h, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fmul <8 x half> %op1, %op2
  ret <8 x half> %res
}

define void @fmul_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fmul_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmul z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmul z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fcvtl v4.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl v6.4s, v3.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fcvtl v5.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v7.4s, v2.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v3.4s, v3.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v2.4s, v2.8h
; NONEON-NOSVE-NEXT:    fmul v4.4s, v5.4s, v4.4s
; NONEON-NOSVE-NEXT:    fmul v5.4s, v7.4s, v6.4s
; NONEON-NOSVE-NEXT:    fmul v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fmul v2.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    fcvtn v1.4h, v4.4s
; NONEON-NOSVE-NEXT:    fcvtn v3.4h, v5.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v1.8h, v0.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v3.8h, v2.4s
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = fmul <16 x half> %op1, %op2
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fmul_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fmul_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fmul z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmul v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = fmul <2 x float> %op1, %op2
  ret <2 x float> %res
}

define <4 x float> @fmul_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fmul_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmul z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmul v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fmul <4 x float> %op1, %op2
  ret <4 x float> %res
}

define void @fmul_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fmul_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmul z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmul z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmul v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fmul v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = fmul <8 x float> %op1, %op2
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fmul_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fmul_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fmul z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmul v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = fmul <2 x double> %op1, %op2
  ret <2 x double> %res
}

define void @fmul_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fmul_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fmul z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fmul z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fmul_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fmul v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fmul v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = fmul <4 x double> %op1, %op2
  store <4 x double> %res, ptr %a
  ret void
}

;
; FNEG
;

define <2 x half> @fneg_v2f16(<2 x half> %op) {
; CHECK-LABEL: fneg_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fneg z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    movi v1.4h, #128, lsl #8
; NONEON-NOSVE-NEXT:    eor v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    ret
  %res = fneg <2 x half> %op
  ret <2 x half> %res
}

define <4 x half> @fneg_v4f16(<4 x half> %op) {
; CHECK-LABEL: fneg_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fneg z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    movi v1.4h, #128, lsl #8
; NONEON-NOSVE-NEXT:    eor v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    ret
  %res = fneg <4 x half> %op
  ret <4 x half> %res
}

define <8 x half> @fneg_v8f16(<8 x half> %op) {
; CHECK-LABEL: fneg_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fneg z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    movi v1.8h, #128, lsl #8
; NONEON-NOSVE-NEXT:    eor v0.16b, v0.16b, v1.16b
; NONEON-NOSVE-NEXT:    ret
  %res = fneg <8 x half> %op
  ret <8 x half> %res
}

define void @fneg_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fneg_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    fneg z0.h, p0/m, z0.h
; CHECK-NEXT:    fneg z1.h, p0/m, z1.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    movi v0.8h, #128, lsl #8
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    eor v1.16b, v1.16b, v0.16b
; NONEON-NOSVE-NEXT:    eor v0.16b, v2.16b, v0.16b
; NONEON-NOSVE-NEXT:    stp q1, q0, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <16 x half>, ptr %a
  %res = fneg <16 x half> %op
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fneg_v2f32(<2 x float> %op) {
; CHECK-LABEL: fneg_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fneg z0.s, p0/m, z0.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fneg v0.2s, v0.2s
; NONEON-NOSVE-NEXT:    ret
  %res = fneg <2 x float> %op
  ret <2 x float> %res
}

define <4 x float> @fneg_v4f32(<4 x float> %op) {
; CHECK-LABEL: fneg_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fneg z0.s, p0/m, z0.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fneg v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fneg <4 x float> %op
  ret <4 x float> %res
}

define void @fneg_v8f32(ptr %a) {
; CHECK-LABEL: fneg_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    fneg z0.s, p0/m, z0.s
; CHECK-NEXT:    fneg z1.s, p0/m, z1.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    fneg v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    fneg v1.4s, v1.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <8 x float>, ptr %a
  %res = fneg <8 x float> %op
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fneg_v2f64(<2 x double> %op) {
; CHECK-LABEL: fneg_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fneg z0.d, p0/m, z0.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fneg v0.2d, v0.2d
; NONEON-NOSVE-NEXT:    ret
  %res = fneg <2 x double> %op
  ret <2 x double> %res
}

define void @fneg_v4f64(ptr %a) {
; CHECK-LABEL: fneg_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    fneg z0.d, p0/m, z0.d
; CHECK-NEXT:    fneg z1.d, p0/m, z1.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fneg_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    fneg v0.2d, v0.2d
; NONEON-NOSVE-NEXT:    fneg v1.2d, v1.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <4 x double>, ptr %a
  %res = fneg <4 x double> %op
  store <4 x double> %res, ptr %a
  ret void
}

;
; FSQRT
;

define <2 x half> @fsqrt_v2f16(<2 x half> %op) {
; CHECK-LABEL: fsqrt_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fsqrt z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h1, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s2, h0
; NONEON-NOSVE-NEXT:    mov h3, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fsqrt s2, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fsqrt s1, s1
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    fsqrt s3, s3
; NONEON-NOSVE-NEXT:    fsqrt s4, s0
; NONEON-NOSVE-NEXT:    fcvt h0, s2
; NONEON-NOSVE-NEXT:    mov v0.h[1], v1.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s3
; NONEON-NOSVE-NEXT:    mov v0.h[2], v1.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s4
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x half> @llvm.sqrt.v2f16(<2 x half> %op)
  ret <2 x half> %res
}

define <4 x half> @fsqrt_v4f16(<4 x half> %op) {
; CHECK-LABEL: fsqrt_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fsqrt z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    mov h1, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s2, h0
; NONEON-NOSVE-NEXT:    mov h3, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[3]
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fsqrt s2, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fsqrt s1, s1
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    fsqrt s3, s3
; NONEON-NOSVE-NEXT:    fsqrt s4, s0
; NONEON-NOSVE-NEXT:    fcvt h0, s2
; NONEON-NOSVE-NEXT:    mov v0.h[1], v1.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s3
; NONEON-NOSVE-NEXT:    mov v0.h[2], v1.h[0]
; NONEON-NOSVE-NEXT:    fcvt h1, s4
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.sqrt.v4f16(<4 x half> %op)
  ret <4 x half> %res
}

define <8 x half> @fsqrt_v8f16(<8 x half> %op) {
; CHECK-LABEL: fsqrt_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fsqrt z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov h1, v0.h[1]
; NONEON-NOSVE-NEXT:    fcvt s2, h0
; NONEON-NOSVE-NEXT:    mov h3, v0.h[2]
; NONEON-NOSVE-NEXT:    mov h4, v0.h[3]
; NONEON-NOSVE-NEXT:    mov h5, v0.h[4]
; NONEON-NOSVE-NEXT:    mov h6, v0.h[5]
; NONEON-NOSVE-NEXT:    mov h7, v0.h[6]
; NONEON-NOSVE-NEXT:    mov h0, v0.h[7]
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fsqrt s2, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s16, h0
; NONEON-NOSVE-NEXT:    fcvt h0, s2
; NONEON-NOSVE-NEXT:    fsqrt s1, s1
; NONEON-NOSVE-NEXT:    fcvt h1, s1
; NONEON-NOSVE-NEXT:    mov v0.h[1], v1.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s3, s3
; NONEON-NOSVE-NEXT:    fcvt h1, s3
; NONEON-NOSVE-NEXT:    mov v0.h[2], v1.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s4, s4
; NONEON-NOSVE-NEXT:    fcvt h1, s4
; NONEON-NOSVE-NEXT:    mov v0.h[3], v1.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s5, s5
; NONEON-NOSVE-NEXT:    fcvt h1, s5
; NONEON-NOSVE-NEXT:    mov v0.h[4], v1.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s6, s6
; NONEON-NOSVE-NEXT:    fcvt h1, s6
; NONEON-NOSVE-NEXT:    mov v0.h[5], v1.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s7, s7
; NONEON-NOSVE-NEXT:    fcvt h1, s7
; NONEON-NOSVE-NEXT:    mov v0.h[6], v1.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s2, s16
; NONEON-NOSVE-NEXT:    fcvt h1, s2
; NONEON-NOSVE-NEXT:    mov v0.h[7], v1.h[0]
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.sqrt.v8f16(<8 x half> %op)
  ret <8 x half> %res
}

define void @fsqrt_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fsqrt_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    fsqrt z0.h, p0/m, z0.h
; CHECK-NEXT:    fsqrt z1.h, p0/m, z1.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldr q1, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q16, [x0]
; NONEON-NOSVE-NEXT:    mov h0, v1.h[1]
; NONEON-NOSVE-NEXT:    mov h17, v16.h[1]
; NONEON-NOSVE-NEXT:    fcvt s2, h1
; NONEON-NOSVE-NEXT:    mov h3, v1.h[2]
; NONEON-NOSVE-NEXT:    fcvt s18, h16
; NONEON-NOSVE-NEXT:    mov h19, v16.h[2]
; NONEON-NOSVE-NEXT:    mov h4, v1.h[3]
; NONEON-NOSVE-NEXT:    mov h20, v16.h[3]
; NONEON-NOSVE-NEXT:    mov h5, v1.h[4]
; NONEON-NOSVE-NEXT:    mov h21, v16.h[4]
; NONEON-NOSVE-NEXT:    mov h6, v1.h[5]
; NONEON-NOSVE-NEXT:    mov h22, v16.h[5]
; NONEON-NOSVE-NEXT:    fcvt s0, h0
; NONEON-NOSVE-NEXT:    fcvt s17, h17
; NONEON-NOSVE-NEXT:    fsqrt s2, s2
; NONEON-NOSVE-NEXT:    fcvt s3, h3
; NONEON-NOSVE-NEXT:    fcvt s19, h19
; NONEON-NOSVE-NEXT:    mov h7, v1.h[6]
; NONEON-NOSVE-NEXT:    fcvt s4, h4
; NONEON-NOSVE-NEXT:    fcvt s20, h20
; NONEON-NOSVE-NEXT:    fcvt s5, h5
; NONEON-NOSVE-NEXT:    fcvt s21, h21
; NONEON-NOSVE-NEXT:    fcvt s6, h6
; NONEON-NOSVE-NEXT:    fcvt s22, h22
; NONEON-NOSVE-NEXT:    mov h23, v16.h[6]
; NONEON-NOSVE-NEXT:    mov h16, v16.h[7]
; NONEON-NOSVE-NEXT:    mov h1, v1.h[7]
; NONEON-NOSVE-NEXT:    fcvt s7, h7
; NONEON-NOSVE-NEXT:    fcvt s23, h23
; NONEON-NOSVE-NEXT:    fcvt s16, h16
; NONEON-NOSVE-NEXT:    fcvt s1, h1
; NONEON-NOSVE-NEXT:    fcvt h2, s2
; NONEON-NOSVE-NEXT:    fsqrt s0, s0
; NONEON-NOSVE-NEXT:    fcvt h0, s0
; NONEON-NOSVE-NEXT:    mov v2.h[1], v0.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s17, s17
; NONEON-NOSVE-NEXT:    fcvt h17, s17
; NONEON-NOSVE-NEXT:    fsqrt s18, s18
; NONEON-NOSVE-NEXT:    fcvt h18, s18
; NONEON-NOSVE-NEXT:    mov v18.h[1], v17.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s3, s3
; NONEON-NOSVE-NEXT:    fcvt h0, s3
; NONEON-NOSVE-NEXT:    mov v2.h[2], v0.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s19, s19
; NONEON-NOSVE-NEXT:    fcvt h17, s19
; NONEON-NOSVE-NEXT:    mov v18.h[2], v17.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s4, s4
; NONEON-NOSVE-NEXT:    fcvt h0, s4
; NONEON-NOSVE-NEXT:    mov v2.h[3], v0.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s20, s20
; NONEON-NOSVE-NEXT:    fcvt h3, s20
; NONEON-NOSVE-NEXT:    mov v18.h[3], v3.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s5, s5
; NONEON-NOSVE-NEXT:    fcvt h0, s5
; NONEON-NOSVE-NEXT:    mov v2.h[4], v0.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s21, s21
; NONEON-NOSVE-NEXT:    fcvt h3, s21
; NONEON-NOSVE-NEXT:    mov v18.h[4], v3.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s6, s6
; NONEON-NOSVE-NEXT:    fcvt h0, s6
; NONEON-NOSVE-NEXT:    mov v2.h[5], v0.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s22, s22
; NONEON-NOSVE-NEXT:    fcvt h3, s22
; NONEON-NOSVE-NEXT:    mov v18.h[5], v3.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s7, s7
; NONEON-NOSVE-NEXT:    fcvt h0, s7
; NONEON-NOSVE-NEXT:    mov v2.h[6], v0.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s23, s23
; NONEON-NOSVE-NEXT:    fcvt h3, s23
; NONEON-NOSVE-NEXT:    mov v18.h[6], v3.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s16, s16
; NONEON-NOSVE-NEXT:    fcvt h3, s16
; NONEON-NOSVE-NEXT:    mov v18.h[7], v3.h[0]
; NONEON-NOSVE-NEXT:    fsqrt s1, s1
; NONEON-NOSVE-NEXT:    fcvt h0, s1
; NONEON-NOSVE-NEXT:    mov v2.h[7], v0.h[0]
; NONEON-NOSVE-NEXT:    stp q18, q2, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <16 x half>, ptr %a
  %res = call <16 x half> @llvm.sqrt.v16f16(<16 x half> %op)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fsqrt_v2f32(<2 x float> %op) {
; CHECK-LABEL: fsqrt_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fsqrt z0.s, p0/m, z0.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fsqrt v0.2s, v0.2s
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.sqrt.v2f32(<2 x float> %op)
  ret <2 x float> %res
}

define <4 x float> @fsqrt_v4f32(<4 x float> %op) {
; CHECK-LABEL: fsqrt_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fsqrt z0.s, p0/m, z0.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fsqrt v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.sqrt.v4f32(<4 x float> %op)
  ret <4 x float> %res
}

define void @fsqrt_v8f32(ptr %a) {
; CHECK-LABEL: fsqrt_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    fsqrt z0.s, p0/m, z0.s
; CHECK-NEXT:    fsqrt z1.s, p0/m, z1.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    fsqrt v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    fsqrt v1.4s, v1.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <8 x float>, ptr %a
  %res = call <8 x float> @llvm.sqrt.v8f32(<8 x float> %op)
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fsqrt_v2f64(<2 x double> %op) {
; CHECK-LABEL: fsqrt_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fsqrt z0.d, p0/m, z0.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fsqrt v0.2d, v0.2d
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.sqrt.v2f64(<2 x double> %op)
  ret <2 x double> %res
}

define void @fsqrt_v4f64(ptr %a) {
; CHECK-LABEL: fsqrt_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    fsqrt z0.d, p0/m, z0.d
; CHECK-NEXT:    fsqrt z1.d, p0/m, z1.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsqrt_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    fsqrt v0.2d, v0.2d
; NONEON-NOSVE-NEXT:    fsqrt v1.2d, v1.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <4 x double>, ptr %a
  %res = call <4 x double> @llvm.sqrt.v4f64(<4 x double> %op)
  store <4 x double> %res, ptr %a
  ret void
}

;
; FSUB
;

define <2 x half> @fsub_v2f16(<2 x half> %op1, <2 x half> %op2) {
; CHECK-LABEL: fsub_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fsub z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fsub v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fsub <2 x half> %op1, %op2
  ret <2 x half> %res
}

define <4 x half> @fsub_v4f16(<4 x half> %op1, <4 x half> %op2) {
; CHECK-LABEL: fsub_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fsub z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v1.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v0.4s, v0.4h
; NONEON-NOSVE-NEXT:    fsub v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fsub <4 x half> %op1, %op2
  ret <4 x half> %res
}

define <8 x half> @fsub_v8f16(<8 x half> %op1, <8 x half> %op2) {
; CHECK-LABEL: fsub_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fsub z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fcvtl v2.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v3.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fsub v2.4s, v3.4s, v2.4s
; NONEON-NOSVE-NEXT:    fsub v1.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    fcvtn v0.4h, v2.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v0.8h, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fsub <8 x half> %op1, %op2
  ret <8 x half> %res
}

define void @fsub_v16f16(ptr %a, ptr %b) {
; CHECK-LABEL: fsub_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fsubr z0.h, p0/m, z0.h, z1.h
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fsub z1.h, p0/m, z1.h, z3.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fcvtl v4.4s, v0.4h
; NONEON-NOSVE-NEXT:    fcvtl v6.4s, v3.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v0.4s, v0.8h
; NONEON-NOSVE-NEXT:    fcvtl v5.4s, v1.4h
; NONEON-NOSVE-NEXT:    fcvtl v7.4s, v2.4h
; NONEON-NOSVE-NEXT:    fcvtl2 v1.4s, v1.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v3.4s, v3.8h
; NONEON-NOSVE-NEXT:    fcvtl2 v2.4s, v2.8h
; NONEON-NOSVE-NEXT:    fsub v4.4s, v5.4s, v4.4s
; NONEON-NOSVE-NEXT:    fsub v5.4s, v7.4s, v6.4s
; NONEON-NOSVE-NEXT:    fsub v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fsub v2.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    fcvtn v1.4h, v4.4s
; NONEON-NOSVE-NEXT:    fcvtn v3.4h, v5.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v1.8h, v0.4s
; NONEON-NOSVE-NEXT:    fcvtn2 v3.8h, v2.4s
; NONEON-NOSVE-NEXT:    stp q1, q3, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x half>, ptr %a
  %op2 = load <16 x half>, ptr %b
  %res = fsub <16 x half> %op1, %op2
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fsub_v2f32(<2 x float> %op1, <2 x float> %op2) {
; CHECK-LABEL: fsub_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    fsub z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fsub v0.2s, v0.2s, v1.2s
; NONEON-NOSVE-NEXT:    ret
  %res = fsub <2 x float> %op1, %op2
  ret <2 x float> %res
}

define <4 x float> @fsub_v4f32(<4 x float> %op1, <4 x float> %op2) {
; CHECK-LABEL: fsub_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fsub z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fsub v0.4s, v0.4s, v1.4s
; NONEON-NOSVE-NEXT:    ret
  %res = fsub <4 x float> %op1, %op2
  ret <4 x float> %res
}

define void @fsub_v8f32(ptr %a, ptr %b) {
; CHECK-LABEL: fsub_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fsubr z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fsub z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fsub v0.4s, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    fsub v1.4s, v2.4s, v3.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x float>, ptr %a
  %op2 = load <8 x float>, ptr %b
  %res = fsub <8 x float> %op1, %op2
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fsub_v2f64(<2 x double> %op1, <2 x double> %op2) {
; CHECK-LABEL: fsub_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    fsub z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fsub v0.2d, v0.2d, v1.2d
; NONEON-NOSVE-NEXT:    ret
  %res = fsub <2 x double> %op1, %op2
  ret <2 x double> %res
}

define void @fsub_v4f64(ptr %a, ptr %b) {
; CHECK-LABEL: fsub_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    fsubr z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    fsub z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fsub_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q3, [x1]
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    fsub v0.2d, v1.2d, v0.2d
; NONEON-NOSVE-NEXT:    fsub v1.2d, v2.2d, v3.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x double>, ptr %a
  %op2 = load <4 x double>, ptr %b
  %res = fsub <4 x double> %op1, %op2
  store <4 x double> %res, ptr %a
  ret void
}

;
; FABS
;

define <2 x half> @fabs_v2f16(<2 x half> %op) {
; CHECK-LABEL: fabs_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fabs z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    bic v0.4h, #128, lsl #8
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x half> @llvm.fabs.v2f16(<2 x half> %op)
  ret <2 x half> %res
}

define <4 x half> @fabs_v4f16(<4 x half> %op) {
; CHECK-LABEL: fabs_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fabs z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    bic v0.4h, #128, lsl #8
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x half> @llvm.fabs.v4f16(<4 x half> %op)
  ret <4 x half> %res
}

define <8 x half> @fabs_v8f16(<8 x half> %op) {
; CHECK-LABEL: fabs_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fabs z0.h, p0/m, z0.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    bic v0.8h, #128, lsl #8
; NONEON-NOSVE-NEXT:    ret
  %res = call <8 x half> @llvm.fabs.v8f16(<8 x half> %op)
  ret <8 x half> %res
}

define void @fabs_v16f16(ptr %a) {
; CHECK-LABEL: fabs_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    fabs z0.h, p0/m, z0.h
; CHECK-NEXT:    fabs z1.h, p0/m, z1.h
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    bic v0.8h, #128, lsl #8
; NONEON-NOSVE-NEXT:    bic v1.8h, #128, lsl #8
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <16 x half>, ptr %a
  %res = call <16 x half> @llvm.fabs.v16f16(<16 x half> %op)
  store <16 x half> %res, ptr %a
  ret void
}

define <2 x float> @fabs_v2f32(<2 x float> %op) {
; CHECK-LABEL: fabs_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fabs z0.s, p0/m, z0.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fabs v0.2s, v0.2s
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x float> @llvm.fabs.v2f32(<2 x float> %op)
  ret <2 x float> %res
}

define <4 x float> @fabs_v4f32(<4 x float> %op) {
; CHECK-LABEL: fabs_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fabs z0.s, p0/m, z0.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fabs v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    ret
  %res = call <4 x float> @llvm.fabs.v4f32(<4 x float> %op)
  ret <4 x float> %res
}

define void @fabs_v8f32(ptr %a) {
; CHECK-LABEL: fabs_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    fabs z0.s, p0/m, z0.s
; CHECK-NEXT:    fabs z1.s, p0/m, z1.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    fabs v0.4s, v0.4s
; NONEON-NOSVE-NEXT:    fabs v1.4s, v1.4s
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <8 x float>, ptr %a
  %res = call <8 x float> @llvm.fabs.v8f32(<8 x float> %op)
  store <8 x float> %res, ptr %a
  ret void
}

define <2 x double> @fabs_v2f64(<2 x double> %op) {
; CHECK-LABEL: fabs_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    fabs z0.d, p0/m, z0.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fabs v0.2d, v0.2d
; NONEON-NOSVE-NEXT:    ret
  %res = call <2 x double> @llvm.fabs.v2f64(<2 x double> %op)
  ret <2 x double> %res
}

define void @fabs_v4f64(ptr %a) {
; CHECK-LABEL: fabs_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q1, [x0]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    fabs z0.d, p0/m, z0.d
; CHECK-NEXT:    fabs z1.d, p0/m, z1.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: fabs_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    fabs v0.2d, v0.2d
; NONEON-NOSVE-NEXT:    fabs v1.2d, v1.2d
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op = load <4 x double>, ptr %a
  %res = call <4 x double> @llvm.fabs.v4f64(<4 x double> %op)
  store <4 x double> %res, ptr %a
  ret void
}

declare <2 x half> @llvm.fma.v2f16(<2 x half>, <2 x half>, <2 x half>)
declare <4 x half> @llvm.fma.v4f16(<4 x half>, <4 x half>, <4 x half>)
declare <8 x half> @llvm.fma.v8f16(<8 x half>, <8 x half>, <8 x half>)
declare <16 x half> @llvm.fma.v16f16(<16 x half>, <16 x half>, <16 x half>)
declare <2 x float> @llvm.fma.v2f32(<2 x float>, <2 x float>, <2 x float>)
declare <4 x float> @llvm.fma.v4f32(<4 x float>, <4 x float>, <4 x float>)
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>)
declare <2 x double> @llvm.fma.v2f64(<2 x double>, <2 x double>, <2 x double>)
declare <4 x double> @llvm.fma.v4f64(<4 x double>, <4 x double>, <4 x double>)

declare <2 x half> @llvm.sqrt.v2f16(<2 x half>)
declare <4 x half> @llvm.sqrt.v4f16(<4 x half>)
declare <8 x half> @llvm.sqrt.v8f16(<8 x half>)
declare <16 x half> @llvm.sqrt.v16f16(<16 x half>)
declare <2 x float> @llvm.sqrt.v2f32(<2 x float>)
declare <4 x float> @llvm.sqrt.v4f32(<4 x float>)
declare <8 x float> @llvm.sqrt.v8f32(<8 x float>)
declare <2 x double> @llvm.sqrt.v2f64(<2 x double>)
declare <4 x double> @llvm.sqrt.v4f64(<4 x double>)

declare <2 x half> @llvm.fabs.v2f16(<2 x half>)
declare <4 x half> @llvm.fabs.v4f16(<4 x half>)
declare <8 x half> @llvm.fabs.v8f16(<8 x half>)
declare <16 x half> @llvm.fabs.v16f16(<16 x half>)
declare <2 x float> @llvm.fabs.v2f32(<2 x float>)
declare <4 x float> @llvm.fabs.v4f32(<4 x float>)
declare <8 x float> @llvm.fabs.v8f32(<8 x float>)
declare <2 x double> @llvm.fabs.v2f64(<2 x double>)
declare <4 x double> @llvm.fabs.v4f64(<4 x double>)
