; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=aarch64-- -O0 -fast-isel -fast-isel-abort=4 -verify-machineinstrs < %s | FileCheck %s

define i32 @cmpxchg_monotonic_32(ptr %p, i32 %cmp, i32 %new, ptr %ps) #0 {
; CHECK-LABEL: cmpxchg_monotonic_32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:  .LBB0_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr w0, [x8]
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ne .LBB0_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    stlxr wzr, w2, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB0_1
; CHECK-NEXT:  .LBB0_3:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w8, eq
; CHECK-NEXT:    and w8, w8, #0x1
; CHECK-NEXT:    str w8, [x3]
; CHECK-NEXT:    ret
  %tmp0 = cmpxchg ptr %p, i32 %cmp, i32 %new monotonic monotonic
  %tmp1 = extractvalue { i32, i1 } %tmp0, 0
  %tmp2 = extractvalue { i32, i1 } %tmp0, 1
  %tmp3 = zext i1 %tmp2 to i32
  store i32 %tmp3, ptr %ps
  ret i32 %tmp1
}

define i32 @cmpxchg_acq_rel_32_load(ptr %p, i32 %cmp, ptr %pnew, ptr %ps) #0 {
; CHECK-LABEL: cmpxchg_acq_rel_32_load:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:    ldr w9, [x2]
; CHECK-NEXT:  .LBB1_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr w0, [x8]
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ne .LBB1_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    stlxr wzr, w9, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB1_1
; CHECK-NEXT:  .LBB1_3:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w8, eq
; CHECK-NEXT:    and w8, w8, #0x1
; CHECK-NEXT:    str w8, [x3]
; CHECK-NEXT:    ret
  %new = load i32, ptr %pnew
  %tmp0 = cmpxchg ptr %p, i32 %cmp, i32 %new acq_rel acquire
  %tmp1 = extractvalue { i32, i1 } %tmp0, 0
  %tmp2 = extractvalue { i32, i1 } %tmp0, 1
  %tmp3 = zext i1 %tmp2 to i32
  store i32 %tmp3, ptr %ps
  ret i32 %tmp1
}

define i64 @cmpxchg_seq_cst_64(ptr %p, i64 %cmp, i64 %new, ptr %ps) #0 {
; CHECK-LABEL: cmpxchg_seq_cst_64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:  .LBB2_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr x0, [x8]
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    b.ne .LBB2_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    stlxr wzr, x2, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB2_1
; CHECK-NEXT:  .LBB2_3:
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    cset w8, eq
; CHECK-NEXT:    and w8, w8, #0x1
; CHECK-NEXT:    str w8, [x3]
; CHECK-NEXT:    ret
  %tmp0 = cmpxchg ptr %p, i64 %cmp, i64 %new seq_cst seq_cst
  %tmp1 = extractvalue { i64, i1 } %tmp0, 0
  %tmp2 = extractvalue { i64, i1 } %tmp0, 1
  %tmp3 = zext i1 %tmp2 to i32
  store i32 %tmp3, ptr %ps
  ret i64 %tmp1
}

attributes #0 = { nounwind }
