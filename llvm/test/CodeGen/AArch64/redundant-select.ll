; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64 %s -o - | FileCheck %s

define i64 @not_redundant_ugt_eq(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
; CHECK-LABEL: not_redundant_ugt_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, #40
; CHECK-NEXT:    csel x8, x1, x2, eq
; CHECK-NEXT:    csel x8, x8, x1, hi
; CHECK-NEXT:    sub x0, x8, x3
; CHECK-NEXT:    ret
  %ugt = icmp ugt i64 %arg0, 40
  %eq = icmp eq i64 %arg0, 40
  %select = select i1 %eq, i64 %arg1, i64 %arg2
  %select.1 = select i1 %ugt, i64 %select, i64 %arg1
  %res = sub i64 %select.1, %arg3
  ret i64 %res
}
define i64 @redundant_ugt_ule(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
; CHECK-LABEL: redundant_ugt_ule:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, #41
; CHECK-NEXT:    csel x8, x1, x2, lo
; CHECK-NEXT:    sub x0, x8, x3
; CHECK-NEXT:    ret
  %ugt = icmp ugt i64 %arg0, 40
  %ule = icmp ule i64 %arg0, 40
  %select = select i1 %ule, i64 %arg1, i64 %arg2
  %select.1 = select i1 %ugt, i64 %select, i64 %arg1
  %res = sub i64 %select.1, %arg3
  ret i64 %res
}
define i64 @not_redundant_uge_ule(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
; CHECK-LABEL: not_redundant_uge_ule:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, #41
; CHECK-NEXT:    csel x8, x1, x2, lo
; CHECK-NEXT:    cmp x0, #39
; CHECK-NEXT:    csel x8, x8, x1, hi
; CHECK-NEXT:    sub x0, x8, x3
; CHECK-NEXT:    ret
  %uge = icmp uge i64 %arg0, 40
  %ule = icmp ule i64 %arg0, 40
  %select = select i1 %ule, i64 %arg1, i64 %arg2
  %select.1 = select i1 %uge, i64 %select, i64 %arg1
  %res = sub i64 %select.1, %arg3
  ret i64 %res
}
define i64 @not_redundant_eq_eq(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
; CHECK-LABEL: not_redundant_eq_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, #40
; CHECK-NEXT:    csel x8, x1, x2, eq
; CHECK-NEXT:    csel x8, x8, x1, eq
; CHECK-NEXT:    sub x0, x8, x3
; CHECK-NEXT:    ret
  %ugt = icmp eq i64 %arg0, 40
  %eq = icmp eq i64 %arg0, 40
  %select = select i1 %eq, i64 %arg1, i64 %arg2
  %select.1 = select i1 %ugt, i64 %select, i64 %arg1
  %res = sub i64 %select.1, %arg3
  ret i64 %res
}
define i64 @redundant_ne_eq(i64 %arg0, i64 %arg1, i64 %arg2, i64 %arg3) {
; CHECK-LABEL: redundant_ne_eq:
; CHECK:       // %bb.0:
; CHECK-NEXT:    cmp x0, #40
; CHECK-NEXT:    csel x8, x1, x2, eq
; CHECK-NEXT:    sub x0, x8, x3
; CHECK-NEXT:    ret
  %ne = icmp ne i64 %arg0, 40
  %eq = icmp eq i64 %arg0, 40
  %select = select i1 %eq, i64 %arg1, i64 %arg2
  %select.1 = select i1 %ne, i64 %select, i64 %arg1
  %res = sub i64 %select.1, %arg3
  ret i64 %res
}
