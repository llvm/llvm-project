; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 4
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sve < %s | FileCheck %s
; RUN: not --crash llc -mtriple=aarch64-linux-gnu -mattr=+sve,+strict-align < %s 2>&1 | FileCheck %s --check-prefix=CHECK-FIXME

; REQUIRES: asserts

; FIXME: Support TLI.expandUnalignedLoad()/TLI.expandUnalignedStore() for SVE.
; CHECK-FIXME: LLVM ERROR: Invalid size request on a scalable vector.

define void @unaligned_nxv16i1(ptr %ldptr, ptr %stptr) {
; CHECK-LABEL: unaligned_nxv16i1:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr p0, [x0]
; CHECK-NEXT:    str p0, [x1]
; CHECK-NEXT:    ret
  %l3 = load <vscale x 16 x i1>, ptr %ldptr, align 1
  store <vscale x 16 x i1> %l3, ptr %stptr, align 1
  ret void
}

define void @unaligned_nxv2i64(ptr %ldptr, ptr %stptr) {
; CHECK-LABEL: unaligned_nxv2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    st1d { z0.d }, p0, [x1]
; CHECK-NEXT:    ret
  %l3 = load <vscale x 2 x i64>, ptr %ldptr, align 4
  store <vscale x 2 x i64> %l3, ptr %stptr, align 4
  ret void
}
