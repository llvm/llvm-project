; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve < %s | FileCheck %s
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE


target triple = "aarch64-unknown-linux-gnu"

;
; Masked Load
;

define <4 x i8> @masked_load_v4i8(ptr %src, <4 x i1> %mask) {
; CHECK-LABEL: masked_load_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    cmpne p0.h, p0/z, z0.h, #0
; CHECK-NEXT:    ld1b { z0.h }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v4i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.4h, v0.4h, #15
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI0_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI0_0]
; NONEON-NOSVE-NEXT:    cmlt v0.4h, v0.4h, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addv h0, v0.4h
; NONEON-NOSVE-NEXT:    fmov w8, s0
; NONEON-NOSVE-NEXT:    tbz w8, #0, .LBB0_2
; NONEON-NOSVE-NEXT:  // %bb.1: // %cond.load
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[0], [x0]
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB0_3
; NONEON-NOSVE-NEXT:    b .LBB0_4
; NONEON-NOSVE-NEXT:  .LBB0_2:
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB0_4
; NONEON-NOSVE-NEXT:  .LBB0_3: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #1
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[2], [x9]
; NONEON-NOSVE-NEXT:  .LBB0_4: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB0_7
; NONEON-NOSVE-NEXT:  // %bb.5: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB0_8
; NONEON-NOSVE-NEXT:  .LBB0_6: // %else8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB0_7: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB0_6
; NONEON-NOSVE-NEXT:  .LBB0_8: // %cond.load7
; NONEON-NOSVE-NEXT:    add x8, x0, #3
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[6], [x8]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %load = call <4 x i8> @llvm.masked.load.v4i8(ptr %src, i32 8, <4 x i1> %mask, <4 x i8> zeroinitializer)
  ret <4 x i8> %load
}

define <8 x i8> @masked_load_v8i8(ptr %src, <8 x i1> %mask) {
; CHECK-LABEL: masked_load_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    lsl z0.b, z0.b, #7
; CHECK-NEXT:    asr z0.b, z0.b, #7
; CHECK-NEXT:    cmpne p0.b, p0/z, z0.b, #0
; CHECK-NEXT:    ld1b { z0.b }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v8i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.8b, v0.8b, #7
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI1_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI1_0]
; NONEON-NOSVE-NEXT:    cmlt v0.8b, v0.8b, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addv b0, v0.8b
; NONEON-NOSVE-NEXT:    fmov w8, s0
; NONEON-NOSVE-NEXT:    tbz w8, #0, .LBB1_2
; NONEON-NOSVE-NEXT:  // %bb.1: // %cond.load
; NONEON-NOSVE-NEXT:    ldr b0, [x0]
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB1_3
; NONEON-NOSVE-NEXT:    b .LBB1_4
; NONEON-NOSVE-NEXT:  .LBB1_2:
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB1_4
; NONEON-NOSVE-NEXT:  .LBB1_3: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #1
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[1], [x9]
; NONEON-NOSVE-NEXT:  .LBB1_4: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB1_11
; NONEON-NOSVE-NEXT:  // %bb.5: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB1_12
; NONEON-NOSVE-NEXT:  .LBB1_6: // %else8
; NONEON-NOSVE-NEXT:    tbnz w8, #4, .LBB1_13
; NONEON-NOSVE-NEXT:  .LBB1_7: // %else11
; NONEON-NOSVE-NEXT:    tbnz w8, #5, .LBB1_14
; NONEON-NOSVE-NEXT:  .LBB1_8: // %else14
; NONEON-NOSVE-NEXT:    tbnz w8, #6, .LBB1_15
; NONEON-NOSVE-NEXT:  .LBB1_9: // %else17
; NONEON-NOSVE-NEXT:    tbnz w8, #7, .LBB1_16
; NONEON-NOSVE-NEXT:  .LBB1_10: // %else20
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB1_11: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB1_6
; NONEON-NOSVE-NEXT:  .LBB1_12: // %cond.load7
; NONEON-NOSVE-NEXT:    add x9, x0, #3
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #4, .LBB1_7
; NONEON-NOSVE-NEXT:  .LBB1_13: // %cond.load10
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #5, .LBB1_8
; NONEON-NOSVE-NEXT:  .LBB1_14: // %cond.load13
; NONEON-NOSVE-NEXT:    add x9, x0, #5
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #6, .LBB1_9
; NONEON-NOSVE-NEXT:  .LBB1_15: // %cond.load16
; NONEON-NOSVE-NEXT:    add x9, x0, #6
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #7, .LBB1_10
; NONEON-NOSVE-NEXT:  .LBB1_16: // %cond.load19
; NONEON-NOSVE-NEXT:    add x8, x0, #7
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[7], [x8]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %load = call <8 x i8> @llvm.masked.load.v8i8(ptr %src, i32 8, <8 x i1> %mask, <8 x i8> zeroinitializer)
  ret <8 x i8> %load
}

define <16 x i8> @masked_load_v16i8(ptr %src, <16 x i1> %mask) {
; CHECK-LABEL: masked_load_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    lsl z0.b, z0.b, #7
; CHECK-NEXT:    asr z0.b, z0.b, #7
; CHECK-NEXT:    cmpne p0.b, p0/z, z0.b, #0
; CHECK-NEXT:    ld1b { z0.b }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v16i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.16b, v0.16b, #7
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI2_0
; NONEON-NOSVE-NEXT:    ldr q1, [x8, :lo12:.LCPI2_0]
; NONEON-NOSVE-NEXT:    cmlt v0.16b, v0.16b, #0
; NONEON-NOSVE-NEXT:    and v0.16b, v0.16b, v1.16b
; NONEON-NOSVE-NEXT:    ext v1.16b, v0.16b, v0.16b, #8
; NONEON-NOSVE-NEXT:    zip1 v0.16b, v0.16b, v1.16b
; NONEON-NOSVE-NEXT:    addv h1, v0.8h
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB2_17
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB2_18
; NONEON-NOSVE-NEXT:  .LBB2_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB2_19
; NONEON-NOSVE-NEXT:  .LBB2_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB2_20
; NONEON-NOSVE-NEXT:  .LBB2_4: // %else8
; NONEON-NOSVE-NEXT:    tbnz w8, #4, .LBB2_21
; NONEON-NOSVE-NEXT:  .LBB2_5: // %else11
; NONEON-NOSVE-NEXT:    tbnz w8, #5, .LBB2_22
; NONEON-NOSVE-NEXT:  .LBB2_6: // %else14
; NONEON-NOSVE-NEXT:    tbnz w8, #6, .LBB2_23
; NONEON-NOSVE-NEXT:  .LBB2_7: // %else17
; NONEON-NOSVE-NEXT:    tbnz w8, #7, .LBB2_24
; NONEON-NOSVE-NEXT:  .LBB2_8: // %else20
; NONEON-NOSVE-NEXT:    tbnz w8, #8, .LBB2_25
; NONEON-NOSVE-NEXT:  .LBB2_9: // %else23
; NONEON-NOSVE-NEXT:    tbnz w8, #9, .LBB2_26
; NONEON-NOSVE-NEXT:  .LBB2_10: // %else26
; NONEON-NOSVE-NEXT:    tbnz w8, #10, .LBB2_27
; NONEON-NOSVE-NEXT:  .LBB2_11: // %else29
; NONEON-NOSVE-NEXT:    tbnz w8, #11, .LBB2_28
; NONEON-NOSVE-NEXT:  .LBB2_12: // %else32
; NONEON-NOSVE-NEXT:    tbnz w8, #12, .LBB2_29
; NONEON-NOSVE-NEXT:  .LBB2_13: // %else35
; NONEON-NOSVE-NEXT:    tbnz w8, #13, .LBB2_30
; NONEON-NOSVE-NEXT:  .LBB2_14: // %else38
; NONEON-NOSVE-NEXT:    tbnz w8, #14, .LBB2_31
; NONEON-NOSVE-NEXT:  .LBB2_15: // %else41
; NONEON-NOSVE-NEXT:    tbnz w8, #15, .LBB2_32
; NONEON-NOSVE-NEXT:  .LBB2_16: // %else44
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB2_17: // %cond.load
; NONEON-NOSVE-NEXT:    ldr b0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB2_2
; NONEON-NOSVE-NEXT:  .LBB2_18: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #1
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB2_3
; NONEON-NOSVE-NEXT:  .LBB2_19: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB2_4
; NONEON-NOSVE-NEXT:  .LBB2_20: // %cond.load7
; NONEON-NOSVE-NEXT:    add x9, x0, #3
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #4, .LBB2_5
; NONEON-NOSVE-NEXT:  .LBB2_21: // %cond.load10
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #5, .LBB2_6
; NONEON-NOSVE-NEXT:  .LBB2_22: // %cond.load13
; NONEON-NOSVE-NEXT:    add x9, x0, #5
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #6, .LBB2_7
; NONEON-NOSVE-NEXT:  .LBB2_23: // %cond.load16
; NONEON-NOSVE-NEXT:    add x9, x0, #6
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #7, .LBB2_8
; NONEON-NOSVE-NEXT:  .LBB2_24: // %cond.load19
; NONEON-NOSVE-NEXT:    add x9, x0, #7
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[7], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #8, .LBB2_9
; NONEON-NOSVE-NEXT:  .LBB2_25: // %cond.load22
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[8], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #9, .LBB2_10
; NONEON-NOSVE-NEXT:  .LBB2_26: // %cond.load25
; NONEON-NOSVE-NEXT:    add x9, x0, #9
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[9], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #10, .LBB2_11
; NONEON-NOSVE-NEXT:  .LBB2_27: // %cond.load28
; NONEON-NOSVE-NEXT:    add x9, x0, #10
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[10], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #11, .LBB2_12
; NONEON-NOSVE-NEXT:  .LBB2_28: // %cond.load31
; NONEON-NOSVE-NEXT:    add x9, x0, #11
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[11], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #12, .LBB2_13
; NONEON-NOSVE-NEXT:  .LBB2_29: // %cond.load34
; NONEON-NOSVE-NEXT:    add x9, x0, #12
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[12], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #13, .LBB2_14
; NONEON-NOSVE-NEXT:  .LBB2_30: // %cond.load37
; NONEON-NOSVE-NEXT:    add x9, x0, #13
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[13], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #14, .LBB2_15
; NONEON-NOSVE-NEXT:  .LBB2_31: // %cond.load40
; NONEON-NOSVE-NEXT:    add x9, x0, #14
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[14], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #15, .LBB2_16
; NONEON-NOSVE-NEXT:  .LBB2_32: // %cond.load43
; NONEON-NOSVE-NEXT:    add x8, x0, #15
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[15], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <16 x i8> @llvm.masked.load.v16i8(ptr %src, i32 8, <16 x i1> %mask, <16 x i8> zeroinitializer)
  ret <16 x i8> %load
}

define <32 x i8> @masked_load_v32i8(ptr %src, <32 x i1> %mask) {
; CHECK-LABEL: masked_load_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    ldr w8, [sp, #224]
; CHECK-NEXT:    ldr w9, [sp, #216]
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    strb w7, [sp, #6]
; CHECK-NEXT:    strb w8, [sp, #31]
; CHECK-NEXT:    ldr w8, [sp, #208]
; CHECK-NEXT:    strb w9, [sp, #30]
; CHECK-NEXT:    ldr w9, [sp, #200]
; CHECK-NEXT:    strb w8, [sp, #29]
; CHECK-NEXT:    ldr w8, [sp, #192]
; CHECK-NEXT:    strb w9, [sp, #28]
; CHECK-NEXT:    ldr w9, [sp, #184]
; CHECK-NEXT:    strb w8, [sp, #27]
; CHECK-NEXT:    ldr w8, [sp, #176]
; CHECK-NEXT:    strb w9, [sp, #26]
; CHECK-NEXT:    ldr w9, [sp, #168]
; CHECK-NEXT:    strb w8, [sp, #25]
; CHECK-NEXT:    ldr w8, [sp, #160]
; CHECK-NEXT:    strb w9, [sp, #24]
; CHECK-NEXT:    ldr w9, [sp, #152]
; CHECK-NEXT:    strb w8, [sp, #23]
; CHECK-NEXT:    ldr w8, [sp, #144]
; CHECK-NEXT:    strb w9, [sp, #22]
; CHECK-NEXT:    ldr w9, [sp, #136]
; CHECK-NEXT:    strb w8, [sp, #21]
; CHECK-NEXT:    ldr w8, [sp, #128]
; CHECK-NEXT:    strb w9, [sp, #20]
; CHECK-NEXT:    ldr w9, [sp, #120]
; CHECK-NEXT:    strb w8, [sp, #19]
; CHECK-NEXT:    ldr w8, [sp, #112]
; CHECK-NEXT:    strb w9, [sp, #18]
; CHECK-NEXT:    ldr w9, [sp, #104]
; CHECK-NEXT:    strb w8, [sp, #17]
; CHECK-NEXT:    ldr w8, [sp, #96]
; CHECK-NEXT:    strb w9, [sp, #16]
; CHECK-NEXT:    ldr w9, [sp, #88]
; CHECK-NEXT:    strb w8, [sp, #15]
; CHECK-NEXT:    ldr w8, [sp, #80]
; CHECK-NEXT:    strb w9, [sp, #14]
; CHECK-NEXT:    ldr w9, [sp, #72]
; CHECK-NEXT:    strb w8, [sp, #13]
; CHECK-NEXT:    ldr w8, [sp, #64]
; CHECK-NEXT:    strb w9, [sp, #12]
; CHECK-NEXT:    ldr w9, [sp, #56]
; CHECK-NEXT:    strb w8, [sp, #11]
; CHECK-NEXT:    ldr w8, [sp, #48]
; CHECK-NEXT:    strb w9, [sp, #10]
; CHECK-NEXT:    ldr w9, [sp, #40]
; CHECK-NEXT:    strb w8, [sp, #9]
; CHECK-NEXT:    ldr w8, [sp, #32]
; CHECK-NEXT:    strb w9, [sp, #8]
; CHECK-NEXT:    strb w8, [sp, #7]
; CHECK-NEXT:    mov w8, #16 // =0x10
; CHECK-NEXT:    strb w6, [sp, #5]
; CHECK-NEXT:    strb w5, [sp, #4]
; CHECK-NEXT:    strb w4, [sp, #3]
; CHECK-NEXT:    strb w3, [sp, #2]
; CHECK-NEXT:    strb w2, [sp, #1]
; CHECK-NEXT:    strb w1, [sp]
; CHECK-NEXT:    ldp q1, q0, [sp]
; CHECK-NEXT:    lsl z0.b, z0.b, #7
; CHECK-NEXT:    lsl z1.b, z1.b, #7
; CHECK-NEXT:    asr z0.b, z0.b, #7
; CHECK-NEXT:    asr z1.b, z1.b, #7
; CHECK-NEXT:    cmpne p1.b, p0/z, z0.b, #0
; CHECK-NEXT:    cmpne p0.b, p0/z, z1.b, #0
; CHECK-NEXT:    ld1b { z0.b }, p0/z, [x0]
; CHECK-NEXT:    ld1b { z1.b }, p1/z, [x0, x8]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 killed $z1
; CHECK-NEXT:    add sp, sp, #32
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v32i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #72]
; NONEON-NOSVE-NEXT:    fmov s1, w1
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #80]
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #88]
; NONEON-NOSVE-NEXT:    mov v1.b[1], w2
; NONEON-NOSVE-NEXT:    mov v0.b[1], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp]
; NONEON-NOSVE-NEXT:    mov v1.b[2], w3
; NONEON-NOSVE-NEXT:    mov v0.b[2], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #96]
; NONEON-NOSVE-NEXT:    mov v1.b[3], w4
; NONEON-NOSVE-NEXT:    mov v0.b[3], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #104]
; NONEON-NOSVE-NEXT:    mov v1.b[4], w5
; NONEON-NOSVE-NEXT:    mov v0.b[4], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #112]
; NONEON-NOSVE-NEXT:    mov v1.b[5], w6
; NONEON-NOSVE-NEXT:    mov v0.b[5], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #120]
; NONEON-NOSVE-NEXT:    mov v1.b[6], w7
; NONEON-NOSVE-NEXT:    mov v0.b[6], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #128]
; NONEON-NOSVE-NEXT:    mov v1.b[7], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #8]
; NONEON-NOSVE-NEXT:    mov v0.b[7], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #136]
; NONEON-NOSVE-NEXT:    mov v1.b[8], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #16]
; NONEON-NOSVE-NEXT:    mov v0.b[8], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #144]
; NONEON-NOSVE-NEXT:    mov v1.b[9], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #24]
; NONEON-NOSVE-NEXT:    mov v0.b[9], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #152]
; NONEON-NOSVE-NEXT:    mov v1.b[10], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #32]
; NONEON-NOSVE-NEXT:    mov v0.b[10], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #160]
; NONEON-NOSVE-NEXT:    mov v1.b[11], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #40]
; NONEON-NOSVE-NEXT:    mov v0.b[11], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #168]
; NONEON-NOSVE-NEXT:    mov v1.b[12], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #48]
; NONEON-NOSVE-NEXT:    mov v0.b[12], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #176]
; NONEON-NOSVE-NEXT:    mov v1.b[13], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #56]
; NONEON-NOSVE-NEXT:    mov v0.b[13], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #184]
; NONEON-NOSVE-NEXT:    mov v1.b[14], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #64]
; NONEON-NOSVE-NEXT:    mov v0.b[14], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #192]
; NONEON-NOSVE-NEXT:    mov v1.b[15], w9
; NONEON-NOSVE-NEXT:    mov v0.b[15], w8
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI3_0
; NONEON-NOSVE-NEXT:    ldr q2, [x8, :lo12:.LCPI3_0]
; NONEON-NOSVE-NEXT:    shl v1.16b, v1.16b, #7
; NONEON-NOSVE-NEXT:    shl v0.16b, v0.16b, #7
; NONEON-NOSVE-NEXT:    cmlt v1.16b, v1.16b, #0
; NONEON-NOSVE-NEXT:    cmlt v0.16b, v0.16b, #0
; NONEON-NOSVE-NEXT:    and v1.16b, v1.16b, v2.16b
; NONEON-NOSVE-NEXT:    and v0.16b, v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ext v3.16b, v1.16b, v1.16b, #8
; NONEON-NOSVE-NEXT:    ext v2.16b, v0.16b, v0.16b, #8
; NONEON-NOSVE-NEXT:    zip1 v1.16b, v1.16b, v3.16b
; NONEON-NOSVE-NEXT:    zip1 v0.16b, v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    addv h1, v1.8h
; NONEON-NOSVE-NEXT:    addv h0, v0.8h
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    movi v1.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    bfi w8, w9, #16, #16
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB3_33
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB3_34
; NONEON-NOSVE-NEXT:  .LBB3_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB3_35
; NONEON-NOSVE-NEXT:  .LBB3_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB3_36
; NONEON-NOSVE-NEXT:  .LBB3_4: // %else8
; NONEON-NOSVE-NEXT:    tbnz w8, #4, .LBB3_37
; NONEON-NOSVE-NEXT:  .LBB3_5: // %else11
; NONEON-NOSVE-NEXT:    tbnz w8, #5, .LBB3_38
; NONEON-NOSVE-NEXT:  .LBB3_6: // %else14
; NONEON-NOSVE-NEXT:    tbnz w8, #6, .LBB3_39
; NONEON-NOSVE-NEXT:  .LBB3_7: // %else17
; NONEON-NOSVE-NEXT:    tbnz w8, #7, .LBB3_40
; NONEON-NOSVE-NEXT:  .LBB3_8: // %else20
; NONEON-NOSVE-NEXT:    tbnz w8, #8, .LBB3_41
; NONEON-NOSVE-NEXT:  .LBB3_9: // %else23
; NONEON-NOSVE-NEXT:    tbnz w8, #9, .LBB3_42
; NONEON-NOSVE-NEXT:  .LBB3_10: // %else26
; NONEON-NOSVE-NEXT:    tbnz w8, #10, .LBB3_43
; NONEON-NOSVE-NEXT:  .LBB3_11: // %else29
; NONEON-NOSVE-NEXT:    tbnz w8, #11, .LBB3_44
; NONEON-NOSVE-NEXT:  .LBB3_12: // %else32
; NONEON-NOSVE-NEXT:    tbnz w8, #12, .LBB3_45
; NONEON-NOSVE-NEXT:  .LBB3_13: // %else35
; NONEON-NOSVE-NEXT:    tbnz w8, #13, .LBB3_46
; NONEON-NOSVE-NEXT:  .LBB3_14: // %else38
; NONEON-NOSVE-NEXT:    tbnz w8, #14, .LBB3_47
; NONEON-NOSVE-NEXT:  .LBB3_15: // %else41
; NONEON-NOSVE-NEXT:    tbnz w8, #15, .LBB3_48
; NONEON-NOSVE-NEXT:  .LBB3_16: // %else44
; NONEON-NOSVE-NEXT:    tbnz w8, #16, .LBB3_49
; NONEON-NOSVE-NEXT:  .LBB3_17: // %else47
; NONEON-NOSVE-NEXT:    tbnz w8, #17, .LBB3_50
; NONEON-NOSVE-NEXT:  .LBB3_18: // %else50
; NONEON-NOSVE-NEXT:    tbnz w8, #18, .LBB3_51
; NONEON-NOSVE-NEXT:  .LBB3_19: // %else53
; NONEON-NOSVE-NEXT:    tbnz w8, #19, .LBB3_52
; NONEON-NOSVE-NEXT:  .LBB3_20: // %else56
; NONEON-NOSVE-NEXT:    tbnz w8, #20, .LBB3_53
; NONEON-NOSVE-NEXT:  .LBB3_21: // %else59
; NONEON-NOSVE-NEXT:    tbnz w8, #21, .LBB3_54
; NONEON-NOSVE-NEXT:  .LBB3_22: // %else62
; NONEON-NOSVE-NEXT:    tbnz w8, #22, .LBB3_55
; NONEON-NOSVE-NEXT:  .LBB3_23: // %else65
; NONEON-NOSVE-NEXT:    tbnz w8, #23, .LBB3_56
; NONEON-NOSVE-NEXT:  .LBB3_24: // %else68
; NONEON-NOSVE-NEXT:    tbnz w8, #24, .LBB3_57
; NONEON-NOSVE-NEXT:  .LBB3_25: // %else71
; NONEON-NOSVE-NEXT:    tbnz w8, #25, .LBB3_58
; NONEON-NOSVE-NEXT:  .LBB3_26: // %else74
; NONEON-NOSVE-NEXT:    tbnz w8, #26, .LBB3_59
; NONEON-NOSVE-NEXT:  .LBB3_27: // %else77
; NONEON-NOSVE-NEXT:    tbnz w8, #27, .LBB3_60
; NONEON-NOSVE-NEXT:  .LBB3_28: // %else80
; NONEON-NOSVE-NEXT:    tbnz w8, #28, .LBB3_61
; NONEON-NOSVE-NEXT:  .LBB3_29: // %else83
; NONEON-NOSVE-NEXT:    tbnz w8, #29, .LBB3_62
; NONEON-NOSVE-NEXT:  .LBB3_30: // %else86
; NONEON-NOSVE-NEXT:    tbnz w8, #30, .LBB3_63
; NONEON-NOSVE-NEXT:  .LBB3_31: // %else89
; NONEON-NOSVE-NEXT:    tbnz w8, #31, .LBB3_64
; NONEON-NOSVE-NEXT:  .LBB3_32: // %else92
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB3_33: // %cond.load
; NONEON-NOSVE-NEXT:    ldr b0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB3_2
; NONEON-NOSVE-NEXT:  .LBB3_34: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #1
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB3_3
; NONEON-NOSVE-NEXT:  .LBB3_35: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB3_4
; NONEON-NOSVE-NEXT:  .LBB3_36: // %cond.load7
; NONEON-NOSVE-NEXT:    add x9, x0, #3
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #4, .LBB3_5
; NONEON-NOSVE-NEXT:  .LBB3_37: // %cond.load10
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #5, .LBB3_6
; NONEON-NOSVE-NEXT:  .LBB3_38: // %cond.load13
; NONEON-NOSVE-NEXT:    add x9, x0, #5
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #6, .LBB3_7
; NONEON-NOSVE-NEXT:  .LBB3_39: // %cond.load16
; NONEON-NOSVE-NEXT:    add x9, x0, #6
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #7, .LBB3_8
; NONEON-NOSVE-NEXT:  .LBB3_40: // %cond.load19
; NONEON-NOSVE-NEXT:    add x9, x0, #7
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[7], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #8, .LBB3_9
; NONEON-NOSVE-NEXT:  .LBB3_41: // %cond.load22
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[8], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #9, .LBB3_10
; NONEON-NOSVE-NEXT:  .LBB3_42: // %cond.load25
; NONEON-NOSVE-NEXT:    add x9, x0, #9
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[9], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #10, .LBB3_11
; NONEON-NOSVE-NEXT:  .LBB3_43: // %cond.load28
; NONEON-NOSVE-NEXT:    add x9, x0, #10
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[10], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #11, .LBB3_12
; NONEON-NOSVE-NEXT:  .LBB3_44: // %cond.load31
; NONEON-NOSVE-NEXT:    add x9, x0, #11
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[11], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #12, .LBB3_13
; NONEON-NOSVE-NEXT:  .LBB3_45: // %cond.load34
; NONEON-NOSVE-NEXT:    add x9, x0, #12
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[12], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #13, .LBB3_14
; NONEON-NOSVE-NEXT:  .LBB3_46: // %cond.load37
; NONEON-NOSVE-NEXT:    add x9, x0, #13
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[13], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #14, .LBB3_15
; NONEON-NOSVE-NEXT:  .LBB3_47: // %cond.load40
; NONEON-NOSVE-NEXT:    add x9, x0, #14
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[14], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #15, .LBB3_16
; NONEON-NOSVE-NEXT:  .LBB3_48: // %cond.load43
; NONEON-NOSVE-NEXT:    add x9, x0, #15
; NONEON-NOSVE-NEXT:    ld1 { v0.b }[15], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #16, .LBB3_17
; NONEON-NOSVE-NEXT:  .LBB3_49: // %cond.load46
; NONEON-NOSVE-NEXT:    add x9, x0, #16
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[0], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #17, .LBB3_18
; NONEON-NOSVE-NEXT:  .LBB3_50: // %cond.load49
; NONEON-NOSVE-NEXT:    add x9, x0, #17
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #18, .LBB3_19
; NONEON-NOSVE-NEXT:  .LBB3_51: // %cond.load52
; NONEON-NOSVE-NEXT:    add x9, x0, #18
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #19, .LBB3_20
; NONEON-NOSVE-NEXT:  .LBB3_52: // %cond.load55
; NONEON-NOSVE-NEXT:    add x9, x0, #19
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #20, .LBB3_21
; NONEON-NOSVE-NEXT:  .LBB3_53: // %cond.load58
; NONEON-NOSVE-NEXT:    add x9, x0, #20
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #21, .LBB3_22
; NONEON-NOSVE-NEXT:  .LBB3_54: // %cond.load61
; NONEON-NOSVE-NEXT:    add x9, x0, #21
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #22, .LBB3_23
; NONEON-NOSVE-NEXT:  .LBB3_55: // %cond.load64
; NONEON-NOSVE-NEXT:    add x9, x0, #22
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #23, .LBB3_24
; NONEON-NOSVE-NEXT:  .LBB3_56: // %cond.load67
; NONEON-NOSVE-NEXT:    add x9, x0, #23
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[7], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #24, .LBB3_25
; NONEON-NOSVE-NEXT:  .LBB3_57: // %cond.load70
; NONEON-NOSVE-NEXT:    add x9, x0, #24
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[8], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #25, .LBB3_26
; NONEON-NOSVE-NEXT:  .LBB3_58: // %cond.load73
; NONEON-NOSVE-NEXT:    add x9, x0, #25
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[9], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #26, .LBB3_27
; NONEON-NOSVE-NEXT:  .LBB3_59: // %cond.load76
; NONEON-NOSVE-NEXT:    add x9, x0, #26
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[10], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #27, .LBB3_28
; NONEON-NOSVE-NEXT:  .LBB3_60: // %cond.load79
; NONEON-NOSVE-NEXT:    add x9, x0, #27
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[11], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #28, .LBB3_29
; NONEON-NOSVE-NEXT:  .LBB3_61: // %cond.load82
; NONEON-NOSVE-NEXT:    add x9, x0, #28
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[12], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #29, .LBB3_30
; NONEON-NOSVE-NEXT:  .LBB3_62: // %cond.load85
; NONEON-NOSVE-NEXT:    add x9, x0, #29
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[13], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #30, .LBB3_31
; NONEON-NOSVE-NEXT:  .LBB3_63: // %cond.load88
; NONEON-NOSVE-NEXT:    add x9, x0, #30
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[14], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #31, .LBB3_32
; NONEON-NOSVE-NEXT:  .LBB3_64: // %cond.load91
; NONEON-NOSVE-NEXT:    add x8, x0, #31
; NONEON-NOSVE-NEXT:    ld1 { v1.b }[15], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <32 x i8> @llvm.masked.load.v32i8(ptr %src, i32 8, <32 x i1> %mask, <32 x i8> zeroinitializer)
  ret <32 x i8> %load
}

define <2 x half> @masked_load_v2f16(ptr %src, <2 x i1> %mask) {
; CHECK-LABEL: masked_load_v2f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    mov z1.s, z0.s[1]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    str wzr, [sp, #12]
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    strh w8, [sp, #8]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    strh w8, [sp, #10]
; CHECK-NEXT:    ldr d0, [sp, #8]
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    cmpne p0.h, p0/z, z0.h, #0
; CHECK-NEXT:    ld1h { z0.h }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v2f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.2s, v0.2s, #31
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI4_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI4_0]
; NONEON-NOSVE-NEXT:    cmlt v0.2s, v0.2s, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addp v1.2s, v0.2s, v0.2s
; NONEON-NOSVE-NEXT:    movi d0, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB4_3
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB4_4
; NONEON-NOSVE-NEXT:  .LBB4_2: // %else2
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB4_3: // %cond.load
; NONEON-NOSVE-NEXT:    ldr h0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB4_2
; NONEON-NOSVE-NEXT:  .LBB4_4: // %cond.load1
; NONEON-NOSVE-NEXT:    add x8, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[1], [x8]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %load = call <2 x half> @llvm.masked.load.v2f16(ptr %src, i32 8, <2 x i1> %mask, <2 x half> zeroinitializer)
  ret <2 x half> %load
}

define <4 x half> @masked_load_v4f16(ptr %src, <4 x i1> %mask) {
; CHECK-LABEL: masked_load_v4f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    cmpne p0.h, p0/z, z0.h, #0
; CHECK-NEXT:    ld1h { z0.h }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v4f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.4h, v0.4h, #15
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI5_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI5_0]
; NONEON-NOSVE-NEXT:    cmlt v0.4h, v0.4h, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addv h1, v0.4h
; NONEON-NOSVE-NEXT:    movi d0, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB5_5
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB5_6
; NONEON-NOSVE-NEXT:  .LBB5_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB5_7
; NONEON-NOSVE-NEXT:  .LBB5_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB5_8
; NONEON-NOSVE-NEXT:  .LBB5_4: // %else8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB5_5: // %cond.load
; NONEON-NOSVE-NEXT:    ldr h0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB5_2
; NONEON-NOSVE-NEXT:  .LBB5_6: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB5_3
; NONEON-NOSVE-NEXT:  .LBB5_7: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB5_4
; NONEON-NOSVE-NEXT:  .LBB5_8: // %cond.load7
; NONEON-NOSVE-NEXT:    add x8, x0, #6
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[3], [x8]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %load = call <4 x half> @llvm.masked.load.v4f16(ptr %src, i32 8, <4 x i1> %mask, <4 x half> zeroinitializer)
  ret <4 x half> %load
}

define <8 x half> @masked_load_v8f16(ptr %src, <8 x i1> %mask) {
; CHECK-LABEL: masked_load_v8f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    cmpne p0.h, p0/z, z0.h, #0
; CHECK-NEXT:    ld1h { z0.h }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v8f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.8b, v0.8b, #7
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI6_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI6_0]
; NONEON-NOSVE-NEXT:    cmlt v0.8b, v0.8b, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addv b1, v0.8b
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB6_9
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB6_10
; NONEON-NOSVE-NEXT:  .LBB6_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB6_11
; NONEON-NOSVE-NEXT:  .LBB6_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB6_12
; NONEON-NOSVE-NEXT:  .LBB6_4: // %else8
; NONEON-NOSVE-NEXT:    tbnz w8, #4, .LBB6_13
; NONEON-NOSVE-NEXT:  .LBB6_5: // %else11
; NONEON-NOSVE-NEXT:    tbnz w8, #5, .LBB6_14
; NONEON-NOSVE-NEXT:  .LBB6_6: // %else14
; NONEON-NOSVE-NEXT:    tbnz w8, #6, .LBB6_15
; NONEON-NOSVE-NEXT:  .LBB6_7: // %else17
; NONEON-NOSVE-NEXT:    tbnz w8, #7, .LBB6_16
; NONEON-NOSVE-NEXT:  .LBB6_8: // %else20
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB6_9: // %cond.load
; NONEON-NOSVE-NEXT:    ldr h0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB6_2
; NONEON-NOSVE-NEXT:  .LBB6_10: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB6_3
; NONEON-NOSVE-NEXT:  .LBB6_11: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB6_4
; NONEON-NOSVE-NEXT:  .LBB6_12: // %cond.load7
; NONEON-NOSVE-NEXT:    add x9, x0, #6
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #4, .LBB6_5
; NONEON-NOSVE-NEXT:  .LBB6_13: // %cond.load10
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #5, .LBB6_6
; NONEON-NOSVE-NEXT:  .LBB6_14: // %cond.load13
; NONEON-NOSVE-NEXT:    add x9, x0, #10
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #6, .LBB6_7
; NONEON-NOSVE-NEXT:  .LBB6_15: // %cond.load16
; NONEON-NOSVE-NEXT:    add x9, x0, #12
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #7, .LBB6_8
; NONEON-NOSVE-NEXT:  .LBB6_16: // %cond.load19
; NONEON-NOSVE-NEXT:    add x8, x0, #14
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[7], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <8 x half> @llvm.masked.load.v8f16(ptr %src, i32 8, <8 x i1> %mask, <8 x half> zeroinitializer)
  ret <8 x half> %load
}

define <16 x half> @masked_load_v16f16(ptr %src, <16 x i1> %mask) {
; CHECK-LABEL: masked_load_v16f16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    uunpklo z1.h, z0.b
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    mov x8, #8 // =0x8
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    lsl z1.h, z1.h, #15
; CHECK-NEXT:    asr z1.h, z1.h, #15
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    cmpne p1.h, p0/z, z1.h, #0
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    cmpne p0.h, p0/z, z0.h, #0
; CHECK-NEXT:    ld1h { z0.h }, p1/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ld1h { z1.h }, p0/z, [x0, x8, lsl #1]
; CHECK-NEXT:    // kill: def $q1 killed $q1 killed $z1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v16f16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.16b, v0.16b, #7
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI7_0
; NONEON-NOSVE-NEXT:    ldr q1, [x8, :lo12:.LCPI7_0]
; NONEON-NOSVE-NEXT:    cmlt v0.16b, v0.16b, #0
; NONEON-NOSVE-NEXT:    and v0.16b, v0.16b, v1.16b
; NONEON-NOSVE-NEXT:    ext v1.16b, v0.16b, v0.16b, #8
; NONEON-NOSVE-NEXT:    zip1 v0.16b, v0.16b, v1.16b
; NONEON-NOSVE-NEXT:    movi v1.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    addv h2, v0.8h
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s2
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB7_17
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB7_18
; NONEON-NOSVE-NEXT:  .LBB7_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB7_19
; NONEON-NOSVE-NEXT:  .LBB7_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB7_20
; NONEON-NOSVE-NEXT:  .LBB7_4: // %else8
; NONEON-NOSVE-NEXT:    tbnz w8, #4, .LBB7_21
; NONEON-NOSVE-NEXT:  .LBB7_5: // %else11
; NONEON-NOSVE-NEXT:    tbnz w8, #5, .LBB7_22
; NONEON-NOSVE-NEXT:  .LBB7_6: // %else14
; NONEON-NOSVE-NEXT:    tbnz w8, #6, .LBB7_23
; NONEON-NOSVE-NEXT:  .LBB7_7: // %else17
; NONEON-NOSVE-NEXT:    tbnz w8, #7, .LBB7_24
; NONEON-NOSVE-NEXT:  .LBB7_8: // %else20
; NONEON-NOSVE-NEXT:    tbnz w8, #8, .LBB7_25
; NONEON-NOSVE-NEXT:  .LBB7_9: // %else23
; NONEON-NOSVE-NEXT:    tbnz w8, #9, .LBB7_26
; NONEON-NOSVE-NEXT:  .LBB7_10: // %else26
; NONEON-NOSVE-NEXT:    tbnz w8, #10, .LBB7_27
; NONEON-NOSVE-NEXT:  .LBB7_11: // %else29
; NONEON-NOSVE-NEXT:    tbnz w8, #11, .LBB7_28
; NONEON-NOSVE-NEXT:  .LBB7_12: // %else32
; NONEON-NOSVE-NEXT:    tbnz w8, #12, .LBB7_29
; NONEON-NOSVE-NEXT:  .LBB7_13: // %else35
; NONEON-NOSVE-NEXT:    tbnz w8, #13, .LBB7_30
; NONEON-NOSVE-NEXT:  .LBB7_14: // %else38
; NONEON-NOSVE-NEXT:    tbnz w8, #14, .LBB7_31
; NONEON-NOSVE-NEXT:  .LBB7_15: // %else41
; NONEON-NOSVE-NEXT:    tbnz w8, #15, .LBB7_32
; NONEON-NOSVE-NEXT:  .LBB7_16: // %else44
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB7_17: // %cond.load
; NONEON-NOSVE-NEXT:    ldr h0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB7_2
; NONEON-NOSVE-NEXT:  .LBB7_18: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB7_3
; NONEON-NOSVE-NEXT:  .LBB7_19: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB7_4
; NONEON-NOSVE-NEXT:  .LBB7_20: // %cond.load7
; NONEON-NOSVE-NEXT:    add x9, x0, #6
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #4, .LBB7_5
; NONEON-NOSVE-NEXT:  .LBB7_21: // %cond.load10
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #5, .LBB7_6
; NONEON-NOSVE-NEXT:  .LBB7_22: // %cond.load13
; NONEON-NOSVE-NEXT:    add x9, x0, #10
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #6, .LBB7_7
; NONEON-NOSVE-NEXT:  .LBB7_23: // %cond.load16
; NONEON-NOSVE-NEXT:    add x9, x0, #12
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #7, .LBB7_8
; NONEON-NOSVE-NEXT:  .LBB7_24: // %cond.load19
; NONEON-NOSVE-NEXT:    add x9, x0, #14
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[7], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #8, .LBB7_9
; NONEON-NOSVE-NEXT:  .LBB7_25: // %cond.load22
; NONEON-NOSVE-NEXT:    add x9, x0, #16
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[0], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #9, .LBB7_10
; NONEON-NOSVE-NEXT:  .LBB7_26: // %cond.load25
; NONEON-NOSVE-NEXT:    add x9, x0, #18
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #10, .LBB7_11
; NONEON-NOSVE-NEXT:  .LBB7_27: // %cond.load28
; NONEON-NOSVE-NEXT:    add x9, x0, #20
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #11, .LBB7_12
; NONEON-NOSVE-NEXT:  .LBB7_28: // %cond.load31
; NONEON-NOSVE-NEXT:    add x9, x0, #22
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #12, .LBB7_13
; NONEON-NOSVE-NEXT:  .LBB7_29: // %cond.load34
; NONEON-NOSVE-NEXT:    add x9, x0, #24
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[4], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #13, .LBB7_14
; NONEON-NOSVE-NEXT:  .LBB7_30: // %cond.load37
; NONEON-NOSVE-NEXT:    add x9, x0, #26
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[5], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #14, .LBB7_15
; NONEON-NOSVE-NEXT:  .LBB7_31: // %cond.load40
; NONEON-NOSVE-NEXT:    add x9, x0, #28
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[6], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #15, .LBB7_16
; NONEON-NOSVE-NEXT:  .LBB7_32: // %cond.load43
; NONEON-NOSVE-NEXT:    add x8, x0, #30
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[7], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <16 x half> @llvm.masked.load.v16f16(ptr %src, i32 8, <16 x i1> %mask, <16 x half> zeroinitializer)
  ret <16 x half> %load
}

define <2 x float> @masked_load_v2f32(ptr %src, <2 x i1> %mask) {
; CHECK-LABEL: masked_load_v2f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    lsl z0.s, z0.s, #31
; CHECK-NEXT:    asr z0.s, z0.s, #31
; CHECK-NEXT:    cmpne p0.s, p0/z, z0.s, #0
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v2f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.2s, v0.2s, #31
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI8_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI8_0]
; NONEON-NOSVE-NEXT:    cmlt v0.2s, v0.2s, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addp v1.2s, v0.2s, v0.2s
; NONEON-NOSVE-NEXT:    movi d0, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB8_3
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB8_4
; NONEON-NOSVE-NEXT:  .LBB8_2: // %else2
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB8_3: // %cond.load
; NONEON-NOSVE-NEXT:    ldr s0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB8_2
; NONEON-NOSVE-NEXT:  .LBB8_4: // %cond.load1
; NONEON-NOSVE-NEXT:    add x8, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[1], [x8]
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %load = call <2 x float> @llvm.masked.load.v2f32(ptr %src, i32 8, <2 x i1> %mask, <2 x float> zeroinitializer)
  ret <2 x float> %load
}

define <4 x float> @masked_load_v4f32(ptr %src, <4 x i1> %mask) {
; CHECK-LABEL: masked_load_v4f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    lsl z0.s, z0.s, #31
; CHECK-NEXT:    asr z0.s, z0.s, #31
; CHECK-NEXT:    cmpne p0.s, p0/z, z0.s, #0
; CHECK-NEXT:    ld1w { z0.s }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v4f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.4h, v0.4h, #15
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI9_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI9_0]
; NONEON-NOSVE-NEXT:    cmlt v0.4h, v0.4h, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addv h1, v0.4h
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB9_5
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB9_6
; NONEON-NOSVE-NEXT:  .LBB9_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB9_7
; NONEON-NOSVE-NEXT:  .LBB9_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB9_8
; NONEON-NOSVE-NEXT:  .LBB9_4: // %else8
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB9_5: // %cond.load
; NONEON-NOSVE-NEXT:    ldr s0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB9_2
; NONEON-NOSVE-NEXT:  .LBB9_6: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB9_3
; NONEON-NOSVE-NEXT:  .LBB9_7: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB9_4
; NONEON-NOSVE-NEXT:  .LBB9_8: // %cond.load7
; NONEON-NOSVE-NEXT:    add x8, x0, #12
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[3], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <4 x float> @llvm.masked.load.v4f32(ptr %src, i32 8, <4 x i1> %mask, <4 x float> zeroinitializer)
  ret <4 x float> %load
}

define <8 x float> @masked_load_v8f32(ptr %src, <8 x i1> %mask) {
; CHECK-LABEL: masked_load_v8f32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    mov z1.b, z0.b[3]
; CHECK-NEXT:    mov z2.b, z0.b[2]
; CHECK-NEXT:    mov z3.b, z0.b[1]
; CHECK-NEXT:    mov z4.b, z0.b[7]
; CHECK-NEXT:    strh w8, [sp, #-16]!
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    mov z1.b, z0.b[6]
; CHECK-NEXT:    fmov w9, s2
; CHECK-NEXT:    mov z2.b, z0.b[5]
; CHECK-NEXT:    mov z0.b, z0.b[4]
; CHECK-NEXT:    strh w8, [sp, #6]
; CHECK-NEXT:    fmov w8, s3
; CHECK-NEXT:    strh w9, [sp, #4]
; CHECK-NEXT:    fmov w9, s4
; CHECK-NEXT:    strh w8, [sp, #2]
; CHECK-NEXT:    fmov w8, s1
; CHECK-NEXT:    strh w9, [sp, #14]
; CHECK-NEXT:    strh w8, [sp, #12]
; CHECK-NEXT:    fmov w8, s2
; CHECK-NEXT:    strh w8, [sp, #10]
; CHECK-NEXT:    fmov w8, s0
; CHECK-NEXT:    strh w8, [sp, #8]
; CHECK-NEXT:    mov x8, #4 // =0x4
; CHECK-NEXT:    ldp d0, d1, [sp]
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    lsl z0.s, z0.s, #31
; CHECK-NEXT:    lsl z1.s, z1.s, #31
; CHECK-NEXT:    asr z0.s, z0.s, #31
; CHECK-NEXT:    asr z1.s, z1.s, #31
; CHECK-NEXT:    cmpne p1.s, p0/z, z0.s, #0
; CHECK-NEXT:    cmpne p0.s, p0/z, z1.s, #0
; CHECK-NEXT:    ld1w { z0.s }, p1/z, [x0]
; CHECK-NEXT:    ld1w { z1.s }, p0/z, [x0, x8, lsl #2]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 killed $z1
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v8f32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.8b, v0.8b, #7
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI10_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI10_0]
; NONEON-NOSVE-NEXT:    cmlt v0.8b, v0.8b, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    movi v1.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    addv b2, v0.8b
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s2
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB10_9
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB10_10
; NONEON-NOSVE-NEXT:  .LBB10_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB10_11
; NONEON-NOSVE-NEXT:  .LBB10_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB10_12
; NONEON-NOSVE-NEXT:  .LBB10_4: // %else8
; NONEON-NOSVE-NEXT:    tbnz w8, #4, .LBB10_13
; NONEON-NOSVE-NEXT:  .LBB10_5: // %else11
; NONEON-NOSVE-NEXT:    tbnz w8, #5, .LBB10_14
; NONEON-NOSVE-NEXT:  .LBB10_6: // %else14
; NONEON-NOSVE-NEXT:    tbnz w8, #6, .LBB10_15
; NONEON-NOSVE-NEXT:  .LBB10_7: // %else17
; NONEON-NOSVE-NEXT:    tbnz w8, #7, .LBB10_16
; NONEON-NOSVE-NEXT:  .LBB10_8: // %else20
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB10_9: // %cond.load
; NONEON-NOSVE-NEXT:    ldr s0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB10_2
; NONEON-NOSVE-NEXT:  .LBB10_10: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB10_3
; NONEON-NOSVE-NEXT:  .LBB10_11: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB10_4
; NONEON-NOSVE-NEXT:  .LBB10_12: // %cond.load7
; NONEON-NOSVE-NEXT:    add x9, x0, #12
; NONEON-NOSVE-NEXT:    ld1 { v0.s }[3], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #4, .LBB10_5
; NONEON-NOSVE-NEXT:  .LBB10_13: // %cond.load10
; NONEON-NOSVE-NEXT:    add x9, x0, #16
; NONEON-NOSVE-NEXT:    ld1 { v1.s }[0], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #5, .LBB10_6
; NONEON-NOSVE-NEXT:  .LBB10_14: // %cond.load13
; NONEON-NOSVE-NEXT:    add x9, x0, #20
; NONEON-NOSVE-NEXT:    ld1 { v1.s }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #6, .LBB10_7
; NONEON-NOSVE-NEXT:  .LBB10_15: // %cond.load16
; NONEON-NOSVE-NEXT:    add x9, x0, #24
; NONEON-NOSVE-NEXT:    ld1 { v1.s }[2], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #7, .LBB10_8
; NONEON-NOSVE-NEXT:  .LBB10_16: // %cond.load19
; NONEON-NOSVE-NEXT:    add x8, x0, #28
; NONEON-NOSVE-NEXT:    ld1 { v1.s }[3], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <8 x float> @llvm.masked.load.v8f32(ptr %src, i32 8, <8 x i1> %mask, <8 x float> zeroinitializer)
  ret <8 x float> %load
}

define <2 x double> @masked_load_v2f64(ptr %src, <2 x i1> %mask) {
; CHECK-LABEL: masked_load_v2f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    lsl z0.d, z0.d, #63
; CHECK-NEXT:    asr z0.d, z0.d, #63
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1d { z0.d }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v2f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.2s, v0.2s, #31
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI11_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI11_0]
; NONEON-NOSVE-NEXT:    cmlt v0.2s, v0.2s, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    addp v1.2s, v0.2s, v0.2s
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB11_3
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB11_4
; NONEON-NOSVE-NEXT:  .LBB11_2: // %else2
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB11_3: // %cond.load
; NONEON-NOSVE-NEXT:    ldr d0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB11_2
; NONEON-NOSVE-NEXT:  .LBB11_4: // %cond.load1
; NONEON-NOSVE-NEXT:    add x8, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.d }[1], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <2 x double> @llvm.masked.load.v2f64(ptr %src, i32 8, <2 x i1> %mask, <2 x double> zeroinitializer)
  ret <2 x double> %load
}

define <4 x double> @masked_load_v4f64(ptr %src, <4 x i1> %mask) {
; CHECK-LABEL: masked_load_v4f64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    mov x8, #2 // =0x2
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z1.d, z0.s
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.d, z0.s
; CHECK-NEXT:    lsl z1.d, z1.d, #63
; CHECK-NEXT:    lsl z0.d, z0.d, #63
; CHECK-NEXT:    asr z1.d, z1.d, #63
; CHECK-NEXT:    asr z0.d, z0.d, #63
; CHECK-NEXT:    cmpne p1.d, p0/z, z1.d, #0
; CHECK-NEXT:    cmpne p0.d, p0/z, z0.d, #0
; CHECK-NEXT:    ld1d { z0.d }, p1/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ld1d { z1.d }, p0/z, [x0, x8, lsl #3]
; CHECK-NEXT:    // kill: def $q1 killed $q1 killed $z1
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_v4f64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.4h, v0.4h, #15
; NONEON-NOSVE-NEXT:    adrp x8, .LCPI12_0
; NONEON-NOSVE-NEXT:    ldr d1, [x8, :lo12:.LCPI12_0]
; NONEON-NOSVE-NEXT:    cmlt v0.4h, v0.4h, #0
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v1.8b
; NONEON-NOSVE-NEXT:    movi v1.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    addv h2, v0.4h
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    fmov w8, s2
; NONEON-NOSVE-NEXT:    tbnz w8, #0, .LBB12_5
; NONEON-NOSVE-NEXT:  // %bb.1: // %else
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB12_6
; NONEON-NOSVE-NEXT:  .LBB12_2: // %else2
; NONEON-NOSVE-NEXT:    tbnz w8, #2, .LBB12_7
; NONEON-NOSVE-NEXT:  .LBB12_3: // %else5
; NONEON-NOSVE-NEXT:    tbnz w8, #3, .LBB12_8
; NONEON-NOSVE-NEXT:  .LBB12_4: // %else8
; NONEON-NOSVE-NEXT:    ret
; NONEON-NOSVE-NEXT:  .LBB12_5: // %cond.load
; NONEON-NOSVE-NEXT:    ldr d0, [x0]
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB12_2
; NONEON-NOSVE-NEXT:  .LBB12_6: // %cond.load1
; NONEON-NOSVE-NEXT:    add x9, x0, #8
; NONEON-NOSVE-NEXT:    ld1 { v0.d }[1], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB12_3
; NONEON-NOSVE-NEXT:  .LBB12_7: // %cond.load4
; NONEON-NOSVE-NEXT:    add x9, x0, #16
; NONEON-NOSVE-NEXT:    ld1 { v1.d }[0], [x9]
; NONEON-NOSVE-NEXT:    tbz w8, #3, .LBB12_4
; NONEON-NOSVE-NEXT:  .LBB12_8: // %cond.load7
; NONEON-NOSVE-NEXT:    add x8, x0, #24
; NONEON-NOSVE-NEXT:    ld1 { v1.d }[1], [x8]
; NONEON-NOSVE-NEXT:    ret
  %load = call <4 x double> @llvm.masked.load.v4f64(ptr %src, i32 8, <4 x i1> %mask, <4 x double> zeroinitializer)
  ret <4 x double> %load
}

define <3 x i32> @masked_load_zext_v3i32(ptr %load_ptr, <3 x i1> %pm) {
; CHECK-LABEL: masked_load_zext_v3i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    strh w3, [sp, #12]
; CHECK-NEXT:    adrp x8, .LCPI13_0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    strh w2, [sp, #10]
; CHECK-NEXT:    ldr d0, [x8, :lo12:.LCPI13_0]
; CHECK-NEXT:    strh w1, [sp, #8]
; CHECK-NEXT:    ldr d1, [sp, #8]
; CHECK-NEXT:    and z0.d, z1.d, z0.d
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    cmpne p0.s, p0/z, z0.s, #0
; CHECK-NEXT:    ld1h { z0.s }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_zext_v3i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #16
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    and w8, w1, #0x1
; NONEON-NOSVE-NEXT:    bfi w8, w2, #1, #1
; NONEON-NOSVE-NEXT:    bfi w8, w3, #2, #1
; NONEON-NOSVE-NEXT:    tbz w8, #0, .LBB13_2
; NONEON-NOSVE-NEXT:  // %bb.1: // %cond.load
; NONEON-NOSVE-NEXT:    ldr h0, [x0]
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB13_3
; NONEON-NOSVE-NEXT:    b .LBB13_4
; NONEON-NOSVE-NEXT:  .LBB13_2:
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB13_4
; NONEON-NOSVE-NEXT:  .LBB13_3: // %cond.load1
; NONEON-NOSVE-NEXT:    mov v1.16b, v0.16b
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[1], [x9]
; NONEON-NOSVE-NEXT:    mov v1.h[2], v0.h[2]
; NONEON-NOSVE-NEXT:    fmov d0, d1
; NONEON-NOSVE-NEXT:  .LBB13_4: // %else2
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB13_6
; NONEON-NOSVE-NEXT:  // %bb.5: // %cond.load4
; NONEON-NOSVE-NEXT:    mov v0.h[1], v0.h[1]
; NONEON-NOSVE-NEXT:    add x8, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[2], [x8]
; NONEON-NOSVE-NEXT:  .LBB13_6: // %else5
; NONEON-NOSVE-NEXT:    ushll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %load_value = tail call <3 x i16> @llvm.masked.load.v3i16.p0(ptr %load_ptr, i32 4, <3 x i1> %pm, <3 x i16> zeroinitializer)
  %extend = zext <3 x i16> %load_value to <3 x i32>
  ret <3 x i32> %extend;
}

define <3 x i32> @masked_load_sext_v3i32(ptr %load_ptr, <3 x i1> %pm) {
; CHECK-LABEL: masked_load_sext_v3i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    sub sp, sp, #16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    strh w3, [sp, #12]
; CHECK-NEXT:    adrp x8, .LCPI14_0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    strh w2, [sp, #10]
; CHECK-NEXT:    ldr d0, [x8, :lo12:.LCPI14_0]
; CHECK-NEXT:    strh w1, [sp, #8]
; CHECK-NEXT:    ldr d1, [sp, #8]
; CHECK-NEXT:    and z0.d, z1.d, z0.d
; CHECK-NEXT:    lsl z0.h, z0.h, #15
; CHECK-NEXT:    asr z0.h, z0.h, #15
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    cmpne p0.s, p0/z, z0.s, #0
; CHECK-NEXT:    ld1sh { z0.s }, p0/z, [x0]
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    add sp, sp, #16
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: masked_load_sext_v3i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #16
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 16
; NONEON-NOSVE-NEXT:    and w8, w1, #0x1
; NONEON-NOSVE-NEXT:    bfi w8, w2, #1, #1
; NONEON-NOSVE-NEXT:    bfi w8, w3, #2, #1
; NONEON-NOSVE-NEXT:    tbz w8, #0, .LBB14_2
; NONEON-NOSVE-NEXT:  // %bb.1: // %cond.load
; NONEON-NOSVE-NEXT:    ldr h0, [x0]
; NONEON-NOSVE-NEXT:    tbnz w8, #1, .LBB14_3
; NONEON-NOSVE-NEXT:    b .LBB14_4
; NONEON-NOSVE-NEXT:  .LBB14_2:
; NONEON-NOSVE-NEXT:    movi v0.2d, #0000000000000000
; NONEON-NOSVE-NEXT:    tbz w8, #1, .LBB14_4
; NONEON-NOSVE-NEXT:  .LBB14_3: // %cond.load1
; NONEON-NOSVE-NEXT:    mov v1.16b, v0.16b
; NONEON-NOSVE-NEXT:    add x9, x0, #2
; NONEON-NOSVE-NEXT:    ld1 { v1.h }[1], [x9]
; NONEON-NOSVE-NEXT:    mov v1.h[2], v0.h[2]
; NONEON-NOSVE-NEXT:    fmov d0, d1
; NONEON-NOSVE-NEXT:  .LBB14_4: // %else2
; NONEON-NOSVE-NEXT:    tbz w8, #2, .LBB14_6
; NONEON-NOSVE-NEXT:  // %bb.5: // %cond.load4
; NONEON-NOSVE-NEXT:    mov v0.h[1], v0.h[1]
; NONEON-NOSVE-NEXT:    add x8, x0, #4
; NONEON-NOSVE-NEXT:    ld1 { v0.h }[2], [x8]
; NONEON-NOSVE-NEXT:  .LBB14_6: // %else5
; NONEON-NOSVE-NEXT:    sshll v0.4s, v0.4h, #0
; NONEON-NOSVE-NEXT:    add sp, sp, #16
; NONEON-NOSVE-NEXT:    ret
  %load_value = tail call <3 x i16> @llvm.masked.load.v3i16.p0(ptr %load_ptr, i32 4, <3 x i1> %pm, <3 x i16> zeroinitializer)
  %extend = sext <3 x i16> %load_value to <3 x i32>
  ret <3 x i32> %extend;
}

declare <4 x i8> @llvm.masked.load.v4i8(ptr, i32, <4 x i1>, <4 x i8>)
declare <8 x i8> @llvm.masked.load.v8i8(ptr, i32, <8 x i1>, <8 x i8>)
declare <16 x i8> @llvm.masked.load.v16i8(ptr, i32, <16 x i1>, <16 x i8>)
declare <32 x i8> @llvm.masked.load.v32i8(ptr, i32, <32 x i1>, <32 x i8>)

declare <2 x half> @llvm.masked.load.v2f16(ptr, i32, <2 x i1>, <2 x half>)
declare <4 x half> @llvm.masked.load.v4f16(ptr, i32, <4 x i1>, <4 x half>)
declare <8 x half> @llvm.masked.load.v8f16(ptr, i32, <8 x i1>, <8 x half>)
declare <16 x half> @llvm.masked.load.v16f16(ptr, i32, <16 x i1>, <16 x half>)

declare <2 x float> @llvm.masked.load.v2f32(ptr, i32, <2 x i1>, <2 x float>)
declare <4 x float> @llvm.masked.load.v4f32(ptr, i32, <4 x i1>, <4 x float>)
declare <8 x float> @llvm.masked.load.v8f32(ptr, i32, <8 x i1>, <8 x float>)

declare <2 x double> @llvm.masked.load.v2f64(ptr, i32, <2 x i1>, <2 x double>)
declare <4 x double> @llvm.masked.load.v4f64(ptr, i32, <4 x i1>, <4 x double>)

declare <3 x i16> @llvm.masked.load.v3i16.p0(ptr, i32, <3 x i1>, <3 x i16>)
