; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -verify-machineinstrs -mtriple=aarch64-linux-gnu -O0 -fast-isel=0 -global-isel=false %s -o - | FileCheck -enable-var-scope %s
; RUN: llc -verify-machineinstrs -mtriple=aarch64-linux-gnu -O0 -fast-isel=0 -global-isel=false -mattr=+outline-atomics %s -o - | FileCheck -enable-var-scope %s --check-prefix=OUTLINE-ATOMICS

define { i8, i1 } @test_cmpxchg_8(ptr %addr, i8 %desired, i8 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:  .LBB0_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxrb w0, [x8]
; CHECK-NEXT:    cmp w0, w1, uxtb
; CHECK-NEXT:    b.ne .LBB0_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    stlxrb wzr, w2, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB0_1
; CHECK-NEXT:  .LBB0_3:
; CHECK-NEXT:    cmp w0, w1, uxtb
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret
;
; OUTLINE-ATOMICS-LABEL: test_cmpxchg_8:
; OUTLINE-ATOMICS:       // %bb.0:
; OUTLINE-ATOMICS-NEXT:    sub sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str w2, [sp, #8] // 4-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov w8, w1
; OUTLINE-ATOMICS-NEXT:    ldr w1, [sp, #8] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    str w8, [sp, #12] // 4-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x2, x0
; OUTLINE-ATOMICS-NEXT:    ldr w0, [sp, #12] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    bl __aarch64_cas1_acq_rel
; OUTLINE-ATOMICS-NEXT:    ldr w1, [sp, #12] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    cmp w0, w1, uxtb
; OUTLINE-ATOMICS-NEXT:    cset w1, eq
; OUTLINE-ATOMICS-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    add sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    ret
  %res = cmpxchg ptr %addr, i8 %desired, i8 %new seq_cst monotonic
  ret { i8, i1 } %res
}

define { i16, i1 } @test_cmpxchg_16(ptr %addr, i16 %desired, i16 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:  .LBB1_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxrh w0, [x8]
; CHECK-NEXT:    cmp w0, w1, uxth
; CHECK-NEXT:    b.ne .LBB1_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    stlxrh wzr, w2, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB1_1
; CHECK-NEXT:  .LBB1_3:
; CHECK-NEXT:    cmp w0, w1, uxth
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret
;
; OUTLINE-ATOMICS-LABEL: test_cmpxchg_16:
; OUTLINE-ATOMICS:       // %bb.0:
; OUTLINE-ATOMICS-NEXT:    sub sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str w2, [sp, #8] // 4-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov w8, w1
; OUTLINE-ATOMICS-NEXT:    ldr w1, [sp, #8] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    str w8, [sp, #12] // 4-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x2, x0
; OUTLINE-ATOMICS-NEXT:    ldr w0, [sp, #12] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    bl __aarch64_cas2_acq_rel
; OUTLINE-ATOMICS-NEXT:    ldr w1, [sp, #12] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    cmp w0, w1, uxth
; OUTLINE-ATOMICS-NEXT:    cset w1, eq
; OUTLINE-ATOMICS-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    add sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    ret
  %res = cmpxchg ptr %addr, i16 %desired, i16 %new seq_cst monotonic
  ret { i16, i1 } %res
}

define { i32, i1 } @test_cmpxchg_32(ptr %addr, i32 %desired, i32 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:  .LBB2_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr w0, [x8]
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    b.ne .LBB2_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    stlxr wzr, w2, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB2_1
; CHECK-NEXT:  .LBB2_3:
; CHECK-NEXT:    cmp w0, w1
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret
;
; OUTLINE-ATOMICS-LABEL: test_cmpxchg_32:
; OUTLINE-ATOMICS:       // %bb.0:
; OUTLINE-ATOMICS-NEXT:    sub sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str w2, [sp, #8] // 4-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov w8, w1
; OUTLINE-ATOMICS-NEXT:    ldr w1, [sp, #8] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    str w8, [sp, #12] // 4-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x2, x0
; OUTLINE-ATOMICS-NEXT:    ldr w0, [sp, #12] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    bl __aarch64_cas4_acq_rel
; OUTLINE-ATOMICS-NEXT:    ldr w1, [sp, #12] // 4-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    cmp w0, w1
; OUTLINE-ATOMICS-NEXT:    cset w1, eq
; OUTLINE-ATOMICS-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    add sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    ret
  %res = cmpxchg ptr %addr, i32 %desired, i32 %new seq_cst monotonic
  ret { i32, i1 } %res
}

define { i64, i1 } @test_cmpxchg_64(ptr %addr, i64 %desired, i64 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x8, x0
; CHECK-NEXT:  .LBB3_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxr x0, [x8]
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    b.ne .LBB3_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB3_1 Depth=1
; CHECK-NEXT:    stlxr wzr, x2, [x8]
; CHECK-NEXT:    cbnz wzr, .LBB3_1
; CHECK-NEXT:  .LBB3_3:
; CHECK-NEXT:    cmp x0, x1
; CHECK-NEXT:    cset w1, eq
; CHECK-NEXT:    ret
;
; OUTLINE-ATOMICS-LABEL: test_cmpxchg_64:
; OUTLINE-ATOMICS:       // %bb.0:
; OUTLINE-ATOMICS-NEXT:    sub sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str x2, [sp] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x8, x1
; OUTLINE-ATOMICS-NEXT:    ldr x1, [sp] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    str x8, [sp, #8] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x2, x0
; OUTLINE-ATOMICS-NEXT:    ldr x0, [sp, #8] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    bl __aarch64_cas8_acq_rel
; OUTLINE-ATOMICS-NEXT:    ldr x1, [sp, #8] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    cmp x0, x1
; OUTLINE-ATOMICS-NEXT:    cset w1, eq
; OUTLINE-ATOMICS-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    add sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    ret
  %res = cmpxchg ptr %addr, i64 %desired, i64 %new seq_cst monotonic
  ret { i64, i1 } %res
}

define { i128, i1 } @test_cmpxchg_128(ptr %addr, i128 %desired, i128 %new) nounwind {
; CHECK-LABEL: test_cmpxchg_128:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x9, x0
; CHECK-NEXT:  .LBB4_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxp x0, x1, [x9]
; CHECK-NEXT:    cmp x0, x2
; CHECK-NEXT:    cset w8, ne
; CHECK-NEXT:    cmp x1, x3
; CHECK-NEXT:    cinc w8, w8, ne
; CHECK-NEXT:    cbnz w8, .LBB4_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB4_1 Depth=1
; CHECK-NEXT:    stlxp w8, x4, x5, [x9]
; CHECK-NEXT:    cbnz w8, .LBB4_1
; CHECK-NEXT:    b .LBB4_4
; CHECK-NEXT:  .LBB4_3: // in Loop: Header=BB4_1 Depth=1
; CHECK-NEXT:    stlxp w8, x0, x1, [x9]
; CHECK-NEXT:    cbnz w8, .LBB4_1
; CHECK-NEXT:  .LBB4_4:
; CHECK-NEXT:    cmp x0, x2
; CHECK-NEXT:    ccmp x1, x3, #0, eq
; CHECK-NEXT:    cset w2, eq
; CHECK-NEXT:    ret
;
; OUTLINE-ATOMICS-LABEL: test_cmpxchg_128:
; OUTLINE-ATOMICS:       // %bb.0:
; OUTLINE-ATOMICS-NEXT:    sub sp, sp, #48
; OUTLINE-ATOMICS-NEXT:    str x30, [sp, #32] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str x5, [sp] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str x4, [sp, #8] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x1, x3
; OUTLINE-ATOMICS-NEXT:    ldr x3, [sp] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    str x1, [sp, #24] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x8, x2
; OUTLINE-ATOMICS-NEXT:    ldr x2, [sp, #8] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    str x8, [sp, #16] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    mov x4, x0
; OUTLINE-ATOMICS-NEXT:    ldr x0, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    bl __aarch64_cas16_acq_rel
; OUTLINE-ATOMICS-NEXT:    ldr x2, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    ldr x3, [sp, #24] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    cmp x0, x2
; OUTLINE-ATOMICS-NEXT:    ccmp x1, x3, #0, eq
; OUTLINE-ATOMICS-NEXT:    cset w2, eq
; OUTLINE-ATOMICS-NEXT:    ldr x30, [sp, #32] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    add sp, sp, #48
; OUTLINE-ATOMICS-NEXT:    ret
  %res = cmpxchg ptr %addr, i128 %desired, i128 %new seq_cst monotonic
  ret { i128, i1 } %res
}

; Original implementation assumed the desired & new arguments had already been
; type-legalized into some kind of BUILD_PAIR operation and crashed when this
; was false.
@var128 = dso_local global i128 0
define {i128, i1} @test_cmpxchg_128_unsplit(ptr %addr) {
; CHECK-LABEL: test_cmpxchg_128_unsplit:
; CHECK:       // %bb.0:
; CHECK-NEXT:    mov x11, x0
; CHECK-NEXT:    adrp x10, var128
; CHECK-NEXT:    add x10, x10, :lo12:var128
; CHECK-NEXT:    ldp x9, x8, [x10]
; CHECK-NEXT:    ldp x12, x13, [x10]
; CHECK-NEXT:  .LBB5_1: // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ldaxp x0, x1, [x11]
; CHECK-NEXT:    cmp x0, x9
; CHECK-NEXT:    cset w10, ne
; CHECK-NEXT:    cmp x1, x8
; CHECK-NEXT:    cinc w10, w10, ne
; CHECK-NEXT:    cbnz w10, .LBB5_3
; CHECK-NEXT:  // %bb.2: // in Loop: Header=BB5_1 Depth=1
; CHECK-NEXT:    stlxp w10, x12, x13, [x11]
; CHECK-NEXT:    cbnz w10, .LBB5_1
; CHECK-NEXT:    b .LBB5_4
; CHECK-NEXT:  .LBB5_3: // in Loop: Header=BB5_1 Depth=1
; CHECK-NEXT:    stlxp w10, x0, x1, [x11]
; CHECK-NEXT:    cbnz w10, .LBB5_1
; CHECK-NEXT:  .LBB5_4:
; CHECK-NEXT:    cmp x0, x9
; CHECK-NEXT:    ccmp x1, x8, #0, eq
; CHECK-NEXT:    cset w2, eq
; CHECK-NEXT:    ret
;
; OUTLINE-ATOMICS-LABEL: test_cmpxchg_128_unsplit:
; OUTLINE-ATOMICS:       // %bb.0:
; OUTLINE-ATOMICS-NEXT:    sub sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    str x30, [sp, #16] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    .cfi_def_cfa_offset 32
; OUTLINE-ATOMICS-NEXT:    .cfi_offset w30, -16
; OUTLINE-ATOMICS-NEXT:    mov x4, x0
; OUTLINE-ATOMICS-NEXT:    adrp x8, var128
; OUTLINE-ATOMICS-NEXT:    add x8, x8, :lo12:var128
; OUTLINE-ATOMICS-NEXT:    ldp x0, x1, [x8]
; OUTLINE-ATOMICS-NEXT:    str x1, [sp, #8] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    str x0, [sp] // 8-byte Folded Spill
; OUTLINE-ATOMICS-NEXT:    ldp x2, x3, [x8]
; OUTLINE-ATOMICS-NEXT:    bl __aarch64_cas16_acq_rel
; OUTLINE-ATOMICS-NEXT:    ldr x9, [sp] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    ldr x8, [sp, #8] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    cmp x0, x9
; OUTLINE-ATOMICS-NEXT:    ccmp x1, x8, #0, eq
; OUTLINE-ATOMICS-NEXT:    cset w2, eq
; OUTLINE-ATOMICS-NEXT:    ldr x30, [sp, #16] // 8-byte Folded Reload
; OUTLINE-ATOMICS-NEXT:    add sp, sp, #32
; OUTLINE-ATOMICS-NEXT:    ret

  %desired = load volatile i128, ptr @var128
  %new = load volatile i128, ptr @var128
  %val = cmpxchg ptr %addr, i128 %desired, i128 %new seq_cst seq_cst
  ret { i128, i1 } %val
}
