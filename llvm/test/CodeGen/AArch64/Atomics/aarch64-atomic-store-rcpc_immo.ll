; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --filter-out "\b(sp)\b" --filter "^\s*(ld[^r]|st|swp|cas|bl|add|and|eor|orn|orr|sub|mvn|sxt|cmp|ccmp|csel|dmb)"
; RUN: llc %s -o - -verify-machineinstrs -mtriple=aarch64 -mattr=+v8.4a -mattr=+rcpc-immo -global-isel=true -global-isel-abort=2 -O0 | FileCheck %s --check-prefixes=CHECK,GISEL
; RUN: llc %s -o - -verify-machineinstrs -mtriple=aarch64 -mattr=+v8.4a -mattr=+rcpc-immo -global-isel=false -O1 | FileCheck %s --check-prefixes=CHECK,SDAG

define void @store_atomic_i8_aligned_unordered(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_aligned_unordered:
; CHECK:    strb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep unordered, align 1
    ret void
}

define void @store_atomic_i8_aligned_monotonic(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_aligned_monotonic:
; CHECK:    strb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep monotonic, align 1
    ret void
}

define void @store_atomic_i8_aligned_release(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_aligned_release:
; CHECK:    stlurb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep release, align 1
    ret void
}

define void @store_atomic_i8_aligned_seq_cst(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_aligned_seq_cst:
; CHECK:    stlurb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep seq_cst, align 1
    ret void
}

define void @store_atomic_i16_aligned_unordered(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_aligned_unordered:
; CHECK:    strh w0, [x1, #8]
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep unordered, align 2
    ret void
}

define void @store_atomic_i16_aligned_monotonic(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_aligned_monotonic:
; CHECK:    strh w0, [x1, #8]
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep monotonic, align 2
    ret void
}

define void @store_atomic_i16_aligned_release(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_aligned_release:
; CHECK:    stlurh w0, [x1, #8]
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep release, align 2
    ret void
}

define void @store_atomic_i16_aligned_seq_cst(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_aligned_seq_cst:
; CHECK:    stlurh w0, [x1, #8]
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep seq_cst, align 2
    ret void
}

define void @store_atomic_i32_aligned_unordered(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_aligned_unordered:
; CHECK:    str w0, [x1, #16]
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep unordered, align 4
    ret void
}

define void @store_atomic_i32_aligned_monotonic(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_aligned_monotonic:
; CHECK:    str w0, [x1, #16]
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep monotonic, align 4
    ret void
}

define void @store_atomic_i32_aligned_release(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_aligned_release:
; CHECK:    stlur w0, [x1, #16]
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep release, align 4
    ret void
}

define void @store_atomic_i32_aligned_seq_cst(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_aligned_seq_cst:
; CHECK:    stlur w0, [x1, #16]
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep seq_cst, align 4
    ret void
}

define void @store_atomic_i64_aligned_unordered(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_aligned_unordered:
; CHECK:    str x0, [x1, #32]
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep unordered, align 8
    ret void
}

define void @store_atomic_i64_aligned_monotonic(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_aligned_monotonic:
; CHECK:    str x0, [x1, #32]
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep monotonic, align 8
    ret void
}

define void @store_atomic_i64_aligned_release(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_aligned_release:
; CHECK:    stlur x0, [x1, #32]
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep release, align 8
    ret void
}

define void @store_atomic_i64_aligned_seq_cst(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_aligned_seq_cst:
; CHECK:    stlur x0, [x1, #32]
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep seq_cst, align 8
    ret void
}

define void @store_atomic_i128_aligned_unordered(i128 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i128_aligned_unordered:
; CHECK:    stp x0, x1, [x2, #64]
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep unordered, align 16
    ret void
}

define void @store_atomic_i128_aligned_monotonic(i128 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i128_aligned_monotonic:
; CHECK:    stp x0, x1, [x2, #64]
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep monotonic, align 16
    ret void
}

define void @store_atomic_i128_aligned_release(i128 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i128_aligned_release:
; CHECK:    dmb ish
; CHECK:    stp x0, x1, [x2, #64]
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep release, align 16
    ret void
}

define void @store_atomic_i128_aligned_seq_cst(i128 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i128_aligned_seq_cst:
; CHECK:    dmb ish
; CHECK:    stp x0, x1, [x2, #64]
; CHECK:    dmb ish
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep seq_cst, align 16
    ret void
}

define void @store_atomic_i8_unaligned_unordered(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_unaligned_unordered:
; CHECK:    strb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep unordered, align 1
    ret void
}

define void @store_atomic_i8_unaligned_monotonic(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_unaligned_monotonic:
; CHECK:    strb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep monotonic, align 1
    ret void
}

define void @store_atomic_i8_unaligned_release(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_unaligned_release:
; CHECK:    stlurb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep release, align 1
    ret void
}

define void @store_atomic_i8_unaligned_seq_cst(i8 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i8_unaligned_seq_cst:
; CHECK:    stlurb w0, [x1, #4]
    %gep = getelementptr inbounds i8, ptr %ptr, i32 4
    store atomic i8 %value, ptr %gep seq_cst, align 1
    ret void
}

define void @store_atomic_i16_unaligned_unordered(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_unaligned_unordered:
; CHECK:    add x1, x1, #8
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep unordered, align 1
    ret void
}

define void @store_atomic_i16_unaligned_monotonic(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_unaligned_monotonic:
; CHECK:    add x1, x1, #8
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep monotonic, align 1
    ret void
}

define void @store_atomic_i16_unaligned_release(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_unaligned_release:
; CHECK:    add x1, x1, #8
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep release, align 1
    ret void
}

define void @store_atomic_i16_unaligned_seq_cst(i16 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i16_unaligned_seq_cst:
; CHECK:    add x1, x1, #8
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i16, ptr %ptr, i32 4
    store atomic i16 %value, ptr %gep seq_cst, align 1
    ret void
}

define void @store_atomic_i32_unaligned_unordered(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_unaligned_unordered:
; CHECK:    add x1, x1, #16
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep unordered, align 1
    ret void
}

define void @store_atomic_i32_unaligned_monotonic(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_unaligned_monotonic:
; CHECK:    add x1, x1, #16
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep monotonic, align 1
    ret void
}

define void @store_atomic_i32_unaligned_release(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_unaligned_release:
; CHECK:    add x1, x1, #16
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep release, align 1
    ret void
}

define void @store_atomic_i32_unaligned_seq_cst(i32 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i32_unaligned_seq_cst:
; CHECK:    add x1, x1, #16
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i32, ptr %ptr, i32 4
    store atomic i32 %value, ptr %gep seq_cst, align 1
    ret void
}

define void @store_atomic_i64_unaligned_unordered(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_unaligned_unordered:
; CHECK:    add x1, x1, #32
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep unordered, align 1
    ret void
}

define void @store_atomic_i64_unaligned_monotonic(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_unaligned_monotonic:
; CHECK:    add x1, x1, #32
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep monotonic, align 1
    ret void
}

define void @store_atomic_i64_unaligned_release(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_unaligned_release:
; CHECK:    add x1, x1, #32
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep release, align 1
    ret void
}

define void @store_atomic_i64_unaligned_seq_cst(i64 %value, ptr %ptr) {
; CHECK-LABEL: store_atomic_i64_unaligned_seq_cst:
; CHECK:    add x1, x1, #32
; CHECK:    bl __atomic_store
    %gep = getelementptr inbounds i64, ptr %ptr, i32 4
    store atomic i64 %value, ptr %gep seq_cst, align 1
    ret void
}

define void @store_atomic_i128_unaligned_unordered(i128 %value, ptr %ptr) {
; GISEL-LABEL: store_atomic_i128_unaligned_unordered:
; GISEL:    add x1, x8, #64
; GISEL:    bl __atomic_store
;
; SDAG-LABEL: store_atomic_i128_unaligned_unordered:
; SDAG:    add x1, x2, #64
; SDAG:    bl __atomic_store
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep unordered, align 1
    ret void
}

define void @store_atomic_i128_unaligned_monotonic(i128 %value, ptr %ptr) {
; GISEL-LABEL: store_atomic_i128_unaligned_monotonic:
; GISEL:    add x1, x8, #64
; GISEL:    bl __atomic_store
;
; SDAG-LABEL: store_atomic_i128_unaligned_monotonic:
; SDAG:    add x1, x2, #64
; SDAG:    bl __atomic_store
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep monotonic, align 1
    ret void
}

define void @store_atomic_i128_unaligned_release(i128 %value, ptr %ptr) {
; GISEL-LABEL: store_atomic_i128_unaligned_release:
; GISEL:    add x1, x8, #64
; GISEL:    bl __atomic_store
;
; SDAG-LABEL: store_atomic_i128_unaligned_release:
; SDAG:    add x1, x2, #64
; SDAG:    bl __atomic_store
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep release, align 1
    ret void
}

define void @store_atomic_i128_unaligned_seq_cst(i128 %value, ptr %ptr) {
; GISEL-LABEL: store_atomic_i128_unaligned_seq_cst:
; GISEL:    add x1, x8, #64
; GISEL:    bl __atomic_store
;
; SDAG-LABEL: store_atomic_i128_unaligned_seq_cst:
; SDAG:    add x1, x2, #64
; SDAG:    bl __atomic_store
    %gep = getelementptr inbounds i128, ptr %ptr, i32 4
    store atomic i128 %value, ptr %gep seq_cst, align 1
    ret void
}
