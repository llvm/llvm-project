; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple arm64-apple-ios -mattr +cmpbr -verify-machineinstrs -o - < %s | FileCheck %s --check-prefix=CHECK-CMPBR
; RUN: llc -mtriple arm64-apple-ios -mattr -cmpbr -verify-machineinstrs -o - < %s | FileCheck %s --check-prefix=CHECK-NO-CMPBR

define void @cbb_assertsext_eq(i8 signext %a, i8 signext %b) {
; CHECK-CMPBR-LABEL: cbb_assertsext_eq:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbeq w0, w1, LBB0_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB0_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbb_assertsext_eq:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1
; CHECK-NO-CMPBR-NEXT:    b.eq LBB0_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB0_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp eq i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbb_assertsext_sgt(i8 signext %a, i8 signext %b) {
; CHECK-CMPBR-LABEL: cbb_assertsext_sgt:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbgt w0, w1, LBB1_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB1_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbb_assertsext_sgt:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1
; CHECK-NO-CMPBR-NEXT:    b.gt LBB1_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB1_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp sgt i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbh_assertsext_slt(i16 signext %a, i16 signext %b) {
; CHECK-CMPBR-LABEL: cbh_assertsext_slt:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbgt w1, w0, LBB2_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB2_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbh_assertsext_slt:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1
; CHECK-NO-CMPBR-NEXT:    b.lt LBB2_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB2_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp slt i16 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbb_assertzext_eq(i8 zeroext %a, i8 zeroext %b) {
; CHECK-CMPBR-LABEL: cbb_assertzext_eq:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbeq w0, w1, LBB3_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB3_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbb_assertzext_eq:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1
; CHECK-NO-CMPBR-NEXT:    b.eq LBB3_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB3_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp eq i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbb_assertzext_ugt(i8 zeroext %a, i8 zeroext %b) {
; CHECK-CMPBR-LABEL: cbb_assertzext_ugt:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbhi w0, w1, LBB4_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB4_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbb_assertzext_ugt:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1
; CHECK-NO-CMPBR-NEXT:    b.hi LBB4_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB4_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp ugt i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbh_assertzext_ule(i16 zeroext %a, i16 zeroext %b) {
; CHECK-CMPBR-LABEL: cbh_assertzext_ule:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbhs w1, w0, LBB5_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB5_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbh_assertzext_ule:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1
; CHECK-NO-CMPBR-NEXT:    b.ls LBB5_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB5_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp ule i16 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbb_mixed_assertsext_only_first(i8 signext %a, i8 %b) {
; CHECK-CMPBR-LABEL: cbb_mixed_assertsext_only_first:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbgt w0, w1, LBB6_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB6_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbb_mixed_assertsext_only_first:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w0, w1, sxtb
; CHECK-NO-CMPBR-NEXT:    b.gt LBB6_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB6_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp sgt i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}

define void @cbb_mixed_assertzext_only_second(i8 %a, i8 zeroext %b) {
; CHECK-CMPBR-LABEL: cbb_mixed_assertzext_only_second:
; CHECK-CMPBR:       ; %bb.0:
; CHECK-CMPBR-NEXT:    cbbhi w0, w1, LBB7_2
; CHECK-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-CMPBR-NEXT:    ret
; CHECK-CMPBR-NEXT:  LBB7_2: ; %if.then
; CHECK-CMPBR-NEXT:    brk #0x1
;
; CHECK-NO-CMPBR-LABEL: cbb_mixed_assertzext_only_second:
; CHECK-NO-CMPBR:       ; %bb.0:
; CHECK-NO-CMPBR-NEXT:    cmp w1, w0, uxtb
; CHECK-NO-CMPBR-NEXT:    b.lo LBB7_2
; CHECK-NO-CMPBR-NEXT:  ; %bb.1: ; %if.end
; CHECK-NO-CMPBR-NEXT:    ret
; CHECK-NO-CMPBR-NEXT:  LBB7_2: ; %if.then
; CHECK-NO-CMPBR-NEXT:    brk #0x1
  %cmp = icmp ugt i8 %a, %b
  br i1 %cmp, label %if.then, label %if.end

if.then:
  tail call void @llvm.trap()
  unreachable

if.end:
  ret void
}


declare void @llvm.trap()
