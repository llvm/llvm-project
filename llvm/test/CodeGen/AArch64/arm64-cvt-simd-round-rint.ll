; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple aarch64-unknown-unknown -mattr=+fprcvt,+fullfp16 | FileCheck %s --check-prefixes=CHECK,CHECK-SD
; RUN: llc < %s -mtriple aarch64-unknown-unknown -global-isel -global-isel-abort=2 -mattr=+fprcvt,+fullfp16 2>&1 | FileCheck %s --check-prefixes=CHECK,CHECK-GI

;  CHECK-GI: warning: Instruction selection used fallback path for lround_i32_f16_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i64_f16_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i32_f64_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i32_f32_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llround_i64_f16_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i32_f16_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i64_f16_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i64_f32_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i32_f64_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i32_f32_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lround_i64_f64_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llround_i64_f16_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llround_i64_f32_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llround_i64_f64_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i32_f16_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i32_f64_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i32_f32_simd
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i32_f16_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i64_f16_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i64_f32_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i32_f64_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i32_f32_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for lrint_i64_f64_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llrint_i64_f16_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llrint_i64_f32_simd_exp
;  CHECK-GI-NEXT: warning: Instruction selection used fallback path for llrint_i64_f64_simd_exp

;
; (L/LL)Round
;

define float @lround_i32_f16_simd(half %x)  {
; CHECK-LABEL: lround_i32_f16_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas s0, h0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.lround.i32.f16(half %x)
  %sum = bitcast i32 %val to float
  ret float %sum
}

define double @lround_i64_f16_simd(half %x)  {
; CHECK-LABEL: lround_i64_f16_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.lround.i64.f16(half %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @lround_i64_f32_simd(float %x)  {
; CHECK-LABEL: lround_i64_f32_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.lround.i64.f32(float %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define float @lround_i32_f64_simd(double %x)  {
; CHECK-LABEL: lround_i32_f64_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas s0, d0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.lround.i32.f64(double %x)
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define float @lround_i32_f32_simd(float %x)  {
; CHECK-LABEL: lround_i32_f32_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas s0, s0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.lround.i32.f32(float %x)
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define double @lround_i64_f64_simd(double %x)  {
; CHECK-LABEL: lround_i64_f64_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.lround.i64.f64(double %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llround_i64_f16_simd(half %x)  {
; CHECK-LABEL: llround_i64_f16_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.llround.i64.f16(half %x)
  %sum = bitcast i64 %val to double
  ret double %sum
}

define double @llround_i64_f32_simd(float %x)  {
; CHECK-LABEL: llround_i64_f32_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.llround.i64.f32(float %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llround_i64_f64_simd(double %x)  {
; CHECK-LABEL: llround_i64_f64_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.llround.i64.f64(double %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}


;
; (L/LL)Round experimental
;

define float @lround_i32_f16_simd_exp(half %x)  {
; CHECK-LABEL: lround_i32_f16_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas s0, h0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.experimental.constrained.lround.i32.f16(half %x, metadata !"fpexcept.strict")
  %sum = bitcast i32 %val to float
  ret float %sum
}

define double @lround_i64_f16_simd_exp(half %x)  {
; CHECK-LABEL: lround_i64_f16_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.lround.i64.f16(half %x, metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @lround_i64_f32_simd_exp(float %x)  {
; CHECK-LABEL: lround_i64_f32_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.lround.i64.f32(float %x, metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define float @lround_i32_f64_simd_exp(double %x)  {
; CHECK-LABEL: lround_i32_f64_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas s0, d0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.experimental.constrained.lround.i32.f64(double %x, metadata !"fpexcept.strict")
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define float @lround_i32_f32_simd_exp(float %x)  {
; CHECK-LABEL: lround_i32_f32_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas s0, s0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.experimental.constrained.lround.i32.f32(float %x, metadata !"fpexcept.strict")
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define double @lround_i64_f64_simd_exp(double %x)  {
; CHECK-LABEL: lround_i64_f64_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.lround.i64.f64(double %x, metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llround_i64_f16_simd_exp(half %x)  {
; CHECK-LABEL: llround_i64_f16_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.llround.i64.f16(half %x, metadata !"fpexcept.strict")
  %sum = bitcast i64 %val to double
  ret double %sum
}

define double @llround_i64_f32_simd_exp(float %x)  {
; CHECK-LABEL: llround_i64_f32_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.llround.i64.f32(float %x, metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llround_i64_f64_simd_exp(double %x)  {
; CHECK-LABEL: llround_i64_f64_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    fcvtas d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.llround.i64.f64(double %x, metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

;
; (L/LL)Rint
;

define float @lrint_i32_f16_simd(half %x)  {
; CHECK-LABEL: lrint_i32_f16_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx h0, h0
; CHECK-NEXT:    fcvtzs s0, h0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.lrint.i32.f16(half %x)
  %sum = bitcast i32 %val to float
  ret float %sum
}

define double @lrint_i64_f16_simd(half %x)  {
; CHECK-LABEL: lrint_i64_f16_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx h0, h0
; CHECK-NEXT:    fcvtzs d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.lrint.i53.f16(half %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @lrint_i64_f32_simd(float %x)  {
; CHECK-LABEL: lrint_i64_f32_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx s0, s0
; CHECK-NEXT:    fcvtzs d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.lrint.i64.f32(float %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define float @lrint_i32_f64_simd(double %x)  {
; CHECK-LABEL: lrint_i32_f64_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx d0, d0
; CHECK-NEXT:    fcvtzs s0, d0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.lrint.i32.f64(double %x)
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define float @lrint_i32_f32_simd(float %x)  {
; CHECK-LABEL: lrint_i32_f32_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx s0, s0
; CHECK-NEXT:    fcvtzs s0, s0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.lrint.i32.f32(float %x)
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define double @lrint_i64_f64_simd(double %x)  {
; CHECK-LABEL: lrint_i64_f64_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx d0, d0
; CHECK-NEXT:    fcvtzs d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.lrint.i64.f64(double %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llrint_i64_f16_simd(half %x)  {
; CHECK-LABEL: llrint_i64_f16_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx h0, h0
; CHECK-NEXT:    fcvtzs d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.llrint.i64.f16(half %x)
  %sum = bitcast i64 %val to double
  ret double %sum
}

define double @llrint_i64_f32_simd(float %x)  {
; CHECK-LABEL: llrint_i64_f32_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx s0, s0
; CHECK-NEXT:    fcvtzs d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.llrint.i64.f32(float %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llrint_i64_f64_simd(double %x)  {
; CHECK-LABEL: llrint_i64_f64_simd:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx d0, d0
; CHECK-NEXT:    fcvtzs d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.llrint.i64.f64(double %x)
  %bc  = bitcast i64 %val to double
  ret double %bc
}

;
; (L/LL)Rint experimental
;

define float @lrint_i32_f16_simd_exp(half %x)  {
; CHECK-LABEL: lrint_i32_f16_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx h0, h0
; CHECK-NEXT:    fcvtzs s0, h0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.experimental.constrained.lrint.i32.f16(half %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %sum = bitcast i32 %val to float
  ret float %sum
}

define double @lrint_i64_f16_simd_exp(half %x)  {
; CHECK-LABEL: lrint_i64_f16_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx h0, h0
; CHECK-NEXT:    fcvtzs d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.lrint.i53.f16(half %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @lrint_i64_f32_simd_exp(float %x)  {
; CHECK-LABEL: lrint_i64_f32_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx s0, s0
; CHECK-NEXT:    fcvtzs d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.lrint.i64.f32(float %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define float @lrint_i32_f64_simd_exp(double %x)  {
; CHECK-LABEL: lrint_i32_f64_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx d0, d0
; CHECK-NEXT:    fcvtzs s0, d0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.experimental.constrained.lrint.i32.f64(double %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define float @lrint_i32_f32_simd_exp(float %x)  {
; CHECK-LABEL: lrint_i32_f32_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx s0, s0
; CHECK-NEXT:    fcvtzs s0, s0
; CHECK-NEXT:    ret
  %val = call i32 @llvm.experimental.constrained.lrint.i32.f32(float %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i32 %val to float
  ret float %bc
}

define double @lrint_i64_f64_simd_exp(double %x)  {
; CHECK-LABEL: lrint_i64_f64_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx d0, d0
; CHECK-NEXT:    fcvtzs d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.lrint.i64.f64(double %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llrint_i64_f16_simd_exp(half %x)  {
; CHECK-LABEL: llrint_i64_f16_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx h0, h0
; CHECK-NEXT:    fcvtzs d0, h0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.llrint.i64.f16(half %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %sum = bitcast i64 %val to double
  ret double %sum
}

define double @llrint_i64_f32_simd_exp(float %x)  {
; CHECK-LABEL: llrint_i64_f32_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx s0, s0
; CHECK-NEXT:    fcvtzs d0, s0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.llrint.i64.f32(float %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}

define double @llrint_i64_f64_simd_exp(double %x)  {
; CHECK-LABEL: llrint_i64_f64_simd_exp:
; CHECK:       // %bb.0:
; CHECK-NEXT:    frintx d0, d0
; CHECK-NEXT:    fcvtzs d0, d0
; CHECK-NEXT:    ret
  %val = call i64 @llvm.experimental.constrained.llrint.i64.f64(double %x, metadata !"round.tonearest", metadata !"fpexcept.strict")
  %bc  = bitcast i64 %val to double
  ret double %bc
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-GI: {{.*}}
; CHECK-SD: {{.*}}
