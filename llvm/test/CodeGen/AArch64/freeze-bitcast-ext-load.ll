; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=aarch64 | FileCheck %s

define double @test_bitcast_freeze_load(ptr %p) {
; CHECK-LABEL: test_bitcast_freeze_load:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ret
  %v = load <2 x float>, ptr %p
  %f = freeze <2 x float> %v
  %b = bitcast <2 x float> %f to double
  ret double %b
}

define i32 @test_sext_freeze_load_i8(ptr %p) {
; CHECK-LABEL: test_sext_freeze_load_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrsb w0, [x0]
; CHECK-NEXT:    ret
  %v = load i8, ptr %p
  %f = freeze i8 %v
  %e = sext i8 %f to i32
  ret i32 %e
}

define i64 @test_sext_freeze_load_i32(ptr %p) {
; CHECK-LABEL: test_sext_freeze_load_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrsw x0, [x0]
; CHECK-NEXT:    ret
  %v = load i32, ptr %p
  %f = freeze i32 %v
  %e = sext i32 %f to i64
  ret i64 %e
}

define i64 @test_sext_freeze_load_i16(ptr %p) {
; CHECK-LABEL: test_sext_freeze_load_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrsh x0, [x0]
; CHECK-NEXT:    ret
  %v = load i16, ptr %p
  %f = freeze i16 %v
  %e = sext i16 %f to i64
  ret i64 %e
}

define i32 @test_zext_freeze_load_i8(ptr %p) {
; CHECK-LABEL: test_zext_freeze_load_i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrb w0, [x0]
; CHECK-NEXT:    ret
  %v = load i8, ptr %p
  %f = freeze i8 %v
  %e = zext i8 %f to i32
  ret i32 %e
}

define i64 @test_zext_freeze_load_i32(ptr %p) {
; CHECK-LABEL: test_zext_freeze_load_i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr w0, [x0]
; CHECK-NEXT:    ret
  %v = load i32, ptr %p
  %f = freeze i32 %v
  %e = zext i32 %f to i64
  ret i64 %e
}

define i64 @test_zext_freeze_load_i16(ptr %p) {
; CHECK-LABEL: test_zext_freeze_load_i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrh w0, [x0]
; CHECK-NEXT:    ret
  %v = load i16, ptr %p
  %f = freeze i16 %v
  %e = zext i16 %f to i64
  ret i64 %e
}

define i32 @test_sext_freeze_load_multiuse(ptr %p) {
; CHECK-LABEL: test_sext_freeze_load_multiuse:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldrb w8, [x0]
; CHECK-NEXT:    sxtb w9, w8
; CHECK-NEXT:    add w0, w9, w8, uxtb
; CHECK-NEXT:    ret
  %v = load i8, ptr %p
  %f = freeze i8 %v
  %e = sext i8 %f to i32
  %z = zext i8 %f to i32
  %r = add i32 %e, %z
  ret i32 %r
}

define <4 x i32> @test_sext_freeze_load_v4i16(ptr %p) {
; CHECK-LABEL: test_sext_freeze_load_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    sshll v0.4s, v0.4h, #0
; CHECK-NEXT:    ret
  %v = load <4 x i16>, ptr %p
  %f = freeze <4 x i16> %v
  %e = sext <4 x i16> %f to <4 x i32>
  ret <4 x i32> %e
}

define <4 x i32> @test_zext_freeze_load_v4i16(ptr %p) {
; CHECK-LABEL: test_zext_freeze_load_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr d0, [x0]
; CHECK-NEXT:    ushll v0.4s, v0.4h, #0
; CHECK-NEXT:    ret
  %v = load <4 x i16>, ptr %p
  %f = freeze <4 x i16> %v
  %e = zext <4 x i16> %f to <4 x i32>
  ret <4 x i32> %e
}
