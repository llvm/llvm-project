; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -mattr=+sme -force-streaming-compatible-sve  < %s | FileCheck %s
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE

target triple = "aarch64-unknown-linux-gnu"

;
; SREM
;

define <4 x i8> @srem_v4i8(<4 x i8> %op1, <4 x i8> %op2) {
; CHECK-LABEL: srem_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p1.s, vl4
; CHECK-NEXT:    sxtb z0.h, p0/m, z0.h
; CHECK-NEXT:    sxtb z1.h, p0/m, z1.h
; CHECK-NEXT:    sunpklo z2.s, z1.h
; CHECK-NEXT:    sunpklo z3.s, z0.h
; CHECK-NEXT:    sdivr z2.s, p1/m, z2.s, z3.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    mls z0.h, p0/m, z2.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v4i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.4h, v0.4h, #8
; NONEON-NOSVE-NEXT:    shl v1.4h, v1.4h, #8
; NONEON-NOSVE-NEXT:    sshr v0.4h, v0.4h, #8
; NONEON-NOSVE-NEXT:    sshr v1.4h, v1.4h, #8
; NONEON-NOSVE-NEXT:    smov w11, v1.h[0]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w14, v1.h[2]
; NONEON-NOSVE-NEXT:    smov w15, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w17, v1.h[3]
; NONEON-NOSVE-NEXT:    smov w18, v0.h[3]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s0, w11
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v0.h[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = srem <4 x i8> %op1, %op2
  ret <4 x i8> %res
}

define <8 x i8> @srem_v8i8(<8 x i8> %op1, <8 x i8> %op2) {
; CHECK-LABEL: srem_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sunpklo z2.h, z1.b
; CHECK-NEXT:    sunpklo z3.h, z0.b
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    sunpklo z5.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdivr z4.s, p0/m, z4.s, z5.s
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z3.h, z4.h, z4.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z2.b, z3.b, z3.b
; CHECK-NEXT:    mls z0.b, p0/m, z2.b, z1.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v8i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    smov w11, v1.b[0]
; NONEON-NOSVE-NEXT:    smov w12, v0.b[0]
; NONEON-NOSVE-NEXT:    smov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    smov w14, v1.b[2]
; NONEON-NOSVE-NEXT:    smov w15, v0.b[2]
; NONEON-NOSVE-NEXT:    smov w17, v1.b[3]
; NONEON-NOSVE-NEXT:    smov w18, v0.b[3]
; NONEON-NOSVE-NEXT:    smov w1, v1.b[4]
; NONEON-NOSVE-NEXT:    smov w2, v0.b[4]
; NONEON-NOSVE-NEXT:    smov w4, v1.b[5]
; NONEON-NOSVE-NEXT:    smov w5, v0.b[5]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.b[7]
; NONEON-NOSVE-NEXT:    fmov s2, w11
; NONEON-NOSVE-NEXT:    smov w11, v0.b[6]
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    sdiv w0, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    smov w14, v0.b[7]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w8
; NONEON-NOSVE-NEXT:    sdiv w3, w2, w1
; NONEON-NOSVE-NEXT:    msub w8, w0, w17, w18
; NONEON-NOSVE-NEXT:    mov v2.b[3], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w5, w4
; NONEON-NOSVE-NEXT:    msub w8, w3, w1, w2
; NONEON-NOSVE-NEXT:    mov v2.b[4], w8
; NONEON-NOSVE-NEXT:    sdiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w4, w5
; NONEON-NOSVE-NEXT:    mov v2.b[5], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    mov v2.b[6], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w13, w14
; NONEON-NOSVE-NEXT:    mov v2.b[7], w8
; NONEON-NOSVE-NEXT:    fmov d0, d2
; NONEON-NOSVE-NEXT:    ret
  %res = srem <8 x i8> %op1, %op2
  ret <8 x i8> %res
}

define <16 x i8> @srem_v16i8(<16 x i8> %op1, <16 x i8> %op2) {
; CHECK-LABEL: srem_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    sunpklo z2.h, z2.b
; CHECK-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    sunpklo z5.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdivr z4.s, p0/m, z4.s, z5.s
; CHECK-NEXT:    sunpklo z5.h, z0.b
; CHECK-NEXT:    sunpklo z7.s, z5.h
; CHECK-NEXT:    ext z5.b, z5.b, z5.b, #8
; CHECK-NEXT:    sunpklo z5.s, z5.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    sunpklo z3.h, z1.b
; CHECK-NEXT:    uzp1 z4.h, z4.h, z4.h
; CHECK-NEXT:    sunpklo z6.s, z3.h
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdivr z6.s, p0/m, z6.s, z7.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    sdivr z3.s, p0/m, z3.s, z5.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z4.h, p0, z4.h, z2.h
; CHECK-NEXT:    uzp1 z5.h, z6.h, z6.h
; CHECK-NEXT:    uzp1 z2.b, z4.b, z4.b
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z5.h, p0, z5.h, z3.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z3.b, z5.b, z5.b
; CHECK-NEXT:    splice z3.b, p0, z3.b, z2.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    mls z0.b, p0/m, z3.b, z1.b
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v16i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    stp x28, x27, [sp, #-80]! // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #16] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #32] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #48] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #64] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 80
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -72
; NONEON-NOSVE-NEXT:    .cfi_offset w28, -80
; NONEON-NOSVE-NEXT:    smov w11, v1.b[0]
; NONEON-NOSVE-NEXT:    smov w12, v0.b[0]
; NONEON-NOSVE-NEXT:    smov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    smov w14, v1.b[2]
; NONEON-NOSVE-NEXT:    smov w15, v0.b[2]
; NONEON-NOSVE-NEXT:    smov w17, v1.b[3]
; NONEON-NOSVE-NEXT:    smov w18, v0.b[3]
; NONEON-NOSVE-NEXT:    smov w1, v1.b[4]
; NONEON-NOSVE-NEXT:    smov w2, v0.b[4]
; NONEON-NOSVE-NEXT:    smov w4, v1.b[5]
; NONEON-NOSVE-NEXT:    smov w5, v0.b[5]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    smov w7, v1.b[6]
; NONEON-NOSVE-NEXT:    smov w19, v0.b[6]
; NONEON-NOSVE-NEXT:    smov w21, v1.b[7]
; NONEON-NOSVE-NEXT:    smov w22, v0.b[7]
; NONEON-NOSVE-NEXT:    smov w24, v1.b[8]
; NONEON-NOSVE-NEXT:    smov w25, v0.b[8]
; NONEON-NOSVE-NEXT:    smov w27, v1.b[9]
; NONEON-NOSVE-NEXT:    smov w28, v0.b[9]
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.b[11]
; NONEON-NOSVE-NEXT:    fmov s2, w11
; NONEON-NOSVE-NEXT:    smov w11, v0.b[10]
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[10]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    sdiv w0, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    smov w14, v0.b[11]
; NONEON-NOSVE-NEXT:    smov w16, v1.b[12]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w8
; NONEON-NOSVE-NEXT:    sdiv w3, w2, w1
; NONEON-NOSVE-NEXT:    msub w8, w0, w17, w18
; NONEON-NOSVE-NEXT:    smov w17, v0.b[12]
; NONEON-NOSVE-NEXT:    smov w0, v1.b[13]
; NONEON-NOSVE-NEXT:    mov v2.b[3], w8
; NONEON-NOSVE-NEXT:    sdiv w6, w5, w4
; NONEON-NOSVE-NEXT:    msub w8, w3, w1, w2
; NONEON-NOSVE-NEXT:    smov w1, v0.b[13]
; NONEON-NOSVE-NEXT:    mov v2.b[4], w8
; NONEON-NOSVE-NEXT:    sdiv w20, w19, w7
; NONEON-NOSVE-NEXT:    msub w8, w6, w4, w5
; NONEON-NOSVE-NEXT:    mov v2.b[5], w8
; NONEON-NOSVE-NEXT:    sdiv w23, w22, w21
; NONEON-NOSVE-NEXT:    msub w8, w20, w7, w19
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #64] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v2.b[6], w8
; NONEON-NOSVE-NEXT:    sdiv w26, w25, w24
; NONEON-NOSVE-NEXT:    msub w8, w23, w21, w22
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #48] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v2.b[7], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w28, w27
; NONEON-NOSVE-NEXT:    msub w8, w26, w24, w25
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #32] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #16] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v2.b[8], w8
; NONEON-NOSVE-NEXT:    sdiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w27, w28
; NONEON-NOSVE-NEXT:    mov v2.b[9], w8
; NONEON-NOSVE-NEXT:    sdiv w15, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    smov w10, v1.b[14]
; NONEON-NOSVE-NEXT:    smov w11, v0.b[14]
; NONEON-NOSVE-NEXT:    mov v2.b[10], w8
; NONEON-NOSVE-NEXT:    sdiv w18, w17, w16
; NONEON-NOSVE-NEXT:    msub w8, w15, w13, w14
; NONEON-NOSVE-NEXT:    smov w13, v1.b[15]
; NONEON-NOSVE-NEXT:    smov w14, v0.b[15]
; NONEON-NOSVE-NEXT:    mov v2.b[11], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w1, w0
; NONEON-NOSVE-NEXT:    msub w8, w18, w16, w17
; NONEON-NOSVE-NEXT:    mov v2.b[12], w8
; NONEON-NOSVE-NEXT:    sdiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w0, w1
; NONEON-NOSVE-NEXT:    mov v2.b[13], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    mov v2.b[14], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w13, w14
; NONEON-NOSVE-NEXT:    mov v2.b[15], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ldp x28, x27, [sp], #80 // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ret
  %res = srem <16 x i8> %op1, %op2
  ret <16 x i8> %res
}

define void @srem_v32i8(ptr %a, ptr %b) {
; CHECK-LABEL: srem_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr q0, [x0, #16]
; CHECK-NEXT:    ldr q1, [x1, #16]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    sunpklo z7.h, z1.b
; CHECK-NEXT:    sunpklo z16.h, z0.b
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    sunpklo z6.s, z7.h
; CHECK-NEXT:    ext z7.b, z7.b, z7.b, #8
; CHECK-NEXT:    sunpklo z17.s, z16.h
; CHECK-NEXT:    ext z16.b, z16.b, z16.b, #8
; CHECK-NEXT:    sunpklo z4.h, z2.b
; CHECK-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEXT:    sunpklo z7.s, z7.h
; CHECK-NEXT:    sunpklo z16.s, z16.h
; CHECK-NEXT:    sdivr z6.s, p0/m, z6.s, z17.s
; CHECK-NEXT:    sunpklo z2.s, z4.h
; CHECK-NEXT:    sunpklo z5.s, z3.h
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z4.s, z4.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z5.s
; CHECK-NEXT:    movprfx z5, z3
; CHECK-NEXT:    sdiv z5.s, p0/m, z5.s, z4.s
; CHECK-NEXT:    ldr q3, [x0]
; CHECK-NEXT:    ldr q4, [x1]
; CHECK-NEXT:    mov z18.d, z3.d
; CHECK-NEXT:    mov z17.d, z4.d
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    ext z18.b, z18.b, z3.b, #8
; CHECK-NEXT:    ext z17.b, z17.b, z4.b, #8
; CHECK-NEXT:    sunpklo z18.h, z18.b
; CHECK-NEXT:    sunpklo z17.h, z17.b
; CHECK-NEXT:    sunpklo z20.s, z18.h
; CHECK-NEXT:    ext z18.b, z18.b, z18.b, #8
; CHECK-NEXT:    sunpklo z19.s, z17.h
; CHECK-NEXT:    ext z17.b, z17.b, z17.b, #8
; CHECK-NEXT:    sdivr z7.s, p0/m, z7.s, z16.s
; CHECK-NEXT:    sunpklo z18.s, z18.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    sunpklo z17.s, z17.h
; CHECK-NEXT:    sdivr z19.s, p0/m, z19.s, z20.s
; CHECK-NEXT:    sunpklo z20.h, z3.b
; CHECK-NEXT:    uzp1 z7.h, z7.h, z7.h
; CHECK-NEXT:    sunpklo z22.s, z20.h
; CHECK-NEXT:    ext z20.b, z20.b, z20.b, #8
; CHECK-NEXT:    sunpklo z20.s, z20.h
; CHECK-NEXT:    sdivr z17.s, p0/m, z17.s, z18.s
; CHECK-NEXT:    sunpklo z18.h, z4.b
; CHECK-NEXT:    uzp1 z16.h, z19.h, z19.h
; CHECK-NEXT:    sunpklo z21.s, z18.h
; CHECK-NEXT:    ext z18.b, z18.b, z18.b, #8
; CHECK-NEXT:    sunpklo z18.s, z18.h
; CHECK-NEXT:    sdivr z21.s, p0/m, z21.s, z22.s
; CHECK-NEXT:    uzp1 z17.h, z17.h, z17.h
; CHECK-NEXT:    sdivr z18.s, p0/m, z18.s, z20.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z16.h, p0, z16.h, z17.h
; CHECK-NEXT:    splice z2.h, p0, z2.h, z5.h
; CHECK-NEXT:    splice z6.h, p0, z6.h, z7.h
; CHECK-NEXT:    uzp1 z19.h, z21.h, z21.h
; CHECK-NEXT:    uzp1 z5.b, z16.b, z16.b
; CHECK-NEXT:    uzp1 z2.b, z2.b, z2.b
; CHECK-NEXT:    uzp1 z6.b, z6.b, z6.b
; CHECK-NEXT:    uzp1 z18.h, z18.h, z18.h
; CHECK-NEXT:    splice z19.h, p0, z19.h, z18.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    splice z6.b, p0, z6.b, z2.b
; CHECK-NEXT:    uzp1 z7.b, z19.b, z19.b
; CHECK-NEXT:    splice z7.b, p0, z7.b, z5.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    mls z0.b, p0/m, z6.b, z1.b
; CHECK-NEXT:    movprfx z2, z3
; CHECK-NEXT:    mls z2.b, p0/m, z7.b, z4.b
; CHECK-NEXT:    stp q2, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v32i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #320
; NONEON-NOSVE-NEXT:    stp x29, x30, [sp, #224] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x28, x27, [sp, #240] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #256] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #272] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #288] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #304] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 320
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -72
; NONEON-NOSVE-NEXT:    .cfi_offset w28, -80
; NONEON-NOSVE-NEXT:    .cfi_offset w30, -88
; NONEON-NOSVE-NEXT:    .cfi_offset w29, -96
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    str x0, [sp, #216] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    smov w4, v3.b[1]
; NONEON-NOSVE-NEXT:    smov w1, v2.b[1]
; NONEON-NOSVE-NEXT:    smov w7, v3.b[7]
; NONEON-NOSVE-NEXT:    smov w5, v2.b[7]
; NONEON-NOSVE-NEXT:    smov w6, v3.b[8]
; NONEON-NOSVE-NEXT:    smov w3, v2.b[8]
; NONEON-NOSVE-NEXT:    smov w22, v3.b[9]
; NONEON-NOSVE-NEXT:    smov w20, v2.b[9]
; NONEON-NOSVE-NEXT:    smov w13, v3.b[0]
; NONEON-NOSVE-NEXT:    smov w17, v3.b[3]
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    str w8, [sp, #100] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w8, v1.b[0]
; NONEON-NOSVE-NEXT:    str w9, [sp, #108] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w9, v0.b[0]
; NONEON-NOSVE-NEXT:    smov w14, v2.b[3]
; NONEON-NOSVE-NEXT:    smov w15, v3.b[4]
; NONEON-NOSVE-NEXT:    smov w12, v2.b[4]
; NONEON-NOSVE-NEXT:    smov w2, v3.b[5]
; NONEON-NOSVE-NEXT:    smov w18, v2.b[5]
; NONEON-NOSVE-NEXT:    smov w0, v3.b[6]
; NONEON-NOSVE-NEXT:    smov w16, v2.b[6]
; NONEON-NOSVE-NEXT:    smov w21, v3.b[10]
; NONEON-NOSVE-NEXT:    smov w19, v2.b[10]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #36] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    ldr w30, [sp, #36] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    str w10, [sp, #116] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[2]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[2]
; NONEON-NOSVE-NEXT:    stp w10, w8, [sp, #44] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[3]
; NONEON-NOSVE-NEXT:    stp w9, w10, [sp, #52] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w9, v0.b[3]
; NONEON-NOSVE-NEXT:    sdiv w26, w14, w17
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #72] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w11, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[4]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[4]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #60] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[5]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[5]
; NONEON-NOSVE-NEXT:    str w8, [sp, #96] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #104] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #68] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[6]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[6]
; NONEON-NOSVE-NEXT:    stp w11, w8, [sp, #80] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #112] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[7]
; NONEON-NOSVE-NEXT:    stp w9, w10, [sp, #88] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w9, v0.b[7]
; NONEON-NOSVE-NEXT:    sdiv w25, w12, w15
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #132] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[8]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[8]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #120] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #140] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[9]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[9]
; NONEON-NOSVE-NEXT:    str w8, [sp, #148] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #156] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w11, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[10]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[10]
; NONEON-NOSVE-NEXT:    str w10, [sp, #128] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #204] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[11]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[11]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #192] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #212] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[12]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[12]
; NONEON-NOSVE-NEXT:    str w8, [sp, #172] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #180] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #200] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[13]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[13]
; NONEON-NOSVE-NEXT:    stp w11, w8, [sp, #164] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w11, v3.b[2]
; NONEON-NOSVE-NEXT:    str w9, [sp, #176] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #188] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.b[14]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[14]
; NONEON-NOSVE-NEXT:    str w8, [sp, #144] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #152] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #184] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v2.b[2]
; NONEON-NOSVE-NEXT:    sdiv w8, w1, w4
; NONEON-NOSVE-NEXT:    str w10, [sp, #160] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w10, v2.b[0]
; NONEON-NOSVE-NEXT:    str w8, [sp, #24] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w8, w5, w7
; NONEON-NOSVE-NEXT:    str w8, [sp, #28] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w8, w3, w6
; NONEON-NOSVE-NEXT:    str w8, [sp, #20] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w8, w20, w22
; NONEON-NOSVE-NEXT:    sdiv w24, w10, w13
; NONEON-NOSVE-NEXT:    str w8, [sp, #32] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    ldp w29, w8, [sp, #40] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w8, w30, w29
; NONEON-NOSVE-NEXT:    ldp x29, x30, [sp, #224] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    fmov s4, w8
; NONEON-NOSVE-NEXT:    sdiv w23, w9, w11
; NONEON-NOSVE-NEXT:    msub w10, w24, w13, w10
; NONEON-NOSVE-NEXT:    ldr w13, [sp, #24] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w24, [sp, #100] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w13, w13, w4, w1
; NONEON-NOSVE-NEXT:    ldr w1, [sp, #116] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w4, [sp, #108] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    fmov s5, w10
; NONEON-NOSVE-NEXT:    msub w1, w1, w24, w4
; NONEON-NOSVE-NEXT:    mov v5.b[1], w13
; NONEON-NOSVE-NEXT:    mov v4.b[1], w1
; NONEON-NOSVE-NEXT:    ldr w1, [sp, #120] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w23, w11, w9
; NONEON-NOSVE-NEXT:    ldr w11, [sp, #48] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w28, w18, w2
; NONEON-NOSVE-NEXT:    ldp w10, w9, [sp, #52] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #272] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w26, w17, w14
; NONEON-NOSVE-NEXT:    ldr w14, [sp, #72] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w11, w10
; NONEON-NOSVE-NEXT:    ldr w17, [sp, #96] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    smov w10, v3.b[11]
; NONEON-NOSVE-NEXT:    smov w11, v2.b[11]
; NONEON-NOSVE-NEXT:    mov v4.b[2], w9
; NONEON-NOSVE-NEXT:    mov v5.b[3], w8
; NONEON-NOSVE-NEXT:    msub w8, w25, w15, w12
; NONEON-NOSVE-NEXT:    ldp w13, w9, [sp, #76] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w27, w16, w0
; NONEON-NOSVE-NEXT:    ldr w15, [sp, #104] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #256] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w14, w13
; NONEON-NOSVE-NEXT:    ldr w14, [sp, #60] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[4], w8
; NONEON-NOSVE-NEXT:    msub w8, w28, w2, w18
; NONEON-NOSVE-NEXT:    ldr w2, [sp, #156] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[3], w9
; NONEON-NOSVE-NEXT:    ldp w12, w9, [sp, #64] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[5], w8
; NONEON-NOSVE-NEXT:    msub w8, w27, w0, w16
; NONEON-NOSVE-NEXT:    ldr w0, [sp, #132] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w4, w19, w21
; NONEON-NOSVE-NEXT:    msub w9, w9, w14, w12
; NONEON-NOSVE-NEXT:    smov w12, v3.b[12]
; NONEON-NOSVE-NEXT:    smov w14, v2.b[12]
; NONEON-NOSVE-NEXT:    ldp x28, x27, [sp, #240] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[6], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #28] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[4], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #112] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w8, w7, w5
; NONEON-NOSVE-NEXT:    ldr w5, [sp, #204] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w17, w15
; NONEON-NOSVE-NEXT:    ldr w17, [sp, #84] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[7], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #20] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w13, w11, w10
; NONEON-NOSVE-NEXT:    mov v4.b[5], w9
; NONEON-NOSVE-NEXT:    ldp w16, w9, [sp, #88] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w8, w6, w3
; NONEON-NOSVE-NEXT:    ldr w3, [sp, #148] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w17, w16
; NONEON-NOSVE-NEXT:    smov w16, v3.b[13]
; NONEON-NOSVE-NEXT:    smov w17, v2.b[13]
; NONEON-NOSVE-NEXT:    mov v5.b[8], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #32] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[6], w9
; NONEON-NOSVE-NEXT:    msub w8, w8, w22, w20
; NONEON-NOSVE-NEXT:    sdiv w15, w14, w12
; NONEON-NOSVE-NEXT:    ldp w18, w9, [sp, #136] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[9], w8
; NONEON-NOSVE-NEXT:    msub w8, w4, w21, w19
; NONEON-NOSVE-NEXT:    msub w9, w9, w0, w18
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #304] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #288] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[7], w9
; NONEON-NOSVE-NEXT:    mov v5.b[10], w8
; NONEON-NOSVE-NEXT:    msub w8, w13, w10, w11
; NONEON-NOSVE-NEXT:    ldp w0, w9, [sp, #124] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp w11, w10, [sp, #196] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w13, [sp, #192] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w18, w17, w16
; NONEON-NOSVE-NEXT:    msub w9, w9, w1, w0
; NONEON-NOSVE-NEXT:    mov v5.b[11], w8
; NONEON-NOSVE-NEXT:    smov w0, v3.b[14]
; NONEON-NOSVE-NEXT:    msub w10, w10, w13, w11
; NONEON-NOSVE-NEXT:    smov w1, v2.b[14]
; NONEON-NOSVE-NEXT:    msub w8, w15, w12, w14
; NONEON-NOSVE-NEXT:    mov v4.b[8], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #164] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp w15, w13, [sp, #168] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w3, w2
; NONEON-NOSVE-NEXT:    mov v5.b[12], w8
; NONEON-NOSVE-NEXT:    ldp w4, w3, [sp, #208] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp w14, w12, [sp, #176] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[9], w9
; NONEON-NOSVE-NEXT:    sdiv w2, w1, w0
; NONEON-NOSVE-NEXT:    smov w9, v3.b[15]
; NONEON-NOSVE-NEXT:    msub w3, w3, w5, w4
; NONEON-NOSVE-NEXT:    smov w4, v2.b[15]
; NONEON-NOSVE-NEXT:    msub w8, w18, w16, w17
; NONEON-NOSVE-NEXT:    ldr w16, [sp, #144] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[10], w3
; NONEON-NOSVE-NEXT:    mov v5.b[13], w8
; NONEON-NOSVE-NEXT:    mov v4.b[11], w10
; NONEON-NOSVE-NEXT:    ldr w10, [sp, #188] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w11, w4, w9
; NONEON-NOSVE-NEXT:    msub w8, w2, w0, w1
; NONEON-NOSVE-NEXT:    msub w10, w10, w13, w12
; NONEON-NOSVE-NEXT:    smov w12, v1.b[15]
; NONEON-NOSVE-NEXT:    smov w13, v0.b[15]
; NONEON-NOSVE-NEXT:    mov v5.b[14], w8
; NONEON-NOSVE-NEXT:    mov v4.b[12], w10
; NONEON-NOSVE-NEXT:    ldr w10, [sp, #184] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w10, w10, w15, w14
; NONEON-NOSVE-NEXT:    ldr w15, [sp, #152] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w14, w13, w12
; NONEON-NOSVE-NEXT:    msub w8, w11, w9, w4
; NONEON-NOSVE-NEXT:    mov v4.b[13], w10
; NONEON-NOSVE-NEXT:    ldr w10, [sp, #160] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[15], w8
; NONEON-NOSVE-NEXT:    ldr x8, [sp, #216] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w10, w10, w16, w15
; NONEON-NOSVE-NEXT:    mov v4.b[14], w10
; NONEON-NOSVE-NEXT:    msub w9, w14, w12, w13
; NONEON-NOSVE-NEXT:    mov v4.b[15], w9
; NONEON-NOSVE-NEXT:    stp q5, q4, [x8]
; NONEON-NOSVE-NEXT:    add sp, sp, #320
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <32 x i8>, ptr %a
  %op2 = load <32 x i8>, ptr %b
  %res = srem <32 x i8> %op1, %op2
  store <32 x i8> %res, ptr %a
  ret void
}

define <4 x i16> @srem_v4i16(<4 x i16> %op1, <4 x i16> %op2) {
; CHECK-LABEL: srem_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sunpklo z2.s, z1.h
; CHECK-NEXT:    sunpklo z3.s, z0.h
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    mls z0.h, p0/m, z2.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v4i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    smov w11, v1.h[0]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w14, v1.h[2]
; NONEON-NOSVE-NEXT:    smov w15, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w17, v1.h[3]
; NONEON-NOSVE-NEXT:    smov w18, v0.h[3]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s0, w11
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v0.h[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = srem <4 x i16> %op1, %op2
  ret <4 x i16> %res
}

define <8 x i16> @srem_v8i16(<8 x i16> %op1, <8 x i16> %op2) {
; CHECK-LABEL: srem_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    sunpklo z4.s, z0.h
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    sdivr z3.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    mls z0.h, p0/m, z3.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v8i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    smov w11, v1.h[0]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w14, v1.h[2]
; NONEON-NOSVE-NEXT:    smov w15, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w17, v1.h[3]
; NONEON-NOSVE-NEXT:    smov w18, v0.h[3]
; NONEON-NOSVE-NEXT:    smov w1, v1.h[4]
; NONEON-NOSVE-NEXT:    smov w2, v0.h[4]
; NONEON-NOSVE-NEXT:    smov w4, v1.h[5]
; NONEON-NOSVE-NEXT:    smov w5, v0.h[5]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.h[7]
; NONEON-NOSVE-NEXT:    fmov s2, w11
; NONEON-NOSVE-NEXT:    smov w11, v0.h[6]
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.h[6]
; NONEON-NOSVE-NEXT:    mov v2.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w0, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    smov w14, v0.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[2], w8
; NONEON-NOSVE-NEXT:    sdiv w3, w2, w1
; NONEON-NOSVE-NEXT:    msub w8, w0, w17, w18
; NONEON-NOSVE-NEXT:    mov v2.h[3], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w5, w4
; NONEON-NOSVE-NEXT:    msub w8, w3, w1, w2
; NONEON-NOSVE-NEXT:    mov v2.h[4], w8
; NONEON-NOSVE-NEXT:    sdiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w4, w5
; NONEON-NOSVE-NEXT:    mov v2.h[5], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    mov v2.h[6], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w13, w14
; NONEON-NOSVE-NEXT:    mov v2.h[7], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = srem <8 x i16> %op1, %op2
  ret <8 x i16> %res
}

define void @srem_v16i16(ptr %a, ptr %b) {
; CHECK-LABEL: srem_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q4, q1, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldr q0, [x0, #16]
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    mov z5.d, z4.d
; CHECK-NEXT:    sunpklo z16.s, z0.h
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    ext z5.b, z5.b, z4.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sunpklo z5.s, z5.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ldr q3, [x0]
; CHECK-NEXT:    mov z6.d, z3.d
; CHECK-NEXT:    sunpklo z7.s, z3.h
; CHECK-NEXT:    ext z6.b, z6.b, z3.b, #8
; CHECK-NEXT:    sunpklo z6.s, z6.h
; CHECK-NEXT:    sdivr z5.s, p0/m, z5.s, z6.s
; CHECK-NEXT:    sunpklo z6.s, z4.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    sdivr z6.s, p0/m, z6.s, z7.s
; CHECK-NEXT:    sunpklo z7.s, z1.h
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    sdivr z7.s, p0/m, z7.s, z16.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    splice z6.h, p0, z6.h, z5.h
; CHECK-NEXT:    uzp1 z7.h, z7.h, z7.h
; CHECK-NEXT:    splice z7.h, p0, z7.h, z2.h
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    movprfx z2, z3
; CHECK-NEXT:    mls z2.h, p0/m, z6.h, z4.h
; CHECK-NEXT:    mls z0.h, p0/m, z7.h, z1.h
; CHECK-NEXT:    stp q2, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v16i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #144
; NONEON-NOSVE-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x28, x27, [sp, #64] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #80] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #96] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #112] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #128] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 144
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -72
; NONEON-NOSVE-NEXT:    .cfi_offset w28, -80
; NONEON-NOSVE-NEXT:    .cfi_offset w30, -88
; NONEON-NOSVE-NEXT:    .cfi_offset w29, -96
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w20, v1.h[0]
; NONEON-NOSVE-NEXT:    smov w21, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w19, v0.h[3]
; NONEON-NOSVE-NEXT:    smov w5, v1.h[4]
; NONEON-NOSVE-NEXT:    smov w2, v0.h[4]
; NONEON-NOSVE-NEXT:    smov w1, v3.h[1]
; NONEON-NOSVE-NEXT:    smov w23, v2.h[1]
; NONEON-NOSVE-NEXT:    smov w25, v3.h[0]
; NONEON-NOSVE-NEXT:    smov w26, v2.h[0]
; NONEON-NOSVE-NEXT:    smov w6, v1.h[5]
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #36] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w8, v1.h[2]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w3, v0.h[5]
; NONEON-NOSVE-NEXT:    smov w4, v1.h[6]
; NONEON-NOSVE-NEXT:    smov w7, v0.h[6]
; NONEON-NOSVE-NEXT:    smov w28, v3.h[2]
; NONEON-NOSVE-NEXT:    smov w29, v2.h[2]
; NONEON-NOSVE-NEXT:    smov w15, v3.h[3]
; NONEON-NOSVE-NEXT:    smov w13, v2.h[3]
; NONEON-NOSVE-NEXT:    smov w12, v3.h[4]
; NONEON-NOSVE-NEXT:    smov w14, v3.h[5]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #24] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w11, w21, w20
; NONEON-NOSVE-NEXT:    str w10, [sp, #44] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    smov w8, v1.h[3]
; NONEON-NOSVE-NEXT:    stp w8, w11, [sp] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w11, v2.h[4]
; NONEON-NOSVE-NEXT:    ldr w22, [sp, #4] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w20, w22, w20, w21
; NONEON-NOSVE-NEXT:    sdiv w9, w19, w8
; NONEON-NOSVE-NEXT:    str w10, [sp, #32] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w10, v3.h[6]
; NONEON-NOSVE-NEXT:    fmov s5, w20
; NONEON-NOSVE-NEXT:    smov w20, v3.h[7]
; NONEON-NOSVE-NEXT:    sdiv w8, w2, w5
; NONEON-NOSVE-NEXT:    sdiv w24, w23, w1
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #16] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    sdiv w27, w26, w25
; NONEON-NOSVE-NEXT:    msub w1, w24, w1, w23
; NONEON-NOSVE-NEXT:    ldp w24, w23, [sp, #40] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w9, w3, w6
; NONEON-NOSVE-NEXT:    msub w21, w27, w25, w26
; NONEON-NOSVE-NEXT:    ldr w25, [sp, #36] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w23, w23, w25, w24
; NONEON-NOSVE-NEXT:    ldr w25, [sp, #24] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    fmov s4, w21
; NONEON-NOSVE-NEXT:    mov v5.h[1], w23
; NONEON-NOSVE-NEXT:    ldp w23, w21, [sp, #28] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.h[1], w1
; NONEON-NOSVE-NEXT:    sdiv w8, w7, w4
; NONEON-NOSVE-NEXT:    msub w21, w21, w25, w23
; NONEON-NOSVE-NEXT:    smov w23, v2.h[7]
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #80] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.h[2], w21
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #112] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w30, w29, w28
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #8] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    smov w9, v2.h[5]
; NONEON-NOSVE-NEXT:    smov w8, v2.h[6]
; NONEON-NOSVE-NEXT:    sdiv w18, w13, w15
; NONEON-NOSVE-NEXT:    msub w1, w30, w28, w29
; NONEON-NOSVE-NEXT:    ldp x28, x27, [sp, #64] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.h[2], w1
; NONEON-NOSVE-NEXT:    sdiv w16, w11, w12
; NONEON-NOSVE-NEXT:    msub w13, w18, w15, w13
; NONEON-NOSVE-NEXT:    ldr w15, [sp, #20] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w18, [sp] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w15, w15, w18, w19
; NONEON-NOSVE-NEXT:    mov v4.h[3], w13
; NONEON-NOSVE-NEXT:    smov w13, v1.h[7]
; NONEON-NOSVE-NEXT:    mov v5.h[3], w15
; NONEON-NOSVE-NEXT:    smov w15, v0.h[7]
; NONEON-NOSVE-NEXT:    sdiv w17, w9, w14
; NONEON-NOSVE-NEXT:    msub w11, w16, w12, w11
; NONEON-NOSVE-NEXT:    ldr w12, [sp, #16] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w12, w12, w5, w2
; NONEON-NOSVE-NEXT:    mov v4.h[4], w11
; NONEON-NOSVE-NEXT:    ldr w11, [sp, #12] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.h[4], w12
; NONEON-NOSVE-NEXT:    msub w11, w11, w6, w3
; NONEON-NOSVE-NEXT:    sdiv w24, w8, w10
; NONEON-NOSVE-NEXT:    msub w9, w17, w14, w9
; NONEON-NOSVE-NEXT:    mov v5.h[5], w11
; NONEON-NOSVE-NEXT:    mov v4.h[5], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #8] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w4, w7
; NONEON-NOSVE-NEXT:    sdiv w18, w23, w20
; NONEON-NOSVE-NEXT:    msub w8, w24, w10, w8
; NONEON-NOSVE-NEXT:    mov v5.h[6], w9
; NONEON-NOSVE-NEXT:    mov v4.h[6], w8
; NONEON-NOSVE-NEXT:    sdiv w12, w15, w13
; NONEON-NOSVE-NEXT:    msub w8, w18, w20, w23
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #128] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #96] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.h[7], w8
; NONEON-NOSVE-NEXT:    msub w9, w12, w13, w15
; NONEON-NOSVE-NEXT:    mov v5.h[7], w9
; NONEON-NOSVE-NEXT:    stp q4, q5, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #144
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x i16>, ptr %a
  %op2 = load <16 x i16>, ptr %b
  %res = srem <16 x i16> %op1, %op2
  store <16 x i16> %res, ptr %a
  ret void
}

define <2 x i32> @srem_v2i32(<2 x i32> %op1, <2 x i32> %op2) {
; CHECK-LABEL: srem_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    sdiv z2.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    mls z0.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v2i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    mov w11, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w12, v0.s[1]
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    msub w9, w13, w11, w12
; NONEON-NOSVE-NEXT:    mov v0.s[1], w9
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = srem <2 x i32> %op1, %op2
  ret <2 x i32> %res
}

define <4 x i32> @srem_v4i32(<4 x i32> %op1, <4 x i32> %op2) {
; CHECK-LABEL: srem_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    sdiv z2.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    mls z0.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v4i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmov w11, s1
; NONEON-NOSVE-NEXT:    fmov w12, s0
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    mov w14, v1.s[2]
; NONEON-NOSVE-NEXT:    mov w15, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w17, v1.s[3]
; NONEON-NOSVE-NEXT:    mov w18, v0.s[3]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s0, w11
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v0.s[1], w8
; NONEON-NOSVE-NEXT:    sdiv w9, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v0.s[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.s[3], w8
; NONEON-NOSVE-NEXT:    ret
  %res = srem <4 x i32> %op1, %op2
  ret <4 x i32> %res
}

define void @srem_v8i32(ptr %a, ptr %b) {
; CHECK-LABEL: srem_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    movprfx z4, z1
; CHECK-NEXT:    sdiv z4.s, p0/m, z4.s, z0.s
; CHECK-NEXT:    movprfx z5, z2
; CHECK-NEXT:    sdiv z5.s, p0/m, z5.s, z3.s
; CHECK-NEXT:    msb z0.s, p0/m, z4.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    mls z1.s, p0/m, z5.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str x23, [sp, #-48]! // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #16] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #32] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -48
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    fmov w12, s0
; NONEON-NOSVE-NEXT:    fmov w3, s2
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    fmov w11, s1
; NONEON-NOSVE-NEXT:    fmov w2, s3
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w17, v3.s[1]
; NONEON-NOSVE-NEXT:    mov w18, v2.s[1]
; NONEON-NOSVE-NEXT:    mov w14, v1.s[2]
; NONEON-NOSVE-NEXT:    mov w15, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w5, v3.s[2]
; NONEON-NOSVE-NEXT:    mov w6, v2.s[2]
; NONEON-NOSVE-NEXT:    sdiv w13, w12, w11
; NONEON-NOSVE-NEXT:    mov w19, v3.s[3]
; NONEON-NOSVE-NEXT:    mov w20, v2.s[3]
; NONEON-NOSVE-NEXT:    mov w22, v1.s[3]
; NONEON-NOSVE-NEXT:    mov w23, v0.s[3]
; NONEON-NOSVE-NEXT:    sdiv w4, w3, w2
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s1, w11
; NONEON-NOSVE-NEXT:    sdiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w12, w4, w2, w3
; NONEON-NOSVE-NEXT:    fmov s0, w12
; NONEON-NOSVE-NEXT:    sdiv w1, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v1.s[1], w8
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w13, w1, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.s[1], w13
; NONEON-NOSVE-NEXT:    sdiv w7, w6, w5
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v1.s[2], w8
; NONEON-NOSVE-NEXT:    sdiv w21, w20, w19
; NONEON-NOSVE-NEXT:    msub w10, w7, w5, w6
; NONEON-NOSVE-NEXT:    mov v0.s[2], w10
; NONEON-NOSVE-NEXT:    sdiv w9, w23, w22
; NONEON-NOSVE-NEXT:    msub w10, w21, w19, w20
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #32] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v0.s[3], w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w22, w23
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #16] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v1.s[3], w8
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ldr x23, [sp], #48 // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %op2 = load <8 x i32>, ptr %b
  %res = srem <8 x i32> %op1, %op2
  store <8 x i32> %res, ptr %a
  ret void
}

define <1 x i64> @srem_v1i64(<1 x i64> %op1, <1 x i64> %op2) {
; CHECK-LABEL: srem_v1i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl1
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    sdiv z2.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    mls z0.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v1i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    sdiv x10, x9, x8
; NONEON-NOSVE-NEXT:    msub x8, x10, x8, x9
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    ret
  %res = srem <1 x i64> %op1, %op2
  ret <1 x i64> %res
}

define <2 x i64> @srem_v2i64(<2 x i64> %op1, <2 x i64> %op2) {
; CHECK-LABEL: srem_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    sdiv z2.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    mls z0.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v2i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    mov x11, v1.d[1]
; NONEON-NOSVE-NEXT:    mov x12, v0.d[1]
; NONEON-NOSVE-NEXT:    sdiv x10, x9, x8
; NONEON-NOSVE-NEXT:    sdiv x13, x12, x11
; NONEON-NOSVE-NEXT:    msub x8, x10, x8, x9
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    msub x9, x13, x11, x12
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    ret
  %res = srem <2 x i64> %op1, %op2
  ret <2 x i64> %res
}

define void @srem_v4i64(ptr %a, ptr %b) {
; CHECK-LABEL: srem_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    movprfx z4, z1
; CHECK-NEXT:    sdiv z4.d, p0/m, z4.d, z0.d
; CHECK-NEXT:    movprfx z5, z2
; CHECK-NEXT:    sdiv z5.d, p0/m, z5.d, z3.d
; CHECK-NEXT:    msb z0.d, p0/m, z4.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    mls z1.d, p0/m, z5.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: srem_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    fmov x15, d2
; NONEON-NOSVE-NEXT:    mov x12, v2.d[1]
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x14, d3
; NONEON-NOSVE-NEXT:    mov x11, v3.d[1]
; NONEON-NOSVE-NEXT:    mov x17, v1.d[1]
; NONEON-NOSVE-NEXT:    mov x18, v0.d[1]
; NONEON-NOSVE-NEXT:    sdiv x10, x9, x8
; NONEON-NOSVE-NEXT:    sdiv x16, x15, x14
; NONEON-NOSVE-NEXT:    msub x8, x10, x8, x9
; NONEON-NOSVE-NEXT:    fmov d1, x8
; NONEON-NOSVE-NEXT:    sdiv x13, x12, x11
; NONEON-NOSVE-NEXT:    msub x10, x16, x14, x15
; NONEON-NOSVE-NEXT:    fmov d0, x10
; NONEON-NOSVE-NEXT:    sdiv x1, x18, x17
; NONEON-NOSVE-NEXT:    msub x9, x13, x11, x12
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    msub x11, x1, x17, x18
; NONEON-NOSVE-NEXT:    mov v1.d[1], x11
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x i64>, ptr %a
  %op2 = load <4 x i64>, ptr %b
  %res = srem <4 x i64> %op1, %op2
  store <4 x i64> %res, ptr %a
  ret void
}

;
; UREM
;

define <4 x i8> @urem_v4i8(<4 x i8> %op1, <4 x i8> %op2) {
; CHECK-LABEL: urem_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    and z0.h, z0.h, #0xff
; CHECK-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    uunpklo z3.s, z0.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    mls z0.h, p0/m, z2.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v4i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    umov w11, v1.h[0]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w14, v1.h[2]
; NONEON-NOSVE-NEXT:    umov w15, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w17, v1.h[3]
; NONEON-NOSVE-NEXT:    umov w18, v0.h[3]
; NONEON-NOSVE-NEXT:    and w11, w11, #0xff
; NONEON-NOSVE-NEXT:    and w12, w12, #0xff
; NONEON-NOSVE-NEXT:    and w8, w8, #0xff
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    and w14, w14, #0xff
; NONEON-NOSVE-NEXT:    and w15, w15, #0xff
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    and w12, w17, #0xff
; NONEON-NOSVE-NEXT:    and w13, w18, #0xff
; NONEON-NOSVE-NEXT:    fmov s0, w11
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    udiv w9, w13, w12
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v0.h[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w12, w13
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = urem <4 x i8> %op1, %op2
  ret <4 x i8> %res
}

define <8 x i8> @urem_v8i8(<8 x i8> %op1, <8 x i8> %op2) {
; CHECK-LABEL: urem_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z2.h, z1.b
; CHECK-NEXT:    uunpklo z3.h, z0.b
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpklo z5.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udivr z4.s, p0/m, z4.s, z5.s
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z3.h, z4.h, z4.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z2.b, z3.b, z3.b
; CHECK-NEXT:    mls z0.b, p0/m, z2.b, z1.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v8i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    umov w11, v1.b[0]
; NONEON-NOSVE-NEXT:    umov w12, v0.b[0]
; NONEON-NOSVE-NEXT:    umov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    umov w14, v1.b[2]
; NONEON-NOSVE-NEXT:    umov w15, v0.b[2]
; NONEON-NOSVE-NEXT:    umov w17, v1.b[3]
; NONEON-NOSVE-NEXT:    umov w18, v0.b[3]
; NONEON-NOSVE-NEXT:    umov w1, v1.b[4]
; NONEON-NOSVE-NEXT:    umov w2, v0.b[4]
; NONEON-NOSVE-NEXT:    umov w4, v1.b[5]
; NONEON-NOSVE-NEXT:    umov w5, v0.b[5]
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.b[7]
; NONEON-NOSVE-NEXT:    fmov s2, w11
; NONEON-NOSVE-NEXT:    umov w11, v0.b[6]
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    udiv w0, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    umov w14, v0.b[7]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w8
; NONEON-NOSVE-NEXT:    udiv w3, w2, w1
; NONEON-NOSVE-NEXT:    msub w8, w0, w17, w18
; NONEON-NOSVE-NEXT:    mov v2.b[3], w8
; NONEON-NOSVE-NEXT:    udiv w9, w5, w4
; NONEON-NOSVE-NEXT:    msub w8, w3, w1, w2
; NONEON-NOSVE-NEXT:    mov v2.b[4], w8
; NONEON-NOSVE-NEXT:    udiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w4, w5
; NONEON-NOSVE-NEXT:    mov v2.b[5], w8
; NONEON-NOSVE-NEXT:    udiv w9, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    mov v2.b[6], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w13, w14
; NONEON-NOSVE-NEXT:    mov v2.b[7], w8
; NONEON-NOSVE-NEXT:    fmov d0, d2
; NONEON-NOSVE-NEXT:    ret
  %res = urem <8 x i8> %op1, %op2
  ret <8 x i8> %res
}

define <16 x i8> @urem_v16i8(<16 x i8> %op1, <16 x i8> %op2) {
; CHECK-LABEL: urem_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpklo z5.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udivr z4.s, p0/m, z4.s, z5.s
; CHECK-NEXT:    uunpklo z5.h, z0.b
; CHECK-NEXT:    uunpklo z7.s, z5.h
; CHECK-NEXT:    ext z5.b, z5.b, z5.b, #8
; CHECK-NEXT:    uunpklo z5.s, z5.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    uunpklo z3.h, z1.b
; CHECK-NEXT:    uzp1 z4.h, z4.h, z4.h
; CHECK-NEXT:    uunpklo z6.s, z3.h
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udivr z6.s, p0/m, z6.s, z7.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    udivr z3.s, p0/m, z3.s, z5.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z4.h, p0, z4.h, z2.h
; CHECK-NEXT:    uzp1 z5.h, z6.h, z6.h
; CHECK-NEXT:    uzp1 z2.b, z4.b, z4.b
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z5.h, p0, z5.h, z3.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z3.b, z5.b, z5.b
; CHECK-NEXT:    splice z3.b, p0, z3.b, z2.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    mls z0.b, p0/m, z3.b, z1.b
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v16i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    stp x28, x27, [sp, #-80]! // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #16] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #32] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #48] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #64] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 80
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -72
; NONEON-NOSVE-NEXT:    .cfi_offset w28, -80
; NONEON-NOSVE-NEXT:    umov w11, v1.b[0]
; NONEON-NOSVE-NEXT:    umov w12, v0.b[0]
; NONEON-NOSVE-NEXT:    umov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    umov w14, v1.b[2]
; NONEON-NOSVE-NEXT:    umov w15, v0.b[2]
; NONEON-NOSVE-NEXT:    umov w17, v1.b[3]
; NONEON-NOSVE-NEXT:    umov w18, v0.b[3]
; NONEON-NOSVE-NEXT:    umov w1, v1.b[4]
; NONEON-NOSVE-NEXT:    umov w2, v0.b[4]
; NONEON-NOSVE-NEXT:    umov w4, v1.b[5]
; NONEON-NOSVE-NEXT:    umov w5, v0.b[5]
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    umov w7, v1.b[6]
; NONEON-NOSVE-NEXT:    umov w19, v0.b[6]
; NONEON-NOSVE-NEXT:    umov w21, v1.b[7]
; NONEON-NOSVE-NEXT:    umov w22, v0.b[7]
; NONEON-NOSVE-NEXT:    umov w24, v1.b[8]
; NONEON-NOSVE-NEXT:    umov w25, v0.b[8]
; NONEON-NOSVE-NEXT:    umov w27, v1.b[9]
; NONEON-NOSVE-NEXT:    umov w28, v0.b[9]
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.b[11]
; NONEON-NOSVE-NEXT:    fmov s2, w11
; NONEON-NOSVE-NEXT:    umov w11, v0.b[10]
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[10]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    udiv w0, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    umov w14, v0.b[11]
; NONEON-NOSVE-NEXT:    umov w16, v1.b[12]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w8
; NONEON-NOSVE-NEXT:    udiv w3, w2, w1
; NONEON-NOSVE-NEXT:    msub w8, w0, w17, w18
; NONEON-NOSVE-NEXT:    umov w17, v0.b[12]
; NONEON-NOSVE-NEXT:    umov w0, v1.b[13]
; NONEON-NOSVE-NEXT:    mov v2.b[3], w8
; NONEON-NOSVE-NEXT:    udiv w6, w5, w4
; NONEON-NOSVE-NEXT:    msub w8, w3, w1, w2
; NONEON-NOSVE-NEXT:    umov w1, v0.b[13]
; NONEON-NOSVE-NEXT:    mov v2.b[4], w8
; NONEON-NOSVE-NEXT:    udiv w20, w19, w7
; NONEON-NOSVE-NEXT:    msub w8, w6, w4, w5
; NONEON-NOSVE-NEXT:    mov v2.b[5], w8
; NONEON-NOSVE-NEXT:    udiv w23, w22, w21
; NONEON-NOSVE-NEXT:    msub w8, w20, w7, w19
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #64] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v2.b[6], w8
; NONEON-NOSVE-NEXT:    udiv w26, w25, w24
; NONEON-NOSVE-NEXT:    msub w8, w23, w21, w22
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #48] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v2.b[7], w8
; NONEON-NOSVE-NEXT:    udiv w9, w28, w27
; NONEON-NOSVE-NEXT:    msub w8, w26, w24, w25
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #32] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #16] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v2.b[8], w8
; NONEON-NOSVE-NEXT:    udiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w27, w28
; NONEON-NOSVE-NEXT:    mov v2.b[9], w8
; NONEON-NOSVE-NEXT:    udiv w15, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    umov w10, v1.b[14]
; NONEON-NOSVE-NEXT:    umov w11, v0.b[14]
; NONEON-NOSVE-NEXT:    mov v2.b[10], w8
; NONEON-NOSVE-NEXT:    udiv w18, w17, w16
; NONEON-NOSVE-NEXT:    msub w8, w15, w13, w14
; NONEON-NOSVE-NEXT:    umov w13, v1.b[15]
; NONEON-NOSVE-NEXT:    umov w14, v0.b[15]
; NONEON-NOSVE-NEXT:    mov v2.b[11], w8
; NONEON-NOSVE-NEXT:    udiv w9, w1, w0
; NONEON-NOSVE-NEXT:    msub w8, w18, w16, w17
; NONEON-NOSVE-NEXT:    mov v2.b[12], w8
; NONEON-NOSVE-NEXT:    udiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w0, w1
; NONEON-NOSVE-NEXT:    mov v2.b[13], w8
; NONEON-NOSVE-NEXT:    udiv w9, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    mov v2.b[14], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w13, w14
; NONEON-NOSVE-NEXT:    mov v2.b[15], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ldp x28, x27, [sp], #80 // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ret
  %res = urem <16 x i8> %op1, %op2
  ret <16 x i8> %res
}

define void @urem_v32i8(ptr %a, ptr %b) {
; CHECK-LABEL: urem_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldr q0, [x0, #16]
; CHECK-NEXT:    ldr q1, [x1, #16]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    uunpklo z7.h, z1.b
; CHECK-NEXT:    uunpklo z16.h, z0.b
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    uunpklo z6.s, z7.h
; CHECK-NEXT:    ext z7.b, z7.b, z7.b, #8
; CHECK-NEXT:    uunpklo z17.s, z16.h
; CHECK-NEXT:    ext z16.b, z16.b, z16.b, #8
; CHECK-NEXT:    uunpklo z4.h, z2.b
; CHECK-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEXT:    uunpklo z7.s, z7.h
; CHECK-NEXT:    uunpklo z16.s, z16.h
; CHECK-NEXT:    udivr z6.s, p0/m, z6.s, z17.s
; CHECK-NEXT:    uunpklo z2.s, z4.h
; CHECK-NEXT:    uunpklo z5.s, z3.h
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z4.s, z4.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z5.s
; CHECK-NEXT:    movprfx z5, z3
; CHECK-NEXT:    udiv z5.s, p0/m, z5.s, z4.s
; CHECK-NEXT:    ldr q3, [x0]
; CHECK-NEXT:    ldr q4, [x1]
; CHECK-NEXT:    mov z18.d, z3.d
; CHECK-NEXT:    mov z17.d, z4.d
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    ext z18.b, z18.b, z3.b, #8
; CHECK-NEXT:    ext z17.b, z17.b, z4.b, #8
; CHECK-NEXT:    uunpklo z18.h, z18.b
; CHECK-NEXT:    uunpklo z17.h, z17.b
; CHECK-NEXT:    uunpklo z20.s, z18.h
; CHECK-NEXT:    ext z18.b, z18.b, z18.b, #8
; CHECK-NEXT:    uunpklo z19.s, z17.h
; CHECK-NEXT:    ext z17.b, z17.b, z17.b, #8
; CHECK-NEXT:    udivr z7.s, p0/m, z7.s, z16.s
; CHECK-NEXT:    uunpklo z18.s, z18.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    uunpklo z17.s, z17.h
; CHECK-NEXT:    udivr z19.s, p0/m, z19.s, z20.s
; CHECK-NEXT:    uunpklo z20.h, z3.b
; CHECK-NEXT:    uzp1 z7.h, z7.h, z7.h
; CHECK-NEXT:    uunpklo z22.s, z20.h
; CHECK-NEXT:    ext z20.b, z20.b, z20.b, #8
; CHECK-NEXT:    uunpklo z20.s, z20.h
; CHECK-NEXT:    udivr z17.s, p0/m, z17.s, z18.s
; CHECK-NEXT:    uunpklo z18.h, z4.b
; CHECK-NEXT:    uzp1 z16.h, z19.h, z19.h
; CHECK-NEXT:    uunpklo z21.s, z18.h
; CHECK-NEXT:    ext z18.b, z18.b, z18.b, #8
; CHECK-NEXT:    uunpklo z18.s, z18.h
; CHECK-NEXT:    udivr z21.s, p0/m, z21.s, z22.s
; CHECK-NEXT:    uzp1 z17.h, z17.h, z17.h
; CHECK-NEXT:    udivr z18.s, p0/m, z18.s, z20.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z16.h, p0, z16.h, z17.h
; CHECK-NEXT:    splice z2.h, p0, z2.h, z5.h
; CHECK-NEXT:    splice z6.h, p0, z6.h, z7.h
; CHECK-NEXT:    uzp1 z19.h, z21.h, z21.h
; CHECK-NEXT:    uzp1 z5.b, z16.b, z16.b
; CHECK-NEXT:    uzp1 z2.b, z2.b, z2.b
; CHECK-NEXT:    uzp1 z6.b, z6.b, z6.b
; CHECK-NEXT:    uzp1 z18.h, z18.h, z18.h
; CHECK-NEXT:    splice z19.h, p0, z19.h, z18.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    splice z6.b, p0, z6.b, z2.b
; CHECK-NEXT:    uzp1 z7.b, z19.b, z19.b
; CHECK-NEXT:    splice z7.b, p0, z7.b, z5.b
; CHECK-NEXT:    ptrue p0.b, vl16
; CHECK-NEXT:    mls z0.b, p0/m, z6.b, z1.b
; CHECK-NEXT:    movprfx z2, z3
; CHECK-NEXT:    mls z2.b, p0/m, z7.b, z4.b
; CHECK-NEXT:    stp q2, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v32i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #320
; NONEON-NOSVE-NEXT:    stp x29, x30, [sp, #224] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x28, x27, [sp, #240] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #256] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #272] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #288] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #304] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 320
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -72
; NONEON-NOSVE-NEXT:    .cfi_offset w28, -80
; NONEON-NOSVE-NEXT:    .cfi_offset w30, -88
; NONEON-NOSVE-NEXT:    .cfi_offset w29, -96
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    str x0, [sp, #216] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    umov w4, v3.b[1]
; NONEON-NOSVE-NEXT:    umov w1, v2.b[1]
; NONEON-NOSVE-NEXT:    umov w7, v3.b[7]
; NONEON-NOSVE-NEXT:    umov w5, v2.b[7]
; NONEON-NOSVE-NEXT:    umov w6, v3.b[8]
; NONEON-NOSVE-NEXT:    umov w3, v2.b[8]
; NONEON-NOSVE-NEXT:    umov w22, v3.b[9]
; NONEON-NOSVE-NEXT:    umov w20, v2.b[9]
; NONEON-NOSVE-NEXT:    umov w13, v3.b[0]
; NONEON-NOSVE-NEXT:    umov w17, v3.b[3]
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    str w8, [sp, #100] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w8, v1.b[0]
; NONEON-NOSVE-NEXT:    str w9, [sp, #108] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w9, v0.b[0]
; NONEON-NOSVE-NEXT:    umov w14, v2.b[3]
; NONEON-NOSVE-NEXT:    umov w15, v3.b[4]
; NONEON-NOSVE-NEXT:    umov w12, v2.b[4]
; NONEON-NOSVE-NEXT:    umov w2, v3.b[5]
; NONEON-NOSVE-NEXT:    umov w18, v2.b[5]
; NONEON-NOSVE-NEXT:    umov w0, v3.b[6]
; NONEON-NOSVE-NEXT:    umov w16, v2.b[6]
; NONEON-NOSVE-NEXT:    umov w21, v3.b[10]
; NONEON-NOSVE-NEXT:    umov w19, v2.b[10]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #36] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    ldr w30, [sp, #36] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    str w10, [sp, #116] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[2]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[2]
; NONEON-NOSVE-NEXT:    stp w10, w8, [sp, #44] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[3]
; NONEON-NOSVE-NEXT:    stp w9, w10, [sp, #52] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w9, v0.b[3]
; NONEON-NOSVE-NEXT:    udiv w26, w14, w17
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #72] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w11, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[4]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[4]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #60] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[5]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[5]
; NONEON-NOSVE-NEXT:    str w8, [sp, #96] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #104] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #68] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[6]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[6]
; NONEON-NOSVE-NEXT:    stp w11, w8, [sp, #80] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #112] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[7]
; NONEON-NOSVE-NEXT:    stp w9, w10, [sp, #88] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w9, v0.b[7]
; NONEON-NOSVE-NEXT:    udiv w25, w12, w15
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #132] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[8]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[8]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #120] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #140] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[9]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[9]
; NONEON-NOSVE-NEXT:    str w8, [sp, #148] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #156] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w11, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[10]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[10]
; NONEON-NOSVE-NEXT:    str w10, [sp, #128] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #204] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[11]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[11]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #192] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #212] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[12]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[12]
; NONEON-NOSVE-NEXT:    str w8, [sp, #172] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #180] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #200] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[13]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[13]
; NONEON-NOSVE-NEXT:    stp w11, w8, [sp, #164] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w11, v3.b[2]
; NONEON-NOSVE-NEXT:    str w9, [sp, #176] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #188] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.b[14]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[14]
; NONEON-NOSVE-NEXT:    str w8, [sp, #144] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w9, [sp, #152] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    str w10, [sp, #184] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v2.b[2]
; NONEON-NOSVE-NEXT:    udiv w8, w1, w4
; NONEON-NOSVE-NEXT:    str w10, [sp, #160] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w10, v2.b[0]
; NONEON-NOSVE-NEXT:    str w8, [sp, #24] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w8, w5, w7
; NONEON-NOSVE-NEXT:    str w8, [sp, #28] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w8, w3, w6
; NONEON-NOSVE-NEXT:    str w8, [sp, #20] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w8, w20, w22
; NONEON-NOSVE-NEXT:    udiv w24, w10, w13
; NONEON-NOSVE-NEXT:    str w8, [sp, #32] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    ldp w29, w8, [sp, #40] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w8, w30, w29
; NONEON-NOSVE-NEXT:    ldp x29, x30, [sp, #224] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    fmov s4, w8
; NONEON-NOSVE-NEXT:    udiv w23, w9, w11
; NONEON-NOSVE-NEXT:    msub w10, w24, w13, w10
; NONEON-NOSVE-NEXT:    ldr w13, [sp, #24] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w24, [sp, #100] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w13, w13, w4, w1
; NONEON-NOSVE-NEXT:    ldr w1, [sp, #116] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w4, [sp, #108] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    fmov s5, w10
; NONEON-NOSVE-NEXT:    msub w1, w1, w24, w4
; NONEON-NOSVE-NEXT:    mov v5.b[1], w13
; NONEON-NOSVE-NEXT:    mov v4.b[1], w1
; NONEON-NOSVE-NEXT:    ldr w1, [sp, #120] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w23, w11, w9
; NONEON-NOSVE-NEXT:    ldr w11, [sp, #48] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w28, w18, w2
; NONEON-NOSVE-NEXT:    ldp w10, w9, [sp, #52] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #272] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w26, w17, w14
; NONEON-NOSVE-NEXT:    ldr w14, [sp, #72] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w11, w10
; NONEON-NOSVE-NEXT:    ldr w17, [sp, #96] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    umov w10, v3.b[11]
; NONEON-NOSVE-NEXT:    umov w11, v2.b[11]
; NONEON-NOSVE-NEXT:    mov v4.b[2], w9
; NONEON-NOSVE-NEXT:    mov v5.b[3], w8
; NONEON-NOSVE-NEXT:    msub w8, w25, w15, w12
; NONEON-NOSVE-NEXT:    ldp w13, w9, [sp, #76] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w27, w16, w0
; NONEON-NOSVE-NEXT:    ldr w15, [sp, #104] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #256] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w14, w13
; NONEON-NOSVE-NEXT:    ldr w14, [sp, #60] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[4], w8
; NONEON-NOSVE-NEXT:    msub w8, w28, w2, w18
; NONEON-NOSVE-NEXT:    ldr w2, [sp, #156] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[3], w9
; NONEON-NOSVE-NEXT:    ldp w12, w9, [sp, #64] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[5], w8
; NONEON-NOSVE-NEXT:    msub w8, w27, w0, w16
; NONEON-NOSVE-NEXT:    ldr w0, [sp, #132] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w4, w19, w21
; NONEON-NOSVE-NEXT:    msub w9, w9, w14, w12
; NONEON-NOSVE-NEXT:    umov w12, v3.b[12]
; NONEON-NOSVE-NEXT:    umov w14, v2.b[12]
; NONEON-NOSVE-NEXT:    ldp x28, x27, [sp, #240] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[6], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #28] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[4], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #112] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w8, w7, w5
; NONEON-NOSVE-NEXT:    ldr w5, [sp, #204] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w17, w15
; NONEON-NOSVE-NEXT:    ldr w17, [sp, #84] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[7], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #20] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w13, w11, w10
; NONEON-NOSVE-NEXT:    mov v4.b[5], w9
; NONEON-NOSVE-NEXT:    ldp w16, w9, [sp, #88] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w8, w8, w6, w3
; NONEON-NOSVE-NEXT:    ldr w3, [sp, #148] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w17, w16
; NONEON-NOSVE-NEXT:    umov w16, v3.b[13]
; NONEON-NOSVE-NEXT:    umov w17, v2.b[13]
; NONEON-NOSVE-NEXT:    mov v5.b[8], w8
; NONEON-NOSVE-NEXT:    ldr w8, [sp, #32] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[6], w9
; NONEON-NOSVE-NEXT:    msub w8, w8, w22, w20
; NONEON-NOSVE-NEXT:    udiv w15, w14, w12
; NONEON-NOSVE-NEXT:    ldp w18, w9, [sp, #136] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[9], w8
; NONEON-NOSVE-NEXT:    msub w8, w4, w21, w19
; NONEON-NOSVE-NEXT:    msub w9, w9, w0, w18
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #304] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #288] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[7], w9
; NONEON-NOSVE-NEXT:    mov v5.b[10], w8
; NONEON-NOSVE-NEXT:    msub w8, w13, w10, w11
; NONEON-NOSVE-NEXT:    ldp w0, w9, [sp, #124] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp w11, w10, [sp, #196] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w13, [sp, #192] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w18, w17, w16
; NONEON-NOSVE-NEXT:    msub w9, w9, w1, w0
; NONEON-NOSVE-NEXT:    mov v5.b[11], w8
; NONEON-NOSVE-NEXT:    umov w0, v3.b[14]
; NONEON-NOSVE-NEXT:    msub w10, w10, w13, w11
; NONEON-NOSVE-NEXT:    umov w1, v2.b[14]
; NONEON-NOSVE-NEXT:    msub w8, w15, w12, w14
; NONEON-NOSVE-NEXT:    mov v4.b[8], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #164] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp w15, w13, [sp, #168] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w3, w2
; NONEON-NOSVE-NEXT:    mov v5.b[12], w8
; NONEON-NOSVE-NEXT:    ldp w4, w3, [sp, #208] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp w14, w12, [sp, #176] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[9], w9
; NONEON-NOSVE-NEXT:    udiv w2, w1, w0
; NONEON-NOSVE-NEXT:    umov w9, v3.b[15]
; NONEON-NOSVE-NEXT:    msub w3, w3, w5, w4
; NONEON-NOSVE-NEXT:    umov w4, v2.b[15]
; NONEON-NOSVE-NEXT:    msub w8, w18, w16, w17
; NONEON-NOSVE-NEXT:    ldr w16, [sp, #144] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.b[10], w3
; NONEON-NOSVE-NEXT:    mov v5.b[13], w8
; NONEON-NOSVE-NEXT:    mov v4.b[11], w10
; NONEON-NOSVE-NEXT:    ldr w10, [sp, #188] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w11, w4, w9
; NONEON-NOSVE-NEXT:    msub w8, w2, w0, w1
; NONEON-NOSVE-NEXT:    msub w10, w10, w13, w12
; NONEON-NOSVE-NEXT:    umov w12, v1.b[15]
; NONEON-NOSVE-NEXT:    umov w13, v0.b[15]
; NONEON-NOSVE-NEXT:    mov v5.b[14], w8
; NONEON-NOSVE-NEXT:    mov v4.b[12], w10
; NONEON-NOSVE-NEXT:    ldr w10, [sp, #184] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w10, w10, w15, w14
; NONEON-NOSVE-NEXT:    ldr w15, [sp, #152] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w14, w13, w12
; NONEON-NOSVE-NEXT:    msub w8, w11, w9, w4
; NONEON-NOSVE-NEXT:    mov v4.b[13], w10
; NONEON-NOSVE-NEXT:    ldr w10, [sp, #160] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.b[15], w8
; NONEON-NOSVE-NEXT:    ldr x8, [sp, #216] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w10, w10, w16, w15
; NONEON-NOSVE-NEXT:    mov v4.b[14], w10
; NONEON-NOSVE-NEXT:    msub w9, w14, w12, w13
; NONEON-NOSVE-NEXT:    mov v4.b[15], w9
; NONEON-NOSVE-NEXT:    stp q5, q4, [x8]
; NONEON-NOSVE-NEXT:    add sp, sp, #320
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <32 x i8>, ptr %a
  %op2 = load <32 x i8>, ptr %b
  %res = urem <32 x i8> %op1, %op2
  store <32 x i8> %res, ptr %a
  ret void
}

define <4 x i16> @urem_v4i16(<4 x i16> %op1, <4 x i16> %op2) {
; CHECK-LABEL: urem_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    uunpklo z3.s, z0.h
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    mls z0.h, p0/m, z2.h, z1.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v4i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    umov w11, v1.h[0]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w14, v1.h[2]
; NONEON-NOSVE-NEXT:    umov w15, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w17, v1.h[3]
; NONEON-NOSVE-NEXT:    umov w18, v0.h[3]
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s0, w11
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    udiv w9, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v0.h[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = urem <4 x i16> %op1, %op2
  ret <4 x i16> %res
}

define <8 x i16> @urem_v8i16(<8 x i16> %op1, <8 x i16> %op2) {
; CHECK-LABEL: urem_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    uunpklo z4.s, z0.h
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    udivr z3.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z2.h
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    mls z0.h, p0/m, z3.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v8i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    umov w11, v1.h[0]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w14, v1.h[2]
; NONEON-NOSVE-NEXT:    umov w15, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w17, v1.h[3]
; NONEON-NOSVE-NEXT:    umov w18, v0.h[3]
; NONEON-NOSVE-NEXT:    umov w1, v1.h[4]
; NONEON-NOSVE-NEXT:    umov w2, v0.h[4]
; NONEON-NOSVE-NEXT:    umov w4, v1.h[5]
; NONEON-NOSVE-NEXT:    umov w5, v0.h[5]
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.h[7]
; NONEON-NOSVE-NEXT:    fmov s2, w11
; NONEON-NOSVE-NEXT:    umov w11, v0.h[6]
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.h[6]
; NONEON-NOSVE-NEXT:    mov v2.h[1], w8
; NONEON-NOSVE-NEXT:    udiv w0, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    umov w14, v0.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[2], w8
; NONEON-NOSVE-NEXT:    udiv w3, w2, w1
; NONEON-NOSVE-NEXT:    msub w8, w0, w17, w18
; NONEON-NOSVE-NEXT:    mov v2.h[3], w8
; NONEON-NOSVE-NEXT:    udiv w9, w5, w4
; NONEON-NOSVE-NEXT:    msub w8, w3, w1, w2
; NONEON-NOSVE-NEXT:    mov v2.h[4], w8
; NONEON-NOSVE-NEXT:    udiv w12, w11, w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w4, w5
; NONEON-NOSVE-NEXT:    mov v2.h[5], w8
; NONEON-NOSVE-NEXT:    udiv w9, w14, w13
; NONEON-NOSVE-NEXT:    msub w8, w12, w10, w11
; NONEON-NOSVE-NEXT:    mov v2.h[6], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w13, w14
; NONEON-NOSVE-NEXT:    mov v2.h[7], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = urem <8 x i16> %op1, %op2
  ret <8 x i16> %res
}

define void @urem_v16i16(ptr %a, ptr %b) {
; CHECK-LABEL: urem_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q4, q1, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldr q0, [x0, #16]
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    mov z5.d, z4.d
; CHECK-NEXT:    uunpklo z16.s, z0.h
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    ext z5.b, z5.b, z4.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    uunpklo z5.s, z5.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ldr q3, [x0]
; CHECK-NEXT:    mov z6.d, z3.d
; CHECK-NEXT:    uunpklo z7.s, z3.h
; CHECK-NEXT:    ext z6.b, z6.b, z3.b, #8
; CHECK-NEXT:    uunpklo z6.s, z6.h
; CHECK-NEXT:    udivr z5.s, p0/m, z5.s, z6.s
; CHECK-NEXT:    uunpklo z6.s, z4.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    udivr z6.s, p0/m, z6.s, z7.s
; CHECK-NEXT:    uunpklo z7.s, z1.h
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    udivr z7.s, p0/m, z7.s, z16.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    splice z6.h, p0, z6.h, z5.h
; CHECK-NEXT:    uzp1 z7.h, z7.h, z7.h
; CHECK-NEXT:    splice z7.h, p0, z7.h, z2.h
; CHECK-NEXT:    ptrue p0.h, vl8
; CHECK-NEXT:    movprfx z2, z3
; CHECK-NEXT:    mls z2.h, p0/m, z6.h, z4.h
; CHECK-NEXT:    mls z0.h, p0/m, z7.h, z1.h
; CHECK-NEXT:    stp q2, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v16i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    sub sp, sp, #144
; NONEON-NOSVE-NEXT:    stp x29, x30, [sp, #48] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x28, x27, [sp, #64] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #80] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #96] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #112] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #128] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 144
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -72
; NONEON-NOSVE-NEXT:    .cfi_offset w28, -80
; NONEON-NOSVE-NEXT:    .cfi_offset w30, -88
; NONEON-NOSVE-NEXT:    .cfi_offset w29, -96
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w20, v1.h[0]
; NONEON-NOSVE-NEXT:    umov w21, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w19, v0.h[3]
; NONEON-NOSVE-NEXT:    umov w5, v1.h[4]
; NONEON-NOSVE-NEXT:    umov w2, v0.h[4]
; NONEON-NOSVE-NEXT:    umov w1, v3.h[1]
; NONEON-NOSVE-NEXT:    umov w23, v2.h[1]
; NONEON-NOSVE-NEXT:    umov w25, v3.h[0]
; NONEON-NOSVE-NEXT:    umov w26, v2.h[0]
; NONEON-NOSVE-NEXT:    umov w6, v1.h[5]
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #36] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w8, v1.h[2]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w3, v0.h[5]
; NONEON-NOSVE-NEXT:    umov w4, v1.h[6]
; NONEON-NOSVE-NEXT:    umov w7, v0.h[6]
; NONEON-NOSVE-NEXT:    umov w28, v3.h[2]
; NONEON-NOSVE-NEXT:    umov w29, v2.h[2]
; NONEON-NOSVE-NEXT:    umov w15, v3.h[3]
; NONEON-NOSVE-NEXT:    umov w13, v2.h[3]
; NONEON-NOSVE-NEXT:    umov w12, v3.h[4]
; NONEON-NOSVE-NEXT:    umov w14, v3.h[5]
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #24] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w11, w21, w20
; NONEON-NOSVE-NEXT:    str w10, [sp, #44] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    umov w8, v1.h[3]
; NONEON-NOSVE-NEXT:    stp w8, w11, [sp] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w11, v2.h[4]
; NONEON-NOSVE-NEXT:    ldr w22, [sp, #4] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w20, w22, w20, w21
; NONEON-NOSVE-NEXT:    udiv w9, w19, w8
; NONEON-NOSVE-NEXT:    str w10, [sp, #32] // 4-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w10, v3.h[6]
; NONEON-NOSVE-NEXT:    fmov s5, w20
; NONEON-NOSVE-NEXT:    umov w20, v3.h[7]
; NONEON-NOSVE-NEXT:    udiv w8, w2, w5
; NONEON-NOSVE-NEXT:    udiv w24, w23, w1
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #16] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    udiv w27, w26, w25
; NONEON-NOSVE-NEXT:    msub w1, w24, w1, w23
; NONEON-NOSVE-NEXT:    ldp w24, w23, [sp, #40] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w9, w3, w6
; NONEON-NOSVE-NEXT:    msub w21, w27, w25, w26
; NONEON-NOSVE-NEXT:    ldr w25, [sp, #36] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w23, w23, w25, w24
; NONEON-NOSVE-NEXT:    ldr w25, [sp, #24] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    fmov s4, w21
; NONEON-NOSVE-NEXT:    mov v5.h[1], w23
; NONEON-NOSVE-NEXT:    ldp w23, w21, [sp, #28] // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.h[1], w1
; NONEON-NOSVE-NEXT:    udiv w8, w7, w4
; NONEON-NOSVE-NEXT:    msub w21, w21, w25, w23
; NONEON-NOSVE-NEXT:    umov w23, v2.h[7]
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #80] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.h[2], w21
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #112] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w30, w29, w28
; NONEON-NOSVE-NEXT:    stp w8, w9, [sp, #8] // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    umov w9, v2.h[5]
; NONEON-NOSVE-NEXT:    umov w8, v2.h[6]
; NONEON-NOSVE-NEXT:    udiv w18, w13, w15
; NONEON-NOSVE-NEXT:    msub w1, w30, w28, w29
; NONEON-NOSVE-NEXT:    ldp x28, x27, [sp, #64] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x29, x30, [sp, #48] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.h[2], w1
; NONEON-NOSVE-NEXT:    udiv w16, w11, w12
; NONEON-NOSVE-NEXT:    msub w13, w18, w15, w13
; NONEON-NOSVE-NEXT:    ldr w15, [sp, #20] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldr w18, [sp] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w15, w15, w18, w19
; NONEON-NOSVE-NEXT:    mov v4.h[3], w13
; NONEON-NOSVE-NEXT:    umov w13, v1.h[7]
; NONEON-NOSVE-NEXT:    mov v5.h[3], w15
; NONEON-NOSVE-NEXT:    umov w15, v0.h[7]
; NONEON-NOSVE-NEXT:    udiv w17, w9, w14
; NONEON-NOSVE-NEXT:    msub w11, w16, w12, w11
; NONEON-NOSVE-NEXT:    ldr w12, [sp, #16] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w12, w12, w5, w2
; NONEON-NOSVE-NEXT:    mov v4.h[4], w11
; NONEON-NOSVE-NEXT:    ldr w11, [sp, #12] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v5.h[4], w12
; NONEON-NOSVE-NEXT:    msub w11, w11, w6, w3
; NONEON-NOSVE-NEXT:    udiv w24, w8, w10
; NONEON-NOSVE-NEXT:    msub w9, w17, w14, w9
; NONEON-NOSVE-NEXT:    mov v5.h[5], w11
; NONEON-NOSVE-NEXT:    mov v4.h[5], w9
; NONEON-NOSVE-NEXT:    ldr w9, [sp, #8] // 4-byte Folded Reload
; NONEON-NOSVE-NEXT:    msub w9, w9, w4, w7
; NONEON-NOSVE-NEXT:    udiv w18, w23, w20
; NONEON-NOSVE-NEXT:    msub w8, w24, w10, w8
; NONEON-NOSVE-NEXT:    mov v5.h[6], w9
; NONEON-NOSVE-NEXT:    mov v4.h[6], w8
; NONEON-NOSVE-NEXT:    udiv w12, w15, w13
; NONEON-NOSVE-NEXT:    msub w8, w18, w20, w23
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #128] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #96] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v4.h[7], w8
; NONEON-NOSVE-NEXT:    msub w9, w12, w13, w15
; NONEON-NOSVE-NEXT:    mov v5.h[7], w9
; NONEON-NOSVE-NEXT:    stp q4, q5, [x0]
; NONEON-NOSVE-NEXT:    add sp, sp, #144
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x i16>, ptr %a
  %op2 = load <16 x i16>, ptr %b
  %res = urem <16 x i16> %op1, %op2
  store <16 x i16> %res, ptr %a
  ret void
}

define <2 x i32> @urem_v2i32(<2 x i32> %op1, <2 x i32> %op2) {
; CHECK-LABEL: urem_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    udiv z2.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    mls z0.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v2i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    mov w11, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w12, v0.s[1]
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    msub w9, w13, w11, w12
; NONEON-NOSVE-NEXT:    mov v0.s[1], w9
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = urem <2 x i32> %op1, %op2
  ret <2 x i32> %res
}

define <4 x i32> @urem_v4i32(<4 x i32> %op1, <4 x i32> %op2) {
; CHECK-LABEL: urem_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    udiv z2.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    mls z0.s, p0/m, z2.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v4i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmov w11, s1
; NONEON-NOSVE-NEXT:    fmov w12, s0
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    mov w14, v1.s[2]
; NONEON-NOSVE-NEXT:    mov w15, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w17, v1.s[3]
; NONEON-NOSVE-NEXT:    mov w18, v0.s[3]
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s0, w11
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v0.s[1], w8
; NONEON-NOSVE-NEXT:    udiv w9, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v0.s[2], w8
; NONEON-NOSVE-NEXT:    msub w8, w9, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.s[3], w8
; NONEON-NOSVE-NEXT:    ret
  %res = urem <4 x i32> %op1, %op2
  ret <4 x i32> %res
}

define void @urem_v8i32(ptr %a, ptr %b) {
; CHECK-LABEL: urem_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    movprfx z4, z1
; CHECK-NEXT:    udiv z4.s, p0/m, z4.s, z0.s
; CHECK-NEXT:    movprfx z5, z2
; CHECK-NEXT:    udiv z5.s, p0/m, z5.s, z3.s
; CHECK-NEXT:    msb z0.s, p0/m, z4.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    mls z1.s, p0/m, z5.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str x23, [sp, #-48]! // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #16] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #32] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 48
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -48
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    fmov w12, s0
; NONEON-NOSVE-NEXT:    fmov w3, s2
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    fmov w11, s1
; NONEON-NOSVE-NEXT:    fmov w2, s3
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w17, v3.s[1]
; NONEON-NOSVE-NEXT:    mov w18, v2.s[1]
; NONEON-NOSVE-NEXT:    mov w14, v1.s[2]
; NONEON-NOSVE-NEXT:    mov w15, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w5, v3.s[2]
; NONEON-NOSVE-NEXT:    mov w6, v2.s[2]
; NONEON-NOSVE-NEXT:    udiv w13, w12, w11
; NONEON-NOSVE-NEXT:    mov w19, v3.s[3]
; NONEON-NOSVE-NEXT:    mov w20, v2.s[3]
; NONEON-NOSVE-NEXT:    mov w22, v1.s[3]
; NONEON-NOSVE-NEXT:    mov w23, v0.s[3]
; NONEON-NOSVE-NEXT:    udiv w4, w3, w2
; NONEON-NOSVE-NEXT:    msub w11, w13, w11, w12
; NONEON-NOSVE-NEXT:    fmov s1, w11
; NONEON-NOSVE-NEXT:    udiv w10, w9, w8
; NONEON-NOSVE-NEXT:    msub w12, w4, w2, w3
; NONEON-NOSVE-NEXT:    fmov s0, w12
; NONEON-NOSVE-NEXT:    udiv w1, w18, w17
; NONEON-NOSVE-NEXT:    msub w8, w10, w8, w9
; NONEON-NOSVE-NEXT:    mov v1.s[1], w8
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    msub w13, w1, w17, w18
; NONEON-NOSVE-NEXT:    mov v0.s[1], w13
; NONEON-NOSVE-NEXT:    udiv w7, w6, w5
; NONEON-NOSVE-NEXT:    msub w8, w16, w14, w15
; NONEON-NOSVE-NEXT:    mov v1.s[2], w8
; NONEON-NOSVE-NEXT:    udiv w21, w20, w19
; NONEON-NOSVE-NEXT:    msub w10, w7, w5, w6
; NONEON-NOSVE-NEXT:    mov v0.s[2], w10
; NONEON-NOSVE-NEXT:    udiv w9, w23, w22
; NONEON-NOSVE-NEXT:    msub w10, w21, w19, w20
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #32] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v0.s[3], w10
; NONEON-NOSVE-NEXT:    msub w8, w9, w22, w23
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #16] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    mov v1.s[3], w8
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ldr x23, [sp], #48 // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %op2 = load <8 x i32>, ptr %b
  %res = urem <8 x i32> %op1, %op2
  store <8 x i32> %res, ptr %a
  ret void
}

define <1 x i64> @urem_v1i64(<1 x i64> %op1, <1 x i64> %op2) {
; CHECK-LABEL: urem_v1i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl1
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    udiv z2.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    mls z0.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v1i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    udiv x10, x9, x8
; NONEON-NOSVE-NEXT:    msub x8, x10, x8, x9
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    ret
  %res = urem <1 x i64> %op1, %op2
  ret <1 x i64> %res
}

define <2 x i64> @urem_v2i64(<2 x i64> %op1, <2 x i64> %op2) {
; CHECK-LABEL: urem_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    movprfx z2, z0
; CHECK-NEXT:    udiv z2.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    mls z0.d, p0/m, z2.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v2i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    mov x11, v1.d[1]
; NONEON-NOSVE-NEXT:    mov x12, v0.d[1]
; NONEON-NOSVE-NEXT:    udiv x10, x9, x8
; NONEON-NOSVE-NEXT:    udiv x13, x12, x11
; NONEON-NOSVE-NEXT:    msub x8, x10, x8, x9
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    msub x9, x13, x11, x12
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    ret
  %res = urem <2 x i64> %op1, %op2
  ret <2 x i64> %res
}

define void @urem_v4i64(ptr %a, ptr %b) {
; CHECK-LABEL: urem_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    movprfx z4, z1
; CHECK-NEXT:    udiv z4.d, p0/m, z4.d, z0.d
; CHECK-NEXT:    movprfx z5, z2
; CHECK-NEXT:    udiv z5.d, p0/m, z5.d, z3.d
; CHECK-NEXT:    msb z0.d, p0/m, z4.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    mls z1.d, p0/m, z5.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: urem_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    fmov x15, d2
; NONEON-NOSVE-NEXT:    mov x12, v2.d[1]
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x14, d3
; NONEON-NOSVE-NEXT:    mov x11, v3.d[1]
; NONEON-NOSVE-NEXT:    mov x17, v1.d[1]
; NONEON-NOSVE-NEXT:    mov x18, v0.d[1]
; NONEON-NOSVE-NEXT:    udiv x10, x9, x8
; NONEON-NOSVE-NEXT:    udiv x16, x15, x14
; NONEON-NOSVE-NEXT:    msub x8, x10, x8, x9
; NONEON-NOSVE-NEXT:    fmov d1, x8
; NONEON-NOSVE-NEXT:    udiv x13, x12, x11
; NONEON-NOSVE-NEXT:    msub x10, x16, x14, x15
; NONEON-NOSVE-NEXT:    fmov d0, x10
; NONEON-NOSVE-NEXT:    udiv x1, x18, x17
; NONEON-NOSVE-NEXT:    msub x9, x13, x11, x12
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    msub x11, x1, x17, x18
; NONEON-NOSVE-NEXT:    mov v1.d[1], x11
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x i64>, ptr %a
  %op2 = load <4 x i64>, ptr %b
  %res = urem <4 x i64> %op1, %op2
  store <4 x i64> %res, ptr %a
  ret void
}
