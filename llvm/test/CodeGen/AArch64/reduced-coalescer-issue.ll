; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc -enable-subreg-liveness=false  < %s | FileCheck %s
; RUN: llc -enable-subreg-liveness=true < %s | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "aarch64-unknown-linux-gnu"

define void @_ZN4llvm5APInt6divideEPKmjS2_jPmS3_(i32 %lhsWords, i32 %rhsWords) {
; CHECK-LABEL: _ZN4llvm5APInt6divideEPKmjS2_jPmS3_:
; CHECK:       // %bb.0:
; CHECK-NEXT:    lsl w9, w0, #1
; CHECK-NEXT:    mov w10, #1 // =0x1
; CHECK-NEXT:    mov w8, w0
; CHECK-NEXT:    mov w0, #1 // =0x1
; CHECK-NEXT:    sub w9, w9, w1, lsl #1
; CHECK-NEXT:    bfi w0, w8, #1, #31
; CHECK-NEXT:    lsr w9, w9, #1
; CHECK-NEXT:    bfi w10, w9, #2, #30
; CHECK-NEXT:    cmp w10, #0
; CHECK-NEXT:    b.hs .LBB0_2
; CHECK-NEXT:  // %bb.1: // %if.then15
; CHECK-NEXT:    lsl x8, x0, #2
; CHECK-NEXT:    ldr xzr, [x8]
; CHECK-NEXT:    ret
; CHECK-NEXT:  .LBB0_2:
; CHECK-NEXT:    b _Znam
  %mul = shl i32 %rhsWords, 1
  %mul1 = shl i32 %lhsWords, 1
  %sub = sub i32 %mul1, %mul
  %add7 = or i32 %mul1, 1
  %idxprom = zext i32 %add7 to i64
  %mul3 = shl i32 %sub, 1
  %add4 = or i32 %mul3, 1
  %1 = icmp ult i32 %add4, 0
  br i1 %1, label %if.then15, label %3

common.ret:                                       ; preds = %3, %if.then15
  ret void

if.then15:                                        ; preds = %0
  %idxprom12 = zext i32 %add7 to i64
  %arrayidx13 = getelementptr [128 x i32], ptr null, i64 0, i64 %idxprom12
  %2 = load volatile ptr, ptr %arrayidx13, align 8
  br label %common.ret

3:                                                ; preds = %0
  %call = tail call ptr @_Znam(i64 %idxprom)
  br label %common.ret
}

declare ptr @_Znam(i64)
