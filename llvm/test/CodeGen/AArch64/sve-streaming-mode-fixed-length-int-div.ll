; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mattr=+sve -force-streaming-compatible-sve  < %s | FileCheck %s --check-prefixes=CHECK,SVE
; RUN: llc -mattr=+sve2 -force-streaming-compatible-sve  < %s | FileCheck %s --check-prefixes=CHECK,SVE2
; RUN: llc -mattr=+sme -force-streaming-compatible-sve  < %s | FileCheck %s --check-prefixes=CHECK,SVE2
; RUN: llc -force-streaming-compatible-sve < %s | FileCheck %s --check-prefix=NONEON-NOSVE

target triple = "aarch64-unknown-linux-gnu"

;
; SDIV
;

define <4 x i8> @sdiv_v4i8(<4 x i8> %op1, <4 x i8> %op2) {
; CHECK-LABEL: sdiv_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sxtb z0.h, p0/m, z0.h
; CHECK-NEXT:    sxtb z1.h, p0/m, z1.h
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v4i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.4h, v0.4h, #8
; NONEON-NOSVE-NEXT:    shl v1.4h, v1.4h, #8
; NONEON-NOSVE-NEXT:    sshr v0.4h, v0.4h, #8
; NONEON-NOSVE-NEXT:    sshr v1.4h, v1.4h, #8
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.h[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s0, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w8, w12, w11
; NONEON-NOSVE-NEXT:    mov v0.h[2], w10
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <4 x i8> %op1, %op2
  ret <4 x i8> %res
}

define <8 x i8> @sdiv_v8i8(<8 x i8> %op1, <8 x i8> %op2) {
; CHECK-LABEL: sdiv_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z2.s, z1.h
; CHECK-NEXT:    sunpklo z3.s, z0.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z1.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z1.b, z1.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v8i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    smov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.b[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.b[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.b[3]
; NONEON-NOSVE-NEXT:    smov w13, v0.b[4]
; NONEON-NOSVE-NEXT:    smov w14, v0.b[5]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.b[0]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v1.b[3]
; NONEON-NOSVE-NEXT:    fmov s2, w9
; NONEON-NOSVE-NEXT:    smov w9, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    smov w12, v1.b[4]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w10
; NONEON-NOSVE-NEXT:    smov w10, v0.b[6]
; NONEON-NOSVE-NEXT:    sdiv w12, w13, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.b[5]
; NONEON-NOSVE-NEXT:    mov v2.b[3], w11
; NONEON-NOSVE-NEXT:    smov w11, v0.b[7]
; NONEON-NOSVE-NEXT:    sdiv w8, w14, w13
; NONEON-NOSVE-NEXT:    mov v2.b[4], w12
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[7]
; NONEON-NOSVE-NEXT:    mov v2.b[5], w8
; NONEON-NOSVE-NEXT:    sdiv w8, w11, w10
; NONEON-NOSVE-NEXT:    mov v2.b[6], w9
; NONEON-NOSVE-NEXT:    mov v2.b[7], w8
; NONEON-NOSVE-NEXT:    fmov d0, d2
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <8 x i8> %op1, %op2
  ret <8 x i8> %res
}

define <16 x i8> @sdiv_v16i8(<16 x i8> %op1, <16 x i8> %op2) {
; CHECK-LABEL: sdiv_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEXT:    sunpklo z0.h, z0.b
; CHECK-NEXT:    sunpklo z2.h, z2.b
; CHECK-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEXT:    sunpklo z4.s, z2.h
; CHECK-NEXT:    sunpklo z5.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdivr z4.s, p0/m, z4.s, z5.s
; CHECK-NEXT:    sunpklo z5.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    sunpklo z3.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sdivr z3.s, p0/m, z3.s, z5.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    uzp1 z1.h, z4.h, z4.h
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z2.h
; CHECK-NEXT:    uzp1 z1.b, z1.b, z1.b
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z0.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z0.b, z3.b, z3.b
; CHECK-NEXT:    splice z0.b, p0, z0.b, z1.b
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v16i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    smov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.b[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.b[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.b[3]
; NONEON-NOSVE-NEXT:    smov w13, v0.b[4]
; NONEON-NOSVE-NEXT:    smov w14, v0.b[5]
; NONEON-NOSVE-NEXT:    smov w15, v0.b[6]
; NONEON-NOSVE-NEXT:    smov w16, v0.b[7]
; NONEON-NOSVE-NEXT:    smov w17, v0.b[8]
; NONEON-NOSVE-NEXT:    smov w18, v0.b[9]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.b[0]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v1.b[3]
; NONEON-NOSVE-NEXT:    fmov s2, w9
; NONEON-NOSVE-NEXT:    smov w9, v1.b[10]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    smov w12, v1.b[4]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w10
; NONEON-NOSVE-NEXT:    smov w10, v0.b[10]
; NONEON-NOSVE-NEXT:    sdiv w12, w13, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.b[5]
; NONEON-NOSVE-NEXT:    mov v2.b[3], w11
; NONEON-NOSVE-NEXT:    smov w11, v0.b[11]
; NONEON-NOSVE-NEXT:    sdiv w13, w14, w13
; NONEON-NOSVE-NEXT:    smov w14, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v2.b[4], w12
; NONEON-NOSVE-NEXT:    smov w12, v0.b[12]
; NONEON-NOSVE-NEXT:    sdiv w14, w15, w14
; NONEON-NOSVE-NEXT:    smov w15, v1.b[7]
; NONEON-NOSVE-NEXT:    mov v2.b[5], w13
; NONEON-NOSVE-NEXT:    smov w13, v0.b[13]
; NONEON-NOSVE-NEXT:    sdiv w15, w16, w15
; NONEON-NOSVE-NEXT:    smov w16, v1.b[8]
; NONEON-NOSVE-NEXT:    mov v2.b[6], w14
; NONEON-NOSVE-NEXT:    sdiv w16, w17, w16
; NONEON-NOSVE-NEXT:    smov w17, v1.b[9]
; NONEON-NOSVE-NEXT:    mov v2.b[7], w15
; NONEON-NOSVE-NEXT:    sdiv w8, w18, w17
; NONEON-NOSVE-NEXT:    mov v2.b[8], w16
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[11]
; NONEON-NOSVE-NEXT:    mov v2.b[9], w8
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v1.b[12]
; NONEON-NOSVE-NEXT:    mov v2.b[10], w9
; NONEON-NOSVE-NEXT:    smov w9, v1.b[14]
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    smov w12, v1.b[13]
; NONEON-NOSVE-NEXT:    mov v2.b[11], w10
; NONEON-NOSVE-NEXT:    smov w10, v1.b[15]
; NONEON-NOSVE-NEXT:    sdiv w8, w13, w12
; NONEON-NOSVE-NEXT:    smov w12, v0.b[14]
; NONEON-NOSVE-NEXT:    mov v2.b[12], w11
; NONEON-NOSVE-NEXT:    smov w11, v0.b[15]
; NONEON-NOSVE-NEXT:    sdiv w9, w12, w9
; NONEON-NOSVE-NEXT:    mov v2.b[13], w8
; NONEON-NOSVE-NEXT:    sdiv w8, w11, w10
; NONEON-NOSVE-NEXT:    mov v2.b[14], w9
; NONEON-NOSVE-NEXT:    mov v2.b[15], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <16 x i8> %op1, %op2
  ret <16 x i8> %res
}

define void @sdiv_v32i8(ptr %a, ptr %b) {
; CHECK-LABEL: sdiv_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q6, q2, [x0]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q7, q3, [x1]
; CHECK-NEXT:    mov z1.d, z2.d
; CHECK-NEXT:    mov z16.d, z6.d
; CHECK-NEXT:    mov z0.d, z3.d
; CHECK-NEXT:    ext z1.b, z1.b, z2.b, #8
; CHECK-NEXT:    ext z16.b, z16.b, z6.b, #8
; CHECK-NEXT:    sunpklo z6.h, z6.b
; CHECK-NEXT:    ext z0.b, z0.b, z3.b, #8
; CHECK-NEXT:    sunpklo z3.h, z3.b
; CHECK-NEXT:    sunpklo z1.h, z1.b
; CHECK-NEXT:    sunpklo z16.h, z16.b
; CHECK-NEXT:    sunpklo z4.h, z0.b
; CHECK-NEXT:    sunpklo z5.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    sunpklo z18.s, z16.h
; CHECK-NEXT:    sunpklo z0.s, z4.h
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    ext z16.b, z16.b, z16.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z4.s, z4.h
; CHECK-NEXT:    sunpklo z16.s, z16.h
; CHECK-NEXT:    sdivr z0.s, p0/m, z0.s, z5.s
; CHECK-NEXT:    sdiv z1.s, p0/m, z1.s, z4.s
; CHECK-NEXT:    sunpklo z4.h, z2.b
; CHECK-NEXT:    sunpklo z2.s, z3.h
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    sunpklo z5.s, z4.h
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sunpklo z4.s, z4.h
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z5.s
; CHECK-NEXT:    mov z5.d, z7.d
; CHECK-NEXT:    ext z5.b, z5.b, z7.b, #8
; CHECK-NEXT:    sunpklo z7.h, z7.b
; CHECK-NEXT:    uzp1 z1.h, z1.h, z1.h
; CHECK-NEXT:    sunpklo z5.h, z5.b
; CHECK-NEXT:    sunpklo z17.s, z5.h
; CHECK-NEXT:    ext z5.b, z5.b, z5.b, #8
; CHECK-NEXT:    sdivr z3.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    sunpklo z5.s, z5.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    sdivr z17.s, p0/m, z17.s, z18.s
; CHECK-NEXT:    sunpklo z18.s, z6.h
; CHECK-NEXT:    ext z6.b, z6.b, z6.b, #8
; CHECK-NEXT:    sunpklo z6.s, z6.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    sdivr z5.s, p0/m, z5.s, z16.s
; CHECK-NEXT:    sunpklo z16.s, z7.h
; CHECK-NEXT:    ext z7.b, z7.b, z7.b, #8
; CHECK-NEXT:    sunpklo z7.s, z7.h
; CHECK-NEXT:    uzp1 z4.h, z17.h, z17.h
; CHECK-NEXT:    sdivr z16.s, p0/m, z16.s, z18.s
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    sdiv z6.s, p0/m, z6.s, z7.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z4.h, p0, z4.h, z5.h
; CHECK-NEXT:    splice z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    splice z2.h, p0, z2.h, z3.h
; CHECK-NEXT:    uzp1 z7.h, z16.h, z16.h
; CHECK-NEXT:    uzp1 z1.b, z4.b, z4.b
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    uzp1 z2.b, z2.b, z2.b
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    splice z7.h, p0, z7.h, z6.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    splice z2.b, p0, z2.b, z0.b
; CHECK-NEXT:    uzp1 z3.b, z7.b, z7.b
; CHECK-NEXT:    splice z3.b, p0, z3.b, z1.b
; CHECK-NEXT:    stp q3, q2, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v32i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str x27, [sp, #-80]! // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #16] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #32] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #48] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #64] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 80
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -80
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    smov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.b[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.b[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.b[3]
; NONEON-NOSVE-NEXT:    smov w13, v0.b[4]
; NONEON-NOSVE-NEXT:    smov w14, v0.b[5]
; NONEON-NOSVE-NEXT:    smov w15, v0.b[6]
; NONEON-NOSVE-NEXT:    smov w17, v0.b[8]
; NONEON-NOSVE-NEXT:    smov w2, v0.b[10]
; NONEON-NOSVE-NEXT:    smov w3, v0.b[11]
; NONEON-NOSVE-NEXT:    smov w4, v0.b[12]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.b[0]
; NONEON-NOSVE-NEXT:    smov w5, v0.b[13]
; NONEON-NOSVE-NEXT:    smov w6, v0.b[14]
; NONEON-NOSVE-NEXT:    smov w1, v3.b[1]
; NONEON-NOSVE-NEXT:    smov w7, v2.b[0]
; NONEON-NOSVE-NEXT:    smov w19, v2.b[2]
; NONEON-NOSVE-NEXT:    smov w20, v2.b[3]
; NONEON-NOSVE-NEXT:    smov w21, v2.b[4]
; NONEON-NOSVE-NEXT:    smov w22, v2.b[5]
; NONEON-NOSVE-NEXT:    smov w23, v2.b[6]
; NONEON-NOSVE-NEXT:    smov w24, v2.b[7]
; NONEON-NOSVE-NEXT:    smov w25, v2.b[8]
; NONEON-NOSVE-NEXT:    smov w26, v2.b[9]
; NONEON-NOSVE-NEXT:    smov w27, v2.b[10]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.b[2]
; NONEON-NOSVE-NEXT:    sdiv w11, w11, w10
; NONEON-NOSVE-NEXT:    smov w10, v1.b[3]
; NONEON-NOSVE-NEXT:    fmov s5, w9
; NONEON-NOSVE-NEXT:    smov w9, v3.b[11]
; NONEON-NOSVE-NEXT:    mov v5.b[1], w8
; NONEON-NOSVE-NEXT:    sdiv w10, w12, w10
; NONEON-NOSVE-NEXT:    smov w12, v1.b[4]
; NONEON-NOSVE-NEXT:    mov v5.b[2], w11
; NONEON-NOSVE-NEXT:    smov w11, v2.b[11]
; NONEON-NOSVE-NEXT:    sdiv w13, w13, w12
; NONEON-NOSVE-NEXT:    smov w12, v1.b[5]
; NONEON-NOSVE-NEXT:    mov v5.b[3], w10
; NONEON-NOSVE-NEXT:    smov w10, v3.b[12]
; NONEON-NOSVE-NEXT:    sdiv w12, w14, w12
; NONEON-NOSVE-NEXT:    smov w14, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v5.b[4], w13
; NONEON-NOSVE-NEXT:    smov w13, v2.b[14]
; NONEON-NOSVE-NEXT:    sdiv w16, w15, w14
; NONEON-NOSVE-NEXT:    smov w14, v1.b[7]
; NONEON-NOSVE-NEXT:    smov w15, v0.b[7]
; NONEON-NOSVE-NEXT:    mov v5.b[5], w12
; NONEON-NOSVE-NEXT:    smov w12, v2.b[13]
; NONEON-NOSVE-NEXT:    sdiv w14, w15, w14
; NONEON-NOSVE-NEXT:    smov w15, v1.b[8]
; NONEON-NOSVE-NEXT:    mov v5.b[6], w16
; NONEON-NOSVE-NEXT:    sdiv w18, w17, w15
; NONEON-NOSVE-NEXT:    smov w15, v1.b[9]
; NONEON-NOSVE-NEXT:    smov w17, v0.b[9]
; NONEON-NOSVE-NEXT:    mov v5.b[7], w14
; NONEON-NOSVE-NEXT:    sdiv w17, w17, w15
; NONEON-NOSVE-NEXT:    smov w15, v1.b[10]
; NONEON-NOSVE-NEXT:    mov v5.b[8], w18
; NONEON-NOSVE-NEXT:    sdiv w15, w2, w15
; NONEON-NOSVE-NEXT:    smov w2, v1.b[11]
; NONEON-NOSVE-NEXT:    mov v5.b[9], w17
; NONEON-NOSVE-NEXT:    sdiv w2, w3, w2
; NONEON-NOSVE-NEXT:    smov w3, v1.b[12]
; NONEON-NOSVE-NEXT:    mov v5.b[10], w15
; NONEON-NOSVE-NEXT:    sdiv w3, w4, w3
; NONEON-NOSVE-NEXT:    smov w4, v1.b[13]
; NONEON-NOSVE-NEXT:    mov v5.b[11], w2
; NONEON-NOSVE-NEXT:    sdiv w4, w5, w4
; NONEON-NOSVE-NEXT:    smov w5, v1.b[14]
; NONEON-NOSVE-NEXT:    mov v5.b[12], w3
; NONEON-NOSVE-NEXT:    sdiv w5, w6, w5
; NONEON-NOSVE-NEXT:    smov w6, v2.b[1]
; NONEON-NOSVE-NEXT:    mov v5.b[13], w4
; NONEON-NOSVE-NEXT:    sdiv w1, w6, w1
; NONEON-NOSVE-NEXT:    smov w6, v3.b[0]
; NONEON-NOSVE-NEXT:    mov v5.b[14], w5
; NONEON-NOSVE-NEXT:    sdiv w6, w7, w6
; NONEON-NOSVE-NEXT:    smov w7, v3.b[2]
; NONEON-NOSVE-NEXT:    sdiv w7, w19, w7
; NONEON-NOSVE-NEXT:    smov w19, v3.b[3]
; NONEON-NOSVE-NEXT:    fmov s4, w6
; NONEON-NOSVE-NEXT:    mov v4.b[1], w1
; NONEON-NOSVE-NEXT:    sdiv w19, w20, w19
; NONEON-NOSVE-NEXT:    smov w20, v3.b[4]
; NONEON-NOSVE-NEXT:    mov v4.b[2], w7
; NONEON-NOSVE-NEXT:    sdiv w20, w21, w20
; NONEON-NOSVE-NEXT:    smov w21, v3.b[5]
; NONEON-NOSVE-NEXT:    mov v4.b[3], w19
; NONEON-NOSVE-NEXT:    sdiv w21, w22, w21
; NONEON-NOSVE-NEXT:    smov w22, v3.b[6]
; NONEON-NOSVE-NEXT:    mov v4.b[4], w20
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #64] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w22, w23, w22
; NONEON-NOSVE-NEXT:    smov w23, v3.b[7]
; NONEON-NOSVE-NEXT:    mov v4.b[5], w21
; NONEON-NOSVE-NEXT:    sdiv w23, w24, w23
; NONEON-NOSVE-NEXT:    smov w24, v3.b[8]
; NONEON-NOSVE-NEXT:    mov v4.b[6], w22
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #48] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w24, w25, w24
; NONEON-NOSVE-NEXT:    smov w25, v3.b[9]
; NONEON-NOSVE-NEXT:    mov v4.b[7], w23
; NONEON-NOSVE-NEXT:    sdiv w25, w26, w25
; NONEON-NOSVE-NEXT:    smov w26, v3.b[10]
; NONEON-NOSVE-NEXT:    mov v4.b[8], w24
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #32] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w8, w27, w26
; NONEON-NOSVE-NEXT:    mov v4.b[9], w25
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #16] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    sdiv w9, w11, w9
; NONEON-NOSVE-NEXT:    smov w11, v2.b[12]
; NONEON-NOSVE-NEXT:    mov v4.b[10], w8
; NONEON-NOSVE-NEXT:    smov w8, v3.b[15]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v3.b[13]
; NONEON-NOSVE-NEXT:    mov v4.b[11], w9
; NONEON-NOSVE-NEXT:    smov w9, v1.b[15]
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    smov w12, v3.b[14]
; NONEON-NOSVE-NEXT:    mov v4.b[12], w10
; NONEON-NOSVE-NEXT:    smov w10, v0.b[15]
; NONEON-NOSVE-NEXT:    sdiv w12, w13, w12
; NONEON-NOSVE-NEXT:    smov w13, v2.b[15]
; NONEON-NOSVE-NEXT:    mov v4.b[13], w11
; NONEON-NOSVE-NEXT:    sdiv w8, w13, w8
; NONEON-NOSVE-NEXT:    mov v4.b[14], w12
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    mov v4.b[15], w8
; NONEON-NOSVE-NEXT:    mov v5.b[15], w9
; NONEON-NOSVE-NEXT:    stp q4, q5, [x0]
; NONEON-NOSVE-NEXT:    ldr x27, [sp], #80 // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <32 x i8>, ptr %a
  %op2 = load <32 x i8>, ptr %b
  %res = sdiv <32 x i8> %op1, %op2
  store <32 x i8> %res, ptr %a
  ret void
}

define <2 x i16> @sdiv_v2i16(<2 x i16> %op1, <2 x i16> %op2) {
; CHECK-LABEL: sdiv_v2i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    sxth z1.s, p0/m, z1.s
; CHECK-NEXT:    sxth z0.s, p0/m, z0.s
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v2i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    shl v0.2s, v0.2s, #16
; NONEON-NOSVE-NEXT:    shl v1.2s, v1.2s, #16
; NONEON-NOSVE-NEXT:    sshr v0.2s, v0.2s, #16
; NONEON-NOSVE-NEXT:    sshr v1.2s, v1.2s, #16
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    mov w10, v0.s[1]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    mov w9, v1.s[1]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    mov v0.s[1], w9
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <2 x i16> %op1, %op2
  ret <2 x i16> %res
}

define <4 x i16> @sdiv_v4i16(<4 x i16> %op1, <4 x i16> %op2) {
; CHECK-LABEL: sdiv_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v4i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.h[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s0, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w8, w12, w11
; NONEON-NOSVE-NEXT:    mov v0.h[2], w10
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <4 x i16> %op1, %op2
  ret <4 x i16> %res
}

define <8 x i16> @sdiv_v8i16(<8 x i16> %op1, <8 x i16> %op2) {
; CHECK-LABEL: sdiv_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z1.h, z2.h, z2.h
; CHECK-NEXT:    splice z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v8i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    smov w13, v0.h[4]
; NONEON-NOSVE-NEXT:    smov w14, v0.h[5]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.h[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    smov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s2, w9
; NONEON-NOSVE-NEXT:    smov w9, v1.h[6]
; NONEON-NOSVE-NEXT:    mov v2.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    smov w12, v1.h[4]
; NONEON-NOSVE-NEXT:    mov v2.h[2], w10
; NONEON-NOSVE-NEXT:    smov w10, v0.h[6]
; NONEON-NOSVE-NEXT:    sdiv w12, w13, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.h[5]
; NONEON-NOSVE-NEXT:    mov v2.h[3], w11
; NONEON-NOSVE-NEXT:    smov w11, v0.h[7]
; NONEON-NOSVE-NEXT:    sdiv w8, w14, w13
; NONEON-NOSVE-NEXT:    mov v2.h[4], w12
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    smov w10, v1.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[5], w8
; NONEON-NOSVE-NEXT:    sdiv w8, w11, w10
; NONEON-NOSVE-NEXT:    mov v2.h[6], w9
; NONEON-NOSVE-NEXT:    mov v2.h[7], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <8 x i16> %op1, %op2
  ret <8 x i16> %res
}

define void @sdiv_v16i16(ptr %a, ptr %b) {
; CHECK-LABEL: sdiv_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q4, q1, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldr q0, [x0, #16]
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    mov z5.d, z4.d
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    ext z5.b, z5.b, z4.b, #8
; CHECK-NEXT:    sunpklo z4.s, z4.h
; CHECK-NEXT:    sunpklo z1.s, z1.h
; CHECK-NEXT:    sunpklo z0.s, z0.h
; CHECK-NEXT:    sunpklo z2.s, z2.h
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sunpklo z5.s, z5.h
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    sdivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ldr q3, [x0]
; CHECK-NEXT:    mov z6.d, z3.d
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    ext z6.b, z6.b, z3.b, #8
; CHECK-NEXT:    sunpklo z3.s, z3.h
; CHECK-NEXT:    sunpklo z6.s, z6.h
; CHECK-NEXT:    sdivr z5.s, p0/m, z5.s, z6.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    sdiv z3.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z0.h, p0, z0.h, z2.h
; CHECK-NEXT:    uzp1 z1.h, z5.h, z5.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z1.h
; CHECK-NEXT:    stp q3, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v16i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    smov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    smov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    smov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    smov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    smov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    smov w13, v0.h[4]
; NONEON-NOSVE-NEXT:    smov w14, v0.h[5]
; NONEON-NOSVE-NEXT:    smov w15, v0.h[6]
; NONEON-NOSVE-NEXT:    smov w16, v2.h[1]
; NONEON-NOSVE-NEXT:    smov w17, v2.h[0]
; NONEON-NOSVE-NEXT:    smov w18, v2.h[2]
; NONEON-NOSVE-NEXT:    smov w1, v2.h[3]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    smov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    smov w2, v2.h[4]
; NONEON-NOSVE-NEXT:    smov w3, v2.h[5]
; NONEON-NOSVE-NEXT:    smov w4, v2.h[6]
; NONEON-NOSVE-NEXT:    sdiv w10, w10, w9
; NONEON-NOSVE-NEXT:    smov w9, v1.h[2]
; NONEON-NOSVE-NEXT:    sdiv w9, w11, w9
; NONEON-NOSVE-NEXT:    smov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s5, w10
; NONEON-NOSVE-NEXT:    smov w10, v3.h[7]
; NONEON-NOSVE-NEXT:    mov v5.h[1], w8
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    smov w12, v1.h[4]
; NONEON-NOSVE-NEXT:    mov v5.h[2], w9
; NONEON-NOSVE-NEXT:    smov w9, v2.h[7]
; NONEON-NOSVE-NEXT:    sdiv w12, w13, w12
; NONEON-NOSVE-NEXT:    smov w13, v1.h[5]
; NONEON-NOSVE-NEXT:    mov v5.h[3], w11
; NONEON-NOSVE-NEXT:    smov w11, v0.h[7]
; NONEON-NOSVE-NEXT:    sdiv w13, w14, w13
; NONEON-NOSVE-NEXT:    smov w14, v1.h[6]
; NONEON-NOSVE-NEXT:    mov v5.h[4], w12
; NONEON-NOSVE-NEXT:    sdiv w14, w15, w14
; NONEON-NOSVE-NEXT:    smov w15, v3.h[1]
; NONEON-NOSVE-NEXT:    mov v5.h[5], w13
; NONEON-NOSVE-NEXT:    sdiv w15, w16, w15
; NONEON-NOSVE-NEXT:    smov w16, v3.h[0]
; NONEON-NOSVE-NEXT:    mov v5.h[6], w14
; NONEON-NOSVE-NEXT:    sdiv w16, w17, w16
; NONEON-NOSVE-NEXT:    smov w17, v3.h[2]
; NONEON-NOSVE-NEXT:    sdiv w17, w18, w17
; NONEON-NOSVE-NEXT:    smov w18, v3.h[3]
; NONEON-NOSVE-NEXT:    fmov s4, w16
; NONEON-NOSVE-NEXT:    mov v4.h[1], w15
; NONEON-NOSVE-NEXT:    sdiv w18, w1, w18
; NONEON-NOSVE-NEXT:    smov w1, v3.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[2], w17
; NONEON-NOSVE-NEXT:    sdiv w1, w2, w1
; NONEON-NOSVE-NEXT:    smov w2, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v4.h[3], w18
; NONEON-NOSVE-NEXT:    sdiv w2, w3, w2
; NONEON-NOSVE-NEXT:    smov w3, v3.h[6]
; NONEON-NOSVE-NEXT:    mov v4.h[4], w1
; NONEON-NOSVE-NEXT:    sdiv w8, w4, w3
; NONEON-NOSVE-NEXT:    mov v4.h[5], w2
; NONEON-NOSVE-NEXT:    sdiv w9, w9, w10
; NONEON-NOSVE-NEXT:    smov w10, v1.h[7]
; NONEON-NOSVE-NEXT:    mov v4.h[6], w8
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    mov v4.h[7], w9
; NONEON-NOSVE-NEXT:    mov v5.h[7], w10
; NONEON-NOSVE-NEXT:    stp q4, q5, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x i16>, ptr %a
  %op2 = load <16 x i16>, ptr %b
  %res = sdiv <16 x i16> %op1, %op2
  store <16 x i16> %res, ptr %a
  ret void
}

define <2 x i32> @sdiv_v2i32(<2 x i32> %op1, <2 x i32> %op2) {
; CHECK-LABEL: sdiv_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v2i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    mov w10, v0.s[1]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    mov w9, v1.s[1]
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    mov v0.s[1], w9
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <2 x i32> %op1, %op2
  ret <2 x i32> %res
}

define <4 x i32> @sdiv_v4i32(<4 x i32> %op1, <4 x i32> %op2) {
; CHECK-LABEL: sdiv_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    sdiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v4i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    fmov w10, s0
; NONEON-NOSVE-NEXT:    mov w11, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w12, v0.s[3]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    fmov w9, s1
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    mov w10, v1.s[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    mov w11, v1.s[3]
; NONEON-NOSVE-NEXT:    fmov s0, w9
; NONEON-NOSVE-NEXT:    mov v0.s[1], w8
; NONEON-NOSVE-NEXT:    sdiv w8, w12, w11
; NONEON-NOSVE-NEXT:    mov v0.s[2], w10
; NONEON-NOSVE-NEXT:    mov v0.s[3], w8
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <4 x i32> %op1, %op2
  ret <4 x i32> %res
}

define void @sdiv_v8i32(ptr %a, ptr %b)  {
; CHECK-LABEL: sdiv_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    sdivr z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    sdiv z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    fmov w10, s0
; NONEON-NOSVE-NEXT:    mov w11, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w12, v2.s[1]
; NONEON-NOSVE-NEXT:    fmov w13, s2
; NONEON-NOSVE-NEXT:    mov w14, v2.s[2]
; NONEON-NOSVE-NEXT:    mov w15, v2.s[3]
; NONEON-NOSVE-NEXT:    mov w16, v0.s[3]
; NONEON-NOSVE-NEXT:    sdiv w8, w9, w8
; NONEON-NOSVE-NEXT:    fmov w9, s1
; NONEON-NOSVE-NEXT:    sdiv w9, w10, w9
; NONEON-NOSVE-NEXT:    mov w10, v1.s[2]
; NONEON-NOSVE-NEXT:    sdiv w10, w11, w10
; NONEON-NOSVE-NEXT:    mov w11, v3.s[1]
; NONEON-NOSVE-NEXT:    sdiv w11, w12, w11
; NONEON-NOSVE-NEXT:    fmov w12, s3
; NONEON-NOSVE-NEXT:    sdiv w12, w13, w12
; NONEON-NOSVE-NEXT:    mov w13, v3.s[2]
; NONEON-NOSVE-NEXT:    sdiv w13, w14, w13
; NONEON-NOSVE-NEXT:    mov w14, v3.s[3]
; NONEON-NOSVE-NEXT:    fmov s0, w12
; NONEON-NOSVE-NEXT:    mov v0.s[1], w11
; NONEON-NOSVE-NEXT:    sdiv w14, w15, w14
; NONEON-NOSVE-NEXT:    mov w15, v1.s[3]
; NONEON-NOSVE-NEXT:    fmov s1, w9
; NONEON-NOSVE-NEXT:    mov v0.s[2], w13
; NONEON-NOSVE-NEXT:    mov v1.s[1], w8
; NONEON-NOSVE-NEXT:    mov v1.s[2], w10
; NONEON-NOSVE-NEXT:    sdiv w8, w16, w15
; NONEON-NOSVE-NEXT:    mov v0.s[3], w14
; NONEON-NOSVE-NEXT:    mov v1.s[3], w8
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %op2 = load <8 x i32>, ptr %b
  %res = sdiv <8 x i32> %op1, %op2
  store <8 x i32> %res, ptr %a
  ret void
}

define <1 x i64> @sdiv_v1i64(<1 x i64> %op1, <1 x i64> %op2) {
; CHECK-LABEL: sdiv_v1i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    sdiv z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v1i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    sdiv x8, x9, x8
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <1 x i64> %op1, %op2
  ret <1 x i64> %res
}

define <2 x i64> @sdiv_v2i64(<2 x i64> %op1, <2 x i64> %op2) {
; CHECK-LABEL: sdiv_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    sdiv z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v2i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    mov x10, v0.d[1]
; NONEON-NOSVE-NEXT:    sdiv x8, x9, x8
; NONEON-NOSVE-NEXT:    mov x9, v1.d[1]
; NONEON-NOSVE-NEXT:    sdiv x9, x10, x9
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    ret
  %res = sdiv <2 x i64> %op1, %op2
  ret <2 x i64> %res
}

define void @sdiv_v4i64(ptr %a, ptr %b)  {
; CHECK-LABEL: sdiv_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    sdivr z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    sdiv z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: sdiv_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    mov x10, v2.d[1]
; NONEON-NOSVE-NEXT:    fmov x11, d2
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    mov x12, v0.d[1]
; NONEON-NOSVE-NEXT:    sdiv x8, x9, x8
; NONEON-NOSVE-NEXT:    mov x9, v3.d[1]
; NONEON-NOSVE-NEXT:    sdiv x9, x10, x9
; NONEON-NOSVE-NEXT:    fmov x10, d3
; NONEON-NOSVE-NEXT:    sdiv x10, x11, x10
; NONEON-NOSVE-NEXT:    mov x11, v1.d[1]
; NONEON-NOSVE-NEXT:    fmov d1, x8
; NONEON-NOSVE-NEXT:    sdiv x11, x12, x11
; NONEON-NOSVE-NEXT:    fmov d0, x10
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    mov v1.d[1], x11
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x i64>, ptr %a
  %op2 = load <4 x i64>, ptr %b
  %res = sdiv <4 x i64> %op1, %op2
  store <4 x i64> %res, ptr %a
  ret void
}

;
; UDIV
;

define <4 x i8> @udiv_v4i8(<4 x i8> %op1, <4 x i8> %op2) {
; CHECK-LABEL: udiv_v4i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    and z0.h, z0.h, #0xff
; CHECK-NEXT:    and z1.h, z1.h, #0xff
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v4i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    and w8, w8, #0xff
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    and w10, w10, #0xff
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    and w11, w11, #0xff
; NONEON-NOSVE-NEXT:    and w9, w9, #0xff
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.h[2]
; NONEON-NOSVE-NEXT:    and w10, w10, #0xff
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s0, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    and w9, w11, #0xff
; NONEON-NOSVE-NEXT:    and w11, w12, #0xff
; NONEON-NOSVE-NEXT:    udiv w8, w11, w9
; NONEON-NOSVE-NEXT:    mov v0.h[2], w10
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <4 x i8> %op1, %op2
  ret <4 x i8> %res
}

define <8 x i8> @udiv_v8i8(<8 x i8> %op1, <8 x i8> %op2) {
; CHECK-LABEL: udiv_v8i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z2.s, z1.h
; CHECK-NEXT:    uunpklo z3.s, z0.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z1.h, z2.h, z2.h
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z0.h
; CHECK-NEXT:    uzp1 z0.b, z1.b, z1.b
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v8i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    umov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.b[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.b[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.b[3]
; NONEON-NOSVE-NEXT:    umov w13, v0.b[4]
; NONEON-NOSVE-NEXT:    umov w14, v0.b[5]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.b[0]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[2]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v1.b[3]
; NONEON-NOSVE-NEXT:    fmov s2, w9
; NONEON-NOSVE-NEXT:    umov w9, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    umov w12, v1.b[4]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w10
; NONEON-NOSVE-NEXT:    umov w10, v0.b[6]
; NONEON-NOSVE-NEXT:    udiv w12, w13, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.b[5]
; NONEON-NOSVE-NEXT:    mov v2.b[3], w11
; NONEON-NOSVE-NEXT:    umov w11, v0.b[7]
; NONEON-NOSVE-NEXT:    udiv w8, w14, w13
; NONEON-NOSVE-NEXT:    mov v2.b[4], w12
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[7]
; NONEON-NOSVE-NEXT:    mov v2.b[5], w8
; NONEON-NOSVE-NEXT:    udiv w8, w11, w10
; NONEON-NOSVE-NEXT:    mov v2.b[6], w9
; NONEON-NOSVE-NEXT:    mov v2.b[7], w8
; NONEON-NOSVE-NEXT:    fmov d0, d2
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <8 x i8> %op1, %op2
  ret <8 x i8> %res
}

define <16 x i8> @udiv_v16i8(<16 x i8> %op1, <16 x i8> %op2) {
; CHECK-LABEL: udiv_v16i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEXT:    uunpklo z0.h, z0.b
; CHECK-NEXT:    uunpklo z2.h, z2.b
; CHECK-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEXT:    uunpklo z4.s, z2.h
; CHECK-NEXT:    uunpklo z5.s, z3.h
; CHECK-NEXT:    ext z2.b, z2.b, z2.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udivr z4.s, p0/m, z4.s, z5.s
; CHECK-NEXT:    uunpklo z5.s, z0.h
; CHECK-NEXT:    ext z0.b, z0.b, z0.b, #8
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    uunpklo z3.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    udivr z3.s, p0/m, z3.s, z5.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    uzp1 z1.h, z4.h, z4.h
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z1.h, p0, z1.h, z2.h
; CHECK-NEXT:    uzp1 z1.b, z1.b, z1.b
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z0.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    uzp1 z0.b, z3.b, z3.b
; CHECK-NEXT:    splice z0.b, p0, z0.b, z1.b
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v16i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    umov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.b[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.b[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.b[3]
; NONEON-NOSVE-NEXT:    umov w13, v0.b[4]
; NONEON-NOSVE-NEXT:    umov w14, v0.b[5]
; NONEON-NOSVE-NEXT:    umov w15, v0.b[6]
; NONEON-NOSVE-NEXT:    umov w16, v0.b[7]
; NONEON-NOSVE-NEXT:    umov w17, v0.b[8]
; NONEON-NOSVE-NEXT:    umov w18, v0.b[9]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.b[0]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[2]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v1.b[3]
; NONEON-NOSVE-NEXT:    fmov s2, w9
; NONEON-NOSVE-NEXT:    umov w9, v1.b[10]
; NONEON-NOSVE-NEXT:    mov v2.b[1], w8
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    umov w12, v1.b[4]
; NONEON-NOSVE-NEXT:    mov v2.b[2], w10
; NONEON-NOSVE-NEXT:    umov w10, v0.b[10]
; NONEON-NOSVE-NEXT:    udiv w12, w13, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.b[5]
; NONEON-NOSVE-NEXT:    mov v2.b[3], w11
; NONEON-NOSVE-NEXT:    umov w11, v0.b[11]
; NONEON-NOSVE-NEXT:    udiv w13, w14, w13
; NONEON-NOSVE-NEXT:    umov w14, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v2.b[4], w12
; NONEON-NOSVE-NEXT:    umov w12, v0.b[12]
; NONEON-NOSVE-NEXT:    udiv w14, w15, w14
; NONEON-NOSVE-NEXT:    umov w15, v1.b[7]
; NONEON-NOSVE-NEXT:    mov v2.b[5], w13
; NONEON-NOSVE-NEXT:    umov w13, v0.b[13]
; NONEON-NOSVE-NEXT:    udiv w15, w16, w15
; NONEON-NOSVE-NEXT:    umov w16, v1.b[8]
; NONEON-NOSVE-NEXT:    mov v2.b[6], w14
; NONEON-NOSVE-NEXT:    udiv w16, w17, w16
; NONEON-NOSVE-NEXT:    umov w17, v1.b[9]
; NONEON-NOSVE-NEXT:    mov v2.b[7], w15
; NONEON-NOSVE-NEXT:    udiv w8, w18, w17
; NONEON-NOSVE-NEXT:    mov v2.b[8], w16
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[11]
; NONEON-NOSVE-NEXT:    mov v2.b[9], w8
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v1.b[12]
; NONEON-NOSVE-NEXT:    mov v2.b[10], w9
; NONEON-NOSVE-NEXT:    umov w9, v1.b[14]
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    umov w12, v1.b[13]
; NONEON-NOSVE-NEXT:    mov v2.b[11], w10
; NONEON-NOSVE-NEXT:    umov w10, v1.b[15]
; NONEON-NOSVE-NEXT:    udiv w8, w13, w12
; NONEON-NOSVE-NEXT:    umov w12, v0.b[14]
; NONEON-NOSVE-NEXT:    mov v2.b[12], w11
; NONEON-NOSVE-NEXT:    umov w11, v0.b[15]
; NONEON-NOSVE-NEXT:    udiv w9, w12, w9
; NONEON-NOSVE-NEXT:    mov v2.b[13], w8
; NONEON-NOSVE-NEXT:    udiv w8, w11, w10
; NONEON-NOSVE-NEXT:    mov v2.b[14], w9
; NONEON-NOSVE-NEXT:    mov v2.b[15], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <16 x i8> %op1, %op2
  ret <16 x i8> %res
}

define void @udiv_v32i8(ptr %a, ptr %b) {
; CHECK-LABEL: udiv_v32i8:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q6, q2, [x0]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q7, q3, [x1]
; CHECK-NEXT:    mov z1.d, z2.d
; CHECK-NEXT:    mov z16.d, z6.d
; CHECK-NEXT:    mov z0.d, z3.d
; CHECK-NEXT:    ext z1.b, z1.b, z2.b, #8
; CHECK-NEXT:    ext z16.b, z16.b, z6.b, #8
; CHECK-NEXT:    uunpklo z6.h, z6.b
; CHECK-NEXT:    ext z0.b, z0.b, z3.b, #8
; CHECK-NEXT:    uunpklo z3.h, z3.b
; CHECK-NEXT:    uunpklo z1.h, z1.b
; CHECK-NEXT:    uunpklo z16.h, z16.b
; CHECK-NEXT:    uunpklo z4.h, z0.b
; CHECK-NEXT:    uunpklo z5.s, z1.h
; CHECK-NEXT:    ext z1.b, z1.b, z1.b, #8
; CHECK-NEXT:    uunpklo z18.s, z16.h
; CHECK-NEXT:    uunpklo z0.s, z4.h
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    ext z16.b, z16.b, z16.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z4.s, z4.h
; CHECK-NEXT:    uunpklo z16.s, z16.h
; CHECK-NEXT:    udivr z0.s, p0/m, z0.s, z5.s
; CHECK-NEXT:    udiv z1.s, p0/m, z1.s, z4.s
; CHECK-NEXT:    uunpklo z4.h, z2.b
; CHECK-NEXT:    uunpklo z2.s, z3.h
; CHECK-NEXT:    ext z3.b, z3.b, z3.b, #8
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uunpklo z5.s, z4.h
; CHECK-NEXT:    ext z4.b, z4.b, z4.b, #8
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    uunpklo z4.s, z4.h
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z5.s
; CHECK-NEXT:    mov z5.d, z7.d
; CHECK-NEXT:    ext z5.b, z5.b, z7.b, #8
; CHECK-NEXT:    uunpklo z7.h, z7.b
; CHECK-NEXT:    uzp1 z1.h, z1.h, z1.h
; CHECK-NEXT:    uunpklo z5.h, z5.b
; CHECK-NEXT:    uunpklo z17.s, z5.h
; CHECK-NEXT:    ext z5.b, z5.b, z5.b, #8
; CHECK-NEXT:    udivr z3.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    uunpklo z5.s, z5.h
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    udivr z17.s, p0/m, z17.s, z18.s
; CHECK-NEXT:    uunpklo z18.s, z6.h
; CHECK-NEXT:    ext z6.b, z6.b, z6.b, #8
; CHECK-NEXT:    uunpklo z6.s, z6.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    udivr z5.s, p0/m, z5.s, z16.s
; CHECK-NEXT:    uunpklo z16.s, z7.h
; CHECK-NEXT:    ext z7.b, z7.b, z7.b, #8
; CHECK-NEXT:    uunpklo z7.s, z7.h
; CHECK-NEXT:    uzp1 z4.h, z17.h, z17.h
; CHECK-NEXT:    udivr z16.s, p0/m, z16.s, z18.s
; CHECK-NEXT:    uzp1 z5.h, z5.h, z5.h
; CHECK-NEXT:    udiv z6.s, p0/m, z6.s, z7.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z4.h, p0, z4.h, z5.h
; CHECK-NEXT:    splice z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    splice z2.h, p0, z2.h, z3.h
; CHECK-NEXT:    uzp1 z7.h, z16.h, z16.h
; CHECK-NEXT:    uzp1 z1.b, z4.b, z4.b
; CHECK-NEXT:    uzp1 z0.b, z0.b, z0.b
; CHECK-NEXT:    uzp1 z2.b, z2.b, z2.b
; CHECK-NEXT:    uzp1 z6.h, z6.h, z6.h
; CHECK-NEXT:    splice z7.h, p0, z7.h, z6.h
; CHECK-NEXT:    ptrue p0.b, vl8
; CHECK-NEXT:    splice z2.b, p0, z2.b, z0.b
; CHECK-NEXT:    uzp1 z3.b, z7.b, z7.b
; CHECK-NEXT:    splice z3.b, p0, z3.b, z1.b
; CHECK-NEXT:    stp q3, q2, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v32i8:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    str x27, [sp, #-80]! // 8-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x26, x25, [sp, #16] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x24, x23, [sp, #32] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x22, x21, [sp, #48] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    stp x20, x19, [sp, #64] // 16-byte Folded Spill
; NONEON-NOSVE-NEXT:    .cfi_def_cfa_offset 80
; NONEON-NOSVE-NEXT:    .cfi_offset w19, -8
; NONEON-NOSVE-NEXT:    .cfi_offset w20, -16
; NONEON-NOSVE-NEXT:    .cfi_offset w21, -24
; NONEON-NOSVE-NEXT:    .cfi_offset w22, -32
; NONEON-NOSVE-NEXT:    .cfi_offset w23, -40
; NONEON-NOSVE-NEXT:    .cfi_offset w24, -48
; NONEON-NOSVE-NEXT:    .cfi_offset w25, -56
; NONEON-NOSVE-NEXT:    .cfi_offset w26, -64
; NONEON-NOSVE-NEXT:    .cfi_offset w27, -80
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    umov w8, v1.b[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.b[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.b[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.b[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.b[3]
; NONEON-NOSVE-NEXT:    umov w13, v0.b[4]
; NONEON-NOSVE-NEXT:    umov w14, v0.b[5]
; NONEON-NOSVE-NEXT:    umov w15, v0.b[6]
; NONEON-NOSVE-NEXT:    umov w17, v0.b[8]
; NONEON-NOSVE-NEXT:    umov w2, v0.b[10]
; NONEON-NOSVE-NEXT:    umov w3, v0.b[11]
; NONEON-NOSVE-NEXT:    umov w4, v0.b[12]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.b[0]
; NONEON-NOSVE-NEXT:    umov w5, v0.b[13]
; NONEON-NOSVE-NEXT:    umov w6, v0.b[14]
; NONEON-NOSVE-NEXT:    umov w1, v3.b[1]
; NONEON-NOSVE-NEXT:    umov w7, v2.b[0]
; NONEON-NOSVE-NEXT:    umov w19, v2.b[2]
; NONEON-NOSVE-NEXT:    umov w20, v2.b[3]
; NONEON-NOSVE-NEXT:    umov w21, v2.b[4]
; NONEON-NOSVE-NEXT:    umov w22, v2.b[5]
; NONEON-NOSVE-NEXT:    umov w23, v2.b[6]
; NONEON-NOSVE-NEXT:    umov w24, v2.b[7]
; NONEON-NOSVE-NEXT:    umov w25, v2.b[8]
; NONEON-NOSVE-NEXT:    umov w26, v2.b[9]
; NONEON-NOSVE-NEXT:    umov w27, v2.b[10]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.b[2]
; NONEON-NOSVE-NEXT:    udiv w11, w11, w10
; NONEON-NOSVE-NEXT:    umov w10, v1.b[3]
; NONEON-NOSVE-NEXT:    fmov s5, w9
; NONEON-NOSVE-NEXT:    umov w9, v3.b[11]
; NONEON-NOSVE-NEXT:    mov v5.b[1], w8
; NONEON-NOSVE-NEXT:    udiv w10, w12, w10
; NONEON-NOSVE-NEXT:    umov w12, v1.b[4]
; NONEON-NOSVE-NEXT:    mov v5.b[2], w11
; NONEON-NOSVE-NEXT:    umov w11, v2.b[11]
; NONEON-NOSVE-NEXT:    udiv w13, w13, w12
; NONEON-NOSVE-NEXT:    umov w12, v1.b[5]
; NONEON-NOSVE-NEXT:    mov v5.b[3], w10
; NONEON-NOSVE-NEXT:    umov w10, v3.b[12]
; NONEON-NOSVE-NEXT:    udiv w12, w14, w12
; NONEON-NOSVE-NEXT:    umov w14, v1.b[6]
; NONEON-NOSVE-NEXT:    mov v5.b[4], w13
; NONEON-NOSVE-NEXT:    umov w13, v2.b[14]
; NONEON-NOSVE-NEXT:    udiv w16, w15, w14
; NONEON-NOSVE-NEXT:    umov w14, v1.b[7]
; NONEON-NOSVE-NEXT:    umov w15, v0.b[7]
; NONEON-NOSVE-NEXT:    mov v5.b[5], w12
; NONEON-NOSVE-NEXT:    umov w12, v2.b[13]
; NONEON-NOSVE-NEXT:    udiv w14, w15, w14
; NONEON-NOSVE-NEXT:    umov w15, v1.b[8]
; NONEON-NOSVE-NEXT:    mov v5.b[6], w16
; NONEON-NOSVE-NEXT:    udiv w18, w17, w15
; NONEON-NOSVE-NEXT:    umov w15, v1.b[9]
; NONEON-NOSVE-NEXT:    umov w17, v0.b[9]
; NONEON-NOSVE-NEXT:    mov v5.b[7], w14
; NONEON-NOSVE-NEXT:    udiv w17, w17, w15
; NONEON-NOSVE-NEXT:    umov w15, v1.b[10]
; NONEON-NOSVE-NEXT:    mov v5.b[8], w18
; NONEON-NOSVE-NEXT:    udiv w15, w2, w15
; NONEON-NOSVE-NEXT:    umov w2, v1.b[11]
; NONEON-NOSVE-NEXT:    mov v5.b[9], w17
; NONEON-NOSVE-NEXT:    udiv w2, w3, w2
; NONEON-NOSVE-NEXT:    umov w3, v1.b[12]
; NONEON-NOSVE-NEXT:    mov v5.b[10], w15
; NONEON-NOSVE-NEXT:    udiv w3, w4, w3
; NONEON-NOSVE-NEXT:    umov w4, v1.b[13]
; NONEON-NOSVE-NEXT:    mov v5.b[11], w2
; NONEON-NOSVE-NEXT:    udiv w4, w5, w4
; NONEON-NOSVE-NEXT:    umov w5, v1.b[14]
; NONEON-NOSVE-NEXT:    mov v5.b[12], w3
; NONEON-NOSVE-NEXT:    udiv w5, w6, w5
; NONEON-NOSVE-NEXT:    umov w6, v2.b[1]
; NONEON-NOSVE-NEXT:    mov v5.b[13], w4
; NONEON-NOSVE-NEXT:    udiv w1, w6, w1
; NONEON-NOSVE-NEXT:    umov w6, v3.b[0]
; NONEON-NOSVE-NEXT:    mov v5.b[14], w5
; NONEON-NOSVE-NEXT:    udiv w6, w7, w6
; NONEON-NOSVE-NEXT:    umov w7, v3.b[2]
; NONEON-NOSVE-NEXT:    udiv w7, w19, w7
; NONEON-NOSVE-NEXT:    umov w19, v3.b[3]
; NONEON-NOSVE-NEXT:    fmov s4, w6
; NONEON-NOSVE-NEXT:    mov v4.b[1], w1
; NONEON-NOSVE-NEXT:    udiv w19, w20, w19
; NONEON-NOSVE-NEXT:    umov w20, v3.b[4]
; NONEON-NOSVE-NEXT:    mov v4.b[2], w7
; NONEON-NOSVE-NEXT:    udiv w20, w21, w20
; NONEON-NOSVE-NEXT:    umov w21, v3.b[5]
; NONEON-NOSVE-NEXT:    mov v4.b[3], w19
; NONEON-NOSVE-NEXT:    udiv w21, w22, w21
; NONEON-NOSVE-NEXT:    umov w22, v3.b[6]
; NONEON-NOSVE-NEXT:    mov v4.b[4], w20
; NONEON-NOSVE-NEXT:    ldp x20, x19, [sp, #64] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w22, w23, w22
; NONEON-NOSVE-NEXT:    umov w23, v3.b[7]
; NONEON-NOSVE-NEXT:    mov v4.b[5], w21
; NONEON-NOSVE-NEXT:    udiv w23, w24, w23
; NONEON-NOSVE-NEXT:    umov w24, v3.b[8]
; NONEON-NOSVE-NEXT:    mov v4.b[6], w22
; NONEON-NOSVE-NEXT:    ldp x22, x21, [sp, #48] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w24, w25, w24
; NONEON-NOSVE-NEXT:    umov w25, v3.b[9]
; NONEON-NOSVE-NEXT:    mov v4.b[7], w23
; NONEON-NOSVE-NEXT:    udiv w25, w26, w25
; NONEON-NOSVE-NEXT:    umov w26, v3.b[10]
; NONEON-NOSVE-NEXT:    mov v4.b[8], w24
; NONEON-NOSVE-NEXT:    ldp x24, x23, [sp, #32] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w8, w27, w26
; NONEON-NOSVE-NEXT:    mov v4.b[9], w25
; NONEON-NOSVE-NEXT:    ldp x26, x25, [sp, #16] // 16-byte Folded Reload
; NONEON-NOSVE-NEXT:    udiv w9, w11, w9
; NONEON-NOSVE-NEXT:    umov w11, v2.b[12]
; NONEON-NOSVE-NEXT:    mov v4.b[10], w8
; NONEON-NOSVE-NEXT:    umov w8, v3.b[15]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v3.b[13]
; NONEON-NOSVE-NEXT:    mov v4.b[11], w9
; NONEON-NOSVE-NEXT:    umov w9, v1.b[15]
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    umov w12, v3.b[14]
; NONEON-NOSVE-NEXT:    mov v4.b[12], w10
; NONEON-NOSVE-NEXT:    umov w10, v0.b[15]
; NONEON-NOSVE-NEXT:    udiv w12, w13, w12
; NONEON-NOSVE-NEXT:    umov w13, v2.b[15]
; NONEON-NOSVE-NEXT:    mov v4.b[13], w11
; NONEON-NOSVE-NEXT:    udiv w8, w13, w8
; NONEON-NOSVE-NEXT:    mov v4.b[14], w12
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    mov v4.b[15], w8
; NONEON-NOSVE-NEXT:    mov v5.b[15], w9
; NONEON-NOSVE-NEXT:    stp q4, q5, [x0]
; NONEON-NOSVE-NEXT:    ldr x27, [sp], #80 // 8-byte Folded Reload
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <32 x i8>, ptr %a
  %op2 = load <32 x i8>, ptr %b
  %res = udiv <32 x i8> %op1, %op2
  store <32 x i8> %res, ptr %a
  ret void
}

define <2 x i16> @udiv_v2i16(<2 x i16> %op1, <2 x i16> %op2) {
; CHECK-LABEL: udiv_v2i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    and z1.s, z1.s, #0xffff
; CHECK-NEXT:    and z0.s, z0.s, #0xffff
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v2i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    movi d2, #0x00ffff0000ffff
; NONEON-NOSVE-NEXT:    and v0.8b, v0.8b, v2.8b
; NONEON-NOSVE-NEXT:    and v1.8b, v1.8b, v2.8b
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    mov w10, v0.s[1]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    mov w9, v1.s[1]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    mov v0.s[1], w9
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <2 x i16> %op1, %op2
  ret <2 x i16> %res
}

define <4 x i16> @udiv_v4i16(<4 x i16> %op1, <4 x i16> %op2) {
; CHECK-LABEL: udiv_v4i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v4i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.h[2]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s0, w9
; NONEON-NOSVE-NEXT:    mov v0.h[1], w8
; NONEON-NOSVE-NEXT:    udiv w8, w12, w11
; NONEON-NOSVE-NEXT:    mov v0.h[2], w10
; NONEON-NOSVE-NEXT:    mov v0.h[3], w8
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <4 x i16> %op1, %op2
  ret <4 x i16> %res
}

define <8 x i16> @udiv_v8i16(<8 x i16> %op1, <8 x i16> %op2) {
; CHECK-LABEL: udiv_v8i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    uzp1 z1.h, z2.h, z2.h
; CHECK-NEXT:    splice z0.h, p0, z0.h, z1.h
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v8i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    umov w13, v0.h[4]
; NONEON-NOSVE-NEXT:    umov w14, v0.h[5]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.h[2]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    umov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s2, w9
; NONEON-NOSVE-NEXT:    umov w9, v1.h[6]
; NONEON-NOSVE-NEXT:    mov v2.h[1], w8
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    umov w12, v1.h[4]
; NONEON-NOSVE-NEXT:    mov v2.h[2], w10
; NONEON-NOSVE-NEXT:    umov w10, v0.h[6]
; NONEON-NOSVE-NEXT:    udiv w12, w13, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.h[5]
; NONEON-NOSVE-NEXT:    mov v2.h[3], w11
; NONEON-NOSVE-NEXT:    umov w11, v0.h[7]
; NONEON-NOSVE-NEXT:    udiv w8, w14, w13
; NONEON-NOSVE-NEXT:    mov v2.h[4], w12
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    umov w10, v1.h[7]
; NONEON-NOSVE-NEXT:    mov v2.h[5], w8
; NONEON-NOSVE-NEXT:    udiv w8, w11, w10
; NONEON-NOSVE-NEXT:    mov v2.h[6], w9
; NONEON-NOSVE-NEXT:    mov v2.h[7], w8
; NONEON-NOSVE-NEXT:    mov v0.16b, v2.16b
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <8 x i16> %op1, %op2
  ret <8 x i16> %res
}

define void @udiv_v16i16(ptr %a, ptr %b) {
; CHECK-LABEL: udiv_v16i16:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q4, q1, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldr q0, [x0, #16]
; CHECK-NEXT:    mov z2.d, z1.d
; CHECK-NEXT:    mov z3.d, z0.d
; CHECK-NEXT:    mov z5.d, z4.d
; CHECK-NEXT:    ext z2.b, z2.b, z1.b, #8
; CHECK-NEXT:    ext z3.b, z3.b, z0.b, #8
; CHECK-NEXT:    ext z5.b, z5.b, z4.b, #8
; CHECK-NEXT:    uunpklo z4.s, z4.h
; CHECK-NEXT:    uunpklo z1.s, z1.h
; CHECK-NEXT:    uunpklo z0.s, z0.h
; CHECK-NEXT:    uunpklo z2.s, z2.h
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    uunpklo z5.s, z5.h
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    udivr z2.s, p0/m, z2.s, z3.s
; CHECK-NEXT:    ldr q3, [x0]
; CHECK-NEXT:    mov z6.d, z3.d
; CHECK-NEXT:    uzp1 z0.h, z0.h, z0.h
; CHECK-NEXT:    ext z6.b, z6.b, z3.b, #8
; CHECK-NEXT:    uunpklo z3.s, z3.h
; CHECK-NEXT:    uunpklo z6.s, z6.h
; CHECK-NEXT:    udivr z5.s, p0/m, z5.s, z6.s
; CHECK-NEXT:    uzp1 z2.h, z2.h, z2.h
; CHECK-NEXT:    udiv z3.s, p0/m, z3.s, z4.s
; CHECK-NEXT:    ptrue p0.h, vl4
; CHECK-NEXT:    splice z0.h, p0, z0.h, z2.h
; CHECK-NEXT:    uzp1 z1.h, z5.h, z5.h
; CHECK-NEXT:    uzp1 z3.h, z3.h, z3.h
; CHECK-NEXT:    splice z3.h, p0, z3.h, z1.h
; CHECK-NEXT:    stp q3, q0, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v16i16:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldr q0, [x0, #16]
; NONEON-NOSVE-NEXT:    ldr q1, [x1, #16]
; NONEON-NOSVE-NEXT:    ldr q2, [x0]
; NONEON-NOSVE-NEXT:    ldr q3, [x1]
; NONEON-NOSVE-NEXT:    umov w8, v1.h[1]
; NONEON-NOSVE-NEXT:    umov w9, v0.h[1]
; NONEON-NOSVE-NEXT:    umov w10, v0.h[0]
; NONEON-NOSVE-NEXT:    umov w11, v0.h[2]
; NONEON-NOSVE-NEXT:    umov w12, v0.h[3]
; NONEON-NOSVE-NEXT:    umov w13, v0.h[4]
; NONEON-NOSVE-NEXT:    umov w14, v0.h[5]
; NONEON-NOSVE-NEXT:    umov w15, v0.h[6]
; NONEON-NOSVE-NEXT:    umov w16, v2.h[1]
; NONEON-NOSVE-NEXT:    umov w17, v2.h[0]
; NONEON-NOSVE-NEXT:    umov w18, v2.h[2]
; NONEON-NOSVE-NEXT:    umov w1, v2.h[3]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    umov w9, v1.h[0]
; NONEON-NOSVE-NEXT:    umov w2, v2.h[4]
; NONEON-NOSVE-NEXT:    umov w3, v2.h[5]
; NONEON-NOSVE-NEXT:    umov w4, v2.h[6]
; NONEON-NOSVE-NEXT:    udiv w10, w10, w9
; NONEON-NOSVE-NEXT:    umov w9, v1.h[2]
; NONEON-NOSVE-NEXT:    udiv w9, w11, w9
; NONEON-NOSVE-NEXT:    umov w11, v1.h[3]
; NONEON-NOSVE-NEXT:    fmov s5, w10
; NONEON-NOSVE-NEXT:    umov w10, v3.h[7]
; NONEON-NOSVE-NEXT:    mov v5.h[1], w8
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    umov w12, v1.h[4]
; NONEON-NOSVE-NEXT:    mov v5.h[2], w9
; NONEON-NOSVE-NEXT:    umov w9, v2.h[7]
; NONEON-NOSVE-NEXT:    udiv w12, w13, w12
; NONEON-NOSVE-NEXT:    umov w13, v1.h[5]
; NONEON-NOSVE-NEXT:    mov v5.h[3], w11
; NONEON-NOSVE-NEXT:    umov w11, v0.h[7]
; NONEON-NOSVE-NEXT:    udiv w13, w14, w13
; NONEON-NOSVE-NEXT:    umov w14, v1.h[6]
; NONEON-NOSVE-NEXT:    mov v5.h[4], w12
; NONEON-NOSVE-NEXT:    udiv w14, w15, w14
; NONEON-NOSVE-NEXT:    umov w15, v3.h[1]
; NONEON-NOSVE-NEXT:    mov v5.h[5], w13
; NONEON-NOSVE-NEXT:    udiv w15, w16, w15
; NONEON-NOSVE-NEXT:    umov w16, v3.h[0]
; NONEON-NOSVE-NEXT:    mov v5.h[6], w14
; NONEON-NOSVE-NEXT:    udiv w16, w17, w16
; NONEON-NOSVE-NEXT:    umov w17, v3.h[2]
; NONEON-NOSVE-NEXT:    udiv w17, w18, w17
; NONEON-NOSVE-NEXT:    umov w18, v3.h[3]
; NONEON-NOSVE-NEXT:    fmov s4, w16
; NONEON-NOSVE-NEXT:    mov v4.h[1], w15
; NONEON-NOSVE-NEXT:    udiv w18, w1, w18
; NONEON-NOSVE-NEXT:    umov w1, v3.h[4]
; NONEON-NOSVE-NEXT:    mov v4.h[2], w17
; NONEON-NOSVE-NEXT:    udiv w1, w2, w1
; NONEON-NOSVE-NEXT:    umov w2, v3.h[5]
; NONEON-NOSVE-NEXT:    mov v4.h[3], w18
; NONEON-NOSVE-NEXT:    udiv w2, w3, w2
; NONEON-NOSVE-NEXT:    umov w3, v3.h[6]
; NONEON-NOSVE-NEXT:    mov v4.h[4], w1
; NONEON-NOSVE-NEXT:    udiv w8, w4, w3
; NONEON-NOSVE-NEXT:    mov v4.h[5], w2
; NONEON-NOSVE-NEXT:    udiv w9, w9, w10
; NONEON-NOSVE-NEXT:    umov w10, v1.h[7]
; NONEON-NOSVE-NEXT:    mov v4.h[6], w8
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    mov v4.h[7], w9
; NONEON-NOSVE-NEXT:    mov v5.h[7], w10
; NONEON-NOSVE-NEXT:    stp q4, q5, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <16 x i16>, ptr %a
  %op2 = load <16 x i16>, ptr %b
  %res = udiv <16 x i16> %op1, %op2
  store <16 x i16> %res, ptr %a
  ret void
}

define <2 x i32> @udiv_v2i32(<2 x i32> %op1, <2 x i32> %op2) {
; CHECK-LABEL: udiv_v2i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl2
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v2i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov w8, s1
; NONEON-NOSVE-NEXT:    fmov w9, s0
; NONEON-NOSVE-NEXT:    mov w10, v0.s[1]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    mov w9, v1.s[1]
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    fmov s0, w8
; NONEON-NOSVE-NEXT:    mov v0.s[1], w9
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 killed $q0
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <2 x i32> %op1, %op2
  ret <2 x i32> %res
}

define <4 x i32> @udiv_v4i32(<4 x i32> %op1, <4 x i32> %op2) {
; CHECK-LABEL: udiv_v4i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    udiv z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v4i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    fmov w10, s0
; NONEON-NOSVE-NEXT:    mov w11, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w12, v0.s[3]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    fmov w9, s1
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    mov w10, v1.s[2]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    mov w11, v1.s[3]
; NONEON-NOSVE-NEXT:    fmov s0, w9
; NONEON-NOSVE-NEXT:    mov v0.s[1], w8
; NONEON-NOSVE-NEXT:    udiv w8, w12, w11
; NONEON-NOSVE-NEXT:    mov v0.s[2], w10
; NONEON-NOSVE-NEXT:    mov v0.s[3], w8
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <4 x i32> %op1, %op2
  ret <4 x i32> %res
}

define void @udiv_v8i32(ptr %a, ptr %b)  {
; CHECK-LABEL: udiv_v8i32:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.s, vl4
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    udivr z0.s, p0/m, z0.s, z1.s
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    udiv z1.s, p0/m, z1.s, z3.s
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    mov w9, v0.s[1]
; NONEON-NOSVE-NEXT:    fmov w10, s0
; NONEON-NOSVE-NEXT:    mov w11, v0.s[2]
; NONEON-NOSVE-NEXT:    mov w8, v1.s[1]
; NONEON-NOSVE-NEXT:    mov w12, v2.s[1]
; NONEON-NOSVE-NEXT:    fmov w13, s2
; NONEON-NOSVE-NEXT:    mov w14, v2.s[2]
; NONEON-NOSVE-NEXT:    mov w15, v2.s[3]
; NONEON-NOSVE-NEXT:    mov w16, v0.s[3]
; NONEON-NOSVE-NEXT:    udiv w8, w9, w8
; NONEON-NOSVE-NEXT:    fmov w9, s1
; NONEON-NOSVE-NEXT:    udiv w9, w10, w9
; NONEON-NOSVE-NEXT:    mov w10, v1.s[2]
; NONEON-NOSVE-NEXT:    udiv w10, w11, w10
; NONEON-NOSVE-NEXT:    mov w11, v3.s[1]
; NONEON-NOSVE-NEXT:    udiv w11, w12, w11
; NONEON-NOSVE-NEXT:    fmov w12, s3
; NONEON-NOSVE-NEXT:    udiv w12, w13, w12
; NONEON-NOSVE-NEXT:    mov w13, v3.s[2]
; NONEON-NOSVE-NEXT:    udiv w13, w14, w13
; NONEON-NOSVE-NEXT:    mov w14, v3.s[3]
; NONEON-NOSVE-NEXT:    fmov s0, w12
; NONEON-NOSVE-NEXT:    mov v0.s[1], w11
; NONEON-NOSVE-NEXT:    udiv w14, w15, w14
; NONEON-NOSVE-NEXT:    mov w15, v1.s[3]
; NONEON-NOSVE-NEXT:    fmov s1, w9
; NONEON-NOSVE-NEXT:    mov v0.s[2], w13
; NONEON-NOSVE-NEXT:    mov v1.s[1], w8
; NONEON-NOSVE-NEXT:    mov v1.s[2], w10
; NONEON-NOSVE-NEXT:    udiv w8, w16, w15
; NONEON-NOSVE-NEXT:    mov v0.s[3], w14
; NONEON-NOSVE-NEXT:    mov v1.s[3], w8
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %op2 = load <8 x i32>, ptr %b
  %res = udiv <8 x i32> %op1, %op2
  store <8 x i32> %res, ptr %a
  ret void
}

define <1 x i64> @udiv_v1i64(<1 x i64> %op1, <1 x i64> %op2) {
; CHECK-LABEL: udiv_v1i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl1
; CHECK-NEXT:    // kill: def $d0 killed $d0 def $z0
; CHECK-NEXT:    // kill: def $d1 killed $d1 def $z1
; CHECK-NEXT:    udiv z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $d0 killed $d0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v1i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    // kill: def $d1 killed $d1 def $q1
; NONEON-NOSVE-NEXT:    // kill: def $d0 killed $d0 def $q0
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    udiv x8, x9, x8
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <1 x i64> %op1, %op2
  ret <1 x i64> %res
}

define <2 x i64> @udiv_v2i64(<2 x i64> %op1, <2 x i64> %op2) {
; CHECK-LABEL: udiv_v2i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    // kill: def $q0 killed $q0 def $z0
; CHECK-NEXT:    // kill: def $q1 killed $q1 def $z1
; CHECK-NEXT:    udiv z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    // kill: def $q0 killed $q0 killed $z0
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v2i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    mov x10, v0.d[1]
; NONEON-NOSVE-NEXT:    udiv x8, x9, x8
; NONEON-NOSVE-NEXT:    mov x9, v1.d[1]
; NONEON-NOSVE-NEXT:    udiv x9, x10, x9
; NONEON-NOSVE-NEXT:    fmov d0, x8
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    ret
  %res = udiv <2 x i64> %op1, %op2
  ret <2 x i64> %res
}

define void @udiv_v4i64(ptr %a, ptr %b)  {
; CHECK-LABEL: udiv_v4i64:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ldp q0, q3, [x1]
; CHECK-NEXT:    ptrue p0.d, vl2
; CHECK-NEXT:    ldp q1, q2, [x0]
; CHECK-NEXT:    udivr z0.d, p0/m, z0.d, z1.d
; CHECK-NEXT:    movprfx z1, z2
; CHECK-NEXT:    udiv z1.d, p0/m, z1.d, z3.d
; CHECK-NEXT:    stp q0, q1, [x0]
; CHECK-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_v4i64:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    ldp q2, q0, [x0]
; NONEON-NOSVE-NEXT:    ldp q3, q1, [x1]
; NONEON-NOSVE-NEXT:    fmov x9, d0
; NONEON-NOSVE-NEXT:    mov x10, v2.d[1]
; NONEON-NOSVE-NEXT:    fmov x11, d2
; NONEON-NOSVE-NEXT:    fmov x8, d1
; NONEON-NOSVE-NEXT:    mov x12, v0.d[1]
; NONEON-NOSVE-NEXT:    udiv x8, x9, x8
; NONEON-NOSVE-NEXT:    mov x9, v3.d[1]
; NONEON-NOSVE-NEXT:    udiv x9, x10, x9
; NONEON-NOSVE-NEXT:    fmov x10, d3
; NONEON-NOSVE-NEXT:    udiv x10, x11, x10
; NONEON-NOSVE-NEXT:    mov x11, v1.d[1]
; NONEON-NOSVE-NEXT:    fmov d1, x8
; NONEON-NOSVE-NEXT:    udiv x11, x12, x11
; NONEON-NOSVE-NEXT:    fmov d0, x10
; NONEON-NOSVE-NEXT:    mov v0.d[1], x9
; NONEON-NOSVE-NEXT:    mov v1.d[1], x11
; NONEON-NOSVE-NEXT:    stp q0, q1, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <4 x i64>, ptr %a
  %op2 = load <4 x i64>, ptr %b
  %res = udiv <4 x i64> %op1, %op2
  store <4 x i64> %res, ptr %a
  ret void
}

define void @udiv_constantsplat_v8i32(ptr %a)  {
; SVE-LABEL: udiv_constantsplat_v8i32:
; SVE:       // %bb.0:
; SVE-NEXT:    mov w8, #8969 // =0x2309
; SVE-NEXT:    ldp q1, q2, [x0]
; SVE-NEXT:    movk w8, #22765, lsl #16
; SVE-NEXT:    ptrue p0.s, vl4
; SVE-NEXT:    mov z0.s, w8
; SVE-NEXT:    movprfx z3, z1
; SVE-NEXT:    umulh z3.s, p0/m, z3.s, z0.s
; SVE-NEXT:    umulh z0.s, p0/m, z0.s, z2.s
; SVE-NEXT:    sub z1.s, z1.s, z3.s
; SVE-NEXT:    sub z2.s, z2.s, z0.s
; SVE-NEXT:    lsr z1.s, z1.s, #1
; SVE-NEXT:    lsr z2.s, z2.s, #1
; SVE-NEXT:    add z1.s, z1.s, z3.s
; SVE-NEXT:    add z0.s, z2.s, z0.s
; SVE-NEXT:    lsr z1.s, z1.s, #6
; SVE-NEXT:    lsr z0.s, z0.s, #6
; SVE-NEXT:    stp q1, q0, [x0]
; SVE-NEXT:    ret
;
; SVE2-LABEL: udiv_constantsplat_v8i32:
; SVE2:       // %bb.0:
; SVE2-NEXT:    mov w8, #8969 // =0x2309
; SVE2-NEXT:    ldp q1, q2, [x0]
; SVE2-NEXT:    movk w8, #22765, lsl #16
; SVE2-NEXT:    mov z0.s, w8
; SVE2-NEXT:    umulh z3.s, z1.s, z0.s
; SVE2-NEXT:    umulh z0.s, z2.s, z0.s
; SVE2-NEXT:    sub z1.s, z1.s, z3.s
; SVE2-NEXT:    sub z2.s, z2.s, z0.s
; SVE2-NEXT:    usra z3.s, z1.s, #1
; SVE2-NEXT:    usra z0.s, z2.s, #1
; SVE2-NEXT:    lsr z1.s, z3.s, #6
; SVE2-NEXT:    lsr z0.s, z0.s, #6
; SVE2-NEXT:    stp q1, q0, [x0]
; SVE2-NEXT:    ret
;
; NONEON-NOSVE-LABEL: udiv_constantsplat_v8i32:
; NONEON-NOSVE:       // %bb.0:
; NONEON-NOSVE-NEXT:    mov w8, #8969 // =0x2309
; NONEON-NOSVE-NEXT:    ldp q1, q2, [x0]
; NONEON-NOSVE-NEXT:    movk w8, #22765, lsl #16
; NONEON-NOSVE-NEXT:    dup v0.4s, w8
; NONEON-NOSVE-NEXT:    umull2 v3.2d, v1.4s, v0.4s
; NONEON-NOSVE-NEXT:    umull v4.2d, v1.2s, v0.2s
; NONEON-NOSVE-NEXT:    umull2 v5.2d, v2.4s, v0.4s
; NONEON-NOSVE-NEXT:    umull v0.2d, v2.2s, v0.2s
; NONEON-NOSVE-NEXT:    uzp2 v3.4s, v4.4s, v3.4s
; NONEON-NOSVE-NEXT:    uzp2 v0.4s, v0.4s, v5.4s
; NONEON-NOSVE-NEXT:    sub v1.4s, v1.4s, v3.4s
; NONEON-NOSVE-NEXT:    sub v2.4s, v2.4s, v0.4s
; NONEON-NOSVE-NEXT:    usra v3.4s, v1.4s, #1
; NONEON-NOSVE-NEXT:    usra v0.4s, v2.4s, #1
; NONEON-NOSVE-NEXT:    ushr v1.4s, v3.4s, #6
; NONEON-NOSVE-NEXT:    ushr v0.4s, v0.4s, #6
; NONEON-NOSVE-NEXT:    stp q1, q0, [x0]
; NONEON-NOSVE-NEXT:    ret
  %op1 = load <8 x i32>, ptr %a
  %res = udiv <8 x i32> %op1, <i32 95, i32 95, i32 95, i32 95, i32 95, i32 95, i32 95, i32 95>
  store <8 x i32> %res, ptr %a
  ret void
}
