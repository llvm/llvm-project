; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 6
; RUN: llc -mtriple=aarch64-linux-gnu -mattr=+sve2p1 < %s | FileCheck %s

define <vscale x 4 x float> @fdot_wide_vl128(<vscale x 4 x float> %acc, <vscale x 8 x half> %a, <vscale x 8 x half> %b) {
; CHECK-LABEL: fdot_wide_vl128:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fdot z0.s, z1.h, z2.h
; CHECK-NEXT:    ret
entry:
  %a.wide = fpext <vscale x 8 x half> %a to <vscale x 8 x float>
  %b.wide = fpext <vscale x 8 x half> %b to <vscale x 8 x float>
  %mult = fmul <vscale x 8 x float> %a.wide, %b.wide
  %partial.reduce = call reassoc <vscale x 4 x float> @llvm.vector.partial.reduce.fadd(<vscale x 4 x float> %acc, <vscale x 8 x float> %mult)
  ret <vscale x 4 x float> %partial.reduce
}

define void @fdot_wide_vl256(ptr %accptr, ptr %aptr, ptr %bptr) vscale_range(2,2) {
; CHECK-LABEL: fdot_wide_vl256:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    ptrue p0.s
; CHECK-NEXT:    ld1h { z0.s }, p0/z, [x1]
; CHECK-NEXT:    ld1h { z1.s }, p0/z, [x2]
; CHECK-NEXT:    ld1h { z2.s }, p0/z, [x1, #1, mul vl]
; CHECK-NEXT:    ld1h { z3.s }, p0/z, [x2, #1, mul vl]
; CHECK-NEXT:    fcvt z0.s, p0/m, z0.h
; CHECK-NEXT:    fcvt z1.s, p0/m, z1.h
; CHECK-NEXT:    fcvt z2.s, p0/m, z2.h
; CHECK-NEXT:    fcvt z3.s, p0/m, z3.h
; CHECK-NEXT:    fmul z0.s, z0.s, z1.s
; CHECK-NEXT:    ldr z1, [x0]
; CHECK-NEXT:    fmul z2.s, z2.s, z3.s
; CHECK-NEXT:    fadd z0.s, z1.s, z0.s
; CHECK-NEXT:    fadd z0.s, z0.s, z2.s
; CHECK-NEXT:    str z0, [x0]
; CHECK-NEXT:    ret
entry:
  %acc = load <8 x float>, ptr %accptr
  %a = load <16 x half>, ptr %aptr
  %b = load <16 x half>, ptr %bptr
  %a.wide = fpext <16 x half> %a to <16 x float>
  %b.wide = fpext <16 x half> %b to <16 x float>
  %mult = fmul <16 x float> %a.wide, %b.wide
  %partial.reduce = call reassoc <8 x float> @llvm.vector.partial.reduce.fadd(<8 x float> %acc, <16 x float> %mult)
  store <8 x float> %partial.reduce, ptr %accptr
  ret void
}

define <4 x float> @fixed_fdot_wide(<4 x float> %acc, <8 x half> %a, <8 x half> %b) {
; CHECK-LABEL: fixed_fdot_wide:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fcvtl v3.4s, v1.4h
; CHECK-NEXT:    fcvtl v4.4s, v2.4h
; CHECK-NEXT:    fcvtl2 v1.4s, v1.8h
; CHECK-NEXT:    fcvtl2 v2.4s, v2.8h
; CHECK-NEXT:    fmul v3.4s, v3.4s, v4.4s
; CHECK-NEXT:    fmul v1.4s, v1.4s, v2.4s
; CHECK-NEXT:    fadd v0.4s, v0.4s, v3.4s
; CHECK-NEXT:    fadd v0.4s, v0.4s, v1.4s
; CHECK-NEXT:    ret
entry:
  %a.wide = fpext <8 x half> %a to <8 x float>
  %b.wide = fpext <8 x half> %b to <8 x float>
  %mult = fmul <8 x float> %a.wide, %b.wide
  %partial.reduce = call reassoc <4 x float> @llvm.vector.partial.reduce.fadd(<4 x float> %acc, <8 x float> %mult)
  ret <4 x float> %partial.reduce
}

define <8 x half> @partial_reduce_half(<8 x half> %acc, <16 x half> %a) {
; CHECK-LABEL: partial_reduce_half:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fadd v0.8h, v0.8h, v1.8h
; CHECK-NEXT:    fadd v0.8h, v0.8h, v2.8h
; CHECK-NEXT:    ret
entry:
  %partial.reduce = call reassoc <8 x half> @llvm.vector.partial.reduce.fadd(<8 x half> %acc, <16 x half> %a)
  ret <8 x half> %partial.reduce
}

define <4 x float> @partial_reduce_float(<4 x float> %acc, <8 x float> %a) {
; CHECK-LABEL: partial_reduce_float:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fadd v0.4s, v0.4s, v1.4s
; CHECK-NEXT:    fadd v0.4s, v0.4s, v2.4s
; CHECK-NEXT:    ret
entry:
  %partial.reduce = call reassoc <4 x float> @llvm.vector.partial.reduce.fadd(<4 x float> %acc, <8 x float> %a)
  ret <4 x float> %partial.reduce
}

define <2 x double> @partial_reduce_double(<2 x double> %acc, <4 x double> %a) {
; CHECK-LABEL: partial_reduce_double:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fadd v0.2d, v0.2d, v1.2d
; CHECK-NEXT:    fadd v0.2d, v0.2d, v2.2d
; CHECK-NEXT:    ret
entry:
  %partial.reduce = call reassoc <2 x double> @llvm.vector.partial.reduce.fadd(<2 x double> %acc, <4 x double> %a)
  ret <2 x double> %partial.reduce
}

define <vscale x 8 x half> @partial_reduce_half_vl128(<vscale x 8 x half> %acc, <vscale x 16 x half> %a) {
; CHECK-LABEL: partial_reduce_half_vl128:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fadd z0.h, z0.h, z1.h
; CHECK-NEXT:    fadd z0.h, z0.h, z2.h
; CHECK-NEXT:    ret
entry:
  %partial.reduce = call reassoc <vscale x 8 x half> @llvm.vector.partial.reduce.fadd(<vscale x 8 x half> %acc, <vscale x 16 x half> %a)
  ret <vscale x 8 x half> %partial.reduce
}

define <vscale x 4 x float> @partial_reduce_float_vl128(<vscale x 4 x float> %acc, <vscale x 8 x float> %a) {
; CHECK-LABEL: partial_reduce_float_vl128:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fadd z0.s, z0.s, z1.s
; CHECK-NEXT:    fadd z0.s, z0.s, z2.s
; CHECK-NEXT:    ret
entry:
  %partial.reduce = call reassoc <vscale x 4 x float> @llvm.vector.partial.reduce.fadd(<vscale x 4 x float> %acc, <vscale x 8 x float> %a)
  ret <vscale x 4 x float> %partial.reduce
}

define <vscale x 2 x double> @partial_reduce_double_vl128(<vscale x 2 x double> %acc, <vscale x 4 x double> %a) {
; CHECK-LABEL: partial_reduce_double_vl128:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    fadd z0.d, z0.d, z1.d
; CHECK-NEXT:    fadd z0.d, z0.d, z2.d
; CHECK-NEXT:    ret
entry:
  %partial.reduce = call reassoc <vscale x 2 x double> @llvm.vector.partial.reduce.fadd(<vscale x 2 x double> %acc, <vscale x 4 x double> %a)
  ret <vscale x 2 x double> %partial.reduce
}
