; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=aarch64 -mattr=+sve2p1 < %s | FileCheck %s
; RUN: llc -mtriple=aarch64 -mattr=+sme2 < %s | FileCheck %s

define target("aarch64.svcount") @ptrue_b() nounwind {
; CHECK-LABEL: ptrue_b:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue pn8.b
; CHECK-NEXT:    mov p0.b, p8.b
; CHECK-NEXT:    ret
  %res = call target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c8()
  ret target("aarch64.svcount") %res
}

define target("aarch64.svcount") @ptrue_h() nounwind {
; CHECK-LABEL: ptrue_h:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue pn8.h
; CHECK-NEXT:    mov p0.b, p8.b
; CHECK-NEXT:    ret
  %res = call target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c16()
  ret target("aarch64.svcount") %res
}

define target("aarch64.svcount") @ptrue_s() nounwind {
; CHECK-LABEL: ptrue_s:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue pn8.s
; CHECK-NEXT:    mov p0.b, p8.b
; CHECK-NEXT:    ret
  %res = call target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c32()
  ret target("aarch64.svcount") %res
}

define target("aarch64.svcount") @ptrue_d() nounwind {
; CHECK-LABEL: ptrue_d:
; CHECK:       // %bb.0:
; CHECK-NEXT:    ptrue pn8.d
; CHECK-NEXT:    mov p0.b, p8.b
; CHECK-NEXT:    ret
  %res = call target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c64()
  ret target("aarch64.svcount") %res
}

declare target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c8()
declare target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c16()
declare target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c32()
declare target("aarch64.svcount") @llvm.aarch64.sve.ptrue.c64()
