; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc --mtriple=aarch64 < %s | FileCheck %s --check-prefix=AARCH64

define i1 @f_olt_or(float %a, float %b, float %c) {
; AARCH64-LABEL: f_olt_or:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w8, mi
; AARCH64-NEXT:    fcmp s1, s2
; AARCH64-NEXT:    csinc w0, w8, wzr, pl
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_olt_or_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fminnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, mi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_olt_or_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fminnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, mi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_and(float %a, float %b, float %c) {
; AARCH64-LABEL: f_ugt_and:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fcmp s1, s2
; AARCH64-NEXT:    fccmp s0, s2, #0, hi
; AARCH64-NEXT:    cset w0, hi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_ugt_and_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fminnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, hi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_ugt_and_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fminnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, hi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_and(float %a, float %b, float %c) {
; AARCH64-LABEL: f_olt_and:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmax s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, mi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_olt_and_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmax s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, mi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_olt_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_olt_and_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmax s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, mi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp olt float %a, %c
  %cmp1 = fcmp olt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_or(float %a, float %b, float %c) {
; AARCH64-LABEL: f_ugt_or:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmax s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, hi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_ugt_or_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmax s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, hi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ugt_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_ugt_or_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmax s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, hi
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ugt float %a, %c
  %cmp1 = fcmp ugt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_or(float %a, float %b, float %c) {
; AARCH64-LABEL: f_ogt_or:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w8, gt
; AARCH64-NEXT:    fcmp s1, s2
; AARCH64-NEXT:    csinc w0, w8, wzr, le
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_ogt_or_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmaxnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, gt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_ogt_or_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmaxnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, gt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_and(float %a, float %b, float %c) {
; AARCH64-LABEL: f_ult_and:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fcmp s1, s2
; AARCH64-NEXT:    fccmp s0, s2, #0, lt
; AARCH64-NEXT:    cset w0, lt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_ult_and_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmaxnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, lt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_ult_and_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmaxnm s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, lt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_and(float %a, float %b, float %c) {
; AARCH64-LABEL: f_ogt_and:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmin s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, gt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_and_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_ogt_and_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmin s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, gt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ogt_and_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_ogt_and_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmin s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, gt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ogt float %a, %c
  %cmp1 = fcmp ogt float %b, %c
  %0 = and i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_or(float %a, float %b, float %c) {
; AARCH64-LABEL: f_ult_or:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmin s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, lt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_or_nan(float nofpclass(nan) %a, float nofpclass(nan) %b, float nofpclass(nan) %c) {
; AARCH64-LABEL: f_ult_or_nan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmin s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, lt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}

define i1 @f_ult_or_snan(float nofpclass(snan) %a, float nofpclass(snan) %b, float nofpclass(snan) %c) {
; AARCH64-LABEL: f_ult_or_snan:
; AARCH64:       // %bb.0: // %entry
; AARCH64-NEXT:    fmin s0, s0, s1
; AARCH64-NEXT:    fcmp s0, s2
; AARCH64-NEXT:    cset w0, lt
; AARCH64-NEXT:    ret
entry:
  %cmp = fcmp ult float %a, %c
  %cmp1 = fcmp ult float %b, %c
  %0 = or i1 %cmp, %cmp1
  ret i1 %0
}
