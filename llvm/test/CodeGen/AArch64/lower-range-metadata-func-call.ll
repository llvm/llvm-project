; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=aarch64-none-linux-gnu | FileCheck %s

; and can be eliminated
define i32 @test_call_known_max_range() #0 {
; CHECK-LABEL: test_call_known_max_range:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    bl foo
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %id = tail call i32 @foo(), !range !0, !noundef !{}
  %and = and i32 %id, 1023
  ret i32 %and
}

define i32 @test_call_known_trunc_1_bit_range() #0 {
; CHECK-LABEL: test_call_known_trunc_1_bit_range:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    bl foo
; CHECK-NEXT:    and w0, w0, #0x1ff
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %id = tail call i32 @foo(), !range !0, !noundef !{}
  %and = and i32 %id, 511
  ret i32 %and
}

define i32 @test_call_known_max_range_m1() #0 {
; CHECK-LABEL: test_call_known_max_range_m1:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    bl foo
; CHECK-NEXT:    and w0, w0, #0xff
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %id = tail call i32 @foo(), !range !1, !noundef !{}
  %and = and i32 %id, 255
  ret i32 %and
}

; and can be eliminated
define i32 @test_call_known_max_range_attr() #0 {
; CHECK-LABEL: test_call_known_max_range_attr:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    bl foo
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %id = tail call noundef range(i32 0, 1024) i32 @foo()
  %and = and i32 %id, 1023
  ret i32 %and
}

define i32 @test_call_known_max_range_attr_no_noundef() #0 {
; CHECK-LABEL: test_call_known_max_range_attr_no_noundef:
; CHECK:       // %bb.0: // %entry
; CHECK-NEXT:    str x30, [sp, #-16]! // 8-byte Folded Spill
; CHECK-NEXT:    bl foo
; CHECK-NEXT:    ldr x30, [sp], #16 // 8-byte Folded Reload
; CHECK-NEXT:    ret
entry:
  %id = tail call range(i32 0, 1024) i32 @foo()
  %and = and i32 %id, 1023
  ret i32 %and
}

declare i32 @foo()

attributes #0 = { norecurse nounwind }
attributes #1 = { nounwind readnone }

!0 = !{i32 0, i32 1024}
!1 = !{i32 0, i32 1023}
