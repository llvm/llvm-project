# RUN: llc -mtriple=aarch64 -o /dev/null -run-pass=register-coalescer -aarch64-enable-subreg-liveness-tracking -debug-only=regalloc %s 2>&1 | FileCheck %s --check-prefix=CHECK-DBG
# RUN: llc -mtriple=aarch64 -verify-machineinstrs -o - -run-pass=register-coalescer -aarch64-enable-subreg-liveness-tracking %s | FileCheck %s --check-prefix=CHECK
# REQUIRES: asserts

# CHECK-DBG: ********** REGISTER COALESCER **********
# CHECK-DBG: ********** Function: test
# CHECK-DBG: ********** JOINING INTERVALS ***********
# CHECK-DBG: ********** INTERVALS **********
# CHECK-DBG: %0 [16r,32r:0) 0@16r  weight:0.000000e+00
# CHECK-DBG: %3 [48r,112r:0) 0@48r  L0000000000000080 [48r,112r:0) 0@48r  L0000000000000040 [48r,112r:0) 0@48r  weight:0.000000e+00
# CHECK-DBG: %4 [80r,112e:1)[112e,112d:0) 0@112e 1@80r  L0000000000000080 [80r,112e:1)[112e,112d:0) 0@112e 1@80r  L0000000000000040 [80r,112e:1)[112e,112d:0) 0@112e 1@80r  weight:0.000000e+00
# CHECK-DBG: %5 [32r,112r:1)[112r,112d:0) 0@112r 1@32r  weight:0.000000e+00
# CHECK-DBG: ********** MACHINEINSTRS **********
# CHECK-DBG: 0B      bb.0.entry:
# CHECK-DBG: 16B       %0:gpr64sp = ADDXri %stack.0, 0, 0
# CHECK-DBG: 32B       %5:gpr64common = nuw ADDXri %0:gpr64sp, 64, 0
# CHECK-DBG: 48B       undef %3.sub_32:gpr64 = MOVi32imm 64, implicit-def %3:gpr64
# CHECK-DBG: 80B       undef %4.sub_32:gpr64 = MOVi32imm 64, implicit-def %4:gpr64
# CHECK-DBG: 112B      dead %5:gpr64common, dead early-clobber %4:gpr64 = MOPSMemorySetPseudo %5:gpr64common(tied-def 0), %4:gpr64(tied-def 1), %3:gpr64, implicit-def dead $nzcv
# CHECK-DBG: 128B      RET_ReallyLR

---
name:            test
tracksRegLiveness: true
fixedStack:      []
stack:
  - { id: 0, name: '', type: default, offset: 0, size: 65, alignment: 16,
      stack-id: default }
body:             |
  bb.0.entry:
    ; CHECK-LABEL: name: test
    ; CHECK: [[ADDXri:%[0-9]+]]:gpr64sp = ADDXri %stack.0, 0, 0
    ; CHECK-NEXT: [[ADDXri1:%[0-9]+]]:gpr64common = nuw ADDXri [[ADDXri]], 64, 0
    ; CHECK-NEXT: undef [[MOVi32imm:%[0-9]+]].sub_32:gpr64 = MOVi32imm 64
    ; CHECK-NEXT: undef [[MOVi32imm1:%[0-9]+]].sub_32:gpr64 = MOVi32imm 64
    ; CHECK-NEXT: dead [[ADDXri1]]:gpr64common, dead early-clobber [[MOVi32imm1]]:gpr64 = MOPSMemorySetPseudo [[ADDXri1]], [[MOVi32imm1]], [[MOVi32imm]], implicit-def dead $nzcv
    ; CHECK-NEXT: RET_ReallyLR
    %1:gpr64sp = ADDXri %stack.0, 0, 0
    %2:gpr64common = nuw ADDXri killed %1, 64, 0
    %3:gpr32 = MOVi32imm 64
    %4:gpr64 = SUBREG_TO_REG 0, killed %3, %subreg.sub_32
    %6:gpr64 = COPY %4
    %5:gpr64common = COPY killed %2
    dead %5:gpr64common, dead early-clobber %6:gpr64 = MOPSMemorySetPseudo %5, %6, %4, implicit-def dead $nzcv
    RET_ReallyLR

...
# CHECK-DBG: ********** REGISTER COALESCER **********
# CHECK-DBG: ********** Function: reproducer
# CHECK-DBG: ********** JOINING INTERVALS ***********
# CHECK-DBG: ********** INTERVALS **********
# CHECK-DBG: %1 [32r,48B:2)[48B,320r:0)[320r,368B:1) 0@48B-phi 1@320r 2@32r
# CHECK-DBG-SAME: weight:0.000000e+00
# CHECK-DBG: %3 [80r,160B:2)[240r,272B:1)[288r,304B:0)[304B,320r:3) 0@288r 1@240r 2@80r 3@304B-phi
# CHECK-DBG-SAME: L0000000000000080 [240r,272B:1)[288r,304B:0)[304B,320r:3) 0@288r 1@240r 2@x 3@304B-phi
# CHECK-DBG-SAME: L0000000000000040 [80r,160B:2)[240r,272B:1)[288r,304B:0)[304B,320r:3) 0@288r 1@240r 2@80r 3@304B-phi
# CHECK-DBG-SAME: weight:0.000000e+00
# CHECK-DBG: ********** MACHINEINSTRS **********
# CHECK-DBG: 0B      bb.0:
# CHECK-DBG:           successors: %bb.1(0x80000000); %bb.1(100.00%)
# CHECK-DBG: 32B       %1:gpr64 = IMPLICIT_DEF
# CHECK-DBG: 48B     bb.1:
# CHECK-DBG:         ; predecessors: %bb.0, %bb.7
# CHECK-DBG:           successors: %bb.2(0x80000000); %bb.2(100.00%)
# CHECK-DBG: 64B     bb.2:
# CHECK-DBG:         ; predecessors: %bb.1
# CHECK-DBG:           successors: %bb.3(0x80000000); %bb.3(100.00%)
# CHECK-DBG: 80B       undef %3.sub_32:gpr64 = MOVi32imm 1
# CHECK-DBG: 96B     bb.3:
# CHECK-DBG:         ; predecessors: %bb.2
# CHECK-DBG:           successors: %bb.7(0x40000000), %bb.4(0x40000000); %bb.7(50.00%), %bb.4(50.00%)
# CHECK-DBG: 112B      $nzcv = IMPLICIT_DEF
# CHECK-DBG: 144B      Bcc 1, %bb.7, implicit killed $nzcv
# CHECK-DBG: 160B    bb.4:
# CHECK-DBG:         ; predecessors: %bb.3
# CHECK-DBG:           successors: %bb.6(0x40000000), %bb.5(0x40000000); %bb.6(50.00%), %bb.5(50.00%)
# CHECK-DBG: 176B      $nzcv = IMPLICIT_DEF
# CHECK-DBG: 192B      Bcc 1, %bb.6, implicit killed $nzcv
# CHECK-DBG: 208B    bb.5:
# CHECK-DBG:         ; predecessors: %bb.4
# CHECK-DBG:           successors: %bb.7(0x80000000); %bb.7(100.00%)
# CHECK-DBG: 240B      undef %3.sub_32:gpr64 = MOVi32imm 1, implicit-def %3:gpr64
# CHECK-DBG: 256B      B %bb.7
# CHECK-DBG: 272B    bb.6:
# CHECK-DBG:         ; predecessors: %bb.4
# CHECK-DBG:           successors: %bb.7(0x80000000); %bb.7(100.00%)
# CHECK-DBG: 288B      %3:gpr64 = COPY $xzr
# CHECK-DBG: 304B    bb.7:
# CHECK-DBG:         ; predecessors: %bb.3, %bb.5, %bb.6
# CHECK-DBG:           successors: %bb.1(0x80000000); %bb.1(100.00%)
# CHECK-DBG: 320B      %1:gpr64 = ADDXrs %1:gpr64, %3:gpr64, 1
# CHECK-DBG: 352B      B %bb.1
---
name:              reproducer
tracksRegLiveness: true
body:             |
  bb.0:
    %0:gpr32 = MOVi32imm 1
    %1:gpr64 = IMPLICIT_DEF

  bb.1:

  bb.2:
    %3:gpr64all = SUBREG_TO_REG 0, %0, %subreg.sub_32

  bb.3:
    $nzcv = IMPLICIT_DEF
    %4:gpr64 = COPY killed %3
    Bcc 1, %bb.7, implicit killed $nzcv

  bb.4:
    $nzcv = IMPLICIT_DEF
    Bcc 1, %bb.6, implicit killed $nzcv

  bb.5:
    %5:gpr64all = SUBREG_TO_REG 0, %0, %subreg.sub_32
    %4:gpr64 = COPY killed %5
    B %bb.7

  bb.6:
    %4:gpr64 = COPY $xzr

  bb.7:
    %7:gpr64 = ADDXrs killed %1, killed %4, 1
    %1:gpr64 = COPY killed %7
    B %bb.1

...
# CHECK-DBG: ********** REGISTER COALESCER **********
# CHECK-DBG: ********** Function: reproducer2
# CHECK-DBG: ********** JOINING INTERVALS ***********
# CHECK-DBG: ********** INTERVALS **********
# CHECK-DBG: %1 [32r,48B:2)[48B,304r:0)[304r,352B:1) 0@48B-phi 1@304r 2@32r
# CHECK-DBG-SAME: weight:0.000000e+00
# CHECK-DBG: %3 [80r,160B:2)[224r,256B:1)[272r,288B:0)[288B,304r:3) 0@272r 1@224r 2@80r 3@288B-phi
# CHECK-DBG-SAME: L0000000000000080 [224r,256B:1)[272r,288B:0)[288B,304r:3) 0@272r 1@224r 2@x 3@288B-phi
# CHECK-DBG-SAME: L0000000000000040 [80r,160B:2)[224r,256B:1)[272r,288B:0)[288B,304r:3) 0@272r 1@224r 2@80r 3@288B-phi
# CHECK-DBG-SAME: weight:0.000000e+00
# CHECK-DBG: ********** MACHINEINSTRS **********
# CHECK-DBG: 0B      bb.0:
# CHECK-DBG:           successors: %bb.1(0x80000000); %bb.1(100.00%)
# CHECK-DBG: 32B       %1:gpr64 = IMPLICIT_DEF
# CHECK-DBG: 48B     bb.1:
# CHECK-DBG:         ; predecessors: %bb.0, %bb.7
# CHECK-DBG:           successors: %bb.2(0x80000000); %bb.2(100.00%)
# CHECK-DBG: 64B     bb.2:
# CHECK-DBG:         ; predecessors: %bb.1
# CHECK-DBG:           successors: %bb.3(0x80000000); %bb.3(100.00%)
# CHECK-DBG: 80B       undef %3.sub_32:gpr64 = MOVi32imm 1
# CHECK-DBG: 96B     bb.3:
# CHECK-DBG:         ; predecessors: %bb.2
# CHECK-DBG:           successors: %bb.7(0x40000000), %bb.4(0x40000000); %bb.7(50.00%), %bb.4(50.00%)
# CHECK-DBG: 112B      $nzcv = IMPLICIT_DEF
# CHECK-DBG: 144B      Bcc 1, %bb.7, implicit killed $nzcv
# CHECK-DBG: 160B    bb.4:
# CHECK-DBG:         ; predecessors: %bb.3
# CHECK-DBG:           successors: %bb.6(0x40000000), %bb.5(0x40000000); %bb.6(50.00%), %bb.5(50.00%)
# CHECK-DBG: 176B      $nzcv = IMPLICIT_DEF
# CHECK-DBG: 192B      Bcc 1, %bb.6, implicit killed $nzcv
# CHECK-DBG: 208B    bb.5:
# CHECK-DBG:         ; predecessors: %bb.4
# CHECK-DBG:           successors: %bb.7(0x80000000); %bb.7(100.00%)
# CHECK-DBG: 224B      %3:gpr64 = IMPLICIT_DEF
# CHECK-DBG: 240B      B %bb.7
# CHECK-DBG: 256B    bb.6:
# CHECK-DBG:         ; predecessors: %bb.4
# CHECK-DBG:           successors: %bb.7(0x80000000); %bb.7(100.00%)
# CHECK-DBG: 272B      %3:gpr64 = COPY $xzr
# CHECK-DBG: 288B    bb.7:
# CHECK-DBG:         ; predecessors: %bb.3, %bb.5, %bb.6
# CHECK-DBG:           successors: %bb.1(0x80000000); %bb.1(100.00%)
# CHECK-DBG: 304B      %1:gpr64 = ADDXrs %1:gpr64, %3:gpr64, 1
# CHECK-DBG: 336B      B %bb.1

---
name:              reproducer2
tracksRegLiveness: true
body:             |
  bb.0:
    %0:gpr32 = MOVi32imm 1
    %1:gpr64 = IMPLICIT_DEF

  bb.1:

  bb.2:
    %3:gpr64all = SUBREG_TO_REG 0, %0, %subreg.sub_32

  bb.3:
    $nzcv = IMPLICIT_DEF
    %4:gpr64 = COPY killed %3
    Bcc 1, %bb.7, implicit killed $nzcv

  bb.4:
    $nzcv = IMPLICIT_DEF
    Bcc 1, %bb.6, implicit killed $nzcv

  bb.5:
    %4:gpr64 = IMPLICIT_DEF
    B %bb.7

  bb.6:
    %4:gpr64 = COPY $xzr

  bb.7:
    %5:gpr64 = ADDXrs killed %1, killed %4, 1
    %1:gpr64 = COPY killed %5
    B %bb.1

...
# CHECK-DBG: ********** REGISTER COALESCER **********
# CHECK-DBG: ********** Function: reproducer3
# CHECK-DBG: ********** JOINING INTERVALS ***********
# CHECK-DBG: ********** INTERVALS **********
# CHECK-DBG: W0 [0B,32r:0)[320r,336r:1) 0@0B-phi 1@320r
# CHECK-DBG: W1 [0B,16r:0) 0@0B-phi
# CHECK-DBG: %0 [16r,64r:0) 0@16r  weight:0.000000e+00
# CHECK-DBG: %1 [32r,128r:0) 0@32r  weight:0.000000e+00
# CHECK-DBG: %2 [48r,64r:0) 0@48r  weight:0.000000e+00
# CHECK-DBG: %3 [64r,80r:0) 0@64r  weight:0.000000e+00
# CHECK-DBG: %4 [80r,176r:0) 0@80r  weight:0.000000e+00
# CHECK-DBG: %7 [112r,128r:1)[128r,256r:0)[304B,320r:0) 0@128r 1@112r
# CHECK-DBG-SAME: L0000000000000080 [128r,256r:0)[304B,320r:0) 0@128r
# CHECK-DBG-SAME: L0000000000000040 [112r,128r:1)[128r,256r:0)[304B,320r:0) 0@128r 1@112r
# CHECK-DBG-SAME: weight:0.000000e+00
# CHECK-DBG: %8 [96r,176r:1)[176r,192r:0) 0@176r 1@96r  weight:0.000000e+00
# CHECK-DBG: %9 [256r,272r:0) 0@256r  weight:0.000000e+00
# CHECK-DBG: ********** MACHINEINSTRS **********
# CHECK-DBG: 0B      bb.0:
# CHECK-DBG:           successors: %bb.2(0x40000000), %bb.1(0x40000000); %bb.2(50.00%), %bb.1(50.00%)
# CHECK-DBG:           liveins: $w0, $w1
# CHECK-DBG: 16B       %0:gpr32 = COPY $w1
# CHECK-DBG: 32B       %1:gpr32 = COPY $w0
# CHECK-DBG: 48B       %2:gpr32 = UBFMWri %1:gpr32, 31, 30
# CHECK-DBG: 64B       %3:gpr32 = SUBWrs %2:gpr32, %0:gpr32, 1
# CHECK-DBG: 80B       %4:gpr32 = UBFMWri %3:gpr32, 1, 31
# CHECK-DBG: 96B       %8:gpr32common = MOVi32imm 1
# CHECK-DBG: 112B      undef %7.sub_32:gpr64 = MOVi32imm 1
# CHECK-DBG: 128B      undef %7.sub_32:gpr64 = BFMWri %7.sub_32:gpr64(tied-def 0), %1:gpr32, 31, 30, implicit-def %7:gpr64
# CHECK-DBG: 176B      %8:gpr32common = BFMWri %8:gpr32common(tied-def 0), %4:gpr32, 30, 29
# CHECK-DBG: 192B      dead $wzr = SUBSWri %8:gpr32common, 0, 0, implicit-def $nzcv
# CHECK-DBG: 208B      Bcc 2, %bb.2, implicit killed $nzcv
# CHECK-DBG: 224B      B %bb.1
# CHECK-DBG: 240B    bb.1:
# CHECK-DBG:         ; predecessors: %bb.0
# CHECK-DBG: 256B      %9:gpr64common = UBFMXri %7:gpr64, 62, 61
# CHECK-DBG: 272B      dead $xzr = LDRXui %9:gpr64common, 0
# CHECK-DBG: 288B      RET_ReallyLR
# CHECK-DBG: 304B    bb.2:
# CHECK-DBG:         ; predecessors: %bb.0
# CHECK-DBG: 320B      $x0 = COPY %7:gpr64
# CHECK-DBG: 336B      RET_ReallyLR implicit $x0

---
name:            reproducer3
tracksRegLiveness: true
body:             |
  bb.0:
    liveins: $w0, $w1

    %0:gpr32 = COPY killed $w1
    %1:gpr32 = COPY killed $w0
    %3:gpr32 = UBFMWri %1, 31, 30
    %4:gpr32 = SUBWrs killed %3, killed %0, 1
    %5:gpr32 = UBFMWri killed %4, 1, 31
    %6:gpr32 = MOVi32imm 1
    %7:gpr32 = COPY %6
    %7:gpr32 = BFMWri %7, killed %1, 31, 30
    %8:gpr64 = SUBREG_TO_REG 0, killed %7, %subreg.sub_32
    %9:gpr32common = COPY killed %6
    %9:gpr32common = BFMWri %9, killed %5, 30, 29
    dead $wzr = SUBSWri killed %9, 0, 0, implicit-def $nzcv
    Bcc 2, %bb.2, implicit killed $nzcv
    B %bb.1

  bb.1:
    %10:gpr64common = UBFMXri killed %8, 62, 61
    dead $xzr = LDRXui killed %10, 0
    RET_ReallyLR

  bb.2:
    $x0 = COPY killed %8
    RET_ReallyLR implicit killed $x0

...
