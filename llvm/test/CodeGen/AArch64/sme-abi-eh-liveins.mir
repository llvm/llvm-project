# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
# RUN: llc -mtriple=aarch64 -mattr=+sve -mattr=+sme -run-pass=aarch64-machine-sme-abi -verify-machineinstrs %s -o - | FileCheck %s

# This test verifies that runtime defined live-ins are not included in the live
# outs of predecessors in the MachineSMEABIPass, as including them would result
# in copies of undefined registers.

--- |
  define void @sme_abi_eh_liveins() "aarch64_inout_za" personality ptr @__gxx_personality_v0 { entry: unreachable }

  declare i32 @__gxx_personality_v0(...)
...
---
name:            sme_abi_eh_liveins
tracksRegLiveness: true
isSSA:           true
noVRegs:         false

body:             |
  ; CHECK-LABEL: name: sme_abi_eh_liveins
  ; CHECK: bb.0:
  ; CHECK-NEXT:   successors: %bb.2(0x00000000), %bb.1(0x80000000)
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   [[RDSVLI_XI:%[0-9]+]]:gpr64 = RDSVLI_XI 1, implicit $vg
  ; CHECK-NEXT:   [[COPY:%[0-9]+]]:gpr64 = COPY $sp
  ; CHECK-NEXT:   [[MSUBXrrr:%[0-9]+]]:gpr64 = MSUBXrrr [[RDSVLI_XI]], [[RDSVLI_XI]], [[COPY]]
  ; CHECK-NEXT:   $sp = COPY [[MSUBXrrr]]
  ; CHECK-NEXT:   STPXi [[MSUBXrrr]], [[RDSVLI_XI]], %stack.0, 0
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   InOutZAUsePseudo
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   [[ADDXri:%[0-9]+]]:gpr64sp = ADDXri %stack.0, 0, 0
  ; CHECK-NEXT:   [[COPY1:%[0-9]+]]:gpr64 = COPY [[ADDXri]]
  ; CHECK-NEXT:   MSR 56965, [[COPY1]]
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   RequiresZASavePseudo
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   MSRpstatesvcrImm1 2, 1, implicit-def $nzcv
  ; CHECK-NEXT:   [[MRS:%[0-9]+]]:gpr64 = MRS 56965, implicit-def $nzcv
  ; CHECK-NEXT:   $x0 = ADDXri %stack.0, 0, 0
  ; CHECK-NEXT:   RestoreZAPseudo [[MRS]], $x0, &__arm_tpidr2_restore, csr_aarch64_sme_abi_support_routines_preservemost_from_x0
  ; CHECK-NEXT:   MSR 56965, $xzr
  ; CHECK-NEXT:   B %bb.2
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.1 (landing-pad):
  ; CHECK-NEXT:   successors: %bb.2(0x80000000)
  ; CHECK-NEXT:   liveins: $x0, $x1
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT:   MSRpstatesvcrImm1 2, 1, implicit-def $nzcv
  ; CHECK-NEXT:   [[MRS1:%[0-9]+]]:gpr64 = MRS 56965, implicit-def $nzcv
  ; CHECK-NEXT:   $x0 = ADDXri %stack.0, 0, 0
  ; CHECK-NEXT:   RestoreZAPseudo [[MRS1]], $x0, &__arm_tpidr2_restore, csr_aarch64_sme_abi_support_routines_preservemost_from_x0
  ; CHECK-NEXT:   MSR 56965, $xzr
  ; CHECK-NEXT:   ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT:   InOutZAUsePseudo
  ; CHECK-NEXT:   ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp
  ; CHECK-NEXT: {{  $}}
  ; CHECK-NEXT: bb.2:
  bb.0:
    successors: %bb.2(0x00000000), %bb.1(0x80000000)

    ; Simulate shared ZA call
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    InOutZAUsePseudo
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

    ; Simulate private ZA call at the end of the block
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    RequiresZASavePseudo
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

    B %bb.2

  bb.1 (landing-pad):
    liveins: $x0, $x1

    ; Simulate shared ZA call
    ADJCALLSTACKDOWN 0, 0, implicit-def dead $sp, implicit $sp
    InOutZAUsePseudo
    ADJCALLSTACKUP 0, 0, implicit-def dead $sp, implicit $sp

  bb.2:
