; RUN: llc -debug-only=isel -o /dev/null < %s 2>&1 | FileCheck %s

; REQUIRES: asserts

; These tests ensure that we don't combine
;   CSEL a, b, cc, SUBS(SUB(x,y), 0) -> CSEL a, b, cc, SUBS(x,y)
; if the flags set by SUBS(SUB(x,y), 0) have more than one use.
;
; This restriction exists because combining SUBS(SUB(x,y), 0) -> SUBS(x,y) is
; only valid if there are no users of the overflow flags (C/V) generated by the
; SUBS. Currently, we only check the flags used by the CSEL, and therefore we
; conservatively reject cases where the SUBS's flags have other uses.

target triple = "aarch64-unknown-linux-gnu"

; CHECK-LABEL: Legalized selection DAG: %bb.0 'combine_subs:'
; CHECK-NEXT: SelectionDAG has 13 nodes:
; CHECK-NEXT:   t0: ch,glue = EntryToken
; CHECK-NEXT:   t2: i32,ch = CopyFromReg t0, Register:i32 %0
; CHECK-NEXT:   t4: i32,ch = CopyFromReg t0, Register:i32 %1
; CHECK-NEXT:         t5: i32 = sub t2, t4
; CHECK-NEXT:       t14: i32,i32 = AArch64ISD::SUBS t5, Constant:i32<0>
; CHECK-NEXT:     t16: i32 = AArch64ISD::CSEL t2, t4, Constant:i32<1>, t14:1
; CHECK-NEXT:   t11: ch,glue = CopyToReg t0, Register:i32 $w0, t16
; CHECK-NEXT:   t12: ch = AArch64ISD::RET_GLUE t11, Register:i32 $w0, t11:1

; CHECK-LABEL: Optimized legalized selection DAG: %bb.0 'combine_subs:'
; CHECK-NEXT: SelectionDAG has 11 nodes:
; CHECK-NEXT:   t0: ch,glue = EntryToken
; CHECK-NEXT:   t2: i32,ch = CopyFromReg t0, Register:i32 %0
; CHECK-NEXT:   t4: i32,ch = CopyFromReg t0, Register:i32 %1
; CHECK-NEXT:       t18: i32,i32 = AArch64ISD::SUBS t2, t4
; CHECK-NEXT:     t16: i32 = AArch64ISD::CSEL t2, t4, Constant:i32<1>, t18:1
; CHECK-NEXT:   t11: ch,glue = CopyToReg t0, Register:i32 $w0, t16
; CHECK-NEXT:   t12: ch = AArch64ISD::RET_GLUE t11, Register:i32 $w0, t11:1

define i32 @combine_subs(i32 %a, i32 %b) {
  %sub = sub i32 %a, %b
  %cc = icmp ne i32 %sub, 0
  %sel = select i1 %cc, i32 %a, i32 %b
  ret i32 %sel
}

; CHECK-LABEL: Legalized selection DAG: %bb.0 'combine_subs_multiple_sub_uses:'
; CHECK-NEXT: SelectionDAG has 14 nodes:
; CHECK-NEXT:   t0: ch,glue = EntryToken
; CHECK-NEXT:   t2: i32,ch = CopyFromReg t0, Register:i32 %0
; CHECK-NEXT:   t4: i32,ch = CopyFromReg t0, Register:i32 %1
; CHECK-NEXT:   t5: i32 = sub t2, t4
; CHECK-NEXT:         t15: i32,i32 = AArch64ISD::SUBS t5, Constant:i32<0>
; CHECK-NEXT:       t17: i32 = AArch64ISD::CSEL t2, t4, Constant:i32<1>, t15:1
; CHECK-NEXT:     t10: i32 = add t17, t5
; CHECK-NEXT:   t12: ch,glue = CopyToReg t0, Register:i32 $w0, t10
; CHECK-NEXT:   t13: ch = AArch64ISD::RET_GLUE t12, Register:i32 $w0, t12:1

; CHECK-LABEL: Optimized legalized selection DAG: %bb.0 'combine_subs_multiple_sub_uses:'
; CHECK-NEXT: SelectionDAG has 12 nodes:
; CHECK-NEXT:   t0: ch,glue = EntryToken
; CHECK-NEXT:   t2: i32,ch = CopyFromReg t0, Register:i32 %0
; CHECK-NEXT:   t4: i32,ch = CopyFromReg t0, Register:i32 %1
; CHECK-NEXT:       t17: i32 = AArch64ISD::CSEL t2, t4, Constant:i32<1>, t19:1
; CHECK-NEXT:     t10: i32 = add t17, t19
; CHECK-NEXT:   t12: ch,glue = CopyToReg t0, Register:i32 $w0, t10
; CHECK-NEXT:   t19: i32,i32 = AArch64ISD::SUBS t2, t4
; CHECK-NEXT:   t13: ch = AArch64ISD::RET_GLUE t12, Register:i32 $w0, t12:1

define i32 @combine_subs_multiple_sub_uses(i32 %a, i32 %b) {
  %sub = sub i32 %a, %b
  %cc = icmp ne i32 %sub, 0
  %sel = select i1 %cc, i32 %a, i32 %b
  %add = add i32 %sel, %sub
  ret i32 %add
}

; CHECK-LABEL: Legalized selection DAG: %bb.0 'do_not_combine_subs_multiple_flag_uses:'
; CHECK-NEXT: SelectionDAG has 19 nodes:
; CHECK-NEXT:   t0: ch,glue = EntryToken
; CHECK-NEXT:   t2: i32,ch = CopyFromReg t0, Register:i32 %0
; CHECK-NEXT:   t4: i32,ch = CopyFromReg t0, Register:i32 %1
; CHECK-NEXT:       t24: i32 = AArch64ISD::CSEL t2, t4, Constant:i32<1>, t21:1
; CHECK-NEXT:         t6: i32,ch = CopyFromReg t0, Register:i32 %2
; CHECK-NEXT:         t8: i32,ch = CopyFromReg t0, Register:i32 %3
; CHECK-NEXT:       t23: i32 = AArch64ISD::CSEL t6, t8, Constant:i32<1>, t21:1
; CHECK-NEXT:     t15: i32 = add t24, t23
; CHECK-NEXT:   t17: ch,glue = CopyToReg t0, Register:i32 $w0, t15
; CHECK-NEXT:     t9: i32 = sub t2, t4
; CHECK-NEXT:   t21: i32,i32 = AArch64ISD::SUBS t9, Constant:i32<0>
; CHECK-NEXT:   t18: ch = AArch64ISD::RET_GLUE t17, Register:i32 $w0, t17:1

; CHECK-LABEL: Optimized legalized selection DAG: %bb.0 'do_not_combine_subs_multiple_flag_uses:'
; CHECK-NEXT: SelectionDAG has 19 nodes:
; CHECK-NEXT:   t0: ch,glue = EntryToken
; CHECK-NEXT:   t2: i32,ch = CopyFromReg t0, Register:i32 %0
; CHECK-NEXT:   t4: i32,ch = CopyFromReg t0, Register:i32 %1
; CHECK-NEXT:       t24: i32 = AArch64ISD::CSEL t2, t4, Constant:i32<1>, t21:1
; CHECK-NEXT:         t6: i32,ch = CopyFromReg t0, Register:i32 %2
; CHECK-NEXT:         t8: i32,ch = CopyFromReg t0, Register:i32 %3
; CHECK-NEXT:       t23: i32 = AArch64ISD::CSEL t6, t8, Constant:i32<1>, t21:1
; CHECK-NEXT:     t15: i32 = add t24, t23
; CHECK-NEXT:   t17: ch,glue = CopyToReg t0, Register:i32 $w0, t15
; CHECK-NEXT:     t9: i32 = sub t2, t4
; CHECK-NEXT:   t21: i32,i32 = AArch64ISD::SUBS t9, Constant:i32<0>
; CHECK-NEXT:   t18: ch = AArch64ISD::RET_GLUE t17, Register:i32 $w0, t17:1

define i32 @do_not_combine_subs_multiple_flag_uses(i32 %a, i32 %b, i32 %c, i32 %d) {
  %sub = sub i32 %a, %b
  %cc = icmp ne i32 %sub, 0
  %sel = select i1 %cc, i32 %a, i32 %b
  %other = select i1 %cc, i32 %c, i32 %d
  %add = add i32 %sel, %other
  ret i32 %add
}
