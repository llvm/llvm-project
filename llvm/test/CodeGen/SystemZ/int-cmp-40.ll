; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; Test 64-bit comparisons in which the second operand is zero-extended
; from a PC-relative i16.
;
; RUN: llc < %s -mtriple=s390x-linux-gnu | FileCheck %s

@g = global i16 1
@h = global i16 1, align 1, section "foo"

; Check unsigned comparison.
define i64 @f1(i64 %src1) {
; CHECK-LABEL: f1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clghrl %r2, g
; CHECK-NEXT:    jhe .LBB0_2
; CHECK-NEXT:  # %bb.1: # %exit
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
; CHECK-NEXT:  .LBB0_2: # %mulb
; CHECK-NEXT:    msgr %r2, %r2
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
entry:
  %val = load i16, i16 *@g
  %src2 = zext i16 %val to i64
  %cond = icmp ult i64 %src1, %src2
  br i1 %cond, label %exit, label %mulb
mulb:
  %mul = mul i64 %src1, %src1
  br label %exit
exit:
  %tmp = phi i64 [ %src1, %entry ], [ %mul, %mulb ]
  %res = add i64 %tmp, 1
  ret i64 %res
}

; Check signed comparison.
define i64 @f2(i64 %src1) {
; CHECK-LABEL: f2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    llghrl %r0, g
; CHECK-NEXT:    cgrjhe %r2, %r0, .LBB1_2
; CHECK-NEXT:  # %bb.1: # %exit
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
; CHECK-NEXT:  .LBB1_2: # %mulb
; CHECK-NEXT:    msgr %r2, %r2
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
entry:
  %val = load i16, i16 *@g
  %src2 = zext i16 %val to i64
  %cond = icmp slt i64 %src1, %src2
  br i1 %cond, label %exit, label %mulb
mulb:
  %mul = mul i64 %src1, %src1
  br label %exit
exit:
  %tmp = phi i64 [ %src1, %entry ], [ %mul, %mulb ]
  %res = add i64 %tmp, 1
  ret i64 %res
}

; Check equality.
define i64 @f3(i64 %src1) {
; CHECK-LABEL: f3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clghrl %r2, g
; CHECK-NEXT:    je .LBB2_2
; CHECK-NEXT:  # %bb.1: # %mulb
; CHECK-NEXT:    msgr %r2, %r2
; CHECK-NEXT:  .LBB2_2: # %exit
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
entry:
  %val = load i16, i16 *@g
  %src2 = zext i16 %val to i64
  %cond = icmp eq i64 %src1, %src2
  br i1 %cond, label %exit, label %mulb
mulb:
  %mul = mul i64 %src1, %src1
  br label %exit
exit:
  %tmp = phi i64 [ %src1, %entry ], [ %mul, %mulb ]
  %res = add i64 %tmp, 1
  ret i64 %res
}

; Check inequality.
define i64 @f4(i64 %src1) {
; CHECK-LABEL: f4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clghrl %r2, g
; CHECK-NEXT:    je .LBB3_2
; CHECK-NEXT:  # %bb.1: # %exit
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
; CHECK-NEXT:  .LBB3_2: # %mulb
; CHECK-NEXT:    msgr %r2, %r2
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
entry:
  %val = load i16, i16 *@g
  %src2 = zext i16 %val to i64
  %cond = icmp ne i64 %src1, %src2
  br i1 %cond, label %exit, label %mulb
mulb:
  %mul = mul i64 %src1, %src1
  br label %exit
exit:
  %tmp = phi i64 [ %src1, %entry ], [ %mul, %mulb ]
  %res = add i64 %tmp, 1
  ret i64 %res
}

; Repeat f1 with an unaligned address.
define i64 @f5(i64 %src1) {
; CHECK-LABEL: f5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lgrl %r1, h@GOT
; CHECK-NEXT:    llgh %r0, 0(%r1)
; CHECK-NEXT:    clgrjhe %r2, %r0, .LBB4_2
; CHECK-NEXT:  # %bb.1: # %exit
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
; CHECK-NEXT:  .LBB4_2: # %mulb
; CHECK-NEXT:    msgr %r2, %r2
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
entry:
  %val = load i16, i16 *@h, align 1
  %src2 = zext i16 %val to i64
  %cond = icmp ult i64 %src1, %src2
  br i1 %cond, label %exit, label %mulb
mulb:
  %mul = mul i64 %src1, %src1
  br label %exit
exit:
  %tmp = phi i64 [ %src1, %entry ], [ %mul, %mulb ]
  %res = add i64 %tmp, 1
  ret i64 %res
}

; Check the comparison can be reversed if that allows CLGHRL to be used.
define i64 @f6(i64 %src2) {
; CHECK-LABEL: f6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    clghrl %r2, g
; CHECK-NEXT:    jle .LBB5_2
; CHECK-NEXT:  # %bb.1: # %exit
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
; CHECK-NEXT:  .LBB5_2: # %mulb
; CHECK-NEXT:    msgr %r2, %r2
; CHECK-NEXT:    la %r2, 1(%r2)
; CHECK-NEXT:    br %r14
entry:
  %val = load i16, i16 *@g
  %src1 = zext i16 %val to i64
  %cond = icmp ult i64 %src1, %src2
  br i1 %cond, label %exit, label %mulb
mulb:
  %mul = mul i64 %src2, %src2
  br label %exit
exit:
  %tmp = phi i64 [ %src2, %entry ], [ %mul, %mulb ]
  %res = add i64 %tmp, 1
  ret i64 %res
}
