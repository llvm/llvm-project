; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; Test atomic half addition. Expect a compare-and-swap loop.
;
; RUN: llc < %s -mtriple=s390x-linux-gnu | FileCheck %s

define half @f1(ptr %src, half %b) {
; CHECK-LABEL: f1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    stmg %r11, %r15, 88(%r15)
; CHECK-NEXT:    .cfi_offset %r11, -72
; CHECK-NEXT:    .cfi_offset %r12, -64
; CHECK-NEXT:    .cfi_offset %r13, -56
; CHECK-NEXT:    .cfi_offset %r14, -48
; CHECK-NEXT:    .cfi_offset %r15, -40
; CHECK-NEXT:    aghi %r15, -184
; CHECK-NEXT:    .cfi_def_cfa_offset 344
; CHECK-NEXT:    std %f8, 176(%r15) # 8-byte Spill
; CHECK-NEXT:    std %f9, 168(%r15) # 8-byte Spill
; CHECK-NEXT:    std %f10, 160(%r15) # 8-byte Spill
; CHECK-NEXT:    .cfi_offset %f8, -168
; CHECK-NEXT:    .cfi_offset %f9, -176
; CHECK-NEXT:    .cfi_offset %f10, -184
; CHECK-NEXT:    lgr %r13, %r2
; CHECK-NEXT:    lgh %r0, 0(%r2)
; CHECK-NEXT:    ler %f8, %f0
; CHECK-NEXT:    sllg %r0, %r0, 48
; CHECK-NEXT:    ldgr %f9, %r0
; CHECK-NEXT:    risbg %r12, %r2, 0, 189, 0
; CHECK-NEXT:    sll %r13, 3
; CHECK-NEXT:    lcr %r11, %r13
; CHECK-NEXT:    j .LBB0_2
; CHECK-NEXT:  .LBB0_1: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB0_2 Depth=1
; CHECK-NEXT:    sllg %r0, %r3, 48
; CHECK-NEXT:    ldgr %f9, %r0
; CHECK-NEXT:    je .LBB0_5
; CHECK-NEXT:  .LBB0_2: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB0_3 Depth 2
; CHECK-NEXT:    ler %f0, %f8
; CHECK-NEXT:    brasl %r14, __extendhfsf2@PLT
; CHECK-NEXT:    ler %f10, %f0
; CHECK-NEXT:    ler %f0, %f9
; CHECK-NEXT:    brasl %r14, __extendhfsf2@PLT
; CHECK-NEXT:    aebr %f0, %f10
; CHECK-NEXT:    brasl %r14, __truncsfhf2@PLT
; CHECK-NEXT:    # kill: def $f0h killed $f0h def $f0d
; CHECK-NEXT:    lgdr %r1, %f0
; CHECK-NEXT:    l %r0, 0(%r12)
; CHECK-NEXT:    srlg %r1, %r1, 48
; CHECK-NEXT:    lgdr %r2, %f9
; CHECK-NEXT:    srlg %r2, %r2, 48
; CHECK-NEXT:  .LBB0_3: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB0_2 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    rll %r3, %r0, 16(%r13)
; CHECK-NEXT:    risbg %r1, %r3, 32, 47, 0
; CHECK-NEXT:    llhr %r3, %r3
; CHECK-NEXT:    cr %r3, %r2
; CHECK-NEXT:    jlh .LBB0_1
; CHECK-NEXT:  # %bb.4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB0_3 Depth=2
; CHECK-NEXT:    rll %r4, %r1, -16(%r11)
; CHECK-NEXT:    cs %r0, %r4, 0(%r12)
; CHECK-NEXT:    jl .LBB0_3
; CHECK-NEXT:    j .LBB0_1
; CHECK-NEXT:  .LBB0_5: # %atomicrmw.end
; CHECK-NEXT:    ler %f0, %f9
; CHECK-NEXT:    ld %f8, 176(%r15) # 8-byte Reload
; CHECK-NEXT:    ld %f9, 168(%r15) # 8-byte Reload
; CHECK-NEXT:    ld %f10, 160(%r15) # 8-byte Reload
; CHECK-NEXT:    lmg %r11, %r15, 272(%r15)
; CHECK-NEXT:    br %r14
  %res = atomicrmw fadd ptr %src, half %b seq_cst
  ret half %res
}
