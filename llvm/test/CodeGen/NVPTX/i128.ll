; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=nvptx64-- 2>&1 | FileCheck %s
; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64-- | %ptxas-verify %}

define i128 @srem_i128(i128 %lhs, i128 %rhs) {
; CHECK-LABEL: srem_i128(
; CHECK:       {
; CHECK-NEXT:    .reg .pred %p<22>;
; CHECK-NEXT:    .reg .b32 %r<12>;
; CHECK-NEXT:    .reg .b64 %rd<128>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0: // %_udiv-special-cases
; CHECK-NEXT:    ld.param.v2.b64 {%rd45, %rd46}, [srem_i128_param_0];
; CHECK-NEXT:    ld.param.v2.b64 {%rd49, %rd50}, [srem_i128_param_1];
; CHECK-NEXT:    shr.s64 %rd2, %rd46, 63;
; CHECK-NEXT:    sub.cc.s64 %rd51, 0, %rd45;
; CHECK-NEXT:    subc.cc.s64 %rd52, 0, %rd46;
; CHECK-NEXT:    setp.lt.s64 %p1, %rd46, 0;
; CHECK-NEXT:    selp.b64 %rd4, %rd52, %rd46, %p1;
; CHECK-NEXT:    selp.b64 %rd3, %rd51, %rd45, %p1;
; CHECK-NEXT:    sub.cc.s64 %rd53, 0, %rd49;
; CHECK-NEXT:    subc.cc.s64 %rd54, 0, %rd50;
; CHECK-NEXT:    setp.lt.s64 %p2, %rd50, 0;
; CHECK-NEXT:    selp.b64 %rd6, %rd54, %rd50, %p2;
; CHECK-NEXT:    selp.b64 %rd5, %rd53, %rd49, %p2;
; CHECK-NEXT:    or.b64 %rd55, %rd5, %rd6;
; CHECK-NEXT:    setp.eq.s64 %p3, %rd55, 0;
; CHECK-NEXT:    or.b64 %rd56, %rd3, %rd4;
; CHECK-NEXT:    setp.eq.s64 %p4, %rd56, 0;
; CHECK-NEXT:    or.pred %p5, %p3, %p4;
; CHECK-NEXT:    setp.ne.s64 %p6, %rd6, 0;
; CHECK-NEXT:    clz.b64 %r1, %rd6;
; CHECK-NEXT:    cvt.u64.u32 %rd57, %r1;
; CHECK-NEXT:    clz.b64 %r2, %rd5;
; CHECK-NEXT:    cvt.u64.u32 %rd58, %r2;
; CHECK-NEXT:    add.s64 %rd59, %rd58, 64;
; CHECK-NEXT:    selp.b64 %rd60, %rd57, %rd59, %p6;
; CHECK-NEXT:    setp.ne.s64 %p7, %rd4, 0;
; CHECK-NEXT:    clz.b64 %r3, %rd4;
; CHECK-NEXT:    cvt.u64.u32 %rd62, %r3;
; CHECK-NEXT:    clz.b64 %r4, %rd3;
; CHECK-NEXT:    cvt.u64.u32 %rd63, %r4;
; CHECK-NEXT:    add.s64 %rd64, %rd63, 64;
; CHECK-NEXT:    selp.b64 %rd65, %rd62, %rd64, %p7;
; CHECK-NEXT:    mov.b64 %rd118, 0;
; CHECK-NEXT:    sub.cc.s64 %rd68, %rd60, %rd65;
; CHECK-NEXT:    subc.cc.s64 %rd8, %rd118, 0;
; CHECK-NEXT:    setp.ne.s64 %p8, %rd8, 0;
; CHECK-NEXT:    and.pred %p10, %p8, %p8;
; CHECK-NEXT:    setp.eq.s64 %p11, %rd8, 0;
; CHECK-NEXT:    setp.gt.u64 %p12, %rd68, 127;
; CHECK-NEXT:    and.pred %p13, %p11, %p12;
; CHECK-NEXT:    or.pred %p14, %p13, %p10;
; CHECK-NEXT:    or.pred %p15, %p5, %p14;
; CHECK-NEXT:    xor.b64 %rd69, %rd68, 127;
; CHECK-NEXT:    or.b64 %rd70, %rd69, %rd8;
; CHECK-NEXT:    setp.eq.s64 %p16, %rd70, 0;
; CHECK-NEXT:    selp.b64 %rd127, 0, %rd4, %p15;
; CHECK-NEXT:    selp.b64 %rd126, 0, %rd3, %p15;
; CHECK-NEXT:    or.pred %p17, %p15, %p16;
; CHECK-NEXT:    @%p17 bra $L__BB0_5;
; CHECK-NEXT:  // %bb.3: // %udiv-bb1
; CHECK-NEXT:    add.cc.s64 %rd120, %rd68, 1;
; CHECK-NEXT:    addc.cc.s64 %rd121, %rd8, 0;
; CHECK-NEXT:    or.b64 %rd73, %rd120, %rd121;
; CHECK-NEXT:    setp.eq.s64 %p18, %rd73, 0;
; CHECK-NEXT:    cvt.u32.u64 %r5, %rd68;
; CHECK-NEXT:    sub.s32 %r6, 127, %r5;
; CHECK-NEXT:    shl.b64 %rd74, %rd4, %r6;
; CHECK-NEXT:    sub.s32 %r7, 64, %r6;
; CHECK-NEXT:    shr.u64 %rd75, %rd3, %r7;
; CHECK-NEXT:    or.b64 %rd76, %rd74, %rd75;
; CHECK-NEXT:    sub.s32 %r8, 63, %r5;
; CHECK-NEXT:    shl.b64 %rd77, %rd3, %r8;
; CHECK-NEXT:    setp.gt.s32 %p19, %r6, 63;
; CHECK-NEXT:    selp.b64 %rd125, %rd77, %rd76, %p19;
; CHECK-NEXT:    shl.b64 %rd124, %rd3, %r6;
; CHECK-NEXT:    mov.b64 %rd115, %rd118;
; CHECK-NEXT:    @%p18 bra $L__BB0_4;
; CHECK-NEXT:  // %bb.1: // %udiv-preheader
; CHECK-NEXT:    cvt.u32.u64 %r9, %rd120;
; CHECK-NEXT:    shr.u64 %rd80, %rd3, %r9;
; CHECK-NEXT:    sub.s32 %r10, 64, %r9;
; CHECK-NEXT:    shl.b64 %rd81, %rd4, %r10;
; CHECK-NEXT:    or.b64 %rd82, %rd80, %rd81;
; CHECK-NEXT:    add.s32 %r11, %r9, -64;
; CHECK-NEXT:    shr.u64 %rd83, %rd4, %r11;
; CHECK-NEXT:    setp.gt.s32 %p20, %r9, 63;
; CHECK-NEXT:    selp.b64 %rd122, %rd83, %rd82, %p20;
; CHECK-NEXT:    shr.u64 %rd123, %rd4, %r9;
; CHECK-NEXT:    add.cc.s64 %rd35, %rd5, -1;
; CHECK-NEXT:    addc.cc.s64 %rd36, %rd6, -1;
; CHECK-NEXT:    mov.b64 %rd115, 0;
; CHECK-NEXT:    mov.b64 %rd118, %rd115;
; CHECK-NEXT:  $L__BB0_2: // %udiv-do-while
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.u64 %rd84, %rd122, 63;
; CHECK-NEXT:    shl.b64 %rd85, %rd123, 1;
; CHECK-NEXT:    or.b64 %rd86, %rd85, %rd84;
; CHECK-NEXT:    shl.b64 %rd87, %rd122, 1;
; CHECK-NEXT:    shr.u64 %rd88, %rd125, 63;
; CHECK-NEXT:    or.b64 %rd89, %rd87, %rd88;
; CHECK-NEXT:    shr.u64 %rd90, %rd124, 63;
; CHECK-NEXT:    shl.b64 %rd91, %rd125, 1;
; CHECK-NEXT:    or.b64 %rd92, %rd91, %rd90;
; CHECK-NEXT:    shl.b64 %rd93, %rd124, 1;
; CHECK-NEXT:    or.b64 %rd124, %rd118, %rd93;
; CHECK-NEXT:    or.b64 %rd125, %rd115, %rd92;
; CHECK-NEXT:    sub.cc.s64 %rd94, %rd35, %rd89;
; CHECK-NEXT:    subc.cc.s64 %rd95, %rd36, %rd86;
; CHECK-NEXT:    shr.s64 %rd96, %rd95, 63;
; CHECK-NEXT:    and.b64 %rd118, %rd96, 1;
; CHECK-NEXT:    and.b64 %rd97, %rd96, %rd5;
; CHECK-NEXT:    and.b64 %rd98, %rd96, %rd6;
; CHECK-NEXT:    sub.cc.s64 %rd122, %rd89, %rd97;
; CHECK-NEXT:    subc.cc.s64 %rd123, %rd86, %rd98;
; CHECK-NEXT:    add.cc.s64 %rd120, %rd120, -1;
; CHECK-NEXT:    addc.cc.s64 %rd121, %rd121, -1;
; CHECK-NEXT:    or.b64 %rd99, %rd120, %rd121;
; CHECK-NEXT:    setp.eq.s64 %p21, %rd99, 0;
; CHECK-NEXT:    @%p21 bra $L__BB0_4;
; CHECK-NEXT:    bra.uni $L__BB0_2;
; CHECK-NEXT:  $L__BB0_4: // %udiv-loop-exit
; CHECK-NEXT:    shr.u64 %rd100, %rd124, 63;
; CHECK-NEXT:    shl.b64 %rd101, %rd125, 1;
; CHECK-NEXT:    or.b64 %rd102, %rd101, %rd100;
; CHECK-NEXT:    shl.b64 %rd103, %rd124, 1;
; CHECK-NEXT:    or.b64 %rd126, %rd118, %rd103;
; CHECK-NEXT:    or.b64 %rd127, %rd115, %rd102;
; CHECK-NEXT:  $L__BB0_5: // %udiv-end
; CHECK-NEXT:    mul.hi.u64 %rd104, %rd5, %rd126;
; CHECK-NEXT:    mad.lo.s64 %rd105, %rd5, %rd127, %rd104;
; CHECK-NEXT:    mad.lo.s64 %rd106, %rd6, %rd126, %rd105;
; CHECK-NEXT:    mul.lo.s64 %rd107, %rd5, %rd126;
; CHECK-NEXT:    sub.cc.s64 %rd108, %rd3, %rd107;
; CHECK-NEXT:    subc.cc.s64 %rd109, %rd4, %rd106;
; CHECK-NEXT:    xor.b64 %rd110, %rd108, %rd2;
; CHECK-NEXT:    xor.b64 %rd111, %rd109, %rd2;
; CHECK-NEXT:    sub.cc.s64 %rd112, %rd110, %rd2;
; CHECK-NEXT:    subc.cc.s64 %rd113, %rd111, %rd2;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd112, %rd113};
; CHECK-NEXT:    ret;
  %div = srem i128 %lhs, %rhs
  ret i128 %div
}

define i128 @urem_i128(i128 %lhs, i128 %rhs) {
; CHECK-LABEL: urem_i128(
; CHECK:       {
; CHECK-NEXT:    .reg .pred %p<20>;
; CHECK-NEXT:    .reg .b32 %r<12>;
; CHECK-NEXT:    .reg .b64 %rd<114>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0: // %_udiv-special-cases
; CHECK-NEXT:    ld.param.v2.b64 {%rd41, %rd42}, [urem_i128_param_0];
; CHECK-NEXT:    ld.param.v2.b64 {%rd3, %rd4}, [urem_i128_param_1];
; CHECK-NEXT:    or.b64 %rd45, %rd3, %rd4;
; CHECK-NEXT:    setp.eq.s64 %p1, %rd45, 0;
; CHECK-NEXT:    or.b64 %rd46, %rd41, %rd42;
; CHECK-NEXT:    setp.eq.s64 %p2, %rd46, 0;
; CHECK-NEXT:    or.pred %p3, %p1, %p2;
; CHECK-NEXT:    setp.ne.s64 %p4, %rd4, 0;
; CHECK-NEXT:    clz.b64 %r1, %rd4;
; CHECK-NEXT:    cvt.u64.u32 %rd47, %r1;
; CHECK-NEXT:    clz.b64 %r2, %rd3;
; CHECK-NEXT:    cvt.u64.u32 %rd48, %r2;
; CHECK-NEXT:    add.s64 %rd49, %rd48, 64;
; CHECK-NEXT:    selp.b64 %rd50, %rd47, %rd49, %p4;
; CHECK-NEXT:    setp.ne.s64 %p5, %rd42, 0;
; CHECK-NEXT:    clz.b64 %r3, %rd42;
; CHECK-NEXT:    cvt.u64.u32 %rd52, %r3;
; CHECK-NEXT:    clz.b64 %r4, %rd41;
; CHECK-NEXT:    cvt.u64.u32 %rd53, %r4;
; CHECK-NEXT:    add.s64 %rd54, %rd53, 64;
; CHECK-NEXT:    selp.b64 %rd55, %rd52, %rd54, %p5;
; CHECK-NEXT:    mov.b64 %rd104, 0;
; CHECK-NEXT:    sub.cc.s64 %rd58, %rd50, %rd55;
; CHECK-NEXT:    subc.cc.s64 %rd6, %rd104, 0;
; CHECK-NEXT:    setp.ne.s64 %p6, %rd6, 0;
; CHECK-NEXT:    and.pred %p8, %p6, %p6;
; CHECK-NEXT:    setp.eq.s64 %p9, %rd6, 0;
; CHECK-NEXT:    setp.gt.u64 %p10, %rd58, 127;
; CHECK-NEXT:    and.pred %p11, %p9, %p10;
; CHECK-NEXT:    or.pred %p12, %p11, %p8;
; CHECK-NEXT:    or.pred %p13, %p3, %p12;
; CHECK-NEXT:    xor.b64 %rd59, %rd58, 127;
; CHECK-NEXT:    or.b64 %rd60, %rd59, %rd6;
; CHECK-NEXT:    setp.eq.s64 %p14, %rd60, 0;
; CHECK-NEXT:    selp.b64 %rd113, 0, %rd42, %p13;
; CHECK-NEXT:    selp.b64 %rd112, 0, %rd41, %p13;
; CHECK-NEXT:    or.pred %p15, %p13, %p14;
; CHECK-NEXT:    @%p15 bra $L__BB1_5;
; CHECK-NEXT:  // %bb.3: // %udiv-bb1
; CHECK-NEXT:    add.cc.s64 %rd106, %rd58, 1;
; CHECK-NEXT:    addc.cc.s64 %rd107, %rd6, 0;
; CHECK-NEXT:    or.b64 %rd63, %rd106, %rd107;
; CHECK-NEXT:    setp.eq.s64 %p16, %rd63, 0;
; CHECK-NEXT:    cvt.u32.u64 %r5, %rd58;
; CHECK-NEXT:    sub.s32 %r6, 127, %r5;
; CHECK-NEXT:    shl.b64 %rd64, %rd42, %r6;
; CHECK-NEXT:    sub.s32 %r7, 64, %r6;
; CHECK-NEXT:    shr.u64 %rd65, %rd41, %r7;
; CHECK-NEXT:    or.b64 %rd66, %rd64, %rd65;
; CHECK-NEXT:    sub.s32 %r8, 63, %r5;
; CHECK-NEXT:    shl.b64 %rd67, %rd41, %r8;
; CHECK-NEXT:    setp.gt.s32 %p17, %r6, 63;
; CHECK-NEXT:    selp.b64 %rd111, %rd67, %rd66, %p17;
; CHECK-NEXT:    shl.b64 %rd110, %rd41, %r6;
; CHECK-NEXT:    mov.b64 %rd101, %rd104;
; CHECK-NEXT:    @%p16 bra $L__BB1_4;
; CHECK-NEXT:  // %bb.1: // %udiv-preheader
; CHECK-NEXT:    cvt.u32.u64 %r9, %rd106;
; CHECK-NEXT:    shr.u64 %rd70, %rd41, %r9;
; CHECK-NEXT:    sub.s32 %r10, 64, %r9;
; CHECK-NEXT:    shl.b64 %rd71, %rd42, %r10;
; CHECK-NEXT:    or.b64 %rd72, %rd70, %rd71;
; CHECK-NEXT:    add.s32 %r11, %r9, -64;
; CHECK-NEXT:    shr.u64 %rd73, %rd42, %r11;
; CHECK-NEXT:    setp.gt.s32 %p18, %r9, 63;
; CHECK-NEXT:    selp.b64 %rd108, %rd73, %rd72, %p18;
; CHECK-NEXT:    shr.u64 %rd109, %rd42, %r9;
; CHECK-NEXT:    add.cc.s64 %rd33, %rd3, -1;
; CHECK-NEXT:    addc.cc.s64 %rd34, %rd4, -1;
; CHECK-NEXT:    mov.b64 %rd101, 0;
; CHECK-NEXT:    mov.b64 %rd104, %rd101;
; CHECK-NEXT:  $L__BB1_2: // %udiv-do-while
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.u64 %rd74, %rd108, 63;
; CHECK-NEXT:    shl.b64 %rd75, %rd109, 1;
; CHECK-NEXT:    or.b64 %rd76, %rd75, %rd74;
; CHECK-NEXT:    shl.b64 %rd77, %rd108, 1;
; CHECK-NEXT:    shr.u64 %rd78, %rd111, 63;
; CHECK-NEXT:    or.b64 %rd79, %rd77, %rd78;
; CHECK-NEXT:    shr.u64 %rd80, %rd110, 63;
; CHECK-NEXT:    shl.b64 %rd81, %rd111, 1;
; CHECK-NEXT:    or.b64 %rd82, %rd81, %rd80;
; CHECK-NEXT:    shl.b64 %rd83, %rd110, 1;
; CHECK-NEXT:    or.b64 %rd110, %rd104, %rd83;
; CHECK-NEXT:    or.b64 %rd111, %rd101, %rd82;
; CHECK-NEXT:    sub.cc.s64 %rd84, %rd33, %rd79;
; CHECK-NEXT:    subc.cc.s64 %rd85, %rd34, %rd76;
; CHECK-NEXT:    shr.s64 %rd86, %rd85, 63;
; CHECK-NEXT:    and.b64 %rd104, %rd86, 1;
; CHECK-NEXT:    and.b64 %rd87, %rd86, %rd3;
; CHECK-NEXT:    and.b64 %rd88, %rd86, %rd4;
; CHECK-NEXT:    sub.cc.s64 %rd108, %rd79, %rd87;
; CHECK-NEXT:    subc.cc.s64 %rd109, %rd76, %rd88;
; CHECK-NEXT:    add.cc.s64 %rd106, %rd106, -1;
; CHECK-NEXT:    addc.cc.s64 %rd107, %rd107, -1;
; CHECK-NEXT:    or.b64 %rd89, %rd106, %rd107;
; CHECK-NEXT:    setp.eq.s64 %p19, %rd89, 0;
; CHECK-NEXT:    @%p19 bra $L__BB1_4;
; CHECK-NEXT:    bra.uni $L__BB1_2;
; CHECK-NEXT:  $L__BB1_4: // %udiv-loop-exit
; CHECK-NEXT:    shr.u64 %rd90, %rd110, 63;
; CHECK-NEXT:    shl.b64 %rd91, %rd111, 1;
; CHECK-NEXT:    or.b64 %rd92, %rd91, %rd90;
; CHECK-NEXT:    shl.b64 %rd93, %rd110, 1;
; CHECK-NEXT:    or.b64 %rd112, %rd104, %rd93;
; CHECK-NEXT:    or.b64 %rd113, %rd101, %rd92;
; CHECK-NEXT:  $L__BB1_5: // %udiv-end
; CHECK-NEXT:    mul.hi.u64 %rd94, %rd3, %rd112;
; CHECK-NEXT:    mad.lo.s64 %rd95, %rd3, %rd113, %rd94;
; CHECK-NEXT:    mad.lo.s64 %rd96, %rd4, %rd112, %rd95;
; CHECK-NEXT:    mul.lo.s64 %rd97, %rd3, %rd112;
; CHECK-NEXT:    sub.cc.s64 %rd98, %rd41, %rd97;
; CHECK-NEXT:    subc.cc.s64 %rd99, %rd42, %rd96;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd98, %rd99};
; CHECK-NEXT:    ret;
  %div = urem i128 %lhs, %rhs
  ret i128 %div
}

define i128 @srem_i128_pow2k(i128 %lhs) {
; CHECK-LABEL: srem_i128_pow2k(
; CHECK:       {
; CHECK-NEXT:    .reg .b64 %rd<10>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.v2.b64 {%rd1, %rd2}, [srem_i128_pow2k_param_0];
; CHECK-NEXT:    shr.s64 %rd3, %rd2, 63;
; CHECK-NEXT:    shr.u64 %rd4, %rd3, 31;
; CHECK-NEXT:    add.cc.s64 %rd5, %rd1, %rd4;
; CHECK-NEXT:    addc.cc.s64 %rd6, %rd2, 0;
; CHECK-NEXT:    and.b64 %rd7, %rd5, -8589934592;
; CHECK-NEXT:    sub.cc.s64 %rd8, %rd1, %rd7;
; CHECK-NEXT:    subc.cc.s64 %rd9, %rd2, %rd6;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd8, %rd9};
; CHECK-NEXT:    ret;
  %div = srem i128 %lhs, 8589934592
  ret i128 %div
}

define i128 @urem_i128_pow2k(i128 %lhs) {
; CHECK-LABEL: urem_i128_pow2k(
; CHECK:       {
; CHECK-NEXT:    .reg .b64 %rd<5>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.v2.b64 {%rd1, %rd2}, [urem_i128_pow2k_param_0];
; CHECK-NEXT:    and.b64 %rd3, %rd1, 8589934591;
; CHECK-NEXT:    mov.b64 %rd4, 0;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd3, %rd4};
; CHECK-NEXT:    ret;
  %div = urem i128 %lhs, 8589934592
  ret i128 %div
}

define i128 @sdiv_i128(i128 %lhs, i128 %rhs) {
; CHECK-LABEL: sdiv_i128(
; CHECK:       {
; CHECK-NEXT:    .reg .pred %p<22>;
; CHECK-NEXT:    .reg .b32 %r<12>;
; CHECK-NEXT:    .reg .b64 %rd<123>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0: // %_udiv-special-cases
; CHECK-NEXT:    ld.param.v2.b64 {%rd45, %rd46}, [sdiv_i128_param_0];
; CHECK-NEXT:    ld.param.v2.b64 {%rd49, %rd50}, [sdiv_i128_param_1];
; CHECK-NEXT:    sub.cc.s64 %rd51, 0, %rd45;
; CHECK-NEXT:    subc.cc.s64 %rd52, 0, %rd46;
; CHECK-NEXT:    setp.lt.s64 %p1, %rd46, 0;
; CHECK-NEXT:    selp.b64 %rd2, %rd52, %rd46, %p1;
; CHECK-NEXT:    selp.b64 %rd1, %rd51, %rd45, %p1;
; CHECK-NEXT:    sub.cc.s64 %rd53, 0, %rd49;
; CHECK-NEXT:    subc.cc.s64 %rd54, 0, %rd50;
; CHECK-NEXT:    setp.lt.s64 %p2, %rd50, 0;
; CHECK-NEXT:    selp.b64 %rd4, %rd54, %rd50, %p2;
; CHECK-NEXT:    selp.b64 %rd3, %rd53, %rd49, %p2;
; CHECK-NEXT:    xor.b64 %rd55, %rd50, %rd46;
; CHECK-NEXT:    shr.s64 %rd5, %rd55, 63;
; CHECK-NEXT:    or.b64 %rd56, %rd3, %rd4;
; CHECK-NEXT:    setp.eq.s64 %p3, %rd56, 0;
; CHECK-NEXT:    or.b64 %rd57, %rd1, %rd2;
; CHECK-NEXT:    setp.eq.s64 %p4, %rd57, 0;
; CHECK-NEXT:    or.pred %p5, %p3, %p4;
; CHECK-NEXT:    setp.ne.s64 %p6, %rd4, 0;
; CHECK-NEXT:    clz.b64 %r1, %rd4;
; CHECK-NEXT:    cvt.u64.u32 %rd58, %r1;
; CHECK-NEXT:    clz.b64 %r2, %rd3;
; CHECK-NEXT:    cvt.u64.u32 %rd59, %r2;
; CHECK-NEXT:    add.s64 %rd60, %rd59, 64;
; CHECK-NEXT:    selp.b64 %rd61, %rd58, %rd60, %p6;
; CHECK-NEXT:    setp.ne.s64 %p7, %rd2, 0;
; CHECK-NEXT:    clz.b64 %r3, %rd2;
; CHECK-NEXT:    cvt.u64.u32 %rd63, %r3;
; CHECK-NEXT:    clz.b64 %r4, %rd1;
; CHECK-NEXT:    cvt.u64.u32 %rd64, %r4;
; CHECK-NEXT:    add.s64 %rd65, %rd64, 64;
; CHECK-NEXT:    selp.b64 %rd66, %rd63, %rd65, %p7;
; CHECK-NEXT:    mov.b64 %rd113, 0;
; CHECK-NEXT:    sub.cc.s64 %rd69, %rd61, %rd66;
; CHECK-NEXT:    subc.cc.s64 %rd8, %rd113, 0;
; CHECK-NEXT:    setp.ne.s64 %p8, %rd8, 0;
; CHECK-NEXT:    and.pred %p10, %p8, %p8;
; CHECK-NEXT:    setp.eq.s64 %p11, %rd8, 0;
; CHECK-NEXT:    setp.gt.u64 %p12, %rd69, 127;
; CHECK-NEXT:    and.pred %p13, %p11, %p12;
; CHECK-NEXT:    or.pred %p14, %p13, %p10;
; CHECK-NEXT:    or.pred %p15, %p5, %p14;
; CHECK-NEXT:    xor.b64 %rd70, %rd69, 127;
; CHECK-NEXT:    or.b64 %rd71, %rd70, %rd8;
; CHECK-NEXT:    setp.eq.s64 %p16, %rd71, 0;
; CHECK-NEXT:    selp.b64 %rd122, 0, %rd2, %p15;
; CHECK-NEXT:    selp.b64 %rd121, 0, %rd1, %p15;
; CHECK-NEXT:    or.pred %p17, %p15, %p16;
; CHECK-NEXT:    @%p17 bra $L__BB4_5;
; CHECK-NEXT:  // %bb.3: // %udiv-bb1
; CHECK-NEXT:    add.cc.s64 %rd115, %rd69, 1;
; CHECK-NEXT:    addc.cc.s64 %rd116, %rd8, 0;
; CHECK-NEXT:    or.b64 %rd74, %rd115, %rd116;
; CHECK-NEXT:    setp.eq.s64 %p18, %rd74, 0;
; CHECK-NEXT:    cvt.u32.u64 %r5, %rd69;
; CHECK-NEXT:    sub.s32 %r6, 127, %r5;
; CHECK-NEXT:    shl.b64 %rd75, %rd2, %r6;
; CHECK-NEXT:    sub.s32 %r7, 64, %r6;
; CHECK-NEXT:    shr.u64 %rd76, %rd1, %r7;
; CHECK-NEXT:    or.b64 %rd77, %rd75, %rd76;
; CHECK-NEXT:    sub.s32 %r8, 63, %r5;
; CHECK-NEXT:    shl.b64 %rd78, %rd1, %r8;
; CHECK-NEXT:    setp.gt.s32 %p19, %r6, 63;
; CHECK-NEXT:    selp.b64 %rd120, %rd78, %rd77, %p19;
; CHECK-NEXT:    shl.b64 %rd119, %rd1, %r6;
; CHECK-NEXT:    mov.b64 %rd110, %rd113;
; CHECK-NEXT:    @%p18 bra $L__BB4_4;
; CHECK-NEXT:  // %bb.1: // %udiv-preheader
; CHECK-NEXT:    cvt.u32.u64 %r9, %rd115;
; CHECK-NEXT:    shr.u64 %rd81, %rd1, %r9;
; CHECK-NEXT:    sub.s32 %r10, 64, %r9;
; CHECK-NEXT:    shl.b64 %rd82, %rd2, %r10;
; CHECK-NEXT:    or.b64 %rd83, %rd81, %rd82;
; CHECK-NEXT:    add.s32 %r11, %r9, -64;
; CHECK-NEXT:    shr.u64 %rd84, %rd2, %r11;
; CHECK-NEXT:    setp.gt.s32 %p20, %r9, 63;
; CHECK-NEXT:    selp.b64 %rd117, %rd84, %rd83, %p20;
; CHECK-NEXT:    shr.u64 %rd118, %rd2, %r9;
; CHECK-NEXT:    add.cc.s64 %rd35, %rd3, -1;
; CHECK-NEXT:    addc.cc.s64 %rd36, %rd4, -1;
; CHECK-NEXT:    mov.b64 %rd110, 0;
; CHECK-NEXT:    mov.b64 %rd113, %rd110;
; CHECK-NEXT:  $L__BB4_2: // %udiv-do-while
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.u64 %rd85, %rd117, 63;
; CHECK-NEXT:    shl.b64 %rd86, %rd118, 1;
; CHECK-NEXT:    or.b64 %rd87, %rd86, %rd85;
; CHECK-NEXT:    shl.b64 %rd88, %rd117, 1;
; CHECK-NEXT:    shr.u64 %rd89, %rd120, 63;
; CHECK-NEXT:    or.b64 %rd90, %rd88, %rd89;
; CHECK-NEXT:    shr.u64 %rd91, %rd119, 63;
; CHECK-NEXT:    shl.b64 %rd92, %rd120, 1;
; CHECK-NEXT:    or.b64 %rd93, %rd92, %rd91;
; CHECK-NEXT:    shl.b64 %rd94, %rd119, 1;
; CHECK-NEXT:    or.b64 %rd119, %rd113, %rd94;
; CHECK-NEXT:    or.b64 %rd120, %rd110, %rd93;
; CHECK-NEXT:    sub.cc.s64 %rd95, %rd35, %rd90;
; CHECK-NEXT:    subc.cc.s64 %rd96, %rd36, %rd87;
; CHECK-NEXT:    shr.s64 %rd97, %rd96, 63;
; CHECK-NEXT:    and.b64 %rd113, %rd97, 1;
; CHECK-NEXT:    and.b64 %rd98, %rd97, %rd3;
; CHECK-NEXT:    and.b64 %rd99, %rd97, %rd4;
; CHECK-NEXT:    sub.cc.s64 %rd117, %rd90, %rd98;
; CHECK-NEXT:    subc.cc.s64 %rd118, %rd87, %rd99;
; CHECK-NEXT:    add.cc.s64 %rd115, %rd115, -1;
; CHECK-NEXT:    addc.cc.s64 %rd116, %rd116, -1;
; CHECK-NEXT:    or.b64 %rd100, %rd115, %rd116;
; CHECK-NEXT:    setp.eq.s64 %p21, %rd100, 0;
; CHECK-NEXT:    @%p21 bra $L__BB4_4;
; CHECK-NEXT:    bra.uni $L__BB4_2;
; CHECK-NEXT:  $L__BB4_4: // %udiv-loop-exit
; CHECK-NEXT:    shr.u64 %rd101, %rd119, 63;
; CHECK-NEXT:    shl.b64 %rd102, %rd120, 1;
; CHECK-NEXT:    or.b64 %rd103, %rd102, %rd101;
; CHECK-NEXT:    shl.b64 %rd104, %rd119, 1;
; CHECK-NEXT:    or.b64 %rd121, %rd113, %rd104;
; CHECK-NEXT:    or.b64 %rd122, %rd110, %rd103;
; CHECK-NEXT:  $L__BB4_5: // %udiv-end
; CHECK-NEXT:    xor.b64 %rd105, %rd121, %rd5;
; CHECK-NEXT:    xor.b64 %rd106, %rd122, %rd5;
; CHECK-NEXT:    sub.cc.s64 %rd107, %rd105, %rd5;
; CHECK-NEXT:    subc.cc.s64 %rd108, %rd106, %rd5;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd107, %rd108};
; CHECK-NEXT:    ret;
  %div = sdiv i128 %lhs, %rhs
  ret i128 %div
}

define i128 @udiv_i128(i128 %lhs, i128 %rhs) {
; CHECK-LABEL: udiv_i128(
; CHECK:       {
; CHECK-NEXT:    .reg .pred %p<20>;
; CHECK-NEXT:    .reg .b32 %r<12>;
; CHECK-NEXT:    .reg .b64 %rd<108>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0: // %_udiv-special-cases
; CHECK-NEXT:    ld.param.v2.b64 {%rd41, %rd42}, [udiv_i128_param_0];
; CHECK-NEXT:    ld.param.v2.b64 {%rd43, %rd44}, [udiv_i128_param_1];
; CHECK-NEXT:    or.b64 %rd45, %rd43, %rd44;
; CHECK-NEXT:    setp.eq.s64 %p1, %rd45, 0;
; CHECK-NEXT:    or.b64 %rd46, %rd41, %rd42;
; CHECK-NEXT:    setp.eq.s64 %p2, %rd46, 0;
; CHECK-NEXT:    or.pred %p3, %p1, %p2;
; CHECK-NEXT:    setp.ne.s64 %p4, %rd44, 0;
; CHECK-NEXT:    clz.b64 %r1, %rd44;
; CHECK-NEXT:    cvt.u64.u32 %rd47, %r1;
; CHECK-NEXT:    clz.b64 %r2, %rd43;
; CHECK-NEXT:    cvt.u64.u32 %rd48, %r2;
; CHECK-NEXT:    add.s64 %rd49, %rd48, 64;
; CHECK-NEXT:    selp.b64 %rd50, %rd47, %rd49, %p4;
; CHECK-NEXT:    setp.ne.s64 %p5, %rd42, 0;
; CHECK-NEXT:    clz.b64 %r3, %rd42;
; CHECK-NEXT:    cvt.u64.u32 %rd52, %r3;
; CHECK-NEXT:    clz.b64 %r4, %rd41;
; CHECK-NEXT:    cvt.u64.u32 %rd53, %r4;
; CHECK-NEXT:    add.s64 %rd54, %rd53, 64;
; CHECK-NEXT:    selp.b64 %rd55, %rd52, %rd54, %p5;
; CHECK-NEXT:    mov.b64 %rd98, 0;
; CHECK-NEXT:    sub.cc.s64 %rd58, %rd50, %rd55;
; CHECK-NEXT:    subc.cc.s64 %rd6, %rd98, 0;
; CHECK-NEXT:    setp.ne.s64 %p6, %rd6, 0;
; CHECK-NEXT:    and.pred %p8, %p6, %p6;
; CHECK-NEXT:    setp.eq.s64 %p9, %rd6, 0;
; CHECK-NEXT:    setp.gt.u64 %p10, %rd58, 127;
; CHECK-NEXT:    and.pred %p11, %p9, %p10;
; CHECK-NEXT:    or.pred %p12, %p11, %p8;
; CHECK-NEXT:    or.pred %p13, %p3, %p12;
; CHECK-NEXT:    xor.b64 %rd59, %rd58, 127;
; CHECK-NEXT:    or.b64 %rd60, %rd59, %rd6;
; CHECK-NEXT:    setp.eq.s64 %p14, %rd60, 0;
; CHECK-NEXT:    selp.b64 %rd107, 0, %rd42, %p13;
; CHECK-NEXT:    selp.b64 %rd106, 0, %rd41, %p13;
; CHECK-NEXT:    or.pred %p15, %p13, %p14;
; CHECK-NEXT:    @%p15 bra $L__BB5_5;
; CHECK-NEXT:  // %bb.3: // %udiv-bb1
; CHECK-NEXT:    add.cc.s64 %rd100, %rd58, 1;
; CHECK-NEXT:    addc.cc.s64 %rd101, %rd6, 0;
; CHECK-NEXT:    or.b64 %rd63, %rd100, %rd101;
; CHECK-NEXT:    setp.eq.s64 %p16, %rd63, 0;
; CHECK-NEXT:    cvt.u32.u64 %r5, %rd58;
; CHECK-NEXT:    sub.s32 %r6, 127, %r5;
; CHECK-NEXT:    shl.b64 %rd64, %rd42, %r6;
; CHECK-NEXT:    sub.s32 %r7, 64, %r6;
; CHECK-NEXT:    shr.u64 %rd65, %rd41, %r7;
; CHECK-NEXT:    or.b64 %rd66, %rd64, %rd65;
; CHECK-NEXT:    sub.s32 %r8, 63, %r5;
; CHECK-NEXT:    shl.b64 %rd67, %rd41, %r8;
; CHECK-NEXT:    setp.gt.s32 %p17, %r6, 63;
; CHECK-NEXT:    selp.b64 %rd105, %rd67, %rd66, %p17;
; CHECK-NEXT:    shl.b64 %rd104, %rd41, %r6;
; CHECK-NEXT:    mov.b64 %rd95, %rd98;
; CHECK-NEXT:    @%p16 bra $L__BB5_4;
; CHECK-NEXT:  // %bb.1: // %udiv-preheader
; CHECK-NEXT:    cvt.u32.u64 %r9, %rd100;
; CHECK-NEXT:    shr.u64 %rd70, %rd41, %r9;
; CHECK-NEXT:    sub.s32 %r10, 64, %r9;
; CHECK-NEXT:    shl.b64 %rd71, %rd42, %r10;
; CHECK-NEXT:    or.b64 %rd72, %rd70, %rd71;
; CHECK-NEXT:    add.s32 %r11, %r9, -64;
; CHECK-NEXT:    shr.u64 %rd73, %rd42, %r11;
; CHECK-NEXT:    setp.gt.s32 %p18, %r9, 63;
; CHECK-NEXT:    selp.b64 %rd102, %rd73, %rd72, %p18;
; CHECK-NEXT:    shr.u64 %rd103, %rd42, %r9;
; CHECK-NEXT:    add.cc.s64 %rd33, %rd43, -1;
; CHECK-NEXT:    addc.cc.s64 %rd34, %rd44, -1;
; CHECK-NEXT:    mov.b64 %rd95, 0;
; CHECK-NEXT:    mov.b64 %rd98, %rd95;
; CHECK-NEXT:  $L__BB5_2: // %udiv-do-while
; CHECK-NEXT:    // =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    shr.u64 %rd74, %rd102, 63;
; CHECK-NEXT:    shl.b64 %rd75, %rd103, 1;
; CHECK-NEXT:    or.b64 %rd76, %rd75, %rd74;
; CHECK-NEXT:    shl.b64 %rd77, %rd102, 1;
; CHECK-NEXT:    shr.u64 %rd78, %rd105, 63;
; CHECK-NEXT:    or.b64 %rd79, %rd77, %rd78;
; CHECK-NEXT:    shr.u64 %rd80, %rd104, 63;
; CHECK-NEXT:    shl.b64 %rd81, %rd105, 1;
; CHECK-NEXT:    or.b64 %rd82, %rd81, %rd80;
; CHECK-NEXT:    shl.b64 %rd83, %rd104, 1;
; CHECK-NEXT:    or.b64 %rd104, %rd98, %rd83;
; CHECK-NEXT:    or.b64 %rd105, %rd95, %rd82;
; CHECK-NEXT:    sub.cc.s64 %rd84, %rd33, %rd79;
; CHECK-NEXT:    subc.cc.s64 %rd85, %rd34, %rd76;
; CHECK-NEXT:    shr.s64 %rd86, %rd85, 63;
; CHECK-NEXT:    and.b64 %rd98, %rd86, 1;
; CHECK-NEXT:    and.b64 %rd87, %rd86, %rd43;
; CHECK-NEXT:    and.b64 %rd88, %rd86, %rd44;
; CHECK-NEXT:    sub.cc.s64 %rd102, %rd79, %rd87;
; CHECK-NEXT:    subc.cc.s64 %rd103, %rd76, %rd88;
; CHECK-NEXT:    add.cc.s64 %rd100, %rd100, -1;
; CHECK-NEXT:    addc.cc.s64 %rd101, %rd101, -1;
; CHECK-NEXT:    or.b64 %rd89, %rd100, %rd101;
; CHECK-NEXT:    setp.eq.s64 %p19, %rd89, 0;
; CHECK-NEXT:    @%p19 bra $L__BB5_4;
; CHECK-NEXT:    bra.uni $L__BB5_2;
; CHECK-NEXT:  $L__BB5_4: // %udiv-loop-exit
; CHECK-NEXT:    shr.u64 %rd90, %rd104, 63;
; CHECK-NEXT:    shl.b64 %rd91, %rd105, 1;
; CHECK-NEXT:    or.b64 %rd92, %rd91, %rd90;
; CHECK-NEXT:    shl.b64 %rd93, %rd104, 1;
; CHECK-NEXT:    or.b64 %rd106, %rd98, %rd93;
; CHECK-NEXT:    or.b64 %rd107, %rd95, %rd92;
; CHECK-NEXT:  $L__BB5_5: // %udiv-end
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd106, %rd107};
; CHECK-NEXT:    ret;
  %div = udiv i128 %lhs, %rhs
  ret i128 %div
}

define i128 @sdiv_i128_pow2k(i128 %lhs) {
; CHECK-LABEL: sdiv_i128_pow2k(
; CHECK:       {
; CHECK-NEXT:    .reg .b64 %rd<11>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.v2.b64 {%rd1, %rd2}, [sdiv_i128_pow2k_param_0];
; CHECK-NEXT:    shr.s64 %rd3, %rd2, 63;
; CHECK-NEXT:    shr.u64 %rd4, %rd3, 31;
; CHECK-NEXT:    add.cc.s64 %rd5, %rd1, %rd4;
; CHECK-NEXT:    addc.cc.s64 %rd6, %rd2, 0;
; CHECK-NEXT:    shl.b64 %rd7, %rd6, 31;
; CHECK-NEXT:    shr.u64 %rd8, %rd5, 33;
; CHECK-NEXT:    or.b64 %rd9, %rd8, %rd7;
; CHECK-NEXT:    shr.s64 %rd10, %rd6, 33;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd9, %rd10};
; CHECK-NEXT:    ret;
  %div = sdiv i128 %lhs, 8589934592
  ret i128 %div
}

define i128 @udiv_i128_pow2k(i128 %lhs) {
; CHECK-LABEL: udiv_i128_pow2k(
; CHECK:       {
; CHECK-NEXT:    .reg .b64 %rd<7>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.v2.b64 {%rd1, %rd2}, [udiv_i128_pow2k_param_0];
; CHECK-NEXT:    shl.b64 %rd3, %rd2, 31;
; CHECK-NEXT:    shr.u64 %rd4, %rd1, 33;
; CHECK-NEXT:    or.b64 %rd5, %rd4, %rd3;
; CHECK-NEXT:    shr.u64 %rd6, %rd2, 33;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd5, %rd6};
; CHECK-NEXT:    ret;
  %div = udiv i128 %lhs, 8589934592
  ret i128 %div
}

define i128 @add_i128(i128 %lhs, i128 %rhs) {
; CHECK-LABEL: add_i128(
; CHECK:       {
; CHECK-NEXT:    .reg .b64 %rd<7>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.v2.b64 {%rd1, %rd2}, [add_i128_param_0];
; CHECK-NEXT:    ld.param.v2.b64 {%rd3, %rd4}, [add_i128_param_1];
; CHECK-NEXT:    add.cc.s64 %rd5, %rd1, %rd3;
; CHECK-NEXT:    addc.cc.s64 %rd6, %rd2, %rd4;
; CHECK-NEXT:    st.param.v2.b64 [func_retval0], {%rd5, %rd6};
; CHECK-NEXT:    ret;
  %result = add i128 %lhs, %rhs
  ret i128 %result
}
