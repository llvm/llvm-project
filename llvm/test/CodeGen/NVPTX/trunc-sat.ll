; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -mtriple=nvptx64 -mcpu=sm_20 -verify-machineinstrs | FileCheck %s
; RUN: %if ptxas %{ llc < %s -mtriple=nvptx64 -mcpu=sm_20 -verify-machineinstrs | %ptxas-verify %}

target triple = "nvptx-unknown-cuda"


define i64 @trunc_ssat_i64_u16(i64 %a) {
; CHECK-LABEL: trunc_ssat_i64_u16(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b64 %rd<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b64 %rd1, [trunc_ssat_i64_u16_param_0];
; CHECK-NEXT:    cvt.sat.u16.s64 %rs1, %rd1;
; CHECK-NEXT:    cvt.u64.u16 %rd2, %rs1;
; CHECK-NEXT:    st.param.b64 [func_retval0], %rd2;
; CHECK-NEXT:    ret;
  %v1 = call i64 @llvm.smax.i64(i64 %a, i64 0)
  %v2 = call i64 @llvm.smin.i64(i64 %v1, i64 65535)
  ret i64 %v2
}

define i32 @trunc_ssat_i32_u16(i32 %a) {
; CHECK-LABEL: trunc_ssat_i32_u16(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b32 %r<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b32 %r1, [trunc_ssat_i32_u16_param_0];
; CHECK-NEXT:    cvt.sat.u16.s32 %rs1, %r1;
; CHECK-NEXT:    cvt.u32.u16 %r2, %rs1;
; CHECK-NEXT:    st.param.b32 [func_retval0], %r2;
; CHECK-NEXT:    ret;
  %v1 = call i32 @llvm.smax.i32(i32 %a, i32 0)
  %v2 = call i32 @llvm.smin.i32(i32 %v1, i32 65535)
  ret i32 %v2
}

define i64 @trunc_ssat_i64_s16(i64 %a) {
; CHECK-LABEL: trunc_ssat_i64_s16(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b64 %rd<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b64 %rd1, [trunc_ssat_i64_s16_param_0];
; CHECK-NEXT:    cvt.sat.s16.s64 %rs1, %rd1;
; CHECK-NEXT:    cvt.s64.s16 %rd2, %rs1;
; CHECK-NEXT:    st.param.b64 [func_retval0], %rd2;
; CHECK-NEXT:    ret;
  %v1 = call i64 @llvm.smax.i64(i64 %a, i64 -32768)
  %v2 = call i64 @llvm.smin.i64(i64 %v1, i64 32767)
  ret i64 %v2
}

define i32 @trunc_ssat_i32_s16(i32 %a) {
; CHECK-LABEL: trunc_ssat_i32_s16(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b32 %r<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b32 %r1, [trunc_ssat_i32_s16_param_0];
; CHECK-NEXT:    cvt.sat.s16.s32 %rs1, %r1;
; CHECK-NEXT:    cvt.s32.s16 %r2, %rs1;
; CHECK-NEXT:    st.param.b32 [func_retval0], %r2;
; CHECK-NEXT:    ret;
  %v1 = call i32 @llvm.smax.i32(i32 %a, i32 -32768)
  %v2 = call i32 @llvm.smin.i32(i32 %v1, i32 32767)
  ret i32 %v2
}

define i64 @trunc_ssat_i64_u8(i64 %a) {
; CHECK-LABEL: trunc_ssat_i64_u8(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b64 %rd<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b64 %rd1, [trunc_ssat_i64_u8_param_0];
; CHECK-NEXT:    cvt.sat.u8.u64 %rs1, %rd1;
; CHECK-NEXT:    cvt.u64.u16 %rd2, %rs1;
; CHECK-NEXT:    st.param.b64 [func_retval0], %rd2;
; CHECK-NEXT:    ret;
  %v1 = call i64 @llvm.smax.i64(i64 %a, i64 0)
  %v2 = call i64 @llvm.smin.i64(i64 %v1, i64 255)
  ret i64 %v2
}

define i32 @trunc_ssat_i32_u8(i32 %a) {
; CHECK-LABEL: trunc_ssat_i32_u8(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b32 %r<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b32 %r1, [trunc_ssat_i32_u8_param_0];
; CHECK-NEXT:    cvt.sat.u8.u32 %rs1, %r1;
; CHECK-NEXT:    cvt.u32.u16 %r2, %rs1;
; CHECK-NEXT:    st.param.b32 [func_retval0], %r2;
; CHECK-NEXT:    ret;
  %v1 = call i32 @llvm.smax.i32(i32 %a, i32 0)
  %v2 = call i32 @llvm.smin.i32(i32 %v1, i32 255)
  ret i32 %v2
}

define i16 @trunc_ssat_i16_u8(i16 %a) {
; CHECK-LABEL: trunc_ssat_i16_u8(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .b32 %r<2>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [trunc_ssat_i16_u8_param_0];
; CHECK-NEXT:    cvt.sat.u8.u16 %rs2, %rs1;
; CHECK-NEXT:    cvt.u32.u16 %r1, %rs2;
; CHECK-NEXT:    st.param.b32 [func_retval0], %r1;
; CHECK-NEXT:    ret;
  %v1 = call i16 @llvm.smax.i16(i16 %a, i16 0)
  %v2 = call i16 @llvm.smin.i16(i16 %v1, i16 255)
  ret i16 %v2
}

define i64 @trunc_ssat_i64_s8(i64 %a) {
; CHECK-LABEL: trunc_ssat_i64_s8(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b64 %rd<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b64 %rd1, [trunc_ssat_i64_s8_param_0];
; CHECK-NEXT:    cvt.sat.s8.s64 %rs1, %rd1;
; CHECK-NEXT:    cvt.s64.s16 %rd2, %rs1;
; CHECK-NEXT:    st.param.b64 [func_retval0], %rd2;
; CHECK-NEXT:    ret;
  %v1 = call i64 @llvm.smax.i64(i64 %a, i64 -128)
  %v2 = call i64 @llvm.smin.i64(i64 %v1, i64 127)
  ret i64 %v2
}

define i32 @trunc_ssat_i32_s8(i32 %a) {
; CHECK-LABEL: trunc_ssat_i32_s8(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<2>;
; CHECK-NEXT:    .reg .b32 %r<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b32 %r1, [trunc_ssat_i32_s8_param_0];
; CHECK-NEXT:    cvt.sat.s8.s32 %rs1, %r1;
; CHECK-NEXT:    cvt.s32.s16 %r2, %rs1;
; CHECK-NEXT:    st.param.b32 [func_retval0], %r2;
; CHECK-NEXT:    ret;
  %v1 = call i32 @llvm.smax.i32(i32 %a, i32 -128)
  %v2 = call i32 @llvm.smin.i32(i32 %v1, i32 127)
  ret i32 %v2
}

define i16 @trunc_ssat_i16_s8(i16 %a) {
; CHECK-LABEL: trunc_ssat_i16_s8(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .b32 %r<2>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [trunc_ssat_i16_s8_param_0];
; CHECK-NEXT:    cvt.sat.s8.s16 %rs2, %rs1;
; CHECK-NEXT:    cvt.u32.u16 %r1, %rs2;
; CHECK-NEXT:    st.param.b32 [func_retval0], %r1;
; CHECK-NEXT:    ret;
  %v1 = call i16 @llvm.smax.i16(i16 %a, i16 -128)
  %v2 = call i16 @llvm.smin.i16(i16 %v1, i16 127)
  ret i16 %v2
}

