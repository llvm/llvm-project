; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 5
; RUN: llc < %s -march=nvptx64 -mcpu=sm_100 -mattr=+ptx86 | FileCheck %s

; Basic f32.f16 variants with different rounding modes
define float @test_fma_rn_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rn_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rn_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rn_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rn_h_f_param_2];
; CHECK-NEXT:    fma.rn.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rn.h.f(half %a, half %b, float %c)
  ret float %res
}

define float @test_fma_rz_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rz_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rz_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rz_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rz_h_f_param_2];
; CHECK-NEXT:    fma.rz.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rz.h.f(half %a, half %b, float %c)
  ret float %res
}

define float @test_fma_rm_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rm_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rm_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rm_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rm_h_f_param_2];
; CHECK-NEXT:    fma.rm.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rm.h.f(half %a, half %b, float %c)
  ret float %res
}

define float @test_fma_rp_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rp_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rp_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rp_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rp_h_f_param_2];
; CHECK-NEXT:    fma.rp.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rp.h.f(half %a, half %b, float %c)
  ret float %res
}

; Basic f32.bf16 variants with different rounding modes
define float @test_fma_rn_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rn_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rn_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rn_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rn_bf_f_param_2];
; CHECK-NEXT:    fma.rn.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rn.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

define float @test_fma_rz_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rz_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rz_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rz_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rz_bf_f_param_2];
; CHECK-NEXT:    fma.rz.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rz.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

define float @test_fma_rm_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rm_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rm_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rm_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rm_bf_f_param_2];
; CHECK-NEXT:    fma.rm.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rm.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

define float @test_fma_rp_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rp_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rp_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rp_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rp_bf_f_param_2];
; CHECK-NEXT:    fma.rp.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rp.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

; f32.f16 variants with sat flag
define float @test_fma_rn_sat_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rn_sat_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rn_sat_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rn_sat_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rn_sat_h_f_param_2];
; CHECK-NEXT:    fma.rn.sat.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rn.sat.h.f(half %a, half %b, float %c)
  ret float %res
}

define float @test_fma_rz_sat_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rz_sat_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rz_sat_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rz_sat_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rz_sat_h_f_param_2];
; CHECK-NEXT:    fma.rz.sat.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rz.sat.h.f(half %a, half %b, float %c)
  ret float %res
}

define float @test_fma_rm_sat_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rm_sat_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rm_sat_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rm_sat_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rm_sat_h_f_param_2];
; CHECK-NEXT:    fma.rm.sat.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rm.sat.h.f(half %a, half %b, float %c)
  ret float %res
}

define float @test_fma_rp_sat_h_f(half %a, half %b, float %c) {
; CHECK-LABEL: test_fma_rp_sat_h_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rp_sat_h_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rp_sat_h_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rp_sat_h_f_param_2];
; CHECK-NEXT:    fma.rp.sat.f32.f16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rp.sat.h.f(half %a, half %b, float %c)
  ret float %res
}

; f32.bf16 variants with sat flag
define float @test_fma_rn_sat_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rn_sat_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rn_sat_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rn_sat_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rn_sat_bf_f_param_2];
; CHECK-NEXT:    fma.rn.sat.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rn.sat.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

define float @test_fma_rz_sat_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rz_sat_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rz_sat_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rz_sat_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rz_sat_bf_f_param_2];
; CHECK-NEXT:    fma.rz.sat.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rz.sat.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

define float @test_fma_rm_sat_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rm_sat_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rm_sat_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rm_sat_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rm_sat_bf_f_param_2];
; CHECK-NEXT:    fma.rm.sat.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rm.sat.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}

define float @test_fma_rp_sat_bf_f(bfloat %a, bfloat %b, float %c) {
; CHECK-LABEL: test_fma_rp_sat_bf_f(
; CHECK:       {
; CHECK-NEXT:    .reg .b16 %rs<3>;
; CHECK-NEXT:    .reg .f32 %f<3>;
; CHECK-EMPTY:
; CHECK-NEXT:  // %bb.0:
; CHECK-NEXT:    ld.param.b16 %rs1, [test_fma_rp_sat_bf_f_param_0];
; CHECK-NEXT:    ld.param.b16 %rs2, [test_fma_rp_sat_bf_f_param_1];
; CHECK-NEXT:    ld.param.f32 %f1, [test_fma_rp_sat_bf_f_param_2];
; CHECK-NEXT:    fma.rp.sat.f32.bf16 %f2, %rs1, %rs2, %f1;
; CHECK-NEXT:    st.param.f32 [func_retval0], %f2;
; CHECK-NEXT:    ret;
  %res = call float @llvm.nvvm.fma.rp.sat.bf.f(bfloat %a, bfloat %b, float %c)
  ret float %res
}
