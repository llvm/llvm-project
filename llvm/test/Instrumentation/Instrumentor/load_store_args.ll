; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instrumentor -instrumentor-read-config-file=%S/load_store_config.json -S | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"


define noundef zeroext i1 @_Z15store_load_boolPbb(ptr captures(none) noundef initializes((0, 1)) %A, i1 noundef zeroext %Val) {
; CHECK-LABEL: define noundef zeroext i1 @_Z15store_load_boolPbb(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 1)) [[A:%.*]], i1 noundef zeroext [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[STOREDV:%.*]] = zext i1 [[VAL]] to i8
; CHECK-NEXT:    [[TMP0:%.*]] = zext i8 [[STOREDV]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store i8 [[STOREDV]], ptr [[TMP1]], align 1
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 1
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = zext i8 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP4]], i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP5]] to i8
; CHECK-NEXT:    [[LOADEDV2:%.*]] = trunc nuw i8 [[TMP7]] to i1
; CHECK-NEXT:    ret i1 [[LOADEDV2]]
;
entry:
  %storedv = zext i1 %Val to i8
  store i8 %storedv, ptr %A, align 1
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 1
  %0 = load i8, ptr %arrayidx, align 1
  %loadedv2 = trunc nuw i8 %0 to i1
  ret i1 %loadedv2
}


define noundef signext i8 @_Z15store_load_charPcc(ptr captures(none) noundef initializes((0, 1)) %A, i8 noundef signext %Val) {
; CHECK-LABEL: define noundef signext i8 @_Z15store_load_charPcc(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 1)) [[A:%.*]], i8 noundef signext [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = zext i8 [[VAL]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store i8 [[VAL]], ptr [[TMP1]], align 1
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 1
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    [[TMP4:%.*]] = zext i8 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP4]], i64 1, i64 1, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP5]] to i8
; CHECK-NEXT:    ret i8 [[TMP7]]
;
entry:
  store i8 %Val, ptr %A, align 1
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 1
  %0 = load i8, ptr %arrayidx, align 1
  ret i8 %0
}


define noundef signext i16 @_Z16store_load_shortPss(ptr captures(none) noundef initializes((0, 2)) %A, i16 noundef signext %Val) {
; CHECK-LABEL: define noundef signext i16 @_Z16store_load_shortPss(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 2)) [[A:%.*]], i16 noundef signext [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = zext i16 [[VAL]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 2, i64 2, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store i16 [[VAL]], ptr [[TMP1]], align 2
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 2, i64 2, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 2
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 2, i64 2, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load i16, ptr [[TMP2]], align 2
; CHECK-NEXT:    [[TMP4:%.*]] = zext i16 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP4]], i64 2, i64 2, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP5]] to i16
; CHECK-NEXT:    ret i16 [[TMP7]]
;
entry:
  store i16 %Val, ptr %A, align 2
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 2
  %0 = load i16, ptr %arrayidx, align 2
  ret i16 %0
}


define noundef i32 @_Z14store_load_intPii(ptr captures(none) noundef initializes((0, 4)) %A, i32 noundef %Val) {
; CHECK-LABEL: define noundef i32 @_Z14store_load_intPii(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 4)) [[A:%.*]], i32 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = zext i32 [[VAL]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 4, i64 4, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store i32 [[VAL]], ptr [[TMP1]], align 4
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 4, i64 4, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 4
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 4, i64 4, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[TMP2]], align 4
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP4]], i64 4, i64 4, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP7:%.*]] = trunc i64 [[TMP5]] to i32
; CHECK-NEXT:    ret i32 [[TMP7]]
;
entry:
  store i32 %Val, ptr %A, align 4
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 4
  %0 = load i32, ptr %arrayidx, align 4
  ret i32 %0
}


define noundef i64 @_Z15store_load_longPll(ptr captures(none) noundef initializes((0, 8)) %A, i64 noundef %Val) {
; CHECK-LABEL: define noundef i64 @_Z15store_load_longPll(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 8)) [[A:%.*]], i64 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[VAL]], i64 8, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store i64 [[VAL]], ptr [[TMP0]], align 8
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[VAL]], i64 8, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 8
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 8, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP2:%.*]] = load i64, ptr [[TMP1]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP2]], i64 8, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    ret i64 [[TMP4]]
;
entry:
  store i64 %Val, ptr %A, align 8
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 8
  %0 = load i64, ptr %arrayidx, align 8
  ret i64 %0
}


define noundef i128 @_Z20store_load_long_longPxx(ptr captures(none) noundef initializes((0, 16)) %A, i128 noundef %Val) {
; CHECK-LABEL: define noundef i128 @_Z20store_load_long_longPxx(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 16)) [[A:%.*]], i128 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca i128, align 16
; CHECK-NEXT:    store i128 [[VAL]], ptr [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store_ind(ptr [[A]], i32 0, ptr [[TMP0]], i64 16, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store i128 [[VAL]], ptr [[TMP1]], align 8
; CHECK-NEXT:    call void @__instrumentor_post_store_ind(ptr [[A]], i32 0, ptr [[TMP0]], i64 16, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 16
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 16, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load i128, ptr [[TMP4]], align 8
; CHECK-NEXT:    store i128 [[TMP3]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @__instrumentor_post_load_ind(ptr [[ARRAYIDX]], i32 0, ptr [[TMP0]], i64 16, i64 8, i32 12, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP2:%.*]] = load i128, ptr [[TMP0]], align 16
; CHECK-NEXT:    ret i128 [[TMP2]]
;
entry:
  store i128 %Val, ptr %A, align 8
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 16
  %0 = load i128, ptr %arrayidx, align 8
  ret i128 %0
}


define noundef float @_Z16store_load_floatPff(ptr captures(none) noundef initializes((0, 4)) %A, float noundef %Val) {
; CHECK-LABEL: define noundef float @_Z16store_load_floatPff(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 4)) [[A:%.*]], float noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast float [[VAL]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[TMP1]], i64 4, i64 4, i32 2, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store float [[VAL]], ptr [[TMP2]], align 4
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[TMP1]], i64 4, i64 4, i32 2, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 4
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 4, i64 4, i32 2, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP4:%.*]] = load float, ptr [[TMP3]], align 4
; CHECK-NEXT:    [[TMP5:%.*]] = bitcast float [[TMP4]] to i32
; CHECK-NEXT:    [[TMP6:%.*]] = zext i32 [[TMP5]] to i64
; CHECK-NEXT:    [[TMP7:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP6]], i64 4, i64 4, i32 2, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP8:%.*]] = trunc i64 [[TMP7]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = bitcast i32 [[TMP8]] to float
; CHECK-NEXT:    ret float [[TMP10]]
;
entry:
  store float %Val, ptr %A, align 4
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 4
  %0 = load float, ptr %arrayidx, align 4
  ret float %0
}


define noundef double @_Z17store_load_doublePdd(ptr captures(none) noundef initializes((0, 8)) %A, double noundef %Val) {
; CHECK-LABEL: define noundef double @_Z17store_load_doublePdd(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 8)) [[A:%.*]], double noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = bitcast double [[VAL]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 8, i64 8, i32 3, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store double [[VAL]], ptr [[TMP1]], align 8
; CHECK-NEXT:    call void @__instrumentor_post_store(ptr [[A]], i32 0, i64 [[TMP0]], i64 8, i64 8, i32 3, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 8
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 8, i64 8, i32 3, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load double, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = bitcast double [[TMP3]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = call i64 @__instrumentor_post_load(ptr [[ARRAYIDX]], i32 0, i64 [[TMP4]], i64 8, i64 8, i32 3, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP7:%.*]] = bitcast i64 [[TMP5]] to double
; CHECK-NEXT:    ret double [[TMP7]]
;
entry:
  store double %Val, ptr %A, align 8
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 8
  %0 = load double, ptr %arrayidx, align 8
  ret double %0
}


define noundef x86_fp80 @_Z22store_load_long_doublePee(ptr captures(none) noundef initializes((0, 10)) %A, x86_fp80 noundef %Val) {
; CHECK-LABEL: define noundef x86_fp80 @_Z22store_load_long_doublePee(
; CHECK-SAME: ptr noundef captures(none) initializes((0, 10)) [[A:%.*]], x86_fp80 noundef [[VAL:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca x86_fp80, align 16
; CHECK-NEXT:    store x86_fp80 [[VAL]], ptr [[TMP0]], align 16
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__instrumentor_pre_store_ind(ptr [[A]], i32 0, ptr [[TMP0]], i64 10, i64 16, i32 4, i32 0, i8 1, i8 0)
; CHECK-NEXT:    store x86_fp80 [[VAL]], ptr [[TMP1]], align 16
; CHECK-NEXT:    call void @__instrumentor_post_store_ind(ptr [[A]], i32 0, ptr [[TMP0]], i64 10, i64 16, i32 4, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds nuw i8, ptr [[A]], i64 16
; CHECK-NEXT:    [[TMP4:%.*]] = call ptr @__instrumentor_pre_load(ptr [[ARRAYIDX]], i32 0, i64 10, i64 16, i32 4, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP3:%.*]] = load x86_fp80, ptr [[TMP4]], align 16
; CHECK-NEXT:    store x86_fp80 [[TMP3]], ptr [[TMP0]], align 16
; CHECK-NEXT:    call void @__instrumentor_post_load_ind(ptr [[ARRAYIDX]], i32 0, ptr [[TMP0]], i64 10, i64 16, i32 4, i32 0, i8 1, i8 0)
; CHECK-NEXT:    [[TMP2:%.*]] = load x86_fp80, ptr [[TMP0]], align 16
; CHECK-NEXT:    ret x86_fp80 [[TMP2]]
;
entry:
  store x86_fp80 %Val, ptr %A, align 16
  %arrayidx = getelementptr inbounds nuw i8, ptr %A, i64 16
  %0 = load x86_fp80, ptr %arrayidx, align 16
  ret x86_fp80 %0
}
