; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=asan -asan-dormant -S | FileCheck --check-prefixes=CHECK %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local i32 @test(ptr %a) sanitize_address {
; CHECK-LABEL: define dso_local i32 @test(
; CHECK-SAME: ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A_ADDR:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr [[A]], ptr [[A_ADDR]], align 8
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[A_ADDR]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i1, ptr @__asan_is_dormant, align 1
; CHECK-NEXT:    [[TMP2:%.*]] = xor i1 [[TMP1]], true
; CHECK-NEXT:    br i1 [[TMP2]], label %[[BB3:.*]], label %[[BB17:.*]], !prof [[PROF7:![0-9]+]]
; CHECK:       [[BB3]]:
; CHECK-NEXT:    [[TMP4:%.*]] = ptrtoint ptr [[TMP0]] to i64
; CHECK-NEXT:    [[TMP5:%.*]] = lshr i64 [[TMP4]], 3
; CHECK-NEXT:    [[TMP6:%.*]] = add i64 [[TMP5]], 2147450880
; CHECK-NEXT:    [[TMP7:%.*]] = inttoptr i64 [[TMP6]] to ptr
; CHECK-NEXT:    [[TMP8:%.*]] = load i8, ptr [[TMP7]], align 1
; CHECK-NEXT:    [[TMP9:%.*]] = icmp ne i8 [[TMP8]], 0
; CHECK-NEXT:    br i1 [[TMP9]], label %[[BB10:.*]], label %[[BB16:.*]], !prof [[PROF7]]
; CHECK:       [[BB10]]:
; CHECK-NEXT:    [[TMP11:%.*]] = and i64 [[TMP4]], 7
; CHECK-NEXT:    [[TMP12:%.*]] = add i64 [[TMP11]], 3
; CHECK-NEXT:    [[TMP13:%.*]] = trunc i64 [[TMP12]] to i8
; CHECK-NEXT:    [[TMP14:%.*]] = icmp sge i8 [[TMP13]], [[TMP8]]
; CHECK-NEXT:    br i1 [[TMP14]], label %[[BB15:.*]], label %[[BB16]]
; CHECK:       [[BB15]]:
; CHECK-NEXT:    call void @__asan_report_store4(i64 [[TMP4]]) #[[ATTR3:[0-9]+]]
; CHECK-NEXT:    unreachable
; CHECK:       [[BB16]]:
; CHECK-NEXT:    br label %[[BB17]]
; CHECK:       [[BB17]]:
; CHECK-NEXT:    store i32 5, ptr [[TMP0]], align 4
; CHECK-NEXT:    [[TMP18:%.*]] = load ptr, ptr [[A_ADDR]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = load i1, ptr @__asan_is_dormant, align 1
; CHECK-NEXT:    [[TMP20:%.*]] = xor i1 [[TMP19]], true
; CHECK-NEXT:    br i1 [[TMP20]], label %[[BB21:.*]], label %[[BB35:.*]], !prof [[PROF7]]
; CHECK:       [[BB21]]:
; CHECK-NEXT:    [[TMP22:%.*]] = ptrtoint ptr [[TMP18]] to i64
; CHECK-NEXT:    [[TMP23:%.*]] = lshr i64 [[TMP22]], 3
; CHECK-NEXT:    [[TMP24:%.*]] = add i64 [[TMP23]], 2147450880
; CHECK-NEXT:    [[TMP25:%.*]] = inttoptr i64 [[TMP24]] to ptr
; CHECK-NEXT:    [[TMP26:%.*]] = load i8, ptr [[TMP25]], align 1
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ne i8 [[TMP26]], 0
; CHECK-NEXT:    br i1 [[TMP27]], label %[[BB28:.*]], label %[[BB34:.*]], !prof [[PROF7]]
; CHECK:       [[BB28]]:
; CHECK-NEXT:    [[TMP29:%.*]] = and i64 [[TMP22]], 7
; CHECK-NEXT:    [[TMP30:%.*]] = add i64 [[TMP29]], 3
; CHECK-NEXT:    [[TMP31:%.*]] = trunc i64 [[TMP30]] to i8
; CHECK-NEXT:    [[TMP32:%.*]] = icmp sge i8 [[TMP31]], [[TMP26]]
; CHECK-NEXT:    br i1 [[TMP32]], label %[[BB33:.*]], label %[[BB34]]
; CHECK:       [[BB33]]:
; CHECK-NEXT:    call void @__asan_report_load4(i64 [[TMP22]]) #[[ATTR3]]
; CHECK-NEXT:    unreachable
; CHECK:       [[BB34]]:
; CHECK-NEXT:    br label %[[BB35]]
; CHECK:       [[BB35]]:
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, ptr [[TMP18]], align 4
; CHECK-NEXT:    ret i32 [[TMP36]]
;
entry:
  %a.addr = alloca ptr, align 8
  store ptr %a, ptr %a.addr, align 8
  %0 = load ptr, ptr %a.addr, align 8
  store i32 5, ptr %0, align 4
  %1 = load ptr, ptr %a.addr, align 8
  %2 = load i32, ptr %1, align 4
  ret i32 %2

}

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"clang version 20.0.0git (https://github.com/gbMattN/llvm-project.git 3d0736cd0a60f7f0f78a14982091e5687e2be7da)"}
;.
; CHECK: [[PROF7]] = !{!"branch_weights", i32 1, i32 1048575}
;.
