; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -msan-check-access-address=0 -S -passes=msan 2>&1 | FileCheck %s
; RUN: opt < %s -msan-check-access-address=0 -msan-track-origins=1 -S -passes=msan 2>&1 | FileCheck -check-prefix=CHECK-ORIGIN %s

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define [2 x i32] @InsertValue(i32 %x, i32 %y) sanitize_memory {
; CHECK-LABEL: define [2 x i32] @InsertValue(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @__msan_param_tls, align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr getelementptr (i8, ptr @__msan_param_tls, i64 8), align 8
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[TMP2:%.*]] = insertvalue [2 x i32] [i32 -1, i32 -1], i32 [[TMP0]], 0
; CHECK-NEXT:    [[A:%.*]] = insertvalue [2 x i32] undef, i32 [[X]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = insertvalue [2 x i32] [[TMP2]], i32 [[TMP1]], 1
; CHECK-NEXT:    [[B:%.*]] = insertvalue [2 x i32] [[A]], i32 [[Y]], 1
; CHECK-NEXT:    store [2 x i32] [[TMP3]], ptr @__msan_retval_tls, align 8
; CHECK-NEXT:    ret [2 x i32] [[B]]
;
; CHECK-ORIGIN-LABEL: define [2 x i32] @InsertValue(
; CHECK-ORIGIN-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-ORIGIN-NEXT:  [[ENTRY:.*:]]
; CHECK-ORIGIN-NEXT:    [[TMP0:%.*]] = load i32, ptr @__msan_param_tls, align 8
; CHECK-ORIGIN-NEXT:    [[TMP1:%.*]] = load i32, ptr @__msan_param_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    [[TMP2:%.*]] = load i32, ptr getelementptr (i8, ptr @__msan_param_tls, i64 8), align 8
; CHECK-ORIGIN-NEXT:    [[TMP3:%.*]] = load i32, ptr getelementptr (i8, ptr @__msan_param_origin_tls, i64 8), align 4
; CHECK-ORIGIN-NEXT:    call void @llvm.donothing()
; CHECK-ORIGIN-NEXT:    [[TMP4:%.*]] = insertvalue [2 x i32] [i32 -1, i32 -1], i32 [[TMP0]], 0
; CHECK-ORIGIN-NEXT:    [[TMP5:%.*]] = icmp ne i32 [[TMP0]], 0
; CHECK-ORIGIN-NEXT:    [[TMP6:%.*]] = select i1 [[TMP5]], i32 [[TMP1]], i32 0
; CHECK-ORIGIN-NEXT:    [[A:%.*]] = insertvalue [2 x i32] undef, i32 [[X]], 0
; CHECK-ORIGIN-NEXT:    [[TMP7:%.*]] = insertvalue [2 x i32] [[TMP4]], i32 [[TMP2]], 1
; CHECK-ORIGIN-NEXT:    [[TMP8:%.*]] = icmp ne i32 [[TMP2]], 0
; CHECK-ORIGIN-NEXT:    [[TMP9:%.*]] = select i1 [[TMP8]], i32 [[TMP3]], i32 [[TMP6]]
; CHECK-ORIGIN-NEXT:    [[B:%.*]] = insertvalue [2 x i32] [[A]], i32 [[Y]], 1
; CHECK-ORIGIN-NEXT:    store [2 x i32] [[TMP7]], ptr @__msan_retval_tls, align 8
; CHECK-ORIGIN-NEXT:    store i32 [[TMP9]], ptr @__msan_retval_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    ret [2 x i32] [[B]]
;
entry:
  %a = insertvalue [2 x i32] undef, i32 %x, 0
  %b = insertvalue [2 x i32] %a, i32 %y, 1
  ret [2 x i32] %b
}

define [2 x double] @InsertValueDouble(double %x, double %y) sanitize_memory {
; CHECK-LABEL: define [2 x double] @InsertValueDouble(
; CHECK-SAME: double [[X:%.*]], double [[Y:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i64, ptr @__msan_param_tls, align 8
; CHECK-NEXT:    [[TMP1:%.*]] = load i64, ptr getelementptr (i8, ptr @__msan_param_tls, i64 8), align 8
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[TMP2:%.*]] = insertvalue [2 x i64] [i64 -1, i64 -1], i64 [[TMP0]], 0
; CHECK-NEXT:    [[A:%.*]] = insertvalue [2 x double] undef, double [[X]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = insertvalue [2 x i64] [[TMP2]], i64 [[TMP1]], 1
; CHECK-NEXT:    [[B:%.*]] = insertvalue [2 x double] [[A]], double [[Y]], 1
; CHECK-NEXT:    store [2 x i64] [[TMP3]], ptr @__msan_retval_tls, align 8
; CHECK-NEXT:    ret [2 x double] [[B]]
;
; CHECK-ORIGIN-LABEL: define [2 x double] @InsertValueDouble(
; CHECK-ORIGIN-SAME: double [[X:%.*]], double [[Y:%.*]]) #[[ATTR0]] {
; CHECK-ORIGIN-NEXT:  [[ENTRY:.*:]]
; CHECK-ORIGIN-NEXT:    [[TMP0:%.*]] = load i64, ptr @__msan_param_tls, align 8
; CHECK-ORIGIN-NEXT:    [[TMP1:%.*]] = load i32, ptr @__msan_param_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    [[TMP2:%.*]] = load i64, ptr getelementptr (i8, ptr @__msan_param_tls, i64 8), align 8
; CHECK-ORIGIN-NEXT:    [[TMP3:%.*]] = load i32, ptr getelementptr (i8, ptr @__msan_param_origin_tls, i64 8), align 4
; CHECK-ORIGIN-NEXT:    call void @llvm.donothing()
; CHECK-ORIGIN-NEXT:    [[TMP4:%.*]] = insertvalue [2 x i64] [i64 -1, i64 -1], i64 [[TMP0]], 0
; CHECK-ORIGIN-NEXT:    [[TMP5:%.*]] = icmp ne i64 [[TMP0]], 0
; CHECK-ORIGIN-NEXT:    [[TMP6:%.*]] = select i1 [[TMP5]], i32 [[TMP1]], i32 0
; CHECK-ORIGIN-NEXT:    [[A:%.*]] = insertvalue [2 x double] undef, double [[X]], 0
; CHECK-ORIGIN-NEXT:    [[TMP7:%.*]] = insertvalue [2 x i64] [[TMP4]], i64 [[TMP2]], 1
; CHECK-ORIGIN-NEXT:    [[TMP8:%.*]] = icmp ne i64 [[TMP2]], 0
; CHECK-ORIGIN-NEXT:    [[TMP9:%.*]] = select i1 [[TMP8]], i32 [[TMP3]], i32 [[TMP6]]
; CHECK-ORIGIN-NEXT:    [[B:%.*]] = insertvalue [2 x double] [[A]], double [[Y]], 1
; CHECK-ORIGIN-NEXT:    store [2 x i64] [[TMP7]], ptr @__msan_retval_tls, align 8
; CHECK-ORIGIN-NEXT:    store i32 [[TMP9]], ptr @__msan_retval_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    ret [2 x double] [[B]]
;
entry:
  %a = insertvalue [2 x double] undef, double %x, 0
  %b = insertvalue [2 x double] %a, double %y, 1
  ret [2 x double] %b
}

define i32 @ExtractValue([2 x i32] %a) sanitize_memory {
; CHECK-LABEL: define i32 @ExtractValue(
; CHECK-SAME: [2 x i32] [[A:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load [2 x i32], ptr @__msan_param_tls, align 8
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[TMP1:%.*]] = extractvalue [2 x i32] [[TMP0]], 1
; CHECK-NEXT:    [[X:%.*]] = extractvalue [2 x i32] [[A]], 1
; CHECK-NEXT:    store i32 [[TMP1]], ptr @__msan_retval_tls, align 8
; CHECK-NEXT:    ret i32 [[X]]
;
; CHECK-ORIGIN-LABEL: define i32 @ExtractValue(
; CHECK-ORIGIN-SAME: [2 x i32] [[A:%.*]]) #[[ATTR0]] {
; CHECK-ORIGIN-NEXT:  [[ENTRY:.*:]]
; CHECK-ORIGIN-NEXT:    [[TMP0:%.*]] = load [2 x i32], ptr @__msan_param_tls, align 8
; CHECK-ORIGIN-NEXT:    [[TMP1:%.*]] = load i32, ptr @__msan_param_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    call void @llvm.donothing()
; CHECK-ORIGIN-NEXT:    [[TMP2:%.*]] = extractvalue [2 x i32] [[TMP0]], 1
; CHECK-ORIGIN-NEXT:    [[X:%.*]] = extractvalue [2 x i32] [[A]], 1
; CHECK-ORIGIN-NEXT:    store i32 [[TMP2]], ptr @__msan_retval_tls, align 8
; CHECK-ORIGIN-NEXT:    store i32 [[TMP1]], ptr @__msan_retval_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    ret i32 [[X]]
;
entry:
  %x = extractvalue [2 x i32] %a, 1
  ret i32 %x
}

; Regression test for PR20493.

%MyStruct = type { i32, i32, [3 x i32] }

define i32 @ArrayInStruct(%MyStruct %s) sanitize_memory {
; CHECK-LABEL: define i32 @ArrayInStruct(
; CHECK-SAME: [[MYSTRUCT:%.*]] [[S:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load { i32, i32, [3 x i32] }, ptr @__msan_param_tls, align 8
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue { i32, i32, [3 x i32] } [[TMP1]], 2, 1
; CHECK-NEXT:    [[X:%.*]] = extractvalue [[MYSTRUCT]] [[S]], 2, 1
; CHECK-NEXT:    store i32 [[TMP2]], ptr @__msan_retval_tls, align 8
; CHECK-NEXT:    ret i32 [[X]]
;
; CHECK-ORIGIN-LABEL: define i32 @ArrayInStruct(
; CHECK-ORIGIN-SAME: [[MYSTRUCT:%.*]] [[S:%.*]]) #[[ATTR0]] {
; CHECK-ORIGIN-NEXT:    [[TMP1:%.*]] = load { i32, i32, [3 x i32] }, ptr @__msan_param_tls, align 8
; CHECK-ORIGIN-NEXT:    [[TMP2:%.*]] = load i32, ptr @__msan_param_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    call void @llvm.donothing()
; CHECK-ORIGIN-NEXT:    [[TMP3:%.*]] = extractvalue { i32, i32, [3 x i32] } [[TMP1]], 2, 1
; CHECK-ORIGIN-NEXT:    [[X:%.*]] = extractvalue [[MYSTRUCT]] [[S]], 2, 1
; CHECK-ORIGIN-NEXT:    store i32 [[TMP3]], ptr @__msan_retval_tls, align 8
; CHECK-ORIGIN-NEXT:    store i32 [[TMP2]], ptr @__msan_retval_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    ret i32 [[X]]
;
  %x = extractvalue %MyStruct %s, 2, 1
  ret i32 %x
}

define i32 @ArrayOfStructs([3 x { i32, i32 }] %a) sanitize_memory {
; CHECK-LABEL: define i32 @ArrayOfStructs(
; CHECK-SAME: [3 x { i32, i32 }] [[A:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load [3 x { i32, i32 }], ptr @__msan_param_tls, align 8
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [3 x { i32, i32 }] [[TMP1]], 2, 1
; CHECK-NEXT:    [[X:%.*]] = extractvalue [3 x { i32, i32 }] [[A]], 2, 1
; CHECK-NEXT:    store i32 [[TMP2]], ptr @__msan_retval_tls, align 8
; CHECK-NEXT:    ret i32 [[X]]
;
; CHECK-ORIGIN-LABEL: define i32 @ArrayOfStructs(
; CHECK-ORIGIN-SAME: [3 x { i32, i32 }] [[A:%.*]]) #[[ATTR0]] {
; CHECK-ORIGIN-NEXT:    [[TMP1:%.*]] = load [3 x { i32, i32 }], ptr @__msan_param_tls, align 8
; CHECK-ORIGIN-NEXT:    [[TMP2:%.*]] = load i32, ptr @__msan_param_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    call void @llvm.donothing()
; CHECK-ORIGIN-NEXT:    [[TMP3:%.*]] = extractvalue [3 x { i32, i32 }] [[TMP1]], 2, 1
; CHECK-ORIGIN-NEXT:    [[X:%.*]] = extractvalue [3 x { i32, i32 }] [[A]], 2, 1
; CHECK-ORIGIN-NEXT:    store i32 [[TMP3]], ptr @__msan_retval_tls, align 8
; CHECK-ORIGIN-NEXT:    store i32 [[TMP2]], ptr @__msan_retval_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    ret i32 [[X]]
;
  %x = extractvalue [3 x { i32, i32 }] %a, 2, 1
  ret i32 %x
}

define <8 x i16> @ArrayOfVectors([3 x <8 x i16>] %a) sanitize_memory {
; CHECK-LABEL: define <8 x i16> @ArrayOfVectors(
; CHECK-SAME: [3 x <8 x i16>] [[A:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = load [3 x <8 x i16>], ptr @__msan_param_tls, align 8
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[TMP2:%.*]] = extractvalue [3 x <8 x i16>] [[TMP1]], 1
; CHECK-NEXT:    [[X:%.*]] = extractvalue [3 x <8 x i16>] [[A]], 1
; CHECK-NEXT:    store <8 x i16> [[TMP2]], ptr @__msan_retval_tls, align 8
; CHECK-NEXT:    ret <8 x i16> [[X]]
;
; CHECK-ORIGIN-LABEL: define <8 x i16> @ArrayOfVectors(
; CHECK-ORIGIN-SAME: [3 x <8 x i16>] [[A:%.*]]) #[[ATTR0]] {
; CHECK-ORIGIN-NEXT:    [[TMP1:%.*]] = load [3 x <8 x i16>], ptr @__msan_param_tls, align 8
; CHECK-ORIGIN-NEXT:    [[TMP2:%.*]] = load i32, ptr @__msan_param_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    call void @llvm.donothing()
; CHECK-ORIGIN-NEXT:    [[TMP3:%.*]] = extractvalue [3 x <8 x i16>] [[TMP1]], 1
; CHECK-ORIGIN-NEXT:    [[X:%.*]] = extractvalue [3 x <8 x i16>] [[A]], 1
; CHECK-ORIGIN-NEXT:    store <8 x i16> [[TMP3]], ptr @__msan_retval_tls, align 8
; CHECK-ORIGIN-NEXT:    store i32 [[TMP2]], ptr @__msan_retval_origin_tls, align 4
; CHECK-ORIGIN-NEXT:    ret <8 x i16> [[X]]
;
  %x = extractvalue [3 x <8 x i16>] %a, 1
  ret <8 x i16> %x
}

