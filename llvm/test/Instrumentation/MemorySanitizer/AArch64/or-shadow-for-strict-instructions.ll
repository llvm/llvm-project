; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s '-passes=msan'          -S                                         | FileCheck %s --check-prefixes=CLEAN
; RUN: opt < %s '-passes=msan'          -S -msan-or-shadow-for-strict-instructions | FileCheck %s --check-prefixes=OR-SHADOW
; RUN: opt < %s '-passes=msan<recover>' -S                                         | FileCheck %s --check-prefixes=RECOVER-CLEAN
; RUN: opt < %s '-passes=msan<recover>' -S -msan-or-shadow-for-strict-instructions | FileCheck %s --check-prefixes=RECOVER-OR-SHADOW
;
; This tests the behavior of the experimental "-msan-or-shadow-for-strict-instructions"
; flag, which pessimizes the output by calculating the shadow of the return
; value, even though it should be zero after passing the shadow check.
;
; This currently uses 'vcvtfxu2fp' as the "unknown" instruction; this test case
; will need to be manually updated if that instruction becomes handled
; properly (not by 'visitInstruction').

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64--linux-android9001"

define <2 x float> @ucvtf_2sc(<2 x i32> %A) nounwind #0 {
; CLEAN-LABEL: define <2 x float> @ucvtf_2sc(
; CLEAN-SAME: <2 x i32> [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; CLEAN-NEXT:    [[TMP1:%.*]] = load <2 x i32>, ptr @__msan_param_tls, align 8
; CLEAN-NEXT:    call void @llvm.donothing()
; CLEAN-NEXT:    [[TMP2:%.*]] = bitcast <2 x i32> [[TMP1]] to i64
; CLEAN-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP2]], 0
; CLEAN-NEXT:    br i1 [[_MSCMP]], label [[TMP3:%.*]], label [[TMP4:%.*]], !prof [[PROF1:![0-9]+]]
; CLEAN:       3:
; CLEAN-NEXT:    call void @__msan_warning_noreturn() #[[ATTR3:[0-9]+]]
; CLEAN-NEXT:    unreachable
; CLEAN:       4:
; CLEAN-NEXT:    [[TMPVAR3:%.*]] = call <2 x float> @llvm.aarch64.neon.vcvtfxu2fp.v2f32.v2i32(<2 x i32> [[A]], i32 1)
; CLEAN-NEXT:    store <2 x i32> zeroinitializer, ptr @__msan_retval_tls, align 8
; CLEAN-NEXT:    ret <2 x float> [[TMPVAR3]]
;
; OR-SHADOW-LABEL: define <2 x float> @ucvtf_2sc(
; OR-SHADOW-SAME: <2 x i32> [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; OR-SHADOW-NEXT:    [[TMP1:%.*]] = load <2 x i32>, ptr @__msan_param_tls, align 8
; OR-SHADOW-NEXT:    call void @llvm.donothing()
; OR-SHADOW-NEXT:    [[_MSPROP:%.*]] = or <2 x i32> [[TMP1]], zeroinitializer
; OR-SHADOW-NEXT:    [[_MSPROP1:%.*]] = or <2 x i32> [[_MSPROP]], zeroinitializer
; OR-SHADOW-NEXT:    [[TMP2:%.*]] = bitcast <2 x i32> [[TMP1]] to i64
; OR-SHADOW-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP2]], 0
; OR-SHADOW-NEXT:    br i1 [[_MSCMP]], label [[TMP3:%.*]], label [[TMP4:%.*]], !prof [[PROF1:![0-9]+]]
; OR-SHADOW:       3:
; OR-SHADOW-NEXT:    call void @__msan_warning_noreturn() #[[ATTR3:[0-9]+]]
; OR-SHADOW-NEXT:    unreachable
; OR-SHADOW:       4:
; OR-SHADOW-NEXT:    [[TMPVAR3:%.*]] = call <2 x float> @llvm.aarch64.neon.vcvtfxu2fp.v2f32.v2i32(<2 x i32> [[A]], i32 1)
; OR-SHADOW-NEXT:    store <2 x i32> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
; OR-SHADOW-NEXT:    ret <2 x float> [[TMPVAR3]]
;
; RECOVER-CLEAN-LABEL: define <2 x float> @ucvtf_2sc(
; RECOVER-CLEAN-SAME: <2 x i32> [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; RECOVER-CLEAN-NEXT:    [[TMP1:%.*]] = load <2 x i32>, ptr @__msan_param_tls, align 8
; RECOVER-CLEAN-NEXT:    call void @llvm.donothing()
; RECOVER-CLEAN-NEXT:    [[TMP2:%.*]] = bitcast <2 x i32> [[TMP1]] to i64
; RECOVER-CLEAN-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP2]], 0
; RECOVER-CLEAN-NEXT:    br i1 [[_MSCMP]], label [[TMP3:%.*]], label [[TMP4:%.*]], !prof [[PROF1:![0-9]+]]
; RECOVER-CLEAN:       3:
; RECOVER-CLEAN-NEXT:    call void @__msan_warning() #[[ATTR3:[0-9]+]]
; RECOVER-CLEAN-NEXT:    br label [[TMP4]]
; RECOVER-CLEAN:       4:
; RECOVER-CLEAN-NEXT:    [[TMPVAR3:%.*]] = call <2 x float> @llvm.aarch64.neon.vcvtfxu2fp.v2f32.v2i32(<2 x i32> [[A]], i32 1)
; RECOVER-CLEAN-NEXT:    store <2 x i32> zeroinitializer, ptr @__msan_retval_tls, align 8
; RECOVER-CLEAN-NEXT:    ret <2 x float> [[TMPVAR3]]
;
; RECOVER-OR-SHADOW-LABEL: define <2 x float> @ucvtf_2sc(
; RECOVER-OR-SHADOW-SAME: <2 x i32> [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; RECOVER-OR-SHADOW-NEXT:    [[TMP1:%.*]] = load <2 x i32>, ptr @__msan_param_tls, align 8
; RECOVER-OR-SHADOW-NEXT:    call void @llvm.donothing()
; RECOVER-OR-SHADOW-NEXT:    [[_MSPROP:%.*]] = or <2 x i32> [[TMP1]], zeroinitializer
; RECOVER-OR-SHADOW-NEXT:    [[_MSPROP1:%.*]] = or <2 x i32> [[_MSPROP]], zeroinitializer
; RECOVER-OR-SHADOW-NEXT:    [[TMP2:%.*]] = bitcast <2 x i32> [[TMP1]] to i64
; RECOVER-OR-SHADOW-NEXT:    [[_MSCMP:%.*]] = icmp ne i64 [[TMP2]], 0
; RECOVER-OR-SHADOW-NEXT:    br i1 [[_MSCMP]], label [[TMP3:%.*]], label [[TMP4:%.*]], !prof [[PROF1:![0-9]+]]
; RECOVER-OR-SHADOW:       3:
; RECOVER-OR-SHADOW-NEXT:    call void @__msan_warning() #[[ATTR3:[0-9]+]]
; RECOVER-OR-SHADOW-NEXT:    br label [[TMP4]]
; RECOVER-OR-SHADOW:       4:
; RECOVER-OR-SHADOW-NEXT:    [[TMPVAR3:%.*]] = call <2 x float> @llvm.aarch64.neon.vcvtfxu2fp.v2f32.v2i32(<2 x i32> [[A]], i32 1)
; RECOVER-OR-SHADOW-NEXT:    store <2 x i32> [[_MSPROP1]], ptr @__msan_retval_tls, align 8
; RECOVER-OR-SHADOW-NEXT:    ret <2 x float> [[TMPVAR3]]
;
  %tmpvar3 = call <2 x float> @llvm.aarch64.neon.vcvtfxu2fp.v2f32.v2i32(<2 x i32> %A, i32 1)
  ret <2 x float> %tmpvar3
}

declare <2 x float> @llvm.aarch64.neon.vcvtfxu2fp.v2f32.v2i32(<2 x i32>, i32) nounwind readnone

attributes #0 = { sanitize_memory }
;.
; CLEAN: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
; OR-SHADOW: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
; RECOVER-CLEAN: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
; RECOVER-OR-SHADOW: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
