; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-attributes --check-globals all --version 5
; This test checks in the second run, function is not instrumented again.
; RUN: opt < %s -msan-check-access-address=0 -S -passes=msan,msan | FileCheck %s

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

;.
; CHECK: @llvm.used = appending global [1 x ptr] [ptr @msan.module_ctor], section "llvm.metadata"
; CHECK: @llvm.global_ctors = appending global [1 x { i32, ptr, ptr }] [{ i32, ptr, ptr } { i32 0, ptr @msan.module_ctor, ptr null }]
; CHECK: @__msan_retval_tls = external thread_local(initialexec) global [100 x i64]
; CHECK: @__msan_retval_origin_tls = external thread_local(initialexec) global i32
; CHECK: @__msan_param_tls = external thread_local(initialexec) global [100 x i64]
; CHECK: @__msan_param_origin_tls = external thread_local(initialexec) global [200 x i32]
; CHECK: @__msan_va_arg_tls = external thread_local(initialexec) global [100 x i64]
; CHECK: @__msan_va_arg_origin_tls = external thread_local(initialexec) global [200 x i32]
; CHECK: @__msan_va_arg_overflow_size_tls = external thread_local(initialexec) global i64
;.
define void @array() sanitize_memory {
; CHECK: Function Attrs: sanitize_memory
; CHECK-LABEL: define void @array(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    call void @llvm.donothing()
; CHECK-NEXT:    [[X:%.*]] = alloca i32, i64 5, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[X]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = xor i64 [[TMP0]], 87960930222080
; CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP1]] to ptr
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 4 [[TMP2]], i8 -1, i64 20, i1 false)
; CHECK-NEXT:    ret void
;
entry:
  %x = alloca i32, i64 5, align 4
  ret void
}
;.
; CHECK: attributes #[[ATTR0]] = { sanitize_memory }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { nounwind }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(none) }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nounwind willreturn memory(argmem: write) }
;.
; CHECK: [[META0:![0-9]+]] = !{i32 4, !"nosanitize_memory", i32 1}
;.
