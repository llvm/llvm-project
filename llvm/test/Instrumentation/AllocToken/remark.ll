; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=inferattrs,alloc-token -pass-remarks=alloc-token -S 2>&1 | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

declare ptr @malloc(i64)

; CHECK-NOT: remark: <unknown>:0:0: Call to 'malloc' in 'test_has_metadata' without source-level type token
; CHECK: remark: <unknown>:0:0: Call to 'malloc' in 'test_no_metadata' without source-level type token

define ptr @test_has_metadata() sanitize_alloc_token {
; CHECK-LABEL: define ptr @test_has_metadata(
; CHECK-SAME: ) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @__alloc_token_malloc(i64 64, i64 2689373973731826898), !alloc_token [[META0:![0-9]+]]
; CHECK-NEXT:    ret ptr [[TMP0]]
;
entry:
  %ptr1 = call ptr @malloc(i64 64), !alloc_token !0
  ret ptr %ptr1
}

define ptr @test_no_metadata() sanitize_alloc_token {
; CHECK-LABEL: define ptr @test_no_metadata(
; CHECK-SAME: ) #[[ATTR1]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @__alloc_token_malloc(i64 32, i64 0)
; CHECK-NEXT:    ret ptr [[TMP0]]
;
entry:
  %ptr1 = call ptr @malloc(i64 32)
  ret ptr %ptr1
}

!0 = !{!"int", i1 0}
;.
; CHECK: [[META0]] = !{!"int", i1 false}
;.
