; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=inferattrs,alloc-token -alloc-token-mode=typehashpointersplit -alloc-token-max=2 -S | FileCheck %s

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

declare ptr @malloc(i64)

define void @test_typehashpointersplit() sanitize_alloc_token {
; CHECK-LABEL: define void @test_typehashpointersplit(
; CHECK-SAME: ) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @__alloc_token_malloc(i64 4, i64 0), !alloc_token [[META0:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__alloc_token_malloc(i64 128, i64 0), !alloc_token [[META1:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__alloc_token_malloc(i64 8, i64 1), !alloc_token [[META2:![0-9]+]]
; CHECK-NEXT:    [[TMP3:%.*]] = call ptr @__alloc_token_malloc(i64 64, i64 1), !alloc_token [[META3:![0-9]+]]
; CHECK-NEXT:    ret void
;
entry:
  call ptr @malloc(i64 4), !alloc_token !0
  call ptr @malloc(i64 128), !alloc_token !1
  call ptr @malloc(i64 8), !alloc_token !2
  call ptr @malloc(i64 64), !alloc_token !3
  ret void
}

!0 = !{!"int", i1 0}
!1 = !{!"Foo", i1 0}
!2 = !{!"int*", i1 1}
!3 = !{!"Foo", i1 1}
;.
; CHECK: [[META0]] = !{!"int", i1 false}
; CHECK: [[META1]] = !{!"Foo", i1 false}
; CHECK: [[META2]] = !{!"int*", i1 true}
; CHECK: [[META3]] = !{!"Foo", i1 true}
;.
