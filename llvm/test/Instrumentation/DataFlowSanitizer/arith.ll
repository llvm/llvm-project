; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -passes=dfsan -dfsan-add-global-name-suffix=0 -S | FileCheck %s
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i8 @add(i8 %a, i8 %b) {
; CHECK-LABEL: define i8 @add(
; CHECK-SAME: i8 [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__dfsan_arg_tls to i64), i64 2) to ptr), align 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr @__dfsan_arg_tls, align 2
; CHECK-NEXT:    [[TMP3:%.*]] = or i8 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    [[C:%.*]] = add i8 [[A]], [[B]]
; CHECK-NEXT:    store i8 [[TMP3]], ptr @__dfsan_retval_tls, align 2
; CHECK-NEXT:    ret i8 [[C]]
;
  %c = add i8 %a, %b
  ret i8 %c
}

define i8 @sub(i8 %a, i8 %b) {
; CHECK-LABEL: define i8 @sub(
; CHECK-SAME: i8 [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__dfsan_arg_tls to i64), i64 2) to ptr), align 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr @__dfsan_arg_tls, align 2
; CHECK-NEXT:    [[TMP3:%.*]] = or i8 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    [[C:%.*]] = sub i8 [[A]], [[B]]
; CHECK-NEXT:    store i8 [[TMP3]], ptr @__dfsan_retval_tls, align 2
; CHECK-NEXT:    ret i8 [[C]]
;
  %c = sub i8 %a, %b
  ret i8 %c
}

define i8 @mul(i8 %a, i8 %b) {
; CHECK-LABEL: define i8 @mul(
; CHECK-SAME: i8 [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__dfsan_arg_tls to i64), i64 2) to ptr), align 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr @__dfsan_arg_tls, align 2
; CHECK-NEXT:    [[TMP3:%.*]] = or i8 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    [[C:%.*]] = mul i8 [[A]], [[B]]
; CHECK-NEXT:    store i8 [[TMP3]], ptr @__dfsan_retval_tls, align 2
; CHECK-NEXT:    ret i8 [[C]]
;
  %c = mul i8 %a, %b
  ret i8 %c
}

define i8 @sdiv(i8 %a, i8 %b) {
; CHECK-LABEL: define i8 @sdiv(
; CHECK-SAME: i8 [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__dfsan_arg_tls to i64), i64 2) to ptr), align 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr @__dfsan_arg_tls, align 2
; CHECK-NEXT:    [[TMP3:%.*]] = or i8 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    [[C:%.*]] = sdiv i8 [[A]], [[B]]
; CHECK-NEXT:    store i8 [[TMP3]], ptr @__dfsan_retval_tls, align 2
; CHECK-NEXT:    ret i8 [[C]]
;
  %c = sdiv i8 %a, %b
  ret i8 %c
}

define i8 @udiv(i8 %a, i8 %b) {
; CHECK-LABEL: define i8 @udiv(
; CHECK-SAME: i8 [[A:%.*]], i8 [[B:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr inttoptr (i64 add (i64 ptrtoint (ptr @__dfsan_arg_tls to i64), i64 2) to ptr), align 2
; CHECK-NEXT:    [[TMP2:%.*]] = load i8, ptr @__dfsan_arg_tls, align 2
; CHECK-NEXT:    [[TMP3:%.*]] = or i8 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    [[C:%.*]] = udiv i8 [[A]], [[B]]
; CHECK-NEXT:    store i8 [[TMP3]], ptr @__dfsan_retval_tls, align 2
; CHECK-NEXT:    ret i8 [[C]]
;
  %c = udiv i8 %a, %b
  ret i8 %c
}

define double @fneg(double %a) {
; CHECK-LABEL: define double @fneg(
; CHECK-SAME: double [[A:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i8, ptr @__dfsan_arg_tls, align 2
; CHECK-NEXT:    [[C:%.*]] = fneg double [[A]]
; CHECK-NEXT:    store i8 [[TMP1]], ptr @__dfsan_retval_tls, align 2
; CHECK-NEXT:    ret double [[C]]
;
  %c = fneg double %a
  ret double %c
}
