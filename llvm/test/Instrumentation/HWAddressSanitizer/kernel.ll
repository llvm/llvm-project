; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; Test KHWASan instrumentation.
;
; RUN: opt < %s -passes=hwasan -hwasan-kernel=1 -hwasan-recover=1 -S | FileCheck %s --allow-empty --check-prefixes=INIT
; RUN: opt < %s -passes=hwasan -hwasan-kernel=1 -hwasan-recover=1 -S | FileCheck %s  --check-prefixes=CHECK,NOOFFSET,MATCH-ALL
; RUN: opt < %s -passes=hwasan -hwasan-kernel=1 -hwasan-recover=1 -hwasan-mapping-offset=12345678 -S | FileCheck %s  --check-prefixes=CHECK,OFFSET,MATCH-ALL
; RUN: opt < %s -passes=hwasan -hwasan-kernel=1 -hwasan-recover=1 -hwasan-match-all-tag=-1 -S | FileCheck %s  --check-prefixes=CHECK,NOOFFSET,NO-MATCH-ALL
; RUN: opt < %s -passes=hwasan -hwasan-kernel=1 -hwasan-recover=1 -hwasan-inline-all-checks=0 -hwasan-mapping-offset=12345678 -S | FileCheck %s  --check-prefixes=OUTLINE

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64--linux-android"

define i8 @test_load(ptr %a) sanitize_hwaddress {
; INIT-LABEL: define i8 @test_load(
; INIT-SAME: ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; INIT-NEXT:  [[ENTRY:.*:]]
; INIT-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; INIT-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; INIT-NEXT:    [[TMP1:%.*]] = lshr i64 [[TMP0]], 56
; INIT-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i8
; INIT-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP0]], 8
; INIT-NEXT:    [[TMP4:%.*]] = ashr i64 [[TMP3]], 8
; INIT-NEXT:    [[TMP5:%.*]] = ashr i64 [[TMP4]], 4
; INIT-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr
; INIT-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP6]], align 1
; INIT-NEXT:    [[TMP8:%.*]] = icmp ne i8 [[TMP2]], [[TMP7]]
; INIT-NEXT:    [[TMP9:%.*]] = icmp ne i8 [[TMP2]], -1
; INIT-NEXT:    [[TMP10:%.*]] = and i1 [[TMP8]], [[TMP9]]
; INIT-NEXT:    br i1 [[TMP10]], label %[[BB11:.*]], label %[[BB25:.*]], !prof [[PROF1:![0-9]+]]
; INIT:       [[BB11]]:
; INIT-NEXT:    [[TMP12:%.*]] = icmp ugt i8 [[TMP7]], 15
; INIT-NEXT:    br i1 [[TMP12]], label %[[BB13:.*]], label %[[BB14:.*]], !prof [[PROF1]]
; INIT:       [[BB13]]:
; INIT-NEXT:    call void asm sideeffect "brk #2336", "{x0}"(i64 [[TMP0]])
; INIT-NEXT:    br label %[[BB24:.*]]
; INIT:       [[BB14]]:
; INIT-NEXT:    [[TMP15:%.*]] = and i64 [[TMP0]], 15
; INIT-NEXT:    [[TMP16:%.*]] = trunc i64 [[TMP15]] to i8
; INIT-NEXT:    [[TMP17:%.*]] = add i8 [[TMP16]], 0
; INIT-NEXT:    [[TMP18:%.*]] = icmp uge i8 [[TMP17]], [[TMP7]]
; INIT-NEXT:    br i1 [[TMP18]], label %[[BB13]], label %[[BB19:.*]], !prof [[PROF1]]
; INIT:       [[BB19]]:
; INIT-NEXT:    [[TMP20:%.*]] = or i64 [[TMP0]], 15
; INIT-NEXT:    [[TMP21:%.*]] = inttoptr i64 [[TMP20]] to ptr
; INIT-NEXT:    [[TMP22:%.*]] = load i8, ptr [[TMP21]], align 1
; INIT-NEXT:    [[TMP23:%.*]] = icmp ne i8 [[TMP2]], [[TMP22]]
; INIT-NEXT:    br i1 [[TMP23]], label %[[BB13]], label %[[BB24]], !prof [[PROF1]]
; INIT:       [[BB24]]:
; INIT-NEXT:    br label %[[BB25]]
; INIT:       [[BB25]]:
; INIT-NEXT:    [[B:%.*]] = load i8, ptr [[A]], align 4
; INIT-NEXT:    ret i8 [[B]]
;
; OFFSET-LABEL: define i8 @test_load(
; OFFSET-SAME: ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; OFFSET-NEXT:  [[ENTRY:.*:]]
; OFFSET-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr inttoptr (i64 12345678 to ptr))
; OFFSET-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; OFFSET-NEXT:    [[TMP1:%.*]] = lshr i64 [[TMP0]], 56
; OFFSET-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i8
; OFFSET-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP0]], 8
; OFFSET-NEXT:    [[TMP4:%.*]] = ashr i64 [[TMP3]], 8
; OFFSET-NEXT:    [[TMP5:%.*]] = ashr i64 [[TMP4]], 4
; OFFSET-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr [[DOTHWASAN_SHADOW]], i64 [[TMP5]]
; OFFSET-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP6]], align 1
; OFFSET-NEXT:    [[TMP8:%.*]] = icmp ne i8 [[TMP2]], [[TMP7]]
; OFFSET-NEXT:    [[TMP9:%.*]] = icmp ne i8 [[TMP2]], -1
; OFFSET-NEXT:    [[TMP10:%.*]] = and i1 [[TMP8]], [[TMP9]]
; OFFSET-NEXT:    br i1 [[TMP10]], label %[[BB11:.*]], label %[[BB25:.*]], !prof [[PROF1:![0-9]+]]
; OFFSET:       [[BB11]]:
; OFFSET-NEXT:    [[TMP12:%.*]] = icmp ugt i8 [[TMP7]], 15
; OFFSET-NEXT:    br i1 [[TMP12]], label %[[BB13:.*]], label %[[BB14:.*]], !prof [[PROF1]]
; OFFSET:       [[BB13]]:
; OFFSET-NEXT:    call void asm sideeffect "brk #2336", "{x0}"(i64 [[TMP0]])
; OFFSET-NEXT:    br label %[[BB24:.*]]
; OFFSET:       [[BB14]]:
; OFFSET-NEXT:    [[TMP15:%.*]] = and i64 [[TMP0]], 15
; OFFSET-NEXT:    [[TMP16:%.*]] = trunc i64 [[TMP15]] to i8
; OFFSET-NEXT:    [[TMP17:%.*]] = add i8 [[TMP16]], 0
; OFFSET-NEXT:    [[TMP18:%.*]] = icmp uge i8 [[TMP17]], [[TMP7]]
; OFFSET-NEXT:    br i1 [[TMP18]], label %[[BB13]], label %[[BB19:.*]], !prof [[PROF1]]
; OFFSET:       [[BB19]]:
; OFFSET-NEXT:    [[TMP20:%.*]] = or i64 [[TMP0]], 15
; OFFSET-NEXT:    [[TMP21:%.*]] = inttoptr i64 [[TMP20]] to ptr
; OFFSET-NEXT:    [[TMP22:%.*]] = load i8, ptr [[TMP21]], align 1
; OFFSET-NEXT:    [[TMP23:%.*]] = icmp ne i8 [[TMP2]], [[TMP22]]
; OFFSET-NEXT:    br i1 [[TMP23]], label %[[BB13]], label %[[BB24]], !prof [[PROF1]]
; OFFSET:       [[BB24]]:
; OFFSET-NEXT:    br label %[[BB25]]
; OFFSET:       [[BB25]]:
; OFFSET-NEXT:    [[B:%.*]] = load i8, ptr [[A]], align 4
; OFFSET-NEXT:    ret i8 [[B]]
;
; NO-MATCH-ALL-LABEL: define i8 @test_load(
; NO-MATCH-ALL-SAME: ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; NO-MATCH-ALL-NEXT:  [[ENTRY:.*:]]
; NO-MATCH-ALL-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; NO-MATCH-ALL-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; NO-MATCH-ALL-NEXT:    [[TMP1:%.*]] = lshr i64 [[TMP0]], 56
; NO-MATCH-ALL-NEXT:    [[TMP2:%.*]] = trunc i64 [[TMP1]] to i8
; NO-MATCH-ALL-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP0]], 8
; NO-MATCH-ALL-NEXT:    [[TMP4:%.*]] = ashr i64 [[TMP3]], 8
; NO-MATCH-ALL-NEXT:    [[TMP5:%.*]] = ashr i64 [[TMP4]], 4
; NO-MATCH-ALL-NEXT:    [[TMP6:%.*]] = inttoptr i64 [[TMP5]] to ptr
; NO-MATCH-ALL-NEXT:    [[TMP7:%.*]] = load i8, ptr [[TMP6]], align 1
; NO-MATCH-ALL-NEXT:    [[TMP8:%.*]] = icmp ne i8 [[TMP2]], [[TMP7]]
; NO-MATCH-ALL-NEXT:    br i1 [[TMP8]], label %[[BB9:.*]], label %[[BB23:.*]], !prof [[PROF1:![0-9]+]]
; NO-MATCH-ALL:       [[BB9]]:
; NO-MATCH-ALL-NEXT:    [[TMP10:%.*]] = icmp ugt i8 [[TMP7]], 15
; NO-MATCH-ALL-NEXT:    br i1 [[TMP10]], label %[[BB11:.*]], label %[[BB12:.*]], !prof [[PROF1]]
; NO-MATCH-ALL:       [[BB11]]:
; NO-MATCH-ALL-NEXT:    call void asm sideeffect "brk #2336", "{x0}"(i64 [[TMP0]])
; NO-MATCH-ALL-NEXT:    br label %[[BB22:.*]]
; NO-MATCH-ALL:       [[BB12]]:
; NO-MATCH-ALL-NEXT:    [[TMP13:%.*]] = and i64 [[TMP0]], 15
; NO-MATCH-ALL-NEXT:    [[TMP14:%.*]] = trunc i64 [[TMP13]] to i8
; NO-MATCH-ALL-NEXT:    [[TMP15:%.*]] = add i8 [[TMP14]], 0
; NO-MATCH-ALL-NEXT:    [[TMP16:%.*]] = icmp uge i8 [[TMP15]], [[TMP7]]
; NO-MATCH-ALL-NEXT:    br i1 [[TMP16]], label %[[BB11]], label %[[BB17:.*]], !prof [[PROF1]]
; NO-MATCH-ALL:       [[BB17]]:
; NO-MATCH-ALL-NEXT:    [[TMP18:%.*]] = or i64 [[TMP0]], 15
; NO-MATCH-ALL-NEXT:    [[TMP19:%.*]] = inttoptr i64 [[TMP18]] to ptr
; NO-MATCH-ALL-NEXT:    [[TMP20:%.*]] = load i8, ptr [[TMP19]], align 1
; NO-MATCH-ALL-NEXT:    [[TMP21:%.*]] = icmp ne i8 [[TMP2]], [[TMP20]]
; NO-MATCH-ALL-NEXT:    br i1 [[TMP21]], label %[[BB11]], label %[[BB22]], !prof [[PROF1]]
; NO-MATCH-ALL:       [[BB22]]:
; NO-MATCH-ALL-NEXT:    br label %[[BB23]]
; NO-MATCH-ALL:       [[BB23]]:
; NO-MATCH-ALL-NEXT:    [[B:%.*]] = load i8, ptr [[A]], align 4
; NO-MATCH-ALL-NEXT:    ret i8 [[B]]
;
; OUTLINE-LABEL: define i8 @test_load(
; OUTLINE-SAME: ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; OUTLINE-NEXT:  [[ENTRY:.*:]]
; OUTLINE-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr inttoptr (i64 12345678 to ptr))
; OUTLINE-NEXT:    call void @llvm.hwasan.check.memaccess(ptr [[DOTHWASAN_SHADOW]], ptr [[A]], i32 67043360)
; OUTLINE-NEXT:    [[B:%.*]] = load i8, ptr [[A]], align 4
; OUTLINE-NEXT:    ret i8 [[B]]
;








entry:
  %b = load i8, ptr %a, align 4
  ret i8 %b
}

;.
; INIT: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
; OFFSET: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
; NO-MATCH-ALL: [[PROF1]] = !{!"branch_weights", i32 1, i32 1048575}
;.
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
; MATCH-ALL: {{.*}}
; NOOFFSET: {{.*}}
