; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt < %s -passes=hwasan -S | FileCheck %s

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "aarch64--linux-android"

declare void @use(ptr, ptr)

define void @test_alloca() sanitize_hwaddress {
; CHECK-LABEL: define void @test_alloca
; CHECK-SAME: () #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @llvm.thread.pointer()
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[TMP1]], i32 48
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = ashr i64 [[TMP3]], 3
; CHECK-NEXT:    [[TMP5:%.*]] = trunc i64 [[TMP4]] to i8
; CHECK-NEXT:    [[TMP6:%.*]] = call i64 @llvm.read_register.i64(metadata [[META1:![0-9]+]])
; CHECK-NEXT:    [[TMP7:%.*]] = call ptr @llvm.frameaddress.p0(i32 0)
; CHECK-NEXT:    [[TMP8:%.*]] = ptrtoint ptr [[TMP7]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = shl i64 [[TMP8]], 44
; CHECK-NEXT:    [[TMP10:%.*]] = or i64 [[TMP6]], [[TMP9]]
; CHECK-NEXT:    [[TMP11:%.*]] = inttoptr i64 [[TMP3]] to ptr
; CHECK-NEXT:    store i64 [[TMP10]], ptr [[TMP11]], align 8
; CHECK-NEXT:    [[TMP12:%.*]] = ashr i64 [[TMP3]], 56
; CHECK-NEXT:    [[TMP13:%.*]] = shl nuw nsw i64 [[TMP12]], 12
; CHECK-NEXT:    [[TMP14:%.*]] = xor i64 [[TMP13]], -1
; CHECK-NEXT:    [[TMP15:%.*]] = add i64 [[TMP3]], 8
; CHECK-NEXT:    [[TMP16:%.*]] = and i64 [[TMP15]], [[TMP14]]
; CHECK-NEXT:    store i64 [[TMP16]], ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP17:%.*]] = or i64 [[TMP3]], 4294967295
; CHECK-NEXT:    [[HWASAN_SHADOW:%.*]] = add i64 [[TMP17]], 1
; CHECK-NEXT:    [[TMP18:%.*]] = inttoptr i64 [[HWASAN_SHADOW]] to ptr
; CHECK-NEXT:    [[TMP19:%.*]] = lshr i64 [[TMP8]], 56
; CHECK-NEXT:    [[HWASAN_UAR_TAG:%.*]] = trunc i64 [[TMP19]] to i8
; CHECK-NEXT:    [[X:%.*]] = alloca { [4 x i8], [12 x i8] }, align 16
; CHECK-NEXT:    [[X_TAG:%.*]] = xor i8 [[TMP5]], 0
; CHECK-NEXT:    [[TMP20:%.*]] = ptrtoint ptr [[X]] to i64
; CHECK-NEXT:    [[TMP21:%.*]] = and i64 [[TMP20]], 72057594037927935
; CHECK-NEXT:    [[TMP22:%.*]] = zext i8 [[X_TAG]] to i64
; CHECK-NEXT:    [[TMP23:%.*]] = shl i64 [[TMP22]], 56
; CHECK-NEXT:    [[TMP24:%.*]] = or i64 [[TMP21]], [[TMP23]]
; CHECK-NEXT:    [[X_HWASAN:%.*]] = inttoptr i64 [[TMP24]] to ptr
; CHECK-NEXT:    [[TMP25:%.*]] = ptrtoint ptr [[X]] to i64
; CHECK-NEXT:    [[TMP26:%.*]] = and i64 [[TMP25]], 72057594037927935
; CHECK-NEXT:    [[TMP27:%.*]] = lshr i64 [[TMP26]], 4
; CHECK-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr [[TMP18]], i64 [[TMP27]]
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 [[TMP28]], i8 [[X_TAG]], i64 1, i1 false)
; CHECK-NEXT:    [[Y:%.*]] = alloca i8, i64 16, align 16
; CHECK-NEXT:    [[Y_TAG:%.*]] = xor i8 [[TMP5]], -128
; CHECK-NEXT:    [[TMP29:%.*]] = ptrtoint ptr [[Y]] to i64
; CHECK-NEXT:    [[TMP30:%.*]] = and i64 [[TMP29]], 72057594037927935
; CHECK-NEXT:    [[TMP31:%.*]] = zext i8 [[Y_TAG]] to i64
; CHECK-NEXT:    [[TMP32:%.*]] = shl i64 [[TMP31]], 56
; CHECK-NEXT:    [[TMP33:%.*]] = or i64 [[TMP30]], [[TMP32]]
; CHECK-NEXT:    [[Y_HWASAN:%.*]] = inttoptr i64 [[TMP33]] to ptr
; CHECK-NEXT:    [[TMP34:%.*]] = ptrtoint ptr [[Y]] to i64
; CHECK-NEXT:    [[TMP35:%.*]] = and i64 [[TMP34]], 72057594037927935
; CHECK-NEXT:    [[TMP36:%.*]] = lshr i64 [[TMP35]], 4
; CHECK-NEXT:    [[TMP37:%.*]] = getelementptr i8, ptr [[TMP18]], i64 [[TMP36]]
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 [[TMP37]], i8 [[Y_TAG]], i64 1, i1 false)
; CHECK-NEXT:    call void @use(ptr [[X_HWASAN]], ptr [[Y_HWASAN]])
; CHECK-NEXT:    [[TMP38:%.*]] = ptrtoint ptr [[X]] to i64
; CHECK-NEXT:    [[TMP39:%.*]] = and i64 [[TMP38]], 72057594037927935
; CHECK-NEXT:    [[TMP40:%.*]] = lshr i64 [[TMP39]], 4
; CHECK-NEXT:    [[TMP41:%.*]] = getelementptr i8, ptr [[TMP18]], i64 [[TMP40]]
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 [[TMP41]], i8 [[HWASAN_UAR_TAG]], i64 1, i1 false)
; CHECK-NEXT:    [[TMP42:%.*]] = ptrtoint ptr [[Y]] to i64
; CHECK-NEXT:    [[TMP43:%.*]] = and i64 [[TMP42]], 72057594037927935
; CHECK-NEXT:    [[TMP44:%.*]] = lshr i64 [[TMP43]], 4
; CHECK-NEXT:    [[TMP45:%.*]] = getelementptr i8, ptr [[TMP18]], i64 [[TMP44]]
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 [[TMP45]], i8 [[HWASAN_UAR_TAG]], i64 1, i1 false)
; CHECK-NEXT:    ret void
;
  %x = alloca i8, i64 4
  %y = alloca i8, i64 16
  call void @use(ptr %x, ptr %y)
  ret void
}
