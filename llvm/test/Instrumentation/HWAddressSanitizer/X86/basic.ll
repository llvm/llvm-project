; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; Test basic address sanitizer instrumentation.
; Generic code is covered by ../basic.ll, only the x86_64 specific code is
; tested here.
;
; RUN: opt < %s -passes=hwasan -hwasan-recover=0 -S | FileCheck %s  --check-prefixes=ABORT
; RUN: opt < %s -passes=hwasan -hwasan-recover=1 -S | FileCheck %s  --check-prefixes=RECOVER

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i8 @test_load8(ptr %a) sanitize_hwaddress {
; ABORT-LABEL: define i8 @test_load8
; ABORT-SAME: (ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; ABORT-NEXT:  entry:
; ABORT-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; ABORT-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; ABORT-NEXT:    call void @__hwasan_load1(i64 [[TMP0]])
; ABORT-NEXT:    [[B:%.*]] = load i8, ptr [[A]], align 4
; ABORT-NEXT:    ret i8 [[B]]
;
; RECOVER-LABEL: define i8 @test_load8
; RECOVER-SAME: (ptr [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; RECOVER-NEXT:  entry:
; RECOVER-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; RECOVER-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; RECOVER-NEXT:    call void @__hwasan_load1_noabort(i64 [[TMP0]])
; RECOVER-NEXT:    [[B:%.*]] = load i8, ptr [[A]], align 4
; RECOVER-NEXT:    ret i8 [[B]]
;



entry:
  %b = load i8, ptr %a, align 4
  ret i8 %b
}

define i40 @test_load40(ptr %a) sanitize_hwaddress {
; ABORT-LABEL: define i40 @test_load40
; ABORT-SAME: (ptr [[A:%.*]]) #[[ATTR0]] {
; ABORT-NEXT:  entry:
; ABORT-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; ABORT-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; ABORT-NEXT:    call void @__hwasan_loadN(i64 [[TMP0]], i64 5)
; ABORT-NEXT:    [[B:%.*]] = load i40, ptr [[A]], align 4
; ABORT-NEXT:    ret i40 [[B]]
;
; RECOVER-LABEL: define i40 @test_load40
; RECOVER-SAME: (ptr [[A:%.*]]) #[[ATTR0]] {
; RECOVER-NEXT:  entry:
; RECOVER-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; RECOVER-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; RECOVER-NEXT:    call void @__hwasan_loadN_noabort(i64 [[TMP0]], i64 5)
; RECOVER-NEXT:    [[B:%.*]] = load i40, ptr [[A]], align 4
; RECOVER-NEXT:    ret i40 [[B]]
;



entry:
  %b = load i40, ptr %a, align 4
  ret i40 %b
}

define void @test_store8(ptr %a, i8 %b) sanitize_hwaddress {
; ABORT-LABEL: define void @test_store8
; ABORT-SAME: (ptr [[A:%.*]], i8 [[B:%.*]]) #[[ATTR0]] {
; ABORT-NEXT:  entry:
; ABORT-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; ABORT-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; ABORT-NEXT:    call void @__hwasan_store1(i64 [[TMP0]])
; ABORT-NEXT:    store i8 [[B]], ptr [[A]], align 4
; ABORT-NEXT:    ret void
;
; RECOVER-LABEL: define void @test_store8
; RECOVER-SAME: (ptr [[A:%.*]], i8 [[B:%.*]]) #[[ATTR0]] {
; RECOVER-NEXT:  entry:
; RECOVER-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; RECOVER-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; RECOVER-NEXT:    call void @__hwasan_store1_noabort(i64 [[TMP0]])
; RECOVER-NEXT:    store i8 [[B]], ptr [[A]], align 4
; RECOVER-NEXT:    ret void
;



entry:
  store i8 %b, ptr %a, align 4
  ret void
}

define void @test_store40(ptr %a, i40 %b) sanitize_hwaddress {
; ABORT-LABEL: define void @test_store40
; ABORT-SAME: (ptr [[A:%.*]], i40 [[B:%.*]]) #[[ATTR0]] {
; ABORT-NEXT:  entry:
; ABORT-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; ABORT-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; ABORT-NEXT:    call void @__hwasan_storeN(i64 [[TMP0]], i64 5)
; ABORT-NEXT:    store i40 [[B]], ptr [[A]], align 4
; ABORT-NEXT:    ret void
;
; RECOVER-LABEL: define void @test_store40
; RECOVER-SAME: (ptr [[A:%.*]], i40 [[B:%.*]]) #[[ATTR0]] {
; RECOVER-NEXT:  entry:
; RECOVER-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; RECOVER-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; RECOVER-NEXT:    call void @__hwasan_storeN_noabort(i64 [[TMP0]], i64 5)
; RECOVER-NEXT:    store i40 [[B]], ptr [[A]], align 4
; RECOVER-NEXT:    ret void
;



entry:
  store i40 %b, ptr %a, align 4
  ret void
}

define void @test_store_unaligned(ptr %a, i64 %b) sanitize_hwaddress {
; ABORT-LABEL: define void @test_store_unaligned
; ABORT-SAME: (ptr [[A:%.*]], i64 [[B:%.*]]) #[[ATTR0]] {
; ABORT-NEXT:  entry:
; ABORT-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; ABORT-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; ABORT-NEXT:    call void @__hwasan_storeN(i64 [[TMP0]], i64 8)
; ABORT-NEXT:    store i64 [[B]], ptr [[A]], align 4
; ABORT-NEXT:    ret void
;
; RECOVER-LABEL: define void @test_store_unaligned
; RECOVER-SAME: (ptr [[A:%.*]], i64 [[B:%.*]]) #[[ATTR0]] {
; RECOVER-NEXT:  entry:
; RECOVER-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; RECOVER-NEXT:    [[TMP0:%.*]] = ptrtoint ptr [[A]] to i64
; RECOVER-NEXT:    call void @__hwasan_storeN_noabort(i64 [[TMP0]], i64 8)
; RECOVER-NEXT:    store i64 [[B]], ptr [[A]], align 4
; RECOVER-NEXT:    ret void
;



entry:
  store i64 %b, ptr %a, align 4
  ret void
}
