; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; Test alloca instrumentation.
;
; RUN: opt < %s -passes=hwasan -hwasan-use-stack-safety=0 -S | FileCheck %s
; RUN: opt < %s -passes=hwasan -hwasan-use-stack-safety=0 -hwasan-instrument-with-calls=0 -S | FileCheck %s  --check-prefixes=INLINE

target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

declare void @use32(ptr)

define void @test_alloca() sanitize_hwaddress {
; CHECK-LABEL: define void @test_alloca
; CHECK-SAME: () #[[ATTR0:[0-9]+]] personality ptr @__hwasan_personality_thunk {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @llvm.frameaddress.p0(i32 0)
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = lshr i64 [[TMP1]], 20
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP3]] to i8
; CHECK-NEXT:    [[HWASAN_STACK_BASE_TAG:%.*]] = and i8 [[TMP4]], 63
; CHECK-NEXT:    [[TMP5:%.*]] = lshr i64 [[TMP1]], 57
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i8
; CHECK-NEXT:    [[HWASAN_UAR_TAG:%.*]] = and i8 [[TMP6]], 63
; CHECK-NEXT:    [[X:%.*]] = alloca { i32, [12 x i8] }, align 16
; CHECK-NEXT:    [[X_TAG:%.*]] = xor i8 [[HWASAN_STACK_BASE_TAG]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[X]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = and i64 [[TMP7]], -9079256848778919937
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[X_TAG]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = shl i64 [[TMP9]], 57
; CHECK-NEXT:    [[TMP11:%.*]] = or i64 [[TMP8]], [[TMP10]]
; CHECK-NEXT:    [[X_HWASAN:%.*]] = inttoptr i64 [[TMP11]] to ptr
; CHECK-NEXT:    call void @__hwasan_tag_memory(ptr [[X]], i8 [[X_TAG]], i64 16)
; CHECK-NEXT:    call void @use32(ptr nonnull [[X_HWASAN]])
; CHECK-NEXT:    call void @__hwasan_tag_memory(ptr [[X]], i8 [[HWASAN_UAR_TAG]], i64 16)
; CHECK-NEXT:    ret void
;
; INLINE-LABEL: define void @test_alloca
; INLINE-SAME: () #[[ATTR0:[0-9]+]] personality ptr @__hwasan_personality_thunk {
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[TMP0:%.*]] = load i64, ptr @__hwasan_tls, align 8
; INLINE-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -9079256848778919937
; INLINE-NEXT:    [[TMP2:%.*]] = ashr i64 [[TMP0]], 3
; INLINE-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i8
; INLINE-NEXT:    [[TMP4:%.*]] = and i8 [[TMP3]], 63
; INLINE-NEXT:    [[TMP5:%.*]] = call ptr @llvm.frameaddress.p0(i32 0)
; INLINE-NEXT:    [[TMP6:%.*]] = ptrtoint ptr [[TMP5]] to i64
; INLINE-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 44
; INLINE-NEXT:    [[TMP8:%.*]] = or i64 ptrtoint (ptr @test_alloca to i64), [[TMP7]]
; INLINE-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP1]] to ptr
; INLINE-NEXT:    store i64 [[TMP8]], ptr [[TMP9]], align 8
; INLINE-NEXT:    [[TMP10:%.*]] = ashr i64 [[TMP0]], 56
; INLINE-NEXT:    [[TMP11:%.*]] = shl nuw nsw i64 [[TMP10]], 12
; INLINE-NEXT:    [[TMP12:%.*]] = xor i64 [[TMP11]], -1
; INLINE-NEXT:    [[TMP13:%.*]] = add i64 [[TMP0]], 8
; INLINE-NEXT:    [[TMP14:%.*]] = and i64 [[TMP13]], [[TMP12]]
; INLINE-NEXT:    store i64 [[TMP14]], ptr @__hwasan_tls, align 8
; INLINE-NEXT:    [[TMP15:%.*]] = or i64 [[TMP1]], 4294967295
; INLINE-NEXT:    [[HWASAN_SHADOW:%.*]] = add i64 [[TMP15]], 1
; INLINE-NEXT:    [[TMP16:%.*]] = inttoptr i64 [[HWASAN_SHADOW]] to ptr
; INLINE-NEXT:    [[TMP17:%.*]] = lshr i64 [[TMP6]], 57
; INLINE-NEXT:    [[TMP18:%.*]] = trunc i64 [[TMP17]] to i8
; INLINE-NEXT:    [[HWASAN_UAR_TAG:%.*]] = and i8 [[TMP18]], 63
; INLINE-NEXT:    [[X:%.*]] = alloca { i32, [12 x i8] }, align 16
; INLINE-NEXT:    [[X_TAG:%.*]] = xor i8 [[TMP4]], 0
; INLINE-NEXT:    [[TMP19:%.*]] = ptrtoint ptr [[X]] to i64
; INLINE-NEXT:    [[TMP20:%.*]] = and i64 [[TMP19]], -9079256848778919937
; INLINE-NEXT:    [[TMP21:%.*]] = zext i8 [[X_TAG]] to i64
; INLINE-NEXT:    [[TMP22:%.*]] = shl i64 [[TMP21]], 57
; INLINE-NEXT:    [[TMP23:%.*]] = or i64 [[TMP20]], [[TMP22]]
; INLINE-NEXT:    [[X_HWASAN:%.*]] = inttoptr i64 [[TMP23]] to ptr
; INLINE-NEXT:    [[TMP24:%.*]] = ptrtoint ptr [[X]] to i64
; INLINE-NEXT:    [[TMP25:%.*]] = and i64 [[TMP24]], -9079256848778919937
; INLINE-NEXT:    [[TMP26:%.*]] = lshr i64 [[TMP25]], 4
; INLINE-NEXT:    [[TMP27:%.*]] = getelementptr i8, ptr [[TMP16]], i64 [[TMP26]]
; INLINE-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr [[TMP27]], i32 0
; INLINE-NEXT:    store i8 4, ptr [[TMP28]], align 1
; INLINE-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[X]], i32 15
; INLINE-NEXT:    store i8 [[X_TAG]], ptr [[TMP29]], align 1
; INLINE-NEXT:    call void @use32(ptr nonnull [[X_HWASAN]])
; INLINE-NEXT:    [[TMP30:%.*]] = ptrtoint ptr [[X]] to i64
; INLINE-NEXT:    [[TMP31:%.*]] = and i64 [[TMP30]], -9079256848778919937
; INLINE-NEXT:    [[TMP32:%.*]] = lshr i64 [[TMP31]], 4
; INLINE-NEXT:    [[TMP33:%.*]] = getelementptr i8, ptr [[TMP16]], i64 [[TMP32]]
; INLINE-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 [[TMP33]], i8 [[HWASAN_UAR_TAG]], i64 1, i1 false)
; INLINE-NEXT:    ret void
;
entry:
  %x = alloca i32, align 4
  call void @use32(ptr nonnull %x)
  ret void
}


define i32 @test_simple(ptr %a) sanitize_hwaddress {
; CHECK-LABEL: define i32 @test_simple
; CHECK-SAME: (ptr [[A:%.*]]) #[[ATTR0]] personality ptr @__hwasan_personality_thunk {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[DOTHWASAN_SHADOW:%.*]] = call ptr asm "", "=r,0"(ptr null)
; CHECK-NEXT:    [[TMP0:%.*]] = call ptr @llvm.frameaddress.p0(i32 0)
; CHECK-NEXT:    [[TMP1:%.*]] = ptrtoint ptr [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = lshr i64 [[TMP1]], 20
; CHECK-NEXT:    [[TMP3:%.*]] = xor i64 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = trunc i64 [[TMP3]] to i8
; CHECK-NEXT:    [[HWASAN_STACK_BASE_TAG:%.*]] = and i8 [[TMP4]], 63
; CHECK-NEXT:    [[TMP5:%.*]] = lshr i64 [[TMP1]], 57
; CHECK-NEXT:    [[TMP6:%.*]] = trunc i64 [[TMP5]] to i8
; CHECK-NEXT:    [[HWASAN_UAR_TAG:%.*]] = and i8 [[TMP6]], 63
; CHECK-NEXT:    [[BUF_SROA_0:%.*]] = alloca { i8, [15 x i8] }, align 16
; CHECK-NEXT:    [[BUF_SROA_0_TAG:%.*]] = xor i8 [[HWASAN_STACK_BASE_TAG]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = ptrtoint ptr [[BUF_SROA_0]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = and i64 [[TMP7]], -9079256848778919937
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[BUF_SROA_0_TAG]] to i64
; CHECK-NEXT:    [[TMP10:%.*]] = shl i64 [[TMP9]], 57
; CHECK-NEXT:    [[TMP11:%.*]] = or i64 [[TMP8]], [[TMP10]]
; CHECK-NEXT:    [[BUF_SROA_0_HWASAN:%.*]] = inttoptr i64 [[TMP11]] to ptr
; CHECK-NEXT:    call void @__hwasan_tag_memory(ptr [[BUF_SROA_0]], i8 [[BUF_SROA_0_TAG]], i64 16)
; CHECK-NEXT:    [[TMP12:%.*]] = ptrtoint ptr [[BUF_SROA_0_HWASAN]] to i64
; CHECK-NEXT:    call void @__hwasan_store1(i64 [[TMP12]])
; CHECK-NEXT:    store volatile i8 0, ptr [[BUF_SROA_0_HWASAN]], align 4
; CHECK-NEXT:    call void @__hwasan_tag_memory(ptr [[BUF_SROA_0]], i8 [[HWASAN_UAR_TAG]], i64 16)
; CHECK-NEXT:    ret i32 0
;
; INLINE-LABEL: define i32 @test_simple
; INLINE-SAME: (ptr [[A:%.*]]) #[[ATTR0]] personality ptr @__hwasan_personality_thunk {
; INLINE-NEXT:  entry:
; INLINE-NEXT:    [[TMP0:%.*]] = load i64, ptr @__hwasan_tls, align 8
; INLINE-NEXT:    [[TMP1:%.*]] = and i64 [[TMP0]], -9079256848778919937
; INLINE-NEXT:    [[TMP2:%.*]] = ashr i64 [[TMP0]], 3
; INLINE-NEXT:    [[TMP3:%.*]] = trunc i64 [[TMP2]] to i8
; INLINE-NEXT:    [[TMP4:%.*]] = and i8 [[TMP3]], 63
; INLINE-NEXT:    [[TMP5:%.*]] = call ptr @llvm.frameaddress.p0(i32 0)
; INLINE-NEXT:    [[TMP6:%.*]] = ptrtoint ptr [[TMP5]] to i64
; INLINE-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 44
; INLINE-NEXT:    [[TMP8:%.*]] = or i64 ptrtoint (ptr @test_simple to i64), [[TMP7]]
; INLINE-NEXT:    [[TMP9:%.*]] = inttoptr i64 [[TMP1]] to ptr
; INLINE-NEXT:    store i64 [[TMP8]], ptr [[TMP9]], align 8
; INLINE-NEXT:    [[TMP10:%.*]] = ashr i64 [[TMP0]], 56
; INLINE-NEXT:    [[TMP11:%.*]] = shl nuw nsw i64 [[TMP10]], 12
; INLINE-NEXT:    [[TMP12:%.*]] = xor i64 [[TMP11]], -1
; INLINE-NEXT:    [[TMP13:%.*]] = add i64 [[TMP0]], 8
; INLINE-NEXT:    [[TMP14:%.*]] = and i64 [[TMP13]], [[TMP12]]
; INLINE-NEXT:    store i64 [[TMP14]], ptr @__hwasan_tls, align 8
; INLINE-NEXT:    [[TMP15:%.*]] = or i64 [[TMP1]], 4294967295
; INLINE-NEXT:    [[HWASAN_SHADOW:%.*]] = add i64 [[TMP15]], 1
; INLINE-NEXT:    [[TMP16:%.*]] = inttoptr i64 [[HWASAN_SHADOW]] to ptr
; INLINE-NEXT:    [[TMP17:%.*]] = lshr i64 [[TMP6]], 57
; INLINE-NEXT:    [[TMP18:%.*]] = trunc i64 [[TMP17]] to i8
; INLINE-NEXT:    [[HWASAN_UAR_TAG:%.*]] = and i8 [[TMP18]], 63
; INLINE-NEXT:    [[BUF_SROA_0:%.*]] = alloca { i8, [15 x i8] }, align 16
; INLINE-NEXT:    [[BUF_SROA_0_TAG:%.*]] = xor i8 [[TMP4]], 0
; INLINE-NEXT:    [[TMP19:%.*]] = ptrtoint ptr [[BUF_SROA_0]] to i64
; INLINE-NEXT:    [[TMP20:%.*]] = and i64 [[TMP19]], -9079256848778919937
; INLINE-NEXT:    [[TMP21:%.*]] = zext i8 [[BUF_SROA_0_TAG]] to i64
; INLINE-NEXT:    [[TMP22:%.*]] = shl i64 [[TMP21]], 57
; INLINE-NEXT:    [[TMP23:%.*]] = or i64 [[TMP20]], [[TMP22]]
; INLINE-NEXT:    [[BUF_SROA_0_HWASAN:%.*]] = inttoptr i64 [[TMP23]] to ptr
; INLINE-NEXT:    [[TMP24:%.*]] = ptrtoint ptr [[BUF_SROA_0]] to i64
; INLINE-NEXT:    [[TMP25:%.*]] = and i64 [[TMP24]], -9079256848778919937
; INLINE-NEXT:    [[TMP26:%.*]] = lshr i64 [[TMP25]], 4
; INLINE-NEXT:    [[TMP27:%.*]] = getelementptr i8, ptr [[TMP16]], i64 [[TMP26]]
; INLINE-NEXT:    [[TMP28:%.*]] = getelementptr i8, ptr [[TMP27]], i32 0
; INLINE-NEXT:    store i8 1, ptr [[TMP28]], align 1
; INLINE-NEXT:    [[TMP29:%.*]] = getelementptr i8, ptr [[BUF_SROA_0]], i32 15
; INLINE-NEXT:    store i8 [[BUF_SROA_0_TAG]], ptr [[TMP29]], align 1
; INLINE-NEXT:    [[TMP30:%.*]] = ptrtoint ptr [[BUF_SROA_0_HWASAN]] to i64
; INLINE-NEXT:    [[TMP31:%.*]] = lshr i64 [[TMP30]], 57
; INLINE-NEXT:    [[TMP32:%.*]] = trunc i64 [[TMP31]] to i8
; INLINE-NEXT:    [[TMP33:%.*]] = and i64 [[TMP30]], -9079256848778919937
; INLINE-NEXT:    [[TMP34:%.*]] = lshr i64 [[TMP33]], 4
; INLINE-NEXT:    [[TMP35:%.*]] = getelementptr i8, ptr [[TMP16]], i64 [[TMP34]]
; INLINE-NEXT:    [[TMP36:%.*]] = load i8, ptr [[TMP35]], align 1
; INLINE-NEXT:    [[TMP37:%.*]] = icmp ne i8 [[TMP32]], [[TMP36]]
; INLINE-NEXT:    br i1 [[TMP37]], label [[TMP38:%.*]], label [[TMP52:%.*]], !prof [[PROF1:![0-9]+]]
; INLINE:       38:
; INLINE-NEXT:    [[TMP39:%.*]] = icmp ugt i8 [[TMP36]], 15
; INLINE-NEXT:    br i1 [[TMP39]], label [[TMP40:%.*]], label [[TMP41:%.*]], !prof [[PROF1]]
; INLINE:       40:
; INLINE-NEXT:    call void asm sideeffect "int3\0Anopl 80([[RAX:%.*]])", "{rdi}"(i64 [[TMP30]])
; INLINE-NEXT:    unreachable
; INLINE:       41:
; INLINE-NEXT:    [[TMP42:%.*]] = and i64 [[TMP30]], 15
; INLINE-NEXT:    [[TMP43:%.*]] = trunc i64 [[TMP42]] to i8
; INLINE-NEXT:    [[TMP44:%.*]] = add i8 [[TMP43]], 0
; INLINE-NEXT:    [[TMP45:%.*]] = icmp uge i8 [[TMP44]], [[TMP36]]
; INLINE-NEXT:    br i1 [[TMP45]], label [[TMP40]], label [[TMP46:%.*]], !prof [[PROF1]]
; INLINE:       46:
; INLINE-NEXT:    [[TMP47:%.*]] = or i64 [[TMP33]], 15
; INLINE-NEXT:    [[TMP48:%.*]] = inttoptr i64 [[TMP47]] to ptr
; INLINE-NEXT:    [[TMP49:%.*]] = load i8, ptr [[TMP48]], align 1
; INLINE-NEXT:    [[TMP50:%.*]] = icmp ne i8 [[TMP32]], [[TMP49]]
; INLINE-NEXT:    br i1 [[TMP50]], label [[TMP40]], label [[TMP51:%.*]], !prof [[PROF1]]
; INLINE:       51:
; INLINE-NEXT:    br label [[TMP52]]
; INLINE:       52:
; INLINE-NEXT:    store volatile i8 0, ptr [[BUF_SROA_0_HWASAN]], align 4
; INLINE-NEXT:    [[TMP53:%.*]] = ptrtoint ptr [[BUF_SROA_0]] to i64
; INLINE-NEXT:    [[TMP54:%.*]] = and i64 [[TMP53]], -9079256848778919937
; INLINE-NEXT:    [[TMP55:%.*]] = lshr i64 [[TMP54]], 4
; INLINE-NEXT:    [[TMP56:%.*]] = getelementptr i8, ptr [[TMP16]], i64 [[TMP55]]
; INLINE-NEXT:    call void @llvm.memset.p0.i64(ptr align 1 [[TMP56]], i8 [[HWASAN_UAR_TAG]], i64 1, i1 false)
; INLINE-NEXT:    ret i32 0
;
entry:
  %buf.sroa.0 = alloca i8, align 4
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %buf.sroa.0)
  store volatile i8 0, ptr %buf.sroa.0, align 4
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %buf.sroa.0)
  ret i32 0
}

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture)

; Function Attrs: argmemonly mustprogress nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture)
