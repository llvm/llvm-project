// RUN: split-file %s %t

// RUN: clang++ --target=arm64-apple-macos11 \
// RUN:   %t/stmt_seq_macho.cpp -o %t/stmt_seq_macho.o \
// RUN:   -g -Oz -gdwarf-4 -c -mno-outline \
// RUN:   -mllvm -emit-func-debug-line-table-offsets \
// RUN:   -fdebug-compilation-dir=/private/tmp/stmt_seq \
// RUN:   -fno-unwind-tables -fno-exceptions

// RUN: llvm-dwarfdump -all %t/stmt_seq_macho.o | FileCheck %s

// CHECK:                  Address            Line   Column File   ISA Discriminator OpIndex Flags
// CHECK-NEXT:             ------------------ ------ ------ ------ --- ------------- ------- -------------
// CHECK-NEXT:             0x0000000000000000      2     33      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000004      2     33      1   0             0       0  is_stmt end_sequence
// CHECK-NEXT:             0x0000000000000004      3     33      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000008      3     33      1   0             0       0  is_stmt end_sequence
// CHECK-NEXT:             0x0000000000000008      4     33      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x000000000000000c      4     33      1   0             0       0  is_stmt end_sequence
// CHECK-NEXT:             0x000000000000000c      7     10      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000010      7      3      1   0             0       0
// CHECK-NEXT:             0x0000000000000014      7      3      1   0             0       0  end_sequence
// CHECK-NEXT:             0x0000000000000014     12     14      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000018     12      5      1   0             0       0
// CHECK-NEXT:             0x000000000000001c     12      5      1   0             0       0  end_sequence
// CHECK-NEXT:             0x000000000000001c     16     14      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000020     16      5      1   0             0       0
// CHECK-NEXT:             0x0000000000000024     16      5      1   0             0       0  end_sequence
// CHECK-NEXT:             0x0000000000000024     21     14      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000028     21      5      1   0             0       0
// CHECK-NEXT:             0x000000000000002c     21      5      1   0             0       0  end_sequence
// CHECK-NEXT:             0x000000000000002c     25     20      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000030     26      5      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000034     26      5      1   0             0       0  is_stmt end_sequence
// CHECK-NEXT:             0x0000000000000034     37      0      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000044     39     12      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x0000000000000050     40     12      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000058     40      9      1   0             0       0  is_stmt
// CHECK-NEXT:             0x000000000000005c     41     12      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000068     42     12      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000070     41      9      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000074     46     18      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000084     42      9      1   0             0       0  is_stmt
// CHECK-NEXT:             0x0000000000000088     47      5      1   0             0       0  is_stmt epilogue_begin
// CHECK-NEXT:             0x0000000000000098     47      5      1   0             0       0  is_stmt end_sequence
// CHECK-NEXT:             0x0000000000000098     34     85      1   0             0       0  is_stmt prologue_end
// CHECK-NEXT:             0x000000000000009c     34     85      1   0             0       0  is_stmt end_sequence
// CHECK-NEXT:             0x000000000000009c     34     86      1   0             0       0  is_stmt prologue_end

#--- stmt_seq_macho.cpp
#define ATTRIB extern "C" __attribute__((noinline))
ATTRIB void function_empty_1() {}
ATTRIB void function_empty_2() {}
ATTRIB void function_empty_3() {}

ATTRIB int function1_copy1(int a) {
  return ++a;
}

ATTRIB int function3_copy1(int a) {
    int b = a + 3;
    return b + 1;
}

ATTRIB int function2_copy1(int a) {
    return a - 22;
}

ATTRIB int function3_copy2(int a) {
    int b = a + 3;
    return b + 1;
}

ATTRIB int function2_copy2(int a) {
    int result = a - 22;
    return result;
}

struct logic_error {
    logic_error(const char* s) {}
};

struct length_error : public logic_error {
    __attribute__((noinline)) explicit length_error(const char* s) : logic_error(s) {}
};

int main() {
    int sum = 0;
    sum += function2_copy2(3);
    sum += function3_copy2(41);
    sum += function2_copy1(11);
    sum += function1_copy1(42);
    function_empty_1();
    function_empty_2();
    function_empty_3();
    length_error e("test");
    return sum;
}
