# RUN: llc --run-pass=livedebugvalues -o - %s | FileCheck %s --implicit-check-not=DBG_VALUE 
# REQUIRES: aarch64-registered-target

# This test covers the scenario where a DBG_VALUE created prior to LiveDebugValues has an entry-value expression.
# It ensures that a clobbered stack copy doesn't crash if used as an entry-value because entry-values can't be clobbered.

--- |
  target triple = "aarch64-"
  define i32 @baz(i32 swiftasync %arg1, i32 noundef %arg2, i1 %cond) !dbg !4 {
    br i1 %cond, label %if.then, label %if.else, !dbg !14
  if.then:                                          ; preds = %0
    %call = call i32 @foo(i32 noundef %arg1), !dbg !15
    br label %if.end, !dbg !18
  if.else:                                          ; preds = %0
    %call1 = call i32 @foo(i32 noundef %arg2), !dbg !19
    br label %if.end
  if.end:                                           ; preds = %if.else, %if.then
    %temp.0 = phi i32 [ %call, %if.then ], [ %call1, %if.else ], !dbg !21
    ret i32 %temp.0, !dbg !22
  }
  declare i32 @foo(i32)
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3}
  !0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "ha", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "test.c", directory: "hah")
  !2 = !{i32 7, !"Dwarf Version", i32 4}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = distinct !DISubprogram(name: "baz", scope: !1, file: !1, line: 3, type: !5, scopeLine: 3, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !8)
  !5 = !DISubroutineType(types: !6)
  !6 = !{!7, !7, !7, !7}
  !7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !8 = !{!9, !10, !11, !12}
  !9 = !DILocalVariable(name: "arg1", arg: 1, scope: !4, file: !1, line: 3, type: !7)
  !10 = !DILocalVariable(name: "arg2", arg: 2, scope: !4, file: !1, line: 3, type: !7)
  !11 = !DILocalVariable(name: "cond", arg: 3, scope: !4, file: !1, line: 3, type: !7)
  !12 = !DILocalVariable(name: "local", scope: !4, file: !1, line: 4, type: !7)
  !13 = !DILocation(line: 0, scope: !4)
  !14 = !DILocation(line: 7, column: 7, scope: !4)
  !15 = !DILocation(line: 8, column: 12, scope: !16)
  !16 = distinct !DILexicalBlock(scope: !17, file: !1, line: 7, column: 13)
  !17 = distinct !DILexicalBlock(scope: !4, file: !1, line: 7, column: 7)
  !18 = !DILocation(line: 9, column: 3, scope: !16)
  !19 = !DILocation(line: 10, column: 12, scope: !20)
  !20 = distinct !DILexicalBlock(scope: !17, file: !1, line: 9, column: 10)
  !21 = !DILocation(line: 0, scope: !17)
  !22 = !DILocation(line: 13, column: 3, scope: !4)
name:            baz
debugInstrRef:   true
stack:
  - { id: 1, name: '', type: spill-slot, offset: -24, size: 4, alignment: 4, 
      debug-info-variable: '', debug-info-expression: '', debug-info-location: '' }
body:             |
  bb.0 (%ir-block.0):
    DBG_VALUE $w1, $noreg, !12, !DIExpression(DW_OP_LLVM_entry_value, 1),  debug-location !13

  bb.1.if.then:
    $w0 = LDRWui $sp, 2
    BL @foo, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $w0,  debug-location !15
    $w1 = MOVi32imm 0

  bb.2.if.else:
    $w0 = LDRWui $sp, 3
    BL @foo, csr_darwin_aarch64_aapcs, implicit-def dead $lr, implicit $sp, implicit killed $w0, implicit-def $w0,  debug-location !19
    STRWui killed $w0, $sp, 1
    B %bb.3
  
  bb.3.if.end:
    $w0 = LDRWui $sp, 1
    $fp, $lr = frame-destroy LDPXi $sp, 2,  debug-location !22
    $sp = frame-destroy ADDXri $sp, 32, 0,  debug-location !22
    RET undef $lr, implicit killed $w0,  debug-location !22

# CHECK-LABEL: bb.0
# CHECK: DBG_VALUE $w1, {{.*}}, !DIExpression(DW_OP_LLVM_entry_value, 1)
# CHECK-LABEL: bb.1.if.then:
# CHECK: DBG_VALUE $w1, {{.*}}, !DIExpression(DW_OP_LLVM_entry_value, 1)
# CHECK-NEXT: $w0 = LDRWui $sp, 2
# CHECK-NEXT: BL @foo
# CHECK-NEXT: $w1 = MOVi32imm 0
# CHECK-NOT: DBG_VALUE $w1, {{.*}}, !DIExpression(DW_OP_LLVM_entry_value, 1)
# CHECK-LABEL: bb.2.if.else:
# CHECK: DBG_VALUE $w1, {{.*}}, !DIExpression(DW_OP_LLVM_entry_value, 1)
# CHECK-LABEL: bb.3.if.end:
# CHECK: DBG_VALUE $w1, {{.*}}, !DIExpression(DW_OP_LLVM_entry_value, 1)