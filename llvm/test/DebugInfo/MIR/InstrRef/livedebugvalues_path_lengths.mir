--- |
  ; RUN: llc %s -march=x86-64 -run-pass=livedebugvalues -o - | FileCheck %s
  ; RUN: llc %s -march=x86-64 -run-pass=livedebugvalues -o - -experimental-debug-variable-locations | FileCheck %s
  ;
  ; This is a regression test extracted from llvm11ish LICM.cpp. Consider the
  ; blocks from bb.6 to bb.9: there are two paths to bb.9, one an immediate
  ; branch, the other takes a longer route. Because VarLocBased LiveDebugValues
  ; always schedules blocks to be examined in the _next_ dataflow iteration,
  ; any exploration starting at bb.6 follows this pattern:
  ;   * Round 1: Examine block 6
  ;   * Round 2: Examine block 7 and 9
  ;   * Round 3: Examine block 8
  ;   * Round 4: Examine block 9
  ; This works for VarLocBased LDV as it has a simple lattice. However for
  ; InstrRefBasedLDV, in the first examination of block 9 not all predecessors
  ; will have yet accounted for any changes to block 6's live-outs. It takes
  ; several iterations for those to reach block 8. This raises the possibility
  ; of blocks seeing conflicting variable values on their live-in edges, which
  ; wouldn't be present if their predecessors had been visited beforehand.
  ;
  ; It's also not really reverse-post-order visiting.

  ; Test that a variable value appears in bb.9, which is renumbered 19 during
  ; mir parsing.
  ; CHECK-LABEL: bb.19:
  ; CHECK:         DBG_VALUE
  ; CHECK-NEXT:    JMP_1 %bb.19

  ; ModuleID = 'rpot_bad.ll'
  source_filename = "/fast/fs/llvm3/llvm/lib/Transforms/Scalar/LICM.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  ; Function Attrs: nounwind uwtable
  define zeroext i1 @mangled(i64 %LI, i64 %DT, i64 %MSSAU) local_unnamed_addr #0 !dbg !12 {
  entry:
    ret i1 0
  }
  
  declare zeroext i1 @_ZNK4llvm10BasicBlock20canSplitPredecessorsEv() local_unnamed_addr #1
  
  declare i1 @_ZN4llvm22SplitBlockPredecessorsEPNS_10BasicBlockENS_8ArrayRefIS1_EEPKcPNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterEb() local_unnamed_addr #1
  
  ; Function Attrs: nounwind uwtable
  declare hidden void @_ZN4llvm9SetVectorIPNS_10BasicBlockENS_11SmallVectorIS2_Lj8EEENS_13SmallDenseSetIS2_Lj8ENS_12DenseMapInfoIS2_EEEEE6insertINS_12PredIteratorIS1_NS_5Value18user_iterator_implINS_4UserEEEEEEEvT_SH_() local_unnamed_addr #0 align 2
  
  ; Function Attrs: nounwind readnone speculatable willreturn
  declare void @llvm.dbg.value(metadata, metadata, metadata) #2
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**) #3
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!7, !8, !9, !10}
  !llvm.ident = !{!11}
  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 10.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, globals: !3, debugInfoForProfiling: true, nameTableKind: None)
  !1 = !DIFile(filename: "main.cpp", directory: "F:\")
  !2 = !{}
  !3 = !{!4}
  !4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
  !5 = distinct !DIGlobalVariable(name: "start", scope: !0, file: !1, line: 4, type: !6, isLocal: false, isDefinition: true)
  !6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !7 = !{i32 2, !"Dwarf Version", i32 4}
  !8 = !{i32 2, !"Debug Info Version", i32 3}
  !9 = !{i32 1, !"wchar_size", i32 2}
  !10 = !{i32 7, !"PIC Level", i32 2}
  !11 = !{!"clang version 10.0.0"}
  !12 = distinct !DISubprogram(name: "bb_to_bb", linkageName: "bb_to_bb", scope: !1, file: !1, line: 6, type: !13, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !15)
  !13 = !DISubroutineType(types: !14)
  !14 = !{!6, !6}
  !15 = !{!16}
  !16 = !DILocalVariable(name: "myVar", scope: !12, file: !1, line: 7, type: !6)
  !17 = !DILocation(line: 10, scope: !12)


...
---
name:            mangled
alignment:       16
tracksRegLiveness: true
liveins:
  - { reg: '$rdi' }
  - { reg: '$rsi' }
  - { reg: '$rdx' }
frameInfo:
  stackSize:       56
  offsetAdjustment: -56
  maxAlignment:    8
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 16
  cvBytesOfCalleeSavedRegisters: 48
fixedStack:
  - { id: 0, type: spill-slot, offset: -56, size: 8, alignment: 8, callee-saved-register: '$rbx' }
  - { id: 1, type: spill-slot, offset: -48, size: 8, alignment: 16, callee-saved-register: '$r12' }
  - { id: 2, type: spill-slot, offset: -40, size: 8, alignment: 8, callee-saved-register: '$r13' }
  - { id: 3, type: spill-slot, offset: -32, size: 8, alignment: 16, callee-saved-register: '$r14' }
  - { id: 4, type: spill-slot, offset: -24, size: 8, alignment: 8, callee-saved-register: '$r15' }
  - { id: 5, type: spill-slot, offset: -16, size: 8, alignment: 16, callee-saved-register: '$rbp' }
stack:
  - { id: 0, type: spill-slot, offset: -64, size: 8, alignment: 8 }
machineFunctionInfo: {}
body:             |
  bb.0:
    liveins: $rdi, $rdx, $rsi, $rbp, $r15, $r14, $r13, $r12, $rbx
  
    frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 16
    frame-setup PUSH64r killed $r15, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 24
    frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 32
    frame-setup PUSH64r killed $r13, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 40
    frame-setup PUSH64r killed $r12, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 48
    frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 56
    frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
    CFI_INSTRUCTION def_cfa_offset 64
    CFI_INSTRUCTION offset $rbx, -56
    CFI_INSTRUCTION offset $r12, -48
    CFI_INSTRUCTION offset $r13, -40
    CFI_INSTRUCTION offset $r14, -32
    CFI_INSTRUCTION offset $r15, -24
    CFI_INSTRUCTION offset $rbp, -16
    $r14 = MOV64rr $rdx
    $r15 = MOV64rr $rsi
    $r12 = MOV64rr $rdi
    renamable $r13d = XOR32rr undef $r13d, undef $r13d, implicit-def dead $eflags, implicit-def $r13
    renamable $bpl = MOV8ri 1
  
  bb.1:
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm undef renamable $rax, 1, $noreg, 0, $noreg, debug-location !17 :: (load 8 from `i64* undef`)
    renamable $rax = AND64ri8 killed renamable $rax, -8, implicit-def dead $eflags, debug-location !17
    renamable $rcx = LEA64r renamable $rax, 1, $noreg, -24, $noreg, debug-location !17
    TEST64rr renamable $rax, renamable $rax, implicit-def $eflags, debug-location !17
    renamable $rcx = CMOV64rr killed renamable $rcx, killed renamable $rax, 4, implicit killed $eflags, debug-location !17
    DBG_VALUE $rcx, $noreg, !16, !DIExpression(), debug-location !17
    MOV64mr $rsp, 1, $noreg, 0, $noreg, killed renamable $rcx :: (store 8 into %stack.0)
    DBG_VALUE $rsp, 0, !16, !DIExpression(), debug-location !17
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.1, 5, implicit killed $eflags, debug-location !17
  
  bb.2:
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.1, 5, implicit $eflags, debug-location !17
  
  bb.3:
    successors: %bb.4, %bb.1
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.1, 5, implicit $eflags, debug-location !17
  
  bb.4:
    successors: %bb.5(0x7c000000), %bb.6(0x04000000)
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.6, 5, implicit $eflags, debug-location !17
  
  bb.5:
    successors: %bb.6(0x04000000), %bb.10(0x7c000000)
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    CALL64r undef renamable $rax, csr_64, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $al, debug-location !17
    TEST8rr killed renamable $al, renamable $al, implicit-def $eflags, debug-location !17
    JCC_1 %bb.6, 5, implicit $eflags, debug-location !17
  
  bb.10:
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    renamable $rax = IMPLICIT_DEF
    JMP_1 %bb.11
  
  bb.19:
    liveins: $bpl, $r12, $r13, $r14, $r15
  
    renamable $rax = MOV64rm $rsp, 1, $noreg, 0, $noreg :: (load 8 from %stack.0)
    renamable $rax = MOV64rm killed renamable $rax, 1, $noreg, 8, $noreg, debug-location !17 :: (load 8 from `i64 *undef`)
  
  bb.11:
    successors: %bb.12, %bb.11
    liveins: $bpl, $rax, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.11, 5, implicit killed $eflags, debug-location !17
  
  bb.12:
    successors: %bb.13, %bb.11
    liveins: $bpl, $rax, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.11, 5, implicit $eflags, debug-location !17
  
  bb.13:
    liveins: $bpl, $rax, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $r13b, renamable $r13b, implicit-def $eflags, debug-location !17
    JCC_1 %bb.11, 5, implicit $eflags, debug-location !17
  
  bb.14:
    successors: %bb.15(0x7c000000), %bb.1(0x04000000)
    liveins: $bpl, $rax, $r12, $r13, $r14, $r15
  
    renamable $rbx = MOV64rm killed renamable $rax, 1, $noreg, 24, $noreg :: (load 8 from `i64 *undef`)
    CALL64pcrel32 @_ZNK4llvm10BasicBlock20canSplitPredecessorsEv, csr_64, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit-def $rsp, implicit-def $ssp, implicit-def $al, debug-location !17
    TEST8rr killed renamable $al, renamable $al, implicit-def $eflags, debug-location !17
    JCC_1 %bb.1, 4, implicit $eflags, debug-location !17
  
  bb.15:
    liveins: $bpl, $rbx, $r12, $r13, $r14, $r15
  
    renamable $rbx = MOV64rm killed renamable $rbx, 1, $noreg, 40, $noreg, debug-location !17 :: (load 8 from `i64 *undef`)
    dead $edx = XOR32rr undef $edx, undef $edx, implicit-def dead $eflags, implicit-def $rdx, debug-location !17
    CALL64pcrel32 @_ZN4llvm9SetVectorIPNS_10BasicBlockENS_11SmallVectorIS2_Lj8EEENS_13SmallDenseSetIS2_Lj8ENS_12DenseMapInfoIS2_EEEEE6insertINS_12PredIteratorIS1_NS_5Value18user_iterator_implINS_4UserEEEEEEEvT_SH_, csr_64, implicit $rsp, implicit $ssp, implicit undef $rdi, implicit undef $rsi, implicit $rdx, implicit-def $rsp, implicit-def $ssp, debug-location !17
  
  bb.16:
    successors: %bb.19(0x061801fc), %bb.17(0x79e7fe04)
    liveins: $bpl, $r12, $r13, $r14, $r15, $rbx
  
    CMP32mi8 undef renamable $rax, 1, $noreg, 0, $noreg, 0, implicit-def $eflags, debug-location !17 :: (load 4 from `i32* undef`, align 8)
    JCC_1 %bb.19, 4, implicit $eflags, debug-location !17
  
  bb.17:
    successors: %bb.16(0x30000000), %bb.18(0x50000000)
    liveins: $bpl, $rbx, $r12, $r13, $r14, $r15
  
    TEST8rr renamable $bpl, renamable $bpl, implicit-def $eflags, debug-location !17
    JCC_1 %bb.16, 5, implicit $eflags, debug-location !17
  
  bb.18:
    liveins: $bpl, $rbx, $r12, $r13, $r14, $r15
  
    $edx = MOV32ri 1, implicit-def $rdx, debug-location !17
    ;$ecx = MOV32ri @.str.282, implicit-def $rcx, debug-location !17
    $ecx = MOV32ri 1, debug-location !17
    $rdi = MOV64rr $rbx, debug-location !17
    $r8 = MOV64rr $r15, debug-location !17
    $r9 = MOV64rr $r12, debug-location !17
    PUSH64i8 1, implicit-def $rsp, implicit $rsp, debug-location !17 :: (store 4 into stack + 8)
    CFI_INSTRUCTION adjust_cfa_offset 8, debug-location !17
    PUSH64r renamable $r14, implicit-def $rsp, implicit $rsp, debug-location !17 :: (store 8 into stack)
    CFI_INSTRUCTION adjust_cfa_offset 8, debug-location !17
    CALL64pcrel32 @_ZN4llvm22SplitBlockPredecessorsEPNS_10BasicBlockENS_8ArrayRefIS1_EEPKcPNS_13DominatorTreeEPNS_8LoopInfoEPNS_16MemorySSAUpdaterEb, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit undef $rsi, implicit $rdx, implicit $rcx, implicit $r8, implicit $r9, implicit-def $rsp, implicit-def $ssp, implicit-def dead $rax, debug-location !17
    $rsp = ADD64ri8 $rsp, 16, implicit-def dead $eflags, debug-location !17
    CFI_INSTRUCTION adjust_cfa_offset -16, debug-location !17
    JMP_1 %bb.16
  
  bb.6:
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
    TEST8rr renamable $al, renamable $al, implicit-def $eflags, implicit killed $eax, debug-location !17
    JCC_1 %bb.9, 5, implicit $eflags, debug-location !17
  
  bb.7:
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
  
  bb.8:
    successors: %bb.9(0x04000000), %bb.8(0x7c000000)
    liveins: $eax
  
    TEST8rr renamable $al, renamable $al, implicit-def $eflags, debug-location !17
    JCC_1 %bb.8, 5, implicit killed $eflags, debug-location !17
  
  bb.9:
    JMP_1 %bb.9

...
