--- |
  ; RUN: llc %s -march=x86-64 -run-pass=livedebugvalues -o - | FileCheck %s --implicit-check-not=DBG_VALUE
  ; RUN: llc %s -march=x86-64 -run-pass=livedebugvalues -o - -experimental-debug-variable-locations | FileCheck %s --implicit-check-not=DBG_VALUE
  ;
  ; No DBG_VALUEs should be propagated, as there's a loop between bb2 and bb3
  ; that defines $rdi without specifying it as being the variable value. Uses
  ; implicit check-not in runlines above.
  ;
  ; CHECK-LABEL: bb.1.while.body
  ; CHECK:       DBG_VALUE
  ; CHECK-NEXT:  TEST8rr
  ; CHECK-NEXT:  JCC_1

  ; ModuleID = 'multi-downgrade-but-not-sensitive.ll'
  source_filename = "/fast/fs/llvm3/clang/lib/CodeGen/CoverageMappingGen.cpp"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"
  
  %"struct.std::pair.1976" = type { %"class.clang::SourceLocation", i32 }
  %"class.clang::SourceLocation" = type { i32 }
  
  ; Function Attrs: nounwind uwtable
  define weak_odr void @_ZSt17__merge_sort_loopIPSt4pairIN5clang14SourceLocationEjES4_lN9__gnu_cxx5__ops15_Iter_comp_iterIN4llvm11less_secondEEEEvT_SB_T0_T1_T2_(%"struct.std::pair.1976"* %__result) local_unnamed_addr !dbg !12 {
  while.body.lr.ph:
    br label %while.body, !dbg !17
  
  while.body:                                       ; preds = %while.body, %while.body.i, %while.body.lr.ph
    %__result.addr.099 = phi %"struct.std::pair.1976"* [ %__result, %while.body.lr.ph ], [ %__result.addr.099, %while.body ], [ %incdec.ptr7.i, %while.body.i ]
    call void @llvm.dbg.value(metadata %"struct.std::pair.1976"* %__result.addr.099, metadata !16, metadata !DIExpression()), !dbg !17
    br i1 undef, label %while.body.i.preheader, label %while.body, !dbg !17
  
  while.body.i.preheader:                           ; preds = %while.body
    br label %while.body.i, !dbg !17
  
  while.body.i:                                     ; preds = %while.body.i, %while.body.i.preheader
    %__result.addr.046.i = phi %"struct.std::pair.1976"* [ %incdec.ptr7.i, %while.body.i ], [ %__result.addr.099, %while.body.i.preheader ]
    %incdec.ptr7.i = getelementptr inbounds %"struct.std::pair.1976", %"struct.std::pair.1976"* %__result.addr.046.i, i64 1, !dbg !17
    %cmp.not.i = icmp ne %"struct.std::pair.1976"* undef, undef, !dbg !17
    %0 = and i1 undef, %cmp.not.i, !dbg !17
    br i1 %0, label %while.body.i, label %while.body, !dbg !17
  }
  
  ; Function Attrs: nounwind readnone speculatable willreturn
  declare void @llvm.dbg.value(metadata, metadata, metadata)
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**)
  
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!7, !8, !9, !10}
  !llvm.ident = !{!11}
  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus, file: !1, producer: "clang version 10.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, globals: !3, debugInfoForProfiling: true, nameTableKind: None)
  !1 = !DIFile(filename: "main.cpp", directory: "F:\")
  !2 = !{}
  !3 = !{!4}
  !4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
  !5 = distinct !DIGlobalVariable(name: "start", scope: !0, file: !1, line: 4, type: !6, isLocal: false, isDefinition: true)
  !6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !7 = !{i32 2, !"Dwarf Version", i32 4}
  !8 = !{i32 2, !"Debug Info Version", i32 3}
  !9 = !{i32 1, !"wchar_size", i32 2}
  !10 = !{i32 7, !"PIC Level", i32 2}
  !11 = !{!"clang version 10.0.0"}
  !12 = distinct !DISubprogram(name: "bb_to_bb", linkageName: "bb_to_bb", scope: !1, file: !1, line: 6, type: !13, scopeLine: 6, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !15)
  !13 = !DISubroutineType(types: !14)
  !14 = !{!6, !6}
  !15 = !{!16}
  !16 = !DILocalVariable(name: "myVar", scope: !12, file: !1, line: 7, type: !6)
  !17 = !DILocation(line: 10, scope: !12)


...
---
name:            _ZSt17__merge_sort_loopIPSt4pairIN5clang14SourceLocationEjES4_lN9__gnu_cxx5__ops15_Iter_comp_iterIN4llvm11less_secondEEEEvT_SB_T0_T1_T2_
alignment:       16
tracksRegLiveness: true
registers:       []
liveins:
  - { reg: '$rdi', virtual-reg: '' }
machineFunctionInfo: {}
body:             |
  bb.0.while.body.lr.ph:
    successors: %bb.1(0x80000000)
    liveins: $rdi
  
    renamable $eax = XOR32rr undef $eax, undef $eax, implicit-def dead $eflags
  
  bb.1.while.body (align 16):
    successors: %bb.2(0x40000000), %bb.1(0x40000000)
    liveins: $eax, $rdi
  
    DBG_VALUE $rdi, $noreg, !16, !DIExpression(), debug-location  !17
    TEST8rr renamable $al, renamable $al, implicit-def $eflags, debug-location  !17
    JCC_1 %bb.1, 5, implicit killed $eflags, debug-location  !17
  
  bb.2.while.body.i (align 16):
    successors: %bb.3(0x7e000000), %bb.1(0x02000000)
    liveins: $eax, $rdi
  
    renamable $rdi = nuw ADD64ri8 killed renamable $rdi, 8, implicit-def dead $eflags, debug-location  !17
    TEST8rr renamable $al, renamable $al, implicit-def $eflags, debug-location  !17
    JCC_1 %bb.1, 5, implicit $eflags, debug-location  !17
  
  bb.3.while.body.i:
    successors: %bb.2(0x7df7df7e), %bb.1(0x02082082)
    liveins: $eax, $rdi
  
    TEST8rr renamable $al, renamable $al, implicit-def $eflags, debug-location  !17
    JCC_1 %bb.2, 5, implicit $eflags
    JMP_1 %bb.1

...
