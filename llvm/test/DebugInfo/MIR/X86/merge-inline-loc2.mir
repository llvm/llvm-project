# RUN: llc -mtriple=x86_64-pc-linux %s -run-pass=branch-folder -o - | FileCheck %s

--- |
  ; ModuleID = 'case2.c'
  source_filename = "case2.c"
  target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
  target triple = "x86_64-unknown-linux-gnu"

  @q1 = dso_local local_unnamed_addr global i32 1, align 4, !dbg !0
  @q2 = dso_local local_unnamed_addr global i32 4, align 4, !dbg !5
  @q3 = dso_local local_unnamed_addr global i32 2, align 4, !dbg !8
  @g1 = dso_local local_unnamed_addr global i32 0, align 4, !dbg !10
  @g2 = dso_local local_unnamed_addr global i32 0, align 4, !dbg !12
  @g3 = dso_local local_unnamed_addr global i32 0, align 4, !dbg !14

  ; Function Attrs: nounwind uwtable
  define dso_local i32 @multiple_inl_multiple_loc() local_unnamed_addr #0 !dbg !23 {
  entry:
    %0 = load i32, ptr @q1, align 4, !dbg !27, !tbaa !28
    call void @llvm.dbg.value(metadata i32 %0, metadata !32, metadata !DIExpression()), !dbg !38
    call void @llvm.dbg.value(metadata i32 100, metadata !37, metadata !DIExpression()), !dbg !38
    %cmp.i = icmp sgt i32 %0, 3, !dbg !40
    br i1 %cmp.i, label %if.then.i, label %if.end.i, !dbg !42

  if.then.i:                                        ; preds = %entry
    tail call void @abort() #3, !dbg !43
    unreachable, !dbg !43

  if.end.i:                                         ; preds = %entry
    %cmp1.i = icmp slt i32 %0, 1, !dbg !44
    br i1 %cmp1.i, label %if.then2.i, label %inl2.exit, !dbg !46

  if.then2.i:                                       ; preds = %if.end.i
    tail call void @abort() #3, !dbg !47
    unreachable, !dbg !47

  inl2.exit:                                        ; preds = %if.end.i
    %mul.i = mul nuw nsw i32 %0, 152, !dbg !48
    %add.i = add nuw nsw i32 %mul.i, 100, !dbg !49
    store i32 %add.i, ptr @g1, align 4, !dbg !50, !tbaa !28
    %1 = load i32, ptr @q2, align 4, !dbg !51, !tbaa !28
    call void @llvm.dbg.value(metadata i32 %1, metadata !32, metadata !DIExpression()), !dbg !52
    call void @llvm.dbg.value(metadata i32 200, metadata !37, metadata !DIExpression()), !dbg !52
    %cmp.i3 = icmp sgt i32 %1, 3, !dbg !54
    br i1 %cmp.i3, label %if.then.i4, label %if.end.i6, !dbg !55

  if.then.i4:                                       ; preds = %inl2.exit
    tail call void @abort() #3, !dbg !56
    unreachable, !dbg !56

  if.end.i6:                                        ; preds = %inl2.exit
    %cmp1.i5 = icmp slt i32 %1, 1, !dbg !57
    br i1 %cmp1.i5, label %if.then2.i7, label %inl2.exit10, !dbg !58

  if.then2.i7:                                      ; preds = %if.end.i6
    tail call void @abort() #3, !dbg !59
    unreachable, !dbg !59

  inl2.exit10:                                      ; preds = %if.end.i6
    %mul.i8 = mul nuw nsw i32 %1, 152, !dbg !60
    %add.i9 = add nuw nsw i32 %mul.i8, 200, !dbg !61
    store i32 %add.i9, ptr @g2, align 4, !dbg !62, !tbaa !28
    %2 = load i32, ptr @q3, align 4, !dbg !63, !tbaa !28
    call void @llvm.dbg.value(metadata i32 %2, metadata !32, metadata !DIExpression()), !dbg !64
    call void @llvm.dbg.value(metadata i32 300, metadata !37, metadata !DIExpression()), !dbg !64
    %cmp.i11 = icmp sgt i32 %2, 3, !dbg !66
    br i1 %cmp.i11, label %if.then.i12, label %if.end.i14, !dbg !67

  if.then.i12:                                      ; preds = %inl2.exit10
    tail call void @abort() #3, !dbg !68
    unreachable, !dbg !68

  if.end.i14:                                       ; preds = %inl2.exit10
    %cmp1.i13 = icmp slt i32 %2, 1, !dbg !69
    br i1 %cmp1.i13, label %if.then2.i15, label %inl2.exit18, !dbg !70

  if.then2.i15:                                     ; preds = %if.end.i14
    tail call void @abort() #3, !dbg !71
    unreachable, !dbg !71

  inl2.exit18:                                      ; preds = %if.end.i14
    %mul.i16 = mul nuw nsw i32 %2, 152, !dbg !72
    %add.i17 = add nuw nsw i32 %mul.i16, 300, !dbg !73
    store i32 %add.i17, ptr @q3, align 4, !dbg !74, !tbaa !28
    ret i32 0, !dbg !75
  }

  ; Function Attrs: noreturn nounwind
  declare !dbg !76 void @abort() local_unnamed_addr #1

  ; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
  declare void @llvm.dbg.value(metadata, metadata, metadata) #2

  attributes #0 = { nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #1 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
  attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
  attributes #3 = { noreturn nounwind }

  !llvm.dbg.cu = !{!2}
  !llvm.module.flags = !{!16, !17, !18, !19, !20, !21}
  !llvm.ident = !{!22}

  !0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
  !1 = distinct !DIGlobalVariable(name: "q1", scope: !2, file: !3, line: 12, type: !7, isLocal: false, isDefinition: true)
  !2 = distinct !DICompileUnit(language: DW_LANG_C11, file: !3, producer: "clang version 16.0.0.prerel", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, globals: !4, splitDebugInlining: false, nameTableKind: None)
  !3 = !DIFile(filename: "case2.c", directory: "/", checksumkind: CSK_MD5, checksum: "5093c50294e57eaa7f9ed00bfd62075c")
  !4 = !{!0, !5, !8, !10, !12, !14}
  !5 = !DIGlobalVariableExpression(var: !6, expr: !DIExpression())
  !6 = distinct !DIGlobalVariable(name: "q2", scope: !2, file: !3, line: 12, type: !7, isLocal: false, isDefinition: true)
  !7 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !8 = !DIGlobalVariableExpression(var: !9, expr: !DIExpression())
  !9 = distinct !DIGlobalVariable(name: "q3", scope: !2, file: !3, line: 12, type: !7, isLocal: false, isDefinition: true)
  !10 = !DIGlobalVariableExpression(var: !11, expr: !DIExpression())
  !11 = distinct !DIGlobalVariable(name: "g1", scope: !2, file: !3, line: 13, type: !7, isLocal: false, isDefinition: true)
  !12 = !DIGlobalVariableExpression(var: !13, expr: !DIExpression())
  !13 = distinct !DIGlobalVariable(name: "g2", scope: !2, file: !3, line: 13, type: !7, isLocal: false, isDefinition: true)
  !14 = !DIGlobalVariableExpression(var: !15, expr: !DIExpression())
  !15 = distinct !DIGlobalVariable(name: "g3", scope: !2, file: !3, line: 13, type: !7, isLocal: false, isDefinition: true)
  !16 = !{i32 7, !"Dwarf Version", i32 5}
  !17 = !{i32 2, !"Debug Info Version", i32 3}
  !18 = !{i32 1, !"wchar_size", i32 4}
  !19 = !{i32 8, !"PIC Level", i32 2}
  !20 = !{i32 7, !"PIE Level", i32 2}
  !21 = !{i32 7, !"uwtable", i32 2}
  !22 = !{!"clang version 16.0.0.prerel"}
  !23 = distinct !DISubprogram(name: "multiple_inl_multiple_loc", scope: !3, file: !3, line: 15, type: !24, scopeLine: 16, flags: DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !26)
  !24 = !DISubroutineType(types: !25)
  !25 = !{!7}
  !26 = !{}
  !27 = !DILocation(line: 17, column: 13, scope: !23)
  !28 = !{!29, !29, i64 0}
  !29 = !{!"int", !30, i64 0}
  !30 = !{!"omnipotent char", !31, i64 0}
  !31 = !{!"Simple C/C++ TBAA"}
  !32 = !DILocalVariable(name: "q", arg: 1, scope: !33, file: !3, line: 3, type: !7)
  !33 = distinct !DISubprogram(name: "inl2", scope: !3, file: !3, line: 3, type: !34, scopeLine: 4, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !36)
  !34 = !DISubroutineType(types: !35)
  !35 = !{!7, !7, !7}
  !36 = !{!32, !37}
  !37 = !DILocalVariable(name: "n", arg: 2, scope: !33, file: !3, line: 3, type: !7)
  !38 = !DILocation(line: 0, scope: !33, inlinedAt: !39)
  !39 = distinct !DILocation(line: 17, column: 8, scope: !23)
  !40 = !DILocation(line: 5, column: 9, scope: !41, inlinedAt: !39)
  !41 = distinct !DILexicalBlock(scope: !33, file: !3, line: 5, column: 7)
  !42 = !DILocation(line: 5, column: 7, scope: !33, inlinedAt: !39)
  !43 = !DILocation(line: 6, column: 5, scope: !41, inlinedAt: !39)
  !44 = !DILocation(line: 7, column: 9, scope: !45, inlinedAt: !39)
  !45 = distinct !DILexicalBlock(scope: !33, file: !3, line: 7, column: 7)
  !46 = !DILocation(line: 7, column: 7, scope: !33, inlinedAt: !39)
  !47 = !DILocation(line: 8, column: 5, scope: !45, inlinedAt: !39)
  !48 = !DILocation(line: 9, column: 12, scope: !33, inlinedAt: !39)
  !49 = !DILocation(line: 9, column: 18, scope: !33, inlinedAt: !39)
  !50 = !DILocation(line: 17, column: 6, scope: !23)
  !51 = !DILocation(line: 18, column: 13, scope: !23)
  !52 = !DILocation(line: 0, scope: !33, inlinedAt: !53)
  !53 = distinct !DILocation(line: 18, column: 8, scope: !23)
  !54 = !DILocation(line: 5, column: 9, scope: !41, inlinedAt: !53)
  !55 = !DILocation(line: 5, column: 7, scope: !33, inlinedAt: !53)
  !56 = !DILocation(line: 6, column: 5, scope: !41, inlinedAt: !53)
  !57 = !DILocation(line: 7, column: 9, scope: !45, inlinedAt: !53)
  !58 = !DILocation(line: 7, column: 7, scope: !33, inlinedAt: !53)
  !59 = !DILocation(line: 8, column: 5, scope: !45, inlinedAt: !53)
  !60 = !DILocation(line: 9, column: 12, scope: !33, inlinedAt: !53)
  !61 = !DILocation(line: 9, column: 18, scope: !33, inlinedAt: !53)
  !62 = !DILocation(line: 18, column: 6, scope: !23)
  !63 = !DILocation(line: 19, column: 13, scope: !23)
  !64 = !DILocation(line: 0, scope: !33, inlinedAt: !65)
  !65 = distinct !DILocation(line: 19, column: 8, scope: !23)
  !66 = !DILocation(line: 5, column: 9, scope: !41, inlinedAt: !65)
  !67 = !DILocation(line: 5, column: 7, scope: !33, inlinedAt: !65)
  !68 = !DILocation(line: 6, column: 5, scope: !41, inlinedAt: !65)
  !69 = !DILocation(line: 7, column: 9, scope: !45, inlinedAt: !65)
  !70 = !DILocation(line: 7, column: 7, scope: !33, inlinedAt: !65)
  !71 = !DILocation(line: 8, column: 5, scope: !45, inlinedAt: !65)
  !72 = !DILocation(line: 9, column: 12, scope: !33, inlinedAt: !65)
  !73 = !DILocation(line: 9, column: 18, scope: !33, inlinedAt: !65)
  !74 = !DILocation(line: 19, column: 6, scope: !23)
  !75 = !DILocation(line: 20, column: 3, scope: !23)
  !76 = !DISubprogram(name: "abort", scope: !77, file: !77, line: 514, type: !78, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagOptimized, retainedNodes: !26)
  !77 = !DIFile(filename: "/usr/include/stdlib.h", directory: "", checksumkind: CSK_MD5, checksum: "f7a1412d75d9e3df251dfc21b02d59ef")
  !78 = !DISubroutineType(types: !79)
  !79 = !{null}

...
---
name:            multiple_inl_multiple_loc
alignment:       16
tracksRegLiveness: true
tracksDebugUserValues: true
frameInfo:
  stackSize:       8
  offsetAdjustment: -8
  maxAlignment:    1
  adjustsStack:    true
  hasCalls:        true
  maxCallFrameSize: 0
machineFunctionInfo: {}
body:             |
  bb.0.entry:
    successors: %bb.1(0x00000800), %bb.2(0x7ffff800)

    frame-setup PUSH64r undef $rax, implicit-def $rsp, implicit $rsp
    frame-setup CFI_INSTRUCTION def_cfa_offset 16
    renamable $eax = MOV32rm $rip, 1, $noreg, @q1, $noreg, debug-instr-number 1, debug-location !27 :: (dereferenceable load (s32) from @q1, !tbaa !28)
    DBG_INSTR_REF !32, !DIExpression(DW_OP_LLVM_arg, 0), dbg-instr-ref(1, 0), debug-location !38
    DBG_VALUE 100, $noreg, !37, !DIExpression(), debug-location !38
    CMP32ri8 renamable $eax, 4, implicit-def $eflags, debug-location !40
    JCC_1 %bb.2, 12, implicit killed $eflags, debug-location !42
    JMP_1 %bb.1, debug-location !42

  bb.1.if.then.i:
    successors:

    CALL64pcrel32 target-flags(x86-plt) @abort, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !43

  bb.2.if.end.i:
    successors: %bb.3(0x00000800), %bb.4(0x7ffff800)
    liveins: $eax

    TEST32rr renamable $eax, renamable $eax, implicit-def $eflags, debug-location !44
    JCC_1 %bb.4, 15, implicit killed $eflags, debug-location !46
    JMP_1 %bb.3, debug-location !46

  bb.3.if.then2.i:
    successors:

    CALL64pcrel32 target-flags(x86-plt) @abort, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !47

  bb.4.inl2.exit:
    successors: %bb.5(0x00000800), %bb.6(0x7ffff800)
    liveins: $eax

    renamable $eax = nuw nsw IMUL32rri killed renamable $eax, 152, implicit-def dead $eflags, debug-location !48
    renamable $eax = nuw nsw ADD32ri8 killed renamable $eax, 100, implicit-def dead $eflags, debug-location !49
    MOV32mr $rip, 1, $noreg, @g1, $noreg, killed renamable $eax, debug-location !50 :: (store (s32) into @g1, !tbaa !28)
    renamable $eax = MOV32rm $rip, 1, $noreg, @q2, $noreg, debug-instr-number 2, debug-location !51 :: (dereferenceable load (s32) from @q2, !tbaa !28)
    DBG_INSTR_REF !32, !DIExpression(DW_OP_LLVM_arg, 0), dbg-instr-ref(2, 0), debug-location !52
    DBG_VALUE 200, $noreg, !37, !DIExpression(), debug-location !52
    CMP32ri8 renamable $eax, 4, implicit-def $eflags, debug-location !54
    JCC_1 %bb.6, 12, implicit killed $eflags, debug-location !55
    JMP_1 %bb.5, debug-location !55

  bb.5.if.then.i4:
    successors:

    CALL64pcrel32 target-flags(x86-plt) @abort, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !56

  bb.6.if.end.i6:
    successors: %bb.7(0x00000800), %bb.8(0x7ffff800)
    liveins: $eax

    TEST32rr renamable $eax, renamable $eax, implicit-def $eflags, debug-location !57
    JCC_1 %bb.8, 15, implicit killed $eflags, debug-location !58
    JMP_1 %bb.7, debug-location !58

  bb.7.if.then2.i7:
    successors:

    CALL64pcrel32 target-flags(x86-plt) @abort, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !59

  bb.8.inl2.exit10:
    successors: %bb.9(0x00000800), %bb.10(0x7ffff800)
    liveins: $eax

    renamable $eax = nuw nsw IMUL32rri killed renamable $eax, 152, implicit-def dead $eflags, debug-location !60
    renamable $eax = nuw nsw ADD32ri killed renamable $eax, 200, implicit-def dead $eflags, debug-location !61
    MOV32mr $rip, 1, $noreg, @g2, $noreg, killed renamable $eax, debug-location !62 :: (store (s32) into @g2, !tbaa !28)
    renamable $eax = MOV32rm $rip, 1, $noreg, @q3, $noreg, debug-instr-number 3, debug-location !63 :: (dereferenceable load (s32) from @q3, !tbaa !28)
    DBG_INSTR_REF !32, !DIExpression(DW_OP_LLVM_arg, 0), dbg-instr-ref(3, 0), debug-location !64
    DBG_VALUE 300, $noreg, !37, !DIExpression(), debug-location !64
    CMP32ri8 renamable $eax, 4, implicit-def $eflags, debug-location !66
    JCC_1 %bb.10, 12, implicit killed $eflags, debug-location !67
    JMP_1 %bb.9, debug-location !67

  bb.9.if.then.i12:
    successors:

    CALL64pcrel32 target-flags(x86-plt) @abort, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !68

  bb.10.if.end.i14:
    successors: %bb.11(0x00000800), %bb.12(0x7ffff800)
    liveins: $eax

    TEST32rr renamable $eax, renamable $eax, implicit-def $eflags, debug-location !69
    JCC_1 %bb.12, 15, implicit killed $eflags, debug-location !70
    JMP_1 %bb.11, debug-location !70

  bb.11.if.then2.i15:
    successors:

    CALL64pcrel32 target-flags(x86-plt) @abort, csr_64, implicit $rsp, implicit $ssp, implicit-def $rsp, implicit-def $ssp, debug-location !71

  bb.12.inl2.exit18:
    liveins: $eax

    renamable $eax = nuw nsw IMUL32rri killed renamable $eax, 152, implicit-def dead $eflags, debug-location !72
    renamable $eax = nuw nsw ADD32ri killed renamable $eax, 300, implicit-def dead $eflags, debug-location !73
    MOV32mr $rip, 1, $noreg, @q3, $noreg, killed renamable $eax, debug-location !74 :: (store (s32) into @q3, !tbaa !28)
    $eax = MOV32r0 implicit-def dead $eflags, debug-location !75
    $rcx = frame-destroy POP64r implicit-def $rsp, implicit $rsp, debug-location !75
    frame-destroy CFI_INSTRUCTION def_cfa_offset 8, debug-location !75
    RET 0, $eax, debug-location !75

...

# In this case we have a abort call block folded from two locations in
# three inlined instances of inl1():
#
#  1 | #include <stdlib.h>
#  2 |
#  3 | static inline int inl2(int q, int n)
#  4 | {
#  5 |   if (q > 3)
#  6 |     abort();
#  7 |   if (q < 1)
#  8 |     abort();
#  9 |   return q * 152 + n;
# 10 | }
# 11 |
# 12 | int q1 = 1, q2 = 4, q3 = 2;
# 13 | int g1, g2, g3;
# 14 |
# 15 | int multiple_inl_multiple_loc()
# 16 | {
# 17 |   g1 = inl2(q1, 100);
# 18 |   g2 = inl2(q2, 200);
# 19 |   q3 = inl2(q3, 300);
# 20 |   return 0;
# 21 | }
#
# We should produce a merged location describing that the abort call is located
# at line 0 in inl2() inlined at line 0 in multiple_inl_multiple_loc().

# CHECK-DAG: [[INLINER:![0-9]+]] = distinct !DISubprogram(name: "multiple_inl_multiple_loc"
# CHECK-DAG: [[INLINEE:![0-9]+]] = distinct !DISubprogram(name: "inl2"

# CHECK-NOT: CALL64pcrel32
# CHECK: CALL64pcrel32 target-flags(x86-plt) @abort, {{.*}} debug-location !DILocation(line: 0, scope: [[INLINEE]], inlinedAt: !DILocation(line: 0, scope: [[INLINER]]))
# CHECK-NOT: CALL64pcrel32
