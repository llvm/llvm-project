--- |
  ; RUN: llc --run-pass=machinelicm -sink-insts-to-avoid-spills %s -o - | FileCheck %s --match-full-lines
  ; CHECK-LABEL: bb.4 (%ir-block.9):
  ; CHECK: %0:gr64 = nuw ADD64ri8 %9, 4, implicit-def dead $eflags
  ; 
  ; When instructions are sunk to prevent register spills, line numbers should not be retained.
   target triple = "x86_64-unknown-linux-gnu"

  %struct.A = type { i32, i32, i32, i32, i32, i32 }
  
  define void @p(i8* nocapture readonly %input, %struct.A* %a) !dbg !10 {
    %1 = getelementptr inbounds %struct.A, %struct.A* %a, i64 0, i32 1, !dbg !18
    %2 = getelementptr inbounds %struct.A, %struct.A* %a, i64 0, i32 2
    %3 = getelementptr inbounds %struct.A, %struct.A* %a, i64 0, i32 3
    %4 = getelementptr inbounds %struct.A, %struct.A* %a, i64 0, i32 4
    %5 = getelementptr inbounds %struct.A, %struct.A* %a, i64 0, i32 5
    %scevgep = getelementptr i8, i8* %input, i64 1
    br label %.backedge
  
  .backedge:                                        ; preds = %.backedge.backedge, %0
    %lsr.iv = phi i8* [ %scevgep1, %.backedge.backedge ], [ %scevgep, %0 ]
    %6 = load i8, i8* %lsr.iv, align 1
    switch i8 %6, label %.backedge.backedge [
      i8 0, label %7
      i8 10, label %9
      i8 20, label %10
      i8 30, label %11
      i8 40, label %12
      i8 50, label %13
    ]
  
  7:                                                ; preds = %.backedge
    %8 = bitcast %struct.A* %a to i32*
    tail call void @f(i32* %8)
    br label %.backedge.backedge
  
  9:                                                ; preds = %.backedge
    tail call void @f(i32* %1)
    br label %.backedge.backedge
  
  .backedge.backedge:                               ; preds = %13, %12, %11, %10, %9, %7, %.backedge
    %scevgep1 = getelementptr i8, i8* %lsr.iv, i64 1
    br label %.backedge
  
  10:                                               ; preds = %.backedge
    tail call void @f(i32* %2)
    br label %.backedge.backedge
  
  11:                                               ; preds = %.backedge
    tail call void @f(i32* %3)
    br label %.backedge.backedge
  
  12:                                               ; preds = %.backedge
    tail call void @f(i32* %4)
    br label %.backedge.backedge
  
  13:                                               ; preds = %.backedge
    tail call void @f(i32* %5)
    br label %.backedge.backedge
  }
  
  declare void @f(i32*)
  
  ; Function Attrs: nounwind
  declare void @llvm.stackprotector(i8*, i8**)


  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!7, !8}
  !llvm.ident = !{!9}
  
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 10.0.0 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, globals: !3)
  !1 = !DIFile(filename: "t.ll", directory: "tmp/X86")
  !2 = !{}
  !3 = !{!4}
  !4 = !DIGlobalVariableExpression(var: !5, expr: !DIExpression())
  !5 = !DIGlobalVariable(name: "x", scope: !0, file: !1, line: 1, type: !6, isLocal: false, isDefinition: true)
  !6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
  !7 = !{i32 2, !"Dwarf Version", i32 4}
  !8 = !{i32 2, !"Debug Info Version", i32 3}
  !9 = !{!"clang version 10.0.0 "}
  !10 = distinct !DISubprogram(name: "p", scope: !1, file: !1, line: 2, type: !11, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !16)
  !11 = !DISubroutineType(types: !12)
  !12 = !{null, !13}
  !13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
  !14 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !15)
  !15 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
  !16 = !{!17}
  !17 = !DILocalVariable(name: "a", arg: 1, scope: !10, file: !1, line: 2, type: !15)
  !18 = !DILocation(line: 4, column: 3, scope: !10)


...
---
name:            p
tracksRegLiveness: true
registers:
  - { id: 0, class: gr64, preferred-register: '' }
  - { id: 1, class: gr64, preferred-register: '' }
  - { id: 2, class: gr64, preferred-register: '' }
  - { id: 3, class: gr64, preferred-register: '' }
  - { id: 4, class: gr64, preferred-register: '' }
  - { id: 5, class: gr64, preferred-register: '' }
  - { id: 6, class: gr64, preferred-register: '' }
  - { id: 7, class: gr64, preferred-register: '' }
  - { id: 8, class: gr64, preferred-register: '' }
  - { id: 9, class: gr64, preferred-register: '' }
  - { id: 10, class: gr64_nosp, preferred-register: '' }
  - { id: 11, class: gr32, preferred-register: '' }
  - { id: 12, class: gr64, preferred-register: '' }
  - { id: 13, class: gr64, preferred-register: '' }
  - { id: 14, class: gr64, preferred-register: '' }
  - { id: 15, class: gr64, preferred-register: '' }
jumpTable:
  kind:            label-difference32
  entries:
    - id:              0
      blocks:          [ '%bb.2', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.3', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.5', '%bb.4', '%bb.4', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', 
                         '%bb.6', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.7', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', '%bb.4', 
                         '%bb.4', '%bb.4', '%bb.8' ]
body:             |
  bb.0 (%ir-block.0):
    successors: %bb.1(0x80000000)
    liveins: $rdi, $rsi
  
    %9:gr64 = COPY $rsi
    %8:gr64 = COPY $rdi
    %0:gr64 = nuw ADD64ri8 %9, 4, implicit-def dead $eflags, debug-location !18
    %1:gr64 = nuw ADD64ri8 %9, 8, implicit-def dead $eflags
    %2:gr64 = nuw ADD64ri8 %9, 12, implicit-def dead $eflags
    %3:gr64 = nuw ADD64ri8 %9, 16, implicit-def dead $eflags
    %4:gr64 = nuw ADD64ri8 %9, 20, implicit-def dead $eflags
    %5:gr64 = INC64r %8, implicit-def dead $eflags
  
  bb.1..backedge:
    successors: %bb.4(0x09249249), %bb.9(0x76db6db7)
  
    %6:gr64 = PHI %5, %bb.0, %7, %bb.4
    %11:gr32 = MOVZX32rm8 %6, 1, $noreg, 0, $noreg :: (load 1 from %ir.lsr.iv)
    %10:gr64_nosp = SUBREG_TO_REG 0, killed %11, %subreg.sub_32bit
    %12:gr64 = SUB64ri8 %10, 50, implicit-def $eflags
    JCC_1 %bb.4, 7, implicit $eflags
  
  bb.9..backedge:
    successors: %bb.2(0x13b13b14), %bb.4(0x09d89d8a), %bb.3(0x13b13b14), %bb.5(0x13b13b14), %bb.6(0x13b13b14), %bb.7(0x13b13b14), %bb.8(0x13b13b14)
  
    %13:gr64 = LEA64r $rip, 1, $noreg, %jump-table.0, $noreg
    %14:gr64 = MOVSX64rm32 %13, 4, %10, 0, $noreg :: (load 4 from jump-table)
    %15:gr64 = ADD64rr %14, %13, implicit-def dead $eflags
    JMP64r killed %15
  
  bb.2 (%ir-block.7):
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %9
    CALL64pcrel32 target-flags(x86-plt) @f, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.4
  
  bb.3 (%ir-block.9):
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %0
    CALL64pcrel32 target-flags(x86-plt) @f, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  
  bb.4..backedge.backedge:
    successors: %bb.1(0x80000000)
  
    %7:gr64 = INC64r %6, implicit-def dead $eflags
    JMP_1 %bb.1
  
  bb.5 (%ir-block.10):
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %1
    CALL64pcrel32 target-flags(x86-plt) @f, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.4
  
  bb.6 (%ir-block.11):
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %2
    CALL64pcrel32 target-flags(x86-plt) @f, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.4
  
  bb.7 (%ir-block.12):
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %3
    CALL64pcrel32 target-flags(x86-plt) @f, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.4
  
  bb.8 (%ir-block.13):
    successors: %bb.4(0x80000000)
  
    ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    $rdi = COPY %4
    CALL64pcrel32 target-flags(x86-plt) @f, csr_64, implicit $rsp, implicit $ssp, implicit $rdi, implicit-def $rsp, implicit-def $ssp
    ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
    JMP_1 %bb.4

...
