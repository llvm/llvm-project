; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals
; RUN: opt -passes=sroa,verify -S %s -o - -experimental-assignment-tracking \
; RUN: | FileCheck %s --implicit-check-not="call void @llvm.dbg"

; Check that the new slices of an alloca and memset intructions get dbg.assign
; intrinsics with the correct fragment info. Ensure that only the
; value-expression gets fragment info; that the address-expression remains
; untouched.

;; $ cat test.cpp
;; void do_something();
;; struct LargeStruct {
;;   int A, B, C;
;;   int Var;
;;   int D, E, F;
;; };
;; int Glob;
;; bool Cond;
;; int use(LargeStruct);
;; int example() {
;;   LargeStruct S = {0};
;;   S.Var = Glob;
;;   use(S);
;;   return S.Var;
;; }
;; $ clang test.cpp -Xclang -disable-llvm-passes -O2 -g -c -S -emit-llvm -o - \
;;   | opt -passes=declare-to-assign -S -o -



;; The memset has been split into [0, 96)[96, 128)[128, 224) bit slices. The
;; memset for the middle slice has been removed.

;; This is the one we care about most in this test: check that a memset->store
;; gets a correct dbg.assign.

;; The load from global+store becomes a load.
;; FIXME: In reality it is actually stored again later on.


target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%struct.LargeStruct = type { i32, i32, i32, i32, i32, i32, i32 }

@Glob = dso_local global i32 0, align 4, !dbg !0
@Cond = dso_local global i8 0, align 1, !dbg !6

; Function Attrs: uwtable mustprogress
;.
; CHECK: @[[GLOB:[a-zA-Z0-9_$"\\.-]+]] = dso_local global i32 0, align 4, !dbg [[DBG0:![0-9]+]]
; CHECK: @[[COND:[a-zA-Z0-9_$"\\.-]+]] = dso_local global i8 0, align 1, !dbg [[DBG6:![0-9]+]]
;.
define dso_local i32 @_Z7examplev() #0 !dbg !14 {
; CHECK-LABEL: @_Z7examplev(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[S_SROA_0:%.*]] = alloca { i32, i32, i32 }, align 8, !DIAssignID [[DIASSIGNID28:![0-9]+]]
; CHECK-NEXT:    call void @llvm.dbg.assign(metadata i1 undef, metadata [[META18:![0-9]+]], metadata !DIExpression(DW_OP_LLVM_fragment, 0, 96), metadata [[DIASSIGNID28]], metadata ptr [[S_SROA_0]], metadata !DIExpression()), !dbg [[DBG29:![0-9]+]]
; CHECK-NEXT:    [[S_SROA_6:%.*]] = alloca { i32, i32, i32 }, align 8, !DIAssignID [[DIASSIGNID30:![0-9]+]]
; CHECK-NEXT:    call void @llvm.dbg.assign(metadata i1 undef, metadata [[META18]], metadata !DIExpression(DW_OP_LLVM_fragment, 128, 96), metadata [[DIASSIGNID30]], metadata ptr [[S_SROA_6]], metadata !DIExpression()), !dbg [[DBG29]]
; CHECK-NEXT:    [[AGG_TMP:%.*]] = alloca [[STRUCT_LARGESTRUCT:%.*]], align 8
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 12, ptr [[S_SROA_0]]), !dbg [[DBG31:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 12, ptr [[S_SROA_6]]), !dbg [[DBG31]]
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 8 [[S_SROA_0]], i8 0, i64 12, i1 false), !dbg [[DBG32:![0-9]+]], !DIAssignID [[DIASSIGNID33:![0-9]+]]
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 8 [[S_SROA_6]], i8 0, i64 12, i1 false), !dbg [[DBG32]], !DIAssignID [[DIASSIGNID34:![0-9]+]]
; CHECK-NEXT:    call void @llvm.dbg.assign(metadata i8 0, metadata [[META18]], metadata !DIExpression(DW_OP_LLVM_fragment, 0, 96), metadata [[DIASSIGNID33]], metadata ptr [[S_SROA_0]], metadata !DIExpression()), !dbg [[DBG32]]
; CHECK-NEXT:    call void @llvm.dbg.assign(metadata i32 0, metadata [[META18]], metadata !DIExpression(DW_OP_LLVM_fragment, 96, 32), metadata [[META35:![0-9]+]], metadata ptr undef, metadata !DIExpression()), !dbg [[DBG32]]
; CHECK-NEXT:    call void @llvm.dbg.assign(metadata i8 0, metadata [[META18]], metadata !DIExpression(DW_OP_LLVM_fragment, 128, 96), metadata [[DIASSIGNID34]], metadata ptr [[S_SROA_6]], metadata !DIExpression()), !dbg [[DBG32]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @Glob, align 4, !dbg [[DBG36:![0-9]+]]
; CHECK-NEXT:    call void @llvm.dbg.assign(metadata i32 [[TMP0]], metadata [[META18]], metadata !DIExpression(DW_OP_LLVM_fragment, 96, 32), metadata [[META37:![0-9]+]], metadata ptr undef, metadata !DIExpression()), !dbg [[DBG38:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = bitcast ptr [[AGG_TMP]] to ptr, !dbg [[DBG39:![0-9]+]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[TMP1]], ptr align 8 [[S_SROA_0]], i64 12, i1 false), !dbg [[DBG39]]
; CHECK-NEXT:    [[S_SROA_4_0__SROA_IDX:%.*]] = getelementptr inbounds i8, ptr [[TMP1]], i64 12, !dbg [[DBG39]]
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[S_SROA_4_0__SROA_IDX]], align 4, !dbg [[DBG39]]
; CHECK-NEXT:    [[S_SROA_6_0__SROA_IDX:%.*]] = getelementptr inbounds i8, ptr [[TMP1]], i64 16, !dbg [[DBG39]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr align 4 [[S_SROA_6_0__SROA_IDX]], ptr align 8 [[S_SROA_6]], i64 12, i1 false), !dbg [[DBG39]]
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @_Z3use11LargeStruct(ptr byval([[STRUCT_LARGESTRUCT]]) align 8 [[AGG_TMP]]), !dbg [[DBG40:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 12, ptr [[S_SROA_0]]), !dbg [[DBG41:![0-9]+]]
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 12, ptr [[S_SROA_6]]), !dbg [[DBG41]]
; CHECK-NEXT:    ret i32 [[TMP0]], !dbg [[DBG42:![0-9]+]]
;
entry:
  %S = alloca %struct.LargeStruct, align 4, !DIAssignID !28
  call void @llvm.dbg.assign(metadata i1 undef, metadata !18, metadata !DIExpression(), metadata !28, metadata ptr %S, metadata !DIExpression()), !dbg !29
  %agg.tmp = alloca %struct.LargeStruct, align 8
  %0 = bitcast ptr %S to ptr, !dbg !30
  call void @llvm.lifetime.start.p0i8(i64 28, ptr %0) #5, !dbg !30
  %1 = bitcast ptr %S to ptr, !dbg !31
  call void @llvm.memset.p0i8.i64(ptr align 4 %1, i8 0, i64 28, i1 false), !dbg !31, !DIAssignID !32
  call void @llvm.dbg.assign(metadata i8 0, metadata !18, metadata !DIExpression(), metadata !32, metadata ptr %1, metadata !DIExpression()), !dbg !31
  %2 = load i32, ptr @Glob, align 4, !dbg !33
  %Var = getelementptr inbounds %struct.LargeStruct, ptr %S, i32 0, i32 3, !dbg !38
  store i32 %2, ptr %Var, align 4, !dbg !39, !DIAssignID !42
  call void @llvm.dbg.assign(metadata i32 %2, metadata !18, metadata !DIExpression(DW_OP_LLVM_fragment, 96, 32), metadata !42, metadata ptr %Var, metadata !DIExpression()), !dbg !39
  %3 = bitcast ptr %agg.tmp to ptr, !dbg !43
  %4 = bitcast ptr %S to ptr, !dbg !43
  call void @llvm.memcpy.p0i8.p0i8.i64(ptr align 4 %3, ptr align 4 %4, i64 28, i1 false), !dbg !43
  %call = call i32 @_Z3use11LargeStruct(ptr byval(%struct.LargeStruct) align 8 %agg.tmp), !dbg !45
  %Var1 = getelementptr inbounds %struct.LargeStruct, ptr %S, i32 0, i32 3, !dbg !46
  %5 = load i32, ptr %Var1, align 4, !dbg !46
  %6 = bitcast ptr %S to ptr, !dbg !47
  call void @llvm.lifetime.end.p0i8(i64 28, ptr %6) #5, !dbg !47
  ret i32 %5, !dbg !48
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, ptr nocapture) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #2

declare !dbg !49 dso_local i32 @_Z3use11LargeStruct(ptr byval(%struct.LargeStruct) align 8) #3

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata, metadata) #4

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!10, !11, !12}
!llvm.ident = !{!13}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "Glob", scope: !2, file: !3, line: 7, type: !9, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !3, producer: "clang version 12.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "test.cpp", directory: "/")
!4 = !{}
!5 = !{!0, !6}
!6 = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
!7 = distinct !DIGlobalVariable(name: "Cond", scope: !2, file: !3, line: 8, type: !8, isLocal: false, isDefinition: true)
!8 = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
!9 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!10 = !{i32 7, !"Dwarf Version", i32 4}
!11 = !{i32 2, !"Debug Info Version", i32 3}
!12 = !{i32 1, !"wchar_size", i32 4}
!13 = !{!"clang version 12.0.0"}
!14 = distinct !DISubprogram(name: "example", linkageName: "_Z7examplev", scope: !3, file: !3, line: 10, type: !15, scopeLine: 10, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !17)
!15 = !DISubroutineType(types: !16)
!16 = !{!9}
!17 = !{!18}
!18 = !DILocalVariable(name: "S", scope: !14, file: !3, line: 11, type: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "LargeStruct", file: !3, line: 2, size: 224, flags: DIFlagTypePassByValue, elements: !20, identifier: "_ZTS11LargeStruct")
!20 = !{!21, !22, !23, !24, !25, !26, !27}
!21 = !DIDerivedType(tag: DW_TAG_member, name: "A", scope: !19, file: !3, line: 3, baseType: !9, size: 32)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "B", scope: !19, file: !3, line: 3, baseType: !9, size: 32, offset: 32)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !19, file: !3, line: 3, baseType: !9, size: 32, offset: 64)
!24 = !DIDerivedType(tag: DW_TAG_member, name: "Var", scope: !19, file: !3, line: 4, baseType: !9, size: 32, offset: 96)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "D", scope: !19, file: !3, line: 5, baseType: !9, size: 32, offset: 128)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "E", scope: !19, file: !3, line: 5, baseType: !9, size: 32, offset: 160)
!27 = !DIDerivedType(tag: DW_TAG_member, name: "F", scope: !19, file: !3, line: 5, baseType: !9, size: 32, offset: 192)
!28 = distinct !DIAssignID()
!29 = !DILocation(line: 0, scope: !14)
!30 = !DILocation(line: 11, column: 3, scope: !14)
!31 = !DILocation(line: 11, column: 15, scope: !14)
!32 = distinct !DIAssignID()
!33 = !DILocation(line: 12, column: 11, scope: !14)
!38 = !DILocation(line: 12, column: 5, scope: !14)
!39 = !DILocation(line: 12, column: 9, scope: !14)
!42 = distinct !DIAssignID()
!43 = !DILocation(line: 13, column: 7, scope: !14)
!45 = !DILocation(line: 13, column: 3, scope: !14)
!46 = !DILocation(line: 14, column: 12, scope: !14)
!47 = !DILocation(line: 15, column: 1, scope: !14)
!48 = !DILocation(line: 14, column: 3, scope: !14)
!49 = !DISubprogram(name: "use", linkageName: "_Z3use11LargeStruct", scope: !3, file: !3, line: 9, type: !50, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !4)
!50 = !DISubroutineType(types: !51)
!51 = !{!9, !19}
;.
; CHECK: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
; CHECK: attributes #[[ATTR1:[0-9]+]] = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
; CHECK: attributes #[[ATTR2:[0-9]+]] = { nocallback nofree nounwind willreturn memory(argmem: write) }
; CHECK: attributes #[[ATTR3:[0-9]+]] = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }
;.
; CHECK: [[DBG0]] = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
; CHECK: [[META1:![0-9]+]] = distinct !DIGlobalVariable(name: "Glob", scope: !2, file: !3, line: 7, type: !9, isLocal: false, isDefinition: true)
; CHECK: [[META2:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !3, producer: "clang version 12.0.0", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !5, splitDebugInlining: false, nameTableKind: None)
; CHECK: [[META3:![0-9]+]] = !DIFile(filename: "test.cpp", directory: "/")
; CHECK: [[META4:![0-9]+]] = !{}
; CHECK: [[META5:![0-9]+]] = !{!0, !6}
; CHECK: [[DBG6]] = !DIGlobalVariableExpression(var: !7, expr: !DIExpression())
; CHECK: [[META7:![0-9]+]] = distinct !DIGlobalVariable(name: "Cond", scope: !2, file: !3, line: 8, type: !8, isLocal: false, isDefinition: true)
; CHECK: [[META8:![0-9]+]] = !DIBasicType(name: "bool", size: 8, encoding: DW_ATE_boolean)
; CHECK: [[META9:![0-9]+]] = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
; CHECK: [[META10:![0-9]+]] = !{i32 7, !"Dwarf Version", i32 4}
; CHECK: [[META11:![0-9]+]] = !{i32 2, !"Debug Info Version", i32 3}
; CHECK: [[META12:![0-9]+]] = !{i32 1, !"wchar_size", i32 4}
; CHECK: [[META13:![0-9]+]] = !{!"clang version 12.0.0"}
; CHECK: [[META14:![0-9]+]] = distinct !DISubprogram(name: "example", linkageName: "_Z7examplev", scope: !3, file: !3, line: 10, type: !15, scopeLine: 10, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2, retainedNodes: !17)
; CHECK: [[META15:![0-9]+]] = !DISubroutineType(types: !16)
; CHECK: [[META16:![0-9]+]] = !{!9}
; CHECK: [[META17:![0-9]+]] = !{!18}
; CHECK: [[META18]] = !DILocalVariable(name: "S", scope: !14, file: !3, line: 11, type: !19)
; CHECK: [[META19:![0-9]+]] = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "LargeStruct", file: !3, line: 2, size: 224, flags: DIFlagTypePassByValue, elements: !20, identifier: "_ZTS11LargeStruct")
; CHECK: [[META20:![0-9]+]] = !{!21, !22, !23, !24, !25, !26, !27}
; CHECK: [[META21:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "A", scope: !19, file: !3, line: 3, baseType: !9, size: 32)
; CHECK: [[META22:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "B", scope: !19, file: !3, line: 3, baseType: !9, size: 32, offset: 32)
; CHECK: [[META23:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "C", scope: !19, file: !3, line: 3, baseType: !9, size: 32, offset: 64)
; CHECK: [[META24:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "Var", scope: !19, file: !3, line: 4, baseType: !9, size: 32, offset: 96)
; CHECK: [[META25:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "D", scope: !19, file: !3, line: 5, baseType: !9, size: 32, offset: 128)
; CHECK: [[META26:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "E", scope: !19, file: !3, line: 5, baseType: !9, size: 32, offset: 160)
; CHECK: [[META27:![0-9]+]] = !DIDerivedType(tag: DW_TAG_member, name: "F", scope: !19, file: !3, line: 5, baseType: !9, size: 32, offset: 192)
; CHECK: [[DIASSIGNID28]] = distinct !DIAssignID()
; CHECK: [[DBG29]] = !DILocation(line: 0, scope: !14)
; CHECK: [[DIASSIGNID30]] = distinct !DIAssignID()
; CHECK: [[DBG31]] = !DILocation(line: 11, column: 3, scope: !14)
; CHECK: [[DBG32]] = !DILocation(line: 11, column: 15, scope: !14)
; CHECK: [[DIASSIGNID33]] = distinct !DIAssignID()
; CHECK: [[DIASSIGNID34]] = distinct !DIAssignID()
; CHECK: [[META35]] = distinct !DIAssignID()
; CHECK: [[DBG36]] = !DILocation(line: 12, column: 11, scope: !14)
; CHECK: [[META37]] = distinct !DIAssignID()
; CHECK: [[DBG38]] = !DILocation(line: 12, column: 9, scope: !14)
; CHECK: [[DBG39]] = !DILocation(line: 13, column: 7, scope: !14)
; CHECK: [[DBG40]] = !DILocation(line: 13, column: 3, scope: !14)
; CHECK: [[DBG41]] = !DILocation(line: 15, column: 1, scope: !14)
; CHECK: [[DBG42]] = !DILocation(line: 14, column: 3, scope: !14)
; CHECK: [[META43:![0-9]+]] = !DISubprogram(name: "use", linkageName: "_Z3use11LargeStruct", scope: !3, file: !3, line: 9, type: !44, flags: DIFlagPrototyped, spFlags: DISPFlagOptimized, retainedNodes: !4)
; CHECK: [[META44:![0-9]+]] = !DISubroutineType(types: !45)
; CHECK: [[META45:![0-9]+]] = !{!9, !19}
;.
