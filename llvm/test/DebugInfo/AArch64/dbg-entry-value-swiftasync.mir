# RUN: llc -start-after=machineverifier -O0 %s -filetype=obj -o - | llvm-dwarfdump - | FileCheck %s

# CHECK:      DW_TAG_variable
# CHECK-NEXT:   DW_AT_location        (DW_OP_GNU_entry_value(DW_OP_reg22 W22))
# CHECK-NEXT:   DW_AT_name    ("a")
# CHECK:      DW_TAG_variable
# CHECK-NEXT:   DW_AT_location
# CHECK-SAME:     DW_OP_GNU_entry_value(DW_OP_reg22 W22), DW_OP_piece 0x8,
# CHECK-SAME:     DW_OP_GNU_entry_value(DW_OP_reg22 W22), DW_OP_plus_uconst 0x2a, DW_OP_piece 0x8)
# CHECK-NEXT:   DW_AT_name    ("fragmented_var")
# CHECK:      DW_TAG_variable
# CHECK-NEXT:   DW_AT_location       (DW_OP_piece 0x8, DW_OP_GNU_entry_value(DW_OP_reg22 W22), DW_OP_piece 0x8)
# CHECK-NEXT:   DW_AT_name    ("multi_type_fragmented_var")


--- |
  target triple = "aarch64--"
  define void @foo(ptr %unused_arg, ptr swiftasync %async_arg) !dbg !4 {
    %storage = alloca i64
    call void @llvm.dbg.declare(metadata ptr %async_arg, metadata !10, metadata !DIExpression(DW_OP_LLVM_entry_value, 1)), !dbg !12
    ; A two fragment variable.
    ; Fragments intentionally out of order to ensure the code can handle this.
    call void @llvm.dbg.declare(metadata ptr %async_arg, metadata !10, metadata !DIExpression(DW_OP_LLVM_entry_value, 1, DW_OP_plus_uconst, 42, DW_OP_LLVM_fragment, 64, 64)), !dbg !12
    call void @llvm.dbg.declare(metadata ptr %async_arg, metadata !11, metadata !DIExpression(DW_OP_LLVM_entry_value, 1, DW_OP_LLVM_fragment, 0, 64)), !dbg !12
    ; A fragmented variable mixing entry values and stack slot locations.
    call void @llvm.dbg.declare(metadata ptr %async_arg, metadata !13, metadata !DIExpression(DW_OP_LLVM_entry_value, 1, DW_OP_LLVM_fragment, 64, 64)), !dbg !12
    call void @llvm.dbg.declare(metadata ptr %storage, metadata !13, metadata !DIExpression(DW_OP_LLVM_fragment, 0, 64)), !dbg !12
    ret void, !dbg !12
  }
  declare void @llvm.dbg.declare(metadata, metadata, metadata)
  declare void @consume(ptr)
  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3}
  !0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug)
  !1 = !DIFile(filename: "x.c", directory: "/")
  !2 = !{i32 2, !"Dwarf Version", i32 4}
  !3 = !{i32 2, !"Debug Info Version", i32 3}
  !4 = distinct !DISubprogram(name: "f", scope: !1, file: !1, line: 1, type: !5, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !0)
  !5 = !DISubroutineType(types: !6)
  !6 = !{null, !7, !7, !7}
  !7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 128)
  !9 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
  !10 = !DILocalVariable(name: "a", scope: !4, file: !1, line: 1, type: !7)
  !11 = !DILocalVariable(name: "fragmented_var", scope: !4, file: !1, line: 1, type: !7)
  !12 = !DILocation(line: 1, column: 37, scope: !4)
  !13 = !DILocalVariable(name: "multi_type_fragmented_var", scope: !4, file: !1, line: 1, type: !7)
...
---
name:            foo
liveins:
  - { reg: '$x0', virtual-reg: '' }
  - { reg: '$x22', virtual-reg: '' }
stack:
  - { id: 0, name: '', type: spill-slot, offset: -16, size: 8, alignment: 16,
      stack-id: default, callee-saved-register: '$lr', callee-saved-restored: true }
  - { id: 1, name: '', type: default, offset: 0, size: 1, alignment: 8,
      stack-id: default, callee-saved-register: '', callee-saved-restored: true,
      debug-info-variable: '!13', debug-info-expression: '!DIExpression(DW_OP_LLVM_fragment, 0, 64)',
      debug-info-location: '!12' }

entry_values:
  - { entry-value-register: '$x22', debug-info-variable: '!10', debug-info-expression: '!DIExpression(DW_OP_LLVM_entry_value, 1, DW_OP_deref)',
      debug-info-location: '!12' }
  - { entry-value-register: '$x22', debug-info-variable: '!11', debug-info-expression: '!DIExpression(DW_OP_LLVM_entry_value, 1, DW_OP_plus_uconst, 42, DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)',
      debug-info-location: '!12' }
  - { entry-value-register: '$x22', debug-info-variable: '!11', debug-info-expression: '!DIExpression(DW_OP_LLVM_entry_value, 1,  DW_OP_deref, DW_OP_LLVM_fragment, 0, 64)',
      debug-info-location: '!12' }
  - { entry-value-register: '$x22', debug-info-variable: '!13', debug-info-expression: '!DIExpression(DW_OP_LLVM_entry_value, 1, DW_OP_deref, DW_OP_LLVM_fragment, 64, 64)',
      debug-info-location: '!12' }
body:             |
  bb.0 (%ir-block.0):
    liveins: $x0, $x22, $lr
    RET undef $lr, debug-location !12
...
