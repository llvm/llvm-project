; NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py UTC_ARGS: --version 5
; RUN: llc -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1030 -stop-after=amdgpu-isel < %s | FileCheck -check-prefix=GCN %s

; Verify that the debug locations in this function are correct, in particular
; that the location for %cast doesn't appear in the block of %lab.

define void @_Z12lane_pc_testj() #0 !dbg !9 {
  ; GCN-LABEL: name: _Z12lane_pc_testj
  ; GCN: bb.0 (%ir-block.0):
  ; GCN-NEXT:   successors: %bb.1(0x80000000)
  ; GCN-NEXT: {{  $}}
  ; GCN-NEXT:   S_BRANCH %bb.1
  ; GCN-NEXT: {{  $}}
  ; GCN-NEXT: bb.1.lab:
  ; GCN-NEXT:   [[S_MOV_B64_:%[0-9]+]]:sreg_64 = S_MOV_B64 $src_private_base, debug-location !12
  ; GCN-NEXT:   [[S_MOV_B32_:%[0-9]+]]:sreg_32 = S_MOV_B32 32
  ; GCN-NEXT:   [[S_LSHR_B64_:%[0-9]+]]:sreg_64 = S_LSHR_B64 killed [[S_MOV_B64_]], killed [[S_MOV_B32_]], implicit-def dead $scc, debug-location !12
  ; GCN-NEXT:   [[COPY:%[0-9]+]]:sreg_32 = COPY [[S_LSHR_B64_]].sub0, debug-location !12
  ; GCN-NEXT:   [[S_MOV_B64_1:%[0-9]+]]:sreg_64 = S_MOV_B64 0
  ; GCN-NEXT:   [[COPY1:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B64_1]].sub1, debug-location !12
  ; GCN-NEXT:   [[S_MOV_B32_1:%[0-9]+]]:sreg_32 = S_MOV_B32 -1
  ; GCN-NEXT:   [[S_MOV_B32_2:%[0-9]+]]:sreg_32 = S_MOV_B32 %stack.0.alloc
  ; GCN-NEXT:   S_CMP_LG_U32 [[S_MOV_B32_2]], killed [[S_MOV_B32_1]], implicit-def $scc, debug-location !12
  ; GCN-NEXT:   [[S_CSELECT_B32_:%[0-9]+]]:sreg_32 = S_CSELECT_B32 killed [[COPY]], killed [[COPY1]], implicit $scc, debug-location !12
  ; GCN-NEXT:   [[COPY2:%[0-9]+]]:sreg_32 = COPY [[S_MOV_B64_1]].sub0, debug-location !12
  ; GCN-NEXT:   [[S_CSELECT_B32_1:%[0-9]+]]:sreg_32 = S_CSELECT_B32 [[S_MOV_B32_2]], killed [[COPY2]], implicit $scc, debug-location !12
  ; GCN-NEXT:   [[REG_SEQUENCE:%[0-9]+]]:sreg_64 = REG_SEQUENCE killed [[S_CSELECT_B32_1]], %subreg.sub0, killed [[S_CSELECT_B32_]], %subreg.sub1, debug-location !12
  ; GCN-NEXT:   [[V_MOV_B32_e32_:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 0, implicit $exec
  ; GCN-NEXT:   [[COPY3:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]], debug-location !13
  ; GCN-NEXT:   FLAT_STORE_DWORD [[COPY3]], killed [[V_MOV_B32_e32_]], 0, 0, implicit $exec, implicit $flat_scr, debug-location !13 :: (store (s32) into %ir.cast)
  ; GCN-NEXT:   [[V_MOV_B32_e32_1:%[0-9]+]]:vgpr_32 = V_MOV_B32_e32 1, implicit $exec
  ; GCN-NEXT:   [[COPY4:%[0-9]+]]:vreg_64 = COPY [[REG_SEQUENCE]], debug-location !14
  ; GCN-NEXT:   FLAT_STORE_DWORD [[COPY4]], killed [[V_MOV_B32_e32_1]], 0, 0, implicit $exec, implicit $flat_scr, debug-location !14 :: (store (s32) into %ir.cast)
  ; GCN-NEXT:   SI_RETURN
  %alloc = alloca i32, align 4, addrspace(5)
  %cast = addrspacecast ptr addrspace(5) %alloc to ptr, !dbg !12
  br label %lab

lab:
  store i32 0, ptr %cast, align 4, !dbg !13
  store i32 1, ptr %cast, align 4, !dbg !14
  ret void
}

attributes #0 = { noinline optnone }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!2, !3, !4, !5, !6, !7, !8}

!0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 20.0.0git", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "t.cpp", directory: "/")
!2 = !{i32 1, !"amdhsa_code_object_version", i32 500}
!3 = !{i32 1, !"amdgpu_printf_kind", !"hostcall"}
!4 = !{i32 7, !"Dwarf Version", i32 5}
!5 = !{i32 2, !"Debug Info Version", i32 3}
!6 = !{i32 1, !"wchar_size", i32 4}
!7 = !{i32 8, !"PIC Level", i32 2}
!8 = !{i32 7, !"frame-pointer", i32 2}
!9 = distinct !DISubprogram(name: "lane_pc_test", linkageName: "_Z12lane_pc_testj", scope: !1, file: !1, line: 1, scopeLine: 3, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, type: !10, unit: !0)
!10 = !DISubroutineType(types: !11)
!11 = !{}
!12 = !DILocation(line: 12, column: 1, scope: !9)
!13 = !DILocation(line: 13, column: 1, scope: !9)
!14 = !DILocation(line: 14, column: 1, scope: !9)
