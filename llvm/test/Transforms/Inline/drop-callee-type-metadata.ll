; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
;; Test if the callee_type metadata is dropped when it is
;; is mapped to a direct function call from an indirect call during inlining.

; RUN: opt -passes=inline -S < %s | FileCheck %s

define i32 @_Z13call_indirectPFicEc(ptr %func, i8 %x) !type !0 {
; CHECK-LABEL: define i32 @_Z13call_indirectPFicEc(
; CHECK-SAME: ptr [[FUNC:%.*]], i8 [[X:%.*]]) !type [[META0:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CALL:%.*]] = call i32 [[FUNC]](i8 [[X]]), !callee_type [[META1:![0-9]+]]
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %call = call i32 %func(i8 %x), !callee_type !1
  ret i32 %call
}

define i32 @_Z3barv() !type !3 {
; CHECK-LABEL: define i32 @_Z3barv(
; CHECK-SAME: ) !type [[META3:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CALL_I:%.*]] = call i32 @_Z3fooc(i8 97)
; CHECK-NEXT:    ret i32 [[CALL_I]]
;
entry:
  %call = call i32 @_Z13call_indirectPFicEc(ptr nonnull @_Z3fooc, i8 97)
  ret i32 %call
}
declare !type !2 i32 @_Z3fooc(i8 signext)

!0 = !{i64 0, !"_ZTSFiPvcE.generalized"}
!1 = !{!2}
!2 = !{i64 0, !"_ZTSFicE.generalized"}
!3 = !{i64 0, !"_ZTSFivE.generalized"}
;.
; CHECK: [[META0]] = !{i64 0, !"_ZTSFiPvcE.generalized"}
; CHECK: [[META1]] = !{[[META2:![0-9]+]]}
; CHECK: [[META2]] = !{i64 0, !"_ZTSFicE.generalized"}
; CHECK: [[META3]] = !{i64 0, !"_ZTSFivE.generalized"}
;.
