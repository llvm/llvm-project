; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -pgo-instr-gen -instrprof -do-counter-promotion=true -speculative-counter-promotion-max-exiting=3 -S | FileCheck %s --check-prefix=PROMO
; RUN: opt < %s --passes=pgo-instr-gen,instrprof -do-counter-promotion=true -speculative-counter-promotion-max-exiting=3 -S | FileCheck %s --check-prefix=PROMO

@g = common local_unnamed_addr global i32 0, align 4

define void @foo(i32 %arg) local_unnamed_addr {
; PROMO-LABEL: @foo(
; PROMO-NEXT:  bb:
; PROMO-NEXT:    [[T:%.*]] = add nsw i32 [[ARG:%.*]], -1
; PROMO-NEXT:    br label [[BB1:%.*]]
; PROMO:       bb1:
; PROMO-NEXT:    [[PGOCOUNT213:%.*]] = phi i64 [ 0, [[BB:%.*]] ], [ [[PGOCOUNT212:%.*]], [[BB11:%.*]] ]
; PROMO-NEXT:    [[PGOCOUNT19:%.*]] = phi i64 [ 0, [[BB]] ], [ [[PGOCOUNT18:%.*]], [[BB11]] ]
; PROMO-NEXT:    [[PGOCOUNT6:%.*]] = phi i64 [ 0, [[BB]] ], [ [[PGOCOUNT5:%.*]], [[BB11]] ]
; PROMO-NEXT:    [[T2:%.*]] = phi i32 [ 0, [[BB]] ], [ [[T12:%.*]], [[BB11]] ]
; PROMO-NEXT:    [[T3:%.*]] = icmp sgt i32 [[T2]], [[ARG]]
; PROMO-NEXT:    br i1 [[T3]], label [[BB7:%.*]], label [[BB4:%.*]]
; PROMO:       bb4:
; PROMO-NEXT:    [[TMP0:%.*]] = add i64 [[PGOCOUNT6]], 1
; PROMO-NEXT:    tail call void @bar(i32 1)
; PROMO-NEXT:    [[T5:%.*]] = load i32, i32* @g, align 4
; PROMO-NEXT:    [[T6:%.*]] = icmp sgt i32 [[T5]], 100
; PROMO-NEXT:    br i1 [[T6]], label [[BB15_0:%.*]], label [[BB11]]
; PROMO:       bb7:
; PROMO-NEXT:    [[T8:%.*]] = icmp slt i32 [[T2]], [[T]]
; PROMO-NEXT:    br i1 [[T8]], label [[BB9:%.*]], label [[BB10:%.*]]
; PROMO:       bb9:
; PROMO-NEXT:    [[TMP1:%.*]] = add i64 [[PGOCOUNT19]], 1
; PROMO-NEXT:    tail call void @bar(i32 2)
; PROMO-NEXT:    br label [[BB11]]
; PROMO:       bb10:
; PROMO-NEXT:    [[TMP2:%.*]] = add i64 [[PGOCOUNT213]], 1
; PROMO-NEXT:    tail call void @bar(i32 3)
; PROMO-NEXT:    br label [[BB11]]
; PROMO:       bb11:
; PROMO-NEXT:    [[PGOCOUNT212]] = phi i64 [ [[TMP2]], [[BB10]] ], [ [[PGOCOUNT213]], [[BB9]] ], [ [[PGOCOUNT213]], [[BB4]] ]
; PROMO-NEXT:    [[PGOCOUNT18]] = phi i64 [ [[PGOCOUNT19]], [[BB10]] ], [ [[TMP1]], [[BB9]] ], [ [[PGOCOUNT19]], [[BB4]] ]
; PROMO-NEXT:    [[PGOCOUNT5]] = phi i64 [ [[PGOCOUNT6]], [[BB10]] ], [ [[PGOCOUNT6]], [[BB9]] ], [ [[TMP0]], [[BB4]] ]
; PROMO-NEXT:    [[T12]] = add nuw nsw i32 [[T2]], 1
; PROMO-NEXT:    [[T13:%.*]] = icmp slt i32 [[T2]], 99
; PROMO-NEXT:    br i1 [[T13]], label [[BB1]], label [[BB14:%.*]]
; PROMO:       bb14:
; PROMO-NEXT:    [[PGOCOUNT_PROMOTED7:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 1), align 4
; PROMO-NEXT:    [[TMP3:%.*]] = add i64 [[PGOCOUNT_PROMOTED7]], [[PGOCOUNT5]]
; PROMO-NEXT:    store i64 [[TMP3]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 1), align 4
; PROMO-NEXT:    [[PGOCOUNT_PROMOTED11:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 0), align 4
; PROMO-NEXT:    [[TMP4:%.*]] = add i64 [[PGOCOUNT_PROMOTED11]], [[PGOCOUNT18]]
; PROMO-NEXT:    store i64 [[TMP4]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 0), align 4
; PROMO-NEXT:    [[PGOCOUNT_PROMOTED15:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 2), align 4
; PROMO-NEXT:    [[TMP5:%.*]] = add i64 [[PGOCOUNT_PROMOTED15]], [[PGOCOUNT212]]
; PROMO-NEXT:    store i64 [[TMP5]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 2), align 4
; PROMO-NEXT:    [[PGOCOUNT3:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 3), align 4
; PROMO-NEXT:    [[TMP6:%.*]] = add i64 [[PGOCOUNT3]], 1
; PROMO-NEXT:    store i64 [[TMP6]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 3), align 4
; PROMO-NEXT:    tail call void @bar(i32 0)
; PROMO-NEXT:    br label [[BB15:%.*]]
; PROMO:       bb15_0:
; PROMO-NEXT:    [[PGOCOUNT_PROMOTED:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 1), align 4
; PROMO-NEXT:    [[TMP7:%.*]] = add i64 [[PGOCOUNT_PROMOTED]], [[TMP0]]
; PROMO-NEXT:    store i64 [[TMP7]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 1), align 4
; PROMO-NEXT:    [[PGOCOUNT_PROMOTED10:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 0), align 4
; PROMO-NEXT:    [[TMP8:%.*]] = add i64 [[PGOCOUNT_PROMOTED10]], [[PGOCOUNT19]]
; PROMO-NEXT:    store i64 [[TMP8]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 0), align 4
; PROMO-NEXT:    [[PGOCOUNT_PROMOTED14:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 2), align 4
; PROMO-NEXT:    [[TMP9:%.*]] = add i64 [[PGOCOUNT_PROMOTED14]], [[PGOCOUNT213]]
; PROMO-NEXT:    store i64 [[TMP9]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 2), align 4
; PROMO-NEXT:    [[PGOCOUNT4:%.*]] = load i64, i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 4), align 4
; PROMO-NEXT:    [[TMP10:%.*]] = add i64 [[PGOCOUNT4]], 1
; PROMO-NEXT:    store i64 [[TMP10]], i64* getelementptr inbounds ([5 x i64], [5 x i64]* @__profc_foo, i64 0, i64 4), align 4
; PROMO-NEXT:    br label [[BB15]]
; PROMO:       bb15:
; PROMO-NEXT:    tail call void @bar(i32 1)
; PROMO-NEXT:    ret void
;
bb:
  %t = add nsw i32 %arg, -1
  br label %bb1
bb1:                                              ; preds = %bb11, %bb
  %t2 = phi i32 [ 0, %bb ], [ %t12, %bb11 ]
  %t3 = icmp sgt i32 %t2, %arg
  br i1 %t3, label %bb7, label %bb4

bb4:                                              ; preds = %bb1
  tail call void @bar(i32 1)
  %t5 = load i32, i32* @g, align 4
  %t6 = icmp sgt i32 %t5, 100
  br i1 %t6, label %bb15_0, label %bb11

bb7:                                              ; preds = %bb1
  %t8 = icmp slt i32 %t2, %t
  br i1 %t8, label %bb9, label %bb10

bb9:                                              ; preds = %bb7
  tail call void @bar(i32 2)
  br label %bb11

bb10:                                             ; preds = %bb7
  tail call void @bar(i32 3)
  br label %bb11

bb11:                                             ; preds = %bb10, %bb9, %bb4
  %t12 = add nuw nsw i32 %t2, 1
  %t13 = icmp slt i32 %t2, 99
  br i1 %t13, label %bb1, label %bb14

bb14:                                             ; preds = %bb11
  tail call void @bar(i32 0)
  br label %bb15



bb15_0:                                             ; preds = %bb11
  br label %bb15

bb15:                                             ; preds = %bb14, %bb4
  tail call void @bar(i32 1)
  ret void
}

declare void @bar(i32) local_unnamed_addr
