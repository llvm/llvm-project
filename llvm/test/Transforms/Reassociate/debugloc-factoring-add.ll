; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -p=reassociate -S | FileCheck %s

;; Ensure that when we factorize part of a tree of adds into a multiply, we
;; propagate the debug loc of the tree to the mul.

define fastcc void @ham(i32 %arg) !dbg !10 {
; CHECK-LABEL: define fastcc void @ham(
; CHECK-SAME: i32 [[ARG:%.*]]) !dbg [[DBG4:![0-9]+]] {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    [[FACTOR:%.*]] = mul i32 [[ARG]], 2, !dbg [[DBG7:![0-9]+]]
; CHECK-NEXT:    [[ADD1:%.*]] = add i32 [[FACTOR]], 1, !dbg [[DBG7]]
; CHECK-NEXT:    store i32 [[ADD1]], ptr null, align 4
; CHECK-NEXT:    ret void
;
bb:
  %add = add i32 %arg, 1
  %add1 = add i32 %arg, %add, !dbg !4
  store i32 %add1, ptr null, align 4
  ret void
}

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 20.0.0git", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !2, globals: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "debugloc-factoring-add.c", directory: "/tmp")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !DILocation(line: 10, column: 1, scope: !10)
!6 = !DIFile(filename: "debugloc-factoring-add.c", directory: "/tmp")
!10 = distinct !DISubprogram(name: "ham", scope: !6, file: !6, line: 10, type: !11, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!11 = distinct !DISubroutineType(types: !12)
!12 = !{null}
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C11, file: [[META1:![0-9]+]], producer: "{{.*}}clang version {{.*}}", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: [[META2:![0-9]+]], retainedTypes: [[META2]], globals: [[META2]], splitDebugInlining: false, nameTableKind: None)
; CHECK: [[META1]] = !DIFile(filename: "debugloc-factoring-add.c", directory: {{.*}})
; CHECK: [[META2]] = !{}
; CHECK: [[DBG4]] = distinct !DISubprogram(name: "ham", scope: [[META1]], file: [[META1]], line: 10, type: [[META5:![0-9]+]], flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META2]])
; CHECK: [[META5]] = distinct !DISubroutineType(types: [[META6:![0-9]+]])
; CHECK: [[META6]] = !{null}
; CHECK: [[DBG7]] = !DILocation(line: 10, column: 1, scope: [[DBG4]])
;.
