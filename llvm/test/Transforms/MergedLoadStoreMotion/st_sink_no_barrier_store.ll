; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=mldst-motion -S < %s | FileCheck %s
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128"

; Test to make sure that stores in a diamond get merged with a non barrier store after the store instruction to be sunk
; Stores sunks into the footer.

%struct.node = type { i32, ptr, ptr, ptr, i32, i32, i32, i32 }

define void @sink_store(ptr nocapture %r, i32 %index) {
; CHECK-LABEL: define void @sink_store
; CHECK-SAME: (ptr nocapture [[R:%.*]], i32 [[INDEX:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[NODE_0_IN16:%.*]] = getelementptr inbounds [[STRUCT_NODE:%.*]], ptr [[R]], i64 0, i32 2
; CHECK-NEXT:    [[NODE_017:%.*]] = load ptr, ptr [[NODE_0_IN16]], align 8
; CHECK-NEXT:    [[INDEX_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[INDEX]], ptr [[INDEX_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[INDEX_ADDR]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[INDEX_ADDR]], align 4
; CHECK-NEXT:    br label [[IF_END:%.*]]
; CHECK:       if.else:
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[INDEX_ADDR]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP2]], 1
; CHECK-NEXT:    [[P3:%.*]] = getelementptr inbounds [[STRUCT_NODE]], ptr [[NODE_017]], i32 5, i32 6
; CHECK-NEXT:    store i32 [[ADD]], ptr [[P3]], align 4
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    [[ADD_SINK:%.*]] = phi i32 [ [[TMP1]], [[IF_THEN]] ], [ [[ADD]], [[IF_ELSE]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_NODE]], ptr [[NODE_017]], i32 0, i32 6
; CHECK-NEXT:    store i32 [[ADD_SINK]], ptr [[TMP3]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %node.0.in16 = getelementptr inbounds %struct.node, ptr %r, i64 0, i32 2
  %node.017 = load ptr, ptr %node.0.in16, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, ptr %index.addr, align 4
  %0 = load i32, ptr %index.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load i32, ptr %index.addr, align 4
  %p1 = getelementptr inbounds %struct.node, ptr %node.017, i32 0, i32 6
  store i32 %1, ptr %p1, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load i32, ptr %index.addr, align 4
  %add = add nsw i32 %2, 1
  %p2 = getelementptr inbounds %struct.node, ptr %node.017, i32 0, i32 6
  store i32 %add, ptr %p2, align 4
  %p3 = getelementptr inbounds %struct.node, ptr %node.017, i32 5, i32 6
  store i32 %add, ptr %p3, align 4  			  ; This is not a barrier
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}
