; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -mcpu=gfx1100 -passes=aggressive-instcombine < %s | FileCheck %s

; REQUIRES: amdgpu-registered-target

define i64 @narrow_add(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @narrow_add(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 2147483647
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 2147483647
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[ZEXT0]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[ZEXT1]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[TMP3]] to i64
; CHECK-NEXT:    ret i64 [[TMP4]]
;
  %zext0 = and i64 %a, 2147483647
  %zext1 = and i64 %b, 2147483647
  %add = add i64 %zext0, %zext1
  ret i64 %add
}

define i64 @narrow_add_1(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @narrow_add_1(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 2147483647
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 2147483648
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[ZEXT0]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[ZEXT1]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = add i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[TMP3]] to i64
; CHECK-NEXT:    ret i64 [[TMP4]]
;
  %zext0 = and i64 %a, 2147483647
  %zext1 = and i64 %b, 2147483648
  %add = add i64 %zext0, %zext1
  ret i64 %add
}

define <2 x i64> @narrow_add_vec(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: define <2 x i64> @narrow_add_vec(
; CHECK-SAME: <2 x i64> [[A:%.*]], <2 x i64> [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and <2 x i64> [[A]], <i64 2147483647, i64 30>
; CHECK-NEXT:    [[ZEXT1:%.*]] = and <2 x i64> [[B]], <i64 2147483647, i64 2147483646>
; CHECK-NEXT:    [[TMP1:%.*]] = trunc <2 x i64> [[ZEXT0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = trunc <2 x i64> [[ZEXT1]] to <2 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = add <2 x i32> [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext <2 x i32> [[TMP3]] to <2 x i64>
; CHECK-NEXT:    ret <2 x i64> [[TMP4]]
;
  %zext0 = and <2 x i64> %a, <i64 2147483647, i64 30>
  %zext1 = and <2 x i64> %b, <i64 2147483647, i64 2147483646>
  %add = add <2 x i64> %zext0, %zext1
  ret <2 x i64> %add
}

define <2 x i32> @narrow_add_vec_1(<2 x i32> %a, <2 x i32> %b) #0 {
; CHECK-LABEL: define <2 x i32> @narrow_add_vec_1(
; CHECK-SAME: <2 x i32> [[A:%.*]], <2 x i32> [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and <2 x i32> [[A]], <i32 16384, i32 16383>
; CHECK-NEXT:    [[ZEXT1:%.*]] = and <2 x i32> [[B]], <i32 16384, i32 16385>
; CHECK-NEXT:    [[TMP1:%.*]] = trunc <2 x i32> [[ZEXT0]] to <2 x i16>
; CHECK-NEXT:    [[TMP2:%.*]] = trunc <2 x i32> [[ZEXT1]] to <2 x i16>
; CHECK-NEXT:    [[TMP3:%.*]] = add <2 x i16> [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext <2 x i16> [[TMP3]] to <2 x i32>
; CHECK-NEXT:    ret <2 x i32> [[TMP4]]
;
  %zext0 = and <2 x i32> %a, <i32 16384, i32 16383>
  %zext1 = and <2 x i32> %b, <i32 16384, i32 16385>
  %add = add <2 x i32> %zext0, %zext1
  ret <2 x i32> %add
}

define i64 @narrow_mul(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @narrow_mul(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 2147483647
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 2
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[ZEXT0]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[ZEXT1]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[TMP3]] to i64
; CHECK-NEXT:    ret i64 [[TMP4]]
;
  %zext0 = and i64 %a, 2147483647
  %zext1 = and i64 %b, 2
  %mul = mul i64 %zext0, %zext1
  ret i64 %mul
}

define i64 @narrow_mul_1(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @narrow_mul_1(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 2147483647
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 2
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[ZEXT0]] to i32
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i64 [[ZEXT1]] to i32
; CHECK-NEXT:    [[TMP3:%.*]] = mul i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext i32 [[TMP3]] to i64
; CHECK-NEXT:    ret i64 [[TMP4]]
;
  %zext0 = and i64 %a, 2147483647
  %zext1 = and i64 %b, 2
  %mul = mul i64 %zext0, %zext1
  ret i64 %mul
}

define <2 x i64> @narrow_mul_vec(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: define <2 x i64> @narrow_mul_vec(
; CHECK-SAME: <2 x i64> [[A:%.*]], <2 x i64> [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and <2 x i64> [[A]], <i64 47483647, i64 50>
; CHECK-NEXT:    [[ZEXT1:%.*]] = and <2 x i64> [[B]], <i64 80, i64 20>
; CHECK-NEXT:    [[TMP1:%.*]] = trunc <2 x i64> [[ZEXT0]] to <2 x i32>
; CHECK-NEXT:    [[TMP2:%.*]] = trunc <2 x i64> [[ZEXT1]] to <2 x i32>
; CHECK-NEXT:    [[TMP3:%.*]] = mul <2 x i32> [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext <2 x i32> [[TMP3]] to <2 x i64>
; CHECK-NEXT:    ret <2 x i64> [[TMP4]]
;
  %zext0 = and <2 x i64> %a, <i64 47483647, i64 50>
  %zext1 = and <2 x i64> %b, <i64 80, i64 20>
  %mul = mul <2 x i64> %zext0, %zext1
  ret <2 x i64> %mul
}

define <2 x i32> @narrow_add_mul_1(<2 x i32> %a, <2 x i32> %b) #0 {
; CHECK-LABEL: define <2 x i32> @narrow_add_mul_1(
; CHECK-SAME: <2 x i32> [[A:%.*]], <2 x i32> [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and <2 x i32> [[A]], splat (i32 16384)
; CHECK-NEXT:    [[ZEXT1:%.*]] = and <2 x i32> [[B]], <i32 3, i32 2>
; CHECK-NEXT:    [[TMP1:%.*]] = trunc <2 x i32> [[ZEXT0]] to <2 x i16>
; CHECK-NEXT:    [[TMP2:%.*]] = trunc <2 x i32> [[ZEXT1]] to <2 x i16>
; CHECK-NEXT:    [[TMP3:%.*]] = mul <2 x i16> [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = zext <2 x i16> [[TMP3]] to <2 x i32>
; CHECK-NEXT:    ret <2 x i32> [[TMP4]]
;
  %zext0 = and <2 x i32> %a, <i32 16384, i32 16384>
  %zext1 = and <2 x i32> %b, <i32 3, i32 2>
  %mul = mul <2 x i32> %zext0, %zext1
  ret <2 x i32> %mul
}

define i64 @no_narrow_add(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @no_narrow_add(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 2147483648
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 2147483648
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[ZEXT0]], [[ZEXT1]]
; CHECK-NEXT:    ret i64 [[ADD]]
;
  %zext0 = and i64 %a, 2147483648
  %zext1 = and i64 %b, 2147483648
  %add = add i64 %zext0, %zext1
  ret i64 %add
}

define i64 @no_narrow_add_1(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @no_narrow_add_1(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 4294967295
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 1
; CHECK-NEXT:    [[ADD:%.*]] = add i64 [[ZEXT0]], [[ZEXT1]]
; CHECK-NEXT:    ret i64 [[ADD]]
;
  %zext0 = and i64 %a, 4294967295
  %zext1 = and i64 %b, 1
  %add = add i64 %zext0, %zext1
  ret i64 %add
}

define <2 x i64> @no_narrow_add_vec(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: define <2 x i64> @no_narrow_add_vec(
; CHECK-SAME: <2 x i64> [[A:%.*]], <2 x i64> [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and <2 x i64> [[A]], <i64 2147483648, i64 30>
; CHECK-NEXT:    [[ZEXT1:%.*]] = and <2 x i64> [[B]], <i64 2147483648, i64 2147483646>
; CHECK-NEXT:    [[ADD:%.*]] = add <2 x i64> [[ZEXT0]], [[ZEXT1]]
; CHECK-NEXT:    ret <2 x i64> [[ADD]]
;
  %zext0 = and <2 x i64> %a, <i64 2147483648, i64 30>
  %zext1 = and <2 x i64> %b, <i64 2147483648, i64 2147483646>
  %add = add <2 x i64> %zext0, %zext1
  ret <2 x i64> %add
}

define i64 @no_narrow_mul(i64 noundef %a, i64 noundef %b) {
; CHECK-LABEL: define i64 @no_narrow_mul(
; CHECK-SAME: i64 noundef [[A:%.*]], i64 noundef [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and i64 [[A]], 2147483648
; CHECK-NEXT:    [[ZEXT1:%.*]] = and i64 [[B]], 2
; CHECK-NEXT:    [[MUL:%.*]] = mul i64 [[ZEXT0]], [[ZEXT1]]
; CHECK-NEXT:    ret i64 [[MUL]]
;
  %zext0 = and i64 %a, 2147483648
  %zext1 = and i64 %b, 2
  %mul = mul i64 %zext0, %zext1
  ret i64 %mul
}

define <2 x i64> @no_narrow_mul_vec(<2 x i64> %a, <2 x i64> %b) #0 {
; CHECK-LABEL: define <2 x i64> @no_narrow_mul_vec(
; CHECK-SAME: <2 x i64> [[A:%.*]], <2 x i64> [[B:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[ZEXT0:%.*]] = and <2 x i64> [[A]], <i64 32768, i64 50>
; CHECK-NEXT:    [[ZEXT1:%.*]] = and <2 x i64> [[B]], <i64 131072, i64 20>
; CHECK-NEXT:    [[MUL:%.*]] = mul <2 x i64> [[ZEXT0]], [[ZEXT1]]
; CHECK-NEXT:    ret <2 x i64> [[MUL]]
;
  %zext0 = and <2 x i64> %a, <i64 32768, i64 50>
  %zext1 = and <2 x i64> %b, <i64 131072, i64 20>
  %mul = mul <2 x i64> %zext0, %zext1
  ret <2 x i64> %mul
}
