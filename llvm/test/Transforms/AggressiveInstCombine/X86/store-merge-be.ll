; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=aggressive-instcombine -mtriple=x86_64-unknown-linux-gnu -data-layout="E-n64" < %s | FileCheck %s

; Pretend X86 is big endian.

; FIXME: Big endian not supported yet.

define void @test_i32_be(i32 %x, ptr %p) {
; CHECK-LABEL: define void @test_i32_be(
; CHECK-SAME: i32 [[X:%.*]], ptr [[P:%.*]]) {
; CHECK-NEXT:    [[X_0:%.*]] = trunc i32 [[X]] to i8
; CHECK-NEXT:    [[GEP_0:%.*]] = getelementptr i8, ptr [[P]], i64 3
; CHECK-NEXT:    store i8 [[X_0]], ptr [[GEP_0]], align 1
; CHECK-NEXT:    [[SHR_1:%.*]] = lshr i32 [[X]], 8
; CHECK-NEXT:    [[X_1:%.*]] = trunc i32 [[SHR_1]] to i8
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr i8, ptr [[P]], i64 2
; CHECK-NEXT:    store i8 [[X_1]], ptr [[GEP_1]], align 1
; CHECK-NEXT:    [[SHR_2:%.*]] = lshr i32 [[X]], 16
; CHECK-NEXT:    [[X_2:%.*]] = trunc i32 [[SHR_2]] to i8
; CHECK-NEXT:    [[GEP_2:%.*]] = getelementptr i8, ptr [[P]], i64 1
; CHECK-NEXT:    store i8 [[X_2]], ptr [[GEP_2]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = lshr i32 [[X]], 24
; CHECK-NEXT:    [[X_3:%.*]] = trunc i32 [[TMP1]] to i8
; CHECK-NEXT:    store i8 [[X_3]], ptr [[P]], align 1
; CHECK-NEXT:    ret void
;
  %x.0 = trunc i32 %x to i8
  %gep.0 = getelementptr i8, ptr %p, i64 3
  store i8 %x.0, ptr %gep.0
  %shr.1 = lshr i32 %x, 8
  %x.1 = trunc i32 %shr.1 to i8
  %gep.1 = getelementptr i8, ptr %p, i64 2
  store i8 %x.1, ptr %gep.1
  %shr.2 = lshr i32 %x, 16
  %x.2 = trunc i32 %shr.2 to i8
  %gep.2 = getelementptr i8, ptr %p, i64 1
  store i8 %x.2, ptr %gep.2
  %shr.3 = lshr i32 %x, 24
  %x.3 = trunc i32 %shr.3 to i8
  store i8 %x.3, ptr %p
  ret void
}

define void @test_i32_le(i32 %x, ptr %p) {
; CHECK-LABEL: define void @test_i32_le(
; CHECK-SAME: i32 [[X:%.*]], ptr [[P:%.*]]) {
; CHECK-NEXT:    [[X_0:%.*]] = trunc i32 [[X]] to i8
; CHECK-NEXT:    store i8 [[X_0]], ptr [[P]], align 1
; CHECK-NEXT:    [[SHR_1:%.*]] = lshr i32 [[X]], 8
; CHECK-NEXT:    [[X_1:%.*]] = trunc i32 [[SHR_1]] to i8
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr i8, ptr [[P]], i64 1
; CHECK-NEXT:    store i8 [[X_1]], ptr [[GEP_1]], align 1
; CHECK-NEXT:    [[SHR_2:%.*]] = lshr i32 [[X]], 16
; CHECK-NEXT:    [[X_2:%.*]] = trunc i32 [[SHR_2]] to i8
; CHECK-NEXT:    [[GEP_2:%.*]] = getelementptr i8, ptr [[P]], i64 2
; CHECK-NEXT:    store i8 [[X_2]], ptr [[GEP_2]], align 1
; CHECK-NEXT:    [[SHR_3:%.*]] = lshr i32 [[X]], 24
; CHECK-NEXT:    [[X_3:%.*]] = trunc i32 [[SHR_3]] to i8
; CHECK-NEXT:    [[GEP_3:%.*]] = getelementptr i8, ptr [[P]], i64 3
; CHECK-NEXT:    store i8 [[X_3]], ptr [[GEP_3]], align 1
; CHECK-NEXT:    ret void
;
  %x.0 = trunc i32 %x to i8
  store i8 %x.0, ptr %p
  %shr.1 = lshr i32 %x, 8
  %x.1 = trunc i32 %shr.1 to i8
  %gep.1 = getelementptr i8, ptr %p, i64 1
  store i8 %x.1, ptr %gep.1
  %shr.2 = lshr i32 %x, 16
  %x.2 = trunc i32 %shr.2 to i8
  %gep.2 = getelementptr i8, ptr %p, i64 2
  store i8 %x.2, ptr %gep.2
  %shr.3 = lshr i32 %x, 24
  %x.3 = trunc i32 %shr.3 to i8
  %gep.3 = getelementptr i8, ptr %p, i64 3
  store i8 %x.3, ptr %gep.3
  ret void
}

define void @test_i32_mixed_parts(i32 %x, ptr %p) {
; CHECK-LABEL: define void @test_i32_mixed_parts(
; CHECK-SAME: i32 [[X:%.*]], ptr [[P:%.*]]) {
; CHECK-NEXT:    [[X_0:%.*]] = trunc i32 [[X]] to i8
; CHECK-NEXT:    [[GEP_0:%.*]] = getelementptr i8, ptr [[P]], i64 3
; CHECK-NEXT:    store i8 [[X_0]], ptr [[GEP_0]], align 1
; CHECK-NEXT:    [[SHR_1:%.*]] = lshr i32 [[X]], 8
; CHECK-NEXT:    [[X_1:%.*]] = trunc i32 [[SHR_1]] to i16
; CHECK-NEXT:    [[GEP_1:%.*]] = getelementptr i8, ptr [[P]], i64 1
; CHECK-NEXT:    store i16 [[X_1]], ptr [[GEP_1]], align 2
; CHECK-NEXT:    [[SHR_3:%.*]] = lshr i32 [[X]], 24
; CHECK-NEXT:    [[X_3:%.*]] = trunc i32 [[SHR_3]] to i8
; CHECK-NEXT:    store i8 [[X_3]], ptr [[P]], align 1
; CHECK-NEXT:    ret void
;
  %x.0 = trunc i32 %x to i8
  %gep.0 = getelementptr i8, ptr %p, i64 3
  store i8 %x.0, ptr %gep.0
  %shr.1 = lshr i32 %x, 8
  %x.1 = trunc i32 %shr.1 to i16
  %gep.1 = getelementptr i8, ptr %p, i64 1
  store i16 %x.1, ptr %gep.1
  %shr.3 = lshr i32 %x, 24
  %x.3 = trunc i32 %shr.3 to i8
  store i8 %x.3, ptr %p
  ret void
}
