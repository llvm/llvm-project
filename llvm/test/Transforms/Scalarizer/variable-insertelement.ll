; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -scalarizer -dce -S | FileCheck --check-prefixes=ALL %s

target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128"

; Test that variable inserts are scalarized.
define <4 x i32> @f1(<4 x i32> %src, i32 %val, i32 %index) {
; ALL-LABEL: @f1(
; ALL-NEXT:    [[RES:%.*]] = insertelement <4 x i32> [[SRC:%.*]], i32 [[VAL:%.*]], i32 [[INDEX:%.*]]
; ALL-NEXT:    ret <4 x i32> [[RES]]
;
  %res = insertelement <4 x i32> %src, i32 %val, i32 %index
  ret <4 x i32> %res
}

define void @f2(<4 x i32> *%dest, <4 x i32> *%src, i32 %index) {
; ALL-LABEL: @f2(
; ALL-NEXT:    [[VAL0:%.*]] = load <4 x i32>, <4 x i32>* [[SRC:%.*]], align 16
; ALL-NEXT:    [[VAL1:%.*]] = insertelement <4 x i32> [[VAL0]], i32 1, i32 [[INDEX:%.*]]
; ALL-NEXT:    [[VAL1_I0:%.*]] = extractelement <4 x i32> [[VAL1]], i32 0
; ALL-NEXT:    [[VAL2_I0:%.*]] = shl i32 1, [[VAL1_I0]]
; ALL-NEXT:    [[VAL1_I1:%.*]] = extractelement <4 x i32> [[VAL1]], i32 1
; ALL-NEXT:    [[VAL2_I1:%.*]] = shl i32 2, [[VAL1_I1]]
; ALL-NEXT:    [[VAL1_I2:%.*]] = extractelement <4 x i32> [[VAL1]], i32 2
; ALL-NEXT:    [[VAL2_I2:%.*]] = shl i32 3, [[VAL1_I2]]
; ALL-NEXT:    [[VAL1_I3:%.*]] = extractelement <4 x i32> [[VAL1]], i32 3
; ALL-NEXT:    [[VAL2_I3:%.*]] = shl i32 4, [[VAL1_I3]]
; ALL-NEXT:    [[VAL2_UPTO0:%.*]] = insertelement <4 x i32> undef, i32 [[VAL2_I0]], i32 0
; ALL-NEXT:    [[VAL2_UPTO1:%.*]] = insertelement <4 x i32> [[VAL2_UPTO0]], i32 [[VAL2_I1]], i32 1
; ALL-NEXT:    [[VAL2_UPTO2:%.*]] = insertelement <4 x i32> [[VAL2_UPTO1]], i32 [[VAL2_I2]], i32 2
; ALL-NEXT:    [[VAL2:%.*]] = insertelement <4 x i32> [[VAL2_UPTO2]], i32 [[VAL2_I3]], i32 3
; ALL-NEXT:    store <4 x i32> [[VAL2]], <4 x i32>* [[DEST:%.*]], align 16
; ALL-NEXT:    ret void
;
  %val0 = load <4 x i32> , <4 x i32> *%src
  %val1 = insertelement <4 x i32> %val0, i32 1, i32 %index
  %val2 = shl <4 x i32> <i32 1, i32 2, i32 3, i32 4>, %val1
  store <4 x i32> %val2, <4 x i32> *%dest
  ret void
}
