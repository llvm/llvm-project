; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -passes="scalarizer<min-bits=4>" -S | FileCheck %s

define void @vector_scalar_not_aligned(ptr addrspace(1) %arg0, ptr addrspace(1) %arg1) {
; CHECK-LABEL: @vector_scalar_not_aligned(
; CHECK-NEXT:    [[VAL_I1:%.*]] = load <7 x i32>, ptr addrspace(1) [[ARG_0:%.*]], align 4
; CHECK-NEXT:    [[VAL_I2:%.*]] = load <7 x i32>, ptr addrspace(1) [[ARG_1:%.*]], align 4
; CHECK-NEXT:    [[BOOL_VEC_B1:%.*]] = icmp ne <7 x i32> [[VAL_I1]], zeroinitializer
; CHECK-NEXT:    [[BOOL_VEC_B1_I0:%.*]] = shufflevector <7 x i1> [[BOOL_VEC_B1]], <7 x i1> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[BOOL_VEC_B1_I1:%.*]] = shufflevector <7 x i1> [[BOOL_VEC_B1]], <7 x i1> poison, <3 x i32> <i32 4, i32 5, i32 6>
; CHECK-NEXT:    [[BOOL_VEC_B2:%.*]] = icmp ne <7 x i32> [[VAL_I2]], zeroinitializer
; CHECK-NEXT:    [[BOOL_VEC_B2_I0:%.*]] = shufflevector <7 x i1> [[BOOL_VEC_B2]], <7 x i1> poison, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
; CHECK-NEXT:    [[BOOL_RESULT_I0:%.*]] = xor <4 x i1> [[BOOL_VEC_B1_I0]], [[BOOL_VEC_B2_I0]]
; CHECK-NEXT:    [[BOOL_VEC_B2_I1:%.*]] = shufflevector <7 x i1> [[BOOL_VEC_B2]], <7 x i1> poison, <3 x i32> <i32 4, i32 5, i32 6>
; CHECK-NEXT:    [[BOOL_RESULT_I1:%.*]] = xor <3 x i1> [[BOOL_VEC_B1_I1]], [[BOOL_VEC_B2_I1]]
; CHECK-NEXT:    [[ELEM_1:%.*]] = shufflevector <4 x i1> [[BOOL_RESULT_I0]], <4 x i1> [[BOOL_RESULT_I0]], <7 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[ELEM_2:%.*]] = shufflevector <3 x i1> [[BOOL_RESULT_I1]], <3 x i1> [[BOOL_RESULT_I1]], <3 x i32> <i32 0, i32 1, i32 2>
; CHECK-NEXT:    [[ELEM_3:%.*]] = extractelement <3 x i1> [[ELEM_2]], i64 0
; CHECK-NEXT:    [[ELEM_4:%.*]] = insertelement <7 x i1> [[ELEM_1]], i1 [[ELEM_3]], i64 4
; CHECK-NEXT:    [[ELEM_5:%.*]] = extractelement <3 x i1> [[ELEM_2]], i64 1
; CHECK-NEXT:    [[ELEM_6:%.*]] = insertelement <7 x i1> [[ELEM_4]], i1 [[ELEM_5]], i64 5
; CHECK-NEXT:    [[ELEM_7:%.*]] = extractelement <3 x i1> [[ELEM_2]], i64 2
; CHECK-NEXT:    [[BOOL_RESULT:%.*]] = insertelement <7 x i1> [[ELEM_6]], i1 [[ELEM_7]], i64 6
; CHECK-NEXT:    [[EXT:%.*]] = zext <7 x i1> [[BOOL_RESULT]] to <7 x i32>
; CHECK-NEXT:    ret void

  %val1 = load <7 x i32>, ptr addrspace(1) %arg0, align 4
  %val2 = load <7 x i32>, ptr addrspace(1) %arg1, align 4
  %boolVec1 = icmp ne <7 x i32> %val1, zeroinitializer
  %boolVec2 = icmp ne <7 x i32> %val2, zeroinitializer
  %boolResult = xor <7 x i1> %boolVec1, %boolVec2
  %ext = zext <7 x i1> %boolResult to <7 x i32>
  ret void
}