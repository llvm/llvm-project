; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=rewrite-statepoints-for-gc < %s | FileCheck %s

declare void @hoge()

define i8 addrspace(1)* @testVector(<3 x i8 addrspace(1)*> %arg) gc "statepoint-example" {
; CHECK-LABEL: @testVector(
; CHECK-NEXT:    [[A:%.*]] = freeze <3 x i8 addrspace(1)*> [[ARG:%.*]]
; CHECK-NEXT:    [[BASE_EE:%.*]] = extractelement <3 x i8 addrspace(1)*> [[ARG]], i64 2, !is_base_value !0
; CHECK-NEXT:    [[B:%.*]] = extractelement <3 x i8 addrspace(1)*> [[A]], i64 2
; CHECK-NEXT:    [[STATEPOINT_TOKEN:%.*]] = call token (i64, i32, void ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidf(i64 2882400000, i32 0, void ()* elementtype(void ()) @hoge, i32 0, i32 0, i32 0, i32 0) [ "deopt"(), "gc-live"(i8 addrspace(1)* [[B]], i8 addrspace(1)* [[BASE_EE]]) ]
; CHECK-NEXT:    [[B_RELOCATED:%.*]] = call coldcc i8 addrspace(1)* @llvm.experimental.gc.relocate.p1i8(token [[STATEPOINT_TOKEN]], i32 1, i32 0)
; CHECK-NEXT:    [[BASE_EE_RELOCATED:%.*]] = call coldcc i8 addrspace(1)* @llvm.experimental.gc.relocate.p1i8(token [[STATEPOINT_TOKEN]], i32 1, i32 1)
; CHECK-NEXT:    ret i8 addrspace(1)* [[B_RELOCATED]]
;
  %a = freeze <3 x i8 addrspace(1)*> %arg
  %b = extractelement <3 x i8 addrspace(1)*> %a, i64 2
  call void @hoge() ["deopt"()]
  ret i8 addrspace(1)* %b
}

define i8 addrspace(1)* @testScalar(i8 addrspace(1)* %arg) gc "statepoint-example" {
; CHECK-LABEL: @testScalar(
; CHECK-NEXT:    [[A:%.*]] = freeze i8 addrspace(1)* [[ARG:%.*]]
; CHECK-NEXT:    [[STATEPOINT_TOKEN:%.*]] = call token (i64, i32, void ()*, i32, i32, ...) @llvm.experimental.gc.statepoint.p0f_isVoidf(i64 2882400000, i32 0, void ()* elementtype(void ()) @hoge, i32 0, i32 0, i32 0, i32 0) [ "deopt"(), "gc-live"(i8 addrspace(1)* [[A]], i8 addrspace(1)* [[ARG]]) ]
; CHECK-NEXT:    [[A_RELOCATED:%.*]] = call coldcc i8 addrspace(1)* @llvm.experimental.gc.relocate.p1i8(token [[STATEPOINT_TOKEN]], i32 1, i32 0)
; CHECK-NEXT:    [[ARG_RELOCATED:%.*]] = call coldcc i8 addrspace(1)* @llvm.experimental.gc.relocate.p1i8(token [[STATEPOINT_TOKEN]], i32 1, i32 1)
; CHECK-NEXT:    ret i8 addrspace(1)* [[A_RELOCATED]]
;
  %a = freeze i8 addrspace(1)* %arg
  call void @hoge() ["deopt"()]
  ret i8 addrspace(1)* %a
}

