; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=gvn -S < %s | FileCheck %s

; Check that an unreachable predecessor to a PHI node doesn't cause a crash.
; PR21625.

define i32 @f(ptr %f) {
; CHECK-LABEL: define i32 @f(
; CHECK-SAME: ptr [[F:%.*]]) {
; CHECK-NEXT:  [[BB0:.*]]:
; CHECK-NEXT:    br label %[[BB2:.*]]
; CHECK:       [[BB1:.*]]:
; CHECK-NEXT:    [[ZED:%.*]] = load ptr, ptr [[F]], align 8
; CHECK-NEXT:    br i1 false, label %[[BB1]], label %[[BB2]]
; CHECK:       [[BB2]]:
; CHECK-NEXT:    [[FOO:%.*]] = phi ptr [ null, %[[BB0]] ], [ [[ZED]], %[[BB1]] ]
; CHECK-NEXT:    [[STOREMERGE:%.*]] = load i32, ptr [[FOO]], align 4
; CHECK-NEXT:    ret i32 [[STOREMERGE]]
;
; Load should be removed, since it's ignored.
bb0:
  %bar = load ptr, ptr %f
  br label %bb2
bb1:
  %zed = load ptr, ptr %f
  br i1 false, label %bb1, label %bb2
bb2:
  %foo = phi ptr [ null, %bb0 ], [ %zed, %bb1 ]
  %storemerge = load i32, ptr %foo
  ret i32 %storemerge
}

declare void @use.ptr(ptr)
define i32 @invalidate_and_reuse_dep(ptr %base_pp, i1 %cmp0) {
; CHECK-LABEL: define i32 @invalidate_and_reuse_dep(
; CHECK-SAME: ptr [[BASE_PP:%.*]], i1 [[CMP0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[NODE_P:%.*]] = load ptr, ptr [[BASE_PP]], align 8
; CHECK-NEXT:    [[VAL:%.*]] = load i32, ptr [[NODE_P]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[VAL]], 0
; CHECK-NEXT:    br i1 [[CMP]], label %[[L0:.*]], label %[[L1:.*]]
; CHECK:       [[L0]]:
; CHECK-NEXT:    br label %[[L1]]
; CHECK:       [[L1]]:
; CHECK-NEXT:    [[NULL_OR_SELECT_PP:%.*]] = phi ptr [ null, %[[ENTRY]] ], [ [[BASE_PP]], %[[L0]] ]
; CHECK-NEXT:    br i1 [[CMP0]], label %[[THEN:.*]], label %[[END:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[THEN_NODE_P:%.*]] = load ptr, ptr [[BASE_PP]], align 8
; CHECK-NEXT:    [[THEN_VAL:%.*]] = load i32, ptr [[THEN_NODE_P]], align 4
; CHECK-NEXT:    ret i32 [[THEN_VAL]]
; CHECK:       [[END]]:
; CHECK-NEXT:    [[END_SELECT_P:%.*]] = load ptr, ptr [[NULL_OR_SELECT_PP]], align 8
; CHECK-NEXT:    call void @use.ptr(ptr [[END_SELECT_P]])
; CHECK-NEXT:    ret i32 0
;
entry:
  %node_p = load ptr, ptr %base_pp
  %val = load i32, ptr %node_p
  %cmp = icmp slt i32 %val, 0
  br i1 %cmp, label %L0, label %L1

L0:
  %select_pp = select i1 true, ptr %base_pp, ptr null
  br label %L1

L1:
  %null.or.select_pp = phi ptr [ null, %entry ], [ %select_pp, %L0 ]
  br i1 %cmp0, label %then, label %end

then:
  %then.node_p = load ptr, ptr %base_pp
  %then.val = load i32, ptr %then.node_p
  ret i32 %then.val

end:
  %end.select_p = load ptr, ptr %null.or.select_pp
  call void @use.ptr(ptr %end.select_p)
  ret i32 0
}
