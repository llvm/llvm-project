; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=gvn -enable-load-pre -S | FileCheck %s --check-prefixes=CHECK,MDEP
; RUN: opt < %s -passes='gvn<memoryssa>' -enable-load-pre -S | FileCheck %s --check-prefixes=CHECK,MSSA
; RUN: opt < %s -passes="gvn<load-pre>" -enable-load-pre=false -S | FileCheck %s
; This testcase assumed we'll PRE the load into %for.cond, but we don't actually
; verify that doing so is safe.  If there didn't _happen_ to be a load in
; %for.end, we would actually be lengthening the execution on some paths, and
; we were never actually checking that case.  Now we actually do perform some
; conservative checking to make sure we don't make paths longer, but we don't
; currently get this case, which we got lucky on previously.
;
; Now that that faulty assumption is corrected, test that we DON'T incorrectly
; hoist the load.  Doing the right thing for the wrong reasons is still a bug.

@p = external global i32
define i32 @f(i32 %n) nounwind {
; CHECK-LABEL: define i32 @f(
; CHECK-SAME: i32 [[N:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[FOR_COND:.*]]
; CHECK:       [[FOR_COND]]:
; CHECK-NEXT:    [[I_0:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INDVAR_NEXT:%.*]], %[[FOR_INC:.*]] ]
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[I_0]], [[N]]
; CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY:.*]], label %[[FOR_COND_FOR_END_CRIT_EDGE:.*]]
; CHECK:       [[FOR_COND_FOR_END_CRIT_EDGE]]:
; CHECK-NEXT:    [[TMP9_PRE:%.*]] = load i32, ptr @p, align 4
; CHECK-NEXT:    br label %[[FOR_END:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr @p, align 4
; CHECK-NEXT:    [[DEC:%.*]] = add i32 [[TMP3]], -1
; CHECK-NEXT:    store i32 [[DEC]], ptr @p, align 4
; CHECK-NEXT:    [[CMP6:%.*]] = icmp slt i32 [[DEC]], 0
; CHECK-NEXT:    br i1 [[CMP6]], label %[[FOR_BODY_FOR_END_CRIT_EDGE:.*]], label %[[FOR_INC]]
; CHECK:       [[FOR_BODY_FOR_END_CRIT_EDGE]]:
; CHECK-NEXT:    br label %[[FOR_END]]
; CHECK:       [[FOR_INC]]:
; CHECK-NEXT:    [[INDVAR_NEXT]] = add i32 [[I_0]], 1
; CHECK-NEXT:    br label %[[FOR_COND]]
; CHECK:       [[FOR_END]]:
; CHECK-NEXT:    [[TMP9:%.*]] = phi i32 [ [[DEC]], %[[FOR_BODY_FOR_END_CRIT_EDGE]] ], [ [[TMP9_PRE]], %[[FOR_COND_FOR_END_CRIT_EDGE]] ]
; CHECK-NEXT:    ret i32 [[TMP9]]
;
entry:
  br label %for.cond

for.cond:		; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %indvar.next, %for.inc ]		; <i32> [#uses=2]
  %cmp = icmp slt i32 %i.0, %n		; <i1> [#uses=1]
  br i1 %cmp, label %for.body, label %for.cond.for.end_crit_edge

for.cond.for.end_crit_edge:		; preds = %for.cond
  br label %for.end

for.body:		; preds = %for.cond
  %tmp3 = load i32, ptr @p		; <i32> [#uses=1]
  %dec = add i32 %tmp3, -1		; <i32> [#uses=2]
  store i32 %dec, ptr @p
  %cmp6 = icmp slt i32 %dec, 0		; <i1> [#uses=1]
  br i1 %cmp6, label %for.body.for.end_crit_edge, label %for.inc

for.body.for.end_crit_edge:		; preds = %for.body
  br label %for.end

for.inc:		; preds = %for.body
  %indvar.next = add i32 %i.0, 1		; <i32> [#uses=1]
  br label %for.cond

for.end:		; preds = %for.body.for.end_crit_edge, %for.cond.for.end_crit_edge
  %tmp9 = load i32, ptr @p		; <i32> [#uses=1]
  ret i32 %tmp9
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; MDEP: {{.*}}
; MSSA: {{.*}}
