; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes='lower-matrix-intrinsics' -S < %s | FileCheck %s

define void @ramp_2x2(ptr %out) {
; CHECK-LABEL: @ramp_2x2(
; CHECK-NEXT:    store <2 x i32> <i32 0, i32 1>, ptr [[OUT:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr i32, ptr [[OUT]], i64 2
; CHECK-NEXT:    store <2 x i32> <i32 2, i32 3>, ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    ret void
;
  call void @llvm.matrix.column.major.store(<4 x i32> <i32 0, i32 1, i32 2, i32 3>, ptr %out, i64 2, i1 false, i32 2, i32 2)
  ret void
}

define void @poison_2x2(ptr %out) {
; CHECK-LABEL: @poison_2x2(
; CHECK-NEXT:    store <2 x i32> poison, ptr [[OUT:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr i32, ptr [[OUT]], i64 2
; CHECK-NEXT:    store <2 x i32> poison, ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    ret void
;
  call void @llvm.matrix.column.major.store(<4 x i32> poison, ptr %out, i64 2, i1 false, i32 2, i32 2)
  ret void
}

define void @undef_2x2(ptr %out) {
; CHECK-LABEL: @undef_2x2(
; CHECK-NEXT:    store <2 x i32> undef, ptr [[OUT:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr i32, ptr [[OUT]], i64 2
; CHECK-NEXT:    store <2 x i32> undef, ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    ret void
;
  call void @llvm.matrix.column.major.store(<4 x i32> undef, ptr %out, i64 2, i1 false, i32 2, i32 2)
  ret void
}

define void @zeroinitializer_2x2(ptr %out) {
; CHECK-LABEL: @zeroinitializer_2x2(
; CHECK-NEXT:    store <2 x i32> zeroinitializer, ptr [[OUT:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr i32, ptr [[OUT]], i64 2
; CHECK-NEXT:    store <2 x i32> zeroinitializer, ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    ret void
;
  call void @llvm.matrix.column.major.store(<4 x i32> zeroinitializer, ptr %out, i64 2, i1 false, i32 2, i32 2)
  ret void
}

define void @ramp_bitcast(ptr %out) {
; CHECK-LABEL: @ramp_bitcast(
; CHECK-NEXT:    store <2 x float> <float 0x36A0000000000000, float 0x36B0000000000000>, ptr [[OUT:%.*]], align 4
; CHECK-NEXT:    [[VEC_GEP:%.*]] = getelementptr float, ptr [[OUT]], i64 2
; CHECK-NEXT:    store <2 x float> <float 0x36B8000000000000, float 0x36C0000000000000>, ptr [[VEC_GEP]], align 4
; CHECK-NEXT:    store <4 x float> <float 0x36A0000000000000, float 0x36B0000000000000, float 0x36B8000000000000, float 0x36C0000000000000>, ptr [[OUT]], align 4
; CHECK-NEXT:    store <1 x float> splat (float 0x36A0000000000000), ptr [[OUT]], align 4
; CHECK-NEXT:    [[VEC_GEP1:%.*]] = getelementptr float, ptr [[OUT]], i64 4
; CHECK-NEXT:    store <1 x float> splat (float 0x36B0000000000000), ptr [[VEC_GEP1]], align 4
; CHECK-NEXT:    [[VEC_GEP2:%.*]] = getelementptr float, ptr [[OUT]], i64 8
; CHECK-NEXT:    store <1 x float> splat (float 0x36B8000000000000), ptr [[VEC_GEP2]], align 4
; CHECK-NEXT:    [[VEC_GEP3:%.*]] = getelementptr float, ptr [[OUT]], i64 12
; CHECK-NEXT:    store <1 x float> splat (float 0x36C0000000000000), ptr [[VEC_GEP3]], align 4
; CHECK-NEXT:    ret void
;
  %val = bitcast <4 x i32> <i32 1, i32 2, i32 3, i32 4> to <4 x float>
  call void @llvm.matrix.column.major.store(<4 x float> %val, ptr %out, i64 2, i1 false, i32 2, i32 2)
  call void @llvm.matrix.column.major.store(<4 x float> %val, ptr %out, i64 4, i1 false, i32 4, i32 1)
  call void @llvm.matrix.column.major.store(<4 x float> %val, ptr %out, i64 4, i1 false, i32 1, i32 4)
  ret void
}
