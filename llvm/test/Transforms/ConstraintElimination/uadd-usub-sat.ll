; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=constraint-elimination -S %s | FileCheck %s

declare i64 @llvm.uadd.sat.i64(i64, i64)
declare i64 @llvm.usub.sat.i64(i64, i64)

define i1 @uadd_sat_uge(i64 %a, i64 %b) {
; CHECK-LABEL: define i1 @uadd_sat_uge(
; CHECK-SAME: i64 [[A:%.*]], i64 [[B:%.*]]) {
; CHECK-NEXT:    [[PRECOND:%.*]] = icmp ugt i64 [[A]], [[B]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[PRECOND]])
; CHECK-NEXT:    [[ADD_SAT:%.*]] = call i64 @llvm.uadd.sat.i64(i64 [[A]], i64 1)
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[ADD_SAT]], [[B]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %precond = icmp ugt i64 %a, %b
  call void @llvm.assume(i1 %precond)
  %add.sat = call i64 @llvm.uadd.sat.i64(i64 %a, i64 1)
  %cmp = icmp ugt i64 %add.sat, %b
  ret i1 %cmp
}


define i1 @usub_sat_ule(i64 %a, i64 %b) {
; CHECK-LABEL: define i1 @usub_sat_ule(
; CHECK-SAME: i64 [[A:%.*]], i64 [[B:%.*]]) {
; CHECK-NEXT:    [[PRECOND:%.*]] = icmp ult i64 [[A]], [[B]]
; CHECK-NEXT:    call void @llvm.assume(i1 [[PRECOND]])
; CHECK-NEXT:    [[SUB_SAT:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[A]], i64 1)
; CHECK-NEXT:    [[CMP:%.*]] = icmp ult i64 [[SUB_SAT]], [[B]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %precond = icmp ult i64 %a, %b
  call void @llvm.assume(i1 %precond)
  %sub.sat = call i64 @llvm.usub.sat.i64(i64 %a, i64 1)
  %cmp = icmp ult i64 %sub.sat, %b
  ret i1 %cmp
}
