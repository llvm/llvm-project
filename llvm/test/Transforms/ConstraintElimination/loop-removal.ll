; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=constraint-elimination -S | FileCheck %s

define i32 @foo() {
; CHECK-LABEL: define i32 @foo() {
; CHECK-NEXT:  init:
; CHECK-NEXT:    br label %[[OUTER_LOOP_CONTROL:.*]]
; CHECK:       outer.loop.control:
; CHECK-NEXT:    [[X_0:%.*]] = phi i32 [ 0, [[INIT:%.*]] ], [ [[X_OUTER:%.*]], %[[OUTER_LOOP_INC:.*]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = icmp slt i32 [[X_0]], 10
; CHECK-NEXT:    br i1 [[TMP0]], label %[[INNER_LOOP_CONTROL:.*]], label %[[EXIT:.*]]
; CHECK:       inner.loop.control:
; CHECK-NEXT:    [[X_1:%.*]] = phi i32 [ [[X_0]], %[[OUTER_LOOP_CONTROL]] ], [ [[X_INNER:%.*]], %[[INNER_LOOP_BODY:.*]] ]
; CHECK-NEXT:    br i1 false, label %[[INNER_LOOP_BODY]], label %[[OUTER_LOOP_INC]]
; CHECK:       inner.loop.body:
; CHECK-NEXT:    [[X_INNER]] = add nsw i32 [[X_1]], -1
; CHECK-NEXT:    br label %[[INNER_LOOP_CONTROL]]
; CHECK:       outer.loop.inc:
; CHECK-NEXT:    [[X_OUTER]] = add nsw i32 [[X_1]], 2
; CHECK-NEXT:    br label %[[OUTER_LOOP_CONTROL]]
; CHECK:       exit:
; CHECK-NEXT:    ret i32 [[X_0]]
;
init:
  br label %outer.loop.control

outer.loop.control:                                                ; preds = %init, %outer.loop.inc
  %x.0 = phi i32 [ 0, %init ], [ %x.outer, %outer.loop.inc ]
  %0 = icmp slt i32 %x.0, 10
  br i1 %0, label %inner.loop.control, label %exit

inner.loop.control:                                                ; preds = %outer.loop.control, %inner.loop.body
  %x.1 = phi i32 [ %x.0, %outer.loop.control ], [ %x.inner, %inner.loop.body ]
  %1 = icmp sgt i32 %x.1, 20
  br i1 %1, label %inner.loop.body, label %outer.loop.inc

inner.loop.body:                                                ; preds = %inner.loop.control
  %x.inner = add nsw i32 %x.1, -1
  br label %inner.loop.control

outer.loop.inc:                                                ; preds = %inner.loop.control
  %x.outer = add nsw i32 %x.1, 2
  br label %outer.loop.control

exit:                                               ; preds = %1
  ret i32 %x.0
}

; int foo_with_overflow(unsigned x, int y){
;     unsigned i = x;
;     while(i < 10 || i > 20){
;         if(i > x){
;             y -= 23;
;         }
;         i -= 1;
;     }
;     return y;
; }
define dso_local noundef i32 @foo_with_overflow(i32 noundef %x, i32 noundef %y) local_unnamed_addr #0 {
; CHECK-LABEL: i32 @foo_with_overflow(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = add i32 [[X:%.*]], -21
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ult i32 [[TMP0]], -11
; CHECK-NEXT:    br i1 [[TMP1]], label %[[WHILE_BODY:.*]], label %[[WHILE_END:.*]]
; CHECK:       while.body:
; CHECK-NEXT:    [[I_02:%.*]] = phi i32 [ [[SUB3:%.*]], %[[WHILE_BODY]] ], [ [[X]], %[[ENTRY:.*]] ]
; CHECK-NEXT:    [[Y_ADDR_01:%.*]] = phi i32 [ [[SPEC_SELECT:%.*]], %[[WHILE_BODY]] ], [ [[Y:%.*]], %[[ENTRY]] ]
; CHECK-NEXT:    [[CMP2:%.*]] = icmp ugt i32 [[I_02]], [[X]]
; CHECK-NEXT:    [[SUB:%.*]] = add nsw i32 [[Y_ADDR_01]], -23
; CHECK-NEXT:    [[SPEC_SELECT]] = select i1 [[CMP2]], i32 [[SUB]], i32 [[Y_ADDR_01]]
; CHECK-NEXT:    [[SUB3]] = add i32 [[I_02]], -1
; CHECK-NEXT:    [[DOTREASS:%.*]] = add i32 [[I_02]], -22
; CHECK-NEXT:    [[TMP2:%.*]] = icmp ult i32 [[DOTREASS]], -11
; CHECK-NEXT:    br i1 [[TMP2]], label %[[WHILE_BODY]], label %[[WHILE_END]]
; CHECK:       while.end:
; CHECK-NEXT:    [[Y_ADDR_0_LCSSA:%.*]] = phi i32 [ [[Y]], %[[ENTRY]] ], [ [[SPEC_SELECT]], %[[WHILE_BODY]] ]
; CHECK-NEXT:    ret i32 [[Y_ADDR_0_LCSSA]]
;
entry:
  %0 = add i32 %x, -21
  %1 = icmp ult i32 %0, -11
  br i1 %1, label %while.body, label %while.end

while.body:                                       ; preds = %entry, %while.body
  %i.02 = phi i32 [ %sub3, %while.body ], [ %x, %entry ]
  %y.addr.01 = phi i32 [ %spec.select, %while.body ], [ %y, %entry ]
  %cmp2 = icmp ugt i32 %i.02, %x
  %sub = add nsw i32 %y.addr.01, -23
  %spec.select = select i1 %cmp2, i32 %sub, i32 %y.addr.01
  %sub3 = add i32 %i.02, -1
  %.reass = add i32 %i.02, -22
  %2 = icmp ult i32 %.reass, -11
  br i1 %2, label %while.body, label %while.end

while.end:                                        ; preds = %while.body, %entry
  %y.addr.0.lcssa = phi i32 [ %y, %entry ], [ %spec.select, %while.body ]
  ret i32 %y.addr.0.lcssa
}
