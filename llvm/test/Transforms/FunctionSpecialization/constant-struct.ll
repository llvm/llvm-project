; NOTE: Assertions have been autogenerated by utils/update_test_checks.py

; RUN: opt -passes="ipsccp<func-spec>" -force-specialization \
; RUN:     -funcspec-for-literal-constant -S < %s | FileCheck %s

define i32 @foo(i32 %y0, i32 %y1) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[Y:%.*]] = insertvalue { i32, i32 } undef, i32 [[Y0:%.*]], 0
; CHECK-NEXT:    [[YY:%.*]] = insertvalue { i32, i32 } [[Y]], i32 [[Y1:%.*]], 1
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @add.1({ i32, i32 } { i32 2, i32 3 }, { i32, i32 } [[YY]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %y = insertvalue { i32, i32 } undef, i32 %y0, 0
  %yy = insertvalue { i32, i32 } %y, i32 %y1, 1
  %call = tail call i32 @add({i32, i32} {i32 2, i32 3}, {i32, i32} %yy)
  ret i32 %call
}

define i32 @bar(i32 %x0, i32 %x1) {
; CHECK-LABEL: @bar(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[X:%.*]] = insertvalue { i32, i32 } undef, i32 [[X0:%.*]], 0
; CHECK-NEXT:    [[XX:%.*]] = insertvalue { i32, i32 } [[X]], i32 [[X1:%.*]], 1
; CHECK-NEXT:    [[CALL:%.*]] = tail call i32 @add.2({ i32, i32 } [[XX]], { i32, i32 } { i32 3, i32 2 })
; CHECK-NEXT:    ret i32 [[CALL]]
;
entry:
  %x = insertvalue { i32, i32 } undef, i32 %x0, 0
  %xx = insertvalue { i32, i32 } %x, i32 %x1, 1
  %call = tail call i32 @add({i32, i32} %xx, {i32, i32} {i32 3, i32 2})
  ret i32 %call
}

define internal i32 @add({i32, i32} %x, {i32, i32} %y) {
entry:
  %x0 = extractvalue {i32, i32} %x, 0
  %y0 = extractvalue {i32, i32} %y, 0
  %add0 = add nsw i32 %x0, %y0
  %x1 = extractvalue {i32, i32} %x, 1
  %y1 = extractvalue {i32, i32} %y, 1
  %add1 = add nsw i32 %x1, %y1
  %mul = mul i32 %add0, %add1
  ret i32 %mul
}
