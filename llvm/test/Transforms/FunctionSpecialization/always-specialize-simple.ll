; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature --include-generated-funcs
; RUN: opt -S --passes=always-specialize < %s | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ptrfirst.x = internal global i32 42, align 4
@ptrboth.x = internal global i32 42, align 4
@ptrboth.y = internal constant i32 81, align 4
@ptrallsame.x = internal global i32 42, align 4

define i32 @callee(i32 alwaysspecialize %x, i32 %y, i32 alwaysspecialize %z) {
entry:
  %add = add nsw i32 %x, %z
  %mul = mul nsw i32 %add, %z
  ret i32 %mul
}

define i32 @first(i32 %a, i32 %b) {
entry:
  %call = call i32 @callee(i32 42, i32 %a, i32 %b)
  ret i32 %call
}

define i32 @second(i32 %a, i32 %b) {
entry:
  %call = call i32 @callee(i32 %a, i32 42, i32 %b)
  ret i32 %call
}

define i32 @third(i32 %a, i32 %b) {
entry:
  %call = call i32 @callee(i32 %a, i32 %b, i32 42)
  ret i32 %call
}

define i32 @both(i32 %a) {
entry:
  %call = call i32 @callee(i32 21, i32 %a, i32 42)
  ret i32 %call
}

define i32 @ptrcallee(ptr alwaysspecialize %x, ptr %y, ptr alwaysspecialize %z) {
entry:
  %0 = load i32, ptr %x, align 4
  %1 = load i32, ptr %z, align 4
  %add = add nsw i32 %0, %1
  %2 = load i32, ptr %z, align 4
  %mul = mul nsw i32 %add, %2
  ret i32 %mul
}

define i32 @ptrfirst(ptr %a, ptr %b) {
entry:
  %call = call i32 @ptrcallee(ptr @ptrfirst.x, ptr %a, ptr %b)
  ret i32 %call
}

define i32 @ptrboth(ptr %a) {
entry:
  %call = call i32 @ptrcallee(ptr @ptrboth.x, ptr %a, ptr @ptrboth.y)
  ret i32 %call
}

define i32 @ptrallsame() {
entry:
  %call = call i32 @ptrcallee(ptr @ptrallsame.x, ptr @ptrallsame.x, ptr @ptrallsame.x)
  ret i32 %call
}

define i32 @virtualcall(ptr alwaysspecialize %func, i32 %x) {
entry:
  %call = call i32 %func(i32 %x)
  ret i32 %call
}

define i32 @devirtualisecaller(i32 %x) {
entry:
  %call = call i32 @virtualcall(ptr @virtualcallee, i32 %x)
  ret i32 %call
}

declare i32 @virtualcallee(i32 noundef)



; CHECK-LABEL: define {{[^@]+}}@callee.spec
; CHECK-SAME: (i32 [[X:%.*]], i32 [[Y:%.*]], i32 [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 21, 42
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], 42
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@callee.spec.1
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]], i32 [[Y:%.*]], i32 [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[X]], 42
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], 42
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@callee.spec.2
; CHECK-SAME: (i32 [[X:%.*]], i32 [[Y:%.*]], i32 alwaysspecialize [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 42, [[Z]]
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], [[Z]]
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@callee
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]], i32 [[Y:%.*]], i32 alwaysspecialize [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[X]], [[Z]]
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], [[Z]]
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@first
; CHECK-SAME: (i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @callee.spec.2(i32 42, i32 [[A]], i32 [[B]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@second
; CHECK-SAME: (i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @callee(i32 [[A]], i32 42, i32 [[B]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@third
; CHECK-SAME: (i32 [[A:%.*]], i32 [[B:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @callee.spec.1(i32 [[A]], i32 [[B]], i32 42)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@both
; CHECK-SAME: (i32 [[A:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @callee.spec(i32 21, i32 [[A]], i32 42)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrcallee.spec
; CHECK-SAME: (ptr [[X:%.*]], ptr [[Y:%.*]], ptr [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @ptrallsame.x, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr @ptrallsame.x, align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr @ptrallsame.x, align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], [[TMP2]]
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrcallee.spec.3
; CHECK-SAME: (ptr [[X:%.*]], ptr [[Y:%.*]], ptr [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @ptrboth.x, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr @ptrboth.y, align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP0]], 81
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr @ptrboth.y, align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], 81
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrcallee.spec.4
; CHECK-SAME: (ptr [[X:%.*]], ptr [[Y:%.*]], ptr alwaysspecialize [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @ptrfirst.x, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[Z]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Z]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], [[TMP2]]
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrcallee
; CHECK-SAME: (ptr alwaysspecialize [[X:%.*]], ptr [[Y:%.*]], ptr alwaysspecialize [[Z:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[X]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[Z]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP0]], [[TMP1]]
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[Z]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[ADD]], [[TMP2]]
; CHECK-NEXT:    ret i32 [[MUL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrfirst
; CHECK-SAME: (ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @ptrcallee.spec.4(ptr @ptrfirst.x, ptr [[A]], ptr [[B]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrboth
; CHECK-SAME: (ptr [[A:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @ptrcallee.spec.3(ptr @ptrboth.x, ptr [[A]], ptr @ptrboth.y)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@ptrallsame() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @ptrcallee.spec(ptr @ptrallsame.x, ptr @ptrallsame.x, ptr @ptrallsame.x)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@virtualcall.spec
; CHECK-SAME: (ptr [[FUNC:%.*]], i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @virtualcallee(i32 [[X]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@virtualcall
; CHECK-SAME: (ptr alwaysspecialize [[FUNC:%.*]], i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 [[FUNC]](i32 [[X]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@devirtualisecaller
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @virtualcall.spec(ptr @virtualcallee, i32 [[X]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
