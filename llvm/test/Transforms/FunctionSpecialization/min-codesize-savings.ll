; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -passes=ipsccp  --funcspec-min-function-size=0 -S < %s | FileCheck %s

; Call to unprofitable_spec should not specialize since no folding can occur for the add
; instruction as only 1 of the values is know. The score for this specialization will be 0.
define i32 @main(i32 %y) {
; CHECK-LABEL: define i32 @main(
; CHECK-SAME: i32 [[Y:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[SPEC:%.*]] = call i32 @unprofitable_spec(i32 1, i32 [[Y]])
; CHECK-NEXT:    ret i32 [[SPEC]]
;
entry:
  %spec = call i32 @unprofitable_spec(i32 1, i32 %y)
  ret i32 %spec
}

define i32 @unprofitable_spec(i32 %x, i32 %y) {
; CHECK-LABEL: define i32 @unprofitable_spec(
; CHECK-SAME: i32 [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[X]], [[Y]]
; CHECK-NEXT:    ret i32 [[ADD]]
;
entry:
  %add = add i32 %x, %y
  ret i32 %add
}
