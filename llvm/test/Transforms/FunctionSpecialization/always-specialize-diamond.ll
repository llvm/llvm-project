; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature --include-generated-funcs
; RUN: opt -S --passes=always-specialize < %s | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define i32 @leaf(i32 alwaysspecialize %x, i32 alwaysspecialize %y) {
entry:
  %add = add nsw i32 %x, %y
  ret i32 %add
}

define i32 @in_order(i32 alwaysspecialize %x) {
entry:
  %call = call i32 @leaf(i32 42, i32 %x)
  ret i32 %call
}

define i32 @swapped(i32 alwaysspecialize %x) {
entry:
  %call = call i32 @leaf(i32 %x, i32 81)
  ret i32 %call
}

define i32 @root() {
entry:
  %call = call i32 @in_order(i32 81)
  %call1 = call i32 @swapped(i32 42)
  %mul = mul nsw i32 %call, %call1
  ret i32 %mul
}



; CHECK-LABEL: define {{[^@]+}}@leaf.spec
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]], i32 [[Y:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[X]], 81
; CHECK-NEXT:    ret i32 [[ADD]]
;
;
; CHECK-LABEL: define {{[^@]+}}@leaf.spec.1
; CHECK-SAME: (i32 [[X:%.*]], i32 alwaysspecialize [[Y:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 42, [[Y]]
; CHECK-NEXT:    ret i32 [[ADD]]
;
;
; CHECK-LABEL: define {{[^@]+}}@leaf
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]], i32 alwaysspecialize [[Y:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[X]], [[Y]]
; CHECK-NEXT:    ret i32 [[ADD]]
;
;
; CHECK-LABEL: define {{[^@]+}}@in_order.spec
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @leaf(i32 42, i32 81)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@in_order
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @leaf.spec.1(i32 42, i32 [[X]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@swapped.spec
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @leaf(i32 42, i32 81)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@swapped
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @leaf.spec(i32 [[X]], i32 81)
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@root() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @in_order.spec(i32 81)
; CHECK-NEXT:    [[CALL1:%.*]] = call i32 @swapped.spec(i32 42)
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[CALL]], [[CALL1]]
; CHECK-NEXT:    ret i32 [[MUL]]
;
