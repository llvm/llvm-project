; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs --version 5
; REQUIRES: asserts
; RUN: opt -passes=ipsccp -S -funcspec-min-function-size=1 -funcspec-min-codesize-savings=20 -debug-only=function-specialization < %s 2>&1 | FileCheck %s

define i32 @incr(i32 %a) {
  %b = add nsw i32 %a, 1
  %c = add nsw i32 %b, 1
  %d = add nsw i32 %c, 1
  %e = add nsw i32 %d, 1
  %f = add nsw i32 %e, 1
  %g = add nsw i32 %f, 1
  ret i32 %g
}

define i32 @forward_outer(i32 %a) {
entry:
  %call = call i32 @forward_inner(i32 %a)
  ret i32 %call
}

define i32 @multi_call(i32 %a) {
entry:
  %call = call i32 @incr(i32 %a)
  %mul = mul nsw i32 %a, 2
  %mul_call = call i32 @incr(i32 %mul)
  ret i32 %call
}

define i32 @forward_inner(i32 %a) {
entry:
  %call = call i32 @incr(i32 %a)
  ret i32 %call
}

define i32 @forward_unfold(i32 %a) {
entry:
  %b = mul nsw i32 %a, 10
  %call = call i32 @incr(i32 %b)
  %c = mul nsw i32 %call, 20
  ret i32 %c
}

define dso_local signext i32 @intrinsic(i64 %a) {
  %local_dest = alloca [1024 x i32], align 4
  %local_src = alloca [1024 x i32], align 4
  call void @llvm.memcpy.p0.p0.i64(ptr %local_dest, ptr %local_src, i64 %a, i1 false)
  ret i32 0
}

define i32 @main() {
entry:
  %add = call i32 @incr(i32 10)
  %int = call i32 @intrinsic(i32 3)
  %fwd_unfold = call i32 @forward_unfold(i32 3)
  %fwd_inner = call i32 @forward_inner(i32 3)
  %fwd_outer = call i32 @forward_outer(i32 3)
  %fwd_outer1 = call i32 @forward_outer(i32 3)
  %multi_call = call i32 @multi_call(i32 5)
  ret i32 %multi_call
}





; CHECK-LABEL: define range(i32 -2147483642, -2147483648) i32 @incr(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[A]], 1
; CHECK-NEXT:    [[C:%.*]] = add nsw i32 [[INC]], 1
; CHECK-NEXT:    [[D:%.*]] = add nsw i32 [[C]], 1
; CHECK-NEXT:    [[E:%.*]] = add nsw i32 [[D]], 1
; CHECK-NEXT:    [[F:%.*]] = add nsw i32 [[E]], 1
; CHECK-NEXT:    [[G:%.*]] = add nsw i32 [[F]], 1
; CHECK-NEXT:    ret i32 [[G]]
;
;
; CHECK-LABEL: define range(i32 -2147483642, -2147483648) i32 @forward_outer(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @forward_inner(i32 [[A]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define range(i32 -2147483642, -2147483648) i32 @multi_call(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @incr(i32 [[A]])
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[A]], 2
; CHECK-NEXT:    [[MUL_CALL:%.*]] = call i32 @incr(i32 [[MUL]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define range(i32 -2147483642, -2147483648) i32 @forward_inner(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @incr(i32 [[A]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define i32 @forward_unfold(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[B:%.*]] = mul nsw i32 [[A]], 10
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @incr(i32 [[B]])
; CHECK-NEXT:    [[C:%.*]] = mul nsw i32 [[CALL]], 20
; CHECK-NEXT:    ret i32 [[C]]
;
;
; CHECK-LABEL: define dso_local signext i32 @intrinsic(
; CHECK-SAME: i64 [[A:%.*]]) {
; CHECK-NEXT:    [[LOCAL_DEST:%.*]] = alloca [1024 x i32], align 4
; CHECK-NEXT:    [[LOCAL_SRC:%.*]] = alloca [1024 x i32], align 4
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[LOCAL_DEST]], ptr [[LOCAL_SRC]], i64 [[A]], i1 false)
; CHECK-NEXT:    ret i32 0
;
;
; CHECK-LABEL: define range(i32 -2147483642, -2147483648) i32 @main() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[ADD:%.*]] = call i32 @incr.specialized.1(i32 10)
; CHECK-NEXT:    [[INT:%.*]] = call i32 @intrinsic(i32 3)
; CHECK-NEXT:    [[FWD_UNFOLD:%.*]] = call i32 @forward_unfold(i32 3)
; CHECK-NEXT:    [[FWD_INNER:%.*]] = call i32 @forward_inner(i32 3)
; CHECK-NEXT:    [[FWD_OUTER:%.*]] = call i32 @forward_outer(i32 3)
; CHECK-NEXT:    [[FWD_OUTER1:%.*]] = call i32 @forward_outer(i32 3)
; CHECK-NEXT:    [[MULTI_CALL:%.*]] = call i32 @multi_call(i32 5)
; CHECK-NEXT:    ret i32 [[MULTI_CALL]]
;
;
; CHECK-LABEL: define internal i32 @incr.specialized.1(
; CHECK-SAME: i32 [[A:%.*]]) {
; CHECK-NEXT:    ret i32 poison
;
