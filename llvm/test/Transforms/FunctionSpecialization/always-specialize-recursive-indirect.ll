; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature --include-generated-funcs
; RUN: opt -S --passes=always-specialize < %s | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

define zeroext i1 @odd(i32 alwaysspecialize %x) {
entry:
  %cmp = icmp eq i32 %x, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  %sub = sub i32 %x, 1
  %call = call zeroext i1 @even(i32 %sub)
  %conv = zext i1 %call to i32
  br label %cond.end

cond.end:
  %cond = phi i32 [ 0, %cond.true ], [ %conv, %cond.false ]
  %tobool = icmp ne i32 %cond, 0
  ret i1 %tobool
}

define zeroext i1 @even(i32 alwaysspecialize %x) {
entry:
  %cmp = icmp eq i32 %x, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  %sub = sub i32 %x, 1
  %call = call zeroext i1 @odd(i32 %sub)
  %conv = zext i1 %call to i32
  br label %cond.end

cond.end:
  %cond = phi i32 [ 1, %cond.true ], [ %conv, %cond.false ]
  %tobool = icmp ne i32 %cond, 0
  ret i1 %tobool
}

define zeroext i1 @evenodd_driver() {
entry:
  %call = call zeroext i1 @even(i32 0)
  br i1 %call, label %land.lhs.true, label %land.end

land.lhs.true:
  %call1 = call zeroext i1 @even(i32 1)
  br i1 %call1, label %land.end, label %land.lhs.true2

land.lhs.true2:
  %call3 = call zeroext i1 @even(i32 2)
  br i1 %call3, label %land.lhs.true4, label %land.end

land.lhs.true4:
  %call5 = call zeroext i1 @even(i32 3)
  br i1 %call5, label %land.end, label %land.lhs.true6

land.lhs.true6:
  %call7 = call zeroext i1 @odd(i32 0)
  br i1 %call7, label %land.end, label %land.lhs.true8

land.lhs.true8:
  %call9 = call zeroext i1 @odd(i32 1)
  br i1 %call9, label %land.lhs.true10, label %land.end

land.lhs.true10:
  %call11 = call zeroext i1 @odd(i32 2)
  br i1 %call11, label %land.end, label %land.rhs

land.rhs:
  %call12 = call zeroext i1 @odd(i32 3)
  br label %land.end

land.end:
  %0 = phi i1 [ false, %land.lhs.true10 ], [ false, %land.lhs.true8 ], [ false, %land.lhs.true6 ], [ false, %land.lhs.true4 ], [ false, %land.lhs.true2 ], [ false, %land.lhs.true ], [ false, %entry ], [ %call12, %land.rhs ]
  ret i1 %0
}



; CHECK-LABEL: define {{[^@]+}}@odd.spec
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 3, 0
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 3, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @even.spec.4(i32 2)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 0, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@odd.spec.1
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 2, 0
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 2, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @even.spec.5(i32 1)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 0, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@odd.spec.2
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 1, 0
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 1, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @even.spec.6(i32 0)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 0, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@odd.spec.3
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 0, 0
; CHECK-NEXT:    br i1 true, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 0, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @even(i32 -1)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 0, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@odd
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[X]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[X]], 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @even(i32 [[SUB]])
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 0, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@even.spec
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 3, 0
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 3, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @odd.spec.1(i32 2)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 1, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@even.spec.4
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 2, 0
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 2, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @odd.spec.2(i32 1)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 1, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@even.spec.5
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 1, 0
; CHECK-NEXT:    br i1 false, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 1, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @odd.spec.3(i32 0)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 1, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@even.spec.6
; CHECK-SAME: (i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 0, 0
; CHECK-NEXT:    br i1 true, label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 0, 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @odd(i32 -1)
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 1, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@even
; CHECK-SAME: (i32 alwaysspecialize [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i32 [[X]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[COND_TRUE:%.*]], label [[COND_FALSE:%.*]]
; CHECK:       cond.true:
; CHECK-NEXT:    br label [[COND_END:%.*]]
; CHECK:       cond.false:
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 [[X]], 1
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @odd(i32 [[SUB]])
; CHECK-NEXT:    [[CONV:%.*]] = zext i1 [[CALL]] to i32
; CHECK-NEXT:    br label [[COND_END]]
; CHECK:       cond.end:
; CHECK-NEXT:    [[COND:%.*]] = phi i32 [ 1, [[COND_TRUE]] ], [ [[CONV]], [[COND_FALSE]] ]
; CHECK-NEXT:    [[TOBOOL:%.*]] = icmp ne i32 [[COND]], 0
; CHECK-NEXT:    ret i1 [[TOBOOL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@evenodd_driver() {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call zeroext i1 @even.spec.6(i32 0)
; CHECK-NEXT:    br i1 [[CALL]], label [[LAND_LHS_TRUE:%.*]], label [[LAND_END:%.*]]
; CHECK:       land.lhs.true:
; CHECK-NEXT:    [[CALL1:%.*]] = call zeroext i1 @even.spec.5(i32 1)
; CHECK-NEXT:    br i1 [[CALL1]], label [[LAND_END]], label [[LAND_LHS_TRUE2:%.*]]
; CHECK:       land.lhs.true2:
; CHECK-NEXT:    [[CALL3:%.*]] = call zeroext i1 @even.spec.4(i32 2)
; CHECK-NEXT:    br i1 [[CALL3]], label [[LAND_LHS_TRUE4:%.*]], label [[LAND_END]]
; CHECK:       land.lhs.true4:
; CHECK-NEXT:    [[CALL5:%.*]] = call zeroext i1 @even.spec(i32 3)
; CHECK-NEXT:    br i1 [[CALL5]], label [[LAND_END]], label [[LAND_LHS_TRUE6:%.*]]
; CHECK:       land.lhs.true6:
; CHECK-NEXT:    [[CALL7:%.*]] = call zeroext i1 @odd.spec.3(i32 0)
; CHECK-NEXT:    br i1 [[CALL7]], label [[LAND_END]], label [[LAND_LHS_TRUE8:%.*]]
; CHECK:       land.lhs.true8:
; CHECK-NEXT:    [[CALL9:%.*]] = call zeroext i1 @odd.spec.2(i32 1)
; CHECK-NEXT:    br i1 [[CALL9]], label [[LAND_LHS_TRUE10:%.*]], label [[LAND_END]]
; CHECK:       land.lhs.true10:
; CHECK-NEXT:    [[CALL11:%.*]] = call zeroext i1 @odd.spec.1(i32 2)
; CHECK-NEXT:    br i1 [[CALL11]], label [[LAND_END]], label [[LAND_RHS:%.*]]
; CHECK:       land.rhs:
; CHECK-NEXT:    [[CALL12:%.*]] = call zeroext i1 @odd.spec(i32 3)
; CHECK-NEXT:    br label [[LAND_END]]
; CHECK:       land.end:
; CHECK-NEXT:    [[TMP0:%.*]] = phi i1 [ false, [[LAND_LHS_TRUE10]] ], [ false, [[LAND_LHS_TRUE8]] ], [ false, [[LAND_LHS_TRUE6]] ], [ false, [[LAND_LHS_TRUE4]] ], [ false, [[LAND_LHS_TRUE2]] ], [ false, [[LAND_LHS_TRUE]] ], [ false, [[ENTRY:%.*]] ], [ [[CALL12]], [[LAND_RHS]] ]
; CHECK-NEXT:    ret i1 [[TMP0]]
;
