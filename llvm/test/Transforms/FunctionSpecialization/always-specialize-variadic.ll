; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature --include-generated-funcs
; RUN: opt -S --passes=always-specialize < %s | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.__va_list_tag = type { i32, i32, ptr, ptr }

@.str = private unnamed_addr constant [10 x i8] c"%s -> %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"thing\00", align 1

define i32 @print(ptr %F, ptr alwaysspecialize %fmt, ...) {
entry:
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %va, i64 0, i64 0
  call void @llvm.va_start.p0(ptr %arraydecay)
  %arraydecay1 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %va, i64 0, i64 0
  %call = call i32 @vprint(ptr %F, ptr %fmt, ptr %arraydecay1)
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], ptr %va, i64 0, i64 0
  call void @llvm.va_end.p0(ptr %arraydecay2)
  ret i32 %call
}

declare void @llvm.va_start.p0(ptr)

declare i32 @vprint(ptr noundef, ptr noundef, ptr noundef)

declare void @llvm.va_end.p0(ptr)

define i32 @caller(ptr %F, i32 %x) {
entry:
  %call = call i32 (ptr, ptr, ...) @print(ptr %F, ptr @.str, ptr @.str.1, i32 %x)
  ret i32 %call
}



; CHECK-LABEL: define {{[^@]+}}@print
; CHECK-SAME: (ptr [[F:%.*]], ptr alwaysspecialize [[FMT:%.*]], ...) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[VA:%.*]] = alloca [1 x %struct.__va_list_tag], align 16
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [1 x %struct.__va_list_tag], ptr [[VA]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.va_start.p0(ptr [[ARRAYDECAY]])
; CHECK-NEXT:    [[ARRAYDECAY1:%.*]] = getelementptr inbounds [1 x %struct.__va_list_tag], ptr [[VA]], i64 0, i64 0
; CHECK-NEXT:    [[CALL:%.*]] = call i32 @vprint(ptr [[F]], ptr [[FMT]], ptr [[ARRAYDECAY1]])
; CHECK-NEXT:    [[ARRAYDECAY2:%.*]] = getelementptr inbounds [1 x %struct.__va_list_tag], ptr [[VA]], i64 0, i64 0
; CHECK-NEXT:    call void @llvm.va_end.p0(ptr [[ARRAYDECAY2]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
;
; CHECK-LABEL: define {{[^@]+}}@caller
; CHECK-SAME: (ptr [[F:%.*]], i32 [[X:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CALL:%.*]] = call i32 (ptr, ptr, ...) @print(ptr [[F]], ptr @.str, ptr @.str.1, i32 [[X]])
; CHECK-NEXT:    ret i32 [[CALL]]
;
