; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes="instcombine,div-rem-pairs" -S -mtriple=powerpc64-unknown-unknown | FileCheck %s


; ensure that `exact` flags inferred from assumes are
; not removed.

define i8 @udiv_exact_assume(i8 %x, i8 %y) {
; CHECK-LABEL: define i8 @udiv_exact_assume(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]]) {
; CHECK-NEXT:    [[X_FROZEN:%.*]] = freeze i8 [[X]]
; CHECK-NEXT:    [[Y_FROZEN:%.*]] = freeze i8 [[Y]]
; CHECK-NEXT:    [[DIV3:%.*]] = udiv i8 [[X_FROZEN]], [[Y_FROZEN]]
; CHECK-NEXT:    [[TMP1:%.*]] = mul i8 [[DIV3]], [[Y_FROZEN]]
; CHECK-NEXT:    [[REM:%.*]] = sub i8 [[X_FROZEN]], [[TMP1]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[REM]], 0
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP]])
; CHECK-NEXT:    ret i8 [[DIV3]]
;
  %rem = urem i8 %x, %y
  %cmp = icmp eq i8 %rem, 0
  tail call void @llvm.assume(i1 %cmp)
  %div3 = udiv i8 %x, %y
  ret i8 %div3
}

define i8 @udiv_exact_assume_negative(i8 %x, i8 %y) {
; CHECK-LABEL: define i8 @udiv_exact_assume_negative(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]]) {
; CHECK-NEXT:    [[X_FROZEN:%.*]] = freeze i8 [[X]]
; CHECK-NEXT:    [[Y_FROZEN:%.*]] = freeze i8 [[Y]]
; CHECK-NEXT:    [[DIV3:%.*]] = udiv i8 [[X_FROZEN]], [[Y_FROZEN]]
; CHECK-NEXT:    [[TMP1:%.*]] = mul i8 [[DIV3]], [[Y_FROZEN]]
; CHECK-NEXT:    [[REM_DECOMPOSED:%.*]] = sub i8 [[X_FROZEN]], [[TMP1]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[REM_DECOMPOSED]], 1
; CHECK-NEXT:    tail call void @llvm.assume(i1 [[CMP]])
; CHECK-NEXT:    ret i8 [[DIV3]]
;
  %rem = urem i8 %x, %y
  %cmp = icmp eq i8 %rem, 1
  tail call void @llvm.assume(i1 %cmp)
  %div3 = udiv i8 %x, %y
  ret i8 %div3
}


; exact flag cannot be inferred from dominant conditions
; because remainder instruction gets decomposed.

define i8 @infer_exact_from_dom_cond_negative(i8 %X, i8 %Y) {
; CHECK-LABEL: define i8 @infer_exact_from_dom_cond_negative(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[X_FROZEN:%.*]] = freeze i8 [[X]]
; CHECK-NEXT:    [[Y_FROZEN:%.*]] = freeze i8 [[Y]]
; CHECK-NEXT:    [[DIV:%.*]] = sdiv i8 [[X_FROZEN]], [[Y_FROZEN]]
; CHECK-NEXT:    [[TMP0:%.*]] = mul i8 [[DIV]], [[Y_FROZEN]]
; CHECK-NEXT:    [[REM_DECOMPOSED:%.*]] = sub i8 [[X_FROZEN]], [[TMP0]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8 [[REM_DECOMPOSED]], 0
; CHECK-NEXT:    br i1 [[CMP]], label %[[IF_THEN:.*]], label %[[RETURN:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[RETURN]]:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i8 [ [[DIV]], %[[IF_THEN]] ], [ 0, %[[ENTRY]] ]
; CHECK-NEXT:    ret i8 [[RETVAL_0]]
;
entry:
  %rem = srem i8 %X, %Y
  %cmp = icmp eq i8 %rem, 0
  br i1 %cmp, label %if.then, label %return

if.then:
  %div = sdiv i8 %X, %Y
  br label %return

return:
  %retval.0 = phi i8 [ %div, %if.then ], [ 0, %entry ]
  ret i8 %retval.0
}

define i8 @infer_exact_from_dom_cond_false_path_negative(i8 %X, i8 %Y) {
; CHECK-LABEL: define i8 @infer_exact_from_dom_cond_false_path_negative(
; CHECK-SAME: i8 [[X:%.*]], i8 [[Y:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[X_FROZEN:%.*]] = freeze i8 [[X]]
; CHECK-NEXT:    [[Y_FROZEN:%.*]] = freeze i8 [[Y]]
; CHECK-NEXT:    [[DIV:%.*]] = sdiv i8 [[X_FROZEN]], [[Y_FROZEN]]
; CHECK-NEXT:    [[TMP0:%.*]] = mul i8 [[DIV]], [[Y_FROZEN]]
; CHECK-NEXT:    [[REM_DECOMPOSED:%.*]] = sub i8 [[X_FROZEN]], [[TMP0]]
; CHECK-NEXT:    [[CMP_NOT:%.*]] = icmp eq i8 [[REM_DECOMPOSED]], 0
; CHECK-NEXT:    br i1 [[CMP_NOT]], label %[[IF_ELSE:.*]], label %[[IF_THEN:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    br label %[[RETURN:.*]]
; CHECK:       [[IF_ELSE]]:
; CHECK-NEXT:    br label %[[RETURN]]
; CHECK:       [[RETURN]]:
; CHECK-NEXT:    [[RETVAL_0:%.*]] = phi i8 [ 0, %[[IF_THEN]] ], [ [[DIV]], %[[IF_ELSE]] ]
; CHECK-NEXT:    ret i8 [[RETVAL_0]]
;
entry:
  %rem = srem i8 %X, %Y
  %cmp = icmp ne i8 %rem, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:
  br label %return

if.else:
  %div = sdiv i8 %X, %Y
  br label %return

return:
  %retval.0 = phi i8 [ 0, %if.then ], [ %div, %if.else ]
  ret i8 %retval.0
}
