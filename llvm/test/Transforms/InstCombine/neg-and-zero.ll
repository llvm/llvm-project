; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define i32 @non_overflow(i32 %0, i32 %1) {
; CHECK-LABEL: @non_overflow(
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0:%.*]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ule i32 [[TMP1:%.*]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = zext i1 [[TMP4]] to i32
; CHECK-NEXT:    ret i32 [[TMP5]]
;
  %3 = icmp eq i32 %0, 0
  %4 = sub i32 0, %0
  %5 = icmp ult i32 %1, %4
  %6 = or i1 %3, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}

define i32 @overflow(i32 %0, i32 %1) {
; CHECK-LABEL: @overflow(
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0:%.*]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ugt i32 [[TMP1:%.*]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = zext i1 [[TMP4]] to i32
; CHECK-NEXT:    ret i32 [[TMP5]]
;
  %3 = sub i32 0, %0
  %4 = icmp ne i32 %0, 0
  %5 = icmp uge i32 %1, %3
  %6 = and i1 %4, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}


define i32 @non_overflow_flipped(i32 %0, i32 %1) {
; CHECK-LABEL: @non_overflow_flipped(
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0:%.*]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ule i32 [[TMP1:%.*]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = zext i1 [[TMP4]] to i32
; CHECK-NEXT:    ret i32 [[TMP5]]
;
  %3 = icmp eq i32 %0, 0
  %4 = sub i32 0, %0
  %5 = icmp ugt i32 %4, %1
  %6 = or i1 %3, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}

define i32 @overflow_flipped(i32 %0, i32 %1) {
; CHECK-LABEL: @overflow_flipped(
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0:%.*]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ugt i32 [[TMP1:%.*]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = zext i1 [[TMP4]] to i32
; CHECK-NEXT:    ret i32 [[TMP5]]
;
  %3 = sub i32 0, %0
  %4 = icmp ne i32 %0, 0
  %5 = icmp ule i32 %3, %1
  %6 = and i1 %4, %5
  %7 = zext i1 %6 to i32
  ret i32 %7
}
