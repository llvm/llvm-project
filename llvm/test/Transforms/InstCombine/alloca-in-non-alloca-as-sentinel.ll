; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s
; RUN: opt < %s -passes=instcombine -data-layout=z0:1-z2:neg1-z3:neg1-z5:neg1 -S | FileCheck -check-prefixes=CHECK-DL %s

; Gracefully handle the alloca that is not in the alloca AS (=5)

declare void @use(ptr)
declare void @use2(ptr, ptr)

define void @__omp_offloading_802_ea0109_main_l8(ptr %a) {
; CHECK-LABEL: @__omp_offloading_802_ea0109_main_l8(
; CHECK-NEXT:  .master:
; CHECK-NEXT:    [[ALLOCA1:%.*]] = alloca [8 x i8], align 1, addrspace(5)
; CHECK-NEXT:    store ptr null, ptr addrspace(5) [[ALLOCA1]], align 8
; CHECK-NEXT:    call void @use2(ptr addrspace(5) [[ALLOCA1]], ptr addrspace(5) [[ALLOCA1]])
; CHECK-NEXT:    ret void
;
; CHECK-DL-LABEL: @__omp_offloading_802_ea0109_main_l8(
; CHECK-DL-NEXT:  .master:
; CHECK-DL-NEXT:    [[ALLOCA1:%.*]] = alloca [8 x i8], align 1, addrspace(5)
; CHECK-DL-NEXT:    store ptr null, ptr addrspace(5) [[ALLOCA1]], align 8
; CHECK-DL-NEXT:    call void @use2(ptr addrspace(5) nonnull [[ALLOCA1]], ptr addrspace(5) nonnull [[ALLOCA1]])
; CHECK-DL-NEXT:    ret void
;
.master:
  %alloca = alloca i8, i64 8, align 1, addrspace(5)
  store ptr null, ptr  addrspace(5) %alloca, align 8
  call void @use2(ptr  addrspace(5) %alloca, ptr  addrspace(5) %alloca)
  ret void
}

%struct.widget = type { [8 x i8] }

define void @spam(ptr %arg1) {
; CHECK-LABEL: @spam(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[ALLOCA1:%.*]] = alloca [0 x [30 x %struct.widget]], align 16, addrspace(5)
; CHECK-NEXT:    call void @zot(ptr addrspace(5) [[ALLOCA1]])
; CHECK-NEXT:    ret void
;
; CHECK-DL-LABEL: @spam(
; CHECK-DL-NEXT:  bb:
; CHECK-DL-NEXT:    [[ALLOCA1:%.*]] = alloca [0 x [30 x %struct.widget]], align 16, addrspace(5)
; CHECK-DL-NEXT:    call void @zot(ptr addrspace(5) nonnull [[ALLOCA1]])
; CHECK-DL-NEXT:    ret void
;
bb:
  %alloca = alloca [30 x %struct.widget], i32 0, align 16, addrspace(5)
  call void @zot(ptr  addrspace(5) %alloca)
  ret void
}

define i1 @alloca_addrspace_3_nonnull() {
; CHECK-LABEL: @alloca_addrspace_3_nonnull(
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i8, align 1, addrspace(3)
; CHECK-NEXT:    call void @use(ptr addrspace(3) [[ALLOCA]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne ptr addrspace(3) [[ALLOCA]], null
; CHECK-NEXT:    ret i1 [[CMP]]
;
; CHECK-DL-LABEL: @alloca_addrspace_3_nonnull(
; CHECK-DL-NEXT:    [[ALLOCA:%.*]] = alloca i8, align 1, addrspace(3)
; CHECK-DL-NEXT:    call void @use(ptr addrspace(3) nonnull [[ALLOCA]])
; CHECK-DL-NEXT:    ret i1 true
;
  %alloca = alloca i8, addrspace(3)
  call void @use(ptr addrspace(3) %alloca)
  %cmp = icmp ne ptr addrspace(3) %alloca, null
  ret i1 %cmp
}

define i1 @alloca_addrspace_0_nonnull() {
; CHECK-LABEL: @alloca_addrspace_0_nonnull(
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i8, align 1
; CHECK-NEXT:    call void @use(ptr nonnull [[ALLOCA]])
; CHECK-NEXT:    ret i1 true
;
; CHECK-DL-LABEL: @alloca_addrspace_0_nonnull(
; CHECK-DL-NEXT:    [[ALLOCA:%.*]] = alloca i8, align 1
; CHECK-DL-NEXT:    call void @use(ptr nonnull [[ALLOCA]])
; CHECK-DL-NEXT:    ret i1 true
;
  %alloca = alloca i8
  call void @use(ptr %alloca)
  %cmp = icmp ne ptr %alloca, null
  ret i1 %cmp
}

define i1 @alloca_addrspace_5_nonnull() {
; CHECK-LABEL: @alloca_addrspace_5_nonnull(
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i8, align 1, addrspace(5)
; CHECK-NEXT:    call void @use(ptr addrspace(5) [[ALLOCA]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne ptr addrspace(5) [[ALLOCA]], null
; CHECK-NEXT:    ret i1 [[CMP]]
;
; CHECK-DL-LABEL: @alloca_addrspace_5_nonnull(
; CHECK-DL-NEXT:    [[ALLOCA:%.*]] = alloca i8, align 1, addrspace(5)
; CHECK-DL-NEXT:    call void @use(ptr addrspace(5) nonnull [[ALLOCA]])
; CHECK-DL-NEXT:    ret i1 true
;
  %alloca = alloca i8, addrspace(5)
  call void @use(ptr addrspace(5) %alloca)
  %cmp = icmp ne ptr addrspace(5) %alloca, null
  ret i1 %cmp
}

declare hidden void @zot(ptr)
