; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S < %s -passes=instcombine | FileCheck -check-prefixes=DEFAULT %s
; RUN: opt -S < %s -passes=instcombine -exhaustive-analysis-recursion=true | FileCheck -check-prefixes=EXHUASTIVE %s

declare i32 @callee()

define i32 @test5(i1 %C) {
; DEFAULT-LABEL: @test5(
; DEFAULT-NEXT:    [[VALUE:%.*]] = tail call i32 @callee(), !range [[RNG0:![0-9]+]]
; DEFAULT-NEXT:    [[VALUE_MASK0:%.*]] = and i32 [[VALUE]], 8
; DEFAULT-NEXT:    [[CMP0:%.*]] = icmp eq i32 [[VALUE_MASK0]], 0
; DEFAULT-NEXT:    [[VALUE_MASK1:%.*]] = and i32 [[VALUE]], 16
; DEFAULT-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[VALUE_MASK1]], 0
; DEFAULT-NEXT:    [[VALUE_MASK2:%.*]] = and i32 [[VALUE]], 32
; DEFAULT-NEXT:    [[CMP2:%.*]] = icmp eq i32 [[VALUE_MASK2]], 0
; DEFAULT-NEXT:    [[VALUE_SHIFT0:%.*]] = shl nuw nsw i32 [[VALUE]], 3
; DEFAULT-NEXT:    [[VALUE_MASK4:%.*]] = and i32 [[VALUE_SHIFT0]], 56
; DEFAULT-NEXT:    [[SEL0:%.*]] = select i1 [[CMP0]], i32 0, i32 72
; DEFAULT-NEXT:    [[SEL1:%.*]] = select i1 [[CMP1]], i32 0, i32 144
; DEFAULT-NEXT:    [[COMBINED_01:%.*]] = or disjoint i32 [[SEL0]], [[SEL1]]
; DEFAULT-NEXT:    [[SEL2:%.*]] = select i1 [[CMP2]], i32 0, i32 288
; DEFAULT-NEXT:    [[COMBINED_012:%.*]] = or disjoint i32 [[COMBINED_01]], [[SEL2]]
; DEFAULT-NEXT:    [[COMBINED_0123:%.*]] = xor i32 [[COMBINED_012]], [[VALUE_MASK4]]
; DEFAULT-NEXT:    [[VALUE_SHIFT1:%.*]] = and i32 [[VALUE_SHIFT0]], 1536
; DEFAULT-NEXT:    [[OP0:%.*]] = or disjoint i32 [[VALUE_SHIFT1]], [[COMBINED_0123]]
; DEFAULT-NEXT:    [[VALUE_MASK3:%.*]] = shl nuw nsw i32 [[VALUE]], 3
; DEFAULT-NEXT:    [[OP1:%.*]] = and i32 [[VALUE_MASK3]], 2048
; DEFAULT-NEXT:    [[BASE:%.*]] = or disjoint i32 [[OP0]], [[OP1]]
; DEFAULT-NEXT:    [[XOR:%.*]] = xor i32 [[BASE]], 4096
; DEFAULT-NEXT:    ret i32 [[XOR]]
;
; EXHUASTIVE-LABEL: @test5(
; EXHUASTIVE-NEXT:    [[VALUE:%.*]] = tail call i32 @callee(), !range [[RNG0:![0-9]+]]
; EXHUASTIVE-NEXT:    [[VALUE_MASK0:%.*]] = and i32 [[VALUE]], 8
; EXHUASTIVE-NEXT:    [[CMP0:%.*]] = icmp eq i32 [[VALUE_MASK0]], 0
; EXHUASTIVE-NEXT:    [[VALUE_MASK1:%.*]] = and i32 [[VALUE]], 16
; EXHUASTIVE-NEXT:    [[CMP1:%.*]] = icmp eq i32 [[VALUE_MASK1]], 0
; EXHUASTIVE-NEXT:    [[VALUE_MASK2:%.*]] = and i32 [[VALUE]], 32
; EXHUASTIVE-NEXT:    [[CMP2:%.*]] = icmp eq i32 [[VALUE_MASK2]], 0
; EXHUASTIVE-NEXT:    [[VALUE_SHIFT0:%.*]] = shl nuw nsw i32 [[VALUE]], 3
; EXHUASTIVE-NEXT:    [[VALUE_MASK4:%.*]] = and i32 [[VALUE_SHIFT0]], 56
; EXHUASTIVE-NEXT:    [[SEL0:%.*]] = select i1 [[CMP0]], i32 0, i32 72
; EXHUASTIVE-NEXT:    [[SEL1:%.*]] = select i1 [[CMP1]], i32 0, i32 144
; EXHUASTIVE-NEXT:    [[COMBINED_01:%.*]] = or disjoint i32 [[SEL0]], [[SEL1]]
; EXHUASTIVE-NEXT:    [[SEL2:%.*]] = select i1 [[CMP2]], i32 0, i32 288
; EXHUASTIVE-NEXT:    [[COMBINED_012:%.*]] = or disjoint i32 [[COMBINED_01]], [[SEL2]]
; EXHUASTIVE-NEXT:    [[COMBINED_0123:%.*]] = xor i32 [[COMBINED_012]], [[VALUE_MASK4]]
; EXHUASTIVE-NEXT:    [[VALUE_SHIFT1:%.*]] = and i32 [[VALUE_SHIFT0]], 1536
; EXHUASTIVE-NEXT:    [[OP0:%.*]] = or disjoint i32 [[VALUE_SHIFT1]], [[COMBINED_0123]]
; EXHUASTIVE-NEXT:    [[VALUE_MASK3:%.*]] = shl nuw nsw i32 [[VALUE]], 3
; EXHUASTIVE-NEXT:    [[OP1:%.*]] = and i32 [[VALUE_MASK3]], 2048
; EXHUASTIVE-NEXT:    [[BASE:%.*]] = or disjoint i32 [[OP0]], [[OP1]]
; EXHUASTIVE-NEXT:    [[XOR:%.*]] = or disjoint i32 [[BASE]], 4096
; EXHUASTIVE-NEXT:    ret i32 [[XOR]]
;
  %value = tail call i32 @callee(), !range !0
  %value_mask0 = and i32 %value, 8
  %cmp0 = icmp eq i32 %value_mask0, 0
  %value_mask1 = and i32 %value, 16
  %cmp1 = icmp eq i32 %value_mask1, 0
  %value_mask2 = and i32 %value, 32
  %cmp2 = icmp eq i32 %value_mask2, 0
  %value_mask3 = and i32 %value, 256
  %value_shift0 = shl i32 %value, 3
  %value_mask4 = and i32 %value_shift0, 56
  %sel0 = select i1 %cmp0, i32 0, i32 72 ; lane_bit3 * 73
  %sel1 = select i1 %cmp1, i32 0, i32 144  ; lane_bit4 * 144
  %combined_01 = or disjoint i32 %sel0, %sel1     ;
  %sel2 = select i1 %cmp2, i32 0, i32 288  ; lane_bit5 * 288
  %combined_012 = or disjoint i32 %combined_01, %sel2
  %combined_0123 = xor i32 %combined_012, %value_mask4
  %value_shift1 = and i32 %value_shift0, 1536
  %op0 = or disjoint i32 %value_shift1, %combined_0123
  %op1 = shl nuw nsw i32 %value_mask3, 3
  %base = or disjoint i32 %op0, %op1
  %xor = xor i32 %base, 4096
  ret i32 %xor
}

!0 = !{ i32 0, i32 2048 }
