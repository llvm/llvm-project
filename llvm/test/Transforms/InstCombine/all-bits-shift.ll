; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -instcombine -expensive-combines=0 < %s | FileCheck %s --check-prefixes=CHECK,EXPENSIVE-OFF
; RUN: opt -S -instcombine -expensive-combines=1 < %s | FileCheck %s --check-prefixes=CHECK,EXPENSIVE-ON
target datalayout = "E-m:e-i64:64-n32:64"
target triple = "powerpc64-unknown-linux-gnu"

@d = global i32 15, align 4
@b = global i32* @d, align 8
@a = common global i32 0, align 4

; Check that both InstCombine and InstSimplify can use computeKnownBits to
; realize that:
;   ((2072 >> (L == 0)) >> 7) & 1
; is always zero.
define signext i32 @main() #1 {
; EXPENSIVE-OFF-LABEL: @main(
; EXPENSIVE-OFF-NEXT:  entry:
; EXPENSIVE-OFF-NEXT:    [[TMP0:%.*]] = load i32*, i32** @b, align 8
; EXPENSIVE-OFF-NEXT:    [[TMP1:%.*]] = load i32, i32* @a, align 4
; EXPENSIVE-OFF-NEXT:    [[LNOT:%.*]] = icmp eq i32 [[TMP1]], 0
; EXPENSIVE-OFF-NEXT:    [[LNOT_EXT:%.*]] = zext i1 [[LNOT]] to i32
; EXPENSIVE-OFF-NEXT:    [[SHR_I:%.*]] = lshr i32 2072, [[LNOT_EXT]]
; EXPENSIVE-OFF-NEXT:    [[CALL_LOBIT:%.*]] = lshr i32 [[SHR_I]], 7
; EXPENSIVE-OFF-NEXT:    [[TMP2:%.*]] = and i32 [[CALL_LOBIT]], 1
; EXPENSIVE-OFF-NEXT:    [[TMP3:%.*]] = load i32, i32* [[TMP0]], align 4
; EXPENSIVE-OFF-NEXT:    [[OR:%.*]] = or i32 [[TMP2]], [[TMP3]]
; EXPENSIVE-OFF-NEXT:    store i32 [[OR]], i32* [[TMP0]], align 4
; EXPENSIVE-OFF-NEXT:    [[TMP4:%.*]] = load i32, i32* @a, align 4
; EXPENSIVE-OFF-NEXT:    [[LNOT_1:%.*]] = icmp eq i32 [[TMP4]], 0
; EXPENSIVE-OFF-NEXT:    [[LNOT_EXT_1:%.*]] = zext i1 [[LNOT_1]] to i32
; EXPENSIVE-OFF-NEXT:    [[SHR_I_1:%.*]] = lshr i32 2072, [[LNOT_EXT_1]]
; EXPENSIVE-OFF-NEXT:    [[CALL_LOBIT_1:%.*]] = lshr i32 [[SHR_I_1]], 7
; EXPENSIVE-OFF-NEXT:    [[TMP5:%.*]] = and i32 [[CALL_LOBIT_1]], 1
; EXPENSIVE-OFF-NEXT:    [[OR_1:%.*]] = or i32 [[TMP5]], [[TMP3]]
; EXPENSIVE-OFF-NEXT:    store i32 [[OR_1]], i32* [[TMP0]], align 4
; EXPENSIVE-OFF-NEXT:    ret i32 [[OR_1]]
;
; EXPENSIVE-ON-LABEL: @main(
; EXPENSIVE-ON-NEXT:  entry:
; EXPENSIVE-ON-NEXT:    [[TMP0:%.*]] = load i32*, i32** @b, align 8
; EXPENSIVE-ON-NEXT:    [[TMP1:%.*]] = load i32, i32* [[TMP0]], align 4
; EXPENSIVE-ON-NEXT:    ret i32 [[TMP1]]
;
entry:
  %0 = load i32*, i32** @b, align 8
  %1 = load i32, i32* @a, align 4
  %lnot = icmp eq i32 %1, 0
  %lnot.ext = zext i1 %lnot to i32
  %shr.i = lshr i32 2072, %lnot.ext
  %call.lobit = lshr i32 %shr.i, 7
  %2 = and i32 %call.lobit, 1
  %3 = load i32, i32* %0, align 4
  %or = or i32 %2, %3
  store i32 %or, i32* %0, align 4
  %4 = load i32, i32* @a, align 4
  %lnot.1 = icmp eq i32 %4, 0
  %lnot.ext.1 = zext i1 %lnot.1 to i32
  %shr.i.1 = lshr i32 2072, %lnot.ext.1
  %call.lobit.1 = lshr i32 %shr.i.1, 7
  %5 = and i32 %call.lobit.1, 1
  %or.1 = or i32 %5, %or
  store i32 %or.1, i32* %0, align 4
  ret i32 %or.1

}

attributes #0 = { nounwind readnone }
attributes #1 = { nounwind }

