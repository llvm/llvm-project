; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -o - -S %s -passes=instcombine | FileCheck %s

@tlsvar_a4 = thread_local global i32 4, align 4

define void @func_increase_alignment() {
; CHECK-LABEL: define void @func_increase_alignment() {
; CHECK-NEXT:    [[P:%.*]] = call align 4 ptr @llvm.threadlocal.address.p0(ptr @tlsvar_a4)
; CHECK-NEXT:    store i32 42, ptr [[P]], align 2
; CHECK-NEXT:    ret void
;
  %p = call align 2 ptr @llvm.threadlocal.address(ptr @tlsvar_a4)
  store i32 42, ptr %p, align 2
  ret void
}

@tlsvar_a32 = thread_local global i32 5, align 32

define i1 @func_add_alignment() {
; CHECK-LABEL: define i1 @func_add_alignment() {
; CHECK-NEXT:    ret i1 true
;
  %p = call ptr @llvm.threadlocal.address(ptr @tlsvar_a32)
  %p_int = ptrtoint ptr %p to i32
  %lowbits = and i32 %p_int, 31
  %zero = icmp eq i32 %lowbits, 0
  ret i1 %zero
}

@tlsvar_a1 = thread_local global i8 6, align 1

define i1 @func_dont_reduce_alignment() {
; CHECK-LABEL: define i1 @func_dont_reduce_alignment() {
; CHECK-NEXT:    ret i1 true
;
  %p = call align 4 ptr @llvm.threadlocal.address(ptr @tlsvar_a1)
  %p_int = ptrtoint ptr %p to i32
  %lowbits = and i32 %p_int, 3
  %zero = icmp eq i32 %lowbits, 0
  ret i1 %zero
}
