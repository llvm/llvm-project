; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instcombine -S | FileCheck %s
define i1 @test_pass_et(i32 %0, i32 %1) {
; CHECK-LABEL: define i1 @test_pass_et(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    ret i1 false
;
common.ret:
  %2 = xor i32 %0, -1
  %3 = icmp ule i32 %1, %2
  %4 = xor i32 %1, -1
  %5 = icmp ugt i32 %0, %4
  %common.ret.op = and i1 %3, %5
  ret i1 %common.ret.op
}

define i1 @test_pass_signed(i32 %0, i32 %1) {
; CHECK-LABEL: define i1 @test_pass_signed(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    ret i1 false
;
common.ret:
  %2 = xor i32 %0, -1
  %3 = icmp sle i32 %1, %2
  %4 = xor i32 %1, -1
  %5 = icmp sgt i32 %0, %4
  %common.ret.op = and i1 %3, %5
  ret i1 %common.ret.op
}

define i1 @test_pass_tt(i32 %0, i32 %1) {
; CHECK-LABEL: define i1 @test_pass_tt(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    ret i1 false
;
common.ret:
  %2 = xor i32 %0, -1
  %3 = icmp ult i32 %1, %2
  %4 = xor i32 %1, -1
  %5 = icmp ugt i32 %0, %4
  %common.ret.op = and i1 %3, %5
  ret i1 %common.ret.op
}

define i1 @test_pass_te(i32 %0, i32 %1) {
; CHECK-LABEL: define i1 @test_pass_te(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    ret i1 false
;
common.ret:
  %2 = xor i32 %0, -1
  %3 = icmp ult i32 %1, %2
  %4 = xor i32 %1, -1
  %5 = icmp uge i32 %0, %4
  %common.ret.op = and i1 %3, %5
  ret i1 %common.ret.op
}

define i1 @test_nopass_ee(i32 %0, i32 %1) {
; CHECK-LABEL: define i1 @test_nopass_ee(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP0]], -1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ule i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = xor i32 [[TMP1]], -1
; CHECK-NEXT:    [[TMP5:%.*]] = icmp uge i32 [[TMP0]], [[TMP4]]
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = and i1 [[TMP3]], [[TMP5]]
; CHECK-NEXT:    ret i1 [[COMMON_RET_OP]]
;
common.ret:
  %2 = xor i32 %0, -1
  %3 = icmp ule i32 %1, %2
  %4 = xor i32 %1, -1
  %5 = icmp uge i32 %0, %4
  %common.ret.op = and i1 %3, %5
  ret i1 %common.ret.op
}

define i1 @test_no_change_et(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define i1 @test_no_change_et(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ule i32 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp slt i32 [[TMP1]], 0
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = and i1 [[TMP5]], [[TMP4]]
; CHECK-NEXT:    ret i1 [[COMMON_RET_OP]]
;
common.ret:
  %3 = xor i32 %0, -1
  %4 = icmp ule i32 %1, %3
  %5 = xor i32 %1, -1
  %6 = icmp ugt i32 %1, %5
  %common.ret.op = and i1 %6, %4
  ret i1 %common.ret.op
}

define i1 @test_no_change_te(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define i1 @test_no_change_te(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp slt i32 [[TMP1]], 0
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = and i1 [[TMP5]], [[TMP4]]
; CHECK-NEXT:    ret i1 [[COMMON_RET_OP]]
;
common.ret:
  %3 = xor i32 %0, -1
  %4 = icmp ult i32 %1, %3
  %5 = xor i32 %1, -1
  %6 = icmp uge i32 %1, %5
  %common.ret.op = and i1 %6, %4
  ret i1 %common.ret.op
}

define i1 @test_no_change_tt(i32 %0, i32 %1, i32 %2) {
; CHECK-LABEL: define i1 @test_no_change_tt(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP0]], -1
; CHECK-NEXT:    [[TMP4:%.*]] = icmp ult i32 [[TMP1]], [[TMP3]]
; CHECK-NEXT:    [[TMP5:%.*]] = icmp slt i32 [[TMP1]], 0
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = and i1 [[TMP5]], [[TMP4]]
; CHECK-NEXT:    ret i1 [[COMMON_RET_OP]]
;
common.ret:
  %3 = xor i32 %0, -1
  %4 = icmp ult i32 %1, %3
  %5 = xor i32 %1, -1
  %6 = icmp ugt i32 %1, %5
  %common.ret.op = and i1 %6, %4
  ret i1 %common.ret.op
}

define i1 @test_no_change_su(i32 %0, i32 %1) {
; CHECK-LABEL: define i1 @test_no_change_su(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[TMP1:%.*]]) {
; CHECK-NEXT:  [[COMMON_RET:.*:]]
; CHECK-NEXT:    [[TMP2:%.*]] = xor i32 [[TMP0]], -1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp sle i32 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = xor i32 [[TMP1]], -1
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ugt i32 [[TMP0]], [[TMP4]]
; CHECK-NEXT:    [[COMMON_RET_OP:%.*]] = and i1 [[TMP3]], [[TMP5]]
; CHECK-NEXT:    ret i1 [[COMMON_RET_OP]]
;
common.ret:
  %2 = xor i32 %0, -1
  %3 = icmp sle i32 %1, %2
  %4 = xor i32 %1, -1
  %5 = icmp ugt i32 %0, %4
  %common.ret.op = and i1 %3, %5
  ret i1 %common.ret.op
}
