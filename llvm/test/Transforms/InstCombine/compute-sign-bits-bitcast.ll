; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=instcombine -S < %s | FileCheck %s

define i32 @test_compute_sign_bits() {
; CHECK-LABEL: define i32 @test_compute_sign_bits() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    ret i32 -1
;
entry:
  %a = add i8 -1, 0
  %b = bitcast i8 %a to <4 x i2>
  %c = ashr <4 x i2> %b, <i2 1, i2 1, i2 1, i2 1>
  %d = bitcast <4 x i2> %c to i8
  %e = sext i8 %d to i32
  ret i32 %e
}

; Test with sign extension to ensure proper sign bit tracking
define <4 x i2> @test_sext_bitcast(<1 x i8> %a0, <1 x i8> %a1) {
; CHECK-LABEL: define <4 x i2> @test_sext_bitcast(
; CHECK-SAME: <1 x i8> [[A0:%.*]], <1 x i8> [[A1:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt <1 x i8> [[A0]], [[A1]]
; CHECK-NEXT:    [[EXT:%.*]] = sext <1 x i1> [[CMP]] to <1 x i8>
; CHECK-NEXT:    [[SUB:%.*]] = bitcast <1 x i8> [[EXT]] to <4 x i2>
; CHECK-NEXT:    ret <4 x i2> [[SUB]]
;
entry:
  %cmp = icmp sgt <1 x i8> %a0, %a1
  %ext = sext <1 x i1> %cmp to <1 x i8>
  %sub = bitcast <1 x i8> %ext to <4 x i2>
  %result = ashr <4 x i2> %sub, <i2 1, i2 1, i2 1, i2 1>
  ret <4 x i2> %result
}
