; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

declare void @use(i8)

define i8 @fold_urem_constants(i8 %v0) {
; CHECK-LABEL: @fold_urem_constants(
; CHECK-NEXT:    [[V2:%.*]] = urem i8 [[V0:%.*]], 5
; CHECK-NEXT:    ret i8 [[V2]]
;
  %v1 = urem i8 %v0, 25
  %v2 = urem i8 %v1, 5
  ret i8 %v2
}

define <2 x i8> @fold_urem_vec_splat(<2 x i8> %v0) {
; CHECK-LABEL: @fold_urem_vec_splat(
; CHECK-NEXT:    [[V2:%.*]] = urem <2 x i8> [[V0:%.*]], splat (i8 5)
; CHECK-NEXT:    ret <2 x i8> [[V2]]
;
  %v1 = urem <2 x i8> %v0, <i8 25, i8 25>
  %v2 = urem <2 x i8> %v1, <i8 5, i8 5>
  ret <2 x i8> %v2
}

define <2 x i8> @fold_urem_vec_splat_poison(<2 x i8> %v0) {
; CHECK-LABEL: @fold_urem_vec_splat_poison(
; CHECK-NEXT:    ret <2 x i8> poison
;
  %v1 = urem <2 x i8> %v0, <i8 25, i8 poison>
  %v2 = urem <2 x i8> %v1, <i8 5, i8 poison>
  ret <2 x i8> %v2
}

define i8 @fold_urem_constants_multi_use(i8 %v0) {
; CHECK-LABEL: @fold_urem_constants_multi_use(
; CHECK-NEXT:    [[V1:%.*]] = urem i8 [[V0:%.*]], 25
; CHECK-NEXT:    call void @use(i8 [[V1]])
; CHECK-NEXT:    [[V2:%.*]] = urem i8 [[V1]], 5
; CHECK-NEXT:    ret i8 [[V2]]
;
  %v1 = urem i8 %v0, 25
  call void @use(i8 %v1)
  %v2 = urem i8 %v1, 5
  ret i8 %v2
}

define <2 x i8> @fold_urem_vec_splat_negative_test(<2 x i8> %v0) {
; CHECK-LABEL: @fold_urem_vec_splat_negative_test(
; CHECK-NEXT:    [[V1:%.*]] = urem <2 x i8> [[V0:%.*]], splat (i8 26)
; CHECK-NEXT:    [[V2:%.*]] = urem <2 x i8> [[V1]], splat (i8 5)
; CHECK-NEXT:    ret <2 x i8> [[V2]]
;
  %v1 = urem <2 x i8> %v0, <i8 26, i8 26>
  %v2 = urem <2 x i8> %v1, <i8 5, i8 5>
  ret <2 x i8> %v2
}

define i8 @fold_urem_constants_negative_test(i8 %v0) {
; CHECK-LABEL: @fold_urem_constants_negative_test(
; CHECK-NEXT:    [[V1:%.*]] = urem i8 [[V0:%.*]], 25
; CHECK-NEXT:    [[V2:%.*]] = urem i8 [[V1]], 3
; CHECK-NEXT:    ret i8 [[V2]]
;
  %v1 = urem i8 %v0, 25
  %v2 = urem i8 %v1, 3 ; should not be folded because not known urem(25, 3) != 0
  ret i8 %v2
}

define i8 @fold_urem_variables_negative_test(i8 %v0, i8 %A, i8 %B) {
; CHECK-LABEL: @fold_urem_variables_negative_test(
; CHECK-NEXT:    [[V1:%.*]] = urem i8 [[V0:%.*]], [[A:%.*]]
; CHECK-NEXT:    [[V2:%.*]] = urem i8 [[V1]], [[B:%.*]]
; CHECK-NEXT:    ret i8 [[V2]]
;
  %v1 = urem i8 %v0, %A
  %v2 = urem i8 %v1, %B ; should not be folded because not known urem(%B, %A) == 0
  ret i8 %v2
}
