; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -p instcombine -S %s | FileCheck %s

target datalayout = "b:32-p:32:32-n64"

declare i32 @memcmp(ptr, ptr, i32)

; memcmp(lhs, rhs, 1) -> *(unsigned char *)lhs <=> *(unsigned char *)rhs
define i32 @test_size_1(ptr %lhs, ptr %rhs) {
; CHECK-LABEL: define i32 @test_size_1(
; CHECK-SAME: ptr [[LHS:%.*]], ptr [[RHS:%.*]]) {
; CHECK-NEXT:    [[MEMCMP_LHS0:%.*]] = load i32, ptr [[LHS]], align 1
; CHECK-NEXT:    [[MEMCMP_RHS0:%.*]] = load i32, ptr [[RHS]], align 1
; CHECK-NEXT:    [[MEMCMP_CHAR0CMP:%.*]] = call i32 @llvm.ucmp.i32.i32(i32 [[MEMCMP_LHS0]], i32 [[MEMCMP_RHS0]])
; CHECK-NEXT:    ret i32 [[MEMCMP_CHAR0CMP]]
;
  %call = call i32 @memcmp(ptr %lhs, ptr %rhs, i32 1)  ret i32 %call
}

; memcmp(lhs, rhs, 2) == 0 -> (*(uint64_t *)lhs != *(uint64_t *)rhs) == 0
define i1 @test_eq_size_2(ptr %lhs, ptr %rhs) {
; CHECK-LABEL: define i1 @test_eq_size_2(
; CHECK-SAME: ptr [[LHS:%.*]], ptr [[RHS:%.*]]) {
; CHECK-NEXT:    [[LHSV:%.*]] = load i64, ptr [[LHS]], align 1
; CHECK-NEXT:    [[RHSV:%.*]] = load i64, ptr [[RHS]], align 1
; CHECK-NEXT:    [[DOTNOT:%.*]] = icmp eq i64 [[LHSV]], [[RHSV]]
; CHECK-NEXT:    ret i1 [[DOTNOT]]
;
  %call = call i32 @memcmp(ptr %lhs, ptr %rhs, i32 2)
  %cmp = icmp eq i32 %call, 0
  ret i1 %cmp
}
