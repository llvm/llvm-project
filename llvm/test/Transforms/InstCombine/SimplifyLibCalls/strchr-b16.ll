; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -p instcombine -S %s | FileCheck %s

target datalayout = "b:16-p:32:32-n64"

declare ptr @strchr(ptr, i32)

@hello = constant [6 x i16] [i16 104, i16 101, i16 108, i16 108, i16 111, i16 0]

; strchr(str, c) == str -> (unsigned char)str[0] == (unsigned char)c
define i1 @test_1(ptr %str, i32 %c) {
; CHECK-LABEL: define i1 @test_1(
; CHECK-SAME: ptr [[STR:%.*]], i32 [[C:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = load i16, ptr [[STR]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = trunc i32 [[C]] to i16
; CHECK-NEXT:    [[CHAR0CMP:%.*]] = icmp eq i16 [[TMP1]], [[TMP2]]
; CHECK-NEXT:    ret i1 [[CHAR0CMP]]
;
  %call = call ptr @strchr(ptr %str, i32 %c)
  %cmp = icmp eq ptr %call, %str
  ret i1 %cmp
}

; strchr(str, c) -> memchr(str, c, strlen(str) + 1)
define ptr @test_2(i32 %c) {
; CHECK-LABEL: define ptr @test_2(
; CHECK-SAME: i32 [[C:%.*]]) {
; CHECK-NEXT:    [[STRCHR:%.*]] = call ptr @memchr(ptr noundef nonnull dereferenceable(1) @hello, i32 [[C]], i32 6)
; CHECK-NEXT:    ret ptr [[STRCHR]]
;
  %call = call ptr @strchr(ptr @hello, i32 %c)
  ret ptr %call
}

; strchr(str, '\0') -> len = strlen(str), str + len
define ptr @test_3(ptr %str) {
; CHECK-LABEL: define ptr @test_3(
; CHECK-SAME: ptr [[STR:%.*]]) {
; CHECK-NEXT:    [[STRLEN:%.*]] = call i32 @strlen(ptr noundef nonnull dereferenceable(1) [[STR]])
; CHECK-NEXT:    [[STRCHR:%.*]] = getelementptr inbounds i16, ptr [[STR]], i32 [[STRLEN]]
; CHECK-NEXT:    ret ptr [[STRCHR]]
;
  %call = call ptr @strchr(ptr %str, i32 0)
  ret ptr %call
}
