; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define float @log1pf_const() {
; CHECK-LABEL: define float @log1pf_const() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 7.000000e+00)
; CHECK-NEXT:    ret float 0x4000A2B240000000
;
  %r = call float @log1pf(float 7.000000e+00)
  ret float %r
}

define double @log1p_const() {
; CHECK-LABEL: define double @log1p_const() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 7.000000e+00)
; CHECK-NEXT:    ret double 0x4000A2B23F3BAB73
;
  %r = call double @log1p(double 7.000000e+00)
  ret double %r
}

define float @log1pf_minus_one() {
; CHECK-LABEL: define float @log1pf_minus_one() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float -1.000000e+00)
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float -1.000000e+00)
  ret float %r
}

define double @log1p_minus_one() {
; CHECK-LABEL: define double @log1p_minus_one() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double -1.000000e+00)
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double -1.000000e+00)
  ret double %r
}

define float @log1pf_minus_one_memory_none() {
; CHECK-LABEL: define float @log1pf_minus_one_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float -1.000000e+00) #[[ATTR0:[0-9]+]]
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float -1.000000e+00) readnone
  ret float %r
}

define double @log1p_minus_one_memory_none() {
; CHECK-LABEL: define double @log1p_minus_one_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double -1.000000e+00) #[[ATTR0]]
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double -1.000000e+00) readnone
  ret double %r
}

define float @log1pf_zero() {
; CHECK-LABEL: define float @log1pf_zero() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0.000000e+00)
; CHECK-NEXT:    ret float 0.000000e+00
;
  %r = call float @log1pf(float 0.000000e+00)
  ret float %r
}

define double @log1p_zero() {
; CHECK-LABEL: define double @log1p_zero() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0.000000e+00)
; CHECK-NEXT:    ret double 0.000000e+00
;
  %r = call double @log1p(double 0.000000e+00)
  ret double %r
}

define float @log1pf_neg_zero() {
; CHECK-LABEL: define float @log1pf_neg_zero() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float -0.000000e+00)
; CHECK-NEXT:    ret float -0.000000e+00
;
  %r = call float @log1pf(float -0.000000e+00)
  ret float %r
}

define double @log1p_neg_zero() {
; CHECK-LABEL: define double @log1p_neg_zero() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double -0.000000e+00)
; CHECK-NEXT:    ret double -0.000000e+00
;
  %r = call double @log1p(double -0.000000e+00)
  ret double %r
}

define float @log1pf_neg1() {
; CHECK-LABEL: define float @log1pf_neg1() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float -7.000000e+00)
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float -7.000000e+00)
  ret float %r
}

define double @log1p_neg1() {
; CHECK-LABEL: define double @log1p_neg1() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double -7.000000e+00)
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double -7.000000e+00)
  ret double %r
}

define float @log1pf_neg1_memory_none() {
; CHECK-LABEL: define float @log1pf_neg1_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float -7.000000e+00) #[[ATTR0]]
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float -7.000000e+00) readnone
  ret float %r
}

define double @log1p_neg1_memory_none() {
; CHECK-LABEL: define double @log1p_neg1_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double -7.000000e+00) #[[ATTR0]]
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double -7.000000e+00) readnone
  ret double %r
}

define float @log1pf_neg2() {
; CHECK-LABEL: define float @log1pf_neg2() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float -5.000000e-01)
; CHECK-NEXT:    ret float 0xBFE62E4300000000
;
  %r = call float @log1pf(float -5.000000e-01)
  ret float %r
}

define double @log1p_neg2() {
; CHECK-LABEL: define double @log1p_neg2() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double -5.000000e-01)
; CHECK-NEXT:    ret double 0xBFE62E42FEFA39EF
;
  %r = call double @log1p(double -5.000000e-01)
  ret double %r
}

define float @log1pf_inf() {
; CHECK-LABEL: define float @log1pf_inf() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0x7FF0000000000000)
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float 0x7FF0000000000000)
  ret float %r
}

define double @log1p_inf() {
; CHECK-LABEL: define double @log1p_inf() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0x7FF0000000000000)
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double 0x7FF0000000000000)
  ret double %r
}

define float @log1pf_inf_memory_none() {
; CHECK-LABEL: define float @log1pf_inf_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0x7FF0000000000000) #[[ATTR0]]
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float 0x7FF0000000000000) readnone
  ret float %r
}

define double @log1p_inf_memory_none() {
; CHECK-LABEL: define double @log1p_inf_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0x7FF0000000000000) #[[ATTR0]]
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double 0x7FF0000000000000) readnone
  ret double %r
}

define float @log1pf_neg_inf() {
; CHECK-LABEL: define float @log1pf_neg_inf() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0xFFF0000000000000)
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float 0xFFF0000000000000)
  ret float %r
}

define double @log1p_neg_inf() {
; CHECK-LABEL: define double @log1p_neg_inf() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0xFFF0000000000000)
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double 0xFFF0000000000000)
  ret double %r
}

define float @log1pf_neg_inf_memory_none() {
; CHECK-LABEL: define float @log1pf_neg_inf_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0xFFF0000000000000) #[[ATTR0]]
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float 0xFFF0000000000000) readnone
  ret float %r
}

define double @log1p_neg_inf_memory_none() {
; CHECK-LABEL: define double @log1p_neg_inf_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0xFFF0000000000000) #[[ATTR0]]
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double 0xFFF0000000000000) readnone
  ret double %r
}

define float @log1pf_nan() {
; CHECK-LABEL: define float @log1pf_nan() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0x7FF8000000000000)
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float 0x7FF8000000000000)
  ret float %r
}

define double @log1p_nan() {
; CHECK-LABEL: define double @log1p_nan() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0x7FF8000000000000)
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double 0x7FF8000000000000)
  ret double %r
}

define float @log1pf_nan_memory_none() {
; CHECK-LABEL: define float @log1pf_nan_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float 0x7FF8000000000000) #[[ATTR0]]
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float 0x7FF8000000000000) readnone
  ret float %r
}

define double @log1p_nan_memory_none() {
; CHECK-LABEL: define double @log1p_nan_memory_none() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double 0x7FF8000000000000) #[[ATTR0]]
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double 0x7FF8000000000000) readnone
  ret double %r
}

define float @log1pf_poison() {
; CHECK-LABEL: define float @log1pf_poison() {
; CHECK-NEXT:    [[R:%.*]] = call float @log1pf(float poison)
; CHECK-NEXT:    ret float [[R]]
;
  %r = call float @log1pf(float poison)
  ret float %r
}

define double @log1p_poison() {
; CHECK-LABEL: define double @log1p_poison() {
; CHECK-NEXT:    [[R:%.*]] = call double @log1p(double poison)
; CHECK-NEXT:    ret double [[R]]
;
  %r = call double @log1p(double poison)
  ret double %r
}

declare float @log1pf(float)
declare double @log1p(double)
