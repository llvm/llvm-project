; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instcombine -S | FileCheck %s
;
; Verify that the result of strchr calls used in equality expressions
; with either the first argument or null are optimally folded.

declare i8* @strchr(i8*, i32)


; Fold strchr(s, c) == s to *s == c.

define i1 @fold_strchr_s_c_eq_s(i8* %s, i32 %c) {
; CHECK-LABEL: @fold_strchr_s_c_eq_s(
; CHECK-NEXT:    [[P:%.*]] = call i8* @strchr(i8* noundef nonnull dereferenceable(1) [[S:%.*]], i32 [[C:%.*]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8* [[P]], [[S]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %p = call i8* @strchr(i8* %s, i32 %c)
  %cmp = icmp eq i8* %p, %s
  ret i1 %cmp
}


; Fold strchr(s, c) != s to *s != c.

define i1 @fold_strchr_s_c_neq_s(i8* %s, i32 %c) {
; CHECK-LABEL: @fold_strchr_s_c_neq_s(
; CHECK-NEXT:    [[P:%.*]] = call i8* @strchr(i8* noundef nonnull dereferenceable(1) [[S:%.*]], i32 [[C:%.*]])
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i8* [[P]], [[S]]
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %p = call i8* @strchr(i8* %s, i32 %c)
  %cmp = icmp ne i8* %p, %s
  ret i1 %cmp
}


; Fold strchr(s, '\0') == null to false.  (A string must be nul-terminated,
; otherwise the call would read past the end of the array.)

define i1 @fold_strchr_s_nul_eqz(i8* %s) {
; CHECK-LABEL: @fold_strchr_s_nul_eqz(
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8* [[S:%.*]], null
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %p = call i8* @strchr(i8* %s, i32 0)
  %cmp = icmp eq i8* %p, null
  ret i1 %cmp
}


; Fold strchr(s, '\0') != null to true.

define i1 @fold_strchr_s_nul_nez(i8* %s) {
; CHECK-LABEL: @fold_strchr_s_nul_nez(
; CHECK-NEXT:    [[CMP:%.*]] = icmp ne i8* [[S:%.*]], null
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %p = call i8* @strchr(i8* %s, i32 0)
  %cmp = icmp ne i8* %p, null
  ret i1 %cmp
}


@a5 = constant [5 x i8] c"12345";

; Fold strchr(a5, c) == a5 to *a5 == c.

define i1 @fold_strchr_a_c_eq_a(i32 %c) {
; CHECK-LABEL: @fold_strchr_a_c_eq_a(
; CHECK-NEXT:    [[MEMCHR:%.*]] = call i8* @memchr(i8* noundef nonnull dereferenceable(1) getelementptr inbounds ([5 x i8], [5 x i8]* @a5, i64 0, i64 0), i32 [[C:%.*]], i64 6)
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq i8* [[MEMCHR]], getelementptr inbounds ([5 x i8], [5 x i8]* @a5, i64 0, i64 0)
; CHECK-NEXT:    ret i1 [[CMP]]
;
  %p = getelementptr [5 x i8], [5 x i8]* @a5, i32 0, i32 0
  %q = call i8* @strchr(i8* %p, i32 %c)
  %cmp = icmp eq i8* %q, %p
  ret i1 %cmp
}
