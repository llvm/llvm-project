; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=instcombine -S | FileCheck %s

define i1 @addition_and_bitwise1(ptr %0) {
; CHECK-LABEL: define i1 @addition_and_bitwise1(
; CHECK-SAME: ptr [[TMP0:%.*]]) {
; CHECK-NEXT:    [[V0:%.*]] = getelementptr inbounds nuw i8, ptr [[TMP0]], i64 4
; CHECK-NEXT:    [[V1:%.*]] = load i32, ptr [[V0]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[V1]], 2
; CHECK-NEXT:    [[V6:%.*]] = icmp eq i32 [[TMP2]], 0
; CHECK-NEXT:    ret i1 [[V6]]
;
  %v0 = getelementptr inbounds nuw i8, ptr %0, i64 4
  %v1 = load i32, ptr %v0, align 4
  %v2 = zext i32 %v1 to i64
  %v3 = ptrtoint ptr %v0 to i64
  %v4 = add i64 %v2, %v3
  %v5 = and i64 %v4, 2
  %v6 = icmp eq i64 %v5, 0
  ret i1 %v6
}

define i1 @addition_and_bitwise2(ptr %0) {
; CHECK-LABEL: define i1 @addition_and_bitwise2(
; CHECK-SAME: ptr [[TMP0:%.*]]) {
; CHECK-NEXT:    [[V0:%.*]] = getelementptr inbounds nuw i8, ptr [[TMP0]], i64 4
; CHECK-NEXT:    [[V1:%.*]] = load i32, ptr [[V0]], align 16
; CHECK-NEXT:    [[TMP2:%.*]] = and i32 [[V1]], 4
; CHECK-NEXT:    [[V6:%.*]] = icmp eq i32 [[TMP2]], 0
; CHECK-NEXT:    ret i1 [[V6]]
;
  %v0 = getelementptr inbounds nuw i8, ptr %0, i64 4
  %v1 = load i32, ptr %v0, align 16
  %v2 = zext i32 %v1 to i64
  %v3 = ptrtoint ptr %v0 to i64
  %v4 = add i64 %v2, %v3
  %v5 = and i64 %v4, 4
  %v6 = icmp eq i64 %v5, 0
  ret i1 %v6
}
