; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --check-attributes --check-globals
; RUN: opt -aa-pipeline=basic-aa -passes=attributor -attributor-manifest-internal  -attributor-annotate-decl-cs  -S < %s | FileCheck %s --check-prefixes=CHECK,TUNIT
; RUN: opt -aa-pipeline=basic-aa -passes=attributor -attributor-manifest-internal  -attributor-annotate-decl-cs  -data-layout=z0:1-z2:neg1-z3:neg1-z5:neg1 -S < %s | FileCheck %s --check-prefixes=CHECK-DL,TUNIT-DL
; RUN: opt -aa-pipeline=basic-aa -passes=attributor-cgscc -attributor-manifest-internal  -attributor-annotate-decl-cs -S < %s | FileCheck %s --check-prefixes=CHECK,CGSCC
; RUN: opt -aa-pipeline=basic-aa -passes=attributor-cgscc -attributor-manifest-internal  -attributor-annotate-decl-cs  -data-layout=z0:1-z2:neg1-z3:neg1-z5:neg1 -S < %s | FileCheck %s --check-prefixes=CHECK-DL,CGSCC-DL

declare void @f(i32)
declare token @llvm.call.preallocated.setup(i32)
declare ptr @llvm.call.preallocated.arg(token, i32)

@str = private unnamed_addr addrspace(4) constant [1 x i8] c"\00", align 1
@ConstAS3Ptr = addrspace(3) global i32 0, align 4
@ConstPtr = constant i32 0, align 4
@ConstWeakPtr = weak constant i32 0, align 4
@ConstWeakODRPtr = weak_odr constant i32 0, align 4

; Do not touch complicated arguments (for now)
%struct.X = type { ptr }
;.
; CHECK: @str = private unnamed_addr addrspace(4) constant [1 x i8] zeroinitializer, align 1
; CHECK: @ConstAS3Ptr = addrspace(3) global i32 0, align 4
; CHECK: @ConstPtr = constant i32 0, align 4
; CHECK: @ConstWeakPtr = weak constant i32 0, align 4
; CHECK: @ConstWeakODRPtr = weak_odr constant i32 0, align 4
;.
; TUNIT-DL: @str = private unnamed_addr addrspace(4) constant [1 x i8] zeroinitializer, align 1
; TUNIT-DL: @ConstAS3Ptr = addrspace(3) global i32 0, align 4
; TUNIT-DL: @ConstPtr = constant i32 0, align 4
; TUNIT-DL: @ConstWeakPtr = weak constant i32 0, align 4
; TUNIT-DL: @ConstWeakODRPtr = weak_odr constant i32 0, align 4
;.
; CGSCC-DL: @str = private unnamed_addr addrspace(4) constant [1 x i8] zeroinitializer, align 1
; CGSCC-DL: @ConstAS3Ptr = addrspace(3) global i32 0, align 4
; CGSCC-DL: @ConstPtr = constant i32 0, align 4
; CGSCC-DL: @ConstWeakPtr = weak constant i32 0, align 4
; CGSCC-DL: @ConstWeakODRPtr = weak_odr constant i32 0, align 4
;.
define internal ptr @test_inalloca(ptr inalloca(i32) %a) {
; CGSCC-LABEL: define {{[^@]+}}@test_inalloca
; CGSCC-SAME: (ptr inalloca(i32) [[A:%.*]]) {
; CGSCC-NEXT:    ret ptr [[A]]
;
; CGSCC-DL-LABEL: define {{[^@]+}}@test_inalloca
; CGSCC-DL-SAME: (ptr inalloca(i32) [[A:%.*]]) {
; CGSCC-DL-NEXT:    ret ptr [[A]]
;
  ret ptr %a
}

define internal void @test_sret(ptr sret(%struct.X) %a, ptr %b) {
; CHECK: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
; CHECK-LABEL: define {{[^@]+}}@test_sret
; CHECK-SAME: (ptr noalias nofree noundef writeonly sret([[STRUCT_X:%.*]]) align 4294967296 dereferenceable_or_null(8) [[A:%.*]], ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:    store ptr [[A]], ptr [[B]], align 8
; CHECK-NEXT:    ret void
;
; CGSCC-DL: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
; CGSCC-DL-LABEL: define {{[^@]+}}@test_sret
; CGSCC-DL-SAME: (ptr noalias nofree noundef nonnull writeonly sret([[STRUCT_X:%.*]]) align 4294967296 dereferenceable(8) [[A:%.*]], ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR1:[0-9]+]] {
; CGSCC-DL-NEXT:    store ptr [[A]], ptr [[B]], align 8
; CGSCC-DL-NEXT:    ret void
;
  store ptr %a, ptr %b
  ret void
}
; FIXME: Alignment and dereferenceability are not propagated to the argument
define void @complicated_args_sret(ptr %b) {
; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
; TUNIT-LABEL: define {{[^@]+}}@complicated_args_sret
; TUNIT-SAME: (ptr nocapture nofree writeonly [[B:%.*]]) #[[ATTR1]] {
; TUNIT-NEXT:    call void @test_sret(ptr nofree noundef writeonly sret([[STRUCT_X:%.*]]) align 4294967296 null, ptr nocapture nofree noundef writeonly align 8 [[B]]) #[[ATTR3:[0-9]+]]
; TUNIT-NEXT:    ret void
;
; TUNIT-DL: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write)
; TUNIT-DL-LABEL: define {{[^@]+}}@complicated_args_sret
; TUNIT-DL-SAME: (ptr nocapture nofree nonnull writeonly [[B:%.*]]) #[[ATTR1:[0-9]+]] {
; TUNIT-DL-NEXT:    unreachable
;
; CGSCC: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: write)
; CGSCC-LABEL: define {{[^@]+}}@complicated_args_sret
; CGSCC-SAME: (ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR2:[0-9]+]] {
; CGSCC-NEXT:    call void @test_sret(ptr nofree noundef writeonly sret([[STRUCT_X:%.*]]) align 4294967296 dereferenceable_or_null(8) null, ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[B]]) #[[ATTR5:[0-9]+]]
; CGSCC-NEXT:    ret void
;
; CGSCC-DL: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(argmem: write)
; CGSCC-DL-LABEL: define {{[^@]+}}@complicated_args_sret
; CGSCC-DL-SAME: (ptr nocapture nofree noundef nonnull writeonly align 8 dereferenceable(8) [[B:%.*]]) #[[ATTR2:[0-9]+]] {
; CGSCC-DL-NEXT:    unreachable
;
  call void @test_sret(ptr sret(%struct.X) null, ptr %b)
  ret void
}

define internal ptr @test_nest(ptr nest %a) {
; CGSCC: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; CGSCC-LABEL: define {{[^@]+}}@test_nest
; CGSCC-SAME: (ptr nest noalias nocapture nofree readnone align 4294967296 [[A:%.*]]) #[[ATTR3:[0-9]+]] {
; CGSCC-NEXT:    ret ptr null
;
; CGSCC-DL: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; CGSCC-DL-LABEL: define {{[^@]+}}@test_nest
; CGSCC-DL-SAME: (ptr nest noalias nocapture nofree nonnull readnone align 4294967296 [[A:%.*]]) #[[ATTR3:[0-9]+]] {
; CGSCC-DL-NEXT:    unreachable
;
  ret ptr %a
}
define ptr @complicated_args_nest() {
; TUNIT: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; TUNIT-LABEL: define {{[^@]+}}@complicated_args_nest
; TUNIT-SAME: () #[[ATTR2:[0-9]+]] {
; TUNIT-NEXT:    ret ptr null
;
; TUNIT-DL: Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(none)
; TUNIT-DL-LABEL: define {{[^@]+}}@complicated_args_nest
; TUNIT-DL-SAME: () #[[ATTR2:[0-9]+]] {
; TUNIT-DL-NEXT:    unreachable
;
; CGSCC: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
; CGSCC-LABEL: define {{[^@]+}}@complicated_args_nest
; CGSCC-SAME: () #[[ATTR4:[0-9]+]] {
; CGSCC-NEXT:    [[CALL:%.*]] = call noalias noundef align 4294967296 ptr @test_nest(ptr nofree noundef readnone align 4294967296 null) #[[ATTR6:[0-9]+]]
; CGSCC-NEXT:    ret ptr [[CALL]]
;
; CGSCC-DL: Function Attrs: mustprogress nofree nosync nounwind willreturn memory(none)
; CGSCC-DL-LABEL: define {{[^@]+}}@complicated_args_nest
; CGSCC-DL-SAME: () #[[ATTR4:[0-9]+]] {
; CGSCC-DL-NEXT:    unreachable
;
  %call = call ptr @test_nest(ptr null)
  ret ptr %call
}

;.
; TUNIT: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind willreturn }
; TUNIT: attributes #[[ATTR1]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
; TUNIT: attributes #[[ATTR2]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
; TUNIT: attributes #[[ATTR3]] = { nofree nosync nounwind willreturn memory(write) }
;.
; TUNIT-DL: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind willreturn }
; TUNIT-DL: attributes #[[ATTR1]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
; TUNIT-DL: attributes #[[ATTR2]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
;.
; CGSCC: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind willreturn }
; CGSCC: attributes #[[ATTR1]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
; CGSCC: attributes #[[ATTR2]] = { mustprogress nofree nosync nounwind willreturn memory(argmem: write) }
; CGSCC: attributes #[[ATTR3]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
; CGSCC: attributes #[[ATTR4]] = { mustprogress nofree nosync nounwind willreturn memory(none) }
; CGSCC: attributes #[[ATTR5]] = { nofree nounwind willreturn memory(write) }
; CGSCC: attributes #[[ATTR6]] = { nofree nosync willreturn }
;.
; CGSCC-DL: attributes #[[ATTR0:[0-9]+]] = { nocallback nofree nosync nounwind willreturn }
; CGSCC-DL: attributes #[[ATTR1]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(argmem: write) }
; CGSCC-DL: attributes #[[ATTR2]] = { mustprogress nofree nosync nounwind willreturn memory(argmem: write) }
; CGSCC-DL: attributes #[[ATTR3]] = { mustprogress nofree norecurse nosync nounwind willreturn memory(none) }
; CGSCC-DL: attributes #[[ATTR4]] = { mustprogress nofree nosync nounwind willreturn memory(none) }
;.
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK-DL: {{.*}}
