; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature --check-attributes --check-globals
; RUN: opt -aa-pipeline=basic-aa -passes=attributor -attributor-manifest-internal  -attributor-max-iterations-verify -attributor-annotate-decl-cs -attributor-max-iterations=2 -S < %s | FileCheck %s --check-prefixes=CHECK,TUNIT
; RUN: opt -aa-pipeline=basic-aa -passes=attributor-cgscc -attributor-manifest-internal  -attributor-annotate-decl-cs -S < %s | FileCheck %s --check-prefixes=CHECK,CGSCC
;
; FIXME: The GEP + BC + GEP solution we create is not great but correct.

declare void @use(ptr nocapture readonly %arg)

define void @caller() {
; TUNIT-LABEL: define {{[^@]+}}@caller() {
; TUNIT-NEXT:  entry:
; TUNIT-NEXT:    [[LEFT:%.*]] = alloca [3 x i32], align 4
; TUNIT-NEXT:    [[TMP1:%.*]] = load i32, ptr [[LEFT]], align 4
; TUNIT-NEXT:    [[DOT0_1:%.*]] = getelementptr [3 x i32], ptr [[LEFT]], i64 0, i64 1
; TUNIT-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOT0_1]], align 4
; TUNIT-NEXT:    [[DOT0_2:%.*]] = getelementptr [3 x i32], ptr [[LEFT]], i64 0, i64 2
; TUNIT-NEXT:    [[TMP3:%.*]] = load i32, ptr [[DOT0_2]], align 4
; TUNIT-NEXT:    call void @callee(i32 [[TMP1]], i32 [[TMP2]], i32 [[TMP3]])
; TUNIT-NEXT:    ret void
;
; CGSCC-LABEL: define {{[^@]+}}@caller() {
; CGSCC-NEXT:  entry:
; CGSCC-NEXT:    call void @callee(i32 undef, i32 undef, i32 undef)
; CGSCC-NEXT:    ret void
;
entry:
  %left = alloca [3 x i32], align 4
  call void @callee(ptr %left)
  ret void
}

define internal void @callee(ptr noalias %arg) {
; CHECK-LABEL: define {{[^@]+}}@callee
; CHECK-SAME: (i32 [[TMP0:%.*]], i32 [[TMP1:%.*]], i32 [[TMP2:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARG_PRIV:%.*]] = alloca [3 x i32], align 4
; CHECK-NEXT:    store i32 [[TMP0]], ptr [[ARG_PRIV]], align 4
; CHECK-NEXT:    [[ARG_PRIV_0_1:%.*]] = getelementptr [3 x i32], ptr [[ARG_PRIV]], i64 0, i64 1
; CHECK-NEXT:    store i32 [[TMP1]], ptr [[ARG_PRIV_0_1]], align 4
; CHECK-NEXT:    [[ARG_PRIV_0_2:%.*]] = getelementptr [3 x i32], ptr [[ARG_PRIV]], i64 0, i64 2
; CHECK-NEXT:    store i32 [[TMP2]], ptr [[ARG_PRIV_0_2]], align 4
; CHECK-NEXT:    call void @use(ptr noalias nocapture noundef nonnull readonly align 4 dereferenceable(12) [[ARG_PRIV]])
; CHECK-NEXT:    ret void
;
entry:
  call void @use(ptr %arg)
  ret void
}
