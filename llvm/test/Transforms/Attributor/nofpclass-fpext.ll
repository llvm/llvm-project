; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -aa-pipeline=basic-aa -passes=attributor -attributor-manifest-internal -S < %s | FileCheck %s --check-prefixes=CHECK,TUNIT

define double @ret_fpext_f32_to_f64(float %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64
; CHECK-SAME: (float [[ARG0:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define <2 x double> @ret_fpext_v2f32_to_v2f64(<2 x float> %arg0) {
; CHECK-LABEL: define <2 x double> @ret_fpext_v2f32_to_v2f64
; CHECK-SAME: (<2 x float> [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext <2 x float> [[ARG0]] to <2 x double>
; CHECK-NEXT:    ret <2 x double> [[EXT]]
;
  %ext = fpext <2 x float> %arg0 to <2 x double>
  ret <2 x double> %ext
}

define double @ret_fpext_f32_to_f64_nonan(float nofpclass(nan) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nonan
; CHECK-SAME: (float nofpclass(nan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define <2 x double> @ret_fpext_v2f32_to_v2f64_nonan(<2 x float> nofpclass(nan) %arg0) {
; CHECK-LABEL: define <2 x double> @ret_fpext_v2f32_to_v2f64_nonan
; CHECK-SAME: (<2 x float> nofpclass(nan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext <2 x float> [[ARG0]] to <2 x double>
; CHECK-NEXT:    ret <2 x double> [[EXT]]
;
  %ext = fpext <2 x float> %arg0 to <2 x double>
  ret <2 x double> %ext
}

define double @ret_fpext_f32_to_f64_noqnan(float nofpclass(qnan) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_noqnan
; CHECK-SAME: (float nofpclass(qnan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nosnan(float nofpclass(snan) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nosnan
; CHECK-SAME: (float nofpclass(snan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_noinf(float nofpclass(inf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_noinf
; CHECK-SAME: (float nofpclass(inf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nopinf(float nofpclass(pinf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nopinf
; CHECK-SAME: (float nofpclass(pinf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_noninf(float nofpclass(ninf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_noninf
; CHECK-SAME: (float nofpclass(ninf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nozero(float nofpclass(zero) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nozero
; CHECK-SAME: (float nofpclass(zero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nopzero(float nofpclass(pzero) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nopzero
; CHECK-SAME: (float nofpclass(pzero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nonzero(float nofpclass(nzero) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nonzero
; CHECK-SAME: (float nofpclass(nzero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nonan_noinf(float nofpclass(nan inf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nonan_noinf
; CHECK-SAME: (float nofpclass(nan inf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nosub(float nofpclass(sub) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nosub
; CHECK-SAME: (float nofpclass(sub) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define double @ret_fpext_f32_to_f64_nonorm(float nofpclass(norm) %arg0) {
; CHECK-LABEL: define double @ret_fpext_f32_to_f64_nonorm
; CHECK-SAME: (float nofpclass(norm) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext float [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext float %arg0 to double
  ret double %ext
}

define float @ret_fpext_bf16_f32(bfloat %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32
; CHECK-SAME: (bfloat [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define <2 x float> @ret_fpext_v2bf16_v2f32(<2 x bfloat> %arg0) {
; CHECK-LABEL: define <2 x float> @ret_fpext_v2bf16_v2f32
; CHECK-SAME: (<2 x bfloat> [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext <2 x bfloat> [[ARG0]] to <2 x float>
; CHECK-NEXT:    ret <2 x float> [[EXT]]
;
  %ext = fpext <2 x bfloat> %arg0 to <2 x float>
  ret <2 x float> %ext
}

define float @ret_fpext_bf16_f32_nonan(bfloat nofpclass(nan) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nonan
; CHECK-SAME: (bfloat nofpclass(nan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define <2 x float> @ret_fpext_v2bf16_v2f32_nonan(<2 x bfloat> nofpclass(nan) %arg0) {
; CHECK-LABEL: define <2 x float> @ret_fpext_v2bf16_v2f32_nonan
; CHECK-SAME: (<2 x bfloat> nofpclass(nan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext <2 x bfloat> [[ARG0]] to <2 x float>
; CHECK-NEXT:    ret <2 x float> [[EXT]]
;
  %ext = fpext <2 x bfloat> %arg0 to <2 x float>
  ret <2 x float> %ext
}

define float @ret_fpext_bf16_f32_noqnan(bfloat nofpclass(qnan) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_noqnan
; CHECK-SAME: (bfloat nofpclass(qnan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nosnan(bfloat nofpclass(snan) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nosnan
; CHECK-SAME: (bfloat nofpclass(snan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_noinf(bfloat nofpclass(inf) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_noinf
; CHECK-SAME: (bfloat nofpclass(inf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nopinf(bfloat nofpclass(pinf) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nopinf
; CHECK-SAME: (bfloat nofpclass(pinf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_noninf(bfloat nofpclass(ninf) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_noninf
; CHECK-SAME: (bfloat nofpclass(ninf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nozero(bfloat nofpclass(zero) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nozero
; CHECK-SAME: (bfloat nofpclass(zero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nopzero(bfloat nofpclass(pzero) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nopzero
; CHECK-SAME: (bfloat nofpclass(pzero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nonzero(bfloat nofpclass(nzero) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nonzero
; CHECK-SAME: (bfloat nofpclass(nzero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nonan_noinf(bfloat nofpclass(nan inf) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nonan_noinf
; CHECK-SAME: (bfloat nofpclass(nan inf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nosub(bfloat nofpclass(sub) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nosub
; CHECK-SAME: (bfloat nofpclass(sub) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define float @ret_fpext_bf16_f32_nonorm(bfloat nofpclass(norm) %arg0) {
; CHECK-LABEL: define float @ret_fpext_bf16_f32_nonorm
; CHECK-SAME: (bfloat nofpclass(norm) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to float
; CHECK-NEXT:    ret float [[EXT]]
;
  %ext = fpext bfloat %arg0 to float
  ret float %ext
}

define double @ret_fpext_bf16_f64(bfloat %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64
; CHECK-SAME: (bfloat [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nonan(bfloat nofpclass(nan) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nonan
; CHECK-SAME: (bfloat nofpclass(nan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_noqnan(bfloat nofpclass(qnan) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_noqnan
; CHECK-SAME: (bfloat nofpclass(qnan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nosnan(bfloat nofpclass(snan) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nosnan
; CHECK-SAME: (bfloat nofpclass(snan) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_noinf(bfloat nofpclass(inf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_noinf
; CHECK-SAME: (bfloat nofpclass(inf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nopinf(bfloat nofpclass(pinf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nopinf
; CHECK-SAME: (bfloat nofpclass(pinf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_noninf(bfloat nofpclass(ninf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_noninf
; CHECK-SAME: (bfloat nofpclass(ninf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nozero(bfloat nofpclass(zero) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nozero
; CHECK-SAME: (bfloat nofpclass(zero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nopzero(bfloat nofpclass(pzero) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nopzero
; CHECK-SAME: (bfloat nofpclass(pzero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nonzero(bfloat nofpclass(nzero) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nonzero
; CHECK-SAME: (bfloat nofpclass(nzero) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nonan_noinf(bfloat nofpclass(nan inf) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nonan_noinf
; CHECK-SAME: (bfloat nofpclass(nan inf) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nosub(bfloat nofpclass(sub) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nosub
; CHECK-SAME: (bfloat nofpclass(sub) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}

define double @ret_fpext_bf16_f64_nonorm(bfloat nofpclass(norm) %arg0) {
; CHECK-LABEL: define double @ret_fpext_bf16_f64_nonorm
; CHECK-SAME: (bfloat nofpclass(norm) [[ARG0:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[EXT:%.*]] = fpext bfloat [[ARG0]] to double
; CHECK-NEXT:    ret double [[EXT]]
;
  %ext = fpext bfloat %arg0 to double
  ret double %ext
}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; TUNIT: {{.*}}
