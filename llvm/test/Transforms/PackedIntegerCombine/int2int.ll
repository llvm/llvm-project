; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=packed-integer-combine %s | FileCheck %s --check-prefix=LAZY
; RUN: opt -S -passes="packed-integer-combine<aggressive>" %s | FileCheck %s --check-prefix=AGGRESSIVE

define i16 @top_bytes(i32 %a, i32 %b) {
; LAZY-LABEL: define i16 @top_bytes(
; LAZY-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; LAZY-NEXT:    [[A_MASK:%.*]] = and i32 [[A]], -16777216
; LAZY-NEXT:    [[A_LSHR:%.*]] = lshr i32 [[A_MASK]], 16
; LAZY-NEXT:    [[B_MASK:%.*]] = and i32 [[B]], -16777216
; LAZY-NEXT:    [[B_LSHR:%.*]] = lshr i32 [[B_MASK]], 24
; LAZY-NEXT:    [[RES:%.*]] = or i32 [[A_LSHR]], [[B_LSHR]]
; LAZY-NEXT:    [[TRUNC:%.*]] = trunc i32 [[RES]] to i16
; LAZY-NEXT:    ret i16 [[TRUNC]]
;
; AGGRESSIVE-LABEL: define i16 @top_bytes(
; AGGRESSIVE-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; AGGRESSIVE-NEXT:    [[B_SHIFT:%.*]] = lshr i32 [[B]], 24
; AGGRESSIVE-NEXT:    [[B_SHIFT_CAST:%.*]] = trunc i32 [[B_SHIFT]] to i16
; AGGRESSIVE-NEXT:    [[A_SHIFT:%.*]] = lshr i32 [[A]], 16
; AGGRESSIVE-NEXT:    [[A_SHIFT_CAST:%.*]] = trunc i32 [[A_SHIFT]] to i16
; AGGRESSIVE-NEXT:    [[A_MASK2:%.*]] = and i16 [[A_SHIFT_CAST]], -256
; AGGRESSIVE-NEXT:    [[TRUNC_MERGE:%.*]] = or disjoint i16 [[B_SHIFT_CAST]], [[A_MASK2]]
; AGGRESSIVE-NEXT:    ret i16 [[TRUNC_MERGE]]
;
  %a.mask = and i32 %a, u0xff000000
  %a.lshr = lshr i32 %a.mask, 16
  %b.mask = and i32 %b, u0xff000000
  %b.lshr = lshr i32 %b.mask, 24
  %res = or i32 %a.lshr, %b.lshr
  %trunc = trunc i32 %res to i16
  ret i16 %trunc
}

define i32 @bottom_bytes(i16 %a, i16 %b) {
; LAZY-LABEL: define i32 @bottom_bytes(
; LAZY-SAME: i16 [[A:%.*]], i16 [[B:%.*]]) {
; LAZY-NEXT:    [[A_MASK:%.*]] = and i16 [[A]], 255
; LAZY-NEXT:    [[A_SHL:%.*]] = shl i16 [[A_MASK]], 8
; LAZY-NEXT:    [[B_MASK:%.*]] = and i16 [[B]], 255
; LAZY-NEXT:    [[RES:%.*]] = or i16 [[A_SHL]], [[B_MASK]]
; LAZY-NEXT:    [[ZEXT:%.*]] = zext i16 [[RES]] to i32
; LAZY-NEXT:    [[SHL:%.*]] = shl i32 [[ZEXT]], 16
; LAZY-NEXT:    ret i32 [[SHL]]
;
; AGGRESSIVE-LABEL: define i32 @bottom_bytes(
; AGGRESSIVE-SAME: i16 [[A:%.*]], i16 [[B:%.*]]) {
; AGGRESSIVE-NEXT:    [[A_CAST:%.*]] = zext i16 [[A]] to i32
; AGGRESSIVE-NEXT:    [[B_MASK2:%.*]] = and i16 [[B]], 255
; AGGRESSIVE-NEXT:    [[B_MASK_CAST:%.*]] = zext i16 [[B_MASK2]] to i32
; AGGRESSIVE-NEXT:    [[B_SHIFT:%.*]] = shl i32 [[B_MASK_CAST]], 16
; AGGRESSIVE-NEXT:    [[A_SHIFT:%.*]] = shl i32 [[A_CAST]], 24
; AGGRESSIVE-NEXT:    [[SHL_MERGE:%.*]] = or disjoint i32 [[B_SHIFT]], [[A_SHIFT]]
; AGGRESSIVE-NEXT:    ret i32 [[SHL_MERGE]]
;
  %a.mask = and i16 %a, u0x00ff
  %a.shl = shl i16 %a.mask, 8
  %b.mask = and i16 %b, u0x00ff
  %res = or i16 %a.shl, %b.mask
  %zext = zext i16 %res to i32
  %shl = shl i32 %zext, 16
  ret i32 %shl
}

define i32 @obtain_i32(i32 %from) {
; LAZY-LABEL: define i32 @obtain_i32(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    ret i32 [[FROM]]
;
; AGGRESSIVE-LABEL: define i32 @obtain_i32(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    ret i32 [[FROM]]
;
  %get.0 = and i32 %from, 255
  %shr.1 = lshr i32 %from, 8
  %mask.1 = and i32 %shr.1, 255
  %get.1 = shl i32 %mask.1, 8
  %out.1 = or i32 %get.0, %get.1

  %shr.2 = lshr i32 %from, 16
  %mask.2 = and i32 %shr.2, 255
  %get.2 = shl i32 %mask.2, 16
  %shr.3 = lshr i32 %from, 24
  %mask.3 = and i32 %shr.3, 255
  %get.3 = shl i32 %mask.3, 24
  %out.2 = or i32 %get.2, %get.3

  %out = or i32 %out.1, %out.2
  ret i32 %out
}

;; u0xff00ffff = -16711681
define i32 @obtain_i32_masked(i32 %from) {
; LAZY-LABEL: define i32 @obtain_i32_masked(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_MASK:%.*]] = and i32 [[FROM]], -16711681
; LAZY-NEXT:    ret i32 [[FROM_MASK]]
;
; AGGRESSIVE-LABEL: define i32 @obtain_i32_masked(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_MASK:%.*]] = and i32 [[FROM]], -16711681
; AGGRESSIVE-NEXT:    ret i32 [[FROM_MASK]]
;
  %get.0 = and i32 %from, 255
  %shr.1 = lshr i32 %from, 8
  %mask.1 = and i32 %shr.1, 255
  %get.1 = shl i32 %mask.1, 8
  %out.1 = or i32 %get.0, %get.1

  %shr.3 = lshr i32 %from, 24
  %mask.3 = and i32 %shr.3, 255
  %get.3 = shl i32 %mask.3, 24
  %out.2 = or i32 %out.1, %get.3

  ret i32 %out.2
}

define i64 @obtain_i64(i64 %from) {
; LAZY-LABEL: define i64 @obtain_i64(
; LAZY-SAME: i64 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_MASK:%.*]] = and i64 [[FROM]], 4294967295
; LAZY-NEXT:    ret i64 [[FROM_MASK]]
;
; AGGRESSIVE-LABEL: define i64 @obtain_i64(
; AGGRESSIVE-SAME: i64 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_MASK:%.*]] = and i64 [[FROM]], 4294967295
; AGGRESSIVE-NEXT:    ret i64 [[FROM_MASK]]
;
  %mask.0 = and i64 %from, 255
  %get.0 = shl i64 %mask.0, 0
  %shr.1 = lshr i64 %from, 8
  %mask.1 = and i64 %shr.1, 255
  %get.1 = shl i64 %mask.1, 8
  %out.1 = or i64 %get.0, %get.1

  %shr.2 = lshr i64 %from, 16
  %mask.2 = and i64 %shr.2, 255
  %get.2 = shl i64 %mask.2, 16
  %shr.3 = lshr i64 %from, 24
  %mask.3 = and i64 %shr.3, 255
  %get.3 = shl i64 %mask.3, 24
  %out.2 = or i64 %get.2, %get.3

  %out = or i64 %out.1, %out.2
  ret i64 %out
}

define i64 @obtain_i64_shifted(i64 %from) {
; LAZY-LABEL: define i64 @obtain_i64_shifted(
; LAZY-SAME: i64 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_SHIFT:%.*]] = shl i64 [[FROM]], 32
; LAZY-NEXT:    ret i64 [[FROM_SHIFT]]
;
; AGGRESSIVE-LABEL: define i64 @obtain_i64_shifted(
; AGGRESSIVE-SAME: i64 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_SHIFT:%.*]] = shl i64 [[FROM]], 32
; AGGRESSIVE-NEXT:    ret i64 [[FROM_SHIFT]]
;
  %mask.0 = and i64 %from, 255
  %get.0 = shl i64 %mask.0, 32
  %shr.1 = lshr i64 %from, 8
  %mask.1 = and i64 %shr.1, 255
  %get.1 = shl i64 %mask.1, 40
  %out.1 = or i64 %get.0, %get.1

  %shr.2 = lshr i64 %from, 16
  %mask.2 = and i64 %shr.2, 255
  %get.2 = shl i64 %mask.2, 48
  %shr.3 = lshr i64 %from, 24
  %mask.3 = and i64 %shr.3, 255
  %get.3 = shl i64 %mask.3, 56
  %out.2 = or i64 %get.2, %get.3

  %out = or i64 %out.1, %out.2
  ret i64 %out
}

define i64 @obtain_i64_zext(i32 %from) {
; LAZY-LABEL: define i64 @obtain_i64_zext(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = zext i32 [[FROM]] to i64
; LAZY-NEXT:    [[FROM_SHIFT:%.*]] = shl i64 [[FROM_CAST]], 32
; LAZY-NEXT:    ret i64 [[FROM_SHIFT]]
;
; AGGRESSIVE-LABEL: define i64 @obtain_i64_zext(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = zext i32 [[FROM]] to i64
; AGGRESSIVE-NEXT:    [[FROM_SHIFT:%.*]] = shl i64 [[FROM_CAST]], 32
; AGGRESSIVE-NEXT:    ret i64 [[FROM_SHIFT]]
;
  %mask.0 = and i32 %from, 255
  %zext.0 = zext i32 %mask.0 to i64
  %get.0 = shl i64 %zext.0, 32
  %shr.1 = lshr i32 %from, 8
  %mask.1 = and i32 %shr.1, 255
  %zext.1 = zext i32 %mask.1 to i64
  %get.1 = shl i64 %zext.1, 40
  %out.1 = or i64 %get.0, %get.1

  %shr.2 = lshr i32 %from, 16
  %mask.2 = and i32 %shr.2, 255
  %zext.2 = zext i32 %mask.2 to i64
  %get.2 = shl i64 %zext.2, 48
  %shr.3 = lshr i32 %from, 24
  %mask.3 = and i32 %shr.3, 255
  %zext.3 = zext i32 %mask.3 to i64
  %get.3 = shl i64 %zext.3, 56
  %out.2 = or i64 %get.2, %get.3

  %out = or i64 %out.1, %out.2
  ret i64 %out
}

define i64 @combine(i32 %bot, i32 %top) {
; LAZY-LABEL: define i64 @combine(
; LAZY-SAME: i32 [[BOT:%.*]], i32 [[TOP:%.*]]) {
; LAZY-NEXT:    [[TOP_CAST:%.*]] = zext i32 [[TOP]] to i64
; LAZY-NEXT:    [[BOT_CAST:%.*]] = zext i32 [[BOT]] to i64
; LAZY-NEXT:    [[TOP_SHIFT:%.*]] = shl i64 [[TOP_CAST]], 32
; LAZY-NEXT:    [[OUT_3_MERGE:%.*]] = or disjoint i64 [[BOT_CAST]], [[TOP_SHIFT]]
; LAZY-NEXT:    ret i64 [[OUT_3_MERGE]]
;
; AGGRESSIVE-LABEL: define i64 @combine(
; AGGRESSIVE-SAME: i32 [[BOT:%.*]], i32 [[TOP:%.*]]) {
; AGGRESSIVE-NEXT:    [[TOP_CAST:%.*]] = zext i32 [[TOP]] to i64
; AGGRESSIVE-NEXT:    [[BOT_CAST:%.*]] = zext i32 [[BOT]] to i64
; AGGRESSIVE-NEXT:    [[TOP_SHIFT:%.*]] = shl i64 [[TOP_CAST]], 32
; AGGRESSIVE-NEXT:    [[OUT_3_MERGE:%.*]] = or disjoint i64 [[BOT_CAST]], [[TOP_SHIFT]]
; AGGRESSIVE-NEXT:    ret i64 [[OUT_3_MERGE]]
;
  %base = zext i32 %bot to i64

  %mask.0 = and i32 %top, 255
  %zext.0 = zext i32 %mask.0 to i64
  %get.0 = shl i64 %zext.0, 32
  %out.0 = or i64 %base, %get.0

  %shr.1 = lshr i32 %top, 8
  %mask.1 = and i32 %shr.1, 255
  %zext.1 = zext i32 %mask.1 to i64
  %get.1 = shl i64 %zext.1, 40
  %out.1 = or i64 %out.0, %get.1

  %shr.2 = lshr i32 %top, 16
  %mask.2 = and i32 %shr.2, 255
  %zext.2 = zext i32 %mask.2 to i64
  %get.2 = shl i64 %zext.2, 48
  %out.2 = or i64 %out.1, %get.2

  %shr.3 = lshr i32 %top, 24
  %mask.3 = and i32 %shr.3, 255
  %zext.3 = zext i32 %mask.3 to i64
  %get.3 = shl i64 %zext.3, 56
  %out.3 = or i64 %out.2, %get.3

  ret i64 %out.3
}

;; u0x0000ff00 = 65280
;; u0x00ff0000 = 16711680
;; u0xff000000 = -16777216
;; u0xff0000ff = -16776961
define i32 @shuffle_elts(i32 %x) {
; LAZY-LABEL: define i32 @shuffle_elts(
; LAZY-SAME: i32 [[X:%.*]]) {
; LAZY-NEXT:    [[X_0:%.*]] = and i32 [[X]], 255
; LAZY-NEXT:    [[X_1:%.*]] = and i32 [[X]], 65280
; LAZY-NEXT:    [[X_2:%.*]] = and i32 [[X]], 16711680
; LAZY-NEXT:    [[X_3:%.*]] = and i32 [[X]], -16777216
; LAZY-NEXT:    [[SHL_1:%.*]] = shl i32 [[X_1]], 8
; LAZY-NEXT:    [[OUT_1:%.*]] = or i32 [[X_0]], [[SHL_1]]
; LAZY-NEXT:    [[SHR_2:%.*]] = lshr i32 [[X_2]], 8
; LAZY-NEXT:    [[OUT_2:%.*]] = or i32 [[SHR_2]], [[X_3]]
; LAZY-NEXT:    [[OUT:%.*]] = or i32 [[OUT_1]], [[OUT_2]]
; LAZY-NEXT:    ret i32 [[OUT]]
;
; AGGRESSIVE-LABEL: define i32 @shuffle_elts(
; AGGRESSIVE-SAME: i32 [[X:%.*]]) {
; AGGRESSIVE-NEXT:    [[X_MASK:%.*]] = and i32 [[X]], -16776961
; AGGRESSIVE-NEXT:    [[X_SHIFT:%.*]] = lshr i32 [[X]], 8
; AGGRESSIVE-NEXT:    [[X_MASK2:%.*]] = and i32 [[X_SHIFT]], 65280
; AGGRESSIVE-NEXT:    [[X_MASK4:%.*]] = and i32 [[X]], 65280
; AGGRESSIVE-NEXT:    [[X_SHIFT6:%.*]] = shl i32 [[X_MASK4]], 8
; AGGRESSIVE-NEXT:    [[OUT_MERGE:%.*]] = or disjoint i32 [[X_MASK]], [[X_MASK2]]
; AGGRESSIVE-NEXT:    [[OUT_MERGE8:%.*]] = or disjoint i32 [[OUT_MERGE]], [[X_SHIFT6]]
; AGGRESSIVE-NEXT:    ret i32 [[OUT_MERGE8]]
;
  %x.0 = and i32 %x, u0x000000ff
  %x.1 = and i32 %x, u0x0000ff00
  %x.2 = and i32 %x, u0x00ff0000
  %x.3 = and i32 %x, u0xff000000

  %shl.1 = shl i32 %x.1, 8
  %out.1 = or i32 %x.0, %shl.1

  %shr.2 = lshr i32 %x.2, 8
  %out.2 = or i32 %shr.2, %x.3

  %out = or i32 %out.1, %out.2

  ret i32 %out
}
