; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=packed-integer-combine %s | FileCheck %s --check-prefix=LAZY
; RUN: opt -S -passes="packed-integer-combine<aggressive>" %s | FileCheck %s --check-prefix=AGGRESSIVE

define <4 x i8> @obtain_v4i8(<2 x i16> %from) {
; LAZY-LABEL: define <4 x i8> @obtain_v4i8(
; LAZY-SAME: <2 x i16> [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast <2 x i16> [[FROM]] to <4 x i8>
; LAZY-NEXT:    ret <4 x i8> [[FROM_CAST]]
;
; AGGRESSIVE-LABEL: define <4 x i8> @obtain_v4i8(
; AGGRESSIVE-SAME: <2 x i16> [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast <2 x i16> [[FROM]] to <4 x i8>
; AGGRESSIVE-NEXT:    ret <4 x i8> [[FROM_CAST]]
;
  %from.0 = extractelement <2 x i16> %from, i64 0
  %mask.0 = trunc i16 %from.0 to i8
  %shr.1 = lshr i16 %from.0, 8
  %mask.1 = trunc i16 %shr.1 to i8

  %from.1 = extractelement <2 x i16> %from, i64 1
  %mask.2 = trunc i16 %from.1 to i8
  %shr.3 = lshr i16 %from.1, 8
  %mask.3 = trunc i16 %shr.3 to i8

  %build.0 = insertelement <4 x i8> poison, i8 %mask.0, i64 0
  %build.1 = insertelement <4 x i8> %build.0, i8 %mask.1, i64 1
  %build.2 = insertelement <4 x i8> %build.1, i8 %mask.2, i64 2
  %build.3 = insertelement <4 x i8> %build.2, i8 %mask.3, i64 3

  ret <4 x i8> %build.3
}

define <2 x i16> @obtain_v2i16(<4 x i8> %from) {
; LAZY-LABEL: define <2 x i16> @obtain_v2i16(
; LAZY-SAME: <4 x i8> [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast <4 x i8> [[FROM]] to <2 x i16>
; LAZY-NEXT:    ret <2 x i16> [[FROM_CAST]]
;
; AGGRESSIVE-LABEL: define <2 x i16> @obtain_v2i16(
; AGGRESSIVE-SAME: <4 x i8> [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast <4 x i8> [[FROM]] to <2 x i16>
; AGGRESSIVE-NEXT:    ret <2 x i16> [[FROM_CAST]]
;
  %from.0 = extractelement <4 x i8> %from, i64 0
  %zext.0 = zext i8 %from.0 to i16

  %from.1 = extractelement <4 x i8> %from, i64 1
  %zext.1 = zext i8 %from.1 to i16
  %shl.1 = shl i16 %zext.1, 8
  %out.1 = or i16 %zext.0, %shl.1

  %from.2 = extractelement <4 x i8> %from, i64 2
  %zext.2 = zext i8 %from.2 to i16

  %from.3 = extractelement <4 x i8> %from, i64 3
  %zext.3 = zext i8 %from.3 to i16
  %shl.3 = shl i16 %zext.3, 8
  %out.2 = or i16 %zext.2, %shl.3

  %build.0 = insertelement <2 x i16> poison, i16 %out.1, i64 0
  %build.1 = insertelement <2 x i16> %build.0, i16 %out.2, i64 1

  ret <2 x i16> %build.1
}

define <4 x i8> @obtain_v4i8_masked(<2 x i16> %from) {
; LAZY-LABEL: define <4 x i8> @obtain_v4i8_masked(
; LAZY-SAME: <2 x i16> [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast <2 x i16> [[FROM]] to <4 x i8>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i8> [[FROM_CAST]], <4 x i8> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
; LAZY-NEXT:    ret <4 x i8> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i8> @obtain_v4i8_masked(
; AGGRESSIVE-SAME: <2 x i16> [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast <2 x i16> [[FROM]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i8> [[FROM_CAST]], <4 x i8> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
; AGGRESSIVE-NEXT:    ret <4 x i8> [[FROM_SHUFFLE]]
;
  %from.0 = extractelement <2 x i16> %from, i64 0
  %mask.0 = trunc i16 %from.0 to i8
  %shr.1 = lshr i16 %from.0, 8
  %mask.1 = trunc i16 %shr.1 to i8

  %from.1 = extractelement <2 x i16> %from, i64 1
  %shr.3 = lshr i16 %from.1, 8
  %mask.3 = trunc i16 %shr.3 to i8

  %build.0 = insertelement <4 x i8> <i8 poison, i8 poison, i8 0, i8 poison>, i8 %mask.0, i64 0
  %build.1 = insertelement <4 x i8> %build.0, i8 %mask.1, i64 1
  %build.3 = insertelement <4 x i8> %build.1, i8 %mask.3, i64 3

  ret <4 x i8> %build.3
}

define <2 x i16> @obtain_v2i16_masked(<4 x i8> %from) {
; LAZY-LABEL: define <2 x i16> @obtain_v2i16_masked(
; LAZY-SAME: <4 x i8> [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast <4 x i8> [[FROM]] to <2 x i16>
; LAZY-NEXT:    [[FROM_MASK:%.*]] = and <2 x i16> [[FROM_CAST]], <i16 -1, i16 -256>
; LAZY-NEXT:    ret <2 x i16> [[FROM_MASK]]
;
; AGGRESSIVE-LABEL: define <2 x i16> @obtain_v2i16_masked(
; AGGRESSIVE-SAME: <4 x i8> [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast <4 x i8> [[FROM]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[FROM_MASK:%.*]] = and <2 x i16> [[FROM_CAST]], <i16 -1, i16 -256>
; AGGRESSIVE-NEXT:    ret <2 x i16> [[FROM_MASK]]
;
  %from.0 = extractelement <4 x i8> %from, i64 0
  %zext.0 = zext i8 %from.0 to i16

  %from.1 = extractelement <4 x i8> %from, i64 1
  %zext.1 = zext i8 %from.1 to i16
  %shl.1 = shl i16 %zext.1, 8
  %out.1 = or i16 %zext.0, %shl.1

  %from.3 = extractelement <4 x i8> %from, i64 3
  %zext.3 = zext i8 %from.3 to i16
  %shl.3 = shl i16 %zext.3, 8

  %build.0 = insertelement <2 x i16> poison, i16 %out.1, i64 0
  %build.1 = insertelement <2 x i16> %build.0, i16 %shl.3, i64 1

  ret <2 x i16> %build.1
}

define <8 x i8> @obtain_v4i8_shifted(<2 x i16> %from) {
; LAZY-LABEL: define <8 x i8> @obtain_v4i8_shifted(
; LAZY-SAME: <2 x i16> [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast <2 x i16> [[FROM]] to <4 x i8>
; LAZY-NEXT:    [[FROM_EXTRACT:%.*]] = shufflevector <4 x i8> [[FROM_CAST]], <4 x i8> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <8 x i8> [[FROM_EXTRACT]], <8 x i8> zeroinitializer, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7>
; LAZY-NEXT:    ret <8 x i8> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <8 x i8> @obtain_v4i8_shifted(
; AGGRESSIVE-SAME: <2 x i16> [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast <2 x i16> [[FROM]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[FROM_EXTRACT:%.*]] = shufflevector <4 x i8> [[FROM_CAST]], <4 x i8> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <8 x i8> [[FROM_EXTRACT]], <8 x i8> zeroinitializer, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7>
; AGGRESSIVE-NEXT:    ret <8 x i8> [[FROM_SHUFFLE]]
;
  %from.0 = extractelement <2 x i16> %from, i64 0
  %mask.0 = trunc i16 %from.0 to i8
  %shr.1 = lshr i16 %from.0, 8
  %mask.1 = trunc i16 %shr.1 to i8

  %from.1 = extractelement <2 x i16> %from, i64 1
  %mask.2 = trunc i16 %from.1 to i8
  %shr.3 = lshr i16 %from.1, 8
  %mask.3 = trunc i16 %shr.3 to i8

  %build.0 = insertelement <8 x i8> <i8 0, i8 0, i8 0, i8 0, i8 poison, i8 poison, i8 poison, i8 poison>, i8 %mask.0, i64 4
  %build.1 = insertelement <8 x i8> %build.0, i8 %mask.1, i64 5
  %build.2 = insertelement <8 x i8> %build.1, i8 %mask.2, i64 6
  %build.3 = insertelement <8 x i8> %build.2, i8 %mask.3, i64 7

  ret <8 x i8> %build.3
}

define <4 x i16> @obtain_v2i16_shifted(<4 x i8> %from) {
; LAZY-LABEL: define <4 x i16> @obtain_v2i16_shifted(
; LAZY-SAME: <4 x i8> [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast <4 x i8> [[FROM]] to <2 x i16>
; LAZY-NEXT:    [[FROM_EXTRACT:%.*]] = shufflevector <2 x i16> [[FROM_CAST]], <2 x i16> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i16> [[FROM_EXTRACT]], <4 x i16> zeroinitializer, <4 x i32> <i32 4, i32 5, i32 2, i32 3>
; LAZY-NEXT:    ret <4 x i16> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i16> @obtain_v2i16_shifted(
; AGGRESSIVE-SAME: <4 x i8> [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast <4 x i8> [[FROM]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[FROM_EXTRACT:%.*]] = shufflevector <2 x i16> [[FROM_CAST]], <2 x i16> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i16> [[FROM_EXTRACT]], <4 x i16> zeroinitializer, <4 x i32> <i32 4, i32 5, i32 2, i32 3>
; AGGRESSIVE-NEXT:    ret <4 x i16> [[FROM_SHUFFLE]]
;
  %from.0 = extractelement <4 x i8> %from, i64 0
  %zext.0 = zext i8 %from.0 to i16

  %from.1 = extractelement <4 x i8> %from, i64 1
  %zext.1 = zext i8 %from.1 to i16
  %shl.1 = shl i16 %zext.1, 8
  %out.1 = or i16 %zext.0, %shl.1

  %from.2 = extractelement <4 x i8> %from, i64 2
  %zext.2 = zext i8 %from.2 to i16

  %from.3 = extractelement <4 x i8> %from, i64 3
  %zext.3 = zext i8 %from.3 to i16
  %shl.3 = shl i16 %zext.3, 8
  %out.2 = or i16 %zext.2, %shl.3

  %build.0 = insertelement <4 x i16> <i16 0, i16 0, i16 poison, i16 poison>, i16 %out.1, i64 2
  %build.1 = insertelement <4 x i16> %build.0, i16 %out.2, i64 3

  ret <4 x i16> %build.1
}

define <8 x i8> @combine_v4i8(<4 x i8> %bot, <2 x i16> %top) {
; LAZY-LABEL: define <8 x i8> @combine_v4i8(
; LAZY-SAME: <4 x i8> [[BOT:%.*]], <2 x i16> [[TOP:%.*]]) {
; LAZY-NEXT:    [[TOP_CAST:%.*]] = bitcast <2 x i16> [[TOP]] to <4 x i8>
; LAZY-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <4 x i8> [[BOT]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; LAZY-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <8 x i8> [[BOT_EXTRACT]], <8 x i8> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
; LAZY-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <4 x i8> [[TOP_CAST]], <4 x i8> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>
; LAZY-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <8 x i8> [[TOP_EXTRACT]], <8 x i8> [[BOT_SHUFFLE]], <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7>
; LAZY-NEXT:    ret <8 x i8> [[TOP_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <8 x i8> @combine_v4i8(
; AGGRESSIVE-SAME: <4 x i8> [[BOT:%.*]], <2 x i16> [[TOP:%.*]]) {
; AGGRESSIVE-NEXT:    [[TOP_CAST:%.*]] = bitcast <2 x i16> [[TOP]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <4 x i8> [[BOT]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; AGGRESSIVE-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <8 x i8> [[BOT_EXTRACT]], <8 x i8> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
; AGGRESSIVE-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <4 x i8> [[TOP_CAST]], <4 x i8> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>
; AGGRESSIVE-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <8 x i8> [[TOP_EXTRACT]], <8 x i8> [[BOT_SHUFFLE]], <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7>
; AGGRESSIVE-NEXT:    ret <8 x i8> [[TOP_SHUFFLE]]
;
  %base = shufflevector <4 x i8> %bot, <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>

  %top.0 = extractelement <2 x i16> %top, i64 0
  %mask.0 = trunc i16 %top.0 to i8
  %shr.1 = lshr i16 %top.0, 8
  %mask.1 = trunc i16 %shr.1 to i8

  %top.1 = extractelement <2 x i16> %top, i64 1
  %mask.2 = trunc i16 %top.1 to i8
  %shr.3 = lshr i16 %top.1, 8
  %mask.3 = trunc i16 %shr.3 to i8

  %build.0 = insertelement <8 x i8> %base, i8 %mask.0, i64 4
  %build.1 = insertelement <8 x i8> %build.0, i8 %mask.1, i64 5
  %build.2 = insertelement <8 x i8> %build.1, i8 %mask.2, i64 6
  %build.3 = insertelement <8 x i8> %build.2, i8 %mask.3, i64 7

  ret <8 x i8> %build.3
}

define <4 x i16> @combine_v2i16(<2 x i16> %bot, <4 x i8> %top) {
; LAZY-LABEL: define <4 x i16> @combine_v2i16(
; LAZY-SAME: <2 x i16> [[BOT:%.*]], <4 x i8> [[TOP:%.*]]) {
; LAZY-NEXT:    [[TOP_CAST:%.*]] = bitcast <4 x i8> [[TOP]] to <2 x i16>
; LAZY-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <2 x i16> [[BOT]], <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; LAZY-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <4 x i16> [[BOT_EXTRACT]], <4 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; LAZY-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <2 x i16> [[TOP_CAST]], <2 x i16> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>
; LAZY-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <4 x i16> [[TOP_EXTRACT]], <4 x i16> [[BOT_SHUFFLE]], <4 x i32> <i32 4, i32 5, i32 2, i32 3>
; LAZY-NEXT:    ret <4 x i16> [[TOP_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i16> @combine_v2i16(
; AGGRESSIVE-SAME: <2 x i16> [[BOT:%.*]], <4 x i8> [[TOP:%.*]]) {
; AGGRESSIVE-NEXT:    [[TOP_CAST:%.*]] = bitcast <4 x i8> [[TOP]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <2 x i16> [[BOT]], <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; AGGRESSIVE-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <4 x i16> [[BOT_EXTRACT]], <4 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; AGGRESSIVE-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <2 x i16> [[TOP_CAST]], <2 x i16> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>
; AGGRESSIVE-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <4 x i16> [[TOP_EXTRACT]], <4 x i16> [[BOT_SHUFFLE]], <4 x i32> <i32 4, i32 5, i32 2, i32 3>
; AGGRESSIVE-NEXT:    ret <4 x i16> [[TOP_SHUFFLE]]
;
  %base = shufflevector <2 x i16> %bot, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>

  %top.0 = extractelement <4 x i8> %top, i64 0
  %zext.0 = zext i8 %top.0 to i16

  %top.1 = extractelement <4 x i8> %top, i64 1
  %zext.1 = zext i8 %top.1 to i16
  %shl.1 = shl i16 %zext.1, 8
  %out.1 = or i16 %zext.0, %shl.1

  %top.2 = extractelement <4 x i8> %top, i64 2
  %zext.2 = zext i8 %top.2 to i16

  %top.3 = extractelement <4 x i8> %top, i64 3
  %zext.3 = zext i8 %top.3 to i16
  %shl.3 = shl i16 %zext.3, 8
  %out.2 = or i16 %zext.2, %shl.3

  %build.0 = insertelement <4 x i16> %base, i16 %out.1, i64 2
  %build.1 = insertelement <4 x i16> %build.0, i16 %out.2, i64 3

  ret <4 x i16> %build.1
}

define <4 x i8> @shuffle_elts(<4 x i8> %vec) {
; LAZY-LABEL: define <4 x i8> @shuffle_elts(
; LAZY-SAME: <4 x i8> [[VEC:%.*]]) {
; LAZY-NEXT:    [[SHUFFLED:%.*]] = shufflevector <4 x i8> [[VEC]], <4 x i8> poison, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
; LAZY-NEXT:    ret <4 x i8> [[SHUFFLED]]
;
; AGGRESSIVE-LABEL: define <4 x i8> @shuffle_elts(
; AGGRESSIVE-SAME: <4 x i8> [[VEC:%.*]]) {
; AGGRESSIVE-NEXT:    [[VEC_SHUFFLE:%.*]] = shufflevector <4 x i8> [[VEC]], <4 x i8> zeroinitializer, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
; AGGRESSIVE-NEXT:    [[VEC_SHUFFLE2:%.*]] = shufflevector <4 x i8> [[VEC]], <4 x i8> [[VEC_SHUFFLE]], <4 x i32> <i32 4, i32 2, i32 6, i32 7>
; AGGRESSIVE-NEXT:    [[VEC_SHUFFLE4:%.*]] = shufflevector <4 x i8> [[VEC]], <4 x i8> [[VEC_SHUFFLE2]], <4 x i32> <i32 4, i32 5, i32 1, i32 7>
; AGGRESSIVE-NEXT:    ret <4 x i8> [[VEC_SHUFFLE4]]
;
  %shuffled = shufflevector <4 x i8> %vec, <4 x i8> poison, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  ret <4 x i8> %shuffled
}
