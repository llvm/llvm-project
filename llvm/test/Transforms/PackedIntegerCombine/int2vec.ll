; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=packedintcombine %s | FileCheck %s --check-prefix=LAZY
; RUN: opt -S -passes=packedintcombine -packedint-aggressive-rewriter %s | FileCheck %s --check-prefix=AGGRESSIVE

define <2 x i8> @top_bytes(i32 %a, i32 %b) {
; LAZY-LABEL: define <2 x i8> @top_bytes(
; LAZY-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; LAZY-NEXT:    [[A_MASK:%.*]] = and i32 [[A]], -16777216
; LAZY-NEXT:    [[A_LSHR:%.*]] = lshr i32 [[A_MASK]], 24
; LAZY-NEXT:    [[A_TRUNC:%.*]] = trunc i32 [[A_LSHR]] to i8
; LAZY-NEXT:    [[B_MASK:%.*]] = and i32 [[B]], -16777216
; LAZY-NEXT:    [[B_LSHR:%.*]] = lshr i32 [[B_MASK]], 24
; LAZY-NEXT:    [[B_TRUNC:%.*]] = trunc i32 [[B_LSHR]] to i8
; LAZY-NEXT:    [[BYTES_0:%.*]] = insertelement <2 x i8> poison, i8 [[A_TRUNC]], i32 1
; LAZY-NEXT:    [[BYTES_1:%.*]] = insertelement <2 x i8> [[BYTES_0]], i8 [[B_TRUNC]], i32 0
; LAZY-NEXT:    ret <2 x i8> [[BYTES_1]]
;
; AGGRESSIVE-LABEL: define <2 x i8> @top_bytes(
; AGGRESSIVE-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; AGGRESSIVE-NEXT:    [[A_CAST:%.*]] = bitcast i32 [[A]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[B_CAST:%.*]] = bitcast i32 [[B]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[B_EXTRACT:%.*]] = shufflevector <4 x i8> [[B_CAST]], <4 x i8> poison, <2 x i32> <i32 3, i32 poison>
; AGGRESSIVE-NEXT:    [[B_SHUFFLE:%.*]] = shufflevector <2 x i8> [[B_EXTRACT]], <2 x i8> zeroinitializer, <2 x i32> <i32 0, i32 3>
; AGGRESSIVE-NEXT:    [[A_EXTRACT:%.*]] = shufflevector <4 x i8> [[A_CAST]], <4 x i8> poison, <2 x i32> <i32 poison, i32 3>
; AGGRESSIVE-NEXT:    [[A_SHUFFLE:%.*]] = shufflevector <2 x i8> [[A_EXTRACT]], <2 x i8> [[B_SHUFFLE]], <2 x i32> <i32 2, i32 1>
; AGGRESSIVE-NEXT:    ret <2 x i8> [[A_SHUFFLE]]
;
  %a.mask = and i32 %a, u0xff000000
  %a.lshr = lshr i32 %a.mask, 24
  %a.trunc = trunc i32 %a.lshr to i8
  %b.mask = and i32 %b, u0xff000000
  %b.lshr = lshr i32 %b.mask, 24
  %b.trunc = trunc i32 %b.lshr to i8
  %bytes.0 = insertelement <2 x i8> poison, i8 %a.trunc, i32 1
  %bytes.1 = insertelement <2 x i8> %bytes.0, i8 %b.trunc, i32 0
  ret <2 x i8> %bytes.1
}

define <2 x i16> @top_bytes.i16(i32 %a, i32 %b) {
; LAZY-LABEL: define <2 x i16> @top_bytes.i16(
; LAZY-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; LAZY-NEXT:    [[A_MASK:%.*]] = and i32 [[A]], -65536
; LAZY-NEXT:    [[A_LSHR:%.*]] = lshr i32 [[A_MASK]], 16
; LAZY-NEXT:    [[A_TRUNC:%.*]] = trunc i32 [[A_LSHR]] to i16
; LAZY-NEXT:    [[B_MASK:%.*]] = and i32 [[B]], -65536
; LAZY-NEXT:    [[B_LSHR:%.*]] = lshr i32 [[B_MASK]], 16
; LAZY-NEXT:    [[B_TRUNC:%.*]] = trunc i32 [[B_LSHR]] to i16
; LAZY-NEXT:    [[BYTES_0:%.*]] = insertelement <2 x i16> poison, i16 [[A_TRUNC]], i32 1
; LAZY-NEXT:    [[BYTES_1:%.*]] = insertelement <2 x i16> [[BYTES_0]], i16 [[B_TRUNC]], i32 0
; LAZY-NEXT:    ret <2 x i16> [[BYTES_1]]
;
; AGGRESSIVE-LABEL: define <2 x i16> @top_bytes.i16(
; AGGRESSIVE-SAME: i32 [[A:%.*]], i32 [[B:%.*]]) {
; AGGRESSIVE-NEXT:    [[A_CAST:%.*]] = bitcast i32 [[A]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[B_CAST:%.*]] = bitcast i32 [[B]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[B_SHUFFLE:%.*]] = shufflevector <2 x i16> [[B_CAST]], <2 x i16> zeroinitializer, <2 x i32> <i32 1, i32 3>
; AGGRESSIVE-NEXT:    [[A_SHUFFLE:%.*]] = shufflevector <2 x i16> [[A_CAST]], <2 x i16> [[B_SHUFFLE]], <2 x i32> <i32 2, i32 1>
; AGGRESSIVE-NEXT:    ret <2 x i16> [[A_SHUFFLE]]
;
  %a.mask = and i32 %a, u0xffff0000
  %a.lshr = lshr i32 %a.mask, 16
  %a.trunc = trunc i32 %a.lshr to i16
  %b.mask = and i32 %b, u0xffff0000
  %b.lshr = lshr i32 %b.mask, 16
  %b.trunc = trunc i32 %b.lshr to i16
  %bytes.0 = insertelement <2 x i16> poison, i16 %a.trunc, i32 1
  %bytes.1 = insertelement <2 x i16> %bytes.0, i16 %b.trunc, i32 0
  ret <2 x i16> %bytes.1
}

define <4 x i8> @obtain_i32(i32 %from) {
; LAZY-LABEL: define <4 x i8> @obtain_i32(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <4 x i8>
; LAZY-NEXT:    ret <4 x i8> [[FROM_CAST]]
;
; AGGRESSIVE-LABEL: define <4 x i8> @obtain_i32(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <4 x i8>
; AGGRESSIVE-NEXT:    ret <4 x i8> [[FROM_CAST]]
;
  %get.0 = trunc i32 %from to i8

  %shr.1 = lshr i32 %from, 8
  %get.1 = trunc i32 %shr.1 to i8

  %shr.2 = lshr i32 %from, 16
  %get.2 = trunc i32 %shr.2 to i8

  %shr.3 = lshr i32 %from, 24
  %get.3 = trunc i32 %shr.3 to i8

  %build.0 = insertelement <4 x i8> poison, i8 %get.0, i32 0
  %build.1 = insertelement <4 x i8> %build.0, i8 %get.1, i32 1
  %build.2 = insertelement <4 x i8> %build.1, i8 %get.2, i32 2
  %build.3 = insertelement <4 x i8> %build.2, i8 %get.3, i32 3
  ret <4 x i8> %build.3
}

define <2 x i16> @obtain_i32.i16(i32 %from) {
; LAZY-LABEL: define <2 x i16> @obtain_i32.i16(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <2 x i16>
; LAZY-NEXT:    ret <2 x i16> [[FROM_CAST]]
;
; AGGRESSIVE-LABEL: define <2 x i16> @obtain_i32.i16(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <2 x i16>
; AGGRESSIVE-NEXT:    ret <2 x i16> [[FROM_CAST]]
;
  %get.0 = trunc i32 %from to i16

  %shr.1 = lshr i32 %from, 16
  %get.1 = trunc i32 %shr.1 to i16

  %build.0 = insertelement <2 x i16> poison, i16 %get.0, i32 0
  %build.1 = insertelement <2 x i16> %build.0, i16 %get.1, i32 1
  ret <2 x i16> %build.1
}

define <4 x i8> @obtain_i32_masked(i32 %from) {
; LAZY-LABEL: define <4 x i8> @obtain_i32_masked(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <4 x i8>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i8> [[FROM_CAST]], <4 x i8> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
; LAZY-NEXT:    ret <4 x i8> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i8> @obtain_i32_masked(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i8> [[FROM_CAST]], <4 x i8> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
; AGGRESSIVE-NEXT:    ret <4 x i8> [[FROM_SHUFFLE]]
;
  %get.0 = trunc i32 %from to i8

  %shr.1 = lshr i32 %from, 8
  %get.1 = trunc i32 %shr.1 to i8

  %shr.3 = lshr i32 %from, 24
  %get.3 = trunc i32 %shr.3 to i8

  %build.0 = insertelement <4 x i8> <i8 poison, i8 poison, i8 0, i8 poison>, i8 %get.0, i32 0
  %build.1 = insertelement <4 x i8> %build.0, i8 %get.1, i32 1
  %build.3 = insertelement <4 x i8> %build.1, i8 %get.3, i32 3
  ret <4 x i8> %build.3
}

define <2 x i16> @obtain_i32_masked.i16(i32 %from) {
; LAZY-LABEL: define <2 x i16> @obtain_i32_masked.i16(
; LAZY-SAME: i32 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <2 x i16>
; LAZY-NEXT:    [[FROM_MASK:%.*]] = and <2 x i16> [[FROM_CAST]], <i16 -1, i16 -256>
; LAZY-NEXT:    ret <2 x i16> [[FROM_MASK]]
;
; AGGRESSIVE-LABEL: define <2 x i16> @obtain_i32_masked.i16(
; AGGRESSIVE-SAME: i32 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i32 [[FROM]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[FROM_MASK:%.*]] = and <2 x i16> [[FROM_CAST]], <i16 -1, i16 -256>
; AGGRESSIVE-NEXT:    ret <2 x i16> [[FROM_MASK]]
;
  %get.0 = trunc i32 %from to i16

  %shr.1 = lshr i32 %from, 16
  %trunc.1 = trunc i32 %shr.1 to i16
  %get.1 = and i16 %trunc.1, u0xff00

  %build.0 = insertelement <2 x i16> poison, i16 %get.0, i32 0
  %build.1 = insertelement <2 x i16> %build.0, i16 %get.1, i32 1
  ret <2 x i16> %build.1
}

define <8 x i8> @obtain_i64(i64 %from) {
; LAZY-LABEL: define <8 x i8> @obtain_i64(
; LAZY-SAME: i64 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <8 x i8>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <8 x i8> [[FROM_CAST]], <8 x i8> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
; LAZY-NEXT:    ret <8 x i8> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <8 x i8> @obtain_i64(
; AGGRESSIVE-SAME: i64 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <8 x i8>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <8 x i8> [[FROM_CAST]], <8 x i8> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
; AGGRESSIVE-NEXT:    ret <8 x i8> [[FROM_SHUFFLE]]
;
  %get.0 = trunc i64 %from to i8

  %shr.1 = lshr i64 %from, 8
  %get.1 = trunc i64 %shr.1 to i8

  %shr.2 = lshr i64 %from, 16
  %get.2 = trunc i64 %shr.2 to i8

  %shr.3 = lshr i64 %from, 24
  %get.3 = trunc i64 %shr.3 to i8

  %build.0 = insertelement <8 x i8> zeroinitializer, i8 %get.0, i32 0
  %build.1 = insertelement <8 x i8> %build.0, i8 %get.1, i32 1
  %build.2 = insertelement <8 x i8> %build.1, i8 %get.2, i32 2
  %build.3 = insertelement <8 x i8> %build.2, i8 %get.3, i32 3
  ret <8 x i8> %build.3
}

define <4 x i16> @obtain_i64.i16(i64 %from) {
; LAZY-LABEL: define <4 x i16> @obtain_i64.i16(
; LAZY-SAME: i64 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <4 x i16>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i16> [[FROM_CAST]], <4 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; LAZY-NEXT:    ret <4 x i16> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i16> @obtain_i64.i16(
; AGGRESSIVE-SAME: i64 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <4 x i16>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i16> [[FROM_CAST]], <4 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; AGGRESSIVE-NEXT:    ret <4 x i16> [[FROM_SHUFFLE]]
;
  %get.0 = trunc i64 %from to i16

  %shr.1 = lshr i64 %from, 16
  %get.1 = trunc i64 %shr.1 to i16

  %build.0 = insertelement <4 x i16> zeroinitializer, i16 %get.0, i32 0
  %build.1 = insertelement <4 x i16> %build.0, i16 %get.1, i32 1
  ret <4 x i16> %build.1
}

define <8 x i8> @obtain_i64_shifted(i64 %from) {
; LAZY-LABEL: define <8 x i8> @obtain_i64_shifted(
; LAZY-SAME: i64 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <8 x i8>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <8 x i8> [[FROM_CAST]], <8 x i8> zeroinitializer, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 0, i32 1, i32 2, i32 3>
; LAZY-NEXT:    ret <8 x i8> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <8 x i8> @obtain_i64_shifted(
; AGGRESSIVE-SAME: i64 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <8 x i8>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <8 x i8> [[FROM_CAST]], <8 x i8> zeroinitializer, <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 0, i32 1, i32 2, i32 3>
; AGGRESSIVE-NEXT:    ret <8 x i8> [[FROM_SHUFFLE]]
;
  %get.0 = trunc i64 %from to i8

  %shr.1 = lshr i64 %from, 8
  %get.1 = trunc i64 %shr.1 to i8

  %shr.2 = lshr i64 %from, 16
  %get.2 = trunc i64 %shr.2 to i8

  %shr.3 = lshr i64 %from, 24
  %get.3 = trunc i64 %shr.3 to i8

  %build.0 = insertelement <8 x i8> zeroinitializer, i8 %get.0, i32 4
  %build.1 = insertelement <8 x i8> %build.0, i8 %get.1, i32 5
  %build.2 = insertelement <8 x i8> %build.1, i8 %get.2, i32 6
  %build.3 = insertelement <8 x i8> %build.2, i8 %get.3, i32 7
  ret <8 x i8> %build.3
}

define <4 x i16> @obtain_i64_shifted.i16(i64 %from) {
; LAZY-LABEL: define <4 x i16> @obtain_i64_shifted.i16(
; LAZY-SAME: i64 [[FROM:%.*]]) {
; LAZY-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <4 x i16>
; LAZY-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i16> [[FROM_CAST]], <4 x i16> zeroinitializer, <4 x i32> <i32 4, i32 5, i32 0, i32 1>
; LAZY-NEXT:    ret <4 x i16> [[FROM_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i16> @obtain_i64_shifted.i16(
; AGGRESSIVE-SAME: i64 [[FROM:%.*]]) {
; AGGRESSIVE-NEXT:    [[FROM_CAST:%.*]] = bitcast i64 [[FROM]] to <4 x i16>
; AGGRESSIVE-NEXT:    [[FROM_SHUFFLE:%.*]] = shufflevector <4 x i16> [[FROM_CAST]], <4 x i16> zeroinitializer, <4 x i32> <i32 4, i32 5, i32 0, i32 1>
; AGGRESSIVE-NEXT:    ret <4 x i16> [[FROM_SHUFFLE]]
;
  %get.0 = trunc i64 %from to i16

  %shr.1 = lshr i64 %from, 16
  %get.1 = trunc i64 %shr.1 to i16

  %build.0 = insertelement <4 x i16> zeroinitializer, i16 %get.0, i32 2
  %build.1 = insertelement <4 x i16> %build.0, i16 %get.1, i32 3
  ret <4 x i16> %build.1
}

define <8 x i8> @combine(<4 x i8> %bot, i32 %top) {
; LAZY-LABEL: define <8 x i8> @combine(
; LAZY-SAME: <4 x i8> [[BOT:%.*]], i32 [[TOP:%.*]]) {
; LAZY-NEXT:    [[TOP_CAST:%.*]] = bitcast i32 [[TOP]] to <4 x i8>
; LAZY-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <4 x i8> [[BOT]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; LAZY-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <8 x i8> [[BOT_EXTRACT]], <8 x i8> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
; LAZY-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <4 x i8> [[TOP_CAST]], <4 x i8> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>
; LAZY-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <8 x i8> [[TOP_EXTRACT]], <8 x i8> [[BOT_SHUFFLE]], <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7>
; LAZY-NEXT:    ret <8 x i8> [[TOP_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <8 x i8> @combine(
; AGGRESSIVE-SAME: <4 x i8> [[BOT:%.*]], i32 [[TOP:%.*]]) {
; AGGRESSIVE-NEXT:    [[TOP_CAST:%.*]] = bitcast i32 [[TOP]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <4 x i8> [[BOT]], <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; AGGRESSIVE-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <8 x i8> [[BOT_EXTRACT]], <8 x i8> zeroinitializer, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>
; AGGRESSIVE-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <4 x i8> [[TOP_CAST]], <4 x i8> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 1, i32 2, i32 3>
; AGGRESSIVE-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <8 x i8> [[TOP_EXTRACT]], <8 x i8> [[BOT_SHUFFLE]], <8 x i32> <i32 8, i32 9, i32 10, i32 11, i32 4, i32 5, i32 6, i32 7>
; AGGRESSIVE-NEXT:    ret <8 x i8> [[TOP_SHUFFLE]]
;
  %base = shufflevector <4 x i8> %bot, <4 x i8> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>

  %get.0 = trunc i32 %top to i8

  %shr.1 = lshr i32 %top, 8
  %get.1 = trunc i32 %shr.1 to i8

  %shr.2 = lshr i32 %top, 16
  %get.2 = trunc i32 %shr.2 to i8

  %shr.3 = lshr i32 %top, 24
  %get.3 = trunc i32 %shr.3 to i8

  %build.0 = insertelement <8 x i8> %base, i8 %get.0, i32 4
  %build.1 = insertelement <8 x i8> %build.0, i8 %get.1, i32 5
  %build.2 = insertelement <8 x i8> %build.1, i8 %get.2, i32 6
  %build.3 = insertelement <8 x i8> %build.2, i8 %get.3, i32 7

  ret <8 x i8> %build.3
}

define <4 x i16> @combine.i16(<2 x i16> %bot, i32 %top) {
; LAZY-LABEL: define <4 x i16> @combine.i16(
; LAZY-SAME: <2 x i16> [[BOT:%.*]], i32 [[TOP:%.*]]) {
; LAZY-NEXT:    [[TOP_CAST:%.*]] = bitcast i32 [[TOP]] to <2 x i16>
; LAZY-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <2 x i16> [[BOT]], <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; LAZY-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <4 x i16> [[BOT_EXTRACT]], <4 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; LAZY-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <2 x i16> [[TOP_CAST]], <2 x i16> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>
; LAZY-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <4 x i16> [[TOP_EXTRACT]], <4 x i16> [[BOT_SHUFFLE]], <4 x i32> <i32 4, i32 5, i32 2, i32 3>
; LAZY-NEXT:    ret <4 x i16> [[TOP_SHUFFLE]]
;
; AGGRESSIVE-LABEL: define <4 x i16> @combine.i16(
; AGGRESSIVE-SAME: <2 x i16> [[BOT:%.*]], i32 [[TOP:%.*]]) {
; AGGRESSIVE-NEXT:    [[TOP_CAST:%.*]] = bitcast i32 [[TOP]] to <2 x i16>
; AGGRESSIVE-NEXT:    [[BOT_EXTRACT:%.*]] = shufflevector <2 x i16> [[BOT]], <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; AGGRESSIVE-NEXT:    [[BOT_SHUFFLE:%.*]] = shufflevector <4 x i16> [[BOT_EXTRACT]], <4 x i16> zeroinitializer, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
; AGGRESSIVE-NEXT:    [[TOP_EXTRACT:%.*]] = shufflevector <2 x i16> [[TOP_CAST]], <2 x i16> poison, <4 x i32> <i32 poison, i32 poison, i32 0, i32 1>
; AGGRESSIVE-NEXT:    [[TOP_SHUFFLE:%.*]] = shufflevector <4 x i16> [[TOP_EXTRACT]], <4 x i16> [[BOT_SHUFFLE]], <4 x i32> <i32 4, i32 5, i32 2, i32 3>
; AGGRESSIVE-NEXT:    ret <4 x i16> [[TOP_SHUFFLE]]
;
  %base = shufflevector <2 x i16> %bot, <2 x i16> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>

  %get.0 = trunc i32 %top to i16

  %shr.1 = lshr i32 %top, 16
  %get.1 = trunc i32 %shr.1 to i16

  %build.0 = insertelement <4 x i16> %base, i16 %get.0, i32 2
  %build.1 = insertelement <4 x i16> %build.0, i16 %get.1, i32 3

  ret <4 x i16> %build.1
}

define <4 x i8> @shuffle_elts(i32 %x) {
; LAZY-LABEL: define <4 x i8> @shuffle_elts(
; LAZY-SAME: i32 [[X:%.*]]) {
; LAZY-NEXT:    [[X_0:%.*]] = trunc i32 [[X]] to i8
; LAZY-NEXT:    [[SHR_1:%.*]] = lshr i32 [[X]], 8
; LAZY-NEXT:    [[X_1:%.*]] = trunc i32 [[SHR_1]] to i8
; LAZY-NEXT:    [[SHR_2:%.*]] = lshr i32 [[X]], 16
; LAZY-NEXT:    [[X_2:%.*]] = trunc i32 [[SHR_2]] to i8
; LAZY-NEXT:    [[SHR_3:%.*]] = lshr i32 [[X]], 24
; LAZY-NEXT:    [[X_3:%.*]] = trunc i32 [[SHR_3]] to i8
; LAZY-NEXT:    [[BUILD_0:%.*]] = insertelement <4 x i8> poison, i8 [[X_0]], i32 0
; LAZY-NEXT:    [[BUILD_1:%.*]] = insertelement <4 x i8> [[BUILD_0]], i8 [[X_1]], i32 2
; LAZY-NEXT:    [[BUILD_2:%.*]] = insertelement <4 x i8> [[BUILD_1]], i8 [[X_2]], i32 1
; LAZY-NEXT:    [[X_SHUFFLE4:%.*]] = insertelement <4 x i8> [[BUILD_2]], i8 [[X_3]], i32 3
; LAZY-NEXT:    ret <4 x i8> [[X_SHUFFLE4]]
;
; AGGRESSIVE-LABEL: define <4 x i8> @shuffle_elts(
; AGGRESSIVE-SAME: i32 [[X:%.*]]) {
; AGGRESSIVE-NEXT:    [[X_CAST:%.*]] = bitcast i32 [[X]] to <4 x i8>
; AGGRESSIVE-NEXT:    [[X_SHUFFLE:%.*]] = shufflevector <4 x i8> [[X_CAST]], <4 x i8> zeroinitializer, <4 x i32> <i32 0, i32 5, i32 6, i32 3>
; AGGRESSIVE-NEXT:    [[X_SHUFFLE2:%.*]] = shufflevector <4 x i8> [[X_CAST]], <4 x i8> [[X_SHUFFLE]], <4 x i32> <i32 4, i32 2, i32 6, i32 7>
; AGGRESSIVE-NEXT:    [[X_SHUFFLE4:%.*]] = shufflevector <4 x i8> [[X_CAST]], <4 x i8> [[X_SHUFFLE2]], <4 x i32> <i32 4, i32 5, i32 1, i32 7>
; AGGRESSIVE-NEXT:    ret <4 x i8> [[X_SHUFFLE4]]
;
  %x.0 = trunc i32 %x to i8

  %shr.1 = lshr i32 %x, 8
  %x.1 = trunc i32 %shr.1 to i8

  %shr.2 = lshr i32 %x, 16
  %x.2 = trunc i32 %shr.2 to i8

  %shr.3 = lshr i32 %x, 24
  %x.3 = trunc i32 %shr.3 to i8

  %build.0 = insertelement <4 x i8> poison, i8 %x.0, i32 0
  %build.1 = insertelement <4 x i8> %build.0, i8 %x.1, i32 2
  %build.2 = insertelement <4 x i8> %build.1, i8 %x.2, i32 1
  %build.3 = insertelement <4 x i8> %build.2, i8 %x.3, i32 3

  ret <4 x i8> %build.3
}
