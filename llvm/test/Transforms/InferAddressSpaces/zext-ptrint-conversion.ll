; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt -S -o - -passes=infer-address-spaces -assume-default-is-flat-addrspace %s | FileCheck %s

target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-p7:160:256:256:32-p8:128:128-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-ni:7:8"

define void @zext_ptrint_conversion(ptr addrspace(3) %x) {
; CHECK-LABEL: define void @zext_ptrint_conversion(
; CHECK-SAME: ptr addrspace(3) [[X:%.*]]) {
; CHECK-NEXT:    store i32 0, ptr addrspace(3) [[X]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = ptrtoint ptr addrspace(3) %x to i32
  %tmp1 = zext i32 %tmp0 to i64
  %tmp2 = inttoptr i64 %tmp1 to ptr
  store i32 0, ptr %tmp2
  ret void
}

define ptr @zext_ptrint_conversion2(ptr addrspace(3) %x) {
; CHECK-LABEL: define ptr @zext_ptrint_conversion2(
; CHECK-SAME: ptr addrspace(3) [[X:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr addrspace(3) [[X]] to ptr
; CHECK-NEXT:    ret ptr [[TMP1]]
;
  %tmp0 = ptrtoint ptr addrspace(3) %x to i32
  %tmp1 = zext i32 %tmp0 to i64
  %tmp2 = inttoptr i64 %tmp1 to ptr
  ret ptr %tmp2
}

define <2 x ptr> @zext_ptrint_conversion3(<2 x ptr addrspace(3)> %x) {
; CHECK-LABEL: define <2 x ptr> @zext_ptrint_conversion3(
; CHECK-SAME: <2 x ptr addrspace(3)> [[X:%.*]]) {
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast <2 x ptr addrspace(3)> [[X]] to <2 x ptr>
; CHECK-NEXT:    ret <2 x ptr> [[TMP1]]
;
  %tmp0 = ptrtoint <2 x ptr addrspace(3)> %x to <2 x i32>
  %tmp1 = zext <2 x i32> %tmp0 to <2 x i64>
  %tmp2 = inttoptr <2 x i64> %tmp1 to <2 x ptr>
  ret <2 x ptr> %tmp2
}

define void @non_zext_ptrint_conversion(ptr addrspace(3) %x) {
; CHECK-LABEL: define void @non_zext_ptrint_conversion(
; CHECK-SAME: ptr addrspace(3) [[X:%.*]]) {
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr addrspace(3) [[X]] to i16
; CHECK-NEXT:    [[TMP1:%.*]] = zext i16 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i64 [[TMP1]] to ptr
; CHECK-NEXT:    store i32 0, ptr [[TMP2]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = ptrtoint ptr addrspace(3) %x to i16
  %tmp1 = zext i16 %tmp0 to i64
  %tmp2 = inttoptr i64 %tmp1 to ptr
  store i32 0, ptr %tmp2
  ret void
}

define void @non_zext_ptrint_conversion2(ptr addrspace(3) %x) {
; CHECK-LABEL: define void @non_zext_ptrint_conversion2(
; CHECK-SAME: ptr addrspace(3) [[X:%.*]]) {
; CHECK-NEXT:    [[TMP0:%.*]] = ptrtoint ptr addrspace(3) [[X]] to i32
; CHECK-NEXT:    [[TMP1:%.*]] = zext i32 [[TMP0]] to i128
; CHECK-NEXT:    [[TMP2:%.*]] = inttoptr i128 [[TMP1]] to ptr
; CHECK-NEXT:    store i32 0, ptr [[TMP2]], align 4
; CHECK-NEXT:    ret void
;
  %tmp0 = ptrtoint ptr addrspace(3) %x to i32
  %tmp1 = zext i32 %tmp0 to i128
  %tmp2 = inttoptr i128 %tmp1 to ptr
  store i32 0, ptr %tmp2
  ret void
}
