; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=amdgcn-amd-amdhsa -passes=infer-address-spaces %s -o - | FileCheck %s

declare void @bar(ptr)

define i32 @static_alloca() {
; CHECK-LABEL: define i32 @static_alloca() {
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr [[ALLOCA]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP2:%.*]] = addrspacecast ptr addrspace(5) [[TMP1]] to ptr
; CHECK-NEXT:    call void @bar(ptr [[TMP2]])
; CHECK-NEXT:    [[LOAD:%.*]] = load i32, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    ret i32 [[LOAD]]
;
  %alloca = alloca i32, align 4
  call void @bar(ptr %alloca)
  %load = load i32, ptr %alloca
  ret i32 %load
}

define i32 @dynamic_alloca(i32 %n) {
; CHECK-LABEL: define i32 @dynamic_alloca(
; CHECK-SAME: i32 [[N:%.*]]) {
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i32, i32 [[N]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = addrspacecast ptr [[ALLOCA]] to ptr addrspace(5)
; CHECK-NEXT:    [[TMP2:%.*]] = addrspacecast ptr addrspace(5) [[TMP1]] to ptr
; CHECK-NEXT:    call void @bar(ptr [[TMP2]])
; CHECK-NEXT:    [[LOAD:%.*]] = load i32, ptr addrspace(5) [[TMP1]], align 4
; CHECK-NEXT:    ret i32 0
;
  %alloca = alloca i32, i32 %n, align 4
  call void @bar(ptr %alloca)
  %load = load i32, ptr %alloca
  ret i32 0
}
