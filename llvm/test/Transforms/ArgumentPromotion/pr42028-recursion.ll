; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --function-signature
; RUN: opt -S < %s -passes=argpromotion | FileCheck %s

; This shouldn't get infinitely promoted.

%S = type { ptr }

define i32 @test_inf_promote_caller(i32 %arg) {
; CHECK-LABEL: define {{[^@]+}}@test_inf_promote_caller
; CHECK-SAME: (i32 [[ARG:%.*]]) {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[TEMP:%.*]] = alloca [[S:%.*]], align 8
; CHECK-NEXT:    [[TEMP1:%.*]] = alloca [[S]], align 8
; CHECK-NEXT:    [[TEMP2:%.*]] = call i32 @test_inf_promote_callee(ptr [[TEMP]], ptr [[TEMP1]])
; CHECK-NEXT:    ret i32 0
;
bb:
  %temp = alloca %S
  %temp1 = alloca %S
  %temp2 = call i32 @test_inf_promote_callee(ptr %temp, ptr %temp1)
  ret i32 0
}

define internal i32 @test_inf_promote_callee(ptr %arg, ptr %arg1) {
; CHECK-LABEL: define {{[^@]+}}@test_inf_promote_callee
; CHECK-SAME: (ptr [[ARG:%.*]], ptr [[ARG1:%.*]]) {
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[TEMP2:%.*]] = load ptr, ptr [[ARG1]], align 8
; CHECK-NEXT:    [[TEMP4:%.*]] = load ptr, ptr [[ARG]], align 8
; CHECK-NEXT:    [[TEMP5:%.*]] = call i32 @test_inf_promote_callee2(ptr [[TEMP4]], ptr [[TEMP2]])
; CHECK-NEXT:    ret i32 0
;
bb:
  %temp2 = load ptr, ptr %arg1
  %temp4 = load ptr, ptr %arg
  %temp5 = call i32 @test_inf_promote_callee2(ptr %temp4, ptr %temp2)
  ret i32 0
}

define internal i32 @test_inf_promote_callee2(ptr %arg, ptr %arg1) {
; CHECK-LABEL: define {{[^@]+}}@test_inf_promote_callee2
; CHECK-SAME: (ptr [[ARG:%.*]], ptr [[ARG1:%.*]]) {
; CHECK-NEXT:    [[R:%.*]] = call i32 @test_inf_promote_callee(ptr [[ARG]], ptr [[ARG1]])
; CHECK-NEXT:    ret i32 0
;
  %r = call i32 @test_inf_promote_callee(ptr %arg, ptr %arg1)
  ret i32 0
}

declare i32 @wibble(...)
