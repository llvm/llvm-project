; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --version 5
; RUN: opt -mtriple=aarch64-linux-pauthtest -S -passes='require<profile-summary>,function(codegenprepare)' < %s | FileCheck %s
; RUN: opt -mtriple=arm64e-apple-darwin     -S -passes='require<profile-summary>,function(codegenprepare)' < %s | FileCheck %s

define i64 @choose_disc(i1 %cond, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-LABEL: define i64 @choose_disc(i1 %cond, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 %cond, label %bb.blend.1, label %bb.blend.2
; CHECK:       bb.blend.1:
; CHECK-NEXT:    %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
; CHECK-NEXT:    br label %bb.user
; CHECK:       bb.blend.2:
; CHECK-NEXT:    %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 1234)
; CHECK-NEXT:    br label %bb.user
; CHECK:       bb.user:
; CHECK-NEXT:    %0 = phi i64 [ %addr.1, %bb.blend.1 ], [ %addr.2, %bb.blend.2 ]
; CHECK-NEXT:    %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
; CHECK-NEXT:    %1 = call i64 @llvm.ptrauth.blend(i64 %0, i64 1234)
; CHECK-NEXT:    %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %1)
; CHECK-NEXT:    ret i64 %result
;
entry:
  br i1 %cond, label %bb.blend.1, label %bb.blend.2
bb.blend.1:
  %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
  br label %bb.user
bb.blend.2:
  %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 1234)
  br label %bb.user
bb.user:
  %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
  %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %disc)
  ret i64 %result
}

define i64 @choose_disc_different_imm(i1 %cond, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-LABEL: define i64 @choose_disc_different_imm(i1 %cond, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 %cond, label %bb.blend.1, label %bb.blend.2
; CHECK:       bb.blend.1:
; CHECK-NEXT:    %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
; CHECK-NEXT:    br label %bb.user
; CHECK:       bb.blend.2:
; CHECK-NEXT:    %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 42)
; CHECK-NEXT:    br label %bb.user
; CHECK:       bb.user:
; CHECK-NEXT:    %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
; CHECK-NEXT:    %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %disc)
; CHECK-NEXT:    ret i64 %result
;
entry:
  br i1 %cond, label %bb.blend.1, label %bb.blend.2
bb.blend.1:
  %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
  br label %bb.user
bb.blend.2:
  %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 42)
  br label %bb.user
bb.user:
  %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
  %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %disc)
  ret i64 %result
}

define i64 @choose_disc_multi_edge(i32 %arg, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-LABEL: define i64 @choose_disc_multi_edge(i32 %arg, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    %cond = icmp eq i32 %arg, 0
; CHECK-NEXT:    br i1 %cond, label %bb.blend.1, label %bb.blend.2
; CHECK:       bb.blend.1:
; CHECK-NEXT:    %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
; CHECK-NEXT:    switch i32 %arg, label %bb.blend.2 [
; CHECK-NEXT:      i32 0, label %bb.user
; CHECK-NEXT:      i32 3, label %bb.user
; CHECK-NEXT:    ]
; CHECK:       bb.blend.2:
; CHECK-NEXT:    %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 1234)
; CHECK-NEXT:    br label %bb.user
; CHECK:       bb.user:
; CHECK-NEXT:    %0 = phi i64 [ %addr.1, %bb.blend.1 ], [ %addr.1, %bb.blend.1 ], [ %addr.2, %bb.blend.2 ]
; CHECK-NEXT:    %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
; CHECK-NEXT:    %1 = call i64 @llvm.ptrauth.blend(i64 %0, i64 1234)
; CHECK-NEXT:    %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %1)
; CHECK-NEXT:    ret i64 %result
;
entry:
  %cond = icmp eq i32 %arg, 0
  br i1 %cond, label %bb.blend.1, label %bb.blend.2
bb.blend.1:
  %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
  switch i32 %arg, label %bb.blend.2 [
  i32 0, label %bb.user
  i32 2, label %bb.blend.2
  i32 3, label %bb.user
  ]
bb.blend.2:
  %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 1234)
  br label %bb.user
bb.user:
  %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
  %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %disc)
  ret i64 %result
}

define i64 @choose_disc_phi_placement(i1 %cond, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-LABEL: define i64 @choose_disc_phi_placement(i1 %cond, i64 %addr.1, i64 %addr.2, i64 %ptr) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br i1 %cond, label %bb.blend.1, label %bb.blend.2
; CHECK:       bb.blend.1:
; CHECK-NEXT:    %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
; CHECK-NEXT:    br label %bb.phi
; CHECK:       bb.blend.2:
; CHECK-NEXT:    %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 1234)
; CHECK-NEXT:    br label %bb.phi
; CHECK:       bb.phi:
; CHECK-NEXT:    %0 = phi i64 [ %addr.1, %bb.blend.1 ], [ %addr.2, %bb.blend.2 ]
; CHECK-NEXT:    %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
; CHECK-NEXT:    br i1 %cond, label %bb.user, label %bb.ret0
; CHECK:       bb.user:
; CHECK-NEXT:    %1 = call i64 @llvm.ptrauth.blend(i64 %0, i64 1234)
; CHECK-NEXT:    %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %1)
; CHECK-NEXT:    ret i64 %result
; CHECK:       bb.ret0:
; CHECK-NEXT:    ret i64 0
;
entry:
  br i1 %cond, label %bb.blend.1, label %bb.blend.2
bb.blend.1:
  %disc.1 = call i64 @llvm.ptrauth.blend(i64 %addr.1, i64 1234)
  br label %bb.phi
bb.blend.2:
  %disc.2 = call i64 @llvm.ptrauth.blend(i64 %addr.2, i64 1234)
  br label %bb.phi
bb.phi:
  %disc = phi i64 [ %disc.1, %bb.blend.1 ], [ %disc.2, %bb.blend.2 ]
  br i1 %cond, label %bb.user, label %bb.ret0
bb.user:
  %result = call i64 @llvm.ptrauth.sign(i64 %ptr, i32 0, i64 %disc)
  ret i64 %result
bb.ret0:
  ret i64 0
}
