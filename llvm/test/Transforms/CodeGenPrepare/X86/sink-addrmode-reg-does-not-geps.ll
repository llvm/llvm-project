; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes='require<profile-summary>,function(codegenprepare)' %s | FileCheck %s


target triple = "x86_64-unknown-linux"

declare i1 @cond(float)

define void @test(ptr %src) {
; CHECK-LABEL: define void @test(
; CHECK-SAME: ptr [[SRC:%.*]]) {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[LOOP:.*]]
; CHECK:       [[LOOP]]:
; CHECK-NEXT:    [[IV:%.*]] = phi i64 [ 0, %[[BB]] ], [ [[IV_NEXT:%.*]], %[[LOOP]] ]
; CHECK-NEXT:    [[IV_NEXT]] = add i64 [[IV]], 1
; CHECK-NEXT:    [[SUNKADDR2:%.*]] = mul i64 [[IV_NEXT]], 2
; CHECK-NEXT:    [[SUNKADDR3:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[SUNKADDR2]]
; CHECK-NEXT:    [[SUNKADDR4:%.*]] = getelementptr i8, ptr [[SUNKADDR3]], i64 6
; CHECK-NEXT:    [[L_0:%.*]] = load float, ptr [[SUNKADDR4]], align 4
; CHECK-NEXT:    [[SUNKADDR:%.*]] = mul i64 [[IV]], 2
; CHECK-NEXT:    [[SUNKADDR1:%.*]] = getelementptr i8, ptr [[SRC]], i64 [[SUNKADDR]]
; CHECK-NEXT:    [[L_1:%.*]] = load float, ptr [[SUNKADDR1]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = call i1 @cond(float [[L_0]])
; CHECK-NEXT:    [[C:%.*]] = call i1 @cond(float [[L_1]])
; CHECK-NEXT:    br i1 [[C]], label %[[LOOP]], label %[[EXIT:.*]]
; CHECK:       [[EXIT]]:
; CHECK-NEXT:    ret void
;
bb:
  %gep.base = getelementptr i8, ptr %src, i64 8
  br label %loop

loop:
  %iv = phi i64 [ 0, %bb ], [ %iv.next, %loop ]
  %iv.shl = shl i64 %iv, 1
  %gep.shl = getelementptr i8, ptr %gep.base, i64 %iv.shl
  %gep.sub = getelementptr i8, ptr %gep.shl, i64 -8
  %iv.next = add i64 %iv, 1
  %l.0 = load float, ptr %gep.shl, align 4
  %l.1 = load float, ptr %gep.sub, align 4
  call i1 @cond(float %l.0)
  %c = call i1 @cond(float %l.1)
  br i1 %c, label %loop, label %exit

exit:
  ret void
}
