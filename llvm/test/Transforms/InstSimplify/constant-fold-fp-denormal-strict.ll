; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=instsimplify < %s | FileCheck %s

; 0xB810000000000000 = -0x1.0p-126
; 0x3800000000000000 =  0x1.0p-127 denormal

define float @test_float_fadd_ieee_strict() #0 {
; CHECK-LABEL: define float @test_float_fadd_ieee_strict(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    ret float 0xB800000000000000
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore")
  ret float %result
}

define float @test_float_fadd_strict_ieee() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_ieee(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    ret float 0xB800000000000000
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=ieee", metadata !"denorm.out=ieee") ]
  ret float %result
}

define float @test_float_fadd_strict_inzero() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_inzero(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    ret float 0xB810000000000000
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=zero", metadata !"denorm.out=ieee") ]
  ret float %result
}

define float @test_float_fadd_strict_inpzero() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_inpzero(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    ret float 0xB810000000000000
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=pzero", metadata !"denorm.out=ieee") ]
  ret float %result
}

define float @test_float_fadd_strict_indyn() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_indyn(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    [[RESULT:%.*]] = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control"(metadata !"denorm.in=dyn", metadata !"denorm.out=ieee") ]
; CHECK-NEXT:    ret float [[RESULT]]
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=dyn", metadata !"denorm.out=ieee") ]
  ret float %result
}

define float @test_float_fadd_strict_ieee_outzero() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_ieee_outzero(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    ret float -0.000000e+00
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=ieee", metadata !"denorm.out=zero") ]
  ret float %result
}

define float @test_float_fadd_strict_ieee_outpzero() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_ieee_outpzero(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    ret float 0.000000e+00
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=ieee", metadata !"denorm.out=pzero") ]
  ret float %result
}

define float @test_float_fadd_strict_ieee_outdyn() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_ieee_outdyn(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    [[RESULT:%.*]] = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control"(metadata !"denorm.in=ieee", metadata !"denorm.out=dyn") ]
; CHECK-NEXT:    ret float [[RESULT]]
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=ieee", metadata !"denorm.out=dyn") ]
  ret float %result
}

define float @test_float_fadd_strict_zero_outdef() #0 {
; CHECK-LABEL: define float @test_float_fadd_strict_zero_outdef(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:    ret float 0xB800000000000000
;
  %result = call float @llvm.experimental.constrained.fadd.f32(float 0xB810000000000000, float 0x3800000000000000, metadata !"round.towardzero", metadata !"fpexcept.ignore") [ "fp.control" (metadata !"denorm.in=ieee") ]
  ret float %result
}

attributes #0 = { nounwind strictfp "denormal-fp-math"="ieee,ieee" }
attributes #5 = { nounwind "denormal-fp-math"="ieee,ieee" "denormal-fp-math-f32"="positive-zero,ieee" }
