; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=instsimplify -S < %s | FileCheck %s
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@g1 = global i32 0, align 4
@g2 = internal global i32 0, align 4
@g3 = unnamed_addr global i32 0, align 4
@g4 = hidden global i32 0, align 4
@g5 = protected global i32 0, align 4
@g6 = thread_local unnamed_addr global i32 0, align 4

; Make sure we can simplify away a pointer comparison between
; dynamically-allocated memory and a local stack allocation.
;   void p()
;   {
;     int *mData;
;     int mStackData[10];
;     mData = new int[12];
;     if (mData != mStackData) {
;       delete[] mData;
;     }
;   }

define void @_Z2p1v() {
; CHECK-LABEL: @_Z2p1v(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I1:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2:[0-9]+]]
; CHECK-NEXT:    br i1 false, label [[BB6:%.*]], label [[BB5:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I1]]) #[[ATTR3:[0-9]+]]
; CHECK-NEXT:    br label [[BB6]]
; CHECK:       bb6:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = tail call noalias i8* @_Znam(i64 48) #3
  %i2 = bitcast i8* %i1 to i32*
  %i3 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i4 = icmp eq i32* %i2, %i3
  br i1 %i4, label %bb6, label %bb5

bb5:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i1) #4
  br label %bb6

bb6:                                              ; preds = %bb5, %bb
  ret void
}

define void @_Z2p2bb(i1 zeroext %b1, i1 zeroext %b2) {
; CHECK-LABEL: @_Z2p2bb(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    br i1 false, label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* @g2
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z2p4bb(i1 zeroext %b1, i1 zeroext %b2) {
; CHECK-LABEL: @_Z2p4bb(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    br i1 false, label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* @g3
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z2p5bb(i1 zeroext %b1, i1 zeroext %b2) {
; CHECK-LABEL: @_Z2p5bb(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    br i1 false, label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* @g4
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z2p6bb(i1 zeroext %b1, i1 zeroext %b2) {
; CHECK-LABEL: @_Z2p6bb(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    br i1 false, label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* @g5
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z4nopebbPi(i1 zeroext %b1, i1 zeroext %b2, i32* readnone %q) {
; CHECK-LABEL: @_Z4nopebbPi(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[MSTACKDATA:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    [[I1:%.*]] = getelementptr inbounds [10 x i32], [10 x i32]* [[MSTACKDATA]], i64 0, i64 0
; CHECK-NEXT:    [[I2:%.*]] = select i1 [[B1:%.*]], i32* [[I1]], i32* [[Q:%.*]]
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[DOTV:%.*]] = select i1 [[B2:%.*]], i8* [[I3]], i8* [[I4]]
; CHECK-NEXT:    [[I5:%.*]] = bitcast i8* [[DOTV]] to i32*
; CHECK-NEXT:    [[I6:%.*]] = icmp eq i32* [[I5]], [[I2]]
; CHECK-NEXT:    br i1 [[I6]], label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* %q
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z2p3bb(i1 zeroext %b1, i1 zeroext %b2) {
; CHECK-LABEL: @_Z2p3bb(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[MSTACKDATA:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    [[I1:%.*]] = getelementptr inbounds [10 x i32], [10 x i32]* [[MSTACKDATA]], i64 0, i64 0
; CHECK-NEXT:    [[I2:%.*]] = select i1 [[B1:%.*]], i32* [[I1]], i32* @g1
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[DOTV:%.*]] = select i1 [[B2:%.*]], i8* [[I3]], i8* [[I4]]
; CHECK-NEXT:    [[I5:%.*]] = bitcast i8* [[DOTV]] to i32*
; CHECK-NEXT:    [[I6:%.*]] = icmp eq i32* [[I5]], [[I2]]
; CHECK-NEXT:    br i1 [[I6]], label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* @g1
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z2p7bb(i1 zeroext %b1, i1 zeroext %b2) {
; CHECK-LABEL: @_Z2p7bb(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[MSTACKDATA:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    [[I1:%.*]] = getelementptr inbounds [10 x i32], [10 x i32]* [[MSTACKDATA]], i64 0, i64 0
; CHECK-NEXT:    [[I2:%.*]] = select i1 [[B1:%.*]], i32* [[I1]], i32* @g6
; CHECK-NEXT:    [[I3:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I4:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[DOTV:%.*]] = select i1 [[B2:%.*]], i8* [[I3]], i8* [[I4]]
; CHECK-NEXT:    [[I5:%.*]] = bitcast i8* [[DOTV]] to i32*
; CHECK-NEXT:    [[I6:%.*]] = icmp eq i32* [[I5]], [[I2]]
; CHECK-NEXT:    br i1 [[I6]], label [[BB8:%.*]], label [[BB7:%.*]]
; CHECK:       bb7:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I3]]) #[[ATTR3]]
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I4]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB8]]
; CHECK:       bb8:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i2 = select i1 %b1, i32* %i1, i32* @g6
  %i3 = tail call noalias i8* @_Znam(i64 48) #3
  %i4 = tail call noalias i8* @_Znam(i64 48) #3
  %.v = select i1 %b2, i8* %i3, i8* %i4
  %i5 = bitcast i8* %.v to i32*
  %i6 = icmp eq i32* %i5, %i2
  br i1 %i6, label %bb8, label %bb7

bb7:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i3) #4
  call void @_ZdaPv(i8* %i4) #4
  br label %bb8

bb8:                                              ; preds = %bb7, %bb
  ret void
}

define void @_Z2p2v(i32 %c) {
; CHECK-LABEL: @_Z2p2v(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[MSTACKDATA:%.*]] = alloca [10 x i32], i32 [[C:%.*]], align 16
; CHECK-NEXT:    [[I1:%.*]] = tail call noalias i8* @_Znam(i64 48) #[[ATTR2]]
; CHECK-NEXT:    [[I2:%.*]] = bitcast i8* [[I1]] to i32*
; CHECK-NEXT:    [[I3:%.*]] = getelementptr inbounds [10 x i32], [10 x i32]* [[MSTACKDATA]], i64 0, i64 0
; CHECK-NEXT:    [[I4:%.*]] = icmp eq i32* [[I2]], [[I3]]
; CHECK-NEXT:    br i1 [[I4]], label [[BB6:%.*]], label [[BB5:%.*]]
; CHECK:       bb5:
; CHECK-NEXT:    call void @_ZdaPv(i8* [[I1]]) #[[ATTR3]]
; CHECK-NEXT:    br label [[BB6]]
; CHECK:       bb6:
; CHECK-NEXT:    ret void
;
bb:
  %mStackData = alloca [10 x i32], i32 %c, align 16
  %i = bitcast [10 x i32]* %mStackData to i8*
  %i1 = tail call noalias i8* @_Znam(i64 48) #3
  %i2 = bitcast i8* %i1 to i32*
  %i3 = getelementptr inbounds [10 x i32], [10 x i32]* %mStackData, i64 0, i64 0
  %i4 = icmp eq i32* %i2, %i3
  br i1 %i4, label %bb6, label %bb5

bb5:                                              ; preds = %bb
  call void @_ZdaPv(i8* %i1) #4
  br label %bb6

bb6:                                              ; preds = %bb5, %bb
  ret void
}

; Function Attrs: nobuiltin
declare noalias i8* @_Znam(i64) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) #2

attributes #1 = { nobuiltin }
attributes #2 = { nobuiltin nounwind }
attributes #3 = { builtin }
attributes #4 = { builtin nounwind }
