; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=instsimplify -S | FileCheck %s
; RUN: opt < %s -passes=instsimplify -data-layout=p:32:32-p1:64:64-z0:1-z2:neg1-z3:neg1-z5:neg1 -S < %s | FileCheck %s --check-prefixes=CHECK-DL

declare void @llvm.assume(i1)
declare dereferenceable(4) ptr @returns_nonnull_deref_helper()

define i1 @gep14(ptr %ptr) {
; CHECK-LABEL: @gep14(
; CHECK-NEXT:    [[X:%.*]] = getelementptr inbounds { {}, i8 }, ptr [[PTR:%.*]], i32 0, i32 1
; CHECK-NEXT:    [[CMP:%.*]] = icmp eq ptr [[X]], null
; CHECK-NEXT:    ret i1 [[CMP]]
;
; CHECK-DL-LABEL: @gep14(
; CHECK-DL-NEXT:    ret i1 false
;
; We can't simplify this because the offset of one in the GEP actually doesn't
; move the pointer.
  %x = getelementptr inbounds { {}, i8 }, ptr %ptr, i32 0, i32 1
  %cmp = icmp eq ptr %x, null
  ret i1 %cmp
}

declare dereferenceable(4) ptr addrspace(1) @returns_nonnull_deref_as_helper()
define i1 @nonnull_load_as_inner(ptr %addr) {
; CHECK-LABEL: @nonnull_load_as_inner(
; CHECK-NEXT:    ret i1 false
;
; CHECK-DL-LABEL: @nonnull_load_as_inner(
; CHECK-DL-NEXT:    [[PTR:%.*]] = load ptr addrspace(1), ptr [[ADDR:%.*]], align 8, !nonnull [[META0:![0-9]+]]
; CHECK-DL-NEXT:    [[CMP:%.*]] = icmp eq ptr addrspace(1) [[PTR]], null
; CHECK-DL-NEXT:    ret i1 [[CMP]]
;
  %ptr = load ptr addrspace(1), ptr %addr, !nonnull !{}
  %cmp = icmp eq ptr addrspace(1) %ptr, null
  ret i1 %cmp
}

@A = global i32 0
@B = global i32 0
@A.alias = alias i32, ptr @A

define i1 @globals_inequal() {
; CHECK-LABEL: @globals_inequal(
; CHECK-NEXT:    ret i1 true
;
; CHECK-DL-LABEL: @globals_inequal(
; CHECK-DL-NEXT:    ret i1 true
;
  %res = icmp ne ptr @A, @B
  ret i1 %res
}

; TODO: Never equal
define i1 @globals_offset_inequal() {
; CHECK-LABEL: @globals_offset_inequal(
; CHECK-NEXT:    ret i1 icmp ne (ptr getelementptr (i8, ptr @A, i64 1), ptr getelementptr (i8, ptr @B, i64 1))
;
; CHECK-DL-LABEL: @globals_offset_inequal(
; CHECK-DL-NEXT:    ret i1 icmp ne (ptr getelementptr (i8, ptr @A, i32 1), ptr getelementptr (i8, ptr @B, i32 1))
;
  %a.off = getelementptr i8, ptr @A, i32 1
  %b.off = getelementptr i8, ptr @B, i32 1
  %res = icmp ne ptr %a.off, %b.off
  ret i1 %res
}
