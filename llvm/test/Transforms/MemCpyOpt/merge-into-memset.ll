; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -memcpyopt -S -verify-memoryssa | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

; Don't delete the memcpy in %if.then, even though it depends on an instruction
; which will be deleted.

define void @foo(i1 %c, ptr %d, ptr %e, ptr %f) {
; CHECK-LABEL: @foo(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP:%.*]] = alloca [50 x i8], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds i8, ptr [[TMP]], i64 1
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr nonnull [[D:%.*]], i8 0, i64 10, i1 false)
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 8 [[TMP]], i8 0, i64 11, i1 false)
; CHECK-NEXT:    br i1 [[C:%.*]], label [[IF_THEN:%.*]], label [[EXIT:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    call void @llvm.memset.p0.i64(ptr align 8 [[F:%.*]], i8 0, i64 11, i1 false)
; CHECK-NEXT:    br label [[EXIT]]
; CHECK:       exit:
; CHECK-NEXT:    ret void
;
entry:
  %tmp = alloca [50 x i8], align 8
  %tmp1 = getelementptr inbounds i8, ptr %tmp, i64 1
  call void @llvm.memset.p0.i64(ptr nonnull %d, i8 0, i64 10, i1 false)
  store i8 0, ptr %tmp, align 8
  call void @llvm.memcpy.p0.p0.i64(ptr nonnull %tmp1, ptr nonnull %d, i64 10, i1 false)
  br i1 %c, label %if.then, label %exit

if.then:
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %f, ptr nonnull align 8 %tmp, i64 30, i1 false)
  br label %exit

exit:
  ret void
}

declare void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
declare void @llvm.memset.p0.i64(ptr, i8, i64, i1)
