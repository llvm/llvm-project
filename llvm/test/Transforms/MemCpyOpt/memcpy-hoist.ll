; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=memcpyopt -S -verify-memoryssa | FileCheck %s

declare void @clobber()
declare ptr @newmem()
declare i64 @copyout(ptr)

define i64 @simple_hoist(ptr align(8) %0, i64 signext %i) {
; CHECK-LABEL: define i64 @simple_hoist(
; CHECK-SAME: ptr align 8 [[TMP0:%.*]], i64 signext [[I:%.*]]) {
; CHECK-NEXT:  [[TOP:.*:]]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i64, ptr [[TMP0]], i64 [[I]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[TMP2]], i64 -8
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 8
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    ret i64 [[TMP4]]
;
top:
  %1 = alloca [8 x i64], align 8
  call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %0, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  %2 = getelementptr i64, ptr %1, i64 %i
  %3 = getelementptr i8, ptr %2, i64 -8
  call void @clobber()
  %4 = load i64, ptr %3, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  ret i64 %4
}

define i64 @use_nohoist(i64 signext %i) {
; CHECK-LABEL: define i64 @use_nohoist(
; CHECK-SAME: i64 signext [[I:%.*]]) {
; CHECK-NEXT:  [[TOP:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call noalias align 8 ptr @newmem()
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i64, ptr [[TMP0]], i64 [[I]]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i8, ptr [[TMP1]], i64 -8
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    [[TMP3:%.*]] = call i64 @copyout(ptr readonly captures(none) [[TMP2]])
; CHECK-NEXT:    ret i64 [[TMP3]]
;
top:
  %0 = alloca [8 x i64], align 8
  %1 = call noalias align(8) ptr @newmem()
  call void @llvm.memcpy.p0.p0.i64(ptr %0, ptr %1, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  %2 = getelementptr i64, ptr %0, i64 %i
  %3 = getelementptr i8, ptr %2, i64 -8
  call void @clobber()
  %4 = call i64 @copyout(ptr readonly nocapture %3)
  ret i64 %4
}

define i64 @use_hoist(i64 signext %i) {
; CHECK-LABEL: define i64 @use_hoist(
; CHECK-SAME: i64 signext [[I:%.*]]) {
; CHECK-NEXT:  [[TOP:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca [8 x i64], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = call align 8 ptr @newmem()
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP0]], ptr [[TMP1]], i64 64, i1 false), !tbaa [[TBAA0:![0-9]+]], !alias.scope [[META3:![0-9]+]], !noalias [[META7:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i64, ptr [[TMP0]], i64 [[I]]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, ptr [[TMP2]], i64 -8
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    [[TMP4:%.*]] = call i64 @copyout(ptr captures(none) [[TMP3]]) #[[ATTR1:[0-9]+]]
; CHECK-NEXT:    ret i64 [[TMP4]]
;
top:
  %0 = alloca [8 x i64], align 8
  %1 = call align(8) ptr @newmem()
  call void @llvm.memcpy.p0.p0.i64(ptr %0, ptr %1, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  %2 = getelementptr i64, ptr %0, i64 %i
  %3 = getelementptr i8, ptr %2, i64 -8
  call void @clobber()
  %4 = call i64 @copyout(ptr nocapture %3) readonly
  ret i64 %4
}

define i64 @cond_nohoist(ptr align(8) %0, i64 signext %i, i1 %c) {
; CHECK-LABEL: define i64 @cond_nohoist(
; CHECK-SAME: ptr align 8 [[TMP0:%.*]], i64 signext [[I:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:  [[TOP:.*:]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca [8 x i64], align 8
; CHECK-NEXT:    [[P:%.*]] = getelementptr i64, ptr [[TMP1]], i64 1
; CHECK-NEXT:    [[UD:%.*]] = load i64, ptr [[P]], align 8, !tbaa [[TBAA11:![0-9]+]], !alias.scope [[META13:![0-9]+]], !noalias [[META14:![0-9]+]]
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP1]], ptr [[TMP0]], i64 64, i1 false), !tbaa [[TBAA0]], !alias.scope [[META3]], !noalias [[META7]]
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    br i1 [[C]], label %[[L1:.*]], label %[[L2:.*]]
; CHECK:       [[L1]]:
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr i64, ptr [[TMP1]], i64 [[I]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[TMP2]], i64 -8
; CHECK-NEXT:    [[TMP6:%.*]] = load i64, ptr [[TMP4]], align 8, !tbaa [[TBAA11]], !alias.scope [[META13]], !noalias [[META14]]
; CHECK-NEXT:    ret i64 [[TMP6]]
; CHECK:       [[L2]]:
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr i64, ptr [[TMP1]], i64 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[TMP5]], align 8, !tbaa [[TBAA11]], !alias.scope [[META13]], !noalias [[META14]]
; CHECK-NEXT:    ret i64 [[TMP3]]
;
top:
  %1 = alloca [8 x i64], align 8
  %p = getelementptr i64, ptr %1, i64 1
  %ud = load i64, ptr %p, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %0, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  call void @clobber()
  br i1 %c, label %L1, label %L2

L1:                                               ; preds = %top
  %2 = getelementptr i64, ptr %1, i64 %i
  %3 = getelementptr i8, ptr %2, i64 -8
  %4 = load i64, ptr %3, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  ret i64 %4

L2:                                               ; preds = %top
  %5 = getelementptr i64, ptr %1, i64 2
  %6 = load i64, ptr %5, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  ret i64 %6
}

define i64 @pdt_hoist(ptr align(8) %0, i64 signext %i, i1 %c) {
; CHECK-LABEL: define i64 @pdt_hoist(
; CHECK-SAME: ptr align 8 [[TMP0:%.*]], i64 signext [[I:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:  [[TOP:.*:]]
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr i64, ptr [[TMP0]], i64 2
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, ptr [[TMP1]], align 8
; CHECK-NEXT:    br i1 [[C]], label %[[L1:.*]], label %[[L2:.*]]
; CHECK:       [[L1]]:
; CHECK-NEXT:    br label %[[L2]]
; CHECK:       [[L2]]:
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    ret i64 [[TMP3]]
;
top:
  %1 = alloca [8 x i64], align 8
  call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %0, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  br i1 %c, label %L1, label %L2

L1:                                               ; preds = %top
  br label %L2

L2:                                               ; preds = %L1, %top
  %2 = getelementptr i64, ptr %1, i64 2
  call void @clobber()
  %3 = load i64, ptr %2, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  ret i64 %3
}

define i64 @phi_nohoist(ptr align(8) %0, i64 signext %i, i1 %c) {
; CHECK-LABEL: define i64 @phi_nohoist(
; CHECK-SAME: ptr align 8 [[TMP0:%.*]], i64 signext [[I:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:  [[TOP:.*]]:
; CHECK-NEXT:    [[TMP1:%.*]] = alloca [8 x i64], align 8
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr [[TMP1]], ptr [[TMP0]], i64 64, i1 false), !tbaa [[TBAA0]], !alias.scope [[META3]], !noalias [[META7]]
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    br i1 [[C]], label %[[L1:.*]], label %[[L2:.*]]
; CHECK:       [[L1]]:
; CHECK-NEXT:    br label %[[L2]]
; CHECK:       [[L2]]:
; CHECK-NEXT:    [[TMP2:%.*]] = phi i64 [ 1, %[[L1]] ], [ 2, %[[TOP]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i64, ptr [[TMP1]], i64 [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 8, !tbaa [[TBAA11]], !alias.scope [[META13]], !noalias [[META14]]
; CHECK-NEXT:    ret i64 [[TMP4]]
;
top:
  %1 = alloca [8 x i64], align 8
  call void @llvm.memcpy.p0.p0.i64(ptr %1, ptr %0, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  call void @clobber()
  br i1 %c, label %L1, label %L2

L1:                                               ; preds = %top
  br label %L2

L2:                                               ; preds = %L1, %top
  %2 = phi i64 [ 1, %L1 ], [ 2, %top ]
  %3 = getelementptr i64, ptr %1, i64 %2
  %4 = load i64, ptr %3, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  ret i64 %4
}

define i64 @vla_hoist(ptr align(8) %0, i64 signext %i, i1 %c) {
; CHECK-LABEL: define i64 @vla_hoist(
; CHECK-SAME: ptr align 8 [[TMP0:%.*]], i64 signext [[I:%.*]], i1 [[C:%.*]]) {
; CHECK-NEXT:  [[TOP:.*]]:
; CHECK-NEXT:    br i1 [[C]], label %[[L1:.*]], label %[[L2:.*]]
; CHECK:       [[L1]]:
; CHECK-NEXT:    br label %[[L2]]
; CHECK:       [[L2]]:
; CHECK-NEXT:    [[TMP1:%.*]] = phi i64 [ 1, %[[L1]] ], [ 2, %[[TOP]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i64, ptr [[TMP0]], i64 [[TMP1]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, ptr [[TMP3]], align 8
; CHECK-NEXT:    call void @clobber()
; CHECK-NEXT:    ret i64 [[TMP4]]
;
top:
  br i1 %c, label %L1, label %L2

L1:                                               ; preds = %top
  br label %L2

L2:                                               ; preds = %L1, %top
  %1 = phi i64 [ 1, %L1 ], [ 2, %top ]
  %2 = alloca [8 x i64], align 8
  call void @llvm.memcpy.p0.p0.i64(ptr %2, ptr %0, i64 64, i1 false), !tbaa !0, !alias.scope !3, !noalias !7
  %3 = getelementptr i64, ptr %2, i64 %1
  call void @clobber()
  %4 = load i64, ptr %3, align 8, !tbaa !11, !alias.scope !13, !noalias !14
  ret i64 %4
}

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #0

attributes #0 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!0 = !{!1, !1, i64 0}
!1 = !{!"jtbaa", !2, i64 0}
!2 = !{!"jtbaa"}
!3 = !{!4, !6}
!4 = !{!"jnoalias_data", !5}
!5 = !{!"jnoalias"}
!6 = !{!"jnoalias_stack", !5}
!7 = !{!8, !9, !10}
!8 = !{!"jnoalias_gcframe", !5}
!9 = !{!"jnoalias_typemd", !5}
!10 = !{!"jnoalias_const", !5}
!11 = !{!12, !12, i64 0}
!12 = !{!"jtbaa_stack", !1, i64 0}
!13 = !{!6}
!14 = !{!8, !4, !9, !10}
;.
; CHECK: [[TBAA0]] = !{[[META1:![0-9]+]], [[META1]], i64 0}
; CHECK: [[META1]] = !{!"jtbaa", [[META2:![0-9]+]], i64 0}
; CHECK: [[META2]] = !{!"jtbaa"}
; CHECK: [[META3]] = !{[[META4:![0-9]+]], [[META6:![0-9]+]]}
; CHECK: [[META4]] = !{!"jnoalias_data", [[META5:![0-9]+]]}
; CHECK: [[META5]] = !{!"jnoalias"}
; CHECK: [[META6]] = !{!"jnoalias_stack", [[META5]]}
; CHECK: [[META7]] = !{[[META8:![0-9]+]], [[META9:![0-9]+]], [[META10:![0-9]+]]}
; CHECK: [[META8]] = !{!"jnoalias_gcframe", [[META5]]}
; CHECK: [[META9]] = !{!"jnoalias_typemd", [[META5]]}
; CHECK: [[META10]] = !{!"jnoalias_const", [[META5]]}
; CHECK: [[TBAA11]] = !{[[META12:![0-9]+]], [[META12]], i64 0}
; CHECK: [[META12]] = !{!"jtbaa_stack", [[META1]], i64 0}
; CHECK: [[META13]] = !{[[META6]]}
; CHECK: [[META14]] = !{[[META8]], [[META4]], [[META9]], [[META10]]}
;.
