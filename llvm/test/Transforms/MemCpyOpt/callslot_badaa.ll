; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -S -passes=memcpyopt | FileCheck %s

declare void @use(ptr)

; Make sure callslot optimization merges alias.scope metadata correctly when it merges instructions.
; Merging here naively generates:
;  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %dst, ptr align 8 %src, i64 1, i1 false), !alias.scope !3
;  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %src), !noalias !0
;   ...
;  !0 = !{!1}
;  !1 = distinct !{!1, !2, !"callee1: %a"}
;  !2 = distinct !{!2, !"callee1"}
;  !3 = !{!1, !4}
;  !4 = distinct !{!4, !5, !"callee0: %a"}
;  !5 = distinct !{!5, !"callee0"}
; Which is incorrect because the lifetime.end of %src will now "noalias" the above memcpy.
define i8 @test(i8 %input) {
; CHECK-LABEL: define i8 @test(
; CHECK-SAME: i8 [[INPUT:%.*]]) {
; CHECK-NEXT:    [[DST:%.*]] = alloca i8, align 1
; CHECK-NEXT:    [[SRC:%.*]] = alloca i8, align 1
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 1, ptr nonnull [[SRC]]), !noalias [[META0:![0-9]+]]
; CHECK-NEXT:    store i8 [[INPUT]], ptr [[SRC]], align 1
; CHECK-NEXT:    [[RET_VALUE:%.*]] = load i8, ptr [[SRC]], align 1
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 1, ptr nonnull [[SRC]]), !noalias [[META0]]
; CHECK-NEXT:    call void @use(ptr [[SRC]])
; CHECK-NEXT:    ret i8 [[RET_VALUE]]
;
  %tmp = alloca i8
  %dst = alloca i8
  %src = alloca i8
  call void @llvm.lifetime.start.p0(i64 1, ptr nonnull %src), !noalias !3
  store i8 %input, ptr %src
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %tmp, ptr align 8 %src, i64 1, i1 false), !alias.scope !0
  call void @llvm.lifetime.end.p0(i64 1, ptr nonnull %src), !noalias !3
  call void @llvm.memcpy.p0.p0.i64(ptr align 8 %dst, ptr align 8 %tmp, i64 1, i1 false), !alias.scope !3
  %ret_value = load i8, ptr %dst
  call void @use(ptr %src)
  ret i8 %ret_value
}

declare void @llvm.lifetime.start.p0(i64, ptr nocapture)
declare void @llvm.lifetime.end.p0(i64, ptr nocapture)
declare void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)

!0 = !{!1}
!1 = distinct !{!1, !2, !"callee0: %a"}
!2 = distinct !{!2, !"callee0"}
!3 = !{!4}
!4 = distinct !{!4, !5, !"callee1: %a"}
!5 = distinct !{!5, !"callee1"}
;.
; CHECK: [[META0]] = !{[[META1:![0-9]+]]}
; CHECK: [[META1]] = distinct !{[[META1]], [[META2:![0-9]+]], !"callee1: %a"}
; CHECK: [[META2]] = distinct !{[[META2]], !"callee1"}
;.
