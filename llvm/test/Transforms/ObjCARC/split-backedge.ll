; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=objc-arc < %s | FileCheck %s

; Handle a retain+release pair entirely contained within a split loop backedge.
; rdar://11256239

define void @test0() personality ptr @__objc_personality_v0 {
; CHECK-LABEL: define void @test0() personality ptr @__objc_personality_v0 {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    br label %[[WHILE_BODY:.*]]
; CHECK:       [[WHILE_BODY]]:
; CHECK-NEXT:    [[CALL:%.*]] = invoke ptr @returner()
; CHECK-NEXT:            to label %[[INVOKE_CONT:.*]] unwind label %[[LPAD:.*]], !clang.arc.no_objc_arc_exceptions [[META0:![0-9]+]]
; CHECK:       [[INVOKE_CONT]]:
; CHECK-NEXT:    [[T0:%.*]] = tail call ptr @llvm.objc.retain(ptr [[CALL]]) #[[ATTR0:[0-9]+]]
; CHECK-NEXT:    [[T1:%.*]] = tail call ptr @llvm.objc.retain(ptr [[CALL]]) #[[ATTR0]]
; CHECK-NEXT:    [[CALL_I1:%.*]] = invoke ptr @returner()
; CHECK-NEXT:            to label %[[INVOKE_CONT1:.*]] unwind label %[[LPAD]]
; CHECK:       [[INVOKE_CONT1]]:
; CHECK-NEXT:    [[COND:%.*]] = select i1 undef, ptr null, ptr [[CALL]]
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[COND]]) #[[ATTR0]]
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[CALL]]) #[[ATTR0]]
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[CALL]]) #[[ATTR0]]
; CHECK-NEXT:    call void @use_pointer(ptr [[COND]])
; CHECK-NEXT:    [[TMP0:%.*]] = tail call ptr @llvm.objc.retain(ptr [[COND]]) #[[ATTR0]]
; CHECK-NEXT:    br label %[[WHILE_BODY]]
; CHECK:       [[LPAD]]:
; CHECK-NEXT:    [[T4:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            catch ptr null
; CHECK-NEXT:    ret void
;
entry:
  br label %while.body

while.body:                                       ; preds = %while.cond
  %call = invoke ptr @returner()
  to label %invoke.cont unwind label %lpad, !clang.arc.no_objc_arc_exceptions !0

invoke.cont:                                      ; preds = %while.body
  %t0 = call ptr @llvm.objc.retain(ptr %call) nounwind
  %t1 = call ptr @llvm.objc.retain(ptr %call) nounwind
  %call.i1 = invoke ptr @returner()
  to label %invoke.cont1 unwind label %lpad

invoke.cont1:                                     ; preds = %invoke.cont
  %cond = select i1 undef, ptr null, ptr %call
  %t2 = call ptr @llvm.objc.retain(ptr %cond) nounwind
  call void @llvm.objc.release(ptr %call) nounwind
  call void @llvm.objc.release(ptr %call) nounwind
  call void @use_pointer(ptr %cond)
  call void @llvm.objc.release(ptr %cond) nounwind
  br label %while.body

lpad:                                             ; preds = %invoke.cont, %while.body
  %t4 = landingpad { ptr, i32 }
  catch ptr null
  ret void
}

declare ptr @returner()
declare i32 @__objc_personality_v0(...)
declare void @llvm.objc.release(ptr)
declare ptr @llvm.objc.retain(ptr)
declare void @use_pointer(ptr)

!0 = !{}

;.
; CHECK: [[META0]] = !{}
;.
