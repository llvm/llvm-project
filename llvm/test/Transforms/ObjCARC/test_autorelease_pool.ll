; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; Test for autorelease pool optimizations
; RUN: opt -passes=objc-arc < %s -S | FileCheck %s

declare ptr @llvm.objc.autoreleasePoolPush()
declare void @llvm.objc.autoreleasePoolPop(ptr)
declare ptr @llvm.objc.autorelease(ptr)
declare ptr @llvm.objc.retain(ptr)
declare ptr @create_object()
declare void @use_object(ptr)
declare ptr @object_with_thing()

; Test 1: Empty autorelease pool should be eliminated
define void @test_empty_pool() {
; CHECK-LABEL: define void @test_empty_pool() {
; CHECK-NEXT:    ret void
;
  %pool = call ptr @llvm.objc.autoreleasePoolPush()
  call void @llvm.objc.autoreleasePoolPop(ptr %pool)
  ret void
}

; Test 2: Pool with only release should be removed
define void @test_autorelease_to_release() {
; CHECK-LABEL: define void @test_autorelease_to_release() {
; CHECK-NEXT:    [[OBJ:%.*]] = call ptr @create_object()
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[OBJ]]) #[[ATTR0:[0-9]+]], !clang.imprecise_release [[META0:![0-9]+]]
; CHECK-NEXT:    ret void
;
  %obj = call ptr @create_object()
  %pool = call ptr @llvm.objc.autoreleasePoolPush()
  call ptr @llvm.objc.autorelease(ptr %obj)
  call void @llvm.objc.autoreleasePoolPop(ptr %pool)
  ret void
}

; Test 3: Pool with autoreleases should not be optimized
define void @test_multiple_autoreleases() {
; CHECK-LABEL: define void @test_multiple_autoreleases() {
; CHECK-NEXT:    [[OBJ1:%.*]] = call ptr @create_object()
; CHECK-NEXT:    [[OBJ2:%.*]] = call ptr @create_object()
; CHECK-NEXT:    [[POOL:%.*]] = call ptr @llvm.objc.autoreleasePoolPush() #[[ATTR0]]
; CHECK-NEXT:    call void @use_object(ptr [[OBJ1]])
; CHECK-NEXT:    [[TMP1:%.*]] = call ptr @llvm.objc.autorelease(ptr [[OBJ1]]) #[[ATTR0]]
; CHECK-NEXT:    call void @use_object(ptr [[OBJ2]])
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[OBJ2]]) #[[ATTR0]], !clang.imprecise_release [[META0]]
; CHECK-NEXT:    call void @llvm.objc.autoreleasePoolPop(ptr [[POOL]]) #[[ATTR0]]
; CHECK-NEXT:    ret void
;
  %obj1 = call ptr @create_object()
  %obj2 = call ptr @create_object()
  %pool = call ptr @llvm.objc.autoreleasePoolPush()
  call void @use_object(ptr %obj1)
  call ptr @llvm.objc.autorelease(ptr %obj1)
  call void @use_object(ptr %obj2)
  call ptr @llvm.objc.autorelease(ptr %obj2)
  call void @llvm.objc.autoreleasePoolPop(ptr %pool)
  ret void
}

; Test 4: Pool with calls should not be optimized
define void @test_calls() {
; CHECK-LABEL: define void @test_calls() {
; CHECK-NEXT:    [[POOL:%.*]] = call ptr @llvm.objc.autoreleasePoolPush() #[[ATTR0]]
; CHECK-NEXT:    [[OBJ1:%.*]] = call ptr @object_with_thing()
; CHECK-NEXT:    call void @use_object(ptr [[OBJ1]])
; CHECK-NEXT:    call void @llvm.objc.autoreleasePoolPop(ptr [[POOL]]) #[[ATTR0]]
; CHECK-NEXT:    ret void
;
  %pool = call ptr @llvm.objc.autoreleasePoolPush()
  %obj1 = call ptr @object_with_thing()
  call void @use_object(ptr %obj1)
  call void @llvm.objc.autoreleasePoolPop(ptr %pool)
  ret void
}

;.
; CHECK: [[META0]] = !{}
;.
