; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=objc-arc -S %s | FileCheck %s

%0 = type opaque

; Make sure ARC optimizer doesn't sink @obj_retain past @llvm.objc.clang.arc.use.


define void @runTest() local_unnamed_addr {
; CHECK-LABEL: define void @runTest() local_unnamed_addr {
; CHECK-NEXT:    [[TMP1:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[TMP2:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    [[TMP3:%.*]] = tail call ptr @foo0()
; CHECK-NEXT:    [[TMP4:%.*]] = tail call ptr @llvm.objc.retainAutoreleasedReturnValue(ptr [[TMP3]]) #[[ATTR0:[0-9]+]]
; CHECK-NEXT:    store ptr [[TMP3]], ptr [[TMP1]], align 8
; CHECK-NEXT:    call void @foo1(ptr nonnull [[TMP1]])
; CHECK-NEXT:    [[TMP5:%.*]] = load ptr, ptr [[TMP1]], align 8
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[TMP5]]) #[[ATTR0]]
; CHECK-NEXT:    call void (...) @llvm.objc.clang.arc.use(ptr [[TMP3]])
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[TMP3]]) #[[ATTR0]]
; CHECK-NEXT:    store ptr [[TMP5]], ptr [[TMP2]], align 8
; CHECK-NEXT:    call void @foo1(ptr nonnull [[TMP2]])
; CHECK-NEXT:    [[TMP6:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[TMP6]]) #[[ATTR0]]
; CHECK-NEXT:    call void (...) @llvm.objc.clang.arc.use(ptr [[TMP5]])
; CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[TMP2]], align 8
; CHECK-NEXT:    [[TMP7:%.*]] = tail call ptr @llvm.objc.retain(ptr [[TMP5]]) #[[ATTR0]]
; CHECK-NEXT:    call void @foo2(ptr [[TMP6]])
; CHECK-NEXT:    [[TMP8:%.*]] = tail call ptr @llvm.objc.retain(ptr [[TMP6]]) #[[ATTR0]]
; CHECK-NEXT:    ret void
;
  %1 = alloca ptr, align 8
  %2 = alloca ptr, align 8
  %3 = tail call ptr @foo0()
  %4 = tail call ptr @llvm.objc.retainAutoreleasedReturnValue(ptr %3)
  store ptr %3, ptr %1, align 8
  call void @foo1(ptr nonnull %1)
  %5 = load ptr, ptr %1, align 8
  %6 = call ptr @llvm.objc.retain(ptr %5)
  call void (...) @llvm.objc.clang.arc.use(ptr %3)
  call void @llvm.objc.release(ptr %3)
  store ptr %5, ptr %2, align 8
  call void @foo1(ptr nonnull %2)
  %7 = load ptr, ptr %2, align 8
  %8 = call ptr @llvm.objc.retain(ptr %7)
  call void (...) @llvm.objc.clang.arc.use(ptr %5)
  %tmp1 = load ptr, ptr %2, align 8
  call void @llvm.objc.release(ptr %5)
  call void @foo2(ptr %7)
  call void @llvm.objc.release(ptr %7)
  ret void
}

declare ptr @foo0() local_unnamed_addr
declare void @foo1(ptr) local_unnamed_addr
declare void @foo2(ptr) local_unnamed_addr

declare ptr @llvm.objc.retainAutoreleasedReturnValue(ptr) local_unnamed_addr
declare ptr @llvm.objc.retain(ptr) local_unnamed_addr
declare void @llvm.objc.clang.arc.use(...) local_unnamed_addr
declare void @llvm.objc.release(ptr) local_unnamed_addr
