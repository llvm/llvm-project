; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -mtriple=x86_64-windows-msvc -passes=objc-arc -S < %s | FileCheck %s

; Check that funclet tokens are preserved, and that the optimization correctly
; reorders retain and release calls while preserving the funclet operand.

define void @try_catch_with_objc_intrinsic() personality ptr @__CxxFrameHandler3 {
; CHECK-LABEL: @try_catch_with_objc_intrinsic(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[EXN_SLOT:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    invoke void @may_throw(ptr null)
; CHECK-NEXT:            to label %eh.cont unwind label %catch.dispatch
; CHECK:       catch.dispatch:
; CHECK-NEXT:    [[TMP0:%.*]] = catchswitch within none [label %catch] unwind to caller
; CHECK:       eh.cont:
; CHECK-NEXT:    ret void
; CHECK:       catch:
; CHECK-NEXT:    [[TMP1:%.*]] = catchpad within [[TMP0]] [ptr null, i32 0, ptr [[EXN_SLOT]]]
; CHECK-NEXT:    br label %if.then
; CHECK:       if.then:
; CHECK-NEXT:    [[EXN:%.*]] = load ptr, ptr null, align 8
; CHECK-NEXT:    call void @llvm.objc.release(ptr [[EXN]]) #[[ATTR0:[0-9]+]] [ "funclet"(token [[TMP1]]) ]
; CHECK-NEXT:    call void @may_throw(ptr [[EXN]])
; CHECK-NEXT:    [[TMP2:%.*]] = tail call ptr @llvm.objc.retain(ptr [[EXN]]) #[[ATTR0]] [ "funclet"(token [[TMP1]]) ]
; CHECK-NEXT:    catchret from [[TMP1]] to label %eh.cont
;
entry:
  %exn.slot = alloca ptr, align 8
  invoke void @may_throw(ptr null) to label %eh.cont unwind label %catch.dispatch

catch.dispatch:                                   ; preds = %entry
  %0 = catchswitch within none [label %catch] unwind to caller

eh.cont:                                          ; preds = %catch, %entry
  ret void

catch:                                            ; preds = %catch.dispatch
  %1 = catchpad within %0 [ptr null, i32 0, ptr %exn.slot]
  br label %if.then

if.then:                                          ; preds = %catch
  %exn = load ptr, ptr null, align 8
  %2 = call ptr @llvm.objc.retain(ptr %exn) [ "funclet"(token %1) ]
  call void @may_throw(ptr %exn)
  call void @llvm.objc.release(ptr %exn) [ "funclet"(token %1) ]
  catchret from %1 to label %eh.cont
}

declare void @may_throw(ptr)
declare i32 @__CxxFrameHandler3(...)

declare ptr @llvm.objc.retain(ptr) #0
declare void @llvm.objc.release(ptr) #0

attributes #0 = { nounwind }
