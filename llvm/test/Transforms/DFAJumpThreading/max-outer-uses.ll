; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -S -passes=dfa-jump-threading -dfa-max-out-use-blocks=5 %s | FileCheck %s

define void @max_outer_uses_by_switch(i32 %cond) {
; CHECK-LABEL: define void @max_outer_uses_by_switch(
; CHECK-SAME: i32 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[SWITCH_BB:.*]]
; CHECK:       [[SWITCH_BB]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[ONE:%.*]], %[[CASE1_SUCC:.*]] ], [ 2, %[[CASE2:.*]] ]
; CHECK-NEXT:    switch i32 [[PHI]], label %[[DEFAULT_DEST:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE2]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    br label %[[CASE1_SUCC]]
; CHECK:       [[CASE1_SUCC]]:
; CHECK-NEXT:    [[ONE]] = phi i32 [ 1, %[[CASE1]] ]
; CHECK-NEXT:    switch i32 [[COND]], label %[[SWITCH_BB]] [
; CHECK-NEXT:      i32 0, label %[[OUTER1:.*]]
; CHECK-NEXT:      i32 1, label %[[OUTER2:.*]]
; CHECK-NEXT:      i32 2, label %[[OUTER3:.*]]
; CHECK-NEXT:      i32 3, label %[[OUTER4:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    br label %[[SWITCH_BB]]
; CHECK:       [[OUTER1]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER2]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER3]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER4]]:
; CHECK-NEXT:    ret void
; CHECK:       [[DEFAULT_DEST]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %switch_bb

switch_bb:
  %phi = phi i32 [ 0, %entry ], [ %one, %case1_succ ], [ 2, %case2 ]
  switch i32 %phi, label %default_dest [
  i32 0, label %case1
  i32 1, label %case2
  ]

case1:
  br label %case1_succ

case1_succ:
  %one = phi i32 [ 1, %case1 ]
  switch i32 %cond, label %switch_bb [
  i32 0, label %outer1
  i32 1, label %outer2
  i32 2, label %outer3
  i32 3, label %outer4
  ]

case2:
  br label %switch_bb

outer1:
  ret void

outer2:
  ret void

outer3:
  ret void

outer4:
  ret void

default_dest:
  ret void
}

define void @less_outer_uses_by_switch(i32 %cond, i1 %c1) {
; CHECK-LABEL: define void @less_outer_uses_by_switch(
; CHECK-SAME: i32 [[COND:%.*]], i1 [[C1:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[SWITCH_BB:.*]]
; CHECK:       [[SWITCH_BB]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ poison, %[[CASE1_SUCC:.*]] ]
; CHECK-NEXT:    switch i32 [[PHI]], label %[[DEFAULT_DEST:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[SWITCH_BB_JT2:.*]]:
; CHECK-NEXT:    [[PHI_JT2:%.*]] = phi i32 [ 2, %[[CASE2]] ]
; CHECK-NEXT:    br label %[[DEFAULT_DEST]]
; CHECK:       [[SWITCH_BB_JT1:.*]]:
; CHECK-NEXT:    [[PHI_JT1:%.*]] = phi i32 [ [[ONE_JT1:%.*]], %[[CASE1_SUCC_JT1:.*]] ]
; CHECK-NEXT:    br label %[[CASE2]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    br label %[[CASE1_SUCC_JT1]]
; CHECK:       [[CASE1_SUCC]]:
; CHECK-NEXT:    switch i32 [[COND]], label %[[SWITCH_BB]] [
; CHECK-NEXT:      i32 0, label %[[OUTER1:.*]]
; CHECK-NEXT:      i32 1, label %[[OUTER2:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE1_SUCC_JT1]]:
; CHECK-NEXT:    [[ONE_JT1]] = phi i32 [ 1, %[[CASE1]] ]
; CHECK-NEXT:    switch i32 [[COND]], label %[[SWITCH_BB_JT1]] [
; CHECK-NEXT:      i32 0, label %[[OUTER1]]
; CHECK-NEXT:      i32 1, label %[[OUTER2]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    br label %[[SWITCH_BB_JT2]]
; CHECK:       [[OUTER1]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER2]]:
; CHECK-NEXT:    ret void
; CHECK:       [[DEFAULT_DEST]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %switch_bb

switch_bb:
  %phi = phi i32 [ 0, %entry ], [ %one, %case1_succ ], [ 2, %case2 ]
  switch i32 %phi, label %default_dest [
  i32 0, label %case1
  i32 1, label %case2
  ]

case1:
  br label %case1_succ

case1_succ:
  %one = phi i32 [ 1, %case1 ]
  switch i32 %cond, label %switch_bb [
  i32 0, label %outer1
  i32 1, label %outer2
  ]

case2:
  br label %switch_bb

outer1:
  ret void

outer2:
  ret void

default_dest:
  ret void
}


define void @max_outer_uses_multi_preds(i32 %cond) {
; CHECK-LABEL: define void @max_outer_uses_multi_preds(
; CHECK-SAME: i32 [[COND:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[SWITCH_BB:.*]]
; CHECK:       [[SWITCH_BB]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ poison, %[[CASE1_SUCC:.*]] ]
; CHECK-NEXT:    switch i32 [[PHI]], label %[[DEFAULT_DEST:.*]] [
; CHECK-NEXT:      i32 0, label %[[CASE1:.*]]
; CHECK-NEXT:      i32 1, label %[[CASE2:.*]]
; CHECK-NEXT:      i32 2, label %[[CASE3:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[SWITCH_BB_JT2:.*]]:
; CHECK-NEXT:    [[PHI_JT2:%.*]] = phi i32 [ 2, %[[CASE2]] ]
; CHECK-NEXT:    br label %[[CASE3]]
; CHECK:       [[SWITCH_BB_JT1:.*]]:
; CHECK-NEXT:    [[PHI_JT1:%.*]] = phi i32 [ [[ONE_JT1:%.*]], %[[CASE1_SUCC_JT1:.*]] ]
; CHECK-NEXT:    br label %[[CASE2]]
; CHECK:       [[CASE1]]:
; CHECK-NEXT:    br label %[[CASE1_SUCC_JT1]]
; CHECK:       [[CASE1_SUCC]]:
; CHECK-NEXT:    switch i32 [[COND]], label %[[SWITCH_BB]] [
; CHECK-NEXT:      i32 0, label %[[OUTER1:.*]]
; CHECK-NEXT:      i32 1, label %[[OUTER2:.*]]
; CHECK-NEXT:      i32 2, label %[[OUTER3:.*]]
; CHECK-NEXT:      i32 3, label %[[OUTER4:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE1_SUCC_JT1]]:
; CHECK-NEXT:    [[ONE_JT1]] = phi i32 [ 1, %[[CASE1]] ]
; CHECK-NEXT:    switch i32 [[COND]], label %[[SWITCH_BB_JT1]] [
; CHECK-NEXT:      i32 0, label %[[OUTER1]]
; CHECK-NEXT:      i32 1, label %[[OUTER2]]
; CHECK-NEXT:      i32 2, label %[[OUTER3]]
; CHECK-NEXT:      i32 3, label %[[OUTER4]]
; CHECK-NEXT:    ]
; CHECK:       [[CASE2]]:
; CHECK-NEXT:    br label %[[SWITCH_BB_JT2]]
; CHECK:       [[CASE3]]:
; CHECK-NEXT:    switch i32 [[COND]], label %[[OUTER4]] [
; CHECK-NEXT:      i32 0, label %[[OUTER1]]
; CHECK-NEXT:      i32 1, label %[[OUTER2]]
; CHECK-NEXT:      i32 2, label %[[OUTER3]]
; CHECK-NEXT:    ]
; CHECK:       [[OUTER1]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER2]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER3]]:
; CHECK-NEXT:    ret void
; CHECK:       [[OUTER4]]:
; CHECK-NEXT:    ret void
; CHECK:       [[DEFAULT_DEST]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %switch_bb

switch_bb:
  %phi = phi i32 [ 0, %entry ], [ %one, %case1_succ ], [ 2, %case2 ]
  switch i32 %phi, label %default_dest [
  i32 0, label %case1
  i32 1, label %case2
  i32 2, label %case3
  ]

case1:
  br label %case1_succ

case1_succ:
  %one = phi i32 [ 1, %case1 ]
  switch i32 %cond, label %switch_bb [
  i32 0, label %outer1
  i32 1, label %outer2
  i32 2, label %outer3
  i32 3, label %outer4
  ]

case2:
  br label %switch_bb

case3:
  switch i32 %cond, label %outer4 [
  i32 0, label %outer1
  i32 1, label %outer2
  i32 2, label %outer3
  ]

outer1:
  ret void

outer2:
  ret void

outer3:
  ret void

outer4:
  ret void

default_dest:
  ret void
}
