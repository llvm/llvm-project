; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -O2 -S < %s | FileCheck %s

; FIXME: It can return true.
define i1 @main(ptr %i2) {
; CHECK-LABEL: define noundef i1 @main(
; CHECK-SAME: ptr captures(none) initializes((0, 3)) [[I2:%.*]]) local_unnamed_addr {
; CHECK-NEXT:    [[I1:%.*]] = alloca [3 x i8], align 1
; CHECK-NEXT:    store i8 0, ptr [[I2]], align 1
; CHECK-NEXT:    [[I3:%.*]] = getelementptr inbounds nuw i8, ptr [[I2]], i64 1
; CHECK-NEXT:    store i8 1, ptr [[I3]], align 1
; CHECK-NEXT:    [[I4:%.*]] = getelementptr inbounds nuw i8, ptr [[I2]], i64 2
; CHECK-NEXT:    store i8 2, ptr [[I4]], align 1
; CHECK-NEXT:    call void @llvm.lifetime.start.p0(i64 3, ptr nonnull [[I1]])
; CHECK-NEXT:    call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 1 dereferenceable(3) [[I1]], ptr noundef nonnull align 1 dereferenceable(3) [[I2]], i64 3, i1 false)
; CHECK-NEXT:    [[I51:%.*]] = load i8, ptr [[I2]], align 1
; CHECK-NEXT:    [[I6:%.*]] = icmp eq i8 [[I51]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds nuw i8, ptr [[I2]], i64 1
; CHECK-NEXT:    [[I82:%.*]] = load i8, ptr [[TMP1]], align 1
; CHECK-NEXT:    [[I9:%.*]] = icmp eq i8 [[I82]], 1
; CHECK-NEXT:    [[I10:%.*]] = select i1 [[I6]], i1 [[I9]], i1 false
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds nuw i8, ptr [[I2]], i64 2
; CHECK-NEXT:    [[I123:%.*]] = load i8, ptr [[TMP2]], align 1
; CHECK-NEXT:    [[I13:%.*]] = icmp eq i8 [[I123]], 2
; CHECK-NEXT:    [[I14:%.*]] = select i1 [[I10]], i1 [[I13]], i1 false
; CHECK-NEXT:    br i1 [[I14]], label %[[TRUE:.*]], label %[[FALSE:.*]]
; CHECK:       [[COMMON_RET:.*]]:
; CHECK-NEXT:    ret i1 [[I14]]
; CHECK:       [[TRUE]]:
; CHECK-NEXT:    call void @llvm.lifetime.end.p0(i64 3, ptr nonnull [[I1]])
; CHECK-NEXT:    br label %[[COMMON_RET]]
; CHECK:       [[FALSE]]:
; CHECK-NEXT:    call void @assert_failed(ptr nonnull [[I1]])
; CHECK-NEXT:    br label %[[COMMON_RET]]
;
  %i1 = alloca [3 x i8], align 1
  store i8 0, ptr %i2, align 1
  %i3 = getelementptr inbounds nuw i8, ptr %i2, i64 1
  store i8 1, ptr %i3, align 1
  %i4 = getelementptr inbounds nuw i8, ptr %i2, i64 2
  store i8 2, ptr %i4, align 1
  call void @llvm.lifetime.start.p0(i64 3, ptr nonnull %i1)
  call void @llvm.memcpy.p0.p0.i64(ptr %i1, ptr %i2, i64 3, i1 false)
  %i5 = load i8, ptr %i1, align 1
  %i6 = icmp eq i8 %i5, 0
  %i7 = getelementptr inbounds nuw i8, ptr %i1, i64 1
  %i8 = load i8, ptr %i7, align 1
  %i9 = icmp eq i8 %i8, 1
  %i10 = select i1 %i6, i1 %i9, i1 false
  %i11 = getelementptr inbounds nuw i8, ptr %i1, i64 2
  %i12 = load i8, ptr %i11, align 1
  %i13 = icmp eq i8 %i12, 2
  %i14 = select i1 %i10, i1 %i13, i1 false
  br i1 %i14, label %true, label %false

true:
  call void @llvm.lifetime.end.p0(i64 3, ptr nonnull %i1)
  ret i1 true

false:
  call void @assert_failed(ptr %i1)
  ret i1 false
}

declare void @llvm.memcpy.p0.p0.i64(ptr, ptr, i64, i1)
declare void @llvm.lifetime.start.p0(i64, ptr)
declare void @llvm.lifetime.end.p0(i64, ptr)
declare void @assert_failed(ptr)
