; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=loop-interchange -loop-interchange-only-when-forced=0 --cache-line-size=64 -S < %s | FileCheck %s --check-prefix=DEFAULT-ON
; RUN: opt -passes=loop-interchange -loop-interchange-only-when-forced=1 --cache-line-size=64 -S < %s | FileCheck %s --check-prefix=DEFAULT-OFF

; Test if the metadata works correctly. The code is as follows:
; 
; #define N 4
; int a[N][N][N][N];
; int b[N][N][N][N];
; void f() {
;   for (int i = 0; i < N; i++)
;     for (int j = 0; j < N; j++)
;       #pragma clang loop interchange(enable or disable)
;       for (int k = 0; k < N; k++)
;         for (int l = 0; l < N; l++)
;           a[l][k][j][i] += b[l][k][j][i];
; }
;
; In the functions explicit_on and explicit_off, the values enable and disable
; are specified in the pragma, respectively. If the
; `loop-interchange-only-when-forced` is set to 0, the loop-interchange will be
; performed to the loop nest unless it is explicitly disabled. If the value is
; set to 1, the loop-interchange will be performed to the loop nest only when
; it is explicitly enabled.

@a = dso_local local_unnamed_addr global [2 x [2 x [2 x [2 x i32]]]] zeroinitializer, align 4
@b = dso_local local_unnamed_addr global [2 x [2 x [2 x [2 x i32]]]] zeroinitializer, align 4

define void @explicit_on() {
; DEFAULT-ON-LABEL: define void @explicit_on() {
; DEFAULT-ON-NEXT:  [[ENTRY:.*:]]
; DEFAULT-ON-NEXT:    br label %[[FOR_BODY12_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND1_PREHEADER_PREHEADER:.*]]:
; DEFAULT-ON-NEXT:    br label %[[FOR_COND1_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND1_PREHEADER]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV61:%.*]] = phi i64 [ [[INDVARS_IV_NEXT62:%.*]], %[[FOR_COND_CLEANUP3:.*]] ], [ 0, %[[FOR_COND1_PREHEADER_PREHEADER]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_BODY12_SPLIT1:.*]]
; DEFAULT-ON:       [[FOR_COND5_PREHEADER_PREHEADER:.*]]:
; DEFAULT-ON-NEXT:    br label %[[FOR_COND5_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP3]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT62]] = add nuw nsw i64 [[INDVARS_IV61]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND64:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT62]], 2
; DEFAULT-ON-NEXT:    br i1 [[EXITCOND64]], label %[[FOR_COND1_PREHEADER]], label %[[FOR_COND_CLEANUP7_SPLIT:.*]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP7:.*]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT58:%.*]] = add nuw nsw i64 [[INDVARS_IV57:%.*]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND60:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT58]], 2
; DEFAULT-ON-NEXT:    br label %[[FOR_COND_CLEANUP3]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP7_SPLIT]]:
; DEFAULT-ON-NEXT:    [[TMP0:%.*]] = add nuw nsw i64 [[INDVARS_IV57]], 1
; DEFAULT-ON-NEXT:    [[TMP1:%.*]] = icmp ne i64 [[TMP0]], 2
; DEFAULT-ON-NEXT:    br i1 [[TMP1]], label %[[FOR_COND5_PREHEADER]], label %[[FOR_COND_CLEANUP11_SPLIT:.*]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP11:.*]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT54:%.*]] = add nuw nsw i64 [[INDVARS_IV53:%.*]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND56:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT54]], 2
; DEFAULT-ON-NEXT:    br label %[[FOR_COND_CLEANUP7]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP11_SPLIT]]:
; DEFAULT-ON-NEXT:    [[TMP2:%.*]] = add nuw nsw i64 [[INDVARS_IV53]], 1
; DEFAULT-ON-NEXT:    [[TMP3:%.*]] = icmp ne i64 [[TMP2]], 2
; DEFAULT-ON-NEXT:    br i1 [[TMP3]], label %[[FOR_COND9_PREHEADER:.*]], label %[[FOR_BODY12_SPLIT:.*]], !llvm.loop [[LOOP0:![0-9]+]]
; DEFAULT-ON:       [[FOR_BODY12:.*]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[TMP6:%.*]], %[[FOR_BODY12_SPLIT]] ], [ 0, %[[FOR_BODY12_PREHEADER]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_COND9_PREHEADER_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_BODY12_SPLIT1]]:
; DEFAULT-ON-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @b, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-ON-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX18]], align 4
; DEFAULT-ON-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @a, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-ON-NEXT:    [[TMP5:%.*]] = load i32, ptr [[ARRAYIDX26]], align 4
; DEFAULT-ON-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP5]], [[TMP4]]
; DEFAULT-ON-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX26]], align 4
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], 2
; DEFAULT-ON-NEXT:    br label %[[FOR_COND_CLEANUP11]]
; DEFAULT-ON:       [[FOR_BODY12_SPLIT]]:
; DEFAULT-ON-NEXT:    [[TMP6]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DEFAULT-ON-NEXT:    [[TMP7:%.*]] = icmp ne i64 [[TMP6]], 2
; DEFAULT-ON-NEXT:    br i1 [[TMP7]], label %[[FOR_BODY12]], label %[[FOR_COND_CLEANUP:.*]]
; DEFAULT-ON:       [[FOR_COND9_PREHEADER]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV53]] = phi i64 [ [[TMP2]], %[[FOR_COND_CLEANUP11_SPLIT]] ], [ 0, %[[FOR_COND9_PREHEADER_PREHEADER]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_COND5_PREHEADER_PREHEADER]]
; DEFAULT-ON:       [[FOR_BODY12_PREHEADER]]:
; DEFAULT-ON-NEXT:    br label %[[FOR_BODY12]]
; DEFAULT-ON:       [[FOR_COND5_PREHEADER]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV57]] = phi i64 [ [[TMP0]], %[[FOR_COND_CLEANUP7_SPLIT]] ], [ 0, %[[FOR_COND5_PREHEADER_PREHEADER]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_COND1_PREHEADER_PREHEADER]]
; DEFAULT-ON:       [[FOR_COND9_PREHEADER_PREHEADER]]:
; DEFAULT-ON-NEXT:    br label %[[FOR_COND9_PREHEADER]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP]]:
; DEFAULT-ON-NEXT:    ret void
;
; DEFAULT-OFF-LABEL: define void @explicit_on() {
; DEFAULT-OFF-NEXT:  [[ENTRY:.*]]:
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND1_PREHEADER:.*]]
; DEFAULT-OFF:       [[FOR_COND1_PREHEADER]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV61:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDVARS_IV_NEXT62:%.*]], %[[FOR_COND_CLEANUP3:.*]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND5_PREHEADER:.*]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP3]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT62]] = add nuw nsw i64 [[INDVARS_IV61]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND64:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT62]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND64]], label %[[FOR_COND1_PREHEADER]], label %[[FOR_COND_CLEANUP:.*]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP7:.*]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT58:%.*]] = add nuw nsw i64 [[INDVARS_IV57:%.*]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND60:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT58]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND60]], label %[[FOR_COND5_PREHEADER]], label %[[FOR_COND_CLEANUP3]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP11:.*]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT54:%.*]] = add nuw nsw i64 [[INDVARS_IV53:%.*]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND56:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT54]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND56]], label %[[FOR_COND9_PREHEADER:.*]], label %[[FOR_BODY12_SPLIT:.*]], !llvm.loop [[LOOP0:![0-9]+]]
; DEFAULT-OFF:       [[FOR_BODY12:.*]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ [[TMP2:%.*]], %[[FOR_BODY12_SPLIT]] ], [ 0, %[[FOR_BODY12_PREHEADER:.*]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND9_PREHEADER_PREHEADER:.*]]
; DEFAULT-OFF:       [[FOR_BODY12_SPLIT1:.*]]:
; DEFAULT-OFF-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @b, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-OFF-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX18]], align 4
; DEFAULT-OFF-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @a, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-OFF-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX26]], align 4
; DEFAULT-OFF-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP1]], [[TMP0]]
; DEFAULT-OFF-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX26]], align 4
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT:%.*]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], 2
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND_CLEANUP11]]
; DEFAULT-OFF:       [[FOR_BODY12_SPLIT]]:
; DEFAULT-OFF-NEXT:    [[TMP2]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DEFAULT-OFF-NEXT:    [[TMP3:%.*]] = icmp ne i64 [[TMP2]], 2
; DEFAULT-OFF-NEXT:    br i1 [[TMP3]], label %[[FOR_BODY12]], label %[[FOR_COND_CLEANUP7]]
; DEFAULT-OFF:       [[FOR_COND9_PREHEADER]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV53]] = phi i64 [ [[INDVARS_IV_NEXT54]], %[[FOR_COND_CLEANUP11]] ], [ 0, %[[FOR_COND9_PREHEADER_PREHEADER]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_BODY12_SPLIT1]]
; DEFAULT-OFF:       [[FOR_BODY12_PREHEADER]]:
; DEFAULT-OFF-NEXT:    br label %[[FOR_BODY12]]
; DEFAULT-OFF:       [[FOR_COND5_PREHEADER]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV57]] = phi i64 [ 0, %[[FOR_COND1_PREHEADER]] ], [ [[INDVARS_IV_NEXT58]], %[[FOR_COND_CLEANUP7]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_BODY12_PREHEADER]]
; DEFAULT-OFF:       [[FOR_COND9_PREHEADER_PREHEADER]]:
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND9_PREHEADER]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP]]:
; DEFAULT-OFF-NEXT:    ret void
;
entry:
  br label %for.cond1.preheader

for.cond1.preheader:
  %indvars.iv61 = phi i64 [ 0, %entry ], [ %indvars.iv.next62, %for.cond.cleanup3 ]
  br label %for.cond5.preheader

for.cond.cleanup3:
  %indvars.iv.next62 = add nuw nsw i64 %indvars.iv61, 1
  %exitcond64 = icmp ne i64 %indvars.iv.next62, 2
  br i1 %exitcond64, label %for.cond1.preheader, label %for.cond.cleanup

for.cond.cleanup7:
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 1
  %exitcond60 = icmp ne i64 %indvars.iv.next58, 2
  br i1 %exitcond60, label %for.cond5.preheader, label %for.cond.cleanup3

for.cond.cleanup11:
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond56 = icmp ne i64 %indvars.iv.next54, 2
  br i1 %exitcond56, label %for.cond9.preheader, label %for.cond.cleanup7, !llvm.loop !0

for.body12:
  %indvars.iv = phi i64 [ 0, %for.cond9.preheader ], [ %indvars.iv.next, %for.body12 ]
  %arrayidx18 = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @b, i64 0, i64 %indvars.iv, i64 %indvars.iv53, i64 %indvars.iv57, i64 %indvars.iv61
  %0 = load i32, ptr %arrayidx18, align 4
  %arrayidx26 = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @a, i64 0, i64 %indvars.iv, i64 %indvars.iv53, i64 %indvars.iv57, i64 %indvars.iv61
  %1 = load i32, ptr %arrayidx26, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, ptr %arrayidx26, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 2
  br i1 %exitcond, label %for.body12, label %for.cond.cleanup11

for.cond9.preheader:
  %indvars.iv53 = phi i64 [ 0, %for.cond5.preheader ], [ %indvars.iv.next54, %for.cond.cleanup11 ]
  br label %for.body12

for.cond5.preheader:
  %indvars.iv57 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next58, %for.cond.cleanup7 ]
  br label %for.cond9.preheader

for.cond.cleanup:
  ret void
}

define void @explicit_off() {
; DEFAULT-ON-LABEL: define void @explicit_off() {
; DEFAULT-ON-NEXT:  [[ENTRY:.*:]]
; DEFAULT-ON-NEXT:    br label %[[FOR_COND5_PREHEADER_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND1_PREHEADER_PREHEADER:.*]]:
; DEFAULT-ON-NEXT:    br label %[[FOR_COND1_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND1_PREHEADER]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV61:%.*]] = phi i64 [ [[INDVARS_IV_NEXT62:%.*]], %[[FOR_COND_CLEANUP3:.*]] ], [ 0, %[[FOR_COND1_PREHEADER_PREHEADER]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_COND9_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND5_PREHEADER_PREHEADER]]:
; DEFAULT-ON-NEXT:    br label %[[FOR_COND5_PREHEADER:.*]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP3]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT62]] = add nuw nsw i64 [[INDVARS_IV61]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND64:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT62]], 2
; DEFAULT-ON-NEXT:    br i1 [[EXITCOND64]], label %[[FOR_COND1_PREHEADER]], label %[[FOR_COND_CLEANUP7:.*]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP7]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT58:%.*]] = add nuw nsw i64 [[INDVARS_IV57:%.*]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND60:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT58]], 2
; DEFAULT-ON-NEXT:    br i1 [[EXITCOND60]], label %[[FOR_COND5_PREHEADER]], label %[[FOR_COND_CLEANUP:.*]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP11:.*]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT54:%.*]] = add nuw nsw i64 [[INDVARS_IV53:%.*]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND56:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT54]], 2
; DEFAULT-ON-NEXT:    br i1 [[EXITCOND56]], label %[[FOR_COND9_PREHEADER]], label %[[FOR_COND_CLEANUP3]], !llvm.loop [[LOOP2:![0-9]+]]
; DEFAULT-ON:       [[FOR_BODY12:.*]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, %[[FOR_COND9_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], %[[FOR_BODY12]] ]
; DEFAULT-ON-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @b, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-ON-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX18]], align 4
; DEFAULT-ON-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @a, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-ON-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX26]], align 4
; DEFAULT-ON-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP1]], [[TMP0]]
; DEFAULT-ON-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX26]], align 4
; DEFAULT-ON-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DEFAULT-ON-NEXT:    [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], 2
; DEFAULT-ON-NEXT:    br i1 [[EXITCOND]], label %[[FOR_BODY12]], label %[[FOR_COND_CLEANUP11]]
; DEFAULT-ON:       [[FOR_COND9_PREHEADER]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV53]] = phi i64 [ 0, %[[FOR_COND1_PREHEADER]] ], [ [[INDVARS_IV_NEXT54]], %[[FOR_COND_CLEANUP11]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_BODY12]]
; DEFAULT-ON:       [[FOR_COND5_PREHEADER]]:
; DEFAULT-ON-NEXT:    [[INDVARS_IV57]] = phi i64 [ [[INDVARS_IV_NEXT58]], %[[FOR_COND_CLEANUP7]] ], [ 0, %[[FOR_COND5_PREHEADER_PREHEADER]] ]
; DEFAULT-ON-NEXT:    br label %[[FOR_COND1_PREHEADER_PREHEADER]]
; DEFAULT-ON:       [[FOR_COND_CLEANUP]]:
; DEFAULT-ON-NEXT:    ret void
;
; DEFAULT-OFF-LABEL: define void @explicit_off() {
; DEFAULT-OFF-NEXT:  [[ENTRY:.*]]:
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND1_PREHEADER:.*]]
; DEFAULT-OFF:       [[FOR_COND1_PREHEADER]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV61:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDVARS_IV_NEXT62:%.*]], %[[FOR_COND_CLEANUP3:.*]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND5_PREHEADER:.*]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP3]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT62]] = add nuw nsw i64 [[INDVARS_IV61]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND64:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT62]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND64]], label %[[FOR_COND1_PREHEADER]], label %[[FOR_COND_CLEANUP:.*]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP7:.*]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT58:%.*]] = add nuw nsw i64 [[INDVARS_IV57:%.*]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND60:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT58]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND60]], label %[[FOR_COND5_PREHEADER]], label %[[FOR_COND_CLEANUP3]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP11:.*]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT54:%.*]] = add nuw nsw i64 [[INDVARS_IV53:%.*]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND56:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT54]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND56]], label %[[FOR_COND9_PREHEADER:.*]], label %[[FOR_COND_CLEANUP7]], !llvm.loop [[LOOP2:![0-9]+]]
; DEFAULT-OFF:       [[FOR_BODY12:.*]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV:%.*]] = phi i64 [ 0, %[[FOR_COND9_PREHEADER]] ], [ [[INDVARS_IV_NEXT:%.*]], %[[FOR_BODY12]] ]
; DEFAULT-OFF-NEXT:    [[ARRAYIDX18:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @b, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-OFF-NEXT:    [[TMP0:%.*]] = load i32, ptr [[ARRAYIDX18]], align 4
; DEFAULT-OFF-NEXT:    [[ARRAYIDX26:%.*]] = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @a, i64 0, i64 [[INDVARS_IV]], i64 [[INDVARS_IV53]], i64 [[INDVARS_IV57]], i64 [[INDVARS_IV61]]
; DEFAULT-OFF-NEXT:    [[TMP1:%.*]] = load i32, ptr [[ARRAYIDX26]], align 4
; DEFAULT-OFF-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP1]], [[TMP0]]
; DEFAULT-OFF-NEXT:    store i32 [[ADD]], ptr [[ARRAYIDX26]], align 4
; DEFAULT-OFF-NEXT:    [[INDVARS_IV_NEXT]] = add nuw nsw i64 [[INDVARS_IV]], 1
; DEFAULT-OFF-NEXT:    [[EXITCOND:%.*]] = icmp ne i64 [[INDVARS_IV_NEXT]], 2
; DEFAULT-OFF-NEXT:    br i1 [[EXITCOND]], label %[[FOR_BODY12]], label %[[FOR_COND_CLEANUP11]]
; DEFAULT-OFF:       [[FOR_COND9_PREHEADER]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV53]] = phi i64 [ 0, %[[FOR_COND5_PREHEADER]] ], [ [[INDVARS_IV_NEXT54]], %[[FOR_COND_CLEANUP11]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_BODY12]]
; DEFAULT-OFF:       [[FOR_COND5_PREHEADER]]:
; DEFAULT-OFF-NEXT:    [[INDVARS_IV57]] = phi i64 [ 0, %[[FOR_COND1_PREHEADER]] ], [ [[INDVARS_IV_NEXT58]], %[[FOR_COND_CLEANUP7]] ]
; DEFAULT-OFF-NEXT:    br label %[[FOR_COND9_PREHEADER]]
; DEFAULT-OFF:       [[FOR_COND_CLEANUP]]:
; DEFAULT-OFF-NEXT:    ret void
;
entry:
  br label %for.cond1.preheader

for.cond1.preheader:
  %indvars.iv61 = phi i64 [ 0, %entry ], [ %indvars.iv.next62, %for.cond.cleanup3 ]
  br label %for.cond5.preheader

for.cond.cleanup3:
  %indvars.iv.next62 = add nuw nsw i64 %indvars.iv61, 1
  %exitcond64 = icmp ne i64 %indvars.iv.next62, 2
  br i1 %exitcond64, label %for.cond1.preheader, label %for.cond.cleanup

for.cond.cleanup7:
  %indvars.iv.next58 = add nuw nsw i64 %indvars.iv57, 1
  %exitcond60 = icmp ne i64 %indvars.iv.next58, 2
  br i1 %exitcond60, label %for.cond5.preheader, label %for.cond.cleanup3

for.cond.cleanup11:
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond56 = icmp ne i64 %indvars.iv.next54, 2
  br i1 %exitcond56, label %for.cond9.preheader, label %for.cond.cleanup7, !llvm.loop !2

for.body12:
  %indvars.iv = phi i64 [ 0, %for.cond9.preheader ], [ %indvars.iv.next, %for.body12 ]
  %arrayidx18 = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @b, i64 0, i64 %indvars.iv, i64 %indvars.iv53, i64 %indvars.iv57, i64 %indvars.iv61
  %0 = load i32, ptr %arrayidx18, align 4
  %arrayidx26 = getelementptr inbounds nuw [2 x [2 x [2 x [2 x i32]]]], ptr @a, i64 0, i64 %indvars.iv, i64 %indvars.iv53, i64 %indvars.iv57, i64 %indvars.iv61
  %1 = load i32, ptr %arrayidx26, align 4
  %add = add nsw i32 %1, %0
  store i32 %add, ptr %arrayidx26, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond = icmp ne i64 %indvars.iv.next, 2
  br i1 %exitcond, label %for.body12, label %for.cond.cleanup11

for.cond9.preheader:
  %indvars.iv53 = phi i64 [ 0, %for.cond5.preheader ], [ %indvars.iv.next54, %for.cond.cleanup11 ]
  br label %for.body12

for.cond5.preheader:
  %indvars.iv57 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next58, %for.cond.cleanup7 ]
  br label %for.cond9.preheader

for.cond.cleanup:
  ret void
}

!0 = distinct !{!0, !1}
!1 = !{!"llvm.loop.interchange.enable", i1 true}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.interchange.enable", i1 false}
;.
; DEFAULT-ON: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]]}
; DEFAULT-ON: [[META1]] = !{!"llvm.loop.interchange.enable", i1 true}
; DEFAULT-ON: [[LOOP2]] = distinct !{[[LOOP2]], [[META3:![0-9]+]]}
; DEFAULT-ON: [[META3]] = !{!"llvm.loop.interchange.enable", i1 false}
;.
; DEFAULT-OFF: [[LOOP0]] = distinct !{[[LOOP0]], [[META1:![0-9]+]]}
; DEFAULT-OFF: [[META1]] = !{!"llvm.loop.interchange.enable", i1 true}
; DEFAULT-OFF: [[LOOP2]] = distinct !{[[LOOP2]], [[META3:![0-9]+]]}
; DEFAULT-OFF: [[META3]] = !{!"llvm.loop.interchange.enable", i1 false}
;.
