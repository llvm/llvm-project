; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer < %s | FileCheck %s

define float @_Z3fooPi(ptr %a){
; CHECK-LABEL: define float @_Z3fooPi(
; CHECK-SAME: ptr [[A:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load <8 x i32>, ptr [[A]], align 4
; CHECK-NEXT:    [[TMP1:%.*]] = mul nsw <8 x i32> [[TMP0]], [[TMP0]]
; CHECK-NEXT:    [[TMP2:%.*]] = uitofp <8 x i32> [[TMP1]] to <8 x double>
; CHECK-NEXT:    [[TMP3:%.*]] = fdiv <8 x double> [[TMP2]], splat (double 1.000000e-01)
; CHECK-NEXT:    [[ARRAYIDX_8:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 32
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ARRAYIDX_8]], align 4
; CHECK-NEXT:    [[MUL_8:%.*]] = mul nsw i32 [[TMP4]], [[TMP4]]
; CHECK-NEXT:    [[CONV_8:%.*]] = uitofp nneg i32 [[MUL_8]] to double
; CHECK-NEXT:    [[DIV_8:%.*]] = fdiv double [[CONV_8]], 1.000000e-01
; CHECK-NEXT:    [[ARRAYIDX_9:%.*]] = getelementptr inbounds i8, ptr [[A]], i64 36
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[ARRAYIDX_9]], align 4
; CHECK-NEXT:    [[MUL_9:%.*]] = mul nsw i32 [[TMP5]], [[TMP5]]
; CHECK-NEXT:    [[CONV_9:%.*]] = uitofp nneg i32 [[MUL_9]] to double
; CHECK-NEXT:    [[OP_RDX:%.*]] = fdiv double [[CONV_9]], 1.000000e-01
; CHECK-NEXT:    [[TMP7:%.*]] = call double @llvm.vector.reduce.fadd.v8f64(double -0.000000e+00, <8 x double> [[TMP3]])
; CHECK-NEXT:    [[ADD_8:%.*]] = fadd double [[TMP7]], [[DIV_8]]
; CHECK-NEXT:    [[OP_RDX1:%.*]] = fadd double [[ADD_8]], [[OP_RDX]]
; CHECK-NEXT:    [[DIV4:%.*]] = fdiv double [[OP_RDX1]], 5.000000e+03
; CHECK-NEXT:    [[SUB:%.*]] = fadd double [[DIV4]], -5.000000e+03
; CHECK-NEXT:    [[CONV6:%.*]] = fptrunc double [[SUB]] to float
; CHECK-NEXT:    ret float [[CONV6]]
;
entry:
  %0 = load i32, ptr %a, align 4
  %mul = mul nsw i32 %0, %0
  %conv = uitofp nneg i32 %mul to double
  %div = fdiv double %conv, 1.000000e-01
  %arrayidx.1 = getelementptr inbounds i8, ptr %a, i64 4
  %1 = load i32, ptr %arrayidx.1, align 4
  %mul.1 = mul nsw i32 %1, %1
  %conv.1 = uitofp nneg i32 %mul.1 to double
  %div.1 = fdiv double %conv.1, 1.000000e-01
  %add.1 = fadd double %div, %div.1
  %arrayidx.2 = getelementptr inbounds i8, ptr %a, i64 8
  %2 = load i32, ptr %arrayidx.2, align 4
  %mul.2 = mul nsw i32 %2, %2
  %conv.2 = uitofp nneg i32 %mul.2 to double
  %div.2 = fdiv double %conv.2, 1.000000e-01
  %add.2 = fadd double %add.1, %div.2
  %arrayidx.3 = getelementptr inbounds i8, ptr %a, i64 12
  %3 = load i32, ptr %arrayidx.3, align 4
  %mul.3 = mul nsw i32 %3, %3
  %conv.3 = uitofp nneg i32 %mul.3 to double
  %div.3 = fdiv double %conv.3, 1.000000e-01
  %add.3 = fadd double %add.2, %div.3
  %arrayidx.4 = getelementptr inbounds i8, ptr %a, i64 16
  %4 = load i32, ptr %arrayidx.4, align 4
  %mul.4 = mul nsw i32 %4, %4
  %conv.4 = uitofp nneg i32 %mul.4 to double
  %div.4 = fdiv double %conv.4, 1.000000e-01
  %add.4 = fadd double %add.3, %div.4
  %arrayidx.5 = getelementptr inbounds i8, ptr %a, i64 20
  %5 = load i32, ptr %arrayidx.5, align 4
  %mul.5 = mul nsw i32 %5, %5
  %conv.5 = uitofp nneg i32 %mul.5 to double
  %div.5 = fdiv double %conv.5, 1.000000e-01
  %add.5 = fadd double %add.4, %div.5
  %arrayidx.6 = getelementptr inbounds i8, ptr %a, i64 24
  %6 = load i32, ptr %arrayidx.6, align 4
  %mul.6 = mul nsw i32 %6, %6
  %conv.6 = uitofp nneg i32 %mul.6 to double
  %div.6 = fdiv double %conv.6, 1.000000e-01
  %add.6 = fadd double %add.5, %div.6
  %arrayidx.7 = getelementptr inbounds i8, ptr %a, i64 28
  %7 = load i32, ptr %arrayidx.7, align 4
  %mul.7 = mul nsw i32 %7, %7
  %conv.7 = uitofp nneg i32 %mul.7 to double
  %div.7 = fdiv double %conv.7, 1.000000e-01
  %add.7 = fadd double %add.6, %div.7
  %arrayidx.8 = getelementptr inbounds i8, ptr %a, i64 32
  %8 = load i32, ptr %arrayidx.8, align 4
  %mul.8 = mul nsw i32 %8, %8
  %conv.8 = uitofp nneg i32 %mul.8 to double
  %div.8 = fdiv double %conv.8, 1.000000e-01
  %add.8 = fadd double %add.7, %div.8
  %arrayidx.9 = getelementptr inbounds i8, ptr %a, i64 36
  %9 = load i32, ptr %arrayidx.9, align 4
  %mul.9 = mul nsw i32 %9, %9
  %conv.9 = uitofp nneg i32 %mul.9 to double
  %div.9 = fdiv double %conv.9, 1.000000e-01
  %add.9 = fadd double %add.8, %div.9
  %div4 = fdiv double %add.9, 5.000000e+03
  %sub = fadd double %div4, -5.000000e+03
  %conv6 = fptrunc double %sub to float
  ret float %conv6
}
