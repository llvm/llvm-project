; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: %if x86-registered-target %{ opt < %s -passes=slp-vectorizer -S -mtriple=x86_64-unknown-linux-gnu | FileCheck %s --check-prefix=X86 %}
; RUN: %if aarch64-registered-target %{ opt < %s -passes=slp-vectorizer -S -mtriple=aarch64-unknown-linux-gnu | FileCheck %s --check-prefix=AARCH64 %}

define void @test() {
; X86-LABEL: @test(
; X86-NEXT:  entry:
; X86-NEXT:    br label [[BODY:%.*]]
; X86:       body:
; X86-NEXT:    [[PHI1:%.*]] = phi double [ 0.000000e+00, [[ENTRY:%.*]] ], [ 0.000000e+00, [[BODY]] ]
; X86-NEXT:    [[TMP0:%.*]] = phi <2 x double> [ zeroinitializer, [[ENTRY]] ], [ zeroinitializer, [[BODY]] ]
; X86-NEXT:    [[TMP1:%.*]] = insertelement <2 x double> <double poison, double 0.000000e+00>, double [[PHI1]], i32 0
; X86-NEXT:    [[TMP2:%.*]] = fmul fast <2 x double> <double 0.000000e+00, double undef>, [[TMP1]]
; X86-NEXT:    [[TMP3:%.*]] = call fast double @llvm.vector.reduce.fadd.v2f64(double 0.000000e+00, <2 x double> [[TMP2]])
; X86-NEXT:    [[CMP42_I:%.*]] = fcmp fast ole double [[TMP3]], 0.000000e+00
; X86-NEXT:    br i1 false, label [[BODY]], label [[EXIT:%.*]]
; X86:       exit:
; X86-NEXT:    br i1 false, label [[IF_THEN135_I:%.*]], label [[IF_END209_I:%.*]]
; X86:       if.then135.i:
; X86-NEXT:    [[TMP4:%.*]] = fcmp fast olt <2 x double> [[TMP0]], zeroinitializer
; X86-NEXT:    [[TMP5:%.*]] = shufflevector <2 x i1> <i1 poison, i1 false>, <2 x i1> [[TMP4]], <2 x i32> <i32 2, i32 1>
; X86-NEXT:    [[TMP6:%.*]] = select <2 x i1> [[TMP5]], <2 x double> zeroinitializer, <2 x double> zeroinitializer
; X86-NEXT:    [[TMP7:%.*]] = fmul fast <2 x double> zeroinitializer, [[TMP6]]
; X86-NEXT:    [[TMP8:%.*]] = fmul fast <2 x double> [[TMP7]], zeroinitializer
; X86-NEXT:    [[TMP9:%.*]] = fadd fast <2 x double> [[TMP8]], zeroinitializer
; X86-NEXT:    br label [[IF_END209_I]]
; X86:       if.end209.i:
; X86-NEXT:    [[TMP10:%.*]] = phi <2 x double> [ [[TMP9]], [[IF_THEN135_I]] ], [ zeroinitializer, [[EXIT]] ]
; X86-NEXT:    ret void
;
; AARCH64-LABEL: @test(
; AARCH64-NEXT:  entry:
; AARCH64-NEXT:    br label [[BODY:%.*]]
; AARCH64:       body:
; AARCH64-NEXT:    [[PHI1:%.*]] = phi double [ 0.000000e+00, [[ENTRY:%.*]] ], [ 0.000000e+00, [[BODY]] ]
; AARCH64-NEXT:    [[TMP0:%.*]] = phi <2 x double> [ zeroinitializer, [[ENTRY]] ], [ zeroinitializer, [[BODY]] ]
; AARCH64-NEXT:    [[MUL_I478_I:%.*]] = fmul fast double [[PHI1]], 0.000000e+00
; AARCH64-NEXT:    [[MUL7_I485_I:%.*]] = fmul fast double undef, 0.000000e+00
; AARCH64-NEXT:    [[ADD8_I_I:%.*]] = fadd fast double [[MUL_I478_I]], [[MUL7_I485_I]]
; AARCH64-NEXT:    [[CMP42_I:%.*]] = fcmp fast ole double [[ADD8_I_I]], 0.000000e+00
; AARCH64-NEXT:    br i1 false, label [[BODY]], label [[EXIT:%.*]]
; AARCH64:       exit:
; AARCH64-NEXT:    br i1 false, label [[IF_THEN135_I:%.*]], label [[IF_END209_I:%.*]]
; AARCH64:       if.then135.i:
; AARCH64-NEXT:    [[TMP1:%.*]] = fcmp fast olt <2 x double> [[TMP0]], zeroinitializer
; AARCH64-NEXT:    [[TMP2:%.*]] = shufflevector <2 x i1> <i1 poison, i1 false>, <2 x i1> [[TMP1]], <2 x i32> <i32 2, i32 1>
; AARCH64-NEXT:    [[TMP3:%.*]] = select <2 x i1> [[TMP2]], <2 x double> zeroinitializer, <2 x double> zeroinitializer
; AARCH64-NEXT:    [[TMP4:%.*]] = fmul fast <2 x double> zeroinitializer, [[TMP3]]
; AARCH64-NEXT:    [[TMP5:%.*]] = fmul fast <2 x double> [[TMP4]], zeroinitializer
; AARCH64-NEXT:    [[TMP6:%.*]] = fadd fast <2 x double> [[TMP5]], zeroinitializer
; AARCH64-NEXT:    br label [[IF_END209_I]]
; AARCH64:       if.end209.i:
; AARCH64-NEXT:    [[TMP7:%.*]] = phi <2 x double> [ [[TMP6]], [[IF_THEN135_I]] ], [ zeroinitializer, [[EXIT]] ]
; AARCH64-NEXT:    ret void
;
entry:
  br label %body

body:
  %phi1 = phi double [ 0.000000e+00, %entry ], [ 0.000000e+00, %body ]
  %phi2 = phi double [ 0.000000e+00, %entry ], [ 0.000000e+00, %body ]
  %mul.i478.i = fmul fast double %phi1, 0.000000e+00
  %mul7.i485.i = fmul fast double undef, 0.000000e+00
  %add8.i.i = fadd fast double %mul.i478.i, %mul7.i485.i
  %cmp42.i = fcmp fast ole double %add8.i.i, 0.000000e+00
  br i1 false, label %body, label %exit

exit:
  br i1 false, label %if.then135.i, label %if.end209.i

if.then135.i:
  %cmp145.i = fcmp fast olt double %phi1, 0.000000e+00
  %0 = select i1 false, double 0.000000e+00, double 0.000000e+00
  %cmp152.i = fcmp fast olt double %phi2, 0.000000e+00
  %1 = select i1 %cmp152.i, double 0.000000e+00, double 0.000000e+00
  %mul166.i = fmul fast double 0.000000e+00, %0
  %mul177.i = fmul fast double %mul166.i, 0.000000e+00
  %add178.i = fadd fast double %mul177.i, 0.000000e+00
  %mul181.i = fmul fast double 0.000000e+00, %1
  %mul182.i = fmul fast double %mul181.i, 0.000000e+00
  %add183.i = fadd fast double %mul182.i, 0.000000e+00
  br label %if.end209.i

if.end209.i:
  %drdys.1.i = phi double [ %add183.i, %if.then135.i ], [ 0.000000e+00, %exit ]
  %dbdxs.1.i = phi double [ %add178.i, %if.then135.i ], [ 0.000000e+00, %exit ]
  ret void
}
