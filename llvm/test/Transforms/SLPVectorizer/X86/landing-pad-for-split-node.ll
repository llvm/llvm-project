; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-9999 < %s | FileCheck %s

define void @test(i32 %arg) personality ptr null {
; CHECK-LABEL: define void @test(
; CHECK-SAME: i32 [[ARG:%.*]]) personality ptr null {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    [[LOAD:%.*]] = load i32, ptr addrspace(3) null, align 4
; CHECK-NEXT:    [[LOAD1:%.*]] = load i32, ptr addrspace(3) null, align 4
; CHECK-NEXT:    [[LOAD2:%.*]] = load i32, ptr addrspace(3) null, align 4
; CHECK-NEXT:    [[LOAD3:%.*]] = load i32, ptr addrspace(3) null, align 4
; CHECK-NEXT:    [[INVOKE:%.*]] = invoke i32 null(ptr addrspace(1) null, i32 0)
; CHECK-NEXT:            to label %[[BB4:.*]] unwind label %[[BB5:.*]]
; CHECK:       [[BB4]]:
; CHECK-NEXT:    ret void
; CHECK:       [[BB5]]:
; CHECK-NEXT:    [[PHI:%.*]] = phi i32 [ 0, %[[BB]] ]
; CHECK-NEXT:    [[PHI6:%.*]] = phi i32 [ 0, %[[BB]] ]
; CHECK-NEXT:    [[PHI7:%.*]] = phi i32 [ 0, %[[BB]] ]
; CHECK-NEXT:    [[PHI8:%.*]] = phi i32 [ 0, %[[BB]] ]
; CHECK-NEXT:    [[LANDINGPAD:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            cleanup
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> poison, i32 [[LOAD]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> [[TMP0]], i32 [[LOAD1]], i32 1
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <4 x i32> [[TMP1]], i32 [[LOAD3]], i32 2
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <4 x i32> [[TMP2]], i32 [[LOAD2]], i32 3
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <4 x i32> poison, i32 [[PHI]], i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <4 x i32> [[TMP4]], i32 [[PHI8]], i32 1
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <4 x i32> [[TMP5]], i32 [[PHI6]], i32 2
; CHECK-NEXT:    [[TMP7:%.*]] = insertelement <4 x i32> [[TMP6]], i32 [[PHI7]], i32 3
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <4 x i32> [[TMP3]], <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP9:%.*]] = call <8 x i32> @llvm.vector.insert.v8i32.v4i32(<8 x i32> [[TMP8]], <4 x i32> [[TMP7]], i64 4)
; CHECK-NEXT:    br label %[[BB11:.*]]
; CHECK:       [[BB9:.*]]:
; CHECK-NEXT:    [[LANDINGPAD10:%.*]] = landingpad { ptr, i32 }
; CHECK-NEXT:            cleanup
; CHECK-NEXT:    br label %[[BB11]]
; CHECK:       [[BB11]]:
; CHECK-NEXT:    [[TMP10:%.*]] = phi <8 x i32> [ poison, %[[BB9]] ], [ [[TMP9]], %[[BB5]] ]
; CHECK-NEXT:    ret void
;
bb:
  %load = load i32, ptr addrspace(3) null, align 4
  %load1 = load i32, ptr addrspace(3) null, align 4
  %load2 = load i32, ptr addrspace(3) null, align 4
  %load3 = load i32, ptr addrspace(3) null, align 4
  %invoke = invoke i32 null(ptr addrspace(1) null, i32 0)
  to label %bb4 unwind label %bb5

bb4:                                              ; preds = %bb
  ret void

bb5:                                              ; preds = %bb
  %phi = phi i32 [ 0, %bb ]
  %phi6 = phi i32 [ 0, %bb ]
  %phi7 = phi i32 [ 0, %bb ]
  %phi8 = phi i32 [ 0, %bb ]
  %landingpad = landingpad { ptr, i32 }
  cleanup
  br label %bb11

bb9:                                              ; No predecessors!
  %landingpad10 = landingpad { ptr, i32 }
  cleanup
  br label %bb11

bb11:                                             ; preds = %bb9, %bb5
  %phi12 = phi i32 [ 0, %bb9 ], [ %phi, %bb5 ]
  %phi13 = phi i32 [ 0, %bb9 ], [ %phi8, %bb5 ]
  %phi14 = phi i32 [ 0, %bb9 ], [ %phi6, %bb5 ]
  %phi15 = phi i32 [ %arg, %bb9 ], [ %phi7, %bb5 ]
  %phi16 = phi i32 [ 0, %bb9 ], [ %load, %bb5 ]
  %phi17 = phi i32 [ 0, %bb9 ], [ %load1, %bb5 ]
  %phi18 = phi i32 [ %arg, %bb9 ], [ %load2, %bb5 ]
  %phi19 = phi i32 [ 0, %bb9 ], [ %load3, %bb5 ]
  ret void
}
