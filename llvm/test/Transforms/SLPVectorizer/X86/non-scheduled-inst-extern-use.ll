; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-100 < %s | FileCheck %s

define void @test(i32 %arg) {
; CHECK-LABEL: define void @test(
; CHECK-SAME: i32 [[ARG:%.*]]) {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 [[ARG]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = sub <4 x i32> zeroinitializer, [[TMP0]]
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <4 x i32> [[TMP1]], <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP3:%.*]] = add <4 x i32> zeroinitializer, [[TMP2]]
; CHECK-NEXT:    br i1 false, label %[[BB8:.*]], label %[[BB4:.*]]
; CHECK:       [[BB4]]:
; CHECK-NEXT:    [[TMP4:%.*]] = add <4 x i32> zeroinitializer, [[TMP3]]
; CHECK-NEXT:    br label %[[BB8]]
; CHECK:       [[BB8]]:
; CHECK-NEXT:    [[TMP5:%.*]] = phi <4 x i32> [ [[TMP4]], %[[BB4]] ], [ [[TMP1]], %[[BB1]] ]
; CHECK-NEXT:    ret void
;
bb:
  br label %bb1

bb1:
  %sub = sub i32 0, %arg
  %add = add i32 0, 0
  %add2 = add i32 0, 0
  %add3 = add i32 0, 0
  br i1 false, label %bb8, label %bb4

bb4:
  %add5 = add i32 %add3, 0
  %add6 = add i32 0, 0
  %add7 = add i32 0, 0
  br label %bb8

bb8:
  %phi = phi i32 [ %sub, %bb4 ], [ %sub, %bb1 ]
  %phi9 = phi i32 [ %add5, %bb4 ], [ %add, %bb1 ]
  %phi10 = phi i32 [ %add6, %bb4 ], [ %add2, %bb1 ]
  %phi11 = phi i32 [ %add7, %bb4 ], [ %add3, %bb1 ]
  ret void
}

