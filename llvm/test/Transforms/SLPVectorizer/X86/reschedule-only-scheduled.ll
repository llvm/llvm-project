; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu < %s | FileCheck %s

define i16 @test() {
; CHECK-LABEL: define i16 @test() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = lshr i32 0, 0
; CHECK-NEXT:    [[TMP1:%.*]] = shl i32 [[TMP0]], 0
; CHECK-NEXT:    [[CALL99_I:%.*]] = call i32 @llvm.bswap.i32(i32 0)
; CHECK-NEXT:    [[TMP2:%.*]] = lshr i32 [[CALL99_I]], 0
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <2 x i32> poison, i32 [[TMP1]], i32 0
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <2 x i32> [[TMP3]], i32 [[TMP2]], i32 1
; CHECK-NEXT:    [[TMP5:%.*]] = and <2 x i32> [[TMP4]], zeroinitializer
; CHECK-NEXT:    [[TMP6:%.*]] = shl i32 0, 0
; CHECK-NEXT:    [[UNSCLEAR186_I:%.*]] = and i32 [[TMP6]], 0
; CHECK-NEXT:    [[TMP7:%.*]] = shl i32 0, 0
; CHECK-NEXT:    [[CALL7_I45:%.*]] = tail call i32 null(i32 0)
; CHECK-NEXT:    [[TMP8:%.*]] = lshr i32 [[CALL7_I45]], 0
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <2 x i32> poison, i32 [[TMP7]], i32 0
; CHECK-NEXT:    [[TMP10:%.*]] = insertelement <2 x i32> [[TMP9]], i32 [[TMP8]], i32 1
; CHECK-NEXT:    [[TMP11:%.*]] = and <2 x i32> [[TMP10]], zeroinitializer
; CHECK-NEXT:    [[TMP12:%.*]] = lshr i32 0, 0
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <2 x i32> <i32 poison, i32 0>, i32 [[TMP12]], i32 0
; CHECK-NEXT:    [[TMP14:%.*]] = shl <2 x i32> [[TMP13]], zeroinitializer
; CHECK-NEXT:    [[TMP15:%.*]] = and <2 x i32> [[TMP14]], zeroinitializer
; CHECK-NEXT:    [[TMP16:%.*]] = shufflevector <2 x i32> [[TMP5]], <2 x i32> poison, <24 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP17:%.*]] = shufflevector <24 x i32> <i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 0, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 0, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 0>, <24 x i32> [[TMP16]], <24 x i32> <i32 0, i32 1, i32 24, i32 25, i32 poison, i32 5, i32 poison, i32 7, i32 poison, i32 poison, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 22, i32 23>
; CHECK-NEXT:    [[TMP18:%.*]] = shufflevector <24 x i32> [[TMP17]], <24 x i32> <i32 0, i32 undef, i32 0, i32 undef, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 24, i32 5, i32 26, i32 7, i32 28, i32 29, i32 poison, i32 11, i32 poison, i32 poison, i32 poison, i32 15, i32 poison, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 22, i32 23>
; CHECK-NEXT:    [[TMP19:%.*]] = insertelement <24 x i32> [[TMP18]], i32 [[UNSCLEAR186_I]], i32 10
; CHECK-NEXT:    [[TMP20:%.*]] = shufflevector <2 x i32> [[TMP11]], <2 x i32> poison, <24 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP21:%.*]] = shufflevector <24 x i32> [[TMP19]], <24 x i32> [[TMP20]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; CHECK-NEXT:    [[TMP22:%.*]] = shufflevector <2 x i32> [[TMP15]], <2 x i32> poison, <24 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <24 x i32> [[TMP21]], <24 x i32> [[TMP22]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 24, i32 15, i32 25, i32 17, i32 poison, i32 poison, i32 poison, i32 poison, i32 22, i32 23>
; CHECK-NEXT:    [[TMP24:%.*]] = shufflevector <24 x i32> [[TMP23]], <24 x i32> <i32 0, i32 0, i32 0, i32 0, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>, <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 24, i32 25, i32 26, i32 27, i32 22, i32 23>
; CHECK-NEXT:    [[TMP25:%.*]] = shufflevector <24 x i32> [[TMP24]], <24 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison, i32 0, i32 poison, i32 0, i32 0, i32 0, i32 poison, i32 0, i32 0, i32 0, i32 poison, i32 0, i32 poison, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <24 x i32> <i32 24, i32 25, i32 26, i32 27, i32 28, i32 4, i32 30, i32 6, i32 32, i32 33, i32 34, i32 poison, i32 36, i32 37, i32 38, i32 poison, i32 40, i32 poison, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47>
; CHECK-NEXT:    [[TMP26:%.*]] = insertelement <24 x i32> [[TMP25]], i32 [[UNSCLEAR186_I]], i32 11
; CHECK-NEXT:    [[TMP27:%.*]] = shufflevector <2 x i32> [[TMP15]], <2 x i32> poison, <24 x i32> <i32 0, i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP28:%.*]] = shufflevector <24 x i32> [[TMP26]], <24 x i32> [[TMP27]], <24 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 24, i32 16, i32 26, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; CHECK-NEXT:    [[TMP29:%.*]] = icmp ne <24 x i32> [[TMP24]], [[TMP28]]
; CHECK-NEXT:    [[RDX_OP:%.*]] = shufflevector <24 x i1> [[TMP29]], <24 x i1> <i1 false, i1 false, i1 false, i1 false, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef, i1 undef>, <28 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27>
; CHECK-NEXT:    [[TMP30:%.*]] = bitcast <28 x i1> [[RDX_OP]] to i28
; CHECK-NEXT:    [[TMP31:%.*]] = call i28 @llvm.ctpop.i28(i28 [[TMP30]])
; CHECK-NEXT:    [[TMP32:%.*]] = trunc i28 [[TMP31]] to i16
; CHECK-NEXT:    [[TMP33:%.*]] = call i4 @llvm.ctpop.i4(i4 -8)
; CHECK-NEXT:    [[TMP34:%.*]] = zext i4 [[TMP33]] to i16
; CHECK-NEXT:    [[OP_RDX4:%.*]] = add i16 [[TMP34]], [[TMP32]]
; CHECK-NEXT:    ret i16 [[OP_RDX4]]
;
entry:
  %.not243.i = icmp ne i32 0, 0
  %add51.i = zext i1 %.not243.i to i16
  %.not244.i = icmp ne i32 0, 0
  %add58.i = zext i1 %.not244.i to i16
  %add59.i = add i16 %add51.i, %add58.i
  %.not247.i = icmp ne i32 0, 0
  %add74.i = zext i1 %.not247.i to i16
  %add75.i = add i16 %add59.i, %add74.i
  %.not248.i = icmp ne i32 0, 0
  %add81.i = zext i1 %.not248.i to i16
  %add82.i = add i16 %add75.i, %add81.i
  %0 = lshr i32 0, 0
  %1 = shl i32 %0, 0
  %unsclear94.i = and i32 %1, 0
  %.not251.i = icmp ne i32 %unsclear94.i, 0
  %add97.i = zext i1 %.not251.i to i16
  %add98.i = add i16 %add82.i, %add97.i
  %call99.i = call i32 @llvm.bswap.i32(i32 0)
  %2 = lshr i32 %call99.i, 0
  %3 = and i32 %2, 0
  %.not252.i = icmp ne i32 %3, 0
  %add104.i = zext i1 %.not252.i to i16
  %add105.i = add i16 %add98.i, %add104.i
  %4 = shl i32 0, 0
  %unsclear117.i = and i32 %4, 0
  %.not255.i = icmp ne i32 %unsclear117.i, 0
  %add120.i = zext i1 %.not255.i to i16
  %add121.i = add i16 %add105.i, %add120.i
  %.not256.i = icmp ne i32 0, %unsclear117.i
  %add127.i = zext i1 %.not256.i to i16
  %add128.i = add i16 %add121.i, %add127.i
  %5 = shl i32 0, 0
  %unsclear140.i = and i32 %5, 0
  %.not259.i = icmp ne i32 %unsclear140.i, 0
  %add143.i = zext i1 %.not259.i to i16
  %add144.i = add i16 %add128.i, %add143.i
  %.not260.i = icmp ne i32 0, %unsclear140.i
  %add150.i = zext i1 %.not260.i to i16
  %add151.i = add i16 %add144.i, %add150.i
  %6 = shl i32 0, 0
  %unsclear163.i = and i32 %6, 0
  %.not263.i = icmp ne i32 %unsclear163.i, 0
  %add166.i = zext i1 %.not263.i to i16
  %add167.i = add i16 %add151.i, %add166.i
  %unsclear169.i = shl i32 0, 0
  %unsclear170.i = and i32 %unsclear169.i, 0
  %.not264.i = icmp ne i32 %unsclear170.i, 0
  %add173.i = zext i1 %.not264.i to i16
  %add174.i = add i16 %add167.i, %add173.i
  %7 = shl i32 0, 0
  %unsclear186.i = and i32 %7, 0
  %.not267.i = icmp ne i32 %unsclear186.i, 0
  %add189.i = zext i1 %.not267.i to i16
  %add190.i = add i16 %add174.i, %add189.i
  %.not268.i = icmp ne i32 0, %unsclear186.i
  %add196.i = zext i1 %.not268.i to i16
  %add197.i = add i16 %add190.i, %add196.i
  %8 = shl i32 0, 0
  %unsclear4.i42 = and i32 %8, 0
  %.not.i43 = icmp ne i32 %unsclear4.i42, 0
  %add.i = zext i1 %.not.i43 to i16
  %add6.i44 = add i16 %add197.i, %add.i
  %call7.i45 = tail call i32 null(i32 0)
  %9 = lshr i32 %call7.i45, 0
  %10 = and i32 %9, 0
  %.not209.i = icmp ne i32 %10, 0
  %add12.i46 = zext i1 %.not209.i to i16
  %add13.i47 = add i16 %add6.i44, %add12.i46
  %11 = lshr i32 0, 0
  %12 = shl i32 %11, 0
  %unsclear25.i51 = and i32 %12, 0
  %.not212.i = icmp ne i32 %unsclear25.i51, 0
  %add28.i52 = zext i1 %.not212.i to i16
  %add29.i53 = add i16 %add13.i47, %add28.i52
  %.not213.i = icmp ne i32 0, %unsclear25.i51
  %add35.i55 = zext i1 %.not213.i to i16
  %add36.i56 = add i16 %add29.i53, %add35.i55
  %13 = shl i32 0, 0
  %unsclear48.i60 = and i32 %13, 0
  %.not216.i = icmp ne i32 %unsclear48.i60, 0
  %add51.i61 = zext i1 %.not216.i to i16
  %add52.i62 = add i16 %add36.i56, %add51.i61
  %.not217.i = icmp ne i32 0, %unsclear48.i60
  %add58.i64 = zext i1 %.not217.i to i16
  %add59.i65 = add i16 %add52.i62, %add58.i64
  %14 = shl i32 0, 0
  %unsclear71.i69 = and i32 %14, 0
  %.not220.i = icmp ne i32 %unsclear71.i69, 0
  %add74.i70 = zext i1 %.not220.i to i16
  %add75.i71 = add i16 %add59.i65, %add74.i70
  %15 = shl i32 0, 0
  %unsclear78.i = and i32 %15, 0
  %.not221.i = icmp ne i32 %unsclear78.i, 0
  %add81.i73 = zext i1 %.not221.i to i16
  %add82.i74 = add i16 %add75.i71, %add81.i73
  %16 = shl i32 0, 0
  %unsclear94.i78 = and i32 %16, 0
  %.not224.i = icmp ne i32 %unsclear94.i78, 0
  %add97.i79 = zext i1 %.not224.i to i16
  %add98.i80 = add i16 %add82.i74, %add97.i79
  %17 = shl i32 0, 0
  %unsclear101.i = and i32 %17, 0
  %.not225.i = icmp ne i32 %unsclear101.i, 0
  %add104.i82 = zext i1 %.not225.i to i16
  %add105.i83 = add i16 %add98.i80, %add104.i82
  %.not229.i = icmp ne i32 0, 0
  %add127.i91 = zext i1 %.not229.i to i16
  %add128.i92 = add i16 %add105.i83, %add127.i91
  %.not232.i = icmp ne i32 0, 0
  %add143.i97 = zext i1 %.not232.i to i16
  %add144.i98 = add i16 %add128.i92, %add143.i97
  %.not233.i = icmp ne i32 0, 0
  %add150.i100 = zext i1 %.not233.i to i16
  %add151.i101 = add i16 %add144.i98, %add150.i100
  %.not236.i106 = icmp ne i32 0, 0
  %add166.i107 = zext i1 %.not236.i106 to i16
  %add167.i108 = add i16 %add151.i101, %add166.i107
  %.not237.i = icmp ne i32 0, 0
  %add173.i110 = zext i1 %.not237.i to i16
  %add174.i111 = add i16 %add167.i108, %add173.i110
  %.not.i118 = icmp ne i32 0, 0
  %add.i119 = zext i1 %.not.i118 to i16
  %add6.i120 = add i16 %add174.i111, %add.i119
  %.not209.i122 = icmp ne i32 0, 0
  %add12.i123 = zext i1 %.not209.i122 to i16
  %add13.i124 = add i16 %add6.i120, %add12.i123
  %.not212.i131 = icmp ne i32 1, 0
  %add28.i132 = zext i1 %.not212.i131 to i16
  %add29.i133 = add i16 %add13.i124, %add28.i132
  ret i16 %add29.i133
}

declare i32 @llvm.bswap.i32(i32)

