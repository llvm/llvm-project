; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=slp-vectorizer -S %s | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"

@global = global i32 0

define i64 @main() #0 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[ALLOCA:%.*]] = alloca i32, align 8
; CHECK-NEXT:    [[LOAD:%.*]] = load i32, ptr @global, align 8
; CHECK-NEXT:    [[ADD7:%.*]] = add i32 1, 0
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> <i32 poison, i32 0, i32 poison, i32 0>, i32 [[LOAD]], i32 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> [[TMP0]], i32 [[ADD7]], i32 2
; CHECK-NEXT:    [[TMP2:%.*]] = sub <4 x i32> <i32 -1, i32 0, i32 0, i32 0>, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = extractelement <4 x i32> [[TMP2]], i32 0
; CHECK-NEXT:    [[SUB:%.*]] = sub i32 0, [[TMP3]]
; CHECK-NEXT:    [[MUL:%.*]] = mul i32 [[SUB]], 10
; CHECK-NEXT:    [[ADD1:%.*]] = add i32 [[MUL]], 10
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <4 x i32> [[TMP2]], <4 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <8 x i32> <i32 0, i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 0, i32 0>, <8 x i32> [[TMP4]], <8 x i32> <i32 0, i32 8, i32 2, i32 10, i32 11, i32 12, i32 6, i32 7>
; CHECK-NEXT:    [[TMP6:%.*]] = mul <8 x i32> zeroinitializer, [[TMP5]]
; CHECK-NEXT:    [[TMP7:%.*]] = or <8 x i32> [[TMP6]], zeroinitializer
; CHECK-NEXT:    br label [[BB26:%.*]]
; CHECK:       bb21:
; CHECK-NEXT:    [[GETELEMENTPTR:%.*]] = getelementptr i8, ptr [[ALLOCA]], i64 40
; CHECK-NEXT:    [[LOAD22:%.*]] = load i32, ptr [[GETELEMENTPTR]], align 8
; CHECK-NEXT:    [[SEXT:%.*]] = sext i32 [[LOAD22]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <4 x i32> [[TMP2]], i32 2
; CHECK-NEXT:    [[SUB23:%.*]] = sub i32 1, [[TMP8]]
; CHECK-NEXT:    [[SEXT24:%.*]] = sext i32 [[SUB23]] to i64
; CHECK-NEXT:    [[OR25:%.*]] = or i64 [[SEXT]], [[SEXT24]]
; CHECK-NEXT:    ret i64 [[OR25]]
; CHECK:       bb26:
; CHECK-NEXT:    [[PHI:%.*]] = phi i64 [ 1, [[BB:%.*]] ], [ 0, [[BB26]] ]
; CHECK-NEXT:    [[GETELEMENTPTR27:%.*]] = getelementptr i32, ptr [[ALLOCA]], i64 10
; CHECK-NEXT:    store i32 [[ADD1]], ptr [[GETELEMENTPTR27]], align 4
; CHECK-NEXT:    [[ADD28:%.*]] = add i64 [[PHI]], 10
; CHECK-NEXT:    [[GETELEMENTPTR29:%.*]] = getelementptr i32, ptr [[ALLOCA]], i64 [[ADD28]]
; CHECK-NEXT:    store <8 x i32> [[TMP7]], ptr [[GETELEMENTPTR29]], align 4
; CHECK-NEXT:    br i1 true, label [[BB21:%.*]], label [[BB26]]
;
bb:
  %alloca = alloca i32, align 8
  %load = load i32, ptr @global, align 8
  %add = add i32 1, %load
  %sub = sub i32 0, %add
  %mul = mul i32 %sub, 10
  %add1 = add i32 %mul, 10
  %mul2 = mul i32 0, 0
  %or = or i32 %mul2, 0
  %mul3 = mul i32 %add, 0
  %or4 = or i32 %mul3, 0
  %mul5 = mul i32 0, 0
  %or6 = or i32 %mul5, 0
  %add7 = add i32 1, 0
  %sub8 = sub i32 0, 0
  %mul9 = mul i32 %sub8, 0
  %or10 = or i32 %mul9, 0
  %sub11 = sub i32 0, %add7
  %mul12 = mul i32 %sub11, 0
  %or13 = or i32 %mul12, 0
  %sub14 = sub i32 0, 0
  %mul15 = mul i32 %sub14, 0
  %or16 = or i32 %mul15, 0
  %mul17 = mul i32 0, 0
  %or18 = or i32 %mul17, 0
  %mul19 = mul i32 0, 0
  %or20 = or i32 %mul19, 0
  br label %bb26

bb21:                                             ; preds = %bb26
  %getelementptr = getelementptr i8, ptr %alloca, i64 40
  %load22 = load i32, ptr %getelementptr, align 8
  %sext = sext i32 %load22 to i64
  %sub23 = sub i32 1, %sub11
  %sext24 = sext i32 %sub23 to i64
  %or25 = or i64 %sext, %sext24
  ret i64 %or25

bb26:                                             ; preds = %bb26, %bb
  %phi = phi i64 [ 1, %bb ], [ 0, %bb26 ]
  %getelementptr27 = getelementptr i32, ptr %alloca, i64 10
  store i32 %add1, ptr %getelementptr27, align 4
  %add28 = add i64 %phi, 10
  %getelementptr29 = getelementptr i32, ptr %alloca, i64 %add28
  store i32 %or, ptr %getelementptr29, align 4
  %add30 = add i64 %phi, 11
  %getelementptr31 = getelementptr i32, ptr %alloca, i64 %add30
  store i32 %or4, ptr %getelementptr31, align 4
  %add32 = add i64 %phi, 12
  %getelementptr33 = getelementptr i32, ptr %alloca, i64 %add32
  store i32 %or6, ptr %getelementptr33, align 4
  %add34 = add i64 %phi, 13
  %getelementptr35 = getelementptr i32, ptr %alloca, i64 %add34
  store i32 %or10, ptr %getelementptr35, align 4
  %add36 = add i64 %phi, 14
  %getelementptr37 = getelementptr i32, ptr %alloca, i64 %add36
  store i32 %or13, ptr %getelementptr37, align 4
  %add38 = add i64 %phi, 15
  %getelementptr39 = getelementptr i32, ptr %alloca, i64 %add38
  store i32 %or16, ptr %getelementptr39, align 4
  %add40 = add i64 %phi, 16
  %getelementptr41 = getelementptr i32, ptr %alloca, i64 %add40
  store i32 %or18, ptr %getelementptr41, align 4
  %add42 = add i64 %phi, 17
  %getelementptr43 = getelementptr i32, ptr %alloca, i64 %add42
  store i32 %or20, ptr %getelementptr43, align 4
  br i1 true, label %bb21, label %bb26
}

attributes #0 = { "target-features"="+avx2" }
