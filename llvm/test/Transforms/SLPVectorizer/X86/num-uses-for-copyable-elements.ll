; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-apple-macosx15.0.0  -mcpu=skylake-avx512 -S < %s | FileCheck %s

define void @test(ptr %output) {
; CHECK-LABEL: define void @test(
; CHECK-SAME: ptr [[OUTPUT:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[ARRAYIDX_2_I:%.*]] = getelementptr i8, ptr [[OUTPUT]], i64 8
; CHECK-NEXT:    [[TMP0:%.*]] = call <4 x i32> @llvm.masked.load.v4i32.p0(ptr [[OUTPUT]], i32 4, <4 x i1> <i1 true, i1 false, i1 false, i1 true>, <4 x i32> poison)
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <4 x i32> [[TMP0]], <4 x i32> poison, <2 x i32> <i32 0, i32 3>
; CHECK-NEXT:    [[TMP2:%.*]] = xor <2 x i32> <i32 -1, i32 0>, [[TMP1]]
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <2 x i32> [[TMP1]], <2 x i32> <i32 0, i32 poison>, <2 x i32> <i32 2, i32 1>
; CHECK-NEXT:    [[TMP4:%.*]] = call <2 x i32> @llvm.fshl.v2i32(<2 x i32> [[TMP2]], <2 x i32> [[TMP3]], <2 x i32> splat (i32 2))
; CHECK-NEXT:    store <2 x i32> [[TMP4]], ptr [[ARRAYIDX_2_I]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %arrayidx.2.i = getelementptr i8, ptr %output, i64 8
  %0 = load i32, ptr %output, align 4
  %arrayidx.3.i = getelementptr i8, ptr %output, i64 12
  %1 = load i32, ptr %arrayidx.3.i, align 4
  %xor7 = xor i32 -1, %0
  %or.i = tail call i32 @llvm.fshl.i32(i32 %xor7, i32 0, i32 2)
  %or.i11 = tail call i32 @llvm.fshl.i32(i32 %1, i32 %1, i32 2)
  store i32 %or.i, ptr %arrayidx.2.i, align 4
  store i32 %or.i11, ptr %arrayidx.3.i, align 4
  ret void
}

declare i32 @llvm.fshl.i32(i32, i32, i32)
