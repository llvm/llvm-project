; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-99999 < %s | FileCheck %s

define i64 @test(i32 %arg) {
; CHECK-LABEL: define i64 @test(
; CHECK-SAME: i32 [[ARG:%.*]]) {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    [[FREEZE:%.*]] = freeze i32 0
; CHECK-NEXT:    br i1 false, label %[[BB1:.*]], label %[[BB1]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[LOAD:%.*]] = load i32, ptr addrspace(1) null, align 4
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> <i32 0, i32 0, i32 0, i32 poison>, i32 [[ARG]], i32 3
; CHECK-NEXT:    [[ADD:%.*]] = add i32 [[FREEZE]], 0
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <2 x i32> poison, i32 [[FREEZE]], i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <2 x i32> [[TMP1]], <2 x i32> poison, <2 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP3:%.*]] = add <2 x i32> [[TMP2]], zeroinitializer
; CHECK-NEXT:    [[TMP4:%.*]] = add <2 x i32> [[TMP2]], zeroinitializer
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <2 x i32> poison, i32 [[ARG]], i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <2 x i32> [[TMP5]], i32 [[LOAD]], i32 1
; CHECK-NEXT:    [[TMP7:%.*]] = icmp ult <2 x i32> [[TMP4]], [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractelement <2 x i1> [[TMP7]], i32 0
; CHECK-NEXT:    [[AND:%.*]] = and i1 [[TMP8]], false
; CHECK-NEXT:    [[TMP9:%.*]] = shufflevector <2 x i32> [[TMP3]], <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <4 x i32> <i32 0, i32 poison, i32 poison, i32 0>, <4 x i32> [[TMP9]], <4 x i32> <i32 0, i32 4, i32 5, i32 3>
; CHECK-NEXT:    [[TMP11:%.*]] = icmp eq <4 x i32> [[TMP10]], [[TMP0]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp ult <4 x i32> [[TMP10]], [[TMP0]]
; CHECK-NEXT:    [[TMP13:%.*]] = shufflevector <4 x i1> [[TMP11]], <4 x i1> [[TMP12]], <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECK-NEXT:    br i1 false, label %[[BB11:.*]], label %[[BB12:.*]]
; CHECK:       [[BB11]]:
; CHECK-NEXT:    [[ZEXT:%.*]] = zext i32 [[ADD]] to i64
; CHECK-NEXT:    ret i64 0
; CHECK:       [[BB12]]:
; CHECK-NEXT:    [[ZEXT13:%.*]] = zext i32 [[ADD]] to i64
; CHECK-NEXT:    ret i64 0
;
bb:
  %freeze = freeze i32 0
  br i1 false, label %bb1, label %bb1

bb1:
  %load = load i32, ptr addrspace(1) null, align 4
  %0 = insertelement <4 x i32> <i32 0, i32 poison, i32 poison, i32 0>, i32 %freeze, i32 2
  %1 = insertelement <4 x i32> <i32 0, i32 0, i32 0, i32 poison>, i32 %arg, i32 3
  %add = add i32 %freeze, 0
  %2 = insertelement <2 x i32> poison, i32 %freeze, i32 0
  %3 = shufflevector <2 x i32> %2, <2 x i32> poison, <2 x i32> zeroinitializer
  %4 = add <2 x i32> %3, zeroinitializer
  %5 = insertelement <2 x i32> poison, i32 %arg, i32 0
  %6 = insertelement <2 x i32> %5, i32 %load, i32 1
  %7 = icmp ult <2 x i32> %4, %6
  %8 = extractelement <2 x i1> %7, i32 0
  %and = and i1 %8, false
  %9 = insertelement <4 x i32> %0, i32 %add, i32 1
  %10 = icmp eq <4 x i32> %9, %1
  %11 = icmp ult <4 x i32> %9, %1
  %12 = shufflevector <4 x i1> %10, <4 x i1> %11, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  br i1 false, label %bb11, label %bb12

bb11:
  %zext = zext i32 %add to i64
  ret i64 0

bb12:
  %zext13 = zext i32 %add to i64
  ret i64 0
}
