; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; RUN: opt -passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=skx -S < %s | FileCheck %s
; RUN: opt -passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=skx -S < %s -slp-threshold=-100 | FileCheck %s --check-prefix=CHECK-SLP-THRESHOLD

define void @test() {
; CHECK-LABEL: define void @test
; CHECK-SAME: () #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[COND_IN_V:%.*]] = select i1 false, ptr null, ptr null
; CHECK-NEXT:    br label [[BB:%.*]]
; CHECK:       bb:
; CHECK-NEXT:    [[TMP0:%.*]] = call <13 x i64> @llvm.masked.load.v13i64.p0(ptr [[COND_IN_V]], i32 8, <13 x i1> <i1 true, i1 false, i1 false, i1 false, i1 true, i1 false, i1 false, i1 false, i1 true, i1 false, i1 false, i1 false, i1 true>, <13 x i64> poison)
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <13 x i64> [[TMP0]], <13 x i64> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
; CHECK-NEXT:    [[TMP2:%.*]] = icmp eq <4 x i64> [[TMP1]], zeroinitializer
; CHECK-NEXT:    ret void
;
; CHECK-SLP-THRESHOLD-LABEL: define void @test
; CHECK-SLP-THRESHOLD-SAME: () #[[ATTR0:[0-9]+]] {
; CHECK-SLP-THRESHOLD-NEXT:  entry:
; CHECK-SLP-THRESHOLD-NEXT:    [[COND_IN_V:%.*]] = select i1 false, ptr null, ptr null
; CHECK-SLP-THRESHOLD-NEXT:    br label [[BB:%.*]]
; CHECK-SLP-THRESHOLD:       bb:
; CHECK-SLP-THRESHOLD-NEXT:    [[TMP0:%.*]] = call <13 x i64> @llvm.masked.load.v13i64.p0(ptr [[COND_IN_V]], i32 8, <13 x i1> <i1 true, i1 false, i1 false, i1 false, i1 true, i1 false, i1 false, i1 false, i1 true, i1 false, i1 false, i1 false, i1 true>, <13 x i64> poison)
; CHECK-SLP-THRESHOLD-NEXT:    [[TMP1:%.*]] = shufflevector <13 x i64> [[TMP0]], <13 x i64> poison, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
; CHECK-SLP-THRESHOLD-NEXT:    [[TMP2:%.*]] = icmp eq <4 x i64> [[TMP1]], zeroinitializer
; CHECK-SLP-THRESHOLD-NEXT:    ret void
;
entry:
  %cond.in.v = select i1 false, ptr null, ptr null
  br label %bb

bb:                            ; preds = %entry
  %v = load i64, ptr %cond.in.v, align 8
  %bv = icmp eq i64 %v, 0
  %in.1 = getelementptr i64, ptr %cond.in.v, i64 4
  %v.1 = load i64, ptr %in.1, align 8
  %bv.1 = icmp eq i64 %v.1, 0
  %in.2 = getelementptr i64, ptr %cond.in.v, i64 8
  %v.2 = load i64, ptr %in.2, align 8
  %bv.2 = icmp eq i64 %v.2, 0
  %in.3 = getelementptr i64, ptr %cond.in.v, i64 12
  %v.3 = load i64, ptr %in.3, align 8
  %bv.3 = icmp eq i64 %v.3, 0
  ret void
}
