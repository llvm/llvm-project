; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -passes=slp-vectorizer -S -slp-threshold=-99999 -mtriple=x86_64-unknown-linux-gnu < %s | FileCheck %s

define double @test() {
; CHECK-LABEL: define double @test() {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi <4 x i32> [ zeroinitializer, %[[BB]] ], [ [[TMP3:%.*]], %[[BB4:.*]] ]
; CHECK-NEXT:    br label %[[BB4]]
; CHECK:       [[BB4]]:
; CHECK-NEXT:    [[MUL:%.*]] = mul i32 0, 1
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <4 x i32> [[TMP0]], <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 0>, i32 [[MUL]], i32 0
; CHECK-NEXT:    [[TMP3]] = or <4 x i32> [[TMP1]], [[TMP2]]
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <4 x i32> <i32 poison, i32 0, i32 0, i32 1>, i32 [[MUL]], i32 0
; CHECK-NEXT:    [[TMP5:%.*]] = or <4 x i32> [[TMP0]], [[TMP4]]
; CHECK-NEXT:    [[TMP6:%.*]] = extractelement <4 x i32> [[TMP5]], i32 2
; CHECK-NEXT:    [[AND:%.*]] = and i32 [[TMP6]], 0
; CHECK-NEXT:    br i1 false, label %[[BB7:.*]], label %[[BB1]]
; CHECK:       [[BB7]]:
; CHECK-NEXT:    [[TMP7:%.*]] = phi <4 x i32> [ [[TMP5]], %[[BB4]] ]
; CHECK-NEXT:    ret double 0.000000e+00
;
bb:
  br label %bb1

bb1:
  %phi = phi i32 [ 0, %bb ], [ 0, %bb4 ]
  %phi2 = phi i32 [ 0, %bb ], [ 0, %bb4 ]
  %phi3 = phi i32 [ 0, %bb ], [ %or5, %bb4 ]
  br label %bb4

bb4:
  %or = or i32 %phi2, 0
  %mul = mul i32 0, 1
  %or5 = or i32 %phi3, %mul
  %and = and i32 %or, 0
  %or6 = or i32 %phi2, 1
  br i1 false, label %bb7, label %bb1

bb7:
  %phi8 = phi i32 [ %phi, %bb4 ]
  %phi9 = phi i32 [ %or, %bb4 ]
  %phi10 = phi i32 [ %or5, %bb4 ]
  %phi11 = phi i32 [ %or6, %bb4 ]
  ret double 0.000000e+00
}

