; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer -slp-threshold=-300 -mtriple=x86_64-unknown-linux-gnu < %s | FileCheck %s

define void @test() {
; CHECK-LABEL: define void @test() {
; CHECK-NEXT:    [[XOR108_I_I_I:%.*]] = xor i64 0, 1
; CHECK-NEXT:    [[TMP1:%.*]] = trunc i64 [[XOR108_I_I_I]] to i1
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <14 x i1> <i1 false, i1 false, i1 false, i1 poison, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 poison, i1 false, i1 poison>, i1 [[TMP1]], i32 3
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <14 x i1> [[TMP2]], <14 x i1> poison, <14 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 3, i32 12, i32 poison>
; CHECK-NEXT:    [[TMP4:%.*]] = lshr <14 x i1> [[TMP3]], <i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 false, i1 poison>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <14 x i1> [[TMP4]], <14 x i1> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 3, i32 7, i32 8, i32 9, i32 3, i32 10, i32 11, i32 12, i32 3>
; CHECK-NEXT:    [[TMP11:%.*]] = zext <16 x i1> [[TMP10]] to <16 x i16>
; CHECK-NEXT:    [[TMP7:%.*]] = or <16 x i16> [[TMP11]], zeroinitializer
; CHECK-NEXT:    [[TMP8:%.*]] = freeze <16 x i16> [[TMP7]]
; CHECK-NEXT:    [[TMP9:%.*]] = icmp eq <16 x i16> [[TMP8]], zeroinitializer
; CHECK-NEXT:    ret void
;
  %xor108.i.i.i = xor i64 0, 1
  %conv115.i.i.i = trunc i64 %xor108.i.i.i to i16
  %add.i.i.i.i = or i16 %conv115.i.i.i, 0
  %add.i.frozen.i.i.i = freeze i16 %add.i.i.i.i
  %.cmp.not.i.i.i = icmp eq i16 %add.i.frozen.i.i.i, 0
  %cond.i1002.1.i.i.i = lshr i64 0, 0
  %conv115.1.i.i.i = trunc i64 %cond.i1002.1.i.i.i to i16
  %add.i.1.i.i.i = or i16 %conv115.1.i.i.i, 0
  %add.i.frozen.1.i.i.i = freeze i16 %add.i.1.i.i.i
  %.cmp.not.1.i.i.i = icmp eq i16 %add.i.frozen.1.i.i.i, 0
  %cond.i1002.2.i.i.i = lshr i64 %xor108.i.i.i, 0
  %conv115.2.i.i.i = trunc i64 %cond.i1002.2.i.i.i to i16
  %add.i.2.i.i.i = or i16 %conv115.2.i.i.i, 0
  %add.i.frozen.2.i.i.i = freeze i16 %add.i.2.i.i.i
  %.cmp.not.2.i.i.i = icmp eq i16 %add.i.frozen.2.i.i.i, 0
  %cond.i1002.3.i.i.i = lshr i64 0, 0
  %conv115.3.i.i.i = trunc i64 %cond.i1002.3.i.i.i to i16
  %add.i.3.i.i.i = or i16 %conv115.3.i.i.i, 0
  %add.i.frozen.3.i.i.i = freeze i16 %add.i.3.i.i.i
  %.cmp.not.3.i.i.i = icmp eq i16 %add.i.frozen.3.i.i.i, 0
  %conv115.i.i.i.1 = trunc i64 %xor108.i.i.i to i16
  %add.i.i.i.i.1 = or i16 %conv115.i.i.i.1, 0
  %add.i.frozen.i.i.i.1 = freeze i16 %add.i.i.i.i.1
  %.cmp.not.i.i.i.1 = icmp eq i16 %add.i.frozen.i.i.i.1, 0
  %cond.i1002.1.i.i.i.1 = lshr i64 0, 0
  %conv115.1.i.i.i.1 = trunc i64 %cond.i1002.1.i.i.i.1 to i16
  %add.i.1.i.i.i.1 = or i16 %conv115.1.i.i.i.1, 0
  %add.i.frozen.1.i.i.i.1 = freeze i16 %add.i.1.i.i.i.1
  %.cmp.not.1.i.i.i.1 = icmp eq i16 %add.i.frozen.1.i.i.i.1, 0
  %cond.i1002.2.i.i.i.1 = lshr i64 0, 0
  %conv115.2.i.i.i.1 = trunc i64 %cond.i1002.2.i.i.i.1 to i16
  %add.i.2.i.i.i.1 = or i16 %conv115.2.i.i.i.1, 0
  %add.i.frozen.2.i.i.i.1 = freeze i16 %add.i.2.i.i.i.1
  %.cmp.not.2.i.i.i.1 = icmp eq i16 %add.i.frozen.2.i.i.i.1, 0
  %cond.i1002.3.i.i.i.1 = lshr i64 0, 0
  %conv115.3.i.i.i.1 = trunc i64 %cond.i1002.3.i.i.i.1 to i16
  %add.i.3.i.i.i.1 = or i16 %conv115.3.i.i.i.1, 0
  %add.i.frozen.3.i.i.i.1 = freeze i16 %add.i.3.i.i.i.1
  %.cmp.not.3.i.i.i.1 = icmp eq i16 %add.i.frozen.3.i.i.i.1, 0
  %conv115.i.i.i.2 = trunc i64 %xor108.i.i.i to i16
  %add.i.i.i.i.2 = or i16 %conv115.i.i.i.2, 0
  %add.i.frozen.i.i.i.2 = freeze i16 %add.i.i.i.i.2
  %.cmp.not.i.i.i.2 = icmp eq i16 %add.i.frozen.i.i.i.2, 0
  %cond.i1002.1.i.i.i.2 = lshr i64 0, 0
  %conv115.1.i.i.i.2 = trunc i64 %cond.i1002.1.i.i.i.2 to i16
  %add.i.1.i.i.i.2 = or i16 %conv115.1.i.i.i.2, 0
  %add.i.frozen.1.i.i.i.2 = freeze i16 %add.i.1.i.i.i.2
  %.cmp.not.1.i.i.i.2 = icmp eq i16 %add.i.frozen.1.i.i.i.2, 0
  %cond.i1002.2.i.i.i.2 = lshr i64 0, 0
  %conv115.2.i.i.i.2 = trunc i64 %cond.i1002.2.i.i.i.2 to i16
  %add.i.2.i.i.i.2 = or i16 %conv115.2.i.i.i.2, 0
  %add.i.frozen.2.i.i.i.2 = freeze i16 %add.i.2.i.i.i.2
  %.cmp.not.2.i.i.i.2 = icmp eq i16 %add.i.frozen.2.i.i.i.2, 0
  %cond.i1002.3.i.i.i.2 = lshr i64 0, 0
  %conv115.3.i.i.i.2 = trunc i64 %cond.i1002.3.i.i.i.2 to i16
  %add.i.3.i.i.i.2 = or i16 %conv115.3.i.i.i.2, 0
  %add.i.frozen.3.i.i.i.2 = freeze i16 %add.i.3.i.i.i.2
  %.cmp.not.3.i.i.i.2 = icmp eq i16 %add.i.frozen.3.i.i.i.2, 0
  %conv115.i.i.i.3 = trunc i64 %xor108.i.i.i to i16
  %add.i.i.i.i.3 = or i16 %conv115.i.i.i.3, 0
  %add.i.frozen.i.i.i.3 = freeze i16 %add.i.i.i.i.3
  %.cmp.not.i.i.i.3 = icmp eq i16 %add.i.frozen.i.i.i.3, 0
  %cond.i1002.1.i.i.i.3 = lshr i64 0, 0
  %conv115.1.i.i.i.3 = trunc i64 %cond.i1002.1.i.i.i.3 to i16
  %add.i.1.i.i.i.3 = or i16 %conv115.1.i.i.i.3, 0
  %add.i.frozen.1.i.i.i.3 = freeze i16 %add.i.1.i.i.i.3
  %.cmp.not.1.i.i.i.3 = icmp eq i16 %add.i.frozen.1.i.i.i.3, 0
  %cond.i1002.2.i.i.i.3 = lshr i64 0, 0
  %conv115.2.i.i.i.3 = trunc i64 %cond.i1002.2.i.i.i.3 to i16
  %add.i.2.i.i.i.3 = or i16 %conv115.2.i.i.i.3, 0
  %add.i.frozen.2.i.i.i.3 = freeze i16 %add.i.2.i.i.i.3
  %.cmp.not.2.i.i.i.3 = icmp eq i16 %add.i.frozen.2.i.i.i.3, 0
  %cond.i1002.3.i.i.i.3 = lshr i64 0, 0
  %conv115.3.i.i.i.3 = trunc i64 %cond.i1002.3.i.i.i.3 to i16
  %add.i.3.i.i.i.3 = or i16 %conv115.3.i.i.i.3, 0
  %add.i.frozen.3.i.i.i.3 = freeze i16 %add.i.3.i.i.i.3
  %.cmp.not.3.i.i.i.3 = icmp eq i16 %add.i.frozen.3.i.i.i.3, 0
  ret void
}
