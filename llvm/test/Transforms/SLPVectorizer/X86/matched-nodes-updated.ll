; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-9999 < %s | FileCheck %s

define i32 @test(i32 %s.0) {
; CHECK-LABEL: define i32 @test(
; CHECK-SAME: i32 [[S_0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[TMP0:%.*]] = insertelement <4 x i32> <i32 0, i32 poison, i32 poison, i32 0>, i32 [[S_0]], i32 2
; CHECK-NEXT:    br label %[[K:.*]]
; CHECK:       [[K]]:
; CHECK-NEXT:    [[DOTPRE:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[TMP17:%.*]], %[[T:.*]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x i32> [[TMP0]], i32 [[DOTPRE]], i32 1
; CHECK-NEXT:    br label %[[O:.*]]
; CHECK:       [[IF_END3:.*]]:
; CHECK-NEXT:    br label %[[IF_END6:.*]]
; CHECK:       [[IF_END6]]:
; CHECK-NEXT:    [[TMP2:%.*]] = phi <2 x i32> [ poison, %[[IF_END3]] ], [ [[TMP24:%.*]], %[[O]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = phi <4 x i32> [ poison, %[[IF_END3]] ], [ zeroinitializer, %[[O]] ]
; CHECK-NEXT:    [[TMP4:%.*]] = phi <2 x i32> [ poison, %[[IF_END3]] ], [ [[TMP29:%.*]], %[[O]] ]
; CHECK-NEXT:    [[TMP5:%.*]] = xor <2 x i32> [[TMP4]], zeroinitializer
; CHECK-NEXT:    [[TMP6:%.*]] = insertelement <8 x i32> <i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, i32 [[TMP22:%.*]], i32 1
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <4 x i32> [[TMP3]], <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP27:%.*]] = shufflevector <8 x i32> [[TMP6]], <8 x i32> [[TMP7]], <8 x i32> <i32 0, i32 1, i32 8, i32 9, i32 10, i32 11, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP30:%.*]] = shufflevector <2 x i32> [[TMP5]], <2 x i32> poison, <8 x i32> <i32 1, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP31:%.*]] = shufflevector <8 x i32> [[TMP27]], <8 x i32> [[TMP30]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 8, i32 9>
; CHECK-NEXT:    br i1 false, label %[[IF_END24:.*]], label %[[IF_THEN11:.*]]
; CHECK:       [[IF_THEN11]]:
; CHECK-NEXT:    [[TMP11:%.*]] = shufflevector <2 x i32> [[TMP2]], <2 x i32> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 0, i32 poison>
; CHECK-NEXT:    [[TMP12:%.*]] = shufflevector <8 x i32> <i32 0, i32 poison, i32 0, i32 0, i32 0, i32 0, i32 0, i32 poison>, <8 x i32> [[TMP11]], <8 x i32> <i32 0, i32 8, i32 2, i32 3, i32 4, i32 5, i32 6, i32 14>
; CHECK-NEXT:    br label %[[IF_END24]]
; CHECK:       [[IF_THEN18:.*]]:
; CHECK-NEXT:    br label %[[T]]
; CHECK:       [[T]]:
; CHECK-NEXT:    [[TMP13:%.*]] = phi <8 x i32> [ [[TMP33:%.*]], %[[O]] ], [ poison, %[[IF_THEN18]] ]
; CHECK-NEXT:    [[TMP17]] = extractelement <4 x i32> [[TMP23:%.*]], i32 0
; CHECK-NEXT:    br i1 false, label %[[IF_END24]], label %[[K]]
; CHECK:       [[IF_END24]]:
; CHECK-NEXT:    [[TMP18:%.*]] = phi <8 x i32> [ [[TMP12]], %[[IF_THEN11]] ], [ [[TMP31]], %[[IF_END6]] ], [ [[TMP13]], %[[T]] ]
; CHECK-NEXT:    [[TMP20:%.*]] = shufflevector <8 x i32> [[TMP18]], <8 x i32> poison, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
; CHECK-NEXT:    [[TMP19:%.*]] = shufflevector <8 x i32> [[TMP18]], <8 x i32> poison, <2 x i32> <i32 6, i32 1>
; CHECK-NEXT:    [[TMP34:%.*]] = shufflevector <8 x i32> [[TMP18]], <8 x i32> poison, <4 x i32> <i32 2, i32 3, i32 4, i32 7>
; CHECK-NEXT:    br label %[[O]]
; CHECK:       [[O]]:
; CHECK-NEXT:    [[TMP23]] = phi <4 x i32> [ [[TMP1]], %[[K]] ], [ [[TMP20]], %[[IF_END24]] ]
; CHECK-NEXT:    [[TMP24]] = phi <2 x i32> [ zeroinitializer, %[[K]] ], [ [[TMP19]], %[[IF_END24]] ]
; CHECK-NEXT:    [[TMP21:%.*]] = phi <4 x i32> [ zeroinitializer, %[[K]] ], [ [[TMP34]], %[[IF_END24]] ]
; CHECK-NEXT:    [[TMP22]] = extractelement <2 x i32> [[TMP24]], i32 1
; CHECK-NEXT:    [[TMP25:%.*]] = shufflevector <4 x i32> [[TMP23]], <4 x i32> poison, <8 x i32> <i32 0, i32 poison, i32 0, i32 0, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP26:%.*]] = shufflevector <8 x i32> [[TMP25]], <8 x i32> <i32 poison, i32 0, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, <8 x i32> <i32 0, i32 9, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP32:%.*]] = shufflevector <4 x i32> [[TMP23]], <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP33]] = shufflevector <8 x i32> [[TMP26]], <8 x i32> [[TMP32]], <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
; CHECK-NEXT:    [[TMP35:%.*]] = shufflevector <2 x i32> [[TMP24]], <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
; CHECK-NEXT:    [[TMP28:%.*]] = shufflevector <4 x i32> [[TMP21]], <4 x i32> poison, <2 x i32> <i32 poison, i32 3>
; CHECK-NEXT:    [[TMP29]] = shufflevector <2 x i32> [[TMP35]], <2 x i32> [[TMP28]], <2 x i32> <i32 0, i32 3>
; CHECK-NEXT:    br i1 false, label %[[T]], label %[[IF_END6]]
;
entry:
  br label %k

k:
  %.pre = phi i32 [ 0, %entry ], [ %.pre4053, %t ]
  br label %o

if.end3:
  br label %if.end6

if.end6:
  %.pre43 = phi i32 [ 0, %if.end3 ], [ 0, %o ]
  %0 = phi i32 [ 0, %if.end3 ], [ 0, %o ]
  %1 = phi i32 [ 0, %if.end3 ], [ 0, %o ]
  %h.4 = phi i32 [ 0, %if.end3 ], [ %h.6, %o ]
  %i.4 = phi i32 [ 0, %if.end3 ], [ %i.7, %o ]
  %j.4 = phi i32 [ 0, %if.end3 ], [ %j.5, %o ]
  %l.4 = phi i32 [ 0, %if.end3 ], [ 0, %o ]
  %not8 = xor i32 %i.4, 0
  %not9 = xor i32 %h.4, 0
  br i1 false, label %if.end24, label %if.then11

if.then11:
  br label %if.end24

if.then18:
  br label %t

t:
  %.pre40 = phi i32 [ %.pre4053, %o ], [ 0, %if.then18 ]
  %i.5 = phi i32 [ 0, %o ], [ 0, %if.then18 ]
  %l.5 = phi i32 [ %l.7, %o ], [ 0, %if.then18 ]
  %r.2 = phi i32 [ %r.4, %o ], [ 0, %if.then18 ]
  %s.2 = phi i32 [ %s.4, %o ], [ 0, %if.then18 ]
  br i1 false, label %if.end24, label %k

if.end24:
  %.pre4050 = phi i32 [ 0, %if.then11 ], [ 0, %if.end6 ], [ %.pre40, %t ]
  %.pre42 = phi i32 [ 0, %if.then11 ], [ %.pre43, %if.end6 ], [ %.pre40, %t ]
  %2 = phi i32 [ 0, %if.then11 ], [ %0, %if.end6 ], [ %.pre40, %t ]
  %3 = phi i32 [ 0, %if.then11 ], [ %1, %if.end6 ], [ %.pre40, %t ]
  %i.6 = phi i32 [ %i.4, %if.then11 ], [ %i.7, %if.end6 ], [ %i.5, %t ]
  %l.6 = phi i32 [ 0, %if.then11 ], [ %l.4, %if.end6 ], [ %l.5, %t ]
  %r.3 = phi i32 [ %j.4, %if.then11 ], [ %not8, %if.end6 ], [ %r.2, %t ]
  %s.3 = phi i32 [ 0, %if.then11 ], [ %not9, %if.end6 ], [ %s.2, %t ]
  br label %o

o:
  %.pre4053 = phi i32 [ 0, %k ], [ %.pre4050, %if.end24 ]
  %.pre46 = phi i32 [ 0, %k ], [ %.pre42, %if.end24 ]
  %4 = phi i32 [ 0, %k ], [ %2, %if.end24 ]
  %5 = phi i32 [ 0, %k ], [ %3, %if.end24 ]
  %h.6 = phi i32 [ 0, %k ], [ %r.3, %if.end24 ]
  %i.7 = phi i32 [ 0, %k ], [ %i.6, %if.end24 ]
  %j.5 = phi i32 [ 0, %k ], [ %s.3, %if.end24 ]
  %l.7 = phi i32 [ %.pre, %k ], [ %l.6, %if.end24 ]
  %r.4 = phi i32 [ 0, %k ], [ %r.3, %if.end24 ]
  %s.4 = phi i32 [ %s.0, %k ], [ %s.3, %if.end24 ]
  br i1 false, label %t, label %if.end6
}

