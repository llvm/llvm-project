; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer -mtriple=x86_64-unknown-linux-gnu -mcpu=cascadelake < %s | FileCheck %s

%class.btManifoldPoint = type <{ %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, %class.btVector3, float, float, float, i32, i32, i32, i32, [4 x i8], ptr, float, i8, [3 x i8], float, float, i32, %class.btVector3, %class.btVector3, [4 x i8] }>
%class.btVector3 = type { [4 x float] }

define void @test(ptr %this, i1 %cmp4.not) {
; CHECK-LABEL: define void @test(
; CHECK-SAME: ptr [[THIS:%.*]], i1 [[CMP4_NOT:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    [[NEWPT:%.*]] = alloca [[CLASS_BTMANIFOLDPOINT:%.*]], align 8
; CHECK-NEXT:    [[CALL25:%.*]] = load volatile i32, ptr [[NEWPT]], align 4
; CHECK-NEXT:    br i1 [[CMP4_NOT]], label %[[IF_ELSE37:.*]], label %[[IF_END46:.*]]
; CHECK:       [[IF_ELSE37]]:
; CHECK-NEXT:    br label %[[IF_END46]]
; CHECK:       [[IF_END46]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi <4 x i64> [ <i64 160, i64 1, i64 0, i64 1>, %[[IF_ELSE37]] ], [ <i64 0, i64 0, i64 1, i64 0>, %[[ENTRY]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = insertelement <4 x ptr> poison, ptr [[THIS]], i32 0
; CHECK-NEXT:    [[TMP2:%.*]] = shufflevector <4 x ptr> [[TMP1]], <4 x ptr> poison, <4 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr i8, <4 x ptr> [[TMP2]], <4 x i64> [[TMP0]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr i8, ptr [[NEWPT]], i64 92
; CHECK-NEXT:    [[TMP5:%.*]] = call <4 x i32> @llvm.masked.gather.v4i32.v4p0(<4 x ptr> [[TMP3]], i32 4, <4 x i1> splat (i1 true), <4 x i32> poison)
; CHECK-NEXT:    store <4 x i32> [[TMP5]], ptr [[TMP4]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %newPt = alloca %class.btManifoldPoint, align 8
  %call25 = load volatile i32, ptr %newPt, align 4
  br i1 %cmp4.not, label %if.else37, label %if.end46

if.else37:                                        ; preds = %entry
  br label %if.end46

if.end46:                                         ; preds = %if.else37, %entry
  %.sink264 = phi i64 [ 160, %if.else37 ], [ 0, %entry ]
  %.sink262 = phi i64 [ 0, %if.else37 ], [ 1, %entry ]
  %.sink261 = phi i64 [ 1, %if.else37 ], [ 0, %entry ]
  %m_partId038 = getelementptr i8, ptr %this, i64 %.sink264
  %m_index042 = getelementptr i8, ptr %this, i64 %.sink262
  %m_index144 = getelementptr i8, ptr %this, i64 %.sink261
  %.sink = load i32, ptr %m_index144, align 4
  %.sink186 = load i32, ptr %m_index042, align 4
  %.sink188 = load i32, ptr %m_partId038, align 4
  %0 = getelementptr i8, ptr %newPt, i64 92
  store i32 %.sink188, ptr %0, align 4
  %1 = getelementptr i8, ptr %newPt, i64 96
  store i32 %.sink, ptr %1, align 8
  %2 = getelementptr i8, ptr %newPt, i64 100
  store i32 %.sink186, ptr %2, align 4
  %3 = getelementptr i8, ptr %newPt, i64 104
  store i32 %.sink, ptr %3, align 8
  ret void
}
