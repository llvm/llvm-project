; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -passes=slp-vectorizer -S -mtriple=x86_64-unknown-linux-gnu -slp-threshold=-99999 < %s | FileCheck %s

define void @test() {
; CHECK-LABEL: define void @test() {
; CHECK-NEXT:  [[BB:.*]]:
; CHECK-NEXT:    br label %[[BB1:.*]]
; CHECK:       [[BB1]]:
; CHECK-NEXT:    [[TMP0:%.*]] = phi <4 x i32> [ zeroinitializer, %[[BB]] ], [ [[TMP7:%.*]], %[[BB16:.*]] ], [ zeroinitializer, %[[BB1]] ]
; CHECK-NEXT:    br i1 false, label %[[BB1]], label %[[BB5:.*]]
; CHECK:       [[BB5]]:
; CHECK-NEXT:    [[PHI8:%.*]] = phi double [ 0.000000e+00, %[[BB16]] ], [ 0.000000e+00, %[[BB1]] ]
; CHECK-NEXT:    [[TMP1:%.*]] = phi <4 x i32> [ [[TMP8:%.*]], %[[BB16]] ], [ <i32 poison, i32 poison, i32 0, i32 0>, %[[BB1]] ]
; CHECK-NEXT:    switch i32 0, label %[[BB21:.*]] [
; CHECK-NEXT:      i32 4, label %[[BB21]]
; CHECK-NEXT:      i32 1, label %[[BB21]]
; CHECK-NEXT:      i32 0, label %[[BB9:.*]]
; CHECK-NEXT:    ]
; CHECK:       [[BB9]]:
; CHECK-NEXT:    [[PHI13:%.*]] = phi double [ 0.000000e+00, %[[BB21]] ], [ 0.000000e+00, %[[BB5]] ]
; CHECK-NEXT:    [[TMP2:%.*]] = phi <4 x i32> [ [[TMP1]], %[[BB21]] ], [ <i32 poison, i32 poison, i32 0, i32 0>, %[[BB5]] ]
; CHECK-NEXT:    [[TMP3:%.*]] = phi <4 x i32> [ [[TMP9:%.*]], %[[BB21]] ], [ <i32 poison, i32 poison, i32 0, i32 0>, %[[BB5]] ]
; CHECK-NEXT:    switch i32 0, label %[[BB15:.*]] [
; CHECK-NEXT:      i32 1, label %[[BB14:.*]]
; CHECK-NEXT:      i32 0, label %[[BB16]]
; CHECK-NEXT:    ]
; CHECK:       [[BB14]]:
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <4 x i32> [[TMP2]], <4 x i32> <i32 poison, i32 poison, i32 0, i32 poison>, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
; CHECK-NEXT:    br label %[[BB16]]
; CHECK:       [[BB15]]:
; CHECK-NEXT:    [[TMP5:%.*]] = add <4 x i32> <i32 poison, i32 poison, i32 0, i32 0>, [[TMP2]]
; CHECK-NEXT:    [[TMP6:%.*]] = shufflevector <4 x i32> [[TMP3]], <4 x i32> [[TMP5]], <4 x i32> <i32 poison, i32 poison, i32 2, i32 7>
; CHECK-NEXT:    br label %[[BB16]]
; CHECK:       [[BB16]]:
; CHECK-NEXT:    [[PHI20:%.*]] = phi double [ 0.000000e+00, %[[BB15]] ], [ 0.000000e+00, %[[BB14]] ], [ 0.000000e+00, %[[BB9]] ]
; CHECK-NEXT:    [[TMP7]] = phi <4 x i32> [ [[TMP5]], %[[BB15]] ], [ [[TMP4]], %[[BB14]] ], [ <i32 poison, i32 poison, i32 0, i32 0>, %[[BB9]] ]
; CHECK-NEXT:    [[TMP8]] = phi <4 x i32> [ [[TMP6]], %[[BB15]] ], [ [[TMP3]], %[[BB14]] ], [ <i32 poison, i32 poison, i32 0, i32 0>, %[[BB9]] ]
; CHECK-NEXT:    br i1 false, label %[[BB5]], label %[[BB1]]
; CHECK:       [[BB21]]:
; CHECK-NEXT:    [[TMP9]] = shufflevector <4 x i32> [[TMP1]], <4 x i32> <i32 poison, i32 poison, i32 0, i32 poison>, <4 x i32> <i32 0, i32 1, i32 6, i32 3>
; CHECK-NEXT:    br label %[[BB9]]
;
bb:
  br label %bb1

bb1:
  %phi = phi i32 [ 0, %bb ], [ 0, %bb1 ], [ %phi17, %bb16 ]
  %phi2 = phi i32 [ 0, %bb ], [ 0, %bb1 ], [ %phi18, %bb16 ]
  %phi3 = phi i32 [ 0, %bb ], [ poison, %bb16 ], [ 0, %bb1 ]
  %phi4 = phi i32 [ 0, %bb ], [ poison, %bb16 ], [ 0, %bb1 ]
  br i1 false, label %bb1, label %bb5

bb5:
  %phi6 = phi i32 [ %phi17, %bb16 ], [ 0, %bb1 ]
  %phi7 = phi i32 [ %phi19, %bb16 ], [ 0, %bb1 ]
  %phi8 = phi double [ 0.000000e+00, %bb16 ], [ 0.000000e+00, %bb1 ]
  switch i32 0, label %bb21 [
  i32 4, label %bb21
  i32 1, label %bb21
  i32 0, label %bb9
  ]

bb9:
  %phi10 = phi i32 [ %phi6, %bb21 ], [ 0, %bb5 ]
  %phi11 = phi i32 [ %phi7, %bb21 ], [ 0, %bb5 ]
  %phi12 = phi i32 [ 0, %bb21 ], [ 0, %bb5 ]
  %phi13 = phi double [ 0.000000e+00, %bb21 ], [ 0.000000e+00, %bb5 ]
  switch i32 0, label %bb15 [
  i32 1, label %bb14
  i32 0, label %bb16
  ]

bb14:
  br label %bb16

bb15:
  %add = add i32 0, %phi10
  br label %bb16

bb16:
  %phi17 = phi i32 [ %add, %bb15 ], [ %phi10, %bb14 ], [ 0, %bb9 ]
  %phi18 = phi i32 [ %phi11, %bb15 ], [ 0, %bb14 ], [ 0, %bb9 ]
  %phi19 = phi i32 [ %phi12, %bb15 ], [ %phi12, %bb14 ], [ 0, %bb9 ]
  %phi20 = phi double [ 0.000000e+00, %bb15 ], [ 0.000000e+00, %bb14 ], [ 0.000000e+00, %bb9 ]
  br i1 false, label %bb5, label %bb1

bb21:
  br label %bb9
}
