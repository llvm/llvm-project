; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -passes=slp-vectorizer -S -slp-revec -slp-max-reg-size=256 %s | FileCheck %s

define i32 @test_32xi8_2parts(ptr %in, ptr %out) {
; CHECK-LABEL: @test_32xi8_2parts(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load <32 x i8>, ptr [[IN:%.*]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = add <32 x i8> [[TMP0]], [[TMP0]]
; CHECK-NEXT:    store <32 x i8> [[TMP1]], ptr [[OUT:%.*]], align 16
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = load <32 x i8>, ptr %in, align 1
  %1 = call <16 x i8> @llvm.vector.extract.v16i8.v32i8(<32 x i8> %0, i64 0)
  %2 = call <16 x i8> @llvm.vector.extract.v16i8.v32i8(<32 x i8> %0, i64 16)

  %add.1 = add <16 x i8> %1, %1
  %add.2 = add <16 x i8> %2, %2

  %out.2 = getelementptr inbounds i8, ptr %out, i64 16
  store <16 x i8> %add.1, ptr %out, align 16
  store <16 x i8> %add.2, ptr %out.2, align 16
  ret i32 0
}

define i32 @test_32xi8_4_parts(ptr %in, ptr %out) {
; CHECK-LABEL: @test_32xi8_4_parts(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load <32 x i8>, ptr [[IN:%.*]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = add <32 x i8> [[TMP0]], [[TMP0]]
; CHECK-NEXT:    store <32 x i8> [[TMP1]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = load <32 x i8>, ptr %in, align 1
  %1 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 0)
  %2 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 8)
  %3 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 16)
  %4 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 24)

  %add.1 = add <8 x i8> %1, %1
  %add.2 = add <8 x i8> %2, %2
  %add.3 = add <8 x i8> %3, %3
  %add.4 = add <8 x i8> %4, %4

  store <8 x i8> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i8, ptr %out, i64 8
  store <8 x i8> %add.2, ptr %out.2, align 8
  %out.3 = getelementptr inbounds i8, ptr %out, i64 16
  store <8 x i8> %add.3, ptr %out.3, align 8
  %out.4 = getelementptr inbounds i8, ptr %out, i64 24
  store <8 x i8> %add.4, ptr %out.4, align 8
  ret i32 0
}

; Extract the 1st, 2nd and 4th quarters of a <32 x i8> register
; The 3rd quarter comes from a %vec argument.
; We are expecting a wide load followed by a vector.insert
define i32 @test_32xi8_4_parts_sparse(ptr %in, ptr %out, <8 x i8> %vec) {
; CHECK-LABEL: @test_32xi8_4_parts_sparse(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load <32 x i8>, ptr [[IN:%.*]], align 1
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <8 x i8> [[VEC:%.*]], <8 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <32 x i8> [[TMP0]], <32 x i8> [[TMP3]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP2:%.*]] = add <32 x i8> [[TMP1]], [[TMP1]]
; CHECK-NEXT:    store <32 x i8> [[TMP2]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = load <32 x i8>, ptr %in, align 1
  %1 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 0)
  %2 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 8)
  %4 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 24)

  %add.1 = add <8 x i8> %1, %1
  %add.2 = add <8 x i8> %2, %2
  %add.3 = add <8 x i8> %vec, %vec
  %add.4 = add <8 x i8> %4, %4

  store <8 x i8> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i8, ptr %out, i64 8
  store <8 x i8> %add.2, ptr %out.2, align 8
  %out.3 = getelementptr inbounds i8, ptr %out, i64 16
  store <8 x i8> %add.3, ptr %out.3, align 8
  %out.4 = getelementptr inbounds i8, ptr %out, i64 24
  store <8 x i8> %add.4, ptr %out.4, align 8
  ret i32 0
}

; Extract the 1st and 3rd quarters of a <32 x i8> register
define i32 @test_32xi8_4_parts_sparse2(ptr %in, ptr %out) {
; CHECK-LABEL: @test_32xi8_4_parts_sparse2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load <32 x i8>, ptr [[IN:%.*]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <32 x i8> [[TMP0]], <32 x i8> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23>
; CHECK-NEXT:    [[TMP2:%.*]] = add <16 x i8> [[TMP1]], [[TMP1]]
; CHECK-NEXT:    store <16 x i8> [[TMP2]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = load <32 x i8>, ptr %in, align 1
  %1 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 0)
  %2 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<32 x i8> %0, i64 16)

  %add.1 = add <8 x i8> %1, %1
  %add.2 = add <8 x i8> %2, %2

  store <8 x i8> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i8, ptr %out, i64 8
  store <8 x i8> %add.2, ptr %out.2, align 8
  ret i32 0
}

; Vector size is 256-bit, we should generate 2 <16 x i16> stores.
define i32 @test_32xi16_4_parts(ptr %in, ptr %out) {
; CHECK-LABEL: @test_32xi16_4_parts(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load <32 x i16>, ptr [[IN:%.*]], align 1
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <32 x i16> [[TMP0]], <32 x i16> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP2:%.*]] = add <16 x i16> [[TMP1]], [[TMP1]]
; CHECK-NEXT:    store <16 x i16> [[TMP2]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    [[OUT_3:%.*]] = getelementptr inbounds i16, ptr [[OUT]], i64 16
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <32 x i16> [[TMP0]], <32 x i16> poison, <16 x i32> <i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP4:%.*]] = add <16 x i16> [[TMP3]], [[TMP3]]
; CHECK-NEXT:    store <16 x i16> [[TMP4]], ptr [[OUT_3]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %0 = load <32 x i16>, ptr %in, align 1
  %1 = call <8 x i16> @llvm.vector.extract.v8i16.v32i16(<32 x i16> %0, i64 0)
  %2 = call <8 x i16> @llvm.vector.extract.v8i16.v32i16(<32 x i16> %0, i64 8)
  %3 = call <8 x i16> @llvm.vector.extract.v8i16.v32i16(<32 x i16> %0, i64 16)
  %4 = call <8 x i16> @llvm.vector.extract.v8i16.v32i16(<32 x i16> %0, i64 24)

  %add.1 = add <8 x i16> %1, %1
  %add.2 = add <8 x i16> %2, %2
  %add.3 = add <8 x i16> %3, %3
  %add.4 = add <8 x i16> %4, %4

  store <8 x i16> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i16, ptr %out, i64 8
  store <8 x i16> %add.2, ptr %out.2, align 8
  %out.3 = getelementptr inbounds i16, ptr %out, i64 16
  store <8 x i16> %add.3, ptr %out.3, align 8
  %out.4 = getelementptr inbounds i16, ptr %out, i64 24
  store <8 x i16> %add.4, ptr %out.4, align 8
  ret i32 0
}

; Extract lo/hi halves from two different source vectors.
define i32 @test_2x_16xi8(ptr %in0, ptr %in1, ptr %out) {
; CHECK-LABEL: @test_2x_16xi8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE0:%.*]] = load <16 x i8>, ptr [[IN0:%.*]], align 1
; CHECK-NEXT:    [[BASE1:%.*]] = load <16 x i8>, ptr [[IN1:%.*]], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <16 x i8> [[BASE0]], <16 x i8> [[BASE1]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP1:%.*]] = add <32 x i8> [[TMP0]], [[TMP0]]
; CHECK-NEXT:    store <32 x i8> [[TMP1]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %base0 = load <16 x i8>, ptr %in0, align 1
  %1 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base0, i64 0)
  %2 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base0, i64 8)

  %base1 = load <16 x i8>, ptr %in1, align 1
  %3 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base1, i64 0)
  %4 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base1, i64 8)

  %add.1 = add <8 x i8> %1, %1
  %add.2 = add <8 x i8> %2, %2
  %add.3 = add <8 x i8> %3, %3
  %add.4 = add <8 x i8> %4, %4

  store <8 x i8> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i8, ptr %out, i64 8
  store <8 x i8> %add.2, ptr %out.2, align 8
  %out.3 = getelementptr inbounds i8, ptr %out, i64 16
  store <8 x i8> %add.3, ptr %out.3, align 8
  %out.4 = getelementptr inbounds i8, ptr %out, i64 24
  store <8 x i8> %add.4, ptr %out.4, align 8
  ret i32 0
}

; Extract lo/hi halves from one vector, and hi from another one.
; The hilo quarter comes from a function argument.
; We are expecting a shuffle of two sources, followed by a vector.insert.
define i32 @test_2x_16xi8_sparse(ptr %in0, ptr %in1, ptr %out, <8 x i8> %vec) {
; CHECK-LABEL: @test_2x_16xi8_sparse(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE1:%.*]] = load <16 x i8>, ptr [[IN1:%.*]], align 1
; CHECK-NEXT:    [[BASE2:%.*]] = load <16 x i8>, ptr [[IN2:%.*]], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = shufflevector <16 x i8> [[BASE1]], <16 x i8> [[BASE2]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP3:%.*]] = shufflevector <8 x i8> [[VEC:%.*]], <8 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <32 x i8> [[TMP0]], <32 x i8> [[TMP3]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP2:%.*]] = add <32 x i8> [[TMP1]], [[TMP1]]
; CHECK-NEXT:    store <32 x i8> [[TMP2]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %base0 = load <16 x i8>, ptr %in0, align 1
  %1 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base0, i64 0)
  %2 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base0, i64 8)

  %base1 = load <16 x i8>, ptr %in1, align 1
  %4 = call <8 x i8> @llvm.vector.extract.v8i8.v32i8(<16 x i8> %base1, i64 8)

  %add.1 = add <8 x i8> %1, %1
  %add.2 = add <8 x i8> %2, %2
  %add.3 = add <8 x i8> %vec, %vec
  %add.4 = add <8 x i8> %4, %4

  store <8 x i8> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i8, ptr %out, i64 8
  store <8 x i8> %add.2, ptr %out.2, align 8
  %out.3 = getelementptr inbounds i8, ptr %out, i64 16
  store <8 x i8> %add.3, ptr %out.3, align 8
  %out.4 = getelementptr inbounds i8, ptr %out, i64 24
  store <8 x i8> %add.4, ptr %out.4, align 8
  ret i32 0
}

; Extract lo/hi halves from four different source vectors.
; This is not supported as we are looking for a Gather TreeEntry of
; vector.extract instructions with a maximum of two unique inputs.
; There are four here.
define i32 @test_4x_8xi8(ptr %in0, ptr %in1, ptr %in2, ptr %in3, ptr %out) {
; CHECK-LABEL: @test_4x_8xi8(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[BASE0:%.*]] = load <8 x i8>, ptr [[IN0:%.*]], align 1
; CHECK-NEXT:    [[BASE2:%.*]] = load <8 x i8>, ptr [[IN2:%.*]], align 1
; CHECK-NEXT:    [[BASE4:%.*]] = load <8 x i8>, ptr [[IN4:%.*]], align 1
; CHECK-NEXT:    [[TMP0:%.*]] = call <4 x i8> @llvm.vector.extract.v4i8.v8i8(<8 x i8> [[BASE4]], i64 0)
; CHECK-NEXT:    [[TMP1:%.*]] = call <4 x i8> @llvm.vector.extract.v4i8.v8i8(<8 x i8> [[BASE4]], i64 4)
; CHECK-NEXT:    [[BASE3:%.*]] = load <8 x i8>, ptr [[IN3:%.*]], align 1
; CHECK-NEXT:    [[TMP2:%.*]] = call <4 x i8> @llvm.vector.extract.v4i8.v8i8(<8 x i8> [[BASE3]], i64 0)
; CHECK-NEXT:    [[TMP3:%.*]] = call <4 x i8> @llvm.vector.extract.v4i8.v8i8(<8 x i8> [[BASE3]], i64 4)
; CHECK-NEXT:    [[TMP4:%.*]] = shufflevector <8 x i8> [[BASE0]], <8 x i8> [[BASE2]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP5:%.*]] = shufflevector <4 x i8> [[TMP0]], <4 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP6:%.*]] = shufflevector <32 x i8> [[TMP4]], <32 x i8> [[TMP5]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP7:%.*]] = shufflevector <4 x i8> [[TMP1]], <4 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP12:%.*]] = shufflevector <32 x i8> [[TMP6]], <32 x i8> [[TMP7]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 32, i32 33, i32 34, i32 35, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP13:%.*]] = shufflevector <4 x i8> [[TMP2]], <4 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <32 x i8> [[TMP12]], <32 x i8> [[TMP13]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 28, i32 29, i32 30, i32 31>
; CHECK-NEXT:    [[TMP11:%.*]] = shufflevector <4 x i8> [[TMP3]], <4 x i8> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <32 x i8> [[TMP10]], <32 x i8> [[TMP11]], <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 34, i32 35>
; CHECK-NEXT:    [[TMP9:%.*]] = add <32 x i8> [[TMP8]], [[TMP8]]
; CHECK-NEXT:    store <32 x i8> [[TMP9]], ptr [[OUT:%.*]], align 8
; CHECK-NEXT:    ret i32 0
;
entry:
  %base0 = load <8 x i8>, ptr %in0, align 1
  %1 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base0, i64 0)
  %2 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base0, i64 4)

  %base1 = load <8 x i8>, ptr %in1, align 1
  %3 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base1, i64 0)
  %4 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base1, i64 4)

  %base2 = load <8 x i8>, ptr %in2, align 1
  %5 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base2, i64 0)
  %6 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base2, i64 4)

  %base3 = load <8 x i8>, ptr %in3, align 1
  %7 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base3, i64 0)
  %8 = call <4 x i8> @llvm.vector.extract.v8i8.v32i8(<8 x i8> %base3, i64 4)

  %add.1 = add <4 x i8> %1, %1
  %add.2 = add <4 x i8> %2, %2
  %add.3 = add <4 x i8> %3, %3
  %add.4 = add <4 x i8> %4, %4
  %add.5 = add <4 x i8> %5, %5
  %add.6 = add <4 x i8> %6, %6
  %add.7 = add <4 x i8> %7, %7
  %add.8 = add <4 x i8> %8, %8

  store <4 x i8> %add.1, ptr %out, align 8
  %out.2 = getelementptr inbounds i8, ptr %out, i64 4
  store <4 x i8> %add.2, ptr %out.2, align 8
  %out.3 = getelementptr inbounds i8, ptr %out, i64 8
  store <4 x i8> %add.3, ptr %out.3, align 8
  %out.4 = getelementptr inbounds i8, ptr %out, i64 12
  store <4 x i8> %add.4, ptr %out.4, align 8
  %out.5 = getelementptr inbounds i8, ptr %out, i64 16
  store <4 x i8> %add.5, ptr %out.5, align 8
  %out.6 = getelementptr inbounds i8, ptr %out, i64 20
  store <4 x i8> %add.6, ptr %out.6, align 8
  %out.7 = getelementptr inbounds i8, ptr %out, i64 24
  store <4 x i8> %add.7, ptr %out.7, align 8
  %out.8 = getelementptr inbounds i8, ptr %out, i64 28
  store <4 x i8> %add.8, ptr %out.8, align 8
  ret i32 0
}
