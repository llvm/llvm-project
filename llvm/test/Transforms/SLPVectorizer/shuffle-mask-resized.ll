; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: %if x86-registered-target %{ opt -passes=slp-vectorizer -S -mtriple=x86_64-unknown-linux -slp-threshold=-10 < %s | FileCheck %s --check-prefix=X86  %}
; RUN: %if aaarch64-registered-target %{ opt -passes=slp-vectorizer -S -mtriple=aarch64-unknown-linux -slp-threshold=-10 < %s | FileCheck %s --check-prefix=AARCH64 %}

define i32 @test() {
; X86-LABEL: define i32 @test() {
; X86-NEXT:  bb:
; X86-NEXT:    br label [[BB1:%.*]]
; X86:       bb1:
; X86-NEXT:    [[TMP0:%.*]] = phi <8 x i32> [ [[TMP4:%.*]], [[BB3:%.*]] ], [ zeroinitializer, [[BB:%.*]] ]
; X86-NEXT:    br i1 false, label [[BB4:%.*]], label [[BB3]]
; X86:       bb3:
; X86-NEXT:    [[TMP1:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> poison, <2 x i32> <i32 poison, i32 0>
; X86-NEXT:    [[TMP2:%.*]] = shufflevector <2 x i32> [[TMP1]], <2 x i32> <i32 0, i32 poison>, <2 x i32> <i32 2, i32 1>
; X86-NEXT:    [[TMP3:%.*]] = add <2 x i32> zeroinitializer, [[TMP2]]
; X86-NEXT:    [[TMP4]] = shufflevector <2 x i32> [[TMP3]], <2 x i32> poison, <8 x i32> <i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>
; X86-NEXT:    br label [[BB1]]
; X86:       bb4:
; X86-NEXT:    [[TMP5:%.*]] = phi <8 x i32> [ [[TMP0]], [[BB1]] ]
; X86-NEXT:    ret i32 0
;
; AARCH64-LABEL: define i32 @test() {
; AARCH64-NEXT:  bb:
; AARCH64-NEXT:    br label [[BB1:%.*]]
; AARCH64:       bb1:
; AARCH64-NEXT:    [[TMP0:%.*]] = phi <8 x i32> [ [[TMP2:%.*]], [[BB3:%.*]] ], [ zeroinitializer, [[BB:%.*]] ]
; AARCH64-NEXT:    br i1 false, label [[BB4:%.*]], label [[BB3]]
; AARCH64:       bb3:
; AARCH64-NEXT:    [[TMP1:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> <i32 poison, i32 poison, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0>, <8 x i32> <i32 0, i32 0, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; AARCH64-NEXT:    [[TMP2]] = add <8 x i32> zeroinitializer, [[TMP1]]
; AARCH64-NEXT:    br label [[BB1]]
; AARCH64:       bb4:
; AARCH64-NEXT:    [[TMP3:%.*]] = phi <8 x i32> [ [[TMP0]], [[BB1]] ]
; AARCH64-NEXT:    ret i32 0
;
bb:
  br label %bb1

bb1:
  %phi = phi i32 [ %or, %bb3 ], [ 0, %bb ]
  %phi2 = phi i32 [ %add, %bb3 ], [ 0, %bb ]
  br i1 false, label %bb4, label %bb3

bb3:
  %or = or i32 0, %phi
  %add = add i32 0, 0
  br label %bb1

bb4:
  %phi5 = phi i32 [ %phi2, %bb1 ]
  %phi6 = phi i32 [ %phi2, %bb1 ]
  %phi7 = phi i32 [ %phi2, %bb1 ]
  %phi8 = phi i32 [ %phi2, %bb1 ]
  %phi9 = phi i32 [ %phi2, %bb1 ]
  %phi10 = phi i32 [ %phi2, %bb1 ]
  %phi11 = phi i32 [ %phi, %bb1 ]
  %phi12 = phi i32 [ %phi, %bb1 ]
  ret i32 0
}
