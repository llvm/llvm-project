; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=slp-vectorizer,instcombine -S < %s | FileCheck %s

define dso_local noundef i32 @_Z4testiPs(i32 noundef %a, ptr noundef readonly captures(none) %b) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local noundef i32 @_Z4testiPs(
; CHECK-SAME: i32 noundef [[A:%.*]], ptr noundef readonly captures(none) [[B:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP9:%.*]] = insertelement <16 x i32> poison, i32 [[A]], i64 0
; CHECK-NEXT:    [[TMP1:%.*]] = shufflevector <16 x i32> [[TMP9]], <16 x i32> poison, <16 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP16:%.*]] = lshr <16 x i32> [[TMP1]], <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP17:%.*]] = and <16 x i32> [[TMP16]], splat (i32 16)
; CHECK-NEXT:    [[TMP18:%.*]] = load <16 x i16>, ptr [[B]], align 2
; CHECK-NEXT:    [[TMP19:%.*]] = sext <16 x i16> [[TMP18]] to <16 x i32>
; CHECK-NEXT:    [[TMP20:%.*]] = or <16 x i32> [[TMP17]], [[TMP19]]
; CHECK-NEXT:    [[TMP21:%.*]] = call i32 @llvm.vector.reduce.add.v16i32(<16 x i32> [[TMP20]])
; CHECK-NEXT:    ret i32 [[TMP21]]
;
entry:
  %conv = and i32 %a, 16
  %0 = load i16, ptr %b, align 2
  %conv2 = sext i16 %0 to i32
  %or = or i32 %conv, %conv2
  %shr.1 = lshr i32 %a, 1
  %conv.1 = and i32 %shr.1, 16
  %arrayidx.1 = getelementptr inbounds nuw i8, ptr %b, i64 2
  %1 = load i16, ptr %arrayidx.1, align 2
  %conv2.1 = sext i16 %1 to i32
  %or.1 = or i32 %conv.1, %conv2.1
  %add.1 = add nsw i32 %or.1, %or
  %shr.2 = lshr i32 %a, 2
  %conv.2 = and i32 %shr.2, 16
  %arrayidx.2 = getelementptr inbounds nuw i8, ptr %b, i64 4
  %2 = load i16, ptr %arrayidx.2, align 2
  %conv2.2 = sext i16 %2 to i32
  %or.2 = or i32 %conv.2, %conv2.2
  %add.2 = add nsw i32 %or.2, %add.1
  %shr.3 = lshr i32 %a, 3
  %conv.3 = and i32 %shr.3, 16
  %arrayidx.3 = getelementptr inbounds nuw i8, ptr %b, i64 6
  %3 = load i16, ptr %arrayidx.3, align 2
  %conv2.3 = sext i16 %3 to i32
  %or.3 = or i32 %conv.3, %conv2.3
  %add.3 = add nsw i32 %or.3, %add.2
  %shr.4 = lshr i32 %a, 4
  %conv.4 = and i32 %shr.4, 16
  %arrayidx.4 = getelementptr inbounds nuw i8, ptr %b, i64 8
  %4 = load i16, ptr %arrayidx.4, align 2
  %conv2.4 = sext i16 %4 to i32
  %or.4 = or i32 %conv.4, %conv2.4
  %add.4 = add nsw i32 %or.4, %add.3
  %shr.5 = lshr i32 %a, 5
  %conv.5 = and i32 %shr.5, 16
  %arrayidx.5 = getelementptr inbounds nuw i8, ptr %b, i64 10
  %5 = load i16, ptr %arrayidx.5, align 2
  %conv2.5 = sext i16 %5 to i32
  %or.5 = or i32 %conv.5, %conv2.5
  %add.5 = add nsw i32 %or.5, %add.4
  %shr.6 = lshr i32 %a, 6
  %conv.6 = and i32 %shr.6, 16
  %arrayidx.6 = getelementptr inbounds nuw i8, ptr %b, i64 12
  %6 = load i16, ptr %arrayidx.6, align 2
  %conv2.6 = sext i16 %6 to i32
  %or.6 = or i32 %conv.6, %conv2.6
  %add.6 = add nsw i32 %or.6, %add.5
  %shr.7 = lshr i32 %a, 7
  %conv.7 = and i32 %shr.7, 16
  %arrayidx.7 = getelementptr inbounds nuw i8, ptr %b, i64 14
  %7 = load i16, ptr %arrayidx.7, align 2
  %conv2.7 = sext i16 %7 to i32
  %or.7 = or i32 %conv.7, %conv2.7
  %add.7 = add nsw i32 %or.7, %add.6
  %shr.8 = lshr i32 %a, 8
  %conv.8 = and i32 %shr.8, 16
  %arrayidx.8 = getelementptr inbounds nuw i8, ptr %b, i64 16
  %8 = load i16, ptr %arrayidx.8, align 2
  %conv2.8 = sext i16 %8 to i32
  %or.8 = or i32 %conv.8, %conv2.8
  %add.8 = add nsw i32 %or.8, %add.7
  %shr.9 = lshr i32 %a, 9
  %conv.9 = and i32 %shr.9, 16
  %arrayidx.9 = getelementptr inbounds nuw i8, ptr %b, i64 18
  %9 = load i16, ptr %arrayidx.9, align 2
  %conv2.9 = sext i16 %9 to i32
  %or.9 = or i32 %conv.9, %conv2.9
  %add.9 = add nsw i32 %or.9, %add.8
  %shr.10 = lshr i32 %a, 10
  %conv.10 = and i32 %shr.10, 16
  %arrayidx.10 = getelementptr inbounds nuw i8, ptr %b, i64 20
  %10 = load i16, ptr %arrayidx.10, align 2
  %conv2.10 = sext i16 %10 to i32
  %or.10 = or i32 %conv.10, %conv2.10
  %add.10 = add nsw i32 %or.10, %add.9
  %shr.11 = lshr i32 %a, 11
  %conv.11 = and i32 %shr.11, 16
  %arrayidx.11 = getelementptr inbounds nuw i8, ptr %b, i64 22
  %11 = load i16, ptr %arrayidx.11, align 2
  %conv2.11 = sext i16 %11 to i32
  %or.11 = or i32 %conv.11, %conv2.11
  %add.11 = add nsw i32 %or.11, %add.10
  %shr.12 = lshr i32 %a, 12
  %conv.12 = and i32 %shr.12, 16
  %arrayidx.12 = getelementptr inbounds nuw i8, ptr %b, i64 24
  %12 = load i16, ptr %arrayidx.12, align 2
  %conv2.12 = sext i16 %12 to i32
  %or.12 = or i32 %conv.12, %conv2.12
  %add.12 = add nsw i32 %or.12, %add.11
  %shr.13 = lshr i32 %a, 13
  %conv.13 = and i32 %shr.13, 16
  %arrayidx.13 = getelementptr inbounds nuw i8, ptr %b, i64 26
  %13 = load i16, ptr %arrayidx.13, align 2
  %conv2.13 = sext i16 %13 to i32
  %or.13 = or i32 %conv.13, %conv2.13
  %add.13 = add nsw i32 %or.13, %add.12
  %shr.14 = lshr i32 %a, 14
  %conv.14 = and i32 %shr.14, 16
  %arrayidx.14 = getelementptr inbounds nuw i8, ptr %b, i64 28
  %14 = load i16, ptr %arrayidx.14, align 2
  %conv2.14 = sext i16 %14 to i32
  %or.14 = or i32 %conv.14, %conv2.14
  %add.14 = add nsw i32 %or.14, %add.13
  %shr.15 = lshr i32 %a, 15
  %conv.15 = and i32 %shr.15, 16
  %arrayidx.15 = getelementptr inbounds nuw i8, ptr %b, i64 30
  %15 = load i16, ptr %arrayidx.15, align 2
  %conv2.15 = sext i16 %15 to i32
  %or.15 = or i32 %conv.15, %conv2.15
  %add.15 = add nsw i32 %or.15, %add.14
  ret i32 %add.15
}
