; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=slp-vectorizer < %s -mtriple=arm64-apple-macosx | FileCheck %s
; RUN: opt -S -passes=slp-vectorizer < %s -mtriple=arm64-apple-macosx -slp-optimize-identity-hor-reduction-ops=false | FileCheck %s --check-prefix=NO-IDENTITY

define i8 @test() {
; CHECK-LABEL: @test(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       for.body:
; CHECK-NEXT:    [[SUM:%.*]] = phi i32 [ [[TMP0:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; CHECK-NEXT:    [[CALL278:%.*]] = call i32 @fn(i32 [[SUM]])
; CHECK-NEXT:    [[TMP0]] = mul i32 [[CALL278]], 8
; CHECK-NEXT:    br label [[FOR_BODY]]
;
; NO-IDENTITY-LABEL: @test(
; NO-IDENTITY-NEXT:  entry:
; NO-IDENTITY-NEXT:    br label [[FOR_BODY:%.*]]
; NO-IDENTITY:       for.body:
; NO-IDENTITY-NEXT:    [[SUM:%.*]] = phi i32 [ [[TMP2:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
; NO-IDENTITY-NEXT:    [[CALL278:%.*]] = call i32 @fn(i32 [[SUM]])
; NO-IDENTITY-NEXT:    [[TMP0:%.*]] = insertelement <8 x i32> poison, i32 [[CALL278]], i32 0
; NO-IDENTITY-NEXT:    [[TMP1:%.*]] = shufflevector <8 x i32> [[TMP0]], <8 x i32> poison, <8 x i32> zeroinitializer
; NO-IDENTITY-NEXT:    [[TMP2]] = call i32 @llvm.vector.reduce.add.v8i32(<8 x i32> [[TMP1]])
; NO-IDENTITY-NEXT:    br label [[FOR_BODY]]
;
entry:
  br label %for.body

for.body:
  %sum = phi i32 [ %add285.19, %for.body ], [ 0, %entry ]
  %call278 = call i32 @fn(i32 %sum)
  %add285.13 = add i32 %call278, %call278
  %add285.14 = add i32 %add285.13, %call278
  %add285.15 = add i32 %add285.14, %call278
  %add285.16 = add i32 %add285.15, %call278
  %add285.17 = add i32 %add285.16, %call278
  %add285.18 = add i32 %add285.17, %call278
  %add285.19 = add i32 %add285.18, %call278
  br label %for.body
}

declare i32 @fn(i32)
