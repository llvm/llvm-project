; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S --passes=slp-vectorizer -mtriple=riscv64-unknown-linux-gnu -mcpu=sifive-x280 < %s | FileCheck %s
; RUN: opt -S --passes=slp-vectorizer -mtriple=riscv64-unknown-linux-gnu -mcpu=sifive-x280 < %s -slp-threshold=-3 | FileCheck %s --check-prefix=THRESH

%struct.ImageParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr, i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [9 x [16 x [16 x i16]]], [5 x [16 x [16 x i16]]], [9 x [8 x [8 x i16]]], [2 x [4 x [16 x [16 x i16]]]], [16 x [16 x i16]], [16 x [16 x i32]], ptr, ptr, ptr, ptr, ptr, [1200 x %struct.syntaxelement], ptr, ptr, i32, i32, i32, i32, [4 x [4 x i32]], i32, i32, i32, i32, i32, double, i32, i32, i32, i32, ptr, ptr, ptr, ptr, [15 x i16], i32, i32, i32, i32, i32, i32, i32, i32, [6 x [15 x i32]], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [1 x i32], i32, i32, [2 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, ptr, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], i32, i32, i32 }
%struct.syntaxelement = type { i32, i32, i32, i32, i32, i32, i32, i32, ptr, ptr }

@images = external global %struct.ImageParameters

define fastcc i32 @test(i32 %0, i32 %add111.i.i, <4 x i32> %PredPel.i.sroa.86.72.vec.extract, <4 x i32> %1) {
; CHECK-LABEL: define fastcc i32 @test(
; CHECK-SAME: i32 [[TMP0:%.*]], i32 [[ADD111_I_I:%.*]], <4 x i32> [[PREDPEL_I_SROA_86_72_VEC_EXTRACT:%.*]], <4 x i32> [[TMP1:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[LOOPARRAY_SROA_24_0_I_I3:%.*]] = ashr i32 [[TMP0]], 1
; CHECK-NEXT:    [[SHR143_5_I_I9:%.*]] = ashr i32 [[TMP0]], 1
; CHECK-NEXT:    [[ADD1392_I:%.*]] = add i32 [[TMP0]], 1
; CHECK-NEXT:    [[MUL1445_I:%.*]] = shl i32 [[TMP0]], 1
; CHECK-NEXT:    [[ADD2235_I16:%.*]] = or i32 [[TMP0]], 1
; CHECK-NEXT:    [[ADD2323_I:%.*]] = add i32 [[TMP0]], 1
; CHECK-NEXT:    [[TMP2:%.*]] = insertelement <3 x i32> poison, i32 [[ADD111_I_I]], i32 0
; CHECK-NEXT:    [[TMP3:%.*]] = insertelement <3 x i32> [[TMP2]], i32 [[LOOPARRAY_SROA_24_0_I_I3]], i32 1
; CHECK-NEXT:    [[TMP4:%.*]] = insertelement <3 x i32> [[TMP3]], i32 [[ADD2323_I]], i32 2
; CHECK-NEXT:    [[TMP5:%.*]] = insertelement <3 x i32> poison, i32 [[TMP0]], i32 0
; CHECK-NEXT:    [[TMP6:%.*]] = shufflevector <3 x i32> [[TMP5]], <3 x i32> poison, <3 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP7:%.*]] = or <3 x i32> [[TMP4]], [[TMP6]]
; CHECK-NEXT:    [[TMP8:%.*]] = shufflevector <4 x i32> [[PREDPEL_I_SROA_86_72_VEC_EXTRACT]], <4 x i32> [[TMP1]], <8 x i32> <i32 0, i32 poison, i32 poison, i32 4, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP9:%.*]] = shufflevector <3 x i32> [[TMP4]], <3 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 0, i32 poison>
; CHECK-NEXT:    [[TMP10:%.*]] = shufflevector <8 x i32> [[TMP8]], <8 x i32> [[TMP9]], <8 x i32> <i32 0, i32 poison, i32 10, i32 3, i32 poison, i32 poison, i32 14, i32 poison>
; CHECK-NEXT:    [[TMP11:%.*]] = insertelement <8 x i32> [[TMP10]], i32 [[TMP0]], i32 4
; CHECK-NEXT:    [[TMP12:%.*]] = insertelement <8 x i32> [[TMP11]], i32 [[ADD2235_I16]], i32 1
; CHECK-NEXT:    [[TMP13:%.*]] = insertelement <8 x i32> [[TMP12]], i32 [[MUL1445_I]], i32 5
; CHECK-NEXT:    [[TMP14:%.*]] = insertelement <8 x i32> [[TMP13]], i32 [[SHR143_5_I_I9]], i32 7
; CHECK-NEXT:    [[TMP15:%.*]] = add <8 x i32> [[TMP14]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 1>
; CHECK-NEXT:    [[TMP16:%.*]] = shufflevector <8 x i32> [[TMP15]], <8 x i32> poison, <11 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP17:%.*]] = shufflevector <3 x i32> [[TMP7]], <3 x i32> poison, <11 x i32> <i32 0, i32 1, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP18:%.*]] = shufflevector <11 x i32> [[TMP16]], <11 x i32> [[TMP17]], <11 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 11, i32 12, i32 13>
; CHECK-NEXT:    [[TMP19:%.*]] = lshr <11 x i32> [[TMP18]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NEXT:    [[TMP20:%.*]] = shufflevector <8 x i32> [[TMP14]], <8 x i32> poison, <4 x i32> <i32 2, i32 poison, i32 4, i32 7>
; CHECK-NEXT:    [[TMP21:%.*]] = insertelement <4 x i32> [[TMP20]], i32 [[ADD1392_I]], i32 1
; CHECK-NEXT:    [[TMP22:%.*]] = or <4 x i32> [[TMP21]], splat (i32 1)
; CHECK-NEXT:    [[TMP23:%.*]] = shufflevector <8 x i32> [[TMP14]], <8 x i32> poison, <4 x i32> <i32 4, i32 4, i32 4, i32 4>
; CHECK-NEXT:    [[TMP24:%.*]] = add <4 x i32> [[TMP22]], [[TMP23]]
; CHECK-NEXT:    [[TMP25:%.*]] = shufflevector <11 x i32> [[TMP19]], <11 x i32> poison, <15 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP26:%.*]] = shufflevector <4 x i32> [[TMP24]], <4 x i32> poison, <15 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[TMP27:%.*]] = shufflevector <15 x i32> [[TMP25]], <15 x i32> [[TMP26]], <15 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 15, i32 16, i32 17, i32 18>
; CHECK-NEXT:    [[TMP28:%.*]] = trunc <15 x i32> [[TMP27]] to <15 x i16>
; CHECK-NEXT:    [[TMP29:%.*]] = shufflevector <15 x i16> [[TMP28]], <15 x i16> poison, <32 x i32> <i32 0, i32 8, i32 9, i32 1, i32 11, i32 2, i32 3, i32 4, i32 5, i32 6, i32 0, i32 8, i32 9, i32 1, i32 11, i32 10, i32 12, i32 4, i32 5, i32 6, i32 0, i32 8, i32 9, i32 7, i32 13, i32 10, i32 12, i32 4, i32 5, i32 6, i32 0, i32 14>
; CHECK-NEXT:    store <32 x i16> [[TMP29]], ptr getelementptr inbounds nuw (i8, ptr @images, i64 8170), align 2
; CHECK-NEXT:    ret i32 0
;
; THRESH-LABEL: define fastcc i32 @test(
; THRESH-SAME: i32 [[TMP0:%.*]], i32 [[ADD111_I_I:%.*]], <4 x i32> [[PREDPEL_I_SROA_86_72_VEC_EXTRACT:%.*]], <4 x i32> [[TMP1:%.*]]) #[[ATTR0:[0-9]+]] {
; THRESH-NEXT:  [[ENTRY:.*:]]
; THRESH-NEXT:    [[LOOPARRAY_SROA_24_0_I_I3:%.*]] = ashr i32 [[TMP0]], 1
; THRESH-NEXT:    [[SHR143_5_I_I9:%.*]] = ashr i32 [[TMP0]], 1
; THRESH-NEXT:    [[ADD1392_I:%.*]] = add i32 [[TMP0]], 1
; THRESH-NEXT:    [[MUL1445_I:%.*]] = shl i32 [[TMP0]], 1
; THRESH-NEXT:    [[ADD2235_I16:%.*]] = or i32 [[TMP0]], 1
; THRESH-NEXT:    [[ADD2323_I:%.*]] = add i32 [[TMP0]], 1
; THRESH-NEXT:    [[TMP2:%.*]] = insertelement <3 x i32> poison, i32 [[ADD111_I_I]], i32 0
; THRESH-NEXT:    [[TMP3:%.*]] = insertelement <3 x i32> [[TMP2]], i32 [[LOOPARRAY_SROA_24_0_I_I3]], i32 1
; THRESH-NEXT:    [[TMP4:%.*]] = insertelement <3 x i32> [[TMP3]], i32 [[ADD2323_I]], i32 2
; THRESH-NEXT:    [[TMP5:%.*]] = insertelement <3 x i32> poison, i32 [[TMP0]], i32 0
; THRESH-NEXT:    [[TMP6:%.*]] = shufflevector <3 x i32> [[TMP5]], <3 x i32> poison, <3 x i32> zeroinitializer
; THRESH-NEXT:    [[TMP7:%.*]] = or <3 x i32> [[TMP4]], [[TMP6]]
; THRESH-NEXT:    [[TMP8:%.*]] = shufflevector <4 x i32> [[PREDPEL_I_SROA_86_72_VEC_EXTRACT]], <4 x i32> [[TMP1]], <8 x i32> <i32 0, i32 poison, i32 poison, i32 4, i32 poison, i32 poison, i32 poison, i32 poison>
; THRESH-NEXT:    [[TMP9:%.*]] = shufflevector <3 x i32> [[TMP4]], <3 x i32> poison, <8 x i32> <i32 poison, i32 poison, i32 1, i32 poison, i32 poison, i32 poison, i32 0, i32 poison>
; THRESH-NEXT:    [[TMP10:%.*]] = shufflevector <8 x i32> [[TMP8]], <8 x i32> [[TMP9]], <8 x i32> <i32 0, i32 poison, i32 10, i32 3, i32 poison, i32 poison, i32 14, i32 poison>
; THRESH-NEXT:    [[TMP11:%.*]] = insertelement <8 x i32> [[TMP10]], i32 [[TMP0]], i32 4
; THRESH-NEXT:    [[TMP12:%.*]] = insertelement <8 x i32> [[TMP11]], i32 [[ADD2235_I16]], i32 1
; THRESH-NEXT:    [[TMP13:%.*]] = insertelement <8 x i32> [[TMP12]], i32 [[MUL1445_I]], i32 5
; THRESH-NEXT:    [[TMP14:%.*]] = insertelement <8 x i32> [[TMP13]], i32 [[SHR143_5_I_I9]], i32 7
; THRESH-NEXT:    [[TMP15:%.*]] = add <8 x i32> [[TMP14]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 1>
; THRESH-NEXT:    [[TMP16:%.*]] = shufflevector <8 x i32> [[TMP15]], <8 x i32> poison, <11 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison>
; THRESH-NEXT:    [[TMP17:%.*]] = shufflevector <3 x i32> [[TMP7]], <3 x i32> poison, <11 x i32> <i32 0, i32 1, i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; THRESH-NEXT:    [[TMP18:%.*]] = shufflevector <11 x i32> [[TMP16]], <11 x i32> [[TMP17]], <11 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 11, i32 12, i32 13>
; THRESH-NEXT:    [[TMP19:%.*]] = lshr <11 x i32> [[TMP18]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 1, i32 1, i32 1, i32 1, i32 1>
; THRESH-NEXT:    [[TMP20:%.*]] = shufflevector <8 x i32> [[TMP14]], <8 x i32> poison, <4 x i32> <i32 2, i32 poison, i32 4, i32 7>
; THRESH-NEXT:    [[TMP21:%.*]] = insertelement <4 x i32> [[TMP20]], i32 [[ADD1392_I]], i32 1
; THRESH-NEXT:    [[TMP22:%.*]] = or <4 x i32> [[TMP21]], splat (i32 1)
; THRESH-NEXT:    [[TMP23:%.*]] = shufflevector <8 x i32> [[TMP14]], <8 x i32> poison, <4 x i32> <i32 4, i32 4, i32 4, i32 4>
; THRESH-NEXT:    [[TMP24:%.*]] = add <4 x i32> [[TMP22]], [[TMP23]]
; THRESH-NEXT:    [[TMP25:%.*]] = shufflevector <11 x i32> [[TMP19]], <11 x i32> poison, <15 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 poison, i32 poison, i32 poison, i32 poison>
; THRESH-NEXT:    [[TMP26:%.*]] = shufflevector <4 x i32> [[TMP24]], <4 x i32> poison, <15 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; THRESH-NEXT:    [[TMP27:%.*]] = shufflevector <15 x i32> [[TMP25]], <15 x i32> [[TMP26]], <15 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 15, i32 16, i32 17, i32 18>
; THRESH-NEXT:    [[TMP28:%.*]] = trunc <15 x i32> [[TMP27]] to <15 x i16>
; THRESH-NEXT:    [[TMP29:%.*]] = shufflevector <15 x i16> [[TMP28]], <15 x i16> poison, <32 x i32> <i32 0, i32 8, i32 9, i32 1, i32 11, i32 2, i32 3, i32 4, i32 5, i32 6, i32 0, i32 8, i32 9, i32 1, i32 11, i32 10, i32 12, i32 4, i32 5, i32 6, i32 0, i32 8, i32 9, i32 7, i32 13, i32 10, i32 12, i32 4, i32 5, i32 6, i32 0, i32 14>
; THRESH-NEXT:    store <32 x i16> [[TMP29]], ptr getelementptr inbounds nuw (i8, ptr @images, i64 8170), align 2
; THRESH-NEXT:    ret i32 0
;
entry:
  %LoopArray.sroa.24.0.i.i3 = ashr i32 %0, 1
  %shr143.5.i.i9 = ashr i32 %0, 1
  %add1392.i = add i32 %0, 1
  %PredPel.i.sroa.86.80.vec.extract59312 = extractelement <4 x i32> %PredPel.i.sroa.86.72.vec.extract, i64 0
  %mul1445.i = shl i32 %0, 1
  %PredPel.i.sroa.7.4.vec.extract446 = extractelement <4 x i32> %1, i64 0
  %add1571.i = add i32 %PredPel.i.sroa.7.4.vec.extract446, 1
  %shr1572.i = lshr i32 %add1571.i, 1
  %conv1573.i = trunc i32 %shr1572.i to i16
  %add2136.i = or i32 %LoopArray.sroa.24.0.i.i3, %0
  %shr2137.i = lshr i32 %add2136.i, 1
  %conv2138.i = trunc i32 %shr2137.i to i16
  %add2157.i = add i32 %PredPel.i.sroa.86.80.vec.extract59312, 1
  %shr2158.i = lshr i32 %add2157.i, 1
  %conv2159.i = trunc i32 %shr2158.i to i16
  %add2174.i = add i32 %mul1445.i, 2
  %shr2175.i = lshr i32 %add2174.i, 2
  %conv2176.i = trunc i32 %shr2175.i to i16
  %add2190.i = or i32 %add1392.i, 1
  %add2191.i = add i32 %add2190.i, %0
  %conv2193.i = trunc i32 %add2191.i to i16
  %add2203.i = or i32 %0, 1
  %add2204.i = add i32 %add2203.i, %0
  %conv2206.i = trunc i32 %add2204.i to i16
  %add2214.i = add i32 %LoopArray.sroa.24.0.i.i3, 1
  %shr2215.i = lshr i32 %add2214.i, 1
  %conv2216.i = trunc i32 %shr2215.i to i16
  store i16 %conv2216.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8180), align 4
  %add2235.i16 = or i32 %0, 1
  %add2236.i = add i32 %add2235.i16, 1
  %shr2237.i = lshr i32 %add2236.i, 1
  %conv2238.i = trunc i32 %shr2237.i to i16
  store i16 %conv2238.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8196), align 4
  store i16 %conv2238.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8176), align 8
  %add2258.i = or i32 %add111.i.i, %0
  %shr2259.i = lshr i32 %add2258.i, 1
  %conv2260.i = trunc i32 %shr2259.i to i16
  store i16 %conv2260.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8212), align 4
  store i16 %conv2260.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8192), align 8
  store i16 %conv2260.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8172), align 4
  %add2280.i = add i32 %add111.i.i, 1
  %shr2281.i = lshr i32 %add2280.i, 1
  %conv2282.i = trunc i32 %shr2281.i to i16
  store i16 %conv2282.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8228), align 4
  store i16 %conv2282.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8208), align 8
  store i16 %conv2282.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8188), align 4
  %add2302.i = add i32 %0, 1
  %shr2303.i = lshr i32 %add2302.i, 1
  %conv2304.i = trunc i32 %shr2303.i to i16
  store i16 %conv2304.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8224), align 8
  store i16 %conv2304.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8204), align 4
  store i16 %conv2304.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8184), align 8
  %add2323.i = add i32 %0, 1
  %add2324.i = or i32 %add2323.i, %0
  %shr2325.i = lshr i32 %add2324.i, 1
  %conv2326.i = trunc i32 %shr2325.i to i16
  store i16 %conv2326.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8220), align 4
  store i16 %conv2326.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8200), align 8
  %add2342.i = add i32 %shr143.5.i.i9, 1
  %shr2343.i = lshr i32 %add2342.i, 1
  %conv2344.i = trunc i32 %shr2343.i to i16
  store i16 %conv2344.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8216), align 8
  %add2355.i = or i32 %shr143.5.i.i9, 1
  %add2356.i = add i32 %add2355.i, %0
  %conv2358.i = trunc i32 %add2356.i to i16
  store i16 %conv2358.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8232), align 8
  store i16 %conv1573.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8182), align 2
  %add2393.i = or i32 %LoopArray.sroa.24.0.i.i3, 1
  %add2394.i = add i32 %add2393.i, %0
  %conv2396.i = trunc i32 %add2394.i to i16
  store i16 %conv2396.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8198), align 2
  store i16 %conv2396.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8178), align 2
  store i16 %conv2138.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8214), align 2
  store i16 %conv2138.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8194), align 2
  store i16 %conv2138.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8174), align 2
  store i16 %conv2159.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8230), align 2
  store i16 %conv2159.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8210), align 2
  store i16 %conv2159.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8190), align 2
  store i16 %conv2159.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8170), align 2
  store i16 %conv2176.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8226), align 2
  store i16 %conv2176.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8206), align 2
  store i16 %conv2176.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8186), align 2
  store i16 %conv2193.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8222), align 2
  store i16 %conv2193.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8202), align 2
  store i16 %conv2206.i, ptr getelementptr inbounds nuw (i8, ptr @images, i64 8218), align 2
  ret i32 0
}
