; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool ./opt --version 5
; RUN: opt < %s -passes=flatten-cfg -S | FileCheck %s

define i1 @_Z7compareRK1SS1_(ptr %a, ptr %b) {
; CHECK-LABEL: @_Z7compareRK1SS1_(
; CHECK-SAME: ptr [[A:%.*]], ptr [[B:%.*]]) {
; CHECK-NEXT: entry:
; CHECK-NEXT:   %0 = load i32, ptr %a, align 4, !tbaa !3
; CHECK-NEXT:   %1 = load i32, ptr %b, align 4, !tbaa !3
; CHECK-NEXT:   %cmp.i = icmp sge i32 %0, %1
; CHECK-NEXT:   %cmp.i19 = icmp eq i32 %0, %1
; CHECK-NEXT:   %2 = and i1 %cmp.i, %cmp.i19
; CHECK-NEXT:   %3 = select i1 %cmp.i, i1 false, i1 true
; CHECK-NEXT:   br i1 %2, label %land.rhs, label %lor.end
; CHECK-EMPTY:
; CHECK-NEXT: land.rhs:  ; preds = %entry
; CHECK-NEXT:   %y = getelementptr inbounds nuw i8, ptr %a, i64 4
; CHECK-NEXT:   %4 = load i32, ptr %y, align 4, !tbaa !8
; CHECK-NEXT:   %y14 = getelementptr inbounds nuw i8, ptr %b, i64 4
; CHECK-NEXT:   %5 = load i32, ptr %y14, align 4, !tbaa !8
; CHECK-NEXT:   %cmp = icmp slt i32 %4, %5
; CHECK-NEXT:   br label %lor.end
; CHECK-EMPTY:
; CHECK-NEXT: lor.end:  ; preds = %land.rhs, %entry
; CHECK-NEXT:   %6 = phi i1 [ %cmp, %land.rhs ], [ %3, %entry ]
; CHECK-NEXT:   ret i1 %6
entry:
  %0 = load i32, ptr %a, align 4, !tbaa !3
  %1 = load i32, ptr %b, align 4, !tbaa !3
  %cmp.i = icmp slt i32 %0, %1
  br i1 %cmp.i, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %cmp.i19 = icmp eq i32 %0, %1
  br i1 %cmp.i19, label %land.rhs, label %lor.end

land.rhs:                                         ; preds = %lor.rhs
  %y = getelementptr inbounds nuw i8, ptr %a, i64 4
  %2 = load i32, ptr %y, align 4, !tbaa !8
  %y14 = getelementptr inbounds nuw i8, ptr %b, i64 4
  %3 = load i32, ptr %y14, align 4, !tbaa !8
  %cmp = icmp slt i32 %2, %3
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ false, %lor.rhs ], [ %cmp, %land.rhs ]
  ret i1 %4
}

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 2}
!2 = !{!"clang"}
!3 = !{!4, !5, i64 0}
!4 = !{!"_ZTS1S", !5, i64 0, !5, i64 4}
!5 = !{!"int", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C++ TBAA"}
!8 = !{!4, !5, i64 4}
!9 = !{!5, !5, i64 0}
