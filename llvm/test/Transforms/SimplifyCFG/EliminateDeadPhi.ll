; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -passes=simplifycfg -S | FileCheck %s


define void @mainfunc(i16 %0) {
; CHECK-LABEL: define void @mainfunc(
; CHECK-SAME: i16 [[TMP0:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP1:%.*]] = icmp ugt i16 [[TMP0]], 10
; CHECK-NEXT:    br i1 [[TMP1]], label %[[OTHERLOOPEND:.*]], label %[[FOR_BODY_CRITEDGE:.*]]
; CHECK:       [[OTHERLOOPEND]]:
; CHECK-NEXT:    [[OTHERLOOPIV:%.*]] = call i16 @ivfunc()
; CHECK-NEXT:    [[OTHERLOOPPRED:%.*]] = icmp slt i16 [[OTHERLOOPIV]], 100
; CHECK-NEXT:    br i1 [[OTHERLOOPPRED]], label %[[OTHERLOOPEND]], label %[[VADDEXIT:.*]]
; CHECK:       [[VADDEXIT]]:
; CHECK-NEXT:    call void @voidfunc()
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[FOR_BODY_CRITEDGE]]:
; CHECK-NEXT:    call void @voidfunc()
; CHECK-NEXT:    br label %[[FOR_BODY:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[IV:%.*]] = phi i16 [ [[IV_NEXT:%.*]], %[[FOR_BODY]] ], [ 0, %[[FOR_BODY_CRITEDGE]] ]
; CHECK-NEXT:    [[VAL:%.*]] = tail call <256 x i1> @helperfunc()
; CHECK-NEXT:    [[VAL2:%.*]] = tail call <1 x i32> @helperfunc2()
; CHECK-NEXT:    [[IV_NEXT]] = add i16 [[IV]], 1
; CHECK-NEXT:    [[PRED:%.*]] = icmp slt i16 [[IV_NEXT]], 100
; CHECK-NEXT:    br i1 [[PRED]], label %[[FOR_BODY]], label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    ret void
;
entry:
  br label %otherlooppreheader

otherlooppreheader:
  %1 = icmp ugt i16 %0, 10
  br i1 %1, label %otherloopend, label %VAddExit

otherloopend:
  %otherloopiv = call i16 @ivfunc()
  %otherLoopPred = icmp slt i16 %otherloopiv, 100
  br i1 %otherLoopPred, label %otherloopend, label %VAddExit


VAddExit:
  call void @voidfunc()
  br i1 %1, label %end, label %for.body

for.body:
  %iv = phi i16 [ %iv.next, %VMulExit ], [ 0, %VAddExit ]
  %val = tail call <256 x i1> @helperfunc()
  br label %for.body.inner

for.body.inner:
  %val2 = tail call <1 x i32> @helperfunc2()
  br label %VMulExit

VMulExit:
  %iv.next = add i16 %iv, 1
  %pred = icmp slt i16 %iv.next, 100
  br i1 %pred, label %for.body, label %end

end:
  ret void

}


declare i16 @ivfunc()

declare <256 x i1> @helperfunc()

declare <1 x i32> @helperfunc2()

declare void @voidfunc()
