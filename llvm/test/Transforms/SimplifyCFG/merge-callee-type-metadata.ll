; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-globals all --version 5
;; Test if the callee_type metadata is merged correctly.

; RUN: opt -passes=simplifycfg -S < %s | FileCheck %s

;; Test if the callee_type metadata is merged correctly when
;; the instructions carry differring callee_type metadata.
define ptr @_Z10test_diffb(i1 zeroext %b) {
; CHECK-LABEL: define ptr @_Z10test_diffb(
; CHECK-SAME: i1 zeroext [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[FN:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr @_Znwm, ptr [[FN]], align 8
; CHECK-NEXT:    [[CALL:%.*]] = call ptr [[FN]](i64 4), !callee_type [[META0:![0-9]+]]
; CHECK-NEXT:    ret ptr [[CALL]]
;
entry:
  %fn = alloca ptr
  store ptr @_Znwm, ptr %fn
  br i1 %b, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call ptr %fn(i64 4), !callee_type !4
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call ptr %fn(i64 4), !callee_type !3
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %x.0 = phi ptr [ %call, %if.then ], [ %call1, %if.else ]
  ret ptr %x.0
}

;; Test if the callee_type metadata is merged correctly when
;; the instructions carry same callee_type metadata.
define ptr @_Z10test_sameb(i1 zeroext %b) {
; CHECK-LABEL: define ptr @_Z10test_sameb(
; CHECK-SAME: i1 zeroext [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[FN:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr @_Znwm, ptr [[FN]], align 8
; CHECK-NEXT:    [[CALL:%.*]] = call ptr [[FN]](i64 4), !callee_type [[META3:![0-9]+]]
; CHECK-NEXT:    ret ptr [[CALL]]
;
entry:
  %fn = alloca ptr
  store ptr @_Znwm, ptr %fn
  br i1 %b, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call ptr %fn(i64 4), !callee_type !3
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call ptr %fn(i64 4), !callee_type !3
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %x.0 = phi ptr [ %call, %if.then ], [ %call1, %if.else ]
  ret ptr %x.0
}

;; Test if the callee_type metadata is dropped correctly when
;; only the left instruction has callee_type metadata.
define ptr @_Z10test_leftb(i1 zeroext %b) {
; CHECK-LABEL: define ptr @_Z10test_leftb(
; CHECK-SAME: i1 zeroext [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[FN:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr @_Znwm, ptr [[FN]], align 8
; CHECK-NEXT:    [[CALL:%.*]] = call ptr [[FN]](i64 4)
; CHECK-NEXT:    ret ptr [[CALL]]
;
entry:
  %fn = alloca ptr
  store ptr @_Znwm, ptr %fn
  br i1 %b, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call ptr %fn(i64 4), !callee_type !4
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call ptr %fn(i64 4)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %x.0 = phi ptr [ %call, %if.then ], [ %call1, %if.else ]
  ret ptr %x.0
}

;; Test if the callee_type metadata is dropped correctly when
;; only the right instruction has callee_type metadata.
define ptr @_Z10test_rightb(i1 zeroext %b) {
; CHECK-LABEL: define ptr @_Z10test_rightb(
; CHECK-SAME: i1 zeroext [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[FN:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr @_Znwm, ptr [[FN]], align 8
; CHECK-NEXT:    [[CALL:%.*]] = call ptr [[FN]](i64 4)
; CHECK-NEXT:    ret ptr [[CALL]]
;
entry:
  %fn = alloca ptr
  store ptr @_Znwm, ptr %fn
  br i1 %b, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call ptr %fn(i64 4)
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call ptr %fn(i64 4), !callee_type !3
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %x.0 = phi ptr [ %call, %if.then ], [ %call1, %if.else ]
  ret ptr %x.0
}

;; Test if the callee_type metadata is merged correctly when
;; each of the callee_type metadata are lists.
define ptr @_Z10test_listb(i1 zeroext %b) {
; CHECK-LABEL: define ptr @_Z10test_listb(
; CHECK-SAME: i1 zeroext [[B:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[FN:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr @_Znwm, ptr [[FN]], align 8
; CHECK-NEXT:    [[CALL:%.*]] = call ptr [[FN]](i64 4), !callee_type [[META4:![0-9]+]]
; CHECK-NEXT:    ret ptr [[CALL]]
;
entry:
  %fn = alloca ptr
  store ptr @_Znwm, ptr %fn
  br i1 %b, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call ptr %fn(i64 4), !callee_type !6
  br label %if.end

if.else:                                          ; preds = %entry
  %call1 = call ptr %fn(i64 4), !callee_type !5
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %x.0 = phi ptr [ %call, %if.then ], [ %call1, %if.else ]
  ret ptr %x.0
}

declare ptr @_Znwm(i64)

!0 = !{i64 0, !"callee_type0.generalized"}
!1 = !{i64 0, !"callee_type1.generalized"}
!2 = !{i64 0, !"callee_type2.generalized"}
!3 = !{!0}
!4 = !{!2}
!5 = !{!1, !2}
!6 = !{!0, !2}
;.
; CHECK: [[META0]] = !{[[META1:![0-9]+]], [[META2:![0-9]+]]}
; CHECK: [[META1]] = !{i64 0, !"callee_type2.generalized"}
; CHECK: [[META2]] = !{i64 0, !"callee_type0.generalized"}
; CHECK: [[META3]] = !{[[META2]]}
; CHECK: [[META4]] = !{[[META2]], [[META1]], [[META5:![0-9]+]]}
; CHECK: [[META5]] = !{i64 0, !"callee_type1.generalized"}
;.
