; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -S -simplifycfg -simplifycfg-require-and-preserve-domtree=1 2>&1 | FileCheck %s

declare i32 @blam(i8*, i32)

define i32 @wibble(i8* %arg, i8** %arg1) {
; CHECK-LABEL: @wibble(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    br label [[BB2:%.*]]
; CHECK:       bb2:
; CHECK-NEXT:    [[BORG:%.*]] = phi i32 [ 0, [[BB:%.*]] ], [ [[BORG]], [[BB2]] ]
; CHECK-NEXT:    [[BORG3:%.*]] = phi i32 [ 8, [[BB]] ], [ [[SPEC_SELECT:%.*]], [[BB2]] ]
; CHECK-NEXT:    [[BORG4:%.*]] = tail call i32 @blam(i8* [[ARG:%.*]], i32 [[BORG]])
; CHECK-NEXT:    [[BORG5:%.*]] = icmp eq i32 [[BORG4]], 0
; CHECK-NEXT:    [[SPEC_SELECT]] = select i1 [[BORG5]], i32 [[BORG3]], i32 [[BORG4]]
; CHECK-NEXT:    [[BORG11:%.*]] = icmp ult i32 [[BORG]], 2
; CHECK-NEXT:    br i1 [[BORG11]], label [[BB2]], label [[BB12:%.*]]
; CHECK:       bb12:
; CHECK-NEXT:    ret i32 1
;
bb:
  br label %bb2

bb2:                                              ; preds = %bb8, %bb
  %borg = phi i32 [ 0, %bb ], [ %borg9, %bb8 ]
  %borg3 = phi i32 [ 8, %bb ], [ %borg10, %bb8 ]
  %borg4 = tail call i32 @blam(i8* %arg, i32 %borg)
  %borg5 = icmp eq i32 %borg4, 0
  br i1 %borg5, label %bb8, label %bb6

bb6:                                              ; preds = %bb2
  %borg7 = load i8*, i8** %arg1, align 4
  br label %bb8

bb8:                                              ; preds = %bb6, %bb2
  %borg9 = phi i32 [ %borg, %bb6 ], [ %borg, %bb2 ]
  %borg10 = phi i32 [ %borg4, %bb6 ], [ %borg3, %bb2 ]
  %borg11 = icmp ult i32 %borg9, 2
  br i1 %borg11, label %bb2, label %bb12

bb12:                                             ; preds = %bb8
  ret i32 1
}
