; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -mtriple=amdgcn-amd-amdhsa -mcpu=gfx950 -passes=separate-const-offset-from-gep -S | FileCheck %s

%lds.struct.t = type { [18432 x i8], [18432 x i8], [18432 x i8], [18432 x i8] }

@lds.struct = internal addrspace(3) global %lds.struct.t poison, align 16

define protected amdgpu_kernel void @extractInnerGEP(ptr addrspace(3) %inptr, i1 %cond, ptr addrspace(3) %outptr, i32 %input) {
; CHECK-LABEL: define protected amdgpu_kernel void @extractInnerGEP(
; CHECK-SAME: ptr addrspace(3) [[INPTR:%.*]], i1 [[COND:%.*]], ptr addrspace(3) [[OUTPTR:%.*]], i32 [[INPUT:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[INPUT]]
; CHECK-NEXT:    [[GEP02:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP1]], i32 22528
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[INPUT]]
; CHECK-NEXT:    [[GEP14:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP2]], i32 40960
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[LOAD0:%.*]] = load <4 x half>, ptr addrspace(3) [[GEP02]], align 8
; CHECK-NEXT:    [[SHUF0:%.*]] = shufflevector <4 x half> [[LOAD0]], <4 x half> [[LOAD0]], <4 x i32> <i32 0, i32 2, i32 1, i32 3>
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[LOAD1:%.*]] = load <4 x half>, ptr addrspace(3) [[GEP14]], align 8
; CHECK-NEXT:    [[SHUF1:%.*]] = shufflevector <4 x half> [[LOAD1]], <4 x half> [[LOAD1]], <4 x i32> <i32 1, i32 3, i32 0, i32 2>
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    [[RES:%.*]] = phi <4 x half> [ [[SHUF0]], %[[THEN]] ], [ [[SHUF1]], %[[ELSE]] ]
; CHECK-NEXT:    store <4 x half> [[RES]], ptr addrspace(3) [[OUTPTR]], align 8
; CHECK-NEXT:    ret void
;
  %val = add i32 %input, 1024
  %gep0 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  %gep1 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 2), i32 %val
  br i1 %cond, label %then, label %else

then:
  %load0 = load <4 x half>, ptr addrspace(3) %gep0
  %shuf0 = shufflevector <4 x half> %load0, <4 x half> %load0, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  br label %end

else:
  %load1 = load <4 x half>, ptr addrspace(3) %gep1
  %shuf1 = shufflevector <4 x half> %load1, <4 x half> %load1, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  br label %end

end:
  %res = phi <4 x half> [ %shuf0, %then ], [ %shuf1, %else ]
  store <4 x half> %res, ptr addrspace(3) %outptr
  ret void
}

define protected amdgpu_kernel void @extractInnerTooLarge(ptr addrspace(3) %inptr, i1 %cond, ptr addrspace(3) %outptr, i32 %input) {
; CHECK-LABEL: define protected amdgpu_kernel void @extractInnerTooLarge(
; CHECK-SAME: ptr addrspace(3) [[INPTR:%.*]], i1 [[COND:%.*]], ptr addrspace(3) [[OUTPTR:%.*]], i32 [[INPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[INPUT]]
; CHECK-NEXT:    [[GEP02:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP1]], i32 63488
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds ([[LDS_STRUCT_T:%.*]], ptr addrspace(3) @lds.struct, i32 0, i32 2), i32 [[INPUT]]
; CHECK-NEXT:    [[GEP14:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP2]], i32 45056
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[LOAD0:%.*]] = load <4 x half>, ptr addrspace(3) [[GEP02]], align 8
; CHECK-NEXT:    [[SHUF0:%.*]] = shufflevector <4 x half> [[LOAD0]], <4 x half> [[LOAD0]], <4 x i32> <i32 0, i32 2, i32 1, i32 3>
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[LOAD1:%.*]] = load <4 x half>, ptr addrspace(3) [[GEP14]], align 8
; CHECK-NEXT:    [[SHUF1:%.*]] = shufflevector <4 x half> [[LOAD1]], <4 x half> [[LOAD1]], <4 x i32> <i32 1, i32 3, i32 0, i32 2>
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    [[RES:%.*]] = phi <4 x half> [ [[SHUF0]], %[[THEN]] ], [ [[SHUF1]], %[[ELSE]] ]
; CHECK-NEXT:    store <4 x half> [[RES]], ptr addrspace(3) [[OUTPTR]], align 8
; CHECK-NEXT:    ret void
;
  %val = add i32 %input, 11264
  %gep0 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  %gep1 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 2), i32 %val
  br i1 %cond, label %then, label %else

then:
  %load0 = load <4 x half>, ptr addrspace(3) %gep0
  %shuf0 = shufflevector <4 x half> %load0, <4 x half> %load0, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  br label %end

else:
  %load1 = load <4 x half>, ptr addrspace(3) %gep1
  %shuf1 = shufflevector <4 x half> %load1, <4 x half> %load1, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  br label %end

end:
  %res = phi <4 x half> [ %shuf0, %then ], [ %shuf1, %else ]
  store <4 x half> %res, ptr addrspace(3) %outptr
  ret void
}

define protected amdgpu_kernel void @extractInnerBothTooLarge(ptr addrspace(3) %inptr, i1 %cond, ptr addrspace(3) %outptr, i32 %input) {
; CHECK-LABEL: define protected amdgpu_kernel void @extractInnerBothTooLarge(
; CHECK-SAME: ptr addrspace(3) [[INPTR:%.*]], i1 [[COND:%.*]], ptr addrspace(3) [[OUTPTR:%.*]], i32 [[INPUT:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds ([[LDS_STRUCT_T:%.*]], ptr addrspace(3) @lds.struct, i32 0, i32 2), i32 [[INPUT]]
; CHECK-NEXT:    [[GEP02:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP1]], i32 45056
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds ([[LDS_STRUCT_T]], ptr addrspace(3) @lds.struct, i32 0, i32 3), i32 [[INPUT]]
; CHECK-NEXT:    [[GEP14:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP2]], i32 45056
; CHECK-NEXT:    br i1 [[COND]], label %[[THEN:.*]], label %[[ELSE:.*]]
; CHECK:       [[THEN]]:
; CHECK-NEXT:    [[LOAD0:%.*]] = load <4 x half>, ptr addrspace(3) [[GEP02]], align 8
; CHECK-NEXT:    [[SHUF0:%.*]] = shufflevector <4 x half> [[LOAD0]], <4 x half> [[LOAD0]], <4 x i32> <i32 0, i32 2, i32 1, i32 3>
; CHECK-NEXT:    br label %[[END:.*]]
; CHECK:       [[ELSE]]:
; CHECK-NEXT:    [[LOAD1:%.*]] = load <4 x half>, ptr addrspace(3) [[GEP14]], align 8
; CHECK-NEXT:    [[SHUF1:%.*]] = shufflevector <4 x half> [[LOAD1]], <4 x half> [[LOAD1]], <4 x i32> <i32 1, i32 3, i32 0, i32 2>
; CHECK-NEXT:    br label %[[END]]
; CHECK:       [[END]]:
; CHECK-NEXT:    [[RES:%.*]] = phi <4 x half> [ [[SHUF0]], %[[THEN]] ], [ [[SHUF1]], %[[ELSE]] ]
; CHECK-NEXT:    store <4 x half> [[RES]], ptr addrspace(3) [[OUTPTR]], align 8
; CHECK-NEXT:    ret void
;
  %val = add i32 %input, 11264
  %gep0 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 2), i32 %val
  %gep1 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 3), i32 %val
  br i1 %cond, label %then, label %else

then:
  %load0 = load <4 x half>, ptr addrspace(3) %gep0
  %shuf0 = shufflevector <4 x half> %load0, <4 x half> %load0, <4 x i32> <i32 0, i32 2, i32 1, i32 3>
  br label %end

else:
  %load1 = load <4 x half>, ptr addrspace(3) %gep1
  %shuf1 = shufflevector <4 x half> %load1, <4 x half> %load1, <4 x i32> <i32 1, i32 3, i32 0, i32 2>
  br label %end

end:
  %res = phi <4 x half> [ %shuf0, %then ], [ %shuf1, %else ]
  store <4 x half> %res, ptr addrspace(3) %outptr
  ret void
}

define protected amdgpu_kernel void @inbounds(i32 %val) {
; CHECK-LABEL: define protected amdgpu_kernel void @inbounds(
; CHECK-SAME: i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds nuw ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[VAL]]
; CHECK-NEXT:    [[GEP01:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(3) [[TMP1]], i32 18432
; CHECK-NEXT:    ret void
;
  %gep0 = getelementptr nusw nuw inbounds ptr addrspace(3), ptr addrspace(3) getelementptr nusw nuw inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  ret void
}

define protected amdgpu_kernel void @innerGEPNonInbounds(i32 %val) {
; CHECK-LABEL: define protected amdgpu_kernel void @innerGEPNonInbounds(
; CHECK-SAME: i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[VAL]]
; CHECK-NEXT:    [[GEP01:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP1]], i32 18432
; CHECK-NEXT:    ret void
;
  %gep0 = getelementptr nusw nuw inbounds ptr addrspace(3), ptr addrspace(3) getelementptr (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  ret void
}

define protected amdgpu_kernel void @outerGEPNonInbounds(i32 %val) {
; CHECK-LABEL: define protected amdgpu_kernel void @outerGEPNonInbounds(
; CHECK-SAME: i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[VAL]]
; CHECK-NEXT:    [[GEP01:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP1]], i32 18432
; CHECK-NEXT:    ret void
;
  %gep0 = getelementptr ptr addrspace(3), ptr addrspace(3) getelementptr nusw nuw inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  ret void
}

define protected amdgpu_kernel void @missingNUSW(i32 %val) {
; CHECK-LABEL: define protected amdgpu_kernel void @missingNUSW(
; CHECK-SAME: i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds nuw ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[VAL]]
; CHECK-NEXT:    [[GEP01:%.*]] = getelementptr inbounds nuw i8, ptr addrspace(3) [[TMP1]], i32 18432
; CHECK-NEXT:    ret void
;
  %gep0 = getelementptr nuw inbounds ptr addrspace(3), ptr addrspace(3) getelementptr nusw nuw inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  ret void
}

define protected amdgpu_kernel void @missingNUW(i32 %val) {
; CHECK-LABEL: define protected amdgpu_kernel void @missingNUW(
; CHECK-SAME: i32 [[VAL:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr ptr addrspace(3), ptr addrspace(3) @lds.struct, i32 [[VAL]]
; CHECK-NEXT:    [[GEP01:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP1]], i32 18432
; CHECK-NEXT:    ret void
;
  %gep0 = getelementptr nusw inbounds ptr addrspace(3), ptr addrspace(3) getelementptr nusw nuw inbounds (%lds.struct.t, ptr addrspace(3) @lds.struct, i32 0, i32 1), i32 %val
  ret void
}

