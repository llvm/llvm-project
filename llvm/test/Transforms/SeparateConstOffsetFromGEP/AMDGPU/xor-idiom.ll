; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -mtriple=amdgcn-amd-amdhsa -passes=separate-const-offset-from-gep \
; RUN: -S < %s | FileCheck %s

; Test that xor idiom.
; Xors with disjoint constants 4128,8224 and 12320 must be expressed in GEPs.
; Xors with non-disjoint constants 2336 and 8480, should not be optimized.
define amdgpu_kernel void @test1(i1 %0, ptr addrspace(3) %1) {
; CHECK-LABEL: define amdgpu_kernel void @test1(
; CHECK-SAME: i1 [[TMP0:%.*]], ptr addrspace(3) [[TMP1:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP2:%.*]] = select i1 [[TMP0]], i32 0, i32 288
; CHECK-NEXT:    [[TMP3:%.*]] = xor i32 [[TMP2]], 32
; CHECK-NEXT:    [[TMP14:%.*]] = xor i32 [[TMP2]], 2336
; CHECK-NEXT:    [[TMP5:%.*]] = xor i32 [[TMP2]], 8480
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr half, ptr addrspace(3) [[TMP1]], i32 [[TMP3]]
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr half, ptr addrspace(3) [[TMP1]], i32 [[TMP14]]
; CHECK-NEXT:    [[TMP20:%.*]] = getelementptr half, ptr addrspace(3) [[TMP1]], i32 [[TMP3]]
; CHECK-NEXT:    [[TMP21:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP20]], i32 8192
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr half, ptr addrspace(3) [[TMP1]], i32 [[TMP3]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP7]], i32 16384
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr half, ptr addrspace(3) [[TMP1]], i32 [[TMP5]]
; CHECK-NEXT:    [[TMP25:%.*]] = getelementptr half, ptr addrspace(3) [[TMP1]], i32 [[TMP3]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr i8, ptr addrspace(3) [[TMP25]], i32 24576
; CHECK-NEXT:    [[TMP9:%.*]] = load <8 x half>, ptr addrspace(3) [[TMP4]], align 16
; CHECK-NEXT:    [[TMP10:%.*]] = load <8 x half>, ptr addrspace(3) [[TMP16]], align 16
; CHECK-NEXT:    [[TMP17:%.*]] = load <8 x half>, ptr addrspace(3) [[TMP21]], align 16
; CHECK-NEXT:    [[TMP18:%.*]] = load <8 x half>, ptr addrspace(3) [[TMP6]], align 16
; CHECK-NEXT:    [[TMP19:%.*]] = load <8 x half>, ptr addrspace(3) [[TMP15]], align 16
; CHECK-NEXT:    [[TMP11:%.*]] = load <8 x half>, ptr addrspace(3) [[TMP8]], align 16
; CHECK-NEXT:    [[TMP12:%.*]] = fadd <8 x half> [[TMP9]], [[TMP10]]
; CHECK-NEXT:    [[TMP22:%.*]] = fadd <8 x half> [[TMP17]], [[TMP18]]
; CHECK-NEXT:    [[TMP23:%.*]] = fadd <8 x half> [[TMP19]], [[TMP11]]
; CHECK-NEXT:    [[TMP24:%.*]] = fadd <8 x half> [[TMP12]], [[TMP22]]
; CHECK-NEXT:    [[TMP13:%.*]] = fadd <8 x half> [[TMP23]], [[TMP24]]
; CHECK-NEXT:    store <8 x half> [[TMP13]], ptr addrspace(3) [[TMP1]], align 16
; CHECK-NEXT:    ret void
;
entry:
  %2 = select i1 %0, i32 0, i32 288
  %3 = xor i32 %2, 32 // Base
  %4 = xor i32 %2, 2336 // Not disjoint
  %5 = xor i32 %2, 4128 // Disjoint
  %6 = xor i32 %2, 8224 // Disjoint
  %7 = xor i32 %2, 8480 // Not disjoint
  %8 = xor i32 %2, 12320 // Disjoint
  %9 = getelementptr half, ptr addrspace(3) %1, i32 %3
  %10 = getelementptr half, ptr addrspace(3) %1, i32 %4
  %11 = getelementptr half, ptr addrspace(3) %1, i32 %5
  %12 = getelementptr half, ptr addrspace(3) %1, i32 %6
  %13 = getelementptr half, ptr addrspace(3) %1, i32 %7
  %14 = getelementptr half, ptr addrspace(3) %1, i32 %8
  %15 = load <8 x half>, ptr addrspace(3) %9, align 16
  %16 = load <8 x half>, ptr addrspace(3) %10, align 16
  %17 = load <8 x half>, ptr addrspace(3) %11, align 16
  %18 = load <8 x half>, ptr addrspace(3) %12, align 16
  %19 = load <8 x half>, ptr addrspace(3) %13, align 16
  %20 = load <8 x half>, ptr addrspace(3) %14, align 16
  %21 = fadd <8 x half> %15, %16
  %22 = fadd <8 x half> %17, %18
  %23 = fadd <8 x half> %19, %20
  %24 = fadd <8 x half> %21, %22
  %25 = fadd <8 x half> %23, %24
  store <8 x half> %25, ptr addrspace(3) %1, align 16
  ret void
}
