; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -passes=isolate-path -S < %s | FileCheck --check-prefix=UNREACHABLE %s
; RUN: opt -passes=isolate-path -isolate-ub-path-to-trap-unreachable -S < %s | FileCheck --check-prefix=TRAP-UNREACHABLE %s

%struct.demangle_component = type { i32, i32 }

define dso_local ptr @test1(ptr noundef readonly captures(none) %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test1(
; UNREACHABLE-SAME: ptr noundef readonly captures(none) [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[ARRAYIDX_I]], %[[IF_END_I]] ]
; UNREACHABLE-NEXT:    [[TMP3:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    call void @foo(i32 noundef [[TMP3]])
; UNREACHABLE-NEXT:    [[ZZZ:%.*]] = getelementptr inbounds nuw i8, ptr [[RETVAL_0_I]], i64 4
; UNREACHABLE-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ZZZ]], align 4
; UNREACHABLE-NEXT:    call void @bar(i32 noundef [[TMP4]])
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test1(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly captures(none) [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; TRAP-UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; TRAP-UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[ARRAYIDX_I]], %[[IF_END_I]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP3:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @foo(i32 noundef [[TMP3]])
; TRAP-UNREACHABLE-NEXT:    [[ZZZ:%.*]] = getelementptr inbounds nuw i8, ptr [[RETVAL_0_I]], i64 4
; TRAP-UNREACHABLE-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ZZZ]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @bar(i32 noundef [[TMP4]])
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP5:%.*]] = load volatile i32, ptr [[RETVAL_0_I_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %next_comp.i = getelementptr inbounds nuw i8, ptr %di, i64 8
  %0 = load i32, ptr %next_comp.i, align 8
  %num_comps.i = getelementptr inbounds nuw i8, ptr %di, i64 12
  %1 = load i32, ptr %num_comps.i, align 4
  %cmp.not.i = icmp slt i32 %0, %1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  %idxprom.i = sext i32 %0 to i64
  %arrayidx.i = getelementptr inbounds %struct.demangle_component, ptr %2, i64 %idxprom.i
  br label %exit

exit:
  %retval.0.i = phi ptr [ %arrayidx.i, %if.end.i ], [ null, %entry ]
  %3 = load i32, ptr %retval.0.i, align 4
  call void @foo(i32 noundef %3)
  %zzz = getelementptr inbounds nuw i8, ptr %retval.0.i, i64 4
  %4 = load i32, ptr %zzz, align 4
  call void @bar(i32 noundef %4)
  ret ptr %retval.0.i
}

define dso_local ptr @test2(ptr noundef readonly captures(none) %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test2(
; UNREACHABLE-SAME: ptr noundef readonly captures(none) [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; UNREACHABLE-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; UNREACHABLE-NEXT:    br i1 [[CMP]], label %[[EXIT]], label %[[RETURN:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ null, %[[IF_END_I]] ], [ null, %[[ENTRY]] ]
; UNREACHABLE-NEXT:    [[TMP3:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    call void @foo(i32 noundef [[TMP3]])
; UNREACHABLE-NEXT:    [[ZZZ:%.*]] = getelementptr inbounds nuw i8, ptr [[RETVAL_0_I]], i64 4
; UNREACHABLE-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ZZZ]], align 4
; UNREACHABLE-NEXT:    call void @bar(i32 noundef [[TMP4]])
; UNREACHABLE-NEXT:    br label %[[RETURN]]
; UNREACHABLE:       [[RETURN]]:
; UNREACHABLE-NEXT:    ret ptr null
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test2(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly captures(none) [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; TRAP-UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; TRAP-UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; TRAP-UNREACHABLE-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP]], label %[[EXIT]], label %[[RETURN:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ null, %[[IF_END_I]] ], [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP3:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @foo(i32 noundef [[TMP3]])
; TRAP-UNREACHABLE-NEXT:    [[ZZZ:%.*]] = getelementptr inbounds nuw i8, ptr [[RETVAL_0_I]], i64 4
; TRAP-UNREACHABLE-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ZZZ]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @bar(i32 noundef [[TMP4]])
; TRAP-UNREACHABLE-NEXT:    br label %[[RETURN]]
; TRAP-UNREACHABLE:       [[RETURN]]:
; TRAP-UNREACHABLE-NEXT:    ret ptr null
;
entry:
  %next_comp.i = getelementptr inbounds nuw i8, ptr %di, i64 8
  %0 = load i32, ptr %next_comp.i, align 8
  %num_comps.i = getelementptr inbounds nuw i8, ptr %di, i64 12
  %1 = load i32, ptr %num_comps.i, align 4
  %cmp.not.i = icmp slt i32 %0, %1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  %idxprom.i = sext i32 %0 to i64
  %arrayidx.i = getelementptr inbounds %struct.demangle_component, ptr %2, i64 %idxprom.i
  %cmp = icmp slt i32 %0, %1
  br i1 %cmp, label %exit, label %return

exit:
  %retval.0.i = phi ptr [ null, %if.end.i ], [ null, %entry ]
  %3 = load i32, ptr %retval.0.i, align 4
  call void @foo(i32 noundef %3)
  %zzz = getelementptr inbounds nuw i8, ptr %retval.0.i, i64 4
  %4 = load i32, ptr %zzz, align 4
  call void @bar(i32 noundef %4)
  br label %return

return:
  ret ptr null
}

define dso_local ptr @test3(i32 %choice, ptr noundef %di, ptr noundef %si) {
; UNREACHABLE-LABEL: define dso_local ptr @test3(
; UNREACHABLE-SAME: i32 [[CHOICE:%.*]], ptr noundef [[DI:%.*]], ptr noundef [[SI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; UNREACHABLE-NEXT:    switch i32 [[CHOICE]], label %[[SW_EPILOG_UB_PATH:.*]] [
; UNREACHABLE-NEXT:      i32 42, label %[[SW_BB:.*]]
; UNREACHABLE-NEXT:      i32 3, label %[[SW_BB1:.*]]
; UNREACHABLE-NEXT:    ]
; UNREACHABLE:       [[SW_BB]]:
; UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; UNREACHABLE-NEXT:    br label %[[SW_EPILOG:.*]]
; UNREACHABLE:       [[SW_BB1]]:
; UNREACHABLE-NEXT:    [[SI_VAL:%.*]] = load ptr, ptr [[SI]], align 8
; UNREACHABLE-NEXT:    [[IDXPROM_I_1:%.*]] = sext i32 [[TMP0]] to i64
; UNREACHABLE-NEXT:    [[ARRAYIDX_I_1:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT]], ptr [[SI_VAL]], i64 [[IDXPROM_I_1]]
; UNREACHABLE-NEXT:    br label %[[SW_EPILOG]]
; UNREACHABLE:       [[SW_EPILOG]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[ARRAYIDX_I]], %[[SW_BB]] ], [ [[ARRAYIDX_I_1]], %[[SW_BB1]] ]
; UNREACHABLE-NEXT:    [[TMP3:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    call void @foo(i32 noundef [[TMP3]])
; UNREACHABLE-NEXT:    [[ZZZ:%.*]] = getelementptr inbounds nuw i8, ptr [[RETVAL_0_I]], i64 4
; UNREACHABLE-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ZZZ]], align 4
; UNREACHABLE-NEXT:    call void @bar(i32 noundef [[TMP4]])
; UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[SW_EPILOG_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test3(
; TRAP-UNREACHABLE-SAME: i32 [[CHOICE:%.*]], ptr noundef [[DI:%.*]], ptr noundef [[SI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; TRAP-UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; TRAP-UNREACHABLE-NEXT:    switch i32 [[CHOICE]], label %[[SW_EPILOG_UB_PATH:.*]] [
; TRAP-UNREACHABLE-NEXT:      i32 42, label %[[SW_BB:.*]]
; TRAP-UNREACHABLE-NEXT:      i32 3, label %[[SW_BB1:.*]]
; TRAP-UNREACHABLE-NEXT:    ]
; TRAP-UNREACHABLE:       [[SW_BB]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; TRAP-UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; TRAP-UNREACHABLE-NEXT:    br label %[[SW_EPILOG:.*]]
; TRAP-UNREACHABLE:       [[SW_BB1]]:
; TRAP-UNREACHABLE-NEXT:    [[SI_VAL:%.*]] = load ptr, ptr [[SI]], align 8
; TRAP-UNREACHABLE-NEXT:    [[IDXPROM_I_1:%.*]] = sext i32 [[TMP0]] to i64
; TRAP-UNREACHABLE-NEXT:    [[ARRAYIDX_I_1:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT]], ptr [[SI_VAL]], i64 [[IDXPROM_I_1]]
; TRAP-UNREACHABLE-NEXT:    br label %[[SW_EPILOG]]
; TRAP-UNREACHABLE:       [[SW_EPILOG]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[ARRAYIDX_I]], %[[SW_BB]] ], [ [[ARRAYIDX_I_1]], %[[SW_BB1]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP3:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @foo(i32 noundef [[TMP3]])
; TRAP-UNREACHABLE-NEXT:    [[ZZZ:%.*]] = getelementptr inbounds nuw i8, ptr [[RETVAL_0_I]], i64 4
; TRAP-UNREACHABLE-NEXT:    [[TMP4:%.*]] = load i32, ptr [[ZZZ]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @bar(i32 noundef [[TMP4]])
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[SW_EPILOG_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP5:%.*]] = load volatile i32, ptr [[RETVAL_0_I_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %next_comp.i = getelementptr inbounds nuw i8, ptr %di, i64 8
  %0 = load i32, ptr %next_comp.i, align 8
  %num_comps.i = getelementptr inbounds nuw i8, ptr %di, i64 12
  %1 = load i32, ptr %num_comps.i, align 4
  %cmp.not.i = icmp slt i32 %0, %1
  switch i32 %choice, label %sw.epilog [
  i32 42, label %sw.bb
  i32 3, label %sw.bb1
  ]

sw.bb:
  %2 = load ptr, ptr %di, align 8
  %idxprom.i = sext i32 %0 to i64
  %arrayidx.i = getelementptr inbounds %struct.demangle_component, ptr %2, i64 %idxprom.i
  br label %sw.epilog

sw.bb1:
  %si.val = load ptr, ptr %si, align 8
  %idxprom.i.1 = sext i32 %0 to i64
  %arrayidx.i.1 = getelementptr inbounds %struct.demangle_component, ptr %si.val, i64 %idxprom.i.1
  br label %sw.epilog

sw.epilog:
  %retval.0.i = phi ptr [ %arrayidx.i, %sw.bb ], [ %arrayidx.i.1, %sw.bb1], [ null, %entry ]
  %3 = load i32, ptr %retval.0.i, align 4
  call void @foo(i32 noundef %3)
  %zzz = getelementptr inbounds nuw i8, ptr %retval.0.i, i64 4
  %4 = load i32, ptr %zzz, align 4
  call void @bar(i32 noundef %4)
  br label %exit

exit:
  ret ptr %retval.0.i
}

define dso_local ptr @test4(ptr noundef readonly captures(none) %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test4(
; UNREACHABLE-SAME: ptr noundef readonly captures(none) [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[D_MAKE_EMPTY_EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; UNREACHABLE-NEXT:    br label %[[D_MAKE_EMPTY_EXIT:.*]]
; UNREACHABLE:       [[D_MAKE_EMPTY_EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[ARRAYIDX_I]], %[[IF_END_I]] ]
; UNREACHABLE-NEXT:    store i32 42, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[D_MAKE_EMPTY_EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test4(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly captures(none) [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[NEXT_COMP_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 8
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load i32, ptr [[NEXT_COMP_I]], align 8
; TRAP-UNREACHABLE-NEXT:    [[NUM_COMPS_I:%.*]] = getelementptr inbounds nuw i8, ptr [[DI]], i64 12
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[NUM_COMPS_I]], align 4
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 [[TMP0]], [[TMP1]]
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[D_MAKE_EMPTY_EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP2:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    [[IDXPROM_I:%.*]] = sext i32 [[TMP0]] to i64
; TRAP-UNREACHABLE-NEXT:    [[ARRAYIDX_I:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[TMP2]], i64 [[IDXPROM_I]]
; TRAP-UNREACHABLE-NEXT:    br label %[[D_MAKE_EMPTY_EXIT:.*]]
; TRAP-UNREACHABLE:       [[D_MAKE_EMPTY_EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[ARRAYIDX_I]], %[[IF_END_I]] ]
; TRAP-UNREACHABLE-NEXT:    store i32 42, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[D_MAKE_EMPTY_EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    store volatile i32 42, ptr [[RETVAL_0_I_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %next_comp.i = getelementptr inbounds nuw i8, ptr %di, i64 8
  %0 = load i32, ptr %next_comp.i, align 8
  %num_comps.i = getelementptr inbounds nuw i8, ptr %di, i64 12
  %1 = load i32, ptr %num_comps.i, align 4
  %cmp.not.i = icmp slt i32 %0, %1
  br i1 %cmp.not.i, label %if.end.i, label %d_make_empty.exit

if.end.i:                                         ; preds = %entry
  %2 = load ptr, ptr %di, align 8
  %idxprom.i = sext i32 %0 to i64
  %arrayidx.i = getelementptr inbounds %struct.demangle_component, ptr %2, i64 %idxprom.i
  br label %d_make_empty.exit

d_make_empty.exit:                                ; preds = %entry, %if.end.i
  %retval.0.i = phi ptr [ %arrayidx.i, %if.end.i ], [ null, %entry ]
  store i32 42, ptr %retval.0.i, align 4
  ret ptr %retval.0.i
}

define i32 @test5() local_unnamed_addr {
; UNREACHABLE-LABEL: define i32 @test5() local_unnamed_addr {
; UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr null, align 8
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr inttoptr (i64 128 to ptr), align 8
; UNREACHABLE-NEXT:    switch i32 [[TMP1]], label %[[SW_DEFAULT:.*]] [
; UNREACHABLE-NEXT:      i32 1, label %[[SW_EXIT:.*]]
; UNREACHABLE-NEXT:      i32 7, label %[[SW_EXIT]]
; UNREACHABLE-NEXT:      i32 8, label %[[SW_EXIT]]
; UNREACHABLE-NEXT:      i32 0, label %[[SW_EXIT]]
; UNREACHABLE-NEXT:    ]
; UNREACHABLE:       [[SW_DEFAULT]]:
; UNREACHABLE-NEXT:    br label %[[SW_EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[SW_EXIT]]:
; UNREACHABLE-NEXT:    [[COMMON_RET1_OP_I_I:%.*]] = phi ptr [ [[TMP0]], %[[ENTRY]] ], [ [[TMP0]], %[[ENTRY]] ], [ [[TMP0]], %[[ENTRY]] ], [ [[TMP0]], %[[ENTRY]] ]
; UNREACHABLE-NEXT:    [[DP_I:%.*]] = getelementptr i8, ptr [[COMMON_RET1_OP_I_I]], i64 480
; UNREACHABLE-NEXT:    store i64 0, ptr [[DP_I]], align 8
; UNREACHABLE-NEXT:    ret i32 0
; UNREACHABLE:       [[SW_EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define i32 @test5() local_unnamed_addr {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr null, align 8
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr inttoptr (i64 128 to ptr), align 8
; TRAP-UNREACHABLE-NEXT:    switch i32 [[TMP1]], label %[[SW_DEFAULT:.*]] [
; TRAP-UNREACHABLE-NEXT:      i32 1, label %[[SW_EXIT:.*]]
; TRAP-UNREACHABLE-NEXT:      i32 7, label %[[SW_EXIT]]
; TRAP-UNREACHABLE-NEXT:      i32 8, label %[[SW_EXIT]]
; TRAP-UNREACHABLE-NEXT:      i32 0, label %[[SW_EXIT]]
; TRAP-UNREACHABLE-NEXT:    ]
; TRAP-UNREACHABLE:       [[SW_DEFAULT]]:
; TRAP-UNREACHABLE-NEXT:    br label %[[SW_EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[SW_EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[COMMON_RET1_OP_I_I:%.*]] = phi ptr [ [[TMP0]], %[[ENTRY]] ], [ [[TMP0]], %[[ENTRY]] ], [ [[TMP0]], %[[ENTRY]] ], [ [[TMP0]], %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    [[DP_I:%.*]] = getelementptr i8, ptr [[COMMON_RET1_OP_I_I]], i64 480
; TRAP-UNREACHABLE-NEXT:    store i64 0, ptr [[DP_I]], align 8
; TRAP-UNREACHABLE-NEXT:    ret i32 0
; TRAP-UNREACHABLE:       [[SW_EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[COMMON_RET1_OP_I_I_UB_PATH:%.*]] = phi ptr [ null, %[[SW_DEFAULT]] ]
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %0 = load ptr, ptr null, align 8
  %1 = load i32, ptr inttoptr (i64 128 to ptr), align 8
  switch i32 %1, label %sw.default [
  i32 1, label %sw.exit
  i32 7, label %sw.exit
  i32 8, label %sw.exit
  i32 0, label %sw.exit
  ]

sw.default:                                      ; preds = %entry
  br label %sw.exit

sw.exit:                             ; preds = %if.else.i.i, %entry, %entry, %entry, %entry
  %common.ret1.op.i.i = phi ptr [ null, %sw.default ], [ %0, %entry ], [ %0, %entry ], [ %0, %entry ], [ %0, %entry ]
  %dp.i = getelementptr i8, ptr %common.ret1.op.i.i, i64 480
  store i64 0, ptr %dp.i, align 8
  ret i32 0
}

define dso_local ptr @test6_multiple_ub(ptr noundef readonly %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test6_multiple_ub(
; UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    store i32 [[TMP1]], ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test6_multiple_ub(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    store i32 [[TMP1]], ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP2:%.*]] = load volatile i32, ptr [[RETVAL_0_I_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %cmp.not.i = icmp slt i32 0, 1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  br label %exit

exit:
  %retval.0.i = phi ptr [ %2, %if.end.i ], [ null, %entry ]
  %3 = load i32, ptr %retval.0.i, align 4
  store i32 %3, ptr %retval.0.i, align 4
  ret ptr %retval.0.i
}

define dso_local ptr @test7_gep_chain(ptr noundef readonly %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test7_gep_chain(
; UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; UNREACHABLE-NEXT:    [[GEP1:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[RETVAL_0_I]], i64 0, i32 1
; UNREACHABLE-NEXT:    [[GEP2:%.*]] = getelementptr inbounds i32, ptr [[GEP1]], i64 1
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[GEP2]], align 4
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test7_gep_chain(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; TRAP-UNREACHABLE-NEXT:    [[GEP1:%.*]] = getelementptr inbounds [[STRUCT_DEMANGLE_COMPONENT:%.*]], ptr [[RETVAL_0_I]], i64 0, i32 1
; TRAP-UNREACHABLE-NEXT:    [[GEP2:%.*]] = getelementptr inbounds i32, ptr [[GEP1]], i64 1
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load i32, ptr [[GEP2]], align 4
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %cmp.not.i = icmp slt i32 0, 1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  br label %exit

exit:
  %retval.0.i = phi ptr [ %2, %if.end.i ], [ null, %entry ]
  %gep1 = getelementptr inbounds %struct.demangle_component, ptr %retval.0.i, i64 0, i32 1
  %gep2 = getelementptr inbounds i32, ptr %gep1, i64 1
  %3 = load i32, ptr %gep2, align 4
  ret ptr %retval.0.i
}

define dso_local ptr @test8_no_op(ptr noundef readonly %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test8_no_op(
; UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    br label %[[EXIT]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ], [ null, %[[ENTRY]] ]
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test8_no_op(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ], [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
;
entry:
  %cmp.not.i = icmp slt i32 0, 1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  br label %exit

exit:
  %retval.0.i = phi ptr [ %2, %if.end.i ], [ null, %entry ]
  ret ptr %retval.0.i
}

define dso_local ptr @test9_volatile(ptr noundef readonly %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test9_volatile(
; UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; UNREACHABLE-NEXT:    [[TMP1:%.*]] = load volatile i32, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test9_volatile(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP1:%.*]] = load volatile i32, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    [[TMP2:%.*]] = load volatile i32, ptr [[RETVAL_0_I_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %cmp.not.i = icmp slt i32 0, 1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  br label %exit

exit:
  %retval.0.i = phi ptr [ %2, %if.end.i ], [ null, %entry ]
  %3 = load volatile i32, ptr %retval.0.i, align 4
  ret ptr %retval.0.i
}

define dso_local ptr @test10_store(ptr noundef readonly %di) {
; UNREACHABLE-LABEL: define dso_local ptr @test10_store(
; UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; UNREACHABLE:       [[IF_END_I]]:
; UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; UNREACHABLE-NEXT:    store i32 0, ptr [[RETVAL_0_I]], align 4
; UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; UNREACHABLE:       [[EXIT_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define dso_local ptr @test10_store(
; TRAP-UNREACHABLE-SAME: ptr noundef readonly [[DI:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*]]:
; TRAP-UNREACHABLE-NEXT:    [[CMP_NOT_I:%.*]] = icmp slt i32 0, 1
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP_NOT_I]], label %[[IF_END_I:.*]], label %[[EXIT_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[IF_END_I]]:
; TRAP-UNREACHABLE-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[DI]], align 8
; TRAP-UNREACHABLE-NEXT:    br label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I:%.*]] = phi ptr [ [[TMP0]], %[[IF_END_I]] ]
; TRAP-UNREACHABLE-NEXT:    store i32 0, ptr [[RETVAL_0_I]], align 4
; TRAP-UNREACHABLE-NEXT:    ret ptr [[RETVAL_0_I]]
; TRAP-UNREACHABLE:       [[EXIT_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[RETVAL_0_I_UB_PATH:%.*]] = phi ptr [ null, %[[ENTRY]] ]
; TRAP-UNREACHABLE-NEXT:    store volatile i32 0, ptr [[RETVAL_0_I_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  %cmp.not.i = icmp slt i32 0, 1
  br i1 %cmp.not.i, label %if.end.i, label %exit

if.end.i:
  %2 = load ptr, ptr %di, align 8
  br label %exit

exit:
  %retval.0.i = phi ptr [ %2, %if.end.i ], [ null, %entry ]
  store i32 0, ptr %retval.0.i, align 4
  ret ptr %retval.0.i
}

define void @test11_loop_ub(ptr %p, i1 %cond) {
; UNREACHABLE-LABEL: define void @test11_loop_ub(
; UNREACHABLE-SAME: ptr [[P:%.*]], i1 [[COND:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    br i1 [[COND]], label %[[SETUP_UB:.*]], label %[[SETUP_OK:.*]]
; UNREACHABLE:       [[SETUP_UB]]:
; UNREACHABLE-NEXT:    br label %[[LOOP_HEADER:.*]]
; UNREACHABLE:       [[SETUP_OK]]:
; UNREACHABLE-NEXT:    br label %[[LOOP_HEADER]]
; UNREACHABLE:       [[LOOP_HEADER]]:
; UNREACHABLE-NEXT:    [[I:%.*]] = phi i32 [ 0, %[[SETUP_UB]] ], [ 0, %[[SETUP_OK]] ], [ [[I_NEXT:%.*]], %[[LOOP_LATCH:.*]] ]
; UNREACHABLE-NEXT:    [[PHI_PTR:%.*]] = phi ptr [ null, %[[SETUP_UB]] ], [ [[P]], %[[SETUP_OK]] ], [ [[PHI_PTR]], %[[LOOP_LATCH]] ]
; UNREACHABLE-NEXT:    [[CMP:%.*]] = icmp slt i32 [[I]], 10
; UNREACHABLE-NEXT:    br i1 [[CMP]], label %[[LOOP_BODY:.*]], label %[[EXIT:.*]]
; UNREACHABLE:       [[LOOP_BODY]]:
; UNREACHABLE-NEXT:    [[VAL:%.*]] = load i32, ptr [[PHI_PTR]], align 4
; UNREACHABLE-NEXT:    call void @foo(i32 [[VAL]])
; UNREACHABLE-NEXT:    [[I_NEXT]] = add i32 [[I]], 1
; UNREACHABLE-NEXT:    br label %[[LOOP_LATCH]]
; UNREACHABLE:       [[LOOP_LATCH]]:
; UNREACHABLE-NEXT:    br label %[[LOOP_HEADER]]
; UNREACHABLE:       [[EXIT]]:
; UNREACHABLE-NEXT:    ret void
;
; TRAP-UNREACHABLE-LABEL: define void @test11_loop_ub(
; TRAP-UNREACHABLE-SAME: ptr [[P:%.*]], i1 [[COND:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; TRAP-UNREACHABLE-NEXT:    br i1 [[COND]], label %[[SETUP_UB:.*]], label %[[SETUP_OK:.*]]
; TRAP-UNREACHABLE:       [[SETUP_UB]]:
; TRAP-UNREACHABLE-NEXT:    br label %[[LOOP_HEADER:.*]]
; TRAP-UNREACHABLE:       [[SETUP_OK]]:
; TRAP-UNREACHABLE-NEXT:    br label %[[LOOP_HEADER]]
; TRAP-UNREACHABLE:       [[LOOP_HEADER]]:
; TRAP-UNREACHABLE-NEXT:    [[I:%.*]] = phi i32 [ 0, %[[SETUP_UB]] ], [ 0, %[[SETUP_OK]] ], [ [[I_NEXT:%.*]], %[[LOOP_LATCH:.*]] ]
; TRAP-UNREACHABLE-NEXT:    [[PHI_PTR:%.*]] = phi ptr [ null, %[[SETUP_UB]] ], [ [[P]], %[[SETUP_OK]] ], [ [[PHI_PTR]], %[[LOOP_LATCH]] ]
; TRAP-UNREACHABLE-NEXT:    [[CMP:%.*]] = icmp slt i32 [[I]], 10
; TRAP-UNREACHABLE-NEXT:    br i1 [[CMP]], label %[[LOOP_BODY:.*]], label %[[EXIT:.*]]
; TRAP-UNREACHABLE:       [[LOOP_BODY]]:
; TRAP-UNREACHABLE-NEXT:    [[VAL:%.*]] = load i32, ptr [[PHI_PTR]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @foo(i32 [[VAL]])
; TRAP-UNREACHABLE-NEXT:    [[I_NEXT]] = add i32 [[I]], 1
; TRAP-UNREACHABLE-NEXT:    br label %[[LOOP_LATCH]]
; TRAP-UNREACHABLE:       [[LOOP_LATCH]]:
; TRAP-UNREACHABLE-NEXT:    br label %[[LOOP_HEADER]]
; TRAP-UNREACHABLE:       [[EXIT]]:
; TRAP-UNREACHABLE-NEXT:    ret void
;
entry:
  br i1 %cond, label %setup.ub, label %setup.ok

setup.ub:
  br label %loop.header

setup.ok:
  br label %loop.header

loop.header:
  %i = phi i32 [ 0, %setup.ub ], [ 0, %setup.ok ], [ %i.next, %loop.latch ]
  %phi.ptr = phi ptr [ null, %setup.ub ], [ %p, %setup.ok ], [ %phi.ptr, %loop.latch ]
  %cmp = icmp slt i32 %i, 10
  br i1 %cmp, label %loop.body, label %exit

loop.body:
  %val = load i32, ptr %phi.ptr, align 4
  call void @foo(i32 %val)
  %i.next = add i32 %i, 1
  br label %loop.latch

loop.latch:
  br label %loop.header

exit:
  ret void
}

define void @test12_switch_terminator(ptr %p, i1 %cond, i32 %val) {
; UNREACHABLE-LABEL: define void @test12_switch_terminator(
; UNREACHABLE-SAME: ptr [[P:%.*]], i1 [[COND:%.*]], i32 [[VAL:%.*]]) {
; UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; UNREACHABLE-NEXT:    br i1 [[COND]], label %[[UB:.*]], label %[[OK:.*]]
; UNREACHABLE:       [[UB]]:
; UNREACHABLE-NEXT:    br label %[[TEST_UB_PATH:.*]]
; UNREACHABLE:       [[OK]]:
; UNREACHABLE-NEXT:    br label %[[TEST:.*]]
; UNREACHABLE:       [[TEST]]:
; UNREACHABLE-NEXT:    [[PHI_PTR:%.*]] = phi ptr [ [[P]], %[[OK]] ]
; UNREACHABLE-NEXT:    [[V:%.*]] = load i32, ptr [[PHI_PTR]], align 4
; UNREACHABLE-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; UNREACHABLE-NEXT:      i32 0, label %[[CASE0:.*]]
; UNREACHABLE-NEXT:      i32 1, label %[[CASE1:.*]]
; UNREACHABLE-NEXT:    ]
; UNREACHABLE:       [[CASE0]]:
; UNREACHABLE-NEXT:    ret void
; UNREACHABLE:       [[CASE1]]:
; UNREACHABLE-NEXT:    ret void
; UNREACHABLE:       [[DEFAULT]]:
; UNREACHABLE-NEXT:    ret void
; UNREACHABLE:       [[TEST_UB_PATH]]:
; UNREACHABLE-NEXT:    unreachable
;
; TRAP-UNREACHABLE-LABEL: define void @test12_switch_terminator(
; TRAP-UNREACHABLE-SAME: ptr [[P:%.*]], i1 [[COND:%.*]], i32 [[VAL:%.*]]) {
; TRAP-UNREACHABLE-NEXT:  [[ENTRY:.*:]]
; TRAP-UNREACHABLE-NEXT:    br i1 [[COND]], label %[[UB:.*]], label %[[OK:.*]]
; TRAP-UNREACHABLE:       [[UB]]:
; TRAP-UNREACHABLE-NEXT:    br label %[[TEST_UB_PATH:.*]]
; TRAP-UNREACHABLE:       [[OK]]:
; TRAP-UNREACHABLE-NEXT:    br label %[[TEST:.*]]
; TRAP-UNREACHABLE:       [[TEST]]:
; TRAP-UNREACHABLE-NEXT:    [[PHI_PTR:%.*]] = phi ptr [ [[P]], %[[OK]] ]
; TRAP-UNREACHABLE-NEXT:    [[V:%.*]] = load i32, ptr [[PHI_PTR]], align 4
; TRAP-UNREACHABLE-NEXT:    switch i32 [[V]], label %[[DEFAULT:.*]] [
; TRAP-UNREACHABLE-NEXT:      i32 0, label %[[CASE0:.*]]
; TRAP-UNREACHABLE-NEXT:      i32 1, label %[[CASE1:.*]]
; TRAP-UNREACHABLE-NEXT:    ]
; TRAP-UNREACHABLE:       [[CASE0]]:
; TRAP-UNREACHABLE-NEXT:    ret void
; TRAP-UNREACHABLE:       [[CASE1]]:
; TRAP-UNREACHABLE-NEXT:    ret void
; TRAP-UNREACHABLE:       [[DEFAULT]]:
; TRAP-UNREACHABLE-NEXT:    ret void
; TRAP-UNREACHABLE:       [[TEST_UB_PATH]]:
; TRAP-UNREACHABLE-NEXT:    [[PHI_PTR_UB_PATH:%.*]] = phi ptr [ null, %[[UB]] ]
; TRAP-UNREACHABLE-NEXT:    [[V_UB_PATH:%.*]] = load volatile i32, ptr [[PHI_PTR_UB_PATH]], align 4
; TRAP-UNREACHABLE-NEXT:    call void @llvm.trap()
; TRAP-UNREACHABLE-NEXT:    unreachable
;
entry:
  br i1 %cond, label %ub, label %ok

ub:
  br label %test

ok:
  br label %test

test:
  %phi.ptr = phi ptr [ null, %ub ], [ %p, %ok ]
  %v = load i32, ptr %phi.ptr, align 4
  switch i32 %v, label %default [
  i32 0, label %case0
  i32 1, label %case1
  ]

case0:
  ret void

case1:
  ret void

default:
  ret void
}

declare void @foo(i32 noundef)

declare void @bar(i32 noundef)
