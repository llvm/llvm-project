; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --include-generated-funcs
; RUN: opt -S -passes=verify,iroutliner -ir-outlining-no-cost < %s | FileCheck %s

declare void @foo();

define void @atomicrmw_base(ptr %p) {
entry:
  %1 = atomicrmw add ptr %p, i32 1 acquire, align 8
  call void @foo()
  ret void
}

define void @atomicrmw_copy(ptr %p) {
entry:
  %1 = atomicrmw add ptr %p, i32 1 acquire, align 8
  call void @foo()
  ret void
}

define void @atomicrmw_wrong_type(ptr %p) {
entry:
  %1 = atomicrmw add ptr %p, i64 1 acquire, align 8
  call void @foo()
  ret void
}

define void @atomicrmw_wrong_align(ptr %p) {
entry:
  %1 = atomicrmw add ptr %p, i32 1 acquire, align 4
  call void @foo()
  ret void
}

define void @atomicrmw_wrong_volatile(ptr %p) {
entry:
  %1 = atomicrmw volatile add ptr %p, i32 1 acquire, align 8
  call void @foo()
  ret void
}

define void @cmpxchg_base(ptr %p) {
entry:
  %1 = cmpxchg ptr %p, i32 0, i32 1 monotonic monotonic, align 8
  call void @foo()
  ret void
}

define void @cmpxchg_copy(ptr %p) {
entry:
  %1 = cmpxchg ptr %p, i32 0, i32 1 monotonic monotonic, align 8
  call void @foo()
  ret void
}

define void @cmpxchg_wrong_type(ptr %p) {
entry:
  %1 = cmpxchg ptr %p, i64 0, i64 1 monotonic monotonic, align 8
  call void @foo()
  ret void
}

define void @cmpxchg_wrong_align(ptr %p) {
entry:
  %1 = cmpxchg ptr %p, i32 0, i32 1 monotonic monotonic, align 4
  call void @foo()
  ret void
}

define void @cmpxchg_wrong_volatile(ptr %p) {
entry:
  %1 = cmpxchg volatile ptr %p, i32 0, i32 1 monotonic monotonic, align 8
  call void @foo()
  ret void
}


; CHECK-LABEL: @atomicrmw_base(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @outlined_ir_func_1(ptr [[P:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @atomicrmw_copy(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @outlined_ir_func_1(ptr [[P:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @atomicrmw_wrong_type(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = atomicrmw add ptr [[P:%.*]], i64 1 acquire, align 8
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @atomicrmw_wrong_align(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = atomicrmw add ptr [[P:%.*]], i32 1 acquire, align 4
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @atomicrmw_wrong_volatile(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = atomicrmw volatile add ptr [[P:%.*]], i32 1 acquire, align 8
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @cmpxchg_base(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @outlined_ir_func_0(ptr [[P:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @cmpxchg_copy(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    call void @outlined_ir_func_0(ptr [[P:%.*]])
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @cmpxchg_wrong_type(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = cmpxchg ptr [[P:%.*]], i64 0, i64 1 monotonic monotonic, align 8
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @cmpxchg_wrong_align(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = cmpxchg ptr [[P:%.*]], i32 0, i32 1 monotonic monotonic, align 4
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @cmpxchg_wrong_volatile(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = cmpxchg volatile ptr [[P:%.*]], i32 0, i32 1 monotonic monotonic, align 8
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @outlined_ir_func_0(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[ENTRY_TO_OUTLINE:%.*]]
; CHECK:       entry_to_outline:
; CHECK-NEXT:    [[TMP1:%.*]] = cmpxchg ptr [[TMP0:%.*]], i32 0, i32 1 monotonic monotonic, align 8
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    br label [[ENTRY_AFTER_OUTLINE_EXITSTUB:%.*]]
; CHECK:       entry_after_outline.exitStub:
; CHECK-NEXT:    ret void
;
;
; CHECK-LABEL: @outlined_ir_func_1(
; CHECK-NEXT:  newFuncRoot:
; CHECK-NEXT:    br label [[ENTRY_TO_OUTLINE:%.*]]
; CHECK:       entry_to_outline:
; CHECK-NEXT:    [[TMP1:%.*]] = atomicrmw add ptr [[TMP0:%.*]], i32 1 acquire, align 8
; CHECK-NEXT:    call void @foo()
; CHECK-NEXT:    br label [[ENTRY_AFTER_OUTLINE_EXITSTUB:%.*]]
; CHECK:       entry_after_outline.exitStub:
; CHECK-NEXT:    ret void
;
