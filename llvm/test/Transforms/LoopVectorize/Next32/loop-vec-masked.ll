; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mattr=+avx -mattr=-next32-vectorization -passes=loop-vectorize,instcombine,simplifycfg -S 2>&1 | FileCheck %s --check-prefix=CHECK-NO-MASKED-VEC
; RUN: opt < %s -mattr=+avx -mattr=+next32-vectorization -x86-prefer-predicate-over-epilogue=true -passes=loop-vectorize,instcombine,simplifycfg -S 2>&1 | FileCheck %s --check-prefix=CHECK-MASKED-VEC-NO-MASK-INTRINSIC
; RUN: opt < %s -mattr=+avx -mattr=+next32-vectorization -x86-prefer-predicate-over-epilogue=true -x86-enable-emit-get-active-lane-mask=true -passes=loop-vectorize,instcombine,simplifycfg -S 2>&1 | FileCheck %s --check-prefix=CHECK-FULL-MASKED-VEC

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) uwtable
define dso_local void @masked(ptr nocapture noundef %0, i32 noundef %1) {
; CHECK-NO-MASKED-VEC-LABEL: @masked(
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP3:%.*]] = icmp sgt i32 [[TMP1:%.*]], 0
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP3]], label [[TMP4:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-NO-MASKED-VEC:       4:
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP5:%.*]] = zext nneg i32 [[TMP1]] to i64
; CHECK-NO-MASKED-VEC-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[TMP1]], 32
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-NO-MASKED-VEC:       vector.ph:
; CHECK-NO-MASKED-VEC-NEXT:    [[N_VEC:%.*]] = and i64 [[TMP5]], 2147483616
; CHECK-NO-MASKED-VEC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-NO-MASKED-VEC:       vector.body:
; CHECK-NO-MASKED-VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[TMP0:%.*]], i64 [[INDEX]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i8, ptr [[TMP6]], i64 32
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i8, ptr [[TMP6]], i64 64
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr [[TMP6]], i64 96
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_LOAD:%.*]] = load <8 x i32>, ptr [[TMP6]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_LOAD1:%.*]] = load <8 x i32>, ptr [[TMP7]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_LOAD2:%.*]] = load <8 x i32>, ptr [[TMP8]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_LOAD3:%.*]] = load <8 x i32>, ptr [[TMP9]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP10:%.*]] = add nsw <8 x i32> [[WIDE_LOAD]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP11:%.*]] = add nsw <8 x i32> [[WIDE_LOAD1]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP12:%.*]] = add nsw <8 x i32> [[WIDE_LOAD2]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP13:%.*]] = add nsw <8 x i32> [[WIDE_LOAD3]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-NO-MASKED-VEC-NEXT:    store <8 x i32> [[TMP10]], ptr [[TMP6]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    store <8 x i32> [[TMP11]], ptr [[TMP7]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    store <8 x i32> [[TMP12]], ptr [[TMP8]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    store <8 x i32> [[TMP13]], ptr [[TMP9]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[INDEX_NEXT]] = add nuw i64 [[INDEX]], 32
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-NO-MASKED-VEC:       middle.block:
; CHECK-NO-MASKED-VEC-NEXT:    [[CMP_N:%.*]] = icmp eq i64 [[N_VEC]], [[TMP5]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[CMP_N]], label [[DOTLOOPEXIT]], label [[SCALAR_PH]]
; CHECK-NO-MASKED-VEC:       scalar.ph:
; CHECK-NO-MASKED-VEC-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i64 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[TMP4]] ]
; CHECK-NO-MASKED-VEC-NEXT:    br label [[TMP15:%.*]]
; CHECK-NO-MASKED-VEC:       .loopexit:
; CHECK-NO-MASKED-VEC-NEXT:    ret void
; CHECK-NO-MASKED-VEC:       15:
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP16:%.*]] = phi i64 [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ], [ [[TMP20:%.*]], [[TMP15]] ]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i32, ptr [[TMP0]], i64 [[TMP16]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP18:%.*]] = load i32, ptr [[TMP17]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP19:%.*]] = add nsw i32 [[TMP18]], 1
; CHECK-NO-MASKED-VEC-NEXT:    store i32 [[TMP19]], ptr [[TMP17]], align 4
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP20]] = add nuw nsw i64 [[TMP16]], 1
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[TMP20]], [[TMP5]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP21]], label [[DOTLOOPEXIT]], label [[TMP15]], !llvm.loop [[LOOP3:![0-9]+]]
;
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-LABEL: @masked(
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TMP3:%.*]] = icmp sgt i32 [[TMP1:%.*]], 0
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    br i1 [[TMP3]], label [[VECTOR_PH:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC:       vector.ph:
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TMP4:%.*]] = zext nneg i32 [[TMP1]] to i64
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[N_RND_UP:%.*]] = add nuw nsw i64 [[TMP4]], 7
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[N_VEC:%.*]] = and i64 [[N_RND_UP]], 4294967288
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TRIP_COUNT_MINUS_1:%.*]] = add nsw i64 [[TMP4]], -1
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <8 x i64> poison, i64 [[TRIP_COUNT_MINUS_1]], i64 0
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <8 x i64> [[BROADCAST_SPLATINSERT]], <8 x i64> poison, <8 x i32> zeroinitializer
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC:       vector.body:
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <8 x i64> poison, i64 [[INDEX]], i64 0
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <8 x i64> [[BROADCAST_SPLATINSERT1]], <8 x i64> poison, <8 x i32> zeroinitializer
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[VEC_IV:%.*]] = or disjoint <8 x i64> [[BROADCAST_SPLAT2]], <i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7>
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TMP5:%.*]] = icmp ule <8 x i64> [[VEC_IV]], [[BROADCAST_SPLAT]]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TMP6:%.*]] = getelementptr inbounds i32, ptr [[TMP0:%.*]], i64 [[INDEX]]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr [[TMP6]], i32 4, <8 x i1> [[TMP5]], <8 x i32> poison)
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TMP7:%.*]] = add nsw <8 x i32> [[WIDE_MASKED_LOAD]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    call void @llvm.masked.store.v8i32.p0(<8 x i32> [[TMP7]], ptr [[TMP6]], i32 4, <8 x i1> [[TMP5]])
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    [[TMP8:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    br i1 [[TMP8]], label [[DOTLOOPEXIT]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC:       .loopexit:
; CHECK-MASKED-VEC-NO-MASK-INTRINSIC-NEXT:    ret void
;
; CHECK-FULL-MASKED-VEC-LABEL: @masked(
; CHECK-FULL-MASKED-VEC-NEXT:    [[TMP3:%.*]] = icmp sgt i32 [[TMP1:%.*]], 0
; CHECK-FULL-MASKED-VEC-NEXT:    br i1 [[TMP3]], label [[VECTOR_PH:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-FULL-MASKED-VEC:       vector.ph:
; CHECK-FULL-MASKED-VEC-NEXT:    [[TMP4:%.*]] = zext nneg i32 [[TMP1]] to i64
; CHECK-FULL-MASKED-VEC-NEXT:    [[N_RND_UP:%.*]] = add nuw nsw i64 [[TMP4]], 7
; CHECK-FULL-MASKED-VEC-NEXT:    [[N_VEC:%.*]] = and i64 [[N_RND_UP]], 4294967288
; CHECK-FULL-MASKED-VEC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-FULL-MASKED-VEC:       vector.body:
; CHECK-FULL-MASKED-VEC-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-FULL-MASKED-VEC-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = call <8 x i1> @llvm.get.active.lane.mask.v8i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-FULL-MASKED-VEC-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i32, ptr [[TMP0:%.*]], i64 [[INDEX]]
; CHECK-FULL-MASKED-VEC-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <8 x i32> @llvm.masked.load.v8i32.p0(ptr [[TMP5]], i32 4, <8 x i1> [[ACTIVE_LANE_MASK]], <8 x i32> poison)
; CHECK-FULL-MASKED-VEC-NEXT:    [[TMP6:%.*]] = add nsw <8 x i32> [[WIDE_MASKED_LOAD]], <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
; CHECK-FULL-MASKED-VEC-NEXT:    call void @llvm.masked.store.v8i32.p0(<8 x i32> [[TMP6]], ptr [[TMP5]], i32 4, <8 x i1> [[ACTIVE_LANE_MASK]])
; CHECK-FULL-MASKED-VEC-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; CHECK-FULL-MASKED-VEC-NEXT:    [[TMP7:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-FULL-MASKED-VEC-NEXT:    br i1 [[TMP7]], label [[DOTLOOPEXIT]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-FULL-MASKED-VEC:       .loopexit:
; CHECK-FULL-MASKED-VEC-NEXT:    ret void
;
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = zext i32 %1 to i64
  br label %7

6:                                                ; preds = %7, %2
  ret void

7:                                                ; preds = %4, %7
  %8 = phi i64 [ 0, %4 ], [ %12, %7 ]
  %9 = getelementptr inbounds i32, ptr %0, i64 %8
  %10 = load i32, ptr %9, align 4
  %11 = add nsw i32 %10, 1
  store i32 %11, ptr %9, align 4
  %12 = add nuw nsw i64 %8, 1
  %13 = icmp eq i64 %12, %5
  br i1 %13, label %6, label %7
}
