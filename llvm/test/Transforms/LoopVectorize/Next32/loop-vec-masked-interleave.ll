; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mattr=+avx512f -mattr=+next32-vectorization -x86-prefer-predicate-over-epilogue=true -x86-enable-emit-get-active-lane-mask=true -x86-enable-masked-interleaved-access-vectorization=true -passes=loop-vectorize,instcombine,simplifycfg -S 2>&1 | FileCheck %s

target triple = "x86_64-unknown-linux-gnu"

define dso_local void @maskedinterleave(i32 noundef %0, ptr noalias nocapture noundef readonly %1, ptr noalias nocapture noundef writeonly %2, i32 noundef %3) {
; CHECK-LABEL: @maskedinterleave(
; CHECK-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP0:%.*]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label [[VECTOR_PH:%.*]], label [[MIDDLE_BLOCK:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[TMP6:%.*]] = shl nsw i32 [[TMP3:%.*]], 1
; CHECK-NEXT:    [[TMP7:%.*]] = sext i32 [[TMP3]] to i64
; CHECK-NEXT:    [[TMP8:%.*]] = sext i32 [[TMP6]] to i64
; CHECK-NEXT:    [[TMP9:%.*]] = zext nneg i32 [[TMP0]] to i64
; CHECK-NEXT:    [[N_RND_UP:%.*]] = add nuw nsw i64 [[TMP9]], 7
; CHECK-NEXT:    [[N_VEC:%.*]] = and i64 [[N_RND_UP]], 4294967288
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = call <8 x i1> @llvm.get.active.lane.mask.v8i1.i64(i64 [[INDEX]], i64 [[TMP9]])
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, ptr [[TMP1:%.*]], i64 [[INDEX]]
; CHECK-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <8 x double> @llvm.masked.load.v8f64.p0(ptr [[TMP10]], i32 8, <8 x i1> [[ACTIVE_LANE_MASK]], <8 x double> poison)
; CHECK-NEXT:    [[TMP11:%.*]] = mul nuw nsw i64 [[INDEX]], 3
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr double, ptr [[TMP1]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr double, ptr [[TMP12]], i64 [[TMP7]]
; CHECK-NEXT:    [[WIDE_MASKED_LOAD1:%.*]] = call <8 x double> @llvm.masked.load.v8f64.p0(ptr [[TMP13]], i32 8, <8 x i1> [[ACTIVE_LANE_MASK]], <8 x double> poison)
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr double, ptr [[TMP1]], i64 [[INDEX]]
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr double, ptr [[TMP14]], i64 [[TMP8]]
; CHECK-NEXT:    [[WIDE_MASKED_LOAD2:%.*]] = call <8 x double> @llvm.masked.load.v8f64.p0(ptr [[TMP15]], i32 8, <8 x i1> [[ACTIVE_LANE_MASK]], <8 x double> poison)
; CHECK-NEXT:    [[TMP16:%.*]] = or disjoint i64 [[TMP11]], 2
; CHECK-NEXT:    [[TMP17:%.*]] = getelementptr inbounds double, ptr [[TMP2:%.*]], i64 [[TMP16]]
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i8, ptr [[TMP17]], i64 -16
; CHECK-NEXT:    [[TMP19:%.*]] = shufflevector <8 x double> [[WIDE_MASKED_LOAD]], <8 x double> [[WIDE_MASKED_LOAD1]], <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>
; CHECK-NEXT:    [[TMP20:%.*]] = shufflevector <8 x double> [[WIDE_MASKED_LOAD2]], <8 x double> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>
; CHECK-NEXT:    [[INTERLEAVED_VEC:%.*]] = shufflevector <16 x double> [[TMP19]], <16 x double> [[TMP20]], <24 x i32> <i32 0, i32 8, i32 16, i32 1, i32 9, i32 17, i32 2, i32 10, i32 18, i32 3, i32 11, i32 19, i32 4, i32 12, i32 20, i32 5, i32 13, i32 21, i32 6, i32 14, i32 22, i32 7, i32 15, i32 23>
; CHECK-NEXT:    [[INTERLEAVED_MASK:%.*]] = shufflevector <8 x i1> [[ACTIVE_LANE_MASK]], <8 x i1> poison, <24 x i32> <i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 5, i32 5, i32 5, i32 6, i32 6, i32 6, i32 7, i32 7, i32 7>
; CHECK-NEXT:    call void @llvm.masked.store.v24f64.p0(<24 x double> [[INTERLEAVED_VEC]], ptr [[TMP18]], i32 8, <24 x i1> [[INTERLEAVED_MASK]])
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], 8
; CHECK-NEXT:    [[TMP21:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NEXT:    br i1 [[TMP21]], label [[MIDDLE_BLOCK]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK:       middle.block:
; CHECK-NEXT:    ret void
;
  %5 = icmp sgt i32 %0, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %4
  %7 = shl nsw i32 %3, 1
  %8 = sext i32 %3 to i64
  %9 = sext i32 %7 to i64
  %10 = zext i32 %0 to i64
  br label %13

11:                                               ; preds = %13
  br label %12

12:                                               ; preds = %11, %4
  ret void

13:                                               ; preds = %6, %13
  %14 = phi i64 [ 0, %6 ], [ %29, %13 ]
  %15 = getelementptr inbounds double, ptr %1, i64 %14
  %16 = load double, ptr %15, align 8
  %17 = mul nuw nsw i64 %14, 3
  %18 = getelementptr inbounds double, ptr %2, i64 %17
  store double %16, ptr %18, align 8
  %19 = add nsw i64 %14, %8
  %20 = getelementptr inbounds double, ptr %1, i64 %19
  %21 = load double, ptr %20, align 8
  %22 = add nuw nsw i64 %17, 1
  %23 = getelementptr inbounds double, ptr %2, i64 %22
  store double %21, ptr %23, align 8
  %24 = add nsw i64 %14, %9
  %25 = getelementptr inbounds double, ptr %1, i64 %24
  %26 = load double, ptr %25, align 8
  %27 = add nuw nsw i64 %17, 2
  %28 = getelementptr inbounds double, ptr %2, i64 %27
  store double %26, ptr %28, align 8
  %29 = add nuw nsw i64 %14, 1
  %30 = icmp eq i64 %29, %10
  br i1 %30, label %11, label %13
}
