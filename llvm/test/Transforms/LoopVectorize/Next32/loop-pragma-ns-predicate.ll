; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -mattr=+avx -x86-prefer-predicate-over-epilogue=true -x86-enable-emit-get-active-lane-mask=true -passes=loop-vectorize,instcombine,simplifycfg -S 2>&1 | FileCheck %s --check-prefix=CHECK-NO-MASKED-VEC
; RUN: opt < %s -mattr=+avx -mattr=+next32-vectorization -x86-prefer-predicate-over-epilogue=true -x86-enable-emit-get-active-lane-mask=true -passes=loop-vectorize,instcombine,simplifycfg -S 2>&1 | FileCheck %s --check-prefix=CHECK-MASKED-VEC

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"


; void foo(double * restrict u, double * restrict energy, double * restrict density, int x) {
; #pragma ns vectorize predicate
;   for(int kk = 0; kk < x-1; ++kk)
;   {
;       u[kk] = energy[kk]*density[kk];
;   }
; }
define void @foo(ptr noalias nocapture noundef writeonly %0, ptr noalias nocapture noundef readonly %1, ptr noalias nocapture noundef readonly %2, i32 noundef %3) {
; CHECK-NO-MASKED-VEC-LABEL: @foo(
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP3:%.*]], 1
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP5]], label [[VECTOR_PH:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-NO-MASKED-VEC:       vector.ph:
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP6:%.*]] = add nsw i32 [[TMP3]], -1
; CHECK-NO-MASKED-VEC-NEXT:    [[N_RND_UP:%.*]] = add nuw i32 [[TMP3]], 2
; CHECK-NO-MASKED-VEC-NEXT:    [[N_VEC:%.*]] = and i32 [[N_RND_UP]], -4
; CHECK-NO-MASKED-VEC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-NO-MASKED-VEC:       vector.body:
; CHECK-NO-MASKED-VEC-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NO-MASKED-VEC-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = call <4 x i1> @llvm.get.active.lane.mask.v4i1.i32(i32 [[INDEX]], i32 [[TMP6]])
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP7:%.*]] = zext i32 [[INDEX]] to i64
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, ptr [[TMP1:%.*]], i64 [[TMP7]]
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP8]], i32 8, <4 x i1> [[ACTIVE_LANE_MASK]], <4 x double> poison)
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, ptr [[TMP2:%.*]], i64 [[TMP7]]
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_MASKED_LOAD1:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP9]], i32 8, <4 x i1> [[ACTIVE_LANE_MASK]], <4 x double> poison)
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP10:%.*]] = fmul <4 x double> [[WIDE_MASKED_LOAD]], [[WIDE_MASKED_LOAD1]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[TMP0:%.*]], i64 [[TMP7]]
; CHECK-NO-MASKED-VEC-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP10]], ptr [[TMP11]], i32 8, <4 x i1> [[ACTIVE_LANE_MASK]])
; CHECK-NO-MASKED-VEC-NEXT:    [[INDEX_NEXT]] = add i32 [[INDEX]], 4
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP12:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP12]], label [[DOTLOOPEXIT]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-NO-MASKED-VEC:       .loopexit:
; CHECK-NO-MASKED-VEC-NEXT:    ret void
;
; CHECK-MASKED-VEC-LABEL: @foo(
; CHECK-MASKED-VEC-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP3:%.*]], 1
; CHECK-MASKED-VEC-NEXT:    br i1 [[TMP5]], label [[VECTOR_PH:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-MASKED-VEC:       vector.ph:
; CHECK-MASKED-VEC-NEXT:    [[TMP6:%.*]] = add nsw i32 [[TMP3]], -1
; CHECK-MASKED-VEC-NEXT:    [[N_RND_UP:%.*]] = add nuw i32 [[TMP3]], 2
; CHECK-MASKED-VEC-NEXT:    [[N_VEC:%.*]] = and i32 [[N_RND_UP]], -4
; CHECK-MASKED-VEC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-MASKED-VEC:       vector.body:
; CHECK-MASKED-VEC-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-MASKED-VEC-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = call <4 x i1> @llvm.get.active.lane.mask.v4i1.i32(i32 [[INDEX]], i32 [[TMP6]])
; CHECK-MASKED-VEC-NEXT:    [[TMP7:%.*]] = zext i32 [[INDEX]] to i64
; CHECK-MASKED-VEC-NEXT:    [[TMP8:%.*]] = getelementptr inbounds double, ptr [[TMP1:%.*]], i64 [[TMP7]]
; CHECK-MASKED-VEC-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP8]], i32 8, <4 x i1> [[ACTIVE_LANE_MASK]], <4 x double> poison)
; CHECK-MASKED-VEC-NEXT:    [[TMP9:%.*]] = getelementptr inbounds double, ptr [[TMP2:%.*]], i64 [[TMP7]]
; CHECK-MASKED-VEC-NEXT:    [[WIDE_MASKED_LOAD1:%.*]] = call <4 x double> @llvm.masked.load.v4f64.p0(ptr [[TMP9]], i32 8, <4 x i1> [[ACTIVE_LANE_MASK]], <4 x double> poison)
; CHECK-MASKED-VEC-NEXT:    [[TMP10:%.*]] = fmul <4 x double> [[WIDE_MASKED_LOAD]], [[WIDE_MASKED_LOAD1]]
; CHECK-MASKED-VEC-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[TMP0:%.*]], i64 [[TMP7]]
; CHECK-MASKED-VEC-NEXT:    call void @llvm.masked.store.v4f64.p0(<4 x double> [[TMP10]], ptr [[TMP11]], i32 8, <4 x i1> [[ACTIVE_LANE_MASK]])
; CHECK-MASKED-VEC-NEXT:    [[INDEX_NEXT]] = add i32 [[INDEX]], 4
; CHECK-MASKED-VEC-NEXT:    [[TMP12:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-MASKED-VEC-NEXT:    br i1 [[TMP12]], label [[DOTLOOPEXIT]], label [[VECTOR_BODY]], !llvm.loop [[LOOP0:![0-9]+]]
; CHECK-MASKED-VEC:       .loopexit:
; CHECK-MASKED-VEC-NEXT:    ret void
;
  %5 = icmp sgt i32 %3, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = add i32 %3, -2
  br label %9

8:                                                ; preds = %9, %4
  ret void

9:                                                ; preds = %6, %9
  %10 = phi i32 [ %18, %9 ], [ 0, %6 ]
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds double, ptr %1, i64 %11
  %13 = load double, ptr %12, align 8
  %14 = getelementptr inbounds double, ptr %2, i64 %11
  %15 = load double, ptr %14, align 8
  %16 = fmul double %13, %15
  %17 = getelementptr inbounds double, ptr %0, i64 %11
  store double %16, ptr %17, align 8
  %18 = add nuw nsw i32 %10, 1
  %19 = icmp eq i32 %10, %7
  br i1 %19, label %8, label %9, !llvm.loop !0
}

; void bar(double * restrict u, double * restrict energy, double * restrict density, int x) {
; #pragma ns vectorize nopredicate
;   for(int kk = 0; kk < x-1; ++kk)
;   {
;       u[kk] = energy[kk]*density[kk];
;   }
; }
define void @bar(ptr noalias nocapture noundef writeonly %0, ptr noalias nocapture noundef readonly %1, ptr noalias nocapture noundef readonly %2, i32 noundef %3) {
; CHECK-NO-MASKED-VEC-LABEL: @bar(
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP3:%.*]], 1
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP5]], label [[TMP6:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-NO-MASKED-VEC:       6:
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP7:%.*]] = add nsw i32 [[TMP3]], -2
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP8:%.*]] = add nsw i32 [[TMP3]], -1
; CHECK-NO-MASKED-VEC-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[TMP3]], 5
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-NO-MASKED-VEC:       vector.ph:
; CHECK-NO-MASKED-VEC-NEXT:    [[N_VEC:%.*]] = and i32 [[TMP8]], -4
; CHECK-NO-MASKED-VEC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-NO-MASKED-VEC:       vector.body:
; CHECK-NO-MASKED-VEC-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP9:%.*]] = zext i32 [[INDEX]] to i64
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, ptr [[TMP1:%.*]], i64 [[TMP9]]
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x double>, ptr [[TMP10]], align 8
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[TMP2:%.*]], i64 [[TMP9]]
; CHECK-NO-MASKED-VEC-NEXT:    [[WIDE_LOAD1:%.*]] = load <4 x double>, ptr [[TMP11]], align 8
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP12:%.*]] = fmul <4 x double> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[TMP0:%.*]], i64 [[TMP9]]
; CHECK-NO-MASKED-VEC-NEXT:    store <4 x double> [[TMP12]], ptr [[TMP13]], align 8
; CHECK-NO-MASKED-VEC-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 4
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; CHECK-NO-MASKED-VEC:       middle.block:
; CHECK-NO-MASKED-VEC-NEXT:    [[CMP_N:%.*]] = icmp eq i32 [[TMP8]], [[N_VEC]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[CMP_N]], label [[DOTLOOPEXIT]], label [[SCALAR_PH]]
; CHECK-NO-MASKED-VEC:       scalar.ph:
; CHECK-NO-MASKED-VEC-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i32 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[TMP6]] ]
; CHECK-NO-MASKED-VEC-NEXT:    br label [[TMP15:%.*]]
; CHECK-NO-MASKED-VEC:       .loopexit:
; CHECK-NO-MASKED-VEC-NEXT:    ret void
; CHECK-NO-MASKED-VEC:       15:
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP16:%.*]] = phi i32 [ [[TMP24:%.*]], [[TMP15]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP17:%.*]] = zext i32 [[TMP16]] to i64
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP18:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i64 [[TMP17]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP19:%.*]] = load double, ptr [[TMP18]], align 8
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP20:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i64 [[TMP17]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP21:%.*]] = load double, ptr [[TMP20]], align 8
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP22:%.*]] = fmul double [[TMP19]], [[TMP21]]
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i64 [[TMP17]]
; CHECK-NO-MASKED-VEC-NEXT:    store double [[TMP22]], ptr [[TMP23]], align 8
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP24]] = add nuw nsw i32 [[TMP16]], 1
; CHECK-NO-MASKED-VEC-NEXT:    [[TMP25:%.*]] = icmp eq i32 [[TMP16]], [[TMP7]]
; CHECK-NO-MASKED-VEC-NEXT:    br i1 [[TMP25]], label [[DOTLOOPEXIT]], label [[TMP15]], !llvm.loop [[LOOP8:![0-9]+]]
;
; CHECK-MASKED-VEC-LABEL: @bar(
; CHECK-MASKED-VEC-NEXT:    [[TMP5:%.*]] = icmp sgt i32 [[TMP3:%.*]], 1
; CHECK-MASKED-VEC-NEXT:    br i1 [[TMP5]], label [[TMP6:%.*]], label [[DOTLOOPEXIT:%.*]]
; CHECK-MASKED-VEC:       6:
; CHECK-MASKED-VEC-NEXT:    [[TMP7:%.*]] = add nsw i32 [[TMP3]], -2
; CHECK-MASKED-VEC-NEXT:    [[TMP8:%.*]] = add nsw i32 [[TMP3]], -1
; CHECK-MASKED-VEC-NEXT:    [[MIN_ITERS_CHECK:%.*]] = icmp ult i32 [[TMP3]], 5
; CHECK-MASKED-VEC-NEXT:    br i1 [[MIN_ITERS_CHECK]], label [[SCALAR_PH:%.*]], label [[VECTOR_PH:%.*]]
; CHECK-MASKED-VEC:       vector.ph:
; CHECK-MASKED-VEC-NEXT:    [[N_VEC:%.*]] = and i32 [[TMP8]], -4
; CHECK-MASKED-VEC-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK-MASKED-VEC:       vector.body:
; CHECK-MASKED-VEC-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-MASKED-VEC-NEXT:    [[TMP9:%.*]] = zext i32 [[INDEX]] to i64
; CHECK-MASKED-VEC-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, ptr [[TMP1:%.*]], i64 [[TMP9]]
; CHECK-MASKED-VEC-NEXT:    [[WIDE_LOAD:%.*]] = load <4 x double>, ptr [[TMP10]], align 8
; CHECK-MASKED-VEC-NEXT:    [[TMP11:%.*]] = getelementptr inbounds double, ptr [[TMP2:%.*]], i64 [[TMP9]]
; CHECK-MASKED-VEC-NEXT:    [[WIDE_LOAD1:%.*]] = load <4 x double>, ptr [[TMP11]], align 8
; CHECK-MASKED-VEC-NEXT:    [[TMP12:%.*]] = fmul <4 x double> [[WIDE_LOAD]], [[WIDE_LOAD1]]
; CHECK-MASKED-VEC-NEXT:    [[TMP13:%.*]] = getelementptr inbounds double, ptr [[TMP0:%.*]], i64 [[TMP9]]
; CHECK-MASKED-VEC-NEXT:    store <4 x double> [[TMP12]], ptr [[TMP13]], align 8
; CHECK-MASKED-VEC-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 4
; CHECK-MASKED-VEC-NEXT:    [[TMP14:%.*]] = icmp eq i32 [[INDEX_NEXT]], [[N_VEC]]
; CHECK-MASKED-VEC-NEXT:    br i1 [[TMP14]], label [[MIDDLE_BLOCK:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP6:![0-9]+]]
; CHECK-MASKED-VEC:       middle.block:
; CHECK-MASKED-VEC-NEXT:    [[CMP_N:%.*]] = icmp eq i32 [[TMP8]], [[N_VEC]]
; CHECK-MASKED-VEC-NEXT:    br i1 [[CMP_N]], label [[DOTLOOPEXIT]], label [[SCALAR_PH]]
; CHECK-MASKED-VEC:       scalar.ph:
; CHECK-MASKED-VEC-NEXT:    [[BC_RESUME_VAL:%.*]] = phi i32 [ [[N_VEC]], [[MIDDLE_BLOCK]] ], [ 0, [[TMP6]] ]
; CHECK-MASKED-VEC-NEXT:    br label [[TMP15:%.*]]
; CHECK-MASKED-VEC:       .loopexit:
; CHECK-MASKED-VEC-NEXT:    ret void
; CHECK-MASKED-VEC:       15:
; CHECK-MASKED-VEC-NEXT:    [[TMP16:%.*]] = phi i32 [ [[TMP24:%.*]], [[TMP15]] ], [ [[BC_RESUME_VAL]], [[SCALAR_PH]] ]
; CHECK-MASKED-VEC-NEXT:    [[TMP17:%.*]] = zext i32 [[TMP16]] to i64
; CHECK-MASKED-VEC-NEXT:    [[TMP18:%.*]] = getelementptr inbounds double, ptr [[TMP1]], i64 [[TMP17]]
; CHECK-MASKED-VEC-NEXT:    [[TMP19:%.*]] = load double, ptr [[TMP18]], align 8
; CHECK-MASKED-VEC-NEXT:    [[TMP20:%.*]] = getelementptr inbounds double, ptr [[TMP2]], i64 [[TMP17]]
; CHECK-MASKED-VEC-NEXT:    [[TMP21:%.*]] = load double, ptr [[TMP20]], align 8
; CHECK-MASKED-VEC-NEXT:    [[TMP22:%.*]] = fmul double [[TMP19]], [[TMP21]]
; CHECK-MASKED-VEC-NEXT:    [[TMP23:%.*]] = getelementptr inbounds double, ptr [[TMP0]], i64 [[TMP17]]
; CHECK-MASKED-VEC-NEXT:    store double [[TMP22]], ptr [[TMP23]], align 8
; CHECK-MASKED-VEC-NEXT:    [[TMP24]] = add nuw nsw i32 [[TMP16]], 1
; CHECK-MASKED-VEC-NEXT:    [[TMP25:%.*]] = icmp eq i32 [[TMP16]], [[TMP7]]
; CHECK-MASKED-VEC-NEXT:    br i1 [[TMP25]], label [[DOTLOOPEXIT]], label [[TMP15]], !llvm.loop [[LOOP8:![0-9]+]]
;
  %5 = icmp sgt i32 %3, 1
  br i1 %5, label %6, label %8

6:                                                ; preds = %4
  %7 = add i32 %3, -2
  br label %9

8:                                                ; preds = %9, %4
  ret void

9:                                                ; preds = %6, %9
  %10 = phi i32 [ %18, %9 ], [ 0, %6 ]
  %11 = zext i32 %10 to i64
  %12 = getelementptr inbounds double, ptr %1, i64 %11
  %13 = load double, ptr %12, align 8
  %14 = getelementptr inbounds double, ptr %2, i64 %11
  %15 = load double, ptr %14, align 8
  %16 = fmul double %13, %15
  %17 = getelementptr inbounds double, ptr %0, i64 %11
  store double %16, ptr %17, align 8
  %18 = add nuw nsw i32 %10, 1
  %19 = icmp eq i32 %10, %7
  br i1 %19, label %8, label %9, !llvm.loop !4
}

!0 = distinct !{!0, !1, !2, !3}
!1 = !{!"llvm.loop.mustprogress"}
!2 = !{!"ns.loop.vectorize", !"predicate"}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !5, !6, !7}
!5 = !{!"llvm.loop.mustprogress"}
!6 = !{!"ns.loop.vectorize", !"nopredicate"}
!7 = !{!"llvm.loop.unroll.disable"}
