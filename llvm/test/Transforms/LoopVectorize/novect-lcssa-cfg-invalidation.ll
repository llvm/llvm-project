; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes="loop-vectorize,jump-threading" -debug-pass-manager < %s 2>&1 | FileCheck %s

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"

; Checks what analyses are invalidated after Loop Vectorization when no actual
; vectorization happens, and the only change LV makes is LCSSA formation.

define i32 @novect(i32* %p) {
; CHECK-LABEL: @novect(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    br label [[MIDDLE:%.*]]
; CHECK:       middle:
; CHECK-NEXT:    [[IV:%.*]] = phi i32 [ 0, [[ENTRY:%.*]] ], [ [[IV_NEXT:%.*]], [[MIDDLE]] ]
; CHECK-NEXT:    [[X:%.*]] = load volatile i32, i32* [[P:%.*]], align 4
; CHECK-NEXT:    [[IV_NEXT]] = add i32 [[IV]], 1
; CHECK-NEXT:    [[COND:%.*]] = icmp slt i32 [[IV]], 1000
; CHECK-NEXT:    br i1 [[COND]], label [[EXIT:%.*]], label [[MIDDLE]]
; CHECK:       exit:
; CHECK-NEXT:    [[X_LCSSA:%.*]] = phi i32 [ [[X]], [[MIDDLE]] ]
; CHECK-NEXT:    ret i32 [[X_LCSSA]]
;


entry:
  br label %middle

middle:
  %iv = phi i32 [0, %entry], [%iv.next, %middle]
  %x = load volatile i32, i32* %p
  %iv.next = add i32 %iv, 1
  %cond = icmp slt i32 %iv, 1000
  br i1 %cond, label %exit, label %middle

exit:
  ret i32 %x
}
