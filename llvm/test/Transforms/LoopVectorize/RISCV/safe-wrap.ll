; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=loop-vectorize,simplifycfg,instcombine -force-vector-interleave=1 -force-vector-width=4 -mtriple=riscv64 -mattr=+v < %s | FileCheck %s

target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"

@arr1 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr2 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr3 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr4 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr5 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr6 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr7 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr8 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4
@arr9 = dso_local local_unnamed_addr global [8192 x float] zeroinitializer, align 4

define dso_local noundef float @loop3(i32 noundef signext %zero) local_unnamed_addr #0 {
; CHECK-LABEL: define dso_local noundef float @loop3(
; CHECK-SAME: i32 noundef signext [[ZERO:%.*]]) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*]]:
; CHECK-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK:       [[VECTOR_BODY]]:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i32 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[VECTOR_BODY]] ]
; CHECK-NEXT:    [[VEC_IND:%.*]] = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %[[ENTRY]] ], [ [[VEC_IND_NEXT:%.*]], %[[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP0:%.*]] = and <4 x i32> [[VEC_IND]], splat (i32 127)
; CHECK-NEXT:    [[TMP1:%.*]] = uitofp nneg <4 x i32> [[VEC_IND]] to <4 x float>
; CHECK-NEXT:    [[TMP2:%.*]] = zext nneg <4 x i32> [[TMP0]] to <4 x i64>
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [8192 x float], ptr @arr1, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP3]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9:![0-9]+]]
; CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [8192 x float], ptr @arr2, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP4]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [8192 x float], ptr @arr3, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP5]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [8192 x float], ptr @arr4, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP6]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [8192 x float], ptr @arr5, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP7]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [8192 x float], ptr @arr6, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP8]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [8192 x float], ptr @arr7, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP9]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [8192 x float], ptr @arr8, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP10]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr inbounds [8192 x float], ptr @arr9, i64 0, <4 x i64> [[TMP2]]
; CHECK-NEXT:    call void @llvm.masked.scatter.v4f32.v4p0(<4 x float> [[TMP1]], <4 x ptr> [[TMP11]], i32 4, <4 x i1> splat (i1 true)), !tbaa [[TBAA9]]
; CHECK-NEXT:    [[INDEX_NEXT]] = add nuw i32 [[INDEX]], 4
; CHECK-NEXT:    [[VEC_IND_NEXT]] = add <4 x i32> [[VEC_IND]], splat (i32 4)
; CHECK-NEXT:    [[TMP12:%.*]] = icmp eq i32 [[INDEX_NEXT]], 8192
; CHECK-NEXT:    br i1 [[TMP12]], label %[[FOR_COND_CLEANUP:.*]], label %[[VECTOR_BODY]], !llvm.loop [[LOOP13:![0-9]+]]
; CHECK:       [[FOR_COND_CLEANUP]]:
; CHECK-NEXT:    ret float 0.000000e+00
;
entry:
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body
  ret float 0.000000e+00

for.body:                                         ; preds = %entry, %for.body
  %i.044 = phi i32 [ 0, %entry ], [ %add, %for.body ]
  %and = and i32 %i.044, 127
  %conv = uitofp nneg i32 %i.044 to float
  %idxprom = zext nneg i32 %and to i64
  %arrayidx = getelementptr inbounds [8192 x float], ptr @arr1, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx, align 4, !tbaa !9
  %arrayidx3 = getelementptr inbounds [8192 x float], ptr @arr2, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx3, align 4, !tbaa !9
  %arrayidx6 = getelementptr inbounds [8192 x float], ptr @arr3, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx6, align 4, !tbaa !9
  %arrayidx9 = getelementptr inbounds [8192 x float], ptr @arr4, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx9, align 4, !tbaa !9
  %arrayidx12 = getelementptr inbounds [8192 x float], ptr @arr5, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx12, align 4, !tbaa !9
  %arrayidx15 = getelementptr inbounds [8192 x float], ptr @arr6, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx15, align 4, !tbaa !9
  %arrayidx18 = getelementptr inbounds [8192 x float], ptr @arr7, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx18, align 4, !tbaa !9
  %arrayidx21 = getelementptr inbounds [8192 x float], ptr @arr8, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx21, align 4, !tbaa !9
  %arrayidx24 = getelementptr inbounds [8192 x float], ptr @arr9, i64 0, i64 %idxprom
  store float %conv, ptr %arrayidx24, align 4, !tbaa !9
  %add = add nuw nsw i32 %i.044, 1
  %exitcond.not = icmp eq i32 %add, 8192
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body
}

attributes #0 = { nofree noinline norecurse nosync nounwind memory(write, argmem: none, inaccessiblemem: none) uwtable vscale_range(4,1024) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+relax,+v,+zba,+zbb,+zbs,+zicond,+zicsr,+zifencei,+zmmul,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl256b,+zvl32b,+zvl64b,-b,-e,-experimental-smctr,-experimental-smmpm,-experimental-smnpm,-experimental-ssctr,-experimental-ssnpm,-experimental-sspm,-experimental-supm,-experimental-zacas,-experimental-zalasr,-experimental-zicfilp,-experimental-zicfiss,-experimental-zvbc32e,-experimental-zvkgs,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smcdeleg,-smcsrind,-smepmp,-smstateen,-ssaia,-ssccfg,-ssccptr,-sscofpmf,-sscounterenw,-sscsrind,-ssqosid,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-xventanamatmul,-xwchc,-za128rs,-za64rs,-zaamo,-zabha,-zalrsc,-zama16b,-zawrs,-zbc,-zbkb,-zbkc,-zbkx,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfbfmin,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-ztso,-zvbb,-zvbc,-zvfbfmin,-zvfbfwma,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl16384b,-zvl2048b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }

!llvm.module.flags = !{!0, !1, !2, !4, !5, !6, !7}
!llvm.ident = !{!8}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 6, !"riscv-isa", !3}
!3 = !{!"rv64i2p1_m2p0_a2p1_f2p2_d2p2_c2p0_v1p0_zicond1p0_zicsr2p0_zifencei2p0_zmmul1p0_zba1p0_zbb1p0_zbs1p0_zve32f1p0_zve32x1p0_zve64d1p0_zve64f1p0_zve64x1p0_zvl128b1p0_zvl256b1p0_zvl32b1p0_zvl64b1p0"}
!4 = !{i32 8, !"PIC Level", i32 2}
!5 = !{i32 7, !"PIE Level", i32 2}
!6 = !{i32 7, !"uwtable", i32 2}
!7 = !{i32 8, !"SmallDataLimit", i32 0}
!8 = !{!"clang version 20.0.0git (git@github.com:expertisesolutions/llvm.git 18fcedf2e278ec646fddb9b2d24a5abe98cdb7ed)"}
!9 = !{!10, !10, i64 0}
!10 = !{!"float", !11, i64 0}
!11 = !{!"omnipotent char", !12, i64 0}
!12 = !{!"Simple C/C++ TBAA"}
;.
; CHECK: [[TBAA9]] = !{[[META10:![0-9]+]], [[META10]], i64 0}
; CHECK: [[META10]] = !{!"float", [[META11:![0-9]+]], i64 0}
; CHECK: [[META11]] = !{!"omnipotent char", [[META12:![0-9]+]], i64 0}
; CHECK: [[META12]] = !{!"Simple C/C++ TBAA"}
; CHECK: [[LOOP13]] = distinct !{[[LOOP13]], [[META14:![0-9]+]], [[META15:![0-9]+]]}
; CHECK: [[META14]] = !{!"llvm.loop.isvectorized", i32 1}
; CHECK: [[META15]] = !{!"llvm.loop.unroll.runtime.disable"}
;.
