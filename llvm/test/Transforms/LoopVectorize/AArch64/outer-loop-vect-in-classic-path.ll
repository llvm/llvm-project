; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -mtriple=aarch64 -mattr=+sve -passes=loop-vectorize,instcombine,simplifycfg \
; RUN:     -force-vector-interleave=1 -experimental-olv-in-classic-vect \
; RUN:     -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue < %s | FileCheck -check-prefix=CHECK-IC1 %s
; RUN: opt -S -mtriple=aarch64 -mattr=+sve -passes=loop-vectorize,instcombine,simplifycfg \
; RUN:     -force-vector-interleave=2 -experimental-olv-in-classic-vect \
; RUN:     -prefer-predicate-over-epilogue=predicate-else-scalar-epilogue < %s | FileCheck -check-prefix=CHECK-IC2 %s

;;; Effectively the inner two loops of:
; for (size_t i = 0; i < N; i++) {
;   #pragma clang loop vectorize(enable)
;   for (size_t j = 0; j < N; j++) {
;     float a = 0.;
;     for (size_t k = 0; k < N; k++)
;       a += B[i][k] * C[k][j];
;     A[i][j] = a;
;   }
; }
define void @foo(i64 %N, i64 %M, ptr noalias %A, ptr readonly %B, ptr readonly %C) {
; CHECK-IC1-LABEL: define void @foo(
; CHECK-IC1-SAME: i64 [[N:%.*]], i64 [[M:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]], ptr readonly [[C:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-IC1-NEXT:  [[ENTRY:.*]]:
; CHECK-IC1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 2
; CHECK-IC1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 2
; CHECK-IC1-NEXT:    [[TMP4:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP3]])
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[N]])
; CHECK-IC1-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC1:       [[VECTOR_BODY]]:
; CHECK-IC1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[LOOP_LATCH9:.*]] ]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[LOOP_LATCH9]] ]
; CHECK-IC1-NEXT:    br label %[[INNER_LOOP1:.*]]
; CHECK-IC1:       [[INNER_LOOP1]]:
; CHECK-IC1-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT12:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[VEC_PHI2:%.*]] = phi <vscale x 4 x float> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP13:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[VEC_PHI3:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK]], %[[VECTOR_BODY]] ], [ [[TMP19:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[VEC_PHI4:%.*]] = phi <vscale x 4 x float> [ shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float poison, i64 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer), %[[VECTOR_BODY]] ], [ [[TMP14:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[TMP5:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP6:%.*]] = getelementptr inbounds float, ptr [[B]], i64 [[TMP5]]
; CHECK-IC1-NEXT:    [[TMP7:%.*]] = load float, ptr [[TMP6]], align 4, !llvm.access.group [[ACC_GRP0:![0-9]+]]
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x float> poison, float [[TMP7]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x float> [[BROADCAST_SPLATINSERT]], <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP8:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], [[M]]
; CHECK-IC1-NEXT:    [[TMP10:%.*]] = getelementptr float, ptr [[C]], i64 [[TMP9]]
; CHECK-IC1-NEXT:    [[TMP11:%.*]] = getelementptr float, ptr [[TMP10]], i64 [[INDEX]]
; CHECK-IC1-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP11]], i32 4, <vscale x 4 x i1> [[VEC_PHI3]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP12:%.*]] = fmul <vscale x 4 x float> [[BROADCAST_SPLAT]], [[WIDE_MASKED_LOAD]]
; CHECK-IC1-NEXT:    [[TMP13]] = fadd <vscale x 4 x float> [[VEC_PHI2]], [[TMP12]]
; CHECK-IC1-NEXT:    [[TMP14]] = select <vscale x 4 x i1> [[VEC_PHI3]], <vscale x 4 x float> [[TMP13]], <vscale x 4 x float> [[VEC_PHI4]]
; CHECK-IC1-NEXT:    [[TMP15:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP16:%.*]] = add nuw nsw i64 [[TMP15]], 1
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT11:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP16]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT12]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT11]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP17:%.*]] = icmp eq i64 [[TMP16]], [[M]]
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT5:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP17]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT6:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT5]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP18:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT6]], splat (i1 true)
; CHECK-IC1-NEXT:    [[TMP19]] = select <vscale x 4 x i1> [[VEC_PHI3]], <vscale x 4 x i1> [[TMP18]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP20:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP19]])
; CHECK-IC1-NEXT:    br i1 [[TMP20]], label %[[INNER_LOOP1]], label %[[LOOP_LATCH9]]
; CHECK-IC1:       [[LOOP_LATCH9]]:
; CHECK-IC1-NEXT:    [[TMP21:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX]]
; CHECK-IC1-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP14]], ptr [[TMP21]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP1]]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-IC1-NEXT:    [[TMP22:%.*]] = extractelement <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC1-NEXT:    br i1 [[TMP22]], label %[[VECTOR_BODY]], label %[[EXIT:.*]], !llvm.loop [[LOOP1:![0-9]+]]
; CHECK-IC1:       [[EXIT]]:
; CHECK-IC1-NEXT:    ret void
;
; CHECK-IC2-LABEL: define void @foo(
; CHECK-IC2-SAME: i64 [[N:%.*]], i64 [[M:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]], ptr readonly [[C:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-IC2-NEXT:  [[ENTRY:.*]]:
; CHECK-IC2-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 3
; CHECK-IC2-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 3
; CHECK-IC2-NEXT:    [[TMP4:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP3]])
; CHECK-IC2-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP6:%.*]] = shl i64 [[TMP5]], 2
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[N]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY1:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[TMP6]], i64 [[N]])
; CHECK-IC2-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC2:       [[VECTOR_BODY]]:
; CHECK-IC2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[LOOP_LATCH22:.*]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[LOOP_LATCH22]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK2:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY1]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT25:%.*]], %[[LOOP_LATCH22]] ]
; CHECK-IC2-NEXT:    br label %[[INNER_LOOP3:.*]]
; CHECK-IC2:       [[INNER_LOOP3]]:
; CHECK-IC2-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT27:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI4:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT29:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI5:%.*]] = phi <vscale x 4 x float> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP21:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI6:%.*]] = phi <vscale x 4 x float> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP22:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI7:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK]], %[[VECTOR_BODY]] ], [ [[TMP33:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI8:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK2]], %[[VECTOR_BODY]] ], [ [[TMP34:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI9:%.*]] = phi <vscale x 4 x float> [ shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float poison, i64 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer), %[[VECTOR_BODY]] ], [ [[TMP23:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI10:%.*]] = phi <vscale x 4 x float> [ shufflevector (<vscale x 4 x float> insertelement (<vscale x 4 x float> poison, float poison, i64 0), <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer), %[[VECTOR_BODY]] ], [ [[TMP24:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[TMP40:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP7:%.*]] = getelementptr inbounds float, ptr [[B]], i64 [[TMP40]]
; CHECK-IC2-NEXT:    [[TMP41:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI4]], i64 0
; CHECK-IC2-NEXT:    [[TMP42:%.*]] = getelementptr inbounds float, ptr [[B]], i64 [[TMP41]]
; CHECK-IC2-NEXT:    [[TMP14:%.*]] = load float, ptr [[TMP7]], align 4, !llvm.access.group [[ACC_GRP0:![0-9]+]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x float> poison, float [[TMP14]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x float> [[BROADCAST_SPLATINSERT]], <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP12:%.*]] = load float, ptr [[TMP42]], align 4, !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT12:%.*]] = insertelement <vscale x 4 x float> poison, float [[TMP12]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT13:%.*]] = shufflevector <vscale x 4 x float> [[BROADCAST_SPLATINSERT12]], <vscale x 4 x float> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP13:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP13]], [[M]]
; CHECK-IC2-NEXT:    [[TMP10:%.*]] = getelementptr float, ptr [[C]], i64 [[TMP9]]
; CHECK-IC2-NEXT:    [[TMP11:%.*]] = getelementptr float, ptr [[TMP10]], i64 [[INDEX]]
; CHECK-IC2-NEXT:    [[TMP17:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX:%.*]] = shl i64 [[TMP17]], 4
; CHECK-IC2-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i8, ptr [[TMP11]], i64 [[DOTIDX]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP11]], i32 4, <vscale x 4 x i1> [[VEC_PHI7]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD11:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP18]], i32 4, <vscale x 4 x i1> [[VEC_PHI8]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP19:%.*]] = fmul <vscale x 4 x float> [[BROADCAST_SPLAT]], [[WIDE_MASKED_LOAD]]
; CHECK-IC2-NEXT:    [[TMP20:%.*]] = fmul <vscale x 4 x float> [[BROADCAST_SPLAT13]], [[WIDE_MASKED_LOAD11]]
; CHECK-IC2-NEXT:    [[TMP21]] = fadd <vscale x 4 x float> [[VEC_PHI5]], [[TMP19]]
; CHECK-IC2-NEXT:    [[TMP22]] = fadd <vscale x 4 x float> [[VEC_PHI6]], [[TMP20]]
; CHECK-IC2-NEXT:    [[TMP23]] = select <vscale x 4 x i1> [[VEC_PHI7]], <vscale x 4 x float> [[TMP21]], <vscale x 4 x float> [[VEC_PHI9]]
; CHECK-IC2-NEXT:    [[TMP24]] = select <vscale x 4 x i1> [[VEC_PHI8]], <vscale x 4 x float> [[TMP22]], <vscale x 4 x float> [[VEC_PHI10]]
; CHECK-IC2-NEXT:    [[TMP25:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP26:%.*]] = add nuw nsw i64 [[TMP25]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT26:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP26]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT27]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT26]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP27:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI4]], i64 0
; CHECK-IC2-NEXT:    [[TMP28:%.*]] = add nuw nsw i64 [[TMP27]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT28:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP28]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT29]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT28]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP29:%.*]] = icmp eq i64 [[TMP26]], [[M]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT14:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP29]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT15:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT14]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP30:%.*]] = icmp eq i64 [[TMP28]], [[M]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT16:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP30]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT17:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT16]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP31:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT15]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP32:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT17]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP33]] = select <vscale x 4 x i1> [[VEC_PHI7]], <vscale x 4 x i1> [[TMP31]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP34]] = select <vscale x 4 x i1> [[VEC_PHI8]], <vscale x 4 x i1> [[TMP32]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP35:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP33]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT18:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP35]], i64 0
; CHECK-IC2-NEXT:    [[TMP36:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP34]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT20:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP36]], i64 0
; CHECK-IC2-NEXT:    [[TMP37:%.*]] = or <vscale x 4 x i1> [[BROADCAST_SPLATINSERT18]], [[BROADCAST_SPLATINSERT20]]
; CHECK-IC2-NEXT:    [[TMP38:%.*]] = shufflevector <vscale x 4 x i1> [[TMP37]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP39:%.*]] = extractelement <vscale x 4 x i1> [[TMP38]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP39]], label %[[INNER_LOOP3]], label %[[LOOP_LATCH22]]
; CHECK-IC2:       [[LOOP_LATCH22]]:
; CHECK-IC2-NEXT:    [[TMP47:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX]]
; CHECK-IC2-NEXT:    [[TMP48:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX30:%.*]] = shl i64 [[TMP48]], 4
; CHECK-IC2-NEXT:    [[TMP49:%.*]] = getelementptr inbounds i8, ptr [[TMP47]], i64 [[DOTIDX30]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP23]], ptr [[TMP47]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP24]], ptr [[TMP49]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK2]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP1]]
; CHECK-IC2-NEXT:    [[TMP43:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP44:%.*]] = shl i64 [[TMP43]], 2
; CHECK-IC2-NEXT:    [[TMP45:%.*]] = add i64 [[INDEX]], [[TMP44]]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT25]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[TMP45]], i64 [[TMP4]])
; CHECK-IC2-NEXT:    [[TMP46:%.*]] = extractelement <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP46]], label %[[VECTOR_BODY]], label %[[EXIT:.*]], !llvm.loop [[LOOP1:![0-9]+]]
; CHECK-IC2:       [[EXIT]]:
; CHECK-IC2-NEXT:    ret void
;
entry:
  br label %loop.header

loop.header:
  %i = phi i64 [ %i.next, %loop.latch ], [ 0, %entry ]
  br label %inner.loop

inner.loop:
  %j = phi i64 [ %j.next, %inner.loop ], [ 0, %loop.header ]
  %a.phi = phi float [ %a.next, %inner.loop ], [ 0.0, %loop.header ]
  %b.addr = getelementptr inbounds float, ptr %B, i64 %j
  %b.load = load float, ptr %b.addr, align 4, !llvm.access.group !3
  %jxM = mul i64 %j, %M
  %jxMpi = add i64 %jxM, %i
  %c.addr = getelementptr inbounds float, ptr %C, i64 %jxMpi
  %c.load = load float, ptr %c.addr, align 4, !llvm.access.group !3
  %mul = fmul float %b.load, %c.load
  %a.next = fadd float %a.phi, %mul
  %j.next = add nuw nsw i64 %j, 1
  %inner.exitcond = icmp eq i64 %j.next, %M
  br i1 %inner.exitcond, label %loop.latch, label %inner.loop

loop.latch:
  %a.lcssa = phi float [ %a.next, %inner.loop ]
  %a.addr = getelementptr inbounds float, ptr %A, i64 %i
  store float %a.lcssa, ptr %a.addr, align 4, !llvm.access.group !3
  %i.next = add nuw nsw i64 %i, 1
  %loop.exitcond = icmp eq i64 %i.next, %N
  br i1 %loop.exitcond, label %exit, label %loop.header, !llvm.loop !0

exit:
  ret void
}

;;; Effectively the inner two loops of:
; for (size_t i = 0; i < N; i++) {
;   #pragma clang loop vectorize(enable)
;   for (size_t j = 0; j < N; j++) {
;     float a = 0.;
;     for (size_t k = 0; k < j; k++)
;       a += B[i][k] * C[k][j];
;     A[i][j] = a;
;   }
; }
;;; Note that the inner loop's trip-count depends on the outer loop.
define void @bar(i64 %N, i64 %M, ptr noalias %A, ptr readonly %B, ptr readonly %C) {
; CHECK-IC1-LABEL: define void @bar(
; CHECK-IC1-SAME: i64 [[N:%.*]], i64 [[M:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]], ptr readonly [[C:%.*]]) #[[ATTR0]] {
; CHECK-IC1-NEXT:  [[ENTRY:.*]]:
; CHECK-IC1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 2
; CHECK-IC1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 2
; CHECK-IC1-NEXT:    [[TMP4:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP3]])
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[N]])
; CHECK-IC1-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC1:       [[VECTOR_BODY]]:
; CHECK-IC1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[LOOP_LATCH3:.*]] ]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[LOOP_LATCH3]] ]
; CHECK-IC1-NEXT:    br label %[[INNER_LOOP1:.*]]
; CHECK-IC1:       [[INNER_LOOP1]]:
; CHECK-IC1-NEXT:    [[VEC_PHI1:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT6:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[VEC_PHI3:%.*]] = phi <vscale x 4 x float> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP13:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[TMP6:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI1]], i64 0
; CHECK-IC1-NEXT:    [[TMP7:%.*]] = getelementptr inbounds float, ptr [[B]], i64 [[TMP6]]
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x ptr> poison, ptr [[TMP7]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x ptr> [[BROADCAST_SPLATINSERT]], <vscale x 4 x ptr> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 4 x float> @llvm.masked.gather.nxv4f32.nxv4p0(<vscale x 4 x ptr> [[BROADCAST_SPLAT]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP8:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI1]], i64 0
; CHECK-IC1-NEXT:    [[TMP9:%.*]] = mul i64 [[TMP8]], [[M]]
; CHECK-IC1-NEXT:    [[TMP10:%.*]] = getelementptr float, ptr [[C]], i64 [[TMP9]]
; CHECK-IC1-NEXT:    [[TMP11:%.*]] = getelementptr float, ptr [[TMP10]], i64 [[INDEX]]
; CHECK-IC1-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP11]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP12:%.*]] = fmul <vscale x 4 x float> [[WIDE_MASKED_GATHER]], [[WIDE_MASKED_LOAD]]
; CHECK-IC1-NEXT:    [[TMP13]] = fadd <vscale x 4 x float> [[VEC_PHI3]], [[TMP12]]
; CHECK-IC1-NEXT:    [[TMP15:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI1]], i64 0
; CHECK-IC1-NEXT:    [[TMP21:%.*]] = add i64 [[TMP15]], 1
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT5:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP21]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT6]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT5]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP14:%.*]] = icmp eq i64 [[TMP21]], [[INDEX]]
; CHECK-IC1-NEXT:    br i1 [[TMP14]], label %[[LOOP_LATCH3]], label %[[INNER_LOOP1]]
; CHECK-IC1:       [[LOOP_LATCH3]]:
; CHECK-IC1-NEXT:    [[TMP19:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX]]
; CHECK-IC1-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP13]], ptr [[TMP19]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP1]]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-IC1-NEXT:    [[TMP20:%.*]] = extractelement <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC1-NEXT:    br i1 [[TMP20]], label %[[VECTOR_BODY]], label %[[EXIT:.*]], !llvm.loop [[LOOP5:![0-9]+]]
; CHECK-IC1:       [[EXIT]]:
; CHECK-IC1-NEXT:    ret void
;
; CHECK-IC2-LABEL: define void @bar(
; CHECK-IC2-SAME: i64 [[N:%.*]], i64 [[M:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]], ptr readonly [[C:%.*]]) #[[ATTR0]] {
; CHECK-IC2-NEXT:  [[ENTRY:.*]]:
; CHECK-IC2-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP0]], 3
; CHECK-IC2-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP4:%.*]] = shl i64 [[TMP3]], 3
; CHECK-IC2-NEXT:    [[TMP5:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP4]])
; CHECK-IC2-NEXT:    [[TMP6:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 2
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[N]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY1:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[TMP7]], i64 [[N]])
; CHECK-IC2-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC2:       [[VECTOR_BODY]]:
; CHECK-IC2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[LOOP_LATCH11:.*]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[LOOP_LATCH11]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK2:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY1]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT22:%.*]], %[[LOOP_LATCH11]] ]
; CHECK-IC2-NEXT:    br label %[[INNER_LOOP3:.*]]
; CHECK-IC2:       [[INNER_LOOP3]]:
; CHECK-IC2-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT16:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI4:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT18:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI5:%.*]] = phi <vscale x 4 x float> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP29:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI6:%.*]] = phi <vscale x 4 x float> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP30:%.*]], %[[INNER_LOOP3]] ]
; CHECK-IC2-NEXT:    [[TMP13:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP12:%.*]] = getelementptr inbounds float, ptr [[B]], i64 [[TMP13]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x ptr> poison, ptr [[TMP12]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 4 x ptr> [[BROADCAST_SPLATINSERT]], <vscale x 4 x ptr> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP9:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI4]], i64 0
; CHECK-IC2-NEXT:    [[TMP10:%.*]] = getelementptr inbounds float, ptr [[B]], i64 [[TMP9]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT7:%.*]] = insertelement <vscale x 4 x ptr> poison, ptr [[TMP10]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT8:%.*]] = shufflevector <vscale x 4 x ptr> [[BROADCAST_SPLATINSERT7]], <vscale x 4 x ptr> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 4 x float> @llvm.masked.gather.nxv4f32.nxv4p0(<vscale x 4 x ptr> [[BROADCAST_SPLAT]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_GATHER13:%.*]] = call <vscale x 4 x float> @llvm.masked.gather.nxv4f32.nxv4p0(<vscale x 4 x ptr> [[BROADCAST_SPLAT8]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK2]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP11:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP14:%.*]] = mul i64 [[TMP11]], [[M]]
; CHECK-IC2-NEXT:    [[TMP15:%.*]] = getelementptr float, ptr [[C]], i64 [[TMP14]]
; CHECK-IC2-NEXT:    [[TMP16:%.*]] = getelementptr float, ptr [[TMP15]], i64 [[INDEX]]
; CHECK-IC2-NEXT:    [[TMP17:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX:%.*]] = shl i64 [[TMP17]], 4
; CHECK-IC2-NEXT:    [[TMP18:%.*]] = getelementptr i8, ptr [[TMP16]], i64 [[DOTIDX]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP16]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD14:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP18]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK2]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP19:%.*]] = fmul <vscale x 4 x float> [[WIDE_MASKED_GATHER]], [[WIDE_MASKED_LOAD]]
; CHECK-IC2-NEXT:    [[TMP20:%.*]] = fmul <vscale x 4 x float> [[WIDE_MASKED_GATHER13]], [[WIDE_MASKED_LOAD14]]
; CHECK-IC2-NEXT:    [[TMP29]] = fadd <vscale x 4 x float> [[VEC_PHI5]], [[TMP19]]
; CHECK-IC2-NEXT:    [[TMP30]] = fadd <vscale x 4 x float> [[VEC_PHI6]], [[TMP20]]
; CHECK-IC2-NEXT:    [[TMP21:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP22:%.*]] = add i64 [[TMP21]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT15:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP22]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT16]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT15]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP23:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI4]], i64 0
; CHECK-IC2-NEXT:    [[TMP24:%.*]] = add i64 [[TMP23]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT17:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP24]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT18]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT17]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP25:%.*]] = icmp eq i64 [[TMP22]], [[INDEX]]
; CHECK-IC2-NEXT:    br i1 [[TMP25]], label %[[LOOP_LATCH11]], label %[[INNER_LOOP3]]
; CHECK-IC2:       [[LOOP_LATCH11]]:
; CHECK-IC2-NEXT:    [[TMP26:%.*]] = getelementptr inbounds float, ptr [[A]], i64 [[INDEX]]
; CHECK-IC2-NEXT:    [[TMP27:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX19:%.*]] = shl i64 [[TMP27]], 4
; CHECK-IC2-NEXT:    [[TMP28:%.*]] = getelementptr inbounds i8, ptr [[TMP26]], i64 [[DOTIDX19]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP29]], ptr [[TMP26]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP30]], ptr [[TMP28]], i32 4, <vscale x 4 x i1> [[ACTIVE_LANE_MASK2]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP2]]
; CHECK-IC2-NEXT:    [[TMP39:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP40:%.*]] = shl i64 [[TMP39]], 2
; CHECK-IC2-NEXT:    [[TMP41:%.*]] = add i64 [[INDEX]], [[TMP40]]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP5]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT22]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[TMP41]], i64 [[TMP5]])
; CHECK-IC2-NEXT:    [[TMP42:%.*]] = extractelement <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP42]], label %[[VECTOR_BODY]], label %[[EXIT:.*]], !llvm.loop [[LOOP5:![0-9]+]]
; CHECK-IC2:       [[EXIT]]:
; CHECK-IC2-NEXT:    ret void
;
entry:
  br label %loop.header

loop.header:
  %i = phi i64 [ %i.next, %loop.latch ], [ 0, %entry ]
  br label %inner.loop

inner.loop:
  %j = phi i64 [ %j.next, %inner.loop ], [ 0, %loop.header ]
  %a.phi = phi float [ %a.next, %inner.loop ], [ 0.0, %loop.header ]
  %b.addr = getelementptr inbounds float, ptr %B, i64 %j
  %b.load = load float, ptr %b.addr, align 4, !llvm.access.group !3
  %jxM = mul i64 %j, %M
  %jxMpi = add i64 %jxM, %i
  %c.addr = getelementptr inbounds float, ptr %C, i64 %jxMpi
  %c.load = load float, ptr %c.addr, align 4, !llvm.access.group !3
  %mul = fmul float %b.load, %c.load
  %a.next = fadd float %a.phi, %mul
  %j.next = add nuw nsw i64 %j, 1
  %inner.exitcond = icmp eq i64 %j.next, %i
  br i1 %inner.exitcond, label %loop.latch, label %inner.loop

loop.latch:
  %a.lcssa = phi float [ %a.next, %inner.loop ]
  %a.addr = getelementptr inbounds float, ptr %A, i64 %i
  store float %a.lcssa, ptr %a.addr, align 4, !llvm.access.group !3
  %i.next = add nuw nsw i64 %i, 1
  %loop.exitcond = icmp eq i64 %i.next, %N
  br i1 %loop.exitcond, label %exit, label %loop.header, !llvm.loop !0

exit:
  ret void
}

;;; Effectively something like:
; #pragma clang loop vectorize(enable)
; for (long i = 0; i < N; i++) {
;   long a = A[i];
;   long j = 0;
;   if (a > 0) {
;     do {
;       a -= B[j];
;       j++;
;     } while (a > 0);
;   }
;   A[i] = a + j;
; }
;;; Note that the inner loop is behind a branch, so the start value of the inner
;;; loop mask phi must be corespondingly. The induction of the inner loop is used
;;; for a uniform memory accesses and as live-out, so the vectorized code should
;;; contain two phis for it (one scalar and one widened).
;;; Also, in this example, the inner loop backedge is the first successor of the
;;; the latch terminator, not the second one as is assumed by VPlan.
define void @baz(i64 %N, i64 %M, ptr noalias %A, ptr readonly %B) {
; CHECK-IC1-LABEL: define void @baz(
; CHECK-IC1-SAME: i64 [[N:%.*]], i64 [[M:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]]) #[[ATTR0]] {
; CHECK-IC1-NEXT:  [[ENTRY:.*]]:
; CHECK-IC1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 1
; CHECK-IC1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 1
; CHECK-IC1-NEXT:    [[TMP4:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP3]])
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 0, i64 [[N]])
; CHECK-IC1-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC1:       [[VECTOR_BODY]]:
; CHECK-IC1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[LOOP_LATCH_LOOPEXIT3:.*]] ]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 2 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[LOOP_LATCH_LOOPEXIT3]] ]
; CHECK-IC1-NEXT:    [[TMP5:%.*]] = getelementptr inbounds i64, ptr [[A]], i64 [[INDEX]]
; CHECK-IC1-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 2 x i64> @llvm.masked.load.nxv2i64.p0(ptr [[TMP5]], i32 8, <vscale x 2 x i1> [[ACTIVE_LANE_MASK]], <vscale x 2 x i64> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP6:%.*]] = icmp sgt <vscale x 2 x i64> [[WIDE_MASKED_LOAD]], zeroinitializer
; CHECK-IC1-NEXT:    [[TMP7:%.*]] = select <vscale x 2 x i1> [[ACTIVE_LANE_MASK]], <vscale x 2 x i1> [[TMP6]], <vscale x 2 x i1> zeroinitializer
; CHECK-IC1-NEXT:    br label %[[INNER_LOOP1:.*]]
; CHECK-IC1:       [[INNER_LOOP1]]:
; CHECK-IC1-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 2 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT6:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[VEC_PHI3:%.*]] = phi <vscale x 2 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP9:%.*]], %[[INNER_LOOP1]] ]
; CHECK-IC1-NEXT:    [[TMP10:%.*]] = extractelement <vscale x 2 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP8:%.*]] = getelementptr inbounds i64, ptr [[B]], i64 [[TMP10]]
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x ptr> poison, ptr [[TMP8]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x ptr> [[BROADCAST_SPLATINSERT]], <vscale x 2 x ptr> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 2 x i64> @llvm.masked.gather.nxv2i64.nxv2p0(<vscale x 2 x ptr> [[BROADCAST_SPLAT]], i32 8, <vscale x 2 x i1> [[TMP7]], <vscale x 2 x i64> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP9]] = sub <vscale x 2 x i64> [[VEC_PHI3]], [[WIDE_MASKED_GATHER]]
; CHECK-IC1-NEXT:    [[J2:%.*]] = extractelement <vscale x 2 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP11:%.*]] = add nuw nsw i64 [[J2]], 1
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT5:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP11]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT6]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT5]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP13:%.*]] = extractelement <vscale x 2 x i64> [[TMP9]], i64 0
; CHECK-IC1-NEXT:    [[TMP12:%.*]] = icmp slt i64 [[TMP13]], 1
; CHECK-IC1-NEXT:    br i1 [[TMP12]], label %[[LOOP_LATCH_LOOPEXIT3]], label %[[INNER_LOOP1]]
; CHECK-IC1:       [[LOOP_LATCH_LOOPEXIT3]]:
; CHECK-IC1-NEXT:    [[PREDPHI:%.*]] = select <vscale x 2 x i1> [[TMP7]], <vscale x 2 x i64> [[TMP9]], <vscale x 2 x i64> [[WIDE_MASKED_LOAD]]
; CHECK-IC1-NEXT:    call void @llvm.masked.store.nxv2i64.p0(<vscale x 2 x i64> [[PREDPHI]], ptr [[TMP5]], i32 8, <vscale x 2 x i1> [[ACTIVE_LANE_MASK]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP1]]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-IC1-NEXT:    [[TMP15:%.*]] = extractelement <vscale x 2 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC1-NEXT:    br i1 [[TMP15]], label %[[VECTOR_BODY]], label %[[EXIT:.*]], !llvm.loop [[LOOP6:![0-9]+]]
; CHECK-IC1:       [[EXIT]]:
; CHECK-IC1-NEXT:    ret void
;
; CHECK-IC2-LABEL: define void @baz(
; CHECK-IC2-SAME: i64 [[N:%.*]], i64 [[M:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]]) #[[ATTR0]] {
; CHECK-IC2-NEXT:  [[ENTRY:.*]]:
; CHECK-IC2-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 2
; CHECK-IC2-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 2
; CHECK-IC2-NEXT:    [[TMP4:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP3]])
; CHECK-IC2-NEXT:    [[TMP5:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP6:%.*]] = shl i64 [[TMP5]], 1
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 0, i64 [[N]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY1:%.*]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 [[TMP6]], i64 [[N]])
; CHECK-IC2-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC2:       [[VECTOR_BODY]]:
; CHECK-IC2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[ENTRY]] ], [ [[INDEX_NEXT:%.*]], %[[LOOP_LATCH_LOOPEXIT11:.*]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 2 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[LOOP_LATCH_LOOPEXIT11]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK2:%.*]] = phi <vscale x 2 x i1> [ [[ACTIVE_LANE_MASK_ENTRY1]], %[[ENTRY]] ], [ [[ACTIVE_LANE_MASK_NEXT15:%.*]], %[[LOOP_LATCH_LOOPEXIT11]] ]
; CHECK-IC2-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i64, ptr [[A]], i64 [[INDEX]]
; CHECK-IC2-NEXT:    [[TMP8:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX:%.*]] = shl i64 [[TMP8]], 4
; CHECK-IC2-NEXT:    [[TMP9:%.*]] = getelementptr inbounds i8, ptr [[TMP7]], i64 [[DOTIDX]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 2 x i64> @llvm.masked.load.nxv2i64.p0(ptr [[TMP7]], i32 8, <vscale x 2 x i1> [[ACTIVE_LANE_MASK]], <vscale x 2 x i64> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD3:%.*]] = call <vscale x 2 x i64> @llvm.masked.load.nxv2i64.p0(ptr [[TMP9]], i32 8, <vscale x 2 x i1> [[ACTIVE_LANE_MASK2]], <vscale x 2 x i64> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP10:%.*]] = icmp sgt <vscale x 2 x i64> [[WIDE_MASKED_LOAD]], zeroinitializer
; CHECK-IC2-NEXT:    [[TMP11:%.*]] = icmp sgt <vscale x 2 x i64> [[WIDE_MASKED_LOAD3]], zeroinitializer
; CHECK-IC2-NEXT:    [[TMP12:%.*]] = select <vscale x 2 x i1> [[ACTIVE_LANE_MASK]], <vscale x 2 x i1> [[TMP10]], <vscale x 2 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP13:%.*]] = select <vscale x 2 x i1> [[ACTIVE_LANE_MASK2]], <vscale x 2 x i1> [[TMP11]], <vscale x 2 x i1> zeroinitializer
; CHECK-IC2-NEXT:    br label %[[INNER_LOOP4:.*]]
; CHECK-IC2:       [[INNER_LOOP4]]:
; CHECK-IC2-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 2 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT17:%.*]], %[[INNER_LOOP4]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI5:%.*]] = phi <vscale x 2 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT19:%.*]], %[[INNER_LOOP4]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI6:%.*]] = phi <vscale x 2 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP18:%.*]], %[[INNER_LOOP4]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI7:%.*]] = phi <vscale x 2 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[TMP19:%.*]], %[[INNER_LOOP4]] ]
; CHECK-IC2-NEXT:    [[TMP14:%.*]] = extractelement <vscale x 2 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP15:%.*]] = getelementptr inbounds i64, ptr [[B]], i64 [[TMP14]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 2 x ptr> poison, ptr [[TMP15]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT:%.*]] = shufflevector <vscale x 2 x ptr> [[BROADCAST_SPLATINSERT]], <vscale x 2 x ptr> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP16:%.*]] = extractelement <vscale x 2 x i64> [[VEC_PHI5]], i64 0
; CHECK-IC2-NEXT:    [[TMP17:%.*]] = getelementptr inbounds i64, ptr [[B]], i64 [[TMP16]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT8:%.*]] = insertelement <vscale x 2 x ptr> poison, ptr [[TMP17]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT9:%.*]] = shufflevector <vscale x 2 x ptr> [[BROADCAST_SPLATINSERT8]], <vscale x 2 x ptr> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 2 x i64> @llvm.masked.gather.nxv2i64.nxv2p0(<vscale x 2 x ptr> [[BROADCAST_SPLAT]], i32 8, <vscale x 2 x i1> [[TMP12]], <vscale x 2 x i64> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_GATHER10:%.*]] = call <vscale x 2 x i64> @llvm.masked.gather.nxv2i64.nxv2p0(<vscale x 2 x ptr> [[BROADCAST_SPLAT9]], i32 8, <vscale x 2 x i1> [[TMP13]], <vscale x 2 x i64> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP18]] = sub <vscale x 2 x i64> [[VEC_PHI6]], [[WIDE_MASKED_GATHER]]
; CHECK-IC2-NEXT:    [[TMP19]] = sub <vscale x 2 x i64> [[VEC_PHI7]], [[WIDE_MASKED_GATHER10]]
; CHECK-IC2-NEXT:    [[J6:%.*]] = extractelement <vscale x 2 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP20:%.*]] = add nuw nsw i64 [[J6]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT16:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP20]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT17]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT16]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP22:%.*]] = extractelement <vscale x 2 x i64> [[VEC_PHI5]], i64 0
; CHECK-IC2-NEXT:    [[TMP23:%.*]] = add nuw nsw i64 [[TMP22]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT18:%.*]] = insertelement <vscale x 2 x i64> poison, i64 [[TMP23]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT19]] = shufflevector <vscale x 2 x i64> [[BROADCAST_SPLATINSERT18]], <vscale x 2 x i64> poison, <vscale x 2 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP24:%.*]] = extractelement <vscale x 2 x i64> [[TMP18]], i64 0
; CHECK-IC2-NEXT:    [[TMP25:%.*]] = icmp slt i64 [[TMP24]], 1
; CHECK-IC2-NEXT:    br i1 [[TMP25]], label %[[LOOP_LATCH_LOOPEXIT11]], label %[[INNER_LOOP4]]
; CHECK-IC2:       [[LOOP_LATCH_LOOPEXIT11]]:
; CHECK-IC2-NEXT:    [[PREDPHI:%.*]] = select <vscale x 2 x i1> [[TMP12]], <vscale x 2 x i64> [[TMP18]], <vscale x 2 x i64> [[WIDE_MASKED_LOAD]]
; CHECK-IC2-NEXT:    [[PREDPHI14:%.*]] = select <vscale x 2 x i1> [[TMP13]], <vscale x 2 x i64> [[TMP19]], <vscale x 2 x i64> [[WIDE_MASKED_LOAD3]]
; CHECK-IC2-NEXT:    [[TMP26:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX20:%.*]] = shl i64 [[TMP26]], 4
; CHECK-IC2-NEXT:    [[TMP27:%.*]] = getelementptr inbounds i8, ptr [[TMP7]], i64 [[DOTIDX20]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv2i64.p0(<vscale x 2 x i64> [[PREDPHI]], ptr [[TMP7]], i32 8, <vscale x 2 x i1> [[ACTIVE_LANE_MASK]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv2i64.p0(<vscale x 2 x i64> [[PREDPHI14]], ptr [[TMP27]], i32 8, <vscale x 2 x i1> [[ACTIVE_LANE_MASK2]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP1]]
; CHECK-IC2-NEXT:    [[TMP28:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP29:%.*]] = shl i64 [[TMP28]], 1
; CHECK-IC2-NEXT:    [[TMP30:%.*]] = add i64 [[INDEX]], [[TMP29]]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT15]] = call <vscale x 2 x i1> @llvm.get.active.lane.mask.nxv2i1.i64(i64 [[TMP30]], i64 [[TMP4]])
; CHECK-IC2-NEXT:    [[TMP31:%.*]] = extractelement <vscale x 2 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP31]], label %[[VECTOR_BODY]], label %[[EXIT:.*]], !llvm.loop [[LOOP6:![0-9]+]]
; CHECK-IC2:       [[EXIT]]:
; CHECK-IC2-NEXT:    ret void
;
entry:
  br label %loop.header

loop.header:
  %i = phi i64 [ %i.next, %loop.latch ], [ 0, %entry ]
  %a.addr = getelementptr inbounds i64, ptr %A, i64 %i
  %a.load = load i64, ptr %a.addr, align 8, !llvm.access.group !3
  %a.is.positive = icmp sgt i64 %a.load, 0
  br i1 %a.is.positive, label %inner.loop, label %loop.latch

inner.loop:
  %j = phi i64 [ %j.next, %inner.loop ], [ 0, %loop.header ]
  %a.phi = phi i64 [ %a.next, %inner.loop ], [ 0, %loop.header ]
  %b.addr = getelementptr inbounds i64, ptr %B, i64 %j
  %b.load = load i64, ptr %b.addr, align 8, !llvm.access.group !3
  %a.next = sub i64 %a.phi, %b.load
  %j.next = add nuw nsw i64 %j, 1
  %a.is.still.positive = icmp sgt i64 %a.next, 0
  br i1 %a.is.still.positive, label %inner.loop, label %loop.latch

loop.latch:
  %a.res = phi i64 [ %a.load, %loop.header ], [ %a.next, %inner.loop ]
  store i64 %a.res, ptr %a.addr, align 8, !llvm.access.group !3
  %i.next = add nuw nsw i64 %i, 1
  %loop.exitcond = icmp eq i64 %i.next, %N
  br i1 %loop.exitcond, label %exit, label %loop.header, !llvm.loop !0

exit:
  ret void
}

;;; Triple-loop nest with the outer-most one beeing vectorized.
; #pragma clang loop vectorize(enable)
; for (size_t i = 0; i < N; i++)
;   for (size_t j = 0; j < M; j++)
;     for (size_t k = 0; k < L; k++)
;       A[k][i] += B[i][k];
define void @quuz(i64 %N, i64 %M, i64 %L, ptr noalias %A, ptr readonly %B) {
; CHECK-IC1-LABEL: define void @quuz(
; CHECK-IC1-SAME: i64 [[N:%.*]], i64 [[M:%.*]], i64 [[L:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]]) #[[ATTR0]] {
; CHECK-IC1-NEXT:  [[ENTRY:.*:]]
; CHECK-IC1-NEXT:    [[N_IS_ZERO:%.*]] = icmp eq i64 [[N]], 0
; CHECK-IC1-NEXT:    br i1 [[N_IS_ZERO]], label %[[EXIT:.*]], label %[[VECTOR_PH:.*]]
; CHECK-IC1:       [[VECTOR_PH]]:
; CHECK-IC1-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 2
; CHECK-IC1-NEXT:    [[TMP2:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC1-NEXT:    [[TMP3:%.*]] = shl i64 [[TMP2]], 2
; CHECK-IC1-NEXT:    [[TMP4:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP3]])
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[N]])
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[M]], i64 0
; CHECK-IC1-NEXT:    [[TMP5:%.*]] = icmp eq <vscale x 4 x i64> [[BROADCAST_SPLATINSERT]], zeroinitializer
; CHECK-IC1-NEXT:    [[TMP6:%.*]] = shufflevector <vscale x 4 x i1> [[TMP5]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP11:%.*]] = xor <vscale x 4 x i1> [[TMP6]], splat (i1 true)
; CHECK-IC1-NEXT:    [[TMP7:%.*]] = call <vscale x 4 x i64> @llvm.stepvector.nxv4i64()
; CHECK-IC1-NEXT:    [[DOTSPLATINSERT:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP1]], i64 0
; CHECK-IC1-NEXT:    [[DOTSPLAT:%.*]] = shufflevector <vscale x 4 x i64> [[DOTSPLATINSERT]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT1:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[L]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT2:%.*]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT1]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC1:       [[VECTOR_BODY]]:
; CHECK-IC1-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[OUTER_LATCH_LOOPEXIT17:.*]] ]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[OUTER_LATCH_LOOPEXIT17]] ]
; CHECK-IC1-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 4 x i64> [ [[TMP7]], %[[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], %[[OUTER_LATCH_LOOPEXIT17]] ]
; CHECK-IC1-NEXT:    [[TMP8:%.*]] = getelementptr float, ptr [[A]], i64 [[INDEX]]
; CHECK-IC1-NEXT:    [[TMP9:%.*]] = mul <vscale x 4 x i64> [[VEC_IND]], [[BROADCAST_SPLAT2]]
; CHECK-IC1-NEXT:    [[TMP10:%.*]] = getelementptr float, ptr [[B]], <vscale x 4 x i64> [[TMP9]]
; CHECK-IC1-NEXT:    [[TMP12:%.*]] = select <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x i1> [[TMP11]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC1-NEXT:    br label %[[MIDDLE_LOOP3:.*]]
; CHECK-IC1:       [[MIDDLE_LOOP3]]:
; CHECK-IC1-NEXT:    [[VEC_PHI2:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT19:%.*]], %[[MIDDLE_LATCH_LOOPEXIT12:.*]] ]
; CHECK-IC1-NEXT:    [[VEC_PHI1:%.*]] = phi <vscale x 4 x i1> [ [[TMP12]], %[[VECTOR_BODY]] ], [ [[TMP27:%.*]], %[[MIDDLE_LATCH_LOOPEXIT12]] ]
; CHECK-IC1-NEXT:    [[TMP13:%.*]] = icmp ne <vscale x 4 x i64> [[BROADCAST_SPLAT2]], zeroinitializer
; CHECK-IC1-NEXT:    [[TMP24:%.*]] = select <vscale x 4 x i1> [[VEC_PHI1]], <vscale x 4 x i1> [[TMP13]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC1-NEXT:    br label %[[INNER_LOOP5:.*]]
; CHECK-IC1:       [[INNER_LOOP5]]:
; CHECK-IC1-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[MIDDLE_LOOP3]] ], [ [[BROADCAST_SPLAT10:%.*]], %[[INNER_LOOP5]] ]
; CHECK-IC1-NEXT:    [[TMP14:%.*]] = phi <vscale x 4 x i1> [ [[TMP24]], %[[MIDDLE_LOOP3]] ], [ [[TMP25:%.*]], %[[INNER_LOOP5]] ]
; CHECK-IC1-NEXT:    [[K6:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP15:%.*]] = mul i64 [[K6]], [[N]]
; CHECK-IC1-NEXT:    [[TMP16:%.*]] = getelementptr float, ptr [[TMP8]], i64 [[TMP15]]
; CHECK-IC1-NEXT:    [[TMP17:%.*]] = getelementptr float, <vscale x 4 x ptr> [[TMP10]], <vscale x 4 x i64> [[VEC_PHI]]
; CHECK-IC1-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP16]], i32 4, <vscale x 4 x i1> [[TMP14]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 4 x float> @llvm.masked.gather.nxv4f32.nxv4p0(<vscale x 4 x ptr> [[TMP17]], i32 4, <vscale x 4 x i1> [[TMP14]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP18:%.*]] = fadd <vscale x 4 x float> [[WIDE_MASKED_LOAD]], [[WIDE_MASKED_GATHER]]
; CHECK-IC1-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP18]], ptr [[TMP16]], i32 4, <vscale x 4 x i1> [[TMP14]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC1-NEXT:    [[TMP31:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC1-NEXT:    [[TMP19:%.*]] = add i64 [[TMP31]], 1
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT9:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP19]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT10]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT9]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP20:%.*]] = icmp eq i64 [[TMP19]], [[L]]
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT10:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP20]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT11:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT10]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP29:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT11]], splat (i1 true)
; CHECK-IC1-NEXT:    [[TMP25]] = select <vscale x 4 x i1> [[TMP14]], <vscale x 4 x i1> [[TMP29]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP30:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP25]])
; CHECK-IC1-NEXT:    br i1 [[TMP30]], label %[[INNER_LOOP5]], label %[[MIDDLE_LATCH_LOOPEXIT12]]
; CHECK-IC1:       [[MIDDLE_LATCH_LOOPEXIT12]]:
; CHECK-IC1-NEXT:    [[J4:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI2]], i64 0
; CHECK-IC1-NEXT:    [[TMP21:%.*]] = add nuw nsw i64 [[J4]], 1
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT18:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP21]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT19]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT18]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP22:%.*]] = icmp eq i64 [[TMP21]], [[M]]
; CHECK-IC1-NEXT:    [[BROADCAST_SPLATINSERT14:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP22]], i64 0
; CHECK-IC1-NEXT:    [[BROADCAST_SPLAT15:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT14]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP26:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT15]], splat (i1 true)
; CHECK-IC1-NEXT:    [[TMP27]] = select <vscale x 4 x i1> [[VEC_PHI1]], <vscale x 4 x i1> [[TMP26]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC1-NEXT:    [[TMP28:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP27]])
; CHECK-IC1-NEXT:    br i1 [[TMP28]], label %[[MIDDLE_LOOP3]], label %[[OUTER_LATCH_LOOPEXIT17]]
; CHECK-IC1:       [[OUTER_LATCH_LOOPEXIT17]]:
; CHECK-IC1-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP1]]
; CHECK-IC1-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP4]])
; CHECK-IC1-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 4 x i64> [[VEC_IND]], [[DOTSPLAT]]
; CHECK-IC1-NEXT:    [[TMP23:%.*]] = extractelement <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC1-NEXT:    br i1 [[TMP23]], label %[[VECTOR_BODY]], label %[[EXIT]], !llvm.loop [[LOOP7:![0-9]+]]
; CHECK-IC1:       [[EXIT]]:
; CHECK-IC1-NEXT:    ret void
;
; CHECK-IC2-LABEL: define void @quuz(
; CHECK-IC2-SAME: i64 [[N:%.*]], i64 [[M:%.*]], i64 [[L:%.*]], ptr noalias [[A:%.*]], ptr readonly [[B:%.*]]) #[[ATTR0]] {
; CHECK-IC2-NEXT:  [[ENTRY:.*:]]
; CHECK-IC2-NEXT:    [[N_IS_ZERO:%.*]] = icmp eq i64 [[N]], 0
; CHECK-IC2-NEXT:    br i1 [[N_IS_ZERO]], label %[[EXIT:.*]], label %[[VECTOR_PH:.*]]
; CHECK-IC2:       [[VECTOR_PH]]:
; CHECK-IC2-NEXT:    [[TMP0:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP1:%.*]] = shl i64 [[TMP0]], 2
; CHECK-IC2-NEXT:    [[TMP2:%.*]] = shl i64 [[TMP0]], 3
; CHECK-IC2-NEXT:    [[TMP3:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP4:%.*]] = shl i64 [[TMP3]], 3
; CHECK-IC2-NEXT:    [[TMP5:%.*]] = call i64 @llvm.usub.sat.i64(i64 [[N]], i64 [[TMP4]])
; CHECK-IC2-NEXT:    [[TMP6:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP7:%.*]] = shl i64 [[TMP6]], 2
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 0, i64 [[N]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_ENTRY1:%.*]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[TMP7]], i64 [[N]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[M]], i64 0
; CHECK-IC2-NEXT:    [[TMP25:%.*]] = icmp eq <vscale x 4 x i64> [[BROADCAST_SPLATINSERT]], zeroinitializer
; CHECK-IC2-NEXT:    [[TMP9:%.*]] = shufflevector <vscale x 4 x i1> [[TMP25]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP10:%.*]] = xor <vscale x 4 x i1> [[TMP9]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP11:%.*]] = call <vscale x 4 x i64> @llvm.stepvector.nxv4i64()
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT3:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP1]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT4:%.*]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT3]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT5:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[L]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT6:%.*]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT5]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    br label %[[VECTOR_BODY:.*]]
; CHECK-IC2:       [[VECTOR_BODY]]:
; CHECK-IC2-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, %[[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], %[[OUTER_LATCH_LOOPEXIT35:.*]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY]], %[[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT:%.*]], %[[OUTER_LATCH_LOOPEXIT35]] ]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK2:%.*]] = phi <vscale x 4 x i1> [ [[ACTIVE_LANE_MASK_ENTRY1]], %[[VECTOR_PH]] ], [ [[ACTIVE_LANE_MASK_NEXT16:%.*]], %[[OUTER_LATCH_LOOPEXIT35]] ]
; CHECK-IC2-NEXT:    [[VEC_IND:%.*]] = phi <vscale x 4 x i64> [ [[TMP11]], %[[VECTOR_PH]] ], [ [[VEC_IND_NEXT:%.*]], %[[OUTER_LATCH_LOOPEXIT35]] ]
; CHECK-IC2-NEXT:    [[STEP_ADD:%.*]] = add <vscale x 4 x i64> [[VEC_IND]], [[BROADCAST_SPLAT4]]
; CHECK-IC2-NEXT:    [[B_INV_GEP:%.*]] = getelementptr float, ptr [[A]], i64 [[INDEX]]
; CHECK-IC2-NEXT:    [[TMP28:%.*]] = mul <vscale x 4 x i64> [[VEC_IND]], [[BROADCAST_SPLAT6]]
; CHECK-IC2-NEXT:    [[TMP14:%.*]] = mul <vscale x 4 x i64> [[STEP_ADD]], [[BROADCAST_SPLAT6]]
; CHECK-IC2-NEXT:    [[TMP15:%.*]] = getelementptr float, ptr [[B]], <vscale x 4 x i64> [[TMP28]]
; CHECK-IC2-NEXT:    [[TMP16:%.*]] = getelementptr float, ptr [[B]], <vscale x 4 x i64> [[TMP14]]
; CHECK-IC2-NEXT:    [[TMP17:%.*]] = select <vscale x 4 x i1> [[ACTIVE_LANE_MASK]], <vscale x 4 x i1> [[TMP10]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP18:%.*]] = select <vscale x 4 x i1> [[ACTIVE_LANE_MASK2]], <vscale x 4 x i1> [[TMP10]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    br label %[[MIDDLE_LOOP7:.*]]
; CHECK-IC2:       [[MIDDLE_LOOP7]]:
; CHECK-IC2-NEXT:    [[VEC_PHI:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT38:%.*]], %[[MIDDLE_LATCH_LOOPEXIT26:.*]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI8:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[VECTOR_BODY]] ], [ [[BROADCAST_SPLAT40:%.*]], %[[MIDDLE_LATCH_LOOPEXIT26]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI9:%.*]] = phi <vscale x 4 x i1> [ [[TMP17]], %[[VECTOR_BODY]] ], [ [[TMP57:%.*]], %[[MIDDLE_LATCH_LOOPEXIT26]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI10:%.*]] = phi <vscale x 4 x i1> [ [[TMP18]], %[[VECTOR_BODY]] ], [ [[TMP58:%.*]], %[[MIDDLE_LATCH_LOOPEXIT26]] ]
; CHECK-IC2-NEXT:    [[TMP19:%.*]] = icmp ne <vscale x 4 x i64> [[BROADCAST_SPLAT6]], zeroinitializer
; CHECK-IC2-NEXT:    [[TMP20:%.*]] = icmp ne <vscale x 4 x i64> [[BROADCAST_SPLAT6]], zeroinitializer
; CHECK-IC2-NEXT:    [[TMP21:%.*]] = select <vscale x 4 x i1> [[VEC_PHI9]], <vscale x 4 x i1> [[TMP19]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP22:%.*]] = select <vscale x 4 x i1> [[VEC_PHI10]], <vscale x 4 x i1> [[TMP20]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    br label %[[INNER_LOOP11:.*]]
; CHECK-IC2:       [[INNER_LOOP11]]:
; CHECK-IC2-NEXT:    [[VEC_PHI12:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[MIDDLE_LOOP7]] ], [ [[BROADCAST_SPLAT42:%.*]], %[[INNER_LOOP11]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI13:%.*]] = phi <vscale x 4 x i64> [ zeroinitializer, %[[MIDDLE_LOOP7]] ], [ [[BROADCAST_SPLAT44:%.*]], %[[INNER_LOOP11]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI14:%.*]] = phi <vscale x 4 x i1> [ [[TMP21]], %[[MIDDLE_LOOP7]] ], [ [[TMP64:%.*]], %[[INNER_LOOP11]] ]
; CHECK-IC2-NEXT:    [[VEC_PHI15:%.*]] = phi <vscale x 4 x i1> [ [[TMP22]], %[[MIDDLE_LOOP7]] ], [ [[TMP43:%.*]], %[[INNER_LOOP11]] ]
; CHECK-IC2-NEXT:    [[TMP23:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI12]], i64 0
; CHECK-IC2-NEXT:    [[TMP24:%.*]] = mul i64 [[TMP23]], [[N]]
; CHECK-IC2-NEXT:    [[TMP8:%.*]] = getelementptr float, ptr [[B_INV_GEP]], i64 [[TMP24]]
; CHECK-IC2-NEXT:    [[TMP26:%.*]] = getelementptr float, <vscale x 4 x ptr> [[TMP15]], <vscale x 4 x i64> [[VEC_PHI12]]
; CHECK-IC2-NEXT:    [[TMP27:%.*]] = getelementptr float, <vscale x 4 x ptr> [[TMP16]], <vscale x 4 x i64> [[VEC_PHI13]]
; CHECK-IC2-NEXT:    [[TMP13:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX7:%.*]] = shl i64 [[TMP13]], 4
; CHECK-IC2-NEXT:    [[TMP12:%.*]] = getelementptr i8, ptr [[TMP8]], i64 [[DOTIDX7]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP8]], i32 4, <vscale x 4 x i1> [[VEC_PHI14]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_LOAD12:%.*]] = call <vscale x 4 x float> @llvm.masked.load.nxv4f32.p0(ptr [[TMP12]], i32 4, <vscale x 4 x i1> [[VEC_PHI15]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_GATHER:%.*]] = call <vscale x 4 x float> @llvm.masked.gather.nxv4f32.nxv4p0(<vscale x 4 x ptr> [[TMP26]], i32 4, <vscale x 4 x i1> [[VEC_PHI14]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[WIDE_MASKED_GATHER13:%.*]] = call <vscale x 4 x float> @llvm.masked.gather.nxv4f32.nxv4p0(<vscale x 4 x ptr> [[TMP27]], i32 4, <vscale x 4 x i1> [[VEC_PHI15]], <vscale x 4 x float> poison), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP30:%.*]] = fadd <vscale x 4 x float> [[WIDE_MASKED_LOAD]], [[WIDE_MASKED_GATHER]]
; CHECK-IC2-NEXT:    [[TMP31:%.*]] = fadd <vscale x 4 x float> [[WIDE_MASKED_LOAD12]], [[WIDE_MASKED_GATHER13]]
; CHECK-IC2-NEXT:    [[TMP32:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[DOTIDX21:%.*]] = shl i64 [[TMP32]], 4
; CHECK-IC2-NEXT:    [[TMP33:%.*]] = getelementptr i8, ptr [[TMP8]], i64 [[DOTIDX21]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP30]], ptr [[TMP8]], i32 4, <vscale x 4 x i1> [[VEC_PHI14]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    call void @llvm.masked.store.nxv4f32.p0(<vscale x 4 x float> [[TMP31]], ptr [[TMP33]], i32 4, <vscale x 4 x i1> [[VEC_PHI15]]), !llvm.access.group [[ACC_GRP0]]
; CHECK-IC2-NEXT:    [[TMP34:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI12]], i64 0
; CHECK-IC2-NEXT:    [[TMP35:%.*]] = add i64 [[TMP34]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT41:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP35]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT42]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT41]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP36:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI13]], i64 0
; CHECK-IC2-NEXT:    [[TMP37:%.*]] = add i64 [[TMP36]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT43:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP37]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT44]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT43]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP38:%.*]] = icmp eq i64 [[TMP35]], [[L]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT18:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP38]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT19:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT18]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP65:%.*]] = icmp eq i64 [[TMP37]], [[L]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT20:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP65]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT21:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT20]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP66:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT19]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP67:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT21]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP64]] = select <vscale x 4 x i1> [[VEC_PHI14]], <vscale x 4 x i1> [[TMP66]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP43]] = select <vscale x 4 x i1> [[VEC_PHI15]], <vscale x 4 x i1> [[TMP67]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP44:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP64]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT22:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP44]], i64 0
; CHECK-IC2-NEXT:    [[TMP45:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP43]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT24:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP45]], i64 0
; CHECK-IC2-NEXT:    [[TMP46:%.*]] = or <vscale x 4 x i1> [[BROADCAST_SPLATINSERT22]], [[BROADCAST_SPLATINSERT24]]
; CHECK-IC2-NEXT:    [[TMP47:%.*]] = shufflevector <vscale x 4 x i1> [[TMP46]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP48:%.*]] = extractelement <vscale x 4 x i1> [[TMP47]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP48]], label %[[INNER_LOOP11]], label %[[MIDDLE_LATCH_LOOPEXIT26]]
; CHECK-IC2:       [[MIDDLE_LATCH_LOOPEXIT26]]:
; CHECK-IC2-NEXT:    [[TMP49:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI]], i64 0
; CHECK-IC2-NEXT:    [[TMP50:%.*]] = add nuw nsw i64 [[TMP49]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT37:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP50]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT38]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT37]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP51:%.*]] = extractelement <vscale x 4 x i64> [[VEC_PHI8]], i64 0
; CHECK-IC2-NEXT:    [[TMP52:%.*]] = add nuw nsw i64 [[TMP51]], 1
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT39:%.*]] = insertelement <vscale x 4 x i64> poison, i64 [[TMP52]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT40]] = shufflevector <vscale x 4 x i64> [[BROADCAST_SPLATINSERT39]], <vscale x 4 x i64> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP53:%.*]] = icmp eq i64 [[TMP50]], [[M]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT27:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP53]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT28:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT27]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP54:%.*]] = icmp eq i64 [[TMP52]], [[M]]
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT29:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP54]], i64 0
; CHECK-IC2-NEXT:    [[BROADCAST_SPLAT30:%.*]] = shufflevector <vscale x 4 x i1> [[BROADCAST_SPLATINSERT29]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP55:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT28]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP56:%.*]] = xor <vscale x 4 x i1> [[BROADCAST_SPLAT30]], splat (i1 true)
; CHECK-IC2-NEXT:    [[TMP57]] = select <vscale x 4 x i1> [[VEC_PHI9]], <vscale x 4 x i1> [[TMP55]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP58]] = select <vscale x 4 x i1> [[VEC_PHI10]], <vscale x 4 x i1> [[TMP56]], <vscale x 4 x i1> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP59:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP57]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT31:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP59]], i64 0
; CHECK-IC2-NEXT:    [[TMP60:%.*]] = call i1 @llvm.vector.reduce.or.nxv4i1(<vscale x 4 x i1> [[TMP58]])
; CHECK-IC2-NEXT:    [[BROADCAST_SPLATINSERT33:%.*]] = insertelement <vscale x 4 x i1> poison, i1 [[TMP60]], i64 0
; CHECK-IC2-NEXT:    [[TMP61:%.*]] = or <vscale x 4 x i1> [[BROADCAST_SPLATINSERT31]], [[BROADCAST_SPLATINSERT33]]
; CHECK-IC2-NEXT:    [[TMP62:%.*]] = shufflevector <vscale x 4 x i1> [[TMP61]], <vscale x 4 x i1> poison, <vscale x 4 x i32> zeroinitializer
; CHECK-IC2-NEXT:    [[TMP63:%.*]] = extractelement <vscale x 4 x i1> [[TMP62]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP63]], label %[[MIDDLE_LOOP7]], label %[[OUTER_LATCH_LOOPEXIT35]]
; CHECK-IC2:       [[OUTER_LATCH_LOOPEXIT35]]:
; CHECK-IC2-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[TMP2]]
; CHECK-IC2-NEXT:    [[TMP39:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-IC2-NEXT:    [[TMP40:%.*]] = shl i64 [[TMP39]], 2
; CHECK-IC2-NEXT:    [[TMP41:%.*]] = add i64 [[INDEX]], [[TMP40]]
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[INDEX]], i64 [[TMP5]])
; CHECK-IC2-NEXT:    [[ACTIVE_LANE_MASK_NEXT16]] = call <vscale x 4 x i1> @llvm.get.active.lane.mask.nxv4i1.i64(i64 [[TMP41]], i64 [[TMP5]])
; CHECK-IC2-NEXT:    [[VEC_IND_NEXT]] = add <vscale x 4 x i64> [[STEP_ADD]], [[BROADCAST_SPLAT4]]
; CHECK-IC2-NEXT:    [[TMP42:%.*]] = extractelement <vscale x 4 x i1> [[ACTIVE_LANE_MASK_NEXT]], i64 0
; CHECK-IC2-NEXT:    br i1 [[TMP42]], label %[[VECTOR_BODY]], label %[[EXIT]], !llvm.loop [[LOOP7:![0-9]+]]
; CHECK-IC2:       [[EXIT]]:
; CHECK-IC2-NEXT:    ret void
;
entry:
  %N.is.zero = icmp eq i64 %N, 0
  br i1 %N.is.zero, label %exit, label %outer.loop

outer.loop:
  %i = phi i64 [ %i.next, %outer.latch ], [ 0, %entry ]
  %a.inv.gep = getelementptr float, ptr %A, i64 %i
  %i.x.L = mul i64 %i, %L
  %b.inv.gep = getelementptr float, ptr %B, i64 %i.x.L
  %M.is.zero = icmp eq i64 %M, 0
  br i1 %M.is.zero, label %outer.latch, label %middle.loop

middle.loop:
  %j = phi i64 [ %j.next, %middle.latch ], [ 0, %outer.loop ]
  %L.is.zero = icmp eq i64 %L, 0
  br i1 %L.is.zero, label %middle.latch, label %inner.loop

inner.loop:
  %k = phi i64 [ %k.next, %inner.loop ], [ 0, %middle.loop ]
  %k.x.N = mul i64 %k, %N
  %a.gep = getelementptr float, ptr %a.inv.gep, i64 %k.x.N
  %b.gep = getelementptr float, ptr %b.inv.gep, i64 %k
  %a.load = load float, ptr %a.gep, align 4, !llvm.access.group !3
  %b.load = load float, ptr %b.gep, align 4, !llvm.access.group !3
  %res = fadd float %a.load, %b.load
  store float %res, ptr %a.gep, align 4, !llvm.access.group !3
  %k.next = add nuw nsw i64 %k, 1
  %inner.exitcond = icmp eq i64 %k.next, %L
  br i1 %inner.exitcond, label %middle.latch, label %inner.loop

middle.latch:
  %j.next = add nuw nsw i64 %j, 1
  %middle.exitcond = icmp eq i64 %j.next, %M
  br i1 %middle.exitcond, label %outer.latch, label %middle.loop

outer.latch:
  %i.next = add nuw nsw i64 %i, 1
  %outer.exitcond = icmp eq i64 %i.next, %N
  br i1 %outer.exitcond, label %exit, label %outer.loop, !llvm.loop !0

exit:
  ret void
}

!0 = distinct !{!0, !1, !2}
!1 = !{!"llvm.loop.vectorize.enable", i1 true}
!2 = !{!"llvm.loop.parallel_accesses", !3}
!3 = distinct !{}
;.
; CHECK-IC1: [[ACC_GRP0]] = distinct !{}
; CHECK-IC1: [[LOOP1]] = distinct !{[[LOOP1]], [[META2:![0-9]+]], [[META3:![0-9]+]], [[META4:![0-9]+]]}
; CHECK-IC1: [[META2]] = !{!"llvm.loop.parallel_accesses", [[ACC_GRP0]]}
; CHECK-IC1: [[META3]] = !{!"llvm.loop.isvectorized", i32 1}
; CHECK-IC1: [[META4]] = !{!"llvm.loop.unroll.runtime.disable"}
; CHECK-IC1: [[LOOP5]] = distinct !{[[LOOP5]], [[META2]], [[META3]], [[META4]]}
; CHECK-IC1: [[LOOP6]] = distinct !{[[LOOP6]], [[META2]], [[META3]], [[META4]]}
; CHECK-IC1: [[LOOP7]] = distinct !{[[LOOP7]], [[META2]], [[META3]], [[META4]]}
;.
; CHECK-IC2: [[ACC_GRP0]] = distinct !{}
; CHECK-IC2: [[LOOP1]] = distinct !{[[LOOP1]], [[META2:![0-9]+]], [[META3:![0-9]+]], [[META4:![0-9]+]]}
; CHECK-IC2: [[META2]] = !{!"llvm.loop.parallel_accesses", [[ACC_GRP0]]}
; CHECK-IC2: [[META3]] = !{!"llvm.loop.isvectorized", i32 1}
; CHECK-IC2: [[META4]] = !{!"llvm.loop.unroll.runtime.disable"}
; CHECK-IC2: [[LOOP5]] = distinct !{[[LOOP5]], [[META2]], [[META3]], [[META4]]}
; CHECK-IC2: [[LOOP6]] = distinct !{[[LOOP6]], [[META2]], [[META3]], [[META4]]}
; CHECK-IC2: [[LOOP7]] = distinct !{[[LOOP7]], [[META2]], [[META3]], [[META4]]}
;.
