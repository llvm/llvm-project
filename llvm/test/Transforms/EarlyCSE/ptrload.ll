; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S -passes=early-cse < %s | FileCheck %s

%struct.bits = type { i8, [3 x i8] }

@b = dso_local global %struct.bits zeroinitializer, align 4

; Function Attrs: nounwind
define dso_local arm_aapcscc void @clear_bits() #0 {
; CHECK-LABEL: @clear_bits(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr @b, align 4
; CHECK-NEXT:    [[BF_LOAD:%.*]] = load i8, ptr [[TMP0]], align 4
; CHECK-NEXT:    [[BF_CLEAR:%.*]] = and i8 [[BF_LOAD]], -33
; CHECK-NEXT:    [[BF_CLEAR2:%.*]] = and i8 [[BF_CLEAR]], -17
; CHECK-NEXT:    [[BF_CLEAR5:%.*]] = and i8 [[BF_CLEAR2]], -9
; CHECK-NEXT:    [[BF_CLEAR8:%.*]] = and i8 [[BF_CLEAR5]], -5
; CHECK-NEXT:    [[BF_CLEAR11:%.*]] = and i8 [[BF_CLEAR8]], -3
; CHECK-NEXT:    [[BF_CLEAR14:%.*]] = and i8 [[BF_CLEAR11]], -2
; CHECK-NEXT:    store i8 [[BF_CLEAR14]], ptr [[TMP0]], align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load ptr, ptr @b, align 4
  %bf.load = load i8, ptr %0, align 4
  %bf.clear = and i8 %bf.load, -33
  %bf.set = or i8 %bf.clear, 0
  store i8 %bf.set, ptr %0, align 4
  %1 = load ptr, ptr @b, align 4
  %bf.load1 = load i8, ptr %1, align 4
  %bf.clear2 = and i8 %bf.load1, -17
  %bf.set3 = or i8 %bf.clear2, 0
  store i8 %bf.set3, ptr %1, align 4
  %2 = load ptr, ptr @b, align 4
  %bf.load4 = load i8, ptr %2, align 4
  %bf.clear5 = and i8 %bf.load4, -9
  %bf.set6 = or i8 %bf.clear5, 0
  store i8 %bf.set6, ptr %2, align 4
  %3 = load ptr, ptr @b, align 4
  %bf.load7 = load i8, ptr %3, align 4
  %bf.clear8 = and i8 %bf.load7, -5
  %bf.set9 = or i8 %bf.clear8, 0
  store i8 %bf.set9, ptr %3, align 4
  %4 = load ptr, ptr @b, align 4
  %bf.load10 = load i8, ptr %4, align 4
  %bf.clear11 = and i8 %bf.load10, -3
  %bf.set12 = or i8 %bf.clear11, 0
  store i8 %bf.set12, ptr %4, align 4
  %5 = load ptr, ptr @b, align 4
  %bf.load13 = load i8, ptr %5, align 4
  %bf.clear14 = and i8 %bf.load13, -2
  %bf.set15 = or i8 %bf.clear14, 0
  store i8 %bf.set15, ptr %5, align 4
  ret void
}
