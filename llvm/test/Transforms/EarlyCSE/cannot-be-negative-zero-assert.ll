; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; RUN: opt -S -passes=early-cse < %s | FileCheck %s

; We can't assume comparisons with 0 are exact class tests with dynamic denormal mode
define double @cannot_be_negative_zero_test_dynamic_denormal_fp_math(double %a) #0 {
; CHECK-LABEL: define double @cannot_be_negative_zero_test_dynamic_denormal_fp_math(
; CHECK-SAME: double [[A:%.*]]) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = fcmp oeq double [[A]], 0.000000e+00
; CHECK-NEXT:    [[COND:%.*]] = select i1 [[CMP]], double 1.000000e+00, double 0.000000e+00
; CHECK-NEXT:    store double [[COND]], ptr addrspace(5) null, align 8
; CHECK-NEXT:    ret double [[COND]]
;
entry:
  %cmp = fcmp oeq double %a, 0.000000e+00
  %cond = select i1 %cmp, double 1.000000e+00, double 0.000000e+00
  store double %cond, ptr addrspace(5) null, align 8
  %load = load double, ptr addrspace(5) null, align 8
  %add.i = fadd double %load, 0.000000e+00
  ret double %add.i
}

define double @cannot_be_negative_zero_test_dynamic_denormal_fp_math_negzero(double %a) #0 {
; CHECK-LABEL: define double @cannot_be_negative_zero_test_dynamic_denormal_fp_math_negzero(
; CHECK-SAME: double [[A:%.*]]) #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = fcmp oeq double [[A]], -0.000000e+00
; CHECK-NEXT:    [[COND:%.*]] = select i1 [[CMP]], double 1.000000e+00, double 0.000000e+00
; CHECK-NEXT:    store double [[COND]], ptr addrspace(5) null, align 8
; CHECK-NEXT:    ret double [[COND]]
;
entry:
  %cmp = fcmp oeq double %a, -0.000000e+00
  %cond = select i1 %cmp, double 1.000000e+00, double 0.000000e+00
  store double %cond, ptr addrspace(5) null, align 8
  %load = load double, ptr addrspace(5) null, align 8
  %add.i = fadd double %load, 0.000000e+00
  ret double %add.i
}

attributes #0 = { "denormal-fp-math"="dynamic,dynamic" }
