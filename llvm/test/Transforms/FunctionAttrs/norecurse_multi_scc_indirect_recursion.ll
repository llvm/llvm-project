; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-attributes --check-globals all --version 5
; RUN: opt < %s -passes=norecurse-lto-inference -S | FileCheck %s

; This test includes a call graph with multiple SCCs. The purpose of this is
; to check that norecurse is not added when a function is part of non-singular
; SCC.
; There are three different SCCs in this test:
;  SCC#1:  f1, foo, bar, foo1, bar1
;  SCC#2:  bar2, bar3, bar4
;  SCC#3:  baz, fun
; None of these functions should be marked as norecurse

define internal void @bar1() {
; CHECK-LABEL: define internal void @bar1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @f1()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @f1()
  ret void
}

define internal void @f1() {
; CHECK-LABEL: define internal void @f1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @foo()
; CHECK-NEXT:    tail call void @bar2()
; CHECK-NEXT:    tail call void @baz()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @foo()
  tail call void @bar2()
  tail call void @baz()
  ret void
}

define dso_local  i32 @main() norecurse {
; CHECK: Function Attrs: norecurse
; CHECK-LABEL: define dso_local i32 @main(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @f1()
; CHECK-NEXT:    ret i32 0
;
entry:
  tail call void @f1()
  ret i32 0
}

define internal void @foo1() {
; CHECK-LABEL: define internal void @foo1() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bar1()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @bar1()
  ret void
}

define internal void @bar() {
; CHECK-LABEL: define internal void @bar() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @foo1()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @foo1()
  ret void
}

define internal void @foo() {
; CHECK-LABEL: define internal void @foo() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bar()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @bar()
  ret void
}

define internal void @bar4() {
; CHECK-LABEL: define internal void @bar4() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bar2()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @bar2()
  ret void
}

define internal void @bar2() {
; CHECK-LABEL: define internal void @bar2() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bar3()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @bar3()
  ret void
}

define internal void @bar3() {
; CHECK-LABEL: define internal void @bar3() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bar4()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @bar4()
  ret void
}

define internal void @fun() {
; CHECK-LABEL: define internal void @fun() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @baz()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @baz()
  ret void
}

define internal void @baz() {
; CHECK-LABEL: define internal void @baz() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @fun()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @fun()
  ret void
}
;.
; CHECK: attributes #[[ATTR0]] = { norecurse }
;.
