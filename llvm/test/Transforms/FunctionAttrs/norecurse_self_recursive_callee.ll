; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-attributes --version 5
; RUN: opt < %s -passes=function-attrs -S | FileCheck %s
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "aarch64-unknown-linux-gnu"

; This test includes a call graph with a self recursive function.
; The purpose of this is to check that norecurse is added to functions
; which have a self-recursive function in the call-chain.
; The call-chain in this test is as follows
; main -> bob -> callee1 -> callee2 -> callee3 -> callee4 -> callee5
; where callee5 is self recursive.

@x = dso_local global i32 4, align 4
@y = dso_local global i32 2, align 4

; Function Attrs: nofree noinline norecurse nounwind memory(readwrite, argmem: none) uwtable
define internal void @callee6() local_unnamed_addr #0 {
; CHECK: Function Attrs: nofree noinline norecurse nounwind memory(readwrite, argmem: none) uwtable
; CHECK-LABEL: define internal void @callee6(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load volatile i32, ptr @y, align 4, !tbaa [[TBAA8:![0-9]+]]
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP0]], 1
; CHECK-NEXT:    store volatile i32 [[INC]], ptr @y, align 4, !tbaa [[TBAA8]]
; CHECK-NEXT:    ret void
;
entry:
  %0 = load volatile i32, ptr @y, align 4, !tbaa !8
  %inc = add nsw i32 %0, 1
  store volatile i32 %inc, ptr @y, align 4, !tbaa !8
  ret void
}

; Function Attrs: nofree noinline nounwind uwtable
define internal void @callee5(i32 noundef %x) local_unnamed_addr #1 {
; CHECK: Function Attrs: nofree noinline nounwind uwtable
; CHECK-LABEL: define internal void @callee5(
; CHECK-SAME: i32 noundef [[X:%.*]]) local_unnamed_addr #[[ATTR1:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[X]], 0
; CHECK-NEXT:    br i1 [[CMP]], label %[[IF_THEN:.*]], label %[[IF_END:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    tail call void @callee5(i32 noundef [[X]])
; CHECK-NEXT:    br label %[[IF_END]]
; CHECK:       [[IF_END]]:
; CHECK-NEXT:    tail call void @callee6()
; CHECK-NEXT:    ret void
;
entry:
  %cmp = icmp sgt i32 %x, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @callee5(i32 noundef %x)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  tail call void @callee6()
  ret void
}

; Function Attrs: nofree noinline nounwind uwtable
define internal void @callee4() local_unnamed_addr #1 {
; CHECK: Function Attrs: nofree noinline norecurse nounwind uwtable
; CHECK-LABEL: define internal void @callee4(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR2:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load volatile i32, ptr @x, align 4, !tbaa [[TBAA8]]
; CHECK-NEXT:    tail call void @callee5(i32 noundef [[TMP0]])
; CHECK-NEXT:    ret void
;
entry:
  %0 = load volatile i32, ptr @x, align 4, !tbaa !8
  tail call void @callee5(i32 noundef %0)
  ret void
}

; Function Attrs: nofree noinline nounwind uwtable
define internal void @callee3() local_unnamed_addr #1 {
; CHECK: Function Attrs: nofree noinline norecurse nounwind uwtable
; CHECK-LABEL: define internal void @callee3(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @callee4()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @callee4()
  ret void
}

; Function Attrs: nofree noinline nounwind uwtable
define internal void @callee2() local_unnamed_addr #1 {
; CHECK: Function Attrs: nofree noinline norecurse nounwind uwtable
; CHECK-LABEL: define internal void @callee2(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @callee3()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @callee3()
  ret void
}

; Function Attrs: nofree noinline nounwind uwtable
define internal void @callee1() local_unnamed_addr #1 {
; CHECK: Function Attrs: nofree noinline norecurse nounwind uwtable
; CHECK-LABEL: define internal void @callee1(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @callee2()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @callee2()
  ret void
}

; Function Attrs: nofree noinline nounwind uwtable
define internal void @bob() local_unnamed_addr #1 {
; CHECK: Function Attrs: nofree noinline norecurse nounwind uwtable
; CHECK-LABEL: define internal void @bob(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR2]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @callee1()
; CHECK-NEXT:    ret void
;
entry:
  tail call void @callee1()
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #2 {
; CHECK: Function Attrs: nofree norecurse nounwind uwtable
; CHECK-LABEL: define dso_local noundef i32 @main(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR3:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bob()
; CHECK-NEXT:    ret i32 0
;
entry:
  tail call void @bob()
  ret i32 0
}

attributes #0 = { nofree noinline norecurse nounwind memory(readwrite, argmem: none) uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #1 = { nofree noinline nounwind uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }
attributes #2 = { nofree nounwind uwtable "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic" "target-features"="+fp-armv8,+neon,+outline-atomics,+v8a,-fmv" }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{i32 7, !"frame-pointer", i32 1}
!5 = !{i32 1, !"ThinLTO", i32 0}
!6 = !{i32 1, !"EnableSplitLTOUnit", i32 1}
!7 = !{!"clang version 21.0.0git (https://github.com/llvm/llvm-project db42345dc660329e34fd119fc8edab74521f7c06)"}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !10, i64 0}
!10 = !{!"omnipotent char", !11, i64 0}
!11 = !{!"Simple C/C++ TBAA"}

;.
; CHECK: [[TBAA8]] = !{[[META9:![0-9]+]], [[META9]], i64 0}
; CHECK: [[META9]] = !{!"int", [[META10:![0-9]+]], i64 0}
; CHECK: [[META10]] = !{!"omnipotent char", [[META11:![0-9]+]], i64 0}
; CHECK: [[META11]] = !{!"Simple C/C++ TBAA"}
;.
