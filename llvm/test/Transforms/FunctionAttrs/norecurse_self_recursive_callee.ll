; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --check-attributes --check-globals all --version 5
; RUN: opt < %s -passes=norecurse-lto-inference -S | FileCheck %s

; This test includes a call graph with a self recursive function.
; The purpose of this is to check that norecurse is added to functions
; which have a self-recursive function in the call-chain.
; The call-chain in this test is as follows
; main -> bob -> callee1 -> callee2
; where callee2 is self recursive.

@x = dso_local global i32 4, align 4
@y = dso_local global i32 2, align 4

;.
; CHECK: @x = dso_local global i32 4, align 4
; CHECK: @y = dso_local global i32 2, align 4
;.
define internal void @callee2() {
; CHECK: Function Attrs: norecurse
; CHECK-LABEL: define internal void @callee2(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load volatile i32, ptr @y, align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP0]], 1
; CHECK-NEXT:    store volatile i32 [[INC]], ptr @y, align 4
; CHECK-NEXT:    ret void
;
entry:
  %0 = load volatile i32, ptr @y, align 4
  %inc = add nsw i32 %0, 1
  store volatile i32 %inc, ptr @y, align 4
  ret void
}

define internal void @callee1(i32  %x) {
; CHECK-LABEL: define internal void @callee1(
; CHECK-SAME: i32 [[X:%.*]]) {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[X]], 0
; CHECK-NEXT:    br i1 [[CMP]], label %[[IF_THEN:.*]], label %[[IF_END:.*]]
; CHECK:       [[IF_THEN]]:
; CHECK-NEXT:    tail call void @callee1(i32 [[X]])
; CHECK-NEXT:    br label %[[IF_END]]
; CHECK:       [[IF_END]]:
; CHECK-NEXT:    tail call void @callee2()
; CHECK-NEXT:    ret void
;
entry:
  %cmp = icmp sgt i32 %x, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  tail call void @callee1(i32  %x)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  tail call void @callee2()
  ret void
}

define internal void @bob() {
; CHECK-LABEL: define internal void @bob() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = load volatile i32, ptr @x, align 4
; CHECK-NEXT:    tail call void @callee2(i32 [[TMP0]])
; CHECK-NEXT:    ret void
;
entry:
  %0 = load volatile i32, ptr @x, align 4
  tail call void @callee2(i32  %0)
  ret void
}

define dso_local i32 @main() norecurse {
; CHECK: Function Attrs: norecurse
; CHECK-LABEL: define dso_local i32 @main(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    tail call void @bob()
; CHECK-NEXT:    ret i32 0
;
entry:
  tail call void @bob()
  ret i32 0
}
;.
; CHECK: attributes #[[ATTR0]] = { norecurse }
;.
