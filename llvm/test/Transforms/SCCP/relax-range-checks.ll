; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt < %s -passes=sccp -S | FileCheck %s

define i1 @relax_range_check(i8 range(i8 0, 5) %x)  {
; CHECK-LABEL: define i1 @relax_range_check(
; CHECK-SAME: i8 range(i8 0, 5) [[X:%.*]]) {
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i8 [[X]], -3
; CHECK-NEXT:    [[RET:%.*]] = icmp uge i8 [[X]], 3
; CHECK-NEXT:    ret i1 [[RET]]
;
  %add = add i8 %x, -3
  %ret = icmp ult i8 %add, 2
  ret i1 %ret
}

define i1 @relax_range_check_highbits_check(i8 range(i8 2, 0) %x)  {
; CHECK-LABEL: define i1 @relax_range_check_highbits_check(
; CHECK-SAME: i8 range(i8 2, 0) [[X:%.*]]) {
; CHECK-NEXT:    [[AND:%.*]] = and i8 [[X]], -2
; CHECK-NEXT:    [[RET:%.*]] = icmp ult i8 [[X]], 4
; CHECK-NEXT:    ret i1 [[RET]]
;
  %and = and i8 %x, -2
  %ret = icmp eq i8 %and, 2
  ret i1 %ret
}

; Negative tests.

define i1 @relax_range_check_one_instruction(i8 range(i8 0, 5) %x)  {
; CHECK-LABEL: define i1 @relax_range_check_one_instruction(
; CHECK-SAME: i8 range(i8 0, 5) [[X:%.*]]) {
; CHECK-NEXT:    [[RET:%.*]] = icmp ult i8 [[X]], 2
; CHECK-NEXT:    ret i1 [[RET]]
;
  %ret = icmp ult i8 %x, 2
  ret i1 %ret
}

define i1 @relax_range_check_not_profitable(i8 range(i8 0, 6) %x)  {
; CHECK-LABEL: define i1 @relax_range_check_not_profitable(
; CHECK-SAME: i8 range(i8 0, 6) [[X:%.*]]) {
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i8 [[X]], -3
; CHECK-NEXT:    [[RET:%.*]] = icmp ult i8 [[ADD]], 2
; CHECK-NEXT:    ret i1 [[RET]]
;
  %add = add i8 %x, -3
  %ret = icmp ult i8 %add, 2
  ret i1 %ret
}
