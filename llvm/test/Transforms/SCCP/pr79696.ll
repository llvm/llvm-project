; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 4
; RUN: opt < %s -passes=ipsccp -S | FileCheck %s

; Tests from PR79696

define i1 @constant_range_xor(i64 %a) {
; CHECK-LABEL: define i1 @constant_range_xor(
; CHECK-SAME: i64 [[A:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[A]], 8192
; CHECK-NEXT:    br i1 [[CMP]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[CTLZ:%.*]] = call i64 @llvm.ctlz.i64(i64 [[A]], i1 true)
; CHECK-NEXT:    [[CONV:%.*]] = xor i64 [[CTLZ]], 63
; CHECK-NEXT:    ret i1 false
; CHECK:       else:
; CHECK-NEXT:    ret i1 false
;
entry:
  %cmp = icmp ugt i64 %a, 8192
  br i1 %cmp, label %then, label %else
then:
  %ctlz = call i64 @llvm.ctlz.i64(i64 %a, i1 true) ;[0, 50]
  %conv = xor i64 %ctlz, 63                        ;[13, 63]
  %cmp1 = icmp ult i64 %conv, 13
  ret i1 %cmp1
else:
  ret i1 false
}

define i1 @constant_range_xor_negative(i64 %a) {
; CHECK-LABEL: define i1 @constant_range_xor_negative(
; CHECK-SAME: i64 [[A:%.*]]) {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP:%.*]] = icmp ugt i64 [[A]], 8192
; CHECK-NEXT:    br i1 [[CMP]], label [[THEN:%.*]], label [[ELSE:%.*]]
; CHECK:       then:
; CHECK-NEXT:    [[CTLZ:%.*]] = call i64 @llvm.ctlz.i64(i64 [[A]], i1 true)
; CHECK-NEXT:    [[CONV:%.*]] = xor i64 [[CTLZ]], 62
; CHECK-NEXT:    [[CMP1:%.*]] = icmp ult i64 [[CONV]], 13
; CHECK-NEXT:    ret i1 [[CMP1]]
; CHECK:       else:
; CHECK-NEXT:    ret i1 false
;
entry:
  %cmp = icmp ugt i64 %a, 8192
  br i1 %cmp, label %then, label %else
then:
  %ctlz = call i64 @llvm.ctlz.i64(i64 %a, i1 true) ;[0, 50]
  %conv = xor i64 %ctlz, 62                        ;[12, 63]
  %cmp1 = icmp ult i64 %conv, 13
  ret i1 %cmp1
else:
  ret i1 false
}
