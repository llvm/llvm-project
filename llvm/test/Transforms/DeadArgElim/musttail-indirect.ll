; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: -p --function-signature
; RUN: opt -passes=deadargelim -S < %s | FileCheck %s

define internal i32 @test_caller(ptr %fptr, i32 %a, i32 %b) {
; CHECK-LABEL: define {{[^@]+}}@test_caller(ptr %fptr, i32 %a, i32 %b) {
; CHECK-NEXT:    %r = musttail call i32 @test(ptr %fptr, i32 %a, i32 poison)
; CHECK-NEXT:    ret i32 %r
;
  %r = musttail call i32 @test(ptr %fptr, i32 %a, i32 %b)
  ret i32 %r
}

define internal i32 @test(ptr %fptr, i32 %a, i32 %b) {
; CHECK-LABEL: define {{[^@]+}}@test(ptr %fptr, i32 %a, i32 %b) {
; CHECK-NEXT:    %r = musttail call i32 %fptr(ptr %fptr, i32 %a, i32 0)
; CHECK-NEXT:    ret i32 %r
;
  %r = musttail call i32 %fptr(ptr %fptr, i32 %a, i32 0)
  ret i32 %r
}

define internal i32 @direct_test() {
; CHECK-LABEL: define {{[^@]+}}@direct_test() {
; CHECK-NEXT:    %r = musttail call i32 @foo()
; CHECK-NEXT:    ret i32 %r
;
  %r = musttail call i32 @foo()
  ret i32 %r
}

declare i32 @foo()

define internal i32 @ping(i32 %x) {
; CHECK-LABEL: define {{[^@]+}}@ping(i32 %x) {
; CHECK-NEXT:    %r = musttail call i32 @pong(i32 %x)
; CHECK-NEXT:    ret i32 %r
;
  %r = musttail call i32 @pong(i32 %x)
  ret i32 %r
}

define internal i32 @pong(i32 %x) {
; CHECK-LABEL: define {{[^@]+}}@pong(i32 %x) {
; CHECK-NEXT:    %cond = icmp eq i32 %x, 2
; CHECK-NEXT:    br i1 %cond, label %yes, label %no
; CHECK:       yes:
; CHECK-NEXT:    %r1 = musttail call i32 @ping(i32 %x)
; CHECK-NEXT:    ret i32 %r1
; CHECK:       no:
; CHECK-NEXT:    %r2 = musttail call i32 @bar(i32 %x)
; CHECK-NEXT:    ret i32 %r2
;
  %cond = icmp eq i32 %x, 2
  br i1 %cond, label %yes, label %no

yes:
  %r1 = musttail call i32 @ping(i32 %x)
  ret i32 %r1
no:
  %r2 = musttail call i32 @bar(i32 %x)
  ret i32 %r2
}

declare i32 @bar(i32 %x)

