; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt < %s -p=globalopt -S | FileCheck %s

;; Test that when we are able to simplify uses of global variables with loads of
;; newly generated bool values, we transfer debuglocs over correctly.

target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@global = internal global i32 0
@global.1 = internal unnamed_addr global ptr null, align 8

define void @ham() !dbg !7 {
; CHECK-LABEL: define void @ham(
; CHECK-SAME: ) local_unnamed_addr !dbg [[DBG4:![0-9]+]] {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    [[LOAD_B:%.*]] = load i1, ptr @global, align 1, !dbg [[DBG6:![0-9]+]]
; CHECK-NEXT:    [[LOAD_B1:%.*]] = load i1, ptr @global, align 1, !dbg [[DBG6]]
; CHECK-NEXT:    [[LOAD:%.*]] = zext i1 [[LOAD_B1]] to i32, !dbg [[DBG6]]
; CHECK-NEXT:    store i1 [[LOAD_B]], ptr @global, align 1
; CHECK-NEXT:    ret void
;
bb:
  %load = load i32, ptr @global, align 4, !dbg !4
  store i32 %load, ptr @global, align 4
  ret void
}

define void @hoge() {
; CHECK-LABEL: define void @hoge() local_unnamed_addr {
; CHECK-NEXT:  [[BB:.*:]]
; CHECK-NEXT:    store i1 true, ptr @global, align 1
; CHECK-NEXT:    ret void
;
bb:
  store i32 1, ptr @global, align 4
  ret void
}

define void @bar() !dbg !13 {
; CHECK-LABEL: define void @bar(
; CHECK-SAME: ) local_unnamed_addr !dbg [[DBG8:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    store i1 true, ptr @global.1.init, align 1, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    ret void
;
entry:
  %call = tail call noalias nonnull dereferenceable(48) ptr @_Znwm(i64 48)
  store ptr %call, ptr @global.1, align 8, !dbg !14
  ret void
}

define void @pluto() !dbg !10 {
; CHECK-LABEL: define void @pluto(
; CHECK-SAME: ) local_unnamed_addr !dbg [[DBG10:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[GLOBAL_1_INIT_VAL:%.*]] = load i1, ptr @global.1.init, align 1, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[NOTINIT:%.*]] = xor i1 [[GLOBAL_1_INIT_VAL]], true, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    unreachable
;
entry:
  %0 = load ptr, ptr @global.1, align 8, !dbg !11
  %.not = icmp eq ptr %0, null, !dbg !12
  unreachable
}

declare ptr @_Znwm(i64)

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3}

!0 = distinct !DICompileUnit(language: DW_LANG_C11, file: !1, producer: "clang version 20.0.0git", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !2, retainedTypes: !2, globals: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "preserve-load-dbgloc.c", directory: "/tmp")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !DILocation(line: 10, column: 1, scope: !5)
!5 = distinct !DILexicalBlock(scope: !7, file: !6, line: 1524, column: 3)
!6 = !DIFile(filename: "preserve-load-dbgloc.c", directory: "/tmp")
!7 = distinct !DISubprogram(name: "ham", scope: !6, file: !6, line: 10, type: !8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!8 = distinct !DISubroutineType(types: !2)
!10 = distinct !DISubprogram(name: "pluto", scope: !6, file: !6, line: 20, type: !8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!11 = !DILocation(line: 20, column: 2, scope: !10)
!12 = !DILocation(line: 21, column: 3, scope: !10)
!13 = distinct !DISubprogram(name: "bar", scope: !6, file: !6, line: 230, type: !8, flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !2)
!14 = !DILocation(line: 11, column: 4, scope: !13)
;.
; CHECK: [[META0:![0-9]+]] = distinct !DICompileUnit(language: DW_LANG_C11, file: [[META1:![0-9]+]], producer: "{{.*}}clang version {{.*}}", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: [[META2:![0-9]+]], retainedTypes: [[META2]], globals: [[META2]], splitDebugInlining: false, nameTableKind: None)
; CHECK: [[META1]] = !DIFile(filename: "preserve-load-dbgloc.c", directory: {{.*}})
; CHECK: [[META2]] = !{}
; CHECK: [[DBG4]] = distinct !DISubprogram(name: "ham", scope: [[META1]], file: [[META1]], line: 10, type: [[META5:![0-9]+]], flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META2]])
; CHECK: [[META5]] = distinct !DISubroutineType(types: [[META2]])
; CHECK: [[DBG6]] = !DILocation(line: 10, column: 1, scope: [[META7:![0-9]+]])
; CHECK: [[META7]] = distinct !DILexicalBlock(scope: [[DBG4]], file: [[META1]], line: 1524, column: 3)
; CHECK: [[DBG8]] = distinct !DISubprogram(name: "bar", scope: [[META1]], file: [[META1]], line: 230, type: [[META5]], flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META2]])
; CHECK: [[DBG9]] = !DILocation(line: 11, column: 4, scope: [[DBG8]])
; CHECK: [[DBG10]] = distinct !DISubprogram(name: "pluto", scope: [[META1]], file: [[META1]], line: 20, type: [[META5]], flags: DIFlagPrototyped | DIFlagAllCallsDescribed, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: [[META0]], retainedNodes: [[META2]])
; CHECK: [[DBG11]] = !DILocation(line: 20, column: 2, scope: [[DBG10]])
; CHECK: [[DBG12]] = !DILocation(line: 21, column: 3, scope: [[DBG10]])
;.
