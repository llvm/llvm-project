; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+xtheadmemidx -lsr-preferred-addressing-mode=none %s -o - | FileCheck %s --check-prefixes=NONE
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+xtheadmemidx -lsr-preferred-addressing-mode=preindexed %s -o - | FileCheck %s --check-prefixes=PRE
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+xtheadmemidx -lsr-preferred-addressing-mode=postindexed %s -o - | FileCheck %s --check-prefixes=POST
; RUN: llc -mtriple=riscv64 -mattr=+m,+f,+d,+xtheadmemidx %s -o - | FileCheck %s --check-prefixes=PRE

define void @test(ptr %0) {
; NONE-LABEL: test:
; NONE:       # %bb.0: # %entry
; NONE-NEXT:    addi a1, a0, 2047
; NONE-NEXT:    addi a1, a1, 1953
; NONE-NEXT:  .LBB0_1: # %loop
; NONE-NEXT:    # =>This Inner Loop Header: Depth=1
; NONE-NEXT:    lw a2, 0(a0)
; NONE-NEXT:    addi a2, a2, 1
; NONE-NEXT:    th.swia a2, (a0), 4, 0
; NONE-NEXT:    bne a0, a1, .LBB0_1
; NONE-NEXT:  # %bb.2: # %exit
; NONE-NEXT:    ret
;
; PRE-LABEL: test:
; PRE:       # %bb.0: # %entry
; PRE-NEXT:    addi a1, a0, -4
; PRE-NEXT:    addi a0, a0, 2047
; PRE-NEXT:    addi a0, a0, 1949
; PRE-NEXT:  .LBB0_1: # %loop
; PRE-NEXT:    # =>This Inner Loop Header: Depth=1
; PRE-NEXT:    th.lwib a2, (a1), 4, 0
; PRE-NEXT:    addi a2, a2, 1
; PRE-NEXT:    sw a2, 0(a1)
; PRE-NEXT:    bne a1, a0, .LBB0_1
; PRE-NEXT:  # %bb.2: # %exit
; PRE-NEXT:    ret
;
; POST-LABEL: test:
; POST:       # %bb.0: # %entry
; POST-NEXT:    addi a1, a0, 2047
; POST-NEXT:    addi a1, a1, 1953
; POST-NEXT:  .LBB0_1: # %loop
; POST-NEXT:    # =>This Inner Loop Header: Depth=1
; POST-NEXT:    lw a2, 0(a0)
; POST-NEXT:    addi a2, a2, 1
; POST-NEXT:    th.swia a2, (a0), 4, 0
; POST-NEXT:    bne a0, a1, .LBB0_1
; POST-NEXT:  # %bb.2: # %exit
; POST-NEXT:    ret
entry:
  br label %loop

exit:
  ret void

loop:
  %4 = phi i64 [ 0, %entry ], [ %8, %loop ]
  %5 = getelementptr inbounds nuw i32, ptr %0, i64 %4
  %6 = load i32, ptr %5, align 4
  %7 = add nsw i32 %6, 1
  store i32 %7, ptr %5, align 4
  %8 = add nuw nsw i64 %4, 1
  %9 = icmp eq i64 %8, 1000
  br i1 %9, label %exit, label %loop
}
