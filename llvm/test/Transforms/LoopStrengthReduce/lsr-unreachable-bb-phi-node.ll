; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -loop-reduce -S -lsr-term-fold | FileCheck %s

; This test used to crash due to matchSimpleRecurrence matching the simple
; recurrence in pn-loop when evaluating unrelated-loop. Since unrelated-loop
; cannot jump to pn-node isAlmostDeadIV panics.
define void @phi_node_different_bb() {
; CHECK-LABEL: @phi_node_different_bb(
; CHECK-NEXT:    br label [[PN_LOOP:%.*]]
; CHECK:       pn-loop:
; CHECK-NEXT:    [[TMP1:%.*]] = phi i32 [ 1, [[TMP0:%.*]] ], [ [[TMP2:%.*]], [[PN_LOOP]] ]
; CHECK-NEXT:    [[TMP2]] = add i32 [[TMP1]], 1
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ugt i32 [[TMP2]], 1
; CHECK-NEXT:    br i1 [[TMP3]], label [[PN_LOOP]], label [[UNRELATED_LOOP_PREHEADER:%.*]]
; CHECK:       unrelated-loop.preheader:
; CHECK-NEXT:    br label [[UNRELATED_LOOP:%.*]]
; CHECK:       unrelated-loop:
; CHECK-NEXT:    [[TMP4:%.*]] = icmp eq i32 [[TMP2]], 0
; CHECK-NEXT:    br i1 [[TMP4]], label [[END:%.*]], label [[UNRELATED_LOOP]]
; CHECK:       end:
; CHECK-NEXT:    ret void
;
  br label %pn-loop

pn-loop:                                          ; preds = %pn-loop, %0
  %1 = phi i32 [ 1, %0 ], [ %2, %pn-loop ]
  %2 = add i32 %1, 1
  %3 = icmp ugt i32 %2, 1
  br i1 %3, label %pn-loop, label %unrelated-loop.preheader

unrelated-loop.preheader:                         ; preds = %pn-loop
  br label %unrelated-loop

unrelated-loop:                                   ; preds = %unrelated-loop, %unrelated-loop.preheader
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %end, label %unrelated-loop

end:                                              ; preds = %unrelated-loop
  ret void
}
