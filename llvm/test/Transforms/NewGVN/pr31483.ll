; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=newgvn -S | FileCheck %s
target datalayout = "E-m:e-i64:64-n32:64"

@global = external hidden unnamed_addr constant [11 x i8], align 1
;; Ensure we do not believe the indexing increments are unreachable due to incorrect memory
;; equivalence detection.  In PR31483, we were deleting those blocks as unreachable
; Function Attrs: nounwind
define signext i32 @ham(ptr %arg, ptr %arg1) #0 {
; CHECK-LABEL: @ham(
; CHECK-NEXT:  bb:
; CHECK-NEXT:    [[TMP:%.*]] = alloca ptr, align 8
; CHECK-NEXT:    store ptr %arg1, ptr [[TMP]], align 8
; CHECK-NEXT:    br label %bb2
; CHECK:       bb2:
; CHECK-NEXT:    [[TMP3:%.*]] = phi ptr [ %arg, %bb ], [ %tmp7, %bb22 ]
; CHECK-NEXT:    [[TMP4:%.*]] = load i8, ptr [[TMP3]], align 1
; CHECK-NEXT:    [[TMP5:%.*]] = icmp ne i8 [[TMP4]], 0
; CHECK-NEXT:    br i1 [[TMP5]], label %bb6, label %bb23
; CHECK:       bb6:
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds i8, ptr [[TMP3]], i32 1
; CHECK-NEXT:    [[TMP9:%.*]] = zext i8 [[TMP4]] to i32
; CHECK-NEXT:    switch i32 [[TMP9]], label %bb22 [
; CHECK-NEXT:    i32 115, label %bb10
; CHECK-NEXT:    i32 105, label %bb16
; CHECK-NEXT:    i32 99, label %bb16
; CHECK-NEXT:    ]
; CHECK:       bb10:
; CHECK-NEXT:    [[TMP11:%.*]] = load ptr, ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds i8, ptr [[TMP11]], i64 8
; CHECK-NEXT:    store ptr [[TMP12]], ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP14:%.*]] = load ptr, ptr [[TMP11]], align 8
; CHECK-NEXT:    [[TMP15:%.*]] = call signext i32 (ptr, ...) @zot(ptr @global, ptr [[TMP14]])
; CHECK-NEXT:    br label %bb22
; CHECK:       bb16:
; CHECK-NEXT:    [[TMP17:%.*]] = load ptr, ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP18:%.*]] = getelementptr inbounds i8, ptr [[TMP17]], i64 8
; CHECK-NEXT:    store ptr [[TMP18]], ptr [[TMP]], align 8
; CHECK-NEXT:    [[TMP19:%.*]] = getelementptr inbounds i8, ptr [[TMP17]], i64 4
; CHECK-NEXT:    br label %bb22
; CHECK:       bb22:
; CHECK-NEXT:    br label %bb2
; CHECK:       bb23:
; CHECK-NEXT:    call void @llvm.va_end(ptr [[TMP]])
; CHECK-NEXT:    ret i32 undef
;
bb:
  %tmp = alloca ptr, align 8
  store ptr %arg1, ptr %tmp, align 8
  br label %bb2

bb2:                                              ; preds = %bb22, %bb
  %tmp3 = phi ptr [ %arg, %bb ], [ %tmp7, %bb22 ]
  %tmp4 = load i8, ptr %tmp3, align 1
  %tmp5 = icmp ne i8 %tmp4, 0
  br i1 %tmp5, label %bb6, label %bb23

bb6:                                              ; preds = %bb2
  %tmp7 = getelementptr inbounds i8, ptr %tmp3, i32 1
  %tmp8 = load i8, ptr %tmp3, align 1
  %tmp9 = zext i8 %tmp8 to i32
  switch i32 %tmp9, label %bb22 [
  i32 115, label %bb10
  i32 105, label %bb16
  i32 99, label %bb16
  ]

bb10:                                             ; preds = %bb6
  %tmp11 = load ptr, ptr %tmp, align 8
  %tmp12 = getelementptr inbounds i8, ptr %tmp11, i64 8
  store ptr %tmp12, ptr %tmp, align 8
  %tmp14 = load ptr, ptr %tmp11, align 8
  %tmp15 = call signext i32 (ptr, ...) @zot(ptr @global, ptr %tmp14)
  br label %bb22

bb16:                                             ; preds = %bb6, %bb6
  %tmp17 = load ptr, ptr %tmp, align 8
  %tmp18 = getelementptr inbounds i8, ptr %tmp17, i64 8
  store ptr %tmp18, ptr %tmp, align 8
  %tmp19 = getelementptr inbounds i8, ptr %tmp17, i64 4
  %tmp21 = load i32, ptr %tmp19, align 4
  br label %bb22

bb22:                                             ; preds = %bb16, %bb10, %bb6
  br label %bb2

bb23:                                             ; preds = %bb2
  call void @llvm.va_end(ptr %tmp)
  ret i32 undef
}

declare signext i32 @zot(ptr, ...) #1

; Function Attrs: nounwind
declare void @llvm.va_end(ptr) #2

attributes #0 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "frame-pointer"="all" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="ppc64" "target-features"="+altivec,-bpermd,-crypto,-direct-move,-extdiv,-power8-vector,-vsx" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "frame-pointer"="all" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="ppc64" "target-features"="+altivec,-bpermd,-crypto,-direct-move,-extdiv,-power8-vector,-vsx" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

