; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 5
; RUN: opt -S -passes=loop-fusion < %s 2>&1 | FileCheck %s
define i32 @foo() {
; CHECK-LABEL: define i32 @foo() {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SUM1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[SUM2:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I1:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, ptr [[RETVAL]], align 4
; CHECK-NEXT:    store i32 0, ptr [[SUM1]], align 4
; CHECK-NEXT:    store i32 0, ptr [[SUM2]], align 4
; CHECK-NEXT:    store i32 0, ptr [[I]], align 4
; CHECK-NEXT:    br label %[[FOR_COND:.*]]
; CHECK:       [[FOR_COND]]:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr [[I]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP0]], 10
; CHECK-NEXT:    br i1 [[CMP]], label %[[FOR_BODY:.*]], label %[[FOR_END:.*]]
; CHECK:       [[FOR_BODY]]:
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr [[I]], align 4
; CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[SUM1]], align 4
; CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP2]], [[TMP1]]
; CHECK-NEXT:    store i32 [[ADD]], ptr [[SUM1]], align 4
; CHECK-NEXT:    br label %[[FOR_INC:.*]]
; CHECK:       [[FOR_INC]]:
; CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[I]], align 4
; CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP3]], 1
; CHECK-NEXT:    store i32 [[INC]], ptr [[I]], align 4
; CHECK-NEXT:    br label %[[FOR_COND]]
; CHECK:       [[FOR_END]]:
; CHECK-NEXT:    store i32 0, ptr [[I1]], align 4
; CHECK-NEXT:    br label %[[FOR_COND2:.*]]
; CHECK:       [[FOR_COND2]]:
; CHECK-NEXT:    [[TMP4:%.*]] = load i32, ptr [[I1]], align 4
; CHECK-NEXT:    [[CMP3:%.*]] = icmp slt i32 [[TMP4]], 10
; CHECK-NEXT:    br i1 [[CMP3]], label %[[FOR_BODY4:.*]], label %[[FOR_END8:.*]]
; CHECK:       [[FOR_BODY4]]:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[I1]], align 4
; CHECK-NEXT:    [[TMP6:%.*]] = load i32, ptr [[I1]], align 4
; CHECK-NEXT:    [[MUL:%.*]] = mul nsw i32 [[TMP5]], [[TMP6]]
; CHECK-NEXT:    [[TMP7:%.*]] = load i32, ptr [[SUM2]], align 4
; CHECK-NEXT:    [[ADD5:%.*]] = add nsw i32 [[TMP7]], [[MUL]]
; CHECK-NEXT:    store i32 [[ADD5]], ptr [[SUM2]], align 4
; CHECK-NEXT:    br label %[[FOR_INC6:.*]]
; CHECK:       [[FOR_INC6]]:
; CHECK-NEXT:    [[TMP8:%.*]] = load i32, ptr [[I1]], align 4
; CHECK-NEXT:    [[INC7:%.*]] = add nsw i32 [[TMP8]], 1
; CHECK-NEXT:    store i32 [[INC7]], ptr [[I1]], align 4
; CHECK-NEXT:    br label %[[FOR_COND2]]
; CHECK:       [[FOR_END8]]:
; CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[SUM1]], align 4
; CHECK-NEXT:    [[TMP10:%.*]] = load i32, ptr [[SUM2]], align 4
; CHECK-NEXT:    ret i32 0
;
entry:
  %retval = alloca i32, align 4
  %sum1 = alloca i32, align 4
  %sum2 = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  store i32 0, ptr %retval, align 4
  store i32 0, ptr %sum1, align 4
  store i32 0, ptr %sum2, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:
  %0 = load i32, ptr %i, align 4
  %cmp = icmp slt i32 %0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:
  %1 = load i32, ptr %i, align 4
  %2 = load i32, ptr %sum1, align 4
  %add = add nsw i32 %2, %1
  store i32 %add, ptr %sum1, align 4
  br label %for.inc

for.inc:
  %3 = load i32, ptr %i, align 4
  %inc = add nsw i32 %3, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond

for.end:
  store i32 0, ptr %i1, align 4
  br label %for.cond2

for.cond2:
  %4 = load i32, ptr %i1, align 4
  %cmp3 = icmp slt i32 %4, 10
  br i1 %cmp3, label %for.body4, label %for.end8

for.body4:
  %5 = load i32, ptr %i1, align 4
  %6 = load i32, ptr %i1, align 4
  %mul = mul nsw i32 %5, %6
  %7 = load i32, ptr %sum2, align 4
  %add5 = add nsw i32 %7, %mul
  store i32 %add5, ptr %sum2, align 4
  br label %for.inc6

for.inc6:
  %8 = load i32, ptr %i1, align 4
  %inc7 = add nsw i32 %8, 1
  store i32 %inc7, ptr %i1, align 4
  br label %for.cond2

for.end8:
  %9 = load i32, ptr %sum1, align 4
  %10 = load i32, ptr %sum2, align 4
  ret i32 0
}

