; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 6
; RUN: opt -S -mtriple amdgcn-unknown-amdhsa -mcpu=gfx1030 -passes=amdgpu-codegenprepare < %s | FileCheck %s

; Test that mbcnt.lo(~0, 0) IS optimized on wave32 with bitmask when work group size allows even wave distribution
define i32 @test_mbcnt_lo_wave32_non_matching_wgs() !reqd_work_group_size !0 {
; CHECK-LABEL: define i32 @test_mbcnt_lo_wave32_non_matching_wgs(
; CHECK-SAME: ) #[[ATTR0:[0-9]+]] !reqd_work_group_size [[META0:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[TMP0:%.*]] = call {{.*}} i32 @llvm.amdgcn.workitem.id.x()
; CHECK-NEXT:    [[A:%.*]] = and i32 [[TMP0]], 31
; CHECK-NEXT:    ret i32 [[A]]
;
entry:
  %a = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
  ret i32 %a
}

; Test that mbcnt.lo(~0, 0) is NOT optimized on wave32 when no reqd_work_group_size is specified
define i32 @test_mbcnt_lo_wave32_no_wgs() {
; CHECK-LABEL: define i32 @test_mbcnt_lo_wave32_no_wgs(
; CHECK-SAME: ) #[[ATTR0]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
; CHECK-NEXT:    ret i32 [[A]]
;
entry:
  %a = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 0)
  ret i32 %a
}

; Test that mbcnt.lo with non-all-ones first arg is NOT optimized
define i32 @test_mbcnt_lo_wave32_partial_mask() !reqd_work_group_size !1 {
; CHECK-LABEL: define i32 @test_mbcnt_lo_wave32_partial_mask(
; CHECK-SAME: ) #[[ATTR0]] !reqd_work_group_size [[META1:![0-9]+]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 15, i32 0)
; CHECK-NEXT:    ret i32 [[A]]
;
entry:
  %a = call i32 @llvm.amdgcn.mbcnt.lo(i32 15, i32 0)
  ret i32 %a
}

; Test that mbcnt.lo with non-zero second arg is NOT optimized
define i32 @test_mbcnt_lo_wave32_non_zero_base() !reqd_work_group_size !1 {
; CHECK-LABEL: define i32 @test_mbcnt_lo_wave32_non_zero_base(
; CHECK-SAME: ) #[[ATTR0]] !reqd_work_group_size [[META1]] {
; CHECK-NEXT:  [[ENTRY:.*:]]
; CHECK-NEXT:    [[A:%.*]] = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 5)
; CHECK-NEXT:    ret i32 [[A]]
;
entry:
  %a = call i32 @llvm.amdgcn.mbcnt.lo(i32 -1, i32 5)
  ret i32 %a
}

!0 = !{i32 48, i32 1, i32 1}  ; Work group size 48 != wave size 32
!1 = !{i32 32, i32 1, i32 1}  ; Work group size 32 == wave size 32

; Function Attrs: nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.mbcnt.lo(i32, i32) #0

attributes #0 = { nounwind readnone speculatable willreturn }
;.
; CHECK: [[META0]] = !{i32 48, i32 1, i32 1}
; CHECK: [[META1]] = !{i32 32, i32 1, i32 1}
;.
