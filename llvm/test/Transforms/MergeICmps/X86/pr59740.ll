; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -passes=mergeicmps -verify-dom-info -S -mtriple=x86_64-unknown-unknown | FileCheck %s

%struct.S = type { i8, i8, i8, i8 }

define noundef i1 @_Z2neR1SS0_(ptr nocapture readonly align 1 dereferenceable(4) %s0, ptr nocapture readonly align 1 dereferenceable(4) %s1) {
; CHECK-LABEL: @_Z2neR1SS0_(
; CHECK-NEXT:  "bb0+bb1+bb2+bb3":
; CHECK-NEXT:    [[MEMCMP:%.*]] = call i32 @memcmp(ptr [[S0:%.*]], ptr [[S1:%.*]], i64 4)
; CHECK-NEXT:    [[TMP0:%.*]] = icmp ne i32 [[MEMCMP]], 0
; CHECK-NEXT:    br label [[BB4:%.*]]
; CHECK:       bb4:
; CHECK-NEXT:    ret i1 [[TMP0]]
;
bb0:
  %v0 = load i8, ptr %s0, align 1
  %v1 = load i8, ptr %s1, align 1
  %cmp0 = icmp eq i8 %v0, %v1
  br i1 %cmp0, label %bb1, label %bb4

bb1:                                              ; preds = %bb0
  %s2 = getelementptr inbounds %struct.S, ptr %s0, i64 0, i32 1
  %v2 = load i8, ptr %s2, align 1
  %s3 = getelementptr inbounds %struct.S, ptr %s1, i64 0, i32 1
  %v3 = load i8, ptr %s3, align 1
  %cmp1 = icmp eq i8 %v2, %v3
  br i1 %cmp1, label %bb2, label %bb4

bb2:                                             ; preds = %bb1
  %s4 = getelementptr inbounds %struct.S, ptr %s0, i64 0, i32 2
  %v4 = load i8, ptr %s4, align 1
  %s5 = getelementptr inbounds %struct.S, ptr %s1, i64 0, i32 2
  %v5 = load i8, ptr %s5, align 1
  %cmp2 = icmp eq i8 %v4, %v5
  br i1 %cmp2, label %bb3, label %bb4

bb3:                                               ; preds = %bb2
  %s6 = getelementptr inbounds %struct.S, ptr %s0, i64 0, i32 3
  %v6 = load i8, ptr %s6, align 1
  %s7 = getelementptr inbounds %struct.S, ptr %s1, i64 0, i32 3
  %v7 = load i8, ptr %s7, align 1
  %cmp3 = icmp ne i8 %v6, %v7
  br label %bb4

bb4:                                               ; preds = %bb0, %bb1, %bb2, %bb3
  %cmp = phi i1 [ true, %bb0 ], [ true, %bb1 ], [ true, %bb2 ], [ %cmp3, %bb3 ]
  ret i1 %cmp
}

; Negative test: Incorrect const value in PHI node
define noundef i1 @cmp_ne_incorrect_const(ptr nocapture readonly align 1 dereferenceable(4) %s0, ptr nocapture readonly align 1 dereferenceable(4) %s1) {
; CHECK-LABEL: @cmp_ne_incorrect_const(
; CHECK-NEXT:  bb0:
; CHECK-NEXT:    [[V0:%.*]] = load i8, ptr [[S0:%.*]], align 1
; CHECK-NEXT:    [[V1:%.*]] = load i8, ptr [[S1:%.*]], align 1
; CHECK-NEXT:    [[CMP0:%.*]] = icmp eq i8 [[V0]], [[V1]]
; CHECK-NEXT:    br i1 [[CMP0]], label [[BB1:%.*]], label [[BB2:%.*]]
; CHECK:       bb1:
; CHECK-NEXT:    [[S6:%.*]] = getelementptr inbounds [[STRUCT_S:%.*]], ptr [[S0]], i64 0, i32 1
; CHECK-NEXT:    [[V6:%.*]] = load i8, ptr [[S6]], align 1
; CHECK-NEXT:    [[S7:%.*]] = getelementptr inbounds [[STRUCT_S]], ptr [[S1]], i64 0, i32 1
; CHECK-NEXT:    [[V7:%.*]] = load i8, ptr [[S7]], align 1
; CHECK-NEXT:    [[CMP3:%.*]] = icmp ne i8 [[V6]], [[V7]]
; CHECK-NEXT:    br label [[BB2]]
; CHECK:       bb2:
; CHECK-NEXT:    [[CMP:%.*]] = phi i1 [ false, [[BB0:%.*]] ], [ [[CMP3]], [[BB1]] ]
; CHECK-NEXT:    ret i1 [[CMP]]
;
bb0:
  %v0 = load i8, ptr %s0, align 1
  %v1 = load i8, ptr %s1, align 1
  %cmp0 = icmp eq i8 %v0, %v1
  br i1 %cmp0, label %bb1, label %bb2

bb1:                                               ; preds = %bb0
  %s6 = getelementptr inbounds %struct.S, ptr %s0, i64 0, i32 1
  %v6 = load i8, ptr %s6, align 1
  %s7 = getelementptr inbounds %struct.S, ptr %s1, i64 0, i32 1
  %v7 = load i8, ptr %s7, align 1
  %cmp3 = icmp ne i8 %v6, %v7
  br label %bb2

bb2:                                               ; preds = %bb0, %bb1
  %cmp = phi i1 [ false, %bb0 ], [ %cmp3, %bb1 ]
  ret i1 %cmp
}
